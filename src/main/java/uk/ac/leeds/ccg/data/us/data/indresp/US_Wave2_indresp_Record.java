/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.data.us.data.indresp;
public class US_Wave2_indresp_Record extends US_indresp_Record {
protected short AGE12;
protected short AGE_DV;
protected short AIDHRS_BH;
protected byte AIDHU1A;
protected byte AIDHU2A;
protected short AIDHUA;
protected short AIDHUB;
protected short AIDHUC;
protected byte AIDPL1;
protected byte AIDPL2;
protected short BIRTHY;
protected short BUNO;
protected short BUTYPE;
protected short CASMIN;
protected byte CBAGE;
protected short CJSBGD;
protected short CJSBGM;
protected short CJSBGY;
protected short CJSBGY4;
protected short CJSBLY;
protected int CJSTEN;
protected double CJSWK9;
protected double DISTMOV;
protected short DOBY;
protected byte DRIVE;
protected short EAAGE;
protected short EDENDM;
protected short EDENDY;
protected short EDENDY4;
protected short EDLYR;
protected short EDNEW;
protected short EDNEW1;
protected short EDNEW2;
protected short EDNEW3;
protected short EDNEW4;
protected byte EDNEWH;
protected byte EDNEWW;
protected short EDTYPE;
protected short EDTYPE_BH;
protected short F101;
protected short F102;
protected short F103;
protected short F104;
protected short F105;
protected byte F106;
protected byte F116;
protected byte F117;
protected short F118;
protected short F119;
protected short F120;
protected short F121;
protected short F122;
protected short F123;
protected byte F124;
protected short F131;
protected short F132;
protected short F133;
protected byte F134;
protected short F135;
protected short F136;
protected short F137;
protected short F138;
protected short F139;
protected short F140;
protected short F141;
protected short F151;
protected byte F152;
protected short F153;
protected short F154;
protected short F155;
protected short F156;
protected short F157;
protected byte F158;
protected byte F159;
protected byte FAIR1;
protected byte FAIR2;
protected short FENOW_BH;
protected short FETYPE;
protected double FIHHMN;
protected short FIHHMNI;
protected double FIMNB;
protected boolean FIMNBI;
protected double FIMNI;
protected boolean FIMNII;
protected boolean FIMNLI;
protected double FIMNNL;
protected boolean FIMNNLI;
protected double FIMNP;
protected boolean FIMNPI;
protected double FIMNT;
protected boolean FIMNTHI;
protected boolean FIMNTI;
protected short FISITC;
protected short FISITX;
protected boolean FIYEARI;
protected double FIYR;
protected double FIYRB;
protected boolean FIYRBI;
protected short FIYRDI;
protected short FIYRDII;
protected double FIYRI;
protected boolean FIYRII;
protected double FIYRL;
protected boolean FIYRLI;
protected double FIYRNL;
protected boolean FIYRNLI;
protected double FIYRP;
protected boolean FIYRPI;
protected double FIYRT;
protected boolean FIYRTI;
protected int FNPID_BH;
protected short FTEXA;
protected short FTEXA1;
protected short FTEXA2;
protected short FTEXA3;
protected short FTEXA4;
protected short FTEXA5;
protected short FTEXA6;
protected short FTEXAV;
protected double FTEXAW;
protected short FTEXB;
protected short FTEXB1;
protected short FTEXB2;
protected short FTEXB3;
protected short FTEXB4;
protected short FTEXB5;
protected short FTEXB6;
protected short FTEXBV;
protected double FTEXBW;
protected short FTEXC;
protected short FTEXC1;
protected short FTEXC2;
protected short FTEXC3;
protected short FTEXC4;
protected short FTEXC5;
protected short FTEXC6;
protected short FTEXCV;
protected double FTEXCW;
protected short FTEXHH;
protected byte FTHH;
protected byte FTHH1;
protected byte FTHH11;
protected byte FTHH12;
protected byte FTHH13;
protected byte FTHH14;
protected byte FTHH15;
protected byte FTHH16;
protected short FTHH1V;
protected double FTHH1W;
protected byte FTHH2;
protected byte FTHH21;
protected byte FTHH22;
protected byte FTHH23;
protected byte FTHH24;
protected byte FTHH25;
protected byte FTHH26;
protected short FTHH2V;
protected double FTHH2W;
protected byte FTHH3;
protected byte FTHH31;
protected byte FTHH32;
protected byte FTHH33;
protected byte FTHH34;
protected byte FTHH35;
protected byte FTHH36;
protected short FTHH3V;
protected double FTHH3W;
protected byte HGEMP;
protected short HGR2R;
protected short HGRA;
protected boolean HGSEX;
protected short HHCH12;
protected short HHMEM;
protected short HHSIZE;
protected short HHTYPE;
protected int HID;
protected short HIQUALB_DV;
protected short HL2GP;
protected short HLCK;
protected short HLCKA;
protected short HLCKAN;
protected short HLCKB;
protected short HLCKBN;
protected short HLCKC;
protected short HLCKCN;
protected short HLCKD;
protected short HLCKDN;
protected short HLCKE;
protected short HLCKEN;
protected short HLCKF;
protected short HLCKFN;
protected short HLCKG;
protected short HLCKGN;
protected short HLCKH;
protected short HLCKHN;
protected short HLDSBL;
protected short HLENDW;
protected byte HLLT;
protected short HLLTA;
protected short HLLTB;
protected short HLLTC;
protected short HLLTD;
protected short HLLTE;
protected byte HLLTW;
protected short HLLTWA;
protected short HLPRB;
protected short HLPRBA;
protected short HLPRBB;
protected short HLPRBC;
protected short HLPRBD;
protected short HLPRBE;
protected short HLPRBF;
protected short HLPRBG;
protected short HLPRBH;
protected short HLPRBI;
protected short HLPRBJ;
protected short HLPRBK;
protected short HLPRBL;
protected short HLPRBM;
protected short HLSTAT;
protected short HLSV;
protected short HLSVA;
protected short HLSVAF;
protected short HLSVAN;
protected short HLSVB;
protected short HLSVBF;
protected short HLSVBN;
protected short HLSVC;
protected short HLSVCF;
protected short HLSVCN;
protected short HLSVD;
protected short HLSVDF;
protected short HLSVDN;
protected short HLSVE;
protected short HLSVEF;
protected short HLSVEN;
protected short HLSVF;
protected short HLSVFF;
protected short HLSVFN;
protected short HLSVG;
protected short HLSVGF;
protected short HLSVGN;
protected short HLSVH;
protected byte HLSVHF;
protected byte HLSVHN;
protected short HLSVI;
protected short HLSVIF;
protected short HLSVIN;
protected short HLSVJ;
protected short HLSVJF;
protected short HLSVJN;
protected short HLSVK;
protected short HLSVKF;
protected short HLSVKN;
protected byte HLZEST;
protected boolean HOH;
protected short HOSP;
protected short HOSPCH;
protected short HOSPD;
protected short HOSPNHS;
protected short HOWLNG;
protected byte HUBOSS;
protected byte HUDOES;
protected short HUNURS;
protected byte HURUNS;
protected byte HUSITS2;
protected short HUXPCH;
protected short IENDDATHM;
protected byte IMPEVENT1;
protected byte IMPEVENT1S;
protected byte IMPEVENT2;
protected byte IMPEVENT2S;
protected byte IMPEVENT3;
protected byte IMPEVENT3S;
protected byte IMPEVENT4;
protected byte IMPEVENT4S;
protected short IODC;
protected short ISCED;
protected short ISTRTDATHM;
protected short ISTRTDATY;
protected short IV2;
protected short IV4;
protected short IV5;
protected short IV6A;
protected short IV6B;
protected short IV6C;
protected short IV6D;
protected short IV6E;
protected short IV6F;
protected short IV7;
protected byte IVCOOP_BH;
protected byte IVDA;
protected byte IVDB;
protected byte IVDC;
protected byte IVDD;
protected short IVEA;
protected short IVEB;
protected short IVEC;
protected short IVED;
protected short IVFA;
protected short IVFB;
protected short IVFC;
protected short IVFD;
protected byte IVIOW1;
protected short IVJA;
protected short IVJB;
protected short IVJC;
protected short IVJD;
protected byte IVLA;
protected byte IVLB;
protected byte IVLC;
protected byte IVLD;
protected short IVLYR;
protected short IVMA;
protected short IVMB;
protected short IVMC;
protected short IVMD;
protected short IVSC;
protected byte IVVA;
protected byte IVVB;
protected byte IVVC;
protected byte IVVD;
protected short J2PAY_BH;
protected short J2SOC90_CC;
protected short JBBGLY;
protected short JBCHC1;
protected short JBCHC2;
protected short JBCHC3;
protected double JBCSSF;
protected double JBCSSM;
protected short JBED;
protected short JBED1;
protected short JBED2;
protected short JBED3;
protected short JBED4;
protected short JBED5;
protected byte JBEDH;
protected byte JBEDW;
protected short JBGOLD;
protected double JBHGS;
protected short JBHHA;
protected short JBHHB;
protected short JBHHC;
protected short JBHHD;
protected short JBHHE;
protected short JBHHF;
protected short JBHRLK;
protected String JBISCO_CC;
protected short JBNSSEC_DV;
protected short JBOFFY_BH;
protected short JBONUS;
protected short JBOPPS;
protected short JBPEN;
protected short JBPENM;
protected short JBPL_BH;
protected short JBRGSC_DV;
protected short JBRISE;
protected short JBSAT1;
protected short JBSAT2;
protected short JBSAT3;
protected short JBSAT4;
protected short JBSAT5;
protected short JBSAT6;
protected short JBSAT7;
protected short JBSAT_BH;
protected short JBSECT_BH;
protected short JBSEC_BH;
protected short JBSEG_DV;
protected short JBSIC;
protected short JBSOC90LY_CC;
protected short JBSOC90_CC;
protected short JBSTATL;
protected short JBSTATT;
protected short JBTERM;
protected short JBTIME;
protected short JBTTWM;
protected short JBUB;
protected short JBUBY;
protected double JLCSSF;
protected double JLCSSM;
protected short JLGOLD;
protected double JLHGS;
protected short JLID;
protected String JLISCO_CC;
protected short JLNSSEC_DV;
protected short JLRGSC_DV;
protected short JLSEC;
protected short JLSEG_DV;
protected short JLSIC;
protected short JLSOC90_CC;
protected short JLYID;
protected short JNMNTH;
protected short JNYEAR;
protected byte JSBGM;
protected short JSBGY4;
protected short JSHRLK;
protected double JSPAYG;
protected short JSPAYGI;
protected int JSPAYL;
protected short JSPL_BH;
protected short JSPRBY;
protected short JSPREY;
protected double JSPROF;
protected short JSPROFI;
protected short JSPYBM;
protected short JSPYBY;
protected short JSPYBY4;
protected short JSPYEM;
protected short JSPYEY;
protected short JSPYEY4;
protected short JSSAT;
protected short JSSAT1;
protected short JSSAT2;
protected short JSSAT3;
protected short JSSAT4;
protected short JSSAT5;
protected short JSTIME;
protected short JSTTWM;
protected short JSTYPE;
protected short JTYID;
protected short JUHRSL;
protected short JUHRSX;
protected short JULK1;
protected short JULK4;
protected short JUPAYL;
protected short JUPAYX;
protected short JUSOC90_CC;
protected short JUSPEC;
protected byte LADOPT;
protected byte LCHMOR;
protected byte LCHMORN;
protected byte LCOH;
protected byte LEDENDM;
protected byte LEDENDY;
protected short LEDENY4;
protected byte LEDNOW;
protected double LEWGHT;
protected short LKMOVY;
protected short LKNBRD;
protected byte LNADPT;
protected byte LNCOH;
protected byte LNPRNT;
protected byte LPRNT;
protected double LRWGHT;
protected short MASTAT;
protected short MEMORIG_BH;
protected short MLSTAT_BH;
protected int MNPID_BH;
protected short MOVEST;
protected short MOVJB;
protected short MOVJBA;
protected short MOVJBB;
protected short MOVJBC;
protected short MOVJBD;
protected short MOVJBE;
protected short MOVJBF;
protected short MOVJBG;
protected short MOVJBH;
protected short MOVJBI;
protected short MOVY1;
protected short MOVY2;
protected short MRJBOSS;
protected double MRJCSSF;
protected double MRJCSSM;
protected short MRJEND;
protected short MRJGOLD;
protected double MRJHGS;
protected short MRJISCO88_CC;
protected String MRJISCO_CC;
protected short MRJMNGR;
protected short MRJNSSEC8_DV;
protected short MRJNSSEC_DV;
protected short MRJRGSC;
protected short MRJSEC;
protected short MRJSEG;
protected short MRJSEMP;
protected short MRJSIC;
protected short MRJSIZE;
protected short MRJSOC;
protected short NAIDXHH_BH;
protected short NCHILD_DV;
protected short NCIGS;
protected byte NELYR;
protected short NEMST;
protected short NET1AG;
protected short NET1JB;
protected byte NET1KN;
protected byte NET1LV;
protected short NET1PH;
protected byte NET1RL;
protected short NET1WR;
protected short NET2AG;
protected short NET2JB;
protected byte NET2KN;
protected byte NET2LV;
protected short NET2PH;
protected byte NET2RL;
protected short NET2WR;
protected short NET3AG;
protected short NET3JB;
protected byte NET3KN;
protected byte NET3LV;
protected short NET3PH;
protected byte NET3RL;
protected short NET3WR;
protected short NETAG_1;
protected short NETAG_2;
protected short NETAG_3;
protected byte NETKN_1;
protected byte NETKN_2;
protected byte NETKN_3;
protected short NETPH_1;
protected short NETPH_2;
protected short NETPH_3;
protected byte NETRL_1;
protected byte NETRL_2;
protected byte NETRL_3;
protected short NETSX1;
protected short NETSX2;
protected short NETSX3;
protected short NETSX_1;
protected short NETSX_2;
protected short NETSX_3;
protected short NETWR_1;
protected short NETWR_2;
protected short NETWR_3;
protected short NEWHY;
protected short NEYRJN;
protected short NF1;
protected short NJBNEW;
protected short NJBS;
protected short NJBSP;
protected double NJBWKS;
protected short NJISP;
protected double NJIWKS;
protected short NJUSP;
protected double NJUWKS;
protected byte NMAR_BH;
protected byte NORGA;
protected byte NORGM;
protected byte NQFEDA;
protected byte NQFEDB;
protected byte NQFEDC;
protected short NQFEDD;
protected short NQFEDE;
protected byte NQFEDF;
protected byte NQFEDG;
protected byte NQFEDH;
protected byte NQFEDI;
protected byte NQFEDJ;
protected byte NQFEDK;
protected short NQFEDL;
protected byte NQFEDM;
protected short NQFEDN;
protected byte NQFEDO;
protected byte NQFEDP;
protected byte NQFEDQ;
protected byte NQFEDR;
protected short NQFEDS;
protected short NQFEXA;
protected short NQFEXB;
protected short NQFEXC;
protected byte NQFEXE;
protected byte NQFEXF;
protected byte NQFEXG;
protected byte NQFEXH;
protected byte NQFEXI;
protected byte NQFEXJ;
protected byte NQFEXK;
protected short NXDTS;
protected short OPFAMJ;
protected short OPFAMK;
protected short OPFAML;
protected short OPFAMM;
protected short OPFAMN;
protected short OPISS1;
protected short OPISS2;
protected short OPISS3;
protected short OPISS4;
protected short OPISS5;
protected byte OPPOL1;
protected byte OPPOL2;
protected short OPPOLA;
protected short OPPOLB;
protected short OPPOLC;
protected short OPPOLD;
protected byte OPSOCG;
protected byte OPSOCH;
protected byte OPSOCI;
protected byte OPSOCJ;
protected byte ORG;
protected byte ORGA;
protected byte ORGA1;
protected byte ORGA11;
protected byte ORGA12;
protected byte ORGA13;
protected byte ORGA14;
protected byte ORGA15;
protected byte ORGA16;
protected byte ORGA2;
protected byte ORGA3;
protected byte ORGA4;
protected byte ORGA5;
protected byte ORGA6;
protected byte ORGA7;
protected byte ORGM1;
protected byte ORGM11;
protected byte ORGM12;
protected byte ORGM13;
protected byte ORGM14;
protected byte ORGM15;
protected byte ORGM16;
protected byte ORGM2;
protected byte ORGM3;
protected byte ORGM4;
protected byte ORGM5;
protected byte ORGM6;
protected byte ORGM7;
protected byte PAPER1;
protected byte PAPER2;
protected short PAPERM;
protected short PAPERM2;
protected short PAPERP;
protected short PAPERR;
protected short PAYDF1;
protected short PAYDF2;
protected short PAYDF3;
protected short PAYDF4;
protected short PAYDF5;
protected short PAYDF6;
protected short PAYDF7;
protected short PAYDF8;
protected short PAYGLI;
protected double PAYGLY;
protected short PAYGTI;
protected double PAYGTY;
protected double PAYGW;
protected byte PAYGYA;
protected int PAYGYR;
protected double PAYG_DV;
protected int PAYLY;
protected short PAYLYG;
protected double PAYLYW;
protected short PAYNLI;
protected double PAYNLY;
protected short PAYNTI;
protected double PAYNTY;
protected double PAYNW;
protected int PAYS;
protected short PAYSG;
protected short PAYSLP;
protected double PAYSW;
protected double PAYUW;
protected short PENADD;
protected short PENADV;
protected double PENADW;
protected short PENB4;
protected short PENB4V;
protected double PENB4W;
protected short PENB4Y4;
protected short PENB4YR;
protected short PENYR;
protected short PENYR4;
protected int PID;
protected byte PIM1;
protected byte PIM2;
protected short PLBORNC_CC;
protected short PLNEW;
protected short PLNOWM;
protected short PLNOWY4;
protected short PPLEVR;
protected short PPPEN;
protected short PRFEHQ;
protected short PRFITBI;
protected short PRFITB_BH;
protected byte PRJBFT;
protected short PRRS2I;
protected short PRSEHQ;
protected short PRWHY;
protected short QFA;
protected short QFACHI;
protected short QFB;
protected short QFC;
protected short QFD;
protected short QFE;
protected short QFED;
protected short QFEDA;
protected short QFEDB;
protected short QFEDC;
protected short QFEDD;
protected short QFEDE;
protected short QFEDF;
protected short QFEDG;
protected short QFEDH;
protected short QFEDHI;
protected short QFEDI;
protected short QFEDJ;
protected short QFEDK;
protected short QFEDL;
protected short QFEDM;
protected short QFEDN;
protected short QFEDO;
protected short QFEDP;
protected short QFEDQ;
protected short QFEDR;
protected short QFEDS;
protected short QFEDX;
protected short QFEDXA;
protected short QFEDXB;
protected short QFEDXC;
protected short QFEDXD;
protected short QFEDXE;
protected short QFEDXF;
protected short QFEDXG;
protected short QFEDXH;
protected short QFEDXI;
protected short QFEDXJ;
protected short QFEDXK;
protected short QFF;
protected short QFG;
protected short QFH;
protected short QFHAS;
protected short QFI;
protected short QFJ;
protected short QFK;
protected short QFL;
protected short QFM;
protected short QFN;
protected short QFVOC;
protected short QFX;
protected short QFXA;
protected short QFXB;
protected short QFXC;
protected short QFXD;
protected short QFXE;
protected short QFXF;
protected short QFXG;
protected short QFXH;
protected short QFXI;
protected short QFXJ;
protected short QFXK;
protected short QFXL;
protected short QFXM;
protected short QFXN;
protected short RACE;
protected short RACH12;
protected short REGION;
protected short SAMPST;
protected short SAMPST_BH;
protected short SAVE;
protected int SAVED;
protected byte SAVEY;
protected short SCNOW;
protected short SCTYPE;
protected short SMOKER;
protected short SPINHH;
protected short SPJB;
protected short SPJBHR;
protected short SPJBOT;
protected short SPJBYR;
protected double SPPAYG;
protected short SPPAYGI;
protected int SPPID_BH;
protected short SPSOC90_CC;
protected short TENURE_DV;
protected short TUIN1;
protected short TUIN2;
protected short TUJBPL;
protected short VOTE1;
protected short VOTE2;
protected short VOTE4;
protected short VOTE4_BH;
protected short VOTE5;
protected short VOTE6;
protected byte VOTE7;
protected byte VOTE8;
protected byte VOTE8_BH;
protected short WKTIME;
protected byte XDT1M;
protected byte XDT1PL;
protected byte XDT1Y;
protected byte XDT2M;
protected byte XDT2PL;
protected byte XDT2Y;
protected byte XDT3M;
protected byte XDT3PL;
protected byte XDT3Y;
protected short XDTS;
protected double XEWGHT;
protected short XPCHC;
protected short XPCHCF;
protected double XRWGHT;
protected short YR2UK;
protected final void initAGE12(String s) {
if (!s.trim().isEmpty()) {
AGE12 = Short.parseShort(s);
} else {
AGE12 = Short.MIN_VALUE;
}
}

protected final void initAGE_DV(String s) {
if (!s.trim().isEmpty()) {
AGE_DV = Short.parseShort(s);
} else {
AGE_DV = Short.MIN_VALUE;
}
}

protected final void initAIDHRS_BH(String s) {
if (!s.trim().isEmpty()) {
AIDHRS_BH = Short.parseShort(s);
} else {
AIDHRS_BH = Short.MIN_VALUE;
}
}

protected final void initAIDHU1A(String s) {
if (!s.trim().isEmpty()) {
AIDHU1A = Byte.parseByte(s);
} else {
AIDHU1A = Byte.MIN_VALUE;
}
}

protected final void initAIDHU2A(String s) {
if (!s.trim().isEmpty()) {
AIDHU2A = Byte.parseByte(s);
} else {
AIDHU2A = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA(String s) {
if (!s.trim().isEmpty()) {
AIDHUA = Short.parseShort(s);
} else {
AIDHUA = Short.MIN_VALUE;
}
}

protected final void initAIDHUB(String s) {
if (!s.trim().isEmpty()) {
AIDHUB = Short.parseShort(s);
} else {
AIDHUB = Short.MIN_VALUE;
}
}

protected final void initAIDHUC(String s) {
if (!s.trim().isEmpty()) {
AIDHUC = Short.parseShort(s);
} else {
AIDHUC = Short.MIN_VALUE;
}
}

protected final void initAIDPL1(String s) {
if (!s.trim().isEmpty()) {
AIDPL1 = Byte.parseByte(s);
} else {
AIDPL1 = Byte.MIN_VALUE;
}
}

protected final void initAIDPL2(String s) {
if (!s.trim().isEmpty()) {
AIDPL2 = Byte.parseByte(s);
} else {
AIDPL2 = Byte.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBUNO(String s) {
if (!s.trim().isEmpty()) {
BUNO = Short.parseShort(s);
} else {
BUNO = Short.MIN_VALUE;
}
}

protected final void initBUTYPE(String s) {
if (!s.trim().isEmpty()) {
BUTYPE = Short.parseShort(s);
} else {
BUTYPE = Short.MIN_VALUE;
}
}

protected final void initCASMIN(String s) {
if (!s.trim().isEmpty()) {
CASMIN = Short.parseShort(s);
} else {
CASMIN = Short.MIN_VALUE;
}
}

protected final void initCBAGE(String s) {
if (!s.trim().isEmpty()) {
CBAGE = Byte.parseByte(s);
} else {
CBAGE = Byte.MIN_VALUE;
}
}

protected final void initCJSBGD(String s) {
if (!s.trim().isEmpty()) {
CJSBGD = Short.parseShort(s);
} else {
CJSBGD = Short.MIN_VALUE;
}
}

protected final void initCJSBGM(String s) {
if (!s.trim().isEmpty()) {
CJSBGM = Short.parseShort(s);
} else {
CJSBGM = Short.MIN_VALUE;
}
}

protected final void initCJSBGY(String s) {
if (!s.trim().isEmpty()) {
CJSBGY = Short.parseShort(s);
} else {
CJSBGY = Short.MIN_VALUE;
}
}

protected final void initCJSBGY4(String s) {
if (!s.trim().isEmpty()) {
CJSBGY4 = Short.parseShort(s);
} else {
CJSBGY4 = Short.MIN_VALUE;
}
}

protected final void initCJSBLY(String s) {
if (!s.trim().isEmpty()) {
CJSBLY = Short.parseShort(s);
} else {
CJSBLY = Short.MIN_VALUE;
}
}

protected final void initCJSTEN(String s) {
if (!s.trim().isEmpty()) {
CJSTEN = Integer.parseInt(s);
} else {
CJSTEN = Integer.MIN_VALUE;
}
}

protected final void initCJSWK9(String s) {
if (!s.trim().isEmpty()) {
CJSWK9 = Double.parseDouble(s);
} else {
CJSWK9 = Double.NaN;
}
}

protected final void initDISTMOV(String s) {
if (!s.trim().isEmpty()) {
DISTMOV = Double.parseDouble(s);
} else {
DISTMOV = Double.NaN;
}
}

protected final void initDOBY(String s) {
if (!s.trim().isEmpty()) {
DOBY = Short.parseShort(s);
} else {
DOBY = Short.MIN_VALUE;
}
}

protected final void initDRIVE(String s) {
if (!s.trim().isEmpty()) {
DRIVE = Byte.parseByte(s);
} else {
DRIVE = Byte.MIN_VALUE;
}
}

protected final void initEAAGE(String s) {
if (!s.trim().isEmpty()) {
EAAGE = Short.parseShort(s);
} else {
EAAGE = Short.MIN_VALUE;
}
}

protected final void initEDENDM(String s) {
if (!s.trim().isEmpty()) {
EDENDM = Short.parseShort(s);
} else {
EDENDM = Short.MIN_VALUE;
}
}

protected final void initEDENDY(String s) {
if (!s.trim().isEmpty()) {
EDENDY = Short.parseShort(s);
} else {
EDENDY = Short.MIN_VALUE;
}
}

protected final void initEDENDY4(String s) {
if (!s.trim().isEmpty()) {
EDENDY4 = Short.parseShort(s);
} else {
EDENDY4 = Short.MIN_VALUE;
}
}

protected final void initEDLYR(String s) {
if (!s.trim().isEmpty()) {
EDLYR = Short.parseShort(s);
} else {
EDLYR = Short.MIN_VALUE;
}
}

protected final void initEDNEW(String s) {
if (!s.trim().isEmpty()) {
EDNEW = Short.parseShort(s);
} else {
EDNEW = Short.MIN_VALUE;
}
}

protected final void initEDNEW1(String s) {
if (!s.trim().isEmpty()) {
EDNEW1 = Short.parseShort(s);
} else {
EDNEW1 = Short.MIN_VALUE;
}
}

protected final void initEDNEW2(String s) {
if (!s.trim().isEmpty()) {
EDNEW2 = Short.parseShort(s);
} else {
EDNEW2 = Short.MIN_VALUE;
}
}

protected final void initEDNEW3(String s) {
if (!s.trim().isEmpty()) {
EDNEW3 = Short.parseShort(s);
} else {
EDNEW3 = Short.MIN_VALUE;
}
}

protected final void initEDNEW4(String s) {
if (!s.trim().isEmpty()) {
EDNEW4 = Short.parseShort(s);
} else {
EDNEW4 = Short.MIN_VALUE;
}
}

protected final void initEDNEWH(String s) {
if (!s.trim().isEmpty()) {
EDNEWH = Byte.parseByte(s);
} else {
EDNEWH = Byte.MIN_VALUE;
}
}

protected final void initEDNEWW(String s) {
if (!s.trim().isEmpty()) {
EDNEWW = Byte.parseByte(s);
} else {
EDNEWW = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE(String s) {
if (!s.trim().isEmpty()) {
EDTYPE = Short.parseShort(s);
} else {
EDTYPE = Short.MIN_VALUE;
}
}

protected final void initEDTYPE_BH(String s) {
if (!s.trim().isEmpty()) {
EDTYPE_BH = Short.parseShort(s);
} else {
EDTYPE_BH = Short.MIN_VALUE;
}
}

protected final void initF101(String s) {
if (!s.trim().isEmpty()) {
F101 = Short.parseShort(s);
} else {
F101 = Short.MIN_VALUE;
}
}

protected final void initF102(String s) {
if (!s.trim().isEmpty()) {
F102 = Short.parseShort(s);
} else {
F102 = Short.MIN_VALUE;
}
}

protected final void initF103(String s) {
if (!s.trim().isEmpty()) {
F103 = Short.parseShort(s);
} else {
F103 = Short.MIN_VALUE;
}
}

protected final void initF104(String s) {
if (!s.trim().isEmpty()) {
F104 = Short.parseShort(s);
} else {
F104 = Short.MIN_VALUE;
}
}

protected final void initF105(String s) {
if (!s.trim().isEmpty()) {
F105 = Short.parseShort(s);
} else {
F105 = Short.MIN_VALUE;
}
}

protected final void initF106(String s) {
if (!s.trim().isEmpty()) {
F106 = Byte.parseByte(s);
} else {
F106 = Byte.MIN_VALUE;
}
}

protected final void initF116(String s) {
if (!s.trim().isEmpty()) {
F116 = Byte.parseByte(s);
} else {
F116 = Byte.MIN_VALUE;
}
}

protected final void initF117(String s) {
if (!s.trim().isEmpty()) {
F117 = Byte.parseByte(s);
} else {
F117 = Byte.MIN_VALUE;
}
}

protected final void initF118(String s) {
if (!s.trim().isEmpty()) {
F118 = Short.parseShort(s);
} else {
F118 = Short.MIN_VALUE;
}
}

protected final void initF119(String s) {
if (!s.trim().isEmpty()) {
F119 = Short.parseShort(s);
} else {
F119 = Short.MIN_VALUE;
}
}

protected final void initF120(String s) {
if (!s.trim().isEmpty()) {
F120 = Short.parseShort(s);
} else {
F120 = Short.MIN_VALUE;
}
}

protected final void initF121(String s) {
if (!s.trim().isEmpty()) {
F121 = Short.parseShort(s);
} else {
F121 = Short.MIN_VALUE;
}
}

protected final void initF122(String s) {
if (!s.trim().isEmpty()) {
F122 = Short.parseShort(s);
} else {
F122 = Short.MIN_VALUE;
}
}

protected final void initF123(String s) {
if (!s.trim().isEmpty()) {
F123 = Short.parseShort(s);
} else {
F123 = Short.MIN_VALUE;
}
}

protected final void initF124(String s) {
if (!s.trim().isEmpty()) {
F124 = Byte.parseByte(s);
} else {
F124 = Byte.MIN_VALUE;
}
}

protected final void initF131(String s) {
if (!s.trim().isEmpty()) {
F131 = Short.parseShort(s);
} else {
F131 = Short.MIN_VALUE;
}
}

protected final void initF132(String s) {
if (!s.trim().isEmpty()) {
F132 = Short.parseShort(s);
} else {
F132 = Short.MIN_VALUE;
}
}

protected final void initF133(String s) {
if (!s.trim().isEmpty()) {
F133 = Short.parseShort(s);
} else {
F133 = Short.MIN_VALUE;
}
}

protected final void initF134(String s) {
if (!s.trim().isEmpty()) {
F134 = Byte.parseByte(s);
} else {
F134 = Byte.MIN_VALUE;
}
}

protected final void initF135(String s) {
if (!s.trim().isEmpty()) {
F135 = Short.parseShort(s);
} else {
F135 = Short.MIN_VALUE;
}
}

protected final void initF136(String s) {
if (!s.trim().isEmpty()) {
F136 = Short.parseShort(s);
} else {
F136 = Short.MIN_VALUE;
}
}

protected final void initF137(String s) {
if (!s.trim().isEmpty()) {
F137 = Short.parseShort(s);
} else {
F137 = Short.MIN_VALUE;
}
}

protected final void initF138(String s) {
if (!s.trim().isEmpty()) {
F138 = Short.parseShort(s);
} else {
F138 = Short.MIN_VALUE;
}
}

protected final void initF139(String s) {
if (!s.trim().isEmpty()) {
F139 = Short.parseShort(s);
} else {
F139 = Short.MIN_VALUE;
}
}

protected final void initF140(String s) {
if (!s.trim().isEmpty()) {
F140 = Short.parseShort(s);
} else {
F140 = Short.MIN_VALUE;
}
}

protected final void initF141(String s) {
if (!s.trim().isEmpty()) {
F141 = Short.parseShort(s);
} else {
F141 = Short.MIN_VALUE;
}
}

protected final void initF151(String s) {
if (!s.trim().isEmpty()) {
F151 = Short.parseShort(s);
} else {
F151 = Short.MIN_VALUE;
}
}

protected final void initF152(String s) {
if (!s.trim().isEmpty()) {
F152 = Byte.parseByte(s);
} else {
F152 = Byte.MIN_VALUE;
}
}

protected final void initF153(String s) {
if (!s.trim().isEmpty()) {
F153 = Short.parseShort(s);
} else {
F153 = Short.MIN_VALUE;
}
}

protected final void initF154(String s) {
if (!s.trim().isEmpty()) {
F154 = Short.parseShort(s);
} else {
F154 = Short.MIN_VALUE;
}
}

protected final void initF155(String s) {
if (!s.trim().isEmpty()) {
F155 = Short.parseShort(s);
} else {
F155 = Short.MIN_VALUE;
}
}

protected final void initF156(String s) {
if (!s.trim().isEmpty()) {
F156 = Short.parseShort(s);
} else {
F156 = Short.MIN_VALUE;
}
}

protected final void initF157(String s) {
if (!s.trim().isEmpty()) {
F157 = Short.parseShort(s);
} else {
F157 = Short.MIN_VALUE;
}
}

protected final void initF158(String s) {
if (!s.trim().isEmpty()) {
F158 = Byte.parseByte(s);
} else {
F158 = Byte.MIN_VALUE;
}
}

protected final void initF159(String s) {
if (!s.trim().isEmpty()) {
F159 = Byte.parseByte(s);
} else {
F159 = Byte.MIN_VALUE;
}
}

protected final void initFAIR1(String s) {
if (!s.trim().isEmpty()) {
FAIR1 = Byte.parseByte(s);
} else {
FAIR1 = Byte.MIN_VALUE;
}
}

protected final void initFAIR2(String s) {
if (!s.trim().isEmpty()) {
FAIR2 = Byte.parseByte(s);
} else {
FAIR2 = Byte.MIN_VALUE;
}
}

protected final void initFENOW_BH(String s) {
if (!s.trim().isEmpty()) {
FENOW_BH = Short.parseShort(s);
} else {
FENOW_BH = Short.MIN_VALUE;
}
}

protected final void initFETYPE(String s) {
if (!s.trim().isEmpty()) {
FETYPE = Short.parseShort(s);
} else {
FETYPE = Short.MIN_VALUE;
}
}

protected final void initFIHHMN(String s) {
if (!s.trim().isEmpty()) {
FIHHMN = Double.parseDouble(s);
} else {
FIHHMN = Double.NaN;
}
}

protected final void initFIHHMNI(String s) {
if (!s.trim().isEmpty()) {
FIHHMNI = Short.parseShort(s);
} else {
FIHHMNI = Short.MIN_VALUE;
}
}

protected final void initFIMNB(String s) {
if (!s.trim().isEmpty()) {
FIMNB = Double.parseDouble(s);
} else {
FIMNB = Double.NaN;
}
}

protected final void initFIMNBI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNBI = false;
} else {
FIMNBI = true;
}
}
}

protected final void initFIMNI(String s) {
if (!s.trim().isEmpty()) {
FIMNI = Double.parseDouble(s);
} else {
FIMNI = Double.NaN;
}
}

protected final void initFIMNII(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNII = false;
} else {
FIMNII = true;
}
}
}

protected final void initFIMNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNLI = false;
} else {
FIMNLI = true;
}
}
}

protected final void initFIMNNL(String s) {
if (!s.trim().isEmpty()) {
FIMNNL = Double.parseDouble(s);
} else {
FIMNNL = Double.NaN;
}
}

protected final void initFIMNNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNNLI = false;
} else {
FIMNNLI = true;
}
}
}

protected final void initFIMNP(String s) {
if (!s.trim().isEmpty()) {
FIMNP = Double.parseDouble(s);
} else {
FIMNP = Double.NaN;
}
}

protected final void initFIMNPI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNPI = false;
} else {
FIMNPI = true;
}
}
}

protected final void initFIMNT(String s) {
if (!s.trim().isEmpty()) {
FIMNT = Double.parseDouble(s);
} else {
FIMNT = Double.NaN;
}
}

protected final void initFIMNTHI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNTHI = false;
} else {
FIMNTHI = true;
}
}
}

protected final void initFIMNTI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNTI = false;
} else {
FIMNTI = true;
}
}
}

protected final void initFISITC(String s) {
if (!s.trim().isEmpty()) {
FISITC = Short.parseShort(s);
} else {
FISITC = Short.MIN_VALUE;
}
}

protected final void initFISITX(String s) {
if (!s.trim().isEmpty()) {
FISITX = Short.parseShort(s);
} else {
FISITX = Short.MIN_VALUE;
}
}

protected final void initFIYEARI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYEARI = false;
} else {
FIYEARI = true;
}
}
}

protected final void initFIYR(String s) {
if (!s.trim().isEmpty()) {
FIYR = Double.parseDouble(s);
} else {
FIYR = Double.NaN;
}
}

protected final void initFIYRB(String s) {
if (!s.trim().isEmpty()) {
FIYRB = Double.parseDouble(s);
} else {
FIYRB = Double.NaN;
}
}

protected final void initFIYRBI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRBI = false;
} else {
FIYRBI = true;
}
}
}

protected final void initFIYRDI(String s) {
if (!s.trim().isEmpty()) {
FIYRDI = Short.parseShort(s);
} else {
FIYRDI = Short.MIN_VALUE;
}
}

protected final void initFIYRDII(String s) {
if (!s.trim().isEmpty()) {
FIYRDII = Short.parseShort(s);
} else {
FIYRDII = Short.MIN_VALUE;
}
}

protected final void initFIYRI(String s) {
if (!s.trim().isEmpty()) {
FIYRI = Double.parseDouble(s);
} else {
FIYRI = Double.NaN;
}
}

protected final void initFIYRII(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRII = false;
} else {
FIYRII = true;
}
}
}

protected final void initFIYRL(String s) {
if (!s.trim().isEmpty()) {
FIYRL = Double.parseDouble(s);
} else {
FIYRL = Double.NaN;
}
}

protected final void initFIYRLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRLI = false;
} else {
FIYRLI = true;
}
}
}

protected final void initFIYRNL(String s) {
if (!s.trim().isEmpty()) {
FIYRNL = Double.parseDouble(s);
} else {
FIYRNL = Double.NaN;
}
}

protected final void initFIYRNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRNLI = false;
} else {
FIYRNLI = true;
}
}
}

protected final void initFIYRP(String s) {
if (!s.trim().isEmpty()) {
FIYRP = Double.parseDouble(s);
} else {
FIYRP = Double.NaN;
}
}

protected final void initFIYRPI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRPI = false;
} else {
FIYRPI = true;
}
}
}

protected final void initFIYRT(String s) {
if (!s.trim().isEmpty()) {
FIYRT = Double.parseDouble(s);
} else {
FIYRT = Double.NaN;
}
}

protected final void initFIYRTI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRTI = false;
} else {
FIYRTI = true;
}
}
}

protected final void initFNPID_BH(String s) {
if (!s.trim().isEmpty()) {
FNPID_BH = Integer.parseInt(s);
} else {
FNPID_BH = Integer.MIN_VALUE;
}
}

protected final void initFTEXA(String s) {
if (!s.trim().isEmpty()) {
FTEXA = Short.parseShort(s);
} else {
FTEXA = Short.MIN_VALUE;
}
}

protected final void initFTEXA1(String s) {
if (!s.trim().isEmpty()) {
FTEXA1 = Short.parseShort(s);
} else {
FTEXA1 = Short.MIN_VALUE;
}
}

protected final void initFTEXA2(String s) {
if (!s.trim().isEmpty()) {
FTEXA2 = Short.parseShort(s);
} else {
FTEXA2 = Short.MIN_VALUE;
}
}

protected final void initFTEXA3(String s) {
if (!s.trim().isEmpty()) {
FTEXA3 = Short.parseShort(s);
} else {
FTEXA3 = Short.MIN_VALUE;
}
}

protected final void initFTEXA4(String s) {
if (!s.trim().isEmpty()) {
FTEXA4 = Short.parseShort(s);
} else {
FTEXA4 = Short.MIN_VALUE;
}
}

protected final void initFTEXA5(String s) {
if (!s.trim().isEmpty()) {
FTEXA5 = Short.parseShort(s);
} else {
FTEXA5 = Short.MIN_VALUE;
}
}

protected final void initFTEXA6(String s) {
if (!s.trim().isEmpty()) {
FTEXA6 = Short.parseShort(s);
} else {
FTEXA6 = Short.MIN_VALUE;
}
}

protected final void initFTEXAV(String s) {
if (!s.trim().isEmpty()) {
FTEXAV = Short.parseShort(s);
} else {
FTEXAV = Short.MIN_VALUE;
}
}

protected final void initFTEXAW(String s) {
if (!s.trim().isEmpty()) {
FTEXAW = Double.parseDouble(s);
} else {
FTEXAW = Double.NaN;
}
}

protected final void initFTEXB(String s) {
if (!s.trim().isEmpty()) {
FTEXB = Short.parseShort(s);
} else {
FTEXB = Short.MIN_VALUE;
}
}

protected final void initFTEXB1(String s) {
if (!s.trim().isEmpty()) {
FTEXB1 = Short.parseShort(s);
} else {
FTEXB1 = Short.MIN_VALUE;
}
}

protected final void initFTEXB2(String s) {
if (!s.trim().isEmpty()) {
FTEXB2 = Short.parseShort(s);
} else {
FTEXB2 = Short.MIN_VALUE;
}
}

protected final void initFTEXB3(String s) {
if (!s.trim().isEmpty()) {
FTEXB3 = Short.parseShort(s);
} else {
FTEXB3 = Short.MIN_VALUE;
}
}

protected final void initFTEXB4(String s) {
if (!s.trim().isEmpty()) {
FTEXB4 = Short.parseShort(s);
} else {
FTEXB4 = Short.MIN_VALUE;
}
}

protected final void initFTEXB5(String s) {
if (!s.trim().isEmpty()) {
FTEXB5 = Short.parseShort(s);
} else {
FTEXB5 = Short.MIN_VALUE;
}
}

protected final void initFTEXB6(String s) {
if (!s.trim().isEmpty()) {
FTEXB6 = Short.parseShort(s);
} else {
FTEXB6 = Short.MIN_VALUE;
}
}

protected final void initFTEXBV(String s) {
if (!s.trim().isEmpty()) {
FTEXBV = Short.parseShort(s);
} else {
FTEXBV = Short.MIN_VALUE;
}
}

protected final void initFTEXBW(String s) {
if (!s.trim().isEmpty()) {
FTEXBW = Double.parseDouble(s);
} else {
FTEXBW = Double.NaN;
}
}

protected final void initFTEXC(String s) {
if (!s.trim().isEmpty()) {
FTEXC = Short.parseShort(s);
} else {
FTEXC = Short.MIN_VALUE;
}
}

protected final void initFTEXC1(String s) {
if (!s.trim().isEmpty()) {
FTEXC1 = Short.parseShort(s);
} else {
FTEXC1 = Short.MIN_VALUE;
}
}

protected final void initFTEXC2(String s) {
if (!s.trim().isEmpty()) {
FTEXC2 = Short.parseShort(s);
} else {
FTEXC2 = Short.MIN_VALUE;
}
}

protected final void initFTEXC3(String s) {
if (!s.trim().isEmpty()) {
FTEXC3 = Short.parseShort(s);
} else {
FTEXC3 = Short.MIN_VALUE;
}
}

protected final void initFTEXC4(String s) {
if (!s.trim().isEmpty()) {
FTEXC4 = Short.parseShort(s);
} else {
FTEXC4 = Short.MIN_VALUE;
}
}

protected final void initFTEXC5(String s) {
if (!s.trim().isEmpty()) {
FTEXC5 = Short.parseShort(s);
} else {
FTEXC5 = Short.MIN_VALUE;
}
}

protected final void initFTEXC6(String s) {
if (!s.trim().isEmpty()) {
FTEXC6 = Short.parseShort(s);
} else {
FTEXC6 = Short.MIN_VALUE;
}
}

protected final void initFTEXCV(String s) {
if (!s.trim().isEmpty()) {
FTEXCV = Short.parseShort(s);
} else {
FTEXCV = Short.MIN_VALUE;
}
}

protected final void initFTEXCW(String s) {
if (!s.trim().isEmpty()) {
FTEXCW = Double.parseDouble(s);
} else {
FTEXCW = Double.NaN;
}
}

protected final void initFTEXHH(String s) {
if (!s.trim().isEmpty()) {
FTEXHH = Short.parseShort(s);
} else {
FTEXHH = Short.MIN_VALUE;
}
}

protected final void initFTHH(String s) {
if (!s.trim().isEmpty()) {
FTHH = Byte.parseByte(s);
} else {
FTHH = Byte.MIN_VALUE;
}
}

protected final void initFTHH1(String s) {
if (!s.trim().isEmpty()) {
FTHH1 = Byte.parseByte(s);
} else {
FTHH1 = Byte.MIN_VALUE;
}
}

protected final void initFTHH11(String s) {
if (!s.trim().isEmpty()) {
FTHH11 = Byte.parseByte(s);
} else {
FTHH11 = Byte.MIN_VALUE;
}
}

protected final void initFTHH12(String s) {
if (!s.trim().isEmpty()) {
FTHH12 = Byte.parseByte(s);
} else {
FTHH12 = Byte.MIN_VALUE;
}
}

protected final void initFTHH13(String s) {
if (!s.trim().isEmpty()) {
FTHH13 = Byte.parseByte(s);
} else {
FTHH13 = Byte.MIN_VALUE;
}
}

protected final void initFTHH14(String s) {
if (!s.trim().isEmpty()) {
FTHH14 = Byte.parseByte(s);
} else {
FTHH14 = Byte.MIN_VALUE;
}
}

protected final void initFTHH15(String s) {
if (!s.trim().isEmpty()) {
FTHH15 = Byte.parseByte(s);
} else {
FTHH15 = Byte.MIN_VALUE;
}
}

protected final void initFTHH16(String s) {
if (!s.trim().isEmpty()) {
FTHH16 = Byte.parseByte(s);
} else {
FTHH16 = Byte.MIN_VALUE;
}
}

protected final void initFTHH1V(String s) {
if (!s.trim().isEmpty()) {
FTHH1V = Short.parseShort(s);
} else {
FTHH1V = Short.MIN_VALUE;
}
}

protected final void initFTHH1W(String s) {
if (!s.trim().isEmpty()) {
FTHH1W = Double.parseDouble(s);
} else {
FTHH1W = Double.NaN;
}
}

protected final void initFTHH2(String s) {
if (!s.trim().isEmpty()) {
FTHH2 = Byte.parseByte(s);
} else {
FTHH2 = Byte.MIN_VALUE;
}
}

protected final void initFTHH21(String s) {
if (!s.trim().isEmpty()) {
FTHH21 = Byte.parseByte(s);
} else {
FTHH21 = Byte.MIN_VALUE;
}
}

protected final void initFTHH22(String s) {
if (!s.trim().isEmpty()) {
FTHH22 = Byte.parseByte(s);
} else {
FTHH22 = Byte.MIN_VALUE;
}
}

protected final void initFTHH23(String s) {
if (!s.trim().isEmpty()) {
FTHH23 = Byte.parseByte(s);
} else {
FTHH23 = Byte.MIN_VALUE;
}
}

protected final void initFTHH24(String s) {
if (!s.trim().isEmpty()) {
FTHH24 = Byte.parseByte(s);
} else {
FTHH24 = Byte.MIN_VALUE;
}
}

protected final void initFTHH25(String s) {
if (!s.trim().isEmpty()) {
FTHH25 = Byte.parseByte(s);
} else {
FTHH25 = Byte.MIN_VALUE;
}
}

protected final void initFTHH26(String s) {
if (!s.trim().isEmpty()) {
FTHH26 = Byte.parseByte(s);
} else {
FTHH26 = Byte.MIN_VALUE;
}
}

protected final void initFTHH2V(String s) {
if (!s.trim().isEmpty()) {
FTHH2V = Short.parseShort(s);
} else {
FTHH2V = Short.MIN_VALUE;
}
}

protected final void initFTHH2W(String s) {
if (!s.trim().isEmpty()) {
FTHH2W = Double.parseDouble(s);
} else {
FTHH2W = Double.NaN;
}
}

protected final void initFTHH3(String s) {
if (!s.trim().isEmpty()) {
FTHH3 = Byte.parseByte(s);
} else {
FTHH3 = Byte.MIN_VALUE;
}
}

protected final void initFTHH31(String s) {
if (!s.trim().isEmpty()) {
FTHH31 = Byte.parseByte(s);
} else {
FTHH31 = Byte.MIN_VALUE;
}
}

protected final void initFTHH32(String s) {
if (!s.trim().isEmpty()) {
FTHH32 = Byte.parseByte(s);
} else {
FTHH32 = Byte.MIN_VALUE;
}
}

protected final void initFTHH33(String s) {
if (!s.trim().isEmpty()) {
FTHH33 = Byte.parseByte(s);
} else {
FTHH33 = Byte.MIN_VALUE;
}
}

protected final void initFTHH34(String s) {
if (!s.trim().isEmpty()) {
FTHH34 = Byte.parseByte(s);
} else {
FTHH34 = Byte.MIN_VALUE;
}
}

protected final void initFTHH35(String s) {
if (!s.trim().isEmpty()) {
FTHH35 = Byte.parseByte(s);
} else {
FTHH35 = Byte.MIN_VALUE;
}
}

protected final void initFTHH36(String s) {
if (!s.trim().isEmpty()) {
FTHH36 = Byte.parseByte(s);
} else {
FTHH36 = Byte.MIN_VALUE;
}
}

protected final void initFTHH3V(String s) {
if (!s.trim().isEmpty()) {
FTHH3V = Short.parseShort(s);
} else {
FTHH3V = Short.MIN_VALUE;
}
}

protected final void initFTHH3W(String s) {
if (!s.trim().isEmpty()) {
FTHH3W = Double.parseDouble(s);
} else {
FTHH3W = Double.NaN;
}
}

protected final void initHGEMP(String s) {
if (!s.trim().isEmpty()) {
HGEMP = Byte.parseByte(s);
} else {
HGEMP = Byte.MIN_VALUE;
}
}

protected final void initHGR2R(String s) {
if (!s.trim().isEmpty()) {
HGR2R = Short.parseShort(s);
} else {
HGR2R = Short.MIN_VALUE;
}
}

protected final void initHGRA(String s) {
if (!s.trim().isEmpty()) {
HGRA = Short.parseShort(s);
} else {
HGRA = Short.MIN_VALUE;
}
}

protected final void initHGSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
HGSEX = false;
} else {
HGSEX = true;
}
}
}

protected final void initHHCH12(String s) {
if (!s.trim().isEmpty()) {
HHCH12 = Short.parseShort(s);
} else {
HHCH12 = Short.MIN_VALUE;
}
}

protected final void initHHMEM(String s) {
if (!s.trim().isEmpty()) {
HHMEM = Short.parseShort(s);
} else {
HHMEM = Short.MIN_VALUE;
}
}

protected final void initHHSIZE(String s) {
if (!s.trim().isEmpty()) {
HHSIZE = Short.parseShort(s);
} else {
HHSIZE = Short.MIN_VALUE;
}
}

protected final void initHHTYPE(String s) {
if (!s.trim().isEmpty()) {
HHTYPE = Short.parseShort(s);
} else {
HHTYPE = Short.MIN_VALUE;
}
}

protected final void initHID(String s) {
if (!s.trim().isEmpty()) {
HID = Integer.parseInt(s);
} else {
HID = Integer.MIN_VALUE;
}
}

protected final void initHIQUALB_DV(String s) {
if (!s.trim().isEmpty()) {
HIQUALB_DV = Short.parseShort(s);
} else {
HIQUALB_DV = Short.MIN_VALUE;
}
}

protected final void initHL2GP(String s) {
if (!s.trim().isEmpty()) {
HL2GP = Short.parseShort(s);
} else {
HL2GP = Short.MIN_VALUE;
}
}

protected final void initHLCK(String s) {
if (!s.trim().isEmpty()) {
HLCK = Short.parseShort(s);
} else {
HLCK = Short.MIN_VALUE;
}
}

protected final void initHLCKA(String s) {
if (!s.trim().isEmpty()) {
HLCKA = Short.parseShort(s);
} else {
HLCKA = Short.MIN_VALUE;
}
}

protected final void initHLCKAN(String s) {
if (!s.trim().isEmpty()) {
HLCKAN = Short.parseShort(s);
} else {
HLCKAN = Short.MIN_VALUE;
}
}

protected final void initHLCKB(String s) {
if (!s.trim().isEmpty()) {
HLCKB = Short.parseShort(s);
} else {
HLCKB = Short.MIN_VALUE;
}
}

protected final void initHLCKBN(String s) {
if (!s.trim().isEmpty()) {
HLCKBN = Short.parseShort(s);
} else {
HLCKBN = Short.MIN_VALUE;
}
}

protected final void initHLCKC(String s) {
if (!s.trim().isEmpty()) {
HLCKC = Short.parseShort(s);
} else {
HLCKC = Short.MIN_VALUE;
}
}

protected final void initHLCKCN(String s) {
if (!s.trim().isEmpty()) {
HLCKCN = Short.parseShort(s);
} else {
HLCKCN = Short.MIN_VALUE;
}
}

protected final void initHLCKD(String s) {
if (!s.trim().isEmpty()) {
HLCKD = Short.parseShort(s);
} else {
HLCKD = Short.MIN_VALUE;
}
}

protected final void initHLCKDN(String s) {
if (!s.trim().isEmpty()) {
HLCKDN = Short.parseShort(s);
} else {
HLCKDN = Short.MIN_VALUE;
}
}

protected final void initHLCKE(String s) {
if (!s.trim().isEmpty()) {
HLCKE = Short.parseShort(s);
} else {
HLCKE = Short.MIN_VALUE;
}
}

protected final void initHLCKEN(String s) {
if (!s.trim().isEmpty()) {
HLCKEN = Short.parseShort(s);
} else {
HLCKEN = Short.MIN_VALUE;
}
}

protected final void initHLCKF(String s) {
if (!s.trim().isEmpty()) {
HLCKF = Short.parseShort(s);
} else {
HLCKF = Short.MIN_VALUE;
}
}

protected final void initHLCKFN(String s) {
if (!s.trim().isEmpty()) {
HLCKFN = Short.parseShort(s);
} else {
HLCKFN = Short.MIN_VALUE;
}
}

protected final void initHLCKG(String s) {
if (!s.trim().isEmpty()) {
HLCKG = Short.parseShort(s);
} else {
HLCKG = Short.MIN_VALUE;
}
}

protected final void initHLCKGN(String s) {
if (!s.trim().isEmpty()) {
HLCKGN = Short.parseShort(s);
} else {
HLCKGN = Short.MIN_VALUE;
}
}

protected final void initHLCKH(String s) {
if (!s.trim().isEmpty()) {
HLCKH = Short.parseShort(s);
} else {
HLCKH = Short.MIN_VALUE;
}
}

protected final void initHLCKHN(String s) {
if (!s.trim().isEmpty()) {
HLCKHN = Short.parseShort(s);
} else {
HLCKHN = Short.MIN_VALUE;
}
}

protected final void initHLDSBL(String s) {
if (!s.trim().isEmpty()) {
HLDSBL = Short.parseShort(s);
} else {
HLDSBL = Short.MIN_VALUE;
}
}

protected final void initHLENDW(String s) {
if (!s.trim().isEmpty()) {
HLENDW = Short.parseShort(s);
} else {
HLENDW = Short.MIN_VALUE;
}
}

protected final void initHLLT(String s) {
if (!s.trim().isEmpty()) {
HLLT = Byte.parseByte(s);
} else {
HLLT = Byte.MIN_VALUE;
}
}

protected final void initHLLTA(String s) {
if (!s.trim().isEmpty()) {
HLLTA = Short.parseShort(s);
} else {
HLLTA = Short.MIN_VALUE;
}
}

protected final void initHLLTB(String s) {
if (!s.trim().isEmpty()) {
HLLTB = Short.parseShort(s);
} else {
HLLTB = Short.MIN_VALUE;
}
}

protected final void initHLLTC(String s) {
if (!s.trim().isEmpty()) {
HLLTC = Short.parseShort(s);
} else {
HLLTC = Short.MIN_VALUE;
}
}

protected final void initHLLTD(String s) {
if (!s.trim().isEmpty()) {
HLLTD = Short.parseShort(s);
} else {
HLLTD = Short.MIN_VALUE;
}
}

protected final void initHLLTE(String s) {
if (!s.trim().isEmpty()) {
HLLTE = Short.parseShort(s);
} else {
HLLTE = Short.MIN_VALUE;
}
}

protected final void initHLLTW(String s) {
if (!s.trim().isEmpty()) {
HLLTW = Byte.parseByte(s);
} else {
HLLTW = Byte.MIN_VALUE;
}
}

protected final void initHLLTWA(String s) {
if (!s.trim().isEmpty()) {
HLLTWA = Short.parseShort(s);
} else {
HLLTWA = Short.MIN_VALUE;
}
}

protected final void initHLPRB(String s) {
if (!s.trim().isEmpty()) {
HLPRB = Short.parseShort(s);
} else {
HLPRB = Short.MIN_VALUE;
}
}

protected final void initHLPRBA(String s) {
if (!s.trim().isEmpty()) {
HLPRBA = Short.parseShort(s);
} else {
HLPRBA = Short.MIN_VALUE;
}
}

protected final void initHLPRBB(String s) {
if (!s.trim().isEmpty()) {
HLPRBB = Short.parseShort(s);
} else {
HLPRBB = Short.MIN_VALUE;
}
}

protected final void initHLPRBC(String s) {
if (!s.trim().isEmpty()) {
HLPRBC = Short.parseShort(s);
} else {
HLPRBC = Short.MIN_VALUE;
}
}

protected final void initHLPRBD(String s) {
if (!s.trim().isEmpty()) {
HLPRBD = Short.parseShort(s);
} else {
HLPRBD = Short.MIN_VALUE;
}
}

protected final void initHLPRBE(String s) {
if (!s.trim().isEmpty()) {
HLPRBE = Short.parseShort(s);
} else {
HLPRBE = Short.MIN_VALUE;
}
}

protected final void initHLPRBF(String s) {
if (!s.trim().isEmpty()) {
HLPRBF = Short.parseShort(s);
} else {
HLPRBF = Short.MIN_VALUE;
}
}

protected final void initHLPRBG(String s) {
if (!s.trim().isEmpty()) {
HLPRBG = Short.parseShort(s);
} else {
HLPRBG = Short.MIN_VALUE;
}
}

protected final void initHLPRBH(String s) {
if (!s.trim().isEmpty()) {
HLPRBH = Short.parseShort(s);
} else {
HLPRBH = Short.MIN_VALUE;
}
}

protected final void initHLPRBI(String s) {
if (!s.trim().isEmpty()) {
HLPRBI = Short.parseShort(s);
} else {
HLPRBI = Short.MIN_VALUE;
}
}

protected final void initHLPRBJ(String s) {
if (!s.trim().isEmpty()) {
HLPRBJ = Short.parseShort(s);
} else {
HLPRBJ = Short.MIN_VALUE;
}
}

protected final void initHLPRBK(String s) {
if (!s.trim().isEmpty()) {
HLPRBK = Short.parseShort(s);
} else {
HLPRBK = Short.MIN_VALUE;
}
}

protected final void initHLPRBL(String s) {
if (!s.trim().isEmpty()) {
HLPRBL = Short.parseShort(s);
} else {
HLPRBL = Short.MIN_VALUE;
}
}

protected final void initHLPRBM(String s) {
if (!s.trim().isEmpty()) {
HLPRBM = Short.parseShort(s);
} else {
HLPRBM = Short.MIN_VALUE;
}
}

protected final void initHLSTAT(String s) {
if (!s.trim().isEmpty()) {
HLSTAT = Short.parseShort(s);
} else {
HLSTAT = Short.MIN_VALUE;
}
}

protected final void initHLSV(String s) {
if (!s.trim().isEmpty()) {
HLSV = Short.parseShort(s);
} else {
HLSV = Short.MIN_VALUE;
}
}

protected final void initHLSVA(String s) {
if (!s.trim().isEmpty()) {
HLSVA = Short.parseShort(s);
} else {
HLSVA = Short.MIN_VALUE;
}
}

protected final void initHLSVAF(String s) {
if (!s.trim().isEmpty()) {
HLSVAF = Short.parseShort(s);
} else {
HLSVAF = Short.MIN_VALUE;
}
}

protected final void initHLSVAN(String s) {
if (!s.trim().isEmpty()) {
HLSVAN = Short.parseShort(s);
} else {
HLSVAN = Short.MIN_VALUE;
}
}

protected final void initHLSVB(String s) {
if (!s.trim().isEmpty()) {
HLSVB = Short.parseShort(s);
} else {
HLSVB = Short.MIN_VALUE;
}
}

protected final void initHLSVBF(String s) {
if (!s.trim().isEmpty()) {
HLSVBF = Short.parseShort(s);
} else {
HLSVBF = Short.MIN_VALUE;
}
}

protected final void initHLSVBN(String s) {
if (!s.trim().isEmpty()) {
HLSVBN = Short.parseShort(s);
} else {
HLSVBN = Short.MIN_VALUE;
}
}

protected final void initHLSVC(String s) {
if (!s.trim().isEmpty()) {
HLSVC = Short.parseShort(s);
} else {
HLSVC = Short.MIN_VALUE;
}
}

protected final void initHLSVCF(String s) {
if (!s.trim().isEmpty()) {
HLSVCF = Short.parseShort(s);
} else {
HLSVCF = Short.MIN_VALUE;
}
}

protected final void initHLSVCN(String s) {
if (!s.trim().isEmpty()) {
HLSVCN = Short.parseShort(s);
} else {
HLSVCN = Short.MIN_VALUE;
}
}

protected final void initHLSVD(String s) {
if (!s.trim().isEmpty()) {
HLSVD = Short.parseShort(s);
} else {
HLSVD = Short.MIN_VALUE;
}
}

protected final void initHLSVDF(String s) {
if (!s.trim().isEmpty()) {
HLSVDF = Short.parseShort(s);
} else {
HLSVDF = Short.MIN_VALUE;
}
}

protected final void initHLSVDN(String s) {
if (!s.trim().isEmpty()) {
HLSVDN = Short.parseShort(s);
} else {
HLSVDN = Short.MIN_VALUE;
}
}

protected final void initHLSVE(String s) {
if (!s.trim().isEmpty()) {
HLSVE = Short.parseShort(s);
} else {
HLSVE = Short.MIN_VALUE;
}
}

protected final void initHLSVEF(String s) {
if (!s.trim().isEmpty()) {
HLSVEF = Short.parseShort(s);
} else {
HLSVEF = Short.MIN_VALUE;
}
}

protected final void initHLSVEN(String s) {
if (!s.trim().isEmpty()) {
HLSVEN = Short.parseShort(s);
} else {
HLSVEN = Short.MIN_VALUE;
}
}

protected final void initHLSVF(String s) {
if (!s.trim().isEmpty()) {
HLSVF = Short.parseShort(s);
} else {
HLSVF = Short.MIN_VALUE;
}
}

protected final void initHLSVFF(String s) {
if (!s.trim().isEmpty()) {
HLSVFF = Short.parseShort(s);
} else {
HLSVFF = Short.MIN_VALUE;
}
}

protected final void initHLSVFN(String s) {
if (!s.trim().isEmpty()) {
HLSVFN = Short.parseShort(s);
} else {
HLSVFN = Short.MIN_VALUE;
}
}

protected final void initHLSVG(String s) {
if (!s.trim().isEmpty()) {
HLSVG = Short.parseShort(s);
} else {
HLSVG = Short.MIN_VALUE;
}
}

protected final void initHLSVGF(String s) {
if (!s.trim().isEmpty()) {
HLSVGF = Short.parseShort(s);
} else {
HLSVGF = Short.MIN_VALUE;
}
}

protected final void initHLSVGN(String s) {
if (!s.trim().isEmpty()) {
HLSVGN = Short.parseShort(s);
} else {
HLSVGN = Short.MIN_VALUE;
}
}

protected final void initHLSVH(String s) {
if (!s.trim().isEmpty()) {
HLSVH = Short.parseShort(s);
} else {
HLSVH = Short.MIN_VALUE;
}
}

protected final void initHLSVHF(String s) {
if (!s.trim().isEmpty()) {
HLSVHF = Byte.parseByte(s);
} else {
HLSVHF = Byte.MIN_VALUE;
}
}

protected final void initHLSVHN(String s) {
if (!s.trim().isEmpty()) {
HLSVHN = Byte.parseByte(s);
} else {
HLSVHN = Byte.MIN_VALUE;
}
}

protected final void initHLSVI(String s) {
if (!s.trim().isEmpty()) {
HLSVI = Short.parseShort(s);
} else {
HLSVI = Short.MIN_VALUE;
}
}

protected final void initHLSVIF(String s) {
if (!s.trim().isEmpty()) {
HLSVIF = Short.parseShort(s);
} else {
HLSVIF = Short.MIN_VALUE;
}
}

protected final void initHLSVIN(String s) {
if (!s.trim().isEmpty()) {
HLSVIN = Short.parseShort(s);
} else {
HLSVIN = Short.MIN_VALUE;
}
}

protected final void initHLSVJ(String s) {
if (!s.trim().isEmpty()) {
HLSVJ = Short.parseShort(s);
} else {
HLSVJ = Short.MIN_VALUE;
}
}

protected final void initHLSVJF(String s) {
if (!s.trim().isEmpty()) {
HLSVJF = Short.parseShort(s);
} else {
HLSVJF = Short.MIN_VALUE;
}
}

protected final void initHLSVJN(String s) {
if (!s.trim().isEmpty()) {
HLSVJN = Short.parseShort(s);
} else {
HLSVJN = Short.MIN_VALUE;
}
}

protected final void initHLSVK(String s) {
if (!s.trim().isEmpty()) {
HLSVK = Short.parseShort(s);
} else {
HLSVK = Short.MIN_VALUE;
}
}

protected final void initHLSVKF(String s) {
if (!s.trim().isEmpty()) {
HLSVKF = Short.parseShort(s);
} else {
HLSVKF = Short.MIN_VALUE;
}
}

protected final void initHLSVKN(String s) {
if (!s.trim().isEmpty()) {
HLSVKN = Short.parseShort(s);
} else {
HLSVKN = Short.MIN_VALUE;
}
}

protected final void initHLZEST(String s) {
if (!s.trim().isEmpty()) {
HLZEST = Byte.parseByte(s);
} else {
HLZEST = Byte.MIN_VALUE;
}
}

protected final void initHOH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
HOH = false;
} else {
HOH = true;
}
}
}

protected final void initHOSP(String s) {
if (!s.trim().isEmpty()) {
HOSP = Short.parseShort(s);
} else {
HOSP = Short.MIN_VALUE;
}
}

protected final void initHOSPCH(String s) {
if (!s.trim().isEmpty()) {
HOSPCH = Short.parseShort(s);
} else {
HOSPCH = Short.MIN_VALUE;
}
}

protected final void initHOSPD(String s) {
if (!s.trim().isEmpty()) {
HOSPD = Short.parseShort(s);
} else {
HOSPD = Short.MIN_VALUE;
}
}

protected final void initHOSPNHS(String s) {
if (!s.trim().isEmpty()) {
HOSPNHS = Short.parseShort(s);
} else {
HOSPNHS = Short.MIN_VALUE;
}
}

protected final void initHOWLNG(String s) {
if (!s.trim().isEmpty()) {
HOWLNG = Short.parseShort(s);
} else {
HOWLNG = Short.MIN_VALUE;
}
}

protected final void initHUBOSS(String s) {
if (!s.trim().isEmpty()) {
HUBOSS = Byte.parseByte(s);
} else {
HUBOSS = Byte.MIN_VALUE;
}
}

protected final void initHUDOES(String s) {
if (!s.trim().isEmpty()) {
HUDOES = Byte.parseByte(s);
} else {
HUDOES = Byte.MIN_VALUE;
}
}

protected final void initHUNURS(String s) {
if (!s.trim().isEmpty()) {
HUNURS = Short.parseShort(s);
} else {
HUNURS = Short.MIN_VALUE;
}
}

protected final void initHURUNS(String s) {
if (!s.trim().isEmpty()) {
HURUNS = Byte.parseByte(s);
} else {
HURUNS = Byte.MIN_VALUE;
}
}

protected final void initHUSITS2(String s) {
if (!s.trim().isEmpty()) {
HUSITS2 = Byte.parseByte(s);
} else {
HUSITS2 = Byte.MIN_VALUE;
}
}

protected final void initHUXPCH(String s) {
if (!s.trim().isEmpty()) {
HUXPCH = Short.parseShort(s);
} else {
HUXPCH = Short.MIN_VALUE;
}
}

protected final void initIENDDATHM(String s) {
if (!s.trim().isEmpty()) {
IENDDATHM = Short.parseShort(s);
} else {
IENDDATHM = Short.MIN_VALUE;
}
}

protected final void initIMPEVENT1(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT1 = Byte.parseByte(s);
} else {
IMPEVENT1 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT1S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT1S = Byte.parseByte(s);
} else {
IMPEVENT1S = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT2(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT2 = Byte.parseByte(s);
} else {
IMPEVENT2 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT2S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT2S = Byte.parseByte(s);
} else {
IMPEVENT2S = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT3(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT3 = Byte.parseByte(s);
} else {
IMPEVENT3 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT3S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT3S = Byte.parseByte(s);
} else {
IMPEVENT3S = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT4(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT4 = Byte.parseByte(s);
} else {
IMPEVENT4 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT4S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT4S = Byte.parseByte(s);
} else {
IMPEVENT4S = Byte.MIN_VALUE;
}
}

protected final void initIODC(String s) {
if (!s.trim().isEmpty()) {
IODC = Short.parseShort(s);
} else {
IODC = Short.MIN_VALUE;
}
}

protected final void initISCED(String s) {
if (!s.trim().isEmpty()) {
ISCED = Short.parseShort(s);
} else {
ISCED = Short.MIN_VALUE;
}
}

protected final void initISTRTDATHM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATHM = Short.parseShort(s);
} else {
ISTRTDATHM = Short.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initIV2(String s) {
if (!s.trim().isEmpty()) {
IV2 = Short.parseShort(s);
} else {
IV2 = Short.MIN_VALUE;
}
}

protected final void initIV4(String s) {
if (!s.trim().isEmpty()) {
IV4 = Short.parseShort(s);
} else {
IV4 = Short.MIN_VALUE;
}
}

protected final void initIV5(String s) {
if (!s.trim().isEmpty()) {
IV5 = Short.parseShort(s);
} else {
IV5 = Short.MIN_VALUE;
}
}

protected final void initIV6A(String s) {
if (!s.trim().isEmpty()) {
IV6A = Short.parseShort(s);
} else {
IV6A = Short.MIN_VALUE;
}
}

protected final void initIV6B(String s) {
if (!s.trim().isEmpty()) {
IV6B = Short.parseShort(s);
} else {
IV6B = Short.MIN_VALUE;
}
}

protected final void initIV6C(String s) {
if (!s.trim().isEmpty()) {
IV6C = Short.parseShort(s);
} else {
IV6C = Short.MIN_VALUE;
}
}

protected final void initIV6D(String s) {
if (!s.trim().isEmpty()) {
IV6D = Short.parseShort(s);
} else {
IV6D = Short.MIN_VALUE;
}
}

protected final void initIV6E(String s) {
if (!s.trim().isEmpty()) {
IV6E = Short.parseShort(s);
} else {
IV6E = Short.MIN_VALUE;
}
}

protected final void initIV6F(String s) {
if (!s.trim().isEmpty()) {
IV6F = Short.parseShort(s);
} else {
IV6F = Short.MIN_VALUE;
}
}

protected final void initIV7(String s) {
if (!s.trim().isEmpty()) {
IV7 = Short.parseShort(s);
} else {
IV7 = Short.MIN_VALUE;
}
}

protected final void initIVCOOP_BH(String s) {
if (!s.trim().isEmpty()) {
IVCOOP_BH = Byte.parseByte(s);
} else {
IVCOOP_BH = Byte.MIN_VALUE;
}
}

protected final void initIVDA(String s) {
if (!s.trim().isEmpty()) {
IVDA = Byte.parseByte(s);
} else {
IVDA = Byte.MIN_VALUE;
}
}

protected final void initIVDB(String s) {
if (!s.trim().isEmpty()) {
IVDB = Byte.parseByte(s);
} else {
IVDB = Byte.MIN_VALUE;
}
}

protected final void initIVDC(String s) {
if (!s.trim().isEmpty()) {
IVDC = Byte.parseByte(s);
} else {
IVDC = Byte.MIN_VALUE;
}
}

protected final void initIVDD(String s) {
if (!s.trim().isEmpty()) {
IVDD = Byte.parseByte(s);
} else {
IVDD = Byte.MIN_VALUE;
}
}

protected final void initIVEA(String s) {
if (!s.trim().isEmpty()) {
IVEA = Short.parseShort(s);
} else {
IVEA = Short.MIN_VALUE;
}
}

protected final void initIVEB(String s) {
if (!s.trim().isEmpty()) {
IVEB = Short.parseShort(s);
} else {
IVEB = Short.MIN_VALUE;
}
}

protected final void initIVEC(String s) {
if (!s.trim().isEmpty()) {
IVEC = Short.parseShort(s);
} else {
IVEC = Short.MIN_VALUE;
}
}

protected final void initIVED(String s) {
if (!s.trim().isEmpty()) {
IVED = Short.parseShort(s);
} else {
IVED = Short.MIN_VALUE;
}
}

protected final void initIVFA(String s) {
if (!s.trim().isEmpty()) {
IVFA = Short.parseShort(s);
} else {
IVFA = Short.MIN_VALUE;
}
}

protected final void initIVFB(String s) {
if (!s.trim().isEmpty()) {
IVFB = Short.parseShort(s);
} else {
IVFB = Short.MIN_VALUE;
}
}

protected final void initIVFC(String s) {
if (!s.trim().isEmpty()) {
IVFC = Short.parseShort(s);
} else {
IVFC = Short.MIN_VALUE;
}
}

protected final void initIVFD(String s) {
if (!s.trim().isEmpty()) {
IVFD = Short.parseShort(s);
} else {
IVFD = Short.MIN_VALUE;
}
}

protected final void initIVIOW1(String s) {
if (!s.trim().isEmpty()) {
IVIOW1 = Byte.parseByte(s);
} else {
IVIOW1 = Byte.MIN_VALUE;
}
}

protected final void initIVJA(String s) {
if (!s.trim().isEmpty()) {
IVJA = Short.parseShort(s);
} else {
IVJA = Short.MIN_VALUE;
}
}

protected final void initIVJB(String s) {
if (!s.trim().isEmpty()) {
IVJB = Short.parseShort(s);
} else {
IVJB = Short.MIN_VALUE;
}
}

protected final void initIVJC(String s) {
if (!s.trim().isEmpty()) {
IVJC = Short.parseShort(s);
} else {
IVJC = Short.MIN_VALUE;
}
}

protected final void initIVJD(String s) {
if (!s.trim().isEmpty()) {
IVJD = Short.parseShort(s);
} else {
IVJD = Short.MIN_VALUE;
}
}

protected final void initIVLA(String s) {
if (!s.trim().isEmpty()) {
IVLA = Byte.parseByte(s);
} else {
IVLA = Byte.MIN_VALUE;
}
}

protected final void initIVLB(String s) {
if (!s.trim().isEmpty()) {
IVLB = Byte.parseByte(s);
} else {
IVLB = Byte.MIN_VALUE;
}
}

protected final void initIVLC(String s) {
if (!s.trim().isEmpty()) {
IVLC = Byte.parseByte(s);
} else {
IVLC = Byte.MIN_VALUE;
}
}

protected final void initIVLD(String s) {
if (!s.trim().isEmpty()) {
IVLD = Byte.parseByte(s);
} else {
IVLD = Byte.MIN_VALUE;
}
}

protected final void initIVLYR(String s) {
if (!s.trim().isEmpty()) {
IVLYR = Short.parseShort(s);
} else {
IVLYR = Short.MIN_VALUE;
}
}

protected final void initIVMA(String s) {
if (!s.trim().isEmpty()) {
IVMA = Short.parseShort(s);
} else {
IVMA = Short.MIN_VALUE;
}
}

protected final void initIVMB(String s) {
if (!s.trim().isEmpty()) {
IVMB = Short.parseShort(s);
} else {
IVMB = Short.MIN_VALUE;
}
}

protected final void initIVMC(String s) {
if (!s.trim().isEmpty()) {
IVMC = Short.parseShort(s);
} else {
IVMC = Short.MIN_VALUE;
}
}

protected final void initIVMD(String s) {
if (!s.trim().isEmpty()) {
IVMD = Short.parseShort(s);
} else {
IVMD = Short.MIN_VALUE;
}
}

protected final void initIVSC(String s) {
if (!s.trim().isEmpty()) {
IVSC = Short.parseShort(s);
} else {
IVSC = Short.MIN_VALUE;
}
}

protected final void initIVVA(String s) {
if (!s.trim().isEmpty()) {
IVVA = Byte.parseByte(s);
} else {
IVVA = Byte.MIN_VALUE;
}
}

protected final void initIVVB(String s) {
if (!s.trim().isEmpty()) {
IVVB = Byte.parseByte(s);
} else {
IVVB = Byte.MIN_VALUE;
}
}

protected final void initIVVC(String s) {
if (!s.trim().isEmpty()) {
IVVC = Byte.parseByte(s);
} else {
IVVC = Byte.MIN_VALUE;
}
}

protected final void initIVVD(String s) {
if (!s.trim().isEmpty()) {
IVVD = Byte.parseByte(s);
} else {
IVVD = Byte.MIN_VALUE;
}
}

protected final void initJ2PAY_BH(String s) {
if (!s.trim().isEmpty()) {
J2PAY_BH = Short.parseShort(s);
} else {
J2PAY_BH = Short.MIN_VALUE;
}
}

protected final void initJ2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC90_CC = Short.parseShort(s);
} else {
J2SOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBBGLY(String s) {
if (!s.trim().isEmpty()) {
JBBGLY = Short.parseShort(s);
} else {
JBBGLY = Short.MIN_VALUE;
}
}

protected final void initJBCHC1(String s) {
if (!s.trim().isEmpty()) {
JBCHC1 = Short.parseShort(s);
} else {
JBCHC1 = Short.MIN_VALUE;
}
}

protected final void initJBCHC2(String s) {
if (!s.trim().isEmpty()) {
JBCHC2 = Short.parseShort(s);
} else {
JBCHC2 = Short.MIN_VALUE;
}
}

protected final void initJBCHC3(String s) {
if (!s.trim().isEmpty()) {
JBCHC3 = Short.parseShort(s);
} else {
JBCHC3 = Short.MIN_VALUE;
}
}

protected final void initJBCSSF(String s) {
if (!s.trim().isEmpty()) {
JBCSSF = Double.parseDouble(s);
} else {
JBCSSF = Double.NaN;
}
}

protected final void initJBCSSM(String s) {
if (!s.trim().isEmpty()) {
JBCSSM = Double.parseDouble(s);
} else {
JBCSSM = Double.NaN;
}
}

protected final void initJBED(String s) {
if (!s.trim().isEmpty()) {
JBED = Short.parseShort(s);
} else {
JBED = Short.MIN_VALUE;
}
}

protected final void initJBED1(String s) {
if (!s.trim().isEmpty()) {
JBED1 = Short.parseShort(s);
} else {
JBED1 = Short.MIN_VALUE;
}
}

protected final void initJBED2(String s) {
if (!s.trim().isEmpty()) {
JBED2 = Short.parseShort(s);
} else {
JBED2 = Short.MIN_VALUE;
}
}

protected final void initJBED3(String s) {
if (!s.trim().isEmpty()) {
JBED3 = Short.parseShort(s);
} else {
JBED3 = Short.MIN_VALUE;
}
}

protected final void initJBED4(String s) {
if (!s.trim().isEmpty()) {
JBED4 = Short.parseShort(s);
} else {
JBED4 = Short.MIN_VALUE;
}
}

protected final void initJBED5(String s) {
if (!s.trim().isEmpty()) {
JBED5 = Short.parseShort(s);
} else {
JBED5 = Short.MIN_VALUE;
}
}

protected final void initJBEDH(String s) {
if (!s.trim().isEmpty()) {
JBEDH = Byte.parseByte(s);
} else {
JBEDH = Byte.MIN_VALUE;
}
}

protected final void initJBEDW(String s) {
if (!s.trim().isEmpty()) {
JBEDW = Byte.parseByte(s);
} else {
JBEDW = Byte.MIN_VALUE;
}
}

protected final void initJBGOLD(String s) {
if (!s.trim().isEmpty()) {
JBGOLD = Short.parseShort(s);
} else {
JBGOLD = Short.MIN_VALUE;
}
}

protected final void initJBHGS(String s) {
if (!s.trim().isEmpty()) {
JBHGS = Double.parseDouble(s);
} else {
JBHGS = Double.NaN;
}
}

protected final void initJBHHA(String s) {
if (!s.trim().isEmpty()) {
JBHHA = Short.parseShort(s);
} else {
JBHHA = Short.MIN_VALUE;
}
}

protected final void initJBHHB(String s) {
if (!s.trim().isEmpty()) {
JBHHB = Short.parseShort(s);
} else {
JBHHB = Short.MIN_VALUE;
}
}

protected final void initJBHHC(String s) {
if (!s.trim().isEmpty()) {
JBHHC = Short.parseShort(s);
} else {
JBHHC = Short.MIN_VALUE;
}
}

protected final void initJBHHD(String s) {
if (!s.trim().isEmpty()) {
JBHHD = Short.parseShort(s);
} else {
JBHHD = Short.MIN_VALUE;
}
}

protected final void initJBHHE(String s) {
if (!s.trim().isEmpty()) {
JBHHE = Short.parseShort(s);
} else {
JBHHE = Short.MIN_VALUE;
}
}

protected final void initJBHHF(String s) {
if (!s.trim().isEmpty()) {
JBHHF = Short.parseShort(s);
} else {
JBHHF = Short.MIN_VALUE;
}
}

protected final void initJBHRLK(String s) {
if (!s.trim().isEmpty()) {
JBHRLK = Short.parseShort(s);
} else {
JBHRLK = Short.MIN_VALUE;
}
}

protected final void initJBISCO_CC(String s) {
if (!s.trim().isEmpty()) {
JBISCO_CC = s;
}
}

protected final void initJBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC_DV = Short.parseShort(s);
} else {
JBNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJBOFFY_BH(String s) {
if (!s.trim().isEmpty()) {
JBOFFY_BH = Short.parseShort(s);
} else {
JBOFFY_BH = Short.MIN_VALUE;
}
}

protected final void initJBONUS(String s) {
if (!s.trim().isEmpty()) {
JBONUS = Short.parseShort(s);
} else {
JBONUS = Short.MIN_VALUE;
}
}

protected final void initJBOPPS(String s) {
if (!s.trim().isEmpty()) {
JBOPPS = Short.parseShort(s);
} else {
JBOPPS = Short.MIN_VALUE;
}
}

protected final void initJBPEN(String s) {
if (!s.trim().isEmpty()) {
JBPEN = Short.parseShort(s);
} else {
JBPEN = Short.MIN_VALUE;
}
}

protected final void initJBPENM(String s) {
if (!s.trim().isEmpty()) {
JBPENM = Short.parseShort(s);
} else {
JBPENM = Short.MIN_VALUE;
}
}

protected final void initJBPL_BH(String s) {
if (!s.trim().isEmpty()) {
JBPL_BH = Short.parseShort(s);
} else {
JBPL_BH = Short.MIN_VALUE;
}
}

protected final void initJBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JBRGSC_DV = Short.parseShort(s);
} else {
JBRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJBRISE(String s) {
if (!s.trim().isEmpty()) {
JBRISE = Short.parseShort(s);
} else {
JBRISE = Short.MIN_VALUE;
}
}

protected final void initJBSAT1(String s) {
if (!s.trim().isEmpty()) {
JBSAT1 = Short.parseShort(s);
} else {
JBSAT1 = Short.MIN_VALUE;
}
}

protected final void initJBSAT2(String s) {
if (!s.trim().isEmpty()) {
JBSAT2 = Short.parseShort(s);
} else {
JBSAT2 = Short.MIN_VALUE;
}
}

protected final void initJBSAT3(String s) {
if (!s.trim().isEmpty()) {
JBSAT3 = Short.parseShort(s);
} else {
JBSAT3 = Short.MIN_VALUE;
}
}

protected final void initJBSAT4(String s) {
if (!s.trim().isEmpty()) {
JBSAT4 = Short.parseShort(s);
} else {
JBSAT4 = Short.MIN_VALUE;
}
}

protected final void initJBSAT5(String s) {
if (!s.trim().isEmpty()) {
JBSAT5 = Short.parseShort(s);
} else {
JBSAT5 = Short.MIN_VALUE;
}
}

protected final void initJBSAT6(String s) {
if (!s.trim().isEmpty()) {
JBSAT6 = Short.parseShort(s);
} else {
JBSAT6 = Short.MIN_VALUE;
}
}

protected final void initJBSAT7(String s) {
if (!s.trim().isEmpty()) {
JBSAT7 = Short.parseShort(s);
} else {
JBSAT7 = Short.MIN_VALUE;
}
}

protected final void initJBSAT_BH(String s) {
if (!s.trim().isEmpty()) {
JBSAT_BH = Short.parseShort(s);
} else {
JBSAT_BH = Short.MIN_VALUE;
}
}

protected final void initJBSECT_BH(String s) {
if (!s.trim().isEmpty()) {
JBSECT_BH = Short.parseShort(s);
} else {
JBSECT_BH = Short.MIN_VALUE;
}
}

protected final void initJBSEC_BH(String s) {
if (!s.trim().isEmpty()) {
JBSEC_BH = Short.parseShort(s);
} else {
JBSEC_BH = Short.MIN_VALUE;
}
}

protected final void initJBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JBSEG_DV = Short.parseShort(s);
} else {
JBSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJBSIC(String s) {
if (!s.trim().isEmpty()) {
JBSIC = Short.parseShort(s);
} else {
JBSIC = Short.MIN_VALUE;
}
}

protected final void initJBSOC90LY_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC90LY_CC = Short.parseShort(s);
} else {
JBSOC90LY_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC90_CC = Short.parseShort(s);
} else {
JBSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBSTATL(String s) {
if (!s.trim().isEmpty()) {
JBSTATL = Short.parseShort(s);
} else {
JBSTATL = Short.MIN_VALUE;
}
}

protected final void initJBSTATT(String s) {
if (!s.trim().isEmpty()) {
JBSTATT = Short.parseShort(s);
} else {
JBSTATT = Short.MIN_VALUE;
}
}

protected final void initJBTERM(String s) {
if (!s.trim().isEmpty()) {
JBTERM = Short.parseShort(s);
} else {
JBTERM = Short.MIN_VALUE;
}
}

protected final void initJBTIME(String s) {
if (!s.trim().isEmpty()) {
JBTIME = Short.parseShort(s);
} else {
JBTIME = Short.MIN_VALUE;
}
}

protected final void initJBTTWM(String s) {
if (!s.trim().isEmpty()) {
JBTTWM = Short.parseShort(s);
} else {
JBTTWM = Short.MIN_VALUE;
}
}

protected final void initJBUB(String s) {
if (!s.trim().isEmpty()) {
JBUB = Short.parseShort(s);
} else {
JBUB = Short.MIN_VALUE;
}
}

protected final void initJBUBY(String s) {
if (!s.trim().isEmpty()) {
JBUBY = Short.parseShort(s);
} else {
JBUBY = Short.MIN_VALUE;
}
}

protected final void initJLCSSF(String s) {
if (!s.trim().isEmpty()) {
JLCSSF = Double.parseDouble(s);
} else {
JLCSSF = Double.NaN;
}
}

protected final void initJLCSSM(String s) {
if (!s.trim().isEmpty()) {
JLCSSM = Double.parseDouble(s);
} else {
JLCSSM = Double.NaN;
}
}

protected final void initJLGOLD(String s) {
if (!s.trim().isEmpty()) {
JLGOLD = Short.parseShort(s);
} else {
JLGOLD = Short.MIN_VALUE;
}
}

protected final void initJLHGS(String s) {
if (!s.trim().isEmpty()) {
JLHGS = Double.parseDouble(s);
} else {
JLHGS = Double.NaN;
}
}

protected final void initJLID(String s) {
if (!s.trim().isEmpty()) {
JLID = Short.parseShort(s);
} else {
JLID = Short.MIN_VALUE;
}
}

protected final void initJLISCO_CC(String s) {
if (!s.trim().isEmpty()) {
JLISCO_CC = s;
}
}

protected final void initJLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC_DV = Short.parseShort(s);
} else {
JLNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JLRGSC_DV = Short.parseShort(s);
} else {
JLRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJLSEC(String s) {
if (!s.trim().isEmpty()) {
JLSEC = Short.parseShort(s);
} else {
JLSEC = Short.MIN_VALUE;
}
}

protected final void initJLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JLSEG_DV = Short.parseShort(s);
} else {
JLSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJLSIC(String s) {
if (!s.trim().isEmpty()) {
JLSIC = Short.parseShort(s);
} else {
JLSIC = Short.MIN_VALUE;
}
}

protected final void initJLSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC90_CC = Short.parseShort(s);
} else {
JLSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJLYID(String s) {
if (!s.trim().isEmpty()) {
JLYID = Short.parseShort(s);
} else {
JLYID = Short.MIN_VALUE;
}
}

protected final void initJNMNTH(String s) {
if (!s.trim().isEmpty()) {
JNMNTH = Short.parseShort(s);
} else {
JNMNTH = Short.MIN_VALUE;
}
}

protected final void initJNYEAR(String s) {
if (!s.trim().isEmpty()) {
JNYEAR = Short.parseShort(s);
} else {
JNYEAR = Short.MIN_VALUE;
}
}

protected final void initJSBGM(String s) {
if (!s.trim().isEmpty()) {
JSBGM = Byte.parseByte(s);
} else {
JSBGM = Byte.MIN_VALUE;
}
}

protected final void initJSBGY4(String s) {
if (!s.trim().isEmpty()) {
JSBGY4 = Short.parseShort(s);
} else {
JSBGY4 = Short.MIN_VALUE;
}
}

protected final void initJSHRLK(String s) {
if (!s.trim().isEmpty()) {
JSHRLK = Short.parseShort(s);
} else {
JSHRLK = Short.MIN_VALUE;
}
}

protected final void initJSPAYG(String s) {
if (!s.trim().isEmpty()) {
JSPAYG = Double.parseDouble(s);
} else {
JSPAYG = Double.NaN;
}
}

protected final void initJSPAYGI(String s) {
if (!s.trim().isEmpty()) {
JSPAYGI = Short.parseShort(s);
} else {
JSPAYGI = Short.MIN_VALUE;
}
}

protected final void initJSPAYL(String s) {
if (!s.trim().isEmpty()) {
JSPAYL = Integer.parseInt(s);
} else {
JSPAYL = Integer.MIN_VALUE;
}
}

protected final void initJSPL_BH(String s) {
if (!s.trim().isEmpty()) {
JSPL_BH = Short.parseShort(s);
} else {
JSPL_BH = Short.MIN_VALUE;
}
}

protected final void initJSPRBY(String s) {
if (!s.trim().isEmpty()) {
JSPRBY = Short.parseShort(s);
} else {
JSPRBY = Short.MIN_VALUE;
}
}

protected final void initJSPREY(String s) {
if (!s.trim().isEmpty()) {
JSPREY = Short.parseShort(s);
} else {
JSPREY = Short.MIN_VALUE;
}
}

protected final void initJSPROF(String s) {
if (!s.trim().isEmpty()) {
JSPROF = Double.parseDouble(s);
} else {
JSPROF = Double.NaN;
}
}

protected final void initJSPROFI(String s) {
if (!s.trim().isEmpty()) {
JSPROFI = Short.parseShort(s);
} else {
JSPROFI = Short.MIN_VALUE;
}
}

protected final void initJSPYBM(String s) {
if (!s.trim().isEmpty()) {
JSPYBM = Short.parseShort(s);
} else {
JSPYBM = Short.MIN_VALUE;
}
}

protected final void initJSPYBY(String s) {
if (!s.trim().isEmpty()) {
JSPYBY = Short.parseShort(s);
} else {
JSPYBY = Short.MIN_VALUE;
}
}

protected final void initJSPYBY4(String s) {
if (!s.trim().isEmpty()) {
JSPYBY4 = Short.parseShort(s);
} else {
JSPYBY4 = Short.MIN_VALUE;
}
}

protected final void initJSPYEM(String s) {
if (!s.trim().isEmpty()) {
JSPYEM = Short.parseShort(s);
} else {
JSPYEM = Short.MIN_VALUE;
}
}

protected final void initJSPYEY(String s) {
if (!s.trim().isEmpty()) {
JSPYEY = Short.parseShort(s);
} else {
JSPYEY = Short.MIN_VALUE;
}
}

protected final void initJSPYEY4(String s) {
if (!s.trim().isEmpty()) {
JSPYEY4 = Short.parseShort(s);
} else {
JSPYEY4 = Short.MIN_VALUE;
}
}

protected final void initJSSAT(String s) {
if (!s.trim().isEmpty()) {
JSSAT = Short.parseShort(s);
} else {
JSSAT = Short.MIN_VALUE;
}
}

protected final void initJSSAT1(String s) {
if (!s.trim().isEmpty()) {
JSSAT1 = Short.parseShort(s);
} else {
JSSAT1 = Short.MIN_VALUE;
}
}

protected final void initJSSAT2(String s) {
if (!s.trim().isEmpty()) {
JSSAT2 = Short.parseShort(s);
} else {
JSSAT2 = Short.MIN_VALUE;
}
}

protected final void initJSSAT3(String s) {
if (!s.trim().isEmpty()) {
JSSAT3 = Short.parseShort(s);
} else {
JSSAT3 = Short.MIN_VALUE;
}
}

protected final void initJSSAT4(String s) {
if (!s.trim().isEmpty()) {
JSSAT4 = Short.parseShort(s);
} else {
JSSAT4 = Short.MIN_VALUE;
}
}

protected final void initJSSAT5(String s) {
if (!s.trim().isEmpty()) {
JSSAT5 = Short.parseShort(s);
} else {
JSSAT5 = Short.MIN_VALUE;
}
}

protected final void initJSTIME(String s) {
if (!s.trim().isEmpty()) {
JSTIME = Short.parseShort(s);
} else {
JSTIME = Short.MIN_VALUE;
}
}

protected final void initJSTTWM(String s) {
if (!s.trim().isEmpty()) {
JSTTWM = Short.parseShort(s);
} else {
JSTTWM = Short.MIN_VALUE;
}
}

protected final void initJSTYPE(String s) {
if (!s.trim().isEmpty()) {
JSTYPE = Short.parseShort(s);
} else {
JSTYPE = Short.MIN_VALUE;
}
}

protected final void initJTYID(String s) {
if (!s.trim().isEmpty()) {
JTYID = Short.parseShort(s);
} else {
JTYID = Short.MIN_VALUE;
}
}

protected final void initJUHRSL(String s) {
if (!s.trim().isEmpty()) {
JUHRSL = Short.parseShort(s);
} else {
JUHRSL = Short.MIN_VALUE;
}
}

protected final void initJUHRSX(String s) {
if (!s.trim().isEmpty()) {
JUHRSX = Short.parseShort(s);
} else {
JUHRSX = Short.MIN_VALUE;
}
}

protected final void initJULK1(String s) {
if (!s.trim().isEmpty()) {
JULK1 = Short.parseShort(s);
} else {
JULK1 = Short.MIN_VALUE;
}
}

protected final void initJULK4(String s) {
if (!s.trim().isEmpty()) {
JULK4 = Short.parseShort(s);
} else {
JULK4 = Short.MIN_VALUE;
}
}

protected final void initJUPAYL(String s) {
if (!s.trim().isEmpty()) {
JUPAYL = Short.parseShort(s);
} else {
JUPAYL = Short.MIN_VALUE;
}
}

protected final void initJUPAYX(String s) {
if (!s.trim().isEmpty()) {
JUPAYX = Short.parseShort(s);
} else {
JUPAYX = Short.MIN_VALUE;
}
}

protected final void initJUSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JUSOC90_CC = Short.parseShort(s);
} else {
JUSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJUSPEC(String s) {
if (!s.trim().isEmpty()) {
JUSPEC = Short.parseShort(s);
} else {
JUSPEC = Short.MIN_VALUE;
}
}

protected final void initLADOPT(String s) {
if (!s.trim().isEmpty()) {
LADOPT = Byte.parseByte(s);
} else {
LADOPT = Byte.MIN_VALUE;
}
}

protected final void initLCHMOR(String s) {
if (!s.trim().isEmpty()) {
LCHMOR = Byte.parseByte(s);
} else {
LCHMOR = Byte.MIN_VALUE;
}
}

protected final void initLCHMORN(String s) {
if (!s.trim().isEmpty()) {
LCHMORN = Byte.parseByte(s);
} else {
LCHMORN = Byte.MIN_VALUE;
}
}

protected final void initLCOH(String s) {
if (!s.trim().isEmpty()) {
LCOH = Byte.parseByte(s);
} else {
LCOH = Byte.MIN_VALUE;
}
}

protected final void initLEDENDM(String s) {
if (!s.trim().isEmpty()) {
LEDENDM = Byte.parseByte(s);
} else {
LEDENDM = Byte.MIN_VALUE;
}
}

protected final void initLEDENDY(String s) {
if (!s.trim().isEmpty()) {
LEDENDY = Byte.parseByte(s);
} else {
LEDENDY = Byte.MIN_VALUE;
}
}

protected final void initLEDENY4(String s) {
if (!s.trim().isEmpty()) {
LEDENY4 = Short.parseShort(s);
} else {
LEDENY4 = Short.MIN_VALUE;
}
}

protected final void initLEDNOW(String s) {
if (!s.trim().isEmpty()) {
LEDNOW = Byte.parseByte(s);
} else {
LEDNOW = Byte.MIN_VALUE;
}
}

protected final void initLEWGHT(String s) {
if (!s.trim().isEmpty()) {
LEWGHT = Double.parseDouble(s);
} else {
LEWGHT = Double.NaN;
}
}

protected final void initLKMOVY(String s) {
if (!s.trim().isEmpty()) {
LKMOVY = Short.parseShort(s);
} else {
LKMOVY = Short.MIN_VALUE;
}
}

protected final void initLKNBRD(String s) {
if (!s.trim().isEmpty()) {
LKNBRD = Short.parseShort(s);
} else {
LKNBRD = Short.MIN_VALUE;
}
}

protected final void initLNADPT(String s) {
if (!s.trim().isEmpty()) {
LNADPT = Byte.parseByte(s);
} else {
LNADPT = Byte.MIN_VALUE;
}
}

protected final void initLNCOH(String s) {
if (!s.trim().isEmpty()) {
LNCOH = Byte.parseByte(s);
} else {
LNCOH = Byte.MIN_VALUE;
}
}

protected final void initLNPRNT(String s) {
if (!s.trim().isEmpty()) {
LNPRNT = Byte.parseByte(s);
} else {
LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initLPRNT(String s) {
if (!s.trim().isEmpty()) {
LPRNT = Byte.parseByte(s);
} else {
LPRNT = Byte.MIN_VALUE;
}
}

protected final void initLRWGHT(String s) {
if (!s.trim().isEmpty()) {
LRWGHT = Double.parseDouble(s);
} else {
LRWGHT = Double.NaN;
}
}

protected final void initMASTAT(String s) {
if (!s.trim().isEmpty()) {
MASTAT = Short.parseShort(s);
} else {
MASTAT = Short.MIN_VALUE;
}
}

protected final void initMEMORIG_BH(String s) {
if (!s.trim().isEmpty()) {
MEMORIG_BH = Short.parseShort(s);
} else {
MEMORIG_BH = Short.MIN_VALUE;
}
}

protected final void initMLSTAT_BH(String s) {
if (!s.trim().isEmpty()) {
MLSTAT_BH = Short.parseShort(s);
} else {
MLSTAT_BH = Short.MIN_VALUE;
}
}

protected final void initMNPID_BH(String s) {
if (!s.trim().isEmpty()) {
MNPID_BH = Integer.parseInt(s);
} else {
MNPID_BH = Integer.MIN_VALUE;
}
}

protected final void initMOVEST(String s) {
if (!s.trim().isEmpty()) {
MOVEST = Short.parseShort(s);
} else {
MOVEST = Short.MIN_VALUE;
}
}

protected final void initMOVJB(String s) {
if (!s.trim().isEmpty()) {
MOVJB = Short.parseShort(s);
} else {
MOVJB = Short.MIN_VALUE;
}
}

protected final void initMOVJBA(String s) {
if (!s.trim().isEmpty()) {
MOVJBA = Short.parseShort(s);
} else {
MOVJBA = Short.MIN_VALUE;
}
}

protected final void initMOVJBB(String s) {
if (!s.trim().isEmpty()) {
MOVJBB = Short.parseShort(s);
} else {
MOVJBB = Short.MIN_VALUE;
}
}

protected final void initMOVJBC(String s) {
if (!s.trim().isEmpty()) {
MOVJBC = Short.parseShort(s);
} else {
MOVJBC = Short.MIN_VALUE;
}
}

protected final void initMOVJBD(String s) {
if (!s.trim().isEmpty()) {
MOVJBD = Short.parseShort(s);
} else {
MOVJBD = Short.MIN_VALUE;
}
}

protected final void initMOVJBE(String s) {
if (!s.trim().isEmpty()) {
MOVJBE = Short.parseShort(s);
} else {
MOVJBE = Short.MIN_VALUE;
}
}

protected final void initMOVJBF(String s) {
if (!s.trim().isEmpty()) {
MOVJBF = Short.parseShort(s);
} else {
MOVJBF = Short.MIN_VALUE;
}
}

protected final void initMOVJBG(String s) {
if (!s.trim().isEmpty()) {
MOVJBG = Short.parseShort(s);
} else {
MOVJBG = Short.MIN_VALUE;
}
}

protected final void initMOVJBH(String s) {
if (!s.trim().isEmpty()) {
MOVJBH = Short.parseShort(s);
} else {
MOVJBH = Short.MIN_VALUE;
}
}

protected final void initMOVJBI(String s) {
if (!s.trim().isEmpty()) {
MOVJBI = Short.parseShort(s);
} else {
MOVJBI = Short.MIN_VALUE;
}
}

protected final void initMOVY1(String s) {
if (!s.trim().isEmpty()) {
MOVY1 = Short.parseShort(s);
} else {
MOVY1 = Short.MIN_VALUE;
}
}

protected final void initMOVY2(String s) {
if (!s.trim().isEmpty()) {
MOVY2 = Short.parseShort(s);
} else {
MOVY2 = Short.MIN_VALUE;
}
}

protected final void initMRJBOSS(String s) {
if (!s.trim().isEmpty()) {
MRJBOSS = Short.parseShort(s);
} else {
MRJBOSS = Short.MIN_VALUE;
}
}

protected final void initMRJCSSF(String s) {
if (!s.trim().isEmpty()) {
MRJCSSF = Double.parseDouble(s);
} else {
MRJCSSF = Double.NaN;
}
}

protected final void initMRJCSSM(String s) {
if (!s.trim().isEmpty()) {
MRJCSSM = Double.parseDouble(s);
} else {
MRJCSSM = Double.NaN;
}
}

protected final void initMRJEND(String s) {
if (!s.trim().isEmpty()) {
MRJEND = Short.parseShort(s);
} else {
MRJEND = Short.MIN_VALUE;
}
}

protected final void initMRJGOLD(String s) {
if (!s.trim().isEmpty()) {
MRJGOLD = Short.parseShort(s);
} else {
MRJGOLD = Short.MIN_VALUE;
}
}

protected final void initMRJHGS(String s) {
if (!s.trim().isEmpty()) {
MRJHGS = Double.parseDouble(s);
} else {
MRJHGS = Double.NaN;
}
}

protected final void initMRJISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
MRJISCO88_CC = Short.parseShort(s);
} else {
MRJISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initMRJISCO_CC(String s) {
if (!s.trim().isEmpty()) {
MRJISCO_CC = s;
}
}

protected final void initMRJMNGR(String s) {
if (!s.trim().isEmpty()) {
MRJMNGR = Short.parseShort(s);
} else {
MRJMNGR = Short.MIN_VALUE;
}
}

protected final void initMRJNSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
MRJNSSEC8_DV = Short.parseShort(s);
} else {
MRJNSSEC8_DV = Short.MIN_VALUE;
}
}

protected final void initMRJNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
MRJNSSEC_DV = Short.parseShort(s);
} else {
MRJNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initMRJRGSC(String s) {
if (!s.trim().isEmpty()) {
MRJRGSC = Short.parseShort(s);
} else {
MRJRGSC = Short.MIN_VALUE;
}
}

protected final void initMRJSEC(String s) {
if (!s.trim().isEmpty()) {
MRJSEC = Short.parseShort(s);
} else {
MRJSEC = Short.MIN_VALUE;
}
}

protected final void initMRJSEG(String s) {
if (!s.trim().isEmpty()) {
MRJSEG = Short.parseShort(s);
} else {
MRJSEG = Short.MIN_VALUE;
}
}

protected final void initMRJSEMP(String s) {
if (!s.trim().isEmpty()) {
MRJSEMP = Short.parseShort(s);
} else {
MRJSEMP = Short.MIN_VALUE;
}
}

protected final void initMRJSIC(String s) {
if (!s.trim().isEmpty()) {
MRJSIC = Short.parseShort(s);
} else {
MRJSIC = Short.MIN_VALUE;
}
}

protected final void initMRJSIZE(String s) {
if (!s.trim().isEmpty()) {
MRJSIZE = Short.parseShort(s);
} else {
MRJSIZE = Short.MIN_VALUE;
}
}

protected final void initMRJSOC(String s) {
if (!s.trim().isEmpty()) {
MRJSOC = Short.parseShort(s);
} else {
MRJSOC = Short.MIN_VALUE;
}
}

protected final void initNAIDXHH_BH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH_BH = Short.parseShort(s);
} else {
NAIDXHH_BH = Short.MIN_VALUE;
}
}

protected final void initNCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHILD_DV = Short.parseShort(s);
} else {
NCHILD_DV = Short.MIN_VALUE;
}
}

protected final void initNCIGS(String s) {
if (!s.trim().isEmpty()) {
NCIGS = Short.parseShort(s);
} else {
NCIGS = Short.MIN_VALUE;
}
}

protected final void initNELYR(String s) {
if (!s.trim().isEmpty()) {
NELYR = Byte.parseByte(s);
} else {
NELYR = Byte.MIN_VALUE;
}
}

protected final void initNEMST(String s) {
if (!s.trim().isEmpty()) {
NEMST = Short.parseShort(s);
} else {
NEMST = Short.MIN_VALUE;
}
}

protected final void initNET1AG(String s) {
if (!s.trim().isEmpty()) {
NET1AG = Short.parseShort(s);
} else {
NET1AG = Short.MIN_VALUE;
}
}

protected final void initNET1JB(String s) {
if (!s.trim().isEmpty()) {
NET1JB = Short.parseShort(s);
} else {
NET1JB = Short.MIN_VALUE;
}
}

protected final void initNET1KN(String s) {
if (!s.trim().isEmpty()) {
NET1KN = Byte.parseByte(s);
} else {
NET1KN = Byte.MIN_VALUE;
}
}

protected final void initNET1LV(String s) {
if (!s.trim().isEmpty()) {
NET1LV = Byte.parseByte(s);
} else {
NET1LV = Byte.MIN_VALUE;
}
}

protected final void initNET1PH(String s) {
if (!s.trim().isEmpty()) {
NET1PH = Short.parseShort(s);
} else {
NET1PH = Short.MIN_VALUE;
}
}

protected final void initNET1RL(String s) {
if (!s.trim().isEmpty()) {
NET1RL = Byte.parseByte(s);
} else {
NET1RL = Byte.MIN_VALUE;
}
}

protected final void initNET1WR(String s) {
if (!s.trim().isEmpty()) {
NET1WR = Short.parseShort(s);
} else {
NET1WR = Short.MIN_VALUE;
}
}

protected final void initNET2AG(String s) {
if (!s.trim().isEmpty()) {
NET2AG = Short.parseShort(s);
} else {
NET2AG = Short.MIN_VALUE;
}
}

protected final void initNET2JB(String s) {
if (!s.trim().isEmpty()) {
NET2JB = Short.parseShort(s);
} else {
NET2JB = Short.MIN_VALUE;
}
}

protected final void initNET2KN(String s) {
if (!s.trim().isEmpty()) {
NET2KN = Byte.parseByte(s);
} else {
NET2KN = Byte.MIN_VALUE;
}
}

protected final void initNET2LV(String s) {
if (!s.trim().isEmpty()) {
NET2LV = Byte.parseByte(s);
} else {
NET2LV = Byte.MIN_VALUE;
}
}

protected final void initNET2PH(String s) {
if (!s.trim().isEmpty()) {
NET2PH = Short.parseShort(s);
} else {
NET2PH = Short.MIN_VALUE;
}
}

protected final void initNET2RL(String s) {
if (!s.trim().isEmpty()) {
NET2RL = Byte.parseByte(s);
} else {
NET2RL = Byte.MIN_VALUE;
}
}

protected final void initNET2WR(String s) {
if (!s.trim().isEmpty()) {
NET2WR = Short.parseShort(s);
} else {
NET2WR = Short.MIN_VALUE;
}
}

protected final void initNET3AG(String s) {
if (!s.trim().isEmpty()) {
NET3AG = Short.parseShort(s);
} else {
NET3AG = Short.MIN_VALUE;
}
}

protected final void initNET3JB(String s) {
if (!s.trim().isEmpty()) {
NET3JB = Short.parseShort(s);
} else {
NET3JB = Short.MIN_VALUE;
}
}

protected final void initNET3KN(String s) {
if (!s.trim().isEmpty()) {
NET3KN = Byte.parseByte(s);
} else {
NET3KN = Byte.MIN_VALUE;
}
}

protected final void initNET3LV(String s) {
if (!s.trim().isEmpty()) {
NET3LV = Byte.parseByte(s);
} else {
NET3LV = Byte.MIN_VALUE;
}
}

protected final void initNET3PH(String s) {
if (!s.trim().isEmpty()) {
NET3PH = Short.parseShort(s);
} else {
NET3PH = Short.MIN_VALUE;
}
}

protected final void initNET3RL(String s) {
if (!s.trim().isEmpty()) {
NET3RL = Byte.parseByte(s);
} else {
NET3RL = Byte.MIN_VALUE;
}
}

protected final void initNET3WR(String s) {
if (!s.trim().isEmpty()) {
NET3WR = Short.parseShort(s);
} else {
NET3WR = Short.MIN_VALUE;
}
}

protected final void initNETAG_1(String s) {
if (!s.trim().isEmpty()) {
NETAG_1 = Short.parseShort(s);
} else {
NETAG_1 = Short.MIN_VALUE;
}
}

protected final void initNETAG_2(String s) {
if (!s.trim().isEmpty()) {
NETAG_2 = Short.parseShort(s);
} else {
NETAG_2 = Short.MIN_VALUE;
}
}

protected final void initNETAG_3(String s) {
if (!s.trim().isEmpty()) {
NETAG_3 = Short.parseShort(s);
} else {
NETAG_3 = Short.MIN_VALUE;
}
}

protected final void initNETKN_1(String s) {
if (!s.trim().isEmpty()) {
NETKN_1 = Byte.parseByte(s);
} else {
NETKN_1 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_2(String s) {
if (!s.trim().isEmpty()) {
NETKN_2 = Byte.parseByte(s);
} else {
NETKN_2 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_3(String s) {
if (!s.trim().isEmpty()) {
NETKN_3 = Byte.parseByte(s);
} else {
NETKN_3 = Byte.MIN_VALUE;
}
}

protected final void initNETPH_1(String s) {
if (!s.trim().isEmpty()) {
NETPH_1 = Short.parseShort(s);
} else {
NETPH_1 = Short.MIN_VALUE;
}
}

protected final void initNETPH_2(String s) {
if (!s.trim().isEmpty()) {
NETPH_2 = Short.parseShort(s);
} else {
NETPH_2 = Short.MIN_VALUE;
}
}

protected final void initNETPH_3(String s) {
if (!s.trim().isEmpty()) {
NETPH_3 = Short.parseShort(s);
} else {
NETPH_3 = Short.MIN_VALUE;
}
}

protected final void initNETRL_1(String s) {
if (!s.trim().isEmpty()) {
NETRL_1 = Byte.parseByte(s);
} else {
NETRL_1 = Byte.MIN_VALUE;
}
}

protected final void initNETRL_2(String s) {
if (!s.trim().isEmpty()) {
NETRL_2 = Byte.parseByte(s);
} else {
NETRL_2 = Byte.MIN_VALUE;
}
}

protected final void initNETRL_3(String s) {
if (!s.trim().isEmpty()) {
NETRL_3 = Byte.parseByte(s);
} else {
NETRL_3 = Byte.MIN_VALUE;
}
}

protected final void initNETSX1(String s) {
if (!s.trim().isEmpty()) {
NETSX1 = Short.parseShort(s);
} else {
NETSX1 = Short.MIN_VALUE;
}
}

protected final void initNETSX2(String s) {
if (!s.trim().isEmpty()) {
NETSX2 = Short.parseShort(s);
} else {
NETSX2 = Short.MIN_VALUE;
}
}

protected final void initNETSX3(String s) {
if (!s.trim().isEmpty()) {
NETSX3 = Short.parseShort(s);
} else {
NETSX3 = Short.MIN_VALUE;
}
}

protected final void initNETSX_1(String s) {
if (!s.trim().isEmpty()) {
NETSX_1 = Short.parseShort(s);
} else {
NETSX_1 = Short.MIN_VALUE;
}
}

protected final void initNETSX_2(String s) {
if (!s.trim().isEmpty()) {
NETSX_2 = Short.parseShort(s);
} else {
NETSX_2 = Short.MIN_VALUE;
}
}

protected final void initNETSX_3(String s) {
if (!s.trim().isEmpty()) {
NETSX_3 = Short.parseShort(s);
} else {
NETSX_3 = Short.MIN_VALUE;
}
}

protected final void initNETWR_1(String s) {
if (!s.trim().isEmpty()) {
NETWR_1 = Short.parseShort(s);
} else {
NETWR_1 = Short.MIN_VALUE;
}
}

protected final void initNETWR_2(String s) {
if (!s.trim().isEmpty()) {
NETWR_2 = Short.parseShort(s);
} else {
NETWR_2 = Short.MIN_VALUE;
}
}

protected final void initNETWR_3(String s) {
if (!s.trim().isEmpty()) {
NETWR_3 = Short.parseShort(s);
} else {
NETWR_3 = Short.MIN_VALUE;
}
}

protected final void initNEWHY(String s) {
if (!s.trim().isEmpty()) {
NEWHY = Short.parseShort(s);
} else {
NEWHY = Short.MIN_VALUE;
}
}

protected final void initNEYRJN(String s) {
if (!s.trim().isEmpty()) {
NEYRJN = Short.parseShort(s);
} else {
NEYRJN = Short.MIN_VALUE;
}
}

protected final void initNF1(String s) {
if (!s.trim().isEmpty()) {
NF1 = Short.parseShort(s);
} else {
NF1 = Short.MIN_VALUE;
}
}

protected final void initNJBNEW(String s) {
if (!s.trim().isEmpty()) {
NJBNEW = Short.parseShort(s);
} else {
NJBNEW = Short.MIN_VALUE;
}
}

protected final void initNJBS(String s) {
if (!s.trim().isEmpty()) {
NJBS = Short.parseShort(s);
} else {
NJBS = Short.MIN_VALUE;
}
}

protected final void initNJBSP(String s) {
if (!s.trim().isEmpty()) {
NJBSP = Short.parseShort(s);
} else {
NJBSP = Short.MIN_VALUE;
}
}

protected final void initNJBWKS(String s) {
if (!s.trim().isEmpty()) {
NJBWKS = Double.parseDouble(s);
} else {
NJBWKS = Double.NaN;
}
}

protected final void initNJISP(String s) {
if (!s.trim().isEmpty()) {
NJISP = Short.parseShort(s);
} else {
NJISP = Short.MIN_VALUE;
}
}

protected final void initNJIWKS(String s) {
if (!s.trim().isEmpty()) {
NJIWKS = Double.parseDouble(s);
} else {
NJIWKS = Double.NaN;
}
}

protected final void initNJUSP(String s) {
if (!s.trim().isEmpty()) {
NJUSP = Short.parseShort(s);
} else {
NJUSP = Short.MIN_VALUE;
}
}

protected final void initNJUWKS(String s) {
if (!s.trim().isEmpty()) {
NJUWKS = Double.parseDouble(s);
} else {
NJUWKS = Double.NaN;
}
}

protected final void initNMAR_BH(String s) {
if (!s.trim().isEmpty()) {
NMAR_BH = Byte.parseByte(s);
} else {
NMAR_BH = Byte.MIN_VALUE;
}
}

protected final void initNORGA(String s) {
if (!s.trim().isEmpty()) {
NORGA = Byte.parseByte(s);
} else {
NORGA = Byte.MIN_VALUE;
}
}

protected final void initNORGM(String s) {
if (!s.trim().isEmpty()) {
NORGM = Byte.parseByte(s);
} else {
NORGM = Byte.MIN_VALUE;
}
}

protected final void initNQFEDA(String s) {
if (!s.trim().isEmpty()) {
NQFEDA = Byte.parseByte(s);
} else {
NQFEDA = Byte.MIN_VALUE;
}
}

protected final void initNQFEDB(String s) {
if (!s.trim().isEmpty()) {
NQFEDB = Byte.parseByte(s);
} else {
NQFEDB = Byte.MIN_VALUE;
}
}

protected final void initNQFEDC(String s) {
if (!s.trim().isEmpty()) {
NQFEDC = Byte.parseByte(s);
} else {
NQFEDC = Byte.MIN_VALUE;
}
}

protected final void initNQFEDD(String s) {
if (!s.trim().isEmpty()) {
NQFEDD = Short.parseShort(s);
} else {
NQFEDD = Short.MIN_VALUE;
}
}

protected final void initNQFEDE(String s) {
if (!s.trim().isEmpty()) {
NQFEDE = Short.parseShort(s);
} else {
NQFEDE = Short.MIN_VALUE;
}
}

protected final void initNQFEDF(String s) {
if (!s.trim().isEmpty()) {
NQFEDF = Byte.parseByte(s);
} else {
NQFEDF = Byte.MIN_VALUE;
}
}

protected final void initNQFEDG(String s) {
if (!s.trim().isEmpty()) {
NQFEDG = Byte.parseByte(s);
} else {
NQFEDG = Byte.MIN_VALUE;
}
}

protected final void initNQFEDH(String s) {
if (!s.trim().isEmpty()) {
NQFEDH = Byte.parseByte(s);
} else {
NQFEDH = Byte.MIN_VALUE;
}
}

protected final void initNQFEDI(String s) {
if (!s.trim().isEmpty()) {
NQFEDI = Byte.parseByte(s);
} else {
NQFEDI = Byte.MIN_VALUE;
}
}

protected final void initNQFEDJ(String s) {
if (!s.trim().isEmpty()) {
NQFEDJ = Byte.parseByte(s);
} else {
NQFEDJ = Byte.MIN_VALUE;
}
}

protected final void initNQFEDK(String s) {
if (!s.trim().isEmpty()) {
NQFEDK = Byte.parseByte(s);
} else {
NQFEDK = Byte.MIN_VALUE;
}
}

protected final void initNQFEDL(String s) {
if (!s.trim().isEmpty()) {
NQFEDL = Short.parseShort(s);
} else {
NQFEDL = Short.MIN_VALUE;
}
}

protected final void initNQFEDM(String s) {
if (!s.trim().isEmpty()) {
NQFEDM = Byte.parseByte(s);
} else {
NQFEDM = Byte.MIN_VALUE;
}
}

protected final void initNQFEDN(String s) {
if (!s.trim().isEmpty()) {
NQFEDN = Short.parseShort(s);
} else {
NQFEDN = Short.MIN_VALUE;
}
}

protected final void initNQFEDO(String s) {
if (!s.trim().isEmpty()) {
NQFEDO = Byte.parseByte(s);
} else {
NQFEDO = Byte.MIN_VALUE;
}
}

protected final void initNQFEDP(String s) {
if (!s.trim().isEmpty()) {
NQFEDP = Byte.parseByte(s);
} else {
NQFEDP = Byte.MIN_VALUE;
}
}

protected final void initNQFEDQ(String s) {
if (!s.trim().isEmpty()) {
NQFEDQ = Byte.parseByte(s);
} else {
NQFEDQ = Byte.MIN_VALUE;
}
}

protected final void initNQFEDR(String s) {
if (!s.trim().isEmpty()) {
NQFEDR = Byte.parseByte(s);
} else {
NQFEDR = Byte.MIN_VALUE;
}
}

protected final void initNQFEDS(String s) {
if (!s.trim().isEmpty()) {
NQFEDS = Short.parseShort(s);
} else {
NQFEDS = Short.MIN_VALUE;
}
}

protected final void initNQFEXA(String s) {
if (!s.trim().isEmpty()) {
NQFEXA = Short.parseShort(s);
} else {
NQFEXA = Short.MIN_VALUE;
}
}

protected final void initNQFEXB(String s) {
if (!s.trim().isEmpty()) {
NQFEXB = Short.parseShort(s);
} else {
NQFEXB = Short.MIN_VALUE;
}
}

protected final void initNQFEXC(String s) {
if (!s.trim().isEmpty()) {
NQFEXC = Short.parseShort(s);
} else {
NQFEXC = Short.MIN_VALUE;
}
}

protected final void initNQFEXE(String s) {
if (!s.trim().isEmpty()) {
NQFEXE = Byte.parseByte(s);
} else {
NQFEXE = Byte.MIN_VALUE;
}
}

protected final void initNQFEXF(String s) {
if (!s.trim().isEmpty()) {
NQFEXF = Byte.parseByte(s);
} else {
NQFEXF = Byte.MIN_VALUE;
}
}

protected final void initNQFEXG(String s) {
if (!s.trim().isEmpty()) {
NQFEXG = Byte.parseByte(s);
} else {
NQFEXG = Byte.MIN_VALUE;
}
}

protected final void initNQFEXH(String s) {
if (!s.trim().isEmpty()) {
NQFEXH = Byte.parseByte(s);
} else {
NQFEXH = Byte.MIN_VALUE;
}
}

protected final void initNQFEXI(String s) {
if (!s.trim().isEmpty()) {
NQFEXI = Byte.parseByte(s);
} else {
NQFEXI = Byte.MIN_VALUE;
}
}

protected final void initNQFEXJ(String s) {
if (!s.trim().isEmpty()) {
NQFEXJ = Byte.parseByte(s);
} else {
NQFEXJ = Byte.MIN_VALUE;
}
}

protected final void initNQFEXK(String s) {
if (!s.trim().isEmpty()) {
NQFEXK = Byte.parseByte(s);
} else {
NQFEXK = Byte.MIN_VALUE;
}
}

protected final void initNXDTS(String s) {
if (!s.trim().isEmpty()) {
NXDTS = Short.parseShort(s);
} else {
NXDTS = Short.MIN_VALUE;
}
}

protected final void initOPFAMJ(String s) {
if (!s.trim().isEmpty()) {
OPFAMJ = Short.parseShort(s);
} else {
OPFAMJ = Short.MIN_VALUE;
}
}

protected final void initOPFAMK(String s) {
if (!s.trim().isEmpty()) {
OPFAMK = Short.parseShort(s);
} else {
OPFAMK = Short.MIN_VALUE;
}
}

protected final void initOPFAML(String s) {
if (!s.trim().isEmpty()) {
OPFAML = Short.parseShort(s);
} else {
OPFAML = Short.MIN_VALUE;
}
}

protected final void initOPFAMM(String s) {
if (!s.trim().isEmpty()) {
OPFAMM = Short.parseShort(s);
} else {
OPFAMM = Short.MIN_VALUE;
}
}

protected final void initOPFAMN(String s) {
if (!s.trim().isEmpty()) {
OPFAMN = Short.parseShort(s);
} else {
OPFAMN = Short.MIN_VALUE;
}
}

protected final void initOPISS1(String s) {
if (!s.trim().isEmpty()) {
OPISS1 = Short.parseShort(s);
} else {
OPISS1 = Short.MIN_VALUE;
}
}

protected final void initOPISS2(String s) {
if (!s.trim().isEmpty()) {
OPISS2 = Short.parseShort(s);
} else {
OPISS2 = Short.MIN_VALUE;
}
}

protected final void initOPISS3(String s) {
if (!s.trim().isEmpty()) {
OPISS3 = Short.parseShort(s);
} else {
OPISS3 = Short.MIN_VALUE;
}
}

protected final void initOPISS4(String s) {
if (!s.trim().isEmpty()) {
OPISS4 = Short.parseShort(s);
} else {
OPISS4 = Short.MIN_VALUE;
}
}

protected final void initOPISS5(String s) {
if (!s.trim().isEmpty()) {
OPISS5 = Short.parseShort(s);
} else {
OPISS5 = Short.MIN_VALUE;
}
}

protected final void initOPPOL1(String s) {
if (!s.trim().isEmpty()) {
OPPOL1 = Byte.parseByte(s);
} else {
OPPOL1 = Byte.MIN_VALUE;
}
}

protected final void initOPPOL2(String s) {
if (!s.trim().isEmpty()) {
OPPOL2 = Byte.parseByte(s);
} else {
OPPOL2 = Byte.MIN_VALUE;
}
}

protected final void initOPPOLA(String s) {
if (!s.trim().isEmpty()) {
OPPOLA = Short.parseShort(s);
} else {
OPPOLA = Short.MIN_VALUE;
}
}

protected final void initOPPOLB(String s) {
if (!s.trim().isEmpty()) {
OPPOLB = Short.parseShort(s);
} else {
OPPOLB = Short.MIN_VALUE;
}
}

protected final void initOPPOLC(String s) {
if (!s.trim().isEmpty()) {
OPPOLC = Short.parseShort(s);
} else {
OPPOLC = Short.MIN_VALUE;
}
}

protected final void initOPPOLD(String s) {
if (!s.trim().isEmpty()) {
OPPOLD = Short.parseShort(s);
} else {
OPPOLD = Short.MIN_VALUE;
}
}

protected final void initOPSOCG(String s) {
if (!s.trim().isEmpty()) {
OPSOCG = Byte.parseByte(s);
} else {
OPSOCG = Byte.MIN_VALUE;
}
}

protected final void initOPSOCH(String s) {
if (!s.trim().isEmpty()) {
OPSOCH = Byte.parseByte(s);
} else {
OPSOCH = Byte.MIN_VALUE;
}
}

protected final void initOPSOCI(String s) {
if (!s.trim().isEmpty()) {
OPSOCI = Byte.parseByte(s);
} else {
OPSOCI = Byte.MIN_VALUE;
}
}

protected final void initOPSOCJ(String s) {
if (!s.trim().isEmpty()) {
OPSOCJ = Byte.parseByte(s);
} else {
OPSOCJ = Byte.MIN_VALUE;
}
}

protected final void initORG(String s) {
if (!s.trim().isEmpty()) {
ORG = Byte.parseByte(s);
} else {
ORG = Byte.MIN_VALUE;
}
}

protected final void initORGA(String s) {
if (!s.trim().isEmpty()) {
ORGA = Byte.parseByte(s);
} else {
ORGA = Byte.MIN_VALUE;
}
}

protected final void initORGA1(String s) {
if (!s.trim().isEmpty()) {
ORGA1 = Byte.parseByte(s);
} else {
ORGA1 = Byte.MIN_VALUE;
}
}

protected final void initORGA11(String s) {
if (!s.trim().isEmpty()) {
ORGA11 = Byte.parseByte(s);
} else {
ORGA11 = Byte.MIN_VALUE;
}
}

protected final void initORGA12(String s) {
if (!s.trim().isEmpty()) {
ORGA12 = Byte.parseByte(s);
} else {
ORGA12 = Byte.MIN_VALUE;
}
}

protected final void initORGA13(String s) {
if (!s.trim().isEmpty()) {
ORGA13 = Byte.parseByte(s);
} else {
ORGA13 = Byte.MIN_VALUE;
}
}

protected final void initORGA14(String s) {
if (!s.trim().isEmpty()) {
ORGA14 = Byte.parseByte(s);
} else {
ORGA14 = Byte.MIN_VALUE;
}
}

protected final void initORGA15(String s) {
if (!s.trim().isEmpty()) {
ORGA15 = Byte.parseByte(s);
} else {
ORGA15 = Byte.MIN_VALUE;
}
}

protected final void initORGA16(String s) {
if (!s.trim().isEmpty()) {
ORGA16 = Byte.parseByte(s);
} else {
ORGA16 = Byte.MIN_VALUE;
}
}

protected final void initORGA2(String s) {
if (!s.trim().isEmpty()) {
ORGA2 = Byte.parseByte(s);
} else {
ORGA2 = Byte.MIN_VALUE;
}
}

protected final void initORGA3(String s) {
if (!s.trim().isEmpty()) {
ORGA3 = Byte.parseByte(s);
} else {
ORGA3 = Byte.MIN_VALUE;
}
}

protected final void initORGA4(String s) {
if (!s.trim().isEmpty()) {
ORGA4 = Byte.parseByte(s);
} else {
ORGA4 = Byte.MIN_VALUE;
}
}

protected final void initORGA5(String s) {
if (!s.trim().isEmpty()) {
ORGA5 = Byte.parseByte(s);
} else {
ORGA5 = Byte.MIN_VALUE;
}
}

protected final void initORGA6(String s) {
if (!s.trim().isEmpty()) {
ORGA6 = Byte.parseByte(s);
} else {
ORGA6 = Byte.MIN_VALUE;
}
}

protected final void initORGA7(String s) {
if (!s.trim().isEmpty()) {
ORGA7 = Byte.parseByte(s);
} else {
ORGA7 = Byte.MIN_VALUE;
}
}

protected final void initORGM1(String s) {
if (!s.trim().isEmpty()) {
ORGM1 = Byte.parseByte(s);
} else {
ORGM1 = Byte.MIN_VALUE;
}
}

protected final void initORGM11(String s) {
if (!s.trim().isEmpty()) {
ORGM11 = Byte.parseByte(s);
} else {
ORGM11 = Byte.MIN_VALUE;
}
}

protected final void initORGM12(String s) {
if (!s.trim().isEmpty()) {
ORGM12 = Byte.parseByte(s);
} else {
ORGM12 = Byte.MIN_VALUE;
}
}

protected final void initORGM13(String s) {
if (!s.trim().isEmpty()) {
ORGM13 = Byte.parseByte(s);
} else {
ORGM13 = Byte.MIN_VALUE;
}
}

protected final void initORGM14(String s) {
if (!s.trim().isEmpty()) {
ORGM14 = Byte.parseByte(s);
} else {
ORGM14 = Byte.MIN_VALUE;
}
}

protected final void initORGM15(String s) {
if (!s.trim().isEmpty()) {
ORGM15 = Byte.parseByte(s);
} else {
ORGM15 = Byte.MIN_VALUE;
}
}

protected final void initORGM16(String s) {
if (!s.trim().isEmpty()) {
ORGM16 = Byte.parseByte(s);
} else {
ORGM16 = Byte.MIN_VALUE;
}
}

protected final void initORGM2(String s) {
if (!s.trim().isEmpty()) {
ORGM2 = Byte.parseByte(s);
} else {
ORGM2 = Byte.MIN_VALUE;
}
}

protected final void initORGM3(String s) {
if (!s.trim().isEmpty()) {
ORGM3 = Byte.parseByte(s);
} else {
ORGM3 = Byte.MIN_VALUE;
}
}

protected final void initORGM4(String s) {
if (!s.trim().isEmpty()) {
ORGM4 = Byte.parseByte(s);
} else {
ORGM4 = Byte.MIN_VALUE;
}
}

protected final void initORGM5(String s) {
if (!s.trim().isEmpty()) {
ORGM5 = Byte.parseByte(s);
} else {
ORGM5 = Byte.MIN_VALUE;
}
}

protected final void initORGM6(String s) {
if (!s.trim().isEmpty()) {
ORGM6 = Byte.parseByte(s);
} else {
ORGM6 = Byte.MIN_VALUE;
}
}

protected final void initORGM7(String s) {
if (!s.trim().isEmpty()) {
ORGM7 = Byte.parseByte(s);
} else {
ORGM7 = Byte.MIN_VALUE;
}
}

protected final void initPAPER1(String s) {
if (!s.trim().isEmpty()) {
PAPER1 = Byte.parseByte(s);
} else {
PAPER1 = Byte.MIN_VALUE;
}
}

protected final void initPAPER2(String s) {
if (!s.trim().isEmpty()) {
PAPER2 = Byte.parseByte(s);
} else {
PAPER2 = Byte.MIN_VALUE;
}
}

protected final void initPAPERM(String s) {
if (!s.trim().isEmpty()) {
PAPERM = Short.parseShort(s);
} else {
PAPERM = Short.MIN_VALUE;
}
}

protected final void initPAPERM2(String s) {
if (!s.trim().isEmpty()) {
PAPERM2 = Short.parseShort(s);
} else {
PAPERM2 = Short.MIN_VALUE;
}
}

protected final void initPAPERP(String s) {
if (!s.trim().isEmpty()) {
PAPERP = Short.parseShort(s);
} else {
PAPERP = Short.MIN_VALUE;
}
}

protected final void initPAPERR(String s) {
if (!s.trim().isEmpty()) {
PAPERR = Short.parseShort(s);
} else {
PAPERR = Short.MIN_VALUE;
}
}

protected final void initPAYDF1(String s) {
if (!s.trim().isEmpty()) {
PAYDF1 = Short.parseShort(s);
} else {
PAYDF1 = Short.MIN_VALUE;
}
}

protected final void initPAYDF2(String s) {
if (!s.trim().isEmpty()) {
PAYDF2 = Short.parseShort(s);
} else {
PAYDF2 = Short.MIN_VALUE;
}
}

protected final void initPAYDF3(String s) {
if (!s.trim().isEmpty()) {
PAYDF3 = Short.parseShort(s);
} else {
PAYDF3 = Short.MIN_VALUE;
}
}

protected final void initPAYDF4(String s) {
if (!s.trim().isEmpty()) {
PAYDF4 = Short.parseShort(s);
} else {
PAYDF4 = Short.MIN_VALUE;
}
}

protected final void initPAYDF5(String s) {
if (!s.trim().isEmpty()) {
PAYDF5 = Short.parseShort(s);
} else {
PAYDF5 = Short.MIN_VALUE;
}
}

protected final void initPAYDF6(String s) {
if (!s.trim().isEmpty()) {
PAYDF6 = Short.parseShort(s);
} else {
PAYDF6 = Short.MIN_VALUE;
}
}

protected final void initPAYDF7(String s) {
if (!s.trim().isEmpty()) {
PAYDF7 = Short.parseShort(s);
} else {
PAYDF7 = Short.MIN_VALUE;
}
}

protected final void initPAYDF8(String s) {
if (!s.trim().isEmpty()) {
PAYDF8 = Short.parseShort(s);
} else {
PAYDF8 = Short.MIN_VALUE;
}
}

protected final void initPAYGLI(String s) {
if (!s.trim().isEmpty()) {
PAYGLI = Short.parseShort(s);
} else {
PAYGLI = Short.MIN_VALUE;
}
}

protected final void initPAYGLY(String s) {
if (!s.trim().isEmpty()) {
PAYGLY = Double.parseDouble(s);
} else {
PAYGLY = Double.NaN;
}
}

protected final void initPAYGTI(String s) {
if (!s.trim().isEmpty()) {
PAYGTI = Short.parseShort(s);
} else {
PAYGTI = Short.MIN_VALUE;
}
}

protected final void initPAYGTY(String s) {
if (!s.trim().isEmpty()) {
PAYGTY = Double.parseDouble(s);
} else {
PAYGTY = Double.NaN;
}
}

protected final void initPAYGW(String s) {
if (!s.trim().isEmpty()) {
PAYGW = Double.parseDouble(s);
} else {
PAYGW = Double.NaN;
}
}

protected final void initPAYGYA(String s) {
if (!s.trim().isEmpty()) {
PAYGYA = Byte.parseByte(s);
} else {
PAYGYA = Byte.MIN_VALUE;
}
}

protected final void initPAYGYR(String s) {
if (!s.trim().isEmpty()) {
PAYGYR = Integer.parseInt(s);
} else {
PAYGYR = Integer.MIN_VALUE;
}
}

protected final void initPAYG_DV(String s) {
if (!s.trim().isEmpty()) {
PAYG_DV = Double.parseDouble(s);
} else {
PAYG_DV = Double.NaN;
}
}

protected final void initPAYLY(String s) {
if (!s.trim().isEmpty()) {
PAYLY = Integer.parseInt(s);
} else {
PAYLY = Integer.MIN_VALUE;
}
}

protected final void initPAYLYG(String s) {
if (!s.trim().isEmpty()) {
PAYLYG = Short.parseShort(s);
} else {
PAYLYG = Short.MIN_VALUE;
}
}

protected final void initPAYLYW(String s) {
if (!s.trim().isEmpty()) {
PAYLYW = Double.parseDouble(s);
} else {
PAYLYW = Double.NaN;
}
}

protected final void initPAYNLI(String s) {
if (!s.trim().isEmpty()) {
PAYNLI = Short.parseShort(s);
} else {
PAYNLI = Short.MIN_VALUE;
}
}

protected final void initPAYNLY(String s) {
if (!s.trim().isEmpty()) {
PAYNLY = Double.parseDouble(s);
} else {
PAYNLY = Double.NaN;
}
}

protected final void initPAYNTI(String s) {
if (!s.trim().isEmpty()) {
PAYNTI = Short.parseShort(s);
} else {
PAYNTI = Short.MIN_VALUE;
}
}

protected final void initPAYNTY(String s) {
if (!s.trim().isEmpty()) {
PAYNTY = Double.parseDouble(s);
} else {
PAYNTY = Double.NaN;
}
}

protected final void initPAYNW(String s) {
if (!s.trim().isEmpty()) {
PAYNW = Double.parseDouble(s);
} else {
PAYNW = Double.NaN;
}
}

protected final void initPAYS(String s) {
if (!s.trim().isEmpty()) {
PAYS = Integer.parseInt(s);
} else {
PAYS = Integer.MIN_VALUE;
}
}

protected final void initPAYSG(String s) {
if (!s.trim().isEmpty()) {
PAYSG = Short.parseShort(s);
} else {
PAYSG = Short.MIN_VALUE;
}
}

protected final void initPAYSLP(String s) {
if (!s.trim().isEmpty()) {
PAYSLP = Short.parseShort(s);
} else {
PAYSLP = Short.MIN_VALUE;
}
}

protected final void initPAYSW(String s) {
if (!s.trim().isEmpty()) {
PAYSW = Double.parseDouble(s);
} else {
PAYSW = Double.NaN;
}
}

protected final void initPAYUW(String s) {
if (!s.trim().isEmpty()) {
PAYUW = Double.parseDouble(s);
} else {
PAYUW = Double.NaN;
}
}

protected final void initPENADD(String s) {
if (!s.trim().isEmpty()) {
PENADD = Short.parseShort(s);
} else {
PENADD = Short.MIN_VALUE;
}
}

protected final void initPENADV(String s) {
if (!s.trim().isEmpty()) {
PENADV = Short.parseShort(s);
} else {
PENADV = Short.MIN_VALUE;
}
}

protected final void initPENADW(String s) {
if (!s.trim().isEmpty()) {
PENADW = Double.parseDouble(s);
} else {
PENADW = Double.NaN;
}
}

protected final void initPENB4(String s) {
if (!s.trim().isEmpty()) {
PENB4 = Short.parseShort(s);
} else {
PENB4 = Short.MIN_VALUE;
}
}

protected final void initPENB4V(String s) {
if (!s.trim().isEmpty()) {
PENB4V = Short.parseShort(s);
} else {
PENB4V = Short.MIN_VALUE;
}
}

protected final void initPENB4W(String s) {
if (!s.trim().isEmpty()) {
PENB4W = Double.parseDouble(s);
} else {
PENB4W = Double.NaN;
}
}

protected final void initPENB4Y4(String s) {
if (!s.trim().isEmpty()) {
PENB4Y4 = Short.parseShort(s);
} else {
PENB4Y4 = Short.MIN_VALUE;
}
}

protected final void initPENB4YR(String s) {
if (!s.trim().isEmpty()) {
PENB4YR = Short.parseShort(s);
} else {
PENB4YR = Short.MIN_VALUE;
}
}

protected final void initPENYR(String s) {
if (!s.trim().isEmpty()) {
PENYR = Short.parseShort(s);
} else {
PENYR = Short.MIN_VALUE;
}
}

protected final void initPENYR4(String s) {
if (!s.trim().isEmpty()) {
PENYR4 = Short.parseShort(s);
} else {
PENYR4 = Short.MIN_VALUE;
}
}

protected final void initPID(String s) {
if (!s.trim().isEmpty()) {
PID = Integer.parseInt(s);
} else {
PID = Integer.MIN_VALUE;
}
}

protected final void initPIM1(String s) {
if (!s.trim().isEmpty()) {
PIM1 = Byte.parseByte(s);
} else {
PIM1 = Byte.MIN_VALUE;
}
}

protected final void initPIM2(String s) {
if (!s.trim().isEmpty()) {
PIM2 = Byte.parseByte(s);
} else {
PIM2 = Byte.MIN_VALUE;
}
}

protected final void initPLBORNC_CC(String s) {
if (!s.trim().isEmpty()) {
PLBORNC_CC = Short.parseShort(s);
} else {
PLBORNC_CC = Short.MIN_VALUE;
}
}

protected final void initPLNEW(String s) {
if (!s.trim().isEmpty()) {
PLNEW = Short.parseShort(s);
} else {
PLNEW = Short.MIN_VALUE;
}
}

protected final void initPLNOWM(String s) {
if (!s.trim().isEmpty()) {
PLNOWM = Short.parseShort(s);
} else {
PLNOWM = Short.MIN_VALUE;
}
}

protected final void initPLNOWY4(String s) {
if (!s.trim().isEmpty()) {
PLNOWY4 = Short.parseShort(s);
} else {
PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initPPLEVR(String s) {
if (!s.trim().isEmpty()) {
PPLEVR = Short.parseShort(s);
} else {
PPLEVR = Short.MIN_VALUE;
}
}

protected final void initPPPEN(String s) {
if (!s.trim().isEmpty()) {
PPPEN = Short.parseShort(s);
} else {
PPPEN = Short.MIN_VALUE;
}
}

protected final void initPRFEHQ(String s) {
if (!s.trim().isEmpty()) {
PRFEHQ = Short.parseShort(s);
} else {
PRFEHQ = Short.MIN_VALUE;
}
}

protected final void initPRFITBI(String s) {
if (!s.trim().isEmpty()) {
PRFITBI = Short.parseShort(s);
} else {
PRFITBI = Short.MIN_VALUE;
}
}

protected final void initPRFITB_BH(String s) {
if (!s.trim().isEmpty()) {
PRFITB_BH = Short.parseShort(s);
} else {
PRFITB_BH = Short.MIN_VALUE;
}
}

protected final void initPRJBFT(String s) {
if (!s.trim().isEmpty()) {
PRJBFT = Byte.parseByte(s);
} else {
PRJBFT = Byte.MIN_VALUE;
}
}

protected final void initPRRS2I(String s) {
if (!s.trim().isEmpty()) {
PRRS2I = Short.parseShort(s);
} else {
PRRS2I = Short.MIN_VALUE;
}
}

protected final void initPRSEHQ(String s) {
if (!s.trim().isEmpty()) {
PRSEHQ = Short.parseShort(s);
} else {
PRSEHQ = Short.MIN_VALUE;
}
}

protected final void initPRWHY(String s) {
if (!s.trim().isEmpty()) {
PRWHY = Short.parseShort(s);
} else {
PRWHY = Short.MIN_VALUE;
}
}

protected final void initQFA(String s) {
if (!s.trim().isEmpty()) {
QFA = Short.parseShort(s);
} else {
QFA = Short.MIN_VALUE;
}
}

protected final void initQFACHI(String s) {
if (!s.trim().isEmpty()) {
QFACHI = Short.parseShort(s);
} else {
QFACHI = Short.MIN_VALUE;
}
}

protected final void initQFB(String s) {
if (!s.trim().isEmpty()) {
QFB = Short.parseShort(s);
} else {
QFB = Short.MIN_VALUE;
}
}

protected final void initQFC(String s) {
if (!s.trim().isEmpty()) {
QFC = Short.parseShort(s);
} else {
QFC = Short.MIN_VALUE;
}
}

protected final void initQFD(String s) {
if (!s.trim().isEmpty()) {
QFD = Short.parseShort(s);
} else {
QFD = Short.MIN_VALUE;
}
}

protected final void initQFE(String s) {
if (!s.trim().isEmpty()) {
QFE = Short.parseShort(s);
} else {
QFE = Short.MIN_VALUE;
}
}

protected final void initQFED(String s) {
if (!s.trim().isEmpty()) {
QFED = Short.parseShort(s);
} else {
QFED = Short.MIN_VALUE;
}
}

protected final void initQFEDA(String s) {
if (!s.trim().isEmpty()) {
QFEDA = Short.parseShort(s);
} else {
QFEDA = Short.MIN_VALUE;
}
}

protected final void initQFEDB(String s) {
if (!s.trim().isEmpty()) {
QFEDB = Short.parseShort(s);
} else {
QFEDB = Short.MIN_VALUE;
}
}

protected final void initQFEDC(String s) {
if (!s.trim().isEmpty()) {
QFEDC = Short.parseShort(s);
} else {
QFEDC = Short.MIN_VALUE;
}
}

protected final void initQFEDD(String s) {
if (!s.trim().isEmpty()) {
QFEDD = Short.parseShort(s);
} else {
QFEDD = Short.MIN_VALUE;
}
}

protected final void initQFEDE(String s) {
if (!s.trim().isEmpty()) {
QFEDE = Short.parseShort(s);
} else {
QFEDE = Short.MIN_VALUE;
}
}

protected final void initQFEDF(String s) {
if (!s.trim().isEmpty()) {
QFEDF = Short.parseShort(s);
} else {
QFEDF = Short.MIN_VALUE;
}
}

protected final void initQFEDG(String s) {
if (!s.trim().isEmpty()) {
QFEDG = Short.parseShort(s);
} else {
QFEDG = Short.MIN_VALUE;
}
}

protected final void initQFEDH(String s) {
if (!s.trim().isEmpty()) {
QFEDH = Short.parseShort(s);
} else {
QFEDH = Short.MIN_VALUE;
}
}

protected final void initQFEDHI(String s) {
if (!s.trim().isEmpty()) {
QFEDHI = Short.parseShort(s);
} else {
QFEDHI = Short.MIN_VALUE;
}
}

protected final void initQFEDI(String s) {
if (!s.trim().isEmpty()) {
QFEDI = Short.parseShort(s);
} else {
QFEDI = Short.MIN_VALUE;
}
}

protected final void initQFEDJ(String s) {
if (!s.trim().isEmpty()) {
QFEDJ = Short.parseShort(s);
} else {
QFEDJ = Short.MIN_VALUE;
}
}

protected final void initQFEDK(String s) {
if (!s.trim().isEmpty()) {
QFEDK = Short.parseShort(s);
} else {
QFEDK = Short.MIN_VALUE;
}
}

protected final void initQFEDL(String s) {
if (!s.trim().isEmpty()) {
QFEDL = Short.parseShort(s);
} else {
QFEDL = Short.MIN_VALUE;
}
}

protected final void initQFEDM(String s) {
if (!s.trim().isEmpty()) {
QFEDM = Short.parseShort(s);
} else {
QFEDM = Short.MIN_VALUE;
}
}

protected final void initQFEDN(String s) {
if (!s.trim().isEmpty()) {
QFEDN = Short.parseShort(s);
} else {
QFEDN = Short.MIN_VALUE;
}
}

protected final void initQFEDO(String s) {
if (!s.trim().isEmpty()) {
QFEDO = Short.parseShort(s);
} else {
QFEDO = Short.MIN_VALUE;
}
}

protected final void initQFEDP(String s) {
if (!s.trim().isEmpty()) {
QFEDP = Short.parseShort(s);
} else {
QFEDP = Short.MIN_VALUE;
}
}

protected final void initQFEDQ(String s) {
if (!s.trim().isEmpty()) {
QFEDQ = Short.parseShort(s);
} else {
QFEDQ = Short.MIN_VALUE;
}
}

protected final void initQFEDR(String s) {
if (!s.trim().isEmpty()) {
QFEDR = Short.parseShort(s);
} else {
QFEDR = Short.MIN_VALUE;
}
}

protected final void initQFEDS(String s) {
if (!s.trim().isEmpty()) {
QFEDS = Short.parseShort(s);
} else {
QFEDS = Short.MIN_VALUE;
}
}

protected final void initQFEDX(String s) {
if (!s.trim().isEmpty()) {
QFEDX = Short.parseShort(s);
} else {
QFEDX = Short.MIN_VALUE;
}
}

protected final void initQFEDXA(String s) {
if (!s.trim().isEmpty()) {
QFEDXA = Short.parseShort(s);
} else {
QFEDXA = Short.MIN_VALUE;
}
}

protected final void initQFEDXB(String s) {
if (!s.trim().isEmpty()) {
QFEDXB = Short.parseShort(s);
} else {
QFEDXB = Short.MIN_VALUE;
}
}

protected final void initQFEDXC(String s) {
if (!s.trim().isEmpty()) {
QFEDXC = Short.parseShort(s);
} else {
QFEDXC = Short.MIN_VALUE;
}
}

protected final void initQFEDXD(String s) {
if (!s.trim().isEmpty()) {
QFEDXD = Short.parseShort(s);
} else {
QFEDXD = Short.MIN_VALUE;
}
}

protected final void initQFEDXE(String s) {
if (!s.trim().isEmpty()) {
QFEDXE = Short.parseShort(s);
} else {
QFEDXE = Short.MIN_VALUE;
}
}

protected final void initQFEDXF(String s) {
if (!s.trim().isEmpty()) {
QFEDXF = Short.parseShort(s);
} else {
QFEDXF = Short.MIN_VALUE;
}
}

protected final void initQFEDXG(String s) {
if (!s.trim().isEmpty()) {
QFEDXG = Short.parseShort(s);
} else {
QFEDXG = Short.MIN_VALUE;
}
}

protected final void initQFEDXH(String s) {
if (!s.trim().isEmpty()) {
QFEDXH = Short.parseShort(s);
} else {
QFEDXH = Short.MIN_VALUE;
}
}

protected final void initQFEDXI(String s) {
if (!s.trim().isEmpty()) {
QFEDXI = Short.parseShort(s);
} else {
QFEDXI = Short.MIN_VALUE;
}
}

protected final void initQFEDXJ(String s) {
if (!s.trim().isEmpty()) {
QFEDXJ = Short.parseShort(s);
} else {
QFEDXJ = Short.MIN_VALUE;
}
}

protected final void initQFEDXK(String s) {
if (!s.trim().isEmpty()) {
QFEDXK = Short.parseShort(s);
} else {
QFEDXK = Short.MIN_VALUE;
}
}

protected final void initQFF(String s) {
if (!s.trim().isEmpty()) {
QFF = Short.parseShort(s);
} else {
QFF = Short.MIN_VALUE;
}
}

protected final void initQFG(String s) {
if (!s.trim().isEmpty()) {
QFG = Short.parseShort(s);
} else {
QFG = Short.MIN_VALUE;
}
}

protected final void initQFH(String s) {
if (!s.trim().isEmpty()) {
QFH = Short.parseShort(s);
} else {
QFH = Short.MIN_VALUE;
}
}

protected final void initQFHAS(String s) {
if (!s.trim().isEmpty()) {
QFHAS = Short.parseShort(s);
} else {
QFHAS = Short.MIN_VALUE;
}
}

protected final void initQFI(String s) {
if (!s.trim().isEmpty()) {
QFI = Short.parseShort(s);
} else {
QFI = Short.MIN_VALUE;
}
}

protected final void initQFJ(String s) {
if (!s.trim().isEmpty()) {
QFJ = Short.parseShort(s);
} else {
QFJ = Short.MIN_VALUE;
}
}

protected final void initQFK(String s) {
if (!s.trim().isEmpty()) {
QFK = Short.parseShort(s);
} else {
QFK = Short.MIN_VALUE;
}
}

protected final void initQFL(String s) {
if (!s.trim().isEmpty()) {
QFL = Short.parseShort(s);
} else {
QFL = Short.MIN_VALUE;
}
}

protected final void initQFM(String s) {
if (!s.trim().isEmpty()) {
QFM = Short.parseShort(s);
} else {
QFM = Short.MIN_VALUE;
}
}

protected final void initQFN(String s) {
if (!s.trim().isEmpty()) {
QFN = Short.parseShort(s);
} else {
QFN = Short.MIN_VALUE;
}
}

protected final void initQFVOC(String s) {
if (!s.trim().isEmpty()) {
QFVOC = Short.parseShort(s);
} else {
QFVOC = Short.MIN_VALUE;
}
}

protected final void initQFX(String s) {
if (!s.trim().isEmpty()) {
QFX = Short.parseShort(s);
} else {
QFX = Short.MIN_VALUE;
}
}

protected final void initQFXA(String s) {
if (!s.trim().isEmpty()) {
QFXA = Short.parseShort(s);
} else {
QFXA = Short.MIN_VALUE;
}
}

protected final void initQFXB(String s) {
if (!s.trim().isEmpty()) {
QFXB = Short.parseShort(s);
} else {
QFXB = Short.MIN_VALUE;
}
}

protected final void initQFXC(String s) {
if (!s.trim().isEmpty()) {
QFXC = Short.parseShort(s);
} else {
QFXC = Short.MIN_VALUE;
}
}

protected final void initQFXD(String s) {
if (!s.trim().isEmpty()) {
QFXD = Short.parseShort(s);
} else {
QFXD = Short.MIN_VALUE;
}
}

protected final void initQFXE(String s) {
if (!s.trim().isEmpty()) {
QFXE = Short.parseShort(s);
} else {
QFXE = Short.MIN_VALUE;
}
}

protected final void initQFXF(String s) {
if (!s.trim().isEmpty()) {
QFXF = Short.parseShort(s);
} else {
QFXF = Short.MIN_VALUE;
}
}

protected final void initQFXG(String s) {
if (!s.trim().isEmpty()) {
QFXG = Short.parseShort(s);
} else {
QFXG = Short.MIN_VALUE;
}
}

protected final void initQFXH(String s) {
if (!s.trim().isEmpty()) {
QFXH = Short.parseShort(s);
} else {
QFXH = Short.MIN_VALUE;
}
}

protected final void initQFXI(String s) {
if (!s.trim().isEmpty()) {
QFXI = Short.parseShort(s);
} else {
QFXI = Short.MIN_VALUE;
}
}

protected final void initQFXJ(String s) {
if (!s.trim().isEmpty()) {
QFXJ = Short.parseShort(s);
} else {
QFXJ = Short.MIN_VALUE;
}
}

protected final void initQFXK(String s) {
if (!s.trim().isEmpty()) {
QFXK = Short.parseShort(s);
} else {
QFXK = Short.MIN_VALUE;
}
}

protected final void initQFXL(String s) {
if (!s.trim().isEmpty()) {
QFXL = Short.parseShort(s);
} else {
QFXL = Short.MIN_VALUE;
}
}

protected final void initQFXM(String s) {
if (!s.trim().isEmpty()) {
QFXM = Short.parseShort(s);
} else {
QFXM = Short.MIN_VALUE;
}
}

protected final void initQFXN(String s) {
if (!s.trim().isEmpty()) {
QFXN = Short.parseShort(s);
} else {
QFXN = Short.MIN_VALUE;
}
}

protected final void initRACE(String s) {
if (!s.trim().isEmpty()) {
RACE = Short.parseShort(s);
} else {
RACE = Short.MIN_VALUE;
}
}

protected final void initRACH12(String s) {
if (!s.trim().isEmpty()) {
RACH12 = Short.parseShort(s);
} else {
RACH12 = Short.MIN_VALUE;
}
}

protected final void initREGION(String s) {
if (!s.trim().isEmpty()) {
REGION = Short.parseShort(s);
} else {
REGION = Short.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSAMPST_BH(String s) {
if (!s.trim().isEmpty()) {
SAMPST_BH = Short.parseShort(s);
} else {
SAMPST_BH = Short.MIN_VALUE;
}
}

protected final void initSAVE(String s) {
if (!s.trim().isEmpty()) {
SAVE = Short.parseShort(s);
} else {
SAVE = Short.MIN_VALUE;
}
}

protected final void initSAVED(String s) {
if (!s.trim().isEmpty()) {
SAVED = Integer.parseInt(s);
} else {
SAVED = Integer.MIN_VALUE;
}
}

protected final void initSAVEY(String s) {
if (!s.trim().isEmpty()) {
SAVEY = Byte.parseByte(s);
} else {
SAVEY = Byte.MIN_VALUE;
}
}

protected final void initSCNOW(String s) {
if (!s.trim().isEmpty()) {
SCNOW = Short.parseShort(s);
} else {
SCNOW = Short.MIN_VALUE;
}
}

protected final void initSCTYPE(String s) {
if (!s.trim().isEmpty()) {
SCTYPE = Short.parseShort(s);
} else {
SCTYPE = Short.MIN_VALUE;
}
}

protected final void initSMOKER(String s) {
if (!s.trim().isEmpty()) {
SMOKER = Short.parseShort(s);
} else {
SMOKER = Short.MIN_VALUE;
}
}

protected final void initSPINHH(String s) {
if (!s.trim().isEmpty()) {
SPINHH = Short.parseShort(s);
} else {
SPINHH = Short.MIN_VALUE;
}
}

protected final void initSPJB(String s) {
if (!s.trim().isEmpty()) {
SPJB = Short.parseShort(s);
} else {
SPJB = Short.MIN_VALUE;
}
}

protected final void initSPJBHR(String s) {
if (!s.trim().isEmpty()) {
SPJBHR = Short.parseShort(s);
} else {
SPJBHR = Short.MIN_VALUE;
}
}

protected final void initSPJBOT(String s) {
if (!s.trim().isEmpty()) {
SPJBOT = Short.parseShort(s);
} else {
SPJBOT = Short.MIN_VALUE;
}
}

protected final void initSPJBYR(String s) {
if (!s.trim().isEmpty()) {
SPJBYR = Short.parseShort(s);
} else {
SPJBYR = Short.MIN_VALUE;
}
}

protected final void initSPPAYG(String s) {
if (!s.trim().isEmpty()) {
SPPAYG = Double.parseDouble(s);
} else {
SPPAYG = Double.NaN;
}
}

protected final void initSPPAYGI(String s) {
if (!s.trim().isEmpty()) {
SPPAYGI = Short.parseShort(s);
} else {
SPPAYGI = Short.MIN_VALUE;
}
}

protected final void initSPPID_BH(String s) {
if (!s.trim().isEmpty()) {
SPPID_BH = Integer.parseInt(s);
} else {
SPPID_BH = Integer.MIN_VALUE;
}
}

protected final void initSPSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
SPSOC90_CC = Short.parseShort(s);
} else {
SPSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initTENURE_DV(String s) {
if (!s.trim().isEmpty()) {
TENURE_DV = Short.parseShort(s);
} else {
TENURE_DV = Short.MIN_VALUE;
}
}

protected final void initTUIN1(String s) {
if (!s.trim().isEmpty()) {
TUIN1 = Short.parseShort(s);
} else {
TUIN1 = Short.MIN_VALUE;
}
}

protected final void initTUIN2(String s) {
if (!s.trim().isEmpty()) {
TUIN2 = Short.parseShort(s);
} else {
TUIN2 = Short.MIN_VALUE;
}
}

protected final void initTUJBPL(String s) {
if (!s.trim().isEmpty()) {
TUJBPL = Short.parseShort(s);
} else {
TUJBPL = Short.MIN_VALUE;
}
}

protected final void initVOTE1(String s) {
if (!s.trim().isEmpty()) {
VOTE1 = Short.parseShort(s);
} else {
VOTE1 = Short.MIN_VALUE;
}
}

protected final void initVOTE2(String s) {
if (!s.trim().isEmpty()) {
VOTE2 = Short.parseShort(s);
} else {
VOTE2 = Short.MIN_VALUE;
}
}

protected final void initVOTE4(String s) {
if (!s.trim().isEmpty()) {
VOTE4 = Short.parseShort(s);
} else {
VOTE4 = Short.MIN_VALUE;
}
}

protected final void initVOTE4_BH(String s) {
if (!s.trim().isEmpty()) {
VOTE4_BH = Short.parseShort(s);
} else {
VOTE4_BH = Short.MIN_VALUE;
}
}

protected final void initVOTE5(String s) {
if (!s.trim().isEmpty()) {
VOTE5 = Short.parseShort(s);
} else {
VOTE5 = Short.MIN_VALUE;
}
}

protected final void initVOTE6(String s) {
if (!s.trim().isEmpty()) {
VOTE6 = Short.parseShort(s);
} else {
VOTE6 = Short.MIN_VALUE;
}
}

protected final void initVOTE7(String s) {
if (!s.trim().isEmpty()) {
VOTE7 = Byte.parseByte(s);
} else {
VOTE7 = Byte.MIN_VALUE;
}
}

protected final void initVOTE8(String s) {
if (!s.trim().isEmpty()) {
VOTE8 = Byte.parseByte(s);
} else {
VOTE8 = Byte.MIN_VALUE;
}
}

protected final void initVOTE8_BH(String s) {
if (!s.trim().isEmpty()) {
VOTE8_BH = Byte.parseByte(s);
} else {
VOTE8_BH = Byte.MIN_VALUE;
}
}

protected final void initWKTIME(String s) {
if (!s.trim().isEmpty()) {
WKTIME = Short.parseShort(s);
} else {
WKTIME = Short.MIN_VALUE;
}
}

protected final void initXDT1M(String s) {
if (!s.trim().isEmpty()) {
XDT1M = Byte.parseByte(s);
} else {
XDT1M = Byte.MIN_VALUE;
}
}

protected final void initXDT1PL(String s) {
if (!s.trim().isEmpty()) {
XDT1PL = Byte.parseByte(s);
} else {
XDT1PL = Byte.MIN_VALUE;
}
}

protected final void initXDT1Y(String s) {
if (!s.trim().isEmpty()) {
XDT1Y = Byte.parseByte(s);
} else {
XDT1Y = Byte.MIN_VALUE;
}
}

protected final void initXDT2M(String s) {
if (!s.trim().isEmpty()) {
XDT2M = Byte.parseByte(s);
} else {
XDT2M = Byte.MIN_VALUE;
}
}

protected final void initXDT2PL(String s) {
if (!s.trim().isEmpty()) {
XDT2PL = Byte.parseByte(s);
} else {
XDT2PL = Byte.MIN_VALUE;
}
}

protected final void initXDT2Y(String s) {
if (!s.trim().isEmpty()) {
XDT2Y = Byte.parseByte(s);
} else {
XDT2Y = Byte.MIN_VALUE;
}
}

protected final void initXDT3M(String s) {
if (!s.trim().isEmpty()) {
XDT3M = Byte.parseByte(s);
} else {
XDT3M = Byte.MIN_VALUE;
}
}

protected final void initXDT3PL(String s) {
if (!s.trim().isEmpty()) {
XDT3PL = Byte.parseByte(s);
} else {
XDT3PL = Byte.MIN_VALUE;
}
}

protected final void initXDT3Y(String s) {
if (!s.trim().isEmpty()) {
XDT3Y = Byte.parseByte(s);
} else {
XDT3Y = Byte.MIN_VALUE;
}
}

protected final void initXDTS(String s) {
if (!s.trim().isEmpty()) {
XDTS = Short.parseShort(s);
} else {
XDTS = Short.MIN_VALUE;
}
}

protected final void initXEWGHT(String s) {
if (!s.trim().isEmpty()) {
XEWGHT = Double.parseDouble(s);
} else {
XEWGHT = Double.NaN;
}
}

protected final void initXPCHC(String s) {
if (!s.trim().isEmpty()) {
XPCHC = Short.parseShort(s);
} else {
XPCHC = Short.MIN_VALUE;
}
}

protected final void initXPCHCF(String s) {
if (!s.trim().isEmpty()) {
XPCHCF = Short.parseShort(s);
} else {
XPCHCF = Short.MIN_VALUE;
}
}

protected final void initXRWGHT(String s) {
if (!s.trim().isEmpty()) {
XRWGHT = Double.parseDouble(s);
} else {
XRWGHT = Double.NaN;
}
}

protected final void initYR2UK(String s) {
if (!s.trim().isEmpty()) {
YR2UK = Short.parseShort(s);
} else {
YR2UK = Short.MIN_VALUE;
}
}

public short getAGE12() {
return AGE12;
}

public short getAGE_DV() {
return AGE_DV;
}

public short getAIDHRS_BH() {
return AIDHRS_BH;
}

public byte getAIDHU1A() {
return AIDHU1A;
}

public byte getAIDHU2A() {
return AIDHU2A;
}

public short getAIDHUA() {
return AIDHUA;
}

public short getAIDHUB() {
return AIDHUB;
}

public short getAIDHUC() {
return AIDHUC;
}

public byte getAIDPL1() {
return AIDPL1;
}

public byte getAIDPL2() {
return AIDPL2;
}

public short getBIRTHY() {
return BIRTHY;
}

public short getBUNO() {
return BUNO;
}

public short getBUTYPE() {
return BUTYPE;
}

public short getCASMIN() {
return CASMIN;
}

public byte getCBAGE() {
return CBAGE;
}

public short getCJSBGD() {
return CJSBGD;
}

public short getCJSBGM() {
return CJSBGM;
}

public short getCJSBGY() {
return CJSBGY;
}

public short getCJSBGY4() {
return CJSBGY4;
}

public short getCJSBLY() {
return CJSBLY;
}

public int getCJSTEN() {
return CJSTEN;
}

protected double CJSWK9() {
return CJSWK9;
}

protected double DISTMOV() {
return DISTMOV;
}

public short getDOBY() {
return DOBY;
}

public byte getDRIVE() {
return DRIVE;
}

public short getEAAGE() {
return EAAGE;
}

public short getEDENDM() {
return EDENDM;
}

public short getEDENDY() {
return EDENDY;
}

public short getEDENDY4() {
return EDENDY4;
}

public short getEDLYR() {
return EDLYR;
}

public short getEDNEW() {
return EDNEW;
}

public short getEDNEW1() {
return EDNEW1;
}

public short getEDNEW2() {
return EDNEW2;
}

public short getEDNEW3() {
return EDNEW3;
}

public short getEDNEW4() {
return EDNEW4;
}

public byte getEDNEWH() {
return EDNEWH;
}

public byte getEDNEWW() {
return EDNEWW;
}

public short getEDTYPE() {
return EDTYPE;
}

public short getEDTYPE_BH() {
return EDTYPE_BH;
}

public short getF101() {
return F101;
}

public short getF102() {
return F102;
}

public short getF103() {
return F103;
}

public short getF104() {
return F104;
}

public short getF105() {
return F105;
}

public byte getF106() {
return F106;
}

public byte getF116() {
return F116;
}

public byte getF117() {
return F117;
}

public short getF118() {
return F118;
}

public short getF119() {
return F119;
}

public short getF120() {
return F120;
}

public short getF121() {
return F121;
}

public short getF122() {
return F122;
}

public short getF123() {
return F123;
}

public byte getF124() {
return F124;
}

public short getF131() {
return F131;
}

public short getF132() {
return F132;
}

public short getF133() {
return F133;
}

public byte getF134() {
return F134;
}

public short getF135() {
return F135;
}

public short getF136() {
return F136;
}

public short getF137() {
return F137;
}

public short getF138() {
return F138;
}

public short getF139() {
return F139;
}

public short getF140() {
return F140;
}

public short getF141() {
return F141;
}

public short getF151() {
return F151;
}

public byte getF152() {
return F152;
}

public short getF153() {
return F153;
}

public short getF154() {
return F154;
}

public short getF155() {
return F155;
}

public short getF156() {
return F156;
}

public short getF157() {
return F157;
}

public byte getF158() {
return F158;
}

public byte getF159() {
return F159;
}

public byte getFAIR1() {
return FAIR1;
}

public byte getFAIR2() {
return FAIR2;
}

public short getFENOW_BH() {
return FENOW_BH;
}

public short getFETYPE() {
return FETYPE;
}

protected double FIHHMN() {
return FIHHMN;
}

public short getFIHHMNI() {
return FIHHMNI;
}

protected double FIMNB() {
return FIMNB;
}

public boolean getFIMNBI() {
return FIMNBI;
}

protected double FIMNI() {
return FIMNI;
}

public boolean getFIMNII() {
return FIMNII;
}

public boolean getFIMNLI() {
return FIMNLI;
}

protected double FIMNNL() {
return FIMNNL;
}

public boolean getFIMNNLI() {
return FIMNNLI;
}

protected double FIMNP() {
return FIMNP;
}

public boolean getFIMNPI() {
return FIMNPI;
}

protected double FIMNT() {
return FIMNT;
}

public boolean getFIMNTHI() {
return FIMNTHI;
}

public boolean getFIMNTI() {
return FIMNTI;
}

public short getFISITC() {
return FISITC;
}

public short getFISITX() {
return FISITX;
}

public boolean getFIYEARI() {
return FIYEARI;
}

protected double FIYR() {
return FIYR;
}

protected double FIYRB() {
return FIYRB;
}

public boolean getFIYRBI() {
return FIYRBI;
}

public short getFIYRDI() {
return FIYRDI;
}

public short getFIYRDII() {
return FIYRDII;
}

protected double FIYRI() {
return FIYRI;
}

public boolean getFIYRII() {
return FIYRII;
}

protected double FIYRL() {
return FIYRL;
}

public boolean getFIYRLI() {
return FIYRLI;
}

protected double FIYRNL() {
return FIYRNL;
}

public boolean getFIYRNLI() {
return FIYRNLI;
}

protected double FIYRP() {
return FIYRP;
}

public boolean getFIYRPI() {
return FIYRPI;
}

protected double FIYRT() {
return FIYRT;
}

public boolean getFIYRTI() {
return FIYRTI;
}

public int getFNPID_BH() {
return FNPID_BH;
}

public short getFTEXA() {
return FTEXA;
}

public short getFTEXA1() {
return FTEXA1;
}

public short getFTEXA2() {
return FTEXA2;
}

public short getFTEXA3() {
return FTEXA3;
}

public short getFTEXA4() {
return FTEXA4;
}

public short getFTEXA5() {
return FTEXA5;
}

public short getFTEXA6() {
return FTEXA6;
}

public short getFTEXAV() {
return FTEXAV;
}

protected double FTEXAW() {
return FTEXAW;
}

public short getFTEXB() {
return FTEXB;
}

public short getFTEXB1() {
return FTEXB1;
}

public short getFTEXB2() {
return FTEXB2;
}

public short getFTEXB3() {
return FTEXB3;
}

public short getFTEXB4() {
return FTEXB4;
}

public short getFTEXB5() {
return FTEXB5;
}

public short getFTEXB6() {
return FTEXB6;
}

public short getFTEXBV() {
return FTEXBV;
}

protected double FTEXBW() {
return FTEXBW;
}

public short getFTEXC() {
return FTEXC;
}

public short getFTEXC1() {
return FTEXC1;
}

public short getFTEXC2() {
return FTEXC2;
}

public short getFTEXC3() {
return FTEXC3;
}

public short getFTEXC4() {
return FTEXC4;
}

public short getFTEXC5() {
return FTEXC5;
}

public short getFTEXC6() {
return FTEXC6;
}

public short getFTEXCV() {
return FTEXCV;
}

protected double FTEXCW() {
return FTEXCW;
}

public short getFTEXHH() {
return FTEXHH;
}

public byte getFTHH() {
return FTHH;
}

public byte getFTHH1() {
return FTHH1;
}

public byte getFTHH11() {
return FTHH11;
}

public byte getFTHH12() {
return FTHH12;
}

public byte getFTHH13() {
return FTHH13;
}

public byte getFTHH14() {
return FTHH14;
}

public byte getFTHH15() {
return FTHH15;
}

public byte getFTHH16() {
return FTHH16;
}

public short getFTHH1V() {
return FTHH1V;
}

protected double FTHH1W() {
return FTHH1W;
}

public byte getFTHH2() {
return FTHH2;
}

public byte getFTHH21() {
return FTHH21;
}

public byte getFTHH22() {
return FTHH22;
}

public byte getFTHH23() {
return FTHH23;
}

public byte getFTHH24() {
return FTHH24;
}

public byte getFTHH25() {
return FTHH25;
}

public byte getFTHH26() {
return FTHH26;
}

public short getFTHH2V() {
return FTHH2V;
}

protected double FTHH2W() {
return FTHH2W;
}

public byte getFTHH3() {
return FTHH3;
}

public byte getFTHH31() {
return FTHH31;
}

public byte getFTHH32() {
return FTHH32;
}

public byte getFTHH33() {
return FTHH33;
}

public byte getFTHH34() {
return FTHH34;
}

public byte getFTHH35() {
return FTHH35;
}

public byte getFTHH36() {
return FTHH36;
}

public short getFTHH3V() {
return FTHH3V;
}

protected double FTHH3W() {
return FTHH3W;
}

public byte getHGEMP() {
return HGEMP;
}

public short getHGR2R() {
return HGR2R;
}

public short getHGRA() {
return HGRA;
}

public boolean getHGSEX() {
return HGSEX;
}

public short getHHCH12() {
return HHCH12;
}

public short getHHMEM() {
return HHMEM;
}

public short getHHSIZE() {
return HHSIZE;
}

public short getHHTYPE() {
return HHTYPE;
}

public int getHID() {
return HID;
}

public short getHIQUALB_DV() {
return HIQUALB_DV;
}

public short getHL2GP() {
return HL2GP;
}

public short getHLCK() {
return HLCK;
}

public short getHLCKA() {
return HLCKA;
}

public short getHLCKAN() {
return HLCKAN;
}

public short getHLCKB() {
return HLCKB;
}

public short getHLCKBN() {
return HLCKBN;
}

public short getHLCKC() {
return HLCKC;
}

public short getHLCKCN() {
return HLCKCN;
}

public short getHLCKD() {
return HLCKD;
}

public short getHLCKDN() {
return HLCKDN;
}

public short getHLCKE() {
return HLCKE;
}

public short getHLCKEN() {
return HLCKEN;
}

public short getHLCKF() {
return HLCKF;
}

public short getHLCKFN() {
return HLCKFN;
}

public short getHLCKG() {
return HLCKG;
}

public short getHLCKGN() {
return HLCKGN;
}

public short getHLCKH() {
return HLCKH;
}

public short getHLCKHN() {
return HLCKHN;
}

public short getHLDSBL() {
return HLDSBL;
}

public short getHLENDW() {
return HLENDW;
}

public byte getHLLT() {
return HLLT;
}

public short getHLLTA() {
return HLLTA;
}

public short getHLLTB() {
return HLLTB;
}

public short getHLLTC() {
return HLLTC;
}

public short getHLLTD() {
return HLLTD;
}

public short getHLLTE() {
return HLLTE;
}

public byte getHLLTW() {
return HLLTW;
}

public short getHLLTWA() {
return HLLTWA;
}

public short getHLPRB() {
return HLPRB;
}

public short getHLPRBA() {
return HLPRBA;
}

public short getHLPRBB() {
return HLPRBB;
}

public short getHLPRBC() {
return HLPRBC;
}

public short getHLPRBD() {
return HLPRBD;
}

public short getHLPRBE() {
return HLPRBE;
}

public short getHLPRBF() {
return HLPRBF;
}

public short getHLPRBG() {
return HLPRBG;
}

public short getHLPRBH() {
return HLPRBH;
}

public short getHLPRBI() {
return HLPRBI;
}

public short getHLPRBJ() {
return HLPRBJ;
}

public short getHLPRBK() {
return HLPRBK;
}

public short getHLPRBL() {
return HLPRBL;
}

public short getHLPRBM() {
return HLPRBM;
}

public short getHLSTAT() {
return HLSTAT;
}

public short getHLSV() {
return HLSV;
}

public short getHLSVA() {
return HLSVA;
}

public short getHLSVAF() {
return HLSVAF;
}

public short getHLSVAN() {
return HLSVAN;
}

public short getHLSVB() {
return HLSVB;
}

public short getHLSVBF() {
return HLSVBF;
}

public short getHLSVBN() {
return HLSVBN;
}

public short getHLSVC() {
return HLSVC;
}

public short getHLSVCF() {
return HLSVCF;
}

public short getHLSVCN() {
return HLSVCN;
}

public short getHLSVD() {
return HLSVD;
}

public short getHLSVDF() {
return HLSVDF;
}

public short getHLSVDN() {
return HLSVDN;
}

public short getHLSVE() {
return HLSVE;
}

public short getHLSVEF() {
return HLSVEF;
}

public short getHLSVEN() {
return HLSVEN;
}

public short getHLSVF() {
return HLSVF;
}

public short getHLSVFF() {
return HLSVFF;
}

public short getHLSVFN() {
return HLSVFN;
}

public short getHLSVG() {
return HLSVG;
}

public short getHLSVGF() {
return HLSVGF;
}

public short getHLSVGN() {
return HLSVGN;
}

public short getHLSVH() {
return HLSVH;
}

public byte getHLSVHF() {
return HLSVHF;
}

public byte getHLSVHN() {
return HLSVHN;
}

public short getHLSVI() {
return HLSVI;
}

public short getHLSVIF() {
return HLSVIF;
}

public short getHLSVIN() {
return HLSVIN;
}

public short getHLSVJ() {
return HLSVJ;
}

public short getHLSVJF() {
return HLSVJF;
}

public short getHLSVJN() {
return HLSVJN;
}

public short getHLSVK() {
return HLSVK;
}

public short getHLSVKF() {
return HLSVKF;
}

public short getHLSVKN() {
return HLSVKN;
}

public byte getHLZEST() {
return HLZEST;
}

public boolean getHOH() {
return HOH;
}

public short getHOSP() {
return HOSP;
}

public short getHOSPCH() {
return HOSPCH;
}

public short getHOSPD() {
return HOSPD;
}

public short getHOSPNHS() {
return HOSPNHS;
}

public short getHOWLNG() {
return HOWLNG;
}

public byte getHUBOSS() {
return HUBOSS;
}

public byte getHUDOES() {
return HUDOES;
}

public short getHUNURS() {
return HUNURS;
}

public byte getHURUNS() {
return HURUNS;
}

public byte getHUSITS2() {
return HUSITS2;
}

public short getHUXPCH() {
return HUXPCH;
}

public short getIENDDATHM() {
return IENDDATHM;
}

public byte getIMPEVENT1() {
return IMPEVENT1;
}

public byte getIMPEVENT1S() {
return IMPEVENT1S;
}

public byte getIMPEVENT2() {
return IMPEVENT2;
}

public byte getIMPEVENT2S() {
return IMPEVENT2S;
}

public byte getIMPEVENT3() {
return IMPEVENT3;
}

public byte getIMPEVENT3S() {
return IMPEVENT3S;
}

public byte getIMPEVENT4() {
return IMPEVENT4;
}

public byte getIMPEVENT4S() {
return IMPEVENT4S;
}

public short getIODC() {
return IODC;
}

public short getISCED() {
return ISCED;
}

public short getISTRTDATHM() {
return ISTRTDATHM;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public short getIV2() {
return IV2;
}

public short getIV4() {
return IV4;
}

public short getIV5() {
return IV5;
}

public short getIV6A() {
return IV6A;
}

public short getIV6B() {
return IV6B;
}

public short getIV6C() {
return IV6C;
}

public short getIV6D() {
return IV6D;
}

public short getIV6E() {
return IV6E;
}

public short getIV6F() {
return IV6F;
}

public short getIV7() {
return IV7;
}

public byte getIVCOOP_BH() {
return IVCOOP_BH;
}

public byte getIVDA() {
return IVDA;
}

public byte getIVDB() {
return IVDB;
}

public byte getIVDC() {
return IVDC;
}

public byte getIVDD() {
return IVDD;
}

public short getIVEA() {
return IVEA;
}

public short getIVEB() {
return IVEB;
}

public short getIVEC() {
return IVEC;
}

public short getIVED() {
return IVED;
}

public short getIVFA() {
return IVFA;
}

public short getIVFB() {
return IVFB;
}

public short getIVFC() {
return IVFC;
}

public short getIVFD() {
return IVFD;
}

public byte getIVIOW1() {
return IVIOW1;
}

public short getIVJA() {
return IVJA;
}

public short getIVJB() {
return IVJB;
}

public short getIVJC() {
return IVJC;
}

public short getIVJD() {
return IVJD;
}

public byte getIVLA() {
return IVLA;
}

public byte getIVLB() {
return IVLB;
}

public byte getIVLC() {
return IVLC;
}

public byte getIVLD() {
return IVLD;
}

public short getIVLYR() {
return IVLYR;
}

public short getIVMA() {
return IVMA;
}

public short getIVMB() {
return IVMB;
}

public short getIVMC() {
return IVMC;
}

public short getIVMD() {
return IVMD;
}

public short getIVSC() {
return IVSC;
}

public byte getIVVA() {
return IVVA;
}

public byte getIVVB() {
return IVVB;
}

public byte getIVVC() {
return IVVC;
}

public byte getIVVD() {
return IVVD;
}

public short getJ2PAY_BH() {
return J2PAY_BH;
}

public short getJ2SOC90_CC() {
return J2SOC90_CC;
}

public short getJBBGLY() {
return JBBGLY;
}

public short getJBCHC1() {
return JBCHC1;
}

public short getJBCHC2() {
return JBCHC2;
}

public short getJBCHC3() {
return JBCHC3;
}

protected double JBCSSF() {
return JBCSSF;
}

protected double JBCSSM() {
return JBCSSM;
}

public short getJBED() {
return JBED;
}

public short getJBED1() {
return JBED1;
}

public short getJBED2() {
return JBED2;
}

public short getJBED3() {
return JBED3;
}

public short getJBED4() {
return JBED4;
}

public short getJBED5() {
return JBED5;
}

public byte getJBEDH() {
return JBEDH;
}

public byte getJBEDW() {
return JBEDW;
}

public short getJBGOLD() {
return JBGOLD;
}

protected double JBHGS() {
return JBHGS;
}

public short getJBHHA() {
return JBHHA;
}

public short getJBHHB() {
return JBHHB;
}

public short getJBHHC() {
return JBHHC;
}

public short getJBHHD() {
return JBHHD;
}

public short getJBHHE() {
return JBHHE;
}

public short getJBHHF() {
return JBHHF;
}

public short getJBHRLK() {
return JBHRLK;
}

public String getJBISCO_CC() {
return JBISCO_CC;
}

public short getJBNSSEC_DV() {
return JBNSSEC_DV;
}

public short getJBOFFY_BH() {
return JBOFFY_BH;
}

public short getJBONUS() {
return JBONUS;
}

public short getJBOPPS() {
return JBOPPS;
}

public short getJBPEN() {
return JBPEN;
}

public short getJBPENM() {
return JBPENM;
}

public short getJBPL_BH() {
return JBPL_BH;
}

public short getJBRGSC_DV() {
return JBRGSC_DV;
}

public short getJBRISE() {
return JBRISE;
}

public short getJBSAT1() {
return JBSAT1;
}

public short getJBSAT2() {
return JBSAT2;
}

public short getJBSAT3() {
return JBSAT3;
}

public short getJBSAT4() {
return JBSAT4;
}

public short getJBSAT5() {
return JBSAT5;
}

public short getJBSAT6() {
return JBSAT6;
}

public short getJBSAT7() {
return JBSAT7;
}

public short getJBSAT_BH() {
return JBSAT_BH;
}

public short getJBSECT_BH() {
return JBSECT_BH;
}

public short getJBSEC_BH() {
return JBSEC_BH;
}

public short getJBSEG_DV() {
return JBSEG_DV;
}

public short getJBSIC() {
return JBSIC;
}

public short getJBSOC90LY_CC() {
return JBSOC90LY_CC;
}

public short getJBSOC90_CC() {
return JBSOC90_CC;
}

public short getJBSTATL() {
return JBSTATL;
}

public short getJBSTATT() {
return JBSTATT;
}

public short getJBTERM() {
return JBTERM;
}

public short getJBTIME() {
return JBTIME;
}

public short getJBTTWM() {
return JBTTWM;
}

public short getJBUB() {
return JBUB;
}

public short getJBUBY() {
return JBUBY;
}

protected double JLCSSF() {
return JLCSSF;
}

protected double JLCSSM() {
return JLCSSM;
}

public short getJLGOLD() {
return JLGOLD;
}

protected double JLHGS() {
return JLHGS;
}

public short getJLID() {
return JLID;
}

public String getJLISCO_CC() {
return JLISCO_CC;
}

public short getJLNSSEC_DV() {
return JLNSSEC_DV;
}

public short getJLRGSC_DV() {
return JLRGSC_DV;
}

public short getJLSEC() {
return JLSEC;
}

public short getJLSEG_DV() {
return JLSEG_DV;
}

public short getJLSIC() {
return JLSIC;
}

public short getJLSOC90_CC() {
return JLSOC90_CC;
}

public short getJLYID() {
return JLYID;
}

public short getJNMNTH() {
return JNMNTH;
}

public short getJNYEAR() {
return JNYEAR;
}

public byte getJSBGM() {
return JSBGM;
}

public short getJSBGY4() {
return JSBGY4;
}

public short getJSHRLK() {
return JSHRLK;
}

protected double JSPAYG() {
return JSPAYG;
}

public short getJSPAYGI() {
return JSPAYGI;
}

public int getJSPAYL() {
return JSPAYL;
}

public short getJSPL_BH() {
return JSPL_BH;
}

public short getJSPRBY() {
return JSPRBY;
}

public short getJSPREY() {
return JSPREY;
}

protected double JSPROF() {
return JSPROF;
}

public short getJSPROFI() {
return JSPROFI;
}

public short getJSPYBM() {
return JSPYBM;
}

public short getJSPYBY() {
return JSPYBY;
}

public short getJSPYBY4() {
return JSPYBY4;
}

public short getJSPYEM() {
return JSPYEM;
}

public short getJSPYEY() {
return JSPYEY;
}

public short getJSPYEY4() {
return JSPYEY4;
}

public short getJSSAT() {
return JSSAT;
}

public short getJSSAT1() {
return JSSAT1;
}

public short getJSSAT2() {
return JSSAT2;
}

public short getJSSAT3() {
return JSSAT3;
}

public short getJSSAT4() {
return JSSAT4;
}

public short getJSSAT5() {
return JSSAT5;
}

public short getJSTIME() {
return JSTIME;
}

public short getJSTTWM() {
return JSTTWM;
}

public short getJSTYPE() {
return JSTYPE;
}

public short getJTYID() {
return JTYID;
}

public short getJUHRSL() {
return JUHRSL;
}

public short getJUHRSX() {
return JUHRSX;
}

public short getJULK1() {
return JULK1;
}

public short getJULK4() {
return JULK4;
}

public short getJUPAYL() {
return JUPAYL;
}

public short getJUPAYX() {
return JUPAYX;
}

public short getJUSOC90_CC() {
return JUSOC90_CC;
}

public short getJUSPEC() {
return JUSPEC;
}

public byte getLADOPT() {
return LADOPT;
}

public byte getLCHMOR() {
return LCHMOR;
}

public byte getLCHMORN() {
return LCHMORN;
}

public byte getLCOH() {
return LCOH;
}

public byte getLEDENDM() {
return LEDENDM;
}

public byte getLEDENDY() {
return LEDENDY;
}

public short getLEDENY4() {
return LEDENY4;
}

public byte getLEDNOW() {
return LEDNOW;
}

protected double LEWGHT() {
return LEWGHT;
}

public short getLKMOVY() {
return LKMOVY;
}

public short getLKNBRD() {
return LKNBRD;
}

public byte getLNADPT() {
return LNADPT;
}

public byte getLNCOH() {
return LNCOH;
}

public byte getLNPRNT() {
return LNPRNT;
}

public byte getLPRNT() {
return LPRNT;
}

protected double LRWGHT() {
return LRWGHT;
}

public short getMASTAT() {
return MASTAT;
}

public short getMEMORIG_BH() {
return MEMORIG_BH;
}

public short getMLSTAT_BH() {
return MLSTAT_BH;
}

public int getMNPID_BH() {
return MNPID_BH;
}

public short getMOVEST() {
return MOVEST;
}

public short getMOVJB() {
return MOVJB;
}

public short getMOVJBA() {
return MOVJBA;
}

public short getMOVJBB() {
return MOVJBB;
}

public short getMOVJBC() {
return MOVJBC;
}

public short getMOVJBD() {
return MOVJBD;
}

public short getMOVJBE() {
return MOVJBE;
}

public short getMOVJBF() {
return MOVJBF;
}

public short getMOVJBG() {
return MOVJBG;
}

public short getMOVJBH() {
return MOVJBH;
}

public short getMOVJBI() {
return MOVJBI;
}

public short getMOVY1() {
return MOVY1;
}

public short getMOVY2() {
return MOVY2;
}

public short getMRJBOSS() {
return MRJBOSS;
}

protected double MRJCSSF() {
return MRJCSSF;
}

protected double MRJCSSM() {
return MRJCSSM;
}

public short getMRJEND() {
return MRJEND;
}

public short getMRJGOLD() {
return MRJGOLD;
}

protected double MRJHGS() {
return MRJHGS;
}

public short getMRJISCO88_CC() {
return MRJISCO88_CC;
}

public String getMRJISCO_CC() {
return MRJISCO_CC;
}

public short getMRJMNGR() {
return MRJMNGR;
}

public short getMRJNSSEC8_DV() {
return MRJNSSEC8_DV;
}

public short getMRJNSSEC_DV() {
return MRJNSSEC_DV;
}

public short getMRJRGSC() {
return MRJRGSC;
}

public short getMRJSEC() {
return MRJSEC;
}

public short getMRJSEG() {
return MRJSEG;
}

public short getMRJSEMP() {
return MRJSEMP;
}

public short getMRJSIC() {
return MRJSIC;
}

public short getMRJSIZE() {
return MRJSIZE;
}

public short getMRJSOC() {
return MRJSOC;
}

public short getNAIDXHH_BH() {
return NAIDXHH_BH;
}

public short getNCHILD_DV() {
return NCHILD_DV;
}

public short getNCIGS() {
return NCIGS;
}

public byte getNELYR() {
return NELYR;
}

public short getNEMST() {
return NEMST;
}

public short getNET1AG() {
return NET1AG;
}

public short getNET1JB() {
return NET1JB;
}

public byte getNET1KN() {
return NET1KN;
}

public byte getNET1LV() {
return NET1LV;
}

public short getNET1PH() {
return NET1PH;
}

public byte getNET1RL() {
return NET1RL;
}

public short getNET1WR() {
return NET1WR;
}

public short getNET2AG() {
return NET2AG;
}

public short getNET2JB() {
return NET2JB;
}

public byte getNET2KN() {
return NET2KN;
}

public byte getNET2LV() {
return NET2LV;
}

public short getNET2PH() {
return NET2PH;
}

public byte getNET2RL() {
return NET2RL;
}

public short getNET2WR() {
return NET2WR;
}

public short getNET3AG() {
return NET3AG;
}

public short getNET3JB() {
return NET3JB;
}

public byte getNET3KN() {
return NET3KN;
}

public byte getNET3LV() {
return NET3LV;
}

public short getNET3PH() {
return NET3PH;
}

public byte getNET3RL() {
return NET3RL;
}

public short getNET3WR() {
return NET3WR;
}

public short getNETAG_1() {
return NETAG_1;
}

public short getNETAG_2() {
return NETAG_2;
}

public short getNETAG_3() {
return NETAG_3;
}

public byte getNETKN_1() {
return NETKN_1;
}

public byte getNETKN_2() {
return NETKN_2;
}

public byte getNETKN_3() {
return NETKN_3;
}

public short getNETPH_1() {
return NETPH_1;
}

public short getNETPH_2() {
return NETPH_2;
}

public short getNETPH_3() {
return NETPH_3;
}

public byte getNETRL_1() {
return NETRL_1;
}

public byte getNETRL_2() {
return NETRL_2;
}

public byte getNETRL_3() {
return NETRL_3;
}

public short getNETSX1() {
return NETSX1;
}

public short getNETSX2() {
return NETSX2;
}

public short getNETSX3() {
return NETSX3;
}

public short getNETSX_1() {
return NETSX_1;
}

public short getNETSX_2() {
return NETSX_2;
}

public short getNETSX_3() {
return NETSX_3;
}

public short getNETWR_1() {
return NETWR_1;
}

public short getNETWR_2() {
return NETWR_2;
}

public short getNETWR_3() {
return NETWR_3;
}

public short getNEWHY() {
return NEWHY;
}

public short getNEYRJN() {
return NEYRJN;
}

public short getNF1() {
return NF1;
}

public short getNJBNEW() {
return NJBNEW;
}

public short getNJBS() {
return NJBS;
}

public short getNJBSP() {
return NJBSP;
}

protected double NJBWKS() {
return NJBWKS;
}

public short getNJISP() {
return NJISP;
}

protected double NJIWKS() {
return NJIWKS;
}

public short getNJUSP() {
return NJUSP;
}

protected double NJUWKS() {
return NJUWKS;
}

public byte getNMAR_BH() {
return NMAR_BH;
}

public byte getNORGA() {
return NORGA;
}

public byte getNORGM() {
return NORGM;
}

public byte getNQFEDA() {
return NQFEDA;
}

public byte getNQFEDB() {
return NQFEDB;
}

public byte getNQFEDC() {
return NQFEDC;
}

public short getNQFEDD() {
return NQFEDD;
}

public short getNQFEDE() {
return NQFEDE;
}

public byte getNQFEDF() {
return NQFEDF;
}

public byte getNQFEDG() {
return NQFEDG;
}

public byte getNQFEDH() {
return NQFEDH;
}

public byte getNQFEDI() {
return NQFEDI;
}

public byte getNQFEDJ() {
return NQFEDJ;
}

public byte getNQFEDK() {
return NQFEDK;
}

public short getNQFEDL() {
return NQFEDL;
}

public byte getNQFEDM() {
return NQFEDM;
}

public short getNQFEDN() {
return NQFEDN;
}

public byte getNQFEDO() {
return NQFEDO;
}

public byte getNQFEDP() {
return NQFEDP;
}

public byte getNQFEDQ() {
return NQFEDQ;
}

public byte getNQFEDR() {
return NQFEDR;
}

public short getNQFEDS() {
return NQFEDS;
}

public short getNQFEXA() {
return NQFEXA;
}

public short getNQFEXB() {
return NQFEXB;
}

public short getNQFEXC() {
return NQFEXC;
}

public byte getNQFEXE() {
return NQFEXE;
}

public byte getNQFEXF() {
return NQFEXF;
}

public byte getNQFEXG() {
return NQFEXG;
}

public byte getNQFEXH() {
return NQFEXH;
}

public byte getNQFEXI() {
return NQFEXI;
}

public byte getNQFEXJ() {
return NQFEXJ;
}

public byte getNQFEXK() {
return NQFEXK;
}

public short getNXDTS() {
return NXDTS;
}

public short getOPFAMJ() {
return OPFAMJ;
}

public short getOPFAMK() {
return OPFAMK;
}

public short getOPFAML() {
return OPFAML;
}

public short getOPFAMM() {
return OPFAMM;
}

public short getOPFAMN() {
return OPFAMN;
}

public short getOPISS1() {
return OPISS1;
}

public short getOPISS2() {
return OPISS2;
}

public short getOPISS3() {
return OPISS3;
}

public short getOPISS4() {
return OPISS4;
}

public short getOPISS5() {
return OPISS5;
}

public byte getOPPOL1() {
return OPPOL1;
}

public byte getOPPOL2() {
return OPPOL2;
}

public short getOPPOLA() {
return OPPOLA;
}

public short getOPPOLB() {
return OPPOLB;
}

public short getOPPOLC() {
return OPPOLC;
}

public short getOPPOLD() {
return OPPOLD;
}

public byte getOPSOCG() {
return OPSOCG;
}

public byte getOPSOCH() {
return OPSOCH;
}

public byte getOPSOCI() {
return OPSOCI;
}

public byte getOPSOCJ() {
return OPSOCJ;
}

public byte getORG() {
return ORG;
}

public byte getORGA() {
return ORGA;
}

public byte getORGA1() {
return ORGA1;
}

public byte getORGA11() {
return ORGA11;
}

public byte getORGA12() {
return ORGA12;
}

public byte getORGA13() {
return ORGA13;
}

public byte getORGA14() {
return ORGA14;
}

public byte getORGA15() {
return ORGA15;
}

public byte getORGA16() {
return ORGA16;
}

public byte getORGA2() {
return ORGA2;
}

public byte getORGA3() {
return ORGA3;
}

public byte getORGA4() {
return ORGA4;
}

public byte getORGA5() {
return ORGA5;
}

public byte getORGA6() {
return ORGA6;
}

public byte getORGA7() {
return ORGA7;
}

public byte getORGM1() {
return ORGM1;
}

public byte getORGM11() {
return ORGM11;
}

public byte getORGM12() {
return ORGM12;
}

public byte getORGM13() {
return ORGM13;
}

public byte getORGM14() {
return ORGM14;
}

public byte getORGM15() {
return ORGM15;
}

public byte getORGM16() {
return ORGM16;
}

public byte getORGM2() {
return ORGM2;
}

public byte getORGM3() {
return ORGM3;
}

public byte getORGM4() {
return ORGM4;
}

public byte getORGM5() {
return ORGM5;
}

public byte getORGM6() {
return ORGM6;
}

public byte getORGM7() {
return ORGM7;
}

public byte getPAPER1() {
return PAPER1;
}

public byte getPAPER2() {
return PAPER2;
}

public short getPAPERM() {
return PAPERM;
}

public short getPAPERM2() {
return PAPERM2;
}

public short getPAPERP() {
return PAPERP;
}

public short getPAPERR() {
return PAPERR;
}

public short getPAYDF1() {
return PAYDF1;
}

public short getPAYDF2() {
return PAYDF2;
}

public short getPAYDF3() {
return PAYDF3;
}

public short getPAYDF4() {
return PAYDF4;
}

public short getPAYDF5() {
return PAYDF5;
}

public short getPAYDF6() {
return PAYDF6;
}

public short getPAYDF7() {
return PAYDF7;
}

public short getPAYDF8() {
return PAYDF8;
}

public short getPAYGLI() {
return PAYGLI;
}

protected double PAYGLY() {
return PAYGLY;
}

public short getPAYGTI() {
return PAYGTI;
}

protected double PAYGTY() {
return PAYGTY;
}

protected double PAYGW() {
return PAYGW;
}

public byte getPAYGYA() {
return PAYGYA;
}

public int getPAYGYR() {
return PAYGYR;
}

protected double PAYG_DV() {
return PAYG_DV;
}

public int getPAYLY() {
return PAYLY;
}

public short getPAYLYG() {
return PAYLYG;
}

protected double PAYLYW() {
return PAYLYW;
}

public short getPAYNLI() {
return PAYNLI;
}

protected double PAYNLY() {
return PAYNLY;
}

public short getPAYNTI() {
return PAYNTI;
}

protected double PAYNTY() {
return PAYNTY;
}

protected double PAYNW() {
return PAYNW;
}

public int getPAYS() {
return PAYS;
}

public short getPAYSG() {
return PAYSG;
}

public short getPAYSLP() {
return PAYSLP;
}

protected double PAYSW() {
return PAYSW;
}

protected double PAYUW() {
return PAYUW;
}

public short getPENADD() {
return PENADD;
}

public short getPENADV() {
return PENADV;
}

protected double PENADW() {
return PENADW;
}

public short getPENB4() {
return PENB4;
}

public short getPENB4V() {
return PENB4V;
}

protected double PENB4W() {
return PENB4W;
}

public short getPENB4Y4() {
return PENB4Y4;
}

public short getPENB4YR() {
return PENB4YR;
}

public short getPENYR() {
return PENYR;
}

public short getPENYR4() {
return PENYR4;
}

public int getPID() {
return PID;
}

public byte getPIM1() {
return PIM1;
}

public byte getPIM2() {
return PIM2;
}

public short getPLBORNC_CC() {
return PLBORNC_CC;
}

public short getPLNEW() {
return PLNEW;
}

public short getPLNOWM() {
return PLNOWM;
}

public short getPLNOWY4() {
return PLNOWY4;
}

public short getPPLEVR() {
return PPLEVR;
}

public short getPPPEN() {
return PPPEN;
}

public short getPRFEHQ() {
return PRFEHQ;
}

public short getPRFITBI() {
return PRFITBI;
}

public short getPRFITB_BH() {
return PRFITB_BH;
}

public byte getPRJBFT() {
return PRJBFT;
}

public short getPRRS2I() {
return PRRS2I;
}

public short getPRSEHQ() {
return PRSEHQ;
}

public short getPRWHY() {
return PRWHY;
}

public short getQFA() {
return QFA;
}

public short getQFACHI() {
return QFACHI;
}

public short getQFB() {
return QFB;
}

public short getQFC() {
return QFC;
}

public short getQFD() {
return QFD;
}

public short getQFE() {
return QFE;
}

public short getQFED() {
return QFED;
}

public short getQFEDA() {
return QFEDA;
}

public short getQFEDB() {
return QFEDB;
}

public short getQFEDC() {
return QFEDC;
}

public short getQFEDD() {
return QFEDD;
}

public short getQFEDE() {
return QFEDE;
}

public short getQFEDF() {
return QFEDF;
}

public short getQFEDG() {
return QFEDG;
}

public short getQFEDH() {
return QFEDH;
}

public short getQFEDHI() {
return QFEDHI;
}

public short getQFEDI() {
return QFEDI;
}

public short getQFEDJ() {
return QFEDJ;
}

public short getQFEDK() {
return QFEDK;
}

public short getQFEDL() {
return QFEDL;
}

public short getQFEDM() {
return QFEDM;
}

public short getQFEDN() {
return QFEDN;
}

public short getQFEDO() {
return QFEDO;
}

public short getQFEDP() {
return QFEDP;
}

public short getQFEDQ() {
return QFEDQ;
}

public short getQFEDR() {
return QFEDR;
}

public short getQFEDS() {
return QFEDS;
}

public short getQFEDX() {
return QFEDX;
}

public short getQFEDXA() {
return QFEDXA;
}

public short getQFEDXB() {
return QFEDXB;
}

public short getQFEDXC() {
return QFEDXC;
}

public short getQFEDXD() {
return QFEDXD;
}

public short getQFEDXE() {
return QFEDXE;
}

public short getQFEDXF() {
return QFEDXF;
}

public short getQFEDXG() {
return QFEDXG;
}

public short getQFEDXH() {
return QFEDXH;
}

public short getQFEDXI() {
return QFEDXI;
}

public short getQFEDXJ() {
return QFEDXJ;
}

public short getQFEDXK() {
return QFEDXK;
}

public short getQFF() {
return QFF;
}

public short getQFG() {
return QFG;
}

public short getQFH() {
return QFH;
}

public short getQFHAS() {
return QFHAS;
}

public short getQFI() {
return QFI;
}

public short getQFJ() {
return QFJ;
}

public short getQFK() {
return QFK;
}

public short getQFL() {
return QFL;
}

public short getQFM() {
return QFM;
}

public short getQFN() {
return QFN;
}

public short getQFVOC() {
return QFVOC;
}

public short getQFX() {
return QFX;
}

public short getQFXA() {
return QFXA;
}

public short getQFXB() {
return QFXB;
}

public short getQFXC() {
return QFXC;
}

public short getQFXD() {
return QFXD;
}

public short getQFXE() {
return QFXE;
}

public short getQFXF() {
return QFXF;
}

public short getQFXG() {
return QFXG;
}

public short getQFXH() {
return QFXH;
}

public short getQFXI() {
return QFXI;
}

public short getQFXJ() {
return QFXJ;
}

public short getQFXK() {
return QFXK;
}

public short getQFXL() {
return QFXL;
}

public short getQFXM() {
return QFXM;
}

public short getQFXN() {
return QFXN;
}

public short getRACE() {
return RACE;
}

public short getRACH12() {
return RACH12;
}

public short getREGION() {
return REGION;
}

public short getSAMPST() {
return SAMPST;
}

public short getSAMPST_BH() {
return SAMPST_BH;
}

public short getSAVE() {
return SAVE;
}

public int getSAVED() {
return SAVED;
}

public byte getSAVEY() {
return SAVEY;
}

public short getSCNOW() {
return SCNOW;
}

public short getSCTYPE() {
return SCTYPE;
}

public short getSMOKER() {
return SMOKER;
}

public short getSPINHH() {
return SPINHH;
}

public short getSPJB() {
return SPJB;
}

public short getSPJBHR() {
return SPJBHR;
}

public short getSPJBOT() {
return SPJBOT;
}

public short getSPJBYR() {
return SPJBYR;
}

protected double SPPAYG() {
return SPPAYG;
}

public short getSPPAYGI() {
return SPPAYGI;
}

public int getSPPID_BH() {
return SPPID_BH;
}

public short getSPSOC90_CC() {
return SPSOC90_CC;
}

public short getTENURE_DV() {
return TENURE_DV;
}

public short getTUIN1() {
return TUIN1;
}

public short getTUIN2() {
return TUIN2;
}

public short getTUJBPL() {
return TUJBPL;
}

public short getVOTE1() {
return VOTE1;
}

public short getVOTE2() {
return VOTE2;
}

public short getVOTE4() {
return VOTE4;
}

public short getVOTE4_BH() {
return VOTE4_BH;
}

public short getVOTE5() {
return VOTE5;
}

public short getVOTE6() {
return VOTE6;
}

public byte getVOTE7() {
return VOTE7;
}

public byte getVOTE8() {
return VOTE8;
}

public byte getVOTE8_BH() {
return VOTE8_BH;
}

public short getWKTIME() {
return WKTIME;
}

public byte getXDT1M() {
return XDT1M;
}

public byte getXDT1PL() {
return XDT1PL;
}

public byte getXDT1Y() {
return XDT1Y;
}

public byte getXDT2M() {
return XDT2M;
}

public byte getXDT2PL() {
return XDT2PL;
}

public byte getXDT2Y() {
return XDT2Y;
}

public byte getXDT3M() {
return XDT3M;
}

public byte getXDT3PL() {
return XDT3PL;
}

public byte getXDT3Y() {
return XDT3Y;
}

public short getXDTS() {
return XDTS;
}

protected double XEWGHT() {
return XEWGHT;
}

public short getXPCHC() {
return XPCHC;
}

public short getXPCHCF() {
return XPCHCF;
}

protected double XRWGHT() {
return XRWGHT;
}

public short getYR2UK() {
return YR2UK;
}

public US_Wave2_indresp_Record(String line) {
s = line.split("\t");
initPID(s[0]);
initHIQUALB_DV(s[1]);
initHID(s[2]);
initHIDP(s[3]);
initPNO(s[4]);
initISTRTDATD(s[5]);
initISTRTDATM(s[6]);
initISTRTDATHH(s[7]);
initISTRTDATHM(s[8]);
initIVLYR(s[9]);
initLKNBRD(s[10]);
initLKMOVE(s[11]);
initLKMOVY(s[12]);
initPLNEW(s[13]);
initPLNOWM(s[14]);
initMOVJB(s[15]);
initMOVJBA(s[16]);
initMOVJBB(s[17]);
initMOVJBC(s[18]);
initMOVJBD(s[19]);
initMOVJBE(s[20]);
initMOVJBF(s[21]);
initMOVJBG(s[22]);
initMOVJBH(s[23]);
initMOVJBI(s[24]);
initMOVY1(s[25]);
initMOVY2(s[26]);
initDOBY(s[27]);
initSEX(s[28]);
initJBSTAT(s[29]);
initEDLYR(s[30]);
initEDENDM(s[31]);
initEDENDY(s[32]);
initEDTYPE_BH(s[33]);
initQFX(s[34]);
initQFXA(s[35]);
initQFXB(s[36]);
initQFXC(s[37]);
initQFXD(s[38]);
initQFXE(s[39]);
initQFXF(s[40]);
initQFXG(s[41]);
initQFXH(s[42]);
initQFXI(s[43]);
initQFXJ(s[44]);
initQFXK(s[45]);
initQFXL(s[46]);
initQFXM(s[47]);
initQFXN(s[48]);
initQFEDX(s[49]);
initQFEDXA(s[50]);
initNQFEXA(s[51]);
initQFEDXB(s[52]);
initNQFEXB(s[53]);
initQFEDXC(s[54]);
initNQFEXC(s[55]);
initQFEDXD(s[56]);
initQFEDXE(s[57]);
initNQFEXE(s[58]);
initQFEDXF(s[59]);
initNQFEXF(s[60]);
initQFEDXG(s[61]);
initNQFEXG(s[62]);
initQFEDXH(s[63]);
initNQFEXH(s[64]);
initQFEDXI(s[65]);
initNQFEXI(s[66]);
initQFEDXJ(s[67]);
initNQFEXJ(s[68]);
initQFEDXK(s[69]);
initNQFEXK(s[70]);
initYR2UK(s[71]);
initRACE(s[72]);
initSCHOOL(s[73]);
initSCEND(s[74]);
initSCTYPE(s[75]);
initSCNOW(s[76]);
initFETYPE(s[77]);
initFENOW_BH(s[78]);
initFEEND(s[79]);
initQFHAS(s[80]);
initQFA(s[81]);
initQFB(s[82]);
initQFC(s[83]);
initQFD(s[84]);
initQFE(s[85]);
initQFF(s[86]);
initQFG(s[87]);
initQFH(s[88]);
initQFI(s[89]);
initQFJ(s[90]);
initQFK(s[91]);
initQFL(s[92]);
initQFM(s[93]);
initQFN(s[94]);
initQFED(s[95]);
initQFEDA(s[96]);
initNQFEDA(s[97]);
initQFEDB(s[98]);
initNQFEDB(s[99]);
initQFEDC(s[100]);
initNQFEDC(s[101]);
initQFEDD(s[102]);
initNQFEDD(s[103]);
initQFEDE(s[104]);
initNQFEDE(s[105]);
initQFEDF(s[106]);
initNQFEDF(s[107]);
initQFEDG(s[108]);
initNQFEDG(s[109]);
initQFEDH(s[110]);
initNQFEDH(s[111]);
initQFEDI(s[112]);
initNQFEDI(s[113]);
initQFEDJ(s[114]);
initNQFEDJ(s[115]);
initQFEDK(s[116]);
initNQFEDK(s[117]);
initQFEDL(s[118]);
initNQFEDL(s[119]);
initQFEDM(s[120]);
initNQFEDM(s[121]);
initQFEDN(s[122]);
initNQFEDN(s[123]);
initQFEDO(s[124]);
initNQFEDO(s[125]);
initQFEDP(s[126]);
initNQFEDP(s[127]);
initQFEDQ(s[128]);
initNQFEDQ(s[129]);
initQFEDR(s[130]);
initNQFEDR(s[131]);
initQFEDS(s[132]);
initNQFEDS(s[133]);
initPAPERR(s[134]);
initPAPER1(s[135]);
initPAPER2(s[136]);
initPAPERM(s[137]);
initPAPERP(s[138]);
initOPSOCG(s[139]);
initOPSOCH(s[140]);
initOPSOCI(s[141]);
initOPSOCJ(s[142]);
initIVDA(s[143]);
initIVDB(s[144]);
initIVDC(s[145]);
initIVDD(s[146]);
initHLSTAT(s[147]);
initHLZEST(s[148]);
initHLDSBL(s[149]);
initHLPRB(s[150]);
initHLPRBA(s[151]);
initHLPRBB(s[152]);
initHLPRBC(s[153]);
initHLPRBD(s[154]);
initHLPRBE(s[155]);
initHLPRBF(s[156]);
initHLPRBG(s[157]);
initHLPRBH(s[158]);
initHLPRBI(s[159]);
initHLPRBJ(s[160]);
initHLPRBK(s[161]);
initHLPRBL(s[162]);
initHLPRBM(s[163]);
initHLLT(s[164]);
initHLLTA(s[165]);
initHLLTB(s[166]);
initHLLTC(s[167]);
initHLLTD(s[168]);
initHLLTE(s[169]);
initHLLTW(s[170]);
initHLENDW(s[171]);
initHLLTWA(s[172]);
initHL2GP(s[173]);
initXDTS(s[174]);
initNXDTS(s[175]);
initXDT1M(s[176]);
initXDT2M(s[177]);
initXDT3M(s[178]);
initXDT1Y(s[179]);
initXDT2Y(s[180]);
initXDT3Y(s[181]);
initXDT1PL(s[182]);
initXDT2PL(s[183]);
initXDT3PL(s[184]);
initHOSP(s[185]);
initHOSPD(s[186]);
initHOSPCH(s[187]);
initHOSPNHS(s[188]);
initHLSV(s[189]);
initHLSVA(s[190]);
initHLSVAN(s[191]);
initHLSVAF(s[192]);
initHLSVB(s[193]);
initHLSVBN(s[194]);
initHLSVBF(s[195]);
initHLSVC(s[196]);
initHLSVCN(s[197]);
initHLSVCF(s[198]);
initHLSVD(s[199]);
initHLSVDN(s[200]);
initHLSVDF(s[201]);
initHLSVE(s[202]);
initHLSVEN(s[203]);
initHLSVEF(s[204]);
initHLSVF(s[205]);
initHLSVFN(s[206]);
initHLSVFF(s[207]);
initHLSVG(s[208]);
initHLSVGN(s[209]);
initHLSVGF(s[210]);
initHLSVH(s[211]);
initHLSVHN(s[212]);
initHLSVHF(s[213]);
initHLSVI(s[214]);
initHLSVIN(s[215]);
initHLSVIF(s[216]);
initHLSVJ(s[217]);
initHLSVJN(s[218]);
initHLSVJF(s[219]);
initHLSVK(s[220]);
initHLSVKN(s[221]);
initHLSVKF(s[222]);
initHLCK(s[223]);
initHLCKA(s[224]);
initHLCKAN(s[225]);
initHLCKB(s[226]);
initHLCKBN(s[227]);
initHLCKC(s[228]);
initHLCKCN(s[229]);
initHLCKD(s[230]);
initHLCKDN(s[231]);
initHLCKE(s[232]);
initHLCKEN(s[233]);
initHLCKF(s[234]);
initHLCKFN(s[235]);
initHLCKG(s[236]);
initHLCKGN(s[237]);
initHLCKH(s[238]);
initHLCKHN(s[239]);
initSMOKER(s[240]);
initNCIGS(s[241]);
initAIDHH(s[242]);
initAIDHUA(s[243]);
initAIDHUB(s[244]);
initAIDHUC(s[245]);
initAIDXHH(s[246]);
initNAIDXHH_BH(s[247]);
initAIDHU1A(s[248]);
initAIDHU2A(s[249]);
initAIDPL1(s[250]);
initAIDPL2(s[251]);
initAIDHRS_BH(s[252]);
initIVMA(s[253]);
initIVMB(s[254]);
initIVMC(s[255]);
initIVMD(s[256]);
initMLSTAT_BH(s[257]);
initNMAR_BH(s[258]);
initLCOH(s[259]);
initLNCOH(s[260]);
initLADOPT(s[261]);
initLNADPT(s[262]);
initLPRNT(s[263]);
initLNPRNT(s[264]);
initCBAGE(s[265]);
initLCHMOR(s[266]);
initLCHMORN(s[267]);
initIVLA(s[268]);
initIVLB(s[269]);
initIVLC(s[270]);
initIVLD(s[271]);
initLEDENDM(s[272]);
initLEDENDY(s[273]);
initLEDNOW(s[274]);
initJBHAS(s[275]);
initJBOFF(s[276]);
initJBOFFY_BH(s[277]);
initJBTERM(s[278]);
initJBSIC(s[279]);
initJBSEMP(s[280]);
initJBMNGR(s[281]);
initJBSIZE(s[282]);
initJBHRS(s[283]);
initJBOT(s[284]);
initJBOTPD(s[285]);
initJBHRLK(s[286]);
initJBPL_BH(s[287]);
initJBTTWT(s[288]);
initJBTTWM(s[289]);
initJBSAT1(s[290]);
initJBSAT2(s[291]);
initJBSAT3(s[292]);
initJBSAT4(s[293]);
initJBSAT5(s[294]);
initJBSAT6(s[295]);
initJBSAT7(s[296]);
initJBSAT_BH(s[297]);
initPAYGL(s[298]);
initPAYGW(s[299]);
initPAYNL(s[300]);
initPAYNW(s[301]);
initPAYSLP(s[302]);
initPAYUSL(s[303]);
initPAYU(s[304]);
initPAYUW(s[305]);
initPAYUG(s[306]);
initPAYDF1(s[307]);
initPAYDF2(s[308]);
initPAYDF3(s[309]);
initPAYDF4(s[310]);
initPAYDF5(s[311]);
initPAYDF6(s[312]);
initPAYDF7(s[313]);
initPAYDF8(s[314]);
initJBBGD(s[315]);
initJBBGM(s[316]);
initJBBGLY(s[317]);
initJBSECT_BH(s[318]);
initJBONUS(s[319]);
initJBRISE(s[320]);
initTUJBPL(s[321]);
initTUIN1(s[322]);
initTUIN2(s[323]);
initJBOPPS(s[324]);
initJBTIME(s[325]);
initPAYS(s[326]);
initPAYSW(s[327]);
initPAYSG(s[328]);
initJBPEN(s[329]);
initJBPENM(s[330]);
initPAYLY(s[331]);
initPAYLYW(s[332]);
initPAYLYG(s[333]);
initPAYGYR(s[334]);
initPAYGYA(s[335]);
initJSBOSS(s[336]);
initJSSIZE(s[337]);
initJSHRS(s[338]);
initJSHRLK(s[339]);
initJSTIME(s[340]);
initJSTYPE(s[341]);
initJSACCS(s[342]);
initJSPRF(s[343]);
initJSPRBM(s[344]);
initJSPRBY(s[345]);
initJSPREM(s[346]);
initJSPREY(s[347]);
initJSPAYL(s[348]);
initJSPYBM(s[349]);
initJSPYBY(s[350]);
initJSPYEM(s[351]);
initJSPYEY(s[352]);
initJSPL_BH(s[353]);
initJSTTWTB(s[354]);
initJSTTWM(s[355]);
initJSSAT1(s[356]);
initJSSAT2(s[357]);
initJSSAT3(s[358]);
initJSSAT4(s[359]);
initJSSAT5(s[360]);
initJSSAT(s[361]);
initJSBGM(s[362]);
initJBED(s[363]);
initJBED1(s[364]);
initJBED2(s[365]);
initJBED3(s[366]);
initJBED4(s[367]);
initJBED5(s[368]);
initJBEDH(s[369]);
initJBEDW(s[370]);
initRACH12(s[371]);
initJBCHC1(s[372]);
initJBCHC2(s[373]);
initJBCHC3(s[374]);
initXPCHCF(s[375]);
initXPCHC(s[376]);
initHUXPCH(s[377]);
initHUNURS(s[378]);
initJULK1(s[379]);
initJULK4(s[380]);
initJULKJB(s[381]);
initJUSPEC(s[382]);
initJUHRSX(s[383]);
initJUPAYX(s[384]);
initJUPAYL(s[385]);
initJUHRSL(s[386]);
initEAAGE(s[387]);
initJBUB(s[388]);
initJBUBY(s[389]);
initJ2HAS(s[390]);
initJ2SEMP(s[391]);
initJ2HRS(s[392]);
initJ2PAY_DV(s[393]);
initJBHHA(s[394]);
initJBHHB(s[395]);
initJBHHC(s[396]);
initJBHHD(s[397]);
initJBHHE(s[398]);
initJBHHF(s[399]);
initIVEA(s[400]);
initIVEB(s[401]);
initIVEC(s[402]);
initIVED(s[403]);
initEDNEW(s[404]);
initEDNEW1(s[405]);
initEDNEW2(s[406]);
initEDNEW3(s[407]);
initEDNEW4(s[408]);
initEDNEWH(s[409]);
initEDNEWW(s[410]);
initNEMST(s[411]);
initCJSBGD(s[412]);
initCJSBGM(s[413]);
initCJSBGY(s[414]);
initCJSBLY(s[415]);
initNJBS(s[416]);
initJBHAD(s[417]);
initJLSIC(s[418]);
initJLSEMP(s[419]);
initJLBOSS(s[420]);
initJLMNGR(s[421]);
initJLSIZE(s[422]);
initIVJA(s[423]);
initIVJB(s[424]);
initIVJC(s[425]);
initIVJD(s[426]);
initOPPOLA(s[427]);
initOPPOLB(s[428]);
initOPPOLC(s[429]);
initOPPOLD(s[430]);
initVOTE1(s[431]);
initVOTE2(s[432]);
initVOTE4_BH(s[433]);
initVOTE5(s[434]);
initVOTE7(s[435]);
initVOTE8_BH(s[436]);
initVOTE6(s[437]);
initOPISS1(s[438]);
initOPISS2(s[439]);
initOPISS3(s[440]);
initOPISS4(s[441]);
initOPISS5(s[442]);
initOPPOL1(s[443]);
initOPPOL2(s[444]);
initORG(s[445]);
initORGM1(s[446]);
initORGA1(s[447]);
initORGM2(s[448]);
initORGA2(s[449]);
initORGM3(s[450]);
initORGA3(s[451]);
initORGM4(s[452]);
initORGA4(s[453]);
initORGM5(s[454]);
initORGA5(s[455]);
initORGM6(s[456]);
initORGA6(s[457]);
initORGM7(s[458]);
initORGA7(s[459]);
initORGM11(s[460]);
initORGA11(s[461]);
initORGM12(s[462]);
initORGA12(s[463]);
initORGM13(s[464]);
initORGA13(s[465]);
initORGM14(s[466]);
initORGA14(s[467]);
initORGM15(s[468]);
initORGA15(s[469]);
initORGM16(s[470]);
initORGA16(s[471]);
initORGA(s[472]);
initDRIVE(s[473]);
initCARUSE(s[474]);
initIVVA(s[475]);
initIVVB(s[476]);
initIVVC(s[477]);
initIVVD(s[478]);
initF101(s[479]);
initF102(s[480]);
initF103(s[481]);
initF104(s[482]);
initF105(s[483]);
initF106(s[484]);
initF116(s[485]);
initF117(s[486]);
initF118(s[487]);
initF119(s[488]);
initF120(s[489]);
initF121(s[490]);
initF122(s[491]);
initF123(s[492]);
initF124(s[493]);
initF131(s[494]);
initF132(s[495]);
initF133(s[496]);
initF134(s[497]);
initF135(s[498]);
initF136(s[499]);
initF137(s[500]);
initF138(s[501]);
initF139(s[502]);
initF140(s[503]);
initF141(s[504]);
initF151(s[505]);
initF152(s[506]);
initF153(s[507]);
initF154(s[508]);
initF155(s[509]);
initF156(s[510]);
initF157(s[511]);
initF158(s[512]);
initF159(s[513]);
initNF1(s[514]);
initFINNOW(s[515]);
initFISITC(s[516]);
initFISITX(s[517]);
initFIYRDI(s[518]);
initSAVE(s[519]);
initSAVED(s[520]);
initSAVEY(s[521]);
initPPPEN(s[522]);
initPENB4(s[523]);
initPENB4YR(s[524]);
initPENB4V(s[525]);
initPENB4W(s[526]);
initPENYR(s[527]);
initPENADD(s[528]);
initPENADV(s[529]);
initPENADW(s[530]);
initFTHH(s[531]);
initFTHH1(s[532]);
initFTHH11(s[533]);
initFTHH12(s[534]);
initFTHH13(s[535]);
initFTHH14(s[536]);
initFTHH15(s[537]);
initFTHH16(s[538]);
initFTHH1V(s[539]);
initFTHH1W(s[540]);
initFTHH2(s[541]);
initFTHH21(s[542]);
initFTHH22(s[543]);
initFTHH23(s[544]);
initFTHH24(s[545]);
initFTHH25(s[546]);
initFTHH26(s[547]);
initFTHH2V(s[548]);
initFTHH2W(s[549]);
initFTHH3(s[550]);
initFTHH31(s[551]);
initFTHH32(s[552]);
initFTHH33(s[553]);
initFTHH34(s[554]);
initFTHH35(s[555]);
initFTHH36(s[556]);
initFTHH3V(s[557]);
initFTHH3W(s[558]);
initFTEXHH(s[559]);
initFTEXA(s[560]);
initFTEXA1(s[561]);
initFTEXA2(s[562]);
initFTEXA3(s[563]);
initFTEXA4(s[564]);
initFTEXA5(s[565]);
initFTEXA6(s[566]);
initFTEXAV(s[567]);
initFTEXAW(s[568]);
initFTEXB(s[569]);
initFTEXB1(s[570]);
initFTEXB2(s[571]);
initFTEXB3(s[572]);
initFTEXB4(s[573]);
initFTEXB5(s[574]);
initFTEXB6(s[575]);
initFTEXBV(s[576]);
initFTEXBW(s[577]);
initFTEXC(s[578]);
initFTEXC1(s[579]);
initFTEXC2(s[580]);
initFTEXC3(s[581]);
initFTEXC4(s[582]);
initFTEXC5(s[583]);
initFTEXC6(s[584]);
initFTEXCV(s[585]);
initFTEXCW(s[586]);
initSPINHH(s[587]);
initHURUNS(s[588]);
initHUBOSS(s[589]);
initHUDOES(s[590]);
initFAIR1(s[591]);
initHHCH12(s[592]);
initHUSITS2(s[593]);
initFAIR2(s[594]);
initHOWLNG(s[595]);
initIVFA(s[596]);
initIVFB(s[597]);
initIVFC(s[598]);
initIVFD(s[599]);
initIENDDATHH(s[600]);
initIENDDATHM(s[601]);
initIVSC(s[602]);
initIVPRSNT(s[603]);
initIV2(s[604]);
initIV4(s[605]);
initIV5(s[606]);
initIV6A(s[607]);
initIV6B(s[608]);
initIV6C(s[609]);
initIV6D(s[610]);
initIV6E(s[611]);
initIV6F(s[612]);
initIV7(s[613]);
initSCGHQA(s[614]);
initSCGHQB(s[615]);
initSCGHQC(s[616]);
initSCGHQD(s[617]);
initSCGHQE(s[618]);
initSCGHQF(s[619]);
initSCGHQG(s[620]);
initSCGHQH(s[621]);
initSCGHQI(s[622]);
initSCGHQJ(s[623]);
initSCGHQK(s[624]);
initSCGHQL(s[625]);
initOPFAMJ(s[626]);
initOPFAMK(s[627]);
initOPFAML(s[628]);
initOPFAMM(s[629]);
initOPFAMN(s[630]);
initNETSX1(s[631]);
initNETSX2(s[632]);
initNETSX3(s[633]);
initNET1WR(s[634]);
initNET2WR(s[635]);
initNET3WR(s[636]);
initNET1RL(s[637]);
initNET2RL(s[638]);
initNET3RL(s[639]);
initNET1AG(s[640]);
initNET2AG(s[641]);
initNET3AG(s[642]);
initNET1KN(s[643]);
initNET2KN(s[644]);
initNET3KN(s[645]);
initNET1PH(s[646]);
initNET2PH(s[647]);
initNET3PH(s[648]);
initNET1LV(s[649]);
initNET2LV(s[650]);
initNET3LV(s[651]);
initNET1JB(s[652]);
initNET2JB(s[653]);
initNET3JB(s[654]);
initPRRS2I(s[655]);
initPRIPN(s[656]);
initPRWHY(s[657]);
initPPLEVR(s[658]);
initPRFEHQ(s[659]);
initPRSEHQ(s[660]);
initPRFITB_BH(s[661]);
initPIM1(s[662]);
initPIM2(s[663]);
initPRJBFT(s[664]);
initPIDP(s[665]);
initIVIOW1(s[666]);
initHHMEM(s[667]);
initNELYR(s[668]);
initNEWHY(s[669]);
initJNMNTH(s[670]);
initNEYRJN(s[671]);
initIVFIO(s[672]);
initIVCOOP_BH(s[673]);
initIODC(s[674]);
initHGR2R(s[675]);
initHGSEX(s[676]);
initBIRTHY(s[677]);
initMASTAT(s[678]);
initPPNO(s[679]);
initHGEMP(s[680]);
initHGBIOF(s[681]);
initHGBIOM(s[682]);
initHGRA(s[683]);
initAGE_DV(s[684]);
initAGE12(s[685]);
initBUTYPE(s[686]);
initBUNO(s[687]);
initNCHILD_DV(s[688]);
initHOH(s[689]);
initRACH16_DV(s[690]);
initSAMPST_BH(s[691]);
initMOVEST(s[692]);
initREGION(s[693]);
initHHSIZE(s[694]);
initHHTYPE(s[695]);
initTENURE_DV(s[696]);
initQFEDHI(s[697]);
initQFVOC(s[698]);
initQFACHI(s[699]);
initJBFT_DV(s[700]);
initPAYG_DV(s[701]);
initPAYN_DV(s[702]);
initPAYGU_DV(s[703]);
initPAYNU_DV(s[704]);
initPAYGTY(s[705]);
initPAYGLY(s[706]);
initPAYNTY(s[707]);
initPAYNLY(s[708]);
initJSPROF(s[709]);
initJSPAYG(s[710]);
initCJSTEN(s[711]);
initCJSWK9(s[712]);
initJLID(s[713]);
initJLYID(s[714]);
initJTYID(s[715]);
initJBSEG_DV(s[716]);
initJBGOLD(s[717]);
initJBRGSC_DV(s[718]);
initJBCSSM(s[719]);
initJBCSSF(s[720]);
initJBHGS(s[721]);
initJBSEC_BH(s[722]);
initNJBWKS(s[723]);
initNJUWKS(s[724]);
initNJIWKS(s[725]);
initNJBNEW(s[726]);
initNJBSP(s[727]);
initNJUSP(s[728]);
initNJISP(s[729]);
initJBSTATL(s[730]);
initJBSTATT(s[731]);
initJLSEG_DV(s[732]);
initJLGOLD(s[733]);
initJLRGSC_DV(s[734]);
initJLCSSM(s[735]);
initJLCSSF(s[736]);
initJLHGS(s[737]);
initJLSEC(s[738]);
initNORGM(s[739]);
initNORGA(s[740]);
initFIMNP(s[741]);
initFIMNB(s[742]);
initFIMNI(s[743]);
initFIMNT(s[744]);
initFIMNLABGRS_DV(s[745]);
initFIMNNL(s[746]);
initFIMNGRS_DV(s[747]);
initFIYRL(s[748]);
initFIYRNL(s[749]);
initFIYRP(s[750]);
initFIYRB(s[751]);
initFIYRT(s[752]);
initFIYRI(s[753]);
initFIYR(s[754]);
initFIHHMN(s[755]);
initSCGHQ1_DV(s[756]);
initSCGHQ2_DV(s[757]);
initSPJB(s[758]);
initSPJBHR(s[759]);
initSPJBOT(s[760]);
initSPPAYG(s[761]);
initSPJBYR(s[762]);
initLRWGHT(s[763]);
initLEWGHT(s[764]);
initXRWGHT(s[765]);
initXEWGHT(s[766]);
initJ2PAY_IF(s[767]);
initFIYRDII(s[768]);
initPRFITBI(s[769]);
initPAYGU_IF(s[770]);
initPAYNU_IF(s[771]);
initPAYGTI(s[772]);
initPAYGLI(s[773]);
initPAYNTI(s[774]);
initPAYNLI(s[775]);
initJSPROFI(s[776]);
initJSPAYGI(s[777]);
initFIMNPI(s[778]);
initFIMNBI(s[779]);
initFIMNII(s[780]);
initFIMNTI(s[781]);
initFIMNNLI(s[782]);
initFIMNLI(s[783]);
initFIMNTHI(s[784]);
initFIYRLI(s[785]);
initFIYRNLI(s[786]);
initFIYRPI(s[787]);
initFIYRBI(s[788]);
initFIYRTI(s[789]);
initFIYRII(s[790]);
initFIYEARI(s[791]);
initSPPAYGI(s[792]);
initFIHHMNI(s[793]);
initIMPEVENT1(s[794]);
initIMPEVENT1S(s[795]);
initIMPEVENT2(s[796]);
initIMPEVENT2S(s[797]);
initIMPEVENT3(s[798]);
initIMPEVENT3S(s[799]);
initIMPEVENT4(s[800]);
initIMPEVENT4S(s[801]);
initMRJEND(s[802]);
initMRJSOC(s[803]);
initMRJSIC(s[804]);
initMRJSEMP(s[805]);
initMRJBOSS(s[806]);
initMRJMNGR(s[807]);
initMRJSIZE(s[808]);
initMRJSEG(s[809]);
initMRJGOLD(s[810]);
initMRJRGSC(s[811]);
initMRJCSSM(s[812]);
initMRJCSSF(s[813]);
initMRJHGS(s[814]);
initMRJSEC(s[815]);
initISTRTDATY(s[816]);
initPLNOWY4(s[817]);
initEDENDY4(s[818]);
initYR2UK4(s[819]);
initLEDENY4(s[820]);
initJBBGY(s[821]);
initJSPRBY4(s[822]);
initJSPREY4(s[823]);
initJSPYBY4(s[824]);
initJSPYEY4(s[825]);
initJSBGY4(s[826]);
initCJSBGY4(s[827]);
initJLENDY(s[828]);
initPENB4Y4(s[829]);
initPENYR4(s[830]);
initJNYEAR(s[831]);
initSPPID_BH(s[832]);
initFNPID_BH(s[833]);
initMNPID_BH(s[834]);
initDISTMOV(s[835]);
initGOR_DV(s[836]);
initISCED(s[837]);
initCASMIN(s[838]);
initMRJISCO88_CC(s[839]);
initJBISCO_CC(s[840]);
initJLISCO_CC(s[841]);
initMRJISCO_CC(s[842]);
initPLBORNC_CC(s[843]);
initJ2PAY_BH(s[844]);
initJLNSSEC_DV(s[845]);
initMRJNSSEC_DV(s[846]);
initJBNSSEC_DV(s[847]);
initJBNSSEC8_DV(s[848]);
initJLNSSEC8_DV(s[849]);
initMRJNSSEC8_DV(s[850]);
initNETPH_1(s[851]);
initNETSX_1(s[852]);
initNETWR_1(s[853]);
initNETRL_1(s[854]);
initNETAG_1(s[855]);
initNETKN_1(s[856]);
initNETPH_2(s[857]);
initNETSX_2(s[858]);
initNETWR_2(s[859]);
initNETRL_2(s[860]);
initNETAG_2(s[861]);
initNETKN_2(s[862]);
initNETPH_3(s[863]);
initNETSX_3(s[864]);
initNETWR_3(s[865]);
initNETRL_3(s[866]);
initNETAG_3(s[867]);
initNETKN_3(s[868]);
initSAMPST(s[869]);
initJULK4WK(s[870]);
initPJULK4WK(s[871]);
initJSTTWT(s[872]);
initMLSTAT(s[873]);
initEDTYPE(s[874]);
initJBSECT(s[875]);
initPLBORNC(s[876]);
initVOTE4(s[877]);
initVOTE8(s[878]);
initJBPL(s[879]);
initJSPL(s[880]);
initAIDHRS(s[881]);
initJBSOC90_CC(s[882]);
initJLSOC90_CC(s[883]);
initJ2SOC90_CC(s[884]);
initJUSOC90_CC(s[885]);
initJBSOC90LY_CC(s[886]);
initSPSOC90_CC(s[887]);
initJBISCO88_CC(s[888]);
initJLISCO88_CC(s[889]);
initMEMORIG_BH(s[890]);
initMEMORIG(s[891]);
initHHORIG(s[892]);
initPAPERM2(s[893]);
initWKTIME(s[894]);
initHIQUAL_DV(s[895]);
}
}
