/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.data.us.data.indresp;
public class US_Wave20_indresp_Record extends US_indresp_Record {
protected byte ACC1TO161;
protected byte ACC1TO1610;
protected byte ACC1TO1611;
protected byte ACC1TO1612;
protected byte ACC1TO1613;
protected byte ACC1TO1614;
protected byte ACC1TO162;
protected byte ACC1TO163;
protected byte ACC1TO164;
protected byte ACC1TO165;
protected byte ACC1TO166;
protected byte ACC1TO167;
protected byte ACC1TO168;
protected byte ACC1TO169;
protected byte ACC1TO1697;
protected byte ACCESS;
protected byte ADOPTCH01;
protected byte ADOPTCH02;
protected byte ADOPTCH03;
protected byte ADOPTCH04;
protected byte ADOPTCH05;
protected byte ADOPTCH06;
protected boolean ADOPTCH07;
protected boolean ADOPTCH08;
protected boolean ADOPTCH09;
protected boolean ADOPTCH10;
protected boolean ADOPTCH11;
protected boolean ADOPTCH12;
protected boolean ADOPTCH13;
protected boolean ADOPTCH14;
protected boolean ADOPTCH15;
protected boolean ADOPTCH16;
protected byte ADRESP17;
protected byte ADSTATUS;
protected byte ADVVOUCHER;
protected byte AGEGR10_DV;
protected byte AGEGR13_DV;
protected byte AGEGR5_DV;
protected byte AGERET;
protected short AGE_DV;
protected byte AGLQUIT;
protected byte AIDEFT;
protected short AIDHU1;
protected short AIDHU2;
protected byte AIDHUA1;
protected byte AIDHUA10;
protected byte AIDHUA11;
protected byte AIDHUA12;
protected byte AIDHUA13;
protected byte AIDHUA14;
protected byte AIDHUA15;
protected byte AIDHUA16;
protected byte AIDHUA2;
protected byte AIDHUA3;
protected byte AIDHUA4;
protected byte AIDHUA5;
protected byte AIDHUA6;
protected byte AIDHUA7;
protected byte AIDHUA8;
protected byte AIDHUA9;
protected byte ALLCH01;
protected byte ALLCH02;
protected byte ALLCH03;
protected byte ALLCH04;
protected byte ALLCH05;
protected byte ALLCH06;
protected byte ALLCH07;
protected byte ALLCH08;
protected byte ALLCH09;
protected byte ALLCH10;
protected boolean ALLCH11;
protected boolean ALLCH12;
protected boolean ALLCH13;
protected boolean ALLCH14;
protected boolean ALLCH15;
protected boolean ALLCH16;
protected byte ALTCAR1;
protected byte ALTCAR10;
protected byte ALTCAR11;
protected byte ALTCAR12;
protected byte ALTCAR2;
protected byte ALTCAR3;
protected byte ALTCAR4;
protected byte ALTCAR5;
protected byte ALTCAR6;
protected byte ALTCAR7;
protected byte ALTCAR8;
protected byte ALTCAR9;
protected byte ALTCAR96;
protected byte ALTCAR97;
protected byte ARCFREQ;
protected byte AREA;
protected byte ARTS1A1;
protected byte ARTS1A2;
protected byte ARTS1A3;
protected byte ARTS1A4;
protected byte ARTS1A5;
protected byte ARTS1A6;
protected byte ARTS1A7;
protected byte ARTS1A96;
protected byte ARTS1B10;
protected byte ARTS1B11;
protected byte ARTS1B12;
protected byte ARTS1B13;
protected byte ARTS1B14;
protected byte ARTS1B15;
protected byte ARTS1B9;
protected byte ARTS1B96;
protected byte ARTS1FREQ;
protected byte ARTS2A1;
protected byte ARTS2A2;
protected byte ARTS2A3;
protected byte ARTS2A4;
protected byte ARTS2A5;
protected byte ARTS2A6;
protected byte ARTS2A7;
protected byte ARTS2A96;
protected byte ARTS2B10;
protected byte ARTS2B11;
protected byte ARTS2B12;
protected byte ARTS2B13;
protected byte ARTS2B14;
protected byte ARTS2B15;
protected byte ARTS2B9;
protected byte ARTS2B96;
protected byte ARTS2FREQ;
protected double BASNSA;
protected double BASRATE;
protected byte BASREST;
protected byte BENCB;
protected byte BENCTC;
protected byte BENDIS1;
protected byte BENDIS10;
protected byte BENDIS11;
protected byte BENDIS2;
protected byte BENDIS3;
protected byte BENDIS4;
protected byte BENDIS5;
protected byte BENDIS6;
protected byte BENDIS7;
protected byte BENDIS8;
protected byte BENDIS9;
protected byte BENDIS96;
protected byte BENFAM1;
protected byte BENFAM2;
protected byte BENFAM3;
protected byte BENFAM4;
protected byte BENFAM5;
protected byte BENFAM96;
protected byte BENHOU1;
protected byte BENHOU2;
protected byte BENHOU3;
protected byte BENHOU4;
protected byte BENHOU96;
protected byte BENPEN1;
protected byte BENPEN2;
protected byte BENPEN3;
protected byte BENPEN4;
protected byte BENPEN5;
protected byte BENPEN6;
protected byte BENPEN7;
protected byte BENPEN8;
protected byte BENPEN96;
protected byte BENSTA1;
protected byte BENSTA2;
protected byte BENSTA3;
protected byte BENSTA4;
protected byte BENSTA5;
protected byte BENSTA6;
protected byte BENSTA7;
protected byte BENSTA8;
protected byte BENSTA96;
protected byte BENTAX1;
protected byte BENTAX2;
protected byte BENTAX3;
protected byte BENTAX4;
protected byte BENTAX5;
protected byte BENTAX96;
protected byte BENUNEMP1;
protected byte BENUNEMP2;
protected byte BENUNEMP96;
protected short BIRTHY;
protected byte BTYPE1;
protected byte BTYPE2;
protected byte BTYPE3;
protected byte BTYPE4;
protected byte BTYPE5;
protected byte BTYPE6;
protected byte BTYPE7;
protected byte BTYPE8;
protected byte BTYPE9;
protected byte BTYPE96;
protected byte BUNO_DV;
protected byte CARCLUB;
protected byte CARSHARE;
protected byte CCARE;
protected byte CCWORK;
protected short CH1BY4;
protected short CHARAM;
protected byte CHARFREQ;
protected byte CHARGV;
protected byte CHKCOA;
protected byte CHKDOB;
protected byte CHKSEX;
protected int CINDTIME;
protected byte CITZN1;
protected byte CITZN2;
protected byte CITZN3;
protected byte CIVICDUTY;
protected byte CJBATT;
protected byte CJOB;
protected byte CLUB;
protected byte CMLSTAT1;
protected byte CMLSTAT2;
protected byte CMLSTAT3;
protected byte COH1BM;
protected short COH1BY;
protected byte COH1EM;
protected short COH1EY;
protected byte COH1MR;
protected byte COHAB;
protected byte COHABN;
protected byte COHADV;
protected byte COLBENS1;
protected byte COLBENS2;
protected byte COLBENS3;
protected byte COMBIKE;
protected byte COMBUS;
protected byte COMMETRO;
protected byte COMOTHER;
protected byte COMTAXI;
protected byte COMTRAIN;
protected byte COMWALK;
protected byte CONTFT;
protected byte COUNTRY;
protected byte CSTAT;
protected byte CTADD1_CODE;
protected byte CTADD2_CODE;
protected byte CTCNTY_CODE;
protected byte CTEMAIL_CODE;
protected byte CTPCODE_CODE;
protected byte CTTEL1_CODE;
protected byte CTTEL2_CODE;
protected byte CTTOWN_CODE;
protected byte CURRJOB1;
protected boolean CURRJOB10;
protected byte CURRJOB2;
protected byte CURRJOB3;
protected byte CURRJOB4;
protected byte CURRJOB5;
protected byte CURRJOB6;
protected byte CURRJOB7;
protected byte CURRJOB8;
protected byte CURRJOB9;
protected byte CURRPART1;
protected byte CURRPART2;
protected byte CURRPART3;
protected byte CURRPART4;
protected byte CURRSTAT1;
protected byte CURRSTAT10;
protected byte CURRSTAT2;
protected byte CURRSTAT3;
protected byte CURRSTAT4;
protected byte CURRSTAT5;
protected byte CURRSTAT6;
protected byte CURRSTAT7;
protected byte CURRSTAT8;
protected boolean CURRSTAT9;
protected byte DAYWLK;
protected byte DEMORIENT;
protected boolean DEPCHL_DV;
protected byte DEPENTH1;
protected byte DEPENTH2;
protected byte DEPENTH3;
protected byte DEPENTH4;
protected byte DEPENTH5;
protected byte DEPENTH6;
protected byte DISDIF1;
protected byte DISDIF10;
protected byte DISDIF11;
protected byte DISDIF12;
protected byte DISDIF2;
protected byte DISDIF3;
protected byte DISDIF4;
protected byte DISDIF5;
protected byte DISDIF6;
protected byte DISDIF7;
protected byte DISDIF8;
protected byte DISDIF9;
protected byte DISDIF96;
protected byte DIVCHK1;
protected byte DIVCHK2;
protected byte DIVCHK3;
protected byte DIVFIN1;
protected byte DIVFIN2;
protected byte DIVFIN3;
protected short DOBY_DV;
protected byte DRIVE;
protected byte DVAGE;
protected byte DVM1;
protected byte DVM2;
protected byte DVM3;
protected short DVY41;
protected short DVY42;
protected byte DVY43;
protected byte EDASP;
protected short EDTYPE;
protected byte EDUCATION;
protected byte EMPCHK;
protected byte EMPLOY;
protected byte EMPSTENDD;
protected byte EMPSTENDM;
protected short EMPSTENDY4;
protected byte ENDMNTH1;
protected byte ENDMNTH2;
protected byte ENDMNTH3;
protected byte ENDMNTH4;
protected byte ENDMNTH5;
protected short EPROSH;
protected byte ETHCLOSE1;
protected byte ETHCLOSE10;
protected byte ETHCLOSE11;
protected byte ETHCLOSE2A;
protected byte ETHCLOSE2B;
protected byte ETHCLOSE3;
protected byte ETHCLOSE4A;
protected byte ETHCLOSE4B;
protected byte ETHCLOSE5;
protected byte ETHCLOSE6;
protected byte ETHCLOSE7;
protected byte ETHCLOSE8;
protected byte ETHCLOSE9;
protected byte ETHID10;
protected byte ETHID11;
protected byte ETHID12;
protected byte ETHID13;
protected byte ETHID14;
protected byte ETHID2;
protected byte ETHID3;
protected byte ETHID4A;
protected byte ETHID4B;
protected byte ETHID5;
protected byte ETHID6;
protected byte ETHID7;
protected byte ETHID8;
protected byte ETHID9;
protected byte ETHN_DV;
protected byte EVENT1;
protected byte EVENT1S;
protected byte EVENT2;
protected byte EVENT2S;
protected byte EVENT3;
protected byte EVENT3S;
protected byte EVENT4;
protected byte EVENT4S;
protected byte EXTNSA;
protected double EXTRATE;
protected byte EXTREST;
protected byte FAMILY;
protected byte FATHER;
protected byte FEDLIK;
protected byte FEDNT;
protected byte FENOW;
protected byte FF_BENTYPE01;
protected byte FF_BENTYPE02;
protected byte FF_BENTYPE03;
protected byte FF_BENTYPE04;
protected byte FF_BENTYPE05;
protected byte FF_BENTYPE06;
protected byte FF_BENTYPE07;
protected byte FF_BENTYPE08;
protected byte FF_BENTYPE09;
protected byte FF_BENTYPE10;
protected byte FF_BENTYPE11;
protected byte FF_BENTYPE12;
protected byte FF_BENTYPE13;
protected byte FF_BENTYPE14;
protected byte FF_BENTYPE15;
protected byte FF_BENTYPE16;
protected byte FF_BENTYPE17;
protected byte FF_BENTYPE18;
protected byte FF_BENTYPE19;
protected byte FF_BENTYPE20;
protected byte FF_BENTYPE21;
protected byte FF_BENTYPE22;
protected byte FF_BENTYPE23;
protected byte FF_BENTYPE24;
protected byte FF_BENTYPE25;
protected byte FF_BENTYPE26;
protected byte FF_BENTYPE27;
protected byte FF_BENTYPE28;
protected byte FF_BENTYPE29;
protected byte FF_BENTYPE30;
protected byte FF_BENTYPE31;
protected byte FF_BENTYPE32;
protected byte FF_BENTYPE33;
protected byte FF_BENTYPE34;
protected byte FF_BENTYPE35;
protected byte FF_BENTYPE36;
protected byte FF_BENTYPE37;
protected byte FF_BENTYPE38;
protected byte FF_EMPLW;
protected byte FF_EVERINT;
protected byte FF_IVLOLW;
protected byte FF_JBMNGR;
protected byte FF_JBSEMP;
protected byte FF_JBSIZE;
protected byte FF_JBSTAT;
protected byte FF_OPRLG;
protected byte FF_OPRLG0;
protected byte FF_OPRLG0NI;
protected byte FF_TEL;
protected byte FF_UKBORN;
protected short FF_YR2UK4;
protected double FIBENOTHR_DV;
protected double FIBENOTHR_IF;
protected byte FIBENOTHR_TC;
protected double FIMNGRS_IF;
protected byte FIMNGRS_TC;
protected double FIMNINVNET_DV;
protected double FIMNLABGRS_IF;
protected byte FIMNLABGRS_TC;
protected double FIMNLABNET_DV;
protected byte FIMNLABNET_TC;
protected double FIMNMISC_DV;
protected double FIMNNET_DV;
protected double FIMNPEN_DV;
protected double FIMNPRBEN_DV;
protected double FIMNSBEN_DV;
protected byte FINFUT;
protected byte FIYRDB1;
protected byte FIYRDB2;
protected byte FIYRDB3;
protected byte FIYRDB4;
protected byte FIYRDB5;
protected byte FIYRDB6;
protected int FIYRDIA;
protected double FIYRINVINC_DV;
protected byte FIYRINVINC_IF;
protected byte FIYRINVINC_TC;
protected int FNPID;
protected byte FNPNO;
protected int FNSPID;
protected byte FNSPNO;
protected byte FOOD1;
protected byte FOOD2;
protected byte FOOD3;
protected byte FOOD4;
protected byte FOOD5;
protected byte FOOD6;
protected byte FOOD7;
protected byte FRUVEGE;
protected byte FT2ENDM1;
protected byte FT2ENDM2;
protected short FT2ENDY41;
protected short FT2ENDY42;
protected byte FTEDANY;
protected byte FTEDEND1;
protected byte FTEDEND2;
protected byte FTEDMOR1;
protected byte FTEDMOR2;
protected byte FTEDSTARTM1;
protected byte FTEDSTARTM2;
protected short FTEDSTARTY41;
protected short FTEDSTARTY42;
protected byte FTENDM;
protected short FTENDY4;
protected byte FTQUALS;
protected short FUTRA;
protected short FUTRB;
protected short FUTRC;
protected short FUTRD;
protected short FUTRE;
protected short FUTRF;
protected short FUTRG;
protected short FUTRH;
protected short FUTRI;
protected short FUTRJ;
protected short FUTRK;
protected short FUTRL;
protected byte GIVECOA;
protected int GRFPID;
protected byte GRFPNO;
protected int GRMPID;
protected byte GRMPNO;
protected byte GRPBFTS;
protected byte HCONDN1;
protected byte HCONDN10;
protected byte HCONDN11;
protected byte HCONDN12;
protected byte HCONDN13;
protected byte HCONDN14;
protected byte HCONDN15;
protected byte HCONDN16;
protected byte HCONDN17;
protected byte HCONDN2;
protected byte HCONDN3;
protected byte HCONDN4;
protected byte HCONDN5;
protected byte HCONDN6;
protected byte HCONDN7;
protected byte HCONDN8;
protected byte HCONDN9;
protected byte HCONDN96;
protected byte HCONDNO1;
protected byte HCONDNO2;
protected byte HCONDNO3;
protected byte HCONDNO4;
protected byte HCONDNO5;
protected byte HCONDNO6;
protected byte HCONDNO7;
protected byte HCONDNO8;
protected byte HCONDNS1;
protected byte HCONDNS2;
protected byte HCONDNS3;
protected byte HCONDNS4;
protected byte HCONDNS5;
protected byte HCONDNS6;
protected byte HCONDNS7;
protected byte HCONDNS8;
protected byte HEALTH;
protected byte HERFREQ;
protected byte HERITAGE1;
protected byte HERITAGE2;
protected byte HERITAGE3;
protected byte HERITAGE4;
protected byte HERITAGE5;
protected byte HERITAGE6;
protected byte HERITAGE7;
protected byte HERITAGE8;
protected byte HERITAGE96;
protected byte HGADOPTF;
protected byte HGADOPTM;
protected byte HGPART;
protected byte HHRESP_DV;
protected byte HHTYPE_DV;
protected byte HOSPC1;
protected byte HOSPC2;
protected byte HOSPC3;
protected byte HOSPC4;
protected byte HOSPC5;
protected byte HOSPC6;
protected byte HOSPC7;
protected byte HOSPC8;
protected short HOSPDC1;
protected short HOSPDC2;
protected short HOSPDC3;
protected byte HOSPDC4;
protected byte HOSPDC5;
protected byte HOSPDC6;
protected byte HOSPDC7;
protected byte HOSPDC8;
protected byte HOUSING;
protected short HOWLNG;
protected int HRPID;
protected byte HRPNO;
protected byte HUBOSS;
protected short HUBUYS;
protected byte HUDIY;
protected short HUFRYS;
protected short HUIRON;
protected short HUMOPS;
protected byte HUPOTS;
protected short HUSITS;
protected byte IENDDATMM;
protected byte IENDDATSS;
protected double IND5MUS_LW;
protected double INDIN01_LW;
protected double INDIN91_LW;
protected double INDINBH_XW;
protected double INDINUS_LW;
protected double INDINUS_XW;
protected double INDINUXW;
protected byte INDMODE;
protected double INDPXBH_XW;
protected double INDPXUS_LW;
protected double INDPXUS_XW;
protected double INDPXUXW;
protected double INDSCBH_XW;
protected double INDSCUS_LW;
protected double INDSCUS_XW;
protected double INDSCUXW;
protected byte INTDATD_DV;
protected byte INTDATM_DV;
protected short INTDATY_DV;
protected byte INVITRO1;
protected byte INVITRO2;
protected byte INVITRO3;
protected byte INVITRO4;
protected byte INVITRO5;
protected byte IOUTCOME;
protected byte ISTRTDATMM;
protected byte ISTRTDATSS;
protected short ISTRTDATY;
protected byte IVAFFCT11;
protected byte IVAFFCT12;
protected byte IVAFFCT13;
protected byte IVAFFCT14;
protected byte IVAFFCT15;
protected byte IVAFFCT17;
protected byte IVAFFCT21;
protected byte IVAFFCT22;
protected byte IVAFFCT23;
protected byte IVAFFCT27;
protected byte IVAFFCT30;
protected byte IVAFFCT97;
protected byte IVCOOP;
protected byte IVINFNCE;
protected byte IVINTLANG;
protected byte IVTRANS;
protected byte IVWHOINT;
protected byte J1BOSS;
protected byte J1MNGR;
protected byte J1NONE;
protected byte J1NSSEC5_DV;
protected byte J1SEMP;
protected short J1SOC00_CC;
protected short J1SOC10_CC;
protected byte J1SOC90_CC;
protected byte J2NSSEC5_DV;
protected int J2PAY;
protected double J2PAYNET_DV;
protected short J2SOC00_CC;
protected short J2SOC10_CC;
protected short J2SOC90_CC;
protected byte JBATT1;
protected boolean JBATT10;
protected byte JBATT2;
protected byte JBATT3;
protected byte JBATT4;
protected byte JBATT5;
protected byte JBATT6;
protected byte JBATT7;
protected byte JBATT8;
protected byte JBATT9;
protected byte JBENDD;
protected byte JBENDM;
protected byte JBENDREAS;
protected short JBENDY4;
protected byte JBES2000;
protected byte JBFLEX1;
protected byte JBFLEX2;
protected byte JBFLEX3;
protected byte JBFLEX4;
protected byte JBFLEX5;
protected byte JBFLEX6;
protected byte JBFLEX7;
protected byte JBFLEX8;
protected byte JBFLEX96;
protected byte JBFXINF;
protected byte JBFXUSE1;
protected byte JBFXUSE2;
protected byte JBFXUSE3;
protected byte JBFXUSE4;
protected byte JBFXUSE5;
protected byte JBFXUSE6;
protected byte JBFXUSE7;
protected byte JBFXUSE8;
protected byte JBFXUSE96;
protected byte JBIINDDV;
protected byte JBLKCHA;
protected byte JBLKCHB;
protected byte JBLKCHC;
protected byte JBLKCHD;
protected byte JBLKCHE;
protected byte JBMNGRCHK;
protected byte JBNSSEC3_DV;
protected byte JBNSSEC5_DV;
protected short JBNSSEC_DV;
protected byte JBOFFY;
protected short JBONUS;
protected short JBPEN;
protected short JBPENM;
protected short JBPENY4;
protected byte JBPERFP;
protected short JBRGSC_DV;
protected short JBRISE;
protected byte JBSAMR;
protected byte JBSAT;
protected byte JBSEC;
protected byte JBSECTPUB;
protected short JBSEG_DV;
protected byte JBSEMPCHK;
protected byte JBSIC07CHK;
protected byte JBSIC07_CC;
protected byte JBSIZECHK;
protected byte JBSOC00CHK;
protected short JBSOC00_CC;
protected byte JBSOCGR_DV;
protected byte JBTERM1;
protected byte JBTERM2;
protected byte JBXPCHA;
protected byte JBXPCHB;
protected byte JBXPCHC;
protected byte JBXPCHD;
protected byte JBXPCHE;
protected byte JLENDM;
protected byte JLES2000;
protected byte JLIINDDV;
protected byte JLNSSEC3_DV;
protected byte JLNSSEC5_DV;
protected short JLNSSEC_DV;
protected short JLRGSC_DV;
protected short JLSEG_DV;
protected byte JLSIC07_CC;
protected short JLSOC00_CC;
protected byte JOBHOURS1;
protected boolean JOBHOURS10;
protected byte JOBHOURS2;
protected byte JOBHOURS3;
protected byte JOBHOURS4;
protected byte JOBHOURS5;
protected byte JOBHOURS6;
protected byte JOBHOURS7;
protected byte JOBHOURS8;
protected byte JOBHOURS9;
protected byte JSPART;
protected int JSPAYU;
protected byte JSPAYW;
protected byte JSPRLS;
protected byte JSPRNI;
protected byte JSPRTX;
protected byte JSPYNI;
protected byte JSPYTX;
protected byte JSTYPEB;
protected byte JSWORKTRAV;
protected short JUBGN;
protected short JULK4X1;
protected short JULK4X2;
protected byte JULK4X3;
protected short JULK4X4;
protected short JULK4X5;
protected short JULK4X6;
protected byte JULK4X96;
protected byte JWBS1_DV;
protected byte JWBS2_DV;
protected byte KIDLANG;
protected byte LADOPT;
protected byte LASTMSTATCH1;
protected byte LASTMSTATCH2;
protected byte LASTMSTATCH3;
protected byte LCHMULTI1;
protected byte LCHMULTI2;
protected byte LCHMULTI3;
protected byte LCHMULTI4;
protected byte LCHMULTI5;
protected byte LCOHNPI;
protected double LENINDINTV;
protected byte LIBFREQ;
protected byte LIFTHH;
protected byte LIFTXHH;
protected byte LINGUA;
protected byte LIVESP;
protected boolean LIVESP_DV;
protected byte LIVEWITH;
protected byte LMAR1M;
protected short LMAR1Y;
protected byte LMCBM1;
protected byte LMCBM2;
protected byte LMCBM3;
protected byte LMCBM4;
protected short LMCBY41;
protected short LMCBY42;
protected short LMCBY43;
protected short LMCBY44;
protected byte LMSPM1;
protected byte LMSPM2;
protected byte LMSPM3;
protected byte LMSPM4;
protected short LMSPY41;
protected short LMSPY42;
protected short LMSPY43;
protected short LMSPY44;
protected byte LNADOPT;
protected byte LNPRNT;
protected byte LPRNT;
protected byte LVMTHP;
protected byte LVWHY;
protected short LVYRP;
protected byte LWWRONG;
protected byte MACOB;
protected byte MAEDQF;
protected byte MAJU;
protected byte MANSSEC5_DV;
protected byte MARSTAT;
protected short MASOC00_CC;
protected short MASOC10_CC;
protected byte MASOC90_CC;
protected byte MASTAT_DV;
protected byte MATLV;
protected byte MATLVENDD;
protected byte MATLVENDM;
protected short MATLVENDY4;
protected byte MATLVSTD;
protected byte MATLVSTM;
protected short MATLVSTY4;
protected byte MAYRUK;
protected byte MEMPLOY;
protected byte MLA1;
protected byte MLA2;
protected byte MLA3;
protected byte MLA96;
protected byte MLSTATCHK;
protected int MNPID;
protected byte MNPNO;
protected int MNSPID;
protected byte MNSPNO;
protected byte MOBUSE;
protected byte MONTH;
protected byte MOTCYC;
protected byte MOVDIR;
protected byte MOVEOTH_CODE;
protected byte MOVY11;
protected byte MOVY12;
protected byte MOVY13;
protected byte MOVY14;
protected byte MOVY15;
protected byte MOVY16;
protected byte MSTATCH1;
protected byte MSTATCH2;
protected byte MSTATCH3;
protected short MSTATSAM;
protected byte MSTATSAMN;
protected byte MUSFREQ;
protected byte MVEVER;
protected byte MVMNTH;
protected short MVYR;
protected byte NADOPTCH;
protected byte NAIDXHH;
protected byte NATCH01;
protected byte NATCH02;
protected byte NATCH03;
protected byte NATCH04;
protected byte NATCH05;
protected byte NATCH06;
protected byte NATCH07;
protected byte NATCH08;
protected byte NATCH09;
protected byte NATCH10;
protected byte NATCH11;
protected byte NATCH12;
protected boolean NATCH13;
protected boolean NATCH14;
protected boolean NATCH15;
protected boolean NATCH16;
protected byte NATID1;
protected byte NATID2;
protected byte NATID3;
protected byte NATID4;
protected byte NATID5;
protected byte NATID6;
protected byte NATID97;
protected byte NCH10TO15;
protected byte NCH14RESP;
protected byte NCH415RESP;
protected byte NCH5TO15;
protected byte NCHILD;
protected short NCHILD_DV;
protected byte NCHRESP;
protected byte NCHUND18RESP;
protected byte NCHUNDER16;
protected short NCIGS;
protected byte NDEPCHL_DV;
protected byte NETUSE;
protected byte NEWENTRANT;
protected byte NEWPER;
protected byte NEXT;
protected byte NEXTELSE1;
protected byte NEXTELSE10;
protected byte NEXTELSE2;
protected byte NEXTELSE3;
protected byte NEXTELSE4;
protected byte NEXTELSE5;
protected byte NEXTELSE6;
protected byte NEXTELSE7;
protected byte NEXTELSE8;
protected boolean NEXTELSE9;
protected byte NEXTJOB1;
protected boolean NEXTJOB10;
protected byte NEXTJOB2;
protected byte NEXTJOB3;
protected byte NEXTJOB4;
protected byte NEXTJOB5;
protected byte NEXTJOB6;
protected byte NEXTJOB7;
protected byte NEXTJOB8;
protected byte NEXTJOB9;
protected byte NEXTSTAT1;
protected byte NEXTSTAT10;
protected byte NEXTSTAT2;
protected byte NEXTSTAT3;
protected byte NEXTSTAT4;
protected byte NEXTSTAT5;
protected byte NEXTSTAT6;
protected byte NEXTSTAT7;
protected byte NEXTSTAT8;
protected byte NEXTSTAT9;
protected byte NFH01;
protected byte NFH02;
protected byte NFH03;
protected byte NFH04;
protected byte NFH05;
protected byte NFH06;
protected byte NFH07;
protected byte NFH08;
protected byte NFH09;
protected byte NFH10;
protected byte NFH11;
protected byte NFH12;
protected byte NFH13;
protected byte NFH14;
protected byte NFH15;
protected byte NFH16;
protected byte NFH17;
protected byte NFH18;
protected byte NFH19;
protected byte NFH20;
protected byte NFH21;
protected byte NFH22;
protected byte NFH23;
protected byte NFH24;
protected byte NFH25;
protected byte NFH26;
protected byte NFH27;
protected byte NFH28;
protected byte NFH29;
protected byte NFH30;
protected byte NFH31;
protected byte NFH32;
protected byte NFH33;
protected byte NFH34;
protected byte NFH35;
protected byte NFH36;
protected byte NFH37;
protected byte NFH38;
protected byte NGRP_DV;
protected byte NHIQUAL_DV;
protected byte NIACT;
protected byte NIREL;
protected byte NISERPS;
protected byte NMAR;
protected byte NMPSP_DV;
protected byte NNATCH;
protected byte NNEWBORN;
protected byte NNMPSP_DV;
protected byte NNSIDV;
protected byte NNSSIDV;
protected byte NOTEMPCHK;
protected byte NPENSIONER_DV;
protected byte NPNS_DV;
protected byte NPN_DV;
protected byte NQFHIGH_DV;
protected byte NUNMPSP_DV;
protected byte NXTJBENDD;
protected byte NXTJBENDM;
protected short NXTJBENDY4;
protected byte NXTJBES;
protected byte NXTJBHRS;
protected byte NXTST;
protected byte NXTSTELSE;
protected byte NXTSTENDD;
protected byte NXTSTENDM;
protected short NXTSTENDY4;
protected byte OCIMPA;
protected byte OCIMPB;
protected byte OCIMPE;
protected byte OCIMPF;
protected byte OCIMPI;
protected byte OCIMPK;
protected byte OCIMPL;
protected byte OPRLG;
protected byte OPRLG0;
protected byte OPRLG0NI;
protected byte OPRLG1;
protected byte ORIGADD;
protected byte OVTNSA;
protected byte OVTPAY;
protected double OVTRATE;
protected byte OVTREST;
protected byte PACOB;
protected byte PAEDQF;
protected byte PAJU;
protected byte PANSSEC5_DV;
protected short PASOC00_CC;
protected short PASOC10_CC;
protected byte PASOC90_CC;
protected byte PAYGWC;
protected double PAYG_DV;
protected byte PAYNWC;
protected byte PAYRUK;
protected byte PAYTYP;
protected byte PAYUWC;
protected double PAYU_DV;
protected byte PBNFT1;
protected byte PBNFT10;
protected byte PBNFT11;
protected byte PBNFT12;
protected byte PBNFT2;
protected byte PBNFT3;
protected byte PBNFT4;
protected byte PBNFT5;
protected byte PBNFT6;
protected byte PBNFT7;
protected byte PBNFT8;
protected byte PBNFT9;
protected byte PBNFT96;
protected byte PENMCN;
protected byte PENMEX;
protected double PENMPY;
protected byte PENMTP;
protected byte PENSIONER_DV;
protected byte PENSPB;
protected byte PERBFTS;
protected byte PERPOLINF;
protected int PID;
protected byte PJBPTFT;
protected byte PJSPTFT;
protected short PLNOWM;
protected short PLNOWY4;
protected int PN1PID;
protected byte PN1PNO;
protected byte PN1SEX;
protected int PN2PID;
protected byte PN2PNO;
protected byte PN2SEX;
protected int PNS1PID;
protected byte PNS1PNO;
protected byte PNS1SEX;
protected int PNS2PID;
protected byte PNS2PNO;
protected byte PNS2SEX;
protected byte POLCOST;
protected byte PPEN;
protected byte PPENT;
protected int PPID;
protected byte PPPEX;
protected byte PPPEXM;
protected int PPRAM;
protected byte PPRAMPC;
protected byte PPREG;
protected byte PPSEX;
protected short PPYRS;
protected byte PREARN;
protected byte PREARNA;
protected byte PREARNW;
protected byte PREASON;
protected byte PREG;
protected byte PREGDRINK1;
protected byte PREGDRINK2;
protected boolean PREGDRINK3;
protected boolean PREGDRINK4;
protected byte PREGDRINK5;
protected byte PREGEND1;
protected byte PREGEND2;
protected byte PREGEND3;
protected byte PREGEND4;
protected byte PREGEND5;
protected byte PREGFERT1;
protected byte PREGFERT2;
protected byte PREGFERT3;
protected byte PREGFERT4;
protected byte PREGFERT5;
protected byte PREGM1;
protected byte PREGM2;
protected byte PREGM3;
protected byte PREGM4;
protected byte PREGM5;
protected byte PREGOUT1;
protected byte PREGOUT2;
protected byte PREGOUT3;
protected byte PREGOUT4;
protected byte PREGOUT5;
protected byte PREGSMK11;
protected byte PREGSMK12;
protected byte PREGSMK13;
protected byte PREGSMK14;
protected byte PREGSMK15;
protected byte PREGSMK21;
protected byte PREGSMK22;
protected byte PREGSMK23;
protected byte PREGSMK24;
protected byte PREGSMK25;
protected byte PREGSMK31;
protected byte PREGSMK32;
protected byte PREGSMK33;
protected byte PREGSMK34;
protected byte PREGSMK35;
protected byte PREGSMOKE1;
protected byte PREGSMOKE2;
protected byte PREGSMOKE3;
protected byte PREGSMOKE4;
protected byte PREGSMOKE5;
protected short PREGY41;
protected short PREGY42;
protected short PREGY43;
protected short PREGY44;
protected byte PREGY45;
protected byte PREL;
protected byte PRFITB;
protected byte PRFITBA;
protected byte PRFITBW;
protected byte PRIDE10;
protected byte PRIDE11;
protected byte PRIDE12;
protected byte PRIDE13;
protected byte PRIDE14;
protected byte PRIDE2;
protected byte PRIDE4A;
protected byte PRIDE4B;
protected byte PRIDE5;
protected byte PRIDE6;
protected byte PRIDE7;
protected byte PRIDE8;
protected byte PRIDE9;
protected int PSU;
protected byte QFHIGH;
protected boolean QFHIGHFL_DV;
protected byte QFHIGH_DV;
protected byte QFVOC1;
protected byte QFVOC10;
protected byte QFVOC11;
protected byte QFVOC12;
protected byte QFVOC13;
protected byte QFVOC14;
protected byte QFVOC15;
protected byte QFVOC2;
protected byte QFVOC3;
protected byte QFVOC4;
protected byte QFVOC5;
protected byte QFVOC6;
protected byte QFVOC7;
protected byte QFVOC8;
protected byte QFVOC9;
protected byte QFVOC96;
protected byte QUALNEW1;
protected byte QUALNEW10;
protected byte QUALNEW11;
protected byte QUALNEW13;
protected byte QUALNEW15;
protected byte QUALNEW16;
protected byte QUALNEW17;
protected byte QUALNEW18;
protected byte QUALNEW19;
protected byte QUALNEW2;
protected byte QUALNEW20;
protected byte QUALNEW21;
protected byte QUALNEW22;
protected byte QUALNEW23;
protected byte QUALNEW24;
protected byte QUALNEW25;
protected byte QUALNEW26;
protected byte QUALNEW27;
protected byte QUALNEW28;
protected byte QUALNEW29;
protected byte QUALNEW3;
protected byte QUALNEW30;
protected byte QUALNEW31;
protected byte QUALNEW4;
protected byte QUALNEW5;
protected byte QUALNEW6;
protected byte QUALNEW7;
protected byte QUALNEW8;
protected byte QUALNEW9;
protected byte QUALOC;
protected byte RACEL;
protected short RACELO_CODE;
protected byte RACEL_DV;
protected byte REASEND1;
protected boolean REASEND10;
protected byte REASEND2;
protected byte REASEND3;
protected byte REASEND4;
protected byte REASEND5;
protected byte REASEND6;
protected byte REASEND7;
protected boolean REASEND8;
protected byte REASEND9;
protected byte RELUP;
protected byte REMAIL_CODE;
protected boolean RESPF16;
protected boolean RESPF16_DV;
protected boolean RESPM16;
protected boolean RESPM16_DV;
protected byte RETAMT;
protected byte RETCHK;
protected byte RETSUF;
protected byte RHLAND_CODE;
protected byte RPHMOCODE;
protected byte RPHWRK_CODE;
protected byte RTCON1;
protected byte RTCON2;
protected byte RTCON3;
protected byte RTCON4;
protected byte RTEXPJB;
protected byte RTFND1;
protected byte RTFND10;
protected byte RTFND2;
protected byte RTFND3;
protected byte RTFND4;
protected byte RTFND5;
protected byte RTFND6;
protected byte RTFND7;
protected byte RTFND8;
protected byte RTFND9;
protected byte RTFND96;
protected byte RTPRO1;
protected byte RTPRO2;
protected byte RTPRO3;
protected byte RTPRO4;
protected byte RTPRO5;
protected byte RTPRO6;
protected byte SAMEJOB;
protected short SAMPST;
protected short SAVE;
protected int SAVED;
protected byte SAVLT;
protected byte SAVREG;
protected byte SCAGE1DRINK;
protected byte SCALCL7D;
protected byte SCANYELSETXT;
protected byte SCDEM2MANY;
protected short SCDOBY4;
protected byte SCEVERDRNK;
protected byte SCFALCDRNK;
protected byte SCFANNOY;
protected byte SCFCRITIC;
protected byte SCFLAG_DV;
protected byte SCFLETDWN;
protected byte SCFOPENUP;
protected byte SCFRELY;
protected byte SCFRENDANY;
protected byte SCFUNDSTND;
protected byte SCHLLOC;
protected byte SCHMCONT;
protected byte SCHOK;
protected byte SCLFSAT1;
protected byte SCLFSAT2;
protected byte SCLFSAT7;
protected byte SCLFSATO;
protected byte SCLOUTCONT;
protected byte SCMOLWP;
protected byte SCNALCL7D;
protected double SCNALCPINT;
protected double SCNALCPOPS;
protected double SCNALCSHOT;
protected double SCNALCWINE;
protected byte SCOPFAMA;
protected byte SCOPFAMB;
protected byte SCOPFAMD;
protected byte SCOPFAMF;
protected byte SCOPFAMH;
protected byte SCPANNOY;
protected byte SCPCRITIC;
protected byte SCPLETDWN;
protected byte SCPOPENUP;
protected byte SCPRELY;
protected byte SCPUNDSTND;
protected byte SCRANNOY;
protected byte SCRCRITIC;
protected byte SCRELANY;
protected byte SCRLETDWN;
protected byte SCROPENUP;
protected byte SCRRELY;
protected byte SCRUNDSTND;
protected byte SCSEX;
protected byte SCSF1;
protected byte SCSF2A;
protected byte SCSF2B;
protected byte SCSF3A;
protected byte SCSF3B;
protected byte SCSF4A;
protected byte SCSF4B;
protected byte SCSF5;
protected byte SCSF6A;
protected byte SCSF6B;
protected byte SCSF6C;
protected byte SCSF7;
protected byte SCSSUP1;
protected byte SCSSUPR2R;
protected byte SCTIMEMNUF;
protected byte SCWHORUAGE;
protected byte SCWHORUEDU;
protected byte SCWHORUFAM;
protected byte SCWHORUPOL;
protected byte SCWHORUPRO;
protected byte SCWHORURAC;
protected byte SCWHORUSEX;
protected byte SCWKVFAST;
protected double SEEARNGRS_DV;
protected byte SEEARNGRS_IF;
protected double SEEARNNET_DV;
protected byte SEX_DV;
protected byte SF1;
protected double SF12MCS_DV;
protected double SF12PCS_DV;
protected boolean SINGLE_DV;
protected byte SMAGBG;
protected byte SMCIGS;
protected byte SMEVER;
protected byte SMKMNTH11;
protected byte SMKMNTH12;
protected byte SMKMNTH13;
protected byte SMKMNTH14;
protected byte SMKMNTH15;
protected byte SMKMNTH21;
protected byte SMKMNTH22;
protected byte SMKMNTH23;
protected byte SMKMNTH24;
protected byte SMKMNTH25;
protected byte SMKMNTH31;
protected byte SMKMNTH32;
protected byte SMKMNTH33;
protected byte SMKMNTH34;
protected byte SMKMNTH35;
protected byte SMNCIGS;
protected byte SMNOW;
protected byte SPORTACT;
protected byte SPORTS11;
protected byte SPORTS110;
protected byte SPORTS111;
protected byte SPORTS112;
protected byte SPORTS113;
protected byte SPORTS114;
protected byte SPORTS12;
protected byte SPORTS13;
protected byte SPORTS14;
protected byte SPORTS15;
protected byte SPORTS16;
protected byte SPORTS17;
protected byte SPORTS18;
protected byte SPORTS19;
protected byte SPORTS196;
protected byte SPORTS216;
protected byte SPORTS217;
protected byte SPORTS218;
protected byte SPORTS219;
protected byte SPORTS220;
protected byte SPORTS221;
protected byte SPORTS222;
protected byte SPORTS223;
protected byte SPORTS224;
protected byte SPORTS225;
protected byte SPORTS226;
protected byte SPORTS227;
protected byte SPORTS228;
protected byte SPORTS229;
protected byte SPORTS230;
protected byte SPORTS231;
protected byte SPORTS296;
protected byte SPORTS31;
protected byte SPORTS32;
protected byte SPORTS33;
protected byte SPORTS34;
protected byte SPORTS35;
protected byte SPORTS36;
protected byte SPORTS37;
protected byte SPORTS38;
protected byte SPORTS39;
protected byte SPORTS396;
protected byte SPORTS3FREQ;
protected byte SPORTSFREQ;
protected byte SPPEN;
protected int SPPID;
protected byte SPPNO;
protected byte STATCM1;
protected byte STATCM2;
protected byte STATCM3;
protected short STATCY41;
protected short STATCY42;
protected short STATCY43;
protected byte STATENDD1;
protected boolean STATENDD10;
protected byte STATENDD2;
protected byte STATENDD3;
protected byte STATENDD4;
protected byte STATENDD5;
protected byte STATENDD6;
protected byte STATENDD7;
protected byte STATENDD8;
protected byte STATENDD9;
protected byte STATENDM1;
protected boolean STATENDM10;
protected byte STATENDM2;
protected byte STATENDM3;
protected byte STATENDM4;
protected byte STATENDM5;
protected byte STATENDM6;
protected byte STATENDM7;
protected byte STATENDM8;
protected byte STATENDM9;
protected short STATENDY41;
protected boolean STATENDY410;
protected short STATENDY42;
protected short STATENDY43;
protected short STATENDY44;
protected short STATENDY45;
protected short STATENDY46;
protected short STATENDY47;
protected short STATENDY48;
protected short STATENDY49;
protected byte STENDREAS;
protected short STRATA;
protected byte SUSP;
protected byte TRAINANY;
protected short TRAINDAYS1;
protected short TRAINDAYS2;
protected short TRAINDAYS3;
protected byte TRAINEND1;
protected byte TRAINEND2;
protected byte TRAINEND3;
protected byte TRAINHRS1;
protected byte TRAINHRS2;
protected byte TRAINHRS3;
protected byte TRAINN;
protected byte TRAINPURP11;
protected byte TRAINPURP12;
protected byte TRAINPURP13;
protected byte TRAINPURP21;
protected byte TRAINPURP22;
protected byte TRAINPURP23;
protected byte TRAINPURP31;
protected byte TRAINPURP32;
protected byte TRAINPURP33;
protected byte TRAINPURP41;
protected byte TRAINPURP42;
protected byte TRAINPURP43;
protected byte TRAINPURP51;
protected byte TRAINPURP52;
protected byte TRAINPURP53;
protected byte TRAINPURP61;
protected byte TRAINPURP62;
protected byte TRAINPURP63;
protected byte TRAINPURP71;
protected byte TRAINPURP72;
protected byte TRAINPURP73;
protected byte TRAINQUAL1;
protected byte TRAINQUAL2;
protected byte TRAINQUAL3;
protected byte TRQUAL1;
protected byte TRQUAL10;
protected byte TRQUAL11;
protected byte TRQUAL13;
protected byte TRQUAL15;
protected byte TRQUAL16;
protected byte TRQUAL17;
protected byte TRQUAL18;
protected byte TRQUAL19;
protected byte TRQUAL2;
protected byte TRQUAL20;
protected byte TRQUAL21;
protected byte TRQUAL22;
protected byte TRQUAL23;
protected byte TRQUAL24;
protected byte TRQUAL25;
protected byte TRQUAL26;
protected byte TRQUAL27;
protected byte TRQUAL28;
protected byte TRQUAL29;
protected byte TRQUAL3;
protected byte TRQUAL30;
protected byte TRQUAL31;
protected byte TRQUAL4;
protected byte TRQUAL5;
protected byte TRQUAL6;
protected byte TRQUAL7;
protected byte TRQUAL8;
protected byte TRQUAL9;
protected byte TRWHO1;
protected byte TRWHO2;
protected byte TRWHO3;
protected short TUIN1;
protected short TUJBPL;
protected byte TWKCAR;
protected byte TWKCARY1;
protected byte TWKCARY10;
protected byte TWKCARY11;
protected byte TWKCARY12;
protected byte TWKCARY13;
protected byte TWKCARY14;
protected byte TWKCARY2;
protected byte TWKCARY3;
protected byte TWKCARY4;
protected byte TWKCARY5;
protected byte TWKCARY6;
protected byte TWKCARY7;
protected byte TWKCARY8;
protected byte TWKCARY9;
protected byte TWKCARY97;
protected byte TWKCARYM;
protected byte TWKDIFF1;
protected byte TWKDIFF2;
protected byte TWKDIFF3;
protected byte TWKDIFF4;
protected byte TWKDIFF5;
protected byte TWKDIFF6;
protected byte TWKDIFF7;
protected byte TWKDIFF8;
protected byte TWKDIFF97;
protected byte TWKDIFFM;
protected byte UKBORN;
protected byte UNDQUS;
protected byte URBAN_DV;
protected byte USBREAD;
protected byte USDAIRY;
protected byte VOLFREQ;
protected short VOLHRS;
protected byte VOLUN;
protected short VOTE1;
protected short VOTE2;
protected short VOTE3;
protected short VOTE4;
protected short VOTE5;
protected short VOTE6;
protected byte VOTE7;
protected byte VOTE8;
protected byte VOTEINTENT;
protected byte VOTENORM;
protected byte VOUCHER;
protected byte WALKPACE;
protected byte WKAUT1;
protected byte WKAUT2;
protected byte WKAUT3;
protected byte WKAUT4;
protected byte WKAUT5;
protected byte WKENDS;
protected byte WKFRUIT;
protected byte WKHOME;
protected byte WKPHYS;
protected byte WKPLSAM;
protected short WKTIME;
protected byte WKVEGE;
protected byte WLK10M;
protected byte WLK30MIN;
protected short WORKDIS;
protected byte WORKTRAV;
protected byte XPMOVE;
protected byte XTRA5MINOSM_DV;
protected byte XTRA5MIN_DV;
protected final void initACC1TO161(String s) {
if (!s.trim().isEmpty()) {
ACC1TO161 = Byte.parseByte(s);
} else {
ACC1TO161 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO1610(String s) {
if (!s.trim().isEmpty()) {
ACC1TO1610 = Byte.parseByte(s);
} else {
ACC1TO1610 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO1611(String s) {
if (!s.trim().isEmpty()) {
ACC1TO1611 = Byte.parseByte(s);
} else {
ACC1TO1611 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO1612(String s) {
if (!s.trim().isEmpty()) {
ACC1TO1612 = Byte.parseByte(s);
} else {
ACC1TO1612 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO1613(String s) {
if (!s.trim().isEmpty()) {
ACC1TO1613 = Byte.parseByte(s);
} else {
ACC1TO1613 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO1614(String s) {
if (!s.trim().isEmpty()) {
ACC1TO1614 = Byte.parseByte(s);
} else {
ACC1TO1614 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO162(String s) {
if (!s.trim().isEmpty()) {
ACC1TO162 = Byte.parseByte(s);
} else {
ACC1TO162 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO163(String s) {
if (!s.trim().isEmpty()) {
ACC1TO163 = Byte.parseByte(s);
} else {
ACC1TO163 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO164(String s) {
if (!s.trim().isEmpty()) {
ACC1TO164 = Byte.parseByte(s);
} else {
ACC1TO164 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO165(String s) {
if (!s.trim().isEmpty()) {
ACC1TO165 = Byte.parseByte(s);
} else {
ACC1TO165 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO166(String s) {
if (!s.trim().isEmpty()) {
ACC1TO166 = Byte.parseByte(s);
} else {
ACC1TO166 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO167(String s) {
if (!s.trim().isEmpty()) {
ACC1TO167 = Byte.parseByte(s);
} else {
ACC1TO167 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO168(String s) {
if (!s.trim().isEmpty()) {
ACC1TO168 = Byte.parseByte(s);
} else {
ACC1TO168 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO169(String s) {
if (!s.trim().isEmpty()) {
ACC1TO169 = Byte.parseByte(s);
} else {
ACC1TO169 = Byte.MIN_VALUE;
}
}

protected final void initACC1TO1697(String s) {
if (!s.trim().isEmpty()) {
ACC1TO1697 = Byte.parseByte(s);
} else {
ACC1TO1697 = Byte.MIN_VALUE;
}
}

protected final void initACCESS(String s) {
if (!s.trim().isEmpty()) {
ACCESS = Byte.parseByte(s);
} else {
ACCESS = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH01(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH01 = Byte.parseByte(s);
} else {
ADOPTCH01 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH02(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH02 = Byte.parseByte(s);
} else {
ADOPTCH02 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH03(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH03 = Byte.parseByte(s);
} else {
ADOPTCH03 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH04(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH04 = Byte.parseByte(s);
} else {
ADOPTCH04 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH05(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH05 = Byte.parseByte(s);
} else {
ADOPTCH05 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH06(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH06 = Byte.parseByte(s);
} else {
ADOPTCH06 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH07 = false;
} else {
ADOPTCH07 = true;
}
}
}

protected final void initADOPTCH08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH08 = false;
} else {
ADOPTCH08 = true;
}
}
}

protected final void initADOPTCH09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH09 = false;
} else {
ADOPTCH09 = true;
}
}
}

protected final void initADOPTCH10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH10 = false;
} else {
ADOPTCH10 = true;
}
}
}

protected final void initADOPTCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH11 = false;
} else {
ADOPTCH11 = true;
}
}
}

protected final void initADOPTCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH12 = false;
} else {
ADOPTCH12 = true;
}
}
}

protected final void initADOPTCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH13 = false;
} else {
ADOPTCH13 = true;
}
}
}

protected final void initADOPTCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH14 = false;
} else {
ADOPTCH14 = true;
}
}
}

protected final void initADOPTCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH15 = false;
} else {
ADOPTCH15 = true;
}
}
}

protected final void initADOPTCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH16 = false;
} else {
ADOPTCH16 = true;
}
}
}

protected final void initADRESP17(String s) {
if (!s.trim().isEmpty()) {
ADRESP17 = Byte.parseByte(s);
} else {
ADRESP17 = Byte.MIN_VALUE;
}
}

protected final void initADSTATUS(String s) {
if (!s.trim().isEmpty()) {
ADSTATUS = Byte.parseByte(s);
} else {
ADSTATUS = Byte.MIN_VALUE;
}
}

protected final void initADVVOUCHER(String s) {
if (!s.trim().isEmpty()) {
ADVVOUCHER = Byte.parseByte(s);
} else {
ADVVOUCHER = Byte.MIN_VALUE;
}
}

protected final void initAGEGR10_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR10_DV = Byte.parseByte(s);
} else {
AGEGR10_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR13_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR13_DV = Byte.parseByte(s);
} else {
AGEGR13_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR5_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR5_DV = Byte.parseByte(s);
} else {
AGEGR5_DV = Byte.MIN_VALUE;
}
}

protected final void initAGERET(String s) {
if (!s.trim().isEmpty()) {
AGERET = Byte.parseByte(s);
} else {
AGERET = Byte.MIN_VALUE;
}
}

protected final void initAGE_DV(String s) {
if (!s.trim().isEmpty()) {
AGE_DV = Short.parseShort(s);
} else {
AGE_DV = Short.MIN_VALUE;
}
}

protected final void initAGLQUIT(String s) {
if (!s.trim().isEmpty()) {
AGLQUIT = Byte.parseByte(s);
} else {
AGLQUIT = Byte.MIN_VALUE;
}
}

protected final void initAIDEFT(String s) {
if (!s.trim().isEmpty()) {
AIDEFT = Byte.parseByte(s);
} else {
AIDEFT = Byte.MIN_VALUE;
}
}

protected final void initAIDHU1(String s) {
if (!s.trim().isEmpty()) {
AIDHU1 = Short.parseShort(s);
} else {
AIDHU1 = Short.MIN_VALUE;
}
}

protected final void initAIDHU2(String s) {
if (!s.trim().isEmpty()) {
AIDHU2 = Short.parseShort(s);
} else {
AIDHU2 = Short.MIN_VALUE;
}
}

protected final void initAIDHUA1(String s) {
if (!s.trim().isEmpty()) {
AIDHUA1 = Byte.parseByte(s);
} else {
AIDHUA1 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA10(String s) {
if (!s.trim().isEmpty()) {
AIDHUA10 = Byte.parseByte(s);
} else {
AIDHUA10 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA11(String s) {
if (!s.trim().isEmpty()) {
AIDHUA11 = Byte.parseByte(s);
} else {
AIDHUA11 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA12(String s) {
if (!s.trim().isEmpty()) {
AIDHUA12 = Byte.parseByte(s);
} else {
AIDHUA12 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA13(String s) {
if (!s.trim().isEmpty()) {
AIDHUA13 = Byte.parseByte(s);
} else {
AIDHUA13 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA14(String s) {
if (!s.trim().isEmpty()) {
AIDHUA14 = Byte.parseByte(s);
} else {
AIDHUA14 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA15(String s) {
if (!s.trim().isEmpty()) {
AIDHUA15 = Byte.parseByte(s);
} else {
AIDHUA15 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA16(String s) {
if (!s.trim().isEmpty()) {
AIDHUA16 = Byte.parseByte(s);
} else {
AIDHUA16 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA2(String s) {
if (!s.trim().isEmpty()) {
AIDHUA2 = Byte.parseByte(s);
} else {
AIDHUA2 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA3(String s) {
if (!s.trim().isEmpty()) {
AIDHUA3 = Byte.parseByte(s);
} else {
AIDHUA3 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA4(String s) {
if (!s.trim().isEmpty()) {
AIDHUA4 = Byte.parseByte(s);
} else {
AIDHUA4 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA5(String s) {
if (!s.trim().isEmpty()) {
AIDHUA5 = Byte.parseByte(s);
} else {
AIDHUA5 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA6(String s) {
if (!s.trim().isEmpty()) {
AIDHUA6 = Byte.parseByte(s);
} else {
AIDHUA6 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA7(String s) {
if (!s.trim().isEmpty()) {
AIDHUA7 = Byte.parseByte(s);
} else {
AIDHUA7 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA8(String s) {
if (!s.trim().isEmpty()) {
AIDHUA8 = Byte.parseByte(s);
} else {
AIDHUA8 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA9(String s) {
if (!s.trim().isEmpty()) {
AIDHUA9 = Byte.parseByte(s);
} else {
AIDHUA9 = Byte.MIN_VALUE;
}
}

protected final void initALLCH01(String s) {
if (!s.trim().isEmpty()) {
ALLCH01 = Byte.parseByte(s);
} else {
ALLCH01 = Byte.MIN_VALUE;
}
}

protected final void initALLCH02(String s) {
if (!s.trim().isEmpty()) {
ALLCH02 = Byte.parseByte(s);
} else {
ALLCH02 = Byte.MIN_VALUE;
}
}

protected final void initALLCH03(String s) {
if (!s.trim().isEmpty()) {
ALLCH03 = Byte.parseByte(s);
} else {
ALLCH03 = Byte.MIN_VALUE;
}
}

protected final void initALLCH04(String s) {
if (!s.trim().isEmpty()) {
ALLCH04 = Byte.parseByte(s);
} else {
ALLCH04 = Byte.MIN_VALUE;
}
}

protected final void initALLCH05(String s) {
if (!s.trim().isEmpty()) {
ALLCH05 = Byte.parseByte(s);
} else {
ALLCH05 = Byte.MIN_VALUE;
}
}

protected final void initALLCH06(String s) {
if (!s.trim().isEmpty()) {
ALLCH06 = Byte.parseByte(s);
} else {
ALLCH06 = Byte.MIN_VALUE;
}
}

protected final void initALLCH07(String s) {
if (!s.trim().isEmpty()) {
ALLCH07 = Byte.parseByte(s);
} else {
ALLCH07 = Byte.MIN_VALUE;
}
}

protected final void initALLCH08(String s) {
if (!s.trim().isEmpty()) {
ALLCH08 = Byte.parseByte(s);
} else {
ALLCH08 = Byte.MIN_VALUE;
}
}

protected final void initALLCH09(String s) {
if (!s.trim().isEmpty()) {
ALLCH09 = Byte.parseByte(s);
} else {
ALLCH09 = Byte.MIN_VALUE;
}
}

protected final void initALLCH10(String s) {
if (!s.trim().isEmpty()) {
ALLCH10 = Byte.parseByte(s);
} else {
ALLCH10 = Byte.MIN_VALUE;
}
}

protected final void initALLCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH11 = false;
} else {
ALLCH11 = true;
}
}
}

protected final void initALLCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH12 = false;
} else {
ALLCH12 = true;
}
}
}

protected final void initALLCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH13 = false;
} else {
ALLCH13 = true;
}
}
}

protected final void initALLCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH14 = false;
} else {
ALLCH14 = true;
}
}
}

protected final void initALLCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH15 = false;
} else {
ALLCH15 = true;
}
}
}

protected final void initALLCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH16 = false;
} else {
ALLCH16 = true;
}
}
}

protected final void initALTCAR1(String s) {
if (!s.trim().isEmpty()) {
ALTCAR1 = Byte.parseByte(s);
} else {
ALTCAR1 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR10(String s) {
if (!s.trim().isEmpty()) {
ALTCAR10 = Byte.parseByte(s);
} else {
ALTCAR10 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR11(String s) {
if (!s.trim().isEmpty()) {
ALTCAR11 = Byte.parseByte(s);
} else {
ALTCAR11 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR12(String s) {
if (!s.trim().isEmpty()) {
ALTCAR12 = Byte.parseByte(s);
} else {
ALTCAR12 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR2(String s) {
if (!s.trim().isEmpty()) {
ALTCAR2 = Byte.parseByte(s);
} else {
ALTCAR2 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR3(String s) {
if (!s.trim().isEmpty()) {
ALTCAR3 = Byte.parseByte(s);
} else {
ALTCAR3 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR4(String s) {
if (!s.trim().isEmpty()) {
ALTCAR4 = Byte.parseByte(s);
} else {
ALTCAR4 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR5(String s) {
if (!s.trim().isEmpty()) {
ALTCAR5 = Byte.parseByte(s);
} else {
ALTCAR5 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR6(String s) {
if (!s.trim().isEmpty()) {
ALTCAR6 = Byte.parseByte(s);
} else {
ALTCAR6 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR7(String s) {
if (!s.trim().isEmpty()) {
ALTCAR7 = Byte.parseByte(s);
} else {
ALTCAR7 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR8(String s) {
if (!s.trim().isEmpty()) {
ALTCAR8 = Byte.parseByte(s);
} else {
ALTCAR8 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR9(String s) {
if (!s.trim().isEmpty()) {
ALTCAR9 = Byte.parseByte(s);
} else {
ALTCAR9 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR96(String s) {
if (!s.trim().isEmpty()) {
ALTCAR96 = Byte.parseByte(s);
} else {
ALTCAR96 = Byte.MIN_VALUE;
}
}

protected final void initALTCAR97(String s) {
if (!s.trim().isEmpty()) {
ALTCAR97 = Byte.parseByte(s);
} else {
ALTCAR97 = Byte.MIN_VALUE;
}
}

protected final void initARCFREQ(String s) {
if (!s.trim().isEmpty()) {
ARCFREQ = Byte.parseByte(s);
} else {
ARCFREQ = Byte.MIN_VALUE;
}
}

protected final void initAREA(String s) {
if (!s.trim().isEmpty()) {
AREA = Byte.parseByte(s);
} else {
AREA = Byte.MIN_VALUE;
}
}

protected final void initARTS1A1(String s) {
if (!s.trim().isEmpty()) {
ARTS1A1 = Byte.parseByte(s);
} else {
ARTS1A1 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A2(String s) {
if (!s.trim().isEmpty()) {
ARTS1A2 = Byte.parseByte(s);
} else {
ARTS1A2 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A3(String s) {
if (!s.trim().isEmpty()) {
ARTS1A3 = Byte.parseByte(s);
} else {
ARTS1A3 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A4(String s) {
if (!s.trim().isEmpty()) {
ARTS1A4 = Byte.parseByte(s);
} else {
ARTS1A4 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A5(String s) {
if (!s.trim().isEmpty()) {
ARTS1A5 = Byte.parseByte(s);
} else {
ARTS1A5 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A6(String s) {
if (!s.trim().isEmpty()) {
ARTS1A6 = Byte.parseByte(s);
} else {
ARTS1A6 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A7(String s) {
if (!s.trim().isEmpty()) {
ARTS1A7 = Byte.parseByte(s);
} else {
ARTS1A7 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A96(String s) {
if (!s.trim().isEmpty()) {
ARTS1A96 = Byte.parseByte(s);
} else {
ARTS1A96 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B10(String s) {
if (!s.trim().isEmpty()) {
ARTS1B10 = Byte.parseByte(s);
} else {
ARTS1B10 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B11(String s) {
if (!s.trim().isEmpty()) {
ARTS1B11 = Byte.parseByte(s);
} else {
ARTS1B11 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B12(String s) {
if (!s.trim().isEmpty()) {
ARTS1B12 = Byte.parseByte(s);
} else {
ARTS1B12 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B13(String s) {
if (!s.trim().isEmpty()) {
ARTS1B13 = Byte.parseByte(s);
} else {
ARTS1B13 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B14(String s) {
if (!s.trim().isEmpty()) {
ARTS1B14 = Byte.parseByte(s);
} else {
ARTS1B14 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B15(String s) {
if (!s.trim().isEmpty()) {
ARTS1B15 = Byte.parseByte(s);
} else {
ARTS1B15 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B9(String s) {
if (!s.trim().isEmpty()) {
ARTS1B9 = Byte.parseByte(s);
} else {
ARTS1B9 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B96(String s) {
if (!s.trim().isEmpty()) {
ARTS1B96 = Byte.parseByte(s);
} else {
ARTS1B96 = Byte.MIN_VALUE;
}
}

protected final void initARTS1FREQ(String s) {
if (!s.trim().isEmpty()) {
ARTS1FREQ = Byte.parseByte(s);
} else {
ARTS1FREQ = Byte.MIN_VALUE;
}
}

protected final void initARTS2A1(String s) {
if (!s.trim().isEmpty()) {
ARTS2A1 = Byte.parseByte(s);
} else {
ARTS2A1 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A2(String s) {
if (!s.trim().isEmpty()) {
ARTS2A2 = Byte.parseByte(s);
} else {
ARTS2A2 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A3(String s) {
if (!s.trim().isEmpty()) {
ARTS2A3 = Byte.parseByte(s);
} else {
ARTS2A3 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A4(String s) {
if (!s.trim().isEmpty()) {
ARTS2A4 = Byte.parseByte(s);
} else {
ARTS2A4 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A5(String s) {
if (!s.trim().isEmpty()) {
ARTS2A5 = Byte.parseByte(s);
} else {
ARTS2A5 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A6(String s) {
if (!s.trim().isEmpty()) {
ARTS2A6 = Byte.parseByte(s);
} else {
ARTS2A6 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A7(String s) {
if (!s.trim().isEmpty()) {
ARTS2A7 = Byte.parseByte(s);
} else {
ARTS2A7 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A96(String s) {
if (!s.trim().isEmpty()) {
ARTS2A96 = Byte.parseByte(s);
} else {
ARTS2A96 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B10(String s) {
if (!s.trim().isEmpty()) {
ARTS2B10 = Byte.parseByte(s);
} else {
ARTS2B10 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B11(String s) {
if (!s.trim().isEmpty()) {
ARTS2B11 = Byte.parseByte(s);
} else {
ARTS2B11 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B12(String s) {
if (!s.trim().isEmpty()) {
ARTS2B12 = Byte.parseByte(s);
} else {
ARTS2B12 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B13(String s) {
if (!s.trim().isEmpty()) {
ARTS2B13 = Byte.parseByte(s);
} else {
ARTS2B13 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B14(String s) {
if (!s.trim().isEmpty()) {
ARTS2B14 = Byte.parseByte(s);
} else {
ARTS2B14 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B15(String s) {
if (!s.trim().isEmpty()) {
ARTS2B15 = Byte.parseByte(s);
} else {
ARTS2B15 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B9(String s) {
if (!s.trim().isEmpty()) {
ARTS2B9 = Byte.parseByte(s);
} else {
ARTS2B9 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B96(String s) {
if (!s.trim().isEmpty()) {
ARTS2B96 = Byte.parseByte(s);
} else {
ARTS2B96 = Byte.MIN_VALUE;
}
}

protected final void initARTS2FREQ(String s) {
if (!s.trim().isEmpty()) {
ARTS2FREQ = Byte.parseByte(s);
} else {
ARTS2FREQ = Byte.MIN_VALUE;
}
}

protected final void initBASNSA(String s) {
if (!s.trim().isEmpty()) {
BASNSA = Double.parseDouble(s);
} else {
BASNSA = Double.NaN;
}
}

protected final void initBASRATE(String s) {
if (!s.trim().isEmpty()) {
BASRATE = Double.parseDouble(s);
} else {
BASRATE = Double.NaN;
}
}

protected final void initBASREST(String s) {
if (!s.trim().isEmpty()) {
BASREST = Byte.parseByte(s);
} else {
BASREST = Byte.MIN_VALUE;
}
}

protected final void initBENCB(String s) {
if (!s.trim().isEmpty()) {
BENCB = Byte.parseByte(s);
} else {
BENCB = Byte.MIN_VALUE;
}
}

protected final void initBENCTC(String s) {
if (!s.trim().isEmpty()) {
BENCTC = Byte.parseByte(s);
} else {
BENCTC = Byte.MIN_VALUE;
}
}

protected final void initBENDIS1(String s) {
if (!s.trim().isEmpty()) {
BENDIS1 = Byte.parseByte(s);
} else {
BENDIS1 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS10(String s) {
if (!s.trim().isEmpty()) {
BENDIS10 = Byte.parseByte(s);
} else {
BENDIS10 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS11(String s) {
if (!s.trim().isEmpty()) {
BENDIS11 = Byte.parseByte(s);
} else {
BENDIS11 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS2(String s) {
if (!s.trim().isEmpty()) {
BENDIS2 = Byte.parseByte(s);
} else {
BENDIS2 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS3(String s) {
if (!s.trim().isEmpty()) {
BENDIS3 = Byte.parseByte(s);
} else {
BENDIS3 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS4(String s) {
if (!s.trim().isEmpty()) {
BENDIS4 = Byte.parseByte(s);
} else {
BENDIS4 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS5(String s) {
if (!s.trim().isEmpty()) {
BENDIS5 = Byte.parseByte(s);
} else {
BENDIS5 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS6(String s) {
if (!s.trim().isEmpty()) {
BENDIS6 = Byte.parseByte(s);
} else {
BENDIS6 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS7(String s) {
if (!s.trim().isEmpty()) {
BENDIS7 = Byte.parseByte(s);
} else {
BENDIS7 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS8(String s) {
if (!s.trim().isEmpty()) {
BENDIS8 = Byte.parseByte(s);
} else {
BENDIS8 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS9(String s) {
if (!s.trim().isEmpty()) {
BENDIS9 = Byte.parseByte(s);
} else {
BENDIS9 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS96(String s) {
if (!s.trim().isEmpty()) {
BENDIS96 = Byte.parseByte(s);
} else {
BENDIS96 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM1(String s) {
if (!s.trim().isEmpty()) {
BENFAM1 = Byte.parseByte(s);
} else {
BENFAM1 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM2(String s) {
if (!s.trim().isEmpty()) {
BENFAM2 = Byte.parseByte(s);
} else {
BENFAM2 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM3(String s) {
if (!s.trim().isEmpty()) {
BENFAM3 = Byte.parseByte(s);
} else {
BENFAM3 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM4(String s) {
if (!s.trim().isEmpty()) {
BENFAM4 = Byte.parseByte(s);
} else {
BENFAM4 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM5(String s) {
if (!s.trim().isEmpty()) {
BENFAM5 = Byte.parseByte(s);
} else {
BENFAM5 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM96(String s) {
if (!s.trim().isEmpty()) {
BENFAM96 = Byte.parseByte(s);
} else {
BENFAM96 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU1(String s) {
if (!s.trim().isEmpty()) {
BENHOU1 = Byte.parseByte(s);
} else {
BENHOU1 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU2(String s) {
if (!s.trim().isEmpty()) {
BENHOU2 = Byte.parseByte(s);
} else {
BENHOU2 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU3(String s) {
if (!s.trim().isEmpty()) {
BENHOU3 = Byte.parseByte(s);
} else {
BENHOU3 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU4(String s) {
if (!s.trim().isEmpty()) {
BENHOU4 = Byte.parseByte(s);
} else {
BENHOU4 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU96(String s) {
if (!s.trim().isEmpty()) {
BENHOU96 = Byte.parseByte(s);
} else {
BENHOU96 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN1(String s) {
if (!s.trim().isEmpty()) {
BENPEN1 = Byte.parseByte(s);
} else {
BENPEN1 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN2(String s) {
if (!s.trim().isEmpty()) {
BENPEN2 = Byte.parseByte(s);
} else {
BENPEN2 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN3(String s) {
if (!s.trim().isEmpty()) {
BENPEN3 = Byte.parseByte(s);
} else {
BENPEN3 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN4(String s) {
if (!s.trim().isEmpty()) {
BENPEN4 = Byte.parseByte(s);
} else {
BENPEN4 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN5(String s) {
if (!s.trim().isEmpty()) {
BENPEN5 = Byte.parseByte(s);
} else {
BENPEN5 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN6(String s) {
if (!s.trim().isEmpty()) {
BENPEN6 = Byte.parseByte(s);
} else {
BENPEN6 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN7(String s) {
if (!s.trim().isEmpty()) {
BENPEN7 = Byte.parseByte(s);
} else {
BENPEN7 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN8(String s) {
if (!s.trim().isEmpty()) {
BENPEN8 = Byte.parseByte(s);
} else {
BENPEN8 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN96(String s) {
if (!s.trim().isEmpty()) {
BENPEN96 = Byte.parseByte(s);
} else {
BENPEN96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA1(String s) {
if (!s.trim().isEmpty()) {
BENSTA1 = Byte.parseByte(s);
} else {
BENSTA1 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA2(String s) {
if (!s.trim().isEmpty()) {
BENSTA2 = Byte.parseByte(s);
} else {
BENSTA2 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA3(String s) {
if (!s.trim().isEmpty()) {
BENSTA3 = Byte.parseByte(s);
} else {
BENSTA3 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA4(String s) {
if (!s.trim().isEmpty()) {
BENSTA4 = Byte.parseByte(s);
} else {
BENSTA4 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA5(String s) {
if (!s.trim().isEmpty()) {
BENSTA5 = Byte.parseByte(s);
} else {
BENSTA5 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA6(String s) {
if (!s.trim().isEmpty()) {
BENSTA6 = Byte.parseByte(s);
} else {
BENSTA6 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA7(String s) {
if (!s.trim().isEmpty()) {
BENSTA7 = Byte.parseByte(s);
} else {
BENSTA7 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA8(String s) {
if (!s.trim().isEmpty()) {
BENSTA8 = Byte.parseByte(s);
} else {
BENSTA8 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA96(String s) {
if (!s.trim().isEmpty()) {
BENSTA96 = Byte.parseByte(s);
} else {
BENSTA96 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX1(String s) {
if (!s.trim().isEmpty()) {
BENTAX1 = Byte.parseByte(s);
} else {
BENTAX1 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX2(String s) {
if (!s.trim().isEmpty()) {
BENTAX2 = Byte.parseByte(s);
} else {
BENTAX2 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX3(String s) {
if (!s.trim().isEmpty()) {
BENTAX3 = Byte.parseByte(s);
} else {
BENTAX3 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX4(String s) {
if (!s.trim().isEmpty()) {
BENTAX4 = Byte.parseByte(s);
} else {
BENTAX4 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX5(String s) {
if (!s.trim().isEmpty()) {
BENTAX5 = Byte.parseByte(s);
} else {
BENTAX5 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX96(String s) {
if (!s.trim().isEmpty()) {
BENTAX96 = Byte.parseByte(s);
} else {
BENTAX96 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP1(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP1 = Byte.parseByte(s);
} else {
BENUNEMP1 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP2(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP2 = Byte.parseByte(s);
} else {
BENUNEMP2 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP96(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP96 = Byte.parseByte(s);
} else {
BENUNEMP96 = Byte.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBTYPE1(String s) {
if (!s.trim().isEmpty()) {
BTYPE1 = Byte.parseByte(s);
} else {
BTYPE1 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE2(String s) {
if (!s.trim().isEmpty()) {
BTYPE2 = Byte.parseByte(s);
} else {
BTYPE2 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE3(String s) {
if (!s.trim().isEmpty()) {
BTYPE3 = Byte.parseByte(s);
} else {
BTYPE3 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE4(String s) {
if (!s.trim().isEmpty()) {
BTYPE4 = Byte.parseByte(s);
} else {
BTYPE4 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE5(String s) {
if (!s.trim().isEmpty()) {
BTYPE5 = Byte.parseByte(s);
} else {
BTYPE5 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE6(String s) {
if (!s.trim().isEmpty()) {
BTYPE6 = Byte.parseByte(s);
} else {
BTYPE6 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE7(String s) {
if (!s.trim().isEmpty()) {
BTYPE7 = Byte.parseByte(s);
} else {
BTYPE7 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE8(String s) {
if (!s.trim().isEmpty()) {
BTYPE8 = Byte.parseByte(s);
} else {
BTYPE8 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE9(String s) {
if (!s.trim().isEmpty()) {
BTYPE9 = Byte.parseByte(s);
} else {
BTYPE9 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE96(String s) {
if (!s.trim().isEmpty()) {
BTYPE96 = Byte.parseByte(s);
} else {
BTYPE96 = Byte.MIN_VALUE;
}
}

protected final void initBUNO_DV(String s) {
if (!s.trim().isEmpty()) {
BUNO_DV = Byte.parseByte(s);
} else {
BUNO_DV = Byte.MIN_VALUE;
}
}

protected final void initCARCLUB(String s) {
if (!s.trim().isEmpty()) {
CARCLUB = Byte.parseByte(s);
} else {
CARCLUB = Byte.MIN_VALUE;
}
}

protected final void initCARSHARE(String s) {
if (!s.trim().isEmpty()) {
CARSHARE = Byte.parseByte(s);
} else {
CARSHARE = Byte.MIN_VALUE;
}
}

protected final void initCCARE(String s) {
if (!s.trim().isEmpty()) {
CCARE = Byte.parseByte(s);
} else {
CCARE = Byte.MIN_VALUE;
}
}

protected final void initCCWORK(String s) {
if (!s.trim().isEmpty()) {
CCWORK = Byte.parseByte(s);
} else {
CCWORK = Byte.MIN_VALUE;
}
}

protected final void initCH1BY4(String s) {
if (!s.trim().isEmpty()) {
CH1BY4 = Short.parseShort(s);
} else {
CH1BY4 = Short.MIN_VALUE;
}
}

protected final void initCHARAM(String s) {
if (!s.trim().isEmpty()) {
CHARAM = Short.parseShort(s);
} else {
CHARAM = Short.MIN_VALUE;
}
}

protected final void initCHARFREQ(String s) {
if (!s.trim().isEmpty()) {
CHARFREQ = Byte.parseByte(s);
} else {
CHARFREQ = Byte.MIN_VALUE;
}
}

protected final void initCHARGV(String s) {
if (!s.trim().isEmpty()) {
CHARGV = Byte.parseByte(s);
} else {
CHARGV = Byte.MIN_VALUE;
}
}

protected final void initCHKCOA(String s) {
if (!s.trim().isEmpty()) {
CHKCOA = Byte.parseByte(s);
} else {
CHKCOA = Byte.MIN_VALUE;
}
}

protected final void initCHKDOB(String s) {
if (!s.trim().isEmpty()) {
CHKDOB = Byte.parseByte(s);
} else {
CHKDOB = Byte.MIN_VALUE;
}
}

protected final void initCHKSEX(String s) {
if (!s.trim().isEmpty()) {
CHKSEX = Byte.parseByte(s);
} else {
CHKSEX = Byte.MIN_VALUE;
}
}

protected final void initCINDTIME(String s) {
if (!s.trim().isEmpty()) {
CINDTIME = Integer.parseInt(s);
} else {
CINDTIME = Integer.MIN_VALUE;
}
}

protected final void initCITZN1(String s) {
if (!s.trim().isEmpty()) {
CITZN1 = Byte.parseByte(s);
} else {
CITZN1 = Byte.MIN_VALUE;
}
}

protected final void initCITZN2(String s) {
if (!s.trim().isEmpty()) {
CITZN2 = Byte.parseByte(s);
} else {
CITZN2 = Byte.MIN_VALUE;
}
}

protected final void initCITZN3(String s) {
if (!s.trim().isEmpty()) {
CITZN3 = Byte.parseByte(s);
} else {
CITZN3 = Byte.MIN_VALUE;
}
}

protected final void initCIVICDUTY(String s) {
if (!s.trim().isEmpty()) {
CIVICDUTY = Byte.parseByte(s);
} else {
CIVICDUTY = Byte.MIN_VALUE;
}
}

protected final void initCJBATT(String s) {
if (!s.trim().isEmpty()) {
CJBATT = Byte.parseByte(s);
} else {
CJBATT = Byte.MIN_VALUE;
}
}

protected final void initCJOB(String s) {
if (!s.trim().isEmpty()) {
CJOB = Byte.parseByte(s);
} else {
CJOB = Byte.MIN_VALUE;
}
}

protected final void initCLUB(String s) {
if (!s.trim().isEmpty()) {
CLUB = Byte.parseByte(s);
} else {
CLUB = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT1(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT1 = Byte.parseByte(s);
} else {
CMLSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT2(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT2 = Byte.parseByte(s);
} else {
CMLSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT3(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT3 = Byte.parseByte(s);
} else {
CMLSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCOH1BM(String s) {
if (!s.trim().isEmpty()) {
COH1BM = Byte.parseByte(s);
} else {
COH1BM = Byte.MIN_VALUE;
}
}

protected final void initCOH1BY(String s) {
if (!s.trim().isEmpty()) {
COH1BY = Short.parseShort(s);
} else {
COH1BY = Short.MIN_VALUE;
}
}

protected final void initCOH1EM(String s) {
if (!s.trim().isEmpty()) {
COH1EM = Byte.parseByte(s);
} else {
COH1EM = Byte.MIN_VALUE;
}
}

protected final void initCOH1EY(String s) {
if (!s.trim().isEmpty()) {
COH1EY = Short.parseShort(s);
} else {
COH1EY = Short.MIN_VALUE;
}
}

protected final void initCOH1MR(String s) {
if (!s.trim().isEmpty()) {
COH1MR = Byte.parseByte(s);
} else {
COH1MR = Byte.MIN_VALUE;
}
}

protected final void initCOHAB(String s) {
if (!s.trim().isEmpty()) {
COHAB = Byte.parseByte(s);
} else {
COHAB = Byte.MIN_VALUE;
}
}

protected final void initCOHABN(String s) {
if (!s.trim().isEmpty()) {
COHABN = Byte.parseByte(s);
} else {
COHABN = Byte.MIN_VALUE;
}
}

protected final void initCOHADV(String s) {
if (!s.trim().isEmpty()) {
COHADV = Byte.parseByte(s);
} else {
COHADV = Byte.MIN_VALUE;
}
}

protected final void initCOLBENS1(String s) {
if (!s.trim().isEmpty()) {
COLBENS1 = Byte.parseByte(s);
} else {
COLBENS1 = Byte.MIN_VALUE;
}
}

protected final void initCOLBENS2(String s) {
if (!s.trim().isEmpty()) {
COLBENS2 = Byte.parseByte(s);
} else {
COLBENS2 = Byte.MIN_VALUE;
}
}

protected final void initCOLBENS3(String s) {
if (!s.trim().isEmpty()) {
COLBENS3 = Byte.parseByte(s);
} else {
COLBENS3 = Byte.MIN_VALUE;
}
}

protected final void initCOMBIKE(String s) {
if (!s.trim().isEmpty()) {
COMBIKE = Byte.parseByte(s);
} else {
COMBIKE = Byte.MIN_VALUE;
}
}

protected final void initCOMBUS(String s) {
if (!s.trim().isEmpty()) {
COMBUS = Byte.parseByte(s);
} else {
COMBUS = Byte.MIN_VALUE;
}
}

protected final void initCOMMETRO(String s) {
if (!s.trim().isEmpty()) {
COMMETRO = Byte.parseByte(s);
} else {
COMMETRO = Byte.MIN_VALUE;
}
}

protected final void initCOMOTHER(String s) {
if (!s.trim().isEmpty()) {
COMOTHER = Byte.parseByte(s);
} else {
COMOTHER = Byte.MIN_VALUE;
}
}

protected final void initCOMTAXI(String s) {
if (!s.trim().isEmpty()) {
COMTAXI = Byte.parseByte(s);
} else {
COMTAXI = Byte.MIN_VALUE;
}
}

protected final void initCOMTRAIN(String s) {
if (!s.trim().isEmpty()) {
COMTRAIN = Byte.parseByte(s);
} else {
COMTRAIN = Byte.MIN_VALUE;
}
}

protected final void initCOMWALK(String s) {
if (!s.trim().isEmpty()) {
COMWALK = Byte.parseByte(s);
} else {
COMWALK = Byte.MIN_VALUE;
}
}

protected final void initCONTFT(String s) {
if (!s.trim().isEmpty()) {
CONTFT = Byte.parseByte(s);
} else {
CONTFT = Byte.MIN_VALUE;
}
}

protected final void initCOUNTRY(String s) {
if (!s.trim().isEmpty()) {
COUNTRY = Byte.parseByte(s);
} else {
COUNTRY = Byte.MIN_VALUE;
}
}

protected final void initCSTAT(String s) {
if (!s.trim().isEmpty()) {
CSTAT = Byte.parseByte(s);
} else {
CSTAT = Byte.MIN_VALUE;
}
}

protected final void initCTADD1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD1_CODE = Byte.parseByte(s);
} else {
CTADD1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTADD2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD2_CODE = Byte.parseByte(s);
} else {
CTADD2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCNTY_CODE(String s) {
if (!s.trim().isEmpty()) {
CTCNTY_CODE = Byte.parseByte(s);
} else {
CTCNTY_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTEMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
CTEMAIL_CODE = Byte.parseByte(s);
} else {
CTEMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTPCODE_CODE(String s) {
if (!s.trim().isEmpty()) {
CTPCODE_CODE = Byte.parseByte(s);
} else {
CTPCODE_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTEL1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL1_CODE = Byte.parseByte(s);
} else {
CTTEL1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTEL2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL2_CODE = Byte.parseByte(s);
} else {
CTTEL2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTOWN_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTOWN_CODE = Byte.parseByte(s);
} else {
CTTOWN_CODE = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB1(String s) {
if (!s.trim().isEmpty()) {
CURRJOB1 = Byte.parseByte(s);
} else {
CURRJOB1 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CURRJOB10 = false;
} else {
CURRJOB10 = true;
}
}
}

protected final void initCURRJOB2(String s) {
if (!s.trim().isEmpty()) {
CURRJOB2 = Byte.parseByte(s);
} else {
CURRJOB2 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB3(String s) {
if (!s.trim().isEmpty()) {
CURRJOB3 = Byte.parseByte(s);
} else {
CURRJOB3 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB4(String s) {
if (!s.trim().isEmpty()) {
CURRJOB4 = Byte.parseByte(s);
} else {
CURRJOB4 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB5(String s) {
if (!s.trim().isEmpty()) {
CURRJOB5 = Byte.parseByte(s);
} else {
CURRJOB5 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB6(String s) {
if (!s.trim().isEmpty()) {
CURRJOB6 = Byte.parseByte(s);
} else {
CURRJOB6 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB7(String s) {
if (!s.trim().isEmpty()) {
CURRJOB7 = Byte.parseByte(s);
} else {
CURRJOB7 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB8(String s) {
if (!s.trim().isEmpty()) {
CURRJOB8 = Byte.parseByte(s);
} else {
CURRJOB8 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB9(String s) {
if (!s.trim().isEmpty()) {
CURRJOB9 = Byte.parseByte(s);
} else {
CURRJOB9 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART1(String s) {
if (!s.trim().isEmpty()) {
CURRPART1 = Byte.parseByte(s);
} else {
CURRPART1 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART2(String s) {
if (!s.trim().isEmpty()) {
CURRPART2 = Byte.parseByte(s);
} else {
CURRPART2 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART3(String s) {
if (!s.trim().isEmpty()) {
CURRPART3 = Byte.parseByte(s);
} else {
CURRPART3 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART4(String s) {
if (!s.trim().isEmpty()) {
CURRPART4 = Byte.parseByte(s);
} else {
CURRPART4 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT1(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT1 = Byte.parseByte(s);
} else {
CURRSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT10(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT10 = Byte.parseByte(s);
} else {
CURRSTAT10 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT2(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT2 = Byte.parseByte(s);
} else {
CURRSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT3(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT3 = Byte.parseByte(s);
} else {
CURRSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT4(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT4 = Byte.parseByte(s);
} else {
CURRSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT5(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT5 = Byte.parseByte(s);
} else {
CURRSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT6(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT6 = Byte.parseByte(s);
} else {
CURRSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT7(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT7 = Byte.parseByte(s);
} else {
CURRSTAT7 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT8(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT8 = Byte.parseByte(s);
} else {
CURRSTAT8 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CURRSTAT9 = false;
} else {
CURRSTAT9 = true;
}
}
}

protected final void initDAYWLK(String s) {
if (!s.trim().isEmpty()) {
DAYWLK = Byte.parseByte(s);
} else {
DAYWLK = Byte.MIN_VALUE;
}
}

protected final void initDEMORIENT(String s) {
if (!s.trim().isEmpty()) {
DEMORIENT = Byte.parseByte(s);
} else {
DEMORIENT = Byte.MIN_VALUE;
}
}

protected final void initDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DEPCHL_DV = false;
} else {
DEPCHL_DV = true;
}
}
}

protected final void initDEPENTH1(String s) {
if (!s.trim().isEmpty()) {
DEPENTH1 = Byte.parseByte(s);
} else {
DEPENTH1 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH2(String s) {
if (!s.trim().isEmpty()) {
DEPENTH2 = Byte.parseByte(s);
} else {
DEPENTH2 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH3(String s) {
if (!s.trim().isEmpty()) {
DEPENTH3 = Byte.parseByte(s);
} else {
DEPENTH3 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH4(String s) {
if (!s.trim().isEmpty()) {
DEPENTH4 = Byte.parseByte(s);
} else {
DEPENTH4 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH5(String s) {
if (!s.trim().isEmpty()) {
DEPENTH5 = Byte.parseByte(s);
} else {
DEPENTH5 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH6(String s) {
if (!s.trim().isEmpty()) {
DEPENTH6 = Byte.parseByte(s);
} else {
DEPENTH6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF1(String s) {
if (!s.trim().isEmpty()) {
DISDIF1 = Byte.parseByte(s);
} else {
DISDIF1 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF10(String s) {
if (!s.trim().isEmpty()) {
DISDIF10 = Byte.parseByte(s);
} else {
DISDIF10 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF11(String s) {
if (!s.trim().isEmpty()) {
DISDIF11 = Byte.parseByte(s);
} else {
DISDIF11 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF12(String s) {
if (!s.trim().isEmpty()) {
DISDIF12 = Byte.parseByte(s);
} else {
DISDIF12 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF2(String s) {
if (!s.trim().isEmpty()) {
DISDIF2 = Byte.parseByte(s);
} else {
DISDIF2 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF3(String s) {
if (!s.trim().isEmpty()) {
DISDIF3 = Byte.parseByte(s);
} else {
DISDIF3 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF4(String s) {
if (!s.trim().isEmpty()) {
DISDIF4 = Byte.parseByte(s);
} else {
DISDIF4 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF5(String s) {
if (!s.trim().isEmpty()) {
DISDIF5 = Byte.parseByte(s);
} else {
DISDIF5 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF6(String s) {
if (!s.trim().isEmpty()) {
DISDIF6 = Byte.parseByte(s);
} else {
DISDIF6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF7(String s) {
if (!s.trim().isEmpty()) {
DISDIF7 = Byte.parseByte(s);
} else {
DISDIF7 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF8(String s) {
if (!s.trim().isEmpty()) {
DISDIF8 = Byte.parseByte(s);
} else {
DISDIF8 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF9(String s) {
if (!s.trim().isEmpty()) {
DISDIF9 = Byte.parseByte(s);
} else {
DISDIF9 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF96(String s) {
if (!s.trim().isEmpty()) {
DISDIF96 = Byte.parseByte(s);
} else {
DISDIF96 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK1(String s) {
if (!s.trim().isEmpty()) {
DIVCHK1 = Byte.parseByte(s);
} else {
DIVCHK1 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK2(String s) {
if (!s.trim().isEmpty()) {
DIVCHK2 = Byte.parseByte(s);
} else {
DIVCHK2 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK3(String s) {
if (!s.trim().isEmpty()) {
DIVCHK3 = Byte.parseByte(s);
} else {
DIVCHK3 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN1(String s) {
if (!s.trim().isEmpty()) {
DIVFIN1 = Byte.parseByte(s);
} else {
DIVFIN1 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN2(String s) {
if (!s.trim().isEmpty()) {
DIVFIN2 = Byte.parseByte(s);
} else {
DIVFIN2 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN3(String s) {
if (!s.trim().isEmpty()) {
DIVFIN3 = Byte.parseByte(s);
} else {
DIVFIN3 = Byte.MIN_VALUE;
}
}

protected final void initDOBY_DV(String s) {
if (!s.trim().isEmpty()) {
DOBY_DV = Short.parseShort(s);
} else {
DOBY_DV = Short.MIN_VALUE;
}
}

protected final void initDRIVE(String s) {
if (!s.trim().isEmpty()) {
DRIVE = Byte.parseByte(s);
} else {
DRIVE = Byte.MIN_VALUE;
}
}

protected final void initDVAGE(String s) {
if (!s.trim().isEmpty()) {
DVAGE = Byte.parseByte(s);
} else {
DVAGE = Byte.MIN_VALUE;
}
}

protected final void initDVM1(String s) {
if (!s.trim().isEmpty()) {
DVM1 = Byte.parseByte(s);
} else {
DVM1 = Byte.MIN_VALUE;
}
}

protected final void initDVM2(String s) {
if (!s.trim().isEmpty()) {
DVM2 = Byte.parseByte(s);
} else {
DVM2 = Byte.MIN_VALUE;
}
}

protected final void initDVM3(String s) {
if (!s.trim().isEmpty()) {
DVM3 = Byte.parseByte(s);
} else {
DVM3 = Byte.MIN_VALUE;
}
}

protected final void initDVY41(String s) {
if (!s.trim().isEmpty()) {
DVY41 = Short.parseShort(s);
} else {
DVY41 = Short.MIN_VALUE;
}
}

protected final void initDVY42(String s) {
if (!s.trim().isEmpty()) {
DVY42 = Short.parseShort(s);
} else {
DVY42 = Short.MIN_VALUE;
}
}

protected final void initDVY43(String s) {
if (!s.trim().isEmpty()) {
DVY43 = Byte.parseByte(s);
} else {
DVY43 = Byte.MIN_VALUE;
}
}

protected final void initEDASP(String s) {
if (!s.trim().isEmpty()) {
EDASP = Byte.parseByte(s);
} else {
EDASP = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE(String s) {
if (!s.trim().isEmpty()) {
EDTYPE = Short.parseShort(s);
} else {
EDTYPE = Short.MIN_VALUE;
}
}

protected final void initEDUCATION(String s) {
if (!s.trim().isEmpty()) {
EDUCATION = Byte.parseByte(s);
} else {
EDUCATION = Byte.MIN_VALUE;
}
}

protected final void initEMPCHK(String s) {
if (!s.trim().isEmpty()) {
EMPCHK = Byte.parseByte(s);
} else {
EMPCHK = Byte.MIN_VALUE;
}
}

protected final void initEMPLOY(String s) {
if (!s.trim().isEmpty()) {
EMPLOY = Byte.parseByte(s);
} else {
EMPLOY = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDD(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDD = Byte.parseByte(s);
} else {
EMPSTENDD = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDM(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDM = Byte.parseByte(s);
} else {
EMPSTENDM = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDY4(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDY4 = Short.parseShort(s);
} else {
EMPSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initENDMNTH1(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH1 = Byte.parseByte(s);
} else {
ENDMNTH1 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH2(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH2 = Byte.parseByte(s);
} else {
ENDMNTH2 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH3(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH3 = Byte.parseByte(s);
} else {
ENDMNTH3 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH4(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH4 = Byte.parseByte(s);
} else {
ENDMNTH4 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH5(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH5 = Byte.parseByte(s);
} else {
ENDMNTH5 = Byte.MIN_VALUE;
}
}

protected final void initEPROSH(String s) {
if (!s.trim().isEmpty()) {
EPROSH = Short.parseShort(s);
} else {
EPROSH = Short.MIN_VALUE;
}
}

protected final void initETHCLOSE1(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE1 = Byte.parseByte(s);
} else {
ETHCLOSE1 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE10(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE10 = Byte.parseByte(s);
} else {
ETHCLOSE10 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE11(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE11 = Byte.parseByte(s);
} else {
ETHCLOSE11 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE2A(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE2A = Byte.parseByte(s);
} else {
ETHCLOSE2A = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE2B(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE2B = Byte.parseByte(s);
} else {
ETHCLOSE2B = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE3(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE3 = Byte.parseByte(s);
} else {
ETHCLOSE3 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE4A(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE4A = Byte.parseByte(s);
} else {
ETHCLOSE4A = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE4B(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE4B = Byte.parseByte(s);
} else {
ETHCLOSE4B = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE5(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE5 = Byte.parseByte(s);
} else {
ETHCLOSE5 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE6(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE6 = Byte.parseByte(s);
} else {
ETHCLOSE6 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE7(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE7 = Byte.parseByte(s);
} else {
ETHCLOSE7 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE8(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE8 = Byte.parseByte(s);
} else {
ETHCLOSE8 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE9(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE9 = Byte.parseByte(s);
} else {
ETHCLOSE9 = Byte.MIN_VALUE;
}
}

protected final void initETHID10(String s) {
if (!s.trim().isEmpty()) {
ETHID10 = Byte.parseByte(s);
} else {
ETHID10 = Byte.MIN_VALUE;
}
}

protected final void initETHID11(String s) {
if (!s.trim().isEmpty()) {
ETHID11 = Byte.parseByte(s);
} else {
ETHID11 = Byte.MIN_VALUE;
}
}

protected final void initETHID12(String s) {
if (!s.trim().isEmpty()) {
ETHID12 = Byte.parseByte(s);
} else {
ETHID12 = Byte.MIN_VALUE;
}
}

protected final void initETHID13(String s) {
if (!s.trim().isEmpty()) {
ETHID13 = Byte.parseByte(s);
} else {
ETHID13 = Byte.MIN_VALUE;
}
}

protected final void initETHID14(String s) {
if (!s.trim().isEmpty()) {
ETHID14 = Byte.parseByte(s);
} else {
ETHID14 = Byte.MIN_VALUE;
}
}

protected final void initETHID2(String s) {
if (!s.trim().isEmpty()) {
ETHID2 = Byte.parseByte(s);
} else {
ETHID2 = Byte.MIN_VALUE;
}
}

protected final void initETHID3(String s) {
if (!s.trim().isEmpty()) {
ETHID3 = Byte.parseByte(s);
} else {
ETHID3 = Byte.MIN_VALUE;
}
}

protected final void initETHID4A(String s) {
if (!s.trim().isEmpty()) {
ETHID4A = Byte.parseByte(s);
} else {
ETHID4A = Byte.MIN_VALUE;
}
}

protected final void initETHID4B(String s) {
if (!s.trim().isEmpty()) {
ETHID4B = Byte.parseByte(s);
} else {
ETHID4B = Byte.MIN_VALUE;
}
}

protected final void initETHID5(String s) {
if (!s.trim().isEmpty()) {
ETHID5 = Byte.parseByte(s);
} else {
ETHID5 = Byte.MIN_VALUE;
}
}

protected final void initETHID6(String s) {
if (!s.trim().isEmpty()) {
ETHID6 = Byte.parseByte(s);
} else {
ETHID6 = Byte.MIN_VALUE;
}
}

protected final void initETHID7(String s) {
if (!s.trim().isEmpty()) {
ETHID7 = Byte.parseByte(s);
} else {
ETHID7 = Byte.MIN_VALUE;
}
}

protected final void initETHID8(String s) {
if (!s.trim().isEmpty()) {
ETHID8 = Byte.parseByte(s);
} else {
ETHID8 = Byte.MIN_VALUE;
}
}

protected final void initETHID9(String s) {
if (!s.trim().isEmpty()) {
ETHID9 = Byte.parseByte(s);
} else {
ETHID9 = Byte.MIN_VALUE;
}
}

protected final void initETHN_DV(String s) {
if (!s.trim().isEmpty()) {
ETHN_DV = Byte.parseByte(s);
} else {
ETHN_DV = Byte.MIN_VALUE;
}
}

protected final void initEVENT1(String s) {
if (!s.trim().isEmpty()) {
EVENT1 = Byte.parseByte(s);
} else {
EVENT1 = Byte.MIN_VALUE;
}
}

protected final void initEVENT1S(String s) {
if (!s.trim().isEmpty()) {
EVENT1S = Byte.parseByte(s);
} else {
EVENT1S = Byte.MIN_VALUE;
}
}

protected final void initEVENT2(String s) {
if (!s.trim().isEmpty()) {
EVENT2 = Byte.parseByte(s);
} else {
EVENT2 = Byte.MIN_VALUE;
}
}

protected final void initEVENT2S(String s) {
if (!s.trim().isEmpty()) {
EVENT2S = Byte.parseByte(s);
} else {
EVENT2S = Byte.MIN_VALUE;
}
}

protected final void initEVENT3(String s) {
if (!s.trim().isEmpty()) {
EVENT3 = Byte.parseByte(s);
} else {
EVENT3 = Byte.MIN_VALUE;
}
}

protected final void initEVENT3S(String s) {
if (!s.trim().isEmpty()) {
EVENT3S = Byte.parseByte(s);
} else {
EVENT3S = Byte.MIN_VALUE;
}
}

protected final void initEVENT4(String s) {
if (!s.trim().isEmpty()) {
EVENT4 = Byte.parseByte(s);
} else {
EVENT4 = Byte.MIN_VALUE;
}
}

protected final void initEVENT4S(String s) {
if (!s.trim().isEmpty()) {
EVENT4S = Byte.parseByte(s);
} else {
EVENT4S = Byte.MIN_VALUE;
}
}

protected final void initEXTNSA(String s) {
if (!s.trim().isEmpty()) {
EXTNSA = Byte.parseByte(s);
} else {
EXTNSA = Byte.MIN_VALUE;
}
}

protected final void initEXTRATE(String s) {
if (!s.trim().isEmpty()) {
EXTRATE = Double.parseDouble(s);
} else {
EXTRATE = Double.NaN;
}
}

protected final void initEXTREST(String s) {
if (!s.trim().isEmpty()) {
EXTREST = Byte.parseByte(s);
} else {
EXTREST = Byte.MIN_VALUE;
}
}

protected final void initFAMILY(String s) {
if (!s.trim().isEmpty()) {
FAMILY = Byte.parseByte(s);
} else {
FAMILY = Byte.MIN_VALUE;
}
}

protected final void initFATHER(String s) {
if (!s.trim().isEmpty()) {
FATHER = Byte.parseByte(s);
} else {
FATHER = Byte.MIN_VALUE;
}
}

protected final void initFEDLIK(String s) {
if (!s.trim().isEmpty()) {
FEDLIK = Byte.parseByte(s);
} else {
FEDLIK = Byte.MIN_VALUE;
}
}

protected final void initFEDNT(String s) {
if (!s.trim().isEmpty()) {
FEDNT = Byte.parseByte(s);
} else {
FEDNT = Byte.MIN_VALUE;
}
}

protected final void initFENOW(String s) {
if (!s.trim().isEmpty()) {
FENOW = Byte.parseByte(s);
} else {
FENOW = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE01(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE01 = Byte.parseByte(s);
} else {
FF_BENTYPE01 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE02(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE02 = Byte.parseByte(s);
} else {
FF_BENTYPE02 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE03(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE03 = Byte.parseByte(s);
} else {
FF_BENTYPE03 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE04(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE04 = Byte.parseByte(s);
} else {
FF_BENTYPE04 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE05(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE05 = Byte.parseByte(s);
} else {
FF_BENTYPE05 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE06(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE06 = Byte.parseByte(s);
} else {
FF_BENTYPE06 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE07(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE07 = Byte.parseByte(s);
} else {
FF_BENTYPE07 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE08(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE08 = Byte.parseByte(s);
} else {
FF_BENTYPE08 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE09(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE09 = Byte.parseByte(s);
} else {
FF_BENTYPE09 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE10(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE10 = Byte.parseByte(s);
} else {
FF_BENTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE11(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE11 = Byte.parseByte(s);
} else {
FF_BENTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE12(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE12 = Byte.parseByte(s);
} else {
FF_BENTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE13(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE13 = Byte.parseByte(s);
} else {
FF_BENTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE14(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE14 = Byte.parseByte(s);
} else {
FF_BENTYPE14 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE15(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE15 = Byte.parseByte(s);
} else {
FF_BENTYPE15 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE16(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE16 = Byte.parseByte(s);
} else {
FF_BENTYPE16 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE17(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE17 = Byte.parseByte(s);
} else {
FF_BENTYPE17 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE18(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE18 = Byte.parseByte(s);
} else {
FF_BENTYPE18 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE19(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE19 = Byte.parseByte(s);
} else {
FF_BENTYPE19 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE20(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE20 = Byte.parseByte(s);
} else {
FF_BENTYPE20 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE21(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE21 = Byte.parseByte(s);
} else {
FF_BENTYPE21 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE22(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE22 = Byte.parseByte(s);
} else {
FF_BENTYPE22 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE23(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE23 = Byte.parseByte(s);
} else {
FF_BENTYPE23 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE24(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE24 = Byte.parseByte(s);
} else {
FF_BENTYPE24 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE25(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE25 = Byte.parseByte(s);
} else {
FF_BENTYPE25 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE26(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE26 = Byte.parseByte(s);
} else {
FF_BENTYPE26 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE27(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE27 = Byte.parseByte(s);
} else {
FF_BENTYPE27 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE28(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE28 = Byte.parseByte(s);
} else {
FF_BENTYPE28 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE29(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE29 = Byte.parseByte(s);
} else {
FF_BENTYPE29 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE30(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE30 = Byte.parseByte(s);
} else {
FF_BENTYPE30 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE31(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE31 = Byte.parseByte(s);
} else {
FF_BENTYPE31 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE32(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE32 = Byte.parseByte(s);
} else {
FF_BENTYPE32 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE33(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE33 = Byte.parseByte(s);
} else {
FF_BENTYPE33 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE34(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE34 = Byte.parseByte(s);
} else {
FF_BENTYPE34 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE35(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE35 = Byte.parseByte(s);
} else {
FF_BENTYPE35 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE36(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE36 = Byte.parseByte(s);
} else {
FF_BENTYPE36 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE37(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE37 = Byte.parseByte(s);
} else {
FF_BENTYPE37 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE38(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE38 = Byte.parseByte(s);
} else {
FF_BENTYPE38 = Byte.MIN_VALUE;
}
}

protected final void initFF_EMPLW(String s) {
if (!s.trim().isEmpty()) {
FF_EMPLW = Byte.parseByte(s);
} else {
FF_EMPLW = Byte.MIN_VALUE;
}
}

protected final void initFF_EVERINT(String s) {
if (!s.trim().isEmpty()) {
FF_EVERINT = Byte.parseByte(s);
} else {
FF_EVERINT = Byte.MIN_VALUE;
}
}

protected final void initFF_IVLOLW(String s) {
if (!s.trim().isEmpty()) {
FF_IVLOLW = Byte.parseByte(s);
} else {
FF_IVLOLW = Byte.MIN_VALUE;
}
}

protected final void initFF_JBMNGR(String s) {
if (!s.trim().isEmpty()) {
FF_JBMNGR = Byte.parseByte(s);
} else {
FF_JBMNGR = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSEMP(String s) {
if (!s.trim().isEmpty()) {
FF_JBSEMP = Byte.parseByte(s);
} else {
FF_JBSEMP = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSIZE(String s) {
if (!s.trim().isEmpty()) {
FF_JBSIZE = Byte.parseByte(s);
} else {
FF_JBSIZE = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSTAT(String s) {
if (!s.trim().isEmpty()) {
FF_JBSTAT = Byte.parseByte(s);
} else {
FF_JBSTAT = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG = Byte.parseByte(s);
} else {
FF_OPRLG = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0 = Byte.parseByte(s);
} else {
FF_OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0NI = Byte.parseByte(s);
} else {
FF_OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initFF_TEL(String s) {
if (!s.trim().isEmpty()) {
FF_TEL = Byte.parseByte(s);
} else {
FF_TEL = Byte.MIN_VALUE;
}
}

protected final void initFF_UKBORN(String s) {
if (!s.trim().isEmpty()) {
FF_UKBORN = Byte.parseByte(s);
} else {
FF_UKBORN = Byte.MIN_VALUE;
}
}

protected final void initFF_YR2UK4(String s) {
if (!s.trim().isEmpty()) {
FF_YR2UK4 = Short.parseShort(s);
} else {
FF_YR2UK4 = Short.MIN_VALUE;
}
}

protected final void initFIBENOTHR_DV(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_DV = Double.parseDouble(s);
} else {
FIBENOTHR_DV = Double.NaN;
}
}

protected final void initFIBENOTHR_IF(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_IF = Double.parseDouble(s);
} else {
FIBENOTHR_IF = Double.NaN;
}
}

protected final void initFIBENOTHR_TC(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_TC = Byte.parseByte(s);
} else {
FIBENOTHR_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_IF = Double.parseDouble(s);
} else {
FIMNGRS_IF = Double.NaN;
}
}

protected final void initFIMNGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_TC = Byte.parseByte(s);
} else {
FIMNGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNINVNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNINVNET_DV = Double.parseDouble(s);
} else {
FIMNINVNET_DV = Double.NaN;
}
}

protected final void initFIMNLABGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_IF = Double.parseDouble(s);
} else {
FIMNLABGRS_IF = Double.NaN;
}
}

protected final void initFIMNLABGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_TC = Byte.parseByte(s);
} else {
FIMNLABGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNLABNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_DV = Double.parseDouble(s);
} else {
FIMNLABNET_DV = Double.NaN;
}
}

protected final void initFIMNLABNET_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_TC = Byte.parseByte(s);
} else {
FIMNLABNET_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNMISC_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNMISC_DV = Double.parseDouble(s);
} else {
FIMNMISC_DV = Double.NaN;
}
}

protected final void initFIMNNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNNET_DV = Double.parseDouble(s);
} else {
FIMNNET_DV = Double.NaN;
}
}

protected final void initFIMNPEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPEN_DV = Double.parseDouble(s);
} else {
FIMNPEN_DV = Double.NaN;
}
}

protected final void initFIMNPRBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPRBEN_DV = Double.parseDouble(s);
} else {
FIMNPRBEN_DV = Double.NaN;
}
}

protected final void initFIMNSBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNSBEN_DV = Double.parseDouble(s);
} else {
FIMNSBEN_DV = Double.NaN;
}
}

protected final void initFINFUT(String s) {
if (!s.trim().isEmpty()) {
FINFUT = Byte.parseByte(s);
} else {
FINFUT = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB1(String s) {
if (!s.trim().isEmpty()) {
FIYRDB1 = Byte.parseByte(s);
} else {
FIYRDB1 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB2(String s) {
if (!s.trim().isEmpty()) {
FIYRDB2 = Byte.parseByte(s);
} else {
FIYRDB2 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB3(String s) {
if (!s.trim().isEmpty()) {
FIYRDB3 = Byte.parseByte(s);
} else {
FIYRDB3 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB4(String s) {
if (!s.trim().isEmpty()) {
FIYRDB4 = Byte.parseByte(s);
} else {
FIYRDB4 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB5(String s) {
if (!s.trim().isEmpty()) {
FIYRDB5 = Byte.parseByte(s);
} else {
FIYRDB5 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB6(String s) {
if (!s.trim().isEmpty()) {
FIYRDB6 = Byte.parseByte(s);
} else {
FIYRDB6 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDIA(String s) {
if (!s.trim().isEmpty()) {
FIYRDIA = Integer.parseInt(s);
} else {
FIYRDIA = Integer.MIN_VALUE;
}
}

protected final void initFIYRINVINC_DV(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_DV = Double.parseDouble(s);
} else {
FIYRINVINC_DV = Double.NaN;
}
}

protected final void initFIYRINVINC_IF(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_IF = Byte.parseByte(s);
} else {
FIYRINVINC_IF = Byte.MIN_VALUE;
}
}

protected final void initFIYRINVINC_TC(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_TC = Byte.parseByte(s);
} else {
FIYRINVINC_TC = Byte.MIN_VALUE;
}
}

protected final void initFNPID(String s) {
if (!s.trim().isEmpty()) {
FNPID = Integer.parseInt(s);
} else {
FNPID = Integer.MIN_VALUE;
}
}

protected final void initFNPNO(String s) {
if (!s.trim().isEmpty()) {
FNPNO = Byte.parseByte(s);
} else {
FNPNO = Byte.MIN_VALUE;
}
}

protected final void initFNSPID(String s) {
if (!s.trim().isEmpty()) {
FNSPID = Integer.parseInt(s);
} else {
FNSPID = Integer.MIN_VALUE;
}
}

protected final void initFNSPNO(String s) {
if (!s.trim().isEmpty()) {
FNSPNO = Byte.parseByte(s);
} else {
FNSPNO = Byte.MIN_VALUE;
}
}

protected final void initFOOD1(String s) {
if (!s.trim().isEmpty()) {
FOOD1 = Byte.parseByte(s);
} else {
FOOD1 = Byte.MIN_VALUE;
}
}

protected final void initFOOD2(String s) {
if (!s.trim().isEmpty()) {
FOOD2 = Byte.parseByte(s);
} else {
FOOD2 = Byte.MIN_VALUE;
}
}

protected final void initFOOD3(String s) {
if (!s.trim().isEmpty()) {
FOOD3 = Byte.parseByte(s);
} else {
FOOD3 = Byte.MIN_VALUE;
}
}

protected final void initFOOD4(String s) {
if (!s.trim().isEmpty()) {
FOOD4 = Byte.parseByte(s);
} else {
FOOD4 = Byte.MIN_VALUE;
}
}

protected final void initFOOD5(String s) {
if (!s.trim().isEmpty()) {
FOOD5 = Byte.parseByte(s);
} else {
FOOD5 = Byte.MIN_VALUE;
}
}

protected final void initFOOD6(String s) {
if (!s.trim().isEmpty()) {
FOOD6 = Byte.parseByte(s);
} else {
FOOD6 = Byte.MIN_VALUE;
}
}

protected final void initFOOD7(String s) {
if (!s.trim().isEmpty()) {
FOOD7 = Byte.parseByte(s);
} else {
FOOD7 = Byte.MIN_VALUE;
}
}

protected final void initFRUVEGE(String s) {
if (!s.trim().isEmpty()) {
FRUVEGE = Byte.parseByte(s);
} else {
FRUVEGE = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM1(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM1 = Byte.parseByte(s);
} else {
FT2ENDM1 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM2(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM2 = Byte.parseByte(s);
} else {
FT2ENDM2 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDY41(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY41 = Short.parseShort(s);
} else {
FT2ENDY41 = Short.MIN_VALUE;
}
}

protected final void initFT2ENDY42(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY42 = Short.parseShort(s);
} else {
FT2ENDY42 = Short.MIN_VALUE;
}
}

protected final void initFTEDANY(String s) {
if (!s.trim().isEmpty()) {
FTEDANY = Byte.parseByte(s);
} else {
FTEDANY = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND1(String s) {
if (!s.trim().isEmpty()) {
FTEDEND1 = Byte.parseByte(s);
} else {
FTEDEND1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND2(String s) {
if (!s.trim().isEmpty()) {
FTEDEND2 = Byte.parseByte(s);
} else {
FTEDEND2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR1(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR1 = Byte.parseByte(s);
} else {
FTEDMOR1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR2(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR2 = Byte.parseByte(s);
} else {
FTEDMOR2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM1(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM1 = Byte.parseByte(s);
} else {
FTEDSTARTM1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM2(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM2 = Byte.parseByte(s);
} else {
FTEDSTARTM2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTY41(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY41 = Short.parseShort(s);
} else {
FTEDSTARTY41 = Short.MIN_VALUE;
}
}

protected final void initFTEDSTARTY42(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY42 = Short.parseShort(s);
} else {
FTEDSTARTY42 = Short.MIN_VALUE;
}
}

protected final void initFTENDM(String s) {
if (!s.trim().isEmpty()) {
FTENDM = Byte.parseByte(s);
} else {
FTENDM = Byte.MIN_VALUE;
}
}

protected final void initFTENDY4(String s) {
if (!s.trim().isEmpty()) {
FTENDY4 = Short.parseShort(s);
} else {
FTENDY4 = Short.MIN_VALUE;
}
}

protected final void initFTQUALS(String s) {
if (!s.trim().isEmpty()) {
FTQUALS = Byte.parseByte(s);
} else {
FTQUALS = Byte.MIN_VALUE;
}
}

protected final void initFUTRA(String s) {
if (!s.trim().isEmpty()) {
FUTRA = Short.parseShort(s);
} else {
FUTRA = Short.MIN_VALUE;
}
}

protected final void initFUTRB(String s) {
if (!s.trim().isEmpty()) {
FUTRB = Short.parseShort(s);
} else {
FUTRB = Short.MIN_VALUE;
}
}

protected final void initFUTRC(String s) {
if (!s.trim().isEmpty()) {
FUTRC = Short.parseShort(s);
} else {
FUTRC = Short.MIN_VALUE;
}
}

protected final void initFUTRD(String s) {
if (!s.trim().isEmpty()) {
FUTRD = Short.parseShort(s);
} else {
FUTRD = Short.MIN_VALUE;
}
}

protected final void initFUTRE(String s) {
if (!s.trim().isEmpty()) {
FUTRE = Short.parseShort(s);
} else {
FUTRE = Short.MIN_VALUE;
}
}

protected final void initFUTRF(String s) {
if (!s.trim().isEmpty()) {
FUTRF = Short.parseShort(s);
} else {
FUTRF = Short.MIN_VALUE;
}
}

protected final void initFUTRG(String s) {
if (!s.trim().isEmpty()) {
FUTRG = Short.parseShort(s);
} else {
FUTRG = Short.MIN_VALUE;
}
}

protected final void initFUTRH(String s) {
if (!s.trim().isEmpty()) {
FUTRH = Short.parseShort(s);
} else {
FUTRH = Short.MIN_VALUE;
}
}

protected final void initFUTRI(String s) {
if (!s.trim().isEmpty()) {
FUTRI = Short.parseShort(s);
} else {
FUTRI = Short.MIN_VALUE;
}
}

protected final void initFUTRJ(String s) {
if (!s.trim().isEmpty()) {
FUTRJ = Short.parseShort(s);
} else {
FUTRJ = Short.MIN_VALUE;
}
}

protected final void initFUTRK(String s) {
if (!s.trim().isEmpty()) {
FUTRK = Short.parseShort(s);
} else {
FUTRK = Short.MIN_VALUE;
}
}

protected final void initFUTRL(String s) {
if (!s.trim().isEmpty()) {
FUTRL = Short.parseShort(s);
} else {
FUTRL = Short.MIN_VALUE;
}
}

protected final void initGIVECOA(String s) {
if (!s.trim().isEmpty()) {
GIVECOA = Byte.parseByte(s);
} else {
GIVECOA = Byte.MIN_VALUE;
}
}

protected final void initGRFPID(String s) {
if (!s.trim().isEmpty()) {
GRFPID = Integer.parseInt(s);
} else {
GRFPID = Integer.MIN_VALUE;
}
}

protected final void initGRFPNO(String s) {
if (!s.trim().isEmpty()) {
GRFPNO = Byte.parseByte(s);
} else {
GRFPNO = Byte.MIN_VALUE;
}
}

protected final void initGRMPID(String s) {
if (!s.trim().isEmpty()) {
GRMPID = Integer.parseInt(s);
} else {
GRMPID = Integer.MIN_VALUE;
}
}

protected final void initGRMPNO(String s) {
if (!s.trim().isEmpty()) {
GRMPNO = Byte.parseByte(s);
} else {
GRMPNO = Byte.MIN_VALUE;
}
}

protected final void initGRPBFTS(String s) {
if (!s.trim().isEmpty()) {
GRPBFTS = Byte.parseByte(s);
} else {
GRPBFTS = Byte.MIN_VALUE;
}
}

protected final void initHCONDN1(String s) {
if (!s.trim().isEmpty()) {
HCONDN1 = Byte.parseByte(s);
} else {
HCONDN1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN10(String s) {
if (!s.trim().isEmpty()) {
HCONDN10 = Byte.parseByte(s);
} else {
HCONDN10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN11(String s) {
if (!s.trim().isEmpty()) {
HCONDN11 = Byte.parseByte(s);
} else {
HCONDN11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN12(String s) {
if (!s.trim().isEmpty()) {
HCONDN12 = Byte.parseByte(s);
} else {
HCONDN12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN13(String s) {
if (!s.trim().isEmpty()) {
HCONDN13 = Byte.parseByte(s);
} else {
HCONDN13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN14(String s) {
if (!s.trim().isEmpty()) {
HCONDN14 = Byte.parseByte(s);
} else {
HCONDN14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN15(String s) {
if (!s.trim().isEmpty()) {
HCONDN15 = Byte.parseByte(s);
} else {
HCONDN15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN16(String s) {
if (!s.trim().isEmpty()) {
HCONDN16 = Byte.parseByte(s);
} else {
HCONDN16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN17(String s) {
if (!s.trim().isEmpty()) {
HCONDN17 = Byte.parseByte(s);
} else {
HCONDN17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN2(String s) {
if (!s.trim().isEmpty()) {
HCONDN2 = Byte.parseByte(s);
} else {
HCONDN2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN3(String s) {
if (!s.trim().isEmpty()) {
HCONDN3 = Byte.parseByte(s);
} else {
HCONDN3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN4(String s) {
if (!s.trim().isEmpty()) {
HCONDN4 = Byte.parseByte(s);
} else {
HCONDN4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN5(String s) {
if (!s.trim().isEmpty()) {
HCONDN5 = Byte.parseByte(s);
} else {
HCONDN5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN6(String s) {
if (!s.trim().isEmpty()) {
HCONDN6 = Byte.parseByte(s);
} else {
HCONDN6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN7(String s) {
if (!s.trim().isEmpty()) {
HCONDN7 = Byte.parseByte(s);
} else {
HCONDN7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN8(String s) {
if (!s.trim().isEmpty()) {
HCONDN8 = Byte.parseByte(s);
} else {
HCONDN8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN9(String s) {
if (!s.trim().isEmpty()) {
HCONDN9 = Byte.parseByte(s);
} else {
HCONDN9 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN96(String s) {
if (!s.trim().isEmpty()) {
HCONDN96 = Byte.parseByte(s);
} else {
HCONDN96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO1(String s) {
if (!s.trim().isEmpty()) {
HCONDNO1 = Byte.parseByte(s);
} else {
HCONDNO1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO2(String s) {
if (!s.trim().isEmpty()) {
HCONDNO2 = Byte.parseByte(s);
} else {
HCONDNO2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO3(String s) {
if (!s.trim().isEmpty()) {
HCONDNO3 = Byte.parseByte(s);
} else {
HCONDNO3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO4(String s) {
if (!s.trim().isEmpty()) {
HCONDNO4 = Byte.parseByte(s);
} else {
HCONDNO4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO5(String s) {
if (!s.trim().isEmpty()) {
HCONDNO5 = Byte.parseByte(s);
} else {
HCONDNO5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO6(String s) {
if (!s.trim().isEmpty()) {
HCONDNO6 = Byte.parseByte(s);
} else {
HCONDNO6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO7(String s) {
if (!s.trim().isEmpty()) {
HCONDNO7 = Byte.parseByte(s);
} else {
HCONDNO7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO8(String s) {
if (!s.trim().isEmpty()) {
HCONDNO8 = Byte.parseByte(s);
} else {
HCONDNO8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS1(String s) {
if (!s.trim().isEmpty()) {
HCONDNS1 = Byte.parseByte(s);
} else {
HCONDNS1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS2(String s) {
if (!s.trim().isEmpty()) {
HCONDNS2 = Byte.parseByte(s);
} else {
HCONDNS2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS3(String s) {
if (!s.trim().isEmpty()) {
HCONDNS3 = Byte.parseByte(s);
} else {
HCONDNS3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS4(String s) {
if (!s.trim().isEmpty()) {
HCONDNS4 = Byte.parseByte(s);
} else {
HCONDNS4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS5(String s) {
if (!s.trim().isEmpty()) {
HCONDNS5 = Byte.parseByte(s);
} else {
HCONDNS5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS6(String s) {
if (!s.trim().isEmpty()) {
HCONDNS6 = Byte.parseByte(s);
} else {
HCONDNS6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS7(String s) {
if (!s.trim().isEmpty()) {
HCONDNS7 = Byte.parseByte(s);
} else {
HCONDNS7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS8(String s) {
if (!s.trim().isEmpty()) {
HCONDNS8 = Byte.parseByte(s);
} else {
HCONDNS8 = Byte.MIN_VALUE;
}
}

protected final void initHEALTH(String s) {
if (!s.trim().isEmpty()) {
HEALTH = Byte.parseByte(s);
} else {
HEALTH = Byte.MIN_VALUE;
}
}

protected final void initHERFREQ(String s) {
if (!s.trim().isEmpty()) {
HERFREQ = Byte.parseByte(s);
} else {
HERFREQ = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE1(String s) {
if (!s.trim().isEmpty()) {
HERITAGE1 = Byte.parseByte(s);
} else {
HERITAGE1 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE2(String s) {
if (!s.trim().isEmpty()) {
HERITAGE2 = Byte.parseByte(s);
} else {
HERITAGE2 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE3(String s) {
if (!s.trim().isEmpty()) {
HERITAGE3 = Byte.parseByte(s);
} else {
HERITAGE3 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE4(String s) {
if (!s.trim().isEmpty()) {
HERITAGE4 = Byte.parseByte(s);
} else {
HERITAGE4 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE5(String s) {
if (!s.trim().isEmpty()) {
HERITAGE5 = Byte.parseByte(s);
} else {
HERITAGE5 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE6(String s) {
if (!s.trim().isEmpty()) {
HERITAGE6 = Byte.parseByte(s);
} else {
HERITAGE6 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE7(String s) {
if (!s.trim().isEmpty()) {
HERITAGE7 = Byte.parseByte(s);
} else {
HERITAGE7 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE8(String s) {
if (!s.trim().isEmpty()) {
HERITAGE8 = Byte.parseByte(s);
} else {
HERITAGE8 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE96(String s) {
if (!s.trim().isEmpty()) {
HERITAGE96 = Byte.parseByte(s);
} else {
HERITAGE96 = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTF(String s) {
if (!s.trim().isEmpty()) {
HGADOPTF = Byte.parseByte(s);
} else {
HGADOPTF = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTM(String s) {
if (!s.trim().isEmpty()) {
HGADOPTM = Byte.parseByte(s);
} else {
HGADOPTM = Byte.MIN_VALUE;
}
}

protected final void initHGPART(String s) {
if (!s.trim().isEmpty()) {
HGPART = Byte.parseByte(s);
} else {
HGPART = Byte.MIN_VALUE;
}
}

protected final void initHHRESP_DV(String s) {
if (!s.trim().isEmpty()) {
HHRESP_DV = Byte.parseByte(s);
} else {
HHRESP_DV = Byte.MIN_VALUE;
}
}

protected final void initHHTYPE_DV(String s) {
if (!s.trim().isEmpty()) {
HHTYPE_DV = Byte.parseByte(s);
} else {
HHTYPE_DV = Byte.MIN_VALUE;
}
}

protected final void initHOSPC1(String s) {
if (!s.trim().isEmpty()) {
HOSPC1 = Byte.parseByte(s);
} else {
HOSPC1 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC2(String s) {
if (!s.trim().isEmpty()) {
HOSPC2 = Byte.parseByte(s);
} else {
HOSPC2 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC3(String s) {
if (!s.trim().isEmpty()) {
HOSPC3 = Byte.parseByte(s);
} else {
HOSPC3 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC4(String s) {
if (!s.trim().isEmpty()) {
HOSPC4 = Byte.parseByte(s);
} else {
HOSPC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC5(String s) {
if (!s.trim().isEmpty()) {
HOSPC5 = Byte.parseByte(s);
} else {
HOSPC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC6(String s) {
if (!s.trim().isEmpty()) {
HOSPC6 = Byte.parseByte(s);
} else {
HOSPC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC7(String s) {
if (!s.trim().isEmpty()) {
HOSPC7 = Byte.parseByte(s);
} else {
HOSPC7 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC8(String s) {
if (!s.trim().isEmpty()) {
HOSPC8 = Byte.parseByte(s);
} else {
HOSPC8 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC1(String s) {
if (!s.trim().isEmpty()) {
HOSPDC1 = Short.parseShort(s);
} else {
HOSPDC1 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC2(String s) {
if (!s.trim().isEmpty()) {
HOSPDC2 = Short.parseShort(s);
} else {
HOSPDC2 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC3(String s) {
if (!s.trim().isEmpty()) {
HOSPDC3 = Short.parseShort(s);
} else {
HOSPDC3 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC4(String s) {
if (!s.trim().isEmpty()) {
HOSPDC4 = Byte.parseByte(s);
} else {
HOSPDC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC5(String s) {
if (!s.trim().isEmpty()) {
HOSPDC5 = Byte.parseByte(s);
} else {
HOSPDC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC6(String s) {
if (!s.trim().isEmpty()) {
HOSPDC6 = Byte.parseByte(s);
} else {
HOSPDC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC7(String s) {
if (!s.trim().isEmpty()) {
HOSPDC7 = Byte.parseByte(s);
} else {
HOSPDC7 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC8(String s) {
if (!s.trim().isEmpty()) {
HOSPDC8 = Byte.parseByte(s);
} else {
HOSPDC8 = Byte.MIN_VALUE;
}
}

protected final void initHOUSING(String s) {
if (!s.trim().isEmpty()) {
HOUSING = Byte.parseByte(s);
} else {
HOUSING = Byte.MIN_VALUE;
}
}

protected final void initHOWLNG(String s) {
if (!s.trim().isEmpty()) {
HOWLNG = Short.parseShort(s);
} else {
HOWLNG = Short.MIN_VALUE;
}
}

protected final void initHRPID(String s) {
if (!s.trim().isEmpty()) {
HRPID = Integer.parseInt(s);
} else {
HRPID = Integer.MIN_VALUE;
}
}

protected final void initHRPNO(String s) {
if (!s.trim().isEmpty()) {
HRPNO = Byte.parseByte(s);
} else {
HRPNO = Byte.MIN_VALUE;
}
}

protected final void initHUBOSS(String s) {
if (!s.trim().isEmpty()) {
HUBOSS = Byte.parseByte(s);
} else {
HUBOSS = Byte.MIN_VALUE;
}
}

protected final void initHUBUYS(String s) {
if (!s.trim().isEmpty()) {
HUBUYS = Short.parseShort(s);
} else {
HUBUYS = Short.MIN_VALUE;
}
}

protected final void initHUDIY(String s) {
if (!s.trim().isEmpty()) {
HUDIY = Byte.parseByte(s);
} else {
HUDIY = Byte.MIN_VALUE;
}
}

protected final void initHUFRYS(String s) {
if (!s.trim().isEmpty()) {
HUFRYS = Short.parseShort(s);
} else {
HUFRYS = Short.MIN_VALUE;
}
}

protected final void initHUIRON(String s) {
if (!s.trim().isEmpty()) {
HUIRON = Short.parseShort(s);
} else {
HUIRON = Short.MIN_VALUE;
}
}

protected final void initHUMOPS(String s) {
if (!s.trim().isEmpty()) {
HUMOPS = Short.parseShort(s);
} else {
HUMOPS = Short.MIN_VALUE;
}
}

protected final void initHUPOTS(String s) {
if (!s.trim().isEmpty()) {
HUPOTS = Byte.parseByte(s);
} else {
HUPOTS = Byte.MIN_VALUE;
}
}

protected final void initHUSITS(String s) {
if (!s.trim().isEmpty()) {
HUSITS = Short.parseShort(s);
} else {
HUSITS = Short.MIN_VALUE;
}
}

protected final void initIENDDATMM(String s) {
if (!s.trim().isEmpty()) {
IENDDATMM = Byte.parseByte(s);
} else {
IENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATSS(String s) {
if (!s.trim().isEmpty()) {
IENDDATSS = Byte.parseByte(s);
} else {
IENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initIND5MUS_LW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_LW = Double.parseDouble(s);
} else {
IND5MUS_LW = Double.NaN;
}
}

protected final void initINDIN01_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN01_LW = Double.parseDouble(s);
} else {
INDIN01_LW = Double.NaN;
}
}

protected final void initINDIN91_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN91_LW = Double.parseDouble(s);
} else {
INDIN91_LW = Double.NaN;
}
}

protected final void initINDINBH_XW(String s) {
if (!s.trim().isEmpty()) {
INDINBH_XW = Double.parseDouble(s);
} else {
INDINBH_XW = Double.NaN;
}
}

protected final void initINDINUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUS_LW = Double.parseDouble(s);
} else {
INDINUS_LW = Double.NaN;
}
}

protected final void initINDINUS_XW(String s) {
if (!s.trim().isEmpty()) {
INDINUS_XW = Double.parseDouble(s);
} else {
INDINUS_XW = Double.NaN;
}
}

protected final void initINDINUXW(String s) {
if (!s.trim().isEmpty()) {
INDINUXW = Double.parseDouble(s);
} else {
INDINUXW = Double.NaN;
}
}

protected final void initINDMODE(String s) {
if (!s.trim().isEmpty()) {
INDMODE = Byte.parseByte(s);
} else {
INDMODE = Byte.MIN_VALUE;
}
}

protected final void initINDPXBH_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXBH_XW = Double.parseDouble(s);
} else {
INDPXBH_XW = Double.NaN;
}
}

protected final void initINDPXUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUS_LW = Double.parseDouble(s);
} else {
INDPXUS_LW = Double.NaN;
}
}

protected final void initINDPXUS_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXUS_XW = Double.parseDouble(s);
} else {
INDPXUS_XW = Double.NaN;
}
}

protected final void initINDPXUXW(String s) {
if (!s.trim().isEmpty()) {
INDPXUXW = Double.parseDouble(s);
} else {
INDPXUXW = Double.NaN;
}
}

protected final void initINDSCBH_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCBH_XW = Double.parseDouble(s);
} else {
INDSCBH_XW = Double.NaN;
}
}

protected final void initINDSCUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUS_LW = Double.parseDouble(s);
} else {
INDSCUS_LW = Double.NaN;
}
}

protected final void initINDSCUS_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCUS_XW = Double.parseDouble(s);
} else {
INDSCUS_XW = Double.NaN;
}
}

protected final void initINDSCUXW(String s) {
if (!s.trim().isEmpty()) {
INDSCUXW = Double.parseDouble(s);
} else {
INDSCUXW = Double.NaN;
}
}

protected final void initINTDATD_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATD_DV = Byte.parseByte(s);
} else {
INTDATD_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATM_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATM_DV = Byte.parseByte(s);
} else {
INTDATM_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATY_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATY_DV = Short.parseShort(s);
} else {
INTDATY_DV = Short.MIN_VALUE;
}
}

protected final void initINVITRO1(String s) {
if (!s.trim().isEmpty()) {
INVITRO1 = Byte.parseByte(s);
} else {
INVITRO1 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO2(String s) {
if (!s.trim().isEmpty()) {
INVITRO2 = Byte.parseByte(s);
} else {
INVITRO2 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO3(String s) {
if (!s.trim().isEmpty()) {
INVITRO3 = Byte.parseByte(s);
} else {
INVITRO3 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO4(String s) {
if (!s.trim().isEmpty()) {
INVITRO4 = Byte.parseByte(s);
} else {
INVITRO4 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO5(String s) {
if (!s.trim().isEmpty()) {
INVITRO5 = Byte.parseByte(s);
} else {
INVITRO5 = Byte.MIN_VALUE;
}
}

protected final void initIOUTCOME(String s) {
if (!s.trim().isEmpty()) {
IOUTCOME = Byte.parseByte(s);
} else {
IOUTCOME = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATMM = Byte.parseByte(s);
} else {
ISTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATSS = Byte.parseByte(s);
} else {
ISTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initIVAFFCT11(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT11 = Byte.parseByte(s);
} else {
IVAFFCT11 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT12(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT12 = Byte.parseByte(s);
} else {
IVAFFCT12 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT13(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT13 = Byte.parseByte(s);
} else {
IVAFFCT13 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT14(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT14 = Byte.parseByte(s);
} else {
IVAFFCT14 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT15(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT15 = Byte.parseByte(s);
} else {
IVAFFCT15 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT17(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT17 = Byte.parseByte(s);
} else {
IVAFFCT17 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT21(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT21 = Byte.parseByte(s);
} else {
IVAFFCT21 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT22(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT22 = Byte.parseByte(s);
} else {
IVAFFCT22 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT23(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT23 = Byte.parseByte(s);
} else {
IVAFFCT23 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT27(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT27 = Byte.parseByte(s);
} else {
IVAFFCT27 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT30(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT30 = Byte.parseByte(s);
} else {
IVAFFCT30 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT97(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT97 = Byte.parseByte(s);
} else {
IVAFFCT97 = Byte.MIN_VALUE;
}
}

protected final void initIVCOOP(String s) {
if (!s.trim().isEmpty()) {
IVCOOP = Byte.parseByte(s);
} else {
IVCOOP = Byte.MIN_VALUE;
}
}

protected final void initIVINFNCE(String s) {
if (!s.trim().isEmpty()) {
IVINFNCE = Byte.parseByte(s);
} else {
IVINFNCE = Byte.MIN_VALUE;
}
}

protected final void initIVINTLANG(String s) {
if (!s.trim().isEmpty()) {
IVINTLANG = Byte.parseByte(s);
} else {
IVINTLANG = Byte.MIN_VALUE;
}
}

protected final void initIVTRANS(String s) {
if (!s.trim().isEmpty()) {
IVTRANS = Byte.parseByte(s);
} else {
IVTRANS = Byte.MIN_VALUE;
}
}

protected final void initIVWHOINT(String s) {
if (!s.trim().isEmpty()) {
IVWHOINT = Byte.parseByte(s);
} else {
IVWHOINT = Byte.MIN_VALUE;
}
}

protected final void initJ1BOSS(String s) {
if (!s.trim().isEmpty()) {
J1BOSS = Byte.parseByte(s);
} else {
J1BOSS = Byte.MIN_VALUE;
}
}

protected final void initJ1MNGR(String s) {
if (!s.trim().isEmpty()) {
J1MNGR = Byte.parseByte(s);
} else {
J1MNGR = Byte.MIN_VALUE;
}
}

protected final void initJ1NONE(String s) {
if (!s.trim().isEmpty()) {
J1NONE = Byte.parseByte(s);
} else {
J1NONE = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC5_DV = Byte.parseByte(s);
} else {
J1NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1SEMP(String s) {
if (!s.trim().isEmpty()) {
J1SEMP = Byte.parseByte(s);
} else {
J1SEMP = Byte.MIN_VALUE;
}
}

protected final void initJ1SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC00_CC = Short.parseShort(s);
} else {
J1SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC10_CC = Short.parseShort(s);
} else {
J1SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC90_CC = Byte.parseByte(s);
} else {
J1SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJ2NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J2NSSEC5_DV = Byte.parseByte(s);
} else {
J2NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ2PAY(String s) {
if (!s.trim().isEmpty()) {
J2PAY = Integer.parseInt(s);
} else {
J2PAY = Integer.MIN_VALUE;
}
}

protected final void initJ2PAYNET_DV(String s) {
if (!s.trim().isEmpty()) {
J2PAYNET_DV = Double.parseDouble(s);
} else {
J2PAYNET_DV = Double.NaN;
}
}

protected final void initJ2SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC00_CC = Short.parseShort(s);
} else {
J2SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC10_CC = Short.parseShort(s);
} else {
J2SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC90_CC = Short.parseShort(s);
} else {
J2SOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBATT1(String s) {
if (!s.trim().isEmpty()) {
JBATT1 = Byte.parseByte(s);
} else {
JBATT1 = Byte.MIN_VALUE;
}
}

protected final void initJBATT10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
JBATT10 = false;
} else {
JBATT10 = true;
}
}
}

protected final void initJBATT2(String s) {
if (!s.trim().isEmpty()) {
JBATT2 = Byte.parseByte(s);
} else {
JBATT2 = Byte.MIN_VALUE;
}
}

protected final void initJBATT3(String s) {
if (!s.trim().isEmpty()) {
JBATT3 = Byte.parseByte(s);
} else {
JBATT3 = Byte.MIN_VALUE;
}
}

protected final void initJBATT4(String s) {
if (!s.trim().isEmpty()) {
JBATT4 = Byte.parseByte(s);
} else {
JBATT4 = Byte.MIN_VALUE;
}
}

protected final void initJBATT5(String s) {
if (!s.trim().isEmpty()) {
JBATT5 = Byte.parseByte(s);
} else {
JBATT5 = Byte.MIN_VALUE;
}
}

protected final void initJBATT6(String s) {
if (!s.trim().isEmpty()) {
JBATT6 = Byte.parseByte(s);
} else {
JBATT6 = Byte.MIN_VALUE;
}
}

protected final void initJBATT7(String s) {
if (!s.trim().isEmpty()) {
JBATT7 = Byte.parseByte(s);
} else {
JBATT7 = Byte.MIN_VALUE;
}
}

protected final void initJBATT8(String s) {
if (!s.trim().isEmpty()) {
JBATT8 = Byte.parseByte(s);
} else {
JBATT8 = Byte.MIN_VALUE;
}
}

protected final void initJBATT9(String s) {
if (!s.trim().isEmpty()) {
JBATT9 = Byte.parseByte(s);
} else {
JBATT9 = Byte.MIN_VALUE;
}
}

protected final void initJBENDD(String s) {
if (!s.trim().isEmpty()) {
JBENDD = Byte.parseByte(s);
} else {
JBENDD = Byte.MIN_VALUE;
}
}

protected final void initJBENDM(String s) {
if (!s.trim().isEmpty()) {
JBENDM = Byte.parseByte(s);
} else {
JBENDM = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS = Byte.parseByte(s);
} else {
JBENDREAS = Byte.MIN_VALUE;
}
}

protected final void initJBENDY4(String s) {
if (!s.trim().isEmpty()) {
JBENDY4 = Short.parseShort(s);
} else {
JBENDY4 = Short.MIN_VALUE;
}
}

protected final void initJBES2000(String s) {
if (!s.trim().isEmpty()) {
JBES2000 = Byte.parseByte(s);
} else {
JBES2000 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX1(String s) {
if (!s.trim().isEmpty()) {
JBFLEX1 = Byte.parseByte(s);
} else {
JBFLEX1 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX2(String s) {
if (!s.trim().isEmpty()) {
JBFLEX2 = Byte.parseByte(s);
} else {
JBFLEX2 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX3(String s) {
if (!s.trim().isEmpty()) {
JBFLEX3 = Byte.parseByte(s);
} else {
JBFLEX3 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX4(String s) {
if (!s.trim().isEmpty()) {
JBFLEX4 = Byte.parseByte(s);
} else {
JBFLEX4 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX5(String s) {
if (!s.trim().isEmpty()) {
JBFLEX5 = Byte.parseByte(s);
} else {
JBFLEX5 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX6(String s) {
if (!s.trim().isEmpty()) {
JBFLEX6 = Byte.parseByte(s);
} else {
JBFLEX6 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX7(String s) {
if (!s.trim().isEmpty()) {
JBFLEX7 = Byte.parseByte(s);
} else {
JBFLEX7 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX8(String s) {
if (!s.trim().isEmpty()) {
JBFLEX8 = Byte.parseByte(s);
} else {
JBFLEX8 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX96(String s) {
if (!s.trim().isEmpty()) {
JBFLEX96 = Byte.parseByte(s);
} else {
JBFLEX96 = Byte.MIN_VALUE;
}
}

protected final void initJBFXINF(String s) {
if (!s.trim().isEmpty()) {
JBFXINF = Byte.parseByte(s);
} else {
JBFXINF = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE1(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE1 = Byte.parseByte(s);
} else {
JBFXUSE1 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE2(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE2 = Byte.parseByte(s);
} else {
JBFXUSE2 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE3(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE3 = Byte.parseByte(s);
} else {
JBFXUSE3 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE4(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE4 = Byte.parseByte(s);
} else {
JBFXUSE4 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE5(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE5 = Byte.parseByte(s);
} else {
JBFXUSE5 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE6(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE6 = Byte.parseByte(s);
} else {
JBFXUSE6 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE7(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE7 = Byte.parseByte(s);
} else {
JBFXUSE7 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE8(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE8 = Byte.parseByte(s);
} else {
JBFXUSE8 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE96(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE96 = Byte.parseByte(s);
} else {
JBFXUSE96 = Byte.MIN_VALUE;
}
}

protected final void initJBIINDDV(String s) {
if (!s.trim().isEmpty()) {
JBIINDDV = Byte.parseByte(s);
} else {
JBIINDDV = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHA(String s) {
if (!s.trim().isEmpty()) {
JBLKCHA = Byte.parseByte(s);
} else {
JBLKCHA = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHB(String s) {
if (!s.trim().isEmpty()) {
JBLKCHB = Byte.parseByte(s);
} else {
JBLKCHB = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHC(String s) {
if (!s.trim().isEmpty()) {
JBLKCHC = Byte.parseByte(s);
} else {
JBLKCHC = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHD(String s) {
if (!s.trim().isEmpty()) {
JBLKCHD = Byte.parseByte(s);
} else {
JBLKCHD = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHE(String s) {
if (!s.trim().isEmpty()) {
JBLKCHE = Byte.parseByte(s);
} else {
JBLKCHE = Byte.MIN_VALUE;
}
}

protected final void initJBMNGRCHK(String s) {
if (!s.trim().isEmpty()) {
JBMNGRCHK = Byte.parseByte(s);
} else {
JBMNGRCHK = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC3_DV = Byte.parseByte(s);
} else {
JBNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC5_DV = Byte.parseByte(s);
} else {
JBNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC_DV = Short.parseShort(s);
} else {
JBNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJBOFFY(String s) {
if (!s.trim().isEmpty()) {
JBOFFY = Byte.parseByte(s);
} else {
JBOFFY = Byte.MIN_VALUE;
}
}

protected final void initJBONUS(String s) {
if (!s.trim().isEmpty()) {
JBONUS = Short.parseShort(s);
} else {
JBONUS = Short.MIN_VALUE;
}
}

protected final void initJBPEN(String s) {
if (!s.trim().isEmpty()) {
JBPEN = Short.parseShort(s);
} else {
JBPEN = Short.MIN_VALUE;
}
}

protected final void initJBPENM(String s) {
if (!s.trim().isEmpty()) {
JBPENM = Short.parseShort(s);
} else {
JBPENM = Short.MIN_VALUE;
}
}

protected final void initJBPENY4(String s) {
if (!s.trim().isEmpty()) {
JBPENY4 = Short.parseShort(s);
} else {
JBPENY4 = Short.MIN_VALUE;
}
}

protected final void initJBPERFP(String s) {
if (!s.trim().isEmpty()) {
JBPERFP = Byte.parseByte(s);
} else {
JBPERFP = Byte.MIN_VALUE;
}
}

protected final void initJBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JBRGSC_DV = Short.parseShort(s);
} else {
JBRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJBRISE(String s) {
if (!s.trim().isEmpty()) {
JBRISE = Short.parseShort(s);
} else {
JBRISE = Short.MIN_VALUE;
}
}

protected final void initJBSAMR(String s) {
if (!s.trim().isEmpty()) {
JBSAMR = Byte.parseByte(s);
} else {
JBSAMR = Byte.MIN_VALUE;
}
}

protected final void initJBSAT(String s) {
if (!s.trim().isEmpty()) {
JBSAT = Byte.parseByte(s);
} else {
JBSAT = Byte.MIN_VALUE;
}
}

protected final void initJBSEC(String s) {
if (!s.trim().isEmpty()) {
JBSEC = Byte.parseByte(s);
} else {
JBSEC = Byte.MIN_VALUE;
}
}

protected final void initJBSECTPUB(String s) {
if (!s.trim().isEmpty()) {
JBSECTPUB = Byte.parseByte(s);
} else {
JBSECTPUB = Byte.MIN_VALUE;
}
}

protected final void initJBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JBSEG_DV = Short.parseShort(s);
} else {
JBSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJBSEMPCHK(String s) {
if (!s.trim().isEmpty()) {
JBSEMPCHK = Byte.parseByte(s);
} else {
JBSEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07CHK(String s) {
if (!s.trim().isEmpty()) {
JBSIC07CHK = Byte.parseByte(s);
} else {
JBSIC07CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JBSIC07_CC = Byte.parseByte(s);
} else {
JBSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJBSIZECHK(String s) {
if (!s.trim().isEmpty()) {
JBSIZECHK = Byte.parseByte(s);
} else {
JBSIZECHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00CHK(String s) {
if (!s.trim().isEmpty()) {
JBSOC00CHK = Byte.parseByte(s);
} else {
JBSOC00CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC00_CC = Short.parseShort(s);
} else {
JBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOCGR_DV(String s) {
if (!s.trim().isEmpty()) {
JBSOCGR_DV = Byte.parseByte(s);
} else {
JBSOCGR_DV = Byte.MIN_VALUE;
}
}

protected final void initJBTERM1(String s) {
if (!s.trim().isEmpty()) {
JBTERM1 = Byte.parseByte(s);
} else {
JBTERM1 = Byte.MIN_VALUE;
}
}

protected final void initJBTERM2(String s) {
if (!s.trim().isEmpty()) {
JBTERM2 = Byte.parseByte(s);
} else {
JBTERM2 = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHA(String s) {
if (!s.trim().isEmpty()) {
JBXPCHA = Byte.parseByte(s);
} else {
JBXPCHA = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHB(String s) {
if (!s.trim().isEmpty()) {
JBXPCHB = Byte.parseByte(s);
} else {
JBXPCHB = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHC(String s) {
if (!s.trim().isEmpty()) {
JBXPCHC = Byte.parseByte(s);
} else {
JBXPCHC = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHD(String s) {
if (!s.trim().isEmpty()) {
JBXPCHD = Byte.parseByte(s);
} else {
JBXPCHD = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHE(String s) {
if (!s.trim().isEmpty()) {
JBXPCHE = Byte.parseByte(s);
} else {
JBXPCHE = Byte.MIN_VALUE;
}
}

protected final void initJLENDM(String s) {
if (!s.trim().isEmpty()) {
JLENDM = Byte.parseByte(s);
} else {
JLENDM = Byte.MIN_VALUE;
}
}

protected final void initJLES2000(String s) {
if (!s.trim().isEmpty()) {
JLES2000 = Byte.parseByte(s);
} else {
JLES2000 = Byte.MIN_VALUE;
}
}

protected final void initJLIINDDV(String s) {
if (!s.trim().isEmpty()) {
JLIINDDV = Byte.parseByte(s);
} else {
JLIINDDV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC3_DV = Byte.parseByte(s);
} else {
JLNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC5_DV = Byte.parseByte(s);
} else {
JLNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC_DV = Short.parseShort(s);
} else {
JLNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JLRGSC_DV = Short.parseShort(s);
} else {
JLRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JLSEG_DV = Short.parseShort(s);
} else {
JLSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJLSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JLSIC07_CC = Byte.parseByte(s);
} else {
JLSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJLSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC00_CC = Short.parseShort(s);
} else {
JLSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJOBHOURS1(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS1 = Byte.parseByte(s);
} else {
JOBHOURS1 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
JOBHOURS10 = false;
} else {
JOBHOURS10 = true;
}
}
}

protected final void initJOBHOURS2(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS2 = Byte.parseByte(s);
} else {
JOBHOURS2 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS3(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS3 = Byte.parseByte(s);
} else {
JOBHOURS3 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS4(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS4 = Byte.parseByte(s);
} else {
JOBHOURS4 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS5(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS5 = Byte.parseByte(s);
} else {
JOBHOURS5 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS6(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS6 = Byte.parseByte(s);
} else {
JOBHOURS6 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS7(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS7 = Byte.parseByte(s);
} else {
JOBHOURS7 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS8(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS8 = Byte.parseByte(s);
} else {
JOBHOURS8 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS9(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS9 = Byte.parseByte(s);
} else {
JOBHOURS9 = Byte.MIN_VALUE;
}
}

protected final void initJSPART(String s) {
if (!s.trim().isEmpty()) {
JSPART = Byte.parseByte(s);
} else {
JSPART = Byte.MIN_VALUE;
}
}

protected final void initJSPAYU(String s) {
if (!s.trim().isEmpty()) {
JSPAYU = Integer.parseInt(s);
} else {
JSPAYU = Integer.MIN_VALUE;
}
}

protected final void initJSPAYW(String s) {
if (!s.trim().isEmpty()) {
JSPAYW = Byte.parseByte(s);
} else {
JSPAYW = Byte.MIN_VALUE;
}
}

protected final void initJSPRLS(String s) {
if (!s.trim().isEmpty()) {
JSPRLS = Byte.parseByte(s);
} else {
JSPRLS = Byte.MIN_VALUE;
}
}

protected final void initJSPRNI(String s) {
if (!s.trim().isEmpty()) {
JSPRNI = Byte.parseByte(s);
} else {
JSPRNI = Byte.MIN_VALUE;
}
}

protected final void initJSPRTX(String s) {
if (!s.trim().isEmpty()) {
JSPRTX = Byte.parseByte(s);
} else {
JSPRTX = Byte.MIN_VALUE;
}
}

protected final void initJSPYNI(String s) {
if (!s.trim().isEmpty()) {
JSPYNI = Byte.parseByte(s);
} else {
JSPYNI = Byte.MIN_VALUE;
}
}

protected final void initJSPYTX(String s) {
if (!s.trim().isEmpty()) {
JSPYTX = Byte.parseByte(s);
} else {
JSPYTX = Byte.MIN_VALUE;
}
}

protected final void initJSTYPEB(String s) {
if (!s.trim().isEmpty()) {
JSTYPEB = Byte.parseByte(s);
} else {
JSTYPEB = Byte.MIN_VALUE;
}
}

protected final void initJSWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
JSWORKTRAV = Byte.parseByte(s);
} else {
JSWORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initJUBGN(String s) {
if (!s.trim().isEmpty()) {
JUBGN = Short.parseShort(s);
} else {
JUBGN = Short.MIN_VALUE;
}
}

protected final void initJULK4X1(String s) {
if (!s.trim().isEmpty()) {
JULK4X1 = Short.parseShort(s);
} else {
JULK4X1 = Short.MIN_VALUE;
}
}

protected final void initJULK4X2(String s) {
if (!s.trim().isEmpty()) {
JULK4X2 = Short.parseShort(s);
} else {
JULK4X2 = Short.MIN_VALUE;
}
}

protected final void initJULK4X3(String s) {
if (!s.trim().isEmpty()) {
JULK4X3 = Byte.parseByte(s);
} else {
JULK4X3 = Byte.MIN_VALUE;
}
}

protected final void initJULK4X4(String s) {
if (!s.trim().isEmpty()) {
JULK4X4 = Short.parseShort(s);
} else {
JULK4X4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X5(String s) {
if (!s.trim().isEmpty()) {
JULK4X5 = Short.parseShort(s);
} else {
JULK4X5 = Short.MIN_VALUE;
}
}

protected final void initJULK4X6(String s) {
if (!s.trim().isEmpty()) {
JULK4X6 = Short.parseShort(s);
} else {
JULK4X6 = Short.MIN_VALUE;
}
}

protected final void initJULK4X96(String s) {
if (!s.trim().isEmpty()) {
JULK4X96 = Byte.parseByte(s);
} else {
JULK4X96 = Byte.MIN_VALUE;
}
}

protected final void initJWBS1_DV(String s) {
if (!s.trim().isEmpty()) {
JWBS1_DV = Byte.parseByte(s);
} else {
JWBS1_DV = Byte.MIN_VALUE;
}
}

protected final void initJWBS2_DV(String s) {
if (!s.trim().isEmpty()) {
JWBS2_DV = Byte.parseByte(s);
} else {
JWBS2_DV = Byte.MIN_VALUE;
}
}

protected final void initKIDLANG(String s) {
if (!s.trim().isEmpty()) {
KIDLANG = Byte.parseByte(s);
} else {
KIDLANG = Byte.MIN_VALUE;
}
}

protected final void initLADOPT(String s) {
if (!s.trim().isEmpty()) {
LADOPT = Byte.parseByte(s);
} else {
LADOPT = Byte.MIN_VALUE;
}
}

protected final void initLASTMSTATCH1(String s) {
if (!s.trim().isEmpty()) {
LASTMSTATCH1 = Byte.parseByte(s);
} else {
LASTMSTATCH1 = Byte.MIN_VALUE;
}
}

protected final void initLASTMSTATCH2(String s) {
if (!s.trim().isEmpty()) {
LASTMSTATCH2 = Byte.parseByte(s);
} else {
LASTMSTATCH2 = Byte.MIN_VALUE;
}
}

protected final void initLASTMSTATCH3(String s) {
if (!s.trim().isEmpty()) {
LASTMSTATCH3 = Byte.parseByte(s);
} else {
LASTMSTATCH3 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI1(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI1 = Byte.parseByte(s);
} else {
LCHMULTI1 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI2(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI2 = Byte.parseByte(s);
} else {
LCHMULTI2 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI3(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI3 = Byte.parseByte(s);
} else {
LCHMULTI3 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI4(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI4 = Byte.parseByte(s);
} else {
LCHMULTI4 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI5(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI5 = Byte.parseByte(s);
} else {
LCHMULTI5 = Byte.MIN_VALUE;
}
}

protected final void initLCOHNPI(String s) {
if (!s.trim().isEmpty()) {
LCOHNPI = Byte.parseByte(s);
} else {
LCOHNPI = Byte.MIN_VALUE;
}
}

protected final void initLENINDINTV(String s) {
if (!s.trim().isEmpty()) {
LENINDINTV = Double.parseDouble(s);
} else {
LENINDINTV = Double.NaN;
}
}

protected final void initLIBFREQ(String s) {
if (!s.trim().isEmpty()) {
LIBFREQ = Byte.parseByte(s);
} else {
LIBFREQ = Byte.MIN_VALUE;
}
}

protected final void initLIFTHH(String s) {
if (!s.trim().isEmpty()) {
LIFTHH = Byte.parseByte(s);
} else {
LIFTHH = Byte.MIN_VALUE;
}
}

protected final void initLIFTXHH(String s) {
if (!s.trim().isEmpty()) {
LIFTXHH = Byte.parseByte(s);
} else {
LIFTXHH = Byte.MIN_VALUE;
}
}

protected final void initLINGUA(String s) {
if (!s.trim().isEmpty()) {
LINGUA = Byte.parseByte(s);
} else {
LINGUA = Byte.MIN_VALUE;
}
}

protected final void initLIVESP(String s) {
if (!s.trim().isEmpty()) {
LIVESP = Byte.parseByte(s);
} else {
LIVESP = Byte.MIN_VALUE;
}
}

protected final void initLIVESP_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
LIVESP_DV = false;
} else {
LIVESP_DV = true;
}
}
}

protected final void initLIVEWITH(String s) {
if (!s.trim().isEmpty()) {
LIVEWITH = Byte.parseByte(s);
} else {
LIVEWITH = Byte.MIN_VALUE;
}
}

protected final void initLMAR1M(String s) {
if (!s.trim().isEmpty()) {
LMAR1M = Byte.parseByte(s);
} else {
LMAR1M = Byte.MIN_VALUE;
}
}

protected final void initLMAR1Y(String s) {
if (!s.trim().isEmpty()) {
LMAR1Y = Short.parseShort(s);
} else {
LMAR1Y = Short.MIN_VALUE;
}
}

protected final void initLMCBM1(String s) {
if (!s.trim().isEmpty()) {
LMCBM1 = Byte.parseByte(s);
} else {
LMCBM1 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM2(String s) {
if (!s.trim().isEmpty()) {
LMCBM2 = Byte.parseByte(s);
} else {
LMCBM2 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM3(String s) {
if (!s.trim().isEmpty()) {
LMCBM3 = Byte.parseByte(s);
} else {
LMCBM3 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM4(String s) {
if (!s.trim().isEmpty()) {
LMCBM4 = Byte.parseByte(s);
} else {
LMCBM4 = Byte.MIN_VALUE;
}
}

protected final void initLMCBY41(String s) {
if (!s.trim().isEmpty()) {
LMCBY41 = Short.parseShort(s);
} else {
LMCBY41 = Short.MIN_VALUE;
}
}

protected final void initLMCBY42(String s) {
if (!s.trim().isEmpty()) {
LMCBY42 = Short.parseShort(s);
} else {
LMCBY42 = Short.MIN_VALUE;
}
}

protected final void initLMCBY43(String s) {
if (!s.trim().isEmpty()) {
LMCBY43 = Short.parseShort(s);
} else {
LMCBY43 = Short.MIN_VALUE;
}
}

protected final void initLMCBY44(String s) {
if (!s.trim().isEmpty()) {
LMCBY44 = Short.parseShort(s);
} else {
LMCBY44 = Short.MIN_VALUE;
}
}

protected final void initLMSPM1(String s) {
if (!s.trim().isEmpty()) {
LMSPM1 = Byte.parseByte(s);
} else {
LMSPM1 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM2(String s) {
if (!s.trim().isEmpty()) {
LMSPM2 = Byte.parseByte(s);
} else {
LMSPM2 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM3(String s) {
if (!s.trim().isEmpty()) {
LMSPM3 = Byte.parseByte(s);
} else {
LMSPM3 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM4(String s) {
if (!s.trim().isEmpty()) {
LMSPM4 = Byte.parseByte(s);
} else {
LMSPM4 = Byte.MIN_VALUE;
}
}

protected final void initLMSPY41(String s) {
if (!s.trim().isEmpty()) {
LMSPY41 = Short.parseShort(s);
} else {
LMSPY41 = Short.MIN_VALUE;
}
}

protected final void initLMSPY42(String s) {
if (!s.trim().isEmpty()) {
LMSPY42 = Short.parseShort(s);
} else {
LMSPY42 = Short.MIN_VALUE;
}
}

protected final void initLMSPY43(String s) {
if (!s.trim().isEmpty()) {
LMSPY43 = Short.parseShort(s);
} else {
LMSPY43 = Short.MIN_VALUE;
}
}

protected final void initLMSPY44(String s) {
if (!s.trim().isEmpty()) {
LMSPY44 = Short.parseShort(s);
} else {
LMSPY44 = Short.MIN_VALUE;
}
}

protected final void initLNADOPT(String s) {
if (!s.trim().isEmpty()) {
LNADOPT = Byte.parseByte(s);
} else {
LNADOPT = Byte.MIN_VALUE;
}
}

protected final void initLNPRNT(String s) {
if (!s.trim().isEmpty()) {
LNPRNT = Byte.parseByte(s);
} else {
LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initLPRNT(String s) {
if (!s.trim().isEmpty()) {
LPRNT = Byte.parseByte(s);
} else {
LPRNT = Byte.MIN_VALUE;
}
}

protected final void initLVMTHP(String s) {
if (!s.trim().isEmpty()) {
LVMTHP = Byte.parseByte(s);
} else {
LVMTHP = Byte.MIN_VALUE;
}
}

protected final void initLVWHY(String s) {
if (!s.trim().isEmpty()) {
LVWHY = Byte.parseByte(s);
} else {
LVWHY = Byte.MIN_VALUE;
}
}

protected final void initLVYRP(String s) {
if (!s.trim().isEmpty()) {
LVYRP = Short.parseShort(s);
} else {
LVYRP = Short.MIN_VALUE;
}
}

protected final void initLWWRONG(String s) {
if (!s.trim().isEmpty()) {
LWWRONG = Byte.parseByte(s);
} else {
LWWRONG = Byte.MIN_VALUE;
}
}

protected final void initMACOB(String s) {
if (!s.trim().isEmpty()) {
MACOB = Byte.parseByte(s);
} else {
MACOB = Byte.MIN_VALUE;
}
}

protected final void initMAEDQF(String s) {
if (!s.trim().isEmpty()) {
MAEDQF = Byte.parseByte(s);
} else {
MAEDQF = Byte.MIN_VALUE;
}
}

protected final void initMAJU(String s) {
if (!s.trim().isEmpty()) {
MAJU = Byte.parseByte(s);
} else {
MAJU = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC5_DV = Byte.parseByte(s);
} else {
MANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initMARSTAT(String s) {
if (!s.trim().isEmpty()) {
MARSTAT = Byte.parseByte(s);
} else {
MARSTAT = Byte.MIN_VALUE;
}
}

protected final void initMASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC00_CC = Short.parseShort(s);
} else {
MASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC10_CC = Short.parseShort(s);
} else {
MASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC90_CC = Byte.parseByte(s);
} else {
MASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMASTAT_DV(String s) {
if (!s.trim().isEmpty()) {
MASTAT_DV = Byte.parseByte(s);
} else {
MASTAT_DV = Byte.MIN_VALUE;
}
}

protected final void initMATLV(String s) {
if (!s.trim().isEmpty()) {
MATLV = Byte.parseByte(s);
} else {
MATLV = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDD(String s) {
if (!s.trim().isEmpty()) {
MATLVENDD = Byte.parseByte(s);
} else {
MATLVENDD = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDM(String s) {
if (!s.trim().isEmpty()) {
MATLVENDM = Byte.parseByte(s);
} else {
MATLVENDM = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDY4(String s) {
if (!s.trim().isEmpty()) {
MATLVENDY4 = Short.parseShort(s);
} else {
MATLVENDY4 = Short.MIN_VALUE;
}
}

protected final void initMATLVSTD(String s) {
if (!s.trim().isEmpty()) {
MATLVSTD = Byte.parseByte(s);
} else {
MATLVSTD = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTM(String s) {
if (!s.trim().isEmpty()) {
MATLVSTM = Byte.parseByte(s);
} else {
MATLVSTM = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTY4(String s) {
if (!s.trim().isEmpty()) {
MATLVSTY4 = Short.parseShort(s);
} else {
MATLVSTY4 = Short.MIN_VALUE;
}
}

protected final void initMAYRUK(String s) {
if (!s.trim().isEmpty()) {
MAYRUK = Byte.parseByte(s);
} else {
MAYRUK = Byte.MIN_VALUE;
}
}

protected final void initMEMPLOY(String s) {
if (!s.trim().isEmpty()) {
MEMPLOY = Byte.parseByte(s);
} else {
MEMPLOY = Byte.MIN_VALUE;
}
}

protected final void initMLA1(String s) {
if (!s.trim().isEmpty()) {
MLA1 = Byte.parseByte(s);
} else {
MLA1 = Byte.MIN_VALUE;
}
}

protected final void initMLA2(String s) {
if (!s.trim().isEmpty()) {
MLA2 = Byte.parseByte(s);
} else {
MLA2 = Byte.MIN_VALUE;
}
}

protected final void initMLA3(String s) {
if (!s.trim().isEmpty()) {
MLA3 = Byte.parseByte(s);
} else {
MLA3 = Byte.MIN_VALUE;
}
}

protected final void initMLA96(String s) {
if (!s.trim().isEmpty()) {
MLA96 = Byte.parseByte(s);
} else {
MLA96 = Byte.MIN_VALUE;
}
}

protected final void initMLSTATCHK(String s) {
if (!s.trim().isEmpty()) {
MLSTATCHK = Byte.parseByte(s);
} else {
MLSTATCHK = Byte.MIN_VALUE;
}
}

protected final void initMNPID(String s) {
if (!s.trim().isEmpty()) {
MNPID = Integer.parseInt(s);
} else {
MNPID = Integer.MIN_VALUE;
}
}

protected final void initMNPNO(String s) {
if (!s.trim().isEmpty()) {
MNPNO = Byte.parseByte(s);
} else {
MNPNO = Byte.MIN_VALUE;
}
}

protected final void initMNSPID(String s) {
if (!s.trim().isEmpty()) {
MNSPID = Integer.parseInt(s);
} else {
MNSPID = Integer.MIN_VALUE;
}
}

protected final void initMNSPNO(String s) {
if (!s.trim().isEmpty()) {
MNSPNO = Byte.parseByte(s);
} else {
MNSPNO = Byte.MIN_VALUE;
}
}

protected final void initMOBUSE(String s) {
if (!s.trim().isEmpty()) {
MOBUSE = Byte.parseByte(s);
} else {
MOBUSE = Byte.MIN_VALUE;
}
}

protected final void initMONTH(String s) {
if (!s.trim().isEmpty()) {
MONTH = Byte.parseByte(s);
} else {
MONTH = Byte.MIN_VALUE;
}
}

protected final void initMOTCYC(String s) {
if (!s.trim().isEmpty()) {
MOTCYC = Byte.parseByte(s);
} else {
MOTCYC = Byte.MIN_VALUE;
}
}

protected final void initMOVDIR(String s) {
if (!s.trim().isEmpty()) {
MOVDIR = Byte.parseByte(s);
} else {
MOVDIR = Byte.MIN_VALUE;
}
}

protected final void initMOVEOTH_CODE(String s) {
if (!s.trim().isEmpty()) {
MOVEOTH_CODE = Byte.parseByte(s);
} else {
MOVEOTH_CODE = Byte.MIN_VALUE;
}
}

protected final void initMOVY11(String s) {
if (!s.trim().isEmpty()) {
MOVY11 = Byte.parseByte(s);
} else {
MOVY11 = Byte.MIN_VALUE;
}
}

protected final void initMOVY12(String s) {
if (!s.trim().isEmpty()) {
MOVY12 = Byte.parseByte(s);
} else {
MOVY12 = Byte.MIN_VALUE;
}
}

protected final void initMOVY13(String s) {
if (!s.trim().isEmpty()) {
MOVY13 = Byte.parseByte(s);
} else {
MOVY13 = Byte.MIN_VALUE;
}
}

protected final void initMOVY14(String s) {
if (!s.trim().isEmpty()) {
MOVY14 = Byte.parseByte(s);
} else {
MOVY14 = Byte.MIN_VALUE;
}
}

protected final void initMOVY15(String s) {
if (!s.trim().isEmpty()) {
MOVY15 = Byte.parseByte(s);
} else {
MOVY15 = Byte.MIN_VALUE;
}
}

protected final void initMOVY16(String s) {
if (!s.trim().isEmpty()) {
MOVY16 = Byte.parseByte(s);
} else {
MOVY16 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH1(String s) {
if (!s.trim().isEmpty()) {
MSTATCH1 = Byte.parseByte(s);
} else {
MSTATCH1 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH2(String s) {
if (!s.trim().isEmpty()) {
MSTATCH2 = Byte.parseByte(s);
} else {
MSTATCH2 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH3(String s) {
if (!s.trim().isEmpty()) {
MSTATCH3 = Byte.parseByte(s);
} else {
MSTATCH3 = Byte.MIN_VALUE;
}
}

protected final void initMSTATSAM(String s) {
if (!s.trim().isEmpty()) {
MSTATSAM = Short.parseShort(s);
} else {
MSTATSAM = Short.MIN_VALUE;
}
}

protected final void initMSTATSAMN(String s) {
if (!s.trim().isEmpty()) {
MSTATSAMN = Byte.parseByte(s);
} else {
MSTATSAMN = Byte.MIN_VALUE;
}
}

protected final void initMUSFREQ(String s) {
if (!s.trim().isEmpty()) {
MUSFREQ = Byte.parseByte(s);
} else {
MUSFREQ = Byte.MIN_VALUE;
}
}

protected final void initMVEVER(String s) {
if (!s.trim().isEmpty()) {
MVEVER = Byte.parseByte(s);
} else {
MVEVER = Byte.MIN_VALUE;
}
}

protected final void initMVMNTH(String s) {
if (!s.trim().isEmpty()) {
MVMNTH = Byte.parseByte(s);
} else {
MVMNTH = Byte.MIN_VALUE;
}
}

protected final void initMVYR(String s) {
if (!s.trim().isEmpty()) {
MVYR = Short.parseShort(s);
} else {
MVYR = Short.MIN_VALUE;
}
}

protected final void initNADOPTCH(String s) {
if (!s.trim().isEmpty()) {
NADOPTCH = Byte.parseByte(s);
} else {
NADOPTCH = Byte.MIN_VALUE;
}
}

protected final void initNAIDXHH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH = Byte.parseByte(s);
} else {
NAIDXHH = Byte.MIN_VALUE;
}
}

protected final void initNATCH01(String s) {
if (!s.trim().isEmpty()) {
NATCH01 = Byte.parseByte(s);
} else {
NATCH01 = Byte.MIN_VALUE;
}
}

protected final void initNATCH02(String s) {
if (!s.trim().isEmpty()) {
NATCH02 = Byte.parseByte(s);
} else {
NATCH02 = Byte.MIN_VALUE;
}
}

protected final void initNATCH03(String s) {
if (!s.trim().isEmpty()) {
NATCH03 = Byte.parseByte(s);
} else {
NATCH03 = Byte.MIN_VALUE;
}
}

protected final void initNATCH04(String s) {
if (!s.trim().isEmpty()) {
NATCH04 = Byte.parseByte(s);
} else {
NATCH04 = Byte.MIN_VALUE;
}
}

protected final void initNATCH05(String s) {
if (!s.trim().isEmpty()) {
NATCH05 = Byte.parseByte(s);
} else {
NATCH05 = Byte.MIN_VALUE;
}
}

protected final void initNATCH06(String s) {
if (!s.trim().isEmpty()) {
NATCH06 = Byte.parseByte(s);
} else {
NATCH06 = Byte.MIN_VALUE;
}
}

protected final void initNATCH07(String s) {
if (!s.trim().isEmpty()) {
NATCH07 = Byte.parseByte(s);
} else {
NATCH07 = Byte.MIN_VALUE;
}
}

protected final void initNATCH08(String s) {
if (!s.trim().isEmpty()) {
NATCH08 = Byte.parseByte(s);
} else {
NATCH08 = Byte.MIN_VALUE;
}
}

protected final void initNATCH09(String s) {
if (!s.trim().isEmpty()) {
NATCH09 = Byte.parseByte(s);
} else {
NATCH09 = Byte.MIN_VALUE;
}
}

protected final void initNATCH10(String s) {
if (!s.trim().isEmpty()) {
NATCH10 = Byte.parseByte(s);
} else {
NATCH10 = Byte.MIN_VALUE;
}
}

protected final void initNATCH11(String s) {
if (!s.trim().isEmpty()) {
NATCH11 = Byte.parseByte(s);
} else {
NATCH11 = Byte.MIN_VALUE;
}
}

protected final void initNATCH12(String s) {
if (!s.trim().isEmpty()) {
NATCH12 = Byte.parseByte(s);
} else {
NATCH12 = Byte.MIN_VALUE;
}
}

protected final void initNATCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH13 = false;
} else {
NATCH13 = true;
}
}
}

protected final void initNATCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH14 = false;
} else {
NATCH14 = true;
}
}
}

protected final void initNATCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH15 = false;
} else {
NATCH15 = true;
}
}
}

protected final void initNATCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH16 = false;
} else {
NATCH16 = true;
}
}
}

protected final void initNATID1(String s) {
if (!s.trim().isEmpty()) {
NATID1 = Byte.parseByte(s);
} else {
NATID1 = Byte.MIN_VALUE;
}
}

protected final void initNATID2(String s) {
if (!s.trim().isEmpty()) {
NATID2 = Byte.parseByte(s);
} else {
NATID2 = Byte.MIN_VALUE;
}
}

protected final void initNATID3(String s) {
if (!s.trim().isEmpty()) {
NATID3 = Byte.parseByte(s);
} else {
NATID3 = Byte.MIN_VALUE;
}
}

protected final void initNATID4(String s) {
if (!s.trim().isEmpty()) {
NATID4 = Byte.parseByte(s);
} else {
NATID4 = Byte.MIN_VALUE;
}
}

protected final void initNATID5(String s) {
if (!s.trim().isEmpty()) {
NATID5 = Byte.parseByte(s);
} else {
NATID5 = Byte.MIN_VALUE;
}
}

protected final void initNATID6(String s) {
if (!s.trim().isEmpty()) {
NATID6 = Byte.parseByte(s);
} else {
NATID6 = Byte.MIN_VALUE;
}
}

protected final void initNATID97(String s) {
if (!s.trim().isEmpty()) {
NATID97 = Byte.parseByte(s);
} else {
NATID97 = Byte.MIN_VALUE;
}
}

protected final void initNCH10TO15(String s) {
if (!s.trim().isEmpty()) {
NCH10TO15 = Byte.parseByte(s);
} else {
NCH10TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH14RESP(String s) {
if (!s.trim().isEmpty()) {
NCH14RESP = Byte.parseByte(s);
} else {
NCH14RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH415RESP(String s) {
if (!s.trim().isEmpty()) {
NCH415RESP = Byte.parseByte(s);
} else {
NCH415RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5TO15(String s) {
if (!s.trim().isEmpty()) {
NCH5TO15 = Byte.parseByte(s);
} else {
NCH5TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCHILD(String s) {
if (!s.trim().isEmpty()) {
NCHILD = Byte.parseByte(s);
} else {
NCHILD = Byte.MIN_VALUE;
}
}

protected final void initNCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHILD_DV = Short.parseShort(s);
} else {
NCHILD_DV = Short.MIN_VALUE;
}
}

protected final void initNCHRESP(String s) {
if (!s.trim().isEmpty()) {
NCHRESP = Byte.parseByte(s);
} else {
NCHRESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUND18RESP(String s) {
if (!s.trim().isEmpty()) {
NCHUND18RESP = Byte.parseByte(s);
} else {
NCHUND18RESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUNDER16(String s) {
if (!s.trim().isEmpty()) {
NCHUNDER16 = Byte.parseByte(s);
} else {
NCHUNDER16 = Byte.MIN_VALUE;
}
}

protected final void initNCIGS(String s) {
if (!s.trim().isEmpty()) {
NCIGS = Short.parseShort(s);
} else {
NCIGS = Short.MIN_VALUE;
}
}

protected final void initNDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
NDEPCHL_DV = Byte.parseByte(s);
} else {
NDEPCHL_DV = Byte.MIN_VALUE;
}
}

protected final void initNETUSE(String s) {
if (!s.trim().isEmpty()) {
NETUSE = Byte.parseByte(s);
} else {
NETUSE = Byte.MIN_VALUE;
}
}

protected final void initNEWENTRANT(String s) {
if (!s.trim().isEmpty()) {
NEWENTRANT = Byte.parseByte(s);
} else {
NEWENTRANT = Byte.MIN_VALUE;
}
}

protected final void initNEWPER(String s) {
if (!s.trim().isEmpty()) {
NEWPER = Byte.parseByte(s);
} else {
NEWPER = Byte.MIN_VALUE;
}
}

protected final void initNEXT(String s) {
if (!s.trim().isEmpty()) {
NEXT = Byte.parseByte(s);
} else {
NEXT = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE1(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE1 = Byte.parseByte(s);
} else {
NEXTELSE1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE10(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE10 = Byte.parseByte(s);
} else {
NEXTELSE10 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE2(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE2 = Byte.parseByte(s);
} else {
NEXTELSE2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE3(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE3 = Byte.parseByte(s);
} else {
NEXTELSE3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE4(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE4 = Byte.parseByte(s);
} else {
NEXTELSE4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE5(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE5 = Byte.parseByte(s);
} else {
NEXTELSE5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE6(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE6 = Byte.parseByte(s);
} else {
NEXTELSE6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE7(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE7 = Byte.parseByte(s);
} else {
NEXTELSE7 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE8(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE8 = Byte.parseByte(s);
} else {
NEXTELSE8 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
NEXTELSE9 = false;
} else {
NEXTELSE9 = true;
}
}
}

protected final void initNEXTJOB1(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB1 = Byte.parseByte(s);
} else {
NEXTJOB1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
NEXTJOB10 = false;
} else {
NEXTJOB10 = true;
}
}
}

protected final void initNEXTJOB2(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB2 = Byte.parseByte(s);
} else {
NEXTJOB2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB3(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB3 = Byte.parseByte(s);
} else {
NEXTJOB3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB4(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB4 = Byte.parseByte(s);
} else {
NEXTJOB4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB5(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB5 = Byte.parseByte(s);
} else {
NEXTJOB5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB6(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB6 = Byte.parseByte(s);
} else {
NEXTJOB6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB7(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB7 = Byte.parseByte(s);
} else {
NEXTJOB7 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB8(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB8 = Byte.parseByte(s);
} else {
NEXTJOB8 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB9(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB9 = Byte.parseByte(s);
} else {
NEXTJOB9 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT1(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT1 = Byte.parseByte(s);
} else {
NEXTSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT10(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT10 = Byte.parseByte(s);
} else {
NEXTSTAT10 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT2(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT2 = Byte.parseByte(s);
} else {
NEXTSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT3(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT3 = Byte.parseByte(s);
} else {
NEXTSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT4(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT4 = Byte.parseByte(s);
} else {
NEXTSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT5(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT5 = Byte.parseByte(s);
} else {
NEXTSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT6(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT6 = Byte.parseByte(s);
} else {
NEXTSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT7(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT7 = Byte.parseByte(s);
} else {
NEXTSTAT7 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT8(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT8 = Byte.parseByte(s);
} else {
NEXTSTAT8 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT9(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT9 = Byte.parseByte(s);
} else {
NEXTSTAT9 = Byte.MIN_VALUE;
}
}

protected final void initNFH01(String s) {
if (!s.trim().isEmpty()) {
NFH01 = Byte.parseByte(s);
} else {
NFH01 = Byte.MIN_VALUE;
}
}

protected final void initNFH02(String s) {
if (!s.trim().isEmpty()) {
NFH02 = Byte.parseByte(s);
} else {
NFH02 = Byte.MIN_VALUE;
}
}

protected final void initNFH03(String s) {
if (!s.trim().isEmpty()) {
NFH03 = Byte.parseByte(s);
} else {
NFH03 = Byte.MIN_VALUE;
}
}

protected final void initNFH04(String s) {
if (!s.trim().isEmpty()) {
NFH04 = Byte.parseByte(s);
} else {
NFH04 = Byte.MIN_VALUE;
}
}

protected final void initNFH05(String s) {
if (!s.trim().isEmpty()) {
NFH05 = Byte.parseByte(s);
} else {
NFH05 = Byte.MIN_VALUE;
}
}

protected final void initNFH06(String s) {
if (!s.trim().isEmpty()) {
NFH06 = Byte.parseByte(s);
} else {
NFH06 = Byte.MIN_VALUE;
}
}

protected final void initNFH07(String s) {
if (!s.trim().isEmpty()) {
NFH07 = Byte.parseByte(s);
} else {
NFH07 = Byte.MIN_VALUE;
}
}

protected final void initNFH08(String s) {
if (!s.trim().isEmpty()) {
NFH08 = Byte.parseByte(s);
} else {
NFH08 = Byte.MIN_VALUE;
}
}

protected final void initNFH09(String s) {
if (!s.trim().isEmpty()) {
NFH09 = Byte.parseByte(s);
} else {
NFH09 = Byte.MIN_VALUE;
}
}

protected final void initNFH10(String s) {
if (!s.trim().isEmpty()) {
NFH10 = Byte.parseByte(s);
} else {
NFH10 = Byte.MIN_VALUE;
}
}

protected final void initNFH11(String s) {
if (!s.trim().isEmpty()) {
NFH11 = Byte.parseByte(s);
} else {
NFH11 = Byte.MIN_VALUE;
}
}

protected final void initNFH12(String s) {
if (!s.trim().isEmpty()) {
NFH12 = Byte.parseByte(s);
} else {
NFH12 = Byte.MIN_VALUE;
}
}

protected final void initNFH13(String s) {
if (!s.trim().isEmpty()) {
NFH13 = Byte.parseByte(s);
} else {
NFH13 = Byte.MIN_VALUE;
}
}

protected final void initNFH14(String s) {
if (!s.trim().isEmpty()) {
NFH14 = Byte.parseByte(s);
} else {
NFH14 = Byte.MIN_VALUE;
}
}

protected final void initNFH15(String s) {
if (!s.trim().isEmpty()) {
NFH15 = Byte.parseByte(s);
} else {
NFH15 = Byte.MIN_VALUE;
}
}

protected final void initNFH16(String s) {
if (!s.trim().isEmpty()) {
NFH16 = Byte.parseByte(s);
} else {
NFH16 = Byte.MIN_VALUE;
}
}

protected final void initNFH17(String s) {
if (!s.trim().isEmpty()) {
NFH17 = Byte.parseByte(s);
} else {
NFH17 = Byte.MIN_VALUE;
}
}

protected final void initNFH18(String s) {
if (!s.trim().isEmpty()) {
NFH18 = Byte.parseByte(s);
} else {
NFH18 = Byte.MIN_VALUE;
}
}

protected final void initNFH19(String s) {
if (!s.trim().isEmpty()) {
NFH19 = Byte.parseByte(s);
} else {
NFH19 = Byte.MIN_VALUE;
}
}

protected final void initNFH20(String s) {
if (!s.trim().isEmpty()) {
NFH20 = Byte.parseByte(s);
} else {
NFH20 = Byte.MIN_VALUE;
}
}

protected final void initNFH21(String s) {
if (!s.trim().isEmpty()) {
NFH21 = Byte.parseByte(s);
} else {
NFH21 = Byte.MIN_VALUE;
}
}

protected final void initNFH22(String s) {
if (!s.trim().isEmpty()) {
NFH22 = Byte.parseByte(s);
} else {
NFH22 = Byte.MIN_VALUE;
}
}

protected final void initNFH23(String s) {
if (!s.trim().isEmpty()) {
NFH23 = Byte.parseByte(s);
} else {
NFH23 = Byte.MIN_VALUE;
}
}

protected final void initNFH24(String s) {
if (!s.trim().isEmpty()) {
NFH24 = Byte.parseByte(s);
} else {
NFH24 = Byte.MIN_VALUE;
}
}

protected final void initNFH25(String s) {
if (!s.trim().isEmpty()) {
NFH25 = Byte.parseByte(s);
} else {
NFH25 = Byte.MIN_VALUE;
}
}

protected final void initNFH26(String s) {
if (!s.trim().isEmpty()) {
NFH26 = Byte.parseByte(s);
} else {
NFH26 = Byte.MIN_VALUE;
}
}

protected final void initNFH27(String s) {
if (!s.trim().isEmpty()) {
NFH27 = Byte.parseByte(s);
} else {
NFH27 = Byte.MIN_VALUE;
}
}

protected final void initNFH28(String s) {
if (!s.trim().isEmpty()) {
NFH28 = Byte.parseByte(s);
} else {
NFH28 = Byte.MIN_VALUE;
}
}

protected final void initNFH29(String s) {
if (!s.trim().isEmpty()) {
NFH29 = Byte.parseByte(s);
} else {
NFH29 = Byte.MIN_VALUE;
}
}

protected final void initNFH30(String s) {
if (!s.trim().isEmpty()) {
NFH30 = Byte.parseByte(s);
} else {
NFH30 = Byte.MIN_VALUE;
}
}

protected final void initNFH31(String s) {
if (!s.trim().isEmpty()) {
NFH31 = Byte.parseByte(s);
} else {
NFH31 = Byte.MIN_VALUE;
}
}

protected final void initNFH32(String s) {
if (!s.trim().isEmpty()) {
NFH32 = Byte.parseByte(s);
} else {
NFH32 = Byte.MIN_VALUE;
}
}

protected final void initNFH33(String s) {
if (!s.trim().isEmpty()) {
NFH33 = Byte.parseByte(s);
} else {
NFH33 = Byte.MIN_VALUE;
}
}

protected final void initNFH34(String s) {
if (!s.trim().isEmpty()) {
NFH34 = Byte.parseByte(s);
} else {
NFH34 = Byte.MIN_VALUE;
}
}

protected final void initNFH35(String s) {
if (!s.trim().isEmpty()) {
NFH35 = Byte.parseByte(s);
} else {
NFH35 = Byte.MIN_VALUE;
}
}

protected final void initNFH36(String s) {
if (!s.trim().isEmpty()) {
NFH36 = Byte.parseByte(s);
} else {
NFH36 = Byte.MIN_VALUE;
}
}

protected final void initNFH37(String s) {
if (!s.trim().isEmpty()) {
NFH37 = Byte.parseByte(s);
} else {
NFH37 = Byte.MIN_VALUE;
}
}

protected final void initNFH38(String s) {
if (!s.trim().isEmpty()) {
NFH38 = Byte.parseByte(s);
} else {
NFH38 = Byte.MIN_VALUE;
}
}

protected final void initNGRP_DV(String s) {
if (!s.trim().isEmpty()) {
NGRP_DV = Byte.parseByte(s);
} else {
NGRP_DV = Byte.MIN_VALUE;
}
}

protected final void initNHIQUAL_DV(String s) {
if (!s.trim().isEmpty()) {
NHIQUAL_DV = Byte.parseByte(s);
} else {
NHIQUAL_DV = Byte.MIN_VALUE;
}
}

protected final void initNIACT(String s) {
if (!s.trim().isEmpty()) {
NIACT = Byte.parseByte(s);
} else {
NIACT = Byte.MIN_VALUE;
}
}

protected final void initNIREL(String s) {
if (!s.trim().isEmpty()) {
NIREL = Byte.parseByte(s);
} else {
NIREL = Byte.MIN_VALUE;
}
}

protected final void initNISERPS(String s) {
if (!s.trim().isEmpty()) {
NISERPS = Byte.parseByte(s);
} else {
NISERPS = Byte.MIN_VALUE;
}
}

protected final void initNMAR(String s) {
if (!s.trim().isEmpty()) {
NMAR = Byte.parseByte(s);
} else {
NMAR = Byte.MIN_VALUE;
}
}

protected final void initNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NMPSP_DV = Byte.parseByte(s);
} else {
NMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNATCH(String s) {
if (!s.trim().isEmpty()) {
NNATCH = Byte.parseByte(s);
} else {
NNATCH = Byte.MIN_VALUE;
}
}

protected final void initNNEWBORN(String s) {
if (!s.trim().isEmpty()) {
NNEWBORN = Byte.parseByte(s);
} else {
NNEWBORN = Byte.MIN_VALUE;
}
}

protected final void initNNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NNMPSP_DV = Byte.parseByte(s);
} else {
NNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSIDV(String s) {
if (!s.trim().isEmpty()) {
NNSIDV = Byte.parseByte(s);
} else {
NNSIDV = Byte.MIN_VALUE;
}
}

protected final void initNNSSIDV(String s) {
if (!s.trim().isEmpty()) {
NNSSIDV = Byte.parseByte(s);
} else {
NNSSIDV = Byte.MIN_VALUE;
}
}

protected final void initNOTEMPCHK(String s) {
if (!s.trim().isEmpty()) {
NOTEMPCHK = Byte.parseByte(s);
} else {
NOTEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initNPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER_DV = Byte.parseByte(s);
} else {
NPENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initNPNS_DV(String s) {
if (!s.trim().isEmpty()) {
NPNS_DV = Byte.parseByte(s);
} else {
NPNS_DV = Byte.MIN_VALUE;
}
}

protected final void initNPN_DV(String s) {
if (!s.trim().isEmpty()) {
NPN_DV = Byte.parseByte(s);
} else {
NPN_DV = Byte.MIN_VALUE;
}
}

protected final void initNQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
NQFHIGH_DV = Byte.parseByte(s);
} else {
NQFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initNUNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NUNMPSP_DV = Byte.parseByte(s);
} else {
NUNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDD(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDD = Byte.parseByte(s);
} else {
NXTJBENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDM(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDM = Byte.parseByte(s);
} else {
NXTJBENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDY4 = Short.parseShort(s);
} else {
NXTJBENDY4 = Short.MIN_VALUE;
}
}

protected final void initNXTJBES(String s) {
if (!s.trim().isEmpty()) {
NXTJBES = Byte.parseByte(s);
} else {
NXTJBES = Byte.MIN_VALUE;
}
}

protected final void initNXTJBHRS(String s) {
if (!s.trim().isEmpty()) {
NXTJBHRS = Byte.parseByte(s);
} else {
NXTJBHRS = Byte.MIN_VALUE;
}
}

protected final void initNXTST(String s) {
if (!s.trim().isEmpty()) {
NXTST = Byte.parseByte(s);
} else {
NXTST = Byte.MIN_VALUE;
}
}

protected final void initNXTSTELSE(String s) {
if (!s.trim().isEmpty()) {
NXTSTELSE = Byte.parseByte(s);
} else {
NXTSTELSE = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDD(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDD = Byte.parseByte(s);
} else {
NXTSTENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDM(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDM = Byte.parseByte(s);
} else {
NXTSTENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDY4 = Short.parseShort(s);
} else {
NXTSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initOCIMPA(String s) {
if (!s.trim().isEmpty()) {
OCIMPA = Byte.parseByte(s);
} else {
OCIMPA = Byte.MIN_VALUE;
}
}

protected final void initOCIMPB(String s) {
if (!s.trim().isEmpty()) {
OCIMPB = Byte.parseByte(s);
} else {
OCIMPB = Byte.MIN_VALUE;
}
}

protected final void initOCIMPE(String s) {
if (!s.trim().isEmpty()) {
OCIMPE = Byte.parseByte(s);
} else {
OCIMPE = Byte.MIN_VALUE;
}
}

protected final void initOCIMPF(String s) {
if (!s.trim().isEmpty()) {
OCIMPF = Byte.parseByte(s);
} else {
OCIMPF = Byte.MIN_VALUE;
}
}

protected final void initOCIMPI(String s) {
if (!s.trim().isEmpty()) {
OCIMPI = Byte.parseByte(s);
} else {
OCIMPI = Byte.MIN_VALUE;
}
}

protected final void initOCIMPK(String s) {
if (!s.trim().isEmpty()) {
OCIMPK = Byte.parseByte(s);
} else {
OCIMPK = Byte.MIN_VALUE;
}
}

protected final void initOCIMPL(String s) {
if (!s.trim().isEmpty()) {
OCIMPL = Byte.parseByte(s);
} else {
OCIMPL = Byte.MIN_VALUE;
}
}

protected final void initOPRLG(String s) {
if (!s.trim().isEmpty()) {
OPRLG = Byte.parseByte(s);
} else {
OPRLG = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0(String s) {
if (!s.trim().isEmpty()) {
OPRLG0 = Byte.parseByte(s);
} else {
OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
OPRLG0NI = Byte.parseByte(s);
} else {
OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initOPRLG1(String s) {
if (!s.trim().isEmpty()) {
OPRLG1 = Byte.parseByte(s);
} else {
OPRLG1 = Byte.MIN_VALUE;
}
}

protected final void initORIGADD(String s) {
if (!s.trim().isEmpty()) {
ORIGADD = Byte.parseByte(s);
} else {
ORIGADD = Byte.MIN_VALUE;
}
}

protected final void initOVTNSA(String s) {
if (!s.trim().isEmpty()) {
OVTNSA = Byte.parseByte(s);
} else {
OVTNSA = Byte.MIN_VALUE;
}
}

protected final void initOVTPAY(String s) {
if (!s.trim().isEmpty()) {
OVTPAY = Byte.parseByte(s);
} else {
OVTPAY = Byte.MIN_VALUE;
}
}

protected final void initOVTRATE(String s) {
if (!s.trim().isEmpty()) {
OVTRATE = Double.parseDouble(s);
} else {
OVTRATE = Double.NaN;
}
}

protected final void initOVTREST(String s) {
if (!s.trim().isEmpty()) {
OVTREST = Byte.parseByte(s);
} else {
OVTREST = Byte.MIN_VALUE;
}
}

protected final void initPACOB(String s) {
if (!s.trim().isEmpty()) {
PACOB = Byte.parseByte(s);
} else {
PACOB = Byte.MIN_VALUE;
}
}

protected final void initPAEDQF(String s) {
if (!s.trim().isEmpty()) {
PAEDQF = Byte.parseByte(s);
} else {
PAEDQF = Byte.MIN_VALUE;
}
}

protected final void initPAJU(String s) {
if (!s.trim().isEmpty()) {
PAJU = Byte.parseByte(s);
} else {
PAJU = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC5_DV = Byte.parseByte(s);
} else {
PANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initPASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC00_CC = Short.parseShort(s);
} else {
PASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC10_CC = Short.parseShort(s);
} else {
PASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC90_CC = Byte.parseByte(s);
} else {
PASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPAYGWC(String s) {
if (!s.trim().isEmpty()) {
PAYGWC = Byte.parseByte(s);
} else {
PAYGWC = Byte.MIN_VALUE;
}
}

protected final void initPAYG_DV(String s) {
if (!s.trim().isEmpty()) {
PAYG_DV = Double.parseDouble(s);
} else {
PAYG_DV = Double.NaN;
}
}

protected final void initPAYNWC(String s) {
if (!s.trim().isEmpty()) {
PAYNWC = Byte.parseByte(s);
} else {
PAYNWC = Byte.MIN_VALUE;
}
}

protected final void initPAYRUK(String s) {
if (!s.trim().isEmpty()) {
PAYRUK = Byte.parseByte(s);
} else {
PAYRUK = Byte.MIN_VALUE;
}
}

protected final void initPAYTYP(String s) {
if (!s.trim().isEmpty()) {
PAYTYP = Byte.parseByte(s);
} else {
PAYTYP = Byte.MIN_VALUE;
}
}

protected final void initPAYUWC(String s) {
if (!s.trim().isEmpty()) {
PAYUWC = Byte.parseByte(s);
} else {
PAYUWC = Byte.MIN_VALUE;
}
}

protected final void initPAYU_DV(String s) {
if (!s.trim().isEmpty()) {
PAYU_DV = Double.parseDouble(s);
} else {
PAYU_DV = Double.NaN;
}
}

protected final void initPBNFT1(String s) {
if (!s.trim().isEmpty()) {
PBNFT1 = Byte.parseByte(s);
} else {
PBNFT1 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT10(String s) {
if (!s.trim().isEmpty()) {
PBNFT10 = Byte.parseByte(s);
} else {
PBNFT10 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT11(String s) {
if (!s.trim().isEmpty()) {
PBNFT11 = Byte.parseByte(s);
} else {
PBNFT11 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT12(String s) {
if (!s.trim().isEmpty()) {
PBNFT12 = Byte.parseByte(s);
} else {
PBNFT12 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT2(String s) {
if (!s.trim().isEmpty()) {
PBNFT2 = Byte.parseByte(s);
} else {
PBNFT2 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT3(String s) {
if (!s.trim().isEmpty()) {
PBNFT3 = Byte.parseByte(s);
} else {
PBNFT3 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT4(String s) {
if (!s.trim().isEmpty()) {
PBNFT4 = Byte.parseByte(s);
} else {
PBNFT4 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT5(String s) {
if (!s.trim().isEmpty()) {
PBNFT5 = Byte.parseByte(s);
} else {
PBNFT5 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT6(String s) {
if (!s.trim().isEmpty()) {
PBNFT6 = Byte.parseByte(s);
} else {
PBNFT6 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT7(String s) {
if (!s.trim().isEmpty()) {
PBNFT7 = Byte.parseByte(s);
} else {
PBNFT7 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT8(String s) {
if (!s.trim().isEmpty()) {
PBNFT8 = Byte.parseByte(s);
} else {
PBNFT8 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT9(String s) {
if (!s.trim().isEmpty()) {
PBNFT9 = Byte.parseByte(s);
} else {
PBNFT9 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT96(String s) {
if (!s.trim().isEmpty()) {
PBNFT96 = Byte.parseByte(s);
} else {
PBNFT96 = Byte.MIN_VALUE;
}
}

protected final void initPENMCN(String s) {
if (!s.trim().isEmpty()) {
PENMCN = Byte.parseByte(s);
} else {
PENMCN = Byte.MIN_VALUE;
}
}

protected final void initPENMEX(String s) {
if (!s.trim().isEmpty()) {
PENMEX = Byte.parseByte(s);
} else {
PENMEX = Byte.MIN_VALUE;
}
}

protected final void initPENMPY(String s) {
if (!s.trim().isEmpty()) {
PENMPY = Double.parseDouble(s);
} else {
PENMPY = Double.NaN;
}
}

protected final void initPENMTP(String s) {
if (!s.trim().isEmpty()) {
PENMTP = Byte.parseByte(s);
} else {
PENMTP = Byte.MIN_VALUE;
}
}

protected final void initPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
PENSIONER_DV = Byte.parseByte(s);
} else {
PENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initPENSPB(String s) {
if (!s.trim().isEmpty()) {
PENSPB = Byte.parseByte(s);
} else {
PENSPB = Byte.MIN_VALUE;
}
}

protected final void initPERBFTS(String s) {
if (!s.trim().isEmpty()) {
PERBFTS = Byte.parseByte(s);
} else {
PERBFTS = Byte.MIN_VALUE;
}
}

protected final void initPERPOLINF(String s) {
if (!s.trim().isEmpty()) {
PERPOLINF = Byte.parseByte(s);
} else {
PERPOLINF = Byte.MIN_VALUE;
}
}

protected final void initPID(String s) {
if (!s.trim().isEmpty()) {
PID = Integer.parseInt(s);
} else {
PID = Integer.MIN_VALUE;
}
}

protected final void initPJBPTFT(String s) {
if (!s.trim().isEmpty()) {
PJBPTFT = Byte.parseByte(s);
} else {
PJBPTFT = Byte.MIN_VALUE;
}
}

protected final void initPJSPTFT(String s) {
if (!s.trim().isEmpty()) {
PJSPTFT = Byte.parseByte(s);
} else {
PJSPTFT = Byte.MIN_VALUE;
}
}

protected final void initPLNOWM(String s) {
if (!s.trim().isEmpty()) {
PLNOWM = Short.parseShort(s);
} else {
PLNOWM = Short.MIN_VALUE;
}
}

protected final void initPLNOWY4(String s) {
if (!s.trim().isEmpty()) {
PLNOWY4 = Short.parseShort(s);
} else {
PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initPN1PID(String s) {
if (!s.trim().isEmpty()) {
PN1PID = Integer.parseInt(s);
} else {
PN1PID = Integer.MIN_VALUE;
}
}

protected final void initPN1PNO(String s) {
if (!s.trim().isEmpty()) {
PN1PNO = Byte.parseByte(s);
} else {
PN1PNO = Byte.MIN_VALUE;
}
}

protected final void initPN1SEX(String s) {
if (!s.trim().isEmpty()) {
PN1SEX = Byte.parseByte(s);
} else {
PN1SEX = Byte.MIN_VALUE;
}
}

protected final void initPN2PID(String s) {
if (!s.trim().isEmpty()) {
PN2PID = Integer.parseInt(s);
} else {
PN2PID = Integer.MIN_VALUE;
}
}

protected final void initPN2PNO(String s) {
if (!s.trim().isEmpty()) {
PN2PNO = Byte.parseByte(s);
} else {
PN2PNO = Byte.MIN_VALUE;
}
}

protected final void initPN2SEX(String s) {
if (!s.trim().isEmpty()) {
PN2SEX = Byte.parseByte(s);
} else {
PN2SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS1PID(String s) {
if (!s.trim().isEmpty()) {
PNS1PID = Integer.parseInt(s);
} else {
PNS1PID = Integer.MIN_VALUE;
}
}

protected final void initPNS1PNO(String s) {
if (!s.trim().isEmpty()) {
PNS1PNO = Byte.parseByte(s);
} else {
PNS1PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS1SEX(String s) {
if (!s.trim().isEmpty()) {
PNS1SEX = Byte.parseByte(s);
} else {
PNS1SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS2PID(String s) {
if (!s.trim().isEmpty()) {
PNS2PID = Integer.parseInt(s);
} else {
PNS2PID = Integer.MIN_VALUE;
}
}

protected final void initPNS2PNO(String s) {
if (!s.trim().isEmpty()) {
PNS2PNO = Byte.parseByte(s);
} else {
PNS2PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS2SEX(String s) {
if (!s.trim().isEmpty()) {
PNS2SEX = Byte.parseByte(s);
} else {
PNS2SEX = Byte.MIN_VALUE;
}
}

protected final void initPOLCOST(String s) {
if (!s.trim().isEmpty()) {
POLCOST = Byte.parseByte(s);
} else {
POLCOST = Byte.MIN_VALUE;
}
}

protected final void initPPEN(String s) {
if (!s.trim().isEmpty()) {
PPEN = Byte.parseByte(s);
} else {
PPEN = Byte.MIN_VALUE;
}
}

protected final void initPPENT(String s) {
if (!s.trim().isEmpty()) {
PPENT = Byte.parseByte(s);
} else {
PPENT = Byte.MIN_VALUE;
}
}

protected final void initPPID(String s) {
if (!s.trim().isEmpty()) {
PPID = Integer.parseInt(s);
} else {
PPID = Integer.MIN_VALUE;
}
}

protected final void initPPPEX(String s) {
if (!s.trim().isEmpty()) {
PPPEX = Byte.parseByte(s);
} else {
PPPEX = Byte.MIN_VALUE;
}
}

protected final void initPPPEXM(String s) {
if (!s.trim().isEmpty()) {
PPPEXM = Byte.parseByte(s);
} else {
PPPEXM = Byte.MIN_VALUE;
}
}

protected final void initPPRAM(String s) {
if (!s.trim().isEmpty()) {
PPRAM = Integer.parseInt(s);
} else {
PPRAM = Integer.MIN_VALUE;
}
}

protected final void initPPRAMPC(String s) {
if (!s.trim().isEmpty()) {
PPRAMPC = Byte.parseByte(s);
} else {
PPRAMPC = Byte.MIN_VALUE;
}
}

protected final void initPPREG(String s) {
if (!s.trim().isEmpty()) {
PPREG = Byte.parseByte(s);
} else {
PPREG = Byte.MIN_VALUE;
}
}

protected final void initPPSEX(String s) {
if (!s.trim().isEmpty()) {
PPSEX = Byte.parseByte(s);
} else {
PPSEX = Byte.MIN_VALUE;
}
}

protected final void initPPYRS(String s) {
if (!s.trim().isEmpty()) {
PPYRS = Short.parseShort(s);
} else {
PPYRS = Short.MIN_VALUE;
}
}

protected final void initPREARN(String s) {
if (!s.trim().isEmpty()) {
PREARN = Byte.parseByte(s);
} else {
PREARN = Byte.MIN_VALUE;
}
}

protected final void initPREARNA(String s) {
if (!s.trim().isEmpty()) {
PREARNA = Byte.parseByte(s);
} else {
PREARNA = Byte.MIN_VALUE;
}
}

protected final void initPREARNW(String s) {
if (!s.trim().isEmpty()) {
PREARNW = Byte.parseByte(s);
} else {
PREARNW = Byte.MIN_VALUE;
}
}

protected final void initPREASON(String s) {
if (!s.trim().isEmpty()) {
PREASON = Byte.parseByte(s);
} else {
PREASON = Byte.MIN_VALUE;
}
}

protected final void initPREG(String s) {
if (!s.trim().isEmpty()) {
PREG = Byte.parseByte(s);
} else {
PREG = Byte.MIN_VALUE;
}
}

protected final void initPREGDRINK1(String s) {
if (!s.trim().isEmpty()) {
PREGDRINK1 = Byte.parseByte(s);
} else {
PREGDRINK1 = Byte.MIN_VALUE;
}
}

protected final void initPREGDRINK2(String s) {
if (!s.trim().isEmpty()) {
PREGDRINK2 = Byte.parseByte(s);
} else {
PREGDRINK2 = Byte.MIN_VALUE;
}
}

protected final void initPREGDRINK3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGDRINK3 = false;
} else {
PREGDRINK3 = true;
}
}
}

protected final void initPREGDRINK4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGDRINK4 = false;
} else {
PREGDRINK4 = true;
}
}
}

protected final void initPREGDRINK5(String s) {
if (!s.trim().isEmpty()) {
PREGDRINK5 = Byte.parseByte(s);
} else {
PREGDRINK5 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND1(String s) {
if (!s.trim().isEmpty()) {
PREGEND1 = Byte.parseByte(s);
} else {
PREGEND1 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND2(String s) {
if (!s.trim().isEmpty()) {
PREGEND2 = Byte.parseByte(s);
} else {
PREGEND2 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND3(String s) {
if (!s.trim().isEmpty()) {
PREGEND3 = Byte.parseByte(s);
} else {
PREGEND3 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND4(String s) {
if (!s.trim().isEmpty()) {
PREGEND4 = Byte.parseByte(s);
} else {
PREGEND4 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND5(String s) {
if (!s.trim().isEmpty()) {
PREGEND5 = Byte.parseByte(s);
} else {
PREGEND5 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT1(String s) {
if (!s.trim().isEmpty()) {
PREGFERT1 = Byte.parseByte(s);
} else {
PREGFERT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT2(String s) {
if (!s.trim().isEmpty()) {
PREGFERT2 = Byte.parseByte(s);
} else {
PREGFERT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT3(String s) {
if (!s.trim().isEmpty()) {
PREGFERT3 = Byte.parseByte(s);
} else {
PREGFERT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT4(String s) {
if (!s.trim().isEmpty()) {
PREGFERT4 = Byte.parseByte(s);
} else {
PREGFERT4 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT5(String s) {
if (!s.trim().isEmpty()) {
PREGFERT5 = Byte.parseByte(s);
} else {
PREGFERT5 = Byte.MIN_VALUE;
}
}

protected final void initPREGM1(String s) {
if (!s.trim().isEmpty()) {
PREGM1 = Byte.parseByte(s);
} else {
PREGM1 = Byte.MIN_VALUE;
}
}

protected final void initPREGM2(String s) {
if (!s.trim().isEmpty()) {
PREGM2 = Byte.parseByte(s);
} else {
PREGM2 = Byte.MIN_VALUE;
}
}

protected final void initPREGM3(String s) {
if (!s.trim().isEmpty()) {
PREGM3 = Byte.parseByte(s);
} else {
PREGM3 = Byte.MIN_VALUE;
}
}

protected final void initPREGM4(String s) {
if (!s.trim().isEmpty()) {
PREGM4 = Byte.parseByte(s);
} else {
PREGM4 = Byte.MIN_VALUE;
}
}

protected final void initPREGM5(String s) {
if (!s.trim().isEmpty()) {
PREGM5 = Byte.parseByte(s);
} else {
PREGM5 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT1(String s) {
if (!s.trim().isEmpty()) {
PREGOUT1 = Byte.parseByte(s);
} else {
PREGOUT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT2(String s) {
if (!s.trim().isEmpty()) {
PREGOUT2 = Byte.parseByte(s);
} else {
PREGOUT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT3(String s) {
if (!s.trim().isEmpty()) {
PREGOUT3 = Byte.parseByte(s);
} else {
PREGOUT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT4(String s) {
if (!s.trim().isEmpty()) {
PREGOUT4 = Byte.parseByte(s);
} else {
PREGOUT4 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT5(String s) {
if (!s.trim().isEmpty()) {
PREGOUT5 = Byte.parseByte(s);
} else {
PREGOUT5 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK11(String s) {
if (!s.trim().isEmpty()) {
PREGSMK11 = Byte.parseByte(s);
} else {
PREGSMK11 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK12(String s) {
if (!s.trim().isEmpty()) {
PREGSMK12 = Byte.parseByte(s);
} else {
PREGSMK12 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK13(String s) {
if (!s.trim().isEmpty()) {
PREGSMK13 = Byte.parseByte(s);
} else {
PREGSMK13 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK14(String s) {
if (!s.trim().isEmpty()) {
PREGSMK14 = Byte.parseByte(s);
} else {
PREGSMK14 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK15(String s) {
if (!s.trim().isEmpty()) {
PREGSMK15 = Byte.parseByte(s);
} else {
PREGSMK15 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK21(String s) {
if (!s.trim().isEmpty()) {
PREGSMK21 = Byte.parseByte(s);
} else {
PREGSMK21 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK22(String s) {
if (!s.trim().isEmpty()) {
PREGSMK22 = Byte.parseByte(s);
} else {
PREGSMK22 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK23(String s) {
if (!s.trim().isEmpty()) {
PREGSMK23 = Byte.parseByte(s);
} else {
PREGSMK23 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK24(String s) {
if (!s.trim().isEmpty()) {
PREGSMK24 = Byte.parseByte(s);
} else {
PREGSMK24 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK25(String s) {
if (!s.trim().isEmpty()) {
PREGSMK25 = Byte.parseByte(s);
} else {
PREGSMK25 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK31(String s) {
if (!s.trim().isEmpty()) {
PREGSMK31 = Byte.parseByte(s);
} else {
PREGSMK31 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK32(String s) {
if (!s.trim().isEmpty()) {
PREGSMK32 = Byte.parseByte(s);
} else {
PREGSMK32 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK33(String s) {
if (!s.trim().isEmpty()) {
PREGSMK33 = Byte.parseByte(s);
} else {
PREGSMK33 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK34(String s) {
if (!s.trim().isEmpty()) {
PREGSMK34 = Byte.parseByte(s);
} else {
PREGSMK34 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK35(String s) {
if (!s.trim().isEmpty()) {
PREGSMK35 = Byte.parseByte(s);
} else {
PREGSMK35 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE1(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE1 = Byte.parseByte(s);
} else {
PREGSMOKE1 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE2(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE2 = Byte.parseByte(s);
} else {
PREGSMOKE2 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE3(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE3 = Byte.parseByte(s);
} else {
PREGSMOKE3 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE4(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE4 = Byte.parseByte(s);
} else {
PREGSMOKE4 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE5(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE5 = Byte.parseByte(s);
} else {
PREGSMOKE5 = Byte.MIN_VALUE;
}
}

protected final void initPREGY41(String s) {
if (!s.trim().isEmpty()) {
PREGY41 = Short.parseShort(s);
} else {
PREGY41 = Short.MIN_VALUE;
}
}

protected final void initPREGY42(String s) {
if (!s.trim().isEmpty()) {
PREGY42 = Short.parseShort(s);
} else {
PREGY42 = Short.MIN_VALUE;
}
}

protected final void initPREGY43(String s) {
if (!s.trim().isEmpty()) {
PREGY43 = Short.parseShort(s);
} else {
PREGY43 = Short.MIN_VALUE;
}
}

protected final void initPREGY44(String s) {
if (!s.trim().isEmpty()) {
PREGY44 = Short.parseShort(s);
} else {
PREGY44 = Short.MIN_VALUE;
}
}

protected final void initPREGY45(String s) {
if (!s.trim().isEmpty()) {
PREGY45 = Byte.parseByte(s);
} else {
PREGY45 = Byte.MIN_VALUE;
}
}

protected final void initPREL(String s) {
if (!s.trim().isEmpty()) {
PREL = Byte.parseByte(s);
} else {
PREL = Byte.MIN_VALUE;
}
}

protected final void initPRFITB(String s) {
if (!s.trim().isEmpty()) {
PRFITB = Byte.parseByte(s);
} else {
PRFITB = Byte.MIN_VALUE;
}
}

protected final void initPRFITBA(String s) {
if (!s.trim().isEmpty()) {
PRFITBA = Byte.parseByte(s);
} else {
PRFITBA = Byte.MIN_VALUE;
}
}

protected final void initPRFITBW(String s) {
if (!s.trim().isEmpty()) {
PRFITBW = Byte.parseByte(s);
} else {
PRFITBW = Byte.MIN_VALUE;
}
}

protected final void initPRIDE10(String s) {
if (!s.trim().isEmpty()) {
PRIDE10 = Byte.parseByte(s);
} else {
PRIDE10 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE11(String s) {
if (!s.trim().isEmpty()) {
PRIDE11 = Byte.parseByte(s);
} else {
PRIDE11 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE12(String s) {
if (!s.trim().isEmpty()) {
PRIDE12 = Byte.parseByte(s);
} else {
PRIDE12 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE13(String s) {
if (!s.trim().isEmpty()) {
PRIDE13 = Byte.parseByte(s);
} else {
PRIDE13 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE14(String s) {
if (!s.trim().isEmpty()) {
PRIDE14 = Byte.parseByte(s);
} else {
PRIDE14 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE2(String s) {
if (!s.trim().isEmpty()) {
PRIDE2 = Byte.parseByte(s);
} else {
PRIDE2 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE4A(String s) {
if (!s.trim().isEmpty()) {
PRIDE4A = Byte.parseByte(s);
} else {
PRIDE4A = Byte.MIN_VALUE;
}
}

protected final void initPRIDE4B(String s) {
if (!s.trim().isEmpty()) {
PRIDE4B = Byte.parseByte(s);
} else {
PRIDE4B = Byte.MIN_VALUE;
}
}

protected final void initPRIDE5(String s) {
if (!s.trim().isEmpty()) {
PRIDE5 = Byte.parseByte(s);
} else {
PRIDE5 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE6(String s) {
if (!s.trim().isEmpty()) {
PRIDE6 = Byte.parseByte(s);
} else {
PRIDE6 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE7(String s) {
if (!s.trim().isEmpty()) {
PRIDE7 = Byte.parseByte(s);
} else {
PRIDE7 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE8(String s) {
if (!s.trim().isEmpty()) {
PRIDE8 = Byte.parseByte(s);
} else {
PRIDE8 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE9(String s) {
if (!s.trim().isEmpty()) {
PRIDE9 = Byte.parseByte(s);
} else {
PRIDE9 = Byte.MIN_VALUE;
}
}

protected final void initPSU(String s) {
if (!s.trim().isEmpty()) {
PSU = Integer.parseInt(s);
} else {
PSU = Integer.MIN_VALUE;
}
}

protected final void initQFHIGH(String s) {
if (!s.trim().isEmpty()) {
QFHIGH = Byte.parseByte(s);
} else {
QFHIGH = Byte.MIN_VALUE;
}
}

protected final void initQFHIGHFL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
QFHIGHFL_DV = false;
} else {
QFHIGHFL_DV = true;
}
}
}

protected final void initQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
QFHIGH_DV = Byte.parseByte(s);
} else {
QFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initQFVOC1(String s) {
if (!s.trim().isEmpty()) {
QFVOC1 = Byte.parseByte(s);
} else {
QFVOC1 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC10(String s) {
if (!s.trim().isEmpty()) {
QFVOC10 = Byte.parseByte(s);
} else {
QFVOC10 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC11(String s) {
if (!s.trim().isEmpty()) {
QFVOC11 = Byte.parseByte(s);
} else {
QFVOC11 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC12(String s) {
if (!s.trim().isEmpty()) {
QFVOC12 = Byte.parseByte(s);
} else {
QFVOC12 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC13(String s) {
if (!s.trim().isEmpty()) {
QFVOC13 = Byte.parseByte(s);
} else {
QFVOC13 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC14(String s) {
if (!s.trim().isEmpty()) {
QFVOC14 = Byte.parseByte(s);
} else {
QFVOC14 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC15(String s) {
if (!s.trim().isEmpty()) {
QFVOC15 = Byte.parseByte(s);
} else {
QFVOC15 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC2(String s) {
if (!s.trim().isEmpty()) {
QFVOC2 = Byte.parseByte(s);
} else {
QFVOC2 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC3(String s) {
if (!s.trim().isEmpty()) {
QFVOC3 = Byte.parseByte(s);
} else {
QFVOC3 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC4(String s) {
if (!s.trim().isEmpty()) {
QFVOC4 = Byte.parseByte(s);
} else {
QFVOC4 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC5(String s) {
if (!s.trim().isEmpty()) {
QFVOC5 = Byte.parseByte(s);
} else {
QFVOC5 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC6(String s) {
if (!s.trim().isEmpty()) {
QFVOC6 = Byte.parseByte(s);
} else {
QFVOC6 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC7(String s) {
if (!s.trim().isEmpty()) {
QFVOC7 = Byte.parseByte(s);
} else {
QFVOC7 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC8(String s) {
if (!s.trim().isEmpty()) {
QFVOC8 = Byte.parseByte(s);
} else {
QFVOC8 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC9(String s) {
if (!s.trim().isEmpty()) {
QFVOC9 = Byte.parseByte(s);
} else {
QFVOC9 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC96(String s) {
if (!s.trim().isEmpty()) {
QFVOC96 = Byte.parseByte(s);
} else {
QFVOC96 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW1(String s) {
if (!s.trim().isEmpty()) {
QUALNEW1 = Byte.parseByte(s);
} else {
QUALNEW1 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW10(String s) {
if (!s.trim().isEmpty()) {
QUALNEW10 = Byte.parseByte(s);
} else {
QUALNEW10 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW11(String s) {
if (!s.trim().isEmpty()) {
QUALNEW11 = Byte.parseByte(s);
} else {
QUALNEW11 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW13(String s) {
if (!s.trim().isEmpty()) {
QUALNEW13 = Byte.parseByte(s);
} else {
QUALNEW13 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW15(String s) {
if (!s.trim().isEmpty()) {
QUALNEW15 = Byte.parseByte(s);
} else {
QUALNEW15 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW16(String s) {
if (!s.trim().isEmpty()) {
QUALNEW16 = Byte.parseByte(s);
} else {
QUALNEW16 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW17(String s) {
if (!s.trim().isEmpty()) {
QUALNEW17 = Byte.parseByte(s);
} else {
QUALNEW17 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW18(String s) {
if (!s.trim().isEmpty()) {
QUALNEW18 = Byte.parseByte(s);
} else {
QUALNEW18 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW19(String s) {
if (!s.trim().isEmpty()) {
QUALNEW19 = Byte.parseByte(s);
} else {
QUALNEW19 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW2(String s) {
if (!s.trim().isEmpty()) {
QUALNEW2 = Byte.parseByte(s);
} else {
QUALNEW2 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW20(String s) {
if (!s.trim().isEmpty()) {
QUALNEW20 = Byte.parseByte(s);
} else {
QUALNEW20 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW21(String s) {
if (!s.trim().isEmpty()) {
QUALNEW21 = Byte.parseByte(s);
} else {
QUALNEW21 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW22(String s) {
if (!s.trim().isEmpty()) {
QUALNEW22 = Byte.parseByte(s);
} else {
QUALNEW22 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW23(String s) {
if (!s.trim().isEmpty()) {
QUALNEW23 = Byte.parseByte(s);
} else {
QUALNEW23 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW24(String s) {
if (!s.trim().isEmpty()) {
QUALNEW24 = Byte.parseByte(s);
} else {
QUALNEW24 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW25(String s) {
if (!s.trim().isEmpty()) {
QUALNEW25 = Byte.parseByte(s);
} else {
QUALNEW25 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW26(String s) {
if (!s.trim().isEmpty()) {
QUALNEW26 = Byte.parseByte(s);
} else {
QUALNEW26 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW27(String s) {
if (!s.trim().isEmpty()) {
QUALNEW27 = Byte.parseByte(s);
} else {
QUALNEW27 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW28(String s) {
if (!s.trim().isEmpty()) {
QUALNEW28 = Byte.parseByte(s);
} else {
QUALNEW28 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW29(String s) {
if (!s.trim().isEmpty()) {
QUALNEW29 = Byte.parseByte(s);
} else {
QUALNEW29 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW3(String s) {
if (!s.trim().isEmpty()) {
QUALNEW3 = Byte.parseByte(s);
} else {
QUALNEW3 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW30(String s) {
if (!s.trim().isEmpty()) {
QUALNEW30 = Byte.parseByte(s);
} else {
QUALNEW30 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW31(String s) {
if (!s.trim().isEmpty()) {
QUALNEW31 = Byte.parseByte(s);
} else {
QUALNEW31 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW4(String s) {
if (!s.trim().isEmpty()) {
QUALNEW4 = Byte.parseByte(s);
} else {
QUALNEW4 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW5(String s) {
if (!s.trim().isEmpty()) {
QUALNEW5 = Byte.parseByte(s);
} else {
QUALNEW5 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW6(String s) {
if (!s.trim().isEmpty()) {
QUALNEW6 = Byte.parseByte(s);
} else {
QUALNEW6 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW7(String s) {
if (!s.trim().isEmpty()) {
QUALNEW7 = Byte.parseByte(s);
} else {
QUALNEW7 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW8(String s) {
if (!s.trim().isEmpty()) {
QUALNEW8 = Byte.parseByte(s);
} else {
QUALNEW8 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW9(String s) {
if (!s.trim().isEmpty()) {
QUALNEW9 = Byte.parseByte(s);
} else {
QUALNEW9 = Byte.MIN_VALUE;
}
}

protected final void initQUALOC(String s) {
if (!s.trim().isEmpty()) {
QUALOC = Byte.parseByte(s);
} else {
QUALOC = Byte.MIN_VALUE;
}
}

protected final void initRACEL(String s) {
if (!s.trim().isEmpty()) {
RACEL = Byte.parseByte(s);
} else {
RACEL = Byte.MIN_VALUE;
}
}

protected final void initRACELO_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELO_CODE = Short.parseShort(s);
} else {
RACELO_CODE = Short.MIN_VALUE;
}
}

protected final void initRACEL_DV(String s) {
if (!s.trim().isEmpty()) {
RACEL_DV = Byte.parseByte(s);
} else {
RACEL_DV = Byte.MIN_VALUE;
}
}

protected final void initREASEND1(String s) {
if (!s.trim().isEmpty()) {
REASEND1 = Byte.parseByte(s);
} else {
REASEND1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
REASEND10 = false;
} else {
REASEND10 = true;
}
}
}

protected final void initREASEND2(String s) {
if (!s.trim().isEmpty()) {
REASEND2 = Byte.parseByte(s);
} else {
REASEND2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3(String s) {
if (!s.trim().isEmpty()) {
REASEND3 = Byte.parseByte(s);
} else {
REASEND3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4(String s) {
if (!s.trim().isEmpty()) {
REASEND4 = Byte.parseByte(s);
} else {
REASEND4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5(String s) {
if (!s.trim().isEmpty()) {
REASEND5 = Byte.parseByte(s);
} else {
REASEND5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6(String s) {
if (!s.trim().isEmpty()) {
REASEND6 = Byte.parseByte(s);
} else {
REASEND6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7(String s) {
if (!s.trim().isEmpty()) {
REASEND7 = Byte.parseByte(s);
} else {
REASEND7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
REASEND8 = false;
} else {
REASEND8 = true;
}
}
}

protected final void initREASEND9(String s) {
if (!s.trim().isEmpty()) {
REASEND9 = Byte.parseByte(s);
} else {
REASEND9 = Byte.MIN_VALUE;
}
}

protected final void initRELUP(String s) {
if (!s.trim().isEmpty()) {
RELUP = Byte.parseByte(s);
} else {
RELUP = Byte.MIN_VALUE;
}
}

protected final void initREMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
REMAIL_CODE = Byte.parseByte(s);
} else {
REMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initRESPF16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16 = false;
} else {
RESPF16 = true;
}
}
}

protected final void initRESPF16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16_DV = false;
} else {
RESPF16_DV = true;
}
}
}

protected final void initRESPM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16 = false;
} else {
RESPM16 = true;
}
}
}

protected final void initRESPM16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16_DV = false;
} else {
RESPM16_DV = true;
}
}
}

protected final void initRETAMT(String s) {
if (!s.trim().isEmpty()) {
RETAMT = Byte.parseByte(s);
} else {
RETAMT = Byte.MIN_VALUE;
}
}

protected final void initRETCHK(String s) {
if (!s.trim().isEmpty()) {
RETCHK = Byte.parseByte(s);
} else {
RETCHK = Byte.MIN_VALUE;
}
}

protected final void initRETSUF(String s) {
if (!s.trim().isEmpty()) {
RETSUF = Byte.parseByte(s);
} else {
RETSUF = Byte.MIN_VALUE;
}
}

protected final void initRHLAND_CODE(String s) {
if (!s.trim().isEmpty()) {
RHLAND_CODE = Byte.parseByte(s);
} else {
RHLAND_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHMOCODE(String s) {
if (!s.trim().isEmpty()) {
RPHMOCODE = Byte.parseByte(s);
} else {
RPHMOCODE = Byte.MIN_VALUE;
}
}

protected final void initRPHWRK_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHWRK_CODE = Byte.parseByte(s);
} else {
RPHWRK_CODE = Byte.MIN_VALUE;
}
}

protected final void initRTCON1(String s) {
if (!s.trim().isEmpty()) {
RTCON1 = Byte.parseByte(s);
} else {
RTCON1 = Byte.MIN_VALUE;
}
}

protected final void initRTCON2(String s) {
if (!s.trim().isEmpty()) {
RTCON2 = Byte.parseByte(s);
} else {
RTCON2 = Byte.MIN_VALUE;
}
}

protected final void initRTCON3(String s) {
if (!s.trim().isEmpty()) {
RTCON3 = Byte.parseByte(s);
} else {
RTCON3 = Byte.MIN_VALUE;
}
}

protected final void initRTCON4(String s) {
if (!s.trim().isEmpty()) {
RTCON4 = Byte.parseByte(s);
} else {
RTCON4 = Byte.MIN_VALUE;
}
}

protected final void initRTEXPJB(String s) {
if (!s.trim().isEmpty()) {
RTEXPJB = Byte.parseByte(s);
} else {
RTEXPJB = Byte.MIN_VALUE;
}
}

protected final void initRTFND1(String s) {
if (!s.trim().isEmpty()) {
RTFND1 = Byte.parseByte(s);
} else {
RTFND1 = Byte.MIN_VALUE;
}
}

protected final void initRTFND10(String s) {
if (!s.trim().isEmpty()) {
RTFND10 = Byte.parseByte(s);
} else {
RTFND10 = Byte.MIN_VALUE;
}
}

protected final void initRTFND2(String s) {
if (!s.trim().isEmpty()) {
RTFND2 = Byte.parseByte(s);
} else {
RTFND2 = Byte.MIN_VALUE;
}
}

protected final void initRTFND3(String s) {
if (!s.trim().isEmpty()) {
RTFND3 = Byte.parseByte(s);
} else {
RTFND3 = Byte.MIN_VALUE;
}
}

protected final void initRTFND4(String s) {
if (!s.trim().isEmpty()) {
RTFND4 = Byte.parseByte(s);
} else {
RTFND4 = Byte.MIN_VALUE;
}
}

protected final void initRTFND5(String s) {
if (!s.trim().isEmpty()) {
RTFND5 = Byte.parseByte(s);
} else {
RTFND5 = Byte.MIN_VALUE;
}
}

protected final void initRTFND6(String s) {
if (!s.trim().isEmpty()) {
RTFND6 = Byte.parseByte(s);
} else {
RTFND6 = Byte.MIN_VALUE;
}
}

protected final void initRTFND7(String s) {
if (!s.trim().isEmpty()) {
RTFND7 = Byte.parseByte(s);
} else {
RTFND7 = Byte.MIN_VALUE;
}
}

protected final void initRTFND8(String s) {
if (!s.trim().isEmpty()) {
RTFND8 = Byte.parseByte(s);
} else {
RTFND8 = Byte.MIN_VALUE;
}
}

protected final void initRTFND9(String s) {
if (!s.trim().isEmpty()) {
RTFND9 = Byte.parseByte(s);
} else {
RTFND9 = Byte.MIN_VALUE;
}
}

protected final void initRTFND96(String s) {
if (!s.trim().isEmpty()) {
RTFND96 = Byte.parseByte(s);
} else {
RTFND96 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO1(String s) {
if (!s.trim().isEmpty()) {
RTPRO1 = Byte.parseByte(s);
} else {
RTPRO1 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO2(String s) {
if (!s.trim().isEmpty()) {
RTPRO2 = Byte.parseByte(s);
} else {
RTPRO2 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO3(String s) {
if (!s.trim().isEmpty()) {
RTPRO3 = Byte.parseByte(s);
} else {
RTPRO3 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO4(String s) {
if (!s.trim().isEmpty()) {
RTPRO4 = Byte.parseByte(s);
} else {
RTPRO4 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO5(String s) {
if (!s.trim().isEmpty()) {
RTPRO5 = Byte.parseByte(s);
} else {
RTPRO5 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO6(String s) {
if (!s.trim().isEmpty()) {
RTPRO6 = Byte.parseByte(s);
} else {
RTPRO6 = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB = Byte.parseByte(s);
} else {
SAMEJOB = Byte.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSAVE(String s) {
if (!s.trim().isEmpty()) {
SAVE = Short.parseShort(s);
} else {
SAVE = Short.MIN_VALUE;
}
}

protected final void initSAVED(String s) {
if (!s.trim().isEmpty()) {
SAVED = Integer.parseInt(s);
} else {
SAVED = Integer.MIN_VALUE;
}
}

protected final void initSAVLT(String s) {
if (!s.trim().isEmpty()) {
SAVLT = Byte.parseByte(s);
} else {
SAVLT = Byte.MIN_VALUE;
}
}

protected final void initSAVREG(String s) {
if (!s.trim().isEmpty()) {
SAVREG = Byte.parseByte(s);
} else {
SAVREG = Byte.MIN_VALUE;
}
}

protected final void initSCAGE1DRINK(String s) {
if (!s.trim().isEmpty()) {
SCAGE1DRINK = Byte.parseByte(s);
} else {
SCAGE1DRINK = Byte.MIN_VALUE;
}
}

protected final void initSCALCL7D(String s) {
if (!s.trim().isEmpty()) {
SCALCL7D = Byte.parseByte(s);
} else {
SCALCL7D = Byte.MIN_VALUE;
}
}

protected final void initSCANYELSETXT(String s) {
if (!s.trim().isEmpty()) {
SCANYELSETXT = Byte.parseByte(s);
} else {
SCANYELSETXT = Byte.MIN_VALUE;
}
}

protected final void initSCDEM2MANY(String s) {
if (!s.trim().isEmpty()) {
SCDEM2MANY = Byte.parseByte(s);
} else {
SCDEM2MANY = Byte.MIN_VALUE;
}
}

protected final void initSCDOBY4(String s) {
if (!s.trim().isEmpty()) {
SCDOBY4 = Short.parseShort(s);
} else {
SCDOBY4 = Short.MIN_VALUE;
}
}

protected final void initSCEVERDRNK(String s) {
if (!s.trim().isEmpty()) {
SCEVERDRNK = Byte.parseByte(s);
} else {
SCEVERDRNK = Byte.MIN_VALUE;
}
}

protected final void initSCFALCDRNK(String s) {
if (!s.trim().isEmpty()) {
SCFALCDRNK = Byte.parseByte(s);
} else {
SCFALCDRNK = Byte.MIN_VALUE;
}
}

protected final void initSCFANNOY(String s) {
if (!s.trim().isEmpty()) {
SCFANNOY = Byte.parseByte(s);
} else {
SCFANNOY = Byte.MIN_VALUE;
}
}

protected final void initSCFCRITIC(String s) {
if (!s.trim().isEmpty()) {
SCFCRITIC = Byte.parseByte(s);
} else {
SCFCRITIC = Byte.MIN_VALUE;
}
}

protected final void initSCFLAG_DV(String s) {
if (!s.trim().isEmpty()) {
SCFLAG_DV = Byte.parseByte(s);
} else {
SCFLAG_DV = Byte.MIN_VALUE;
}
}

protected final void initSCFLETDWN(String s) {
if (!s.trim().isEmpty()) {
SCFLETDWN = Byte.parseByte(s);
} else {
SCFLETDWN = Byte.MIN_VALUE;
}
}

protected final void initSCFOPENUP(String s) {
if (!s.trim().isEmpty()) {
SCFOPENUP = Byte.parseByte(s);
} else {
SCFOPENUP = Byte.MIN_VALUE;
}
}

protected final void initSCFRELY(String s) {
if (!s.trim().isEmpty()) {
SCFRELY = Byte.parseByte(s);
} else {
SCFRELY = Byte.MIN_VALUE;
}
}

protected final void initSCFRENDANY(String s) {
if (!s.trim().isEmpty()) {
SCFRENDANY = Byte.parseByte(s);
} else {
SCFRENDANY = Byte.MIN_VALUE;
}
}

protected final void initSCFUNDSTND(String s) {
if (!s.trim().isEmpty()) {
SCFUNDSTND = Byte.parseByte(s);
} else {
SCFUNDSTND = Byte.MIN_VALUE;
}
}

protected final void initSCHLLOC(String s) {
if (!s.trim().isEmpty()) {
SCHLLOC = Byte.parseByte(s);
} else {
SCHLLOC = Byte.MIN_VALUE;
}
}

protected final void initSCHMCONT(String s) {
if (!s.trim().isEmpty()) {
SCHMCONT = Byte.parseByte(s);
} else {
SCHMCONT = Byte.MIN_VALUE;
}
}

protected final void initSCHOK(String s) {
if (!s.trim().isEmpty()) {
SCHOK = Byte.parseByte(s);
} else {
SCHOK = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT1(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT1 = Byte.parseByte(s);
} else {
SCLFSAT1 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT2(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT2 = Byte.parseByte(s);
} else {
SCLFSAT2 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT7(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT7 = Byte.parseByte(s);
} else {
SCLFSAT7 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSATO(String s) {
if (!s.trim().isEmpty()) {
SCLFSATO = Byte.parseByte(s);
} else {
SCLFSATO = Byte.MIN_VALUE;
}
}

protected final void initSCLOUTCONT(String s) {
if (!s.trim().isEmpty()) {
SCLOUTCONT = Byte.parseByte(s);
} else {
SCLOUTCONT = Byte.MIN_VALUE;
}
}

protected final void initSCMOLWP(String s) {
if (!s.trim().isEmpty()) {
SCMOLWP = Byte.parseByte(s);
} else {
SCMOLWP = Byte.MIN_VALUE;
}
}

protected final void initSCNALCL7D(String s) {
if (!s.trim().isEmpty()) {
SCNALCL7D = Byte.parseByte(s);
} else {
SCNALCL7D = Byte.MIN_VALUE;
}
}

protected final void initSCNALCPINT(String s) {
if (!s.trim().isEmpty()) {
SCNALCPINT = Double.parseDouble(s);
} else {
SCNALCPINT = Double.NaN;
}
}

protected final void initSCNALCPOPS(String s) {
if (!s.trim().isEmpty()) {
SCNALCPOPS = Double.parseDouble(s);
} else {
SCNALCPOPS = Double.NaN;
}
}

protected final void initSCNALCSHOT(String s) {
if (!s.trim().isEmpty()) {
SCNALCSHOT = Double.parseDouble(s);
} else {
SCNALCSHOT = Double.NaN;
}
}

protected final void initSCNALCWINE(String s) {
if (!s.trim().isEmpty()) {
SCNALCWINE = Double.parseDouble(s);
} else {
SCNALCWINE = Double.NaN;
}
}

protected final void initSCOPFAMA(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMA = Byte.parseByte(s);
} else {
SCOPFAMA = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMB(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMB = Byte.parseByte(s);
} else {
SCOPFAMB = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMD(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMD = Byte.parseByte(s);
} else {
SCOPFAMD = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMF(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMF = Byte.parseByte(s);
} else {
SCOPFAMF = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMH(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMH = Byte.parseByte(s);
} else {
SCOPFAMH = Byte.MIN_VALUE;
}
}

protected final void initSCPANNOY(String s) {
if (!s.trim().isEmpty()) {
SCPANNOY = Byte.parseByte(s);
} else {
SCPANNOY = Byte.MIN_VALUE;
}
}

protected final void initSCPCRITIC(String s) {
if (!s.trim().isEmpty()) {
SCPCRITIC = Byte.parseByte(s);
} else {
SCPCRITIC = Byte.MIN_VALUE;
}
}

protected final void initSCPLETDWN(String s) {
if (!s.trim().isEmpty()) {
SCPLETDWN = Byte.parseByte(s);
} else {
SCPLETDWN = Byte.MIN_VALUE;
}
}

protected final void initSCPOPENUP(String s) {
if (!s.trim().isEmpty()) {
SCPOPENUP = Byte.parseByte(s);
} else {
SCPOPENUP = Byte.MIN_VALUE;
}
}

protected final void initSCPRELY(String s) {
if (!s.trim().isEmpty()) {
SCPRELY = Byte.parseByte(s);
} else {
SCPRELY = Byte.MIN_VALUE;
}
}

protected final void initSCPUNDSTND(String s) {
if (!s.trim().isEmpty()) {
SCPUNDSTND = Byte.parseByte(s);
} else {
SCPUNDSTND = Byte.MIN_VALUE;
}
}

protected final void initSCRANNOY(String s) {
if (!s.trim().isEmpty()) {
SCRANNOY = Byte.parseByte(s);
} else {
SCRANNOY = Byte.MIN_VALUE;
}
}

protected final void initSCRCRITIC(String s) {
if (!s.trim().isEmpty()) {
SCRCRITIC = Byte.parseByte(s);
} else {
SCRCRITIC = Byte.MIN_VALUE;
}
}

protected final void initSCRELANY(String s) {
if (!s.trim().isEmpty()) {
SCRELANY = Byte.parseByte(s);
} else {
SCRELANY = Byte.MIN_VALUE;
}
}

protected final void initSCRLETDWN(String s) {
if (!s.trim().isEmpty()) {
SCRLETDWN = Byte.parseByte(s);
} else {
SCRLETDWN = Byte.MIN_VALUE;
}
}

protected final void initSCROPENUP(String s) {
if (!s.trim().isEmpty()) {
SCROPENUP = Byte.parseByte(s);
} else {
SCROPENUP = Byte.MIN_VALUE;
}
}

protected final void initSCRRELY(String s) {
if (!s.trim().isEmpty()) {
SCRRELY = Byte.parseByte(s);
} else {
SCRRELY = Byte.MIN_VALUE;
}
}

protected final void initSCRUNDSTND(String s) {
if (!s.trim().isEmpty()) {
SCRUNDSTND = Byte.parseByte(s);
} else {
SCRUNDSTND = Byte.MIN_VALUE;
}
}

protected final void initSCSEX(String s) {
if (!s.trim().isEmpty()) {
SCSEX = Byte.parseByte(s);
} else {
SCSEX = Byte.MIN_VALUE;
}
}

protected final void initSCSF1(String s) {
if (!s.trim().isEmpty()) {
SCSF1 = Byte.parseByte(s);
} else {
SCSF1 = Byte.MIN_VALUE;
}
}

protected final void initSCSF2A(String s) {
if (!s.trim().isEmpty()) {
SCSF2A = Byte.parseByte(s);
} else {
SCSF2A = Byte.MIN_VALUE;
}
}

protected final void initSCSF2B(String s) {
if (!s.trim().isEmpty()) {
SCSF2B = Byte.parseByte(s);
} else {
SCSF2B = Byte.MIN_VALUE;
}
}

protected final void initSCSF3A(String s) {
if (!s.trim().isEmpty()) {
SCSF3A = Byte.parseByte(s);
} else {
SCSF3A = Byte.MIN_VALUE;
}
}

protected final void initSCSF3B(String s) {
if (!s.trim().isEmpty()) {
SCSF3B = Byte.parseByte(s);
} else {
SCSF3B = Byte.MIN_VALUE;
}
}

protected final void initSCSF4A(String s) {
if (!s.trim().isEmpty()) {
SCSF4A = Byte.parseByte(s);
} else {
SCSF4A = Byte.MIN_VALUE;
}
}

protected final void initSCSF4B(String s) {
if (!s.trim().isEmpty()) {
SCSF4B = Byte.parseByte(s);
} else {
SCSF4B = Byte.MIN_VALUE;
}
}

protected final void initSCSF5(String s) {
if (!s.trim().isEmpty()) {
SCSF5 = Byte.parseByte(s);
} else {
SCSF5 = Byte.MIN_VALUE;
}
}

protected final void initSCSF6A(String s) {
if (!s.trim().isEmpty()) {
SCSF6A = Byte.parseByte(s);
} else {
SCSF6A = Byte.MIN_VALUE;
}
}

protected final void initSCSF6B(String s) {
if (!s.trim().isEmpty()) {
SCSF6B = Byte.parseByte(s);
} else {
SCSF6B = Byte.MIN_VALUE;
}
}

protected final void initSCSF6C(String s) {
if (!s.trim().isEmpty()) {
SCSF6C = Byte.parseByte(s);
} else {
SCSF6C = Byte.MIN_VALUE;
}
}

protected final void initSCSF7(String s) {
if (!s.trim().isEmpty()) {
SCSF7 = Byte.parseByte(s);
} else {
SCSF7 = Byte.MIN_VALUE;
}
}

protected final void initSCSSUP1(String s) {
if (!s.trim().isEmpty()) {
SCSSUP1 = Byte.parseByte(s);
} else {
SCSSUP1 = Byte.MIN_VALUE;
}
}

protected final void initSCSSUPR2R(String s) {
if (!s.trim().isEmpty()) {
SCSSUPR2R = Byte.parseByte(s);
} else {
SCSSUPR2R = Byte.MIN_VALUE;
}
}

protected final void initSCTIMEMNUF(String s) {
if (!s.trim().isEmpty()) {
SCTIMEMNUF = Byte.parseByte(s);
} else {
SCTIMEMNUF = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUAGE(String s) {
if (!s.trim().isEmpty()) {
SCWHORUAGE = Byte.parseByte(s);
} else {
SCWHORUAGE = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUEDU(String s) {
if (!s.trim().isEmpty()) {
SCWHORUEDU = Byte.parseByte(s);
} else {
SCWHORUEDU = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUFAM(String s) {
if (!s.trim().isEmpty()) {
SCWHORUFAM = Byte.parseByte(s);
} else {
SCWHORUFAM = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUPOL(String s) {
if (!s.trim().isEmpty()) {
SCWHORUPOL = Byte.parseByte(s);
} else {
SCWHORUPOL = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUPRO(String s) {
if (!s.trim().isEmpty()) {
SCWHORUPRO = Byte.parseByte(s);
} else {
SCWHORUPRO = Byte.MIN_VALUE;
}
}

protected final void initSCWHORURAC(String s) {
if (!s.trim().isEmpty()) {
SCWHORURAC = Byte.parseByte(s);
} else {
SCWHORURAC = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUSEX(String s) {
if (!s.trim().isEmpty()) {
SCWHORUSEX = Byte.parseByte(s);
} else {
SCWHORUSEX = Byte.MIN_VALUE;
}
}

protected final void initSCWKVFAST(String s) {
if (!s.trim().isEmpty()) {
SCWKVFAST = Byte.parseByte(s);
} else {
SCWKVFAST = Byte.MIN_VALUE;
}
}

protected final void initSEEARNGRS_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_DV = Double.parseDouble(s);
} else {
SEEARNGRS_DV = Double.NaN;
}
}

protected final void initSEEARNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_IF = Byte.parseByte(s);
} else {
SEEARNGRS_IF = Byte.MIN_VALUE;
}
}

protected final void initSEEARNNET_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNNET_DV = Double.parseDouble(s);
} else {
SEEARNNET_DV = Double.NaN;
}
}

protected final void initSEX_DV(String s) {
if (!s.trim().isEmpty()) {
SEX_DV = Byte.parseByte(s);
} else {
SEX_DV = Byte.MIN_VALUE;
}
}

protected final void initSF1(String s) {
if (!s.trim().isEmpty()) {
SF1 = Byte.parseByte(s);
} else {
SF1 = Byte.MIN_VALUE;
}
}

protected final void initSF12MCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12MCS_DV = Double.parseDouble(s);
} else {
SF12MCS_DV = Double.NaN;
}
}

protected final void initSF12PCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12PCS_DV = Double.parseDouble(s);
} else {
SF12PCS_DV = Double.NaN;
}
}

protected final void initSINGLE_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
SINGLE_DV = false;
} else {
SINGLE_DV = true;
}
}
}

protected final void initSMAGBG(String s) {
if (!s.trim().isEmpty()) {
SMAGBG = Byte.parseByte(s);
} else {
SMAGBG = Byte.MIN_VALUE;
}
}

protected final void initSMCIGS(String s) {
if (!s.trim().isEmpty()) {
SMCIGS = Byte.parseByte(s);
} else {
SMCIGS = Byte.MIN_VALUE;
}
}

protected final void initSMEVER(String s) {
if (!s.trim().isEmpty()) {
SMEVER = Byte.parseByte(s);
} else {
SMEVER = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH11(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH11 = Byte.parseByte(s);
} else {
SMKMNTH11 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH12(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH12 = Byte.parseByte(s);
} else {
SMKMNTH12 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH13(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH13 = Byte.parseByte(s);
} else {
SMKMNTH13 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH14(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH14 = Byte.parseByte(s);
} else {
SMKMNTH14 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH15(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH15 = Byte.parseByte(s);
} else {
SMKMNTH15 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH21(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH21 = Byte.parseByte(s);
} else {
SMKMNTH21 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH22(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH22 = Byte.parseByte(s);
} else {
SMKMNTH22 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH23(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH23 = Byte.parseByte(s);
} else {
SMKMNTH23 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH24(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH24 = Byte.parseByte(s);
} else {
SMKMNTH24 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH25(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH25 = Byte.parseByte(s);
} else {
SMKMNTH25 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH31(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH31 = Byte.parseByte(s);
} else {
SMKMNTH31 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH32(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH32 = Byte.parseByte(s);
} else {
SMKMNTH32 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH33(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH33 = Byte.parseByte(s);
} else {
SMKMNTH33 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH34(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH34 = Byte.parseByte(s);
} else {
SMKMNTH34 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH35(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH35 = Byte.parseByte(s);
} else {
SMKMNTH35 = Byte.MIN_VALUE;
}
}

protected final void initSMNCIGS(String s) {
if (!s.trim().isEmpty()) {
SMNCIGS = Byte.parseByte(s);
} else {
SMNCIGS = Byte.MIN_VALUE;
}
}

protected final void initSMNOW(String s) {
if (!s.trim().isEmpty()) {
SMNOW = Byte.parseByte(s);
} else {
SMNOW = Byte.MIN_VALUE;
}
}

protected final void initSPORTACT(String s) {
if (!s.trim().isEmpty()) {
SPORTACT = Byte.parseByte(s);
} else {
SPORTACT = Byte.MIN_VALUE;
}
}

protected final void initSPORTS11(String s) {
if (!s.trim().isEmpty()) {
SPORTS11 = Byte.parseByte(s);
} else {
SPORTS11 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS110(String s) {
if (!s.trim().isEmpty()) {
SPORTS110 = Byte.parseByte(s);
} else {
SPORTS110 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS111(String s) {
if (!s.trim().isEmpty()) {
SPORTS111 = Byte.parseByte(s);
} else {
SPORTS111 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS112(String s) {
if (!s.trim().isEmpty()) {
SPORTS112 = Byte.parseByte(s);
} else {
SPORTS112 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS113(String s) {
if (!s.trim().isEmpty()) {
SPORTS113 = Byte.parseByte(s);
} else {
SPORTS113 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS114(String s) {
if (!s.trim().isEmpty()) {
SPORTS114 = Byte.parseByte(s);
} else {
SPORTS114 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS12(String s) {
if (!s.trim().isEmpty()) {
SPORTS12 = Byte.parseByte(s);
} else {
SPORTS12 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS13(String s) {
if (!s.trim().isEmpty()) {
SPORTS13 = Byte.parseByte(s);
} else {
SPORTS13 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS14(String s) {
if (!s.trim().isEmpty()) {
SPORTS14 = Byte.parseByte(s);
} else {
SPORTS14 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS15(String s) {
if (!s.trim().isEmpty()) {
SPORTS15 = Byte.parseByte(s);
} else {
SPORTS15 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS16(String s) {
if (!s.trim().isEmpty()) {
SPORTS16 = Byte.parseByte(s);
} else {
SPORTS16 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS17(String s) {
if (!s.trim().isEmpty()) {
SPORTS17 = Byte.parseByte(s);
} else {
SPORTS17 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS18(String s) {
if (!s.trim().isEmpty()) {
SPORTS18 = Byte.parseByte(s);
} else {
SPORTS18 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS19(String s) {
if (!s.trim().isEmpty()) {
SPORTS19 = Byte.parseByte(s);
} else {
SPORTS19 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS196(String s) {
if (!s.trim().isEmpty()) {
SPORTS196 = Byte.parseByte(s);
} else {
SPORTS196 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS216(String s) {
if (!s.trim().isEmpty()) {
SPORTS216 = Byte.parseByte(s);
} else {
SPORTS216 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS217(String s) {
if (!s.trim().isEmpty()) {
SPORTS217 = Byte.parseByte(s);
} else {
SPORTS217 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS218(String s) {
if (!s.trim().isEmpty()) {
SPORTS218 = Byte.parseByte(s);
} else {
SPORTS218 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS219(String s) {
if (!s.trim().isEmpty()) {
SPORTS219 = Byte.parseByte(s);
} else {
SPORTS219 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS220(String s) {
if (!s.trim().isEmpty()) {
SPORTS220 = Byte.parseByte(s);
} else {
SPORTS220 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS221(String s) {
if (!s.trim().isEmpty()) {
SPORTS221 = Byte.parseByte(s);
} else {
SPORTS221 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS222(String s) {
if (!s.trim().isEmpty()) {
SPORTS222 = Byte.parseByte(s);
} else {
SPORTS222 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS223(String s) {
if (!s.trim().isEmpty()) {
SPORTS223 = Byte.parseByte(s);
} else {
SPORTS223 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS224(String s) {
if (!s.trim().isEmpty()) {
SPORTS224 = Byte.parseByte(s);
} else {
SPORTS224 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS225(String s) {
if (!s.trim().isEmpty()) {
SPORTS225 = Byte.parseByte(s);
} else {
SPORTS225 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS226(String s) {
if (!s.trim().isEmpty()) {
SPORTS226 = Byte.parseByte(s);
} else {
SPORTS226 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS227(String s) {
if (!s.trim().isEmpty()) {
SPORTS227 = Byte.parseByte(s);
} else {
SPORTS227 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS228(String s) {
if (!s.trim().isEmpty()) {
SPORTS228 = Byte.parseByte(s);
} else {
SPORTS228 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS229(String s) {
if (!s.trim().isEmpty()) {
SPORTS229 = Byte.parseByte(s);
} else {
SPORTS229 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS230(String s) {
if (!s.trim().isEmpty()) {
SPORTS230 = Byte.parseByte(s);
} else {
SPORTS230 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS231(String s) {
if (!s.trim().isEmpty()) {
SPORTS231 = Byte.parseByte(s);
} else {
SPORTS231 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS296(String s) {
if (!s.trim().isEmpty()) {
SPORTS296 = Byte.parseByte(s);
} else {
SPORTS296 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS31(String s) {
if (!s.trim().isEmpty()) {
SPORTS31 = Byte.parseByte(s);
} else {
SPORTS31 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS32(String s) {
if (!s.trim().isEmpty()) {
SPORTS32 = Byte.parseByte(s);
} else {
SPORTS32 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS33(String s) {
if (!s.trim().isEmpty()) {
SPORTS33 = Byte.parseByte(s);
} else {
SPORTS33 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS34(String s) {
if (!s.trim().isEmpty()) {
SPORTS34 = Byte.parseByte(s);
} else {
SPORTS34 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS35(String s) {
if (!s.trim().isEmpty()) {
SPORTS35 = Byte.parseByte(s);
} else {
SPORTS35 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS36(String s) {
if (!s.trim().isEmpty()) {
SPORTS36 = Byte.parseByte(s);
} else {
SPORTS36 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS37(String s) {
if (!s.trim().isEmpty()) {
SPORTS37 = Byte.parseByte(s);
} else {
SPORTS37 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS38(String s) {
if (!s.trim().isEmpty()) {
SPORTS38 = Byte.parseByte(s);
} else {
SPORTS38 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS39(String s) {
if (!s.trim().isEmpty()) {
SPORTS39 = Byte.parseByte(s);
} else {
SPORTS39 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS396(String s) {
if (!s.trim().isEmpty()) {
SPORTS396 = Byte.parseByte(s);
} else {
SPORTS396 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS3FREQ(String s) {
if (!s.trim().isEmpty()) {
SPORTS3FREQ = Byte.parseByte(s);
} else {
SPORTS3FREQ = Byte.MIN_VALUE;
}
}

protected final void initSPORTSFREQ(String s) {
if (!s.trim().isEmpty()) {
SPORTSFREQ = Byte.parseByte(s);
} else {
SPORTSFREQ = Byte.MIN_VALUE;
}
}

protected final void initSPPEN(String s) {
if (!s.trim().isEmpty()) {
SPPEN = Byte.parseByte(s);
} else {
SPPEN = Byte.MIN_VALUE;
}
}

protected final void initSPPID(String s) {
if (!s.trim().isEmpty()) {
SPPID = Integer.parseInt(s);
} else {
SPPID = Integer.MIN_VALUE;
}
}

protected final void initSPPNO(String s) {
if (!s.trim().isEmpty()) {
SPPNO = Byte.parseByte(s);
} else {
SPPNO = Byte.MIN_VALUE;
}
}

protected final void initSTATCM1(String s) {
if (!s.trim().isEmpty()) {
STATCM1 = Byte.parseByte(s);
} else {
STATCM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM2(String s) {
if (!s.trim().isEmpty()) {
STATCM2 = Byte.parseByte(s);
} else {
STATCM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM3(String s) {
if (!s.trim().isEmpty()) {
STATCM3 = Byte.parseByte(s);
} else {
STATCM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATCY41(String s) {
if (!s.trim().isEmpty()) {
STATCY41 = Short.parseShort(s);
} else {
STATCY41 = Short.MIN_VALUE;
}
}

protected final void initSTATCY42(String s) {
if (!s.trim().isEmpty()) {
STATCY42 = Short.parseShort(s);
} else {
STATCY42 = Short.MIN_VALUE;
}
}

protected final void initSTATCY43(String s) {
if (!s.trim().isEmpty()) {
STATCY43 = Short.parseShort(s);
} else {
STATCY43 = Short.MIN_VALUE;
}
}

protected final void initSTATENDD1(String s) {
if (!s.trim().isEmpty()) {
STATENDD1 = Byte.parseByte(s);
} else {
STATENDD1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
STATENDD10 = false;
} else {
STATENDD10 = true;
}
}
}

protected final void initSTATENDD2(String s) {
if (!s.trim().isEmpty()) {
STATENDD2 = Byte.parseByte(s);
} else {
STATENDD2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD3(String s) {
if (!s.trim().isEmpty()) {
STATENDD3 = Byte.parseByte(s);
} else {
STATENDD3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD4(String s) {
if (!s.trim().isEmpty()) {
STATENDD4 = Byte.parseByte(s);
} else {
STATENDD4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD5(String s) {
if (!s.trim().isEmpty()) {
STATENDD5 = Byte.parseByte(s);
} else {
STATENDD5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD6(String s) {
if (!s.trim().isEmpty()) {
STATENDD6 = Byte.parseByte(s);
} else {
STATENDD6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD7(String s) {
if (!s.trim().isEmpty()) {
STATENDD7 = Byte.parseByte(s);
} else {
STATENDD7 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD8(String s) {
if (!s.trim().isEmpty()) {
STATENDD8 = Byte.parseByte(s);
} else {
STATENDD8 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD9(String s) {
if (!s.trim().isEmpty()) {
STATENDD9 = Byte.parseByte(s);
} else {
STATENDD9 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM1(String s) {
if (!s.trim().isEmpty()) {
STATENDM1 = Byte.parseByte(s);
} else {
STATENDM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
STATENDM10 = false;
} else {
STATENDM10 = true;
}
}
}

protected final void initSTATENDM2(String s) {
if (!s.trim().isEmpty()) {
STATENDM2 = Byte.parseByte(s);
} else {
STATENDM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM3(String s) {
if (!s.trim().isEmpty()) {
STATENDM3 = Byte.parseByte(s);
} else {
STATENDM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM4(String s) {
if (!s.trim().isEmpty()) {
STATENDM4 = Byte.parseByte(s);
} else {
STATENDM4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM5(String s) {
if (!s.trim().isEmpty()) {
STATENDM5 = Byte.parseByte(s);
} else {
STATENDM5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM6(String s) {
if (!s.trim().isEmpty()) {
STATENDM6 = Byte.parseByte(s);
} else {
STATENDM6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM7(String s) {
if (!s.trim().isEmpty()) {
STATENDM7 = Byte.parseByte(s);
} else {
STATENDM7 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM8(String s) {
if (!s.trim().isEmpty()) {
STATENDM8 = Byte.parseByte(s);
} else {
STATENDM8 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM9(String s) {
if (!s.trim().isEmpty()) {
STATENDM9 = Byte.parseByte(s);
} else {
STATENDM9 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDY41(String s) {
if (!s.trim().isEmpty()) {
STATENDY41 = Short.parseShort(s);
} else {
STATENDY41 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY410(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
STATENDY410 = false;
} else {
STATENDY410 = true;
}
}
}

protected final void initSTATENDY42(String s) {
if (!s.trim().isEmpty()) {
STATENDY42 = Short.parseShort(s);
} else {
STATENDY42 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY43(String s) {
if (!s.trim().isEmpty()) {
STATENDY43 = Short.parseShort(s);
} else {
STATENDY43 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY44(String s) {
if (!s.trim().isEmpty()) {
STATENDY44 = Short.parseShort(s);
} else {
STATENDY44 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY45(String s) {
if (!s.trim().isEmpty()) {
STATENDY45 = Short.parseShort(s);
} else {
STATENDY45 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY46(String s) {
if (!s.trim().isEmpty()) {
STATENDY46 = Short.parseShort(s);
} else {
STATENDY46 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY47(String s) {
if (!s.trim().isEmpty()) {
STATENDY47 = Short.parseShort(s);
} else {
STATENDY47 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY48(String s) {
if (!s.trim().isEmpty()) {
STATENDY48 = Short.parseShort(s);
} else {
STATENDY48 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY49(String s) {
if (!s.trim().isEmpty()) {
STATENDY49 = Short.parseShort(s);
} else {
STATENDY49 = Short.MIN_VALUE;
}
}

protected final void initSTENDREAS(String s) {
if (!s.trim().isEmpty()) {
STENDREAS = Byte.parseByte(s);
} else {
STENDREAS = Byte.MIN_VALUE;
}
}

protected final void initSTRATA(String s) {
if (!s.trim().isEmpty()) {
STRATA = Short.parseShort(s);
} else {
STRATA = Short.MIN_VALUE;
}
}

protected final void initSUSP(String s) {
if (!s.trim().isEmpty()) {
SUSP = Byte.parseByte(s);
} else {
SUSP = Byte.MIN_VALUE;
}
}

protected final void initTRAINANY(String s) {
if (!s.trim().isEmpty()) {
TRAINANY = Byte.parseByte(s);
} else {
TRAINANY = Byte.MIN_VALUE;
}
}

protected final void initTRAINDAYS1(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS1 = Short.parseShort(s);
} else {
TRAINDAYS1 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS2(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS2 = Short.parseShort(s);
} else {
TRAINDAYS2 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS3(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS3 = Short.parseShort(s);
} else {
TRAINDAYS3 = Short.MIN_VALUE;
}
}

protected final void initTRAINEND1(String s) {
if (!s.trim().isEmpty()) {
TRAINEND1 = Byte.parseByte(s);
} else {
TRAINEND1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND2(String s) {
if (!s.trim().isEmpty()) {
TRAINEND2 = Byte.parseByte(s);
} else {
TRAINEND2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND3(String s) {
if (!s.trim().isEmpty()) {
TRAINEND3 = Byte.parseByte(s);
} else {
TRAINEND3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS1(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS1 = Byte.parseByte(s);
} else {
TRAINHRS1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS2(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS2 = Byte.parseByte(s);
} else {
TRAINHRS2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS3(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS3 = Byte.parseByte(s);
} else {
TRAINHRS3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINN(String s) {
if (!s.trim().isEmpty()) {
TRAINN = Byte.parseByte(s);
} else {
TRAINN = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP11(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP11 = Byte.parseByte(s);
} else {
TRAINPURP11 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP12(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP12 = Byte.parseByte(s);
} else {
TRAINPURP12 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP13(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP13 = Byte.parseByte(s);
} else {
TRAINPURP13 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP21(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP21 = Byte.parseByte(s);
} else {
TRAINPURP21 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP22(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP22 = Byte.parseByte(s);
} else {
TRAINPURP22 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP23(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP23 = Byte.parseByte(s);
} else {
TRAINPURP23 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP31(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP31 = Byte.parseByte(s);
} else {
TRAINPURP31 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP32(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP32 = Byte.parseByte(s);
} else {
TRAINPURP32 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP33(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP33 = Byte.parseByte(s);
} else {
TRAINPURP33 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP41(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP41 = Byte.parseByte(s);
} else {
TRAINPURP41 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP42(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP42 = Byte.parseByte(s);
} else {
TRAINPURP42 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP43(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP43 = Byte.parseByte(s);
} else {
TRAINPURP43 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP51(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP51 = Byte.parseByte(s);
} else {
TRAINPURP51 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP52(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP52 = Byte.parseByte(s);
} else {
TRAINPURP52 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP53(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP53 = Byte.parseByte(s);
} else {
TRAINPURP53 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP61(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP61 = Byte.parseByte(s);
} else {
TRAINPURP61 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP62(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP62 = Byte.parseByte(s);
} else {
TRAINPURP62 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP63(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP63 = Byte.parseByte(s);
} else {
TRAINPURP63 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP71(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP71 = Byte.parseByte(s);
} else {
TRAINPURP71 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP72(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP72 = Byte.parseByte(s);
} else {
TRAINPURP72 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP73(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP73 = Byte.parseByte(s);
} else {
TRAINPURP73 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL1 = Byte.parseByte(s);
} else {
TRAINQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL2 = Byte.parseByte(s);
} else {
TRAINQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL3 = Byte.parseByte(s);
} else {
TRAINQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRQUAL1 = Byte.parseByte(s);
} else {
TRQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL10(String s) {
if (!s.trim().isEmpty()) {
TRQUAL10 = Byte.parseByte(s);
} else {
TRQUAL10 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL11(String s) {
if (!s.trim().isEmpty()) {
TRQUAL11 = Byte.parseByte(s);
} else {
TRQUAL11 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL13(String s) {
if (!s.trim().isEmpty()) {
TRQUAL13 = Byte.parseByte(s);
} else {
TRQUAL13 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL15(String s) {
if (!s.trim().isEmpty()) {
TRQUAL15 = Byte.parseByte(s);
} else {
TRQUAL15 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL16(String s) {
if (!s.trim().isEmpty()) {
TRQUAL16 = Byte.parseByte(s);
} else {
TRQUAL16 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL17(String s) {
if (!s.trim().isEmpty()) {
TRQUAL17 = Byte.parseByte(s);
} else {
TRQUAL17 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL18(String s) {
if (!s.trim().isEmpty()) {
TRQUAL18 = Byte.parseByte(s);
} else {
TRQUAL18 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL19(String s) {
if (!s.trim().isEmpty()) {
TRQUAL19 = Byte.parseByte(s);
} else {
TRQUAL19 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRQUAL2 = Byte.parseByte(s);
} else {
TRQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL20(String s) {
if (!s.trim().isEmpty()) {
TRQUAL20 = Byte.parseByte(s);
} else {
TRQUAL20 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL21(String s) {
if (!s.trim().isEmpty()) {
TRQUAL21 = Byte.parseByte(s);
} else {
TRQUAL21 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL22(String s) {
if (!s.trim().isEmpty()) {
TRQUAL22 = Byte.parseByte(s);
} else {
TRQUAL22 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL23(String s) {
if (!s.trim().isEmpty()) {
TRQUAL23 = Byte.parseByte(s);
} else {
TRQUAL23 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL24(String s) {
if (!s.trim().isEmpty()) {
TRQUAL24 = Byte.parseByte(s);
} else {
TRQUAL24 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL25(String s) {
if (!s.trim().isEmpty()) {
TRQUAL25 = Byte.parseByte(s);
} else {
TRQUAL25 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL26(String s) {
if (!s.trim().isEmpty()) {
TRQUAL26 = Byte.parseByte(s);
} else {
TRQUAL26 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL27(String s) {
if (!s.trim().isEmpty()) {
TRQUAL27 = Byte.parseByte(s);
} else {
TRQUAL27 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL28(String s) {
if (!s.trim().isEmpty()) {
TRQUAL28 = Byte.parseByte(s);
} else {
TRQUAL28 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL29(String s) {
if (!s.trim().isEmpty()) {
TRQUAL29 = Byte.parseByte(s);
} else {
TRQUAL29 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRQUAL3 = Byte.parseByte(s);
} else {
TRQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL30(String s) {
if (!s.trim().isEmpty()) {
TRQUAL30 = Byte.parseByte(s);
} else {
TRQUAL30 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL31(String s) {
if (!s.trim().isEmpty()) {
TRQUAL31 = Byte.parseByte(s);
} else {
TRQUAL31 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL4(String s) {
if (!s.trim().isEmpty()) {
TRQUAL4 = Byte.parseByte(s);
} else {
TRQUAL4 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL5(String s) {
if (!s.trim().isEmpty()) {
TRQUAL5 = Byte.parseByte(s);
} else {
TRQUAL5 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL6(String s) {
if (!s.trim().isEmpty()) {
TRQUAL6 = Byte.parseByte(s);
} else {
TRQUAL6 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL7(String s) {
if (!s.trim().isEmpty()) {
TRQUAL7 = Byte.parseByte(s);
} else {
TRQUAL7 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL8(String s) {
if (!s.trim().isEmpty()) {
TRQUAL8 = Byte.parseByte(s);
} else {
TRQUAL8 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL9(String s) {
if (!s.trim().isEmpty()) {
TRQUAL9 = Byte.parseByte(s);
} else {
TRQUAL9 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO1(String s) {
if (!s.trim().isEmpty()) {
TRWHO1 = Byte.parseByte(s);
} else {
TRWHO1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO2(String s) {
if (!s.trim().isEmpty()) {
TRWHO2 = Byte.parseByte(s);
} else {
TRWHO2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO3(String s) {
if (!s.trim().isEmpty()) {
TRWHO3 = Byte.parseByte(s);
} else {
TRWHO3 = Byte.MIN_VALUE;
}
}

protected final void initTUIN1(String s) {
if (!s.trim().isEmpty()) {
TUIN1 = Short.parseShort(s);
} else {
TUIN1 = Short.MIN_VALUE;
}
}

protected final void initTUJBPL(String s) {
if (!s.trim().isEmpty()) {
TUJBPL = Short.parseShort(s);
} else {
TUJBPL = Short.MIN_VALUE;
}
}

protected final void initTWKCAR(String s) {
if (!s.trim().isEmpty()) {
TWKCAR = Byte.parseByte(s);
} else {
TWKCAR = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY1(String s) {
if (!s.trim().isEmpty()) {
TWKCARY1 = Byte.parseByte(s);
} else {
TWKCARY1 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY10(String s) {
if (!s.trim().isEmpty()) {
TWKCARY10 = Byte.parseByte(s);
} else {
TWKCARY10 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY11(String s) {
if (!s.trim().isEmpty()) {
TWKCARY11 = Byte.parseByte(s);
} else {
TWKCARY11 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY12(String s) {
if (!s.trim().isEmpty()) {
TWKCARY12 = Byte.parseByte(s);
} else {
TWKCARY12 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY13(String s) {
if (!s.trim().isEmpty()) {
TWKCARY13 = Byte.parseByte(s);
} else {
TWKCARY13 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY14(String s) {
if (!s.trim().isEmpty()) {
TWKCARY14 = Byte.parseByte(s);
} else {
TWKCARY14 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY2(String s) {
if (!s.trim().isEmpty()) {
TWKCARY2 = Byte.parseByte(s);
} else {
TWKCARY2 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY3(String s) {
if (!s.trim().isEmpty()) {
TWKCARY3 = Byte.parseByte(s);
} else {
TWKCARY3 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY4(String s) {
if (!s.trim().isEmpty()) {
TWKCARY4 = Byte.parseByte(s);
} else {
TWKCARY4 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY5(String s) {
if (!s.trim().isEmpty()) {
TWKCARY5 = Byte.parseByte(s);
} else {
TWKCARY5 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY6(String s) {
if (!s.trim().isEmpty()) {
TWKCARY6 = Byte.parseByte(s);
} else {
TWKCARY6 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY7(String s) {
if (!s.trim().isEmpty()) {
TWKCARY7 = Byte.parseByte(s);
} else {
TWKCARY7 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY8(String s) {
if (!s.trim().isEmpty()) {
TWKCARY8 = Byte.parseByte(s);
} else {
TWKCARY8 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY9(String s) {
if (!s.trim().isEmpty()) {
TWKCARY9 = Byte.parseByte(s);
} else {
TWKCARY9 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARY97(String s) {
if (!s.trim().isEmpty()) {
TWKCARY97 = Byte.parseByte(s);
} else {
TWKCARY97 = Byte.MIN_VALUE;
}
}

protected final void initTWKCARYM(String s) {
if (!s.trim().isEmpty()) {
TWKCARYM = Byte.parseByte(s);
} else {
TWKCARYM = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF1(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF1 = Byte.parseByte(s);
} else {
TWKDIFF1 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF2(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF2 = Byte.parseByte(s);
} else {
TWKDIFF2 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF3(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF3 = Byte.parseByte(s);
} else {
TWKDIFF3 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF4(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF4 = Byte.parseByte(s);
} else {
TWKDIFF4 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF5(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF5 = Byte.parseByte(s);
} else {
TWKDIFF5 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF6(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF6 = Byte.parseByte(s);
} else {
TWKDIFF6 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF7(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF7 = Byte.parseByte(s);
} else {
TWKDIFF7 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF8(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF8 = Byte.parseByte(s);
} else {
TWKDIFF8 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF97(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF97 = Byte.parseByte(s);
} else {
TWKDIFF97 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFFM(String s) {
if (!s.trim().isEmpty()) {
TWKDIFFM = Byte.parseByte(s);
} else {
TWKDIFFM = Byte.MIN_VALUE;
}
}

protected final void initUKBORN(String s) {
if (!s.trim().isEmpty()) {
UKBORN = Byte.parseByte(s);
} else {
UKBORN = Byte.MIN_VALUE;
}
}

protected final void initUNDQUS(String s) {
if (!s.trim().isEmpty()) {
UNDQUS = Byte.parseByte(s);
} else {
UNDQUS = Byte.MIN_VALUE;
}
}

protected final void initURBAN_DV(String s) {
if (!s.trim().isEmpty()) {
URBAN_DV = Byte.parseByte(s);
} else {
URBAN_DV = Byte.MIN_VALUE;
}
}

protected final void initUSBREAD(String s) {
if (!s.trim().isEmpty()) {
USBREAD = Byte.parseByte(s);
} else {
USBREAD = Byte.MIN_VALUE;
}
}

protected final void initUSDAIRY(String s) {
if (!s.trim().isEmpty()) {
USDAIRY = Byte.parseByte(s);
} else {
USDAIRY = Byte.MIN_VALUE;
}
}

protected final void initVOLFREQ(String s) {
if (!s.trim().isEmpty()) {
VOLFREQ = Byte.parseByte(s);
} else {
VOLFREQ = Byte.MIN_VALUE;
}
}

protected final void initVOLHRS(String s) {
if (!s.trim().isEmpty()) {
VOLHRS = Short.parseShort(s);
} else {
VOLHRS = Short.MIN_VALUE;
}
}

protected final void initVOLUN(String s) {
if (!s.trim().isEmpty()) {
VOLUN = Byte.parseByte(s);
} else {
VOLUN = Byte.MIN_VALUE;
}
}

protected final void initVOTE1(String s) {
if (!s.trim().isEmpty()) {
VOTE1 = Short.parseShort(s);
} else {
VOTE1 = Short.MIN_VALUE;
}
}

protected final void initVOTE2(String s) {
if (!s.trim().isEmpty()) {
VOTE2 = Short.parseShort(s);
} else {
VOTE2 = Short.MIN_VALUE;
}
}

protected final void initVOTE3(String s) {
if (!s.trim().isEmpty()) {
VOTE3 = Short.parseShort(s);
} else {
VOTE3 = Short.MIN_VALUE;
}
}

protected final void initVOTE4(String s) {
if (!s.trim().isEmpty()) {
VOTE4 = Short.parseShort(s);
} else {
VOTE4 = Short.MIN_VALUE;
}
}

protected final void initVOTE5(String s) {
if (!s.trim().isEmpty()) {
VOTE5 = Short.parseShort(s);
} else {
VOTE5 = Short.MIN_VALUE;
}
}

protected final void initVOTE6(String s) {
if (!s.trim().isEmpty()) {
VOTE6 = Short.parseShort(s);
} else {
VOTE6 = Short.MIN_VALUE;
}
}

protected final void initVOTE7(String s) {
if (!s.trim().isEmpty()) {
VOTE7 = Byte.parseByte(s);
} else {
VOTE7 = Byte.MIN_VALUE;
}
}

protected final void initVOTE8(String s) {
if (!s.trim().isEmpty()) {
VOTE8 = Byte.parseByte(s);
} else {
VOTE8 = Byte.MIN_VALUE;
}
}

protected final void initVOTEINTENT(String s) {
if (!s.trim().isEmpty()) {
VOTEINTENT = Byte.parseByte(s);
} else {
VOTEINTENT = Byte.MIN_VALUE;
}
}

protected final void initVOTENORM(String s) {
if (!s.trim().isEmpty()) {
VOTENORM = Byte.parseByte(s);
} else {
VOTENORM = Byte.MIN_VALUE;
}
}

protected final void initVOUCHER(String s) {
if (!s.trim().isEmpty()) {
VOUCHER = Byte.parseByte(s);
} else {
VOUCHER = Byte.MIN_VALUE;
}
}

protected final void initWALKPACE(String s) {
if (!s.trim().isEmpty()) {
WALKPACE = Byte.parseByte(s);
} else {
WALKPACE = Byte.MIN_VALUE;
}
}

protected final void initWKAUT1(String s) {
if (!s.trim().isEmpty()) {
WKAUT1 = Byte.parseByte(s);
} else {
WKAUT1 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT2(String s) {
if (!s.trim().isEmpty()) {
WKAUT2 = Byte.parseByte(s);
} else {
WKAUT2 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT3(String s) {
if (!s.trim().isEmpty()) {
WKAUT3 = Byte.parseByte(s);
} else {
WKAUT3 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT4(String s) {
if (!s.trim().isEmpty()) {
WKAUT4 = Byte.parseByte(s);
} else {
WKAUT4 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT5(String s) {
if (!s.trim().isEmpty()) {
WKAUT5 = Byte.parseByte(s);
} else {
WKAUT5 = Byte.MIN_VALUE;
}
}

protected final void initWKENDS(String s) {
if (!s.trim().isEmpty()) {
WKENDS = Byte.parseByte(s);
} else {
WKENDS = Byte.MIN_VALUE;
}
}

protected final void initWKFRUIT(String s) {
if (!s.trim().isEmpty()) {
WKFRUIT = Byte.parseByte(s);
} else {
WKFRUIT = Byte.MIN_VALUE;
}
}

protected final void initWKHOME(String s) {
if (!s.trim().isEmpty()) {
WKHOME = Byte.parseByte(s);
} else {
WKHOME = Byte.MIN_VALUE;
}
}

protected final void initWKPHYS(String s) {
if (!s.trim().isEmpty()) {
WKPHYS = Byte.parseByte(s);
} else {
WKPHYS = Byte.MIN_VALUE;
}
}

protected final void initWKPLSAM(String s) {
if (!s.trim().isEmpty()) {
WKPLSAM = Byte.parseByte(s);
} else {
WKPLSAM = Byte.MIN_VALUE;
}
}

protected final void initWKTIME(String s) {
if (!s.trim().isEmpty()) {
WKTIME = Short.parseShort(s);
} else {
WKTIME = Short.MIN_VALUE;
}
}

protected final void initWKVEGE(String s) {
if (!s.trim().isEmpty()) {
WKVEGE = Byte.parseByte(s);
} else {
WKVEGE = Byte.MIN_VALUE;
}
}

protected final void initWLK10M(String s) {
if (!s.trim().isEmpty()) {
WLK10M = Byte.parseByte(s);
} else {
WLK10M = Byte.MIN_VALUE;
}
}

protected final void initWLK30MIN(String s) {
if (!s.trim().isEmpty()) {
WLK30MIN = Byte.parseByte(s);
} else {
WLK30MIN = Byte.MIN_VALUE;
}
}

protected final void initWORKDIS(String s) {
if (!s.trim().isEmpty()) {
WORKDIS = Short.parseShort(s);
} else {
WORKDIS = Short.MIN_VALUE;
}
}

protected final void initWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
WORKTRAV = Byte.parseByte(s);
} else {
WORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initXPMOVE(String s) {
if (!s.trim().isEmpty()) {
XPMOVE = Byte.parseByte(s);
} else {
XPMOVE = Byte.MIN_VALUE;
}
}

protected final void initXTRA5MINOSM_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MINOSM_DV = Byte.parseByte(s);
} else {
XTRA5MINOSM_DV = Byte.MIN_VALUE;
}
}

protected final void initXTRA5MIN_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MIN_DV = Byte.parseByte(s);
} else {
XTRA5MIN_DV = Byte.MIN_VALUE;
}
}

public byte getACC1TO161() {
return ACC1TO161;
}

public byte getACC1TO1610() {
return ACC1TO1610;
}

public byte getACC1TO1611() {
return ACC1TO1611;
}

public byte getACC1TO1612() {
return ACC1TO1612;
}

public byte getACC1TO1613() {
return ACC1TO1613;
}

public byte getACC1TO1614() {
return ACC1TO1614;
}

public byte getACC1TO162() {
return ACC1TO162;
}

public byte getACC1TO163() {
return ACC1TO163;
}

public byte getACC1TO164() {
return ACC1TO164;
}

public byte getACC1TO165() {
return ACC1TO165;
}

public byte getACC1TO166() {
return ACC1TO166;
}

public byte getACC1TO167() {
return ACC1TO167;
}

public byte getACC1TO168() {
return ACC1TO168;
}

public byte getACC1TO169() {
return ACC1TO169;
}

public byte getACC1TO1697() {
return ACC1TO1697;
}

public byte getACCESS() {
return ACCESS;
}

public byte getADOPTCH01() {
return ADOPTCH01;
}

public byte getADOPTCH02() {
return ADOPTCH02;
}

public byte getADOPTCH03() {
return ADOPTCH03;
}

public byte getADOPTCH04() {
return ADOPTCH04;
}

public byte getADOPTCH05() {
return ADOPTCH05;
}

public byte getADOPTCH06() {
return ADOPTCH06;
}

public boolean getADOPTCH07() {
return ADOPTCH07;
}

public boolean getADOPTCH08() {
return ADOPTCH08;
}

public boolean getADOPTCH09() {
return ADOPTCH09;
}

public boolean getADOPTCH10() {
return ADOPTCH10;
}

public boolean getADOPTCH11() {
return ADOPTCH11;
}

public boolean getADOPTCH12() {
return ADOPTCH12;
}

public boolean getADOPTCH13() {
return ADOPTCH13;
}

public boolean getADOPTCH14() {
return ADOPTCH14;
}

public boolean getADOPTCH15() {
return ADOPTCH15;
}

public boolean getADOPTCH16() {
return ADOPTCH16;
}

public byte getADRESP17() {
return ADRESP17;
}

public byte getADSTATUS() {
return ADSTATUS;
}

public byte getADVVOUCHER() {
return ADVVOUCHER;
}

public byte getAGEGR10_DV() {
return AGEGR10_DV;
}

public byte getAGEGR13_DV() {
return AGEGR13_DV;
}

public byte getAGEGR5_DV() {
return AGEGR5_DV;
}

public byte getAGERET() {
return AGERET;
}

public short getAGE_DV() {
return AGE_DV;
}

public byte getAGLQUIT() {
return AGLQUIT;
}

public byte getAIDEFT() {
return AIDEFT;
}

public short getAIDHU1() {
return AIDHU1;
}

public short getAIDHU2() {
return AIDHU2;
}

public byte getAIDHUA1() {
return AIDHUA1;
}

public byte getAIDHUA10() {
return AIDHUA10;
}

public byte getAIDHUA11() {
return AIDHUA11;
}

public byte getAIDHUA12() {
return AIDHUA12;
}

public byte getAIDHUA13() {
return AIDHUA13;
}

public byte getAIDHUA14() {
return AIDHUA14;
}

public byte getAIDHUA15() {
return AIDHUA15;
}

public byte getAIDHUA16() {
return AIDHUA16;
}

public byte getAIDHUA2() {
return AIDHUA2;
}

public byte getAIDHUA3() {
return AIDHUA3;
}

public byte getAIDHUA4() {
return AIDHUA4;
}

public byte getAIDHUA5() {
return AIDHUA5;
}

public byte getAIDHUA6() {
return AIDHUA6;
}

public byte getAIDHUA7() {
return AIDHUA7;
}

public byte getAIDHUA8() {
return AIDHUA8;
}

public byte getAIDHUA9() {
return AIDHUA9;
}

public byte getALLCH01() {
return ALLCH01;
}

public byte getALLCH02() {
return ALLCH02;
}

public byte getALLCH03() {
return ALLCH03;
}

public byte getALLCH04() {
return ALLCH04;
}

public byte getALLCH05() {
return ALLCH05;
}

public byte getALLCH06() {
return ALLCH06;
}

public byte getALLCH07() {
return ALLCH07;
}

public byte getALLCH08() {
return ALLCH08;
}

public byte getALLCH09() {
return ALLCH09;
}

public byte getALLCH10() {
return ALLCH10;
}

public boolean getALLCH11() {
return ALLCH11;
}

public boolean getALLCH12() {
return ALLCH12;
}

public boolean getALLCH13() {
return ALLCH13;
}

public boolean getALLCH14() {
return ALLCH14;
}

public boolean getALLCH15() {
return ALLCH15;
}

public boolean getALLCH16() {
return ALLCH16;
}

public byte getALTCAR1() {
return ALTCAR1;
}

public byte getALTCAR10() {
return ALTCAR10;
}

public byte getALTCAR11() {
return ALTCAR11;
}

public byte getALTCAR12() {
return ALTCAR12;
}

public byte getALTCAR2() {
return ALTCAR2;
}

public byte getALTCAR3() {
return ALTCAR3;
}

public byte getALTCAR4() {
return ALTCAR4;
}

public byte getALTCAR5() {
return ALTCAR5;
}

public byte getALTCAR6() {
return ALTCAR6;
}

public byte getALTCAR7() {
return ALTCAR7;
}

public byte getALTCAR8() {
return ALTCAR8;
}

public byte getALTCAR9() {
return ALTCAR9;
}

public byte getALTCAR96() {
return ALTCAR96;
}

public byte getALTCAR97() {
return ALTCAR97;
}

public byte getARCFREQ() {
return ARCFREQ;
}

public byte getAREA() {
return AREA;
}

public byte getARTS1A1() {
return ARTS1A1;
}

public byte getARTS1A2() {
return ARTS1A2;
}

public byte getARTS1A3() {
return ARTS1A3;
}

public byte getARTS1A4() {
return ARTS1A4;
}

public byte getARTS1A5() {
return ARTS1A5;
}

public byte getARTS1A6() {
return ARTS1A6;
}

public byte getARTS1A7() {
return ARTS1A7;
}

public byte getARTS1A96() {
return ARTS1A96;
}

public byte getARTS1B10() {
return ARTS1B10;
}

public byte getARTS1B11() {
return ARTS1B11;
}

public byte getARTS1B12() {
return ARTS1B12;
}

public byte getARTS1B13() {
return ARTS1B13;
}

public byte getARTS1B14() {
return ARTS1B14;
}

public byte getARTS1B15() {
return ARTS1B15;
}

public byte getARTS1B9() {
return ARTS1B9;
}

public byte getARTS1B96() {
return ARTS1B96;
}

public byte getARTS1FREQ() {
return ARTS1FREQ;
}

public byte getARTS2A1() {
return ARTS2A1;
}

public byte getARTS2A2() {
return ARTS2A2;
}

public byte getARTS2A3() {
return ARTS2A3;
}

public byte getARTS2A4() {
return ARTS2A4;
}

public byte getARTS2A5() {
return ARTS2A5;
}

public byte getARTS2A6() {
return ARTS2A6;
}

public byte getARTS2A7() {
return ARTS2A7;
}

public byte getARTS2A96() {
return ARTS2A96;
}

public byte getARTS2B10() {
return ARTS2B10;
}

public byte getARTS2B11() {
return ARTS2B11;
}

public byte getARTS2B12() {
return ARTS2B12;
}

public byte getARTS2B13() {
return ARTS2B13;
}

public byte getARTS2B14() {
return ARTS2B14;
}

public byte getARTS2B15() {
return ARTS2B15;
}

public byte getARTS2B9() {
return ARTS2B9;
}

public byte getARTS2B96() {
return ARTS2B96;
}

public byte getARTS2FREQ() {
return ARTS2FREQ;
}

protected double BASNSA() {
return BASNSA;
}

protected double BASRATE() {
return BASRATE;
}

public byte getBASREST() {
return BASREST;
}

public byte getBENCB() {
return BENCB;
}

public byte getBENCTC() {
return BENCTC;
}

public byte getBENDIS1() {
return BENDIS1;
}

public byte getBENDIS10() {
return BENDIS10;
}

public byte getBENDIS11() {
return BENDIS11;
}

public byte getBENDIS2() {
return BENDIS2;
}

public byte getBENDIS3() {
return BENDIS3;
}

public byte getBENDIS4() {
return BENDIS4;
}

public byte getBENDIS5() {
return BENDIS5;
}

public byte getBENDIS6() {
return BENDIS6;
}

public byte getBENDIS7() {
return BENDIS7;
}

public byte getBENDIS8() {
return BENDIS8;
}

public byte getBENDIS9() {
return BENDIS9;
}

public byte getBENDIS96() {
return BENDIS96;
}

public byte getBENFAM1() {
return BENFAM1;
}

public byte getBENFAM2() {
return BENFAM2;
}

public byte getBENFAM3() {
return BENFAM3;
}

public byte getBENFAM4() {
return BENFAM4;
}

public byte getBENFAM5() {
return BENFAM5;
}

public byte getBENFAM96() {
return BENFAM96;
}

public byte getBENHOU1() {
return BENHOU1;
}

public byte getBENHOU2() {
return BENHOU2;
}

public byte getBENHOU3() {
return BENHOU3;
}

public byte getBENHOU4() {
return BENHOU4;
}

public byte getBENHOU96() {
return BENHOU96;
}

public byte getBENPEN1() {
return BENPEN1;
}

public byte getBENPEN2() {
return BENPEN2;
}

public byte getBENPEN3() {
return BENPEN3;
}

public byte getBENPEN4() {
return BENPEN4;
}

public byte getBENPEN5() {
return BENPEN5;
}

public byte getBENPEN6() {
return BENPEN6;
}

public byte getBENPEN7() {
return BENPEN7;
}

public byte getBENPEN8() {
return BENPEN8;
}

public byte getBENPEN96() {
return BENPEN96;
}

public byte getBENSTA1() {
return BENSTA1;
}

public byte getBENSTA2() {
return BENSTA2;
}

public byte getBENSTA3() {
return BENSTA3;
}

public byte getBENSTA4() {
return BENSTA4;
}

public byte getBENSTA5() {
return BENSTA5;
}

public byte getBENSTA6() {
return BENSTA6;
}

public byte getBENSTA7() {
return BENSTA7;
}

public byte getBENSTA8() {
return BENSTA8;
}

public byte getBENSTA96() {
return BENSTA96;
}

public byte getBENTAX1() {
return BENTAX1;
}

public byte getBENTAX2() {
return BENTAX2;
}

public byte getBENTAX3() {
return BENTAX3;
}

public byte getBENTAX4() {
return BENTAX4;
}

public byte getBENTAX5() {
return BENTAX5;
}

public byte getBENTAX96() {
return BENTAX96;
}

public byte getBENUNEMP1() {
return BENUNEMP1;
}

public byte getBENUNEMP2() {
return BENUNEMP2;
}

public byte getBENUNEMP96() {
return BENUNEMP96;
}

public short getBIRTHY() {
return BIRTHY;
}

public byte getBTYPE1() {
return BTYPE1;
}

public byte getBTYPE2() {
return BTYPE2;
}

public byte getBTYPE3() {
return BTYPE3;
}

public byte getBTYPE4() {
return BTYPE4;
}

public byte getBTYPE5() {
return BTYPE5;
}

public byte getBTYPE6() {
return BTYPE6;
}

public byte getBTYPE7() {
return BTYPE7;
}

public byte getBTYPE8() {
return BTYPE8;
}

public byte getBTYPE9() {
return BTYPE9;
}

public byte getBTYPE96() {
return BTYPE96;
}

public byte getBUNO_DV() {
return BUNO_DV;
}

public byte getCARCLUB() {
return CARCLUB;
}

public byte getCARSHARE() {
return CARSHARE;
}

public byte getCCARE() {
return CCARE;
}

public byte getCCWORK() {
return CCWORK;
}

public short getCH1BY4() {
return CH1BY4;
}

public short getCHARAM() {
return CHARAM;
}

public byte getCHARFREQ() {
return CHARFREQ;
}

public byte getCHARGV() {
return CHARGV;
}

public byte getCHKCOA() {
return CHKCOA;
}

public byte getCHKDOB() {
return CHKDOB;
}

public byte getCHKSEX() {
return CHKSEX;
}

public int getCINDTIME() {
return CINDTIME;
}

public byte getCITZN1() {
return CITZN1;
}

public byte getCITZN2() {
return CITZN2;
}

public byte getCITZN3() {
return CITZN3;
}

public byte getCIVICDUTY() {
return CIVICDUTY;
}

public byte getCJBATT() {
return CJBATT;
}

public byte getCJOB() {
return CJOB;
}

public byte getCLUB() {
return CLUB;
}

public byte getCMLSTAT1() {
return CMLSTAT1;
}

public byte getCMLSTAT2() {
return CMLSTAT2;
}

public byte getCMLSTAT3() {
return CMLSTAT3;
}

public byte getCOH1BM() {
return COH1BM;
}

public short getCOH1BY() {
return COH1BY;
}

public byte getCOH1EM() {
return COH1EM;
}

public short getCOH1EY() {
return COH1EY;
}

public byte getCOH1MR() {
return COH1MR;
}

public byte getCOHAB() {
return COHAB;
}

public byte getCOHABN() {
return COHABN;
}

public byte getCOHADV() {
return COHADV;
}

public byte getCOLBENS1() {
return COLBENS1;
}

public byte getCOLBENS2() {
return COLBENS2;
}

public byte getCOLBENS3() {
return COLBENS3;
}

public byte getCOMBIKE() {
return COMBIKE;
}

public byte getCOMBUS() {
return COMBUS;
}

public byte getCOMMETRO() {
return COMMETRO;
}

public byte getCOMOTHER() {
return COMOTHER;
}

public byte getCOMTAXI() {
return COMTAXI;
}

public byte getCOMTRAIN() {
return COMTRAIN;
}

public byte getCOMWALK() {
return COMWALK;
}

public byte getCONTFT() {
return CONTFT;
}

public byte getCOUNTRY() {
return COUNTRY;
}

public byte getCSTAT() {
return CSTAT;
}

public byte getCTADD1_CODE() {
return CTADD1_CODE;
}

public byte getCTADD2_CODE() {
return CTADD2_CODE;
}

public byte getCTCNTY_CODE() {
return CTCNTY_CODE;
}

public byte getCTEMAIL_CODE() {
return CTEMAIL_CODE;
}

public byte getCTPCODE_CODE() {
return CTPCODE_CODE;
}

public byte getCTTEL1_CODE() {
return CTTEL1_CODE;
}

public byte getCTTEL2_CODE() {
return CTTEL2_CODE;
}

public byte getCTTOWN_CODE() {
return CTTOWN_CODE;
}

public byte getCURRJOB1() {
return CURRJOB1;
}

public boolean getCURRJOB10() {
return CURRJOB10;
}

public byte getCURRJOB2() {
return CURRJOB2;
}

public byte getCURRJOB3() {
return CURRJOB3;
}

public byte getCURRJOB4() {
return CURRJOB4;
}

public byte getCURRJOB5() {
return CURRJOB5;
}

public byte getCURRJOB6() {
return CURRJOB6;
}

public byte getCURRJOB7() {
return CURRJOB7;
}

public byte getCURRJOB8() {
return CURRJOB8;
}

public byte getCURRJOB9() {
return CURRJOB9;
}

public byte getCURRPART1() {
return CURRPART1;
}

public byte getCURRPART2() {
return CURRPART2;
}

public byte getCURRPART3() {
return CURRPART3;
}

public byte getCURRPART4() {
return CURRPART4;
}

public byte getCURRSTAT1() {
return CURRSTAT1;
}

public byte getCURRSTAT10() {
return CURRSTAT10;
}

public byte getCURRSTAT2() {
return CURRSTAT2;
}

public byte getCURRSTAT3() {
return CURRSTAT3;
}

public byte getCURRSTAT4() {
return CURRSTAT4;
}

public byte getCURRSTAT5() {
return CURRSTAT5;
}

public byte getCURRSTAT6() {
return CURRSTAT6;
}

public byte getCURRSTAT7() {
return CURRSTAT7;
}

public byte getCURRSTAT8() {
return CURRSTAT8;
}

public boolean getCURRSTAT9() {
return CURRSTAT9;
}

public byte getDAYWLK() {
return DAYWLK;
}

public byte getDEMORIENT() {
return DEMORIENT;
}

public boolean getDEPCHL_DV() {
return DEPCHL_DV;
}

public byte getDEPENTH1() {
return DEPENTH1;
}

public byte getDEPENTH2() {
return DEPENTH2;
}

public byte getDEPENTH3() {
return DEPENTH3;
}

public byte getDEPENTH4() {
return DEPENTH4;
}

public byte getDEPENTH5() {
return DEPENTH5;
}

public byte getDEPENTH6() {
return DEPENTH6;
}

public byte getDISDIF1() {
return DISDIF1;
}

public byte getDISDIF10() {
return DISDIF10;
}

public byte getDISDIF11() {
return DISDIF11;
}

public byte getDISDIF12() {
return DISDIF12;
}

public byte getDISDIF2() {
return DISDIF2;
}

public byte getDISDIF3() {
return DISDIF3;
}

public byte getDISDIF4() {
return DISDIF4;
}

public byte getDISDIF5() {
return DISDIF5;
}

public byte getDISDIF6() {
return DISDIF6;
}

public byte getDISDIF7() {
return DISDIF7;
}

public byte getDISDIF8() {
return DISDIF8;
}

public byte getDISDIF9() {
return DISDIF9;
}

public byte getDISDIF96() {
return DISDIF96;
}

public byte getDIVCHK1() {
return DIVCHK1;
}

public byte getDIVCHK2() {
return DIVCHK2;
}

public byte getDIVCHK3() {
return DIVCHK3;
}

public byte getDIVFIN1() {
return DIVFIN1;
}

public byte getDIVFIN2() {
return DIVFIN2;
}

public byte getDIVFIN3() {
return DIVFIN3;
}

public short getDOBY_DV() {
return DOBY_DV;
}

public byte getDRIVE() {
return DRIVE;
}

public byte getDVAGE() {
return DVAGE;
}

public byte getDVM1() {
return DVM1;
}

public byte getDVM2() {
return DVM2;
}

public byte getDVM3() {
return DVM3;
}

public short getDVY41() {
return DVY41;
}

public short getDVY42() {
return DVY42;
}

public byte getDVY43() {
return DVY43;
}

public byte getEDASP() {
return EDASP;
}

public short getEDTYPE() {
return EDTYPE;
}

public byte getEDUCATION() {
return EDUCATION;
}

public byte getEMPCHK() {
return EMPCHK;
}

public byte getEMPLOY() {
return EMPLOY;
}

public byte getEMPSTENDD() {
return EMPSTENDD;
}

public byte getEMPSTENDM() {
return EMPSTENDM;
}

public short getEMPSTENDY4() {
return EMPSTENDY4;
}

public byte getENDMNTH1() {
return ENDMNTH1;
}

public byte getENDMNTH2() {
return ENDMNTH2;
}

public byte getENDMNTH3() {
return ENDMNTH3;
}

public byte getENDMNTH4() {
return ENDMNTH4;
}

public byte getENDMNTH5() {
return ENDMNTH5;
}

public short getEPROSH() {
return EPROSH;
}

public byte getETHCLOSE1() {
return ETHCLOSE1;
}

public byte getETHCLOSE10() {
return ETHCLOSE10;
}

public byte getETHCLOSE11() {
return ETHCLOSE11;
}

public byte getETHCLOSE2A() {
return ETHCLOSE2A;
}

public byte getETHCLOSE2B() {
return ETHCLOSE2B;
}

public byte getETHCLOSE3() {
return ETHCLOSE3;
}

public byte getETHCLOSE4A() {
return ETHCLOSE4A;
}

public byte getETHCLOSE4B() {
return ETHCLOSE4B;
}

public byte getETHCLOSE5() {
return ETHCLOSE5;
}

public byte getETHCLOSE6() {
return ETHCLOSE6;
}

public byte getETHCLOSE7() {
return ETHCLOSE7;
}

public byte getETHCLOSE8() {
return ETHCLOSE8;
}

public byte getETHCLOSE9() {
return ETHCLOSE9;
}

public byte getETHID10() {
return ETHID10;
}

public byte getETHID11() {
return ETHID11;
}

public byte getETHID12() {
return ETHID12;
}

public byte getETHID13() {
return ETHID13;
}

public byte getETHID14() {
return ETHID14;
}

public byte getETHID2() {
return ETHID2;
}

public byte getETHID3() {
return ETHID3;
}

public byte getETHID4A() {
return ETHID4A;
}

public byte getETHID4B() {
return ETHID4B;
}

public byte getETHID5() {
return ETHID5;
}

public byte getETHID6() {
return ETHID6;
}

public byte getETHID7() {
return ETHID7;
}

public byte getETHID8() {
return ETHID8;
}

public byte getETHID9() {
return ETHID9;
}

public byte getETHN_DV() {
return ETHN_DV;
}

public byte getEVENT1() {
return EVENT1;
}

public byte getEVENT1S() {
return EVENT1S;
}

public byte getEVENT2() {
return EVENT2;
}

public byte getEVENT2S() {
return EVENT2S;
}

public byte getEVENT3() {
return EVENT3;
}

public byte getEVENT3S() {
return EVENT3S;
}

public byte getEVENT4() {
return EVENT4;
}

public byte getEVENT4S() {
return EVENT4S;
}

public byte getEXTNSA() {
return EXTNSA;
}

protected double EXTRATE() {
return EXTRATE;
}

public byte getEXTREST() {
return EXTREST;
}

public byte getFAMILY() {
return FAMILY;
}

public byte getFATHER() {
return FATHER;
}

public byte getFEDLIK() {
return FEDLIK;
}

public byte getFEDNT() {
return FEDNT;
}

public byte getFENOW() {
return FENOW;
}

public byte getFF_BENTYPE01() {
return FF_BENTYPE01;
}

public byte getFF_BENTYPE02() {
return FF_BENTYPE02;
}

public byte getFF_BENTYPE03() {
return FF_BENTYPE03;
}

public byte getFF_BENTYPE04() {
return FF_BENTYPE04;
}

public byte getFF_BENTYPE05() {
return FF_BENTYPE05;
}

public byte getFF_BENTYPE06() {
return FF_BENTYPE06;
}

public byte getFF_BENTYPE07() {
return FF_BENTYPE07;
}

public byte getFF_BENTYPE08() {
return FF_BENTYPE08;
}

public byte getFF_BENTYPE09() {
return FF_BENTYPE09;
}

public byte getFF_BENTYPE10() {
return FF_BENTYPE10;
}

public byte getFF_BENTYPE11() {
return FF_BENTYPE11;
}

public byte getFF_BENTYPE12() {
return FF_BENTYPE12;
}

public byte getFF_BENTYPE13() {
return FF_BENTYPE13;
}

public byte getFF_BENTYPE14() {
return FF_BENTYPE14;
}

public byte getFF_BENTYPE15() {
return FF_BENTYPE15;
}

public byte getFF_BENTYPE16() {
return FF_BENTYPE16;
}

public byte getFF_BENTYPE17() {
return FF_BENTYPE17;
}

public byte getFF_BENTYPE18() {
return FF_BENTYPE18;
}

public byte getFF_BENTYPE19() {
return FF_BENTYPE19;
}

public byte getFF_BENTYPE20() {
return FF_BENTYPE20;
}

public byte getFF_BENTYPE21() {
return FF_BENTYPE21;
}

public byte getFF_BENTYPE22() {
return FF_BENTYPE22;
}

public byte getFF_BENTYPE23() {
return FF_BENTYPE23;
}

public byte getFF_BENTYPE24() {
return FF_BENTYPE24;
}

public byte getFF_BENTYPE25() {
return FF_BENTYPE25;
}

public byte getFF_BENTYPE26() {
return FF_BENTYPE26;
}

public byte getFF_BENTYPE27() {
return FF_BENTYPE27;
}

public byte getFF_BENTYPE28() {
return FF_BENTYPE28;
}

public byte getFF_BENTYPE29() {
return FF_BENTYPE29;
}

public byte getFF_BENTYPE30() {
return FF_BENTYPE30;
}

public byte getFF_BENTYPE31() {
return FF_BENTYPE31;
}

public byte getFF_BENTYPE32() {
return FF_BENTYPE32;
}

public byte getFF_BENTYPE33() {
return FF_BENTYPE33;
}

public byte getFF_BENTYPE34() {
return FF_BENTYPE34;
}

public byte getFF_BENTYPE35() {
return FF_BENTYPE35;
}

public byte getFF_BENTYPE36() {
return FF_BENTYPE36;
}

public byte getFF_BENTYPE37() {
return FF_BENTYPE37;
}

public byte getFF_BENTYPE38() {
return FF_BENTYPE38;
}

public byte getFF_EMPLW() {
return FF_EMPLW;
}

public byte getFF_EVERINT() {
return FF_EVERINT;
}

public byte getFF_IVLOLW() {
return FF_IVLOLW;
}

public byte getFF_JBMNGR() {
return FF_JBMNGR;
}

public byte getFF_JBSEMP() {
return FF_JBSEMP;
}

public byte getFF_JBSIZE() {
return FF_JBSIZE;
}

public byte getFF_JBSTAT() {
return FF_JBSTAT;
}

public byte getFF_OPRLG() {
return FF_OPRLG;
}

public byte getFF_OPRLG0() {
return FF_OPRLG0;
}

public byte getFF_OPRLG0NI() {
return FF_OPRLG0NI;
}

public byte getFF_TEL() {
return FF_TEL;
}

public byte getFF_UKBORN() {
return FF_UKBORN;
}

public short getFF_YR2UK4() {
return FF_YR2UK4;
}

protected double FIBENOTHR_DV() {
return FIBENOTHR_DV;
}

protected double FIBENOTHR_IF() {
return FIBENOTHR_IF;
}

public byte getFIBENOTHR_TC() {
return FIBENOTHR_TC;
}

protected double FIMNGRS_IF() {
return FIMNGRS_IF;
}

public byte getFIMNGRS_TC() {
return FIMNGRS_TC;
}

protected double FIMNINVNET_DV() {
return FIMNINVNET_DV;
}

protected double FIMNLABGRS_IF() {
return FIMNLABGRS_IF;
}

public byte getFIMNLABGRS_TC() {
return FIMNLABGRS_TC;
}

protected double FIMNLABNET_DV() {
return FIMNLABNET_DV;
}

public byte getFIMNLABNET_TC() {
return FIMNLABNET_TC;
}

protected double FIMNMISC_DV() {
return FIMNMISC_DV;
}

protected double FIMNNET_DV() {
return FIMNNET_DV;
}

protected double FIMNPEN_DV() {
return FIMNPEN_DV;
}

protected double FIMNPRBEN_DV() {
return FIMNPRBEN_DV;
}

protected double FIMNSBEN_DV() {
return FIMNSBEN_DV;
}

public byte getFINFUT() {
return FINFUT;
}

public byte getFIYRDB1() {
return FIYRDB1;
}

public byte getFIYRDB2() {
return FIYRDB2;
}

public byte getFIYRDB3() {
return FIYRDB3;
}

public byte getFIYRDB4() {
return FIYRDB4;
}

public byte getFIYRDB5() {
return FIYRDB5;
}

public byte getFIYRDB6() {
return FIYRDB6;
}

public int getFIYRDIA() {
return FIYRDIA;
}

protected double FIYRINVINC_DV() {
return FIYRINVINC_DV;
}

public byte getFIYRINVINC_IF() {
return FIYRINVINC_IF;
}

public byte getFIYRINVINC_TC() {
return FIYRINVINC_TC;
}

public int getFNPID() {
return FNPID;
}

public byte getFNPNO() {
return FNPNO;
}

public int getFNSPID() {
return FNSPID;
}

public byte getFNSPNO() {
return FNSPNO;
}

public byte getFOOD1() {
return FOOD1;
}

public byte getFOOD2() {
return FOOD2;
}

public byte getFOOD3() {
return FOOD3;
}

public byte getFOOD4() {
return FOOD4;
}

public byte getFOOD5() {
return FOOD5;
}

public byte getFOOD6() {
return FOOD6;
}

public byte getFOOD7() {
return FOOD7;
}

public byte getFRUVEGE() {
return FRUVEGE;
}

public byte getFT2ENDM1() {
return FT2ENDM1;
}

public byte getFT2ENDM2() {
return FT2ENDM2;
}

public short getFT2ENDY41() {
return FT2ENDY41;
}

public short getFT2ENDY42() {
return FT2ENDY42;
}

public byte getFTEDANY() {
return FTEDANY;
}

public byte getFTEDEND1() {
return FTEDEND1;
}

public byte getFTEDEND2() {
return FTEDEND2;
}

public byte getFTEDMOR1() {
return FTEDMOR1;
}

public byte getFTEDMOR2() {
return FTEDMOR2;
}

public byte getFTEDSTARTM1() {
return FTEDSTARTM1;
}

public byte getFTEDSTARTM2() {
return FTEDSTARTM2;
}

public short getFTEDSTARTY41() {
return FTEDSTARTY41;
}

public short getFTEDSTARTY42() {
return FTEDSTARTY42;
}

public byte getFTENDM() {
return FTENDM;
}

public short getFTENDY4() {
return FTENDY4;
}

public byte getFTQUALS() {
return FTQUALS;
}

public short getFUTRA() {
return FUTRA;
}

public short getFUTRB() {
return FUTRB;
}

public short getFUTRC() {
return FUTRC;
}

public short getFUTRD() {
return FUTRD;
}

public short getFUTRE() {
return FUTRE;
}

public short getFUTRF() {
return FUTRF;
}

public short getFUTRG() {
return FUTRG;
}

public short getFUTRH() {
return FUTRH;
}

public short getFUTRI() {
return FUTRI;
}

public short getFUTRJ() {
return FUTRJ;
}

public short getFUTRK() {
return FUTRK;
}

public short getFUTRL() {
return FUTRL;
}

public byte getGIVECOA() {
return GIVECOA;
}

public int getGRFPID() {
return GRFPID;
}

public byte getGRFPNO() {
return GRFPNO;
}

public int getGRMPID() {
return GRMPID;
}

public byte getGRMPNO() {
return GRMPNO;
}

public byte getGRPBFTS() {
return GRPBFTS;
}

public byte getHCONDN1() {
return HCONDN1;
}

public byte getHCONDN10() {
return HCONDN10;
}

public byte getHCONDN11() {
return HCONDN11;
}

public byte getHCONDN12() {
return HCONDN12;
}

public byte getHCONDN13() {
return HCONDN13;
}

public byte getHCONDN14() {
return HCONDN14;
}

public byte getHCONDN15() {
return HCONDN15;
}

public byte getHCONDN16() {
return HCONDN16;
}

public byte getHCONDN17() {
return HCONDN17;
}

public byte getHCONDN2() {
return HCONDN2;
}

public byte getHCONDN3() {
return HCONDN3;
}

public byte getHCONDN4() {
return HCONDN4;
}

public byte getHCONDN5() {
return HCONDN5;
}

public byte getHCONDN6() {
return HCONDN6;
}

public byte getHCONDN7() {
return HCONDN7;
}

public byte getHCONDN8() {
return HCONDN8;
}

public byte getHCONDN9() {
return HCONDN9;
}

public byte getHCONDN96() {
return HCONDN96;
}

public byte getHCONDNO1() {
return HCONDNO1;
}

public byte getHCONDNO2() {
return HCONDNO2;
}

public byte getHCONDNO3() {
return HCONDNO3;
}

public byte getHCONDNO4() {
return HCONDNO4;
}

public byte getHCONDNO5() {
return HCONDNO5;
}

public byte getHCONDNO6() {
return HCONDNO6;
}

public byte getHCONDNO7() {
return HCONDNO7;
}

public byte getHCONDNO8() {
return HCONDNO8;
}

public byte getHCONDNS1() {
return HCONDNS1;
}

public byte getHCONDNS2() {
return HCONDNS2;
}

public byte getHCONDNS3() {
return HCONDNS3;
}

public byte getHCONDNS4() {
return HCONDNS4;
}

public byte getHCONDNS5() {
return HCONDNS5;
}

public byte getHCONDNS6() {
return HCONDNS6;
}

public byte getHCONDNS7() {
return HCONDNS7;
}

public byte getHCONDNS8() {
return HCONDNS8;
}

public byte getHEALTH() {
return HEALTH;
}

public byte getHERFREQ() {
return HERFREQ;
}

public byte getHERITAGE1() {
return HERITAGE1;
}

public byte getHERITAGE2() {
return HERITAGE2;
}

public byte getHERITAGE3() {
return HERITAGE3;
}

public byte getHERITAGE4() {
return HERITAGE4;
}

public byte getHERITAGE5() {
return HERITAGE5;
}

public byte getHERITAGE6() {
return HERITAGE6;
}

public byte getHERITAGE7() {
return HERITAGE7;
}

public byte getHERITAGE8() {
return HERITAGE8;
}

public byte getHERITAGE96() {
return HERITAGE96;
}

public byte getHGADOPTF() {
return HGADOPTF;
}

public byte getHGADOPTM() {
return HGADOPTM;
}

public byte getHGPART() {
return HGPART;
}

public byte getHHRESP_DV() {
return HHRESP_DV;
}

public byte getHHTYPE_DV() {
return HHTYPE_DV;
}

public byte getHOSPC1() {
return HOSPC1;
}

public byte getHOSPC2() {
return HOSPC2;
}

public byte getHOSPC3() {
return HOSPC3;
}

public byte getHOSPC4() {
return HOSPC4;
}

public byte getHOSPC5() {
return HOSPC5;
}

public byte getHOSPC6() {
return HOSPC6;
}

public byte getHOSPC7() {
return HOSPC7;
}

public byte getHOSPC8() {
return HOSPC8;
}

public short getHOSPDC1() {
return HOSPDC1;
}

public short getHOSPDC2() {
return HOSPDC2;
}

public short getHOSPDC3() {
return HOSPDC3;
}

public byte getHOSPDC4() {
return HOSPDC4;
}

public byte getHOSPDC5() {
return HOSPDC5;
}

public byte getHOSPDC6() {
return HOSPDC6;
}

public byte getHOSPDC7() {
return HOSPDC7;
}

public byte getHOSPDC8() {
return HOSPDC8;
}

public byte getHOUSING() {
return HOUSING;
}

public short getHOWLNG() {
return HOWLNG;
}

public int getHRPID() {
return HRPID;
}

public byte getHRPNO() {
return HRPNO;
}

public byte getHUBOSS() {
return HUBOSS;
}

public short getHUBUYS() {
return HUBUYS;
}

public byte getHUDIY() {
return HUDIY;
}

public short getHUFRYS() {
return HUFRYS;
}

public short getHUIRON() {
return HUIRON;
}

public short getHUMOPS() {
return HUMOPS;
}

public byte getHUPOTS() {
return HUPOTS;
}

public short getHUSITS() {
return HUSITS;
}

public byte getIENDDATMM() {
return IENDDATMM;
}

public byte getIENDDATSS() {
return IENDDATSS;
}

protected double IND5MUS_LW() {
return IND5MUS_LW;
}

protected double INDIN01_LW() {
return INDIN01_LW;
}

protected double INDIN91_LW() {
return INDIN91_LW;
}

protected double INDINBH_XW() {
return INDINBH_XW;
}

protected double INDINUS_LW() {
return INDINUS_LW;
}

protected double INDINUS_XW() {
return INDINUS_XW;
}

protected double INDINUXW() {
return INDINUXW;
}

public byte getINDMODE() {
return INDMODE;
}

protected double INDPXBH_XW() {
return INDPXBH_XW;
}

protected double INDPXUS_LW() {
return INDPXUS_LW;
}

protected double INDPXUS_XW() {
return INDPXUS_XW;
}

protected double INDPXUXW() {
return INDPXUXW;
}

protected double INDSCBH_XW() {
return INDSCBH_XW;
}

protected double INDSCUS_LW() {
return INDSCUS_LW;
}

protected double INDSCUS_XW() {
return INDSCUS_XW;
}

protected double INDSCUXW() {
return INDSCUXW;
}

public byte getINTDATD_DV() {
return INTDATD_DV;
}

public byte getINTDATM_DV() {
return INTDATM_DV;
}

public short getINTDATY_DV() {
return INTDATY_DV;
}

public byte getINVITRO1() {
return INVITRO1;
}

public byte getINVITRO2() {
return INVITRO2;
}

public byte getINVITRO3() {
return INVITRO3;
}

public byte getINVITRO4() {
return INVITRO4;
}

public byte getINVITRO5() {
return INVITRO5;
}

public byte getIOUTCOME() {
return IOUTCOME;
}

public byte getISTRTDATMM() {
return ISTRTDATMM;
}

public byte getISTRTDATSS() {
return ISTRTDATSS;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public byte getIVAFFCT11() {
return IVAFFCT11;
}

public byte getIVAFFCT12() {
return IVAFFCT12;
}

public byte getIVAFFCT13() {
return IVAFFCT13;
}

public byte getIVAFFCT14() {
return IVAFFCT14;
}

public byte getIVAFFCT15() {
return IVAFFCT15;
}

public byte getIVAFFCT17() {
return IVAFFCT17;
}

public byte getIVAFFCT21() {
return IVAFFCT21;
}

public byte getIVAFFCT22() {
return IVAFFCT22;
}

public byte getIVAFFCT23() {
return IVAFFCT23;
}

public byte getIVAFFCT27() {
return IVAFFCT27;
}

public byte getIVAFFCT30() {
return IVAFFCT30;
}

public byte getIVAFFCT97() {
return IVAFFCT97;
}

public byte getIVCOOP() {
return IVCOOP;
}

public byte getIVINFNCE() {
return IVINFNCE;
}

public byte getIVINTLANG() {
return IVINTLANG;
}

public byte getIVTRANS() {
return IVTRANS;
}

public byte getIVWHOINT() {
return IVWHOINT;
}

public byte getJ1BOSS() {
return J1BOSS;
}

public byte getJ1MNGR() {
return J1MNGR;
}

public byte getJ1NONE() {
return J1NONE;
}

public byte getJ1NSSEC5_DV() {
return J1NSSEC5_DV;
}

public byte getJ1SEMP() {
return J1SEMP;
}

public short getJ1SOC00_CC() {
return J1SOC00_CC;
}

public short getJ1SOC10_CC() {
return J1SOC10_CC;
}

public byte getJ1SOC90_CC() {
return J1SOC90_CC;
}

public byte getJ2NSSEC5_DV() {
return J2NSSEC5_DV;
}

public int getJ2PAY() {
return J2PAY;
}

protected double J2PAYNET_DV() {
return J2PAYNET_DV;
}

public short getJ2SOC00_CC() {
return J2SOC00_CC;
}

public short getJ2SOC10_CC() {
return J2SOC10_CC;
}

public short getJ2SOC90_CC() {
return J2SOC90_CC;
}

public byte getJBATT1() {
return JBATT1;
}

public boolean getJBATT10() {
return JBATT10;
}

public byte getJBATT2() {
return JBATT2;
}

public byte getJBATT3() {
return JBATT3;
}

public byte getJBATT4() {
return JBATT4;
}

public byte getJBATT5() {
return JBATT5;
}

public byte getJBATT6() {
return JBATT6;
}

public byte getJBATT7() {
return JBATT7;
}

public byte getJBATT8() {
return JBATT8;
}

public byte getJBATT9() {
return JBATT9;
}

public byte getJBENDD() {
return JBENDD;
}

public byte getJBENDM() {
return JBENDM;
}

public byte getJBENDREAS() {
return JBENDREAS;
}

public short getJBENDY4() {
return JBENDY4;
}

public byte getJBES2000() {
return JBES2000;
}

public byte getJBFLEX1() {
return JBFLEX1;
}

public byte getJBFLEX2() {
return JBFLEX2;
}

public byte getJBFLEX3() {
return JBFLEX3;
}

public byte getJBFLEX4() {
return JBFLEX4;
}

public byte getJBFLEX5() {
return JBFLEX5;
}

public byte getJBFLEX6() {
return JBFLEX6;
}

public byte getJBFLEX7() {
return JBFLEX7;
}

public byte getJBFLEX8() {
return JBFLEX8;
}

public byte getJBFLEX96() {
return JBFLEX96;
}

public byte getJBFXINF() {
return JBFXINF;
}

public byte getJBFXUSE1() {
return JBFXUSE1;
}

public byte getJBFXUSE2() {
return JBFXUSE2;
}

public byte getJBFXUSE3() {
return JBFXUSE3;
}

public byte getJBFXUSE4() {
return JBFXUSE4;
}

public byte getJBFXUSE5() {
return JBFXUSE5;
}

public byte getJBFXUSE6() {
return JBFXUSE6;
}

public byte getJBFXUSE7() {
return JBFXUSE7;
}

public byte getJBFXUSE8() {
return JBFXUSE8;
}

public byte getJBFXUSE96() {
return JBFXUSE96;
}

public byte getJBIINDDV() {
return JBIINDDV;
}

public byte getJBLKCHA() {
return JBLKCHA;
}

public byte getJBLKCHB() {
return JBLKCHB;
}

public byte getJBLKCHC() {
return JBLKCHC;
}

public byte getJBLKCHD() {
return JBLKCHD;
}

public byte getJBLKCHE() {
return JBLKCHE;
}

public byte getJBMNGRCHK() {
return JBMNGRCHK;
}

public byte getJBNSSEC3_DV() {
return JBNSSEC3_DV;
}

public byte getJBNSSEC5_DV() {
return JBNSSEC5_DV;
}

public short getJBNSSEC_DV() {
return JBNSSEC_DV;
}

public byte getJBOFFY() {
return JBOFFY;
}

public short getJBONUS() {
return JBONUS;
}

public short getJBPEN() {
return JBPEN;
}

public short getJBPENM() {
return JBPENM;
}

public short getJBPENY4() {
return JBPENY4;
}

public byte getJBPERFP() {
return JBPERFP;
}

public short getJBRGSC_DV() {
return JBRGSC_DV;
}

public short getJBRISE() {
return JBRISE;
}

public byte getJBSAMR() {
return JBSAMR;
}

public byte getJBSAT() {
return JBSAT;
}

public byte getJBSEC() {
return JBSEC;
}

public byte getJBSECTPUB() {
return JBSECTPUB;
}

public short getJBSEG_DV() {
return JBSEG_DV;
}

public byte getJBSEMPCHK() {
return JBSEMPCHK;
}

public byte getJBSIC07CHK() {
return JBSIC07CHK;
}

public byte getJBSIC07_CC() {
return JBSIC07_CC;
}

public byte getJBSIZECHK() {
return JBSIZECHK;
}

public byte getJBSOC00CHK() {
return JBSOC00CHK;
}

public short getJBSOC00_CC() {
return JBSOC00_CC;
}

public byte getJBSOCGR_DV() {
return JBSOCGR_DV;
}

public byte getJBTERM1() {
return JBTERM1;
}

public byte getJBTERM2() {
return JBTERM2;
}

public byte getJBXPCHA() {
return JBXPCHA;
}

public byte getJBXPCHB() {
return JBXPCHB;
}

public byte getJBXPCHC() {
return JBXPCHC;
}

public byte getJBXPCHD() {
return JBXPCHD;
}

public byte getJBXPCHE() {
return JBXPCHE;
}

public byte getJLENDM() {
return JLENDM;
}

public byte getJLES2000() {
return JLES2000;
}

public byte getJLIINDDV() {
return JLIINDDV;
}

public byte getJLNSSEC3_DV() {
return JLNSSEC3_DV;
}

public byte getJLNSSEC5_DV() {
return JLNSSEC5_DV;
}

public short getJLNSSEC_DV() {
return JLNSSEC_DV;
}

public short getJLRGSC_DV() {
return JLRGSC_DV;
}

public short getJLSEG_DV() {
return JLSEG_DV;
}

public byte getJLSIC07_CC() {
return JLSIC07_CC;
}

public short getJLSOC00_CC() {
return JLSOC00_CC;
}

public byte getJOBHOURS1() {
return JOBHOURS1;
}

public boolean getJOBHOURS10() {
return JOBHOURS10;
}

public byte getJOBHOURS2() {
return JOBHOURS2;
}

public byte getJOBHOURS3() {
return JOBHOURS3;
}

public byte getJOBHOURS4() {
return JOBHOURS4;
}

public byte getJOBHOURS5() {
return JOBHOURS5;
}

public byte getJOBHOURS6() {
return JOBHOURS6;
}

public byte getJOBHOURS7() {
return JOBHOURS7;
}

public byte getJOBHOURS8() {
return JOBHOURS8;
}

public byte getJOBHOURS9() {
return JOBHOURS9;
}

public byte getJSPART() {
return JSPART;
}

public int getJSPAYU() {
return JSPAYU;
}

public byte getJSPAYW() {
return JSPAYW;
}

public byte getJSPRLS() {
return JSPRLS;
}

public byte getJSPRNI() {
return JSPRNI;
}

public byte getJSPRTX() {
return JSPRTX;
}

public byte getJSPYNI() {
return JSPYNI;
}

public byte getJSPYTX() {
return JSPYTX;
}

public byte getJSTYPEB() {
return JSTYPEB;
}

public byte getJSWORKTRAV() {
return JSWORKTRAV;
}

public short getJUBGN() {
return JUBGN;
}

public short getJULK4X1() {
return JULK4X1;
}

public short getJULK4X2() {
return JULK4X2;
}

public byte getJULK4X3() {
return JULK4X3;
}

public short getJULK4X4() {
return JULK4X4;
}

public short getJULK4X5() {
return JULK4X5;
}

public short getJULK4X6() {
return JULK4X6;
}

public byte getJULK4X96() {
return JULK4X96;
}

public byte getJWBS1_DV() {
return JWBS1_DV;
}

public byte getJWBS2_DV() {
return JWBS2_DV;
}

public byte getKIDLANG() {
return KIDLANG;
}

public byte getLADOPT() {
return LADOPT;
}

public byte getLASTMSTATCH1() {
return LASTMSTATCH1;
}

public byte getLASTMSTATCH2() {
return LASTMSTATCH2;
}

public byte getLASTMSTATCH3() {
return LASTMSTATCH3;
}

public byte getLCHMULTI1() {
return LCHMULTI1;
}

public byte getLCHMULTI2() {
return LCHMULTI2;
}

public byte getLCHMULTI3() {
return LCHMULTI3;
}

public byte getLCHMULTI4() {
return LCHMULTI4;
}

public byte getLCHMULTI5() {
return LCHMULTI5;
}

public byte getLCOHNPI() {
return LCOHNPI;
}

protected double LENINDINTV() {
return LENINDINTV;
}

public byte getLIBFREQ() {
return LIBFREQ;
}

public byte getLIFTHH() {
return LIFTHH;
}

public byte getLIFTXHH() {
return LIFTXHH;
}

public byte getLINGUA() {
return LINGUA;
}

public byte getLIVESP() {
return LIVESP;
}

public boolean getLIVESP_DV() {
return LIVESP_DV;
}

public byte getLIVEWITH() {
return LIVEWITH;
}

public byte getLMAR1M() {
return LMAR1M;
}

public short getLMAR1Y() {
return LMAR1Y;
}

public byte getLMCBM1() {
return LMCBM1;
}

public byte getLMCBM2() {
return LMCBM2;
}

public byte getLMCBM3() {
return LMCBM3;
}

public byte getLMCBM4() {
return LMCBM4;
}

public short getLMCBY41() {
return LMCBY41;
}

public short getLMCBY42() {
return LMCBY42;
}

public short getLMCBY43() {
return LMCBY43;
}

public short getLMCBY44() {
return LMCBY44;
}

public byte getLMSPM1() {
return LMSPM1;
}

public byte getLMSPM2() {
return LMSPM2;
}

public byte getLMSPM3() {
return LMSPM3;
}

public byte getLMSPM4() {
return LMSPM4;
}

public short getLMSPY41() {
return LMSPY41;
}

public short getLMSPY42() {
return LMSPY42;
}

public short getLMSPY43() {
return LMSPY43;
}

public short getLMSPY44() {
return LMSPY44;
}

public byte getLNADOPT() {
return LNADOPT;
}

public byte getLNPRNT() {
return LNPRNT;
}

public byte getLPRNT() {
return LPRNT;
}

public byte getLVMTHP() {
return LVMTHP;
}

public byte getLVWHY() {
return LVWHY;
}

public short getLVYRP() {
return LVYRP;
}

public byte getLWWRONG() {
return LWWRONG;
}

public byte getMACOB() {
return MACOB;
}

public byte getMAEDQF() {
return MAEDQF;
}

public byte getMAJU() {
return MAJU;
}

public byte getMANSSEC5_DV() {
return MANSSEC5_DV;
}

public byte getMARSTAT() {
return MARSTAT;
}

public short getMASOC00_CC() {
return MASOC00_CC;
}

public short getMASOC10_CC() {
return MASOC10_CC;
}

public byte getMASOC90_CC() {
return MASOC90_CC;
}

public byte getMASTAT_DV() {
return MASTAT_DV;
}

public byte getMATLV() {
return MATLV;
}

public byte getMATLVENDD() {
return MATLVENDD;
}

public byte getMATLVENDM() {
return MATLVENDM;
}

public short getMATLVENDY4() {
return MATLVENDY4;
}

public byte getMATLVSTD() {
return MATLVSTD;
}

public byte getMATLVSTM() {
return MATLVSTM;
}

public short getMATLVSTY4() {
return MATLVSTY4;
}

public byte getMAYRUK() {
return MAYRUK;
}

public byte getMEMPLOY() {
return MEMPLOY;
}

public byte getMLA1() {
return MLA1;
}

public byte getMLA2() {
return MLA2;
}

public byte getMLA3() {
return MLA3;
}

public byte getMLA96() {
return MLA96;
}

public byte getMLSTATCHK() {
return MLSTATCHK;
}

public int getMNPID() {
return MNPID;
}

public byte getMNPNO() {
return MNPNO;
}

public int getMNSPID() {
return MNSPID;
}

public byte getMNSPNO() {
return MNSPNO;
}

public byte getMOBUSE() {
return MOBUSE;
}

public byte getMONTH() {
return MONTH;
}

public byte getMOTCYC() {
return MOTCYC;
}

public byte getMOVDIR() {
return MOVDIR;
}

public byte getMOVEOTH_CODE() {
return MOVEOTH_CODE;
}

public byte getMOVY11() {
return MOVY11;
}

public byte getMOVY12() {
return MOVY12;
}

public byte getMOVY13() {
return MOVY13;
}

public byte getMOVY14() {
return MOVY14;
}

public byte getMOVY15() {
return MOVY15;
}

public byte getMOVY16() {
return MOVY16;
}

public byte getMSTATCH1() {
return MSTATCH1;
}

public byte getMSTATCH2() {
return MSTATCH2;
}

public byte getMSTATCH3() {
return MSTATCH3;
}

public short getMSTATSAM() {
return MSTATSAM;
}

public byte getMSTATSAMN() {
return MSTATSAMN;
}

public byte getMUSFREQ() {
return MUSFREQ;
}

public byte getMVEVER() {
return MVEVER;
}

public byte getMVMNTH() {
return MVMNTH;
}

public short getMVYR() {
return MVYR;
}

public byte getNADOPTCH() {
return NADOPTCH;
}

public byte getNAIDXHH() {
return NAIDXHH;
}

public byte getNATCH01() {
return NATCH01;
}

public byte getNATCH02() {
return NATCH02;
}

public byte getNATCH03() {
return NATCH03;
}

public byte getNATCH04() {
return NATCH04;
}

public byte getNATCH05() {
return NATCH05;
}

public byte getNATCH06() {
return NATCH06;
}

public byte getNATCH07() {
return NATCH07;
}

public byte getNATCH08() {
return NATCH08;
}

public byte getNATCH09() {
return NATCH09;
}

public byte getNATCH10() {
return NATCH10;
}

public byte getNATCH11() {
return NATCH11;
}

public byte getNATCH12() {
return NATCH12;
}

public boolean getNATCH13() {
return NATCH13;
}

public boolean getNATCH14() {
return NATCH14;
}

public boolean getNATCH15() {
return NATCH15;
}

public boolean getNATCH16() {
return NATCH16;
}

public byte getNATID1() {
return NATID1;
}

public byte getNATID2() {
return NATID2;
}

public byte getNATID3() {
return NATID3;
}

public byte getNATID4() {
return NATID4;
}

public byte getNATID5() {
return NATID5;
}

public byte getNATID6() {
return NATID6;
}

public byte getNATID97() {
return NATID97;
}

public byte getNCH10TO15() {
return NCH10TO15;
}

public byte getNCH14RESP() {
return NCH14RESP;
}

public byte getNCH415RESP() {
return NCH415RESP;
}

public byte getNCH5TO15() {
return NCH5TO15;
}

public byte getNCHILD() {
return NCHILD;
}

public short getNCHILD_DV() {
return NCHILD_DV;
}

public byte getNCHRESP() {
return NCHRESP;
}

public byte getNCHUND18RESP() {
return NCHUND18RESP;
}

public byte getNCHUNDER16() {
return NCHUNDER16;
}

public short getNCIGS() {
return NCIGS;
}

public byte getNDEPCHL_DV() {
return NDEPCHL_DV;
}

public byte getNETUSE() {
return NETUSE;
}

public byte getNEWENTRANT() {
return NEWENTRANT;
}

public byte getNEWPER() {
return NEWPER;
}

public byte getNEXT() {
return NEXT;
}

public byte getNEXTELSE1() {
return NEXTELSE1;
}

public byte getNEXTELSE10() {
return NEXTELSE10;
}

public byte getNEXTELSE2() {
return NEXTELSE2;
}

public byte getNEXTELSE3() {
return NEXTELSE3;
}

public byte getNEXTELSE4() {
return NEXTELSE4;
}

public byte getNEXTELSE5() {
return NEXTELSE5;
}

public byte getNEXTELSE6() {
return NEXTELSE6;
}

public byte getNEXTELSE7() {
return NEXTELSE7;
}

public byte getNEXTELSE8() {
return NEXTELSE8;
}

public boolean getNEXTELSE9() {
return NEXTELSE9;
}

public byte getNEXTJOB1() {
return NEXTJOB1;
}

public boolean getNEXTJOB10() {
return NEXTJOB10;
}

public byte getNEXTJOB2() {
return NEXTJOB2;
}

public byte getNEXTJOB3() {
return NEXTJOB3;
}

public byte getNEXTJOB4() {
return NEXTJOB4;
}

public byte getNEXTJOB5() {
return NEXTJOB5;
}

public byte getNEXTJOB6() {
return NEXTJOB6;
}

public byte getNEXTJOB7() {
return NEXTJOB7;
}

public byte getNEXTJOB8() {
return NEXTJOB8;
}

public byte getNEXTJOB9() {
return NEXTJOB9;
}

public byte getNEXTSTAT1() {
return NEXTSTAT1;
}

public byte getNEXTSTAT10() {
return NEXTSTAT10;
}

public byte getNEXTSTAT2() {
return NEXTSTAT2;
}

public byte getNEXTSTAT3() {
return NEXTSTAT3;
}

public byte getNEXTSTAT4() {
return NEXTSTAT4;
}

public byte getNEXTSTAT5() {
return NEXTSTAT5;
}

public byte getNEXTSTAT6() {
return NEXTSTAT6;
}

public byte getNEXTSTAT7() {
return NEXTSTAT7;
}

public byte getNEXTSTAT8() {
return NEXTSTAT8;
}

public byte getNEXTSTAT9() {
return NEXTSTAT9;
}

public byte getNFH01() {
return NFH01;
}

public byte getNFH02() {
return NFH02;
}

public byte getNFH03() {
return NFH03;
}

public byte getNFH04() {
return NFH04;
}

public byte getNFH05() {
return NFH05;
}

public byte getNFH06() {
return NFH06;
}

public byte getNFH07() {
return NFH07;
}

public byte getNFH08() {
return NFH08;
}

public byte getNFH09() {
return NFH09;
}

public byte getNFH10() {
return NFH10;
}

public byte getNFH11() {
return NFH11;
}

public byte getNFH12() {
return NFH12;
}

public byte getNFH13() {
return NFH13;
}

public byte getNFH14() {
return NFH14;
}

public byte getNFH15() {
return NFH15;
}

public byte getNFH16() {
return NFH16;
}

public byte getNFH17() {
return NFH17;
}

public byte getNFH18() {
return NFH18;
}

public byte getNFH19() {
return NFH19;
}

public byte getNFH20() {
return NFH20;
}

public byte getNFH21() {
return NFH21;
}

public byte getNFH22() {
return NFH22;
}

public byte getNFH23() {
return NFH23;
}

public byte getNFH24() {
return NFH24;
}

public byte getNFH25() {
return NFH25;
}

public byte getNFH26() {
return NFH26;
}

public byte getNFH27() {
return NFH27;
}

public byte getNFH28() {
return NFH28;
}

public byte getNFH29() {
return NFH29;
}

public byte getNFH30() {
return NFH30;
}

public byte getNFH31() {
return NFH31;
}

public byte getNFH32() {
return NFH32;
}

public byte getNFH33() {
return NFH33;
}

public byte getNFH34() {
return NFH34;
}

public byte getNFH35() {
return NFH35;
}

public byte getNFH36() {
return NFH36;
}

public byte getNFH37() {
return NFH37;
}

public byte getNFH38() {
return NFH38;
}

public byte getNGRP_DV() {
return NGRP_DV;
}

public byte getNHIQUAL_DV() {
return NHIQUAL_DV;
}

public byte getNIACT() {
return NIACT;
}

public byte getNIREL() {
return NIREL;
}

public byte getNISERPS() {
return NISERPS;
}

public byte getNMAR() {
return NMAR;
}

public byte getNMPSP_DV() {
return NMPSP_DV;
}

public byte getNNATCH() {
return NNATCH;
}

public byte getNNEWBORN() {
return NNEWBORN;
}

public byte getNNMPSP_DV() {
return NNMPSP_DV;
}

public byte getNNSIDV() {
return NNSIDV;
}

public byte getNNSSIDV() {
return NNSSIDV;
}

public byte getNOTEMPCHK() {
return NOTEMPCHK;
}

public byte getNPENSIONER_DV() {
return NPENSIONER_DV;
}

public byte getNPNS_DV() {
return NPNS_DV;
}

public byte getNPN_DV() {
return NPN_DV;
}

public byte getNQFHIGH_DV() {
return NQFHIGH_DV;
}

public byte getNUNMPSP_DV() {
return NUNMPSP_DV;
}

public byte getNXTJBENDD() {
return NXTJBENDD;
}

public byte getNXTJBENDM() {
return NXTJBENDM;
}

public short getNXTJBENDY4() {
return NXTJBENDY4;
}

public byte getNXTJBES() {
return NXTJBES;
}

public byte getNXTJBHRS() {
return NXTJBHRS;
}

public byte getNXTST() {
return NXTST;
}

public byte getNXTSTELSE() {
return NXTSTELSE;
}

public byte getNXTSTENDD() {
return NXTSTENDD;
}

public byte getNXTSTENDM() {
return NXTSTENDM;
}

public short getNXTSTENDY4() {
return NXTSTENDY4;
}

public byte getOCIMPA() {
return OCIMPA;
}

public byte getOCIMPB() {
return OCIMPB;
}

public byte getOCIMPE() {
return OCIMPE;
}

public byte getOCIMPF() {
return OCIMPF;
}

public byte getOCIMPI() {
return OCIMPI;
}

public byte getOCIMPK() {
return OCIMPK;
}

public byte getOCIMPL() {
return OCIMPL;
}

public byte getOPRLG() {
return OPRLG;
}

public byte getOPRLG0() {
return OPRLG0;
}

public byte getOPRLG0NI() {
return OPRLG0NI;
}

public byte getOPRLG1() {
return OPRLG1;
}

public byte getORIGADD() {
return ORIGADD;
}

public byte getOVTNSA() {
return OVTNSA;
}

public byte getOVTPAY() {
return OVTPAY;
}

protected double OVTRATE() {
return OVTRATE;
}

public byte getOVTREST() {
return OVTREST;
}

public byte getPACOB() {
return PACOB;
}

public byte getPAEDQF() {
return PAEDQF;
}

public byte getPAJU() {
return PAJU;
}

public byte getPANSSEC5_DV() {
return PANSSEC5_DV;
}

public short getPASOC00_CC() {
return PASOC00_CC;
}

public short getPASOC10_CC() {
return PASOC10_CC;
}

public byte getPASOC90_CC() {
return PASOC90_CC;
}

public byte getPAYGWC() {
return PAYGWC;
}

protected double PAYG_DV() {
return PAYG_DV;
}

public byte getPAYNWC() {
return PAYNWC;
}

public byte getPAYRUK() {
return PAYRUK;
}

public byte getPAYTYP() {
return PAYTYP;
}

public byte getPAYUWC() {
return PAYUWC;
}

protected double PAYU_DV() {
return PAYU_DV;
}

public byte getPBNFT1() {
return PBNFT1;
}

public byte getPBNFT10() {
return PBNFT10;
}

public byte getPBNFT11() {
return PBNFT11;
}

public byte getPBNFT12() {
return PBNFT12;
}

public byte getPBNFT2() {
return PBNFT2;
}

public byte getPBNFT3() {
return PBNFT3;
}

public byte getPBNFT4() {
return PBNFT4;
}

public byte getPBNFT5() {
return PBNFT5;
}

public byte getPBNFT6() {
return PBNFT6;
}

public byte getPBNFT7() {
return PBNFT7;
}

public byte getPBNFT8() {
return PBNFT8;
}

public byte getPBNFT9() {
return PBNFT9;
}

public byte getPBNFT96() {
return PBNFT96;
}

public byte getPENMCN() {
return PENMCN;
}

public byte getPENMEX() {
return PENMEX;
}

protected double PENMPY() {
return PENMPY;
}

public byte getPENMTP() {
return PENMTP;
}

public byte getPENSIONER_DV() {
return PENSIONER_DV;
}

public byte getPENSPB() {
return PENSPB;
}

public byte getPERBFTS() {
return PERBFTS;
}

public byte getPERPOLINF() {
return PERPOLINF;
}

public int getPID() {
return PID;
}

public byte getPJBPTFT() {
return PJBPTFT;
}

public byte getPJSPTFT() {
return PJSPTFT;
}

public short getPLNOWM() {
return PLNOWM;
}

public short getPLNOWY4() {
return PLNOWY4;
}

public int getPN1PID() {
return PN1PID;
}

public byte getPN1PNO() {
return PN1PNO;
}

public byte getPN1SEX() {
return PN1SEX;
}

public int getPN2PID() {
return PN2PID;
}

public byte getPN2PNO() {
return PN2PNO;
}

public byte getPN2SEX() {
return PN2SEX;
}

public int getPNS1PID() {
return PNS1PID;
}

public byte getPNS1PNO() {
return PNS1PNO;
}

public byte getPNS1SEX() {
return PNS1SEX;
}

public int getPNS2PID() {
return PNS2PID;
}

public byte getPNS2PNO() {
return PNS2PNO;
}

public byte getPNS2SEX() {
return PNS2SEX;
}

public byte getPOLCOST() {
return POLCOST;
}

public byte getPPEN() {
return PPEN;
}

public byte getPPENT() {
return PPENT;
}

public int getPPID() {
return PPID;
}

public byte getPPPEX() {
return PPPEX;
}

public byte getPPPEXM() {
return PPPEXM;
}

public int getPPRAM() {
return PPRAM;
}

public byte getPPRAMPC() {
return PPRAMPC;
}

public byte getPPREG() {
return PPREG;
}

public byte getPPSEX() {
return PPSEX;
}

public short getPPYRS() {
return PPYRS;
}

public byte getPREARN() {
return PREARN;
}

public byte getPREARNA() {
return PREARNA;
}

public byte getPREARNW() {
return PREARNW;
}

public byte getPREASON() {
return PREASON;
}

public byte getPREG() {
return PREG;
}

public byte getPREGDRINK1() {
return PREGDRINK1;
}

public byte getPREGDRINK2() {
return PREGDRINK2;
}

public boolean getPREGDRINK3() {
return PREGDRINK3;
}

public boolean getPREGDRINK4() {
return PREGDRINK4;
}

public byte getPREGDRINK5() {
return PREGDRINK5;
}

public byte getPREGEND1() {
return PREGEND1;
}

public byte getPREGEND2() {
return PREGEND2;
}

public byte getPREGEND3() {
return PREGEND3;
}

public byte getPREGEND4() {
return PREGEND4;
}

public byte getPREGEND5() {
return PREGEND5;
}

public byte getPREGFERT1() {
return PREGFERT1;
}

public byte getPREGFERT2() {
return PREGFERT2;
}

public byte getPREGFERT3() {
return PREGFERT3;
}

public byte getPREGFERT4() {
return PREGFERT4;
}

public byte getPREGFERT5() {
return PREGFERT5;
}

public byte getPREGM1() {
return PREGM1;
}

public byte getPREGM2() {
return PREGM2;
}

public byte getPREGM3() {
return PREGM3;
}

public byte getPREGM4() {
return PREGM4;
}

public byte getPREGM5() {
return PREGM5;
}

public byte getPREGOUT1() {
return PREGOUT1;
}

public byte getPREGOUT2() {
return PREGOUT2;
}

public byte getPREGOUT3() {
return PREGOUT3;
}

public byte getPREGOUT4() {
return PREGOUT4;
}

public byte getPREGOUT5() {
return PREGOUT5;
}

public byte getPREGSMK11() {
return PREGSMK11;
}

public byte getPREGSMK12() {
return PREGSMK12;
}

public byte getPREGSMK13() {
return PREGSMK13;
}

public byte getPREGSMK14() {
return PREGSMK14;
}

public byte getPREGSMK15() {
return PREGSMK15;
}

public byte getPREGSMK21() {
return PREGSMK21;
}

public byte getPREGSMK22() {
return PREGSMK22;
}

public byte getPREGSMK23() {
return PREGSMK23;
}

public byte getPREGSMK24() {
return PREGSMK24;
}

public byte getPREGSMK25() {
return PREGSMK25;
}

public byte getPREGSMK31() {
return PREGSMK31;
}

public byte getPREGSMK32() {
return PREGSMK32;
}

public byte getPREGSMK33() {
return PREGSMK33;
}

public byte getPREGSMK34() {
return PREGSMK34;
}

public byte getPREGSMK35() {
return PREGSMK35;
}

public byte getPREGSMOKE1() {
return PREGSMOKE1;
}

public byte getPREGSMOKE2() {
return PREGSMOKE2;
}

public byte getPREGSMOKE3() {
return PREGSMOKE3;
}

public byte getPREGSMOKE4() {
return PREGSMOKE4;
}

public byte getPREGSMOKE5() {
return PREGSMOKE5;
}

public short getPREGY41() {
return PREGY41;
}

public short getPREGY42() {
return PREGY42;
}

public short getPREGY43() {
return PREGY43;
}

public short getPREGY44() {
return PREGY44;
}

public byte getPREGY45() {
return PREGY45;
}

public byte getPREL() {
return PREL;
}

public byte getPRFITB() {
return PRFITB;
}

public byte getPRFITBA() {
return PRFITBA;
}

public byte getPRFITBW() {
return PRFITBW;
}

public byte getPRIDE10() {
return PRIDE10;
}

public byte getPRIDE11() {
return PRIDE11;
}

public byte getPRIDE12() {
return PRIDE12;
}

public byte getPRIDE13() {
return PRIDE13;
}

public byte getPRIDE14() {
return PRIDE14;
}

public byte getPRIDE2() {
return PRIDE2;
}

public byte getPRIDE4A() {
return PRIDE4A;
}

public byte getPRIDE4B() {
return PRIDE4B;
}

public byte getPRIDE5() {
return PRIDE5;
}

public byte getPRIDE6() {
return PRIDE6;
}

public byte getPRIDE7() {
return PRIDE7;
}

public byte getPRIDE8() {
return PRIDE8;
}

public byte getPRIDE9() {
return PRIDE9;
}

public int getPSU() {
return PSU;
}

public byte getQFHIGH() {
return QFHIGH;
}

public boolean getQFHIGHFL_DV() {
return QFHIGHFL_DV;
}

public byte getQFHIGH_DV() {
return QFHIGH_DV;
}

public byte getQFVOC1() {
return QFVOC1;
}

public byte getQFVOC10() {
return QFVOC10;
}

public byte getQFVOC11() {
return QFVOC11;
}

public byte getQFVOC12() {
return QFVOC12;
}

public byte getQFVOC13() {
return QFVOC13;
}

public byte getQFVOC14() {
return QFVOC14;
}

public byte getQFVOC15() {
return QFVOC15;
}

public byte getQFVOC2() {
return QFVOC2;
}

public byte getQFVOC3() {
return QFVOC3;
}

public byte getQFVOC4() {
return QFVOC4;
}

public byte getQFVOC5() {
return QFVOC5;
}

public byte getQFVOC6() {
return QFVOC6;
}

public byte getQFVOC7() {
return QFVOC7;
}

public byte getQFVOC8() {
return QFVOC8;
}

public byte getQFVOC9() {
return QFVOC9;
}

public byte getQFVOC96() {
return QFVOC96;
}

public byte getQUALNEW1() {
return QUALNEW1;
}

public byte getQUALNEW10() {
return QUALNEW10;
}

public byte getQUALNEW11() {
return QUALNEW11;
}

public byte getQUALNEW13() {
return QUALNEW13;
}

public byte getQUALNEW15() {
return QUALNEW15;
}

public byte getQUALNEW16() {
return QUALNEW16;
}

public byte getQUALNEW17() {
return QUALNEW17;
}

public byte getQUALNEW18() {
return QUALNEW18;
}

public byte getQUALNEW19() {
return QUALNEW19;
}

public byte getQUALNEW2() {
return QUALNEW2;
}

public byte getQUALNEW20() {
return QUALNEW20;
}

public byte getQUALNEW21() {
return QUALNEW21;
}

public byte getQUALNEW22() {
return QUALNEW22;
}

public byte getQUALNEW23() {
return QUALNEW23;
}

public byte getQUALNEW24() {
return QUALNEW24;
}

public byte getQUALNEW25() {
return QUALNEW25;
}

public byte getQUALNEW26() {
return QUALNEW26;
}

public byte getQUALNEW27() {
return QUALNEW27;
}

public byte getQUALNEW28() {
return QUALNEW28;
}

public byte getQUALNEW29() {
return QUALNEW29;
}

public byte getQUALNEW3() {
return QUALNEW3;
}

public byte getQUALNEW30() {
return QUALNEW30;
}

public byte getQUALNEW31() {
return QUALNEW31;
}

public byte getQUALNEW4() {
return QUALNEW4;
}

public byte getQUALNEW5() {
return QUALNEW5;
}

public byte getQUALNEW6() {
return QUALNEW6;
}

public byte getQUALNEW7() {
return QUALNEW7;
}

public byte getQUALNEW8() {
return QUALNEW8;
}

public byte getQUALNEW9() {
return QUALNEW9;
}

public byte getQUALOC() {
return QUALOC;
}

public byte getRACEL() {
return RACEL;
}

public short getRACELO_CODE() {
return RACELO_CODE;
}

public byte getRACEL_DV() {
return RACEL_DV;
}

public byte getREASEND1() {
return REASEND1;
}

public boolean getREASEND10() {
return REASEND10;
}

public byte getREASEND2() {
return REASEND2;
}

public byte getREASEND3() {
return REASEND3;
}

public byte getREASEND4() {
return REASEND4;
}

public byte getREASEND5() {
return REASEND5;
}

public byte getREASEND6() {
return REASEND6;
}

public byte getREASEND7() {
return REASEND7;
}

public boolean getREASEND8() {
return REASEND8;
}

public byte getREASEND9() {
return REASEND9;
}

public byte getRELUP() {
return RELUP;
}

public byte getREMAIL_CODE() {
return REMAIL_CODE;
}

public boolean getRESPF16() {
return RESPF16;
}

public boolean getRESPF16_DV() {
return RESPF16_DV;
}

public boolean getRESPM16() {
return RESPM16;
}

public boolean getRESPM16_DV() {
return RESPM16_DV;
}

public byte getRETAMT() {
return RETAMT;
}

public byte getRETCHK() {
return RETCHK;
}

public byte getRETSUF() {
return RETSUF;
}

public byte getRHLAND_CODE() {
return RHLAND_CODE;
}

public byte getRPHMOCODE() {
return RPHMOCODE;
}

public byte getRPHWRK_CODE() {
return RPHWRK_CODE;
}

public byte getRTCON1() {
return RTCON1;
}

public byte getRTCON2() {
return RTCON2;
}

public byte getRTCON3() {
return RTCON3;
}

public byte getRTCON4() {
return RTCON4;
}

public byte getRTEXPJB() {
return RTEXPJB;
}

public byte getRTFND1() {
return RTFND1;
}

public byte getRTFND10() {
return RTFND10;
}

public byte getRTFND2() {
return RTFND2;
}

public byte getRTFND3() {
return RTFND3;
}

public byte getRTFND4() {
return RTFND4;
}

public byte getRTFND5() {
return RTFND5;
}

public byte getRTFND6() {
return RTFND6;
}

public byte getRTFND7() {
return RTFND7;
}

public byte getRTFND8() {
return RTFND8;
}

public byte getRTFND9() {
return RTFND9;
}

public byte getRTFND96() {
return RTFND96;
}

public byte getRTPRO1() {
return RTPRO1;
}

public byte getRTPRO2() {
return RTPRO2;
}

public byte getRTPRO3() {
return RTPRO3;
}

public byte getRTPRO4() {
return RTPRO4;
}

public byte getRTPRO5() {
return RTPRO5;
}

public byte getRTPRO6() {
return RTPRO6;
}

public byte getSAMEJOB() {
return SAMEJOB;
}

public short getSAMPST() {
return SAMPST;
}

public short getSAVE() {
return SAVE;
}

public int getSAVED() {
return SAVED;
}

public byte getSAVLT() {
return SAVLT;
}

public byte getSAVREG() {
return SAVREG;
}

public byte getSCAGE1DRINK() {
return SCAGE1DRINK;
}

public byte getSCALCL7D() {
return SCALCL7D;
}

public byte getSCANYELSETXT() {
return SCANYELSETXT;
}

public byte getSCDEM2MANY() {
return SCDEM2MANY;
}

public short getSCDOBY4() {
return SCDOBY4;
}

public byte getSCEVERDRNK() {
return SCEVERDRNK;
}

public byte getSCFALCDRNK() {
return SCFALCDRNK;
}

public byte getSCFANNOY() {
return SCFANNOY;
}

public byte getSCFCRITIC() {
return SCFCRITIC;
}

public byte getSCFLAG_DV() {
return SCFLAG_DV;
}

public byte getSCFLETDWN() {
return SCFLETDWN;
}

public byte getSCFOPENUP() {
return SCFOPENUP;
}

public byte getSCFRELY() {
return SCFRELY;
}

public byte getSCFRENDANY() {
return SCFRENDANY;
}

public byte getSCFUNDSTND() {
return SCFUNDSTND;
}

public byte getSCHLLOC() {
return SCHLLOC;
}

public byte getSCHMCONT() {
return SCHMCONT;
}

public byte getSCHOK() {
return SCHOK;
}

public byte getSCLFSAT1() {
return SCLFSAT1;
}

public byte getSCLFSAT2() {
return SCLFSAT2;
}

public byte getSCLFSAT7() {
return SCLFSAT7;
}

public byte getSCLFSATO() {
return SCLFSATO;
}

public byte getSCLOUTCONT() {
return SCLOUTCONT;
}

public byte getSCMOLWP() {
return SCMOLWP;
}

public byte getSCNALCL7D() {
return SCNALCL7D;
}

protected double SCNALCPINT() {
return SCNALCPINT;
}

protected double SCNALCPOPS() {
return SCNALCPOPS;
}

protected double SCNALCSHOT() {
return SCNALCSHOT;
}

protected double SCNALCWINE() {
return SCNALCWINE;
}

public byte getSCOPFAMA() {
return SCOPFAMA;
}

public byte getSCOPFAMB() {
return SCOPFAMB;
}

public byte getSCOPFAMD() {
return SCOPFAMD;
}

public byte getSCOPFAMF() {
return SCOPFAMF;
}

public byte getSCOPFAMH() {
return SCOPFAMH;
}

public byte getSCPANNOY() {
return SCPANNOY;
}

public byte getSCPCRITIC() {
return SCPCRITIC;
}

public byte getSCPLETDWN() {
return SCPLETDWN;
}

public byte getSCPOPENUP() {
return SCPOPENUP;
}

public byte getSCPRELY() {
return SCPRELY;
}

public byte getSCPUNDSTND() {
return SCPUNDSTND;
}

public byte getSCRANNOY() {
return SCRANNOY;
}

public byte getSCRCRITIC() {
return SCRCRITIC;
}

public byte getSCRELANY() {
return SCRELANY;
}

public byte getSCRLETDWN() {
return SCRLETDWN;
}

public byte getSCROPENUP() {
return SCROPENUP;
}

public byte getSCRRELY() {
return SCRRELY;
}

public byte getSCRUNDSTND() {
return SCRUNDSTND;
}

public byte getSCSEX() {
return SCSEX;
}

public byte getSCSF1() {
return SCSF1;
}

public byte getSCSF2A() {
return SCSF2A;
}

public byte getSCSF2B() {
return SCSF2B;
}

public byte getSCSF3A() {
return SCSF3A;
}

public byte getSCSF3B() {
return SCSF3B;
}

public byte getSCSF4A() {
return SCSF4A;
}

public byte getSCSF4B() {
return SCSF4B;
}

public byte getSCSF5() {
return SCSF5;
}

public byte getSCSF6A() {
return SCSF6A;
}

public byte getSCSF6B() {
return SCSF6B;
}

public byte getSCSF6C() {
return SCSF6C;
}

public byte getSCSF7() {
return SCSF7;
}

public byte getSCSSUP1() {
return SCSSUP1;
}

public byte getSCSSUPR2R() {
return SCSSUPR2R;
}

public byte getSCTIMEMNUF() {
return SCTIMEMNUF;
}

public byte getSCWHORUAGE() {
return SCWHORUAGE;
}

public byte getSCWHORUEDU() {
return SCWHORUEDU;
}

public byte getSCWHORUFAM() {
return SCWHORUFAM;
}

public byte getSCWHORUPOL() {
return SCWHORUPOL;
}

public byte getSCWHORUPRO() {
return SCWHORUPRO;
}

public byte getSCWHORURAC() {
return SCWHORURAC;
}

public byte getSCWHORUSEX() {
return SCWHORUSEX;
}

public byte getSCWKVFAST() {
return SCWKVFAST;
}

protected double SEEARNGRS_DV() {
return SEEARNGRS_DV;
}

public byte getSEEARNGRS_IF() {
return SEEARNGRS_IF;
}

protected double SEEARNNET_DV() {
return SEEARNNET_DV;
}

public byte getSEX_DV() {
return SEX_DV;
}

public byte getSF1() {
return SF1;
}

protected double SF12MCS_DV() {
return SF12MCS_DV;
}

protected double SF12PCS_DV() {
return SF12PCS_DV;
}

public boolean getSINGLE_DV() {
return SINGLE_DV;
}

public byte getSMAGBG() {
return SMAGBG;
}

public byte getSMCIGS() {
return SMCIGS;
}

public byte getSMEVER() {
return SMEVER;
}

public byte getSMKMNTH11() {
return SMKMNTH11;
}

public byte getSMKMNTH12() {
return SMKMNTH12;
}

public byte getSMKMNTH13() {
return SMKMNTH13;
}

public byte getSMKMNTH14() {
return SMKMNTH14;
}

public byte getSMKMNTH15() {
return SMKMNTH15;
}

public byte getSMKMNTH21() {
return SMKMNTH21;
}

public byte getSMKMNTH22() {
return SMKMNTH22;
}

public byte getSMKMNTH23() {
return SMKMNTH23;
}

public byte getSMKMNTH24() {
return SMKMNTH24;
}

public byte getSMKMNTH25() {
return SMKMNTH25;
}

public byte getSMKMNTH31() {
return SMKMNTH31;
}

public byte getSMKMNTH32() {
return SMKMNTH32;
}

public byte getSMKMNTH33() {
return SMKMNTH33;
}

public byte getSMKMNTH34() {
return SMKMNTH34;
}

public byte getSMKMNTH35() {
return SMKMNTH35;
}

public byte getSMNCIGS() {
return SMNCIGS;
}

public byte getSMNOW() {
return SMNOW;
}

public byte getSPORTACT() {
return SPORTACT;
}

public byte getSPORTS11() {
return SPORTS11;
}

public byte getSPORTS110() {
return SPORTS110;
}

public byte getSPORTS111() {
return SPORTS111;
}

public byte getSPORTS112() {
return SPORTS112;
}

public byte getSPORTS113() {
return SPORTS113;
}

public byte getSPORTS114() {
return SPORTS114;
}

public byte getSPORTS12() {
return SPORTS12;
}

public byte getSPORTS13() {
return SPORTS13;
}

public byte getSPORTS14() {
return SPORTS14;
}

public byte getSPORTS15() {
return SPORTS15;
}

public byte getSPORTS16() {
return SPORTS16;
}

public byte getSPORTS17() {
return SPORTS17;
}

public byte getSPORTS18() {
return SPORTS18;
}

public byte getSPORTS19() {
return SPORTS19;
}

public byte getSPORTS196() {
return SPORTS196;
}

public byte getSPORTS216() {
return SPORTS216;
}

public byte getSPORTS217() {
return SPORTS217;
}

public byte getSPORTS218() {
return SPORTS218;
}

public byte getSPORTS219() {
return SPORTS219;
}

public byte getSPORTS220() {
return SPORTS220;
}

public byte getSPORTS221() {
return SPORTS221;
}

public byte getSPORTS222() {
return SPORTS222;
}

public byte getSPORTS223() {
return SPORTS223;
}

public byte getSPORTS224() {
return SPORTS224;
}

public byte getSPORTS225() {
return SPORTS225;
}

public byte getSPORTS226() {
return SPORTS226;
}

public byte getSPORTS227() {
return SPORTS227;
}

public byte getSPORTS228() {
return SPORTS228;
}

public byte getSPORTS229() {
return SPORTS229;
}

public byte getSPORTS230() {
return SPORTS230;
}

public byte getSPORTS231() {
return SPORTS231;
}

public byte getSPORTS296() {
return SPORTS296;
}

public byte getSPORTS31() {
return SPORTS31;
}

public byte getSPORTS32() {
return SPORTS32;
}

public byte getSPORTS33() {
return SPORTS33;
}

public byte getSPORTS34() {
return SPORTS34;
}

public byte getSPORTS35() {
return SPORTS35;
}

public byte getSPORTS36() {
return SPORTS36;
}

public byte getSPORTS37() {
return SPORTS37;
}

public byte getSPORTS38() {
return SPORTS38;
}

public byte getSPORTS39() {
return SPORTS39;
}

public byte getSPORTS396() {
return SPORTS396;
}

public byte getSPORTS3FREQ() {
return SPORTS3FREQ;
}

public byte getSPORTSFREQ() {
return SPORTSFREQ;
}

public byte getSPPEN() {
return SPPEN;
}

public int getSPPID() {
return SPPID;
}

public byte getSPPNO() {
return SPPNO;
}

public byte getSTATCM1() {
return STATCM1;
}

public byte getSTATCM2() {
return STATCM2;
}

public byte getSTATCM3() {
return STATCM3;
}

public short getSTATCY41() {
return STATCY41;
}

public short getSTATCY42() {
return STATCY42;
}

public short getSTATCY43() {
return STATCY43;
}

public byte getSTATENDD1() {
return STATENDD1;
}

public boolean getSTATENDD10() {
return STATENDD10;
}

public byte getSTATENDD2() {
return STATENDD2;
}

public byte getSTATENDD3() {
return STATENDD3;
}

public byte getSTATENDD4() {
return STATENDD4;
}

public byte getSTATENDD5() {
return STATENDD5;
}

public byte getSTATENDD6() {
return STATENDD6;
}

public byte getSTATENDD7() {
return STATENDD7;
}

public byte getSTATENDD8() {
return STATENDD8;
}

public byte getSTATENDD9() {
return STATENDD9;
}

public byte getSTATENDM1() {
return STATENDM1;
}

public boolean getSTATENDM10() {
return STATENDM10;
}

public byte getSTATENDM2() {
return STATENDM2;
}

public byte getSTATENDM3() {
return STATENDM3;
}

public byte getSTATENDM4() {
return STATENDM4;
}

public byte getSTATENDM5() {
return STATENDM5;
}

public byte getSTATENDM6() {
return STATENDM6;
}

public byte getSTATENDM7() {
return STATENDM7;
}

public byte getSTATENDM8() {
return STATENDM8;
}

public byte getSTATENDM9() {
return STATENDM9;
}

public short getSTATENDY41() {
return STATENDY41;
}

public boolean getSTATENDY410() {
return STATENDY410;
}

public short getSTATENDY42() {
return STATENDY42;
}

public short getSTATENDY43() {
return STATENDY43;
}

public short getSTATENDY44() {
return STATENDY44;
}

public short getSTATENDY45() {
return STATENDY45;
}

public short getSTATENDY46() {
return STATENDY46;
}

public short getSTATENDY47() {
return STATENDY47;
}

public short getSTATENDY48() {
return STATENDY48;
}

public short getSTATENDY49() {
return STATENDY49;
}

public byte getSTENDREAS() {
return STENDREAS;
}

public short getSTRATA() {
return STRATA;
}

public byte getSUSP() {
return SUSP;
}

public byte getTRAINANY() {
return TRAINANY;
}

public short getTRAINDAYS1() {
return TRAINDAYS1;
}

public short getTRAINDAYS2() {
return TRAINDAYS2;
}

public short getTRAINDAYS3() {
return TRAINDAYS3;
}

public byte getTRAINEND1() {
return TRAINEND1;
}

public byte getTRAINEND2() {
return TRAINEND2;
}

public byte getTRAINEND3() {
return TRAINEND3;
}

public byte getTRAINHRS1() {
return TRAINHRS1;
}

public byte getTRAINHRS2() {
return TRAINHRS2;
}

public byte getTRAINHRS3() {
return TRAINHRS3;
}

public byte getTRAINN() {
return TRAINN;
}

public byte getTRAINPURP11() {
return TRAINPURP11;
}

public byte getTRAINPURP12() {
return TRAINPURP12;
}

public byte getTRAINPURP13() {
return TRAINPURP13;
}

public byte getTRAINPURP21() {
return TRAINPURP21;
}

public byte getTRAINPURP22() {
return TRAINPURP22;
}

public byte getTRAINPURP23() {
return TRAINPURP23;
}

public byte getTRAINPURP31() {
return TRAINPURP31;
}

public byte getTRAINPURP32() {
return TRAINPURP32;
}

public byte getTRAINPURP33() {
return TRAINPURP33;
}

public byte getTRAINPURP41() {
return TRAINPURP41;
}

public byte getTRAINPURP42() {
return TRAINPURP42;
}

public byte getTRAINPURP43() {
return TRAINPURP43;
}

public byte getTRAINPURP51() {
return TRAINPURP51;
}

public byte getTRAINPURP52() {
return TRAINPURP52;
}

public byte getTRAINPURP53() {
return TRAINPURP53;
}

public byte getTRAINPURP61() {
return TRAINPURP61;
}

public byte getTRAINPURP62() {
return TRAINPURP62;
}

public byte getTRAINPURP63() {
return TRAINPURP63;
}

public byte getTRAINPURP71() {
return TRAINPURP71;
}

public byte getTRAINPURP72() {
return TRAINPURP72;
}

public byte getTRAINPURP73() {
return TRAINPURP73;
}

public byte getTRAINQUAL1() {
return TRAINQUAL1;
}

public byte getTRAINQUAL2() {
return TRAINQUAL2;
}

public byte getTRAINQUAL3() {
return TRAINQUAL3;
}

public byte getTRQUAL1() {
return TRQUAL1;
}

public byte getTRQUAL10() {
return TRQUAL10;
}

public byte getTRQUAL11() {
return TRQUAL11;
}

public byte getTRQUAL13() {
return TRQUAL13;
}

public byte getTRQUAL15() {
return TRQUAL15;
}

public byte getTRQUAL16() {
return TRQUAL16;
}

public byte getTRQUAL17() {
return TRQUAL17;
}

public byte getTRQUAL18() {
return TRQUAL18;
}

public byte getTRQUAL19() {
return TRQUAL19;
}

public byte getTRQUAL2() {
return TRQUAL2;
}

public byte getTRQUAL20() {
return TRQUAL20;
}

public byte getTRQUAL21() {
return TRQUAL21;
}

public byte getTRQUAL22() {
return TRQUAL22;
}

public byte getTRQUAL23() {
return TRQUAL23;
}

public byte getTRQUAL24() {
return TRQUAL24;
}

public byte getTRQUAL25() {
return TRQUAL25;
}

public byte getTRQUAL26() {
return TRQUAL26;
}

public byte getTRQUAL27() {
return TRQUAL27;
}

public byte getTRQUAL28() {
return TRQUAL28;
}

public byte getTRQUAL29() {
return TRQUAL29;
}

public byte getTRQUAL3() {
return TRQUAL3;
}

public byte getTRQUAL30() {
return TRQUAL30;
}

public byte getTRQUAL31() {
return TRQUAL31;
}

public byte getTRQUAL4() {
return TRQUAL4;
}

public byte getTRQUAL5() {
return TRQUAL5;
}

public byte getTRQUAL6() {
return TRQUAL6;
}

public byte getTRQUAL7() {
return TRQUAL7;
}

public byte getTRQUAL8() {
return TRQUAL8;
}

public byte getTRQUAL9() {
return TRQUAL9;
}

public byte getTRWHO1() {
return TRWHO1;
}

public byte getTRWHO2() {
return TRWHO2;
}

public byte getTRWHO3() {
return TRWHO3;
}

public short getTUIN1() {
return TUIN1;
}

public short getTUJBPL() {
return TUJBPL;
}

public byte getTWKCAR() {
return TWKCAR;
}

public byte getTWKCARY1() {
return TWKCARY1;
}

public byte getTWKCARY10() {
return TWKCARY10;
}

public byte getTWKCARY11() {
return TWKCARY11;
}

public byte getTWKCARY12() {
return TWKCARY12;
}

public byte getTWKCARY13() {
return TWKCARY13;
}

public byte getTWKCARY14() {
return TWKCARY14;
}

public byte getTWKCARY2() {
return TWKCARY2;
}

public byte getTWKCARY3() {
return TWKCARY3;
}

public byte getTWKCARY4() {
return TWKCARY4;
}

public byte getTWKCARY5() {
return TWKCARY5;
}

public byte getTWKCARY6() {
return TWKCARY6;
}

public byte getTWKCARY7() {
return TWKCARY7;
}

public byte getTWKCARY8() {
return TWKCARY8;
}

public byte getTWKCARY9() {
return TWKCARY9;
}

public byte getTWKCARY97() {
return TWKCARY97;
}

public byte getTWKCARYM() {
return TWKCARYM;
}

public byte getTWKDIFF1() {
return TWKDIFF1;
}

public byte getTWKDIFF2() {
return TWKDIFF2;
}

public byte getTWKDIFF3() {
return TWKDIFF3;
}

public byte getTWKDIFF4() {
return TWKDIFF4;
}

public byte getTWKDIFF5() {
return TWKDIFF5;
}

public byte getTWKDIFF6() {
return TWKDIFF6;
}

public byte getTWKDIFF7() {
return TWKDIFF7;
}

public byte getTWKDIFF8() {
return TWKDIFF8;
}

public byte getTWKDIFF97() {
return TWKDIFF97;
}

public byte getTWKDIFFM() {
return TWKDIFFM;
}

public byte getUKBORN() {
return UKBORN;
}

public byte getUNDQUS() {
return UNDQUS;
}

public byte getURBAN_DV() {
return URBAN_DV;
}

public byte getUSBREAD() {
return USBREAD;
}

public byte getUSDAIRY() {
return USDAIRY;
}

public byte getVOLFREQ() {
return VOLFREQ;
}

public short getVOLHRS() {
return VOLHRS;
}

public byte getVOLUN() {
return VOLUN;
}

public short getVOTE1() {
return VOTE1;
}

public short getVOTE2() {
return VOTE2;
}

public short getVOTE3() {
return VOTE3;
}

public short getVOTE4() {
return VOTE4;
}

public short getVOTE5() {
return VOTE5;
}

public short getVOTE6() {
return VOTE6;
}

public byte getVOTE7() {
return VOTE7;
}

public byte getVOTE8() {
return VOTE8;
}

public byte getVOTEINTENT() {
return VOTEINTENT;
}

public byte getVOTENORM() {
return VOTENORM;
}

public byte getVOUCHER() {
return VOUCHER;
}

public byte getWALKPACE() {
return WALKPACE;
}

public byte getWKAUT1() {
return WKAUT1;
}

public byte getWKAUT2() {
return WKAUT2;
}

public byte getWKAUT3() {
return WKAUT3;
}

public byte getWKAUT4() {
return WKAUT4;
}

public byte getWKAUT5() {
return WKAUT5;
}

public byte getWKENDS() {
return WKENDS;
}

public byte getWKFRUIT() {
return WKFRUIT;
}

public byte getWKHOME() {
return WKHOME;
}

public byte getWKPHYS() {
return WKPHYS;
}

public byte getWKPLSAM() {
return WKPLSAM;
}

public short getWKTIME() {
return WKTIME;
}

public byte getWKVEGE() {
return WKVEGE;
}

public byte getWLK10M() {
return WLK10M;
}

public byte getWLK30MIN() {
return WLK30MIN;
}

public short getWORKDIS() {
return WORKDIS;
}

public byte getWORKTRAV() {
return WORKTRAV;
}

public byte getXPMOVE() {
return XPMOVE;
}

public byte getXTRA5MINOSM_DV() {
return XTRA5MINOSM_DV;
}

public byte getXTRA5MIN_DV() {
return XTRA5MIN_DV;
}

public US_Wave20_indresp_Record(String line) {
s = line.split("\t");
initPIDP(s[0]);
initPID(s[1]);
initHIDP(s[2]);
initPNO(s[3]);
initHHORIG(s[4]);
initMEMORIG(s[5]);
initPSU(s[6]);
initSTRATA(s[7]);
initSAMPST(s[8]);
initMONTH(s[9]);
initIVFIO(s[10]);
initIOUTCOME(s[11]);
initSEX(s[12]);
initDVAGE(s[13]);
initBIRTHY(s[14]);
initCINDTIME(s[15]);
initNEWPER(s[16]);
initNEWENTRANT(s[17]);
initLVWHY(s[18]);
initLVMTHP(s[19]);
initLVYRP(s[20]);
initADSTATUS(s[21]);
initNCH14RESP(s[22]);
initNCH415RESP(s[23]);
initNCHRESP(s[24]);
initNCHUND18RESP(s[25]);
initNATCH01(s[26]);
initNATCH02(s[27]);
initNATCH03(s[28]);
initNATCH04(s[29]);
initNATCH05(s[30]);
initNATCH06(s[31]);
initNATCH07(s[32]);
initNATCH08(s[33]);
initNATCH09(s[34]);
initNATCH10(s[35]);
initNATCH11(s[36]);
initNATCH12(s[37]);
initNATCH13(s[38]);
initNATCH14(s[39]);
initNATCH15(s[40]);
initNATCH16(s[41]);
initNNATCH(s[42]);
initNADOPTCH(s[43]);
initADOPTCH01(s[44]);
initADOPTCH02(s[45]);
initADOPTCH03(s[46]);
initADOPTCH04(s[47]);
initADOPTCH05(s[48]);
initADOPTCH06(s[49]);
initADOPTCH07(s[50]);
initADOPTCH08(s[51]);
initADOPTCH09(s[52]);
initADOPTCH10(s[53]);
initADOPTCH11(s[54]);
initADOPTCH12(s[55]);
initADOPTCH13(s[56]);
initADOPTCH14(s[57]);
initADOPTCH15(s[58]);
initADOPTCH16(s[59]);
initNCHUNDER16(s[60]);
initNCH5TO15(s[61]);
initNCH10TO15(s[62]);
initALLCH01(s[63]);
initALLCH02(s[64]);
initALLCH03(s[65]);
initALLCH04(s[66]);
initALLCH05(s[67]);
initALLCH06(s[68]);
initALLCH07(s[69]);
initALLCH08(s[70]);
initALLCH09(s[71]);
initALLCH10(s[72]);
initALLCH11(s[73]);
initALLCH12(s[74]);
initALLCH13(s[75]);
initALLCH14(s[76]);
initALLCH15(s[77]);
initALLCH16(s[78]);
initISTRTDATY(s[79]);
initISTRTDATM(s[80]);
initISTRTDATD(s[81]);
initCHKSEX(s[82]);
initCHKDOB(s[83]);
initMVEVER(s[84]);
initMVMNTH(s[85]);
initMVYR(s[86]);
initLKMOVE(s[87]);
initXPMOVE(s[88]);
initJBSTAT(s[89]);
initMLSTATCHK(s[90]);
initMLSTAT(s[91]);
initDRIVE(s[92]);
initCARUSE(s[93]);
initMOBUSE(s[94]);
initNETUSE(s[95]);
initUKBORN(s[96]);
initPLBORNC(s[97]);
initYR2UK4(s[98]);
initCITZN1(s[99]);
initCITZN2(s[100]);
initCITZN3(s[101]);
initQFHIGH(s[102]);
initQUALOC(s[103]);
initQFVOC1(s[104]);
initQFVOC2(s[105]);
initQFVOC3(s[106]);
initQFVOC4(s[107]);
initQFVOC5(s[108]);
initQFVOC6(s[109]);
initQFVOC7(s[110]);
initQFVOC8(s[111]);
initQFVOC9(s[112]);
initQFVOC10(s[113]);
initQFVOC11(s[114]);
initQFVOC12(s[115]);
initQFVOC13(s[116]);
initQFVOC14(s[117]);
initQFVOC15(s[118]);
initQFVOC96(s[119]);
initSCHOOL(s[120]);
initSCEND(s[121]);
initSCHLLOC(s[122]);
initSCHOK(s[123]);
initFENOW(s[124]);
initFEEND(s[125]);
initJ1NONE(s[126]);
initJ1SEMP(s[127]);
initJ1BOSS(s[128]);
initJ1MNGR(s[129]);
initPAEDQF(s[130]);
initMAEDQF(s[131]);
initEDTYPE(s[132]);
initEDASP(s[133]);
initFEDLIK(s[134]);
initFEDNT(s[135]);
initOCIMPA(s[136]);
initOCIMPB(s[137]);
initOCIMPE(s[138]);
initOCIMPF(s[139]);
initOCIMPI(s[140]);
initOCIMPK(s[141]);
initOCIMPL(s[142]);
initFUTRA(s[143]);
initFUTRB(s[144]);
initFUTRC(s[145]);
initFUTRD(s[146]);
initFUTRE(s[147]);
initFUTRF(s[148]);
initFUTRG(s[149]);
initFUTRH(s[150]);
initFUTRI(s[151]);
initFUTRJ(s[152]);
initFUTRK(s[153]);
initFUTRL(s[154]);
initPAJU(s[155]);
initMAJU(s[156]);
initPACOB(s[157]);
initPAYRUK(s[158]);
initMACOB(s[159]);
initMAYRUK(s[160]);
initNATID1(s[161]);
initNATID2(s[162]);
initNATID3(s[163]);
initNATID4(s[164]);
initNATID5(s[165]);
initNATID6(s[166]);
initNATID97(s[167]);
initRACEL(s[168]);
initRACELO_CODE(s[169]);
initKIDLANG(s[170]);
initETHID2(s[171]);
initETHID3(s[172]);
initETHID4A(s[173]);
initETHID4B(s[174]);
initETHID5(s[175]);
initETHID6(s[176]);
initETHID7(s[177]);
initETHID8(s[178]);
initETHID9(s[179]);
initETHID10(s[180]);
initETHID11(s[181]);
initETHID12(s[182]);
initETHID13(s[183]);
initETHID14(s[184]);
initETHCLOSE1(s[185]);
initETHCLOSE2A(s[186]);
initETHCLOSE2B(s[187]);
initETHCLOSE3(s[188]);
initETHCLOSE4A(s[189]);
initETHCLOSE4B(s[190]);
initETHCLOSE5(s[191]);
initETHCLOSE6(s[192]);
initETHCLOSE7(s[193]);
initETHCLOSE8(s[194]);
initETHCLOSE9(s[195]);
initETHCLOSE10(s[196]);
initETHCLOSE11(s[197]);
initPRIDE2(s[198]);
initPRIDE4A(s[199]);
initPRIDE4B(s[200]);
initPRIDE6(s[201]);
initPRIDE7(s[202]);
initPRIDE5(s[203]);
initPRIDE8(s[204]);
initPRIDE9(s[205]);
initPRIDE10(s[206]);
initPRIDE11(s[207]);
initPRIDE12(s[208]);
initPRIDE13(s[209]);
initPRIDE14(s[210]);
initFOOD1(s[211]);
initFOOD2(s[212]);
initFOOD3(s[213]);
initFOOD4(s[214]);
initFOOD5(s[215]);
initFOOD6(s[216]);
initFOOD7(s[217]);
initOPRLG(s[218]);
initOPRLG0NI(s[219]);
initNIREL(s[220]);
initNIACT(s[221]);
initOPRLG0(s[222]);
initOPRLG1(s[223]);
initSF1(s[224]);
initUSDAIRY(s[225]);
initUSBREAD(s[226]);
initWKFRUIT(s[227]);
initWKVEGE(s[228]);
initFRUVEGE(s[229]);
initWLK10M(s[230]);
initDAYWLK(s[231]);
initWLK30MIN(s[232]);
initWALKPACE(s[233]);
initSMEVER(s[234]);
initSMNOW(s[235]);
initNCIGS(s[236]);
initSMCIGS(s[237]);
initSMNCIGS(s[238]);
initAGLQUIT(s[239]);
initSMAGBG(s[240]);
initHEALTH(s[241]);
initHOSPC1(s[242]);
initHOSPDC1(s[243]);
initHOSPC2(s[244]);
initHOSPDC2(s[245]);
initHOSPC3(s[246]);
initHOSPDC3(s[247]);
initHOSPC4(s[248]);
initHOSPDC4(s[249]);
initHOSPC5(s[250]);
initHOSPDC5(s[251]);
initHOSPC6(s[252]);
initHOSPDC6(s[253]);
initHOSPC7(s[254]);
initHOSPDC7(s[255]);
initHOSPC8(s[256]);
initHOSPDC8(s[257]);
initDISDIF1(s[258]);
initDISDIF2(s[259]);
initDISDIF3(s[260]);
initDISDIF4(s[261]);
initDISDIF5(s[262]);
initDISDIF6(s[263]);
initDISDIF7(s[264]);
initDISDIF8(s[265]);
initDISDIF9(s[266]);
initDISDIF10(s[267]);
initDISDIF11(s[268]);
initDISDIF12(s[269]);
initDISDIF96(s[270]);
initAIDHH(s[271]);
initAIDHUA1(s[272]);
initAIDHUA2(s[273]);
initAIDHUA3(s[274]);
initAIDHUA4(s[275]);
initAIDHUA5(s[276]);
initAIDHUA6(s[277]);
initAIDHUA7(s[278]);
initAIDHUA8(s[279]);
initAIDHUA9(s[280]);
initAIDHUA10(s[281]);
initAIDHUA11(s[282]);
initAIDHUA12(s[283]);
initAIDHUA13(s[284]);
initAIDHUA14(s[285]);
initAIDHUA15(s[286]);
initAIDHUA16(s[287]);
initAIDXHH(s[288]);
initNAIDXHH(s[289]);
initAIDHU1(s[290]);
initAIDHU2(s[291]);
initAIDHRS(s[292]);
initAIDEFT(s[293]);
initLCOHNPI(s[294]);
initCOH1BM(s[295]);
initCOH1BY(s[296]);
initCOH1MR(s[297]);
initCOH1EM(s[298]);
initCOH1EY(s[299]);
initNMAR(s[300]);
initLMAR1M(s[301]);
initLMAR1Y(s[302]);
initLADOPT(s[303]);
initLNADOPT(s[304]);
initLPRNT(s[305]);
initLNPRNT(s[306]);
initCH1BY4(s[307]);
initMOVY11(s[308]);
initMOVY12(s[309]);
initMOVY13(s[310]);
initMOVY14(s[311]);
initMOVY15(s[312]);
initMOVY16(s[313]);
initFAMILY(s[314]);
initEDUCATION(s[315]);
initMEMPLOY(s[316]);
initHOUSING(s[317]);
initAREA(s[318]);
initMOVEOTH_CODE(s[319]);
initMOVDIR(s[320]);
initPLNOWM(s[321]);
initPLNOWY4(s[322]);
initRELUP(s[323]);
initMSTATSAM(s[324]);
initLWWRONG(s[325]);
initMSTATSAMN(s[326]);
initLASTMSTATCH1(s[327]);
initMSTATCH1(s[328]);
initSTATCM1(s[329]);
initSTATCY41(s[330]);
initDIVCHK1(s[331]);
initDIVFIN1(s[332]);
initDVM1(s[333]);
initDVY41(s[334]);
initCMLSTAT1(s[335]);
initLASTMSTATCH2(s[336]);
initMSTATCH2(s[337]);
initSTATCM2(s[338]);
initSTATCY42(s[339]);
initDIVCHK2(s[340]);
initDIVFIN2(s[341]);
initDVM2(s[342]);
initDVY42(s[343]);
initCMLSTAT2(s[344]);
initLASTMSTATCH3(s[345]);
initMSTATCH3(s[346]);
initSTATCM3(s[347]);
initSTATCY43(s[348]);
initDIVCHK3(s[349]);
initDIVFIN3(s[350]);
initDVM3(s[351]);
initDVY43(s[352]);
initCMLSTAT3(s[353]);
initCOHAB(s[354]);
initCOHABN(s[355]);
initLMCBM1(s[356]);
initLMCBY41(s[357]);
initCURRPART1(s[358]);
initLMSPM1(s[359]);
initLMSPY41(s[360]);
initLMCBM2(s[361]);
initLMCBY42(s[362]);
initCURRPART2(s[363]);
initLMSPM2(s[364]);
initLMSPY42(s[365]);
initLMCBM3(s[366]);
initLMCBY43(s[367]);
initCURRPART3(s[368]);
initLMSPM3(s[369]);
initLMSPY43(s[370]);
initLMCBM4(s[371]);
initLMCBY44(s[372]);
initCURRPART4(s[373]);
initLMSPM4(s[374]);
initLMSPY44(s[375]);
initFATHER(s[376]);
initNCHILD(s[377]);
initPREG(s[378]);
initPREGM1(s[379]);
initPREGY41(s[380]);
initPREGFERT1(s[381]);
initINVITRO1(s[382]);
initPREGOUT1(s[383]);
initPREGEND1(s[384]);
initENDMNTH1(s[385]);
initPREGSMOKE1(s[386]);
initSMKMNTH11(s[387]);
initSMKMNTH21(s[388]);
initSMKMNTH31(s[389]);
initPREGSMK11(s[390]);
initPREGSMK21(s[391]);
initPREGSMK31(s[392]);
initPREGDRINK1(s[393]);
initLCHMULTI1(s[394]);
initPREGM2(s[395]);
initPREGY42(s[396]);
initPREGFERT2(s[397]);
initINVITRO2(s[398]);
initPREGOUT2(s[399]);
initPREGEND2(s[400]);
initENDMNTH2(s[401]);
initPREGSMOKE2(s[402]);
initSMKMNTH12(s[403]);
initSMKMNTH22(s[404]);
initSMKMNTH32(s[405]);
initPREGSMK12(s[406]);
initPREGSMK22(s[407]);
initPREGSMK32(s[408]);
initPREGDRINK2(s[409]);
initLCHMULTI2(s[410]);
initPREGM3(s[411]);
initPREGY43(s[412]);
initPREGFERT3(s[413]);
initINVITRO3(s[414]);
initPREGOUT3(s[415]);
initPREGEND3(s[416]);
initENDMNTH3(s[417]);
initPREGSMOKE3(s[418]);
initSMKMNTH13(s[419]);
initSMKMNTH23(s[420]);
initSMKMNTH33(s[421]);
initPREGSMK13(s[422]);
initPREGSMK23(s[423]);
initPREGSMK33(s[424]);
initPREGDRINK3(s[425]);
initLCHMULTI3(s[426]);
initPREGM4(s[427]);
initPREGY44(s[428]);
initPREGFERT4(s[429]);
initINVITRO4(s[430]);
initPREGOUT4(s[431]);
initPREGEND4(s[432]);
initENDMNTH4(s[433]);
initPREGSMOKE4(s[434]);
initSMKMNTH14(s[435]);
initSMKMNTH24(s[436]);
initSMKMNTH34(s[437]);
initPREGSMK14(s[438]);
initPREGSMK24(s[439]);
initPREGSMK34(s[440]);
initPREGDRINK4(s[441]);
initLCHMULTI4(s[442]);
initPREGM5(s[443]);
initPREGY45(s[444]);
initPREGFERT5(s[445]);
initINVITRO5(s[446]);
initPREGOUT5(s[447]);
initPREGEND5(s[448]);
initENDMNTH5(s[449]);
initPREGSMOKE5(s[450]);
initSMKMNTH15(s[451]);
initSMKMNTH25(s[452]);
initSMKMNTH35(s[453]);
initPREGSMK15(s[454]);
initPREGSMK25(s[455]);
initPREGSMK35(s[456]);
initPREGDRINK5(s[457]);
initLCHMULTI5(s[458]);
initNNEWBORN(s[459]);
initHCONDNO1(s[460]);
initHCONDNS1(s[461]);
initHCONDNO2(s[462]);
initHCONDNS2(s[463]);
initHCONDNO3(s[464]);
initHCONDNS3(s[465]);
initHCONDNO4(s[466]);
initHCONDNS4(s[467]);
initHCONDNO5(s[468]);
initHCONDNS5(s[469]);
initHCONDNO6(s[470]);
initHCONDNS6(s[471]);
initHCONDNO7(s[472]);
initHCONDNS7(s[473]);
initHCONDNO8(s[474]);
initHCONDNS8(s[475]);
initHCONDN1(s[476]);
initHCONDN2(s[477]);
initHCONDN3(s[478]);
initHCONDN4(s[479]);
initHCONDN5(s[480]);
initHCONDN6(s[481]);
initHCONDN7(s[482]);
initHCONDN8(s[483]);
initHCONDN9(s[484]);
initHCONDN10(s[485]);
initHCONDN11(s[486]);
initHCONDN12(s[487]);
initHCONDN13(s[488]);
initHCONDN14(s[489]);
initHCONDN15(s[490]);
initHCONDN16(s[491]);
initHCONDN17(s[492]);
initHCONDN96(s[493]);
initCONTFT(s[494]);
initFTENDM(s[495]);
initFTENDY4(s[496]);
initFTEDANY(s[497]);
initFTQUALS(s[498]);
initFTEDSTARTM1(s[499]);
initFTEDSTARTY41(s[500]);
initFTEDEND1(s[501]);
initFT2ENDM1(s[502]);
initFT2ENDY41(s[503]);
initFTEDMOR1(s[504]);
initFTEDSTARTM2(s[505]);
initFTEDSTARTY42(s[506]);
initFTEDEND2(s[507]);
initFT2ENDM2(s[508]);
initFT2ENDY42(s[509]);
initFTEDMOR2(s[510]);
initQUALNEW1(s[511]);
initQUALNEW2(s[512]);
initQUALNEW3(s[513]);
initQUALNEW4(s[514]);
initQUALNEW5(s[515]);
initQUALNEW6(s[516]);
initQUALNEW7(s[517]);
initQUALNEW8(s[518]);
initQUALNEW9(s[519]);
initQUALNEW10(s[520]);
initQUALNEW11(s[521]);
initQUALNEW13(s[522]);
initQUALNEW15(s[523]);
initQUALNEW16(s[524]);
initQUALNEW17(s[525]);
initQUALNEW18(s[526]);
initQUALNEW19(s[527]);
initQUALNEW20(s[528]);
initQUALNEW21(s[529]);
initQUALNEW22(s[530]);
initQUALNEW23(s[531]);
initQUALNEW24(s[532]);
initQUALNEW25(s[533]);
initQUALNEW26(s[534]);
initQUALNEW27(s[535]);
initQUALNEW28(s[536]);
initQUALNEW29(s[537]);
initQUALNEW30(s[538]);
initQUALNEW31(s[539]);
initTRAINANY(s[540]);
initTRWHO1(s[541]);
initTRAINDAYS1(s[542]);
initTRAINHRS1(s[543]);
initTRAINEND1(s[544]);
initTRAINPURP11(s[545]);
initTRAINPURP21(s[546]);
initTRAINPURP31(s[547]);
initTRAINPURP41(s[548]);
initTRAINPURP51(s[549]);
initTRAINPURP61(s[550]);
initTRAINPURP71(s[551]);
initTRAINQUAL1(s[552]);
initTRWHO2(s[553]);
initTRAINDAYS2(s[554]);
initTRAINHRS2(s[555]);
initTRAINEND2(s[556]);
initTRAINPURP12(s[557]);
initTRAINPURP22(s[558]);
initTRAINPURP32(s[559]);
initTRAINPURP42(s[560]);
initTRAINPURP52(s[561]);
initTRAINPURP62(s[562]);
initTRAINPURP72(s[563]);
initTRAINQUAL2(s[564]);
initTRWHO3(s[565]);
initTRAINDAYS3(s[566]);
initTRAINHRS3(s[567]);
initTRAINEND3(s[568]);
initTRAINPURP13(s[569]);
initTRAINPURP23(s[570]);
initTRAINPURP33(s[571]);
initTRAINPURP43(s[572]);
initTRAINPURP53(s[573]);
initTRAINPURP63(s[574]);
initTRAINPURP73(s[575]);
initTRAINQUAL3(s[576]);
initTRAINN(s[577]);
initTRQUAL1(s[578]);
initTRQUAL2(s[579]);
initTRQUAL3(s[580]);
initTRQUAL4(s[581]);
initTRQUAL5(s[582]);
initTRQUAL6(s[583]);
initTRQUAL7(s[584]);
initTRQUAL8(s[585]);
initTRQUAL9(s[586]);
initTRQUAL10(s[587]);
initTRQUAL11(s[588]);
initTRQUAL13(s[589]);
initTRQUAL15(s[590]);
initTRQUAL16(s[591]);
initTRQUAL17(s[592]);
initTRQUAL18(s[593]);
initTRQUAL19(s[594]);
initTRQUAL20(s[595]);
initTRQUAL21(s[596]);
initTRQUAL22(s[597]);
initTRQUAL23(s[598]);
initTRQUAL24(s[599]);
initTRQUAL25(s[600]);
initTRQUAL26(s[601]);
initTRQUAL27(s[602]);
initTRQUAL28(s[603]);
initTRQUAL29(s[604]);
initTRQUAL30(s[605]);
initTRQUAL31(s[606]);
initNOTEMPCHK(s[607]);
initEMPCHK(s[608]);
initEMPSTENDD(s[609]);
initEMPSTENDM(s[610]);
initEMPSTENDY4(s[611]);
initSTENDREAS(s[612]);
initNXTST(s[613]);
initNXTSTELSE(s[614]);
initCSTAT(s[615]);
initNXTSTENDD(s[616]);
initNXTSTENDM(s[617]);
initNXTSTENDY4(s[618]);
initJBSAMR(s[619]);
initWKPLSAM(s[620]);
initSAMEJOB(s[621]);
initMATLV(s[622]);
initMATLVSTD(s[623]);
initMATLVSTM(s[624]);
initMATLVSTY4(s[625]);
initMATLVENDD(s[626]);
initMATLVENDM(s[627]);
initMATLVENDY4(s[628]);
initJBENDD(s[629]);
initJBENDM(s[630]);
initJBENDY4(s[631]);
initJBENDREAS(s[632]);
initCJOB(s[633]);
initNXTJBHRS(s[634]);
initNXTJBES(s[635]);
initNXTJBENDD(s[636]);
initNXTJBENDM(s[637]);
initNXTJBENDY4(s[638]);
initCJBATT(s[639]);
initNEXT(s[640]);
initNEXTSTAT1(s[641]);
initNEXTELSE1(s[642]);
initCURRSTAT1(s[643]);
initNEXTJOB1(s[644]);
initCURRJOB1(s[645]);
initJOBHOURS1(s[646]);
initREASEND1(s[647]);
initJBATT1(s[648]);
initSTATENDD1(s[649]);
initSTATENDM1(s[650]);
initSTATENDY41(s[651]);
initNEXTSTAT2(s[652]);
initNEXTELSE2(s[653]);
initCURRSTAT2(s[654]);
initNEXTJOB2(s[655]);
initCURRJOB2(s[656]);
initJOBHOURS2(s[657]);
initREASEND2(s[658]);
initJBATT2(s[659]);
initSTATENDD2(s[660]);
initSTATENDM2(s[661]);
initSTATENDY42(s[662]);
initNEXTSTAT3(s[663]);
initNEXTELSE3(s[664]);
initCURRSTAT3(s[665]);
initNEXTJOB3(s[666]);
initCURRJOB3(s[667]);
initJOBHOURS3(s[668]);
initREASEND3(s[669]);
initJBATT3(s[670]);
initSTATENDD3(s[671]);
initSTATENDM3(s[672]);
initSTATENDY43(s[673]);
initNEXTSTAT4(s[674]);
initNEXTELSE4(s[675]);
initCURRSTAT4(s[676]);
initNEXTJOB4(s[677]);
initCURRJOB4(s[678]);
initJOBHOURS4(s[679]);
initREASEND4(s[680]);
initJBATT4(s[681]);
initSTATENDD4(s[682]);
initSTATENDM4(s[683]);
initSTATENDY44(s[684]);
initNEXTSTAT5(s[685]);
initNEXTELSE5(s[686]);
initCURRSTAT5(s[687]);
initNEXTJOB5(s[688]);
initCURRJOB5(s[689]);
initJOBHOURS5(s[690]);
initREASEND5(s[691]);
initJBATT5(s[692]);
initSTATENDD5(s[693]);
initSTATENDM5(s[694]);
initSTATENDY45(s[695]);
initNEXTSTAT6(s[696]);
initNEXTELSE6(s[697]);
initCURRSTAT6(s[698]);
initNEXTJOB6(s[699]);
initCURRJOB6(s[700]);
initJOBHOURS6(s[701]);
initREASEND6(s[702]);
initJBATT6(s[703]);
initSTATENDD6(s[704]);
initSTATENDM6(s[705]);
initSTATENDY46(s[706]);
initNEXTSTAT7(s[707]);
initNEXTELSE7(s[708]);
initCURRSTAT7(s[709]);
initNEXTJOB7(s[710]);
initCURRJOB7(s[711]);
initJOBHOURS7(s[712]);
initREASEND7(s[713]);
initJBATT7(s[714]);
initSTATENDD7(s[715]);
initSTATENDM7(s[716]);
initSTATENDY47(s[717]);
initNEXTSTAT8(s[718]);
initNEXTELSE8(s[719]);
initCURRSTAT8(s[720]);
initNEXTJOB8(s[721]);
initCURRJOB8(s[722]);
initJOBHOURS8(s[723]);
initREASEND8(s[724]);
initJBATT8(s[725]);
initSTATENDD8(s[726]);
initSTATENDM8(s[727]);
initSTATENDY48(s[728]);
initNEXTSTAT9(s[729]);
initNEXTELSE9(s[730]);
initCURRSTAT9(s[731]);
initNEXTJOB9(s[732]);
initCURRJOB9(s[733]);
initJOBHOURS9(s[734]);
initREASEND9(s[735]);
initJBATT9(s[736]);
initSTATENDD9(s[737]);
initSTATENDM9(s[738]);
initSTATENDY49(s[739]);
initNEXTSTAT10(s[740]);
initNEXTELSE10(s[741]);
initCURRSTAT10(s[742]);
initNEXTJOB10(s[743]);
initCURRJOB10(s[744]);
initJOBHOURS10(s[745]);
initREASEND10(s[746]);
initJBATT10(s[747]);
initSTATENDD10(s[748]);
initSTATENDM10(s[749]);
initSTATENDY410(s[750]);
initJBHAS(s[751]);
initJBOFF(s[752]);
initJBOFFY(s[753]);
initJBTERM1(s[754]);
initJBTERM2(s[755]);
initJBSIC07CHK(s[756]);
initJBSOC00CHK(s[757]);
initJBSEMPCHK(s[758]);
initJBSEMP(s[759]);
initJBBGD(s[760]);
initJBBGM(s[761]);
initJBBGY(s[762]);
initJBMNGRCHK(s[763]);
initJBMNGR(s[764]);
initJBSIZECHK(s[765]);
initJBSIZE(s[766]);
initJBSECT(s[767]);
initJBSECTPUB(s[768]);
initJBHRS(s[769]);
initJBOT(s[770]);
initJBOTPD(s[771]);
initPAYGWC(s[772]);
initPAYNWC(s[773]);
initPAYUSL(s[774]);
initPAYU(s[775]);
initPAYUWC(s[776]);
initPAYUG(s[777]);
initPAYTYP(s[778]);
initOVTPAY(s[779]);
initEXTNSA(s[780]);
initEXTRATE(s[781]);
initEXTREST(s[782]);
initBASNSA(s[783]);
initBASRATE(s[784]);
initBASREST(s[785]);
initOVTNSA(s[786]);
initOVTRATE(s[787]);
initOVTREST(s[788]);
initJBPL(s[789]);
initJBTTWT(s[790]);
initWORKTRAV(s[791]);
initJSBOSS(s[792]);
initJSSIZE(s[793]);
initJSHRS(s[794]);
initJSTYPEB(s[795]);
initJSACCS(s[796]);
initJSPART(s[797]);
initJSPRBM(s[798]);
initJSPRBY4(s[799]);
initJSPREM(s[800]);
initJSPREY4(s[801]);
initJSPRLS(s[802]);
initJSPRTX(s[803]);
initJSPRNI(s[804]);
initJSPAYU(s[805]);
initJSPAYW(s[806]);
initJSPYTX(s[807]);
initJSPYNI(s[808]);
initJSPL(s[809]);
initJSTTWT(s[810]);
initJSTTWTB(s[811]);
initJSWORKTRAV(s[812]);
initWORKDIS(s[813]);
initTWKDIFF1(s[814]);
initTWKDIFF2(s[815]);
initTWKDIFF3(s[816]);
initTWKDIFF4(s[817]);
initTWKDIFF5(s[818]);
initTWKDIFF6(s[819]);
initTWKDIFF7(s[820]);
initTWKDIFF8(s[821]);
initTWKDIFF97(s[822]);
initTWKDIFFM(s[823]);
initTWKCAR(s[824]);
initTWKCARY1(s[825]);
initTWKCARY2(s[826]);
initTWKCARY3(s[827]);
initTWKCARY4(s[828]);
initTWKCARY5(s[829]);
initTWKCARY6(s[830]);
initTWKCARY7(s[831]);
initTWKCARY8(s[832]);
initTWKCARY9(s[833]);
initTWKCARY10(s[834]);
initTWKCARY11(s[835]);
initTWKCARY12(s[836]);
initTWKCARY13(s[837]);
initTWKCARY14(s[838]);
initTWKCARY97(s[839]);
initTWKCARYM(s[840]);
initALTCAR1(s[841]);
initALTCAR2(s[842]);
initALTCAR3(s[843]);
initALTCAR4(s[844]);
initALTCAR5(s[845]);
initALTCAR6(s[846]);
initALTCAR7(s[847]);
initALTCAR8(s[848]);
initALTCAR9(s[849]);
initALTCAR10(s[850]);
initALTCAR11(s[851]);
initALTCAR12(s[852]);
initALTCAR96(s[853]);
initALTCAR97(s[854]);
initCARCLUB(s[855]);
initCARSHARE(s[856]);
initWKHOME(s[857]);
initLIFTHH(s[858]);
initLIFTXHH(s[859]);
initMOTCYC(s[860]);
initCOMTAXI(s[861]);
initCOMBUS(s[862]);
initCOMTRAIN(s[863]);
initCOMMETRO(s[864]);
initCOMBIKE(s[865]);
initCOMWALK(s[866]);
initCOMOTHER(s[867]);
initJBSAT(s[868]);
initWKPHYS(s[869]);
initJBPERFP(s[870]);
initJBONUS(s[871]);
initJBRISE(s[872]);
initTUJBPL(s[873]);
initTUIN1(s[874]);
initJBPEN(s[875]);
initJBPENM(s[876]);
initJBPENY4(s[877]);
initPENMCN(s[878]);
initPENMPY(s[879]);
initPENMTP(s[880]);
initPENSPB(s[881]);
initWKTIME(s[882]);
initWKENDS(s[883]);
initJBFLEX1(s[884]);
initJBFLEX2(s[885]);
initJBFLEX3(s[886]);
initJBFLEX4(s[887]);
initJBFLEX5(s[888]);
initJBFLEX6(s[889]);
initJBFLEX7(s[890]);
initJBFLEX8(s[891]);
initJBFLEX96(s[892]);
initJBFXUSE1(s[893]);
initJBFXUSE2(s[894]);
initJBFXUSE3(s[895]);
initJBFXUSE4(s[896]);
initJBFXUSE5(s[897]);
initJBFXUSE6(s[898]);
initJBFXUSE7(s[899]);
initJBFXUSE8(s[900]);
initJBFXUSE96(s[901]);
initJBFXINF(s[902]);
initWKAUT1(s[903]);
initWKAUT2(s[904]);
initWKAUT3(s[905]);
initWKAUT4(s[906]);
initWKAUT5(s[907]);
initDEPENTH1(s[908]);
initDEPENTH2(s[909]);
initDEPENTH3(s[910]);
initDEPENTH4(s[911]);
initDEPENTH5(s[912]);
initDEPENTH6(s[913]);
initJBLKCHA(s[914]);
initJBXPCHA(s[915]);
initJBLKCHB(s[916]);
initJBXPCHB(s[917]);
initJBLKCHC(s[918]);
initJBXPCHC(s[919]);
initJBLKCHD(s[920]);
initJBXPCHD(s[921]);
initJBLKCHE(s[922]);
initJBXPCHE(s[923]);
initJBSEC(s[924]);
initJULK4WK(s[925]);
initJULKJB(s[926]);
initJUBGN(s[927]);
initJULK4X1(s[928]);
initJULK4X2(s[929]);
initJULK4X3(s[930]);
initJULK4X4(s[931]);
initJULK4X5(s[932]);
initJULK4X6(s[933]);
initJULK4X96(s[934]);
initJBHAD(s[935]);
initJLENDM(s[936]);
initJLENDY(s[937]);
initJLSEMP(s[938]);
initJLBOSS(s[939]);
initJLMNGR(s[940]);
initJLSIZE(s[941]);
initEPROSH(s[942]);
initJ2HAS(s[943]);
initJ2SEMP(s[944]);
initJ2HRS(s[945]);
initJ2PAY(s[946]);
initRETCHK(s[947]);
initAGERET(s[948]);
initRTPRO1(s[949]);
initRTPRO2(s[950]);
initRTPRO3(s[951]);
initRTPRO4(s[952]);
initRTPRO5(s[953]);
initRTPRO6(s[954]);
initRTCON1(s[955]);
initRTCON2(s[956]);
initRTCON3(s[957]);
initRTCON4(s[958]);
initPENMEX(s[959]);
initPPPEX(s[960]);
initPPPEXM(s[961]);
initSPPEN(s[962]);
initRTEXPJB(s[963]);
initRTFND1(s[964]);
initRTFND2(s[965]);
initRTFND3(s[966]);
initRTFND4(s[967]);
initRTFND5(s[968]);
initRTFND6(s[969]);
initRTFND7(s[970]);
initRTFND8(s[971]);
initRTFND9(s[972]);
initRTFND10(s[973]);
initRTFND96(s[974]);
initRETAMT(s[975]);
initRETSUF(s[976]);
initVOLUN(s[977]);
initVOLFREQ(s[978]);
initVOLHRS(s[979]);
initCHARGV(s[980]);
initCHARFREQ(s[981]);
initCHARAM(s[982]);
initCCARE(s[983]);
initCCWORK(s[984]);
initBTYPE1(s[985]);
initBTYPE2(s[986]);
initBTYPE3(s[987]);
initBTYPE4(s[988]);
initBTYPE5(s[989]);
initBTYPE6(s[990]);
initBTYPE7(s[991]);
initBTYPE8(s[992]);
initBTYPE9(s[993]);
initBTYPE96(s[994]);
initBENUNEMP1(s[995]);
initBENUNEMP2(s[996]);
initBENUNEMP96(s[997]);
initBENDIS1(s[998]);
initBENDIS2(s[999]);
initBENDIS3(s[1000]);
initBENDIS4(s[1001]);
initBENDIS5(s[1002]);
initBENDIS6(s[1003]);
initBENDIS7(s[1004]);
initBENDIS8(s[1005]);
initBENDIS9(s[1006]);
initBENDIS10(s[1007]);
initBENDIS11(s[1008]);
initBENDIS96(s[1009]);
initBENPEN1(s[1010]);
initBENPEN2(s[1011]);
initBENPEN3(s[1012]);
initBENPEN4(s[1013]);
initBENPEN5(s[1014]);
initBENPEN6(s[1015]);
initBENPEN7(s[1016]);
initBENPEN8(s[1017]);
initBENPEN96(s[1018]);
initNISERPS(s[1019]);
initBENCB(s[1020]);
initBENCTC(s[1021]);
initBENFAM1(s[1022]);
initBENFAM2(s[1023]);
initBENFAM3(s[1024]);
initBENFAM4(s[1025]);
initBENFAM5(s[1026]);
initBENFAM96(s[1027]);
initBENTAX1(s[1028]);
initBENTAX2(s[1029]);
initBENTAX3(s[1030]);
initBENTAX4(s[1031]);
initBENTAX5(s[1032]);
initBENTAX96(s[1033]);
initBENHOU1(s[1034]);
initBENHOU2(s[1035]);
initBENHOU3(s[1036]);
initBENHOU4(s[1037]);
initBENHOU96(s[1038]);
initBENSTA1(s[1039]);
initBENSTA2(s[1040]);
initBENSTA3(s[1041]);
initBENSTA4(s[1042]);
initBENSTA5(s[1043]);
initBENSTA6(s[1044]);
initBENSTA7(s[1045]);
initBENSTA8(s[1046]);
initBENSTA96(s[1047]);
initNFH01(s[1048]);
initNFH02(s[1049]);
initNFH03(s[1050]);
initNFH04(s[1051]);
initNFH05(s[1052]);
initNFH06(s[1053]);
initNFH07(s[1054]);
initNFH08(s[1055]);
initNFH09(s[1056]);
initNFH10(s[1057]);
initNFH11(s[1058]);
initNFH12(s[1059]);
initNFH13(s[1060]);
initNFH14(s[1061]);
initNFH15(s[1062]);
initNFH16(s[1063]);
initNFH17(s[1064]);
initNFH18(s[1065]);
initNFH19(s[1066]);
initNFH20(s[1067]);
initNFH21(s[1068]);
initNFH22(s[1069]);
initNFH23(s[1070]);
initNFH24(s[1071]);
initNFH25(s[1072]);
initNFH26(s[1073]);
initNFH27(s[1074]);
initNFH28(s[1075]);
initNFH29(s[1076]);
initNFH30(s[1077]);
initNFH31(s[1078]);
initNFH32(s[1079]);
initNFH33(s[1080]);
initNFH34(s[1081]);
initNFH35(s[1082]);
initNFH36(s[1083]);
initNFH37(s[1084]);
initNFH38(s[1085]);
initFIYRDIA(s[1086]);
initFIYRDB1(s[1087]);
initFIYRDB2(s[1088]);
initFIYRDB3(s[1089]);
initFIYRDB4(s[1090]);
initFIYRDB5(s[1091]);
initFIYRDB6(s[1092]);
initFINNOW(s[1093]);
initFINFUT(s[1094]);
initPPEN(s[1095]);
initPPENT(s[1096]);
initPPYRS(s[1097]);
initPPREG(s[1098]);
initPPRAM(s[1099]);
initPPRAMPC(s[1100]);
initSAVE(s[1101]);
initSAVED(s[1102]);
initSAVREG(s[1103]);
initSAVLT(s[1104]);
initHUBUYS(s[1105]);
initHUFRYS(s[1106]);
initHUMOPS(s[1107]);
initHUIRON(s[1108]);
initHUPOTS(s[1109]);
initHUDIY(s[1110]);
initHUSITS(s[1111]);
initHUBOSS(s[1112]);
initHOWLNG(s[1113]);
initVOTE1(s[1114]);
initVOTE2(s[1115]);
initVOTE3(s[1116]);
initVOTE4(s[1117]);
initVOTE5(s[1118]);
initVOTE6(s[1119]);
initPERPOLINF(s[1120]);
initCOLBENS1(s[1121]);
initCOLBENS2(s[1122]);
initCOLBENS3(s[1123]);
initCIVICDUTY(s[1124]);
initPOLCOST(s[1125]);
initVOTENORM(s[1126]);
initPERBFTS(s[1127]);
initGRPBFTS(s[1128]);
initVOTEINTENT(s[1129]);
initDEMORIENT(s[1130]);
initVOTE7(s[1131]);
initVOTE8(s[1132]);
initARTS1A1(s[1133]);
initARTS1A2(s[1134]);
initARTS1A3(s[1135]);
initARTS1A4(s[1136]);
initARTS1A5(s[1137]);
initARTS1A6(s[1138]);
initARTS1A7(s[1139]);
initARTS1A96(s[1140]);
initARTS1B9(s[1141]);
initARTS1B10(s[1142]);
initARTS1B11(s[1143]);
initARTS1B12(s[1144]);
initARTS1B13(s[1145]);
initARTS1B14(s[1146]);
initARTS1B15(s[1147]);
initARTS1B96(s[1148]);
initARTS1FREQ(s[1149]);
initARTS2A1(s[1150]);
initARTS2A2(s[1151]);
initARTS2A3(s[1152]);
initARTS2A4(s[1153]);
initARTS2A5(s[1154]);
initARTS2A6(s[1155]);
initARTS2A7(s[1156]);
initARTS2A96(s[1157]);
initARTS2B9(s[1158]);
initARTS2B10(s[1159]);
initARTS2B11(s[1160]);
initARTS2B12(s[1161]);
initARTS2B13(s[1162]);
initARTS2B14(s[1163]);
initARTS2B15(s[1164]);
initARTS2B96(s[1165]);
initARTS2FREQ(s[1166]);
initMLA1(s[1167]);
initMLA2(s[1168]);
initMLA3(s[1169]);
initMLA96(s[1170]);
initLIBFREQ(s[1171]);
initARCFREQ(s[1172]);
initMUSFREQ(s[1173]);
initHERITAGE1(s[1174]);
initHERITAGE2(s[1175]);
initHERITAGE3(s[1176]);
initHERITAGE4(s[1177]);
initHERITAGE5(s[1178]);
initHERITAGE6(s[1179]);
initHERITAGE7(s[1180]);
initHERITAGE8(s[1181]);
initHERITAGE96(s[1182]);
initHERFREQ(s[1183]);
initSPORTS11(s[1184]);
initSPORTS12(s[1185]);
initSPORTS13(s[1186]);
initSPORTS14(s[1187]);
initSPORTS15(s[1188]);
initSPORTS16(s[1189]);
initSPORTS17(s[1190]);
initSPORTS18(s[1191]);
initSPORTS19(s[1192]);
initSPORTS110(s[1193]);
initSPORTS111(s[1194]);
initSPORTS112(s[1195]);
initSPORTS113(s[1196]);
initSPORTS114(s[1197]);
initSPORTS196(s[1198]);
initSPORTS216(s[1199]);
initSPORTS217(s[1200]);
initSPORTS218(s[1201]);
initSPORTS219(s[1202]);
initSPORTS220(s[1203]);
initSPORTS221(s[1204]);
initSPORTS222(s[1205]);
initSPORTS223(s[1206]);
initSPORTS224(s[1207]);
initSPORTS225(s[1208]);
initSPORTS226(s[1209]);
initSPORTS227(s[1210]);
initSPORTS228(s[1211]);
initSPORTS229(s[1212]);
initSPORTS230(s[1213]);
initSPORTS231(s[1214]);
initSPORTS296(s[1215]);
initSPORTSFREQ(s[1216]);
initSPORTS31(s[1217]);
initSPORTS32(s[1218]);
initSPORTS33(s[1219]);
initSPORTS34(s[1220]);
initSPORTS35(s[1221]);
initSPORTS36(s[1222]);
initSPORTS37(s[1223]);
initSPORTS38(s[1224]);
initSPORTS39(s[1225]);
initSPORTS396(s[1226]);
initSPORTS3FREQ(s[1227]);
initCLUB(s[1228]);
initSPORTACT(s[1229]);
initACCESS(s[1230]);
initACC1TO161(s[1231]);
initACC1TO162(s[1232]);
initACC1TO163(s[1233]);
initACC1TO164(s[1234]);
initACC1TO165(s[1235]);
initACC1TO166(s[1236]);
initACC1TO167(s[1237]);
initACC1TO168(s[1238]);
initACC1TO169(s[1239]);
initACC1TO1610(s[1240]);
initACC1TO1611(s[1241]);
initACC1TO1612(s[1242]);
initACC1TO1613(s[1243]);
initACC1TO1614(s[1244]);
initACC1TO1697(s[1245]);
initADVVOUCHER(s[1246]);
initVOUCHER(s[1247]);
initCHKCOA(s[1248]);
initGIVECOA(s[1249]);
initLENINDINTV(s[1250]);
initINDMODE(s[1251]);
initEVENT1(s[1252]);
initEVENT1S(s[1253]);
initEVENT2(s[1254]);
initEVENT2S(s[1255]);
initEVENT3(s[1256]);
initEVENT3S(s[1257]);
initEVENT4(s[1258]);
initEVENT4S(s[1259]);
initRHLAND_CODE(s[1260]);
initRPHMOCODE(s[1261]);
initRPHWRK_CODE(s[1262]);
initREMAIL_CODE(s[1263]);
initCTADD1_CODE(s[1264]);
initCTADD2_CODE(s[1265]);
initCTTOWN_CODE(s[1266]);
initCTCNTY_CODE(s[1267]);
initCTPCODE_CODE(s[1268]);
initCTTEL1_CODE(s[1269]);
initCTTEL2_CODE(s[1270]);
initCTEMAIL_CODE(s[1271]);
initMARSTAT(s[1272]);
initLIVESP(s[1273]);
initLIVEWITH(s[1274]);
initEMPLOY(s[1275]);
initLINGUA(s[1276]);
initPREL(s[1277]);
initPREASON(s[1278]);
initPRIPN(s[1279]);
initPJULK4WK(s[1280]);
initPJBPTFT(s[1281]);
initPJSPTFT(s[1282]);
initPREARN(s[1283]);
initPREARNW(s[1284]);
initPREARNA(s[1285]);
initPBNFT1(s[1286]);
initPBNFT2(s[1287]);
initPBNFT3(s[1288]);
initPBNFT4(s[1289]);
initPBNFT5(s[1290]);
initPBNFT6(s[1291]);
initPBNFT7(s[1292]);
initPBNFT8(s[1293]);
initPBNFT9(s[1294]);
initPBNFT10(s[1295]);
initPBNFT11(s[1296]);
initPBNFT12(s[1297]);
initPBNFT96(s[1298]);
initPRFITB(s[1299]);
initPRFITBW(s[1300]);
initPRFITBA(s[1301]);
initIVINTLANG(s[1302]);
initIVWHOINT(s[1303]);
initIVCOOP(s[1304]);
initSUSP(s[1305]);
initUNDQUS(s[1306]);
initIVPRSNT(s[1307]);
initIVINFNCE(s[1308]);
initIVAFFCT11(s[1309]);
initIVAFFCT12(s[1310]);
initIVAFFCT13(s[1311]);
initIVAFFCT14(s[1312]);
initIVAFFCT15(s[1313]);
initIVAFFCT17(s[1314]);
initIVAFFCT21(s[1315]);
initIVAFFCT22(s[1316]);
initIVAFFCT23(s[1317]);
initIVAFFCT27(s[1318]);
initIVAFFCT30(s[1319]);
initIVAFFCT97(s[1320]);
initIVTRANS(s[1321]);
initHGBIOM(s[1322]);
initHGBIOF(s[1323]);
initRESPM16(s[1324]);
initRESPF16(s[1325]);
initHGADOPTM(s[1326]);
initHGADOPTF(s[1327]);
initADRESP17(s[1328]);
initHGPART(s[1329]);
initORIGADD(s[1330]);
initSCDOBY4(s[1331]);
initSCSEX(s[1332]);
initSCSF1(s[1333]);
initSCSF2A(s[1334]);
initSCSF2B(s[1335]);
initSCSF3A(s[1336]);
initSCSF3B(s[1337]);
initSCSF4A(s[1338]);
initSCSF4B(s[1339]);
initSCSF5(s[1340]);
initSCSF6A(s[1341]);
initSCSF6B(s[1342]);
initSCSF6C(s[1343]);
initSCSF7(s[1344]);
initSCGHQA(s[1345]);
initSCGHQB(s[1346]);
initSCGHQC(s[1347]);
initSCGHQD(s[1348]);
initSCGHQE(s[1349]);
initSCGHQF(s[1350]);
initSCGHQG(s[1351]);
initSCGHQH(s[1352]);
initSCGHQI(s[1353]);
initSCGHQJ(s[1354]);
initSCGHQK(s[1355]);
initSCGHQL(s[1356]);
initSCWHORUPRO(s[1357]);
initSCWHORUEDU(s[1358]);
initSCWHORURAC(s[1359]);
initSCWHORUPOL(s[1360]);
initSCWHORUFAM(s[1361]);
initSCWHORUSEX(s[1362]);
initSCWHORUAGE(s[1363]);
initSCAGE1DRINK(s[1364]);
initSCEVERDRNK(s[1365]);
initSCFALCDRNK(s[1366]);
initSCALCL7D(s[1367]);
initSCNALCL7D(s[1368]);
initSCNALCPINT(s[1369]);
initSCNALCSHOT(s[1370]);
initSCNALCWINE(s[1371]);
initSCNALCPOPS(s[1372]);
initSCLFSAT1(s[1373]);
initSCLFSAT2(s[1374]);
initSCLFSAT7(s[1375]);
initSCLFSATO(s[1376]);
initSCHMCONT(s[1377]);
initSCLOUTCONT(s[1378]);
initSCDEM2MANY(s[1379]);
initSCTIMEMNUF(s[1380]);
initSCWKVFAST(s[1381]);
initSCMOLWP(s[1382]);
initSCPUNDSTND(s[1383]);
initSCPRELY(s[1384]);
initSCPOPENUP(s[1385]);
initSCPCRITIC(s[1386]);
initSCPLETDWN(s[1387]);
initSCPANNOY(s[1388]);
initSCRELANY(s[1389]);
initSCRUNDSTND(s[1390]);
initSCRRELY(s[1391]);
initSCROPENUP(s[1392]);
initSCRCRITIC(s[1393]);
initSCRLETDWN(s[1394]);
initSCRANNOY(s[1395]);
initSCFRENDANY(s[1396]);
initSCFUNDSTND(s[1397]);
initSCFRELY(s[1398]);
initSCFOPENUP(s[1399]);
initSCFCRITIC(s[1400]);
initSCFLETDWN(s[1401]);
initSCFANNOY(s[1402]);
initSCSSUP1(s[1403]);
initSCSSUPR2R(s[1404]);
initSCOPFAMA(s[1405]);
initSCOPFAMB(s[1406]);
initSCOPFAMD(s[1407]);
initSCOPFAMF(s[1408]);
initSCOPFAMH(s[1409]);
initSCANYELSETXT(s[1410]);
initISTRTDATHH(s[1411]);
initISTRTDATMM(s[1412]);
initISTRTDATSS(s[1413]);
initIENDDATHH(s[1414]);
initIENDDATMM(s[1415]);
initIENDDATSS(s[1416]);
initPPSEX(s[1417]);
initFNPID(s[1418]);
initMNPID(s[1419]);
initPN1PID(s[1420]);
initPN1PNO(s[1421]);
initPN1SEX(s[1422]);
initPN2PID(s[1423]);
initPN2PNO(s[1424]);
initPN2SEX(s[1425]);
initPNS1PID(s[1426]);
initPNS1PNO(s[1427]);
initPNS1SEX(s[1428]);
initPNS2PID(s[1429]);
initPNS2PNO(s[1430]);
initPNS2SEX(s[1431]);
initGRFPID(s[1432]);
initGRMPID(s[1433]);
initJ2PAY_IF(s[1434]);
initFIMNGRS_TC(s[1435]);
initFIMNGRS_DV(s[1436]);
initFIMNLABGRS_TC(s[1437]);
initFIMNLABGRS_DV(s[1438]);
initFIMNLABNET_TC(s[1439]);
initFIMNLABNET_DV(s[1440]);
initFIYRINVINC_TC(s[1441]);
initFIYRINVINC_DV(s[1442]);
initFIBENOTHR_TC(s[1443]);
initFIBENOTHR_DV(s[1444]);
initPAYGL(s[1445]);
initPAYNL(s[1446]);
initJSPRF(s[1447]);
initPAYGU_DV(s[1448]);
initPAYG_DV(s[1449]);
initPAYNU_DV(s[1450]);
initPAYN_DV(s[1451]);
initSEEARNGRS_DV(s[1452]);
initSEEARNNET_DV(s[1453]);
initJ2PAY_DV(s[1454]);
initJ2PAYNET_DV(s[1455]);
initFF_IVLOLW(s[1456]);
initFF_EVERINT(s[1457]);
initFF_JBSTAT(s[1458]);
initFF_EMPLW(s[1459]);
initFF_TEL(s[1460]);
initFF_BENTYPE01(s[1461]);
initFF_BENTYPE02(s[1462]);
initFF_BENTYPE03(s[1463]);
initFF_BENTYPE04(s[1464]);
initFF_BENTYPE05(s[1465]);
initFF_BENTYPE06(s[1466]);
initFF_BENTYPE07(s[1467]);
initFF_BENTYPE08(s[1468]);
initFF_BENTYPE09(s[1469]);
initFF_BENTYPE10(s[1470]);
initFF_BENTYPE11(s[1471]);
initFF_BENTYPE12(s[1472]);
initFF_BENTYPE13(s[1473]);
initFF_BENTYPE14(s[1474]);
initFF_BENTYPE15(s[1475]);
initFF_BENTYPE16(s[1476]);
initFF_BENTYPE17(s[1477]);
initFF_BENTYPE18(s[1478]);
initFF_BENTYPE19(s[1479]);
initFF_BENTYPE20(s[1480]);
initFF_BENTYPE21(s[1481]);
initFF_BENTYPE22(s[1482]);
initFF_BENTYPE23(s[1483]);
initFF_BENTYPE24(s[1484]);
initFF_BENTYPE25(s[1485]);
initFF_BENTYPE26(s[1486]);
initFF_BENTYPE27(s[1487]);
initFF_BENTYPE28(s[1488]);
initFF_BENTYPE29(s[1489]);
initFF_BENTYPE30(s[1490]);
initFF_BENTYPE31(s[1491]);
initFF_BENTYPE32(s[1492]);
initFF_BENTYPE33(s[1493]);
initFF_BENTYPE34(s[1494]);
initFF_BENTYPE35(s[1495]);
initFF_BENTYPE36(s[1496]);
initFF_BENTYPE37(s[1497]);
initFF_BENTYPE38(s[1498]);
initFF_JBSEMP(s[1499]);
initFF_JBMNGR(s[1500]);
initFF_JBSIZE(s[1501]);
initFF_OPRLG(s[1502]);
initFF_OPRLG0(s[1503]);
initFF_OPRLG0NI(s[1504]);
initFF_UKBORN(s[1505]);
initFF_YR2UK4(s[1506]);
initSEX_DV(s[1507]);
initAGE_DV(s[1508]);
initETHN_DV(s[1509]);
initINTDATD_DV(s[1510]);
initINTDATM_DV(s[1511]);
initINTDATY_DV(s[1512]);
initDOBY_DV(s[1513]);
initPENSIONER_DV(s[1514]);
initNPN_DV(s[1515]);
initNPNS_DV(s[1516]);
initNGRP_DV(s[1517]);
initNNSIDV(s[1518]);
initNNSSIDV(s[1519]);
initNPENSIONER_DV(s[1520]);
initJBSOCGR_DV(s[1521]);
initFIMNMISC_DV(s[1522]);
initFIMNPRBEN_DV(s[1523]);
initFIMNINVNET_DV(s[1524]);
initFIMNPEN_DV(s[1525]);
initFIMNSBEN_DV(s[1526]);
initFIMNNET_DV(s[1527]);
initCOUNTRY(s[1528]);
initGOR_DV(s[1529]);
initURBAN_DV(s[1530]);
initHHRESP_DV(s[1531]);
initXTRA5MIN_DV(s[1532]);
initXTRA5MINOSM_DV(s[1533]);
initAGEGR5_DV(s[1534]);
initAGEGR10_DV(s[1535]);
initAGEGR13_DV(s[1536]);
initLIVESP_DV(s[1537]);
initCOHADV(s[1538]);
initSINGLE_DV(s[1539]);
initMASTAT_DV(s[1540]);
initHHTYPE_DV(s[1541]);
initBUNO_DV(s[1542]);
initDEPCHL_DV(s[1543]);
initNCHILD_DV(s[1544]);
initNDEPCHL_DV(s[1545]);
initRESPM16_DV(s[1546]);
initRESPF16_DV(s[1547]);
initRACH16_DV(s[1548]);
initHRPID(s[1549]);
initHRPNO(s[1550]);
initPPID(s[1551]);
initPPNO(s[1552]);
initSPPID(s[1553]);
initSPPNO(s[1554]);
initFNPNO(s[1555]);
initFNSPID(s[1556]);
initFNSPNO(s[1557]);
initMNPNO(s[1558]);
initMNSPID(s[1559]);
initMNSPNO(s[1560]);
initGRFPNO(s[1561]);
initGRMPNO(s[1562]);
initQFHIGH_DV(s[1563]);
initNQFHIGH_DV(s[1564]);
initQFHIGHFL_DV(s[1565]);
initHIQUAL_DV(s[1566]);
initNHIQUAL_DV(s[1567]);
initNNMPSP_DV(s[1568]);
initNMPSP_DV(s[1569]);
initNUNMPSP_DV(s[1570]);
initJBFT_DV(s[1571]);
initJBSOC00_CC(s[1572]);
initJBSIC07_CC(s[1573]);
initJBIINDDV(s[1574]);
initJBES2000(s[1575]);
initJBSEG_DV(s[1576]);
initJBRGSC_DV(s[1577]);
initJBNSSEC_DV(s[1578]);
initJBNSSEC8_DV(s[1579]);
initJBNSSEC5_DV(s[1580]);
initJBNSSEC3_DV(s[1581]);
initJBISCO88_CC(s[1582]);
initJLSOC00_CC(s[1583]);
initJLSIC07_CC(s[1584]);
initJLIINDDV(s[1585]);
initJLES2000(s[1586]);
initJLSEG_DV(s[1587]);
initJLRGSC_DV(s[1588]);
initJLNSSEC_DV(s[1589]);
initJLNSSEC8_DV(s[1590]);
initJLNSSEC5_DV(s[1591]);
initJLNSSEC3_DV(s[1592]);
initJLISCO88_CC(s[1593]);
initPASOC90_CC(s[1594]);
initPASOC00_CC(s[1595]);
initPASOC10_CC(s[1596]);
initPANSSEC5_DV(s[1597]);
initMASOC90_CC(s[1598]);
initMASOC00_CC(s[1599]);
initMASOC10_CC(s[1600]);
initMANSSEC5_DV(s[1601]);
initJ1SOC90_CC(s[1602]);
initJ1SOC00_CC(s[1603]);
initJ1SOC10_CC(s[1604]);
initJ1NSSEC5_DV(s[1605]);
initJ2SOC90_CC(s[1606]);
initJ2SOC00_CC(s[1607]);
initJ2SOC10_CC(s[1608]);
initJ2NSSEC5_DV(s[1609]);
initSCGHQ1_DV(s[1610]);
initSCGHQ2_DV(s[1611]);
initSF12PCS_DV(s[1612]);
initSF12MCS_DV(s[1613]);
initJWBS1_DV(s[1614]);
initJWBS2_DV(s[1615]);
initSCFLAG_DV(s[1616]);
initPAYU_DV(s[1617]);
initPAYGU_IF(s[1618]);
initPAYNU_IF(s[1619]);
initSEEARNGRS_IF(s[1620]);
initFIYRINVINC_IF(s[1621]);
initFIBENOTHR_IF(s[1622]);
initFIMNLABGRS_IF(s[1623]);
initFIMNGRS_IF(s[1624]);
initINDPXUS_XW(s[1625]);
initINDINUS_XW(s[1626]);
initINDSCUS_XW(s[1627]);
initINDPXBH_XW(s[1628]);
initINDINBH_XW(s[1629]);
initINDSCBH_XW(s[1630]);
initINDIN91_LW(s[1631]);
initINDIN01_LW(s[1632]);
initINDPXUS_LW(s[1633]);
initINDINUS_LW(s[1634]);
initINDSCUS_LW(s[1635]);
initIND5MUS_LW(s[1636]);
initINDPXUXW(s[1637]);
initINDINUXW(s[1638]);
initINDSCUXW(s[1639]);
initRACEL_DV(s[1640]);
}
}
