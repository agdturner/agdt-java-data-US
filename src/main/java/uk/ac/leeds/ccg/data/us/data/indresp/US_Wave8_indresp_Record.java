/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.data.us.data.indresp;
public class US_Wave8_indresp_Record extends US_indresp_Record {
protected byte ADLA;
protected byte ADLAD;
protected byte ADLB;
protected byte ADLBD;
protected byte ADLC;
protected byte ADLCD;
protected byte ADLD;
protected byte ADLDD;
protected byte ADLE;
protected byte ADLED;
protected byte ADLF;
protected byte ADLFD;
protected short AGE12;
protected short AGE_DV;
protected short AIDHRS_BH;
protected short AIDHU1;
protected short AIDHU2;
protected short AIDHUA;
protected short AIDHUB;
protected short AIDHUC;
protected short BIRTHY;
protected short BUNO;
protected short BUTYPE;
protected short CASMIN;
protected byte CBAGE;
protected short CH1BY4;
protected short CJSBGD;
protected short CJSBGM;
protected short CJSBGY4;
protected short CJSBLY;
protected int CJSTEN;
protected double CJSWK9;
protected byte COH1BM;
protected short COH1BY;
protected byte COH1EM;
protected short COH1EY;
protected byte COH1MR;
protected byte COHAD1;
protected byte COHAD2;
protected byte COHADV;
protected byte COHDIS;
protected byte COHDS1;
protected byte COHDS2;
protected byte COHLBM1;
protected byte COHLBM2;
protected byte COHLBM3;
protected short COHLBY1;
protected short COHLBY2;
protected byte COHLBY3;
protected byte COHLEM1;
protected byte COHLEM2;
protected byte COHLEM3;
protected short COHLEY1;
protected short COHLEY2;
protected byte COHLEY3;
protected byte COHLYR;
protected byte COHXPM1;
protected byte COHXPM2;
protected double DISTMOV;
protected short DOBY;
protected short EAAGE;
protected byte EDBGM1;
protected byte EDBGM2;
protected short EDBGY1;
protected short EDBGY2;
protected byte EDBLYR1;
protected byte EDBLYR2;
protected byte EDENM1;
protected byte EDENM2;
protected byte EDENNE1;
protected byte EDENNE2;
protected short EDENY1;
protected short EDENY2;
protected byte EDFEEA1;
protected byte EDFEEA2;
protected byte EDFEEB1;
protected byte EDFEEB2;
protected byte EDFEEC1;
protected byte EDFEEC2;
protected byte EDFEED1;
protected byte EDFEED2;
protected byte EDFEEE1;
protected byte EDFEEE2;
protected byte EDFEEF1;
protected byte EDFEEF2;
protected byte EDFEEG1;
protected byte EDFEEG2;
protected short EDLYR;
protected byte EDMORE1;
protected byte EDMORE2;
protected byte EDOQL1;
protected byte EDOQL2;
protected byte EDOQLN1;
protected byte EDOQLN2;
protected byte EDQLA1;
protected byte EDQLA2;
protected byte EDQLAN1;
protected byte EDQLAN2;
protected byte EDQLB1;
protected byte EDQLB2;
protected byte EDQLBN1;
protected byte EDQLBN2;
protected byte EDQLC1;
protected byte EDQLC2;
protected byte EDQLCN1;
protected byte EDQLCN2;
protected byte EDQLD1;
protected byte EDQLD2;
protected byte EDQLDN1;
protected byte EDQLDN2;
protected byte EDQLE1;
protected byte EDQLE2;
protected byte EDQLEN1;
protected byte EDQLEN2;
protected byte EDQLF1;
protected byte EDQLF2;
protected byte EDQLFN1;
protected byte EDQLFN2;
protected byte EDQLG1;
protected byte EDQLG2;
protected byte EDQLGN1;
protected byte EDQLGN2;
protected byte EDQLH1;
protected byte EDQLH2;
protected byte EDQLHN1;
protected byte EDQLHN2;
protected byte EDQLI1;
protected byte EDQLI2;
protected byte EDQLIN1;
protected byte EDQLIN2;
protected byte EDQLJ1;
protected byte EDQLJ2;
protected byte EDQLJN1;
protected byte EDQLJN2;
protected byte EDQNN1;
protected byte EDQNN2;
protected byte EDQUAL1;
protected byte EDQUAL2;
protected byte EDTYPE1;
protected byte EDTYPE2;
protected short EPROSH;
protected short F101;
protected short F102;
protected short F103;
protected short F104;
protected short F105;
protected byte F106;
protected byte F116;
protected short F118;
protected short F119;
protected short F121;
protected short F122;
protected byte F124;
protected short F125;
protected byte F126;
protected byte F127;
protected byte F128;
protected short F132;
protected short F135;
protected short F136;
protected short F137;
protected short F138;
protected short F139;
protected short F140;
protected short F141;
protected short F142;
protected short F151;
protected byte F152;
protected short F153;
protected short F154;
protected short F155;
protected short F156;
protected short F157;
protected byte F158;
protected byte F159;
protected short FENOW_BH;
protected short FETYPE;
protected double FIHHMN;
protected short FIHHMNI;
protected double FIMNB;
protected boolean FIMNBI;
protected double FIMNI;
protected boolean FIMNII;
protected boolean FIMNLI;
protected double FIMNNL;
protected boolean FIMNNLI;
protected double FIMNP;
protected boolean FIMNPI;
protected byte FIMNSEL;
protected double FIMNT;
protected boolean FIMNTHI;
protected boolean FIMNTI;
protected short FISITC;
protected short FISITX;
protected short FISITY;
protected boolean FIYEARI;
protected double FIYR;
protected double FIYRB;
protected boolean FIYRBI;
protected short FIYRDI;
protected short FIYRDII;
protected byte FIYRDIU;
protected double FIYRI;
protected boolean FIYRII;
protected double FIYRL;
protected boolean FIYRLI;
protected double FIYRNL;
protected boolean FIYRNLI;
protected double FIYRP;
protected boolean FIYRPI;
protected double FIYRT;
protected boolean FIYRTI;
protected int FNPID_BH;
protected byte FRNA;
protected byte FRNB;
protected byte FRNC;
protected short FTEXA;
protected short FTEXA1;
protected short FTEXA2;
protected short FTEXA3;
protected short FTEXA4;
protected short FTEXA5;
protected short FTEXA6;
protected short FTEXAV;
protected double FTEXAW;
protected short FTEXB;
protected short FTEXB1;
protected short FTEXB2;
protected short FTEXB3;
protected short FTEXB4;
protected short FTEXB5;
protected short FTEXB6;
protected short FTEXBV;
protected double FTEXBW;
protected short FTEXC;
protected short FTEXC1;
protected short FTEXC2;
protected short FTEXC3;
protected short FTEXC4;
protected short FTEXC5;
protected short FTEXC6;
protected short FTEXCV;
protected double FTEXCW;
protected short FTEXHH;
protected byte HGEMP;
protected short HGR2R;
protected short HGRA;
protected boolean HGSEX;
protected short HHCH12;
protected short HHMEM;
protected short HHSIZE;
protected short HHTYPE;
protected int HID;
protected short HIQUALB_DV;
protected short HL2GP;
protected byte HL2HOP;
protected short HLCK;
protected short HLCKA;
protected short HLCKAN;
protected short HLCKB;
protected short HLCKBN;
protected short HLCKC;
protected short HLCKCN;
protected short HLCKD;
protected short HLCKDN;
protected short HLCKE;
protected short HLCKEN;
protected short HLCKF;
protected short HLCKFN;
protected short HLCKG;
protected short HLCKGN;
protected short HLCKH;
protected short HLCKHN;
protected short HLCKI;
protected short HLCKIN;
protected short HLCVR;
protected short HLCVRH;
protected short HLCVRL;
protected short HLDSBL;
protected short HLENDW;
protected byte HLIV65;
protected byte HLLT;
protected short HLLTA;
protected short HLLTB;
protected short HLLTC;
protected short HLLTD;
protected short HLLTE;
protected byte HLLTW;
protected short HLLTWA;
protected short HLPRB;
protected short HLPRBA;
protected short HLPRBB;
protected short HLPRBC;
protected short HLPRBD;
protected short HLPRBE;
protected short HLPRBF;
protected short HLPRBG;
protected short HLPRBH;
protected short HLPRBI;
protected short HLPRBJ;
protected short HLPRBK;
protected short HLPRBL;
protected short HLPRBM;
protected short HLSTAT;
protected short HLSV;
protected short HLSVA;
protected short HLSVAF;
protected short HLSVAN;
protected short HLSVB;
protected short HLSVBF;
protected short HLSVBN;
protected short HLSVC;
protected short HLSVCF;
protected short HLSVCN;
protected short HLSVD;
protected short HLSVDF;
protected short HLSVDN;
protected short HLSVE;
protected short HLSVEF;
protected short HLSVEN;
protected short HLSVF;
protected short HLSVFF;
protected short HLSVFN;
protected short HLSVG;
protected short HLSVGF;
protected short HLSVGN;
protected short HLSVH;
protected byte HLSVHF;
protected byte HLSVHN;
protected short HLSVI;
protected short HLSVIF;
protected short HLSVIN;
protected short HLSVJ;
protected short HLSVJF;
protected short HLSVJN;
protected short HLSVK;
protected short HLSVKF;
protected short HLSVKN;
protected short HLSVL;
protected short HLSVLF;
protected short HLSVLN;
protected short HLSVM;
protected short HLSVMF;
protected short HLSVMN;
protected boolean HOH;
protected short HOSP;
protected short HOSPCH;
protected short HOSPD;
protected short HOSPNHS;
protected short HOWLNG;
protected short HUBUYS;
protected short HUBUYS_BH;
protected short HUFRYS;
protected short HUFRYS_BH;
protected short HUIRON;
protected short HUIRON_BH;
protected short HUMOPS;
protected short HUMOPS_BH;
protected short HUNURS;
protected short HUSITS;
protected short HUXPCH;
protected short IENDDATHM;
protected short IODC;
protected short ISCED;
protected short ISTRTDATHM;
protected short ISTRTDATY;
protected short IV2;
protected short IV4;
protected short IV5;
protected short IV6A;
protected short IV6B;
protected short IV6C;
protected short IV6D;
protected short IV6E;
protected short IV6F;
protected short IV7;
protected byte IVDA;
protected byte IVDB;
protected byte IVDC;
protected byte IVDD;
protected byte IVDE;
protected short IVEA;
protected short IVEB;
protected short IVEC;
protected short IVED;
protected short IVEE;
protected short IVFA;
protected short IVFB;
protected short IVFC;
protected short IVFD;
protected short IVFE;
protected byte IVIOW7;
protected short IVJA;
protected short IVJB;
protected short IVJC;
protected short IVJD;
protected short IVJE;
protected byte IVLPAR;
protected byte IVLPARY;
protected short IVLYR;
protected short IVMA;
protected short IVMB;
protected short IVMC;
protected short IVMD;
protected short IVME;
protected short IVPA;
protected short IVPB;
protected short IVPC;
protected short IVPD;
protected short IVPE;
protected short IVSC;
protected byte IVSTAT2;
protected byte J1BOSS;
protected double J1CSSF;
protected double J1CSSM;
protected byte J1GOLD;
protected double J1HGS;
protected short J1ISCO88_CC;
protected String J1ISCO_CC;
protected byte J1MNGR;
protected byte J1NONE_BH;
protected byte J1NSSEC8_DV;
protected byte J1NSSEC_DV;
protected byte J1RGSC;
protected short J1SEC;
protected byte J1SEG;
protected byte J1SEMP;
protected byte J1SOC90_CC;
protected short J2PAY_BH;
protected short J2SOC90_CC;
protected short JBBGLY;
protected short JBCHC1;
protected short JBCHC2;
protected short JBCHC3;
protected double JBCSSF;
protected double JBCSSM;
protected short JBGOLD;
protected double JBHGS;
protected short JBHRLK;
protected String JBISCO_CC;
protected byte JBLKCHA;
protected byte JBLKCHB;
protected byte JBLKCHC;
protected byte JBLKCHD;
protected byte JBLKCHE;
protected byte JBMRS;
protected short JBNSSEC_DV;
protected short JBOFFY_BH;
protected int JBONAM;
protected byte JBONG;
protected short JBONUS;
protected short JBOPPS;
protected short JBPEN;
protected short JBPENM;
protected byte JBPERFP;
protected short JBPL_BH;
protected short JBRGSC_DV;
protected short JBRISE;
protected short JBSAT2;
protected short JBSAT4;
protected short JBSAT6;
protected short JBSAT7;
protected short JBSAT_BH;
protected short JBSECT_BH;
protected short JBSEC_BH;
protected short JBSEG_DV;
protected short JBSIC;
protected short JBSOC90LY_CC;
protected short JBSOC90_CC;
protected short JBSTATL;
protected short JBSTATT;
protected short JBTERM;
protected short JBTIME;
protected short JBTTWM;
protected short JBUB;
protected short JBUBY;
protected byte JBXPCHA;
protected byte JBXPCHB;
protected byte JBXPCHC;
protected byte JBXPCHD;
protected byte JBXPCHE;
protected double JLCSSF;
protected double JLCSSM;
protected short JLGOLD;
protected double JLHGS;
protected short JLID;
protected String JLISCO_CC;
protected short JLNSSEC_DV;
protected short JLRGSC_DV;
protected short JLSEC;
protected short JLSEG_DV;
protected short JLSIC;
protected short JLSOC90_CC;
protected short JLYID;
protected short JNMNTH;
protected short JNYEAR;
protected short JSBGY4;
protected short JSHRLK;
protected double JSLOSS;
protected byte JSPART;
protected double JSPAYG;
protected short JSPAYGI;
protected int JSPAYU;
protected byte JSPAYW;
protected double JSPAYW_BH;
protected short JSPL_BH;
protected byte JSPRLS;
protected byte JSPRNI;
protected double JSPROF;
protected short JSPROFI;
protected byte JSPRTX;
protected byte JSPYNI;
protected byte JSPYTX;
protected short JSSAT;
protected short JSSAT1;
protected short JSSAT2;
protected short JSSAT4;
protected short JSSAT5;
protected short JSTIME;
protected short JSTTWM;
protected byte JSTYPEB;
protected short JTYID;
protected short JUBGN;
protected short JUHRSL;
protected short JUHRSX;
protected short JULK1;
protected short JULK4;
protected short JULK4X1;
protected short JULK4X2;
protected short JULK4X4;
protected short JULK4X5;
protected short JULK4X6;
protected short JULKA;
protected short JULKB;
protected short JULKC;
protected short JULKD;
protected short JULKE;
protected short JUPAYL;
protected short JUPAYX;
protected short JUSOC90_CC;
protected short JUSPEC;
protected short LACTA;
protected short LACTB;
protected short LACTC;
protected short LACTD;
protected short LACTE;
protected short LACTF;
protected short LACTH;
protected short LACTI;
protected short LACTJ;
protected short LACTK;
protected short LACTL;
protected byte LCHMOR;
protected byte LCHMORN;
protected byte LCOH;
protected double LEWGHT;
protected byte LFIMPA;
protected byte LFIMPB;
protected byte LFIMPC;
protected byte LFIMPD;
protected byte LFIMPE;
protected byte LFIMPF;
protected byte LFIMPG;
protected byte LFIMPH;
protected short LFSAT1;
protected short LFSAT2;
protected short LFSAT3;
protected short LFSAT4;
protected short LFSAT5;
protected short LFSAT6;
protected short LFSAT7;
protected short LFSAT8;
protected short LFSATL;
protected short LFSATO;
protected short LKMOVY;
protected short LKNBRD;
protected byte LMAR1M;
protected short LMAR1Y;
protected byte LNPRNT;
protected byte LOCCHD;
protected byte LOCSERA;
protected byte LOCSERB;
protected byte LOCSERC;
protected byte LOCSERD;
protected byte LOCSERE;
protected byte LPRNT;
protected double LRWGHT;
protected byte MABOSS;
protected double MACSSF;
protected double MACSSM;
protected byte MAGOLD;
protected double MAHGS;
protected short MAISCO88_CC;
protected String MAISCO_CC;
protected byte MAJU;
protected byte MAJU_BH;
protected byte MAMNGR;
protected byte MANSSEC8_DV;
protected byte MANSSEC_DV;
protected byte MARGSC;
protected short MASEC;
protected byte MASEG;
protected byte MASEMP;
protected byte MASOC90_CC;
protected short MASTAT;
protected short MEMORIG_BH;
protected short MLCHM;
protected short MLCHY4;
protected short MLSTAT_BH;
protected int MNPID_BH;
protected short MOVEST;
protected short MOVJB;
protected short MOVJBA;
protected short MOVJBB;
protected short MOVJBC;
protected short MOVJBD;
protected short MOVJBE;
protected short MOVJBF;
protected short MOVJBG;
protected short MOVJBH;
protected short MOVJBI;
protected short MOVY1;
protected short MOVY2;
protected short MRJBOSS;
protected double MRJCSSF;
protected double MRJCSSM;
protected short MRJEND;
protected short MRJGOLD;
protected double MRJHGS;
protected short MRJISCO88_CC;
protected String MRJISCO_CC;
protected short MRJMNGR;
protected short MRJNSSEC8_DV;
protected short MRJNSSEC_DV;
protected short MRJRGSC;
protected short MRJSEC;
protected short MRJSEG;
protected short MRJSEMP;
protected short MRJSIC;
protected short MRJSIZE;
protected short MRJSOC;
protected short MSTATSAM;
protected short NAIDXHH_BH;
protected short NCHILD_DV;
protected short NCIGS;
protected byte NEIGH;
protected byte NEIGH1;
protected byte NEIGH2;
protected byte NEIGH3;
protected byte NEIGH4;
protected byte NEIGH5;
protected byte NEIGH6;
protected short NEMST;
protected short NET1AG;
protected short NET1JB;
protected byte NET1KN;
protected byte NET1LV;
protected short NET1PH;
protected byte NET1RL;
protected short NET1WR;
protected short NET2AG;
protected short NET2JB;
protected byte NET2KN;
protected byte NET2LV;
protected short NET2PH;
protected byte NET2RL;
protected short NET2WR;
protected short NET3AG;
protected short NET3JB;
protected byte NET3KN;
protected byte NET3LV;
protected short NET3PH;
protected byte NET3RL;
protected short NET3WR;
protected short NETAG_1;
protected short NETAG_2;
protected short NETAG_3;
protected byte NETKN_1;
protected byte NETKN_2;
protected byte NETKN_3;
protected short NETPH_1;
protected short NETPH_2;
protected short NETPH_3;
protected byte NETRL_1;
protected byte NETRL_2;
protected byte NETRL_3;
protected short NETSX1;
protected short NETSX2;
protected short NETSX3;
protected short NETSX_1;
protected short NETSX_2;
protected short NETSX_3;
protected short NETWR_1;
protected short NETWR_2;
protected short NETWR_3;
protected short NEWHY;
protected short NF1;
protected short NJBNEW;
protected short NJBS;
protected short NJBSP;
protected double NJBWKS;
protected short NJISP;
protected double NJIWKS;
protected short NJUSP;
protected double NJUWKS;
protected byte NMAR_BH;
protected byte NQFEDA;
protected byte NQFEDB;
protected byte NQFEDC;
protected short NQFEDD;
protected short NQFEDE;
protected byte NQFEDF;
protected byte NQFEDG;
protected byte NQFEDH;
protected byte NQFEDI;
protected byte NQFEDJ;
protected byte NQFEDK;
protected short NQFEDL;
protected byte NQFEDM;
protected short NQFEDN;
protected byte NQFEDO;
protected byte NQFEDP;
protected byte NQFEDQ;
protected byte NQFEDR;
protected short NQFEDS;
protected byte NQFEDT;
protected short NQFEXA;
protected short NQFEXB;
protected short NQFEXC;
protected byte NQFEXG;
protected byte NQFEXH;
protected byte NQFEXI;
protected byte NQFEXJ;
protected byte NQFEXL;
protected byte NRPART;
protected byte NRPTIM;
protected byte NRPXPM1;
protected byte NRPXPM2;
protected byte NTRAIN;
protected short NXDTS;
protected short OPFAMK;
protected short OPFAML;
protected byte OPFAMO;
protected byte OPFAMP;
protected byte OPFAMQ;
protected byte OPFAMR;
protected byte OPNGBHA;
protected byte OPNGBHB;
protected byte OPNGBHC;
protected byte OPNGBHD;
protected byte OPNGBHE;
protected byte OPNGBHF;
protected byte OPNGBHG;
protected byte OPNGBHH;
protected short OPPOLA;
protected short OPPOLB;
protected short OPPOLC;
protected short OPPOLD;
protected byte PABOSS;
protected double PACSSF;
protected double PACSSM;
protected byte PAGOLD;
protected double PAHGS;
protected short PAISCO88_CC;
protected String PAISCO_CC;
protected byte PAJU;
protected byte PAJU_BH;
protected byte PAMNGR;
protected byte PANSSEC8_DV;
protected byte PANSSEC_DV;
protected byte PARGSC;
protected short PASEC;
protected byte PASEG;
protected byte PASEMP;
protected byte PASOC90_CC;
protected short PAYDF1;
protected short PAYDF2;
protected short PAYDF3;
protected short PAYDF4;
protected short PAYDF5;
protected short PAYDF6;
protected short PAYDF7;
protected short PAYDF8;
protected byte PAYDF9;
protected short PAYGLI;
protected double PAYGLY;
protected short PAYGTI;
protected double PAYGTY;
protected double PAYGW;
protected double PAYG_DV;
protected int PAYLY;
protected short PAYLYG;
protected double PAYLYW;
protected short PAYNLI;
protected double PAYNLY;
protected short PAYNTI;
protected double PAYNTY;
protected double PAYNW;
protected int PAYS;
protected short PAYSG;
protected short PAYSLP;
protected double PAYSW;
protected double PAYUW;
protected short PENADD;
protected short PENADV;
protected double PENADW;
protected short PENB4;
protected short PENB4V;
protected double PENB4W;
protected short PENB4Y4;
protected short PENYR4;
protected int PID;
protected short PLBORNC_CC;
protected short PLNEW;
protected short PLNOWM;
protected short PLNOWY4;
protected short PPLEVR;
protected short PPPEN;
protected short PREARNI;
protected short PREARN_BH;
protected short PRESBGM;
protected short PRESBY4;
protected short PRESLY;
protected short PRF101;
protected short PRF102;
protected short PRF116;
protected short PRF125;
protected short PRF131;
protected short PRF135;
protected byte PRF137;
protected short PRF139;
protected short PRF141;
protected short PRFEHQ;
protected byte PRFIRN;
protected short PRFITBI;
protected short PRFITB_BH;
protected short PRJBBY4;
protected byte PRJBFT;
protected short PRJBLY;
protected short PRRS2I;
protected short PRSEHQ;
protected short PRWHY;
protected byte PYAGE1;
protected byte PYAGE2;
protected byte PYAGE3;
protected short PYARG1;
protected short PYARG2;
protected short PYARG3;
protected byte PYHLTH;
protected byte PYHWRK;
protected byte PYMAN1;
protected byte PYMAN2;
protected byte PYMAN3;
protected short PYNYP;
protected short PYPNO1;
protected short PYPNO2;
protected short PYPNO3;
protected short PYSAD1;
protected short PYSAD2;
protected short PYSAD3;
protected byte PYSMK1;
protected byte PYSMK2;
protected byte PYSMK3;
protected short PYTLK1;
protected short PYTLK2;
protected short PYTLK3;
protected short PYWHR1;
protected short PYWHR2;
protected short PYWHR3;
protected short PYWOR1;
protected short PYWOR2;
protected short PYWOR3;
protected short QFA;
protected short QFACHI;
protected short QFB;
protected short QFC;
protected short QFD;
protected short QFE;
protected short QFED;
protected short QFEDA;
protected short QFEDB;
protected short QFEDC;
protected short QFEDD;
protected short QFEDE;
protected short QFEDF;
protected short QFEDG;
protected short QFEDH;
protected short QFEDHI;
protected short QFEDI;
protected short QFEDJ;
protected short QFEDK;
protected short QFEDL;
protected short QFEDM;
protected short QFEDN;
protected short QFEDO;
protected short QFEDP;
protected short QFEDQ;
protected short QFEDR;
protected short QFEDS;
protected byte QFEDT;
protected short QFEDX;
protected short QFEDXA;
protected short QFEDXB;
protected short QFEDXC;
protected short QFEDXG;
protected short QFEDXH;
protected short QFEDXI;
protected short QFEDXJ;
protected byte QFEDXL;
protected short QFF;
protected short QFG;
protected short QFH;
protected short QFHAS;
protected short QFI;
protected short QFJ;
protected short QFK;
protected short QFL;
protected short QFM;
protected short QFN;
protected short QFVOC;
protected short QFX;
protected short QFXC;
protected short QFXD;
protected short QFXE;
protected short QFXF;
protected short QFXG;
protected short QFXH;
protected short QFXK;
protected short QFXL;
protected short QFXM;
protected short QFXN;
protected byte QFXO;
protected byte QFXP;
protected byte QFXQ;
protected byte QFXR;
protected short RACE;
protected short RACH12;
protected short REGION;
protected short SAMPST;
protected short SAMPST_BH;
protected short SAVE;
protected int SAVED;
protected short SAVEY1;
protected short SAVEY2;
protected short SCNOW;
protected byte SCTRUST;
protected short SCTYPE;
protected short SMOKER;
protected short SPINHH;
protected short SPJB;
protected short SPJBHR;
protected short SPJBOT;
protected short SPJBYR;
protected double SPPAYG;
protected short SPPAYGI;
protected int SPPID_BH;
protected short SPSOC90_CC;
protected short TELWHY;
protected short TENURE_DV;
protected int TLFIYR;
protected int TLFIYRL;
protected byte TRAIN;
protected byte TRFEEA1;
protected byte TRFEEA2;
protected byte TRFEEA3;
protected byte TRFEEB1;
protected byte TRFEEB2;
protected byte TRFEEB3;
protected byte TRFEEC1;
protected byte TRFEEC2;
protected byte TRFEEC3;
protected byte TRFEEE1;
protected byte TRFEEE2;
protected byte TRFEEE3;
protected byte TRFEEF1;
protected byte TRFEEF2;
protected byte TRFEEF3;
protected byte TRFEEG1;
protected byte TRFEEG2;
protected byte TRFEEG3;
protected byte TRMORE1;
protected byte TRMORE2;
protected byte TROQL1;
protected byte TROQL2;
protected byte TROQL3;
protected byte TROQLN1;
protected byte TROQLN2;
protected byte TROQLN3;
protected byte TRPLCE1;
protected byte TRPLCE2;
protected byte TRPLCE3;
protected short TRQ1;
protected short TRQ2;
protected short TRQ3;
protected byte TRQLA1;
protected byte TRQLA2;
protected byte TRQLA3;
protected byte TRQLAC1;
protected byte TRQLAC2;
protected byte TRQLAC3;
protected byte TRQLAN1;
protected byte TRQLAN2;
protected byte TRQLAN3;
protected byte TRQLB1;
protected byte TRQLB2;
protected byte TRQLB3;
protected byte TRQLBN1;
protected byte TRQLBN2;
protected byte TRQLBN3;
protected byte TRQLC1;
protected byte TRQLC2;
protected byte TRQLC3;
protected byte TRQLCN1;
protected byte TRQLCN2;
protected byte TRQLCN3;
protected byte TRQLD1;
protected byte TRQLD2;
protected byte TRQLD3;
protected byte TRQLDN1;
protected byte TRQLDN2;
protected byte TRQLDN3;
protected byte TRQLE1;
protected byte TRQLE2;
protected byte TRQLE3;
protected byte TRQLEN1;
protected byte TRQLEN2;
protected byte TRQLEN3;
protected byte TRQLF1;
protected byte TRQLF2;
protected byte TRQLF3;
protected byte TRQLFN1;
protected byte TRQLFN2;
protected byte TRQLFN3;
protected byte TRQLG1;
protected byte TRQLG2;
protected byte TRQLG3;
protected byte TRQLGN1;
protected byte TRQLGN2;
protected byte TRQLGN3;
protected byte TRQLH1;
protected byte TRQLH2;
protected byte TRQLH3;
protected byte TRQLHN1;
protected byte TRQLHN2;
protected byte TRQLHN3;
protected byte TRQLI1;
protected byte TRQLI2;
protected byte TRQLI3;
protected byte TRQLIN1;
protected byte TRQLIN2;
protected byte TRQLIN3;
protected byte TRQLJ1;
protected byte TRQLJ2;
protected byte TRQLJ3;
protected byte TRQLJN1;
protected byte TRQLJN2;
protected byte TRQLJN3;
protected byte TRQLNN1;
protected byte TRQLNN2;
protected byte TRQLNN3;
protected byte TRQLXP1;
protected byte TRQLXP2;
protected byte TRQLXP3;
protected byte TRU1;
protected byte TRU2;
protected byte TRU3;
protected byte TRWHYA1;
protected byte TRWHYA2;
protected byte TRWHYA3;
protected byte TRWHYB1;
protected byte TRWHYB2;
protected byte TRWHYB3;
protected byte TRWHYC1;
protected byte TRWHYC2;
protected byte TRWHYC3;
protected byte TRWHYD1;
protected byte TRWHYD2;
protected byte TRWHYD3;
protected byte TRWHYE1;
protected byte TRWHYE2;
protected byte TRWHYE3;
protected short TUIN1;
protected short TUJBPL;
protected byte UKCITZN_DV_BH;
protected short VOTE;
protected short VOTE1;
protected short VOTE2;
protected short VOTE3;
protected short VOTE3_BH;
protected short VOTE4;
protected short VOTE4_BH;
protected short VOTE5;
protected byte VOTE7;
protected byte VOTE8;
protected byte VOTE8_BH;
protected byte WINDF;
protected byte WINDFA;
protected int WINDFAY;
protected byte WINDFB;
protected int WINDFBY;
protected byte WINDFC;
protected int WINDFCY;
protected byte WINDFD;
protected int WINDFDY;
protected byte WINDFF;
protected int WINDFFY;
protected byte WINDFG;
protected int WINDFGY;
protected byte WINDFH;
protected int WINDFHY;
protected short WKTIME;
protected short XDTS;
protected double XEWGHT;
protected double XEWGHTE;
protected short XPCHC;
protected short XPCHCF;
protected byte XPLEIS;
protected byte XPMEAL;
protected byte XPMOVE;
protected double XRWGHT;
protected double XRWGHTE;
protected short YPPAR;
protected final void initADLA(String s) {
if (!s.trim().isEmpty()) {
ADLA = Byte.parseByte(s);
} else {
ADLA = Byte.MIN_VALUE;
}
}

protected final void initADLAD(String s) {
if (!s.trim().isEmpty()) {
ADLAD = Byte.parseByte(s);
} else {
ADLAD = Byte.MIN_VALUE;
}
}

protected final void initADLB(String s) {
if (!s.trim().isEmpty()) {
ADLB = Byte.parseByte(s);
} else {
ADLB = Byte.MIN_VALUE;
}
}

protected final void initADLBD(String s) {
if (!s.trim().isEmpty()) {
ADLBD = Byte.parseByte(s);
} else {
ADLBD = Byte.MIN_VALUE;
}
}

protected final void initADLC(String s) {
if (!s.trim().isEmpty()) {
ADLC = Byte.parseByte(s);
} else {
ADLC = Byte.MIN_VALUE;
}
}

protected final void initADLCD(String s) {
if (!s.trim().isEmpty()) {
ADLCD = Byte.parseByte(s);
} else {
ADLCD = Byte.MIN_VALUE;
}
}

protected final void initADLD(String s) {
if (!s.trim().isEmpty()) {
ADLD = Byte.parseByte(s);
} else {
ADLD = Byte.MIN_VALUE;
}
}

protected final void initADLDD(String s) {
if (!s.trim().isEmpty()) {
ADLDD = Byte.parseByte(s);
} else {
ADLDD = Byte.MIN_VALUE;
}
}

protected final void initADLE(String s) {
if (!s.trim().isEmpty()) {
ADLE = Byte.parseByte(s);
} else {
ADLE = Byte.MIN_VALUE;
}
}

protected final void initADLED(String s) {
if (!s.trim().isEmpty()) {
ADLED = Byte.parseByte(s);
} else {
ADLED = Byte.MIN_VALUE;
}
}

protected final void initADLF(String s) {
if (!s.trim().isEmpty()) {
ADLF = Byte.parseByte(s);
} else {
ADLF = Byte.MIN_VALUE;
}
}

protected final void initADLFD(String s) {
if (!s.trim().isEmpty()) {
ADLFD = Byte.parseByte(s);
} else {
ADLFD = Byte.MIN_VALUE;
}
}

protected final void initAGE12(String s) {
if (!s.trim().isEmpty()) {
AGE12 = Short.parseShort(s);
} else {
AGE12 = Short.MIN_VALUE;
}
}

protected final void initAGE_DV(String s) {
if (!s.trim().isEmpty()) {
AGE_DV = Short.parseShort(s);
} else {
AGE_DV = Short.MIN_VALUE;
}
}

protected final void initAIDHRS_BH(String s) {
if (!s.trim().isEmpty()) {
AIDHRS_BH = Short.parseShort(s);
} else {
AIDHRS_BH = Short.MIN_VALUE;
}
}

protected final void initAIDHU1(String s) {
if (!s.trim().isEmpty()) {
AIDHU1 = Short.parseShort(s);
} else {
AIDHU1 = Short.MIN_VALUE;
}
}

protected final void initAIDHU2(String s) {
if (!s.trim().isEmpty()) {
AIDHU2 = Short.parseShort(s);
} else {
AIDHU2 = Short.MIN_VALUE;
}
}

protected final void initAIDHUA(String s) {
if (!s.trim().isEmpty()) {
AIDHUA = Short.parseShort(s);
} else {
AIDHUA = Short.MIN_VALUE;
}
}

protected final void initAIDHUB(String s) {
if (!s.trim().isEmpty()) {
AIDHUB = Short.parseShort(s);
} else {
AIDHUB = Short.MIN_VALUE;
}
}

protected final void initAIDHUC(String s) {
if (!s.trim().isEmpty()) {
AIDHUC = Short.parseShort(s);
} else {
AIDHUC = Short.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBUNO(String s) {
if (!s.trim().isEmpty()) {
BUNO = Short.parseShort(s);
} else {
BUNO = Short.MIN_VALUE;
}
}

protected final void initBUTYPE(String s) {
if (!s.trim().isEmpty()) {
BUTYPE = Short.parseShort(s);
} else {
BUTYPE = Short.MIN_VALUE;
}
}

protected final void initCASMIN(String s) {
if (!s.trim().isEmpty()) {
CASMIN = Short.parseShort(s);
} else {
CASMIN = Short.MIN_VALUE;
}
}

protected final void initCBAGE(String s) {
if (!s.trim().isEmpty()) {
CBAGE = Byte.parseByte(s);
} else {
CBAGE = Byte.MIN_VALUE;
}
}

protected final void initCH1BY4(String s) {
if (!s.trim().isEmpty()) {
CH1BY4 = Short.parseShort(s);
} else {
CH1BY4 = Short.MIN_VALUE;
}
}

protected final void initCJSBGD(String s) {
if (!s.trim().isEmpty()) {
CJSBGD = Short.parseShort(s);
} else {
CJSBGD = Short.MIN_VALUE;
}
}

protected final void initCJSBGM(String s) {
if (!s.trim().isEmpty()) {
CJSBGM = Short.parseShort(s);
} else {
CJSBGM = Short.MIN_VALUE;
}
}

protected final void initCJSBGY4(String s) {
if (!s.trim().isEmpty()) {
CJSBGY4 = Short.parseShort(s);
} else {
CJSBGY4 = Short.MIN_VALUE;
}
}

protected final void initCJSBLY(String s) {
if (!s.trim().isEmpty()) {
CJSBLY = Short.parseShort(s);
} else {
CJSBLY = Short.MIN_VALUE;
}
}

protected final void initCJSTEN(String s) {
if (!s.trim().isEmpty()) {
CJSTEN = Integer.parseInt(s);
} else {
CJSTEN = Integer.MIN_VALUE;
}
}

protected final void initCJSWK9(String s) {
if (!s.trim().isEmpty()) {
CJSWK9 = Double.parseDouble(s);
} else {
CJSWK9 = Double.NaN;
}
}

protected final void initCOH1BM(String s) {
if (!s.trim().isEmpty()) {
COH1BM = Byte.parseByte(s);
} else {
COH1BM = Byte.MIN_VALUE;
}
}

protected final void initCOH1BY(String s) {
if (!s.trim().isEmpty()) {
COH1BY = Short.parseShort(s);
} else {
COH1BY = Short.MIN_VALUE;
}
}

protected final void initCOH1EM(String s) {
if (!s.trim().isEmpty()) {
COH1EM = Byte.parseByte(s);
} else {
COH1EM = Byte.MIN_VALUE;
}
}

protected final void initCOH1EY(String s) {
if (!s.trim().isEmpty()) {
COH1EY = Short.parseShort(s);
} else {
COH1EY = Short.MIN_VALUE;
}
}

protected final void initCOH1MR(String s) {
if (!s.trim().isEmpty()) {
COH1MR = Byte.parseByte(s);
} else {
COH1MR = Byte.MIN_VALUE;
}
}

protected final void initCOHAD1(String s) {
if (!s.trim().isEmpty()) {
COHAD1 = Byte.parseByte(s);
} else {
COHAD1 = Byte.MIN_VALUE;
}
}

protected final void initCOHAD2(String s) {
if (!s.trim().isEmpty()) {
COHAD2 = Byte.parseByte(s);
} else {
COHAD2 = Byte.MIN_VALUE;
}
}

protected final void initCOHADV(String s) {
if (!s.trim().isEmpty()) {
COHADV = Byte.parseByte(s);
} else {
COHADV = Byte.MIN_VALUE;
}
}

protected final void initCOHDIS(String s) {
if (!s.trim().isEmpty()) {
COHDIS = Byte.parseByte(s);
} else {
COHDIS = Byte.MIN_VALUE;
}
}

protected final void initCOHDS1(String s) {
if (!s.trim().isEmpty()) {
COHDS1 = Byte.parseByte(s);
} else {
COHDS1 = Byte.MIN_VALUE;
}
}

protected final void initCOHDS2(String s) {
if (!s.trim().isEmpty()) {
COHDS2 = Byte.parseByte(s);
} else {
COHDS2 = Byte.MIN_VALUE;
}
}

protected final void initCOHLBM1(String s) {
if (!s.trim().isEmpty()) {
COHLBM1 = Byte.parseByte(s);
} else {
COHLBM1 = Byte.MIN_VALUE;
}
}

protected final void initCOHLBM2(String s) {
if (!s.trim().isEmpty()) {
COHLBM2 = Byte.parseByte(s);
} else {
COHLBM2 = Byte.MIN_VALUE;
}
}

protected final void initCOHLBM3(String s) {
if (!s.trim().isEmpty()) {
COHLBM3 = Byte.parseByte(s);
} else {
COHLBM3 = Byte.MIN_VALUE;
}
}

protected final void initCOHLBY1(String s) {
if (!s.trim().isEmpty()) {
COHLBY1 = Short.parseShort(s);
} else {
COHLBY1 = Short.MIN_VALUE;
}
}

protected final void initCOHLBY2(String s) {
if (!s.trim().isEmpty()) {
COHLBY2 = Short.parseShort(s);
} else {
COHLBY2 = Short.MIN_VALUE;
}
}

protected final void initCOHLBY3(String s) {
if (!s.trim().isEmpty()) {
COHLBY3 = Byte.parseByte(s);
} else {
COHLBY3 = Byte.MIN_VALUE;
}
}

protected final void initCOHLEM1(String s) {
if (!s.trim().isEmpty()) {
COHLEM1 = Byte.parseByte(s);
} else {
COHLEM1 = Byte.MIN_VALUE;
}
}

protected final void initCOHLEM2(String s) {
if (!s.trim().isEmpty()) {
COHLEM2 = Byte.parseByte(s);
} else {
COHLEM2 = Byte.MIN_VALUE;
}
}

protected final void initCOHLEM3(String s) {
if (!s.trim().isEmpty()) {
COHLEM3 = Byte.parseByte(s);
} else {
COHLEM3 = Byte.MIN_VALUE;
}
}

protected final void initCOHLEY1(String s) {
if (!s.trim().isEmpty()) {
COHLEY1 = Short.parseShort(s);
} else {
COHLEY1 = Short.MIN_VALUE;
}
}

protected final void initCOHLEY2(String s) {
if (!s.trim().isEmpty()) {
COHLEY2 = Short.parseShort(s);
} else {
COHLEY2 = Short.MIN_VALUE;
}
}

protected final void initCOHLEY3(String s) {
if (!s.trim().isEmpty()) {
COHLEY3 = Byte.parseByte(s);
} else {
COHLEY3 = Byte.MIN_VALUE;
}
}

protected final void initCOHLYR(String s) {
if (!s.trim().isEmpty()) {
COHLYR = Byte.parseByte(s);
} else {
COHLYR = Byte.MIN_VALUE;
}
}

protected final void initCOHXPM1(String s) {
if (!s.trim().isEmpty()) {
COHXPM1 = Byte.parseByte(s);
} else {
COHXPM1 = Byte.MIN_VALUE;
}
}

protected final void initCOHXPM2(String s) {
if (!s.trim().isEmpty()) {
COHXPM2 = Byte.parseByte(s);
} else {
COHXPM2 = Byte.MIN_VALUE;
}
}

protected final void initDISTMOV(String s) {
if (!s.trim().isEmpty()) {
DISTMOV = Double.parseDouble(s);
} else {
DISTMOV = Double.NaN;
}
}

protected final void initDOBY(String s) {
if (!s.trim().isEmpty()) {
DOBY = Short.parseShort(s);
} else {
DOBY = Short.MIN_VALUE;
}
}

protected final void initEAAGE(String s) {
if (!s.trim().isEmpty()) {
EAAGE = Short.parseShort(s);
} else {
EAAGE = Short.MIN_VALUE;
}
}

protected final void initEDBGM1(String s) {
if (!s.trim().isEmpty()) {
EDBGM1 = Byte.parseByte(s);
} else {
EDBGM1 = Byte.MIN_VALUE;
}
}

protected final void initEDBGM2(String s) {
if (!s.trim().isEmpty()) {
EDBGM2 = Byte.parseByte(s);
} else {
EDBGM2 = Byte.MIN_VALUE;
}
}

protected final void initEDBGY1(String s) {
if (!s.trim().isEmpty()) {
EDBGY1 = Short.parseShort(s);
} else {
EDBGY1 = Short.MIN_VALUE;
}
}

protected final void initEDBGY2(String s) {
if (!s.trim().isEmpty()) {
EDBGY2 = Short.parseShort(s);
} else {
EDBGY2 = Short.MIN_VALUE;
}
}

protected final void initEDBLYR1(String s) {
if (!s.trim().isEmpty()) {
EDBLYR1 = Byte.parseByte(s);
} else {
EDBLYR1 = Byte.MIN_VALUE;
}
}

protected final void initEDBLYR2(String s) {
if (!s.trim().isEmpty()) {
EDBLYR2 = Byte.parseByte(s);
} else {
EDBLYR2 = Byte.MIN_VALUE;
}
}

protected final void initEDENM1(String s) {
if (!s.trim().isEmpty()) {
EDENM1 = Byte.parseByte(s);
} else {
EDENM1 = Byte.MIN_VALUE;
}
}

protected final void initEDENM2(String s) {
if (!s.trim().isEmpty()) {
EDENM2 = Byte.parseByte(s);
} else {
EDENM2 = Byte.MIN_VALUE;
}
}

protected final void initEDENNE1(String s) {
if (!s.trim().isEmpty()) {
EDENNE1 = Byte.parseByte(s);
} else {
EDENNE1 = Byte.MIN_VALUE;
}
}

protected final void initEDENNE2(String s) {
if (!s.trim().isEmpty()) {
EDENNE2 = Byte.parseByte(s);
} else {
EDENNE2 = Byte.MIN_VALUE;
}
}

protected final void initEDENY1(String s) {
if (!s.trim().isEmpty()) {
EDENY1 = Short.parseShort(s);
} else {
EDENY1 = Short.MIN_VALUE;
}
}

protected final void initEDENY2(String s) {
if (!s.trim().isEmpty()) {
EDENY2 = Short.parseShort(s);
} else {
EDENY2 = Short.MIN_VALUE;
}
}

protected final void initEDFEEA1(String s) {
if (!s.trim().isEmpty()) {
EDFEEA1 = Byte.parseByte(s);
} else {
EDFEEA1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEA2(String s) {
if (!s.trim().isEmpty()) {
EDFEEA2 = Byte.parseByte(s);
} else {
EDFEEA2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEB1(String s) {
if (!s.trim().isEmpty()) {
EDFEEB1 = Byte.parseByte(s);
} else {
EDFEEB1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEB2(String s) {
if (!s.trim().isEmpty()) {
EDFEEB2 = Byte.parseByte(s);
} else {
EDFEEB2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEC1(String s) {
if (!s.trim().isEmpty()) {
EDFEEC1 = Byte.parseByte(s);
} else {
EDFEEC1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEC2(String s) {
if (!s.trim().isEmpty()) {
EDFEEC2 = Byte.parseByte(s);
} else {
EDFEEC2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEED1(String s) {
if (!s.trim().isEmpty()) {
EDFEED1 = Byte.parseByte(s);
} else {
EDFEED1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEED2(String s) {
if (!s.trim().isEmpty()) {
EDFEED2 = Byte.parseByte(s);
} else {
EDFEED2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEE1(String s) {
if (!s.trim().isEmpty()) {
EDFEEE1 = Byte.parseByte(s);
} else {
EDFEEE1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEE2(String s) {
if (!s.trim().isEmpty()) {
EDFEEE2 = Byte.parseByte(s);
} else {
EDFEEE2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEF1(String s) {
if (!s.trim().isEmpty()) {
EDFEEF1 = Byte.parseByte(s);
} else {
EDFEEF1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEF2(String s) {
if (!s.trim().isEmpty()) {
EDFEEF2 = Byte.parseByte(s);
} else {
EDFEEF2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEG1(String s) {
if (!s.trim().isEmpty()) {
EDFEEG1 = Byte.parseByte(s);
} else {
EDFEEG1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEG2(String s) {
if (!s.trim().isEmpty()) {
EDFEEG2 = Byte.parseByte(s);
} else {
EDFEEG2 = Byte.MIN_VALUE;
}
}

protected final void initEDLYR(String s) {
if (!s.trim().isEmpty()) {
EDLYR = Short.parseShort(s);
} else {
EDLYR = Short.MIN_VALUE;
}
}

protected final void initEDMORE1(String s) {
if (!s.trim().isEmpty()) {
EDMORE1 = Byte.parseByte(s);
} else {
EDMORE1 = Byte.MIN_VALUE;
}
}

protected final void initEDMORE2(String s) {
if (!s.trim().isEmpty()) {
EDMORE2 = Byte.parseByte(s);
} else {
EDMORE2 = Byte.MIN_VALUE;
}
}

protected final void initEDOQL1(String s) {
if (!s.trim().isEmpty()) {
EDOQL1 = Byte.parseByte(s);
} else {
EDOQL1 = Byte.MIN_VALUE;
}
}

protected final void initEDOQL2(String s) {
if (!s.trim().isEmpty()) {
EDOQL2 = Byte.parseByte(s);
} else {
EDOQL2 = Byte.MIN_VALUE;
}
}

protected final void initEDOQLN1(String s) {
if (!s.trim().isEmpty()) {
EDOQLN1 = Byte.parseByte(s);
} else {
EDOQLN1 = Byte.MIN_VALUE;
}
}

protected final void initEDOQLN2(String s) {
if (!s.trim().isEmpty()) {
EDOQLN2 = Byte.parseByte(s);
} else {
EDOQLN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLA1(String s) {
if (!s.trim().isEmpty()) {
EDQLA1 = Byte.parseByte(s);
} else {
EDQLA1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLA2(String s) {
if (!s.trim().isEmpty()) {
EDQLA2 = Byte.parseByte(s);
} else {
EDQLA2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLAN1(String s) {
if (!s.trim().isEmpty()) {
EDQLAN1 = Byte.parseByte(s);
} else {
EDQLAN1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLAN2(String s) {
if (!s.trim().isEmpty()) {
EDQLAN2 = Byte.parseByte(s);
} else {
EDQLAN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLB1(String s) {
if (!s.trim().isEmpty()) {
EDQLB1 = Byte.parseByte(s);
} else {
EDQLB1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLB2(String s) {
if (!s.trim().isEmpty()) {
EDQLB2 = Byte.parseByte(s);
} else {
EDQLB2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLBN1(String s) {
if (!s.trim().isEmpty()) {
EDQLBN1 = Byte.parseByte(s);
} else {
EDQLBN1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLBN2(String s) {
if (!s.trim().isEmpty()) {
EDQLBN2 = Byte.parseByte(s);
} else {
EDQLBN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLC1(String s) {
if (!s.trim().isEmpty()) {
EDQLC1 = Byte.parseByte(s);
} else {
EDQLC1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLC2(String s) {
if (!s.trim().isEmpty()) {
EDQLC2 = Byte.parseByte(s);
} else {
EDQLC2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLCN1(String s) {
if (!s.trim().isEmpty()) {
EDQLCN1 = Byte.parseByte(s);
} else {
EDQLCN1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLCN2(String s) {
if (!s.trim().isEmpty()) {
EDQLCN2 = Byte.parseByte(s);
} else {
EDQLCN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLD1(String s) {
if (!s.trim().isEmpty()) {
EDQLD1 = Byte.parseByte(s);
} else {
EDQLD1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLD2(String s) {
if (!s.trim().isEmpty()) {
EDQLD2 = Byte.parseByte(s);
} else {
EDQLD2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLDN1(String s) {
if (!s.trim().isEmpty()) {
EDQLDN1 = Byte.parseByte(s);
} else {
EDQLDN1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLDN2(String s) {
if (!s.trim().isEmpty()) {
EDQLDN2 = Byte.parseByte(s);
} else {
EDQLDN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLE1(String s) {
if (!s.trim().isEmpty()) {
EDQLE1 = Byte.parseByte(s);
} else {
EDQLE1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLE2(String s) {
if (!s.trim().isEmpty()) {
EDQLE2 = Byte.parseByte(s);
} else {
EDQLE2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLEN1(String s) {
if (!s.trim().isEmpty()) {
EDQLEN1 = Byte.parseByte(s);
} else {
EDQLEN1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLEN2(String s) {
if (!s.trim().isEmpty()) {
EDQLEN2 = Byte.parseByte(s);
} else {
EDQLEN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLF1(String s) {
if (!s.trim().isEmpty()) {
EDQLF1 = Byte.parseByte(s);
} else {
EDQLF1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLF2(String s) {
if (!s.trim().isEmpty()) {
EDQLF2 = Byte.parseByte(s);
} else {
EDQLF2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLFN1(String s) {
if (!s.trim().isEmpty()) {
EDQLFN1 = Byte.parseByte(s);
} else {
EDQLFN1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLFN2(String s) {
if (!s.trim().isEmpty()) {
EDQLFN2 = Byte.parseByte(s);
} else {
EDQLFN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLG1(String s) {
if (!s.trim().isEmpty()) {
EDQLG1 = Byte.parseByte(s);
} else {
EDQLG1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLG2(String s) {
if (!s.trim().isEmpty()) {
EDQLG2 = Byte.parseByte(s);
} else {
EDQLG2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLGN1(String s) {
if (!s.trim().isEmpty()) {
EDQLGN1 = Byte.parseByte(s);
} else {
EDQLGN1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLGN2(String s) {
if (!s.trim().isEmpty()) {
EDQLGN2 = Byte.parseByte(s);
} else {
EDQLGN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLH1(String s) {
if (!s.trim().isEmpty()) {
EDQLH1 = Byte.parseByte(s);
} else {
EDQLH1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLH2(String s) {
if (!s.trim().isEmpty()) {
EDQLH2 = Byte.parseByte(s);
} else {
EDQLH2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLHN1(String s) {
if (!s.trim().isEmpty()) {
EDQLHN1 = Byte.parseByte(s);
} else {
EDQLHN1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLHN2(String s) {
if (!s.trim().isEmpty()) {
EDQLHN2 = Byte.parseByte(s);
} else {
EDQLHN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLI1(String s) {
if (!s.trim().isEmpty()) {
EDQLI1 = Byte.parseByte(s);
} else {
EDQLI1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLI2(String s) {
if (!s.trim().isEmpty()) {
EDQLI2 = Byte.parseByte(s);
} else {
EDQLI2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLIN1(String s) {
if (!s.trim().isEmpty()) {
EDQLIN1 = Byte.parseByte(s);
} else {
EDQLIN1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLIN2(String s) {
if (!s.trim().isEmpty()) {
EDQLIN2 = Byte.parseByte(s);
} else {
EDQLIN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLJ1(String s) {
if (!s.trim().isEmpty()) {
EDQLJ1 = Byte.parseByte(s);
} else {
EDQLJ1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLJ2(String s) {
if (!s.trim().isEmpty()) {
EDQLJ2 = Byte.parseByte(s);
} else {
EDQLJ2 = Byte.MIN_VALUE;
}
}

protected final void initEDQLJN1(String s) {
if (!s.trim().isEmpty()) {
EDQLJN1 = Byte.parseByte(s);
} else {
EDQLJN1 = Byte.MIN_VALUE;
}
}

protected final void initEDQLJN2(String s) {
if (!s.trim().isEmpty()) {
EDQLJN2 = Byte.parseByte(s);
} else {
EDQLJN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQNN1(String s) {
if (!s.trim().isEmpty()) {
EDQNN1 = Byte.parseByte(s);
} else {
EDQNN1 = Byte.MIN_VALUE;
}
}

protected final void initEDQNN2(String s) {
if (!s.trim().isEmpty()) {
EDQNN2 = Byte.parseByte(s);
} else {
EDQNN2 = Byte.MIN_VALUE;
}
}

protected final void initEDQUAL1(String s) {
if (!s.trim().isEmpty()) {
EDQUAL1 = Byte.parseByte(s);
} else {
EDQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initEDQUAL2(String s) {
if (!s.trim().isEmpty()) {
EDQUAL2 = Byte.parseByte(s);
} else {
EDQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE1(String s) {
if (!s.trim().isEmpty()) {
EDTYPE1 = Byte.parseByte(s);
} else {
EDTYPE1 = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE2(String s) {
if (!s.trim().isEmpty()) {
EDTYPE2 = Byte.parseByte(s);
} else {
EDTYPE2 = Byte.MIN_VALUE;
}
}

protected final void initEPROSH(String s) {
if (!s.trim().isEmpty()) {
EPROSH = Short.parseShort(s);
} else {
EPROSH = Short.MIN_VALUE;
}
}

protected final void initF101(String s) {
if (!s.trim().isEmpty()) {
F101 = Short.parseShort(s);
} else {
F101 = Short.MIN_VALUE;
}
}

protected final void initF102(String s) {
if (!s.trim().isEmpty()) {
F102 = Short.parseShort(s);
} else {
F102 = Short.MIN_VALUE;
}
}

protected final void initF103(String s) {
if (!s.trim().isEmpty()) {
F103 = Short.parseShort(s);
} else {
F103 = Short.MIN_VALUE;
}
}

protected final void initF104(String s) {
if (!s.trim().isEmpty()) {
F104 = Short.parseShort(s);
} else {
F104 = Short.MIN_VALUE;
}
}

protected final void initF105(String s) {
if (!s.trim().isEmpty()) {
F105 = Short.parseShort(s);
} else {
F105 = Short.MIN_VALUE;
}
}

protected final void initF106(String s) {
if (!s.trim().isEmpty()) {
F106 = Byte.parseByte(s);
} else {
F106 = Byte.MIN_VALUE;
}
}

protected final void initF116(String s) {
if (!s.trim().isEmpty()) {
F116 = Byte.parseByte(s);
} else {
F116 = Byte.MIN_VALUE;
}
}

protected final void initF118(String s) {
if (!s.trim().isEmpty()) {
F118 = Short.parseShort(s);
} else {
F118 = Short.MIN_VALUE;
}
}

protected final void initF119(String s) {
if (!s.trim().isEmpty()) {
F119 = Short.parseShort(s);
} else {
F119 = Short.MIN_VALUE;
}
}

protected final void initF121(String s) {
if (!s.trim().isEmpty()) {
F121 = Short.parseShort(s);
} else {
F121 = Short.MIN_VALUE;
}
}

protected final void initF122(String s) {
if (!s.trim().isEmpty()) {
F122 = Short.parseShort(s);
} else {
F122 = Short.MIN_VALUE;
}
}

protected final void initF124(String s) {
if (!s.trim().isEmpty()) {
F124 = Byte.parseByte(s);
} else {
F124 = Byte.MIN_VALUE;
}
}

protected final void initF125(String s) {
if (!s.trim().isEmpty()) {
F125 = Short.parseShort(s);
} else {
F125 = Short.MIN_VALUE;
}
}

protected final void initF126(String s) {
if (!s.trim().isEmpty()) {
F126 = Byte.parseByte(s);
} else {
F126 = Byte.MIN_VALUE;
}
}

protected final void initF127(String s) {
if (!s.trim().isEmpty()) {
F127 = Byte.parseByte(s);
} else {
F127 = Byte.MIN_VALUE;
}
}

protected final void initF128(String s) {
if (!s.trim().isEmpty()) {
F128 = Byte.parseByte(s);
} else {
F128 = Byte.MIN_VALUE;
}
}

protected final void initF132(String s) {
if (!s.trim().isEmpty()) {
F132 = Short.parseShort(s);
} else {
F132 = Short.MIN_VALUE;
}
}

protected final void initF135(String s) {
if (!s.trim().isEmpty()) {
F135 = Short.parseShort(s);
} else {
F135 = Short.MIN_VALUE;
}
}

protected final void initF136(String s) {
if (!s.trim().isEmpty()) {
F136 = Short.parseShort(s);
} else {
F136 = Short.MIN_VALUE;
}
}

protected final void initF137(String s) {
if (!s.trim().isEmpty()) {
F137 = Short.parseShort(s);
} else {
F137 = Short.MIN_VALUE;
}
}

protected final void initF138(String s) {
if (!s.trim().isEmpty()) {
F138 = Short.parseShort(s);
} else {
F138 = Short.MIN_VALUE;
}
}

protected final void initF139(String s) {
if (!s.trim().isEmpty()) {
F139 = Short.parseShort(s);
} else {
F139 = Short.MIN_VALUE;
}
}

protected final void initF140(String s) {
if (!s.trim().isEmpty()) {
F140 = Short.parseShort(s);
} else {
F140 = Short.MIN_VALUE;
}
}

protected final void initF141(String s) {
if (!s.trim().isEmpty()) {
F141 = Short.parseShort(s);
} else {
F141 = Short.MIN_VALUE;
}
}

protected final void initF142(String s) {
if (!s.trim().isEmpty()) {
F142 = Short.parseShort(s);
} else {
F142 = Short.MIN_VALUE;
}
}

protected final void initF151(String s) {
if (!s.trim().isEmpty()) {
F151 = Short.parseShort(s);
} else {
F151 = Short.MIN_VALUE;
}
}

protected final void initF152(String s) {
if (!s.trim().isEmpty()) {
F152 = Byte.parseByte(s);
} else {
F152 = Byte.MIN_VALUE;
}
}

protected final void initF153(String s) {
if (!s.trim().isEmpty()) {
F153 = Short.parseShort(s);
} else {
F153 = Short.MIN_VALUE;
}
}

protected final void initF154(String s) {
if (!s.trim().isEmpty()) {
F154 = Short.parseShort(s);
} else {
F154 = Short.MIN_VALUE;
}
}

protected final void initF155(String s) {
if (!s.trim().isEmpty()) {
F155 = Short.parseShort(s);
} else {
F155 = Short.MIN_VALUE;
}
}

protected final void initF156(String s) {
if (!s.trim().isEmpty()) {
F156 = Short.parseShort(s);
} else {
F156 = Short.MIN_VALUE;
}
}

protected final void initF157(String s) {
if (!s.trim().isEmpty()) {
F157 = Short.parseShort(s);
} else {
F157 = Short.MIN_VALUE;
}
}

protected final void initF158(String s) {
if (!s.trim().isEmpty()) {
F158 = Byte.parseByte(s);
} else {
F158 = Byte.MIN_VALUE;
}
}

protected final void initF159(String s) {
if (!s.trim().isEmpty()) {
F159 = Byte.parseByte(s);
} else {
F159 = Byte.MIN_VALUE;
}
}

protected final void initFENOW_BH(String s) {
if (!s.trim().isEmpty()) {
FENOW_BH = Short.parseShort(s);
} else {
FENOW_BH = Short.MIN_VALUE;
}
}

protected final void initFETYPE(String s) {
if (!s.trim().isEmpty()) {
FETYPE = Short.parseShort(s);
} else {
FETYPE = Short.MIN_VALUE;
}
}

protected final void initFIHHMN(String s) {
if (!s.trim().isEmpty()) {
FIHHMN = Double.parseDouble(s);
} else {
FIHHMN = Double.NaN;
}
}

protected final void initFIHHMNI(String s) {
if (!s.trim().isEmpty()) {
FIHHMNI = Short.parseShort(s);
} else {
FIHHMNI = Short.MIN_VALUE;
}
}

protected final void initFIMNB(String s) {
if (!s.trim().isEmpty()) {
FIMNB = Double.parseDouble(s);
} else {
FIMNB = Double.NaN;
}
}

protected final void initFIMNBI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNBI = false;
} else {
FIMNBI = true;
}
}
}

protected final void initFIMNI(String s) {
if (!s.trim().isEmpty()) {
FIMNI = Double.parseDouble(s);
} else {
FIMNI = Double.NaN;
}
}

protected final void initFIMNII(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNII = false;
} else {
FIMNII = true;
}
}
}

protected final void initFIMNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNLI = false;
} else {
FIMNLI = true;
}
}
}

protected final void initFIMNNL(String s) {
if (!s.trim().isEmpty()) {
FIMNNL = Double.parseDouble(s);
} else {
FIMNNL = Double.NaN;
}
}

protected final void initFIMNNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNNLI = false;
} else {
FIMNNLI = true;
}
}
}

protected final void initFIMNP(String s) {
if (!s.trim().isEmpty()) {
FIMNP = Double.parseDouble(s);
} else {
FIMNP = Double.NaN;
}
}

protected final void initFIMNPI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNPI = false;
} else {
FIMNPI = true;
}
}
}

protected final void initFIMNSEL(String s) {
if (!s.trim().isEmpty()) {
FIMNSEL = Byte.parseByte(s);
} else {
FIMNSEL = Byte.MIN_VALUE;
}
}

protected final void initFIMNT(String s) {
if (!s.trim().isEmpty()) {
FIMNT = Double.parseDouble(s);
} else {
FIMNT = Double.NaN;
}
}

protected final void initFIMNTHI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNTHI = false;
} else {
FIMNTHI = true;
}
}
}

protected final void initFIMNTI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNTI = false;
} else {
FIMNTI = true;
}
}
}

protected final void initFISITC(String s) {
if (!s.trim().isEmpty()) {
FISITC = Short.parseShort(s);
} else {
FISITC = Short.MIN_VALUE;
}
}

protected final void initFISITX(String s) {
if (!s.trim().isEmpty()) {
FISITX = Short.parseShort(s);
} else {
FISITX = Short.MIN_VALUE;
}
}

protected final void initFISITY(String s) {
if (!s.trim().isEmpty()) {
FISITY = Short.parseShort(s);
} else {
FISITY = Short.MIN_VALUE;
}
}

protected final void initFIYEARI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYEARI = false;
} else {
FIYEARI = true;
}
}
}

protected final void initFIYR(String s) {
if (!s.trim().isEmpty()) {
FIYR = Double.parseDouble(s);
} else {
FIYR = Double.NaN;
}
}

protected final void initFIYRB(String s) {
if (!s.trim().isEmpty()) {
FIYRB = Double.parseDouble(s);
} else {
FIYRB = Double.NaN;
}
}

protected final void initFIYRBI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRBI = false;
} else {
FIYRBI = true;
}
}
}

protected final void initFIYRDI(String s) {
if (!s.trim().isEmpty()) {
FIYRDI = Short.parseShort(s);
} else {
FIYRDI = Short.MIN_VALUE;
}
}

protected final void initFIYRDII(String s) {
if (!s.trim().isEmpty()) {
FIYRDII = Short.parseShort(s);
} else {
FIYRDII = Short.MIN_VALUE;
}
}

protected final void initFIYRDIU(String s) {
if (!s.trim().isEmpty()) {
FIYRDIU = Byte.parseByte(s);
} else {
FIYRDIU = Byte.MIN_VALUE;
}
}

protected final void initFIYRI(String s) {
if (!s.trim().isEmpty()) {
FIYRI = Double.parseDouble(s);
} else {
FIYRI = Double.NaN;
}
}

protected final void initFIYRII(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRII = false;
} else {
FIYRII = true;
}
}
}

protected final void initFIYRL(String s) {
if (!s.trim().isEmpty()) {
FIYRL = Double.parseDouble(s);
} else {
FIYRL = Double.NaN;
}
}

protected final void initFIYRLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRLI = false;
} else {
FIYRLI = true;
}
}
}

protected final void initFIYRNL(String s) {
if (!s.trim().isEmpty()) {
FIYRNL = Double.parseDouble(s);
} else {
FIYRNL = Double.NaN;
}
}

protected final void initFIYRNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRNLI = false;
} else {
FIYRNLI = true;
}
}
}

protected final void initFIYRP(String s) {
if (!s.trim().isEmpty()) {
FIYRP = Double.parseDouble(s);
} else {
FIYRP = Double.NaN;
}
}

protected final void initFIYRPI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRPI = false;
} else {
FIYRPI = true;
}
}
}

protected final void initFIYRT(String s) {
if (!s.trim().isEmpty()) {
FIYRT = Double.parseDouble(s);
} else {
FIYRT = Double.NaN;
}
}

protected final void initFIYRTI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRTI = false;
} else {
FIYRTI = true;
}
}
}

protected final void initFNPID_BH(String s) {
if (!s.trim().isEmpty()) {
FNPID_BH = Integer.parseInt(s);
} else {
FNPID_BH = Integer.MIN_VALUE;
}
}

protected final void initFRNA(String s) {
if (!s.trim().isEmpty()) {
FRNA = Byte.parseByte(s);
} else {
FRNA = Byte.MIN_VALUE;
}
}

protected final void initFRNB(String s) {
if (!s.trim().isEmpty()) {
FRNB = Byte.parseByte(s);
} else {
FRNB = Byte.MIN_VALUE;
}
}

protected final void initFRNC(String s) {
if (!s.trim().isEmpty()) {
FRNC = Byte.parseByte(s);
} else {
FRNC = Byte.MIN_VALUE;
}
}

protected final void initFTEXA(String s) {
if (!s.trim().isEmpty()) {
FTEXA = Short.parseShort(s);
} else {
FTEXA = Short.MIN_VALUE;
}
}

protected final void initFTEXA1(String s) {
if (!s.trim().isEmpty()) {
FTEXA1 = Short.parseShort(s);
} else {
FTEXA1 = Short.MIN_VALUE;
}
}

protected final void initFTEXA2(String s) {
if (!s.trim().isEmpty()) {
FTEXA2 = Short.parseShort(s);
} else {
FTEXA2 = Short.MIN_VALUE;
}
}

protected final void initFTEXA3(String s) {
if (!s.trim().isEmpty()) {
FTEXA3 = Short.parseShort(s);
} else {
FTEXA3 = Short.MIN_VALUE;
}
}

protected final void initFTEXA4(String s) {
if (!s.trim().isEmpty()) {
FTEXA4 = Short.parseShort(s);
} else {
FTEXA4 = Short.MIN_VALUE;
}
}

protected final void initFTEXA5(String s) {
if (!s.trim().isEmpty()) {
FTEXA5 = Short.parseShort(s);
} else {
FTEXA5 = Short.MIN_VALUE;
}
}

protected final void initFTEXA6(String s) {
if (!s.trim().isEmpty()) {
FTEXA6 = Short.parseShort(s);
} else {
FTEXA6 = Short.MIN_VALUE;
}
}

protected final void initFTEXAV(String s) {
if (!s.trim().isEmpty()) {
FTEXAV = Short.parseShort(s);
} else {
FTEXAV = Short.MIN_VALUE;
}
}

protected final void initFTEXAW(String s) {
if (!s.trim().isEmpty()) {
FTEXAW = Double.parseDouble(s);
} else {
FTEXAW = Double.NaN;
}
}

protected final void initFTEXB(String s) {
if (!s.trim().isEmpty()) {
FTEXB = Short.parseShort(s);
} else {
FTEXB = Short.MIN_VALUE;
}
}

protected final void initFTEXB1(String s) {
if (!s.trim().isEmpty()) {
FTEXB1 = Short.parseShort(s);
} else {
FTEXB1 = Short.MIN_VALUE;
}
}

protected final void initFTEXB2(String s) {
if (!s.trim().isEmpty()) {
FTEXB2 = Short.parseShort(s);
} else {
FTEXB2 = Short.MIN_VALUE;
}
}

protected final void initFTEXB3(String s) {
if (!s.trim().isEmpty()) {
FTEXB3 = Short.parseShort(s);
} else {
FTEXB3 = Short.MIN_VALUE;
}
}

protected final void initFTEXB4(String s) {
if (!s.trim().isEmpty()) {
FTEXB4 = Short.parseShort(s);
} else {
FTEXB4 = Short.MIN_VALUE;
}
}

protected final void initFTEXB5(String s) {
if (!s.trim().isEmpty()) {
FTEXB5 = Short.parseShort(s);
} else {
FTEXB5 = Short.MIN_VALUE;
}
}

protected final void initFTEXB6(String s) {
if (!s.trim().isEmpty()) {
FTEXB6 = Short.parseShort(s);
} else {
FTEXB6 = Short.MIN_VALUE;
}
}

protected final void initFTEXBV(String s) {
if (!s.trim().isEmpty()) {
FTEXBV = Short.parseShort(s);
} else {
FTEXBV = Short.MIN_VALUE;
}
}

protected final void initFTEXBW(String s) {
if (!s.trim().isEmpty()) {
FTEXBW = Double.parseDouble(s);
} else {
FTEXBW = Double.NaN;
}
}

protected final void initFTEXC(String s) {
if (!s.trim().isEmpty()) {
FTEXC = Short.parseShort(s);
} else {
FTEXC = Short.MIN_VALUE;
}
}

protected final void initFTEXC1(String s) {
if (!s.trim().isEmpty()) {
FTEXC1 = Short.parseShort(s);
} else {
FTEXC1 = Short.MIN_VALUE;
}
}

protected final void initFTEXC2(String s) {
if (!s.trim().isEmpty()) {
FTEXC2 = Short.parseShort(s);
} else {
FTEXC2 = Short.MIN_VALUE;
}
}

protected final void initFTEXC3(String s) {
if (!s.trim().isEmpty()) {
FTEXC3 = Short.parseShort(s);
} else {
FTEXC3 = Short.MIN_VALUE;
}
}

protected final void initFTEXC4(String s) {
if (!s.trim().isEmpty()) {
FTEXC4 = Short.parseShort(s);
} else {
FTEXC4 = Short.MIN_VALUE;
}
}

protected final void initFTEXC5(String s) {
if (!s.trim().isEmpty()) {
FTEXC5 = Short.parseShort(s);
} else {
FTEXC5 = Short.MIN_VALUE;
}
}

protected final void initFTEXC6(String s) {
if (!s.trim().isEmpty()) {
FTEXC6 = Short.parseShort(s);
} else {
FTEXC6 = Short.MIN_VALUE;
}
}

protected final void initFTEXCV(String s) {
if (!s.trim().isEmpty()) {
FTEXCV = Short.parseShort(s);
} else {
FTEXCV = Short.MIN_VALUE;
}
}

protected final void initFTEXCW(String s) {
if (!s.trim().isEmpty()) {
FTEXCW = Double.parseDouble(s);
} else {
FTEXCW = Double.NaN;
}
}

protected final void initFTEXHH(String s) {
if (!s.trim().isEmpty()) {
FTEXHH = Short.parseShort(s);
} else {
FTEXHH = Short.MIN_VALUE;
}
}

protected final void initHGEMP(String s) {
if (!s.trim().isEmpty()) {
HGEMP = Byte.parseByte(s);
} else {
HGEMP = Byte.MIN_VALUE;
}
}

protected final void initHGR2R(String s) {
if (!s.trim().isEmpty()) {
HGR2R = Short.parseShort(s);
} else {
HGR2R = Short.MIN_VALUE;
}
}

protected final void initHGRA(String s) {
if (!s.trim().isEmpty()) {
HGRA = Short.parseShort(s);
} else {
HGRA = Short.MIN_VALUE;
}
}

protected final void initHGSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
HGSEX = false;
} else {
HGSEX = true;
}
}
}

protected final void initHHCH12(String s) {
if (!s.trim().isEmpty()) {
HHCH12 = Short.parseShort(s);
} else {
HHCH12 = Short.MIN_VALUE;
}
}

protected final void initHHMEM(String s) {
if (!s.trim().isEmpty()) {
HHMEM = Short.parseShort(s);
} else {
HHMEM = Short.MIN_VALUE;
}
}

protected final void initHHSIZE(String s) {
if (!s.trim().isEmpty()) {
HHSIZE = Short.parseShort(s);
} else {
HHSIZE = Short.MIN_VALUE;
}
}

protected final void initHHTYPE(String s) {
if (!s.trim().isEmpty()) {
HHTYPE = Short.parseShort(s);
} else {
HHTYPE = Short.MIN_VALUE;
}
}

protected final void initHID(String s) {
if (!s.trim().isEmpty()) {
HID = Integer.parseInt(s);
} else {
HID = Integer.MIN_VALUE;
}
}

protected final void initHIQUALB_DV(String s) {
if (!s.trim().isEmpty()) {
HIQUALB_DV = Short.parseShort(s);
} else {
HIQUALB_DV = Short.MIN_VALUE;
}
}

protected final void initHL2GP(String s) {
if (!s.trim().isEmpty()) {
HL2GP = Short.parseShort(s);
} else {
HL2GP = Short.MIN_VALUE;
}
}

protected final void initHL2HOP(String s) {
if (!s.trim().isEmpty()) {
HL2HOP = Byte.parseByte(s);
} else {
HL2HOP = Byte.MIN_VALUE;
}
}

protected final void initHLCK(String s) {
if (!s.trim().isEmpty()) {
HLCK = Short.parseShort(s);
} else {
HLCK = Short.MIN_VALUE;
}
}

protected final void initHLCKA(String s) {
if (!s.trim().isEmpty()) {
HLCKA = Short.parseShort(s);
} else {
HLCKA = Short.MIN_VALUE;
}
}

protected final void initHLCKAN(String s) {
if (!s.trim().isEmpty()) {
HLCKAN = Short.parseShort(s);
} else {
HLCKAN = Short.MIN_VALUE;
}
}

protected final void initHLCKB(String s) {
if (!s.trim().isEmpty()) {
HLCKB = Short.parseShort(s);
} else {
HLCKB = Short.MIN_VALUE;
}
}

protected final void initHLCKBN(String s) {
if (!s.trim().isEmpty()) {
HLCKBN = Short.parseShort(s);
} else {
HLCKBN = Short.MIN_VALUE;
}
}

protected final void initHLCKC(String s) {
if (!s.trim().isEmpty()) {
HLCKC = Short.parseShort(s);
} else {
HLCKC = Short.MIN_VALUE;
}
}

protected final void initHLCKCN(String s) {
if (!s.trim().isEmpty()) {
HLCKCN = Short.parseShort(s);
} else {
HLCKCN = Short.MIN_VALUE;
}
}

protected final void initHLCKD(String s) {
if (!s.trim().isEmpty()) {
HLCKD = Short.parseShort(s);
} else {
HLCKD = Short.MIN_VALUE;
}
}

protected final void initHLCKDN(String s) {
if (!s.trim().isEmpty()) {
HLCKDN = Short.parseShort(s);
} else {
HLCKDN = Short.MIN_VALUE;
}
}

protected final void initHLCKE(String s) {
if (!s.trim().isEmpty()) {
HLCKE = Short.parseShort(s);
} else {
HLCKE = Short.MIN_VALUE;
}
}

protected final void initHLCKEN(String s) {
if (!s.trim().isEmpty()) {
HLCKEN = Short.parseShort(s);
} else {
HLCKEN = Short.MIN_VALUE;
}
}

protected final void initHLCKF(String s) {
if (!s.trim().isEmpty()) {
HLCKF = Short.parseShort(s);
} else {
HLCKF = Short.MIN_VALUE;
}
}

protected final void initHLCKFN(String s) {
if (!s.trim().isEmpty()) {
HLCKFN = Short.parseShort(s);
} else {
HLCKFN = Short.MIN_VALUE;
}
}

protected final void initHLCKG(String s) {
if (!s.trim().isEmpty()) {
HLCKG = Short.parseShort(s);
} else {
HLCKG = Short.MIN_VALUE;
}
}

protected final void initHLCKGN(String s) {
if (!s.trim().isEmpty()) {
HLCKGN = Short.parseShort(s);
} else {
HLCKGN = Short.MIN_VALUE;
}
}

protected final void initHLCKH(String s) {
if (!s.trim().isEmpty()) {
HLCKH = Short.parseShort(s);
} else {
HLCKH = Short.MIN_VALUE;
}
}

protected final void initHLCKHN(String s) {
if (!s.trim().isEmpty()) {
HLCKHN = Short.parseShort(s);
} else {
HLCKHN = Short.MIN_VALUE;
}
}

protected final void initHLCKI(String s) {
if (!s.trim().isEmpty()) {
HLCKI = Short.parseShort(s);
} else {
HLCKI = Short.MIN_VALUE;
}
}

protected final void initHLCKIN(String s) {
if (!s.trim().isEmpty()) {
HLCKIN = Short.parseShort(s);
} else {
HLCKIN = Short.MIN_VALUE;
}
}

protected final void initHLCVR(String s) {
if (!s.trim().isEmpty()) {
HLCVR = Short.parseShort(s);
} else {
HLCVR = Short.MIN_VALUE;
}
}

protected final void initHLCVRH(String s) {
if (!s.trim().isEmpty()) {
HLCVRH = Short.parseShort(s);
} else {
HLCVRH = Short.MIN_VALUE;
}
}

protected final void initHLCVRL(String s) {
if (!s.trim().isEmpty()) {
HLCVRL = Short.parseShort(s);
} else {
HLCVRL = Short.MIN_VALUE;
}
}

protected final void initHLDSBL(String s) {
if (!s.trim().isEmpty()) {
HLDSBL = Short.parseShort(s);
} else {
HLDSBL = Short.MIN_VALUE;
}
}

protected final void initHLENDW(String s) {
if (!s.trim().isEmpty()) {
HLENDW = Short.parseShort(s);
} else {
HLENDW = Short.MIN_VALUE;
}
}

protected final void initHLIV65(String s) {
if (!s.trim().isEmpty()) {
HLIV65 = Byte.parseByte(s);
} else {
HLIV65 = Byte.MIN_VALUE;
}
}

protected final void initHLLT(String s) {
if (!s.trim().isEmpty()) {
HLLT = Byte.parseByte(s);
} else {
HLLT = Byte.MIN_VALUE;
}
}

protected final void initHLLTA(String s) {
if (!s.trim().isEmpty()) {
HLLTA = Short.parseShort(s);
} else {
HLLTA = Short.MIN_VALUE;
}
}

protected final void initHLLTB(String s) {
if (!s.trim().isEmpty()) {
HLLTB = Short.parseShort(s);
} else {
HLLTB = Short.MIN_VALUE;
}
}

protected final void initHLLTC(String s) {
if (!s.trim().isEmpty()) {
HLLTC = Short.parseShort(s);
} else {
HLLTC = Short.MIN_VALUE;
}
}

protected final void initHLLTD(String s) {
if (!s.trim().isEmpty()) {
HLLTD = Short.parseShort(s);
} else {
HLLTD = Short.MIN_VALUE;
}
}

protected final void initHLLTE(String s) {
if (!s.trim().isEmpty()) {
HLLTE = Short.parseShort(s);
} else {
HLLTE = Short.MIN_VALUE;
}
}

protected final void initHLLTW(String s) {
if (!s.trim().isEmpty()) {
HLLTW = Byte.parseByte(s);
} else {
HLLTW = Byte.MIN_VALUE;
}
}

protected final void initHLLTWA(String s) {
if (!s.trim().isEmpty()) {
HLLTWA = Short.parseShort(s);
} else {
HLLTWA = Short.MIN_VALUE;
}
}

protected final void initHLPRB(String s) {
if (!s.trim().isEmpty()) {
HLPRB = Short.parseShort(s);
} else {
HLPRB = Short.MIN_VALUE;
}
}

protected final void initHLPRBA(String s) {
if (!s.trim().isEmpty()) {
HLPRBA = Short.parseShort(s);
} else {
HLPRBA = Short.MIN_VALUE;
}
}

protected final void initHLPRBB(String s) {
if (!s.trim().isEmpty()) {
HLPRBB = Short.parseShort(s);
} else {
HLPRBB = Short.MIN_VALUE;
}
}

protected final void initHLPRBC(String s) {
if (!s.trim().isEmpty()) {
HLPRBC = Short.parseShort(s);
} else {
HLPRBC = Short.MIN_VALUE;
}
}

protected final void initHLPRBD(String s) {
if (!s.trim().isEmpty()) {
HLPRBD = Short.parseShort(s);
} else {
HLPRBD = Short.MIN_VALUE;
}
}

protected final void initHLPRBE(String s) {
if (!s.trim().isEmpty()) {
HLPRBE = Short.parseShort(s);
} else {
HLPRBE = Short.MIN_VALUE;
}
}

protected final void initHLPRBF(String s) {
if (!s.trim().isEmpty()) {
HLPRBF = Short.parseShort(s);
} else {
HLPRBF = Short.MIN_VALUE;
}
}

protected final void initHLPRBG(String s) {
if (!s.trim().isEmpty()) {
HLPRBG = Short.parseShort(s);
} else {
HLPRBG = Short.MIN_VALUE;
}
}

protected final void initHLPRBH(String s) {
if (!s.trim().isEmpty()) {
HLPRBH = Short.parseShort(s);
} else {
HLPRBH = Short.MIN_VALUE;
}
}

protected final void initHLPRBI(String s) {
if (!s.trim().isEmpty()) {
HLPRBI = Short.parseShort(s);
} else {
HLPRBI = Short.MIN_VALUE;
}
}

protected final void initHLPRBJ(String s) {
if (!s.trim().isEmpty()) {
HLPRBJ = Short.parseShort(s);
} else {
HLPRBJ = Short.MIN_VALUE;
}
}

protected final void initHLPRBK(String s) {
if (!s.trim().isEmpty()) {
HLPRBK = Short.parseShort(s);
} else {
HLPRBK = Short.MIN_VALUE;
}
}

protected final void initHLPRBL(String s) {
if (!s.trim().isEmpty()) {
HLPRBL = Short.parseShort(s);
} else {
HLPRBL = Short.MIN_VALUE;
}
}

protected final void initHLPRBM(String s) {
if (!s.trim().isEmpty()) {
HLPRBM = Short.parseShort(s);
} else {
HLPRBM = Short.MIN_VALUE;
}
}

protected final void initHLSTAT(String s) {
if (!s.trim().isEmpty()) {
HLSTAT = Short.parseShort(s);
} else {
HLSTAT = Short.MIN_VALUE;
}
}

protected final void initHLSV(String s) {
if (!s.trim().isEmpty()) {
HLSV = Short.parseShort(s);
} else {
HLSV = Short.MIN_VALUE;
}
}

protected final void initHLSVA(String s) {
if (!s.trim().isEmpty()) {
HLSVA = Short.parseShort(s);
} else {
HLSVA = Short.MIN_VALUE;
}
}

protected final void initHLSVAF(String s) {
if (!s.trim().isEmpty()) {
HLSVAF = Short.parseShort(s);
} else {
HLSVAF = Short.MIN_VALUE;
}
}

protected final void initHLSVAN(String s) {
if (!s.trim().isEmpty()) {
HLSVAN = Short.parseShort(s);
} else {
HLSVAN = Short.MIN_VALUE;
}
}

protected final void initHLSVB(String s) {
if (!s.trim().isEmpty()) {
HLSVB = Short.parseShort(s);
} else {
HLSVB = Short.MIN_VALUE;
}
}

protected final void initHLSVBF(String s) {
if (!s.trim().isEmpty()) {
HLSVBF = Short.parseShort(s);
} else {
HLSVBF = Short.MIN_VALUE;
}
}

protected final void initHLSVBN(String s) {
if (!s.trim().isEmpty()) {
HLSVBN = Short.parseShort(s);
} else {
HLSVBN = Short.MIN_VALUE;
}
}

protected final void initHLSVC(String s) {
if (!s.trim().isEmpty()) {
HLSVC = Short.parseShort(s);
} else {
HLSVC = Short.MIN_VALUE;
}
}

protected final void initHLSVCF(String s) {
if (!s.trim().isEmpty()) {
HLSVCF = Short.parseShort(s);
} else {
HLSVCF = Short.MIN_VALUE;
}
}

protected final void initHLSVCN(String s) {
if (!s.trim().isEmpty()) {
HLSVCN = Short.parseShort(s);
} else {
HLSVCN = Short.MIN_VALUE;
}
}

protected final void initHLSVD(String s) {
if (!s.trim().isEmpty()) {
HLSVD = Short.parseShort(s);
} else {
HLSVD = Short.MIN_VALUE;
}
}

protected final void initHLSVDF(String s) {
if (!s.trim().isEmpty()) {
HLSVDF = Short.parseShort(s);
} else {
HLSVDF = Short.MIN_VALUE;
}
}

protected final void initHLSVDN(String s) {
if (!s.trim().isEmpty()) {
HLSVDN = Short.parseShort(s);
} else {
HLSVDN = Short.MIN_VALUE;
}
}

protected final void initHLSVE(String s) {
if (!s.trim().isEmpty()) {
HLSVE = Short.parseShort(s);
} else {
HLSVE = Short.MIN_VALUE;
}
}

protected final void initHLSVEF(String s) {
if (!s.trim().isEmpty()) {
HLSVEF = Short.parseShort(s);
} else {
HLSVEF = Short.MIN_VALUE;
}
}

protected final void initHLSVEN(String s) {
if (!s.trim().isEmpty()) {
HLSVEN = Short.parseShort(s);
} else {
HLSVEN = Short.MIN_VALUE;
}
}

protected final void initHLSVF(String s) {
if (!s.trim().isEmpty()) {
HLSVF = Short.parseShort(s);
} else {
HLSVF = Short.MIN_VALUE;
}
}

protected final void initHLSVFF(String s) {
if (!s.trim().isEmpty()) {
HLSVFF = Short.parseShort(s);
} else {
HLSVFF = Short.MIN_VALUE;
}
}

protected final void initHLSVFN(String s) {
if (!s.trim().isEmpty()) {
HLSVFN = Short.parseShort(s);
} else {
HLSVFN = Short.MIN_VALUE;
}
}

protected final void initHLSVG(String s) {
if (!s.trim().isEmpty()) {
HLSVG = Short.parseShort(s);
} else {
HLSVG = Short.MIN_VALUE;
}
}

protected final void initHLSVGF(String s) {
if (!s.trim().isEmpty()) {
HLSVGF = Short.parseShort(s);
} else {
HLSVGF = Short.MIN_VALUE;
}
}

protected final void initHLSVGN(String s) {
if (!s.trim().isEmpty()) {
HLSVGN = Short.parseShort(s);
} else {
HLSVGN = Short.MIN_VALUE;
}
}

protected final void initHLSVH(String s) {
if (!s.trim().isEmpty()) {
HLSVH = Short.parseShort(s);
} else {
HLSVH = Short.MIN_VALUE;
}
}

protected final void initHLSVHF(String s) {
if (!s.trim().isEmpty()) {
HLSVHF = Byte.parseByte(s);
} else {
HLSVHF = Byte.MIN_VALUE;
}
}

protected final void initHLSVHN(String s) {
if (!s.trim().isEmpty()) {
HLSVHN = Byte.parseByte(s);
} else {
HLSVHN = Byte.MIN_VALUE;
}
}

protected final void initHLSVI(String s) {
if (!s.trim().isEmpty()) {
HLSVI = Short.parseShort(s);
} else {
HLSVI = Short.MIN_VALUE;
}
}

protected final void initHLSVIF(String s) {
if (!s.trim().isEmpty()) {
HLSVIF = Short.parseShort(s);
} else {
HLSVIF = Short.MIN_VALUE;
}
}

protected final void initHLSVIN(String s) {
if (!s.trim().isEmpty()) {
HLSVIN = Short.parseShort(s);
} else {
HLSVIN = Short.MIN_VALUE;
}
}

protected final void initHLSVJ(String s) {
if (!s.trim().isEmpty()) {
HLSVJ = Short.parseShort(s);
} else {
HLSVJ = Short.MIN_VALUE;
}
}

protected final void initHLSVJF(String s) {
if (!s.trim().isEmpty()) {
HLSVJF = Short.parseShort(s);
} else {
HLSVJF = Short.MIN_VALUE;
}
}

protected final void initHLSVJN(String s) {
if (!s.trim().isEmpty()) {
HLSVJN = Short.parseShort(s);
} else {
HLSVJN = Short.MIN_VALUE;
}
}

protected final void initHLSVK(String s) {
if (!s.trim().isEmpty()) {
HLSVK = Short.parseShort(s);
} else {
HLSVK = Short.MIN_VALUE;
}
}

protected final void initHLSVKF(String s) {
if (!s.trim().isEmpty()) {
HLSVKF = Short.parseShort(s);
} else {
HLSVKF = Short.MIN_VALUE;
}
}

protected final void initHLSVKN(String s) {
if (!s.trim().isEmpty()) {
HLSVKN = Short.parseShort(s);
} else {
HLSVKN = Short.MIN_VALUE;
}
}

protected final void initHLSVL(String s) {
if (!s.trim().isEmpty()) {
HLSVL = Short.parseShort(s);
} else {
HLSVL = Short.MIN_VALUE;
}
}

protected final void initHLSVLF(String s) {
if (!s.trim().isEmpty()) {
HLSVLF = Short.parseShort(s);
} else {
HLSVLF = Short.MIN_VALUE;
}
}

protected final void initHLSVLN(String s) {
if (!s.trim().isEmpty()) {
HLSVLN = Short.parseShort(s);
} else {
HLSVLN = Short.MIN_VALUE;
}
}

protected final void initHLSVM(String s) {
if (!s.trim().isEmpty()) {
HLSVM = Short.parseShort(s);
} else {
HLSVM = Short.MIN_VALUE;
}
}

protected final void initHLSVMF(String s) {
if (!s.trim().isEmpty()) {
HLSVMF = Short.parseShort(s);
} else {
HLSVMF = Short.MIN_VALUE;
}
}

protected final void initHLSVMN(String s) {
if (!s.trim().isEmpty()) {
HLSVMN = Short.parseShort(s);
} else {
HLSVMN = Short.MIN_VALUE;
}
}

protected final void initHOH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
HOH = false;
} else {
HOH = true;
}
}
}

protected final void initHOSP(String s) {
if (!s.trim().isEmpty()) {
HOSP = Short.parseShort(s);
} else {
HOSP = Short.MIN_VALUE;
}
}

protected final void initHOSPCH(String s) {
if (!s.trim().isEmpty()) {
HOSPCH = Short.parseShort(s);
} else {
HOSPCH = Short.MIN_VALUE;
}
}

protected final void initHOSPD(String s) {
if (!s.trim().isEmpty()) {
HOSPD = Short.parseShort(s);
} else {
HOSPD = Short.MIN_VALUE;
}
}

protected final void initHOSPNHS(String s) {
if (!s.trim().isEmpty()) {
HOSPNHS = Short.parseShort(s);
} else {
HOSPNHS = Short.MIN_VALUE;
}
}

protected final void initHOWLNG(String s) {
if (!s.trim().isEmpty()) {
HOWLNG = Short.parseShort(s);
} else {
HOWLNG = Short.MIN_VALUE;
}
}

protected final void initHUBUYS(String s) {
if (!s.trim().isEmpty()) {
HUBUYS = Short.parseShort(s);
} else {
HUBUYS = Short.MIN_VALUE;
}
}

protected final void initHUBUYS_BH(String s) {
if (!s.trim().isEmpty()) {
HUBUYS_BH = Short.parseShort(s);
} else {
HUBUYS_BH = Short.MIN_VALUE;
}
}

protected final void initHUFRYS(String s) {
if (!s.trim().isEmpty()) {
HUFRYS = Short.parseShort(s);
} else {
HUFRYS = Short.MIN_VALUE;
}
}

protected final void initHUFRYS_BH(String s) {
if (!s.trim().isEmpty()) {
HUFRYS_BH = Short.parseShort(s);
} else {
HUFRYS_BH = Short.MIN_VALUE;
}
}

protected final void initHUIRON(String s) {
if (!s.trim().isEmpty()) {
HUIRON = Short.parseShort(s);
} else {
HUIRON = Short.MIN_VALUE;
}
}

protected final void initHUIRON_BH(String s) {
if (!s.trim().isEmpty()) {
HUIRON_BH = Short.parseShort(s);
} else {
HUIRON_BH = Short.MIN_VALUE;
}
}

protected final void initHUMOPS(String s) {
if (!s.trim().isEmpty()) {
HUMOPS = Short.parseShort(s);
} else {
HUMOPS = Short.MIN_VALUE;
}
}

protected final void initHUMOPS_BH(String s) {
if (!s.trim().isEmpty()) {
HUMOPS_BH = Short.parseShort(s);
} else {
HUMOPS_BH = Short.MIN_VALUE;
}
}

protected final void initHUNURS(String s) {
if (!s.trim().isEmpty()) {
HUNURS = Short.parseShort(s);
} else {
HUNURS = Short.MIN_VALUE;
}
}

protected final void initHUSITS(String s) {
if (!s.trim().isEmpty()) {
HUSITS = Short.parseShort(s);
} else {
HUSITS = Short.MIN_VALUE;
}
}

protected final void initHUXPCH(String s) {
if (!s.trim().isEmpty()) {
HUXPCH = Short.parseShort(s);
} else {
HUXPCH = Short.MIN_VALUE;
}
}

protected final void initIENDDATHM(String s) {
if (!s.trim().isEmpty()) {
IENDDATHM = Short.parseShort(s);
} else {
IENDDATHM = Short.MIN_VALUE;
}
}

protected final void initIODC(String s) {
if (!s.trim().isEmpty()) {
IODC = Short.parseShort(s);
} else {
IODC = Short.MIN_VALUE;
}
}

protected final void initISCED(String s) {
if (!s.trim().isEmpty()) {
ISCED = Short.parseShort(s);
} else {
ISCED = Short.MIN_VALUE;
}
}

protected final void initISTRTDATHM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATHM = Short.parseShort(s);
} else {
ISTRTDATHM = Short.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initIV2(String s) {
if (!s.trim().isEmpty()) {
IV2 = Short.parseShort(s);
} else {
IV2 = Short.MIN_VALUE;
}
}

protected final void initIV4(String s) {
if (!s.trim().isEmpty()) {
IV4 = Short.parseShort(s);
} else {
IV4 = Short.MIN_VALUE;
}
}

protected final void initIV5(String s) {
if (!s.trim().isEmpty()) {
IV5 = Short.parseShort(s);
} else {
IV5 = Short.MIN_VALUE;
}
}

protected final void initIV6A(String s) {
if (!s.trim().isEmpty()) {
IV6A = Short.parseShort(s);
} else {
IV6A = Short.MIN_VALUE;
}
}

protected final void initIV6B(String s) {
if (!s.trim().isEmpty()) {
IV6B = Short.parseShort(s);
} else {
IV6B = Short.MIN_VALUE;
}
}

protected final void initIV6C(String s) {
if (!s.trim().isEmpty()) {
IV6C = Short.parseShort(s);
} else {
IV6C = Short.MIN_VALUE;
}
}

protected final void initIV6D(String s) {
if (!s.trim().isEmpty()) {
IV6D = Short.parseShort(s);
} else {
IV6D = Short.MIN_VALUE;
}
}

protected final void initIV6E(String s) {
if (!s.trim().isEmpty()) {
IV6E = Short.parseShort(s);
} else {
IV6E = Short.MIN_VALUE;
}
}

protected final void initIV6F(String s) {
if (!s.trim().isEmpty()) {
IV6F = Short.parseShort(s);
} else {
IV6F = Short.MIN_VALUE;
}
}

protected final void initIV7(String s) {
if (!s.trim().isEmpty()) {
IV7 = Short.parseShort(s);
} else {
IV7 = Short.MIN_VALUE;
}
}

protected final void initIVDA(String s) {
if (!s.trim().isEmpty()) {
IVDA = Byte.parseByte(s);
} else {
IVDA = Byte.MIN_VALUE;
}
}

protected final void initIVDB(String s) {
if (!s.trim().isEmpty()) {
IVDB = Byte.parseByte(s);
} else {
IVDB = Byte.MIN_VALUE;
}
}

protected final void initIVDC(String s) {
if (!s.trim().isEmpty()) {
IVDC = Byte.parseByte(s);
} else {
IVDC = Byte.MIN_VALUE;
}
}

protected final void initIVDD(String s) {
if (!s.trim().isEmpty()) {
IVDD = Byte.parseByte(s);
} else {
IVDD = Byte.MIN_VALUE;
}
}

protected final void initIVDE(String s) {
if (!s.trim().isEmpty()) {
IVDE = Byte.parseByte(s);
} else {
IVDE = Byte.MIN_VALUE;
}
}

protected final void initIVEA(String s) {
if (!s.trim().isEmpty()) {
IVEA = Short.parseShort(s);
} else {
IVEA = Short.MIN_VALUE;
}
}

protected final void initIVEB(String s) {
if (!s.trim().isEmpty()) {
IVEB = Short.parseShort(s);
} else {
IVEB = Short.MIN_VALUE;
}
}

protected final void initIVEC(String s) {
if (!s.trim().isEmpty()) {
IVEC = Short.parseShort(s);
} else {
IVEC = Short.MIN_VALUE;
}
}

protected final void initIVED(String s) {
if (!s.trim().isEmpty()) {
IVED = Short.parseShort(s);
} else {
IVED = Short.MIN_VALUE;
}
}

protected final void initIVEE(String s) {
if (!s.trim().isEmpty()) {
IVEE = Short.parseShort(s);
} else {
IVEE = Short.MIN_VALUE;
}
}

protected final void initIVFA(String s) {
if (!s.trim().isEmpty()) {
IVFA = Short.parseShort(s);
} else {
IVFA = Short.MIN_VALUE;
}
}

protected final void initIVFB(String s) {
if (!s.trim().isEmpty()) {
IVFB = Short.parseShort(s);
} else {
IVFB = Short.MIN_VALUE;
}
}

protected final void initIVFC(String s) {
if (!s.trim().isEmpty()) {
IVFC = Short.parseShort(s);
} else {
IVFC = Short.MIN_VALUE;
}
}

protected final void initIVFD(String s) {
if (!s.trim().isEmpty()) {
IVFD = Short.parseShort(s);
} else {
IVFD = Short.MIN_VALUE;
}
}

protected final void initIVFE(String s) {
if (!s.trim().isEmpty()) {
IVFE = Short.parseShort(s);
} else {
IVFE = Short.MIN_VALUE;
}
}

protected final void initIVIOW7(String s) {
if (!s.trim().isEmpty()) {
IVIOW7 = Byte.parseByte(s);
} else {
IVIOW7 = Byte.MIN_VALUE;
}
}

protected final void initIVJA(String s) {
if (!s.trim().isEmpty()) {
IVJA = Short.parseShort(s);
} else {
IVJA = Short.MIN_VALUE;
}
}

protected final void initIVJB(String s) {
if (!s.trim().isEmpty()) {
IVJB = Short.parseShort(s);
} else {
IVJB = Short.MIN_VALUE;
}
}

protected final void initIVJC(String s) {
if (!s.trim().isEmpty()) {
IVJC = Short.parseShort(s);
} else {
IVJC = Short.MIN_VALUE;
}
}

protected final void initIVJD(String s) {
if (!s.trim().isEmpty()) {
IVJD = Short.parseShort(s);
} else {
IVJD = Short.MIN_VALUE;
}
}

protected final void initIVJE(String s) {
if (!s.trim().isEmpty()) {
IVJE = Short.parseShort(s);
} else {
IVJE = Short.MIN_VALUE;
}
}

protected final void initIVLPAR(String s) {
if (!s.trim().isEmpty()) {
IVLPAR = Byte.parseByte(s);
} else {
IVLPAR = Byte.MIN_VALUE;
}
}

protected final void initIVLPARY(String s) {
if (!s.trim().isEmpty()) {
IVLPARY = Byte.parseByte(s);
} else {
IVLPARY = Byte.MIN_VALUE;
}
}

protected final void initIVLYR(String s) {
if (!s.trim().isEmpty()) {
IVLYR = Short.parseShort(s);
} else {
IVLYR = Short.MIN_VALUE;
}
}

protected final void initIVMA(String s) {
if (!s.trim().isEmpty()) {
IVMA = Short.parseShort(s);
} else {
IVMA = Short.MIN_VALUE;
}
}

protected final void initIVMB(String s) {
if (!s.trim().isEmpty()) {
IVMB = Short.parseShort(s);
} else {
IVMB = Short.MIN_VALUE;
}
}

protected final void initIVMC(String s) {
if (!s.trim().isEmpty()) {
IVMC = Short.parseShort(s);
} else {
IVMC = Short.MIN_VALUE;
}
}

protected final void initIVMD(String s) {
if (!s.trim().isEmpty()) {
IVMD = Short.parseShort(s);
} else {
IVMD = Short.MIN_VALUE;
}
}

protected final void initIVME(String s) {
if (!s.trim().isEmpty()) {
IVME = Short.parseShort(s);
} else {
IVME = Short.MIN_VALUE;
}
}

protected final void initIVPA(String s) {
if (!s.trim().isEmpty()) {
IVPA = Short.parseShort(s);
} else {
IVPA = Short.MIN_VALUE;
}
}

protected final void initIVPB(String s) {
if (!s.trim().isEmpty()) {
IVPB = Short.parseShort(s);
} else {
IVPB = Short.MIN_VALUE;
}
}

protected final void initIVPC(String s) {
if (!s.trim().isEmpty()) {
IVPC = Short.parseShort(s);
} else {
IVPC = Short.MIN_VALUE;
}
}

protected final void initIVPD(String s) {
if (!s.trim().isEmpty()) {
IVPD = Short.parseShort(s);
} else {
IVPD = Short.MIN_VALUE;
}
}

protected final void initIVPE(String s) {
if (!s.trim().isEmpty()) {
IVPE = Short.parseShort(s);
} else {
IVPE = Short.MIN_VALUE;
}
}

protected final void initIVSC(String s) {
if (!s.trim().isEmpty()) {
IVSC = Short.parseShort(s);
} else {
IVSC = Short.MIN_VALUE;
}
}

protected final void initIVSTAT2(String s) {
if (!s.trim().isEmpty()) {
IVSTAT2 = Byte.parseByte(s);
} else {
IVSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initJ1BOSS(String s) {
if (!s.trim().isEmpty()) {
J1BOSS = Byte.parseByte(s);
} else {
J1BOSS = Byte.MIN_VALUE;
}
}

protected final void initJ1CSSF(String s) {
if (!s.trim().isEmpty()) {
J1CSSF = Double.parseDouble(s);
} else {
J1CSSF = Double.NaN;
}
}

protected final void initJ1CSSM(String s) {
if (!s.trim().isEmpty()) {
J1CSSM = Double.parseDouble(s);
} else {
J1CSSM = Double.NaN;
}
}

protected final void initJ1GOLD(String s) {
if (!s.trim().isEmpty()) {
J1GOLD = Byte.parseByte(s);
} else {
J1GOLD = Byte.MIN_VALUE;
}
}

protected final void initJ1HGS(String s) {
if (!s.trim().isEmpty()) {
J1HGS = Double.parseDouble(s);
} else {
J1HGS = Double.NaN;
}
}

protected final void initJ1ISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
J1ISCO88_CC = Short.parseShort(s);
} else {
J1ISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initJ1ISCO_CC(String s) {
if (!s.trim().isEmpty()) {
J1ISCO_CC = s;
}
}

protected final void initJ1MNGR(String s) {
if (!s.trim().isEmpty()) {
J1MNGR = Byte.parseByte(s);
} else {
J1MNGR = Byte.MIN_VALUE;
}
}

protected final void initJ1NONE_BH(String s) {
if (!s.trim().isEmpty()) {
J1NONE_BH = Byte.parseByte(s);
} else {
J1NONE_BH = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC8_DV = Byte.parseByte(s);
} else {
J1NSSEC8_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC_DV = Byte.parseByte(s);
} else {
J1NSSEC_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1RGSC(String s) {
if (!s.trim().isEmpty()) {
J1RGSC = Byte.parseByte(s);
} else {
J1RGSC = Byte.MIN_VALUE;
}
}

protected final void initJ1SEC(String s) {
if (!s.trim().isEmpty()) {
J1SEC = Short.parseShort(s);
} else {
J1SEC = Short.MIN_VALUE;
}
}

protected final void initJ1SEG(String s) {
if (!s.trim().isEmpty()) {
J1SEG = Byte.parseByte(s);
} else {
J1SEG = Byte.MIN_VALUE;
}
}

protected final void initJ1SEMP(String s) {
if (!s.trim().isEmpty()) {
J1SEMP = Byte.parseByte(s);
} else {
J1SEMP = Byte.MIN_VALUE;
}
}

protected final void initJ1SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC90_CC = Byte.parseByte(s);
} else {
J1SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJ2PAY_BH(String s) {
if (!s.trim().isEmpty()) {
J2PAY_BH = Short.parseShort(s);
} else {
J2PAY_BH = Short.MIN_VALUE;
}
}

protected final void initJ2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC90_CC = Short.parseShort(s);
} else {
J2SOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBBGLY(String s) {
if (!s.trim().isEmpty()) {
JBBGLY = Short.parseShort(s);
} else {
JBBGLY = Short.MIN_VALUE;
}
}

protected final void initJBCHC1(String s) {
if (!s.trim().isEmpty()) {
JBCHC1 = Short.parseShort(s);
} else {
JBCHC1 = Short.MIN_VALUE;
}
}

protected final void initJBCHC2(String s) {
if (!s.trim().isEmpty()) {
JBCHC2 = Short.parseShort(s);
} else {
JBCHC2 = Short.MIN_VALUE;
}
}

protected final void initJBCHC3(String s) {
if (!s.trim().isEmpty()) {
JBCHC3 = Short.parseShort(s);
} else {
JBCHC3 = Short.MIN_VALUE;
}
}

protected final void initJBCSSF(String s) {
if (!s.trim().isEmpty()) {
JBCSSF = Double.parseDouble(s);
} else {
JBCSSF = Double.NaN;
}
}

protected final void initJBCSSM(String s) {
if (!s.trim().isEmpty()) {
JBCSSM = Double.parseDouble(s);
} else {
JBCSSM = Double.NaN;
}
}

protected final void initJBGOLD(String s) {
if (!s.trim().isEmpty()) {
JBGOLD = Short.parseShort(s);
} else {
JBGOLD = Short.MIN_VALUE;
}
}

protected final void initJBHGS(String s) {
if (!s.trim().isEmpty()) {
JBHGS = Double.parseDouble(s);
} else {
JBHGS = Double.NaN;
}
}

protected final void initJBHRLK(String s) {
if (!s.trim().isEmpty()) {
JBHRLK = Short.parseShort(s);
} else {
JBHRLK = Short.MIN_VALUE;
}
}

protected final void initJBISCO_CC(String s) {
if (!s.trim().isEmpty()) {
JBISCO_CC = s;
}
}

protected final void initJBLKCHA(String s) {
if (!s.trim().isEmpty()) {
JBLKCHA = Byte.parseByte(s);
} else {
JBLKCHA = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHB(String s) {
if (!s.trim().isEmpty()) {
JBLKCHB = Byte.parseByte(s);
} else {
JBLKCHB = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHC(String s) {
if (!s.trim().isEmpty()) {
JBLKCHC = Byte.parseByte(s);
} else {
JBLKCHC = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHD(String s) {
if (!s.trim().isEmpty()) {
JBLKCHD = Byte.parseByte(s);
} else {
JBLKCHD = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHE(String s) {
if (!s.trim().isEmpty()) {
JBLKCHE = Byte.parseByte(s);
} else {
JBLKCHE = Byte.MIN_VALUE;
}
}

protected final void initJBMRS(String s) {
if (!s.trim().isEmpty()) {
JBMRS = Byte.parseByte(s);
} else {
JBMRS = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC_DV = Short.parseShort(s);
} else {
JBNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJBOFFY_BH(String s) {
if (!s.trim().isEmpty()) {
JBOFFY_BH = Short.parseShort(s);
} else {
JBOFFY_BH = Short.MIN_VALUE;
}
}

protected final void initJBONAM(String s) {
if (!s.trim().isEmpty()) {
JBONAM = Integer.parseInt(s);
} else {
JBONAM = Integer.MIN_VALUE;
}
}

protected final void initJBONG(String s) {
if (!s.trim().isEmpty()) {
JBONG = Byte.parseByte(s);
} else {
JBONG = Byte.MIN_VALUE;
}
}

protected final void initJBONUS(String s) {
if (!s.trim().isEmpty()) {
JBONUS = Short.parseShort(s);
} else {
JBONUS = Short.MIN_VALUE;
}
}

protected final void initJBOPPS(String s) {
if (!s.trim().isEmpty()) {
JBOPPS = Short.parseShort(s);
} else {
JBOPPS = Short.MIN_VALUE;
}
}

protected final void initJBPEN(String s) {
if (!s.trim().isEmpty()) {
JBPEN = Short.parseShort(s);
} else {
JBPEN = Short.MIN_VALUE;
}
}

protected final void initJBPENM(String s) {
if (!s.trim().isEmpty()) {
JBPENM = Short.parseShort(s);
} else {
JBPENM = Short.MIN_VALUE;
}
}

protected final void initJBPERFP(String s) {
if (!s.trim().isEmpty()) {
JBPERFP = Byte.parseByte(s);
} else {
JBPERFP = Byte.MIN_VALUE;
}
}

protected final void initJBPL_BH(String s) {
if (!s.trim().isEmpty()) {
JBPL_BH = Short.parseShort(s);
} else {
JBPL_BH = Short.MIN_VALUE;
}
}

protected final void initJBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JBRGSC_DV = Short.parseShort(s);
} else {
JBRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJBRISE(String s) {
if (!s.trim().isEmpty()) {
JBRISE = Short.parseShort(s);
} else {
JBRISE = Short.MIN_VALUE;
}
}

protected final void initJBSAT2(String s) {
if (!s.trim().isEmpty()) {
JBSAT2 = Short.parseShort(s);
} else {
JBSAT2 = Short.MIN_VALUE;
}
}

protected final void initJBSAT4(String s) {
if (!s.trim().isEmpty()) {
JBSAT4 = Short.parseShort(s);
} else {
JBSAT4 = Short.MIN_VALUE;
}
}

protected final void initJBSAT6(String s) {
if (!s.trim().isEmpty()) {
JBSAT6 = Short.parseShort(s);
} else {
JBSAT6 = Short.MIN_VALUE;
}
}

protected final void initJBSAT7(String s) {
if (!s.trim().isEmpty()) {
JBSAT7 = Short.parseShort(s);
} else {
JBSAT7 = Short.MIN_VALUE;
}
}

protected final void initJBSAT_BH(String s) {
if (!s.trim().isEmpty()) {
JBSAT_BH = Short.parseShort(s);
} else {
JBSAT_BH = Short.MIN_VALUE;
}
}

protected final void initJBSECT_BH(String s) {
if (!s.trim().isEmpty()) {
JBSECT_BH = Short.parseShort(s);
} else {
JBSECT_BH = Short.MIN_VALUE;
}
}

protected final void initJBSEC_BH(String s) {
if (!s.trim().isEmpty()) {
JBSEC_BH = Short.parseShort(s);
} else {
JBSEC_BH = Short.MIN_VALUE;
}
}

protected final void initJBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JBSEG_DV = Short.parseShort(s);
} else {
JBSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJBSIC(String s) {
if (!s.trim().isEmpty()) {
JBSIC = Short.parseShort(s);
} else {
JBSIC = Short.MIN_VALUE;
}
}

protected final void initJBSOC90LY_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC90LY_CC = Short.parseShort(s);
} else {
JBSOC90LY_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC90_CC = Short.parseShort(s);
} else {
JBSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBSTATL(String s) {
if (!s.trim().isEmpty()) {
JBSTATL = Short.parseShort(s);
} else {
JBSTATL = Short.MIN_VALUE;
}
}

protected final void initJBSTATT(String s) {
if (!s.trim().isEmpty()) {
JBSTATT = Short.parseShort(s);
} else {
JBSTATT = Short.MIN_VALUE;
}
}

protected final void initJBTERM(String s) {
if (!s.trim().isEmpty()) {
JBTERM = Short.parseShort(s);
} else {
JBTERM = Short.MIN_VALUE;
}
}

protected final void initJBTIME(String s) {
if (!s.trim().isEmpty()) {
JBTIME = Short.parseShort(s);
} else {
JBTIME = Short.MIN_VALUE;
}
}

protected final void initJBTTWM(String s) {
if (!s.trim().isEmpty()) {
JBTTWM = Short.parseShort(s);
} else {
JBTTWM = Short.MIN_VALUE;
}
}

protected final void initJBUB(String s) {
if (!s.trim().isEmpty()) {
JBUB = Short.parseShort(s);
} else {
JBUB = Short.MIN_VALUE;
}
}

protected final void initJBUBY(String s) {
if (!s.trim().isEmpty()) {
JBUBY = Short.parseShort(s);
} else {
JBUBY = Short.MIN_VALUE;
}
}

protected final void initJBXPCHA(String s) {
if (!s.trim().isEmpty()) {
JBXPCHA = Byte.parseByte(s);
} else {
JBXPCHA = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHB(String s) {
if (!s.trim().isEmpty()) {
JBXPCHB = Byte.parseByte(s);
} else {
JBXPCHB = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHC(String s) {
if (!s.trim().isEmpty()) {
JBXPCHC = Byte.parseByte(s);
} else {
JBXPCHC = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHD(String s) {
if (!s.trim().isEmpty()) {
JBXPCHD = Byte.parseByte(s);
} else {
JBXPCHD = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHE(String s) {
if (!s.trim().isEmpty()) {
JBXPCHE = Byte.parseByte(s);
} else {
JBXPCHE = Byte.MIN_VALUE;
}
}

protected final void initJLCSSF(String s) {
if (!s.trim().isEmpty()) {
JLCSSF = Double.parseDouble(s);
} else {
JLCSSF = Double.NaN;
}
}

protected final void initJLCSSM(String s) {
if (!s.trim().isEmpty()) {
JLCSSM = Double.parseDouble(s);
} else {
JLCSSM = Double.NaN;
}
}

protected final void initJLGOLD(String s) {
if (!s.trim().isEmpty()) {
JLGOLD = Short.parseShort(s);
} else {
JLGOLD = Short.MIN_VALUE;
}
}

protected final void initJLHGS(String s) {
if (!s.trim().isEmpty()) {
JLHGS = Double.parseDouble(s);
} else {
JLHGS = Double.NaN;
}
}

protected final void initJLID(String s) {
if (!s.trim().isEmpty()) {
JLID = Short.parseShort(s);
} else {
JLID = Short.MIN_VALUE;
}
}

protected final void initJLISCO_CC(String s) {
if (!s.trim().isEmpty()) {
JLISCO_CC = s;
}
}

protected final void initJLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC_DV = Short.parseShort(s);
} else {
JLNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JLRGSC_DV = Short.parseShort(s);
} else {
JLRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJLSEC(String s) {
if (!s.trim().isEmpty()) {
JLSEC = Short.parseShort(s);
} else {
JLSEC = Short.MIN_VALUE;
}
}

protected final void initJLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JLSEG_DV = Short.parseShort(s);
} else {
JLSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJLSIC(String s) {
if (!s.trim().isEmpty()) {
JLSIC = Short.parseShort(s);
} else {
JLSIC = Short.MIN_VALUE;
}
}

protected final void initJLSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC90_CC = Short.parseShort(s);
} else {
JLSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJLYID(String s) {
if (!s.trim().isEmpty()) {
JLYID = Short.parseShort(s);
} else {
JLYID = Short.MIN_VALUE;
}
}

protected final void initJNMNTH(String s) {
if (!s.trim().isEmpty()) {
JNMNTH = Short.parseShort(s);
} else {
JNMNTH = Short.MIN_VALUE;
}
}

protected final void initJNYEAR(String s) {
if (!s.trim().isEmpty()) {
JNYEAR = Short.parseShort(s);
} else {
JNYEAR = Short.MIN_VALUE;
}
}

protected final void initJSBGY4(String s) {
if (!s.trim().isEmpty()) {
JSBGY4 = Short.parseShort(s);
} else {
JSBGY4 = Short.MIN_VALUE;
}
}

protected final void initJSHRLK(String s) {
if (!s.trim().isEmpty()) {
JSHRLK = Short.parseShort(s);
} else {
JSHRLK = Short.MIN_VALUE;
}
}

protected final void initJSLOSS(String s) {
if (!s.trim().isEmpty()) {
JSLOSS = Double.parseDouble(s);
} else {
JSLOSS = Double.NaN;
}
}

protected final void initJSPART(String s) {
if (!s.trim().isEmpty()) {
JSPART = Byte.parseByte(s);
} else {
JSPART = Byte.MIN_VALUE;
}
}

protected final void initJSPAYG(String s) {
if (!s.trim().isEmpty()) {
JSPAYG = Double.parseDouble(s);
} else {
JSPAYG = Double.NaN;
}
}

protected final void initJSPAYGI(String s) {
if (!s.trim().isEmpty()) {
JSPAYGI = Short.parseShort(s);
} else {
JSPAYGI = Short.MIN_VALUE;
}
}

protected final void initJSPAYU(String s) {
if (!s.trim().isEmpty()) {
JSPAYU = Integer.parseInt(s);
} else {
JSPAYU = Integer.MIN_VALUE;
}
}

protected final void initJSPAYW(String s) {
if (!s.trim().isEmpty()) {
JSPAYW = Byte.parseByte(s);
} else {
JSPAYW = Byte.MIN_VALUE;
}
}

protected final void initJSPAYW_BH(String s) {
if (!s.trim().isEmpty()) {
JSPAYW_BH = Double.parseDouble(s);
} else {
JSPAYW_BH = Double.NaN;
}
}

protected final void initJSPL_BH(String s) {
if (!s.trim().isEmpty()) {
JSPL_BH = Short.parseShort(s);
} else {
JSPL_BH = Short.MIN_VALUE;
}
}

protected final void initJSPRLS(String s) {
if (!s.trim().isEmpty()) {
JSPRLS = Byte.parseByte(s);
} else {
JSPRLS = Byte.MIN_VALUE;
}
}

protected final void initJSPRNI(String s) {
if (!s.trim().isEmpty()) {
JSPRNI = Byte.parseByte(s);
} else {
JSPRNI = Byte.MIN_VALUE;
}
}

protected final void initJSPROF(String s) {
if (!s.trim().isEmpty()) {
JSPROF = Double.parseDouble(s);
} else {
JSPROF = Double.NaN;
}
}

protected final void initJSPROFI(String s) {
if (!s.trim().isEmpty()) {
JSPROFI = Short.parseShort(s);
} else {
JSPROFI = Short.MIN_VALUE;
}
}

protected final void initJSPRTX(String s) {
if (!s.trim().isEmpty()) {
JSPRTX = Byte.parseByte(s);
} else {
JSPRTX = Byte.MIN_VALUE;
}
}

protected final void initJSPYNI(String s) {
if (!s.trim().isEmpty()) {
JSPYNI = Byte.parseByte(s);
} else {
JSPYNI = Byte.MIN_VALUE;
}
}

protected final void initJSPYTX(String s) {
if (!s.trim().isEmpty()) {
JSPYTX = Byte.parseByte(s);
} else {
JSPYTX = Byte.MIN_VALUE;
}
}

protected final void initJSSAT(String s) {
if (!s.trim().isEmpty()) {
JSSAT = Short.parseShort(s);
} else {
JSSAT = Short.MIN_VALUE;
}
}

protected final void initJSSAT1(String s) {
if (!s.trim().isEmpty()) {
JSSAT1 = Short.parseShort(s);
} else {
JSSAT1 = Short.MIN_VALUE;
}
}

protected final void initJSSAT2(String s) {
if (!s.trim().isEmpty()) {
JSSAT2 = Short.parseShort(s);
} else {
JSSAT2 = Short.MIN_VALUE;
}
}

protected final void initJSSAT4(String s) {
if (!s.trim().isEmpty()) {
JSSAT4 = Short.parseShort(s);
} else {
JSSAT4 = Short.MIN_VALUE;
}
}

protected final void initJSSAT5(String s) {
if (!s.trim().isEmpty()) {
JSSAT5 = Short.parseShort(s);
} else {
JSSAT5 = Short.MIN_VALUE;
}
}

protected final void initJSTIME(String s) {
if (!s.trim().isEmpty()) {
JSTIME = Short.parseShort(s);
} else {
JSTIME = Short.MIN_VALUE;
}
}

protected final void initJSTTWM(String s) {
if (!s.trim().isEmpty()) {
JSTTWM = Short.parseShort(s);
} else {
JSTTWM = Short.MIN_VALUE;
}
}

protected final void initJSTYPEB(String s) {
if (!s.trim().isEmpty()) {
JSTYPEB = Byte.parseByte(s);
} else {
JSTYPEB = Byte.MIN_VALUE;
}
}

protected final void initJTYID(String s) {
if (!s.trim().isEmpty()) {
JTYID = Short.parseShort(s);
} else {
JTYID = Short.MIN_VALUE;
}
}

protected final void initJUBGN(String s) {
if (!s.trim().isEmpty()) {
JUBGN = Short.parseShort(s);
} else {
JUBGN = Short.MIN_VALUE;
}
}

protected final void initJUHRSL(String s) {
if (!s.trim().isEmpty()) {
JUHRSL = Short.parseShort(s);
} else {
JUHRSL = Short.MIN_VALUE;
}
}

protected final void initJUHRSX(String s) {
if (!s.trim().isEmpty()) {
JUHRSX = Short.parseShort(s);
} else {
JUHRSX = Short.MIN_VALUE;
}
}

protected final void initJULK1(String s) {
if (!s.trim().isEmpty()) {
JULK1 = Short.parseShort(s);
} else {
JULK1 = Short.MIN_VALUE;
}
}

protected final void initJULK4(String s) {
if (!s.trim().isEmpty()) {
JULK4 = Short.parseShort(s);
} else {
JULK4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X1(String s) {
if (!s.trim().isEmpty()) {
JULK4X1 = Short.parseShort(s);
} else {
JULK4X1 = Short.MIN_VALUE;
}
}

protected final void initJULK4X2(String s) {
if (!s.trim().isEmpty()) {
JULK4X2 = Short.parseShort(s);
} else {
JULK4X2 = Short.MIN_VALUE;
}
}

protected final void initJULK4X4(String s) {
if (!s.trim().isEmpty()) {
JULK4X4 = Short.parseShort(s);
} else {
JULK4X4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X5(String s) {
if (!s.trim().isEmpty()) {
JULK4X5 = Short.parseShort(s);
} else {
JULK4X5 = Short.MIN_VALUE;
}
}

protected final void initJULK4X6(String s) {
if (!s.trim().isEmpty()) {
JULK4X6 = Short.parseShort(s);
} else {
JULK4X6 = Short.MIN_VALUE;
}
}

protected final void initJULKA(String s) {
if (!s.trim().isEmpty()) {
JULKA = Short.parseShort(s);
} else {
JULKA = Short.MIN_VALUE;
}
}

protected final void initJULKB(String s) {
if (!s.trim().isEmpty()) {
JULKB = Short.parseShort(s);
} else {
JULKB = Short.MIN_VALUE;
}
}

protected final void initJULKC(String s) {
if (!s.trim().isEmpty()) {
JULKC = Short.parseShort(s);
} else {
JULKC = Short.MIN_VALUE;
}
}

protected final void initJULKD(String s) {
if (!s.trim().isEmpty()) {
JULKD = Short.parseShort(s);
} else {
JULKD = Short.MIN_VALUE;
}
}

protected final void initJULKE(String s) {
if (!s.trim().isEmpty()) {
JULKE = Short.parseShort(s);
} else {
JULKE = Short.MIN_VALUE;
}
}

protected final void initJUPAYL(String s) {
if (!s.trim().isEmpty()) {
JUPAYL = Short.parseShort(s);
} else {
JUPAYL = Short.MIN_VALUE;
}
}

protected final void initJUPAYX(String s) {
if (!s.trim().isEmpty()) {
JUPAYX = Short.parseShort(s);
} else {
JUPAYX = Short.MIN_VALUE;
}
}

protected final void initJUSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JUSOC90_CC = Short.parseShort(s);
} else {
JUSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJUSPEC(String s) {
if (!s.trim().isEmpty()) {
JUSPEC = Short.parseShort(s);
} else {
JUSPEC = Short.MIN_VALUE;
}
}

protected final void initLACTA(String s) {
if (!s.trim().isEmpty()) {
LACTA = Short.parseShort(s);
} else {
LACTA = Short.MIN_VALUE;
}
}

protected final void initLACTB(String s) {
if (!s.trim().isEmpty()) {
LACTB = Short.parseShort(s);
} else {
LACTB = Short.MIN_VALUE;
}
}

protected final void initLACTC(String s) {
if (!s.trim().isEmpty()) {
LACTC = Short.parseShort(s);
} else {
LACTC = Short.MIN_VALUE;
}
}

protected final void initLACTD(String s) {
if (!s.trim().isEmpty()) {
LACTD = Short.parseShort(s);
} else {
LACTD = Short.MIN_VALUE;
}
}

protected final void initLACTE(String s) {
if (!s.trim().isEmpty()) {
LACTE = Short.parseShort(s);
} else {
LACTE = Short.MIN_VALUE;
}
}

protected final void initLACTF(String s) {
if (!s.trim().isEmpty()) {
LACTF = Short.parseShort(s);
} else {
LACTF = Short.MIN_VALUE;
}
}

protected final void initLACTH(String s) {
if (!s.trim().isEmpty()) {
LACTH = Short.parseShort(s);
} else {
LACTH = Short.MIN_VALUE;
}
}

protected final void initLACTI(String s) {
if (!s.trim().isEmpty()) {
LACTI = Short.parseShort(s);
} else {
LACTI = Short.MIN_VALUE;
}
}

protected final void initLACTJ(String s) {
if (!s.trim().isEmpty()) {
LACTJ = Short.parseShort(s);
} else {
LACTJ = Short.MIN_VALUE;
}
}

protected final void initLACTK(String s) {
if (!s.trim().isEmpty()) {
LACTK = Short.parseShort(s);
} else {
LACTK = Short.MIN_VALUE;
}
}

protected final void initLACTL(String s) {
if (!s.trim().isEmpty()) {
LACTL = Short.parseShort(s);
} else {
LACTL = Short.MIN_VALUE;
}
}

protected final void initLCHMOR(String s) {
if (!s.trim().isEmpty()) {
LCHMOR = Byte.parseByte(s);
} else {
LCHMOR = Byte.MIN_VALUE;
}
}

protected final void initLCHMORN(String s) {
if (!s.trim().isEmpty()) {
LCHMORN = Byte.parseByte(s);
} else {
LCHMORN = Byte.MIN_VALUE;
}
}

protected final void initLCOH(String s) {
if (!s.trim().isEmpty()) {
LCOH = Byte.parseByte(s);
} else {
LCOH = Byte.MIN_VALUE;
}
}

protected final void initLEWGHT(String s) {
if (!s.trim().isEmpty()) {
LEWGHT = Double.parseDouble(s);
} else {
LEWGHT = Double.NaN;
}
}

protected final void initLFIMPA(String s) {
if (!s.trim().isEmpty()) {
LFIMPA = Byte.parseByte(s);
} else {
LFIMPA = Byte.MIN_VALUE;
}
}

protected final void initLFIMPB(String s) {
if (!s.trim().isEmpty()) {
LFIMPB = Byte.parseByte(s);
} else {
LFIMPB = Byte.MIN_VALUE;
}
}

protected final void initLFIMPC(String s) {
if (!s.trim().isEmpty()) {
LFIMPC = Byte.parseByte(s);
} else {
LFIMPC = Byte.MIN_VALUE;
}
}

protected final void initLFIMPD(String s) {
if (!s.trim().isEmpty()) {
LFIMPD = Byte.parseByte(s);
} else {
LFIMPD = Byte.MIN_VALUE;
}
}

protected final void initLFIMPE(String s) {
if (!s.trim().isEmpty()) {
LFIMPE = Byte.parseByte(s);
} else {
LFIMPE = Byte.MIN_VALUE;
}
}

protected final void initLFIMPF(String s) {
if (!s.trim().isEmpty()) {
LFIMPF = Byte.parseByte(s);
} else {
LFIMPF = Byte.MIN_VALUE;
}
}

protected final void initLFIMPG(String s) {
if (!s.trim().isEmpty()) {
LFIMPG = Byte.parseByte(s);
} else {
LFIMPG = Byte.MIN_VALUE;
}
}

protected final void initLFIMPH(String s) {
if (!s.trim().isEmpty()) {
LFIMPH = Byte.parseByte(s);
} else {
LFIMPH = Byte.MIN_VALUE;
}
}

protected final void initLFSAT1(String s) {
if (!s.trim().isEmpty()) {
LFSAT1 = Short.parseShort(s);
} else {
LFSAT1 = Short.MIN_VALUE;
}
}

protected final void initLFSAT2(String s) {
if (!s.trim().isEmpty()) {
LFSAT2 = Short.parseShort(s);
} else {
LFSAT2 = Short.MIN_VALUE;
}
}

protected final void initLFSAT3(String s) {
if (!s.trim().isEmpty()) {
LFSAT3 = Short.parseShort(s);
} else {
LFSAT3 = Short.MIN_VALUE;
}
}

protected final void initLFSAT4(String s) {
if (!s.trim().isEmpty()) {
LFSAT4 = Short.parseShort(s);
} else {
LFSAT4 = Short.MIN_VALUE;
}
}

protected final void initLFSAT5(String s) {
if (!s.trim().isEmpty()) {
LFSAT5 = Short.parseShort(s);
} else {
LFSAT5 = Short.MIN_VALUE;
}
}

protected final void initLFSAT6(String s) {
if (!s.trim().isEmpty()) {
LFSAT6 = Short.parseShort(s);
} else {
LFSAT6 = Short.MIN_VALUE;
}
}

protected final void initLFSAT7(String s) {
if (!s.trim().isEmpty()) {
LFSAT7 = Short.parseShort(s);
} else {
LFSAT7 = Short.MIN_VALUE;
}
}

protected final void initLFSAT8(String s) {
if (!s.trim().isEmpty()) {
LFSAT8 = Short.parseShort(s);
} else {
LFSAT8 = Short.MIN_VALUE;
}
}

protected final void initLFSATL(String s) {
if (!s.trim().isEmpty()) {
LFSATL = Short.parseShort(s);
} else {
LFSATL = Short.MIN_VALUE;
}
}

protected final void initLFSATO(String s) {
if (!s.trim().isEmpty()) {
LFSATO = Short.parseShort(s);
} else {
LFSATO = Short.MIN_VALUE;
}
}

protected final void initLKMOVY(String s) {
if (!s.trim().isEmpty()) {
LKMOVY = Short.parseShort(s);
} else {
LKMOVY = Short.MIN_VALUE;
}
}

protected final void initLKNBRD(String s) {
if (!s.trim().isEmpty()) {
LKNBRD = Short.parseShort(s);
} else {
LKNBRD = Short.MIN_VALUE;
}
}

protected final void initLMAR1M(String s) {
if (!s.trim().isEmpty()) {
LMAR1M = Byte.parseByte(s);
} else {
LMAR1M = Byte.MIN_VALUE;
}
}

protected final void initLMAR1Y(String s) {
if (!s.trim().isEmpty()) {
LMAR1Y = Short.parseShort(s);
} else {
LMAR1Y = Short.MIN_VALUE;
}
}

protected final void initLNPRNT(String s) {
if (!s.trim().isEmpty()) {
LNPRNT = Byte.parseByte(s);
} else {
LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initLOCCHD(String s) {
if (!s.trim().isEmpty()) {
LOCCHD = Byte.parseByte(s);
} else {
LOCCHD = Byte.MIN_VALUE;
}
}

protected final void initLOCSERA(String s) {
if (!s.trim().isEmpty()) {
LOCSERA = Byte.parseByte(s);
} else {
LOCSERA = Byte.MIN_VALUE;
}
}

protected final void initLOCSERB(String s) {
if (!s.trim().isEmpty()) {
LOCSERB = Byte.parseByte(s);
} else {
LOCSERB = Byte.MIN_VALUE;
}
}

protected final void initLOCSERC(String s) {
if (!s.trim().isEmpty()) {
LOCSERC = Byte.parseByte(s);
} else {
LOCSERC = Byte.MIN_VALUE;
}
}

protected final void initLOCSERD(String s) {
if (!s.trim().isEmpty()) {
LOCSERD = Byte.parseByte(s);
} else {
LOCSERD = Byte.MIN_VALUE;
}
}

protected final void initLOCSERE(String s) {
if (!s.trim().isEmpty()) {
LOCSERE = Byte.parseByte(s);
} else {
LOCSERE = Byte.MIN_VALUE;
}
}

protected final void initLPRNT(String s) {
if (!s.trim().isEmpty()) {
LPRNT = Byte.parseByte(s);
} else {
LPRNT = Byte.MIN_VALUE;
}
}

protected final void initLRWGHT(String s) {
if (!s.trim().isEmpty()) {
LRWGHT = Double.parseDouble(s);
} else {
LRWGHT = Double.NaN;
}
}

protected final void initMABOSS(String s) {
if (!s.trim().isEmpty()) {
MABOSS = Byte.parseByte(s);
} else {
MABOSS = Byte.MIN_VALUE;
}
}

protected final void initMACSSF(String s) {
if (!s.trim().isEmpty()) {
MACSSF = Double.parseDouble(s);
} else {
MACSSF = Double.NaN;
}
}

protected final void initMACSSM(String s) {
if (!s.trim().isEmpty()) {
MACSSM = Double.parseDouble(s);
} else {
MACSSM = Double.NaN;
}
}

protected final void initMAGOLD(String s) {
if (!s.trim().isEmpty()) {
MAGOLD = Byte.parseByte(s);
} else {
MAGOLD = Byte.MIN_VALUE;
}
}

protected final void initMAHGS(String s) {
if (!s.trim().isEmpty()) {
MAHGS = Double.parseDouble(s);
} else {
MAHGS = Double.NaN;
}
}

protected final void initMAISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
MAISCO88_CC = Short.parseShort(s);
} else {
MAISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initMAISCO_CC(String s) {
if (!s.trim().isEmpty()) {
MAISCO_CC = s;
}
}

protected final void initMAJU(String s) {
if (!s.trim().isEmpty()) {
MAJU = Byte.parseByte(s);
} else {
MAJU = Byte.MIN_VALUE;
}
}

protected final void initMAJU_BH(String s) {
if (!s.trim().isEmpty()) {
MAJU_BH = Byte.parseByte(s);
} else {
MAJU_BH = Byte.MIN_VALUE;
}
}

protected final void initMAMNGR(String s) {
if (!s.trim().isEmpty()) {
MAMNGR = Byte.parseByte(s);
} else {
MAMNGR = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC8_DV = Byte.parseByte(s);
} else {
MANSSEC8_DV = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC_DV = Byte.parseByte(s);
} else {
MANSSEC_DV = Byte.MIN_VALUE;
}
}

protected final void initMARGSC(String s) {
if (!s.trim().isEmpty()) {
MARGSC = Byte.parseByte(s);
} else {
MARGSC = Byte.MIN_VALUE;
}
}

protected final void initMASEC(String s) {
if (!s.trim().isEmpty()) {
MASEC = Short.parseShort(s);
} else {
MASEC = Short.MIN_VALUE;
}
}

protected final void initMASEG(String s) {
if (!s.trim().isEmpty()) {
MASEG = Byte.parseByte(s);
} else {
MASEG = Byte.MIN_VALUE;
}
}

protected final void initMASEMP(String s) {
if (!s.trim().isEmpty()) {
MASEMP = Byte.parseByte(s);
} else {
MASEMP = Byte.MIN_VALUE;
}
}

protected final void initMASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC90_CC = Byte.parseByte(s);
} else {
MASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMASTAT(String s) {
if (!s.trim().isEmpty()) {
MASTAT = Short.parseShort(s);
} else {
MASTAT = Short.MIN_VALUE;
}
}

protected final void initMEMORIG_BH(String s) {
if (!s.trim().isEmpty()) {
MEMORIG_BH = Short.parseShort(s);
} else {
MEMORIG_BH = Short.MIN_VALUE;
}
}

protected final void initMLCHM(String s) {
if (!s.trim().isEmpty()) {
MLCHM = Short.parseShort(s);
} else {
MLCHM = Short.MIN_VALUE;
}
}

protected final void initMLCHY4(String s) {
if (!s.trim().isEmpty()) {
MLCHY4 = Short.parseShort(s);
} else {
MLCHY4 = Short.MIN_VALUE;
}
}

protected final void initMLSTAT_BH(String s) {
if (!s.trim().isEmpty()) {
MLSTAT_BH = Short.parseShort(s);
} else {
MLSTAT_BH = Short.MIN_VALUE;
}
}

protected final void initMNPID_BH(String s) {
if (!s.trim().isEmpty()) {
MNPID_BH = Integer.parseInt(s);
} else {
MNPID_BH = Integer.MIN_VALUE;
}
}

protected final void initMOVEST(String s) {
if (!s.trim().isEmpty()) {
MOVEST = Short.parseShort(s);
} else {
MOVEST = Short.MIN_VALUE;
}
}

protected final void initMOVJB(String s) {
if (!s.trim().isEmpty()) {
MOVJB = Short.parseShort(s);
} else {
MOVJB = Short.MIN_VALUE;
}
}

protected final void initMOVJBA(String s) {
if (!s.trim().isEmpty()) {
MOVJBA = Short.parseShort(s);
} else {
MOVJBA = Short.MIN_VALUE;
}
}

protected final void initMOVJBB(String s) {
if (!s.trim().isEmpty()) {
MOVJBB = Short.parseShort(s);
} else {
MOVJBB = Short.MIN_VALUE;
}
}

protected final void initMOVJBC(String s) {
if (!s.trim().isEmpty()) {
MOVJBC = Short.parseShort(s);
} else {
MOVJBC = Short.MIN_VALUE;
}
}

protected final void initMOVJBD(String s) {
if (!s.trim().isEmpty()) {
MOVJBD = Short.parseShort(s);
} else {
MOVJBD = Short.MIN_VALUE;
}
}

protected final void initMOVJBE(String s) {
if (!s.trim().isEmpty()) {
MOVJBE = Short.parseShort(s);
} else {
MOVJBE = Short.MIN_VALUE;
}
}

protected final void initMOVJBF(String s) {
if (!s.trim().isEmpty()) {
MOVJBF = Short.parseShort(s);
} else {
MOVJBF = Short.MIN_VALUE;
}
}

protected final void initMOVJBG(String s) {
if (!s.trim().isEmpty()) {
MOVJBG = Short.parseShort(s);
} else {
MOVJBG = Short.MIN_VALUE;
}
}

protected final void initMOVJBH(String s) {
if (!s.trim().isEmpty()) {
MOVJBH = Short.parseShort(s);
} else {
MOVJBH = Short.MIN_VALUE;
}
}

protected final void initMOVJBI(String s) {
if (!s.trim().isEmpty()) {
MOVJBI = Short.parseShort(s);
} else {
MOVJBI = Short.MIN_VALUE;
}
}

protected final void initMOVY1(String s) {
if (!s.trim().isEmpty()) {
MOVY1 = Short.parseShort(s);
} else {
MOVY1 = Short.MIN_VALUE;
}
}

protected final void initMOVY2(String s) {
if (!s.trim().isEmpty()) {
MOVY2 = Short.parseShort(s);
} else {
MOVY2 = Short.MIN_VALUE;
}
}

protected final void initMRJBOSS(String s) {
if (!s.trim().isEmpty()) {
MRJBOSS = Short.parseShort(s);
} else {
MRJBOSS = Short.MIN_VALUE;
}
}

protected final void initMRJCSSF(String s) {
if (!s.trim().isEmpty()) {
MRJCSSF = Double.parseDouble(s);
} else {
MRJCSSF = Double.NaN;
}
}

protected final void initMRJCSSM(String s) {
if (!s.trim().isEmpty()) {
MRJCSSM = Double.parseDouble(s);
} else {
MRJCSSM = Double.NaN;
}
}

protected final void initMRJEND(String s) {
if (!s.trim().isEmpty()) {
MRJEND = Short.parseShort(s);
} else {
MRJEND = Short.MIN_VALUE;
}
}

protected final void initMRJGOLD(String s) {
if (!s.trim().isEmpty()) {
MRJGOLD = Short.parseShort(s);
} else {
MRJGOLD = Short.MIN_VALUE;
}
}

protected final void initMRJHGS(String s) {
if (!s.trim().isEmpty()) {
MRJHGS = Double.parseDouble(s);
} else {
MRJHGS = Double.NaN;
}
}

protected final void initMRJISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
MRJISCO88_CC = Short.parseShort(s);
} else {
MRJISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initMRJISCO_CC(String s) {
if (!s.trim().isEmpty()) {
MRJISCO_CC = s;
}
}

protected final void initMRJMNGR(String s) {
if (!s.trim().isEmpty()) {
MRJMNGR = Short.parseShort(s);
} else {
MRJMNGR = Short.MIN_VALUE;
}
}

protected final void initMRJNSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
MRJNSSEC8_DV = Short.parseShort(s);
} else {
MRJNSSEC8_DV = Short.MIN_VALUE;
}
}

protected final void initMRJNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
MRJNSSEC_DV = Short.parseShort(s);
} else {
MRJNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initMRJRGSC(String s) {
if (!s.trim().isEmpty()) {
MRJRGSC = Short.parseShort(s);
} else {
MRJRGSC = Short.MIN_VALUE;
}
}

protected final void initMRJSEC(String s) {
if (!s.trim().isEmpty()) {
MRJSEC = Short.parseShort(s);
} else {
MRJSEC = Short.MIN_VALUE;
}
}

protected final void initMRJSEG(String s) {
if (!s.trim().isEmpty()) {
MRJSEG = Short.parseShort(s);
} else {
MRJSEG = Short.MIN_VALUE;
}
}

protected final void initMRJSEMP(String s) {
if (!s.trim().isEmpty()) {
MRJSEMP = Short.parseShort(s);
} else {
MRJSEMP = Short.MIN_VALUE;
}
}

protected final void initMRJSIC(String s) {
if (!s.trim().isEmpty()) {
MRJSIC = Short.parseShort(s);
} else {
MRJSIC = Short.MIN_VALUE;
}
}

protected final void initMRJSIZE(String s) {
if (!s.trim().isEmpty()) {
MRJSIZE = Short.parseShort(s);
} else {
MRJSIZE = Short.MIN_VALUE;
}
}

protected final void initMRJSOC(String s) {
if (!s.trim().isEmpty()) {
MRJSOC = Short.parseShort(s);
} else {
MRJSOC = Short.MIN_VALUE;
}
}

protected final void initMSTATSAM(String s) {
if (!s.trim().isEmpty()) {
MSTATSAM = Short.parseShort(s);
} else {
MSTATSAM = Short.MIN_VALUE;
}
}

protected final void initNAIDXHH_BH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH_BH = Short.parseShort(s);
} else {
NAIDXHH_BH = Short.MIN_VALUE;
}
}

protected final void initNCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHILD_DV = Short.parseShort(s);
} else {
NCHILD_DV = Short.MIN_VALUE;
}
}

protected final void initNCIGS(String s) {
if (!s.trim().isEmpty()) {
NCIGS = Short.parseShort(s);
} else {
NCIGS = Short.MIN_VALUE;
}
}

protected final void initNEIGH(String s) {
if (!s.trim().isEmpty()) {
NEIGH = Byte.parseByte(s);
} else {
NEIGH = Byte.MIN_VALUE;
}
}

protected final void initNEIGH1(String s) {
if (!s.trim().isEmpty()) {
NEIGH1 = Byte.parseByte(s);
} else {
NEIGH1 = Byte.MIN_VALUE;
}
}

protected final void initNEIGH2(String s) {
if (!s.trim().isEmpty()) {
NEIGH2 = Byte.parseByte(s);
} else {
NEIGH2 = Byte.MIN_VALUE;
}
}

protected final void initNEIGH3(String s) {
if (!s.trim().isEmpty()) {
NEIGH3 = Byte.parseByte(s);
} else {
NEIGH3 = Byte.MIN_VALUE;
}
}

protected final void initNEIGH4(String s) {
if (!s.trim().isEmpty()) {
NEIGH4 = Byte.parseByte(s);
} else {
NEIGH4 = Byte.MIN_VALUE;
}
}

protected final void initNEIGH5(String s) {
if (!s.trim().isEmpty()) {
NEIGH5 = Byte.parseByte(s);
} else {
NEIGH5 = Byte.MIN_VALUE;
}
}

protected final void initNEIGH6(String s) {
if (!s.trim().isEmpty()) {
NEIGH6 = Byte.parseByte(s);
} else {
NEIGH6 = Byte.MIN_VALUE;
}
}

protected final void initNEMST(String s) {
if (!s.trim().isEmpty()) {
NEMST = Short.parseShort(s);
} else {
NEMST = Short.MIN_VALUE;
}
}

protected final void initNET1AG(String s) {
if (!s.trim().isEmpty()) {
NET1AG = Short.parseShort(s);
} else {
NET1AG = Short.MIN_VALUE;
}
}

protected final void initNET1JB(String s) {
if (!s.trim().isEmpty()) {
NET1JB = Short.parseShort(s);
} else {
NET1JB = Short.MIN_VALUE;
}
}

protected final void initNET1KN(String s) {
if (!s.trim().isEmpty()) {
NET1KN = Byte.parseByte(s);
} else {
NET1KN = Byte.MIN_VALUE;
}
}

protected final void initNET1LV(String s) {
if (!s.trim().isEmpty()) {
NET1LV = Byte.parseByte(s);
} else {
NET1LV = Byte.MIN_VALUE;
}
}

protected final void initNET1PH(String s) {
if (!s.trim().isEmpty()) {
NET1PH = Short.parseShort(s);
} else {
NET1PH = Short.MIN_VALUE;
}
}

protected final void initNET1RL(String s) {
if (!s.trim().isEmpty()) {
NET1RL = Byte.parseByte(s);
} else {
NET1RL = Byte.MIN_VALUE;
}
}

protected final void initNET1WR(String s) {
if (!s.trim().isEmpty()) {
NET1WR = Short.parseShort(s);
} else {
NET1WR = Short.MIN_VALUE;
}
}

protected final void initNET2AG(String s) {
if (!s.trim().isEmpty()) {
NET2AG = Short.parseShort(s);
} else {
NET2AG = Short.MIN_VALUE;
}
}

protected final void initNET2JB(String s) {
if (!s.trim().isEmpty()) {
NET2JB = Short.parseShort(s);
} else {
NET2JB = Short.MIN_VALUE;
}
}

protected final void initNET2KN(String s) {
if (!s.trim().isEmpty()) {
NET2KN = Byte.parseByte(s);
} else {
NET2KN = Byte.MIN_VALUE;
}
}

protected final void initNET2LV(String s) {
if (!s.trim().isEmpty()) {
NET2LV = Byte.parseByte(s);
} else {
NET2LV = Byte.MIN_VALUE;
}
}

protected final void initNET2PH(String s) {
if (!s.trim().isEmpty()) {
NET2PH = Short.parseShort(s);
} else {
NET2PH = Short.MIN_VALUE;
}
}

protected final void initNET2RL(String s) {
if (!s.trim().isEmpty()) {
NET2RL = Byte.parseByte(s);
} else {
NET2RL = Byte.MIN_VALUE;
}
}

protected final void initNET2WR(String s) {
if (!s.trim().isEmpty()) {
NET2WR = Short.parseShort(s);
} else {
NET2WR = Short.MIN_VALUE;
}
}

protected final void initNET3AG(String s) {
if (!s.trim().isEmpty()) {
NET3AG = Short.parseShort(s);
} else {
NET3AG = Short.MIN_VALUE;
}
}

protected final void initNET3JB(String s) {
if (!s.trim().isEmpty()) {
NET3JB = Short.parseShort(s);
} else {
NET3JB = Short.MIN_VALUE;
}
}

protected final void initNET3KN(String s) {
if (!s.trim().isEmpty()) {
NET3KN = Byte.parseByte(s);
} else {
NET3KN = Byte.MIN_VALUE;
}
}

protected final void initNET3LV(String s) {
if (!s.trim().isEmpty()) {
NET3LV = Byte.parseByte(s);
} else {
NET3LV = Byte.MIN_VALUE;
}
}

protected final void initNET3PH(String s) {
if (!s.trim().isEmpty()) {
NET3PH = Short.parseShort(s);
} else {
NET3PH = Short.MIN_VALUE;
}
}

protected final void initNET3RL(String s) {
if (!s.trim().isEmpty()) {
NET3RL = Byte.parseByte(s);
} else {
NET3RL = Byte.MIN_VALUE;
}
}

protected final void initNET3WR(String s) {
if (!s.trim().isEmpty()) {
NET3WR = Short.parseShort(s);
} else {
NET3WR = Short.MIN_VALUE;
}
}

protected final void initNETAG_1(String s) {
if (!s.trim().isEmpty()) {
NETAG_1 = Short.parseShort(s);
} else {
NETAG_1 = Short.MIN_VALUE;
}
}

protected final void initNETAG_2(String s) {
if (!s.trim().isEmpty()) {
NETAG_2 = Short.parseShort(s);
} else {
NETAG_2 = Short.MIN_VALUE;
}
}

protected final void initNETAG_3(String s) {
if (!s.trim().isEmpty()) {
NETAG_3 = Short.parseShort(s);
} else {
NETAG_3 = Short.MIN_VALUE;
}
}

protected final void initNETKN_1(String s) {
if (!s.trim().isEmpty()) {
NETKN_1 = Byte.parseByte(s);
} else {
NETKN_1 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_2(String s) {
if (!s.trim().isEmpty()) {
NETKN_2 = Byte.parseByte(s);
} else {
NETKN_2 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_3(String s) {
if (!s.trim().isEmpty()) {
NETKN_3 = Byte.parseByte(s);
} else {
NETKN_3 = Byte.MIN_VALUE;
}
}

protected final void initNETPH_1(String s) {
if (!s.trim().isEmpty()) {
NETPH_1 = Short.parseShort(s);
} else {
NETPH_1 = Short.MIN_VALUE;
}
}

protected final void initNETPH_2(String s) {
if (!s.trim().isEmpty()) {
NETPH_2 = Short.parseShort(s);
} else {
NETPH_2 = Short.MIN_VALUE;
}
}

protected final void initNETPH_3(String s) {
if (!s.trim().isEmpty()) {
NETPH_3 = Short.parseShort(s);
} else {
NETPH_3 = Short.MIN_VALUE;
}
}

protected final void initNETRL_1(String s) {
if (!s.trim().isEmpty()) {
NETRL_1 = Byte.parseByte(s);
} else {
NETRL_1 = Byte.MIN_VALUE;
}
}

protected final void initNETRL_2(String s) {
if (!s.trim().isEmpty()) {
NETRL_2 = Byte.parseByte(s);
} else {
NETRL_2 = Byte.MIN_VALUE;
}
}

protected final void initNETRL_3(String s) {
if (!s.trim().isEmpty()) {
NETRL_3 = Byte.parseByte(s);
} else {
NETRL_3 = Byte.MIN_VALUE;
}
}

protected final void initNETSX1(String s) {
if (!s.trim().isEmpty()) {
NETSX1 = Short.parseShort(s);
} else {
NETSX1 = Short.MIN_VALUE;
}
}

protected final void initNETSX2(String s) {
if (!s.trim().isEmpty()) {
NETSX2 = Short.parseShort(s);
} else {
NETSX2 = Short.MIN_VALUE;
}
}

protected final void initNETSX3(String s) {
if (!s.trim().isEmpty()) {
NETSX3 = Short.parseShort(s);
} else {
NETSX3 = Short.MIN_VALUE;
}
}

protected final void initNETSX_1(String s) {
if (!s.trim().isEmpty()) {
NETSX_1 = Short.parseShort(s);
} else {
NETSX_1 = Short.MIN_VALUE;
}
}

protected final void initNETSX_2(String s) {
if (!s.trim().isEmpty()) {
NETSX_2 = Short.parseShort(s);
} else {
NETSX_2 = Short.MIN_VALUE;
}
}

protected final void initNETSX_3(String s) {
if (!s.trim().isEmpty()) {
NETSX_3 = Short.parseShort(s);
} else {
NETSX_3 = Short.MIN_VALUE;
}
}

protected final void initNETWR_1(String s) {
if (!s.trim().isEmpty()) {
NETWR_1 = Short.parseShort(s);
} else {
NETWR_1 = Short.MIN_VALUE;
}
}

protected final void initNETWR_2(String s) {
if (!s.trim().isEmpty()) {
NETWR_2 = Short.parseShort(s);
} else {
NETWR_2 = Short.MIN_VALUE;
}
}

protected final void initNETWR_3(String s) {
if (!s.trim().isEmpty()) {
NETWR_3 = Short.parseShort(s);
} else {
NETWR_3 = Short.MIN_VALUE;
}
}

protected final void initNEWHY(String s) {
if (!s.trim().isEmpty()) {
NEWHY = Short.parseShort(s);
} else {
NEWHY = Short.MIN_VALUE;
}
}

protected final void initNF1(String s) {
if (!s.trim().isEmpty()) {
NF1 = Short.parseShort(s);
} else {
NF1 = Short.MIN_VALUE;
}
}

protected final void initNJBNEW(String s) {
if (!s.trim().isEmpty()) {
NJBNEW = Short.parseShort(s);
} else {
NJBNEW = Short.MIN_VALUE;
}
}

protected final void initNJBS(String s) {
if (!s.trim().isEmpty()) {
NJBS = Short.parseShort(s);
} else {
NJBS = Short.MIN_VALUE;
}
}

protected final void initNJBSP(String s) {
if (!s.trim().isEmpty()) {
NJBSP = Short.parseShort(s);
} else {
NJBSP = Short.MIN_VALUE;
}
}

protected final void initNJBWKS(String s) {
if (!s.trim().isEmpty()) {
NJBWKS = Double.parseDouble(s);
} else {
NJBWKS = Double.NaN;
}
}

protected final void initNJISP(String s) {
if (!s.trim().isEmpty()) {
NJISP = Short.parseShort(s);
} else {
NJISP = Short.MIN_VALUE;
}
}

protected final void initNJIWKS(String s) {
if (!s.trim().isEmpty()) {
NJIWKS = Double.parseDouble(s);
} else {
NJIWKS = Double.NaN;
}
}

protected final void initNJUSP(String s) {
if (!s.trim().isEmpty()) {
NJUSP = Short.parseShort(s);
} else {
NJUSP = Short.MIN_VALUE;
}
}

protected final void initNJUWKS(String s) {
if (!s.trim().isEmpty()) {
NJUWKS = Double.parseDouble(s);
} else {
NJUWKS = Double.NaN;
}
}

protected final void initNMAR_BH(String s) {
if (!s.trim().isEmpty()) {
NMAR_BH = Byte.parseByte(s);
} else {
NMAR_BH = Byte.MIN_VALUE;
}
}

protected final void initNQFEDA(String s) {
if (!s.trim().isEmpty()) {
NQFEDA = Byte.parseByte(s);
} else {
NQFEDA = Byte.MIN_VALUE;
}
}

protected final void initNQFEDB(String s) {
if (!s.trim().isEmpty()) {
NQFEDB = Byte.parseByte(s);
} else {
NQFEDB = Byte.MIN_VALUE;
}
}

protected final void initNQFEDC(String s) {
if (!s.trim().isEmpty()) {
NQFEDC = Byte.parseByte(s);
} else {
NQFEDC = Byte.MIN_VALUE;
}
}

protected final void initNQFEDD(String s) {
if (!s.trim().isEmpty()) {
NQFEDD = Short.parseShort(s);
} else {
NQFEDD = Short.MIN_VALUE;
}
}

protected final void initNQFEDE(String s) {
if (!s.trim().isEmpty()) {
NQFEDE = Short.parseShort(s);
} else {
NQFEDE = Short.MIN_VALUE;
}
}

protected final void initNQFEDF(String s) {
if (!s.trim().isEmpty()) {
NQFEDF = Byte.parseByte(s);
} else {
NQFEDF = Byte.MIN_VALUE;
}
}

protected final void initNQFEDG(String s) {
if (!s.trim().isEmpty()) {
NQFEDG = Byte.parseByte(s);
} else {
NQFEDG = Byte.MIN_VALUE;
}
}

protected final void initNQFEDH(String s) {
if (!s.trim().isEmpty()) {
NQFEDH = Byte.parseByte(s);
} else {
NQFEDH = Byte.MIN_VALUE;
}
}

protected final void initNQFEDI(String s) {
if (!s.trim().isEmpty()) {
NQFEDI = Byte.parseByte(s);
} else {
NQFEDI = Byte.MIN_VALUE;
}
}

protected final void initNQFEDJ(String s) {
if (!s.trim().isEmpty()) {
NQFEDJ = Byte.parseByte(s);
} else {
NQFEDJ = Byte.MIN_VALUE;
}
}

protected final void initNQFEDK(String s) {
if (!s.trim().isEmpty()) {
NQFEDK = Byte.parseByte(s);
} else {
NQFEDK = Byte.MIN_VALUE;
}
}

protected final void initNQFEDL(String s) {
if (!s.trim().isEmpty()) {
NQFEDL = Short.parseShort(s);
} else {
NQFEDL = Short.MIN_VALUE;
}
}

protected final void initNQFEDM(String s) {
if (!s.trim().isEmpty()) {
NQFEDM = Byte.parseByte(s);
} else {
NQFEDM = Byte.MIN_VALUE;
}
}

protected final void initNQFEDN(String s) {
if (!s.trim().isEmpty()) {
NQFEDN = Short.parseShort(s);
} else {
NQFEDN = Short.MIN_VALUE;
}
}

protected final void initNQFEDO(String s) {
if (!s.trim().isEmpty()) {
NQFEDO = Byte.parseByte(s);
} else {
NQFEDO = Byte.MIN_VALUE;
}
}

protected final void initNQFEDP(String s) {
if (!s.trim().isEmpty()) {
NQFEDP = Byte.parseByte(s);
} else {
NQFEDP = Byte.MIN_VALUE;
}
}

protected final void initNQFEDQ(String s) {
if (!s.trim().isEmpty()) {
NQFEDQ = Byte.parseByte(s);
} else {
NQFEDQ = Byte.MIN_VALUE;
}
}

protected final void initNQFEDR(String s) {
if (!s.trim().isEmpty()) {
NQFEDR = Byte.parseByte(s);
} else {
NQFEDR = Byte.MIN_VALUE;
}
}

protected final void initNQFEDS(String s) {
if (!s.trim().isEmpty()) {
NQFEDS = Short.parseShort(s);
} else {
NQFEDS = Short.MIN_VALUE;
}
}

protected final void initNQFEDT(String s) {
if (!s.trim().isEmpty()) {
NQFEDT = Byte.parseByte(s);
} else {
NQFEDT = Byte.MIN_VALUE;
}
}

protected final void initNQFEXA(String s) {
if (!s.trim().isEmpty()) {
NQFEXA = Short.parseShort(s);
} else {
NQFEXA = Short.MIN_VALUE;
}
}

protected final void initNQFEXB(String s) {
if (!s.trim().isEmpty()) {
NQFEXB = Short.parseShort(s);
} else {
NQFEXB = Short.MIN_VALUE;
}
}

protected final void initNQFEXC(String s) {
if (!s.trim().isEmpty()) {
NQFEXC = Short.parseShort(s);
} else {
NQFEXC = Short.MIN_VALUE;
}
}

protected final void initNQFEXG(String s) {
if (!s.trim().isEmpty()) {
NQFEXG = Byte.parseByte(s);
} else {
NQFEXG = Byte.MIN_VALUE;
}
}

protected final void initNQFEXH(String s) {
if (!s.trim().isEmpty()) {
NQFEXH = Byte.parseByte(s);
} else {
NQFEXH = Byte.MIN_VALUE;
}
}

protected final void initNQFEXI(String s) {
if (!s.trim().isEmpty()) {
NQFEXI = Byte.parseByte(s);
} else {
NQFEXI = Byte.MIN_VALUE;
}
}

protected final void initNQFEXJ(String s) {
if (!s.trim().isEmpty()) {
NQFEXJ = Byte.parseByte(s);
} else {
NQFEXJ = Byte.MIN_VALUE;
}
}

protected final void initNQFEXL(String s) {
if (!s.trim().isEmpty()) {
NQFEXL = Byte.parseByte(s);
} else {
NQFEXL = Byte.MIN_VALUE;
}
}

protected final void initNRPART(String s) {
if (!s.trim().isEmpty()) {
NRPART = Byte.parseByte(s);
} else {
NRPART = Byte.MIN_VALUE;
}
}

protected final void initNRPTIM(String s) {
if (!s.trim().isEmpty()) {
NRPTIM = Byte.parseByte(s);
} else {
NRPTIM = Byte.MIN_VALUE;
}
}

protected final void initNRPXPM1(String s) {
if (!s.trim().isEmpty()) {
NRPXPM1 = Byte.parseByte(s);
} else {
NRPXPM1 = Byte.MIN_VALUE;
}
}

protected final void initNRPXPM2(String s) {
if (!s.trim().isEmpty()) {
NRPXPM2 = Byte.parseByte(s);
} else {
NRPXPM2 = Byte.MIN_VALUE;
}
}

protected final void initNTRAIN(String s) {
if (!s.trim().isEmpty()) {
NTRAIN = Byte.parseByte(s);
} else {
NTRAIN = Byte.MIN_VALUE;
}
}

protected final void initNXDTS(String s) {
if (!s.trim().isEmpty()) {
NXDTS = Short.parseShort(s);
} else {
NXDTS = Short.MIN_VALUE;
}
}

protected final void initOPFAMK(String s) {
if (!s.trim().isEmpty()) {
OPFAMK = Short.parseShort(s);
} else {
OPFAMK = Short.MIN_VALUE;
}
}

protected final void initOPFAML(String s) {
if (!s.trim().isEmpty()) {
OPFAML = Short.parseShort(s);
} else {
OPFAML = Short.MIN_VALUE;
}
}

protected final void initOPFAMO(String s) {
if (!s.trim().isEmpty()) {
OPFAMO = Byte.parseByte(s);
} else {
OPFAMO = Byte.MIN_VALUE;
}
}

protected final void initOPFAMP(String s) {
if (!s.trim().isEmpty()) {
OPFAMP = Byte.parseByte(s);
} else {
OPFAMP = Byte.MIN_VALUE;
}
}

protected final void initOPFAMQ(String s) {
if (!s.trim().isEmpty()) {
OPFAMQ = Byte.parseByte(s);
} else {
OPFAMQ = Byte.MIN_VALUE;
}
}

protected final void initOPFAMR(String s) {
if (!s.trim().isEmpty()) {
OPFAMR = Byte.parseByte(s);
} else {
OPFAMR = Byte.MIN_VALUE;
}
}

protected final void initOPNGBHA(String s) {
if (!s.trim().isEmpty()) {
OPNGBHA = Byte.parseByte(s);
} else {
OPNGBHA = Byte.MIN_VALUE;
}
}

protected final void initOPNGBHB(String s) {
if (!s.trim().isEmpty()) {
OPNGBHB = Byte.parseByte(s);
} else {
OPNGBHB = Byte.MIN_VALUE;
}
}

protected final void initOPNGBHC(String s) {
if (!s.trim().isEmpty()) {
OPNGBHC = Byte.parseByte(s);
} else {
OPNGBHC = Byte.MIN_VALUE;
}
}

protected final void initOPNGBHD(String s) {
if (!s.trim().isEmpty()) {
OPNGBHD = Byte.parseByte(s);
} else {
OPNGBHD = Byte.MIN_VALUE;
}
}

protected final void initOPNGBHE(String s) {
if (!s.trim().isEmpty()) {
OPNGBHE = Byte.parseByte(s);
} else {
OPNGBHE = Byte.MIN_VALUE;
}
}

protected final void initOPNGBHF(String s) {
if (!s.trim().isEmpty()) {
OPNGBHF = Byte.parseByte(s);
} else {
OPNGBHF = Byte.MIN_VALUE;
}
}

protected final void initOPNGBHG(String s) {
if (!s.trim().isEmpty()) {
OPNGBHG = Byte.parseByte(s);
} else {
OPNGBHG = Byte.MIN_VALUE;
}
}

protected final void initOPNGBHH(String s) {
if (!s.trim().isEmpty()) {
OPNGBHH = Byte.parseByte(s);
} else {
OPNGBHH = Byte.MIN_VALUE;
}
}

protected final void initOPPOLA(String s) {
if (!s.trim().isEmpty()) {
OPPOLA = Short.parseShort(s);
} else {
OPPOLA = Short.MIN_VALUE;
}
}

protected final void initOPPOLB(String s) {
if (!s.trim().isEmpty()) {
OPPOLB = Short.parseShort(s);
} else {
OPPOLB = Short.MIN_VALUE;
}
}

protected final void initOPPOLC(String s) {
if (!s.trim().isEmpty()) {
OPPOLC = Short.parseShort(s);
} else {
OPPOLC = Short.MIN_VALUE;
}
}

protected final void initOPPOLD(String s) {
if (!s.trim().isEmpty()) {
OPPOLD = Short.parseShort(s);
} else {
OPPOLD = Short.MIN_VALUE;
}
}

protected final void initPABOSS(String s) {
if (!s.trim().isEmpty()) {
PABOSS = Byte.parseByte(s);
} else {
PABOSS = Byte.MIN_VALUE;
}
}

protected final void initPACSSF(String s) {
if (!s.trim().isEmpty()) {
PACSSF = Double.parseDouble(s);
} else {
PACSSF = Double.NaN;
}
}

protected final void initPACSSM(String s) {
if (!s.trim().isEmpty()) {
PACSSM = Double.parseDouble(s);
} else {
PACSSM = Double.NaN;
}
}

protected final void initPAGOLD(String s) {
if (!s.trim().isEmpty()) {
PAGOLD = Byte.parseByte(s);
} else {
PAGOLD = Byte.MIN_VALUE;
}
}

protected final void initPAHGS(String s) {
if (!s.trim().isEmpty()) {
PAHGS = Double.parseDouble(s);
} else {
PAHGS = Double.NaN;
}
}

protected final void initPAISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
PAISCO88_CC = Short.parseShort(s);
} else {
PAISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initPAISCO_CC(String s) {
if (!s.trim().isEmpty()) {
PAISCO_CC = s;
}
}

protected final void initPAJU(String s) {
if (!s.trim().isEmpty()) {
PAJU = Byte.parseByte(s);
} else {
PAJU = Byte.MIN_VALUE;
}
}

protected final void initPAJU_BH(String s) {
if (!s.trim().isEmpty()) {
PAJU_BH = Byte.parseByte(s);
} else {
PAJU_BH = Byte.MIN_VALUE;
}
}

protected final void initPAMNGR(String s) {
if (!s.trim().isEmpty()) {
PAMNGR = Byte.parseByte(s);
} else {
PAMNGR = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC8_DV = Byte.parseByte(s);
} else {
PANSSEC8_DV = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC_DV = Byte.parseByte(s);
} else {
PANSSEC_DV = Byte.MIN_VALUE;
}
}

protected final void initPARGSC(String s) {
if (!s.trim().isEmpty()) {
PARGSC = Byte.parseByte(s);
} else {
PARGSC = Byte.MIN_VALUE;
}
}

protected final void initPASEC(String s) {
if (!s.trim().isEmpty()) {
PASEC = Short.parseShort(s);
} else {
PASEC = Short.MIN_VALUE;
}
}

protected final void initPASEG(String s) {
if (!s.trim().isEmpty()) {
PASEG = Byte.parseByte(s);
} else {
PASEG = Byte.MIN_VALUE;
}
}

protected final void initPASEMP(String s) {
if (!s.trim().isEmpty()) {
PASEMP = Byte.parseByte(s);
} else {
PASEMP = Byte.MIN_VALUE;
}
}

protected final void initPASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC90_CC = Byte.parseByte(s);
} else {
PASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPAYDF1(String s) {
if (!s.trim().isEmpty()) {
PAYDF1 = Short.parseShort(s);
} else {
PAYDF1 = Short.MIN_VALUE;
}
}

protected final void initPAYDF2(String s) {
if (!s.trim().isEmpty()) {
PAYDF2 = Short.parseShort(s);
} else {
PAYDF2 = Short.MIN_VALUE;
}
}

protected final void initPAYDF3(String s) {
if (!s.trim().isEmpty()) {
PAYDF3 = Short.parseShort(s);
} else {
PAYDF3 = Short.MIN_VALUE;
}
}

protected final void initPAYDF4(String s) {
if (!s.trim().isEmpty()) {
PAYDF4 = Short.parseShort(s);
} else {
PAYDF4 = Short.MIN_VALUE;
}
}

protected final void initPAYDF5(String s) {
if (!s.trim().isEmpty()) {
PAYDF5 = Short.parseShort(s);
} else {
PAYDF5 = Short.MIN_VALUE;
}
}

protected final void initPAYDF6(String s) {
if (!s.trim().isEmpty()) {
PAYDF6 = Short.parseShort(s);
} else {
PAYDF6 = Short.MIN_VALUE;
}
}

protected final void initPAYDF7(String s) {
if (!s.trim().isEmpty()) {
PAYDF7 = Short.parseShort(s);
} else {
PAYDF7 = Short.MIN_VALUE;
}
}

protected final void initPAYDF8(String s) {
if (!s.trim().isEmpty()) {
PAYDF8 = Short.parseShort(s);
} else {
PAYDF8 = Short.MIN_VALUE;
}
}

protected final void initPAYDF9(String s) {
if (!s.trim().isEmpty()) {
PAYDF9 = Byte.parseByte(s);
} else {
PAYDF9 = Byte.MIN_VALUE;
}
}

protected final void initPAYGLI(String s) {
if (!s.trim().isEmpty()) {
PAYGLI = Short.parseShort(s);
} else {
PAYGLI = Short.MIN_VALUE;
}
}

protected final void initPAYGLY(String s) {
if (!s.trim().isEmpty()) {
PAYGLY = Double.parseDouble(s);
} else {
PAYGLY = Double.NaN;
}
}

protected final void initPAYGTI(String s) {
if (!s.trim().isEmpty()) {
PAYGTI = Short.parseShort(s);
} else {
PAYGTI = Short.MIN_VALUE;
}
}

protected final void initPAYGTY(String s) {
if (!s.trim().isEmpty()) {
PAYGTY = Double.parseDouble(s);
} else {
PAYGTY = Double.NaN;
}
}

protected final void initPAYGW(String s) {
if (!s.trim().isEmpty()) {
PAYGW = Double.parseDouble(s);
} else {
PAYGW = Double.NaN;
}
}

protected final void initPAYG_DV(String s) {
if (!s.trim().isEmpty()) {
PAYG_DV = Double.parseDouble(s);
} else {
PAYG_DV = Double.NaN;
}
}

protected final void initPAYLY(String s) {
if (!s.trim().isEmpty()) {
PAYLY = Integer.parseInt(s);
} else {
PAYLY = Integer.MIN_VALUE;
}
}

protected final void initPAYLYG(String s) {
if (!s.trim().isEmpty()) {
PAYLYG = Short.parseShort(s);
} else {
PAYLYG = Short.MIN_VALUE;
}
}

protected final void initPAYLYW(String s) {
if (!s.trim().isEmpty()) {
PAYLYW = Double.parseDouble(s);
} else {
PAYLYW = Double.NaN;
}
}

protected final void initPAYNLI(String s) {
if (!s.trim().isEmpty()) {
PAYNLI = Short.parseShort(s);
} else {
PAYNLI = Short.MIN_VALUE;
}
}

protected final void initPAYNLY(String s) {
if (!s.trim().isEmpty()) {
PAYNLY = Double.parseDouble(s);
} else {
PAYNLY = Double.NaN;
}
}

protected final void initPAYNTI(String s) {
if (!s.trim().isEmpty()) {
PAYNTI = Short.parseShort(s);
} else {
PAYNTI = Short.MIN_VALUE;
}
}

protected final void initPAYNTY(String s) {
if (!s.trim().isEmpty()) {
PAYNTY = Double.parseDouble(s);
} else {
PAYNTY = Double.NaN;
}
}

protected final void initPAYNW(String s) {
if (!s.trim().isEmpty()) {
PAYNW = Double.parseDouble(s);
} else {
PAYNW = Double.NaN;
}
}

protected final void initPAYS(String s) {
if (!s.trim().isEmpty()) {
PAYS = Integer.parseInt(s);
} else {
PAYS = Integer.MIN_VALUE;
}
}

protected final void initPAYSG(String s) {
if (!s.trim().isEmpty()) {
PAYSG = Short.parseShort(s);
} else {
PAYSG = Short.MIN_VALUE;
}
}

protected final void initPAYSLP(String s) {
if (!s.trim().isEmpty()) {
PAYSLP = Short.parseShort(s);
} else {
PAYSLP = Short.MIN_VALUE;
}
}

protected final void initPAYSW(String s) {
if (!s.trim().isEmpty()) {
PAYSW = Double.parseDouble(s);
} else {
PAYSW = Double.NaN;
}
}

protected final void initPAYUW(String s) {
if (!s.trim().isEmpty()) {
PAYUW = Double.parseDouble(s);
} else {
PAYUW = Double.NaN;
}
}

protected final void initPENADD(String s) {
if (!s.trim().isEmpty()) {
PENADD = Short.parseShort(s);
} else {
PENADD = Short.MIN_VALUE;
}
}

protected final void initPENADV(String s) {
if (!s.trim().isEmpty()) {
PENADV = Short.parseShort(s);
} else {
PENADV = Short.MIN_VALUE;
}
}

protected final void initPENADW(String s) {
if (!s.trim().isEmpty()) {
PENADW = Double.parseDouble(s);
} else {
PENADW = Double.NaN;
}
}

protected final void initPENB4(String s) {
if (!s.trim().isEmpty()) {
PENB4 = Short.parseShort(s);
} else {
PENB4 = Short.MIN_VALUE;
}
}

protected final void initPENB4V(String s) {
if (!s.trim().isEmpty()) {
PENB4V = Short.parseShort(s);
} else {
PENB4V = Short.MIN_VALUE;
}
}

protected final void initPENB4W(String s) {
if (!s.trim().isEmpty()) {
PENB4W = Double.parseDouble(s);
} else {
PENB4W = Double.NaN;
}
}

protected final void initPENB4Y4(String s) {
if (!s.trim().isEmpty()) {
PENB4Y4 = Short.parseShort(s);
} else {
PENB4Y4 = Short.MIN_VALUE;
}
}

protected final void initPENYR4(String s) {
if (!s.trim().isEmpty()) {
PENYR4 = Short.parseShort(s);
} else {
PENYR4 = Short.MIN_VALUE;
}
}

protected final void initPID(String s) {
if (!s.trim().isEmpty()) {
PID = Integer.parseInt(s);
} else {
PID = Integer.MIN_VALUE;
}
}

protected final void initPLBORNC_CC(String s) {
if (!s.trim().isEmpty()) {
PLBORNC_CC = Short.parseShort(s);
} else {
PLBORNC_CC = Short.MIN_VALUE;
}
}

protected final void initPLNEW(String s) {
if (!s.trim().isEmpty()) {
PLNEW = Short.parseShort(s);
} else {
PLNEW = Short.MIN_VALUE;
}
}

protected final void initPLNOWM(String s) {
if (!s.trim().isEmpty()) {
PLNOWM = Short.parseShort(s);
} else {
PLNOWM = Short.MIN_VALUE;
}
}

protected final void initPLNOWY4(String s) {
if (!s.trim().isEmpty()) {
PLNOWY4 = Short.parseShort(s);
} else {
PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initPPLEVR(String s) {
if (!s.trim().isEmpty()) {
PPLEVR = Short.parseShort(s);
} else {
PPLEVR = Short.MIN_VALUE;
}
}

protected final void initPPPEN(String s) {
if (!s.trim().isEmpty()) {
PPPEN = Short.parseShort(s);
} else {
PPPEN = Short.MIN_VALUE;
}
}

protected final void initPREARNI(String s) {
if (!s.trim().isEmpty()) {
PREARNI = Short.parseShort(s);
} else {
PREARNI = Short.MIN_VALUE;
}
}

protected final void initPREARN_BH(String s) {
if (!s.trim().isEmpty()) {
PREARN_BH = Short.parseShort(s);
} else {
PREARN_BH = Short.MIN_VALUE;
}
}

protected final void initPRESBGM(String s) {
if (!s.trim().isEmpty()) {
PRESBGM = Short.parseShort(s);
} else {
PRESBGM = Short.MIN_VALUE;
}
}

protected final void initPRESBY4(String s) {
if (!s.trim().isEmpty()) {
PRESBY4 = Short.parseShort(s);
} else {
PRESBY4 = Short.MIN_VALUE;
}
}

protected final void initPRESLY(String s) {
if (!s.trim().isEmpty()) {
PRESLY = Short.parseShort(s);
} else {
PRESLY = Short.MIN_VALUE;
}
}

protected final void initPRF101(String s) {
if (!s.trim().isEmpty()) {
PRF101 = Short.parseShort(s);
} else {
PRF101 = Short.MIN_VALUE;
}
}

protected final void initPRF102(String s) {
if (!s.trim().isEmpty()) {
PRF102 = Short.parseShort(s);
} else {
PRF102 = Short.MIN_VALUE;
}
}

protected final void initPRF116(String s) {
if (!s.trim().isEmpty()) {
PRF116 = Short.parseShort(s);
} else {
PRF116 = Short.MIN_VALUE;
}
}

protected final void initPRF125(String s) {
if (!s.trim().isEmpty()) {
PRF125 = Short.parseShort(s);
} else {
PRF125 = Short.MIN_VALUE;
}
}

protected final void initPRF131(String s) {
if (!s.trim().isEmpty()) {
PRF131 = Short.parseShort(s);
} else {
PRF131 = Short.MIN_VALUE;
}
}

protected final void initPRF135(String s) {
if (!s.trim().isEmpty()) {
PRF135 = Short.parseShort(s);
} else {
PRF135 = Short.MIN_VALUE;
}
}

protected final void initPRF137(String s) {
if (!s.trim().isEmpty()) {
PRF137 = Byte.parseByte(s);
} else {
PRF137 = Byte.MIN_VALUE;
}
}

protected final void initPRF139(String s) {
if (!s.trim().isEmpty()) {
PRF139 = Short.parseShort(s);
} else {
PRF139 = Short.MIN_VALUE;
}
}

protected final void initPRF141(String s) {
if (!s.trim().isEmpty()) {
PRF141 = Short.parseShort(s);
} else {
PRF141 = Short.MIN_VALUE;
}
}

protected final void initPRFEHQ(String s) {
if (!s.trim().isEmpty()) {
PRFEHQ = Short.parseShort(s);
} else {
PRFEHQ = Short.MIN_VALUE;
}
}

protected final void initPRFIRN(String s) {
if (!s.trim().isEmpty()) {
PRFIRN = Byte.parseByte(s);
} else {
PRFIRN = Byte.MIN_VALUE;
}
}

protected final void initPRFITBI(String s) {
if (!s.trim().isEmpty()) {
PRFITBI = Short.parseShort(s);
} else {
PRFITBI = Short.MIN_VALUE;
}
}

protected final void initPRFITB_BH(String s) {
if (!s.trim().isEmpty()) {
PRFITB_BH = Short.parseShort(s);
} else {
PRFITB_BH = Short.MIN_VALUE;
}
}

protected final void initPRJBBY4(String s) {
if (!s.trim().isEmpty()) {
PRJBBY4 = Short.parseShort(s);
} else {
PRJBBY4 = Short.MIN_VALUE;
}
}

protected final void initPRJBFT(String s) {
if (!s.trim().isEmpty()) {
PRJBFT = Byte.parseByte(s);
} else {
PRJBFT = Byte.MIN_VALUE;
}
}

protected final void initPRJBLY(String s) {
if (!s.trim().isEmpty()) {
PRJBLY = Short.parseShort(s);
} else {
PRJBLY = Short.MIN_VALUE;
}
}

protected final void initPRRS2I(String s) {
if (!s.trim().isEmpty()) {
PRRS2I = Short.parseShort(s);
} else {
PRRS2I = Short.MIN_VALUE;
}
}

protected final void initPRSEHQ(String s) {
if (!s.trim().isEmpty()) {
PRSEHQ = Short.parseShort(s);
} else {
PRSEHQ = Short.MIN_VALUE;
}
}

protected final void initPRWHY(String s) {
if (!s.trim().isEmpty()) {
PRWHY = Short.parseShort(s);
} else {
PRWHY = Short.MIN_VALUE;
}
}

protected final void initPYAGE1(String s) {
if (!s.trim().isEmpty()) {
PYAGE1 = Byte.parseByte(s);
} else {
PYAGE1 = Byte.MIN_VALUE;
}
}

protected final void initPYAGE2(String s) {
if (!s.trim().isEmpty()) {
PYAGE2 = Byte.parseByte(s);
} else {
PYAGE2 = Byte.MIN_VALUE;
}
}

protected final void initPYAGE3(String s) {
if (!s.trim().isEmpty()) {
PYAGE3 = Byte.parseByte(s);
} else {
PYAGE3 = Byte.MIN_VALUE;
}
}

protected final void initPYARG1(String s) {
if (!s.trim().isEmpty()) {
PYARG1 = Short.parseShort(s);
} else {
PYARG1 = Short.MIN_VALUE;
}
}

protected final void initPYARG2(String s) {
if (!s.trim().isEmpty()) {
PYARG2 = Short.parseShort(s);
} else {
PYARG2 = Short.MIN_VALUE;
}
}

protected final void initPYARG3(String s) {
if (!s.trim().isEmpty()) {
PYARG3 = Short.parseShort(s);
} else {
PYARG3 = Short.MIN_VALUE;
}
}

protected final void initPYHLTH(String s) {
if (!s.trim().isEmpty()) {
PYHLTH = Byte.parseByte(s);
} else {
PYHLTH = Byte.MIN_VALUE;
}
}

protected final void initPYHWRK(String s) {
if (!s.trim().isEmpty()) {
PYHWRK = Byte.parseByte(s);
} else {
PYHWRK = Byte.MIN_VALUE;
}
}

protected final void initPYMAN1(String s) {
if (!s.trim().isEmpty()) {
PYMAN1 = Byte.parseByte(s);
} else {
PYMAN1 = Byte.MIN_VALUE;
}
}

protected final void initPYMAN2(String s) {
if (!s.trim().isEmpty()) {
PYMAN2 = Byte.parseByte(s);
} else {
PYMAN2 = Byte.MIN_VALUE;
}
}

protected final void initPYMAN3(String s) {
if (!s.trim().isEmpty()) {
PYMAN3 = Byte.parseByte(s);
} else {
PYMAN3 = Byte.MIN_VALUE;
}
}

protected final void initPYNYP(String s) {
if (!s.trim().isEmpty()) {
PYNYP = Short.parseShort(s);
} else {
PYNYP = Short.MIN_VALUE;
}
}

protected final void initPYPNO1(String s) {
if (!s.trim().isEmpty()) {
PYPNO1 = Short.parseShort(s);
} else {
PYPNO1 = Short.MIN_VALUE;
}
}

protected final void initPYPNO2(String s) {
if (!s.trim().isEmpty()) {
PYPNO2 = Short.parseShort(s);
} else {
PYPNO2 = Short.MIN_VALUE;
}
}

protected final void initPYPNO3(String s) {
if (!s.trim().isEmpty()) {
PYPNO3 = Short.parseShort(s);
} else {
PYPNO3 = Short.MIN_VALUE;
}
}

protected final void initPYSAD1(String s) {
if (!s.trim().isEmpty()) {
PYSAD1 = Short.parseShort(s);
} else {
PYSAD1 = Short.MIN_VALUE;
}
}

protected final void initPYSAD2(String s) {
if (!s.trim().isEmpty()) {
PYSAD2 = Short.parseShort(s);
} else {
PYSAD2 = Short.MIN_VALUE;
}
}

protected final void initPYSAD3(String s) {
if (!s.trim().isEmpty()) {
PYSAD3 = Short.parseShort(s);
} else {
PYSAD3 = Short.MIN_VALUE;
}
}

protected final void initPYSMK1(String s) {
if (!s.trim().isEmpty()) {
PYSMK1 = Byte.parseByte(s);
} else {
PYSMK1 = Byte.MIN_VALUE;
}
}

protected final void initPYSMK2(String s) {
if (!s.trim().isEmpty()) {
PYSMK2 = Byte.parseByte(s);
} else {
PYSMK2 = Byte.MIN_VALUE;
}
}

protected final void initPYSMK3(String s) {
if (!s.trim().isEmpty()) {
PYSMK3 = Byte.parseByte(s);
} else {
PYSMK3 = Byte.MIN_VALUE;
}
}

protected final void initPYTLK1(String s) {
if (!s.trim().isEmpty()) {
PYTLK1 = Short.parseShort(s);
} else {
PYTLK1 = Short.MIN_VALUE;
}
}

protected final void initPYTLK2(String s) {
if (!s.trim().isEmpty()) {
PYTLK2 = Short.parseShort(s);
} else {
PYTLK2 = Short.MIN_VALUE;
}
}

protected final void initPYTLK3(String s) {
if (!s.trim().isEmpty()) {
PYTLK3 = Short.parseShort(s);
} else {
PYTLK3 = Short.MIN_VALUE;
}
}

protected final void initPYWHR1(String s) {
if (!s.trim().isEmpty()) {
PYWHR1 = Short.parseShort(s);
} else {
PYWHR1 = Short.MIN_VALUE;
}
}

protected final void initPYWHR2(String s) {
if (!s.trim().isEmpty()) {
PYWHR2 = Short.parseShort(s);
} else {
PYWHR2 = Short.MIN_VALUE;
}
}

protected final void initPYWHR3(String s) {
if (!s.trim().isEmpty()) {
PYWHR3 = Short.parseShort(s);
} else {
PYWHR3 = Short.MIN_VALUE;
}
}

protected final void initPYWOR1(String s) {
if (!s.trim().isEmpty()) {
PYWOR1 = Short.parseShort(s);
} else {
PYWOR1 = Short.MIN_VALUE;
}
}

protected final void initPYWOR2(String s) {
if (!s.trim().isEmpty()) {
PYWOR2 = Short.parseShort(s);
} else {
PYWOR2 = Short.MIN_VALUE;
}
}

protected final void initPYWOR3(String s) {
if (!s.trim().isEmpty()) {
PYWOR3 = Short.parseShort(s);
} else {
PYWOR3 = Short.MIN_VALUE;
}
}

protected final void initQFA(String s) {
if (!s.trim().isEmpty()) {
QFA = Short.parseShort(s);
} else {
QFA = Short.MIN_VALUE;
}
}

protected final void initQFACHI(String s) {
if (!s.trim().isEmpty()) {
QFACHI = Short.parseShort(s);
} else {
QFACHI = Short.MIN_VALUE;
}
}

protected final void initQFB(String s) {
if (!s.trim().isEmpty()) {
QFB = Short.parseShort(s);
} else {
QFB = Short.MIN_VALUE;
}
}

protected final void initQFC(String s) {
if (!s.trim().isEmpty()) {
QFC = Short.parseShort(s);
} else {
QFC = Short.MIN_VALUE;
}
}

protected final void initQFD(String s) {
if (!s.trim().isEmpty()) {
QFD = Short.parseShort(s);
} else {
QFD = Short.MIN_VALUE;
}
}

protected final void initQFE(String s) {
if (!s.trim().isEmpty()) {
QFE = Short.parseShort(s);
} else {
QFE = Short.MIN_VALUE;
}
}

protected final void initQFED(String s) {
if (!s.trim().isEmpty()) {
QFED = Short.parseShort(s);
} else {
QFED = Short.MIN_VALUE;
}
}

protected final void initQFEDA(String s) {
if (!s.trim().isEmpty()) {
QFEDA = Short.parseShort(s);
} else {
QFEDA = Short.MIN_VALUE;
}
}

protected final void initQFEDB(String s) {
if (!s.trim().isEmpty()) {
QFEDB = Short.parseShort(s);
} else {
QFEDB = Short.MIN_VALUE;
}
}

protected final void initQFEDC(String s) {
if (!s.trim().isEmpty()) {
QFEDC = Short.parseShort(s);
} else {
QFEDC = Short.MIN_VALUE;
}
}

protected final void initQFEDD(String s) {
if (!s.trim().isEmpty()) {
QFEDD = Short.parseShort(s);
} else {
QFEDD = Short.MIN_VALUE;
}
}

protected final void initQFEDE(String s) {
if (!s.trim().isEmpty()) {
QFEDE = Short.parseShort(s);
} else {
QFEDE = Short.MIN_VALUE;
}
}

protected final void initQFEDF(String s) {
if (!s.trim().isEmpty()) {
QFEDF = Short.parseShort(s);
} else {
QFEDF = Short.MIN_VALUE;
}
}

protected final void initQFEDG(String s) {
if (!s.trim().isEmpty()) {
QFEDG = Short.parseShort(s);
} else {
QFEDG = Short.MIN_VALUE;
}
}

protected final void initQFEDH(String s) {
if (!s.trim().isEmpty()) {
QFEDH = Short.parseShort(s);
} else {
QFEDH = Short.MIN_VALUE;
}
}

protected final void initQFEDHI(String s) {
if (!s.trim().isEmpty()) {
QFEDHI = Short.parseShort(s);
} else {
QFEDHI = Short.MIN_VALUE;
}
}

protected final void initQFEDI(String s) {
if (!s.trim().isEmpty()) {
QFEDI = Short.parseShort(s);
} else {
QFEDI = Short.MIN_VALUE;
}
}

protected final void initQFEDJ(String s) {
if (!s.trim().isEmpty()) {
QFEDJ = Short.parseShort(s);
} else {
QFEDJ = Short.MIN_VALUE;
}
}

protected final void initQFEDK(String s) {
if (!s.trim().isEmpty()) {
QFEDK = Short.parseShort(s);
} else {
QFEDK = Short.MIN_VALUE;
}
}

protected final void initQFEDL(String s) {
if (!s.trim().isEmpty()) {
QFEDL = Short.parseShort(s);
} else {
QFEDL = Short.MIN_VALUE;
}
}

protected final void initQFEDM(String s) {
if (!s.trim().isEmpty()) {
QFEDM = Short.parseShort(s);
} else {
QFEDM = Short.MIN_VALUE;
}
}

protected final void initQFEDN(String s) {
if (!s.trim().isEmpty()) {
QFEDN = Short.parseShort(s);
} else {
QFEDN = Short.MIN_VALUE;
}
}

protected final void initQFEDO(String s) {
if (!s.trim().isEmpty()) {
QFEDO = Short.parseShort(s);
} else {
QFEDO = Short.MIN_VALUE;
}
}

protected final void initQFEDP(String s) {
if (!s.trim().isEmpty()) {
QFEDP = Short.parseShort(s);
} else {
QFEDP = Short.MIN_VALUE;
}
}

protected final void initQFEDQ(String s) {
if (!s.trim().isEmpty()) {
QFEDQ = Short.parseShort(s);
} else {
QFEDQ = Short.MIN_VALUE;
}
}

protected final void initQFEDR(String s) {
if (!s.trim().isEmpty()) {
QFEDR = Short.parseShort(s);
} else {
QFEDR = Short.MIN_VALUE;
}
}

protected final void initQFEDS(String s) {
if (!s.trim().isEmpty()) {
QFEDS = Short.parseShort(s);
} else {
QFEDS = Short.MIN_VALUE;
}
}

protected final void initQFEDT(String s) {
if (!s.trim().isEmpty()) {
QFEDT = Byte.parseByte(s);
} else {
QFEDT = Byte.MIN_VALUE;
}
}

protected final void initQFEDX(String s) {
if (!s.trim().isEmpty()) {
QFEDX = Short.parseShort(s);
} else {
QFEDX = Short.MIN_VALUE;
}
}

protected final void initQFEDXA(String s) {
if (!s.trim().isEmpty()) {
QFEDXA = Short.parseShort(s);
} else {
QFEDXA = Short.MIN_VALUE;
}
}

protected final void initQFEDXB(String s) {
if (!s.trim().isEmpty()) {
QFEDXB = Short.parseShort(s);
} else {
QFEDXB = Short.MIN_VALUE;
}
}

protected final void initQFEDXC(String s) {
if (!s.trim().isEmpty()) {
QFEDXC = Short.parseShort(s);
} else {
QFEDXC = Short.MIN_VALUE;
}
}

protected final void initQFEDXG(String s) {
if (!s.trim().isEmpty()) {
QFEDXG = Short.parseShort(s);
} else {
QFEDXG = Short.MIN_VALUE;
}
}

protected final void initQFEDXH(String s) {
if (!s.trim().isEmpty()) {
QFEDXH = Short.parseShort(s);
} else {
QFEDXH = Short.MIN_VALUE;
}
}

protected final void initQFEDXI(String s) {
if (!s.trim().isEmpty()) {
QFEDXI = Short.parseShort(s);
} else {
QFEDXI = Short.MIN_VALUE;
}
}

protected final void initQFEDXJ(String s) {
if (!s.trim().isEmpty()) {
QFEDXJ = Short.parseShort(s);
} else {
QFEDXJ = Short.MIN_VALUE;
}
}

protected final void initQFEDXL(String s) {
if (!s.trim().isEmpty()) {
QFEDXL = Byte.parseByte(s);
} else {
QFEDXL = Byte.MIN_VALUE;
}
}

protected final void initQFF(String s) {
if (!s.trim().isEmpty()) {
QFF = Short.parseShort(s);
} else {
QFF = Short.MIN_VALUE;
}
}

protected final void initQFG(String s) {
if (!s.trim().isEmpty()) {
QFG = Short.parseShort(s);
} else {
QFG = Short.MIN_VALUE;
}
}

protected final void initQFH(String s) {
if (!s.trim().isEmpty()) {
QFH = Short.parseShort(s);
} else {
QFH = Short.MIN_VALUE;
}
}

protected final void initQFHAS(String s) {
if (!s.trim().isEmpty()) {
QFHAS = Short.parseShort(s);
} else {
QFHAS = Short.MIN_VALUE;
}
}

protected final void initQFI(String s) {
if (!s.trim().isEmpty()) {
QFI = Short.parseShort(s);
} else {
QFI = Short.MIN_VALUE;
}
}

protected final void initQFJ(String s) {
if (!s.trim().isEmpty()) {
QFJ = Short.parseShort(s);
} else {
QFJ = Short.MIN_VALUE;
}
}

protected final void initQFK(String s) {
if (!s.trim().isEmpty()) {
QFK = Short.parseShort(s);
} else {
QFK = Short.MIN_VALUE;
}
}

protected final void initQFL(String s) {
if (!s.trim().isEmpty()) {
QFL = Short.parseShort(s);
} else {
QFL = Short.MIN_VALUE;
}
}

protected final void initQFM(String s) {
if (!s.trim().isEmpty()) {
QFM = Short.parseShort(s);
} else {
QFM = Short.MIN_VALUE;
}
}

protected final void initQFN(String s) {
if (!s.trim().isEmpty()) {
QFN = Short.parseShort(s);
} else {
QFN = Short.MIN_VALUE;
}
}

protected final void initQFVOC(String s) {
if (!s.trim().isEmpty()) {
QFVOC = Short.parseShort(s);
} else {
QFVOC = Short.MIN_VALUE;
}
}

protected final void initQFX(String s) {
if (!s.trim().isEmpty()) {
QFX = Short.parseShort(s);
} else {
QFX = Short.MIN_VALUE;
}
}

protected final void initQFXC(String s) {
if (!s.trim().isEmpty()) {
QFXC = Short.parseShort(s);
} else {
QFXC = Short.MIN_VALUE;
}
}

protected final void initQFXD(String s) {
if (!s.trim().isEmpty()) {
QFXD = Short.parseShort(s);
} else {
QFXD = Short.MIN_VALUE;
}
}

protected final void initQFXE(String s) {
if (!s.trim().isEmpty()) {
QFXE = Short.parseShort(s);
} else {
QFXE = Short.MIN_VALUE;
}
}

protected final void initQFXF(String s) {
if (!s.trim().isEmpty()) {
QFXF = Short.parseShort(s);
} else {
QFXF = Short.MIN_VALUE;
}
}

protected final void initQFXG(String s) {
if (!s.trim().isEmpty()) {
QFXG = Short.parseShort(s);
} else {
QFXG = Short.MIN_VALUE;
}
}

protected final void initQFXH(String s) {
if (!s.trim().isEmpty()) {
QFXH = Short.parseShort(s);
} else {
QFXH = Short.MIN_VALUE;
}
}

protected final void initQFXK(String s) {
if (!s.trim().isEmpty()) {
QFXK = Short.parseShort(s);
} else {
QFXK = Short.MIN_VALUE;
}
}

protected final void initQFXL(String s) {
if (!s.trim().isEmpty()) {
QFXL = Short.parseShort(s);
} else {
QFXL = Short.MIN_VALUE;
}
}

protected final void initQFXM(String s) {
if (!s.trim().isEmpty()) {
QFXM = Short.parseShort(s);
} else {
QFXM = Short.MIN_VALUE;
}
}

protected final void initQFXN(String s) {
if (!s.trim().isEmpty()) {
QFXN = Short.parseShort(s);
} else {
QFXN = Short.MIN_VALUE;
}
}

protected final void initQFXO(String s) {
if (!s.trim().isEmpty()) {
QFXO = Byte.parseByte(s);
} else {
QFXO = Byte.MIN_VALUE;
}
}

protected final void initQFXP(String s) {
if (!s.trim().isEmpty()) {
QFXP = Byte.parseByte(s);
} else {
QFXP = Byte.MIN_VALUE;
}
}

protected final void initQFXQ(String s) {
if (!s.trim().isEmpty()) {
QFXQ = Byte.parseByte(s);
} else {
QFXQ = Byte.MIN_VALUE;
}
}

protected final void initQFXR(String s) {
if (!s.trim().isEmpty()) {
QFXR = Byte.parseByte(s);
} else {
QFXR = Byte.MIN_VALUE;
}
}

protected final void initRACE(String s) {
if (!s.trim().isEmpty()) {
RACE = Short.parseShort(s);
} else {
RACE = Short.MIN_VALUE;
}
}

protected final void initRACH12(String s) {
if (!s.trim().isEmpty()) {
RACH12 = Short.parseShort(s);
} else {
RACH12 = Short.MIN_VALUE;
}
}

protected final void initREGION(String s) {
if (!s.trim().isEmpty()) {
REGION = Short.parseShort(s);
} else {
REGION = Short.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSAMPST_BH(String s) {
if (!s.trim().isEmpty()) {
SAMPST_BH = Short.parseShort(s);
} else {
SAMPST_BH = Short.MIN_VALUE;
}
}

protected final void initSAVE(String s) {
if (!s.trim().isEmpty()) {
SAVE = Short.parseShort(s);
} else {
SAVE = Short.MIN_VALUE;
}
}

protected final void initSAVED(String s) {
if (!s.trim().isEmpty()) {
SAVED = Integer.parseInt(s);
} else {
SAVED = Integer.MIN_VALUE;
}
}

protected final void initSAVEY1(String s) {
if (!s.trim().isEmpty()) {
SAVEY1 = Short.parseShort(s);
} else {
SAVEY1 = Short.MIN_VALUE;
}
}

protected final void initSAVEY2(String s) {
if (!s.trim().isEmpty()) {
SAVEY2 = Short.parseShort(s);
} else {
SAVEY2 = Short.MIN_VALUE;
}
}

protected final void initSCNOW(String s) {
if (!s.trim().isEmpty()) {
SCNOW = Short.parseShort(s);
} else {
SCNOW = Short.MIN_VALUE;
}
}

protected final void initSCTRUST(String s) {
if (!s.trim().isEmpty()) {
SCTRUST = Byte.parseByte(s);
} else {
SCTRUST = Byte.MIN_VALUE;
}
}

protected final void initSCTYPE(String s) {
if (!s.trim().isEmpty()) {
SCTYPE = Short.parseShort(s);
} else {
SCTYPE = Short.MIN_VALUE;
}
}

protected final void initSMOKER(String s) {
if (!s.trim().isEmpty()) {
SMOKER = Short.parseShort(s);
} else {
SMOKER = Short.MIN_VALUE;
}
}

protected final void initSPINHH(String s) {
if (!s.trim().isEmpty()) {
SPINHH = Short.parseShort(s);
} else {
SPINHH = Short.MIN_VALUE;
}
}

protected final void initSPJB(String s) {
if (!s.trim().isEmpty()) {
SPJB = Short.parseShort(s);
} else {
SPJB = Short.MIN_VALUE;
}
}

protected final void initSPJBHR(String s) {
if (!s.trim().isEmpty()) {
SPJBHR = Short.parseShort(s);
} else {
SPJBHR = Short.MIN_VALUE;
}
}

protected final void initSPJBOT(String s) {
if (!s.trim().isEmpty()) {
SPJBOT = Short.parseShort(s);
} else {
SPJBOT = Short.MIN_VALUE;
}
}

protected final void initSPJBYR(String s) {
if (!s.trim().isEmpty()) {
SPJBYR = Short.parseShort(s);
} else {
SPJBYR = Short.MIN_VALUE;
}
}

protected final void initSPPAYG(String s) {
if (!s.trim().isEmpty()) {
SPPAYG = Double.parseDouble(s);
} else {
SPPAYG = Double.NaN;
}
}

protected final void initSPPAYGI(String s) {
if (!s.trim().isEmpty()) {
SPPAYGI = Short.parseShort(s);
} else {
SPPAYGI = Short.MIN_VALUE;
}
}

protected final void initSPPID_BH(String s) {
if (!s.trim().isEmpty()) {
SPPID_BH = Integer.parseInt(s);
} else {
SPPID_BH = Integer.MIN_VALUE;
}
}

protected final void initSPSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
SPSOC90_CC = Short.parseShort(s);
} else {
SPSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initTELWHY(String s) {
if (!s.trim().isEmpty()) {
TELWHY = Short.parseShort(s);
} else {
TELWHY = Short.MIN_VALUE;
}
}

protected final void initTENURE_DV(String s) {
if (!s.trim().isEmpty()) {
TENURE_DV = Short.parseShort(s);
} else {
TENURE_DV = Short.MIN_VALUE;
}
}

protected final void initTLFIYR(String s) {
if (!s.trim().isEmpty()) {
TLFIYR = Integer.parseInt(s);
} else {
TLFIYR = Integer.MIN_VALUE;
}
}

protected final void initTLFIYRL(String s) {
if (!s.trim().isEmpty()) {
TLFIYRL = Integer.parseInt(s);
} else {
TLFIYRL = Integer.MIN_VALUE;
}
}

protected final void initTRAIN(String s) {
if (!s.trim().isEmpty()) {
TRAIN = Byte.parseByte(s);
} else {
TRAIN = Byte.MIN_VALUE;
}
}

protected final void initTRFEEA1(String s) {
if (!s.trim().isEmpty()) {
TRFEEA1 = Byte.parseByte(s);
} else {
TRFEEA1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEA2(String s) {
if (!s.trim().isEmpty()) {
TRFEEA2 = Byte.parseByte(s);
} else {
TRFEEA2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEA3(String s) {
if (!s.trim().isEmpty()) {
TRFEEA3 = Byte.parseByte(s);
} else {
TRFEEA3 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEB1(String s) {
if (!s.trim().isEmpty()) {
TRFEEB1 = Byte.parseByte(s);
} else {
TRFEEB1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEB2(String s) {
if (!s.trim().isEmpty()) {
TRFEEB2 = Byte.parseByte(s);
} else {
TRFEEB2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEB3(String s) {
if (!s.trim().isEmpty()) {
TRFEEB3 = Byte.parseByte(s);
} else {
TRFEEB3 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEC1(String s) {
if (!s.trim().isEmpty()) {
TRFEEC1 = Byte.parseByte(s);
} else {
TRFEEC1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEC2(String s) {
if (!s.trim().isEmpty()) {
TRFEEC2 = Byte.parseByte(s);
} else {
TRFEEC2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEC3(String s) {
if (!s.trim().isEmpty()) {
TRFEEC3 = Byte.parseByte(s);
} else {
TRFEEC3 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEE1(String s) {
if (!s.trim().isEmpty()) {
TRFEEE1 = Byte.parseByte(s);
} else {
TRFEEE1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEE2(String s) {
if (!s.trim().isEmpty()) {
TRFEEE2 = Byte.parseByte(s);
} else {
TRFEEE2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEE3(String s) {
if (!s.trim().isEmpty()) {
TRFEEE3 = Byte.parseByte(s);
} else {
TRFEEE3 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEF1(String s) {
if (!s.trim().isEmpty()) {
TRFEEF1 = Byte.parseByte(s);
} else {
TRFEEF1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEF2(String s) {
if (!s.trim().isEmpty()) {
TRFEEF2 = Byte.parseByte(s);
} else {
TRFEEF2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEF3(String s) {
if (!s.trim().isEmpty()) {
TRFEEF3 = Byte.parseByte(s);
} else {
TRFEEF3 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEG1(String s) {
if (!s.trim().isEmpty()) {
TRFEEG1 = Byte.parseByte(s);
} else {
TRFEEG1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEG2(String s) {
if (!s.trim().isEmpty()) {
TRFEEG2 = Byte.parseByte(s);
} else {
TRFEEG2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEG3(String s) {
if (!s.trim().isEmpty()) {
TRFEEG3 = Byte.parseByte(s);
} else {
TRFEEG3 = Byte.MIN_VALUE;
}
}

protected final void initTRMORE1(String s) {
if (!s.trim().isEmpty()) {
TRMORE1 = Byte.parseByte(s);
} else {
TRMORE1 = Byte.MIN_VALUE;
}
}

protected final void initTRMORE2(String s) {
if (!s.trim().isEmpty()) {
TRMORE2 = Byte.parseByte(s);
} else {
TRMORE2 = Byte.MIN_VALUE;
}
}

protected final void initTROQL1(String s) {
if (!s.trim().isEmpty()) {
TROQL1 = Byte.parseByte(s);
} else {
TROQL1 = Byte.MIN_VALUE;
}
}

protected final void initTROQL2(String s) {
if (!s.trim().isEmpty()) {
TROQL2 = Byte.parseByte(s);
} else {
TROQL2 = Byte.MIN_VALUE;
}
}

protected final void initTROQL3(String s) {
if (!s.trim().isEmpty()) {
TROQL3 = Byte.parseByte(s);
} else {
TROQL3 = Byte.MIN_VALUE;
}
}

protected final void initTROQLN1(String s) {
if (!s.trim().isEmpty()) {
TROQLN1 = Byte.parseByte(s);
} else {
TROQLN1 = Byte.MIN_VALUE;
}
}

protected final void initTROQLN2(String s) {
if (!s.trim().isEmpty()) {
TROQLN2 = Byte.parseByte(s);
} else {
TROQLN2 = Byte.MIN_VALUE;
}
}

protected final void initTROQLN3(String s) {
if (!s.trim().isEmpty()) {
TROQLN3 = Byte.parseByte(s);
} else {
TROQLN3 = Byte.MIN_VALUE;
}
}

protected final void initTRPLCE1(String s) {
if (!s.trim().isEmpty()) {
TRPLCE1 = Byte.parseByte(s);
} else {
TRPLCE1 = Byte.MIN_VALUE;
}
}

protected final void initTRPLCE2(String s) {
if (!s.trim().isEmpty()) {
TRPLCE2 = Byte.parseByte(s);
} else {
TRPLCE2 = Byte.MIN_VALUE;
}
}

protected final void initTRPLCE3(String s) {
if (!s.trim().isEmpty()) {
TRPLCE3 = Byte.parseByte(s);
} else {
TRPLCE3 = Byte.MIN_VALUE;
}
}

protected final void initTRQ1(String s) {
if (!s.trim().isEmpty()) {
TRQ1 = Short.parseShort(s);
} else {
TRQ1 = Short.MIN_VALUE;
}
}

protected final void initTRQ2(String s) {
if (!s.trim().isEmpty()) {
TRQ2 = Short.parseShort(s);
} else {
TRQ2 = Short.MIN_VALUE;
}
}

protected final void initTRQ3(String s) {
if (!s.trim().isEmpty()) {
TRQ3 = Short.parseShort(s);
} else {
TRQ3 = Short.MIN_VALUE;
}
}

protected final void initTRQLA1(String s) {
if (!s.trim().isEmpty()) {
TRQLA1 = Byte.parseByte(s);
} else {
TRQLA1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLA2(String s) {
if (!s.trim().isEmpty()) {
TRQLA2 = Byte.parseByte(s);
} else {
TRQLA2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLA3(String s) {
if (!s.trim().isEmpty()) {
TRQLA3 = Byte.parseByte(s);
} else {
TRQLA3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLAC1(String s) {
if (!s.trim().isEmpty()) {
TRQLAC1 = Byte.parseByte(s);
} else {
TRQLAC1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLAC2(String s) {
if (!s.trim().isEmpty()) {
TRQLAC2 = Byte.parseByte(s);
} else {
TRQLAC2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLAC3(String s) {
if (!s.trim().isEmpty()) {
TRQLAC3 = Byte.parseByte(s);
} else {
TRQLAC3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLAN1(String s) {
if (!s.trim().isEmpty()) {
TRQLAN1 = Byte.parseByte(s);
} else {
TRQLAN1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLAN2(String s) {
if (!s.trim().isEmpty()) {
TRQLAN2 = Byte.parseByte(s);
} else {
TRQLAN2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLAN3(String s) {
if (!s.trim().isEmpty()) {
TRQLAN3 = Byte.parseByte(s);
} else {
TRQLAN3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLB1(String s) {
if (!s.trim().isEmpty()) {
TRQLB1 = Byte.parseByte(s);
} else {
TRQLB1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLB2(String s) {
if (!s.trim().isEmpty()) {
TRQLB2 = Byte.parseByte(s);
} else {
TRQLB2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLB3(String s) {
if (!s.trim().isEmpty()) {
TRQLB3 = Byte.parseByte(s);
} else {
TRQLB3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLBN1(String s) {
if (!s.trim().isEmpty()) {
TRQLBN1 = Byte.parseByte(s);
} else {
TRQLBN1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLBN2(String s) {
if (!s.trim().isEmpty()) {
TRQLBN2 = Byte.parseByte(s);
} else {
TRQLBN2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLBN3(String s) {
if (!s.trim().isEmpty()) {
TRQLBN3 = Byte.parseByte(s);
} else {
TRQLBN3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLC1(String s) {
if (!s.trim().isEmpty()) {
TRQLC1 = Byte.parseByte(s);
} else {
TRQLC1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLC2(String s) {
if (!s.trim().isEmpty()) {
TRQLC2 = Byte.parseByte(s);
} else {
TRQLC2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLC3(String s) {
if (!s.trim().isEmpty()) {
TRQLC3 = Byte.parseByte(s);
} else {
TRQLC3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLCN1(String s) {
if (!s.trim().isEmpty()) {
TRQLCN1 = Byte.parseByte(s);
} else {
TRQLCN1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLCN2(String s) {
if (!s.trim().isEmpty()) {
TRQLCN2 = Byte.parseByte(s);
} else {
TRQLCN2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLCN3(String s) {
if (!s.trim().isEmpty()) {
TRQLCN3 = Byte.parseByte(s);
} else {
TRQLCN3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLD1(String s) {
if (!s.trim().isEmpty()) {
TRQLD1 = Byte.parseByte(s);
} else {
TRQLD1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLD2(String s) {
if (!s.trim().isEmpty()) {
TRQLD2 = Byte.parseByte(s);
} else {
TRQLD2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLD3(String s) {
if (!s.trim().isEmpty()) {
TRQLD3 = Byte.parseByte(s);
} else {
TRQLD3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLDN1(String s) {
if (!s.trim().isEmpty()) {
TRQLDN1 = Byte.parseByte(s);
} else {
TRQLDN1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLDN2(String s) {
if (!s.trim().isEmpty()) {
TRQLDN2 = Byte.parseByte(s);
} else {
TRQLDN2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLDN3(String s) {
if (!s.trim().isEmpty()) {
TRQLDN3 = Byte.parseByte(s);
} else {
TRQLDN3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLE1(String s) {
if (!s.trim().isEmpty()) {
TRQLE1 = Byte.parseByte(s);
} else {
TRQLE1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLE2(String s) {
if (!s.trim().isEmpty()) {
TRQLE2 = Byte.parseByte(s);
} else {
TRQLE2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLE3(String s) {
if (!s.trim().isEmpty()) {
TRQLE3 = Byte.parseByte(s);
} else {
TRQLE3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLEN1(String s) {
if (!s.trim().isEmpty()) {
TRQLEN1 = Byte.parseByte(s);
} else {
TRQLEN1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLEN2(String s) {
if (!s.trim().isEmpty()) {
TRQLEN2 = Byte.parseByte(s);
} else {
TRQLEN2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLEN3(String s) {
if (!s.trim().isEmpty()) {
TRQLEN3 = Byte.parseByte(s);
} else {
TRQLEN3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLF1(String s) {
if (!s.trim().isEmpty()) {
TRQLF1 = Byte.parseByte(s);
} else {
TRQLF1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLF2(String s) {
if (!s.trim().isEmpty()) {
TRQLF2 = Byte.parseByte(s);
} else {
TRQLF2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLF3(String s) {
if (!s.trim().isEmpty()) {
TRQLF3 = Byte.parseByte(s);
} else {
TRQLF3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLFN1(String s) {
if (!s.trim().isEmpty()) {
TRQLFN1 = Byte.parseByte(s);
} else {
TRQLFN1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLFN2(String s) {
if (!s.trim().isEmpty()) {
TRQLFN2 = Byte.parseByte(s);
} else {
TRQLFN2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLFN3(String s) {
if (!s.trim().isEmpty()) {
TRQLFN3 = Byte.parseByte(s);
} else {
TRQLFN3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLG1(String s) {
if (!s.trim().isEmpty()) {
TRQLG1 = Byte.parseByte(s);
} else {
TRQLG1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLG2(String s) {
if (!s.trim().isEmpty()) {
TRQLG2 = Byte.parseByte(s);
} else {
TRQLG2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLG3(String s) {
if (!s.trim().isEmpty()) {
TRQLG3 = Byte.parseByte(s);
} else {
TRQLG3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLGN1(String s) {
if (!s.trim().isEmpty()) {
TRQLGN1 = Byte.parseByte(s);
} else {
TRQLGN1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLGN2(String s) {
if (!s.trim().isEmpty()) {
TRQLGN2 = Byte.parseByte(s);
} else {
TRQLGN2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLGN3(String s) {
if (!s.trim().isEmpty()) {
TRQLGN3 = Byte.parseByte(s);
} else {
TRQLGN3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLH1(String s) {
if (!s.trim().isEmpty()) {
TRQLH1 = Byte.parseByte(s);
} else {
TRQLH1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLH2(String s) {
if (!s.trim().isEmpty()) {
TRQLH2 = Byte.parseByte(s);
} else {
TRQLH2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLH3(String s) {
if (!s.trim().isEmpty()) {
TRQLH3 = Byte.parseByte(s);
} else {
TRQLH3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLHN1(String s) {
if (!s.trim().isEmpty()) {
TRQLHN1 = Byte.parseByte(s);
} else {
TRQLHN1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLHN2(String s) {
if (!s.trim().isEmpty()) {
TRQLHN2 = Byte.parseByte(s);
} else {
TRQLHN2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLHN3(String s) {
if (!s.trim().isEmpty()) {
TRQLHN3 = Byte.parseByte(s);
} else {
TRQLHN3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLI1(String s) {
if (!s.trim().isEmpty()) {
TRQLI1 = Byte.parseByte(s);
} else {
TRQLI1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLI2(String s) {
if (!s.trim().isEmpty()) {
TRQLI2 = Byte.parseByte(s);
} else {
TRQLI2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLI3(String s) {
if (!s.trim().isEmpty()) {
TRQLI3 = Byte.parseByte(s);
} else {
TRQLI3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLIN1(String s) {
if (!s.trim().isEmpty()) {
TRQLIN1 = Byte.parseByte(s);
} else {
TRQLIN1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLIN2(String s) {
if (!s.trim().isEmpty()) {
TRQLIN2 = Byte.parseByte(s);
} else {
TRQLIN2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLIN3(String s) {
if (!s.trim().isEmpty()) {
TRQLIN3 = Byte.parseByte(s);
} else {
TRQLIN3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLJ1(String s) {
if (!s.trim().isEmpty()) {
TRQLJ1 = Byte.parseByte(s);
} else {
TRQLJ1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLJ2(String s) {
if (!s.trim().isEmpty()) {
TRQLJ2 = Byte.parseByte(s);
} else {
TRQLJ2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLJ3(String s) {
if (!s.trim().isEmpty()) {
TRQLJ3 = Byte.parseByte(s);
} else {
TRQLJ3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLJN1(String s) {
if (!s.trim().isEmpty()) {
TRQLJN1 = Byte.parseByte(s);
} else {
TRQLJN1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLJN2(String s) {
if (!s.trim().isEmpty()) {
TRQLJN2 = Byte.parseByte(s);
} else {
TRQLJN2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLJN3(String s) {
if (!s.trim().isEmpty()) {
TRQLJN3 = Byte.parseByte(s);
} else {
TRQLJN3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLNN1(String s) {
if (!s.trim().isEmpty()) {
TRQLNN1 = Byte.parseByte(s);
} else {
TRQLNN1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLNN2(String s) {
if (!s.trim().isEmpty()) {
TRQLNN2 = Byte.parseByte(s);
} else {
TRQLNN2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLNN3(String s) {
if (!s.trim().isEmpty()) {
TRQLNN3 = Byte.parseByte(s);
} else {
TRQLNN3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLXP1(String s) {
if (!s.trim().isEmpty()) {
TRQLXP1 = Byte.parseByte(s);
} else {
TRQLXP1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLXP2(String s) {
if (!s.trim().isEmpty()) {
TRQLXP2 = Byte.parseByte(s);
} else {
TRQLXP2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLXP3(String s) {
if (!s.trim().isEmpty()) {
TRQLXP3 = Byte.parseByte(s);
} else {
TRQLXP3 = Byte.MIN_VALUE;
}
}

protected final void initTRU1(String s) {
if (!s.trim().isEmpty()) {
TRU1 = Byte.parseByte(s);
} else {
TRU1 = Byte.MIN_VALUE;
}
}

protected final void initTRU2(String s) {
if (!s.trim().isEmpty()) {
TRU2 = Byte.parseByte(s);
} else {
TRU2 = Byte.MIN_VALUE;
}
}

protected final void initTRU3(String s) {
if (!s.trim().isEmpty()) {
TRU3 = Byte.parseByte(s);
} else {
TRU3 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYA1(String s) {
if (!s.trim().isEmpty()) {
TRWHYA1 = Byte.parseByte(s);
} else {
TRWHYA1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYA2(String s) {
if (!s.trim().isEmpty()) {
TRWHYA2 = Byte.parseByte(s);
} else {
TRWHYA2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYA3(String s) {
if (!s.trim().isEmpty()) {
TRWHYA3 = Byte.parseByte(s);
} else {
TRWHYA3 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYB1(String s) {
if (!s.trim().isEmpty()) {
TRWHYB1 = Byte.parseByte(s);
} else {
TRWHYB1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYB2(String s) {
if (!s.trim().isEmpty()) {
TRWHYB2 = Byte.parseByte(s);
} else {
TRWHYB2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYB3(String s) {
if (!s.trim().isEmpty()) {
TRWHYB3 = Byte.parseByte(s);
} else {
TRWHYB3 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYC1(String s) {
if (!s.trim().isEmpty()) {
TRWHYC1 = Byte.parseByte(s);
} else {
TRWHYC1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYC2(String s) {
if (!s.trim().isEmpty()) {
TRWHYC2 = Byte.parseByte(s);
} else {
TRWHYC2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYC3(String s) {
if (!s.trim().isEmpty()) {
TRWHYC3 = Byte.parseByte(s);
} else {
TRWHYC3 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYD1(String s) {
if (!s.trim().isEmpty()) {
TRWHYD1 = Byte.parseByte(s);
} else {
TRWHYD1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYD2(String s) {
if (!s.trim().isEmpty()) {
TRWHYD2 = Byte.parseByte(s);
} else {
TRWHYD2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYD3(String s) {
if (!s.trim().isEmpty()) {
TRWHYD3 = Byte.parseByte(s);
} else {
TRWHYD3 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYE1(String s) {
if (!s.trim().isEmpty()) {
TRWHYE1 = Byte.parseByte(s);
} else {
TRWHYE1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYE2(String s) {
if (!s.trim().isEmpty()) {
TRWHYE2 = Byte.parseByte(s);
} else {
TRWHYE2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYE3(String s) {
if (!s.trim().isEmpty()) {
TRWHYE3 = Byte.parseByte(s);
} else {
TRWHYE3 = Byte.MIN_VALUE;
}
}

protected final void initTUIN1(String s) {
if (!s.trim().isEmpty()) {
TUIN1 = Short.parseShort(s);
} else {
TUIN1 = Short.MIN_VALUE;
}
}

protected final void initTUJBPL(String s) {
if (!s.trim().isEmpty()) {
TUJBPL = Short.parseShort(s);
} else {
TUJBPL = Short.MIN_VALUE;
}
}

protected final void initUKCITZN_DV_BH(String s) {
if (!s.trim().isEmpty()) {
UKCITZN_DV_BH = Byte.parseByte(s);
} else {
UKCITZN_DV_BH = Byte.MIN_VALUE;
}
}

protected final void initVOTE(String s) {
if (!s.trim().isEmpty()) {
VOTE = Short.parseShort(s);
} else {
VOTE = Short.MIN_VALUE;
}
}

protected final void initVOTE1(String s) {
if (!s.trim().isEmpty()) {
VOTE1 = Short.parseShort(s);
} else {
VOTE1 = Short.MIN_VALUE;
}
}

protected final void initVOTE2(String s) {
if (!s.trim().isEmpty()) {
VOTE2 = Short.parseShort(s);
} else {
VOTE2 = Short.MIN_VALUE;
}
}

protected final void initVOTE3(String s) {
if (!s.trim().isEmpty()) {
VOTE3 = Short.parseShort(s);
} else {
VOTE3 = Short.MIN_VALUE;
}
}

protected final void initVOTE3_BH(String s) {
if (!s.trim().isEmpty()) {
VOTE3_BH = Short.parseShort(s);
} else {
VOTE3_BH = Short.MIN_VALUE;
}
}

protected final void initVOTE4(String s) {
if (!s.trim().isEmpty()) {
VOTE4 = Short.parseShort(s);
} else {
VOTE4 = Short.MIN_VALUE;
}
}

protected final void initVOTE4_BH(String s) {
if (!s.trim().isEmpty()) {
VOTE4_BH = Short.parseShort(s);
} else {
VOTE4_BH = Short.MIN_VALUE;
}
}

protected final void initVOTE5(String s) {
if (!s.trim().isEmpty()) {
VOTE5 = Short.parseShort(s);
} else {
VOTE5 = Short.MIN_VALUE;
}
}

protected final void initVOTE7(String s) {
if (!s.trim().isEmpty()) {
VOTE7 = Byte.parseByte(s);
} else {
VOTE7 = Byte.MIN_VALUE;
}
}

protected final void initVOTE8(String s) {
if (!s.trim().isEmpty()) {
VOTE8 = Byte.parseByte(s);
} else {
VOTE8 = Byte.MIN_VALUE;
}
}

protected final void initVOTE8_BH(String s) {
if (!s.trim().isEmpty()) {
VOTE8_BH = Byte.parseByte(s);
} else {
VOTE8_BH = Byte.MIN_VALUE;
}
}

protected final void initWINDF(String s) {
if (!s.trim().isEmpty()) {
WINDF = Byte.parseByte(s);
} else {
WINDF = Byte.MIN_VALUE;
}
}

protected final void initWINDFA(String s) {
if (!s.trim().isEmpty()) {
WINDFA = Byte.parseByte(s);
} else {
WINDFA = Byte.MIN_VALUE;
}
}

protected final void initWINDFAY(String s) {
if (!s.trim().isEmpty()) {
WINDFAY = Integer.parseInt(s);
} else {
WINDFAY = Integer.MIN_VALUE;
}
}

protected final void initWINDFB(String s) {
if (!s.trim().isEmpty()) {
WINDFB = Byte.parseByte(s);
} else {
WINDFB = Byte.MIN_VALUE;
}
}

protected final void initWINDFBY(String s) {
if (!s.trim().isEmpty()) {
WINDFBY = Integer.parseInt(s);
} else {
WINDFBY = Integer.MIN_VALUE;
}
}

protected final void initWINDFC(String s) {
if (!s.trim().isEmpty()) {
WINDFC = Byte.parseByte(s);
} else {
WINDFC = Byte.MIN_VALUE;
}
}

protected final void initWINDFCY(String s) {
if (!s.trim().isEmpty()) {
WINDFCY = Integer.parseInt(s);
} else {
WINDFCY = Integer.MIN_VALUE;
}
}

protected final void initWINDFD(String s) {
if (!s.trim().isEmpty()) {
WINDFD = Byte.parseByte(s);
} else {
WINDFD = Byte.MIN_VALUE;
}
}

protected final void initWINDFDY(String s) {
if (!s.trim().isEmpty()) {
WINDFDY = Integer.parseInt(s);
} else {
WINDFDY = Integer.MIN_VALUE;
}
}

protected final void initWINDFF(String s) {
if (!s.trim().isEmpty()) {
WINDFF = Byte.parseByte(s);
} else {
WINDFF = Byte.MIN_VALUE;
}
}

protected final void initWINDFFY(String s) {
if (!s.trim().isEmpty()) {
WINDFFY = Integer.parseInt(s);
} else {
WINDFFY = Integer.MIN_VALUE;
}
}

protected final void initWINDFG(String s) {
if (!s.trim().isEmpty()) {
WINDFG = Byte.parseByte(s);
} else {
WINDFG = Byte.MIN_VALUE;
}
}

protected final void initWINDFGY(String s) {
if (!s.trim().isEmpty()) {
WINDFGY = Integer.parseInt(s);
} else {
WINDFGY = Integer.MIN_VALUE;
}
}

protected final void initWINDFH(String s) {
if (!s.trim().isEmpty()) {
WINDFH = Byte.parseByte(s);
} else {
WINDFH = Byte.MIN_VALUE;
}
}

protected final void initWINDFHY(String s) {
if (!s.trim().isEmpty()) {
WINDFHY = Integer.parseInt(s);
} else {
WINDFHY = Integer.MIN_VALUE;
}
}

protected final void initWKTIME(String s) {
if (!s.trim().isEmpty()) {
WKTIME = Short.parseShort(s);
} else {
WKTIME = Short.MIN_VALUE;
}
}

protected final void initXDTS(String s) {
if (!s.trim().isEmpty()) {
XDTS = Short.parseShort(s);
} else {
XDTS = Short.MIN_VALUE;
}
}

protected final void initXEWGHT(String s) {
if (!s.trim().isEmpty()) {
XEWGHT = Double.parseDouble(s);
} else {
XEWGHT = Double.NaN;
}
}

protected final void initXEWGHTE(String s) {
if (!s.trim().isEmpty()) {
XEWGHTE = Double.parseDouble(s);
} else {
XEWGHTE = Double.NaN;
}
}

protected final void initXPCHC(String s) {
if (!s.trim().isEmpty()) {
XPCHC = Short.parseShort(s);
} else {
XPCHC = Short.MIN_VALUE;
}
}

protected final void initXPCHCF(String s) {
if (!s.trim().isEmpty()) {
XPCHCF = Short.parseShort(s);
} else {
XPCHCF = Short.MIN_VALUE;
}
}

protected final void initXPLEIS(String s) {
if (!s.trim().isEmpty()) {
XPLEIS = Byte.parseByte(s);
} else {
XPLEIS = Byte.MIN_VALUE;
}
}

protected final void initXPMEAL(String s) {
if (!s.trim().isEmpty()) {
XPMEAL = Byte.parseByte(s);
} else {
XPMEAL = Byte.MIN_VALUE;
}
}

protected final void initXPMOVE(String s) {
if (!s.trim().isEmpty()) {
XPMOVE = Byte.parseByte(s);
} else {
XPMOVE = Byte.MIN_VALUE;
}
}

protected final void initXRWGHT(String s) {
if (!s.trim().isEmpty()) {
XRWGHT = Double.parseDouble(s);
} else {
XRWGHT = Double.NaN;
}
}

protected final void initXRWGHTE(String s) {
if (!s.trim().isEmpty()) {
XRWGHTE = Double.parseDouble(s);
} else {
XRWGHTE = Double.NaN;
}
}

protected final void initYPPAR(String s) {
if (!s.trim().isEmpty()) {
YPPAR = Short.parseShort(s);
} else {
YPPAR = Short.MIN_VALUE;
}
}

public byte getADLA() {
return ADLA;
}

public byte getADLAD() {
return ADLAD;
}

public byte getADLB() {
return ADLB;
}

public byte getADLBD() {
return ADLBD;
}

public byte getADLC() {
return ADLC;
}

public byte getADLCD() {
return ADLCD;
}

public byte getADLD() {
return ADLD;
}

public byte getADLDD() {
return ADLDD;
}

public byte getADLE() {
return ADLE;
}

public byte getADLED() {
return ADLED;
}

public byte getADLF() {
return ADLF;
}

public byte getADLFD() {
return ADLFD;
}

public short getAGE12() {
return AGE12;
}

public short getAGE_DV() {
return AGE_DV;
}

public short getAIDHRS_BH() {
return AIDHRS_BH;
}

public short getAIDHU1() {
return AIDHU1;
}

public short getAIDHU2() {
return AIDHU2;
}

public short getAIDHUA() {
return AIDHUA;
}

public short getAIDHUB() {
return AIDHUB;
}

public short getAIDHUC() {
return AIDHUC;
}

public short getBIRTHY() {
return BIRTHY;
}

public short getBUNO() {
return BUNO;
}

public short getBUTYPE() {
return BUTYPE;
}

public short getCASMIN() {
return CASMIN;
}

public byte getCBAGE() {
return CBAGE;
}

public short getCH1BY4() {
return CH1BY4;
}

public short getCJSBGD() {
return CJSBGD;
}

public short getCJSBGM() {
return CJSBGM;
}

public short getCJSBGY4() {
return CJSBGY4;
}

public short getCJSBLY() {
return CJSBLY;
}

public int getCJSTEN() {
return CJSTEN;
}

protected double CJSWK9() {
return CJSWK9;
}

public byte getCOH1BM() {
return COH1BM;
}

public short getCOH1BY() {
return COH1BY;
}

public byte getCOH1EM() {
return COH1EM;
}

public short getCOH1EY() {
return COH1EY;
}

public byte getCOH1MR() {
return COH1MR;
}

public byte getCOHAD1() {
return COHAD1;
}

public byte getCOHAD2() {
return COHAD2;
}

public byte getCOHADV() {
return COHADV;
}

public byte getCOHDIS() {
return COHDIS;
}

public byte getCOHDS1() {
return COHDS1;
}

public byte getCOHDS2() {
return COHDS2;
}

public byte getCOHLBM1() {
return COHLBM1;
}

public byte getCOHLBM2() {
return COHLBM2;
}

public byte getCOHLBM3() {
return COHLBM3;
}

public short getCOHLBY1() {
return COHLBY1;
}

public short getCOHLBY2() {
return COHLBY2;
}

public byte getCOHLBY3() {
return COHLBY3;
}

public byte getCOHLEM1() {
return COHLEM1;
}

public byte getCOHLEM2() {
return COHLEM2;
}

public byte getCOHLEM3() {
return COHLEM3;
}

public short getCOHLEY1() {
return COHLEY1;
}

public short getCOHLEY2() {
return COHLEY2;
}

public byte getCOHLEY3() {
return COHLEY3;
}

public byte getCOHLYR() {
return COHLYR;
}

public byte getCOHXPM1() {
return COHXPM1;
}

public byte getCOHXPM2() {
return COHXPM2;
}

protected double DISTMOV() {
return DISTMOV;
}

public short getDOBY() {
return DOBY;
}

public short getEAAGE() {
return EAAGE;
}

public byte getEDBGM1() {
return EDBGM1;
}

public byte getEDBGM2() {
return EDBGM2;
}

public short getEDBGY1() {
return EDBGY1;
}

public short getEDBGY2() {
return EDBGY2;
}

public byte getEDBLYR1() {
return EDBLYR1;
}

public byte getEDBLYR2() {
return EDBLYR2;
}

public byte getEDENM1() {
return EDENM1;
}

public byte getEDENM2() {
return EDENM2;
}

public byte getEDENNE1() {
return EDENNE1;
}

public byte getEDENNE2() {
return EDENNE2;
}

public short getEDENY1() {
return EDENY1;
}

public short getEDENY2() {
return EDENY2;
}

public byte getEDFEEA1() {
return EDFEEA1;
}

public byte getEDFEEA2() {
return EDFEEA2;
}

public byte getEDFEEB1() {
return EDFEEB1;
}

public byte getEDFEEB2() {
return EDFEEB2;
}

public byte getEDFEEC1() {
return EDFEEC1;
}

public byte getEDFEEC2() {
return EDFEEC2;
}

public byte getEDFEED1() {
return EDFEED1;
}

public byte getEDFEED2() {
return EDFEED2;
}

public byte getEDFEEE1() {
return EDFEEE1;
}

public byte getEDFEEE2() {
return EDFEEE2;
}

public byte getEDFEEF1() {
return EDFEEF1;
}

public byte getEDFEEF2() {
return EDFEEF2;
}

public byte getEDFEEG1() {
return EDFEEG1;
}

public byte getEDFEEG2() {
return EDFEEG2;
}

public short getEDLYR() {
return EDLYR;
}

public byte getEDMORE1() {
return EDMORE1;
}

public byte getEDMORE2() {
return EDMORE2;
}

public byte getEDOQL1() {
return EDOQL1;
}

public byte getEDOQL2() {
return EDOQL2;
}

public byte getEDOQLN1() {
return EDOQLN1;
}

public byte getEDOQLN2() {
return EDOQLN2;
}

public byte getEDQLA1() {
return EDQLA1;
}

public byte getEDQLA2() {
return EDQLA2;
}

public byte getEDQLAN1() {
return EDQLAN1;
}

public byte getEDQLAN2() {
return EDQLAN2;
}

public byte getEDQLB1() {
return EDQLB1;
}

public byte getEDQLB2() {
return EDQLB2;
}

public byte getEDQLBN1() {
return EDQLBN1;
}

public byte getEDQLBN2() {
return EDQLBN2;
}

public byte getEDQLC1() {
return EDQLC1;
}

public byte getEDQLC2() {
return EDQLC2;
}

public byte getEDQLCN1() {
return EDQLCN1;
}

public byte getEDQLCN2() {
return EDQLCN2;
}

public byte getEDQLD1() {
return EDQLD1;
}

public byte getEDQLD2() {
return EDQLD2;
}

public byte getEDQLDN1() {
return EDQLDN1;
}

public byte getEDQLDN2() {
return EDQLDN2;
}

public byte getEDQLE1() {
return EDQLE1;
}

public byte getEDQLE2() {
return EDQLE2;
}

public byte getEDQLEN1() {
return EDQLEN1;
}

public byte getEDQLEN2() {
return EDQLEN2;
}

public byte getEDQLF1() {
return EDQLF1;
}

public byte getEDQLF2() {
return EDQLF2;
}

public byte getEDQLFN1() {
return EDQLFN1;
}

public byte getEDQLFN2() {
return EDQLFN2;
}

public byte getEDQLG1() {
return EDQLG1;
}

public byte getEDQLG2() {
return EDQLG2;
}

public byte getEDQLGN1() {
return EDQLGN1;
}

public byte getEDQLGN2() {
return EDQLGN2;
}

public byte getEDQLH1() {
return EDQLH1;
}

public byte getEDQLH2() {
return EDQLH2;
}

public byte getEDQLHN1() {
return EDQLHN1;
}

public byte getEDQLHN2() {
return EDQLHN2;
}

public byte getEDQLI1() {
return EDQLI1;
}

public byte getEDQLI2() {
return EDQLI2;
}

public byte getEDQLIN1() {
return EDQLIN1;
}

public byte getEDQLIN2() {
return EDQLIN2;
}

public byte getEDQLJ1() {
return EDQLJ1;
}

public byte getEDQLJ2() {
return EDQLJ2;
}

public byte getEDQLJN1() {
return EDQLJN1;
}

public byte getEDQLJN2() {
return EDQLJN2;
}

public byte getEDQNN1() {
return EDQNN1;
}

public byte getEDQNN2() {
return EDQNN2;
}

public byte getEDQUAL1() {
return EDQUAL1;
}

public byte getEDQUAL2() {
return EDQUAL2;
}

public byte getEDTYPE1() {
return EDTYPE1;
}

public byte getEDTYPE2() {
return EDTYPE2;
}

public short getEPROSH() {
return EPROSH;
}

public short getF101() {
return F101;
}

public short getF102() {
return F102;
}

public short getF103() {
return F103;
}

public short getF104() {
return F104;
}

public short getF105() {
return F105;
}

public byte getF106() {
return F106;
}

public byte getF116() {
return F116;
}

public short getF118() {
return F118;
}

public short getF119() {
return F119;
}

public short getF121() {
return F121;
}

public short getF122() {
return F122;
}

public byte getF124() {
return F124;
}

public short getF125() {
return F125;
}

public byte getF126() {
return F126;
}

public byte getF127() {
return F127;
}

public byte getF128() {
return F128;
}

public short getF132() {
return F132;
}

public short getF135() {
return F135;
}

public short getF136() {
return F136;
}

public short getF137() {
return F137;
}

public short getF138() {
return F138;
}

public short getF139() {
return F139;
}

public short getF140() {
return F140;
}

public short getF141() {
return F141;
}

public short getF142() {
return F142;
}

public short getF151() {
return F151;
}

public byte getF152() {
return F152;
}

public short getF153() {
return F153;
}

public short getF154() {
return F154;
}

public short getF155() {
return F155;
}

public short getF156() {
return F156;
}

public short getF157() {
return F157;
}

public byte getF158() {
return F158;
}

public byte getF159() {
return F159;
}

public short getFENOW_BH() {
return FENOW_BH;
}

public short getFETYPE() {
return FETYPE;
}

protected double FIHHMN() {
return FIHHMN;
}

public short getFIHHMNI() {
return FIHHMNI;
}

protected double FIMNB() {
return FIMNB;
}

public boolean getFIMNBI() {
return FIMNBI;
}

protected double FIMNI() {
return FIMNI;
}

public boolean getFIMNII() {
return FIMNII;
}

public boolean getFIMNLI() {
return FIMNLI;
}

protected double FIMNNL() {
return FIMNNL;
}

public boolean getFIMNNLI() {
return FIMNNLI;
}

protected double FIMNP() {
return FIMNP;
}

public boolean getFIMNPI() {
return FIMNPI;
}

public byte getFIMNSEL() {
return FIMNSEL;
}

protected double FIMNT() {
return FIMNT;
}

public boolean getFIMNTHI() {
return FIMNTHI;
}

public boolean getFIMNTI() {
return FIMNTI;
}

public short getFISITC() {
return FISITC;
}

public short getFISITX() {
return FISITX;
}

public short getFISITY() {
return FISITY;
}

public boolean getFIYEARI() {
return FIYEARI;
}

protected double FIYR() {
return FIYR;
}

protected double FIYRB() {
return FIYRB;
}

public boolean getFIYRBI() {
return FIYRBI;
}

public short getFIYRDI() {
return FIYRDI;
}

public short getFIYRDII() {
return FIYRDII;
}

public byte getFIYRDIU() {
return FIYRDIU;
}

protected double FIYRI() {
return FIYRI;
}

public boolean getFIYRII() {
return FIYRII;
}

protected double FIYRL() {
return FIYRL;
}

public boolean getFIYRLI() {
return FIYRLI;
}

protected double FIYRNL() {
return FIYRNL;
}

public boolean getFIYRNLI() {
return FIYRNLI;
}

protected double FIYRP() {
return FIYRP;
}

public boolean getFIYRPI() {
return FIYRPI;
}

protected double FIYRT() {
return FIYRT;
}

public boolean getFIYRTI() {
return FIYRTI;
}

public int getFNPID_BH() {
return FNPID_BH;
}

public byte getFRNA() {
return FRNA;
}

public byte getFRNB() {
return FRNB;
}

public byte getFRNC() {
return FRNC;
}

public short getFTEXA() {
return FTEXA;
}

public short getFTEXA1() {
return FTEXA1;
}

public short getFTEXA2() {
return FTEXA2;
}

public short getFTEXA3() {
return FTEXA3;
}

public short getFTEXA4() {
return FTEXA4;
}

public short getFTEXA5() {
return FTEXA5;
}

public short getFTEXA6() {
return FTEXA6;
}

public short getFTEXAV() {
return FTEXAV;
}

protected double FTEXAW() {
return FTEXAW;
}

public short getFTEXB() {
return FTEXB;
}

public short getFTEXB1() {
return FTEXB1;
}

public short getFTEXB2() {
return FTEXB2;
}

public short getFTEXB3() {
return FTEXB3;
}

public short getFTEXB4() {
return FTEXB4;
}

public short getFTEXB5() {
return FTEXB5;
}

public short getFTEXB6() {
return FTEXB6;
}

public short getFTEXBV() {
return FTEXBV;
}

protected double FTEXBW() {
return FTEXBW;
}

public short getFTEXC() {
return FTEXC;
}

public short getFTEXC1() {
return FTEXC1;
}

public short getFTEXC2() {
return FTEXC2;
}

public short getFTEXC3() {
return FTEXC3;
}

public short getFTEXC4() {
return FTEXC4;
}

public short getFTEXC5() {
return FTEXC5;
}

public short getFTEXC6() {
return FTEXC6;
}

public short getFTEXCV() {
return FTEXCV;
}

protected double FTEXCW() {
return FTEXCW;
}

public short getFTEXHH() {
return FTEXHH;
}

public byte getHGEMP() {
return HGEMP;
}

public short getHGR2R() {
return HGR2R;
}

public short getHGRA() {
return HGRA;
}

public boolean getHGSEX() {
return HGSEX;
}

public short getHHCH12() {
return HHCH12;
}

public short getHHMEM() {
return HHMEM;
}

public short getHHSIZE() {
return HHSIZE;
}

public short getHHTYPE() {
return HHTYPE;
}

public int getHID() {
return HID;
}

public short getHIQUALB_DV() {
return HIQUALB_DV;
}

public short getHL2GP() {
return HL2GP;
}

public byte getHL2HOP() {
return HL2HOP;
}

public short getHLCK() {
return HLCK;
}

public short getHLCKA() {
return HLCKA;
}

public short getHLCKAN() {
return HLCKAN;
}

public short getHLCKB() {
return HLCKB;
}

public short getHLCKBN() {
return HLCKBN;
}

public short getHLCKC() {
return HLCKC;
}

public short getHLCKCN() {
return HLCKCN;
}

public short getHLCKD() {
return HLCKD;
}

public short getHLCKDN() {
return HLCKDN;
}

public short getHLCKE() {
return HLCKE;
}

public short getHLCKEN() {
return HLCKEN;
}

public short getHLCKF() {
return HLCKF;
}

public short getHLCKFN() {
return HLCKFN;
}

public short getHLCKG() {
return HLCKG;
}

public short getHLCKGN() {
return HLCKGN;
}

public short getHLCKH() {
return HLCKH;
}

public short getHLCKHN() {
return HLCKHN;
}

public short getHLCKI() {
return HLCKI;
}

public short getHLCKIN() {
return HLCKIN;
}

public short getHLCVR() {
return HLCVR;
}

public short getHLCVRH() {
return HLCVRH;
}

public short getHLCVRL() {
return HLCVRL;
}

public short getHLDSBL() {
return HLDSBL;
}

public short getHLENDW() {
return HLENDW;
}

public byte getHLIV65() {
return HLIV65;
}

public byte getHLLT() {
return HLLT;
}

public short getHLLTA() {
return HLLTA;
}

public short getHLLTB() {
return HLLTB;
}

public short getHLLTC() {
return HLLTC;
}

public short getHLLTD() {
return HLLTD;
}

public short getHLLTE() {
return HLLTE;
}

public byte getHLLTW() {
return HLLTW;
}

public short getHLLTWA() {
return HLLTWA;
}

public short getHLPRB() {
return HLPRB;
}

public short getHLPRBA() {
return HLPRBA;
}

public short getHLPRBB() {
return HLPRBB;
}

public short getHLPRBC() {
return HLPRBC;
}

public short getHLPRBD() {
return HLPRBD;
}

public short getHLPRBE() {
return HLPRBE;
}

public short getHLPRBF() {
return HLPRBF;
}

public short getHLPRBG() {
return HLPRBG;
}

public short getHLPRBH() {
return HLPRBH;
}

public short getHLPRBI() {
return HLPRBI;
}

public short getHLPRBJ() {
return HLPRBJ;
}

public short getHLPRBK() {
return HLPRBK;
}

public short getHLPRBL() {
return HLPRBL;
}

public short getHLPRBM() {
return HLPRBM;
}

public short getHLSTAT() {
return HLSTAT;
}

public short getHLSV() {
return HLSV;
}

public short getHLSVA() {
return HLSVA;
}

public short getHLSVAF() {
return HLSVAF;
}

public short getHLSVAN() {
return HLSVAN;
}

public short getHLSVB() {
return HLSVB;
}

public short getHLSVBF() {
return HLSVBF;
}

public short getHLSVBN() {
return HLSVBN;
}

public short getHLSVC() {
return HLSVC;
}

public short getHLSVCF() {
return HLSVCF;
}

public short getHLSVCN() {
return HLSVCN;
}

public short getHLSVD() {
return HLSVD;
}

public short getHLSVDF() {
return HLSVDF;
}

public short getHLSVDN() {
return HLSVDN;
}

public short getHLSVE() {
return HLSVE;
}

public short getHLSVEF() {
return HLSVEF;
}

public short getHLSVEN() {
return HLSVEN;
}

public short getHLSVF() {
return HLSVF;
}

public short getHLSVFF() {
return HLSVFF;
}

public short getHLSVFN() {
return HLSVFN;
}

public short getHLSVG() {
return HLSVG;
}

public short getHLSVGF() {
return HLSVGF;
}

public short getHLSVGN() {
return HLSVGN;
}

public short getHLSVH() {
return HLSVH;
}

public byte getHLSVHF() {
return HLSVHF;
}

public byte getHLSVHN() {
return HLSVHN;
}

public short getHLSVI() {
return HLSVI;
}

public short getHLSVIF() {
return HLSVIF;
}

public short getHLSVIN() {
return HLSVIN;
}

public short getHLSVJ() {
return HLSVJ;
}

public short getHLSVJF() {
return HLSVJF;
}

public short getHLSVJN() {
return HLSVJN;
}

public short getHLSVK() {
return HLSVK;
}

public short getHLSVKF() {
return HLSVKF;
}

public short getHLSVKN() {
return HLSVKN;
}

public short getHLSVL() {
return HLSVL;
}

public short getHLSVLF() {
return HLSVLF;
}

public short getHLSVLN() {
return HLSVLN;
}

public short getHLSVM() {
return HLSVM;
}

public short getHLSVMF() {
return HLSVMF;
}

public short getHLSVMN() {
return HLSVMN;
}

public boolean getHOH() {
return HOH;
}

public short getHOSP() {
return HOSP;
}

public short getHOSPCH() {
return HOSPCH;
}

public short getHOSPD() {
return HOSPD;
}

public short getHOSPNHS() {
return HOSPNHS;
}

public short getHOWLNG() {
return HOWLNG;
}

public short getHUBUYS() {
return HUBUYS;
}

public short getHUBUYS_BH() {
return HUBUYS_BH;
}

public short getHUFRYS() {
return HUFRYS;
}

public short getHUFRYS_BH() {
return HUFRYS_BH;
}

public short getHUIRON() {
return HUIRON;
}

public short getHUIRON_BH() {
return HUIRON_BH;
}

public short getHUMOPS() {
return HUMOPS;
}

public short getHUMOPS_BH() {
return HUMOPS_BH;
}

public short getHUNURS() {
return HUNURS;
}

public short getHUSITS() {
return HUSITS;
}

public short getHUXPCH() {
return HUXPCH;
}

public short getIENDDATHM() {
return IENDDATHM;
}

public short getIODC() {
return IODC;
}

public short getISCED() {
return ISCED;
}

public short getISTRTDATHM() {
return ISTRTDATHM;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public short getIV2() {
return IV2;
}

public short getIV4() {
return IV4;
}

public short getIV5() {
return IV5;
}

public short getIV6A() {
return IV6A;
}

public short getIV6B() {
return IV6B;
}

public short getIV6C() {
return IV6C;
}

public short getIV6D() {
return IV6D;
}

public short getIV6E() {
return IV6E;
}

public short getIV6F() {
return IV6F;
}

public short getIV7() {
return IV7;
}

public byte getIVDA() {
return IVDA;
}

public byte getIVDB() {
return IVDB;
}

public byte getIVDC() {
return IVDC;
}

public byte getIVDD() {
return IVDD;
}

public byte getIVDE() {
return IVDE;
}

public short getIVEA() {
return IVEA;
}

public short getIVEB() {
return IVEB;
}

public short getIVEC() {
return IVEC;
}

public short getIVED() {
return IVED;
}

public short getIVEE() {
return IVEE;
}

public short getIVFA() {
return IVFA;
}

public short getIVFB() {
return IVFB;
}

public short getIVFC() {
return IVFC;
}

public short getIVFD() {
return IVFD;
}

public short getIVFE() {
return IVFE;
}

public byte getIVIOW7() {
return IVIOW7;
}

public short getIVJA() {
return IVJA;
}

public short getIVJB() {
return IVJB;
}

public short getIVJC() {
return IVJC;
}

public short getIVJD() {
return IVJD;
}

public short getIVJE() {
return IVJE;
}

public byte getIVLPAR() {
return IVLPAR;
}

public byte getIVLPARY() {
return IVLPARY;
}

public short getIVLYR() {
return IVLYR;
}

public short getIVMA() {
return IVMA;
}

public short getIVMB() {
return IVMB;
}

public short getIVMC() {
return IVMC;
}

public short getIVMD() {
return IVMD;
}

public short getIVME() {
return IVME;
}

public short getIVPA() {
return IVPA;
}

public short getIVPB() {
return IVPB;
}

public short getIVPC() {
return IVPC;
}

public short getIVPD() {
return IVPD;
}

public short getIVPE() {
return IVPE;
}

public short getIVSC() {
return IVSC;
}

public byte getIVSTAT2() {
return IVSTAT2;
}

public byte getJ1BOSS() {
return J1BOSS;
}

protected double J1CSSF() {
return J1CSSF;
}

protected double J1CSSM() {
return J1CSSM;
}

public byte getJ1GOLD() {
return J1GOLD;
}

protected double J1HGS() {
return J1HGS;
}

public short getJ1ISCO88_CC() {
return J1ISCO88_CC;
}

public String getJ1ISCO_CC() {
return J1ISCO_CC;
}

public byte getJ1MNGR() {
return J1MNGR;
}

public byte getJ1NONE_BH() {
return J1NONE_BH;
}

public byte getJ1NSSEC8_DV() {
return J1NSSEC8_DV;
}

public byte getJ1NSSEC_DV() {
return J1NSSEC_DV;
}

public byte getJ1RGSC() {
return J1RGSC;
}

public short getJ1SEC() {
return J1SEC;
}

public byte getJ1SEG() {
return J1SEG;
}

public byte getJ1SEMP() {
return J1SEMP;
}

public byte getJ1SOC90_CC() {
return J1SOC90_CC;
}

public short getJ2PAY_BH() {
return J2PAY_BH;
}

public short getJ2SOC90_CC() {
return J2SOC90_CC;
}

public short getJBBGLY() {
return JBBGLY;
}

public short getJBCHC1() {
return JBCHC1;
}

public short getJBCHC2() {
return JBCHC2;
}

public short getJBCHC3() {
return JBCHC3;
}

protected double JBCSSF() {
return JBCSSF;
}

protected double JBCSSM() {
return JBCSSM;
}

public short getJBGOLD() {
return JBGOLD;
}

protected double JBHGS() {
return JBHGS;
}

public short getJBHRLK() {
return JBHRLK;
}

public String getJBISCO_CC() {
return JBISCO_CC;
}

public byte getJBLKCHA() {
return JBLKCHA;
}

public byte getJBLKCHB() {
return JBLKCHB;
}

public byte getJBLKCHC() {
return JBLKCHC;
}

public byte getJBLKCHD() {
return JBLKCHD;
}

public byte getJBLKCHE() {
return JBLKCHE;
}

public byte getJBMRS() {
return JBMRS;
}

public short getJBNSSEC_DV() {
return JBNSSEC_DV;
}

public short getJBOFFY_BH() {
return JBOFFY_BH;
}

public int getJBONAM() {
return JBONAM;
}

public byte getJBONG() {
return JBONG;
}

public short getJBONUS() {
return JBONUS;
}

public short getJBOPPS() {
return JBOPPS;
}

public short getJBPEN() {
return JBPEN;
}

public short getJBPENM() {
return JBPENM;
}

public byte getJBPERFP() {
return JBPERFP;
}

public short getJBPL_BH() {
return JBPL_BH;
}

public short getJBRGSC_DV() {
return JBRGSC_DV;
}

public short getJBRISE() {
return JBRISE;
}

public short getJBSAT2() {
return JBSAT2;
}

public short getJBSAT4() {
return JBSAT4;
}

public short getJBSAT6() {
return JBSAT6;
}

public short getJBSAT7() {
return JBSAT7;
}

public short getJBSAT_BH() {
return JBSAT_BH;
}

public short getJBSECT_BH() {
return JBSECT_BH;
}

public short getJBSEC_BH() {
return JBSEC_BH;
}

public short getJBSEG_DV() {
return JBSEG_DV;
}

public short getJBSIC() {
return JBSIC;
}

public short getJBSOC90LY_CC() {
return JBSOC90LY_CC;
}

public short getJBSOC90_CC() {
return JBSOC90_CC;
}

public short getJBSTATL() {
return JBSTATL;
}

public short getJBSTATT() {
return JBSTATT;
}

public short getJBTERM() {
return JBTERM;
}

public short getJBTIME() {
return JBTIME;
}

public short getJBTTWM() {
return JBTTWM;
}

public short getJBUB() {
return JBUB;
}

public short getJBUBY() {
return JBUBY;
}

public byte getJBXPCHA() {
return JBXPCHA;
}

public byte getJBXPCHB() {
return JBXPCHB;
}

public byte getJBXPCHC() {
return JBXPCHC;
}

public byte getJBXPCHD() {
return JBXPCHD;
}

public byte getJBXPCHE() {
return JBXPCHE;
}

protected double JLCSSF() {
return JLCSSF;
}

protected double JLCSSM() {
return JLCSSM;
}

public short getJLGOLD() {
return JLGOLD;
}

protected double JLHGS() {
return JLHGS;
}

public short getJLID() {
return JLID;
}

public String getJLISCO_CC() {
return JLISCO_CC;
}

public short getJLNSSEC_DV() {
return JLNSSEC_DV;
}

public short getJLRGSC_DV() {
return JLRGSC_DV;
}

public short getJLSEC() {
return JLSEC;
}

public short getJLSEG_DV() {
return JLSEG_DV;
}

public short getJLSIC() {
return JLSIC;
}

public short getJLSOC90_CC() {
return JLSOC90_CC;
}

public short getJLYID() {
return JLYID;
}

public short getJNMNTH() {
return JNMNTH;
}

public short getJNYEAR() {
return JNYEAR;
}

public short getJSBGY4() {
return JSBGY4;
}

public short getJSHRLK() {
return JSHRLK;
}

protected double JSLOSS() {
return JSLOSS;
}

public byte getJSPART() {
return JSPART;
}

protected double JSPAYG() {
return JSPAYG;
}

public short getJSPAYGI() {
return JSPAYGI;
}

public int getJSPAYU() {
return JSPAYU;
}

public byte getJSPAYW() {
return JSPAYW;
}

protected double JSPAYW_BH() {
return JSPAYW_BH;
}

public short getJSPL_BH() {
return JSPL_BH;
}

public byte getJSPRLS() {
return JSPRLS;
}

public byte getJSPRNI() {
return JSPRNI;
}

protected double JSPROF() {
return JSPROF;
}

public short getJSPROFI() {
return JSPROFI;
}

public byte getJSPRTX() {
return JSPRTX;
}

public byte getJSPYNI() {
return JSPYNI;
}

public byte getJSPYTX() {
return JSPYTX;
}

public short getJSSAT() {
return JSSAT;
}

public short getJSSAT1() {
return JSSAT1;
}

public short getJSSAT2() {
return JSSAT2;
}

public short getJSSAT4() {
return JSSAT4;
}

public short getJSSAT5() {
return JSSAT5;
}

public short getJSTIME() {
return JSTIME;
}

public short getJSTTWM() {
return JSTTWM;
}

public byte getJSTYPEB() {
return JSTYPEB;
}

public short getJTYID() {
return JTYID;
}

public short getJUBGN() {
return JUBGN;
}

public short getJUHRSL() {
return JUHRSL;
}

public short getJUHRSX() {
return JUHRSX;
}

public short getJULK1() {
return JULK1;
}

public short getJULK4() {
return JULK4;
}

public short getJULK4X1() {
return JULK4X1;
}

public short getJULK4X2() {
return JULK4X2;
}

public short getJULK4X4() {
return JULK4X4;
}

public short getJULK4X5() {
return JULK4X5;
}

public short getJULK4X6() {
return JULK4X6;
}

public short getJULKA() {
return JULKA;
}

public short getJULKB() {
return JULKB;
}

public short getJULKC() {
return JULKC;
}

public short getJULKD() {
return JULKD;
}

public short getJULKE() {
return JULKE;
}

public short getJUPAYL() {
return JUPAYL;
}

public short getJUPAYX() {
return JUPAYX;
}

public short getJUSOC90_CC() {
return JUSOC90_CC;
}

public short getJUSPEC() {
return JUSPEC;
}

public short getLACTA() {
return LACTA;
}

public short getLACTB() {
return LACTB;
}

public short getLACTC() {
return LACTC;
}

public short getLACTD() {
return LACTD;
}

public short getLACTE() {
return LACTE;
}

public short getLACTF() {
return LACTF;
}

public short getLACTH() {
return LACTH;
}

public short getLACTI() {
return LACTI;
}

public short getLACTJ() {
return LACTJ;
}

public short getLACTK() {
return LACTK;
}

public short getLACTL() {
return LACTL;
}

public byte getLCHMOR() {
return LCHMOR;
}

public byte getLCHMORN() {
return LCHMORN;
}

public byte getLCOH() {
return LCOH;
}

protected double LEWGHT() {
return LEWGHT;
}

public byte getLFIMPA() {
return LFIMPA;
}

public byte getLFIMPB() {
return LFIMPB;
}

public byte getLFIMPC() {
return LFIMPC;
}

public byte getLFIMPD() {
return LFIMPD;
}

public byte getLFIMPE() {
return LFIMPE;
}

public byte getLFIMPF() {
return LFIMPF;
}

public byte getLFIMPG() {
return LFIMPG;
}

public byte getLFIMPH() {
return LFIMPH;
}

public short getLFSAT1() {
return LFSAT1;
}

public short getLFSAT2() {
return LFSAT2;
}

public short getLFSAT3() {
return LFSAT3;
}

public short getLFSAT4() {
return LFSAT4;
}

public short getLFSAT5() {
return LFSAT5;
}

public short getLFSAT6() {
return LFSAT6;
}

public short getLFSAT7() {
return LFSAT7;
}

public short getLFSAT8() {
return LFSAT8;
}

public short getLFSATL() {
return LFSATL;
}

public short getLFSATO() {
return LFSATO;
}

public short getLKMOVY() {
return LKMOVY;
}

public short getLKNBRD() {
return LKNBRD;
}

public byte getLMAR1M() {
return LMAR1M;
}

public short getLMAR1Y() {
return LMAR1Y;
}

public byte getLNPRNT() {
return LNPRNT;
}

public byte getLOCCHD() {
return LOCCHD;
}

public byte getLOCSERA() {
return LOCSERA;
}

public byte getLOCSERB() {
return LOCSERB;
}

public byte getLOCSERC() {
return LOCSERC;
}

public byte getLOCSERD() {
return LOCSERD;
}

public byte getLOCSERE() {
return LOCSERE;
}

public byte getLPRNT() {
return LPRNT;
}

protected double LRWGHT() {
return LRWGHT;
}

public byte getMABOSS() {
return MABOSS;
}

protected double MACSSF() {
return MACSSF;
}

protected double MACSSM() {
return MACSSM;
}

public byte getMAGOLD() {
return MAGOLD;
}

protected double MAHGS() {
return MAHGS;
}

public short getMAISCO88_CC() {
return MAISCO88_CC;
}

public String getMAISCO_CC() {
return MAISCO_CC;
}

public byte getMAJU() {
return MAJU;
}

public byte getMAJU_BH() {
return MAJU_BH;
}

public byte getMAMNGR() {
return MAMNGR;
}

public byte getMANSSEC8_DV() {
return MANSSEC8_DV;
}

public byte getMANSSEC_DV() {
return MANSSEC_DV;
}

public byte getMARGSC() {
return MARGSC;
}

public short getMASEC() {
return MASEC;
}

public byte getMASEG() {
return MASEG;
}

public byte getMASEMP() {
return MASEMP;
}

public byte getMASOC90_CC() {
return MASOC90_CC;
}

public short getMASTAT() {
return MASTAT;
}

public short getMEMORIG_BH() {
return MEMORIG_BH;
}

public short getMLCHM() {
return MLCHM;
}

public short getMLCHY4() {
return MLCHY4;
}

public short getMLSTAT_BH() {
return MLSTAT_BH;
}

public int getMNPID_BH() {
return MNPID_BH;
}

public short getMOVEST() {
return MOVEST;
}

public short getMOVJB() {
return MOVJB;
}

public short getMOVJBA() {
return MOVJBA;
}

public short getMOVJBB() {
return MOVJBB;
}

public short getMOVJBC() {
return MOVJBC;
}

public short getMOVJBD() {
return MOVJBD;
}

public short getMOVJBE() {
return MOVJBE;
}

public short getMOVJBF() {
return MOVJBF;
}

public short getMOVJBG() {
return MOVJBG;
}

public short getMOVJBH() {
return MOVJBH;
}

public short getMOVJBI() {
return MOVJBI;
}

public short getMOVY1() {
return MOVY1;
}

public short getMOVY2() {
return MOVY2;
}

public short getMRJBOSS() {
return MRJBOSS;
}

protected double MRJCSSF() {
return MRJCSSF;
}

protected double MRJCSSM() {
return MRJCSSM;
}

public short getMRJEND() {
return MRJEND;
}

public short getMRJGOLD() {
return MRJGOLD;
}

protected double MRJHGS() {
return MRJHGS;
}

public short getMRJISCO88_CC() {
return MRJISCO88_CC;
}

public String getMRJISCO_CC() {
return MRJISCO_CC;
}

public short getMRJMNGR() {
return MRJMNGR;
}

public short getMRJNSSEC8_DV() {
return MRJNSSEC8_DV;
}

public short getMRJNSSEC_DV() {
return MRJNSSEC_DV;
}

public short getMRJRGSC() {
return MRJRGSC;
}

public short getMRJSEC() {
return MRJSEC;
}

public short getMRJSEG() {
return MRJSEG;
}

public short getMRJSEMP() {
return MRJSEMP;
}

public short getMRJSIC() {
return MRJSIC;
}

public short getMRJSIZE() {
return MRJSIZE;
}

public short getMRJSOC() {
return MRJSOC;
}

public short getMSTATSAM() {
return MSTATSAM;
}

public short getNAIDXHH_BH() {
return NAIDXHH_BH;
}

public short getNCHILD_DV() {
return NCHILD_DV;
}

public short getNCIGS() {
return NCIGS;
}

public byte getNEIGH() {
return NEIGH;
}

public byte getNEIGH1() {
return NEIGH1;
}

public byte getNEIGH2() {
return NEIGH2;
}

public byte getNEIGH3() {
return NEIGH3;
}

public byte getNEIGH4() {
return NEIGH4;
}

public byte getNEIGH5() {
return NEIGH5;
}

public byte getNEIGH6() {
return NEIGH6;
}

public short getNEMST() {
return NEMST;
}

public short getNET1AG() {
return NET1AG;
}

public short getNET1JB() {
return NET1JB;
}

public byte getNET1KN() {
return NET1KN;
}

public byte getNET1LV() {
return NET1LV;
}

public short getNET1PH() {
return NET1PH;
}

public byte getNET1RL() {
return NET1RL;
}

public short getNET1WR() {
return NET1WR;
}

public short getNET2AG() {
return NET2AG;
}

public short getNET2JB() {
return NET2JB;
}

public byte getNET2KN() {
return NET2KN;
}

public byte getNET2LV() {
return NET2LV;
}

public short getNET2PH() {
return NET2PH;
}

public byte getNET2RL() {
return NET2RL;
}

public short getNET2WR() {
return NET2WR;
}

public short getNET3AG() {
return NET3AG;
}

public short getNET3JB() {
return NET3JB;
}

public byte getNET3KN() {
return NET3KN;
}

public byte getNET3LV() {
return NET3LV;
}

public short getNET3PH() {
return NET3PH;
}

public byte getNET3RL() {
return NET3RL;
}

public short getNET3WR() {
return NET3WR;
}

public short getNETAG_1() {
return NETAG_1;
}

public short getNETAG_2() {
return NETAG_2;
}

public short getNETAG_3() {
return NETAG_3;
}

public byte getNETKN_1() {
return NETKN_1;
}

public byte getNETKN_2() {
return NETKN_2;
}

public byte getNETKN_3() {
return NETKN_3;
}

public short getNETPH_1() {
return NETPH_1;
}

public short getNETPH_2() {
return NETPH_2;
}

public short getNETPH_3() {
return NETPH_3;
}

public byte getNETRL_1() {
return NETRL_1;
}

public byte getNETRL_2() {
return NETRL_2;
}

public byte getNETRL_3() {
return NETRL_3;
}

public short getNETSX1() {
return NETSX1;
}

public short getNETSX2() {
return NETSX2;
}

public short getNETSX3() {
return NETSX3;
}

public short getNETSX_1() {
return NETSX_1;
}

public short getNETSX_2() {
return NETSX_2;
}

public short getNETSX_3() {
return NETSX_3;
}

public short getNETWR_1() {
return NETWR_1;
}

public short getNETWR_2() {
return NETWR_2;
}

public short getNETWR_3() {
return NETWR_3;
}

public short getNEWHY() {
return NEWHY;
}

public short getNF1() {
return NF1;
}

public short getNJBNEW() {
return NJBNEW;
}

public short getNJBS() {
return NJBS;
}

public short getNJBSP() {
return NJBSP;
}

protected double NJBWKS() {
return NJBWKS;
}

public short getNJISP() {
return NJISP;
}

protected double NJIWKS() {
return NJIWKS;
}

public short getNJUSP() {
return NJUSP;
}

protected double NJUWKS() {
return NJUWKS;
}

public byte getNMAR_BH() {
return NMAR_BH;
}

public byte getNQFEDA() {
return NQFEDA;
}

public byte getNQFEDB() {
return NQFEDB;
}

public byte getNQFEDC() {
return NQFEDC;
}

public short getNQFEDD() {
return NQFEDD;
}

public short getNQFEDE() {
return NQFEDE;
}

public byte getNQFEDF() {
return NQFEDF;
}

public byte getNQFEDG() {
return NQFEDG;
}

public byte getNQFEDH() {
return NQFEDH;
}

public byte getNQFEDI() {
return NQFEDI;
}

public byte getNQFEDJ() {
return NQFEDJ;
}

public byte getNQFEDK() {
return NQFEDK;
}

public short getNQFEDL() {
return NQFEDL;
}

public byte getNQFEDM() {
return NQFEDM;
}

public short getNQFEDN() {
return NQFEDN;
}

public byte getNQFEDO() {
return NQFEDO;
}

public byte getNQFEDP() {
return NQFEDP;
}

public byte getNQFEDQ() {
return NQFEDQ;
}

public byte getNQFEDR() {
return NQFEDR;
}

public short getNQFEDS() {
return NQFEDS;
}

public byte getNQFEDT() {
return NQFEDT;
}

public short getNQFEXA() {
return NQFEXA;
}

public short getNQFEXB() {
return NQFEXB;
}

public short getNQFEXC() {
return NQFEXC;
}

public byte getNQFEXG() {
return NQFEXG;
}

public byte getNQFEXH() {
return NQFEXH;
}

public byte getNQFEXI() {
return NQFEXI;
}

public byte getNQFEXJ() {
return NQFEXJ;
}

public byte getNQFEXL() {
return NQFEXL;
}

public byte getNRPART() {
return NRPART;
}

public byte getNRPTIM() {
return NRPTIM;
}

public byte getNRPXPM1() {
return NRPXPM1;
}

public byte getNRPXPM2() {
return NRPXPM2;
}

public byte getNTRAIN() {
return NTRAIN;
}

public short getNXDTS() {
return NXDTS;
}

public short getOPFAMK() {
return OPFAMK;
}

public short getOPFAML() {
return OPFAML;
}

public byte getOPFAMO() {
return OPFAMO;
}

public byte getOPFAMP() {
return OPFAMP;
}

public byte getOPFAMQ() {
return OPFAMQ;
}

public byte getOPFAMR() {
return OPFAMR;
}

public byte getOPNGBHA() {
return OPNGBHA;
}

public byte getOPNGBHB() {
return OPNGBHB;
}

public byte getOPNGBHC() {
return OPNGBHC;
}

public byte getOPNGBHD() {
return OPNGBHD;
}

public byte getOPNGBHE() {
return OPNGBHE;
}

public byte getOPNGBHF() {
return OPNGBHF;
}

public byte getOPNGBHG() {
return OPNGBHG;
}

public byte getOPNGBHH() {
return OPNGBHH;
}

public short getOPPOLA() {
return OPPOLA;
}

public short getOPPOLB() {
return OPPOLB;
}

public short getOPPOLC() {
return OPPOLC;
}

public short getOPPOLD() {
return OPPOLD;
}

public byte getPABOSS() {
return PABOSS;
}

protected double PACSSF() {
return PACSSF;
}

protected double PACSSM() {
return PACSSM;
}

public byte getPAGOLD() {
return PAGOLD;
}

protected double PAHGS() {
return PAHGS;
}

public short getPAISCO88_CC() {
return PAISCO88_CC;
}

public String getPAISCO_CC() {
return PAISCO_CC;
}

public byte getPAJU() {
return PAJU;
}

public byte getPAJU_BH() {
return PAJU_BH;
}

public byte getPAMNGR() {
return PAMNGR;
}

public byte getPANSSEC8_DV() {
return PANSSEC8_DV;
}

public byte getPANSSEC_DV() {
return PANSSEC_DV;
}

public byte getPARGSC() {
return PARGSC;
}

public short getPASEC() {
return PASEC;
}

public byte getPASEG() {
return PASEG;
}

public byte getPASEMP() {
return PASEMP;
}

public byte getPASOC90_CC() {
return PASOC90_CC;
}

public short getPAYDF1() {
return PAYDF1;
}

public short getPAYDF2() {
return PAYDF2;
}

public short getPAYDF3() {
return PAYDF3;
}

public short getPAYDF4() {
return PAYDF4;
}

public short getPAYDF5() {
return PAYDF5;
}

public short getPAYDF6() {
return PAYDF6;
}

public short getPAYDF7() {
return PAYDF7;
}

public short getPAYDF8() {
return PAYDF8;
}

public byte getPAYDF9() {
return PAYDF9;
}

public short getPAYGLI() {
return PAYGLI;
}

protected double PAYGLY() {
return PAYGLY;
}

public short getPAYGTI() {
return PAYGTI;
}

protected double PAYGTY() {
return PAYGTY;
}

protected double PAYGW() {
return PAYGW;
}

protected double PAYG_DV() {
return PAYG_DV;
}

public int getPAYLY() {
return PAYLY;
}

public short getPAYLYG() {
return PAYLYG;
}

protected double PAYLYW() {
return PAYLYW;
}

public short getPAYNLI() {
return PAYNLI;
}

protected double PAYNLY() {
return PAYNLY;
}

public short getPAYNTI() {
return PAYNTI;
}

protected double PAYNTY() {
return PAYNTY;
}

protected double PAYNW() {
return PAYNW;
}

public int getPAYS() {
return PAYS;
}

public short getPAYSG() {
return PAYSG;
}

public short getPAYSLP() {
return PAYSLP;
}

protected double PAYSW() {
return PAYSW;
}

protected double PAYUW() {
return PAYUW;
}

public short getPENADD() {
return PENADD;
}

public short getPENADV() {
return PENADV;
}

protected double PENADW() {
return PENADW;
}

public short getPENB4() {
return PENB4;
}

public short getPENB4V() {
return PENB4V;
}

protected double PENB4W() {
return PENB4W;
}

public short getPENB4Y4() {
return PENB4Y4;
}

public short getPENYR4() {
return PENYR4;
}

public int getPID() {
return PID;
}

public short getPLBORNC_CC() {
return PLBORNC_CC;
}

public short getPLNEW() {
return PLNEW;
}

public short getPLNOWM() {
return PLNOWM;
}

public short getPLNOWY4() {
return PLNOWY4;
}

public short getPPLEVR() {
return PPLEVR;
}

public short getPPPEN() {
return PPPEN;
}

public short getPREARNI() {
return PREARNI;
}

public short getPREARN_BH() {
return PREARN_BH;
}

public short getPRESBGM() {
return PRESBGM;
}

public short getPRESBY4() {
return PRESBY4;
}

public short getPRESLY() {
return PRESLY;
}

public short getPRF101() {
return PRF101;
}

public short getPRF102() {
return PRF102;
}

public short getPRF116() {
return PRF116;
}

public short getPRF125() {
return PRF125;
}

public short getPRF131() {
return PRF131;
}

public short getPRF135() {
return PRF135;
}

public byte getPRF137() {
return PRF137;
}

public short getPRF139() {
return PRF139;
}

public short getPRF141() {
return PRF141;
}

public short getPRFEHQ() {
return PRFEHQ;
}

public byte getPRFIRN() {
return PRFIRN;
}

public short getPRFITBI() {
return PRFITBI;
}

public short getPRFITB_BH() {
return PRFITB_BH;
}

public short getPRJBBY4() {
return PRJBBY4;
}

public byte getPRJBFT() {
return PRJBFT;
}

public short getPRJBLY() {
return PRJBLY;
}

public short getPRRS2I() {
return PRRS2I;
}

public short getPRSEHQ() {
return PRSEHQ;
}

public short getPRWHY() {
return PRWHY;
}

public byte getPYAGE1() {
return PYAGE1;
}

public byte getPYAGE2() {
return PYAGE2;
}

public byte getPYAGE3() {
return PYAGE3;
}

public short getPYARG1() {
return PYARG1;
}

public short getPYARG2() {
return PYARG2;
}

public short getPYARG3() {
return PYARG3;
}

public byte getPYHLTH() {
return PYHLTH;
}

public byte getPYHWRK() {
return PYHWRK;
}

public byte getPYMAN1() {
return PYMAN1;
}

public byte getPYMAN2() {
return PYMAN2;
}

public byte getPYMAN3() {
return PYMAN3;
}

public short getPYNYP() {
return PYNYP;
}

public short getPYPNO1() {
return PYPNO1;
}

public short getPYPNO2() {
return PYPNO2;
}

public short getPYPNO3() {
return PYPNO3;
}

public short getPYSAD1() {
return PYSAD1;
}

public short getPYSAD2() {
return PYSAD2;
}

public short getPYSAD3() {
return PYSAD3;
}

public byte getPYSMK1() {
return PYSMK1;
}

public byte getPYSMK2() {
return PYSMK2;
}

public byte getPYSMK3() {
return PYSMK3;
}

public short getPYTLK1() {
return PYTLK1;
}

public short getPYTLK2() {
return PYTLK2;
}

public short getPYTLK3() {
return PYTLK3;
}

public short getPYWHR1() {
return PYWHR1;
}

public short getPYWHR2() {
return PYWHR2;
}

public short getPYWHR3() {
return PYWHR3;
}

public short getPYWOR1() {
return PYWOR1;
}

public short getPYWOR2() {
return PYWOR2;
}

public short getPYWOR3() {
return PYWOR3;
}

public short getQFA() {
return QFA;
}

public short getQFACHI() {
return QFACHI;
}

public short getQFB() {
return QFB;
}

public short getQFC() {
return QFC;
}

public short getQFD() {
return QFD;
}

public short getQFE() {
return QFE;
}

public short getQFED() {
return QFED;
}

public short getQFEDA() {
return QFEDA;
}

public short getQFEDB() {
return QFEDB;
}

public short getQFEDC() {
return QFEDC;
}

public short getQFEDD() {
return QFEDD;
}

public short getQFEDE() {
return QFEDE;
}

public short getQFEDF() {
return QFEDF;
}

public short getQFEDG() {
return QFEDG;
}

public short getQFEDH() {
return QFEDH;
}

public short getQFEDHI() {
return QFEDHI;
}

public short getQFEDI() {
return QFEDI;
}

public short getQFEDJ() {
return QFEDJ;
}

public short getQFEDK() {
return QFEDK;
}

public short getQFEDL() {
return QFEDL;
}

public short getQFEDM() {
return QFEDM;
}

public short getQFEDN() {
return QFEDN;
}

public short getQFEDO() {
return QFEDO;
}

public short getQFEDP() {
return QFEDP;
}

public short getQFEDQ() {
return QFEDQ;
}

public short getQFEDR() {
return QFEDR;
}

public short getQFEDS() {
return QFEDS;
}

public byte getQFEDT() {
return QFEDT;
}

public short getQFEDX() {
return QFEDX;
}

public short getQFEDXA() {
return QFEDXA;
}

public short getQFEDXB() {
return QFEDXB;
}

public short getQFEDXC() {
return QFEDXC;
}

public short getQFEDXG() {
return QFEDXG;
}

public short getQFEDXH() {
return QFEDXH;
}

public short getQFEDXI() {
return QFEDXI;
}

public short getQFEDXJ() {
return QFEDXJ;
}

public byte getQFEDXL() {
return QFEDXL;
}

public short getQFF() {
return QFF;
}

public short getQFG() {
return QFG;
}

public short getQFH() {
return QFH;
}

public short getQFHAS() {
return QFHAS;
}

public short getQFI() {
return QFI;
}

public short getQFJ() {
return QFJ;
}

public short getQFK() {
return QFK;
}

public short getQFL() {
return QFL;
}

public short getQFM() {
return QFM;
}

public short getQFN() {
return QFN;
}

public short getQFVOC() {
return QFVOC;
}

public short getQFX() {
return QFX;
}

public short getQFXC() {
return QFXC;
}

public short getQFXD() {
return QFXD;
}

public short getQFXE() {
return QFXE;
}

public short getQFXF() {
return QFXF;
}

public short getQFXG() {
return QFXG;
}

public short getQFXH() {
return QFXH;
}

public short getQFXK() {
return QFXK;
}

public short getQFXL() {
return QFXL;
}

public short getQFXM() {
return QFXM;
}

public short getQFXN() {
return QFXN;
}

public byte getQFXO() {
return QFXO;
}

public byte getQFXP() {
return QFXP;
}

public byte getQFXQ() {
return QFXQ;
}

public byte getQFXR() {
return QFXR;
}

public short getRACE() {
return RACE;
}

public short getRACH12() {
return RACH12;
}

public short getREGION() {
return REGION;
}

public short getSAMPST() {
return SAMPST;
}

public short getSAMPST_BH() {
return SAMPST_BH;
}

public short getSAVE() {
return SAVE;
}

public int getSAVED() {
return SAVED;
}

public short getSAVEY1() {
return SAVEY1;
}

public short getSAVEY2() {
return SAVEY2;
}

public short getSCNOW() {
return SCNOW;
}

public byte getSCTRUST() {
return SCTRUST;
}

public short getSCTYPE() {
return SCTYPE;
}

public short getSMOKER() {
return SMOKER;
}

public short getSPINHH() {
return SPINHH;
}

public short getSPJB() {
return SPJB;
}

public short getSPJBHR() {
return SPJBHR;
}

public short getSPJBOT() {
return SPJBOT;
}

public short getSPJBYR() {
return SPJBYR;
}

protected double SPPAYG() {
return SPPAYG;
}

public short getSPPAYGI() {
return SPPAYGI;
}

public int getSPPID_BH() {
return SPPID_BH;
}

public short getSPSOC90_CC() {
return SPSOC90_CC;
}

public short getTELWHY() {
return TELWHY;
}

public short getTENURE_DV() {
return TENURE_DV;
}

public int getTLFIYR() {
return TLFIYR;
}

public int getTLFIYRL() {
return TLFIYRL;
}

public byte getTRAIN() {
return TRAIN;
}

public byte getTRFEEA1() {
return TRFEEA1;
}

public byte getTRFEEA2() {
return TRFEEA2;
}

public byte getTRFEEA3() {
return TRFEEA3;
}

public byte getTRFEEB1() {
return TRFEEB1;
}

public byte getTRFEEB2() {
return TRFEEB2;
}

public byte getTRFEEB3() {
return TRFEEB3;
}

public byte getTRFEEC1() {
return TRFEEC1;
}

public byte getTRFEEC2() {
return TRFEEC2;
}

public byte getTRFEEC3() {
return TRFEEC3;
}

public byte getTRFEEE1() {
return TRFEEE1;
}

public byte getTRFEEE2() {
return TRFEEE2;
}

public byte getTRFEEE3() {
return TRFEEE3;
}

public byte getTRFEEF1() {
return TRFEEF1;
}

public byte getTRFEEF2() {
return TRFEEF2;
}

public byte getTRFEEF3() {
return TRFEEF3;
}

public byte getTRFEEG1() {
return TRFEEG1;
}

public byte getTRFEEG2() {
return TRFEEG2;
}

public byte getTRFEEG3() {
return TRFEEG3;
}

public byte getTRMORE1() {
return TRMORE1;
}

public byte getTRMORE2() {
return TRMORE2;
}

public byte getTROQL1() {
return TROQL1;
}

public byte getTROQL2() {
return TROQL2;
}

public byte getTROQL3() {
return TROQL3;
}

public byte getTROQLN1() {
return TROQLN1;
}

public byte getTROQLN2() {
return TROQLN2;
}

public byte getTROQLN3() {
return TROQLN3;
}

public byte getTRPLCE1() {
return TRPLCE1;
}

public byte getTRPLCE2() {
return TRPLCE2;
}

public byte getTRPLCE3() {
return TRPLCE3;
}

public short getTRQ1() {
return TRQ1;
}

public short getTRQ2() {
return TRQ2;
}

public short getTRQ3() {
return TRQ3;
}

public byte getTRQLA1() {
return TRQLA1;
}

public byte getTRQLA2() {
return TRQLA2;
}

public byte getTRQLA3() {
return TRQLA3;
}

public byte getTRQLAC1() {
return TRQLAC1;
}

public byte getTRQLAC2() {
return TRQLAC2;
}

public byte getTRQLAC3() {
return TRQLAC3;
}

public byte getTRQLAN1() {
return TRQLAN1;
}

public byte getTRQLAN2() {
return TRQLAN2;
}

public byte getTRQLAN3() {
return TRQLAN3;
}

public byte getTRQLB1() {
return TRQLB1;
}

public byte getTRQLB2() {
return TRQLB2;
}

public byte getTRQLB3() {
return TRQLB3;
}

public byte getTRQLBN1() {
return TRQLBN1;
}

public byte getTRQLBN2() {
return TRQLBN2;
}

public byte getTRQLBN3() {
return TRQLBN3;
}

public byte getTRQLC1() {
return TRQLC1;
}

public byte getTRQLC2() {
return TRQLC2;
}

public byte getTRQLC3() {
return TRQLC3;
}

public byte getTRQLCN1() {
return TRQLCN1;
}

public byte getTRQLCN2() {
return TRQLCN2;
}

public byte getTRQLCN3() {
return TRQLCN3;
}

public byte getTRQLD1() {
return TRQLD1;
}

public byte getTRQLD2() {
return TRQLD2;
}

public byte getTRQLD3() {
return TRQLD3;
}

public byte getTRQLDN1() {
return TRQLDN1;
}

public byte getTRQLDN2() {
return TRQLDN2;
}

public byte getTRQLDN3() {
return TRQLDN3;
}

public byte getTRQLE1() {
return TRQLE1;
}

public byte getTRQLE2() {
return TRQLE2;
}

public byte getTRQLE3() {
return TRQLE3;
}

public byte getTRQLEN1() {
return TRQLEN1;
}

public byte getTRQLEN2() {
return TRQLEN2;
}

public byte getTRQLEN3() {
return TRQLEN3;
}

public byte getTRQLF1() {
return TRQLF1;
}

public byte getTRQLF2() {
return TRQLF2;
}

public byte getTRQLF3() {
return TRQLF3;
}

public byte getTRQLFN1() {
return TRQLFN1;
}

public byte getTRQLFN2() {
return TRQLFN2;
}

public byte getTRQLFN3() {
return TRQLFN3;
}

public byte getTRQLG1() {
return TRQLG1;
}

public byte getTRQLG2() {
return TRQLG2;
}

public byte getTRQLG3() {
return TRQLG3;
}

public byte getTRQLGN1() {
return TRQLGN1;
}

public byte getTRQLGN2() {
return TRQLGN2;
}

public byte getTRQLGN3() {
return TRQLGN3;
}

public byte getTRQLH1() {
return TRQLH1;
}

public byte getTRQLH2() {
return TRQLH2;
}

public byte getTRQLH3() {
return TRQLH3;
}

public byte getTRQLHN1() {
return TRQLHN1;
}

public byte getTRQLHN2() {
return TRQLHN2;
}

public byte getTRQLHN3() {
return TRQLHN3;
}

public byte getTRQLI1() {
return TRQLI1;
}

public byte getTRQLI2() {
return TRQLI2;
}

public byte getTRQLI3() {
return TRQLI3;
}

public byte getTRQLIN1() {
return TRQLIN1;
}

public byte getTRQLIN2() {
return TRQLIN2;
}

public byte getTRQLIN3() {
return TRQLIN3;
}

public byte getTRQLJ1() {
return TRQLJ1;
}

public byte getTRQLJ2() {
return TRQLJ2;
}

public byte getTRQLJ3() {
return TRQLJ3;
}

public byte getTRQLJN1() {
return TRQLJN1;
}

public byte getTRQLJN2() {
return TRQLJN2;
}

public byte getTRQLJN3() {
return TRQLJN3;
}

public byte getTRQLNN1() {
return TRQLNN1;
}

public byte getTRQLNN2() {
return TRQLNN2;
}

public byte getTRQLNN3() {
return TRQLNN3;
}

public byte getTRQLXP1() {
return TRQLXP1;
}

public byte getTRQLXP2() {
return TRQLXP2;
}

public byte getTRQLXP3() {
return TRQLXP3;
}

public byte getTRU1() {
return TRU1;
}

public byte getTRU2() {
return TRU2;
}

public byte getTRU3() {
return TRU3;
}

public byte getTRWHYA1() {
return TRWHYA1;
}

public byte getTRWHYA2() {
return TRWHYA2;
}

public byte getTRWHYA3() {
return TRWHYA3;
}

public byte getTRWHYB1() {
return TRWHYB1;
}

public byte getTRWHYB2() {
return TRWHYB2;
}

public byte getTRWHYB3() {
return TRWHYB3;
}

public byte getTRWHYC1() {
return TRWHYC1;
}

public byte getTRWHYC2() {
return TRWHYC2;
}

public byte getTRWHYC3() {
return TRWHYC3;
}

public byte getTRWHYD1() {
return TRWHYD1;
}

public byte getTRWHYD2() {
return TRWHYD2;
}

public byte getTRWHYD3() {
return TRWHYD3;
}

public byte getTRWHYE1() {
return TRWHYE1;
}

public byte getTRWHYE2() {
return TRWHYE2;
}

public byte getTRWHYE3() {
return TRWHYE3;
}

public short getTUIN1() {
return TUIN1;
}

public short getTUJBPL() {
return TUJBPL;
}

public byte getUKCITZN_DV_BH() {
return UKCITZN_DV_BH;
}

public short getVOTE() {
return VOTE;
}

public short getVOTE1() {
return VOTE1;
}

public short getVOTE2() {
return VOTE2;
}

public short getVOTE3() {
return VOTE3;
}

public short getVOTE3_BH() {
return VOTE3_BH;
}

public short getVOTE4() {
return VOTE4;
}

public short getVOTE4_BH() {
return VOTE4_BH;
}

public short getVOTE5() {
return VOTE5;
}

public byte getVOTE7() {
return VOTE7;
}

public byte getVOTE8() {
return VOTE8;
}

public byte getVOTE8_BH() {
return VOTE8_BH;
}

public byte getWINDF() {
return WINDF;
}

public byte getWINDFA() {
return WINDFA;
}

public int getWINDFAY() {
return WINDFAY;
}

public byte getWINDFB() {
return WINDFB;
}

public int getWINDFBY() {
return WINDFBY;
}

public byte getWINDFC() {
return WINDFC;
}

public int getWINDFCY() {
return WINDFCY;
}

public byte getWINDFD() {
return WINDFD;
}

public int getWINDFDY() {
return WINDFDY;
}

public byte getWINDFF() {
return WINDFF;
}

public int getWINDFFY() {
return WINDFFY;
}

public byte getWINDFG() {
return WINDFG;
}

public int getWINDFGY() {
return WINDFGY;
}

public byte getWINDFH() {
return WINDFH;
}

public int getWINDFHY() {
return WINDFHY;
}

public short getWKTIME() {
return WKTIME;
}

public short getXDTS() {
return XDTS;
}

protected double XEWGHT() {
return XEWGHT;
}

protected double XEWGHTE() {
return XEWGHTE;
}

public short getXPCHC() {
return XPCHC;
}

public short getXPCHCF() {
return XPCHCF;
}

public byte getXPLEIS() {
return XPLEIS;
}

public byte getXPMEAL() {
return XPMEAL;
}

public byte getXPMOVE() {
return XPMOVE;
}

protected double XRWGHT() {
return XRWGHT;
}

protected double XRWGHTE() {
return XRWGHTE;
}

public short getYPPAR() {
return YPPAR;
}

public US_Wave8_indresp_Record(String line) {
s = line.split("\t");
initPID(s[0]);
initHIQUALB_DV(s[1]);
initHID(s[2]);
initHIDP(s[3]);
initPNO(s[4]);
initISTRTDATD(s[5]);
initISTRTDATM(s[6]);
initISTRTDATY(s[7]);
initISTRTDATHH(s[8]);
initISTRTDATHM(s[9]);
initIVLYR(s[10]);
initIVSTAT2(s[11]);
initLKNBRD(s[12]);
initLKMOVE(s[13]);
initLKMOVY(s[14]);
initXPMOVE(s[15]);
initPLNEW(s[16]);
initPLNOWM(s[17]);
initPLNOWY4(s[18]);
initMOVJB(s[19]);
initMOVJBA(s[20]);
initMOVJBB(s[21]);
initMOVJBC(s[22]);
initMOVJBD(s[23]);
initMOVJBE(s[24]);
initMOVJBF(s[25]);
initMOVJBG(s[26]);
initMOVJBH(s[27]);
initMOVJBI(s[28]);
initMOVY1(s[29]);
initMOVY2(s[30]);
initDOBY(s[31]);
initSEX(s[32]);
initJBSTAT(s[33]);
initEDLYR(s[34]);
initEDTYPE1(s[35]);
initEDBLYR1(s[36]);
initEDBGM1(s[37]);
initEDBGY1(s[38]);
initEDENM1(s[39]);
initEDENY1(s[40]);
initEDENNE1(s[41]);
initEDFEEA1(s[42]);
initEDFEEB1(s[43]);
initEDFEEC1(s[44]);
initEDFEED1(s[45]);
initEDFEEE1(s[46]);
initEDFEEF1(s[47]);
initEDFEEG1(s[48]);
initEDQUAL1(s[49]);
initEDQNN1(s[50]);
initEDQLA1(s[51]);
initEDQLB1(s[52]);
initEDQLC1(s[53]);
initEDQLD1(s[54]);
initEDQLE1(s[55]);
initEDQLF1(s[56]);
initEDQLG1(s[57]);
initEDQLH1(s[58]);
initEDQLI1(s[59]);
initEDQLJ1(s[60]);
initEDQLAN1(s[61]);
initEDQLBN1(s[62]);
initEDQLCN1(s[63]);
initEDQLDN1(s[64]);
initEDQLEN1(s[65]);
initEDQLFN1(s[66]);
initEDQLGN1(s[67]);
initEDQLHN1(s[68]);
initEDQLIN1(s[69]);
initEDQLJN1(s[70]);
initEDOQLN1(s[71]);
initEDOQL1(s[72]);
initEDMORE1(s[73]);
initEDTYPE2(s[74]);
initEDBLYR2(s[75]);
initEDBGM2(s[76]);
initEDBGY2(s[77]);
initEDENM2(s[78]);
initEDENY2(s[79]);
initEDENNE2(s[80]);
initEDFEEA2(s[81]);
initEDFEEB2(s[82]);
initEDFEEC2(s[83]);
initEDFEED2(s[84]);
initEDFEEE2(s[85]);
initEDFEEF2(s[86]);
initEDFEEG2(s[87]);
initEDQUAL2(s[88]);
initEDQNN2(s[89]);
initEDQLA2(s[90]);
initEDQLB2(s[91]);
initEDQLC2(s[92]);
initEDQLD2(s[93]);
initEDQLE2(s[94]);
initEDQLF2(s[95]);
initEDQLG2(s[96]);
initEDQLH2(s[97]);
initEDQLI2(s[98]);
initEDQLJ2(s[99]);
initEDQLAN2(s[100]);
initEDQLBN2(s[101]);
initEDQLCN2(s[102]);
initEDQLDN2(s[103]);
initEDQLEN2(s[104]);
initEDQLFN2(s[105]);
initEDQLGN2(s[106]);
initEDQLHN2(s[107]);
initEDQLIN2(s[108]);
initEDQLJN2(s[109]);
initEDOQLN2(s[110]);
initEDOQL2(s[111]);
initEDMORE2(s[112]);
initMLSTAT_BH(s[113]);
initMSTATSAM(s[114]);
initMLCHM(s[115]);
initMLCHY4(s[116]);
initYR2UK4(s[117]);
initRACE(s[118]);
initPAJU_BH(s[119]);
initPASEMP(s[120]);
initPABOSS(s[121]);
initPAMNGR(s[122]);
initMAJU_BH(s[123]);
initMASEMP(s[124]);
initMABOSS(s[125]);
initMAMNGR(s[126]);
initJ1NONE_BH(s[127]);
initJ1SEMP(s[128]);
initJ1BOSS(s[129]);
initJ1MNGR(s[130]);
initLCOH(s[131]);
initCOH1BM(s[132]);
initCOH1BY(s[133]);
initCOH1MR(s[134]);
initCOH1EM(s[135]);
initCOH1EY(s[136]);
initNMAR_BH(s[137]);
initLMAR1M(s[138]);
initLMAR1Y(s[139]);
initLPRNT(s[140]);
initLNPRNT(s[141]);
initCH1BY4(s[142]);
initSCHOOL(s[143]);
initSCEND(s[144]);
initSCTYPE(s[145]);
initSCNOW(s[146]);
initFETYPE(s[147]);
initFENOW_BH(s[148]);
initFEEND(s[149]);
initQFHAS(s[150]);
initQFA(s[151]);
initQFB(s[152]);
initQFC(s[153]);
initQFD(s[154]);
initQFE(s[155]);
initQFF(s[156]);
initQFG(s[157]);
initQFH(s[158]);
initQFI(s[159]);
initQFJ(s[160]);
initQFK(s[161]);
initQFL(s[162]);
initQFM(s[163]);
initQFN(s[164]);
initQFED(s[165]);
initQFEDA(s[166]);
initNQFEDA(s[167]);
initQFEDB(s[168]);
initNQFEDB(s[169]);
initQFEDC(s[170]);
initNQFEDC(s[171]);
initQFEDD(s[172]);
initNQFEDD(s[173]);
initQFEDE(s[174]);
initNQFEDE(s[175]);
initQFEDF(s[176]);
initNQFEDF(s[177]);
initQFEDG(s[178]);
initNQFEDG(s[179]);
initQFEDH(s[180]);
initNQFEDH(s[181]);
initQFEDI(s[182]);
initNQFEDI(s[183]);
initQFEDJ(s[184]);
initNQFEDJ(s[185]);
initQFEDT(s[186]);
initNQFEDT(s[187]);
initQFEDK(s[188]);
initNQFEDK(s[189]);
initQFEDL(s[190]);
initNQFEDL(s[191]);
initQFEDM(s[192]);
initNQFEDM(s[193]);
initQFEDN(s[194]);
initNQFEDN(s[195]);
initQFEDO(s[196]);
initNQFEDO(s[197]);
initQFEDP(s[198]);
initNQFEDP(s[199]);
initQFEDQ(s[200]);
initNQFEDQ(s[201]);
initQFEDR(s[202]);
initNQFEDR(s[203]);
initQFEDS(s[204]);
initNQFEDS(s[205]);
initTRAIN(s[206]);
initNTRAIN(s[207]);
initTRPLCE1(s[208]);
initTRWHYA1(s[209]);
initTRWHYB1(s[210]);
initTRWHYC1(s[211]);
initTRWHYD1(s[212]);
initTRWHYE1(s[213]);
initTRQ1(s[214]);
initTRU1(s[215]);
initTRFEEA1(s[216]);
initTRFEEB1(s[217]);
initTRFEEC1(s[218]);
initTRFEEE1(s[219]);
initTRFEEF1(s[220]);
initTRFEEG1(s[221]);
initTRQLXP1(s[222]);
initTRQLAC1(s[223]);
initTRQLNN1(s[224]);
initTRQLA1(s[225]);
initTRQLB1(s[226]);
initTRQLC1(s[227]);
initTRQLD1(s[228]);
initTRQLE1(s[229]);
initTRQLF1(s[230]);
initTRQLG1(s[231]);
initTRQLH1(s[232]);
initTRQLI1(s[233]);
initTRQLJ1(s[234]);
initTRQLAN1(s[235]);
initTRQLBN1(s[236]);
initTRQLCN1(s[237]);
initTRQLDN1(s[238]);
initTRQLEN1(s[239]);
initTRQLFN1(s[240]);
initTRQLGN1(s[241]);
initTRQLHN1(s[242]);
initTRQLIN1(s[243]);
initTRQLJN1(s[244]);
initTROQLN1(s[245]);
initTROQL1(s[246]);
initTRMORE1(s[247]);
initTRPLCE2(s[248]);
initTRWHYA2(s[249]);
initTRWHYB2(s[250]);
initTRWHYC2(s[251]);
initTRWHYD2(s[252]);
initTRWHYE2(s[253]);
initTRQ2(s[254]);
initTRU2(s[255]);
initTRFEEA2(s[256]);
initTRFEEB2(s[257]);
initTRFEEC2(s[258]);
initTRFEEE2(s[259]);
initTRFEEF2(s[260]);
initTRFEEG2(s[261]);
initTRQLXP2(s[262]);
initTRQLAC2(s[263]);
initTRQLNN2(s[264]);
initTRQLA2(s[265]);
initTRQLB2(s[266]);
initTRQLC2(s[267]);
initTRQLD2(s[268]);
initTRQLE2(s[269]);
initTRQLF2(s[270]);
initTRQLG2(s[271]);
initTRQLH2(s[272]);
initTRQLI2(s[273]);
initTRQLJ2(s[274]);
initTRQLAN2(s[275]);
initTRQLBN2(s[276]);
initTRQLCN2(s[277]);
initTRQLDN2(s[278]);
initTRQLEN2(s[279]);
initTRQLFN2(s[280]);
initTRQLGN2(s[281]);
initTRQLHN2(s[282]);
initTRQLIN2(s[283]);
initTRQLJN2(s[284]);
initTROQLN2(s[285]);
initTROQL2(s[286]);
initTRMORE2(s[287]);
initTRPLCE3(s[288]);
initTRWHYA3(s[289]);
initTRWHYB3(s[290]);
initTRWHYC3(s[291]);
initTRWHYD3(s[292]);
initTRWHYE3(s[293]);
initTRQ3(s[294]);
initTRU3(s[295]);
initTRFEEA3(s[296]);
initTRFEEB3(s[297]);
initTRFEEC3(s[298]);
initTRFEEE3(s[299]);
initTRFEEF3(s[300]);
initTRFEEG3(s[301]);
initTRQLXP3(s[302]);
initTRQLAC3(s[303]);
initTRQLNN3(s[304]);
initTRQLA3(s[305]);
initTRQLB3(s[306]);
initTRQLC3(s[307]);
initTRQLD3(s[308]);
initTRQLE3(s[309]);
initTRQLF3(s[310]);
initTRQLG3(s[311]);
initTRQLH3(s[312]);
initTRQLI3(s[313]);
initTRQLJ3(s[314]);
initTRQLAN3(s[315]);
initTRQLBN3(s[316]);
initTRQLCN3(s[317]);
initTRQLDN3(s[318]);
initTRQLEN3(s[319]);
initTRQLFN3(s[320]);
initTRQLGN3(s[321]);
initTRQLHN3(s[322]);
initTRQLIN3(s[323]);
initTRQLJN3(s[324]);
initTROQLN3(s[325]);
initTROQL3(s[326]);
initIVLPAR(s[327]);
initNRPART(s[328]);
initNRPTIM(s[329]);
initNRPXPM1(s[330]);
initNRPXPM2(s[331]);
initCOHADV(s[332]);
initCOHAD1(s[333]);
initCOHAD2(s[334]);
initCOHDIS(s[335]);
initCOHDS1(s[336]);
initCOHDS2(s[337]);
initCOHXPM1(s[338]);
initCOHXPM2(s[339]);
initIVLPARY(s[340]);
initCOHLYR(s[341]);
initCOHLBM1(s[342]);
initCOHLBY1(s[343]);
initCOHLEM1(s[344]);
initCOHLEY1(s[345]);
initCOHLBM2(s[346]);
initCOHLBY2(s[347]);
initCOHLEM2(s[348]);
initCOHLEY2(s[349]);
initCOHLBM3(s[350]);
initCOHLBY3(s[351]);
initCOHLEM3(s[352]);
initCOHLEY3(s[353]);
initCBAGE(s[354]);
initLCHMOR(s[355]);
initLCHMORN(s[356]);
initIVDA(s[357]);
initIVDB(s[358]);
initIVDC(s[359]);
initIVDD(s[360]);
initIVDE(s[361]);
initHLSTAT(s[362]);
initHLDSBL(s[363]);
initHLPRB(s[364]);
initHLPRBA(s[365]);
initHLPRBB(s[366]);
initHLPRBC(s[367]);
initHLPRBD(s[368]);
initHLPRBE(s[369]);
initHLPRBF(s[370]);
initHLPRBG(s[371]);
initHLPRBH(s[372]);
initHLPRBI(s[373]);
initHLPRBJ(s[374]);
initHLPRBK(s[375]);
initHLPRBL(s[376]);
initHLPRBM(s[377]);
initHLLT(s[378]);
initHLLTA(s[379]);
initHLLTB(s[380]);
initHLLTC(s[381]);
initHLLTD(s[382]);
initHLLTE(s[383]);
initHLLTW(s[384]);
initHLENDW(s[385]);
initHLLTWA(s[386]);
initHLIV65(s[387]);
initADLA(s[388]);
initADLAD(s[389]);
initADLB(s[390]);
initADLBD(s[391]);
initADLC(s[392]);
initADLCD(s[393]);
initADLD(s[394]);
initADLDD(s[395]);
initADLE(s[396]);
initADLED(s[397]);
initADLF(s[398]);
initADLFD(s[399]);
initHL2GP(s[400]);
initHL2HOP(s[401]);
initXDTS(s[402]);
initNXDTS(s[403]);
initHOSP(s[404]);
initHOSPD(s[405]);
initHOSPCH(s[406]);
initHOSPNHS(s[407]);
initHLCVR(s[408]);
initHLCVRH(s[409]);
initHLCVRL(s[410]);
initHLSV(s[411]);
initHLSVA(s[412]);
initHLSVAN(s[413]);
initHLSVAF(s[414]);
initHLSVB(s[415]);
initHLSVBN(s[416]);
initHLSVBF(s[417]);
initHLSVC(s[418]);
initHLSVCN(s[419]);
initHLSVCF(s[420]);
initHLSVD(s[421]);
initHLSVDN(s[422]);
initHLSVDF(s[423]);
initHLSVE(s[424]);
initHLSVEN(s[425]);
initHLSVEF(s[426]);
initHLSVF(s[427]);
initHLSVFN(s[428]);
initHLSVFF(s[429]);
initHLSVG(s[430]);
initHLSVGN(s[431]);
initHLSVGF(s[432]);
initHLSVH(s[433]);
initHLSVHN(s[434]);
initHLSVHF(s[435]);
initHLSVI(s[436]);
initHLSVIN(s[437]);
initHLSVIF(s[438]);
initHLSVJ(s[439]);
initHLSVJN(s[440]);
initHLSVJF(s[441]);
initHLSVK(s[442]);
initHLSVKN(s[443]);
initHLSVKF(s[444]);
initHLSVL(s[445]);
initHLSVLN(s[446]);
initHLSVLF(s[447]);
initHLSVM(s[448]);
initHLSVMN(s[449]);
initHLSVMF(s[450]);
initHLCK(s[451]);
initHLCKA(s[452]);
initHLCKAN(s[453]);
initHLCKB(s[454]);
initHLCKBN(s[455]);
initHLCKC(s[456]);
initHLCKCN(s[457]);
initHLCKD(s[458]);
initHLCKDN(s[459]);
initHLCKE(s[460]);
initHLCKEN(s[461]);
initHLCKF(s[462]);
initHLCKFN(s[463]);
initHLCKG(s[464]);
initHLCKGN(s[465]);
initHLCKH(s[466]);
initHLCKHN(s[467]);
initHLCKI(s[468]);
initHLCKIN(s[469]);
initSMOKER(s[470]);
initNCIGS(s[471]);
initAIDHH(s[472]);
initAIDHUA(s[473]);
initAIDHUB(s[474]);
initAIDHUC(s[475]);
initAIDXHH(s[476]);
initNAIDXHH_BH(s[477]);
initAIDHU1(s[478]);
initAIDHU2(s[479]);
initAIDHRS_BH(s[480]);
initIVMA(s[481]);
initIVMB(s[482]);
initIVMC(s[483]);
initIVMD(s[484]);
initIVME(s[485]);
initJBHAS(s[486]);
initJBOFF(s[487]);
initJBOFFY_BH(s[488]);
initJBTERM(s[489]);
initJBSIC(s[490]);
initJBSEMP(s[491]);
initJBMNGR(s[492]);
initJBSIZE(s[493]);
initJBHRS(s[494]);
initJBOT(s[495]);
initJBOTPD(s[496]);
initJBHRLK(s[497]);
initJBPL_BH(s[498]);
initJBTTWT(s[499]);
initJBTTWM(s[500]);
initJBSAT2(s[501]);
initJBSAT4(s[502]);
initJBSAT6(s[503]);
initJBSAT7(s[504]);
initJBSAT_BH(s[505]);
initPAYGL(s[506]);
initPAYGW(s[507]);
initPAYNL(s[508]);
initPAYNW(s[509]);
initPAYSLP(s[510]);
initPAYUSL(s[511]);
initPAYU(s[512]);
initPAYUW(s[513]);
initPAYUG(s[514]);
initPAYDF1(s[515]);
initPAYDF2(s[516]);
initPAYDF3(s[517]);
initPAYDF4(s[518]);
initPAYDF5(s[519]);
initPAYDF6(s[520]);
initPAYDF7(s[521]);
initPAYDF8(s[522]);
initPAYDF9(s[523]);
initJBPERFP(s[524]);
initJBBGD(s[525]);
initJBBGM(s[526]);
initJBBGY(s[527]);
initJBBGLY(s[528]);
initJBSECT_BH(s[529]);
initJBONUS(s[530]);
initJBONAM(s[531]);
initJBONG(s[532]);
initJBRISE(s[533]);
initTUJBPL(s[534]);
initTUIN1(s[535]);
initJBOPPS(s[536]);
initJBTIME(s[537]);
initPAYS(s[538]);
initPAYSW(s[539]);
initPAYSG(s[540]);
initJBPEN(s[541]);
initJBPENM(s[542]);
initPAYLY(s[543]);
initPAYLYW(s[544]);
initPAYLYG(s[545]);
initJSBOSS(s[546]);
initJSSIZE(s[547]);
initJSHRS(s[548]);
initJSHRLK(s[549]);
initJSTIME(s[550]);
initJSTYPEB(s[551]);
initJSACCS(s[552]);
initJSPART(s[553]);
initJSPRBM(s[554]);
initJSPRBY4(s[555]);
initJSPREM(s[556]);
initJSPREY4(s[557]);
initJSPRF(s[558]);
initJSPRLS(s[559]);
initJSPRTX(s[560]);
initJSPRNI(s[561]);
initJSPAYU(s[562]);
initJSPAYW_BH(s[563]);
initJSPYTX(s[564]);
initJSPYNI(s[565]);
initJSPL_BH(s[566]);
initJSTTWTB(s[567]);
initJSTTWM(s[568]);
initJSSAT1(s[569]);
initJSSAT2(s[570]);
initJSSAT4(s[571]);
initJSSAT5(s[572]);
initJSSAT(s[573]);
initJSBGY4(s[574]);
initJBLKCHA(s[575]);
initJBXPCHA(s[576]);
initJBLKCHB(s[577]);
initJBXPCHB(s[578]);
initJBLKCHC(s[579]);
initJBXPCHC(s[580]);
initJBLKCHD(s[581]);
initJBXPCHD(s[582]);
initJBLKCHE(s[583]);
initJBXPCHE(s[584]);
initJBMRS(s[585]);
initRACH12(s[586]);
initJBCHC1(s[587]);
initJBCHC2(s[588]);
initJBCHC3(s[589]);
initXPCHCF(s[590]);
initXPCHC(s[591]);
initHUXPCH(s[592]);
initHUNURS(s[593]);
initJULK1(s[594]);
initJULK4(s[595]);
initJULKA(s[596]);
initJULKB(s[597]);
initJULKC(s[598]);
initJULKD(s[599]);
initJULKE(s[600]);
initJULKJB(s[601]);
initJUBGN(s[602]);
initJUSPEC(s[603]);
initJUHRSX(s[604]);
initJUPAYX(s[605]);
initJUPAYL(s[606]);
initJUHRSL(s[607]);
initEPROSH(s[608]);
initEAAGE(s[609]);
initJBUB(s[610]);
initJBUBY(s[611]);
initJ2HAS(s[612]);
initJ2SEMP(s[613]);
initJ2HRS(s[614]);
initJ2PAY_DV(s[615]);
initIVEA(s[616]);
initIVEB(s[617]);
initIVEC(s[618]);
initIVED(s[619]);
initIVEE(s[620]);
initNEMST(s[621]);
initCJSBGD(s[622]);
initCJSBGM(s[623]);
initCJSBGY4(s[624]);
initCJSBLY(s[625]);
initNJBS(s[626]);
initJBHAD(s[627]);
initJLENDY(s[628]);
initJLSIC(s[629]);
initJLSEMP(s[630]);
initJLBOSS(s[631]);
initJLMNGR(s[632]);
initJLSIZE(s[633]);
initIVJA(s[634]);
initIVJB(s[635]);
initIVJC(s[636]);
initIVJD(s[637]);
initIVJE(s[638]);
initOPPOLA(s[639]);
initOPPOLB(s[640]);
initOPPOLC(s[641]);
initOPPOLD(s[642]);
initVOTE1(s[643]);
initVOTE2(s[644]);
initVOTE3_BH(s[645]);
initVOTE4_BH(s[646]);
initVOTE5(s[647]);
initVOTE7(s[648]);
initVOTE8_BH(s[649]);
initLACTA(s[650]);
initLACTB(s[651]);
initLACTC(s[652]);
initLACTD(s[653]);
initLACTE(s[654]);
initLACTF(s[655]);
initLACTH(s[656]);
initLACTI(s[657]);
initLACTJ(s[658]);
initLACTK(s[659]);
initLACTL(s[660]);
initSCTRUST(s[661]);
initLFIMPA(s[662]);
initLFIMPB(s[663]);
initLFIMPC(s[664]);
initLFIMPD(s[665]);
initLFIMPE(s[666]);
initLFIMPF(s[667]);
initLFIMPG(s[668]);
initLFIMPH(s[669]);
initLOCSERA(s[670]);
initLOCSERB(s[671]);
initLOCSERC(s[672]);
initLOCSERD(s[673]);
initLOCSERE(s[674]);
initLOCCHD(s[675]);
initOPNGBHA(s[676]);
initOPNGBHB(s[677]);
initOPNGBHC(s[678]);
initOPNGBHD(s[679]);
initOPNGBHE(s[680]);
initOPNGBHF(s[681]);
initOPNGBHG(s[682]);
initOPNGBHH(s[683]);
initFRNA(s[684]);
initFRNB(s[685]);
initFRNC(s[686]);
initCARUSE(s[687]);
initYPPAR(s[688]);
initPYHLTH(s[689]);
initPYHWRK(s[690]);
initPYNYP(s[691]);
initPYPNO1(s[692]);
initPYAGE1(s[693]);
initPYPNO2(s[694]);
initPYAGE2(s[695]);
initPYPNO3(s[696]);
initPYAGE3(s[697]);
initPYWHR1(s[698]);
initPYMAN1(s[699]);
initPYARG1(s[700]);
initPYTLK1(s[701]);
initPYSMK1(s[702]);
initPYSAD1(s[703]);
initPYWOR1(s[704]);
initPYWHR2(s[705]);
initPYMAN2(s[706]);
initPYARG2(s[707]);
initPYTLK2(s[708]);
initPYSMK2(s[709]);
initPYSAD2(s[710]);
initPYWOR2(s[711]);
initPYWHR3(s[712]);
initPYMAN3(s[713]);
initPYARG3(s[714]);
initPYTLK3(s[715]);
initPYSMK3(s[716]);
initPYSAD3(s[717]);
initPYWOR3(s[718]);
initF101(s[719]);
initF102(s[720]);
initF103(s[721]);
initF104(s[722]);
initF105(s[723]);
initF106(s[724]);
initF116(s[725]);
initF118(s[726]);
initF119(s[727]);
initF121(s[728]);
initF122(s[729]);
initF124(s[730]);
initF125(s[731]);
initF126(s[732]);
initF127(s[733]);
initF128(s[734]);
initF132(s[735]);
initF142(s[736]);
initF135(s[737]);
initF136(s[738]);
initF137(s[739]);
initF138(s[740]);
initF139(s[741]);
initF140(s[742]);
initF141(s[743]);
initF151(s[744]);
initF152(s[745]);
initF153(s[746]);
initF154(s[747]);
initF155(s[748]);
initF156(s[749]);
initF157(s[750]);
initF158(s[751]);
initF159(s[752]);
initNF1(s[753]);
initFINNOW(s[754]);
initFISITC(s[755]);
initFISITY(s[756]);
initFISITX(s[757]);
initFIYRDI(s[758]);
initFIYRDIU(s[759]);
initSAVE(s[760]);
initSAVED(s[761]);
initSAVEY1(s[762]);
initSAVEY2(s[763]);
initPPPEN(s[764]);
initPENB4(s[765]);
initPENB4Y4(s[766]);
initPENB4V(s[767]);
initPENB4W(s[768]);
initPENYR4(s[769]);
initPENADD(s[770]);
initPENADV(s[771]);
initPENADW(s[772]);
initWINDF(s[773]);
initWINDFA(s[774]);
initWINDFAY(s[775]);
initWINDFB(s[776]);
initWINDFBY(s[777]);
initWINDFC(s[778]);
initWINDFCY(s[779]);
initWINDFD(s[780]);
initWINDFDY(s[781]);
initWINDFF(s[782]);
initWINDFFY(s[783]);
initWINDFG(s[784]);
initWINDFGY(s[785]);
initWINDFH(s[786]);
initWINDFHY(s[787]);
initXPMEAL(s[788]);
initXPLEIS(s[789]);
initFTEXHH(s[790]);
initFTEXA(s[791]);
initFTEXA1(s[792]);
initFTEXA2(s[793]);
initFTEXA3(s[794]);
initFTEXA4(s[795]);
initFTEXA5(s[796]);
initFTEXA6(s[797]);
initFTEXAV(s[798]);
initFTEXAW(s[799]);
initFTEXB(s[800]);
initFTEXB1(s[801]);
initFTEXB2(s[802]);
initFTEXB3(s[803]);
initFTEXB4(s[804]);
initFTEXB5(s[805]);
initFTEXB6(s[806]);
initFTEXBV(s[807]);
initFTEXBW(s[808]);
initFTEXC(s[809]);
initFTEXC1(s[810]);
initFTEXC2(s[811]);
initFTEXC3(s[812]);
initFTEXC4(s[813]);
initFTEXC5(s[814]);
initFTEXC6(s[815]);
initFTEXCV(s[816]);
initFTEXCW(s[817]);
initSPINHH(s[818]);
initHUBUYS_BH(s[819]);
initHUFRYS_BH(s[820]);
initHUMOPS_BH(s[821]);
initHUIRON_BH(s[822]);
initHHCH12(s[823]);
initHUSITS(s[824]);
initHOWLNG(s[825]);
initNEIGH(s[826]);
initNEIGH1(s[827]);
initNEIGH2(s[828]);
initNEIGH3(s[829]);
initNEIGH4(s[830]);
initNEIGH5(s[831]);
initNEIGH6(s[832]);
initIVFA(s[833]);
initIVFB(s[834]);
initIVFC(s[835]);
initIVFD(s[836]);
initIVFE(s[837]);
initIENDDATHH(s[838]);
initIENDDATHM(s[839]);
initIVSC(s[840]);
initIVPRSNT(s[841]);
initIV2(s[842]);
initIV4(s[843]);
initIV5(s[844]);
initIV6A(s[845]);
initIV6B(s[846]);
initIV6C(s[847]);
initIV6D(s[848]);
initIV6E(s[849]);
initIV6F(s[850]);
initIV7(s[851]);
initSCGHQA(s[852]);
initSCGHQB(s[853]);
initSCGHQC(s[854]);
initSCGHQD(s[855]);
initSCGHQE(s[856]);
initSCGHQF(s[857]);
initSCGHQG(s[858]);
initSCGHQH(s[859]);
initSCGHQI(s[860]);
initSCGHQJ(s[861]);
initSCGHQK(s[862]);
initSCGHQL(s[863]);
initOPFAMO(s[864]);
initOPFAMK(s[865]);
initOPFAMP(s[866]);
initOPFAMQ(s[867]);
initOPFAML(s[868]);
initOPFAMR(s[869]);
initLFSAT1(s[870]);
initLFSAT2(s[871]);
initLFSAT3(s[872]);
initLFSAT4(s[873]);
initLFSAT5(s[874]);
initLFSAT6(s[875]);
initLFSAT7(s[876]);
initLFSAT8(s[877]);
initLFSATO(s[878]);
initLFSATL(s[879]);
initNETSX1(s[880]);
initNETSX2(s[881]);
initNETSX3(s[882]);
initNET1WR(s[883]);
initNET2WR(s[884]);
initNET3WR(s[885]);
initNET1RL(s[886]);
initNET2RL(s[887]);
initNET3RL(s[888]);
initNET1AG(s[889]);
initNET2AG(s[890]);
initNET3AG(s[891]);
initNET1KN(s[892]);
initNET2KN(s[893]);
initNET3KN(s[894]);
initNET1PH(s[895]);
initNET2PH(s[896]);
initNET3PH(s[897]);
initNET1LV(s[898]);
initNET2LV(s[899]);
initNET3LV(s[900]);
initNET1JB(s[901]);
initNET2JB(s[902]);
initNET3JB(s[903]);
initPRRS2I(s[904]);
initPRIPN(s[905]);
initPRWHY(s[906]);
initPPLEVR(s[907]);
initPRFEHQ(s[908]);
initPRSEHQ(s[909]);
initPRESBGM(s[910]);
initPRESBY4(s[911]);
initPRESLY(s[912]);
initPRF101(s[913]);
initPRF102(s[914]);
initPRF116(s[915]);
initPRF125(s[916]);
initPRF131(s[917]);
initPRF135(s[918]);
initPRF137(s[919]);
initPRF139(s[920]);
initPRF141(s[921]);
initPRFIRN(s[922]);
initPREARN_BH(s[923]);
initPRJBBY4(s[924]);
initPRJBLY(s[925]);
initPRFITB_BH(s[926]);
initIVPA(s[927]);
initIVPB(s[928]);
initIVPC(s[929]);
initIVPD(s[930]);
initIVPE(s[931]);
initTELWHY(s[932]);
initPRJBFT(s[933]);
initTLFIYRL(s[934]);
initTLFIYR(s[935]);
initPIDP(s[936]);
initIVIOW7(s[937]);
initHHMEM(s[938]);
initNEWHY(s[939]);
initJNMNTH(s[940]);
initJNYEAR(s[941]);
initIVFIO(s[942]);
initIODC(s[943]);
initMEMORIG_BH(s[944]);
initHGR2R(s[945]);
initHGSEX(s[946]);
initBIRTHY(s[947]);
initMASTAT(s[948]);
initPPNO(s[949]);
initHGEMP(s[950]);
initHGBIOF(s[951]);
initHGBIOM(s[952]);
initHGRA(s[953]);
initAGE_DV(s[954]);
initAGE12(s[955]);
initBUTYPE(s[956]);
initBUNO(s[957]);
initNCHILD_DV(s[958]);
initHOH(s[959]);
initRACH16_DV(s[960]);
initSAMPST_BH(s[961]);
initMOVEST(s[962]);
initQFX(s[963]);
initQFXC(s[964]);
initQFXD(s[965]);
initQFXE(s[966]);
initQFXF(s[967]);
initQFXG(s[968]);
initQFXH(s[969]);
initQFXK(s[970]);
initQFXL(s[971]);
initQFXM(s[972]);
initQFXN(s[973]);
initQFXO(s[974]);
initQFXP(s[975]);
initQFXQ(s[976]);
initQFXR(s[977]);
initQFEDX(s[978]);
initQFEDXA(s[979]);
initNQFEXA(s[980]);
initQFEDXB(s[981]);
initNQFEXB(s[982]);
initQFEDXC(s[983]);
initNQFEXC(s[984]);
initQFEDXG(s[985]);
initNQFEXG(s[986]);
initQFEDXH(s[987]);
initNQFEXH(s[988]);
initQFEDXI(s[989]);
initNQFEXI(s[990]);
initQFEDXJ(s[991]);
initNQFEXJ(s[992]);
initQFEDXL(s[993]);
initNQFEXL(s[994]);
initREGION(s[995]);
initHHSIZE(s[996]);
initHHTYPE(s[997]);
initTENURE_DV(s[998]);
initQFEDHI(s[999]);
initQFVOC(s[1000]);
initQFACHI(s[1001]);
initJBFT_DV(s[1002]);
initPAYG_DV(s[1003]);
initPAYN_DV(s[1004]);
initPAYGU_DV(s[1005]);
initPAYNU_DV(s[1006]);
initPAYGTY(s[1007]);
initPAYGLY(s[1008]);
initPAYNTY(s[1009]);
initPAYNLY(s[1010]);
initJSPROF(s[1011]);
initJSLOSS(s[1012]);
initJSPAYG(s[1013]);
initCJSTEN(s[1014]);
initCJSWK9(s[1015]);
initJLID(s[1016]);
initJLYID(s[1017]);
initJTYID(s[1018]);
initJBSEG_DV(s[1019]);
initJBGOLD(s[1020]);
initJBRGSC_DV(s[1021]);
initJBCSSM(s[1022]);
initJBCSSF(s[1023]);
initJBHGS(s[1024]);
initJBSEC_BH(s[1025]);
initNJBWKS(s[1026]);
initNJUWKS(s[1027]);
initNJIWKS(s[1028]);
initNJBNEW(s[1029]);
initNJBSP(s[1030]);
initNJUSP(s[1031]);
initNJISP(s[1032]);
initJBSTATL(s[1033]);
initJBSTATT(s[1034]);
initJLSEG_DV(s[1035]);
initJLGOLD(s[1036]);
initJLRGSC_DV(s[1037]);
initJLCSSM(s[1038]);
initJLCSSF(s[1039]);
initJLHGS(s[1040]);
initJLSEC(s[1041]);
initVOTE(s[1042]);
initFIMNP(s[1043]);
initFIMNB(s[1044]);
initFIMNI(s[1045]);
initFIMNT(s[1046]);
initFIMNLABGRS_DV(s[1047]);
initFIMNNL(s[1048]);
initFIMNGRS_DV(s[1049]);
initFIYRL(s[1050]);
initFIYRNL(s[1051]);
initFIYRP(s[1052]);
initFIYRB(s[1053]);
initFIYRT(s[1054]);
initFIYRI(s[1055]);
initFIYR(s[1056]);
initFIHHMN(s[1057]);
initSCGHQ1_DV(s[1058]);
initSCGHQ2_DV(s[1059]);
initSPJB(s[1060]);
initSPJBHR(s[1061]);
initSPJBOT(s[1062]);
initSPPAYG(s[1063]);
initSPJBYR(s[1064]);
initLRWGHT(s[1065]);
initLEWGHT(s[1066]);
initXRWGHT(s[1067]);
initXEWGHT(s[1068]);
initJ2PAY_IF(s[1069]);
initFIYRDII(s[1070]);
initPREARNI(s[1071]);
initPRFITBI(s[1072]);
initPAYGU_IF(s[1073]);
initPAYNU_IF(s[1074]);
initPAYGTI(s[1075]);
initPAYGLI(s[1076]);
initPAYNTI(s[1077]);
initPAYNLI(s[1078]);
initJSPROFI(s[1079]);
initJSPAYGI(s[1080]);
initFIMNPI(s[1081]);
initFIMNBI(s[1082]);
initFIMNII(s[1083]);
initFIMNTI(s[1084]);
initFIMNNLI(s[1085]);
initFIMNLI(s[1086]);
initFIMNTHI(s[1087]);
initFIYRLI(s[1088]);
initFIYRNLI(s[1089]);
initFIYRPI(s[1090]);
initFIYRBI(s[1091]);
initFIYRTI(s[1092]);
initFIYRII(s[1093]);
initFIYEARI(s[1094]);
initSPPAYGI(s[1095]);
initFIHHMNI(s[1096]);
initMRJEND(s[1097]);
initMRJSOC(s[1098]);
initMRJSIC(s[1099]);
initMRJSEMP(s[1100]);
initMRJBOSS(s[1101]);
initMRJMNGR(s[1102]);
initMRJSIZE(s[1103]);
initMRJSEG(s[1104]);
initMRJGOLD(s[1105]);
initMRJRGSC(s[1106]);
initMRJCSSM(s[1107]);
initMRJCSSF(s[1108]);
initMRJHGS(s[1109]);
initMRJSEC(s[1110]);
initPASEG(s[1111]);
initPAGOLD(s[1112]);
initPARGSC(s[1113]);
initPACSSM(s[1114]);
initPACSSF(s[1115]);
initPAHGS(s[1116]);
initPASEC(s[1117]);
initMASEG(s[1118]);
initMAGOLD(s[1119]);
initMARGSC(s[1120]);
initMACSSM(s[1121]);
initMACSSF(s[1122]);
initMAHGS(s[1123]);
initMASEC(s[1124]);
initJ1SEG(s[1125]);
initJ1GOLD(s[1126]);
initJ1RGSC(s[1127]);
initJ1CSSM(s[1128]);
initJ1CSSF(s[1129]);
initJ1HGS(s[1130]);
initJ1SEC(s[1131]);
initXRWGHTE(s[1132]);
initXEWGHTE(s[1133]);
initFIMNSEL(s[1134]);
initSPPID_BH(s[1135]);
initFNPID_BH(s[1136]);
initMNPID_BH(s[1137]);
initDISTMOV(s[1138]);
initGOR_DV(s[1139]);
initISCED(s[1140]);
initCASMIN(s[1141]);
initMRJISCO88_CC(s[1142]);
initJBISCO_CC(s[1143]);
initJLISCO_CC(s[1144]);
initJ1ISCO_CC(s[1145]);
initMAISCO_CC(s[1146]);
initPAISCO_CC(s[1147]);
initMRJISCO_CC(s[1148]);
initPLBORNC_CC(s[1149]);
initJ2PAY_BH(s[1150]);
initJLNSSEC_DV(s[1151]);
initMANSSEC_DV(s[1152]);
initPANSSEC_DV(s[1153]);
initMRJNSSEC_DV(s[1154]);
initJ1NSSEC_DV(s[1155]);
initJBNSSEC_DV(s[1156]);
initJBNSSEC8_DV(s[1157]);
initJLNSSEC8_DV(s[1158]);
initMANSSEC8_DV(s[1159]);
initPANSSEC8_DV(s[1160]);
initMRJNSSEC8_DV(s[1161]);
initJ1NSSEC8_DV(s[1162]);
initNETPH_1(s[1163]);
initNETSX_1(s[1164]);
initNETWR_1(s[1165]);
initNETRL_1(s[1166]);
initNETAG_1(s[1167]);
initNETKN_1(s[1168]);
initNETPH_2(s[1169]);
initNETSX_2(s[1170]);
initNETWR_2(s[1171]);
initNETRL_2(s[1172]);
initNETAG_2(s[1173]);
initNETKN_2(s[1174]);
initNETPH_3(s[1175]);
initNETSX_3(s[1176]);
initNETWR_3(s[1177]);
initNETRL_3(s[1178]);
initNETAG_3(s[1179]);
initNETKN_3(s[1180]);
initJULK4X1(s[1181]);
initJULK4X2(s[1182]);
initJULK4X4(s[1183]);
initJULK4X5(s[1184]);
initJULK4X6(s[1185]);
initHHORIG(s[1186]);
initMEMORIG(s[1187]);
initSAMPST(s[1188]);
initJULK4WK(s[1189]);
initPJULK4WK(s[1190]);
initMAJU(s[1191]);
initPAJU(s[1192]);
initJSTTWT(s[1193]);
initMLSTAT(s[1194]);
initJBSECT(s[1195]);
initJSPAYW(s[1196]);
initPLBORNC(s[1197]);
initVOTE3(s[1198]);
initVOTE4(s[1199]);
initVOTE8(s[1200]);
initHUBUYS(s[1201]);
initHUFRYS(s[1202]);
initHUIRON(s[1203]);
initHUMOPS(s[1204]);
initJBPL(s[1205]);
initJSPL(s[1206]);
initAIDHRS(s[1207]);
initMASOC90_CC(s[1208]);
initPASOC90_CC(s[1209]);
initJBSOC90_CC(s[1210]);
initJLSOC90_CC(s[1211]);
initJ1SOC90_CC(s[1212]);
initJ2SOC90_CC(s[1213]);
initJUSOC90_CC(s[1214]);
initJBSOC90LY_CC(s[1215]);
initSPSOC90_CC(s[1216]);
initJBISCO88_CC(s[1217]);
initJLISCO88_CC(s[1218]);
initJ1ISCO88_CC(s[1219]);
initMAISCO88_CC(s[1220]);
initPAISCO88_CC(s[1221]);
initUKCITZN_DV_BH(s[1222]);
initWKTIME(s[1223]);
initHIQUAL_DV(s[1224]);
}
}
