/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.data.us.data.indresp;
public class US_Wave16_indresp_Record extends US_indresp_Record {
protected byte ADLA;
protected byte ADLAD;
protected byte ADLB;
protected byte ADLBD;
protected byte ADLC;
protected byte ADLCD;
protected byte ADLD;
protected byte ADLDD;
protected byte ADLE;
protected byte ADLED;
protected byte ADLF;
protected byte ADLFD;
protected short AGE12;
protected byte AGEAD1;
protected byte AGEAD2;
protected byte AGEAD3;
protected byte AGEAD4;
protected byte AGEADV;
protected byte AGERET;
protected byte AGEXRT;
protected short AGE_DV;
protected byte AGLT20;
protected short AIDHRS_BH;
protected short AIDHU1;
protected short AIDHU2;
protected short AIDHUA;
protected short AIDHUB;
protected short AIDHUC;
protected double BASNSA;
protected double BASRATE;
protected double BASRATE_BH;
protected byte BASREST;
protected byte BASREST_BH;
protected byte BIRHH;
protected short BIRTHY;
protected short BUNO;
protected short BUTYPE;
protected byte BWTAGM1;
protected byte BWTAGM2;
protected byte BWTAGM3;
protected byte BWTEL1;
protected byte BWTEL2;
protected byte BWTEL3;
protected byte BWTG51;
protected byte BWTG52;
protected byte BWTG53;
protected short BWTGM1;
protected short BWTGM2;
protected byte BWTGM3;
protected byte BWTKN1;
protected byte BWTKN2;
protected byte BWTKN3;
protected byte BWTLB1;
protected byte BWTLB2;
protected byte BWTLB3;
protected byte BWTOZ1;
protected byte BWTOZ2;
protected byte BWTOZ3;
protected byte BWTPN1;
protected byte BWTPN2;
protected byte BWTPN3;
protected byte BWTWK1;
protected byte BWTWK2;
protected byte BWTWK3;
protected byte BWTXP1;
protected byte BWTXP2;
protected byte BWTXP3;
protected byte CAIDU1;
protected byte CAIDU2;
protected byte CAIDU3;
protected byte CAIDU4;
protected byte CAIDU5;
protected byte CAIDU6;
protected byte CAIDU7;
protected byte CAIDU8;
protected byte CAIDU96;
protected byte CAIDU97;
protected short CASMIN;
protected byte CBAGEF;
protected short CH1BY4;
protected byte CHAID1;
protected byte CHAID2;
protected byte CHAID3;
protected byte CHAID4;
protected byte CHAID5;
protected byte CHAID6;
protected byte CHAID7;
protected byte CHAID8;
protected byte CHAID96;
protected byte CHAID97;
protected byte CHFAR;
protected byte CHMAIL;
protected byte CHSEE;
protected byte CHTEL;
protected short CJSBGD;
protected short CJSBGM;
protected short CJSBGY4;
protected short CJSBLY;
protected byte CJSCJS;
protected byte CJSCK1;
protected byte CJSCK2;
protected byte CJSCK3;
protected byte CJSCK4;
protected byte CJSED;
protected byte CJSEM;
protected short CJSEY4;
protected byte CJSSTLY;
protected int CJSTEN;
protected double CJSWK9;
protected byte COH1BM;
protected short COH1BY;
protected byte COH1EM;
protected short COH1EY;
protected byte COH1MR;
protected double DISTMOV;
protected short DOBY;
protected short EAAGE;
protected byte EDASP;
protected byte EDASP_BH;
protected byte EDBGM1;
protected byte EDBGM2;
protected byte EDBGM3;
protected short EDBGY1;
protected short EDBGY2;
protected short EDBGY3;
protected byte EDBLYR1;
protected byte EDBLYR2;
protected byte EDBLYR3;
protected byte EDENM1;
protected byte EDENM2;
protected byte EDENM3;
protected byte EDENNE1;
protected byte EDENNE2;
protected byte EDENNE3;
protected short EDENY1;
protected short EDENY2;
protected short EDENY3;
protected byte EDFEEA1;
protected byte EDFEEA2;
protected byte EDFEEA3;
protected byte EDFEEB1;
protected byte EDFEEB2;
protected byte EDFEEB3;
protected byte EDFEEC1;
protected byte EDFEEC2;
protected byte EDFEEC3;
protected byte EDFEED1;
protected byte EDFEED2;
protected byte EDFEED3;
protected byte EDFEEE1;
protected byte EDFEEE2;
protected byte EDFEEE3;
protected byte EDFEEF1;
protected byte EDFEEF2;
protected byte EDFEEF3;
protected byte EDFEEG1;
protected byte EDFEEG2;
protected byte EDFEEG3;
protected short EDLYR;
protected byte EDMORE1;
protected byte EDMORE2;
protected byte EDTYPE1;
protected byte EDTYPE2;
protected byte EDTYPE3;
protected short EPROSH;
protected byte EXTNSA;
protected double EXTRATE;
protected double EXTRATE_BH;
protected byte EXTREST;
protected short F101;
protected short F102;
protected short F103;
protected short F104;
protected short F105;
protected byte F106;
protected byte F107;
protected byte F116;
protected short F118;
protected short F119;
protected short F121;
protected short F122;
protected short F125;
protected byte F126;
protected byte F127;
protected byte F128;
protected short F132;
protected short F135;
protected short F136;
protected short F137;
protected short F138;
protected short F139;
protected short F140;
protected short F141;
protected short F142;
protected byte F143;
protected short F151;
protected byte F152;
protected short F153;
protected short F154;
protected short F155;
protected short F156;
protected short F157;
protected byte F158;
protected byte F159;
protected byte FEDASP;
protected byte FEDLIK_BH;
protected byte FEDNT1;
protected byte FEDNT2;
protected byte FEDTYP;
protected short FENOW_BH;
protected short FETYPE;
protected double FIHHMN;
protected short FIHHMNI;
protected double FIMNB;
protected boolean FIMNBI;
protected double FIMNI;
protected boolean FIMNII;
protected boolean FIMNLI;
protected double FIMNNL;
protected boolean FIMNNLI;
protected double FIMNP;
protected boolean FIMNPI;
protected byte FIMNSEL;
protected double FIMNT;
protected boolean FIMNTHI;
protected boolean FIMNTI;
protected short FISITC;
protected short FISITX;
protected short FISITY;
protected boolean FIYEARI;
protected double FIYR;
protected double FIYRB;
protected boolean FIYRBI;
protected byte FIYRDB1;
protected byte FIYRDB2;
protected byte FIYRDB3;
protected byte FIYRDB4;
protected byte FIYRDB5;
protected byte FIYRDB6;
protected int FIYRDIA;
protected int FIYRDIC;
protected short FIYRDII;
protected double FIYRI;
protected boolean FIYRII;
protected double FIYRL;
protected boolean FIYRLI;
protected double FIYRNL;
protected boolean FIYRNLI;
protected double FIYRP;
protected boolean FIYRPI;
protected double FIYRT;
protected boolean FIYRTI;
protected int FNPID_BH;
protected byte FRNA;
protected byte FRNB;
protected byte FRNC;
protected short FTEXA;
protected short FTEXA1;
protected short FTEXA2;
protected short FTEXA3;
protected short FTEXA4;
protected short FTEXA5;
protected short FTEXA6;
protected short FTEXAV;
protected double FTEXAW;
protected short FTEXB;
protected short FTEXB1;
protected short FTEXB2;
protected short FTEXB3;
protected short FTEXB4;
protected short FTEXB5;
protected short FTEXB6;
protected short FTEXBV;
protected double FTEXBW;
protected short FTEXC;
protected short FTEXC1;
protected short FTEXC2;
protected short FTEXC3;
protected short FTEXC4;
protected short FTEXC5;
protected short FTEXC6;
protected short FTEXCV;
protected double FTEXCW;
protected short FTEXHH;
protected byte HGEMP;
protected short HGR2R;
protected short HGRA;
protected boolean HGSEX;
protected short HHCH12;
protected short HHMEM;
protected short HHSIZE;
protected short HHTYPE;
protected int HID;
protected short HIQUALB_DV;
protected short HL2GP;
protected byte HL2HOP;
protected byte HLAVPN;
protected short HLCK;
protected short HLCKA;
protected short HLCKAN;
protected short HLCKB;
protected short HLCKBN;
protected short HLCKC;
protected short HLCKCN;
protected short HLCKD;
protected short HLCKDN;
protected short HLCKE;
protected short HLCKEN;
protected short HLCKF;
protected short HLCKFN;
protected short HLCKG;
protected short HLCKGN;
protected short HLCKH;
protected short HLCKHN;
protected short HLCKI;
protected short HLCKIN;
protected short HLCVR;
protected short HLCVRH;
protected short HLCVRL;
protected byte HLDSBL1;
protected short HLENDW;
protected byte HLHT;
protected short HLHTC;
protected byte HLHTF;
protected byte HLHTI;
protected byte HLIV65;
protected byte HLLT;
protected short HLLTA;
protected short HLLTB;
protected short HLLTC;
protected short HLLTD;
protected short HLLTE;
protected byte HLLTW;
protected short HLLTWA;
protected byte HLPAIN;
protected short HLPRB;
protected short HLPRBA;
protected short HLPRBB;
protected short HLPRBC;
protected short HLPRBD;
protected short HLPRBE;
protected short HLPRBF;
protected short HLPRBG;
protected short HLPRBH;
protected short HLPRBI;
protected short HLPRBJ;
protected short HLPRBK;
protected short HLPRBL;
protected short HLPRBM;
protected byte HLPRBN;
protected byte HLPRBO;
protected byte HLPREG;
protected byte HLPRXA;
protected byte HLPRXB;
protected byte HLPRXC;
protected byte HLPRXD;
protected byte HLPRXE;
protected byte HLPRXF;
protected byte HLPRXG;
protected byte HLPRXH;
protected byte HLPRXI;
protected byte HLPRXJ;
protected byte HLPRXK;
protected byte HLPRXL;
protected byte HLPRXM;
protected byte HLPRXN;
protected byte HLPRXO;
protected short HLSTAT;
protected short HLSV;
protected short HLSVA;
protected short HLSVAF;
protected short HLSVAN;
protected short HLSVB;
protected short HLSVBF;
protected short HLSVBN;
protected short HLSVC;
protected short HLSVCF;
protected short HLSVCN;
protected short HLSVD;
protected short HLSVDF;
protected short HLSVDN;
protected short HLSVE;
protected short HLSVEF;
protected short HLSVEN;
protected short HLSVF;
protected short HLSVFF;
protected short HLSVFN;
protected short HLSVG;
protected short HLSVGF;
protected short HLSVGN;
protected short HLSVH;
protected byte HLSVHF;
protected byte HLSVHN;
protected short HLSVI;
protected short HLSVIF;
protected short HLSVIN;
protected short HLSVJ;
protected short HLSVJF;
protected short HLSVJN;
protected short HLSVK;
protected short HLSVKF;
protected short HLSVKN;
protected short HLSVL;
protected short HLSVLF;
protected short HLSVLN;
protected short HLSVM;
protected short HLSVMF;
protected short HLSVMN;
protected byte HLTRPN;
protected byte HLWTE;
protected short HLWTK;
protected byte HLWTL;
protected byte HLWTM;
protected byte HLWTP;
protected byte HLWTPN;
protected byte HLWTR;
protected byte HLWTS;
protected boolean HOH;
protected short HOSP;
protected short HOSPCH;
protected short HOSPD;
protected short HOSPNHS;
protected short HOWLNG;
protected short HUBUYS;
protected short HUBUYS_BH;
protected short HUFRYS;
protected short HUFRYS_BH;
protected short HUIRON;
protected short HUIRON_BH;
protected short HUMOPS;
protected short HUMOPS_BH;
protected short HUNURS;
protected short HUSITS;
protected short HUXPCH;
protected short IENDDATHM;
protected byte INFTED;
protected short IODC;
protected short ISCED;
protected short ISTRTDATHM;
protected short ISTRTDATY;
protected byte IV10A;
protected byte IV10B;
protected byte IV10C;
protected byte IV10D;
protected byte IV10E;
protected byte IV10F;
protected byte IV10G;
protected byte IV10H;
protected byte IV10I;
protected byte IV10J;
protected byte IV10K;
protected byte IV10L;
protected byte IV10NO;
protected short IV2;
protected short IV4;
protected short IV5;
protected byte IV5AA;
protected byte IV5AB;
protected byte IV5AC;
protected short IV6A;
protected short IV6B;
protected short IV6C;
protected short IV6D;
protected short IV6E;
protected short IV6F;
protected short IV7;
protected byte IV9;
protected byte IVDA;
protected byte IVDB;
protected byte IVDC;
protected byte IVDD;
protected byte IVDE;
protected short IVEA;
protected short IVEB;
protected short IVEC;
protected short IVED;
protected short IVEE;
protected short IVFA;
protected short IVFB;
protected short IVFC;
protected short IVFD;
protected short IVFE;
protected byte IVIOLW;
protected short IVJA;
protected short IVJB;
protected short IVJC;
protected short IVJD;
protected short IVJE;
protected short IVLYR;
protected short IVMA;
protected short IVMB;
protected short IVMC;
protected short IVMD;
protected short IVME;
protected short IVPA;
protected short IVPB;
protected short IVPC;
protected short IVPD;
protected short IVPE;
protected short IVSC;
protected byte IVSTAT2;
protected byte IVVA;
protected byte IVVB;
protected byte IVVC;
protected byte IVVD;
protected byte IVVE;
protected byte J1BOSS;
protected double J1CSSF;
protected double J1CSSM;
protected byte J1GOLD;
protected double J1HGS;
protected short J1ISCO88_CC;
protected String J1ISCO_CC;
protected byte J1MNGR;
protected byte J1NONE_BH;
protected byte J1NSSEC8_DV;
protected byte J1NSSEC_DV;
protected byte J1RGSC;
protected short J1SEC;
protected byte J1SEG;
protected byte J1SEMP;
protected short J1SOC00_CC;
protected byte J1SOC90_CC;
protected short J2PAY_BH;
protected short J2SOC00_CC;
protected short J2SOC90_CC;
protected byte JBBGD1;
protected short JBBGLY;
protected byte JBBGLY1;
protected byte JBBGM1;
protected short JBBGY41;
protected short JBCHC1;
protected short JBCHC2;
protected short JBCHC3;
protected byte JBCHGD;
protected byte JBCHGLY;
protected byte JBCHGM;
protected short JBCHGY4;
protected byte JBCK1;
protected byte JBCK10;
protected byte JBCK11;
protected byte JBCK2;
protected byte JBCK3;
protected byte JBCK4;
protected byte JBCK5;
protected byte JBCK6;
protected byte JBCK7;
protected byte JBCK8;
protected byte JBCK9;
protected byte JBCSPL;
protected double JBCSSF;
protected double JBCSSM;
protected byte JBEMPP;
protected byte JBEMPR;
protected short JBGOLD;
protected double JBHGS;
protected short JBHRLK;
protected String JBISCO_CC;
protected byte JBLKCHA;
protected byte JBLKCHB;
protected byte JBLKCHC;
protected byte JBLKCHD;
protected byte JBLKCHE;
protected byte JBMNGP;
protected short JBNSSEC_DV;
protected short JBOFFY_BH;
protected int JBONAM;
protected byte JBONG;
protected short JBONUS;
protected short JBOPPS;
protected short JBPEN;
protected short JBPENM;
protected byte JBPERFP;
protected short JBPL_BH;
protected byte JBPROM;
protected short JBRGSC_DV;
protected short JBRISE;
protected short JBSAT2;
protected short JBSAT4;
protected short JBSAT6;
protected short JBSAT7;
protected short JBSAT_BH;
protected byte JBSECTP;
protected short JBSECT_BH;
protected short JBSEC_BH;
protected short JBSEG_DV;
protected byte JBSEMPP;
protected byte JBSEMPR;
protected short JBSIC92;
protected byte JBSICP;
protected byte JBSICR;
protected byte JBSIZEP;
protected short JBSOC00_CC;
protected short JBSOC90LY_CC;
protected short JBSOC90_CC;
protected byte JBSOCP;
protected byte JBSOCR;
protected short JBSTATL;
protected short JBSTATT;
protected byte JBTERM1;
protected byte JBTERM2;
protected byte JBTERM2_BH;
protected short JBTIME;
protected short JBTTWM;
protected short JBUB;
protected short JBUBY;
protected byte JBWKHRA;
protected byte JBWKHRB;
protected byte JBWKHRC;
protected byte JBWKHRD;
protected byte JBWKHRE;
protected byte JBWKHRF;
protected byte JBWKHRG;
protected byte JBWKHRH;
protected byte JBXPCHA;
protected byte JBXPCHB;
protected byte JBXPCHC;
protected byte JBXPCHD;
protected byte JBXPCHE;
protected byte JHSTPY;
protected double JLCSSF;
protected double JLCSSM;
protected short JLGOLD;
protected double JLHGS;
protected short JLID;
protected String JLISCO_CC;
protected short JLNSSEC_DV;
protected short JLRGSC_DV;
protected short JLSEC;
protected short JLSEG_DV;
protected short JLSIC92;
protected short JLSOC00_CC;
protected short JLSOC90_CC;
protected short JLYID;
protected short JNMNTH;
protected short JNYEAR;
protected byte JSBGD1;
protected byte JSBGLY;
protected byte JSBGLY1;
protected byte JSBGM1;
protected short JSBGY4;
protected short JSBGY41;
protected byte JSCK1;
protected short JSHRLK;
protected double JSLOSS;
protected byte JSPART;
protected double JSPAYG;
protected short JSPAYGI;
protected int JSPAYU;
protected byte JSPAYW;
protected double JSPAYW_BH;
protected short JSPL_BH;
protected byte JSPRLS;
protected byte JSPRNI;
protected double JSPROF;
protected short JSPROFI;
protected byte JSPRTX;
protected byte JSPYNI;
protected byte JSPYTX;
protected byte JSSAME;
protected short JSSAT;
protected short JSSAT1;
protected short JSSAT2;
protected short JSSAT4;
protected short JSSAT5;
protected short JSTIME;
protected short JSTTWM;
protected byte JSTYPEB;
protected short JTYID;
protected short JUBGN;
protected short JUHRSL;
protected short JUHRSX;
protected short JULK1;
protected short JULK4;
protected short JULK4X1;
protected short JULK4X2;
protected short JULK4X4;
protected short JULK4X5;
protected short JULK4X6;
protected short JULKA;
protected short JULKB;
protected short JULKC;
protected short JULKD;
protected short JULKE;
protected short JUPAYL;
protected short JUPAYX;
protected short JUSOC00_CC;
protected short JUSOC90_CC;
protected short JUSPEC;
protected short LACTA;
protected short LACTB;
protected short LACTC;
protected short LACTD;
protected short LACTE;
protected short LACTF;
protected short LACTH;
protected short LACTI;
protected short LACTJ;
protected short LACTK;
protected short LACTL;
protected byte LCOH;
protected double LEWGHT;
protected double LEWTSW1;
protected double LEWTSW2;
protected double LEWTUK1;
protected double LEWTUK2;
protected short LFSAT1;
protected short LFSAT2;
protected short LFSAT3;
protected short LFSAT4;
protected short LFSAT5;
protected short LFSAT6;
protected short LFSAT7;
protected short LFSAT8;
protected short LFSATL;
protected short LFSATO;
protected short LKMOVY;
protected short LKNBRD;
protected byte LMAR1M;
protected short LMAR1Y;
protected byte LNPRNT;
protected byte LPRNT;
protected double LRWGHT;
protected double LRWTSW1;
protected double LRWTSW2;
protected double LRWTUK1;
protected double LRWTUK2;
protected byte LVCH;
protected byte LVGCH;
protected byte LVGGCH;
protected byte LVGGPA;
protected byte LVGPAR;
protected byte LVLONG;
protected byte LVMA;
protected byte LVPA;
protected byte LVSIB;
protected byte MAAGE;
protected byte MABOSS;
protected byte MABWLY;
protected byte MABWNLY;
protected byte MACH18;
protected double MACSSF;
protected double MACSSM;
protected byte MAFAR;
protected byte MAGOLD;
protected double MAHGS;
protected short MAISCO88_CC;
protected String MAISCO_CC;
protected byte MAJU;
protected byte MAJU_BH;
protected byte MALONE;
protected byte MAMAIL;
protected byte MAMNGR;
protected byte MANSSEC8_DV;
protected byte MANSSEC_DV;
protected byte MARGSC;
protected short MASEC;
protected byte MASEE;
protected byte MASEG;
protected byte MASEMP;
protected short MASOC00_CC;
protected byte MASOC90_CC;
protected short MASTAT;
protected byte MATEL;
protected short MEMORIG_BH;
protected short MLCHM;
protected short MLCHY4;
protected short MLSTAT_BH;
protected int MNPID_BH;
protected byte MOBUSE;
protected short MOVEST;
protected short MOVJB;
protected short MOVJBA;
protected short MOVJBB;
protected short MOVJBC;
protected short MOVJBD;
protected short MOVJBE;
protected short MOVJBF;
protected short MOVJBG;
protected short MOVJBH;
protected short MOVJBI;
protected short MOVY1;
protected short MOVY2;
protected short MRJBOSS;
protected double MRJCSSF;
protected double MRJCSSM;
protected short MRJEND;
protected short MRJGOLD;
protected double MRJHGS;
protected short MRJISCO88_CC;
protected String MRJISCO_CC;
protected short MRJMNGR;
protected short MRJNSSEC8_DV;
protected short MRJNSSEC_DV;
protected short MRJRGSC;
protected short MRJSEC;
protected short MRJSEG;
protected short MRJSEMP;
protected short MRJSIC;
protected short MRJSIC9;
protected short MRJSIZE;
protected short MRJSOC;
protected short MSTATSAM;
protected short NAIDXHH_BH;
protected byte NATIDA;
protected byte NATIDB;
protected byte NATIDE;
protected byte NATIDF;
protected byte NATIDG;
protected byte NATIDH;
protected short NCHILD_DV;
protected short NCIGS;
protected short NET1AG;
protected byte NET1ET;
protected short NET1JB;
protected byte NET1KN;
protected byte NET1LV;
protected short NET1PH;
protected byte NET1RL;
protected short NET1WR;
protected short NET2AG;
protected byte NET2ET;
protected short NET2JB;
protected byte NET2KN;
protected byte NET2LV;
protected short NET2PH;
protected byte NET2RL;
protected short NET2WR;
protected short NET3AG;
protected byte NET3ET;
protected short NET3JB;
protected byte NET3KN;
protected byte NET3LV;
protected short NET3PH;
protected byte NET3RL;
protected short NET3WR;
protected short NETAG_1;
protected short NETAG_2;
protected short NETAG_3;
protected byte NETKN_1;
protected byte NETKN_2;
protected byte NETKN_3;
protected short NETPH_1;
protected short NETPH_2;
protected short NETPH_3;
protected byte NETRL_1;
protected byte NETRL_2;
protected byte NETRL_3;
protected short NETSX1;
protected short NETSX2;
protected short NETSX3;
protected short NETSX_1;
protected short NETSX_2;
protected short NETSX_3;
protected short NETWR_1;
protected short NETWR_2;
protected short NETWR_3;
protected short NEWHY;
protected short NF1;
protected byte NFH10_BH;
protected byte NFH11_BH;
protected byte NFH12_BH;
protected byte NFH1_BH;
protected byte NFH2_BH;
protected byte NFH3_BH;
protected byte NFH4_BH;
protected byte NFH5_BH;
protected byte NFH6_BH;
protected byte NFH7_BH;
protected byte NFH8_BH;
protected byte NFH9_BH;
protected byte NFHS1;
protected byte NFHS10;
protected byte NFHS11;
protected byte NFHS12;
protected byte NFHS2;
protected byte NFHS3;
protected byte NFHS4;
protected byte NFHS5;
protected byte NFHS6;
protected byte NFHS7;
protected byte NFHS8;
protected byte NFHS9;
protected byte NIPENS;
protected byte NISERPS;
protected byte NISJSA;
protected short NJBNEW;
protected short NJBSP;
protected double NJBWKS;
protected short NJISP;
protected double NJIWKS;
protected short NJUSP;
protected double NJUWKS;
protected byte NLVCH;
protected byte NLVGCH;
protected byte NLVGGCH;
protected byte NLVGGPA;
protected byte NLVGPA;
protected byte NLVSIB;
protected byte NMAR_BH;
protected byte NOLVREL;
protected byte NQFEDA;
protected byte NQFEDB;
protected byte NQFEDC;
protected short NQFEDD;
protected short NQFEDE;
protected byte NQFEDF;
protected byte NQFEDG;
protected byte NQFEDH;
protected byte NQFEDI;
protected byte NQFEDJ;
protected byte NQFEDK;
protected short NQFEDL;
protected byte NQFEDM;
protected short NQFEDN;
protected byte NQFEDO;
protected byte NQFEDP;
protected byte NQFEDQ;
protected byte NQFEDR;
protected short NQFEDS;
protected byte NQFEDT;
protected byte NQFEDU;
protected short NQFEXA;
protected short NQFEXB;
protected byte NQFEXG;
protected byte NQFEXH;
protected byte NQFEXI;
protected byte NQFEXL;
protected byte NQFEXM;
protected byte NQFEXN;
protected byte NQFEXO;
protected byte NTRAIN;
protected short NXDTS;
protected byte OPDEV1;
protected byte OPDEV2;
protected byte OPDVNI1;
protected byte OPDVNI2;
protected byte OPEUR1;
protected byte OPEUR2;
protected byte OPEUR3;
protected short OPFAMK;
protected short OPFAML;
protected byte OPFAMO;
protected byte OPFAMP;
protected byte OPFAMQ;
protected byte OPFAMR;
protected byte OPNISEC;
protected short OPPOLA;
protected short OPPOLB;
protected short OPPOLC;
protected short OPPOLD;
protected byte OPRLG2;
protected byte OPRLG5;
protected byte OPRLG7;
protected byte OVTNSA;
protected byte OVTPAY;
protected double OVTRATE;
protected double OVTRATE_BH;
protected byte OVTREST;
protected byte PAAGE;
protected byte PAAID1;
protected byte PAAID2;
protected byte PAAID3;
protected byte PAAID4;
protected byte PAAID5;
protected byte PAAID6;
protected byte PAAID7;
protected byte PAAID8;
protected byte PAAID96;
protected byte PAAID97;
protected byte PABOSS;
protected double PACSSF;
protected double PACSSM;
protected byte PAFAR;
protected byte PAGOLD;
protected double PAHGS;
protected byte PAIDU1;
protected byte PAIDU2;
protected byte PAIDU3;
protected byte PAIDU4;
protected byte PAIDU5;
protected byte PAIDU6;
protected byte PAIDU7;
protected byte PAIDU8;
protected byte PAIDU96;
protected byte PAIDU97;
protected short PAISCO88_CC;
protected String PAISCO_CC;
protected byte PAJU;
protected byte PAJU_BH;
protected byte PALONE;
protected byte PAMAIL;
protected byte PAMNGR;
protected byte PANSSEC8_DV;
protected byte PANSSEC_DV;
protected byte PARGSC;
protected byte PARMAR;
protected short PASEC;
protected byte PASEE;
protected byte PASEG;
protected byte PASEMP;
protected short PASOC00_CC;
protected byte PASOC90_CC;
protected byte PATEL;
protected byte PAYCK1;
protected short PAYDF1;
protected short PAYDF2;
protected short PAYDF3;
protected short PAYDF4;
protected short PAYDF5;
protected short PAYDF6;
protected short PAYDF7;
protected short PAYDF8;
protected byte PAYDF9;
protected short PAYGLI;
protected double PAYGLY;
protected short PAYGTI;
protected double PAYGTY;
protected double PAYGW;
protected double PAYG_DV;
protected int PAYLY;
protected short PAYLYG;
protected double PAYLYW;
protected short PAYNLI;
protected double PAYNLY;
protected short PAYNTI;
protected double PAYNTY;
protected double PAYNW;
protected int PAYS;
protected short PAYSG;
protected short PAYSLP;
protected double PAYSW;
protected byte PAYTYP;
protected byte PAYTYP_BH;
protected double PAYUW;
protected byte PCK1;
protected byte PCK2;
protected byte PE0H;
protected byte PE0M;
protected short PENADD;
protected short PENADV;
protected double PENADW;
protected short PENB4;
protected short PENB4V;
protected double PENB4W;
protected short PENB4Y4;
protected byte PENCK1;
protected byte PENCK2;
protected byte PENMEX;
protected byte PENVRF;
protected short PENYR4;
protected byte PF0H;
protected byte PF0M;
protected int PID;
protected short PLBORNC_CC;
protected short PLNEW;
protected short PLNOWM;
protected short PLNOWY4;
protected byte PM0H;
protected byte PM0M;
protected short PPLEVR;
protected short PPPEN;
protected byte PPPEX;
protected byte PPPEXM;
protected short PREARNI;
protected short PREARN_BH;
protected short PRESBGM;
protected short PRESBY4;
protected short PRESLY;
protected short PRF101;
protected short PRF102;
protected byte PRF107;
protected short PRF116;
protected short PRF125;
protected short PRF131;
protected short PRF135;
protected byte PRF137;
protected short PRF139;
protected short PRF141;
protected byte PRF143;
protected short PRFEHQ;
protected byte PRFIRN;
protected short PRFITBI;
protected short PRFITB_BH;
protected short PRJBBY4;
protected byte PRJBFT;
protected short PRJBLY;
protected short PRRS2I;
protected short PRSEHQ;
protected short PRWHY;
protected byte PV0H;
protected byte PV0M;
protected byte PYTC;
protected short PYWFTC;
protected double PYWFTCW;
protected short QFA;
protected short QFACHI;
protected short QFB;
protected short QFC;
protected short QFD;
protected short QFE;
protected short QFED;
protected short QFEDA;
protected short QFEDB;
protected short QFEDC;
protected short QFEDD;
protected short QFEDE;
protected short QFEDF;
protected short QFEDG;
protected short QFEDH;
protected short QFEDHI;
protected short QFEDI;
protected short QFEDJ;
protected short QFEDK;
protected short QFEDL;
protected short QFEDM;
protected short QFEDN;
protected short QFEDO;
protected short QFEDP;
protected short QFEDQ;
protected short QFEDR;
protected short QFEDS;
protected byte QFEDT;
protected byte QFEDU;
protected short QFEDX;
protected short QFEDXA;
protected short QFEDXB;
protected short QFEDXG;
protected short QFEDXH;
protected short QFEDXI;
protected byte QFEDXL;
protected byte QFEDXM;
protected byte QFEDXN;
protected byte QFEDXO;
protected short QFF;
protected short QFG;
protected short QFH;
protected short QFHAS;
protected short QFI;
protected short QFJ;
protected short QFK;
protected short QFL;
protected short QFM;
protected short QFN;
protected byte QFREC;
protected short QFVOC;
protected short QFX;
protected short QFXC;
protected short QFXD;
protected short QFXE;
protected short QFXF;
protected short QFXG;
protected short QFXH;
protected short QFXK;
protected short QFXL;
protected short QFXM;
protected short QFXN;
protected byte QFXO;
protected byte QFXP;
protected byte QFXQ;
protected byte QFXR;
protected byte QLFA;
protected byte QLFB;
protected byte QLFC;
protected byte QLFD;
protected byte QLFE;
protected byte QLFF;
protected byte QLFG;
protected byte QLFH;
protected byte QLFI;
protected byte QLFJ;
protected byte QLFK;
protected byte QLFL;
protected byte QLFM;
protected byte QLFN;
protected byte QLFO;
protected byte QLFP;
protected byte QLFQ;
protected byte QLFR;
protected byte QLFS;
protected byte RACEL_BH;
protected short RACH12;
protected byte RCHBEN;
protected byte RDSBEN;
protected byte RDSBN16;
protected byte RDSBN18;
protected byte RDSBN19;
protected byte RDSBN21;
protected byte RDSBN22;
protected byte RDSBN25;
protected byte RDSBN26;
protected byte RDSBN27;
protected byte RDSBN28;
protected short REGION;
protected byte REMAIL_CODE;
protected byte RETAMT;
protected byte RETEX;
protected byte RETEXP;
protected byte RETFIX;
protected byte RETSUF;
protected byte REWORK;
protected byte RF2CK;
protected byte RF6CK;
protected byte RHBEN;
protected byte RIS;
protected byte RJSA;
protected byte RPENCR;
protected byte RSRPEN;
protected byte RTCOMP;
protected byte RTCON1_BH;
protected byte RTCON2_BH;
protected byte RTCON3_BH;
protected byte RTCON4_BH;
protected byte RTFND1;
protected byte RTFND10;
protected byte RTFND2;
protected byte RTFND3;
protected byte RTFND4;
protected byte RTFND5;
protected byte RTFND6;
protected byte RTFND7;
protected byte RTFND8;
protected byte RTFND9;
protected byte RTFND96;
protected byte RTFNDA;
protected byte RTFNDB;
protected byte RTFNDC;
protected byte RTFNDD;
protected byte RTFNDE;
protected byte RTFNDF;
protected byte RTFNDG;
protected byte RTFNDH;
protected byte RTFNDI;
protected byte RTFNDJ;
protected byte RTFNDK;
protected byte RTFNDL;
protected byte RTFNDM;
protected byte RTFNDN;
protected byte RTFNDO;
protected byte RTFNDP;
protected byte RTLATA;
protected byte RTLATB;
protected byte RTLATC;
protected byte RTLATD;
protected byte RTLATE;
protected byte RTLATF;
protected byte RTLATG;
protected byte RTLATH;
protected byte RTLATI;
protected byte RTLATJ;
protected byte RTMAGE;
protected byte RTPRO1_BH;
protected byte RTPRO2_BH;
protected byte RTPRO3_BH;
protected byte RTPRO4_BH;
protected byte RTPRO5;
protected byte RTPRO6;
protected byte RTRHM;
protected byte RTRLLT;
protected byte RTRLYA;
protected byte RTRLYB;
protected byte RTRLYC;
protected byte RTRLYD;
protected byte RTRLYE;
protected byte RTRLYF;
protected byte RTRLYG;
protected byte RTRLYH;
protected byte RTRLYI;
protected byte RTRLYJ;
protected byte RTRLYK;
protected byte RTRLYL;
protected byte RTRLYM;
protected byte RTSAT;
protected byte RTVOL;
protected short SAMPST;
protected short SAMPST_BH;
protected byte SATINV;
protected short SAVE;
protected int SAVED;
protected short SAVEY1;
protected short SAVEY2;
protected byte SAVLT;
protected byte SAVREG;
protected short SCNOW;
protected byte SCNOW2;
protected short SCTYPE;
protected short SMOKER;
protected short SPINHH;
protected short SPJB;
protected short SPJBHR;
protected short SPJBOT;
protected short SPJBYR;
protected double SPPAYG;
protected short SPPAYGI;
protected byte SPPEN;
protected int SPPID_BH;
protected short SPSOC90_CC;
protected byte STAKEH;
protected byte TELHTQ;
protected byte TELQAL;
protected byte TELQLY;
protected short TENURE_DV;
protected byte THHRPW;
protected byte THRPOP;
protected byte TLHQLY;
protected byte TRAIN;
protected byte TRBEN1;
protected byte TRBEN2;
protected byte TRFEEA1;
protected byte TRFEEA2;
protected byte TRFEEA3;
protected byte TRFEEB1;
protected byte TRFEEB2;
protected byte TRFEEB3;
protected byte TRFEEC1;
protected byte TRFEEC2;
protected byte TRFEEC3;
protected byte TRFEEE1;
protected byte TRFEEE2;
protected byte TRFEEE3;
protected byte TRFEEF1;
protected byte TRFEEF2;
protected byte TRFEEF3;
protected byte TRFEEG1;
protected byte TRFEEG2;
protected byte TRFEEG3;
protected byte TRMORE1;
protected byte TRMORE2;
protected byte TROPAY;
protected byte TRPEN;
protected byte TRPLCE1;
protected byte TRPLCE2;
protected byte TRPLCE3;
protected short TRQ1;
protected short TRQ2;
protected short TRQ3;
protected byte TRQLAC1;
protected byte TRQLAC2;
protected byte TRQLAC3;
protected byte TRQLXP1;
protected byte TRQLXP2;
protected byte TRQLXP3;
protected byte TRU1;
protected byte TRU2;
protected byte TRU3;
protected byte TRWHYA1;
protected byte TRWHYA2;
protected byte TRWHYA3;
protected byte TRWHYB1;
protected byte TRWHYB2;
protected byte TRWHYB3;
protected byte TRWHYC1;
protected byte TRWHYC2;
protected byte TRWHYC3;
protected byte TRWHYD1;
protected byte TRWHYD2;
protected byte TRWHYD3;
protected byte TRWHYE1;
protected byte TRWHYE2;
protected byte TRWHYE3;
protected short TUIN1;
protected short TUJBPL;
protected byte UKCITZN_DV_BH;
protected short VOTE;
protected short VOTE1;
protected short VOTE2;
protected short VOTE3;
protected short VOTE3_BH;
protected short VOTE4;
protected short VOTE4_BH;
protected short VOTE5;
protected short VOTE6;
protected byte VOTE7;
protected byte VOTE8;
protected byte VOTE8_BH;
protected byte WINDF;
protected byte WINDFA;
protected int WINDFAY;
protected byte WINDFB;
protected int WINDFBY;
protected byte WINDFC;
protected int WINDFCY;
protected byte WINDFD;
protected int WINDFDY;
protected byte WINDFF;
protected int WINDFFY;
protected byte WINDFG;
protected int WINDFGY;
protected byte WINDFH;
protected int WINDFHY;
protected short WKTIME;
protected byte WLSH1;
protected byte WLSH2;
protected byte WLSH3;
protected byte WLSH4;
protected byte WLSH96;
protected byte WLSHUA;
protected byte WLSHUB;
protected byte WLSHUC;
protected byte WLSHUD;
protected byte WLSHUE;
protected short XDTS;
protected double XEWGHT;
protected double XEWTUK1;
protected double XEWTUK2;
protected short XPCHC;
protected short XPCHCF;
protected byte XPLEIS;
protected byte XPMEAL;
protected byte XPMOVE;
protected double XRWGHT;
protected double XRWTUK1;
protected double XRWTUK2;
protected short YASOC00_CC;
protected byte YASOC90_CC;
protected byte YNOPEN1;
protected byte YNOPEN2;
protected byte YRTLAT;
protected byte YRTRLY;
protected final void initADLA(String s) {
if (!s.trim().isEmpty()) {
ADLA = Byte.parseByte(s);
} else {
ADLA = Byte.MIN_VALUE;
}
}

protected final void initADLAD(String s) {
if (!s.trim().isEmpty()) {
ADLAD = Byte.parseByte(s);
} else {
ADLAD = Byte.MIN_VALUE;
}
}

protected final void initADLB(String s) {
if (!s.trim().isEmpty()) {
ADLB = Byte.parseByte(s);
} else {
ADLB = Byte.MIN_VALUE;
}
}

protected final void initADLBD(String s) {
if (!s.trim().isEmpty()) {
ADLBD = Byte.parseByte(s);
} else {
ADLBD = Byte.MIN_VALUE;
}
}

protected final void initADLC(String s) {
if (!s.trim().isEmpty()) {
ADLC = Byte.parseByte(s);
} else {
ADLC = Byte.MIN_VALUE;
}
}

protected final void initADLCD(String s) {
if (!s.trim().isEmpty()) {
ADLCD = Byte.parseByte(s);
} else {
ADLCD = Byte.MIN_VALUE;
}
}

protected final void initADLD(String s) {
if (!s.trim().isEmpty()) {
ADLD = Byte.parseByte(s);
} else {
ADLD = Byte.MIN_VALUE;
}
}

protected final void initADLDD(String s) {
if (!s.trim().isEmpty()) {
ADLDD = Byte.parseByte(s);
} else {
ADLDD = Byte.MIN_VALUE;
}
}

protected final void initADLE(String s) {
if (!s.trim().isEmpty()) {
ADLE = Byte.parseByte(s);
} else {
ADLE = Byte.MIN_VALUE;
}
}

protected final void initADLED(String s) {
if (!s.trim().isEmpty()) {
ADLED = Byte.parseByte(s);
} else {
ADLED = Byte.MIN_VALUE;
}
}

protected final void initADLF(String s) {
if (!s.trim().isEmpty()) {
ADLF = Byte.parseByte(s);
} else {
ADLF = Byte.MIN_VALUE;
}
}

protected final void initADLFD(String s) {
if (!s.trim().isEmpty()) {
ADLFD = Byte.parseByte(s);
} else {
ADLFD = Byte.MIN_VALUE;
}
}

protected final void initAGE12(String s) {
if (!s.trim().isEmpty()) {
AGE12 = Short.parseShort(s);
} else {
AGE12 = Short.MIN_VALUE;
}
}

protected final void initAGEAD1(String s) {
if (!s.trim().isEmpty()) {
AGEAD1 = Byte.parseByte(s);
} else {
AGEAD1 = Byte.MIN_VALUE;
}
}

protected final void initAGEAD2(String s) {
if (!s.trim().isEmpty()) {
AGEAD2 = Byte.parseByte(s);
} else {
AGEAD2 = Byte.MIN_VALUE;
}
}

protected final void initAGEAD3(String s) {
if (!s.trim().isEmpty()) {
AGEAD3 = Byte.parseByte(s);
} else {
AGEAD3 = Byte.MIN_VALUE;
}
}

protected final void initAGEAD4(String s) {
if (!s.trim().isEmpty()) {
AGEAD4 = Byte.parseByte(s);
} else {
AGEAD4 = Byte.MIN_VALUE;
}
}

protected final void initAGEADV(String s) {
if (!s.trim().isEmpty()) {
AGEADV = Byte.parseByte(s);
} else {
AGEADV = Byte.MIN_VALUE;
}
}

protected final void initAGERET(String s) {
if (!s.trim().isEmpty()) {
AGERET = Byte.parseByte(s);
} else {
AGERET = Byte.MIN_VALUE;
}
}

protected final void initAGEXRT(String s) {
if (!s.trim().isEmpty()) {
AGEXRT = Byte.parseByte(s);
} else {
AGEXRT = Byte.MIN_VALUE;
}
}

protected final void initAGE_DV(String s) {
if (!s.trim().isEmpty()) {
AGE_DV = Short.parseShort(s);
} else {
AGE_DV = Short.MIN_VALUE;
}
}

protected final void initAGLT20(String s) {
if (!s.trim().isEmpty()) {
AGLT20 = Byte.parseByte(s);
} else {
AGLT20 = Byte.MIN_VALUE;
}
}

protected final void initAIDHRS_BH(String s) {
if (!s.trim().isEmpty()) {
AIDHRS_BH = Short.parseShort(s);
} else {
AIDHRS_BH = Short.MIN_VALUE;
}
}

protected final void initAIDHU1(String s) {
if (!s.trim().isEmpty()) {
AIDHU1 = Short.parseShort(s);
} else {
AIDHU1 = Short.MIN_VALUE;
}
}

protected final void initAIDHU2(String s) {
if (!s.trim().isEmpty()) {
AIDHU2 = Short.parseShort(s);
} else {
AIDHU2 = Short.MIN_VALUE;
}
}

protected final void initAIDHUA(String s) {
if (!s.trim().isEmpty()) {
AIDHUA = Short.parseShort(s);
} else {
AIDHUA = Short.MIN_VALUE;
}
}

protected final void initAIDHUB(String s) {
if (!s.trim().isEmpty()) {
AIDHUB = Short.parseShort(s);
} else {
AIDHUB = Short.MIN_VALUE;
}
}

protected final void initAIDHUC(String s) {
if (!s.trim().isEmpty()) {
AIDHUC = Short.parseShort(s);
} else {
AIDHUC = Short.MIN_VALUE;
}
}

protected final void initBASNSA(String s) {
if (!s.trim().isEmpty()) {
BASNSA = Double.parseDouble(s);
} else {
BASNSA = Double.NaN;
}
}

protected final void initBASRATE(String s) {
if (!s.trim().isEmpty()) {
BASRATE = Double.parseDouble(s);
} else {
BASRATE = Double.NaN;
}
}

protected final void initBASRATE_BH(String s) {
if (!s.trim().isEmpty()) {
BASRATE_BH = Double.parseDouble(s);
} else {
BASRATE_BH = Double.NaN;
}
}

protected final void initBASREST(String s) {
if (!s.trim().isEmpty()) {
BASREST = Byte.parseByte(s);
} else {
BASREST = Byte.MIN_VALUE;
}
}

protected final void initBASREST_BH(String s) {
if (!s.trim().isEmpty()) {
BASREST_BH = Byte.parseByte(s);
} else {
BASREST_BH = Byte.MIN_VALUE;
}
}

protected final void initBIRHH(String s) {
if (!s.trim().isEmpty()) {
BIRHH = Byte.parseByte(s);
} else {
BIRHH = Byte.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBUNO(String s) {
if (!s.trim().isEmpty()) {
BUNO = Short.parseShort(s);
} else {
BUNO = Short.MIN_VALUE;
}
}

protected final void initBUTYPE(String s) {
if (!s.trim().isEmpty()) {
BUTYPE = Short.parseShort(s);
} else {
BUTYPE = Short.MIN_VALUE;
}
}

protected final void initBWTAGM1(String s) {
if (!s.trim().isEmpty()) {
BWTAGM1 = Byte.parseByte(s);
} else {
BWTAGM1 = Byte.MIN_VALUE;
}
}

protected final void initBWTAGM2(String s) {
if (!s.trim().isEmpty()) {
BWTAGM2 = Byte.parseByte(s);
} else {
BWTAGM2 = Byte.MIN_VALUE;
}
}

protected final void initBWTAGM3(String s) {
if (!s.trim().isEmpty()) {
BWTAGM3 = Byte.parseByte(s);
} else {
BWTAGM3 = Byte.MIN_VALUE;
}
}

protected final void initBWTEL1(String s) {
if (!s.trim().isEmpty()) {
BWTEL1 = Byte.parseByte(s);
} else {
BWTEL1 = Byte.MIN_VALUE;
}
}

protected final void initBWTEL2(String s) {
if (!s.trim().isEmpty()) {
BWTEL2 = Byte.parseByte(s);
} else {
BWTEL2 = Byte.MIN_VALUE;
}
}

protected final void initBWTEL3(String s) {
if (!s.trim().isEmpty()) {
BWTEL3 = Byte.parseByte(s);
} else {
BWTEL3 = Byte.MIN_VALUE;
}
}

protected final void initBWTG51(String s) {
if (!s.trim().isEmpty()) {
BWTG51 = Byte.parseByte(s);
} else {
BWTG51 = Byte.MIN_VALUE;
}
}

protected final void initBWTG52(String s) {
if (!s.trim().isEmpty()) {
BWTG52 = Byte.parseByte(s);
} else {
BWTG52 = Byte.MIN_VALUE;
}
}

protected final void initBWTG53(String s) {
if (!s.trim().isEmpty()) {
BWTG53 = Byte.parseByte(s);
} else {
BWTG53 = Byte.MIN_VALUE;
}
}

protected final void initBWTGM1(String s) {
if (!s.trim().isEmpty()) {
BWTGM1 = Short.parseShort(s);
} else {
BWTGM1 = Short.MIN_VALUE;
}
}

protected final void initBWTGM2(String s) {
if (!s.trim().isEmpty()) {
BWTGM2 = Short.parseShort(s);
} else {
BWTGM2 = Short.MIN_VALUE;
}
}

protected final void initBWTGM3(String s) {
if (!s.trim().isEmpty()) {
BWTGM3 = Byte.parseByte(s);
} else {
BWTGM3 = Byte.MIN_VALUE;
}
}

protected final void initBWTKN1(String s) {
if (!s.trim().isEmpty()) {
BWTKN1 = Byte.parseByte(s);
} else {
BWTKN1 = Byte.MIN_VALUE;
}
}

protected final void initBWTKN2(String s) {
if (!s.trim().isEmpty()) {
BWTKN2 = Byte.parseByte(s);
} else {
BWTKN2 = Byte.MIN_VALUE;
}
}

protected final void initBWTKN3(String s) {
if (!s.trim().isEmpty()) {
BWTKN3 = Byte.parseByte(s);
} else {
BWTKN3 = Byte.MIN_VALUE;
}
}

protected final void initBWTLB1(String s) {
if (!s.trim().isEmpty()) {
BWTLB1 = Byte.parseByte(s);
} else {
BWTLB1 = Byte.MIN_VALUE;
}
}

protected final void initBWTLB2(String s) {
if (!s.trim().isEmpty()) {
BWTLB2 = Byte.parseByte(s);
} else {
BWTLB2 = Byte.MIN_VALUE;
}
}

protected final void initBWTLB3(String s) {
if (!s.trim().isEmpty()) {
BWTLB3 = Byte.parseByte(s);
} else {
BWTLB3 = Byte.MIN_VALUE;
}
}

protected final void initBWTOZ1(String s) {
if (!s.trim().isEmpty()) {
BWTOZ1 = Byte.parseByte(s);
} else {
BWTOZ1 = Byte.MIN_VALUE;
}
}

protected final void initBWTOZ2(String s) {
if (!s.trim().isEmpty()) {
BWTOZ2 = Byte.parseByte(s);
} else {
BWTOZ2 = Byte.MIN_VALUE;
}
}

protected final void initBWTOZ3(String s) {
if (!s.trim().isEmpty()) {
BWTOZ3 = Byte.parseByte(s);
} else {
BWTOZ3 = Byte.MIN_VALUE;
}
}

protected final void initBWTPN1(String s) {
if (!s.trim().isEmpty()) {
BWTPN1 = Byte.parseByte(s);
} else {
BWTPN1 = Byte.MIN_VALUE;
}
}

protected final void initBWTPN2(String s) {
if (!s.trim().isEmpty()) {
BWTPN2 = Byte.parseByte(s);
} else {
BWTPN2 = Byte.MIN_VALUE;
}
}

protected final void initBWTPN3(String s) {
if (!s.trim().isEmpty()) {
BWTPN3 = Byte.parseByte(s);
} else {
BWTPN3 = Byte.MIN_VALUE;
}
}

protected final void initBWTWK1(String s) {
if (!s.trim().isEmpty()) {
BWTWK1 = Byte.parseByte(s);
} else {
BWTWK1 = Byte.MIN_VALUE;
}
}

protected final void initBWTWK2(String s) {
if (!s.trim().isEmpty()) {
BWTWK2 = Byte.parseByte(s);
} else {
BWTWK2 = Byte.MIN_VALUE;
}
}

protected final void initBWTWK3(String s) {
if (!s.trim().isEmpty()) {
BWTWK3 = Byte.parseByte(s);
} else {
BWTWK3 = Byte.MIN_VALUE;
}
}

protected final void initBWTXP1(String s) {
if (!s.trim().isEmpty()) {
BWTXP1 = Byte.parseByte(s);
} else {
BWTXP1 = Byte.MIN_VALUE;
}
}

protected final void initBWTXP2(String s) {
if (!s.trim().isEmpty()) {
BWTXP2 = Byte.parseByte(s);
} else {
BWTXP2 = Byte.MIN_VALUE;
}
}

protected final void initBWTXP3(String s) {
if (!s.trim().isEmpty()) {
BWTXP3 = Byte.parseByte(s);
} else {
BWTXP3 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU1(String s) {
if (!s.trim().isEmpty()) {
CAIDU1 = Byte.parseByte(s);
} else {
CAIDU1 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU2(String s) {
if (!s.trim().isEmpty()) {
CAIDU2 = Byte.parseByte(s);
} else {
CAIDU2 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU3(String s) {
if (!s.trim().isEmpty()) {
CAIDU3 = Byte.parseByte(s);
} else {
CAIDU3 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU4(String s) {
if (!s.trim().isEmpty()) {
CAIDU4 = Byte.parseByte(s);
} else {
CAIDU4 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU5(String s) {
if (!s.trim().isEmpty()) {
CAIDU5 = Byte.parseByte(s);
} else {
CAIDU5 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU6(String s) {
if (!s.trim().isEmpty()) {
CAIDU6 = Byte.parseByte(s);
} else {
CAIDU6 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU7(String s) {
if (!s.trim().isEmpty()) {
CAIDU7 = Byte.parseByte(s);
} else {
CAIDU7 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU8(String s) {
if (!s.trim().isEmpty()) {
CAIDU8 = Byte.parseByte(s);
} else {
CAIDU8 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU96(String s) {
if (!s.trim().isEmpty()) {
CAIDU96 = Byte.parseByte(s);
} else {
CAIDU96 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU97(String s) {
if (!s.trim().isEmpty()) {
CAIDU97 = Byte.parseByte(s);
} else {
CAIDU97 = Byte.MIN_VALUE;
}
}

protected final void initCASMIN(String s) {
if (!s.trim().isEmpty()) {
CASMIN = Short.parseShort(s);
} else {
CASMIN = Short.MIN_VALUE;
}
}

protected final void initCBAGEF(String s) {
if (!s.trim().isEmpty()) {
CBAGEF = Byte.parseByte(s);
} else {
CBAGEF = Byte.MIN_VALUE;
}
}

protected final void initCH1BY4(String s) {
if (!s.trim().isEmpty()) {
CH1BY4 = Short.parseShort(s);
} else {
CH1BY4 = Short.MIN_VALUE;
}
}

protected final void initCHAID1(String s) {
if (!s.trim().isEmpty()) {
CHAID1 = Byte.parseByte(s);
} else {
CHAID1 = Byte.MIN_VALUE;
}
}

protected final void initCHAID2(String s) {
if (!s.trim().isEmpty()) {
CHAID2 = Byte.parseByte(s);
} else {
CHAID2 = Byte.MIN_VALUE;
}
}

protected final void initCHAID3(String s) {
if (!s.trim().isEmpty()) {
CHAID3 = Byte.parseByte(s);
} else {
CHAID3 = Byte.MIN_VALUE;
}
}

protected final void initCHAID4(String s) {
if (!s.trim().isEmpty()) {
CHAID4 = Byte.parseByte(s);
} else {
CHAID4 = Byte.MIN_VALUE;
}
}

protected final void initCHAID5(String s) {
if (!s.trim().isEmpty()) {
CHAID5 = Byte.parseByte(s);
} else {
CHAID5 = Byte.MIN_VALUE;
}
}

protected final void initCHAID6(String s) {
if (!s.trim().isEmpty()) {
CHAID6 = Byte.parseByte(s);
} else {
CHAID6 = Byte.MIN_VALUE;
}
}

protected final void initCHAID7(String s) {
if (!s.trim().isEmpty()) {
CHAID7 = Byte.parseByte(s);
} else {
CHAID7 = Byte.MIN_VALUE;
}
}

protected final void initCHAID8(String s) {
if (!s.trim().isEmpty()) {
CHAID8 = Byte.parseByte(s);
} else {
CHAID8 = Byte.MIN_VALUE;
}
}

protected final void initCHAID96(String s) {
if (!s.trim().isEmpty()) {
CHAID96 = Byte.parseByte(s);
} else {
CHAID96 = Byte.MIN_VALUE;
}
}

protected final void initCHAID97(String s) {
if (!s.trim().isEmpty()) {
CHAID97 = Byte.parseByte(s);
} else {
CHAID97 = Byte.MIN_VALUE;
}
}

protected final void initCHFAR(String s) {
if (!s.trim().isEmpty()) {
CHFAR = Byte.parseByte(s);
} else {
CHFAR = Byte.MIN_VALUE;
}
}

protected final void initCHMAIL(String s) {
if (!s.trim().isEmpty()) {
CHMAIL = Byte.parseByte(s);
} else {
CHMAIL = Byte.MIN_VALUE;
}
}

protected final void initCHSEE(String s) {
if (!s.trim().isEmpty()) {
CHSEE = Byte.parseByte(s);
} else {
CHSEE = Byte.MIN_VALUE;
}
}

protected final void initCHTEL(String s) {
if (!s.trim().isEmpty()) {
CHTEL = Byte.parseByte(s);
} else {
CHTEL = Byte.MIN_VALUE;
}
}

protected final void initCJSBGD(String s) {
if (!s.trim().isEmpty()) {
CJSBGD = Short.parseShort(s);
} else {
CJSBGD = Short.MIN_VALUE;
}
}

protected final void initCJSBGM(String s) {
if (!s.trim().isEmpty()) {
CJSBGM = Short.parseShort(s);
} else {
CJSBGM = Short.MIN_VALUE;
}
}

protected final void initCJSBGY4(String s) {
if (!s.trim().isEmpty()) {
CJSBGY4 = Short.parseShort(s);
} else {
CJSBGY4 = Short.MIN_VALUE;
}
}

protected final void initCJSBLY(String s) {
if (!s.trim().isEmpty()) {
CJSBLY = Short.parseShort(s);
} else {
CJSBLY = Short.MIN_VALUE;
}
}

protected final void initCJSCJS(String s) {
if (!s.trim().isEmpty()) {
CJSCJS = Byte.parseByte(s);
} else {
CJSCJS = Byte.MIN_VALUE;
}
}

protected final void initCJSCK1(String s) {
if (!s.trim().isEmpty()) {
CJSCK1 = Byte.parseByte(s);
} else {
CJSCK1 = Byte.MIN_VALUE;
}
}

protected final void initCJSCK2(String s) {
if (!s.trim().isEmpty()) {
CJSCK2 = Byte.parseByte(s);
} else {
CJSCK2 = Byte.MIN_VALUE;
}
}

protected final void initCJSCK3(String s) {
if (!s.trim().isEmpty()) {
CJSCK3 = Byte.parseByte(s);
} else {
CJSCK3 = Byte.MIN_VALUE;
}
}

protected final void initCJSCK4(String s) {
if (!s.trim().isEmpty()) {
CJSCK4 = Byte.parseByte(s);
} else {
CJSCK4 = Byte.MIN_VALUE;
}
}

protected final void initCJSED(String s) {
if (!s.trim().isEmpty()) {
CJSED = Byte.parseByte(s);
} else {
CJSED = Byte.MIN_VALUE;
}
}

protected final void initCJSEM(String s) {
if (!s.trim().isEmpty()) {
CJSEM = Byte.parseByte(s);
} else {
CJSEM = Byte.MIN_VALUE;
}
}

protected final void initCJSEY4(String s) {
if (!s.trim().isEmpty()) {
CJSEY4 = Short.parseShort(s);
} else {
CJSEY4 = Short.MIN_VALUE;
}
}

protected final void initCJSSTLY(String s) {
if (!s.trim().isEmpty()) {
CJSSTLY = Byte.parseByte(s);
} else {
CJSSTLY = Byte.MIN_VALUE;
}
}

protected final void initCJSTEN(String s) {
if (!s.trim().isEmpty()) {
CJSTEN = Integer.parseInt(s);
} else {
CJSTEN = Integer.MIN_VALUE;
}
}

protected final void initCJSWK9(String s) {
if (!s.trim().isEmpty()) {
CJSWK9 = Double.parseDouble(s);
} else {
CJSWK9 = Double.NaN;
}
}

protected final void initCOH1BM(String s) {
if (!s.trim().isEmpty()) {
COH1BM = Byte.parseByte(s);
} else {
COH1BM = Byte.MIN_VALUE;
}
}

protected final void initCOH1BY(String s) {
if (!s.trim().isEmpty()) {
COH1BY = Short.parseShort(s);
} else {
COH1BY = Short.MIN_VALUE;
}
}

protected final void initCOH1EM(String s) {
if (!s.trim().isEmpty()) {
COH1EM = Byte.parseByte(s);
} else {
COH1EM = Byte.MIN_VALUE;
}
}

protected final void initCOH1EY(String s) {
if (!s.trim().isEmpty()) {
COH1EY = Short.parseShort(s);
} else {
COH1EY = Short.MIN_VALUE;
}
}

protected final void initCOH1MR(String s) {
if (!s.trim().isEmpty()) {
COH1MR = Byte.parseByte(s);
} else {
COH1MR = Byte.MIN_VALUE;
}
}

protected final void initDISTMOV(String s) {
if (!s.trim().isEmpty()) {
DISTMOV = Double.parseDouble(s);
} else {
DISTMOV = Double.NaN;
}
}

protected final void initDOBY(String s) {
if (!s.trim().isEmpty()) {
DOBY = Short.parseShort(s);
} else {
DOBY = Short.MIN_VALUE;
}
}

protected final void initEAAGE(String s) {
if (!s.trim().isEmpty()) {
EAAGE = Short.parseShort(s);
} else {
EAAGE = Short.MIN_VALUE;
}
}

protected final void initEDASP(String s) {
if (!s.trim().isEmpty()) {
EDASP = Byte.parseByte(s);
} else {
EDASP = Byte.MIN_VALUE;
}
}

protected final void initEDASP_BH(String s) {
if (!s.trim().isEmpty()) {
EDASP_BH = Byte.parseByte(s);
} else {
EDASP_BH = Byte.MIN_VALUE;
}
}

protected final void initEDBGM1(String s) {
if (!s.trim().isEmpty()) {
EDBGM1 = Byte.parseByte(s);
} else {
EDBGM1 = Byte.MIN_VALUE;
}
}

protected final void initEDBGM2(String s) {
if (!s.trim().isEmpty()) {
EDBGM2 = Byte.parseByte(s);
} else {
EDBGM2 = Byte.MIN_VALUE;
}
}

protected final void initEDBGM3(String s) {
if (!s.trim().isEmpty()) {
EDBGM3 = Byte.parseByte(s);
} else {
EDBGM3 = Byte.MIN_VALUE;
}
}

protected final void initEDBGY1(String s) {
if (!s.trim().isEmpty()) {
EDBGY1 = Short.parseShort(s);
} else {
EDBGY1 = Short.MIN_VALUE;
}
}

protected final void initEDBGY2(String s) {
if (!s.trim().isEmpty()) {
EDBGY2 = Short.parseShort(s);
} else {
EDBGY2 = Short.MIN_VALUE;
}
}

protected final void initEDBGY3(String s) {
if (!s.trim().isEmpty()) {
EDBGY3 = Short.parseShort(s);
} else {
EDBGY3 = Short.MIN_VALUE;
}
}

protected final void initEDBLYR1(String s) {
if (!s.trim().isEmpty()) {
EDBLYR1 = Byte.parseByte(s);
} else {
EDBLYR1 = Byte.MIN_VALUE;
}
}

protected final void initEDBLYR2(String s) {
if (!s.trim().isEmpty()) {
EDBLYR2 = Byte.parseByte(s);
} else {
EDBLYR2 = Byte.MIN_VALUE;
}
}

protected final void initEDBLYR3(String s) {
if (!s.trim().isEmpty()) {
EDBLYR3 = Byte.parseByte(s);
} else {
EDBLYR3 = Byte.MIN_VALUE;
}
}

protected final void initEDENM1(String s) {
if (!s.trim().isEmpty()) {
EDENM1 = Byte.parseByte(s);
} else {
EDENM1 = Byte.MIN_VALUE;
}
}

protected final void initEDENM2(String s) {
if (!s.trim().isEmpty()) {
EDENM2 = Byte.parseByte(s);
} else {
EDENM2 = Byte.MIN_VALUE;
}
}

protected final void initEDENM3(String s) {
if (!s.trim().isEmpty()) {
EDENM3 = Byte.parseByte(s);
} else {
EDENM3 = Byte.MIN_VALUE;
}
}

protected final void initEDENNE1(String s) {
if (!s.trim().isEmpty()) {
EDENNE1 = Byte.parseByte(s);
} else {
EDENNE1 = Byte.MIN_VALUE;
}
}

protected final void initEDENNE2(String s) {
if (!s.trim().isEmpty()) {
EDENNE2 = Byte.parseByte(s);
} else {
EDENNE2 = Byte.MIN_VALUE;
}
}

protected final void initEDENNE3(String s) {
if (!s.trim().isEmpty()) {
EDENNE3 = Byte.parseByte(s);
} else {
EDENNE3 = Byte.MIN_VALUE;
}
}

protected final void initEDENY1(String s) {
if (!s.trim().isEmpty()) {
EDENY1 = Short.parseShort(s);
} else {
EDENY1 = Short.MIN_VALUE;
}
}

protected final void initEDENY2(String s) {
if (!s.trim().isEmpty()) {
EDENY2 = Short.parseShort(s);
} else {
EDENY2 = Short.MIN_VALUE;
}
}

protected final void initEDENY3(String s) {
if (!s.trim().isEmpty()) {
EDENY3 = Short.parseShort(s);
} else {
EDENY3 = Short.MIN_VALUE;
}
}

protected final void initEDFEEA1(String s) {
if (!s.trim().isEmpty()) {
EDFEEA1 = Byte.parseByte(s);
} else {
EDFEEA1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEA2(String s) {
if (!s.trim().isEmpty()) {
EDFEEA2 = Byte.parseByte(s);
} else {
EDFEEA2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEA3(String s) {
if (!s.trim().isEmpty()) {
EDFEEA3 = Byte.parseByte(s);
} else {
EDFEEA3 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEB1(String s) {
if (!s.trim().isEmpty()) {
EDFEEB1 = Byte.parseByte(s);
} else {
EDFEEB1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEB2(String s) {
if (!s.trim().isEmpty()) {
EDFEEB2 = Byte.parseByte(s);
} else {
EDFEEB2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEB3(String s) {
if (!s.trim().isEmpty()) {
EDFEEB3 = Byte.parseByte(s);
} else {
EDFEEB3 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEC1(String s) {
if (!s.trim().isEmpty()) {
EDFEEC1 = Byte.parseByte(s);
} else {
EDFEEC1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEC2(String s) {
if (!s.trim().isEmpty()) {
EDFEEC2 = Byte.parseByte(s);
} else {
EDFEEC2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEC3(String s) {
if (!s.trim().isEmpty()) {
EDFEEC3 = Byte.parseByte(s);
} else {
EDFEEC3 = Byte.MIN_VALUE;
}
}

protected final void initEDFEED1(String s) {
if (!s.trim().isEmpty()) {
EDFEED1 = Byte.parseByte(s);
} else {
EDFEED1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEED2(String s) {
if (!s.trim().isEmpty()) {
EDFEED2 = Byte.parseByte(s);
} else {
EDFEED2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEED3(String s) {
if (!s.trim().isEmpty()) {
EDFEED3 = Byte.parseByte(s);
} else {
EDFEED3 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEE1(String s) {
if (!s.trim().isEmpty()) {
EDFEEE1 = Byte.parseByte(s);
} else {
EDFEEE1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEE2(String s) {
if (!s.trim().isEmpty()) {
EDFEEE2 = Byte.parseByte(s);
} else {
EDFEEE2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEE3(String s) {
if (!s.trim().isEmpty()) {
EDFEEE3 = Byte.parseByte(s);
} else {
EDFEEE3 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEF1(String s) {
if (!s.trim().isEmpty()) {
EDFEEF1 = Byte.parseByte(s);
} else {
EDFEEF1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEF2(String s) {
if (!s.trim().isEmpty()) {
EDFEEF2 = Byte.parseByte(s);
} else {
EDFEEF2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEF3(String s) {
if (!s.trim().isEmpty()) {
EDFEEF3 = Byte.parseByte(s);
} else {
EDFEEF3 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEG1(String s) {
if (!s.trim().isEmpty()) {
EDFEEG1 = Byte.parseByte(s);
} else {
EDFEEG1 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEG2(String s) {
if (!s.trim().isEmpty()) {
EDFEEG2 = Byte.parseByte(s);
} else {
EDFEEG2 = Byte.MIN_VALUE;
}
}

protected final void initEDFEEG3(String s) {
if (!s.trim().isEmpty()) {
EDFEEG3 = Byte.parseByte(s);
} else {
EDFEEG3 = Byte.MIN_VALUE;
}
}

protected final void initEDLYR(String s) {
if (!s.trim().isEmpty()) {
EDLYR = Short.parseShort(s);
} else {
EDLYR = Short.MIN_VALUE;
}
}

protected final void initEDMORE1(String s) {
if (!s.trim().isEmpty()) {
EDMORE1 = Byte.parseByte(s);
} else {
EDMORE1 = Byte.MIN_VALUE;
}
}

protected final void initEDMORE2(String s) {
if (!s.trim().isEmpty()) {
EDMORE2 = Byte.parseByte(s);
} else {
EDMORE2 = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE1(String s) {
if (!s.trim().isEmpty()) {
EDTYPE1 = Byte.parseByte(s);
} else {
EDTYPE1 = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE2(String s) {
if (!s.trim().isEmpty()) {
EDTYPE2 = Byte.parseByte(s);
} else {
EDTYPE2 = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE3(String s) {
if (!s.trim().isEmpty()) {
EDTYPE3 = Byte.parseByte(s);
} else {
EDTYPE3 = Byte.MIN_VALUE;
}
}

protected final void initEPROSH(String s) {
if (!s.trim().isEmpty()) {
EPROSH = Short.parseShort(s);
} else {
EPROSH = Short.MIN_VALUE;
}
}

protected final void initEXTNSA(String s) {
if (!s.trim().isEmpty()) {
EXTNSA = Byte.parseByte(s);
} else {
EXTNSA = Byte.MIN_VALUE;
}
}

protected final void initEXTRATE(String s) {
if (!s.trim().isEmpty()) {
EXTRATE = Double.parseDouble(s);
} else {
EXTRATE = Double.NaN;
}
}

protected final void initEXTRATE_BH(String s) {
if (!s.trim().isEmpty()) {
EXTRATE_BH = Double.parseDouble(s);
} else {
EXTRATE_BH = Double.NaN;
}
}

protected final void initEXTREST(String s) {
if (!s.trim().isEmpty()) {
EXTREST = Byte.parseByte(s);
} else {
EXTREST = Byte.MIN_VALUE;
}
}

protected final void initF101(String s) {
if (!s.trim().isEmpty()) {
F101 = Short.parseShort(s);
} else {
F101 = Short.MIN_VALUE;
}
}

protected final void initF102(String s) {
if (!s.trim().isEmpty()) {
F102 = Short.parseShort(s);
} else {
F102 = Short.MIN_VALUE;
}
}

protected final void initF103(String s) {
if (!s.trim().isEmpty()) {
F103 = Short.parseShort(s);
} else {
F103 = Short.MIN_VALUE;
}
}

protected final void initF104(String s) {
if (!s.trim().isEmpty()) {
F104 = Short.parseShort(s);
} else {
F104 = Short.MIN_VALUE;
}
}

protected final void initF105(String s) {
if (!s.trim().isEmpty()) {
F105 = Short.parseShort(s);
} else {
F105 = Short.MIN_VALUE;
}
}

protected final void initF106(String s) {
if (!s.trim().isEmpty()) {
F106 = Byte.parseByte(s);
} else {
F106 = Byte.MIN_VALUE;
}
}

protected final void initF107(String s) {
if (!s.trim().isEmpty()) {
F107 = Byte.parseByte(s);
} else {
F107 = Byte.MIN_VALUE;
}
}

protected final void initF116(String s) {
if (!s.trim().isEmpty()) {
F116 = Byte.parseByte(s);
} else {
F116 = Byte.MIN_VALUE;
}
}

protected final void initF118(String s) {
if (!s.trim().isEmpty()) {
F118 = Short.parseShort(s);
} else {
F118 = Short.MIN_VALUE;
}
}

protected final void initF119(String s) {
if (!s.trim().isEmpty()) {
F119 = Short.parseShort(s);
} else {
F119 = Short.MIN_VALUE;
}
}

protected final void initF121(String s) {
if (!s.trim().isEmpty()) {
F121 = Short.parseShort(s);
} else {
F121 = Short.MIN_VALUE;
}
}

protected final void initF122(String s) {
if (!s.trim().isEmpty()) {
F122 = Short.parseShort(s);
} else {
F122 = Short.MIN_VALUE;
}
}

protected final void initF125(String s) {
if (!s.trim().isEmpty()) {
F125 = Short.parseShort(s);
} else {
F125 = Short.MIN_VALUE;
}
}

protected final void initF126(String s) {
if (!s.trim().isEmpty()) {
F126 = Byte.parseByte(s);
} else {
F126 = Byte.MIN_VALUE;
}
}

protected final void initF127(String s) {
if (!s.trim().isEmpty()) {
F127 = Byte.parseByte(s);
} else {
F127 = Byte.MIN_VALUE;
}
}

protected final void initF128(String s) {
if (!s.trim().isEmpty()) {
F128 = Byte.parseByte(s);
} else {
F128 = Byte.MIN_VALUE;
}
}

protected final void initF132(String s) {
if (!s.trim().isEmpty()) {
F132 = Short.parseShort(s);
} else {
F132 = Short.MIN_VALUE;
}
}

protected final void initF135(String s) {
if (!s.trim().isEmpty()) {
F135 = Short.parseShort(s);
} else {
F135 = Short.MIN_VALUE;
}
}

protected final void initF136(String s) {
if (!s.trim().isEmpty()) {
F136 = Short.parseShort(s);
} else {
F136 = Short.MIN_VALUE;
}
}

protected final void initF137(String s) {
if (!s.trim().isEmpty()) {
F137 = Short.parseShort(s);
} else {
F137 = Short.MIN_VALUE;
}
}

protected final void initF138(String s) {
if (!s.trim().isEmpty()) {
F138 = Short.parseShort(s);
} else {
F138 = Short.MIN_VALUE;
}
}

protected final void initF139(String s) {
if (!s.trim().isEmpty()) {
F139 = Short.parseShort(s);
} else {
F139 = Short.MIN_VALUE;
}
}

protected final void initF140(String s) {
if (!s.trim().isEmpty()) {
F140 = Short.parseShort(s);
} else {
F140 = Short.MIN_VALUE;
}
}

protected final void initF141(String s) {
if (!s.trim().isEmpty()) {
F141 = Short.parseShort(s);
} else {
F141 = Short.MIN_VALUE;
}
}

protected final void initF142(String s) {
if (!s.trim().isEmpty()) {
F142 = Short.parseShort(s);
} else {
F142 = Short.MIN_VALUE;
}
}

protected final void initF143(String s) {
if (!s.trim().isEmpty()) {
F143 = Byte.parseByte(s);
} else {
F143 = Byte.MIN_VALUE;
}
}

protected final void initF151(String s) {
if (!s.trim().isEmpty()) {
F151 = Short.parseShort(s);
} else {
F151 = Short.MIN_VALUE;
}
}

protected final void initF152(String s) {
if (!s.trim().isEmpty()) {
F152 = Byte.parseByte(s);
} else {
F152 = Byte.MIN_VALUE;
}
}

protected final void initF153(String s) {
if (!s.trim().isEmpty()) {
F153 = Short.parseShort(s);
} else {
F153 = Short.MIN_VALUE;
}
}

protected final void initF154(String s) {
if (!s.trim().isEmpty()) {
F154 = Short.parseShort(s);
} else {
F154 = Short.MIN_VALUE;
}
}

protected final void initF155(String s) {
if (!s.trim().isEmpty()) {
F155 = Short.parseShort(s);
} else {
F155 = Short.MIN_VALUE;
}
}

protected final void initF156(String s) {
if (!s.trim().isEmpty()) {
F156 = Short.parseShort(s);
} else {
F156 = Short.MIN_VALUE;
}
}

protected final void initF157(String s) {
if (!s.trim().isEmpty()) {
F157 = Short.parseShort(s);
} else {
F157 = Short.MIN_VALUE;
}
}

protected final void initF158(String s) {
if (!s.trim().isEmpty()) {
F158 = Byte.parseByte(s);
} else {
F158 = Byte.MIN_VALUE;
}
}

protected final void initF159(String s) {
if (!s.trim().isEmpty()) {
F159 = Byte.parseByte(s);
} else {
F159 = Byte.MIN_VALUE;
}
}

protected final void initFEDASP(String s) {
if (!s.trim().isEmpty()) {
FEDASP = Byte.parseByte(s);
} else {
FEDASP = Byte.MIN_VALUE;
}
}

protected final void initFEDLIK_BH(String s) {
if (!s.trim().isEmpty()) {
FEDLIK_BH = Byte.parseByte(s);
} else {
FEDLIK_BH = Byte.MIN_VALUE;
}
}

protected final void initFEDNT1(String s) {
if (!s.trim().isEmpty()) {
FEDNT1 = Byte.parseByte(s);
} else {
FEDNT1 = Byte.MIN_VALUE;
}
}

protected final void initFEDNT2(String s) {
if (!s.trim().isEmpty()) {
FEDNT2 = Byte.parseByte(s);
} else {
FEDNT2 = Byte.MIN_VALUE;
}
}

protected final void initFEDTYP(String s) {
if (!s.trim().isEmpty()) {
FEDTYP = Byte.parseByte(s);
} else {
FEDTYP = Byte.MIN_VALUE;
}
}

protected final void initFENOW_BH(String s) {
if (!s.trim().isEmpty()) {
FENOW_BH = Short.parseShort(s);
} else {
FENOW_BH = Short.MIN_VALUE;
}
}

protected final void initFETYPE(String s) {
if (!s.trim().isEmpty()) {
FETYPE = Short.parseShort(s);
} else {
FETYPE = Short.MIN_VALUE;
}
}

protected final void initFIHHMN(String s) {
if (!s.trim().isEmpty()) {
FIHHMN = Double.parseDouble(s);
} else {
FIHHMN = Double.NaN;
}
}

protected final void initFIHHMNI(String s) {
if (!s.trim().isEmpty()) {
FIHHMNI = Short.parseShort(s);
} else {
FIHHMNI = Short.MIN_VALUE;
}
}

protected final void initFIMNB(String s) {
if (!s.trim().isEmpty()) {
FIMNB = Double.parseDouble(s);
} else {
FIMNB = Double.NaN;
}
}

protected final void initFIMNBI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNBI = false;
} else {
FIMNBI = true;
}
}
}

protected final void initFIMNI(String s) {
if (!s.trim().isEmpty()) {
FIMNI = Double.parseDouble(s);
} else {
FIMNI = Double.NaN;
}
}

protected final void initFIMNII(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNII = false;
} else {
FIMNII = true;
}
}
}

protected final void initFIMNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNLI = false;
} else {
FIMNLI = true;
}
}
}

protected final void initFIMNNL(String s) {
if (!s.trim().isEmpty()) {
FIMNNL = Double.parseDouble(s);
} else {
FIMNNL = Double.NaN;
}
}

protected final void initFIMNNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNNLI = false;
} else {
FIMNNLI = true;
}
}
}

protected final void initFIMNP(String s) {
if (!s.trim().isEmpty()) {
FIMNP = Double.parseDouble(s);
} else {
FIMNP = Double.NaN;
}
}

protected final void initFIMNPI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNPI = false;
} else {
FIMNPI = true;
}
}
}

protected final void initFIMNSEL(String s) {
if (!s.trim().isEmpty()) {
FIMNSEL = Byte.parseByte(s);
} else {
FIMNSEL = Byte.MIN_VALUE;
}
}

protected final void initFIMNT(String s) {
if (!s.trim().isEmpty()) {
FIMNT = Double.parseDouble(s);
} else {
FIMNT = Double.NaN;
}
}

protected final void initFIMNTHI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNTHI = false;
} else {
FIMNTHI = true;
}
}
}

protected final void initFIMNTI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNTI = false;
} else {
FIMNTI = true;
}
}
}

protected final void initFISITC(String s) {
if (!s.trim().isEmpty()) {
FISITC = Short.parseShort(s);
} else {
FISITC = Short.MIN_VALUE;
}
}

protected final void initFISITX(String s) {
if (!s.trim().isEmpty()) {
FISITX = Short.parseShort(s);
} else {
FISITX = Short.MIN_VALUE;
}
}

protected final void initFISITY(String s) {
if (!s.trim().isEmpty()) {
FISITY = Short.parseShort(s);
} else {
FISITY = Short.MIN_VALUE;
}
}

protected final void initFIYEARI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYEARI = false;
} else {
FIYEARI = true;
}
}
}

protected final void initFIYR(String s) {
if (!s.trim().isEmpty()) {
FIYR = Double.parseDouble(s);
} else {
FIYR = Double.NaN;
}
}

protected final void initFIYRB(String s) {
if (!s.trim().isEmpty()) {
FIYRB = Double.parseDouble(s);
} else {
FIYRB = Double.NaN;
}
}

protected final void initFIYRBI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRBI = false;
} else {
FIYRBI = true;
}
}
}

protected final void initFIYRDB1(String s) {
if (!s.trim().isEmpty()) {
FIYRDB1 = Byte.parseByte(s);
} else {
FIYRDB1 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB2(String s) {
if (!s.trim().isEmpty()) {
FIYRDB2 = Byte.parseByte(s);
} else {
FIYRDB2 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB3(String s) {
if (!s.trim().isEmpty()) {
FIYRDB3 = Byte.parseByte(s);
} else {
FIYRDB3 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB4(String s) {
if (!s.trim().isEmpty()) {
FIYRDB4 = Byte.parseByte(s);
} else {
FIYRDB4 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB5(String s) {
if (!s.trim().isEmpty()) {
FIYRDB5 = Byte.parseByte(s);
} else {
FIYRDB5 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB6(String s) {
if (!s.trim().isEmpty()) {
FIYRDB6 = Byte.parseByte(s);
} else {
FIYRDB6 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDIA(String s) {
if (!s.trim().isEmpty()) {
FIYRDIA = Integer.parseInt(s);
} else {
FIYRDIA = Integer.MIN_VALUE;
}
}

protected final void initFIYRDIC(String s) {
if (!s.trim().isEmpty()) {
FIYRDIC = Integer.parseInt(s);
} else {
FIYRDIC = Integer.MIN_VALUE;
}
}

protected final void initFIYRDII(String s) {
if (!s.trim().isEmpty()) {
FIYRDII = Short.parseShort(s);
} else {
FIYRDII = Short.MIN_VALUE;
}
}

protected final void initFIYRI(String s) {
if (!s.trim().isEmpty()) {
FIYRI = Double.parseDouble(s);
} else {
FIYRI = Double.NaN;
}
}

protected final void initFIYRII(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRII = false;
} else {
FIYRII = true;
}
}
}

protected final void initFIYRL(String s) {
if (!s.trim().isEmpty()) {
FIYRL = Double.parseDouble(s);
} else {
FIYRL = Double.NaN;
}
}

protected final void initFIYRLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRLI = false;
} else {
FIYRLI = true;
}
}
}

protected final void initFIYRNL(String s) {
if (!s.trim().isEmpty()) {
FIYRNL = Double.parseDouble(s);
} else {
FIYRNL = Double.NaN;
}
}

protected final void initFIYRNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRNLI = false;
} else {
FIYRNLI = true;
}
}
}

protected final void initFIYRP(String s) {
if (!s.trim().isEmpty()) {
FIYRP = Double.parseDouble(s);
} else {
FIYRP = Double.NaN;
}
}

protected final void initFIYRPI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRPI = false;
} else {
FIYRPI = true;
}
}
}

protected final void initFIYRT(String s) {
if (!s.trim().isEmpty()) {
FIYRT = Double.parseDouble(s);
} else {
FIYRT = Double.NaN;
}
}

protected final void initFIYRTI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRTI = false;
} else {
FIYRTI = true;
}
}
}

protected final void initFNPID_BH(String s) {
if (!s.trim().isEmpty()) {
FNPID_BH = Integer.parseInt(s);
} else {
FNPID_BH = Integer.MIN_VALUE;
}
}

protected final void initFRNA(String s) {
if (!s.trim().isEmpty()) {
FRNA = Byte.parseByte(s);
} else {
FRNA = Byte.MIN_VALUE;
}
}

protected final void initFRNB(String s) {
if (!s.trim().isEmpty()) {
FRNB = Byte.parseByte(s);
} else {
FRNB = Byte.MIN_VALUE;
}
}

protected final void initFRNC(String s) {
if (!s.trim().isEmpty()) {
FRNC = Byte.parseByte(s);
} else {
FRNC = Byte.MIN_VALUE;
}
}

protected final void initFTEXA(String s) {
if (!s.trim().isEmpty()) {
FTEXA = Short.parseShort(s);
} else {
FTEXA = Short.MIN_VALUE;
}
}

protected final void initFTEXA1(String s) {
if (!s.trim().isEmpty()) {
FTEXA1 = Short.parseShort(s);
} else {
FTEXA1 = Short.MIN_VALUE;
}
}

protected final void initFTEXA2(String s) {
if (!s.trim().isEmpty()) {
FTEXA2 = Short.parseShort(s);
} else {
FTEXA2 = Short.MIN_VALUE;
}
}

protected final void initFTEXA3(String s) {
if (!s.trim().isEmpty()) {
FTEXA3 = Short.parseShort(s);
} else {
FTEXA3 = Short.MIN_VALUE;
}
}

protected final void initFTEXA4(String s) {
if (!s.trim().isEmpty()) {
FTEXA4 = Short.parseShort(s);
} else {
FTEXA4 = Short.MIN_VALUE;
}
}

protected final void initFTEXA5(String s) {
if (!s.trim().isEmpty()) {
FTEXA5 = Short.parseShort(s);
} else {
FTEXA5 = Short.MIN_VALUE;
}
}

protected final void initFTEXA6(String s) {
if (!s.trim().isEmpty()) {
FTEXA6 = Short.parseShort(s);
} else {
FTEXA6 = Short.MIN_VALUE;
}
}

protected final void initFTEXAV(String s) {
if (!s.trim().isEmpty()) {
FTEXAV = Short.parseShort(s);
} else {
FTEXAV = Short.MIN_VALUE;
}
}

protected final void initFTEXAW(String s) {
if (!s.trim().isEmpty()) {
FTEXAW = Double.parseDouble(s);
} else {
FTEXAW = Double.NaN;
}
}

protected final void initFTEXB(String s) {
if (!s.trim().isEmpty()) {
FTEXB = Short.parseShort(s);
} else {
FTEXB = Short.MIN_VALUE;
}
}

protected final void initFTEXB1(String s) {
if (!s.trim().isEmpty()) {
FTEXB1 = Short.parseShort(s);
} else {
FTEXB1 = Short.MIN_VALUE;
}
}

protected final void initFTEXB2(String s) {
if (!s.trim().isEmpty()) {
FTEXB2 = Short.parseShort(s);
} else {
FTEXB2 = Short.MIN_VALUE;
}
}

protected final void initFTEXB3(String s) {
if (!s.trim().isEmpty()) {
FTEXB3 = Short.parseShort(s);
} else {
FTEXB3 = Short.MIN_VALUE;
}
}

protected final void initFTEXB4(String s) {
if (!s.trim().isEmpty()) {
FTEXB4 = Short.parseShort(s);
} else {
FTEXB4 = Short.MIN_VALUE;
}
}

protected final void initFTEXB5(String s) {
if (!s.trim().isEmpty()) {
FTEXB5 = Short.parseShort(s);
} else {
FTEXB5 = Short.MIN_VALUE;
}
}

protected final void initFTEXB6(String s) {
if (!s.trim().isEmpty()) {
FTEXB6 = Short.parseShort(s);
} else {
FTEXB6 = Short.MIN_VALUE;
}
}

protected final void initFTEXBV(String s) {
if (!s.trim().isEmpty()) {
FTEXBV = Short.parseShort(s);
} else {
FTEXBV = Short.MIN_VALUE;
}
}

protected final void initFTEXBW(String s) {
if (!s.trim().isEmpty()) {
FTEXBW = Double.parseDouble(s);
} else {
FTEXBW = Double.NaN;
}
}

protected final void initFTEXC(String s) {
if (!s.trim().isEmpty()) {
FTEXC = Short.parseShort(s);
} else {
FTEXC = Short.MIN_VALUE;
}
}

protected final void initFTEXC1(String s) {
if (!s.trim().isEmpty()) {
FTEXC1 = Short.parseShort(s);
} else {
FTEXC1 = Short.MIN_VALUE;
}
}

protected final void initFTEXC2(String s) {
if (!s.trim().isEmpty()) {
FTEXC2 = Short.parseShort(s);
} else {
FTEXC2 = Short.MIN_VALUE;
}
}

protected final void initFTEXC3(String s) {
if (!s.trim().isEmpty()) {
FTEXC3 = Short.parseShort(s);
} else {
FTEXC3 = Short.MIN_VALUE;
}
}

protected final void initFTEXC4(String s) {
if (!s.trim().isEmpty()) {
FTEXC4 = Short.parseShort(s);
} else {
FTEXC4 = Short.MIN_VALUE;
}
}

protected final void initFTEXC5(String s) {
if (!s.trim().isEmpty()) {
FTEXC5 = Short.parseShort(s);
} else {
FTEXC5 = Short.MIN_VALUE;
}
}

protected final void initFTEXC6(String s) {
if (!s.trim().isEmpty()) {
FTEXC6 = Short.parseShort(s);
} else {
FTEXC6 = Short.MIN_VALUE;
}
}

protected final void initFTEXCV(String s) {
if (!s.trim().isEmpty()) {
FTEXCV = Short.parseShort(s);
} else {
FTEXCV = Short.MIN_VALUE;
}
}

protected final void initFTEXCW(String s) {
if (!s.trim().isEmpty()) {
FTEXCW = Double.parseDouble(s);
} else {
FTEXCW = Double.NaN;
}
}

protected final void initFTEXHH(String s) {
if (!s.trim().isEmpty()) {
FTEXHH = Short.parseShort(s);
} else {
FTEXHH = Short.MIN_VALUE;
}
}

protected final void initHGEMP(String s) {
if (!s.trim().isEmpty()) {
HGEMP = Byte.parseByte(s);
} else {
HGEMP = Byte.MIN_VALUE;
}
}

protected final void initHGR2R(String s) {
if (!s.trim().isEmpty()) {
HGR2R = Short.parseShort(s);
} else {
HGR2R = Short.MIN_VALUE;
}
}

protected final void initHGRA(String s) {
if (!s.trim().isEmpty()) {
HGRA = Short.parseShort(s);
} else {
HGRA = Short.MIN_VALUE;
}
}

protected final void initHGSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
HGSEX = false;
} else {
HGSEX = true;
}
}
}

protected final void initHHCH12(String s) {
if (!s.trim().isEmpty()) {
HHCH12 = Short.parseShort(s);
} else {
HHCH12 = Short.MIN_VALUE;
}
}

protected final void initHHMEM(String s) {
if (!s.trim().isEmpty()) {
HHMEM = Short.parseShort(s);
} else {
HHMEM = Short.MIN_VALUE;
}
}

protected final void initHHSIZE(String s) {
if (!s.trim().isEmpty()) {
HHSIZE = Short.parseShort(s);
} else {
HHSIZE = Short.MIN_VALUE;
}
}

protected final void initHHTYPE(String s) {
if (!s.trim().isEmpty()) {
HHTYPE = Short.parseShort(s);
} else {
HHTYPE = Short.MIN_VALUE;
}
}

protected final void initHID(String s) {
if (!s.trim().isEmpty()) {
HID = Integer.parseInt(s);
} else {
HID = Integer.MIN_VALUE;
}
}

protected final void initHIQUALB_DV(String s) {
if (!s.trim().isEmpty()) {
HIQUALB_DV = Short.parseShort(s);
} else {
HIQUALB_DV = Short.MIN_VALUE;
}
}

protected final void initHL2GP(String s) {
if (!s.trim().isEmpty()) {
HL2GP = Short.parseShort(s);
} else {
HL2GP = Short.MIN_VALUE;
}
}

protected final void initHL2HOP(String s) {
if (!s.trim().isEmpty()) {
HL2HOP = Byte.parseByte(s);
} else {
HL2HOP = Byte.MIN_VALUE;
}
}

protected final void initHLAVPN(String s) {
if (!s.trim().isEmpty()) {
HLAVPN = Byte.parseByte(s);
} else {
HLAVPN = Byte.MIN_VALUE;
}
}

protected final void initHLCK(String s) {
if (!s.trim().isEmpty()) {
HLCK = Short.parseShort(s);
} else {
HLCK = Short.MIN_VALUE;
}
}

protected final void initHLCKA(String s) {
if (!s.trim().isEmpty()) {
HLCKA = Short.parseShort(s);
} else {
HLCKA = Short.MIN_VALUE;
}
}

protected final void initHLCKAN(String s) {
if (!s.trim().isEmpty()) {
HLCKAN = Short.parseShort(s);
} else {
HLCKAN = Short.MIN_VALUE;
}
}

protected final void initHLCKB(String s) {
if (!s.trim().isEmpty()) {
HLCKB = Short.parseShort(s);
} else {
HLCKB = Short.MIN_VALUE;
}
}

protected final void initHLCKBN(String s) {
if (!s.trim().isEmpty()) {
HLCKBN = Short.parseShort(s);
} else {
HLCKBN = Short.MIN_VALUE;
}
}

protected final void initHLCKC(String s) {
if (!s.trim().isEmpty()) {
HLCKC = Short.parseShort(s);
} else {
HLCKC = Short.MIN_VALUE;
}
}

protected final void initHLCKCN(String s) {
if (!s.trim().isEmpty()) {
HLCKCN = Short.parseShort(s);
} else {
HLCKCN = Short.MIN_VALUE;
}
}

protected final void initHLCKD(String s) {
if (!s.trim().isEmpty()) {
HLCKD = Short.parseShort(s);
} else {
HLCKD = Short.MIN_VALUE;
}
}

protected final void initHLCKDN(String s) {
if (!s.trim().isEmpty()) {
HLCKDN = Short.parseShort(s);
} else {
HLCKDN = Short.MIN_VALUE;
}
}

protected final void initHLCKE(String s) {
if (!s.trim().isEmpty()) {
HLCKE = Short.parseShort(s);
} else {
HLCKE = Short.MIN_VALUE;
}
}

protected final void initHLCKEN(String s) {
if (!s.trim().isEmpty()) {
HLCKEN = Short.parseShort(s);
} else {
HLCKEN = Short.MIN_VALUE;
}
}

protected final void initHLCKF(String s) {
if (!s.trim().isEmpty()) {
HLCKF = Short.parseShort(s);
} else {
HLCKF = Short.MIN_VALUE;
}
}

protected final void initHLCKFN(String s) {
if (!s.trim().isEmpty()) {
HLCKFN = Short.parseShort(s);
} else {
HLCKFN = Short.MIN_VALUE;
}
}

protected final void initHLCKG(String s) {
if (!s.trim().isEmpty()) {
HLCKG = Short.parseShort(s);
} else {
HLCKG = Short.MIN_VALUE;
}
}

protected final void initHLCKGN(String s) {
if (!s.trim().isEmpty()) {
HLCKGN = Short.parseShort(s);
} else {
HLCKGN = Short.MIN_VALUE;
}
}

protected final void initHLCKH(String s) {
if (!s.trim().isEmpty()) {
HLCKH = Short.parseShort(s);
} else {
HLCKH = Short.MIN_VALUE;
}
}

protected final void initHLCKHN(String s) {
if (!s.trim().isEmpty()) {
HLCKHN = Short.parseShort(s);
} else {
HLCKHN = Short.MIN_VALUE;
}
}

protected final void initHLCKI(String s) {
if (!s.trim().isEmpty()) {
HLCKI = Short.parseShort(s);
} else {
HLCKI = Short.MIN_VALUE;
}
}

protected final void initHLCKIN(String s) {
if (!s.trim().isEmpty()) {
HLCKIN = Short.parseShort(s);
} else {
HLCKIN = Short.MIN_VALUE;
}
}

protected final void initHLCVR(String s) {
if (!s.trim().isEmpty()) {
HLCVR = Short.parseShort(s);
} else {
HLCVR = Short.MIN_VALUE;
}
}

protected final void initHLCVRH(String s) {
if (!s.trim().isEmpty()) {
HLCVRH = Short.parseShort(s);
} else {
HLCVRH = Short.MIN_VALUE;
}
}

protected final void initHLCVRL(String s) {
if (!s.trim().isEmpty()) {
HLCVRL = Short.parseShort(s);
} else {
HLCVRL = Short.MIN_VALUE;
}
}

protected final void initHLDSBL1(String s) {
if (!s.trim().isEmpty()) {
HLDSBL1 = Byte.parseByte(s);
} else {
HLDSBL1 = Byte.MIN_VALUE;
}
}

protected final void initHLENDW(String s) {
if (!s.trim().isEmpty()) {
HLENDW = Short.parseShort(s);
} else {
HLENDW = Short.MIN_VALUE;
}
}

protected final void initHLHT(String s) {
if (!s.trim().isEmpty()) {
HLHT = Byte.parseByte(s);
} else {
HLHT = Byte.MIN_VALUE;
}
}

protected final void initHLHTC(String s) {
if (!s.trim().isEmpty()) {
HLHTC = Short.parseShort(s);
} else {
HLHTC = Short.MIN_VALUE;
}
}

protected final void initHLHTF(String s) {
if (!s.trim().isEmpty()) {
HLHTF = Byte.parseByte(s);
} else {
HLHTF = Byte.MIN_VALUE;
}
}

protected final void initHLHTI(String s) {
if (!s.trim().isEmpty()) {
HLHTI = Byte.parseByte(s);
} else {
HLHTI = Byte.MIN_VALUE;
}
}

protected final void initHLIV65(String s) {
if (!s.trim().isEmpty()) {
HLIV65 = Byte.parseByte(s);
} else {
HLIV65 = Byte.MIN_VALUE;
}
}

protected final void initHLLT(String s) {
if (!s.trim().isEmpty()) {
HLLT = Byte.parseByte(s);
} else {
HLLT = Byte.MIN_VALUE;
}
}

protected final void initHLLTA(String s) {
if (!s.trim().isEmpty()) {
HLLTA = Short.parseShort(s);
} else {
HLLTA = Short.MIN_VALUE;
}
}

protected final void initHLLTB(String s) {
if (!s.trim().isEmpty()) {
HLLTB = Short.parseShort(s);
} else {
HLLTB = Short.MIN_VALUE;
}
}

protected final void initHLLTC(String s) {
if (!s.trim().isEmpty()) {
HLLTC = Short.parseShort(s);
} else {
HLLTC = Short.MIN_VALUE;
}
}

protected final void initHLLTD(String s) {
if (!s.trim().isEmpty()) {
HLLTD = Short.parseShort(s);
} else {
HLLTD = Short.MIN_VALUE;
}
}

protected final void initHLLTE(String s) {
if (!s.trim().isEmpty()) {
HLLTE = Short.parseShort(s);
} else {
HLLTE = Short.MIN_VALUE;
}
}

protected final void initHLLTW(String s) {
if (!s.trim().isEmpty()) {
HLLTW = Byte.parseByte(s);
} else {
HLLTW = Byte.MIN_VALUE;
}
}

protected final void initHLLTWA(String s) {
if (!s.trim().isEmpty()) {
HLLTWA = Short.parseShort(s);
} else {
HLLTWA = Short.MIN_VALUE;
}
}

protected final void initHLPAIN(String s) {
if (!s.trim().isEmpty()) {
HLPAIN = Byte.parseByte(s);
} else {
HLPAIN = Byte.MIN_VALUE;
}
}

protected final void initHLPRB(String s) {
if (!s.trim().isEmpty()) {
HLPRB = Short.parseShort(s);
} else {
HLPRB = Short.MIN_VALUE;
}
}

protected final void initHLPRBA(String s) {
if (!s.trim().isEmpty()) {
HLPRBA = Short.parseShort(s);
} else {
HLPRBA = Short.MIN_VALUE;
}
}

protected final void initHLPRBB(String s) {
if (!s.trim().isEmpty()) {
HLPRBB = Short.parseShort(s);
} else {
HLPRBB = Short.MIN_VALUE;
}
}

protected final void initHLPRBC(String s) {
if (!s.trim().isEmpty()) {
HLPRBC = Short.parseShort(s);
} else {
HLPRBC = Short.MIN_VALUE;
}
}

protected final void initHLPRBD(String s) {
if (!s.trim().isEmpty()) {
HLPRBD = Short.parseShort(s);
} else {
HLPRBD = Short.MIN_VALUE;
}
}

protected final void initHLPRBE(String s) {
if (!s.trim().isEmpty()) {
HLPRBE = Short.parseShort(s);
} else {
HLPRBE = Short.MIN_VALUE;
}
}

protected final void initHLPRBF(String s) {
if (!s.trim().isEmpty()) {
HLPRBF = Short.parseShort(s);
} else {
HLPRBF = Short.MIN_VALUE;
}
}

protected final void initHLPRBG(String s) {
if (!s.trim().isEmpty()) {
HLPRBG = Short.parseShort(s);
} else {
HLPRBG = Short.MIN_VALUE;
}
}

protected final void initHLPRBH(String s) {
if (!s.trim().isEmpty()) {
HLPRBH = Short.parseShort(s);
} else {
HLPRBH = Short.MIN_VALUE;
}
}

protected final void initHLPRBI(String s) {
if (!s.trim().isEmpty()) {
HLPRBI = Short.parseShort(s);
} else {
HLPRBI = Short.MIN_VALUE;
}
}

protected final void initHLPRBJ(String s) {
if (!s.trim().isEmpty()) {
HLPRBJ = Short.parseShort(s);
} else {
HLPRBJ = Short.MIN_VALUE;
}
}

protected final void initHLPRBK(String s) {
if (!s.trim().isEmpty()) {
HLPRBK = Short.parseShort(s);
} else {
HLPRBK = Short.MIN_VALUE;
}
}

protected final void initHLPRBL(String s) {
if (!s.trim().isEmpty()) {
HLPRBL = Short.parseShort(s);
} else {
HLPRBL = Short.MIN_VALUE;
}
}

protected final void initHLPRBM(String s) {
if (!s.trim().isEmpty()) {
HLPRBM = Short.parseShort(s);
} else {
HLPRBM = Short.MIN_VALUE;
}
}

protected final void initHLPRBN(String s) {
if (!s.trim().isEmpty()) {
HLPRBN = Byte.parseByte(s);
} else {
HLPRBN = Byte.MIN_VALUE;
}
}

protected final void initHLPRBO(String s) {
if (!s.trim().isEmpty()) {
HLPRBO = Byte.parseByte(s);
} else {
HLPRBO = Byte.MIN_VALUE;
}
}

protected final void initHLPREG(String s) {
if (!s.trim().isEmpty()) {
HLPREG = Byte.parseByte(s);
} else {
HLPREG = Byte.MIN_VALUE;
}
}

protected final void initHLPRXA(String s) {
if (!s.trim().isEmpty()) {
HLPRXA = Byte.parseByte(s);
} else {
HLPRXA = Byte.MIN_VALUE;
}
}

protected final void initHLPRXB(String s) {
if (!s.trim().isEmpty()) {
HLPRXB = Byte.parseByte(s);
} else {
HLPRXB = Byte.MIN_VALUE;
}
}

protected final void initHLPRXC(String s) {
if (!s.trim().isEmpty()) {
HLPRXC = Byte.parseByte(s);
} else {
HLPRXC = Byte.MIN_VALUE;
}
}

protected final void initHLPRXD(String s) {
if (!s.trim().isEmpty()) {
HLPRXD = Byte.parseByte(s);
} else {
HLPRXD = Byte.MIN_VALUE;
}
}

protected final void initHLPRXE(String s) {
if (!s.trim().isEmpty()) {
HLPRXE = Byte.parseByte(s);
} else {
HLPRXE = Byte.MIN_VALUE;
}
}

protected final void initHLPRXF(String s) {
if (!s.trim().isEmpty()) {
HLPRXF = Byte.parseByte(s);
} else {
HLPRXF = Byte.MIN_VALUE;
}
}

protected final void initHLPRXG(String s) {
if (!s.trim().isEmpty()) {
HLPRXG = Byte.parseByte(s);
} else {
HLPRXG = Byte.MIN_VALUE;
}
}

protected final void initHLPRXH(String s) {
if (!s.trim().isEmpty()) {
HLPRXH = Byte.parseByte(s);
} else {
HLPRXH = Byte.MIN_VALUE;
}
}

protected final void initHLPRXI(String s) {
if (!s.trim().isEmpty()) {
HLPRXI = Byte.parseByte(s);
} else {
HLPRXI = Byte.MIN_VALUE;
}
}

protected final void initHLPRXJ(String s) {
if (!s.trim().isEmpty()) {
HLPRXJ = Byte.parseByte(s);
} else {
HLPRXJ = Byte.MIN_VALUE;
}
}

protected final void initHLPRXK(String s) {
if (!s.trim().isEmpty()) {
HLPRXK = Byte.parseByte(s);
} else {
HLPRXK = Byte.MIN_VALUE;
}
}

protected final void initHLPRXL(String s) {
if (!s.trim().isEmpty()) {
HLPRXL = Byte.parseByte(s);
} else {
HLPRXL = Byte.MIN_VALUE;
}
}

protected final void initHLPRXM(String s) {
if (!s.trim().isEmpty()) {
HLPRXM = Byte.parseByte(s);
} else {
HLPRXM = Byte.MIN_VALUE;
}
}

protected final void initHLPRXN(String s) {
if (!s.trim().isEmpty()) {
HLPRXN = Byte.parseByte(s);
} else {
HLPRXN = Byte.MIN_VALUE;
}
}

protected final void initHLPRXO(String s) {
if (!s.trim().isEmpty()) {
HLPRXO = Byte.parseByte(s);
} else {
HLPRXO = Byte.MIN_VALUE;
}
}

protected final void initHLSTAT(String s) {
if (!s.trim().isEmpty()) {
HLSTAT = Short.parseShort(s);
} else {
HLSTAT = Short.MIN_VALUE;
}
}

protected final void initHLSV(String s) {
if (!s.trim().isEmpty()) {
HLSV = Short.parseShort(s);
} else {
HLSV = Short.MIN_VALUE;
}
}

protected final void initHLSVA(String s) {
if (!s.trim().isEmpty()) {
HLSVA = Short.parseShort(s);
} else {
HLSVA = Short.MIN_VALUE;
}
}

protected final void initHLSVAF(String s) {
if (!s.trim().isEmpty()) {
HLSVAF = Short.parseShort(s);
} else {
HLSVAF = Short.MIN_VALUE;
}
}

protected final void initHLSVAN(String s) {
if (!s.trim().isEmpty()) {
HLSVAN = Short.parseShort(s);
} else {
HLSVAN = Short.MIN_VALUE;
}
}

protected final void initHLSVB(String s) {
if (!s.trim().isEmpty()) {
HLSVB = Short.parseShort(s);
} else {
HLSVB = Short.MIN_VALUE;
}
}

protected final void initHLSVBF(String s) {
if (!s.trim().isEmpty()) {
HLSVBF = Short.parseShort(s);
} else {
HLSVBF = Short.MIN_VALUE;
}
}

protected final void initHLSVBN(String s) {
if (!s.trim().isEmpty()) {
HLSVBN = Short.parseShort(s);
} else {
HLSVBN = Short.MIN_VALUE;
}
}

protected final void initHLSVC(String s) {
if (!s.trim().isEmpty()) {
HLSVC = Short.parseShort(s);
} else {
HLSVC = Short.MIN_VALUE;
}
}

protected final void initHLSVCF(String s) {
if (!s.trim().isEmpty()) {
HLSVCF = Short.parseShort(s);
} else {
HLSVCF = Short.MIN_VALUE;
}
}

protected final void initHLSVCN(String s) {
if (!s.trim().isEmpty()) {
HLSVCN = Short.parseShort(s);
} else {
HLSVCN = Short.MIN_VALUE;
}
}

protected final void initHLSVD(String s) {
if (!s.trim().isEmpty()) {
HLSVD = Short.parseShort(s);
} else {
HLSVD = Short.MIN_VALUE;
}
}

protected final void initHLSVDF(String s) {
if (!s.trim().isEmpty()) {
HLSVDF = Short.parseShort(s);
} else {
HLSVDF = Short.MIN_VALUE;
}
}

protected final void initHLSVDN(String s) {
if (!s.trim().isEmpty()) {
HLSVDN = Short.parseShort(s);
} else {
HLSVDN = Short.MIN_VALUE;
}
}

protected final void initHLSVE(String s) {
if (!s.trim().isEmpty()) {
HLSVE = Short.parseShort(s);
} else {
HLSVE = Short.MIN_VALUE;
}
}

protected final void initHLSVEF(String s) {
if (!s.trim().isEmpty()) {
HLSVEF = Short.parseShort(s);
} else {
HLSVEF = Short.MIN_VALUE;
}
}

protected final void initHLSVEN(String s) {
if (!s.trim().isEmpty()) {
HLSVEN = Short.parseShort(s);
} else {
HLSVEN = Short.MIN_VALUE;
}
}

protected final void initHLSVF(String s) {
if (!s.trim().isEmpty()) {
HLSVF = Short.parseShort(s);
} else {
HLSVF = Short.MIN_VALUE;
}
}

protected final void initHLSVFF(String s) {
if (!s.trim().isEmpty()) {
HLSVFF = Short.parseShort(s);
} else {
HLSVFF = Short.MIN_VALUE;
}
}

protected final void initHLSVFN(String s) {
if (!s.trim().isEmpty()) {
HLSVFN = Short.parseShort(s);
} else {
HLSVFN = Short.MIN_VALUE;
}
}

protected final void initHLSVG(String s) {
if (!s.trim().isEmpty()) {
HLSVG = Short.parseShort(s);
} else {
HLSVG = Short.MIN_VALUE;
}
}

protected final void initHLSVGF(String s) {
if (!s.trim().isEmpty()) {
HLSVGF = Short.parseShort(s);
} else {
HLSVGF = Short.MIN_VALUE;
}
}

protected final void initHLSVGN(String s) {
if (!s.trim().isEmpty()) {
HLSVGN = Short.parseShort(s);
} else {
HLSVGN = Short.MIN_VALUE;
}
}

protected final void initHLSVH(String s) {
if (!s.trim().isEmpty()) {
HLSVH = Short.parseShort(s);
} else {
HLSVH = Short.MIN_VALUE;
}
}

protected final void initHLSVHF(String s) {
if (!s.trim().isEmpty()) {
HLSVHF = Byte.parseByte(s);
} else {
HLSVHF = Byte.MIN_VALUE;
}
}

protected final void initHLSVHN(String s) {
if (!s.trim().isEmpty()) {
HLSVHN = Byte.parseByte(s);
} else {
HLSVHN = Byte.MIN_VALUE;
}
}

protected final void initHLSVI(String s) {
if (!s.trim().isEmpty()) {
HLSVI = Short.parseShort(s);
} else {
HLSVI = Short.MIN_VALUE;
}
}

protected final void initHLSVIF(String s) {
if (!s.trim().isEmpty()) {
HLSVIF = Short.parseShort(s);
} else {
HLSVIF = Short.MIN_VALUE;
}
}

protected final void initHLSVIN(String s) {
if (!s.trim().isEmpty()) {
HLSVIN = Short.parseShort(s);
} else {
HLSVIN = Short.MIN_VALUE;
}
}

protected final void initHLSVJ(String s) {
if (!s.trim().isEmpty()) {
HLSVJ = Short.parseShort(s);
} else {
HLSVJ = Short.MIN_VALUE;
}
}

protected final void initHLSVJF(String s) {
if (!s.trim().isEmpty()) {
HLSVJF = Short.parseShort(s);
} else {
HLSVJF = Short.MIN_VALUE;
}
}

protected final void initHLSVJN(String s) {
if (!s.trim().isEmpty()) {
HLSVJN = Short.parseShort(s);
} else {
HLSVJN = Short.MIN_VALUE;
}
}

protected final void initHLSVK(String s) {
if (!s.trim().isEmpty()) {
HLSVK = Short.parseShort(s);
} else {
HLSVK = Short.MIN_VALUE;
}
}

protected final void initHLSVKF(String s) {
if (!s.trim().isEmpty()) {
HLSVKF = Short.parseShort(s);
} else {
HLSVKF = Short.MIN_VALUE;
}
}

protected final void initHLSVKN(String s) {
if (!s.trim().isEmpty()) {
HLSVKN = Short.parseShort(s);
} else {
HLSVKN = Short.MIN_VALUE;
}
}

protected final void initHLSVL(String s) {
if (!s.trim().isEmpty()) {
HLSVL = Short.parseShort(s);
} else {
HLSVL = Short.MIN_VALUE;
}
}

protected final void initHLSVLF(String s) {
if (!s.trim().isEmpty()) {
HLSVLF = Short.parseShort(s);
} else {
HLSVLF = Short.MIN_VALUE;
}
}

protected final void initHLSVLN(String s) {
if (!s.trim().isEmpty()) {
HLSVLN = Short.parseShort(s);
} else {
HLSVLN = Short.MIN_VALUE;
}
}

protected final void initHLSVM(String s) {
if (!s.trim().isEmpty()) {
HLSVM = Short.parseShort(s);
} else {
HLSVM = Short.MIN_VALUE;
}
}

protected final void initHLSVMF(String s) {
if (!s.trim().isEmpty()) {
HLSVMF = Short.parseShort(s);
} else {
HLSVMF = Short.MIN_VALUE;
}
}

protected final void initHLSVMN(String s) {
if (!s.trim().isEmpty()) {
HLSVMN = Short.parseShort(s);
} else {
HLSVMN = Short.MIN_VALUE;
}
}

protected final void initHLTRPN(String s) {
if (!s.trim().isEmpty()) {
HLTRPN = Byte.parseByte(s);
} else {
HLTRPN = Byte.MIN_VALUE;
}
}

protected final void initHLWTE(String s) {
if (!s.trim().isEmpty()) {
HLWTE = Byte.parseByte(s);
} else {
HLWTE = Byte.MIN_VALUE;
}
}

protected final void initHLWTK(String s) {
if (!s.trim().isEmpty()) {
HLWTK = Short.parseShort(s);
} else {
HLWTK = Short.MIN_VALUE;
}
}

protected final void initHLWTL(String s) {
if (!s.trim().isEmpty()) {
HLWTL = Byte.parseByte(s);
} else {
HLWTL = Byte.MIN_VALUE;
}
}

protected final void initHLWTM(String s) {
if (!s.trim().isEmpty()) {
HLWTM = Byte.parseByte(s);
} else {
HLWTM = Byte.MIN_VALUE;
}
}

protected final void initHLWTP(String s) {
if (!s.trim().isEmpty()) {
HLWTP = Byte.parseByte(s);
} else {
HLWTP = Byte.MIN_VALUE;
}
}

protected final void initHLWTPN(String s) {
if (!s.trim().isEmpty()) {
HLWTPN = Byte.parseByte(s);
} else {
HLWTPN = Byte.MIN_VALUE;
}
}

protected final void initHLWTR(String s) {
if (!s.trim().isEmpty()) {
HLWTR = Byte.parseByte(s);
} else {
HLWTR = Byte.MIN_VALUE;
}
}

protected final void initHLWTS(String s) {
if (!s.trim().isEmpty()) {
HLWTS = Byte.parseByte(s);
} else {
HLWTS = Byte.MIN_VALUE;
}
}

protected final void initHOH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
HOH = false;
} else {
HOH = true;
}
}
}

protected final void initHOSP(String s) {
if (!s.trim().isEmpty()) {
HOSP = Short.parseShort(s);
} else {
HOSP = Short.MIN_VALUE;
}
}

protected final void initHOSPCH(String s) {
if (!s.trim().isEmpty()) {
HOSPCH = Short.parseShort(s);
} else {
HOSPCH = Short.MIN_VALUE;
}
}

protected final void initHOSPD(String s) {
if (!s.trim().isEmpty()) {
HOSPD = Short.parseShort(s);
} else {
HOSPD = Short.MIN_VALUE;
}
}

protected final void initHOSPNHS(String s) {
if (!s.trim().isEmpty()) {
HOSPNHS = Short.parseShort(s);
} else {
HOSPNHS = Short.MIN_VALUE;
}
}

protected final void initHOWLNG(String s) {
if (!s.trim().isEmpty()) {
HOWLNG = Short.parseShort(s);
} else {
HOWLNG = Short.MIN_VALUE;
}
}

protected final void initHUBUYS(String s) {
if (!s.trim().isEmpty()) {
HUBUYS = Short.parseShort(s);
} else {
HUBUYS = Short.MIN_VALUE;
}
}

protected final void initHUBUYS_BH(String s) {
if (!s.trim().isEmpty()) {
HUBUYS_BH = Short.parseShort(s);
} else {
HUBUYS_BH = Short.MIN_VALUE;
}
}

protected final void initHUFRYS(String s) {
if (!s.trim().isEmpty()) {
HUFRYS = Short.parseShort(s);
} else {
HUFRYS = Short.MIN_VALUE;
}
}

protected final void initHUFRYS_BH(String s) {
if (!s.trim().isEmpty()) {
HUFRYS_BH = Short.parseShort(s);
} else {
HUFRYS_BH = Short.MIN_VALUE;
}
}

protected final void initHUIRON(String s) {
if (!s.trim().isEmpty()) {
HUIRON = Short.parseShort(s);
} else {
HUIRON = Short.MIN_VALUE;
}
}

protected final void initHUIRON_BH(String s) {
if (!s.trim().isEmpty()) {
HUIRON_BH = Short.parseShort(s);
} else {
HUIRON_BH = Short.MIN_VALUE;
}
}

protected final void initHUMOPS(String s) {
if (!s.trim().isEmpty()) {
HUMOPS = Short.parseShort(s);
} else {
HUMOPS = Short.MIN_VALUE;
}
}

protected final void initHUMOPS_BH(String s) {
if (!s.trim().isEmpty()) {
HUMOPS_BH = Short.parseShort(s);
} else {
HUMOPS_BH = Short.MIN_VALUE;
}
}

protected final void initHUNURS(String s) {
if (!s.trim().isEmpty()) {
HUNURS = Short.parseShort(s);
} else {
HUNURS = Short.MIN_VALUE;
}
}

protected final void initHUSITS(String s) {
if (!s.trim().isEmpty()) {
HUSITS = Short.parseShort(s);
} else {
HUSITS = Short.MIN_VALUE;
}
}

protected final void initHUXPCH(String s) {
if (!s.trim().isEmpty()) {
HUXPCH = Short.parseShort(s);
} else {
HUXPCH = Short.MIN_VALUE;
}
}

protected final void initIENDDATHM(String s) {
if (!s.trim().isEmpty()) {
IENDDATHM = Short.parseShort(s);
} else {
IENDDATHM = Short.MIN_VALUE;
}
}

protected final void initINFTED(String s) {
if (!s.trim().isEmpty()) {
INFTED = Byte.parseByte(s);
} else {
INFTED = Byte.MIN_VALUE;
}
}

protected final void initIODC(String s) {
if (!s.trim().isEmpty()) {
IODC = Short.parseShort(s);
} else {
IODC = Short.MIN_VALUE;
}
}

protected final void initISCED(String s) {
if (!s.trim().isEmpty()) {
ISCED = Short.parseShort(s);
} else {
ISCED = Short.MIN_VALUE;
}
}

protected final void initISTRTDATHM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATHM = Short.parseShort(s);
} else {
ISTRTDATHM = Short.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initIV10A(String s) {
if (!s.trim().isEmpty()) {
IV10A = Byte.parseByte(s);
} else {
IV10A = Byte.MIN_VALUE;
}
}

protected final void initIV10B(String s) {
if (!s.trim().isEmpty()) {
IV10B = Byte.parseByte(s);
} else {
IV10B = Byte.MIN_VALUE;
}
}

protected final void initIV10C(String s) {
if (!s.trim().isEmpty()) {
IV10C = Byte.parseByte(s);
} else {
IV10C = Byte.MIN_VALUE;
}
}

protected final void initIV10D(String s) {
if (!s.trim().isEmpty()) {
IV10D = Byte.parseByte(s);
} else {
IV10D = Byte.MIN_VALUE;
}
}

protected final void initIV10E(String s) {
if (!s.trim().isEmpty()) {
IV10E = Byte.parseByte(s);
} else {
IV10E = Byte.MIN_VALUE;
}
}

protected final void initIV10F(String s) {
if (!s.trim().isEmpty()) {
IV10F = Byte.parseByte(s);
} else {
IV10F = Byte.MIN_VALUE;
}
}

protected final void initIV10G(String s) {
if (!s.trim().isEmpty()) {
IV10G = Byte.parseByte(s);
} else {
IV10G = Byte.MIN_VALUE;
}
}

protected final void initIV10H(String s) {
if (!s.trim().isEmpty()) {
IV10H = Byte.parseByte(s);
} else {
IV10H = Byte.MIN_VALUE;
}
}

protected final void initIV10I(String s) {
if (!s.trim().isEmpty()) {
IV10I = Byte.parseByte(s);
} else {
IV10I = Byte.MIN_VALUE;
}
}

protected final void initIV10J(String s) {
if (!s.trim().isEmpty()) {
IV10J = Byte.parseByte(s);
} else {
IV10J = Byte.MIN_VALUE;
}
}

protected final void initIV10K(String s) {
if (!s.trim().isEmpty()) {
IV10K = Byte.parseByte(s);
} else {
IV10K = Byte.MIN_VALUE;
}
}

protected final void initIV10L(String s) {
if (!s.trim().isEmpty()) {
IV10L = Byte.parseByte(s);
} else {
IV10L = Byte.MIN_VALUE;
}
}

protected final void initIV10NO(String s) {
if (!s.trim().isEmpty()) {
IV10NO = Byte.parseByte(s);
} else {
IV10NO = Byte.MIN_VALUE;
}
}

protected final void initIV2(String s) {
if (!s.trim().isEmpty()) {
IV2 = Short.parseShort(s);
} else {
IV2 = Short.MIN_VALUE;
}
}

protected final void initIV4(String s) {
if (!s.trim().isEmpty()) {
IV4 = Short.parseShort(s);
} else {
IV4 = Short.MIN_VALUE;
}
}

protected final void initIV5(String s) {
if (!s.trim().isEmpty()) {
IV5 = Short.parseShort(s);
} else {
IV5 = Short.MIN_VALUE;
}
}

protected final void initIV5AA(String s) {
if (!s.trim().isEmpty()) {
IV5AA = Byte.parseByte(s);
} else {
IV5AA = Byte.MIN_VALUE;
}
}

protected final void initIV5AB(String s) {
if (!s.trim().isEmpty()) {
IV5AB = Byte.parseByte(s);
} else {
IV5AB = Byte.MIN_VALUE;
}
}

protected final void initIV5AC(String s) {
if (!s.trim().isEmpty()) {
IV5AC = Byte.parseByte(s);
} else {
IV5AC = Byte.MIN_VALUE;
}
}

protected final void initIV6A(String s) {
if (!s.trim().isEmpty()) {
IV6A = Short.parseShort(s);
} else {
IV6A = Short.MIN_VALUE;
}
}

protected final void initIV6B(String s) {
if (!s.trim().isEmpty()) {
IV6B = Short.parseShort(s);
} else {
IV6B = Short.MIN_VALUE;
}
}

protected final void initIV6C(String s) {
if (!s.trim().isEmpty()) {
IV6C = Short.parseShort(s);
} else {
IV6C = Short.MIN_VALUE;
}
}

protected final void initIV6D(String s) {
if (!s.trim().isEmpty()) {
IV6D = Short.parseShort(s);
} else {
IV6D = Short.MIN_VALUE;
}
}

protected final void initIV6E(String s) {
if (!s.trim().isEmpty()) {
IV6E = Short.parseShort(s);
} else {
IV6E = Short.MIN_VALUE;
}
}

protected final void initIV6F(String s) {
if (!s.trim().isEmpty()) {
IV6F = Short.parseShort(s);
} else {
IV6F = Short.MIN_VALUE;
}
}

protected final void initIV7(String s) {
if (!s.trim().isEmpty()) {
IV7 = Short.parseShort(s);
} else {
IV7 = Short.MIN_VALUE;
}
}

protected final void initIV9(String s) {
if (!s.trim().isEmpty()) {
IV9 = Byte.parseByte(s);
} else {
IV9 = Byte.MIN_VALUE;
}
}

protected final void initIVDA(String s) {
if (!s.trim().isEmpty()) {
IVDA = Byte.parseByte(s);
} else {
IVDA = Byte.MIN_VALUE;
}
}

protected final void initIVDB(String s) {
if (!s.trim().isEmpty()) {
IVDB = Byte.parseByte(s);
} else {
IVDB = Byte.MIN_VALUE;
}
}

protected final void initIVDC(String s) {
if (!s.trim().isEmpty()) {
IVDC = Byte.parseByte(s);
} else {
IVDC = Byte.MIN_VALUE;
}
}

protected final void initIVDD(String s) {
if (!s.trim().isEmpty()) {
IVDD = Byte.parseByte(s);
} else {
IVDD = Byte.MIN_VALUE;
}
}

protected final void initIVDE(String s) {
if (!s.trim().isEmpty()) {
IVDE = Byte.parseByte(s);
} else {
IVDE = Byte.MIN_VALUE;
}
}

protected final void initIVEA(String s) {
if (!s.trim().isEmpty()) {
IVEA = Short.parseShort(s);
} else {
IVEA = Short.MIN_VALUE;
}
}

protected final void initIVEB(String s) {
if (!s.trim().isEmpty()) {
IVEB = Short.parseShort(s);
} else {
IVEB = Short.MIN_VALUE;
}
}

protected final void initIVEC(String s) {
if (!s.trim().isEmpty()) {
IVEC = Short.parseShort(s);
} else {
IVEC = Short.MIN_VALUE;
}
}

protected final void initIVED(String s) {
if (!s.trim().isEmpty()) {
IVED = Short.parseShort(s);
} else {
IVED = Short.MIN_VALUE;
}
}

protected final void initIVEE(String s) {
if (!s.trim().isEmpty()) {
IVEE = Short.parseShort(s);
} else {
IVEE = Short.MIN_VALUE;
}
}

protected final void initIVFA(String s) {
if (!s.trim().isEmpty()) {
IVFA = Short.parseShort(s);
} else {
IVFA = Short.MIN_VALUE;
}
}

protected final void initIVFB(String s) {
if (!s.trim().isEmpty()) {
IVFB = Short.parseShort(s);
} else {
IVFB = Short.MIN_VALUE;
}
}

protected final void initIVFC(String s) {
if (!s.trim().isEmpty()) {
IVFC = Short.parseShort(s);
} else {
IVFC = Short.MIN_VALUE;
}
}

protected final void initIVFD(String s) {
if (!s.trim().isEmpty()) {
IVFD = Short.parseShort(s);
} else {
IVFD = Short.MIN_VALUE;
}
}

protected final void initIVFE(String s) {
if (!s.trim().isEmpty()) {
IVFE = Short.parseShort(s);
} else {
IVFE = Short.MIN_VALUE;
}
}

protected final void initIVIOLW(String s) {
if (!s.trim().isEmpty()) {
IVIOLW = Byte.parseByte(s);
} else {
IVIOLW = Byte.MIN_VALUE;
}
}

protected final void initIVJA(String s) {
if (!s.trim().isEmpty()) {
IVJA = Short.parseShort(s);
} else {
IVJA = Short.MIN_VALUE;
}
}

protected final void initIVJB(String s) {
if (!s.trim().isEmpty()) {
IVJB = Short.parseShort(s);
} else {
IVJB = Short.MIN_VALUE;
}
}

protected final void initIVJC(String s) {
if (!s.trim().isEmpty()) {
IVJC = Short.parseShort(s);
} else {
IVJC = Short.MIN_VALUE;
}
}

protected final void initIVJD(String s) {
if (!s.trim().isEmpty()) {
IVJD = Short.parseShort(s);
} else {
IVJD = Short.MIN_VALUE;
}
}

protected final void initIVJE(String s) {
if (!s.trim().isEmpty()) {
IVJE = Short.parseShort(s);
} else {
IVJE = Short.MIN_VALUE;
}
}

protected final void initIVLYR(String s) {
if (!s.trim().isEmpty()) {
IVLYR = Short.parseShort(s);
} else {
IVLYR = Short.MIN_VALUE;
}
}

protected final void initIVMA(String s) {
if (!s.trim().isEmpty()) {
IVMA = Short.parseShort(s);
} else {
IVMA = Short.MIN_VALUE;
}
}

protected final void initIVMB(String s) {
if (!s.trim().isEmpty()) {
IVMB = Short.parseShort(s);
} else {
IVMB = Short.MIN_VALUE;
}
}

protected final void initIVMC(String s) {
if (!s.trim().isEmpty()) {
IVMC = Short.parseShort(s);
} else {
IVMC = Short.MIN_VALUE;
}
}

protected final void initIVMD(String s) {
if (!s.trim().isEmpty()) {
IVMD = Short.parseShort(s);
} else {
IVMD = Short.MIN_VALUE;
}
}

protected final void initIVME(String s) {
if (!s.trim().isEmpty()) {
IVME = Short.parseShort(s);
} else {
IVME = Short.MIN_VALUE;
}
}

protected final void initIVPA(String s) {
if (!s.trim().isEmpty()) {
IVPA = Short.parseShort(s);
} else {
IVPA = Short.MIN_VALUE;
}
}

protected final void initIVPB(String s) {
if (!s.trim().isEmpty()) {
IVPB = Short.parseShort(s);
} else {
IVPB = Short.MIN_VALUE;
}
}

protected final void initIVPC(String s) {
if (!s.trim().isEmpty()) {
IVPC = Short.parseShort(s);
} else {
IVPC = Short.MIN_VALUE;
}
}

protected final void initIVPD(String s) {
if (!s.trim().isEmpty()) {
IVPD = Short.parseShort(s);
} else {
IVPD = Short.MIN_VALUE;
}
}

protected final void initIVPE(String s) {
if (!s.trim().isEmpty()) {
IVPE = Short.parseShort(s);
} else {
IVPE = Short.MIN_VALUE;
}
}

protected final void initIVSC(String s) {
if (!s.trim().isEmpty()) {
IVSC = Short.parseShort(s);
} else {
IVSC = Short.MIN_VALUE;
}
}

protected final void initIVSTAT2(String s) {
if (!s.trim().isEmpty()) {
IVSTAT2 = Byte.parseByte(s);
} else {
IVSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initIVVA(String s) {
if (!s.trim().isEmpty()) {
IVVA = Byte.parseByte(s);
} else {
IVVA = Byte.MIN_VALUE;
}
}

protected final void initIVVB(String s) {
if (!s.trim().isEmpty()) {
IVVB = Byte.parseByte(s);
} else {
IVVB = Byte.MIN_VALUE;
}
}

protected final void initIVVC(String s) {
if (!s.trim().isEmpty()) {
IVVC = Byte.parseByte(s);
} else {
IVVC = Byte.MIN_VALUE;
}
}

protected final void initIVVD(String s) {
if (!s.trim().isEmpty()) {
IVVD = Byte.parseByte(s);
} else {
IVVD = Byte.MIN_VALUE;
}
}

protected final void initIVVE(String s) {
if (!s.trim().isEmpty()) {
IVVE = Byte.parseByte(s);
} else {
IVVE = Byte.MIN_VALUE;
}
}

protected final void initJ1BOSS(String s) {
if (!s.trim().isEmpty()) {
J1BOSS = Byte.parseByte(s);
} else {
J1BOSS = Byte.MIN_VALUE;
}
}

protected final void initJ1CSSF(String s) {
if (!s.trim().isEmpty()) {
J1CSSF = Double.parseDouble(s);
} else {
J1CSSF = Double.NaN;
}
}

protected final void initJ1CSSM(String s) {
if (!s.trim().isEmpty()) {
J1CSSM = Double.parseDouble(s);
} else {
J1CSSM = Double.NaN;
}
}

protected final void initJ1GOLD(String s) {
if (!s.trim().isEmpty()) {
J1GOLD = Byte.parseByte(s);
} else {
J1GOLD = Byte.MIN_VALUE;
}
}

protected final void initJ1HGS(String s) {
if (!s.trim().isEmpty()) {
J1HGS = Double.parseDouble(s);
} else {
J1HGS = Double.NaN;
}
}

protected final void initJ1ISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
J1ISCO88_CC = Short.parseShort(s);
} else {
J1ISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initJ1ISCO_CC(String s) {
if (!s.trim().isEmpty()) {
J1ISCO_CC = s;
}
}

protected final void initJ1MNGR(String s) {
if (!s.trim().isEmpty()) {
J1MNGR = Byte.parseByte(s);
} else {
J1MNGR = Byte.MIN_VALUE;
}
}

protected final void initJ1NONE_BH(String s) {
if (!s.trim().isEmpty()) {
J1NONE_BH = Byte.parseByte(s);
} else {
J1NONE_BH = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC8_DV = Byte.parseByte(s);
} else {
J1NSSEC8_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC_DV = Byte.parseByte(s);
} else {
J1NSSEC_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1RGSC(String s) {
if (!s.trim().isEmpty()) {
J1RGSC = Byte.parseByte(s);
} else {
J1RGSC = Byte.MIN_VALUE;
}
}

protected final void initJ1SEC(String s) {
if (!s.trim().isEmpty()) {
J1SEC = Short.parseShort(s);
} else {
J1SEC = Short.MIN_VALUE;
}
}

protected final void initJ1SEG(String s) {
if (!s.trim().isEmpty()) {
J1SEG = Byte.parseByte(s);
} else {
J1SEG = Byte.MIN_VALUE;
}
}

protected final void initJ1SEMP(String s) {
if (!s.trim().isEmpty()) {
J1SEMP = Byte.parseByte(s);
} else {
J1SEMP = Byte.MIN_VALUE;
}
}

protected final void initJ1SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC00_CC = Short.parseShort(s);
} else {
J1SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC90_CC = Byte.parseByte(s);
} else {
J1SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJ2PAY_BH(String s) {
if (!s.trim().isEmpty()) {
J2PAY_BH = Short.parseShort(s);
} else {
J2PAY_BH = Short.MIN_VALUE;
}
}

protected final void initJ2SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC00_CC = Short.parseShort(s);
} else {
J2SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC90_CC = Short.parseShort(s);
} else {
J2SOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBBGD1(String s) {
if (!s.trim().isEmpty()) {
JBBGD1 = Byte.parseByte(s);
} else {
JBBGD1 = Byte.MIN_VALUE;
}
}

protected final void initJBBGLY(String s) {
if (!s.trim().isEmpty()) {
JBBGLY = Short.parseShort(s);
} else {
JBBGLY = Short.MIN_VALUE;
}
}

protected final void initJBBGLY1(String s) {
if (!s.trim().isEmpty()) {
JBBGLY1 = Byte.parseByte(s);
} else {
JBBGLY1 = Byte.MIN_VALUE;
}
}

protected final void initJBBGM1(String s) {
if (!s.trim().isEmpty()) {
JBBGM1 = Byte.parseByte(s);
} else {
JBBGM1 = Byte.MIN_VALUE;
}
}

protected final void initJBBGY41(String s) {
if (!s.trim().isEmpty()) {
JBBGY41 = Short.parseShort(s);
} else {
JBBGY41 = Short.MIN_VALUE;
}
}

protected final void initJBCHC1(String s) {
if (!s.trim().isEmpty()) {
JBCHC1 = Short.parseShort(s);
} else {
JBCHC1 = Short.MIN_VALUE;
}
}

protected final void initJBCHC2(String s) {
if (!s.trim().isEmpty()) {
JBCHC2 = Short.parseShort(s);
} else {
JBCHC2 = Short.MIN_VALUE;
}
}

protected final void initJBCHC3(String s) {
if (!s.trim().isEmpty()) {
JBCHC3 = Short.parseShort(s);
} else {
JBCHC3 = Short.MIN_VALUE;
}
}

protected final void initJBCHGD(String s) {
if (!s.trim().isEmpty()) {
JBCHGD = Byte.parseByte(s);
} else {
JBCHGD = Byte.MIN_VALUE;
}
}

protected final void initJBCHGLY(String s) {
if (!s.trim().isEmpty()) {
JBCHGLY = Byte.parseByte(s);
} else {
JBCHGLY = Byte.MIN_VALUE;
}
}

protected final void initJBCHGM(String s) {
if (!s.trim().isEmpty()) {
JBCHGM = Byte.parseByte(s);
} else {
JBCHGM = Byte.MIN_VALUE;
}
}

protected final void initJBCHGY4(String s) {
if (!s.trim().isEmpty()) {
JBCHGY4 = Short.parseShort(s);
} else {
JBCHGY4 = Short.MIN_VALUE;
}
}

protected final void initJBCK1(String s) {
if (!s.trim().isEmpty()) {
JBCK1 = Byte.parseByte(s);
} else {
JBCK1 = Byte.MIN_VALUE;
}
}

protected final void initJBCK10(String s) {
if (!s.trim().isEmpty()) {
JBCK10 = Byte.parseByte(s);
} else {
JBCK10 = Byte.MIN_VALUE;
}
}

protected final void initJBCK11(String s) {
if (!s.trim().isEmpty()) {
JBCK11 = Byte.parseByte(s);
} else {
JBCK11 = Byte.MIN_VALUE;
}
}

protected final void initJBCK2(String s) {
if (!s.trim().isEmpty()) {
JBCK2 = Byte.parseByte(s);
} else {
JBCK2 = Byte.MIN_VALUE;
}
}

protected final void initJBCK3(String s) {
if (!s.trim().isEmpty()) {
JBCK3 = Byte.parseByte(s);
} else {
JBCK3 = Byte.MIN_VALUE;
}
}

protected final void initJBCK4(String s) {
if (!s.trim().isEmpty()) {
JBCK4 = Byte.parseByte(s);
} else {
JBCK4 = Byte.MIN_VALUE;
}
}

protected final void initJBCK5(String s) {
if (!s.trim().isEmpty()) {
JBCK5 = Byte.parseByte(s);
} else {
JBCK5 = Byte.MIN_VALUE;
}
}

protected final void initJBCK6(String s) {
if (!s.trim().isEmpty()) {
JBCK6 = Byte.parseByte(s);
} else {
JBCK6 = Byte.MIN_VALUE;
}
}

protected final void initJBCK7(String s) {
if (!s.trim().isEmpty()) {
JBCK7 = Byte.parseByte(s);
} else {
JBCK7 = Byte.MIN_VALUE;
}
}

protected final void initJBCK8(String s) {
if (!s.trim().isEmpty()) {
JBCK8 = Byte.parseByte(s);
} else {
JBCK8 = Byte.MIN_VALUE;
}
}

protected final void initJBCK9(String s) {
if (!s.trim().isEmpty()) {
JBCK9 = Byte.parseByte(s);
} else {
JBCK9 = Byte.MIN_VALUE;
}
}

protected final void initJBCSPL(String s) {
if (!s.trim().isEmpty()) {
JBCSPL = Byte.parseByte(s);
} else {
JBCSPL = Byte.MIN_VALUE;
}
}

protected final void initJBCSSF(String s) {
if (!s.trim().isEmpty()) {
JBCSSF = Double.parseDouble(s);
} else {
JBCSSF = Double.NaN;
}
}

protected final void initJBCSSM(String s) {
if (!s.trim().isEmpty()) {
JBCSSM = Double.parseDouble(s);
} else {
JBCSSM = Double.NaN;
}
}

protected final void initJBEMPP(String s) {
if (!s.trim().isEmpty()) {
JBEMPP = Byte.parseByte(s);
} else {
JBEMPP = Byte.MIN_VALUE;
}
}

protected final void initJBEMPR(String s) {
if (!s.trim().isEmpty()) {
JBEMPR = Byte.parseByte(s);
} else {
JBEMPR = Byte.MIN_VALUE;
}
}

protected final void initJBGOLD(String s) {
if (!s.trim().isEmpty()) {
JBGOLD = Short.parseShort(s);
} else {
JBGOLD = Short.MIN_VALUE;
}
}

protected final void initJBHGS(String s) {
if (!s.trim().isEmpty()) {
JBHGS = Double.parseDouble(s);
} else {
JBHGS = Double.NaN;
}
}

protected final void initJBHRLK(String s) {
if (!s.trim().isEmpty()) {
JBHRLK = Short.parseShort(s);
} else {
JBHRLK = Short.MIN_VALUE;
}
}

protected final void initJBISCO_CC(String s) {
if (!s.trim().isEmpty()) {
JBISCO_CC = s;
}
}

protected final void initJBLKCHA(String s) {
if (!s.trim().isEmpty()) {
JBLKCHA = Byte.parseByte(s);
} else {
JBLKCHA = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHB(String s) {
if (!s.trim().isEmpty()) {
JBLKCHB = Byte.parseByte(s);
} else {
JBLKCHB = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHC(String s) {
if (!s.trim().isEmpty()) {
JBLKCHC = Byte.parseByte(s);
} else {
JBLKCHC = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHD(String s) {
if (!s.trim().isEmpty()) {
JBLKCHD = Byte.parseByte(s);
} else {
JBLKCHD = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHE(String s) {
if (!s.trim().isEmpty()) {
JBLKCHE = Byte.parseByte(s);
} else {
JBLKCHE = Byte.MIN_VALUE;
}
}

protected final void initJBMNGP(String s) {
if (!s.trim().isEmpty()) {
JBMNGP = Byte.parseByte(s);
} else {
JBMNGP = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC_DV = Short.parseShort(s);
} else {
JBNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJBOFFY_BH(String s) {
if (!s.trim().isEmpty()) {
JBOFFY_BH = Short.parseShort(s);
} else {
JBOFFY_BH = Short.MIN_VALUE;
}
}

protected final void initJBONAM(String s) {
if (!s.trim().isEmpty()) {
JBONAM = Integer.parseInt(s);
} else {
JBONAM = Integer.MIN_VALUE;
}
}

protected final void initJBONG(String s) {
if (!s.trim().isEmpty()) {
JBONG = Byte.parseByte(s);
} else {
JBONG = Byte.MIN_VALUE;
}
}

protected final void initJBONUS(String s) {
if (!s.trim().isEmpty()) {
JBONUS = Short.parseShort(s);
} else {
JBONUS = Short.MIN_VALUE;
}
}

protected final void initJBOPPS(String s) {
if (!s.trim().isEmpty()) {
JBOPPS = Short.parseShort(s);
} else {
JBOPPS = Short.MIN_VALUE;
}
}

protected final void initJBPEN(String s) {
if (!s.trim().isEmpty()) {
JBPEN = Short.parseShort(s);
} else {
JBPEN = Short.MIN_VALUE;
}
}

protected final void initJBPENM(String s) {
if (!s.trim().isEmpty()) {
JBPENM = Short.parseShort(s);
} else {
JBPENM = Short.MIN_VALUE;
}
}

protected final void initJBPERFP(String s) {
if (!s.trim().isEmpty()) {
JBPERFP = Byte.parseByte(s);
} else {
JBPERFP = Byte.MIN_VALUE;
}
}

protected final void initJBPL_BH(String s) {
if (!s.trim().isEmpty()) {
JBPL_BH = Short.parseShort(s);
} else {
JBPL_BH = Short.MIN_VALUE;
}
}

protected final void initJBPROM(String s) {
if (!s.trim().isEmpty()) {
JBPROM = Byte.parseByte(s);
} else {
JBPROM = Byte.MIN_VALUE;
}
}

protected final void initJBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JBRGSC_DV = Short.parseShort(s);
} else {
JBRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJBRISE(String s) {
if (!s.trim().isEmpty()) {
JBRISE = Short.parseShort(s);
} else {
JBRISE = Short.MIN_VALUE;
}
}

protected final void initJBSAT2(String s) {
if (!s.trim().isEmpty()) {
JBSAT2 = Short.parseShort(s);
} else {
JBSAT2 = Short.MIN_VALUE;
}
}

protected final void initJBSAT4(String s) {
if (!s.trim().isEmpty()) {
JBSAT4 = Short.parseShort(s);
} else {
JBSAT4 = Short.MIN_VALUE;
}
}

protected final void initJBSAT6(String s) {
if (!s.trim().isEmpty()) {
JBSAT6 = Short.parseShort(s);
} else {
JBSAT6 = Short.MIN_VALUE;
}
}

protected final void initJBSAT7(String s) {
if (!s.trim().isEmpty()) {
JBSAT7 = Short.parseShort(s);
} else {
JBSAT7 = Short.MIN_VALUE;
}
}

protected final void initJBSAT_BH(String s) {
if (!s.trim().isEmpty()) {
JBSAT_BH = Short.parseShort(s);
} else {
JBSAT_BH = Short.MIN_VALUE;
}
}

protected final void initJBSECTP(String s) {
if (!s.trim().isEmpty()) {
JBSECTP = Byte.parseByte(s);
} else {
JBSECTP = Byte.MIN_VALUE;
}
}

protected final void initJBSECT_BH(String s) {
if (!s.trim().isEmpty()) {
JBSECT_BH = Short.parseShort(s);
} else {
JBSECT_BH = Short.MIN_VALUE;
}
}

protected final void initJBSEC_BH(String s) {
if (!s.trim().isEmpty()) {
JBSEC_BH = Short.parseShort(s);
} else {
JBSEC_BH = Short.MIN_VALUE;
}
}

protected final void initJBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JBSEG_DV = Short.parseShort(s);
} else {
JBSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJBSEMPP(String s) {
if (!s.trim().isEmpty()) {
JBSEMPP = Byte.parseByte(s);
} else {
JBSEMPP = Byte.MIN_VALUE;
}
}

protected final void initJBSEMPR(String s) {
if (!s.trim().isEmpty()) {
JBSEMPR = Byte.parseByte(s);
} else {
JBSEMPR = Byte.MIN_VALUE;
}
}

protected final void initJBSIC92(String s) {
if (!s.trim().isEmpty()) {
JBSIC92 = Short.parseShort(s);
} else {
JBSIC92 = Short.MIN_VALUE;
}
}

protected final void initJBSICP(String s) {
if (!s.trim().isEmpty()) {
JBSICP = Byte.parseByte(s);
} else {
JBSICP = Byte.MIN_VALUE;
}
}

protected final void initJBSICR(String s) {
if (!s.trim().isEmpty()) {
JBSICR = Byte.parseByte(s);
} else {
JBSICR = Byte.MIN_VALUE;
}
}

protected final void initJBSIZEP(String s) {
if (!s.trim().isEmpty()) {
JBSIZEP = Byte.parseByte(s);
} else {
JBSIZEP = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC00_CC = Short.parseShort(s);
} else {
JBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOC90LY_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC90LY_CC = Short.parseShort(s);
} else {
JBSOC90LY_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC90_CC = Short.parseShort(s);
} else {
JBSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOCP(String s) {
if (!s.trim().isEmpty()) {
JBSOCP = Byte.parseByte(s);
} else {
JBSOCP = Byte.MIN_VALUE;
}
}

protected final void initJBSOCR(String s) {
if (!s.trim().isEmpty()) {
JBSOCR = Byte.parseByte(s);
} else {
JBSOCR = Byte.MIN_VALUE;
}
}

protected final void initJBSTATL(String s) {
if (!s.trim().isEmpty()) {
JBSTATL = Short.parseShort(s);
} else {
JBSTATL = Short.MIN_VALUE;
}
}

protected final void initJBSTATT(String s) {
if (!s.trim().isEmpty()) {
JBSTATT = Short.parseShort(s);
} else {
JBSTATT = Short.MIN_VALUE;
}
}

protected final void initJBTERM1(String s) {
if (!s.trim().isEmpty()) {
JBTERM1 = Byte.parseByte(s);
} else {
JBTERM1 = Byte.MIN_VALUE;
}
}

protected final void initJBTERM2(String s) {
if (!s.trim().isEmpty()) {
JBTERM2 = Byte.parseByte(s);
} else {
JBTERM2 = Byte.MIN_VALUE;
}
}

protected final void initJBTERM2_BH(String s) {
if (!s.trim().isEmpty()) {
JBTERM2_BH = Byte.parseByte(s);
} else {
JBTERM2_BH = Byte.MIN_VALUE;
}
}

protected final void initJBTIME(String s) {
if (!s.trim().isEmpty()) {
JBTIME = Short.parseShort(s);
} else {
JBTIME = Short.MIN_VALUE;
}
}

protected final void initJBTTWM(String s) {
if (!s.trim().isEmpty()) {
JBTTWM = Short.parseShort(s);
} else {
JBTTWM = Short.MIN_VALUE;
}
}

protected final void initJBUB(String s) {
if (!s.trim().isEmpty()) {
JBUB = Short.parseShort(s);
} else {
JBUB = Short.MIN_VALUE;
}
}

protected final void initJBUBY(String s) {
if (!s.trim().isEmpty()) {
JBUBY = Short.parseShort(s);
} else {
JBUBY = Short.MIN_VALUE;
}
}

protected final void initJBWKHRA(String s) {
if (!s.trim().isEmpty()) {
JBWKHRA = Byte.parseByte(s);
} else {
JBWKHRA = Byte.MIN_VALUE;
}
}

protected final void initJBWKHRB(String s) {
if (!s.trim().isEmpty()) {
JBWKHRB = Byte.parseByte(s);
} else {
JBWKHRB = Byte.MIN_VALUE;
}
}

protected final void initJBWKHRC(String s) {
if (!s.trim().isEmpty()) {
JBWKHRC = Byte.parseByte(s);
} else {
JBWKHRC = Byte.MIN_VALUE;
}
}

protected final void initJBWKHRD(String s) {
if (!s.trim().isEmpty()) {
JBWKHRD = Byte.parseByte(s);
} else {
JBWKHRD = Byte.MIN_VALUE;
}
}

protected final void initJBWKHRE(String s) {
if (!s.trim().isEmpty()) {
JBWKHRE = Byte.parseByte(s);
} else {
JBWKHRE = Byte.MIN_VALUE;
}
}

protected final void initJBWKHRF(String s) {
if (!s.trim().isEmpty()) {
JBWKHRF = Byte.parseByte(s);
} else {
JBWKHRF = Byte.MIN_VALUE;
}
}

protected final void initJBWKHRG(String s) {
if (!s.trim().isEmpty()) {
JBWKHRG = Byte.parseByte(s);
} else {
JBWKHRG = Byte.MIN_VALUE;
}
}

protected final void initJBWKHRH(String s) {
if (!s.trim().isEmpty()) {
JBWKHRH = Byte.parseByte(s);
} else {
JBWKHRH = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHA(String s) {
if (!s.trim().isEmpty()) {
JBXPCHA = Byte.parseByte(s);
} else {
JBXPCHA = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHB(String s) {
if (!s.trim().isEmpty()) {
JBXPCHB = Byte.parseByte(s);
} else {
JBXPCHB = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHC(String s) {
if (!s.trim().isEmpty()) {
JBXPCHC = Byte.parseByte(s);
} else {
JBXPCHC = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHD(String s) {
if (!s.trim().isEmpty()) {
JBXPCHD = Byte.parseByte(s);
} else {
JBXPCHD = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHE(String s) {
if (!s.trim().isEmpty()) {
JBXPCHE = Byte.parseByte(s);
} else {
JBXPCHE = Byte.MIN_VALUE;
}
}

protected final void initJHSTPY(String s) {
if (!s.trim().isEmpty()) {
JHSTPY = Byte.parseByte(s);
} else {
JHSTPY = Byte.MIN_VALUE;
}
}

protected final void initJLCSSF(String s) {
if (!s.trim().isEmpty()) {
JLCSSF = Double.parseDouble(s);
} else {
JLCSSF = Double.NaN;
}
}

protected final void initJLCSSM(String s) {
if (!s.trim().isEmpty()) {
JLCSSM = Double.parseDouble(s);
} else {
JLCSSM = Double.NaN;
}
}

protected final void initJLGOLD(String s) {
if (!s.trim().isEmpty()) {
JLGOLD = Short.parseShort(s);
} else {
JLGOLD = Short.MIN_VALUE;
}
}

protected final void initJLHGS(String s) {
if (!s.trim().isEmpty()) {
JLHGS = Double.parseDouble(s);
} else {
JLHGS = Double.NaN;
}
}

protected final void initJLID(String s) {
if (!s.trim().isEmpty()) {
JLID = Short.parseShort(s);
} else {
JLID = Short.MIN_VALUE;
}
}

protected final void initJLISCO_CC(String s) {
if (!s.trim().isEmpty()) {
JLISCO_CC = s;
}
}

protected final void initJLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC_DV = Short.parseShort(s);
} else {
JLNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JLRGSC_DV = Short.parseShort(s);
} else {
JLRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJLSEC(String s) {
if (!s.trim().isEmpty()) {
JLSEC = Short.parseShort(s);
} else {
JLSEC = Short.MIN_VALUE;
}
}

protected final void initJLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JLSEG_DV = Short.parseShort(s);
} else {
JLSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJLSIC92(String s) {
if (!s.trim().isEmpty()) {
JLSIC92 = Short.parseShort(s);
} else {
JLSIC92 = Short.MIN_VALUE;
}
}

protected final void initJLSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC00_CC = Short.parseShort(s);
} else {
JLSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJLSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC90_CC = Short.parseShort(s);
} else {
JLSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJLYID(String s) {
if (!s.trim().isEmpty()) {
JLYID = Short.parseShort(s);
} else {
JLYID = Short.MIN_VALUE;
}
}

protected final void initJNMNTH(String s) {
if (!s.trim().isEmpty()) {
JNMNTH = Short.parseShort(s);
} else {
JNMNTH = Short.MIN_VALUE;
}
}

protected final void initJNYEAR(String s) {
if (!s.trim().isEmpty()) {
JNYEAR = Short.parseShort(s);
} else {
JNYEAR = Short.MIN_VALUE;
}
}

protected final void initJSBGD1(String s) {
if (!s.trim().isEmpty()) {
JSBGD1 = Byte.parseByte(s);
} else {
JSBGD1 = Byte.MIN_VALUE;
}
}

protected final void initJSBGLY(String s) {
if (!s.trim().isEmpty()) {
JSBGLY = Byte.parseByte(s);
} else {
JSBGLY = Byte.MIN_VALUE;
}
}

protected final void initJSBGLY1(String s) {
if (!s.trim().isEmpty()) {
JSBGLY1 = Byte.parseByte(s);
} else {
JSBGLY1 = Byte.MIN_VALUE;
}
}

protected final void initJSBGM1(String s) {
if (!s.trim().isEmpty()) {
JSBGM1 = Byte.parseByte(s);
} else {
JSBGM1 = Byte.MIN_VALUE;
}
}

protected final void initJSBGY4(String s) {
if (!s.trim().isEmpty()) {
JSBGY4 = Short.parseShort(s);
} else {
JSBGY4 = Short.MIN_VALUE;
}
}

protected final void initJSBGY41(String s) {
if (!s.trim().isEmpty()) {
JSBGY41 = Short.parseShort(s);
} else {
JSBGY41 = Short.MIN_VALUE;
}
}

protected final void initJSCK1(String s) {
if (!s.trim().isEmpty()) {
JSCK1 = Byte.parseByte(s);
} else {
JSCK1 = Byte.MIN_VALUE;
}
}

protected final void initJSHRLK(String s) {
if (!s.trim().isEmpty()) {
JSHRLK = Short.parseShort(s);
} else {
JSHRLK = Short.MIN_VALUE;
}
}

protected final void initJSLOSS(String s) {
if (!s.trim().isEmpty()) {
JSLOSS = Double.parseDouble(s);
} else {
JSLOSS = Double.NaN;
}
}

protected final void initJSPART(String s) {
if (!s.trim().isEmpty()) {
JSPART = Byte.parseByte(s);
} else {
JSPART = Byte.MIN_VALUE;
}
}

protected final void initJSPAYG(String s) {
if (!s.trim().isEmpty()) {
JSPAYG = Double.parseDouble(s);
} else {
JSPAYG = Double.NaN;
}
}

protected final void initJSPAYGI(String s) {
if (!s.trim().isEmpty()) {
JSPAYGI = Short.parseShort(s);
} else {
JSPAYGI = Short.MIN_VALUE;
}
}

protected final void initJSPAYU(String s) {
if (!s.trim().isEmpty()) {
JSPAYU = Integer.parseInt(s);
} else {
JSPAYU = Integer.MIN_VALUE;
}
}

protected final void initJSPAYW(String s) {
if (!s.trim().isEmpty()) {
JSPAYW = Byte.parseByte(s);
} else {
JSPAYW = Byte.MIN_VALUE;
}
}

protected final void initJSPAYW_BH(String s) {
if (!s.trim().isEmpty()) {
JSPAYW_BH = Double.parseDouble(s);
} else {
JSPAYW_BH = Double.NaN;
}
}

protected final void initJSPL_BH(String s) {
if (!s.trim().isEmpty()) {
JSPL_BH = Short.parseShort(s);
} else {
JSPL_BH = Short.MIN_VALUE;
}
}

protected final void initJSPRLS(String s) {
if (!s.trim().isEmpty()) {
JSPRLS = Byte.parseByte(s);
} else {
JSPRLS = Byte.MIN_VALUE;
}
}

protected final void initJSPRNI(String s) {
if (!s.trim().isEmpty()) {
JSPRNI = Byte.parseByte(s);
} else {
JSPRNI = Byte.MIN_VALUE;
}
}

protected final void initJSPROF(String s) {
if (!s.trim().isEmpty()) {
JSPROF = Double.parseDouble(s);
} else {
JSPROF = Double.NaN;
}
}

protected final void initJSPROFI(String s) {
if (!s.trim().isEmpty()) {
JSPROFI = Short.parseShort(s);
} else {
JSPROFI = Short.MIN_VALUE;
}
}

protected final void initJSPRTX(String s) {
if (!s.trim().isEmpty()) {
JSPRTX = Byte.parseByte(s);
} else {
JSPRTX = Byte.MIN_VALUE;
}
}

protected final void initJSPYNI(String s) {
if (!s.trim().isEmpty()) {
JSPYNI = Byte.parseByte(s);
} else {
JSPYNI = Byte.MIN_VALUE;
}
}

protected final void initJSPYTX(String s) {
if (!s.trim().isEmpty()) {
JSPYTX = Byte.parseByte(s);
} else {
JSPYTX = Byte.MIN_VALUE;
}
}

protected final void initJSSAME(String s) {
if (!s.trim().isEmpty()) {
JSSAME = Byte.parseByte(s);
} else {
JSSAME = Byte.MIN_VALUE;
}
}

protected final void initJSSAT(String s) {
if (!s.trim().isEmpty()) {
JSSAT = Short.parseShort(s);
} else {
JSSAT = Short.MIN_VALUE;
}
}

protected final void initJSSAT1(String s) {
if (!s.trim().isEmpty()) {
JSSAT1 = Short.parseShort(s);
} else {
JSSAT1 = Short.MIN_VALUE;
}
}

protected final void initJSSAT2(String s) {
if (!s.trim().isEmpty()) {
JSSAT2 = Short.parseShort(s);
} else {
JSSAT2 = Short.MIN_VALUE;
}
}

protected final void initJSSAT4(String s) {
if (!s.trim().isEmpty()) {
JSSAT4 = Short.parseShort(s);
} else {
JSSAT4 = Short.MIN_VALUE;
}
}

protected final void initJSSAT5(String s) {
if (!s.trim().isEmpty()) {
JSSAT5 = Short.parseShort(s);
} else {
JSSAT5 = Short.MIN_VALUE;
}
}

protected final void initJSTIME(String s) {
if (!s.trim().isEmpty()) {
JSTIME = Short.parseShort(s);
} else {
JSTIME = Short.MIN_VALUE;
}
}

protected final void initJSTTWM(String s) {
if (!s.trim().isEmpty()) {
JSTTWM = Short.parseShort(s);
} else {
JSTTWM = Short.MIN_VALUE;
}
}

protected final void initJSTYPEB(String s) {
if (!s.trim().isEmpty()) {
JSTYPEB = Byte.parseByte(s);
} else {
JSTYPEB = Byte.MIN_VALUE;
}
}

protected final void initJTYID(String s) {
if (!s.trim().isEmpty()) {
JTYID = Short.parseShort(s);
} else {
JTYID = Short.MIN_VALUE;
}
}

protected final void initJUBGN(String s) {
if (!s.trim().isEmpty()) {
JUBGN = Short.parseShort(s);
} else {
JUBGN = Short.MIN_VALUE;
}
}

protected final void initJUHRSL(String s) {
if (!s.trim().isEmpty()) {
JUHRSL = Short.parseShort(s);
} else {
JUHRSL = Short.MIN_VALUE;
}
}

protected final void initJUHRSX(String s) {
if (!s.trim().isEmpty()) {
JUHRSX = Short.parseShort(s);
} else {
JUHRSX = Short.MIN_VALUE;
}
}

protected final void initJULK1(String s) {
if (!s.trim().isEmpty()) {
JULK1 = Short.parseShort(s);
} else {
JULK1 = Short.MIN_VALUE;
}
}

protected final void initJULK4(String s) {
if (!s.trim().isEmpty()) {
JULK4 = Short.parseShort(s);
} else {
JULK4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X1(String s) {
if (!s.trim().isEmpty()) {
JULK4X1 = Short.parseShort(s);
} else {
JULK4X1 = Short.MIN_VALUE;
}
}

protected final void initJULK4X2(String s) {
if (!s.trim().isEmpty()) {
JULK4X2 = Short.parseShort(s);
} else {
JULK4X2 = Short.MIN_VALUE;
}
}

protected final void initJULK4X4(String s) {
if (!s.trim().isEmpty()) {
JULK4X4 = Short.parseShort(s);
} else {
JULK4X4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X5(String s) {
if (!s.trim().isEmpty()) {
JULK4X5 = Short.parseShort(s);
} else {
JULK4X5 = Short.MIN_VALUE;
}
}

protected final void initJULK4X6(String s) {
if (!s.trim().isEmpty()) {
JULK4X6 = Short.parseShort(s);
} else {
JULK4X6 = Short.MIN_VALUE;
}
}

protected final void initJULKA(String s) {
if (!s.trim().isEmpty()) {
JULKA = Short.parseShort(s);
} else {
JULKA = Short.MIN_VALUE;
}
}

protected final void initJULKB(String s) {
if (!s.trim().isEmpty()) {
JULKB = Short.parseShort(s);
} else {
JULKB = Short.MIN_VALUE;
}
}

protected final void initJULKC(String s) {
if (!s.trim().isEmpty()) {
JULKC = Short.parseShort(s);
} else {
JULKC = Short.MIN_VALUE;
}
}

protected final void initJULKD(String s) {
if (!s.trim().isEmpty()) {
JULKD = Short.parseShort(s);
} else {
JULKD = Short.MIN_VALUE;
}
}

protected final void initJULKE(String s) {
if (!s.trim().isEmpty()) {
JULKE = Short.parseShort(s);
} else {
JULKE = Short.MIN_VALUE;
}
}

protected final void initJUPAYL(String s) {
if (!s.trim().isEmpty()) {
JUPAYL = Short.parseShort(s);
} else {
JUPAYL = Short.MIN_VALUE;
}
}

protected final void initJUPAYX(String s) {
if (!s.trim().isEmpty()) {
JUPAYX = Short.parseShort(s);
} else {
JUPAYX = Short.MIN_VALUE;
}
}

protected final void initJUSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JUSOC00_CC = Short.parseShort(s);
} else {
JUSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJUSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JUSOC90_CC = Short.parseShort(s);
} else {
JUSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJUSPEC(String s) {
if (!s.trim().isEmpty()) {
JUSPEC = Short.parseShort(s);
} else {
JUSPEC = Short.MIN_VALUE;
}
}

protected final void initLACTA(String s) {
if (!s.trim().isEmpty()) {
LACTA = Short.parseShort(s);
} else {
LACTA = Short.MIN_VALUE;
}
}

protected final void initLACTB(String s) {
if (!s.trim().isEmpty()) {
LACTB = Short.parseShort(s);
} else {
LACTB = Short.MIN_VALUE;
}
}

protected final void initLACTC(String s) {
if (!s.trim().isEmpty()) {
LACTC = Short.parseShort(s);
} else {
LACTC = Short.MIN_VALUE;
}
}

protected final void initLACTD(String s) {
if (!s.trim().isEmpty()) {
LACTD = Short.parseShort(s);
} else {
LACTD = Short.MIN_VALUE;
}
}

protected final void initLACTE(String s) {
if (!s.trim().isEmpty()) {
LACTE = Short.parseShort(s);
} else {
LACTE = Short.MIN_VALUE;
}
}

protected final void initLACTF(String s) {
if (!s.trim().isEmpty()) {
LACTF = Short.parseShort(s);
} else {
LACTF = Short.MIN_VALUE;
}
}

protected final void initLACTH(String s) {
if (!s.trim().isEmpty()) {
LACTH = Short.parseShort(s);
} else {
LACTH = Short.MIN_VALUE;
}
}

protected final void initLACTI(String s) {
if (!s.trim().isEmpty()) {
LACTI = Short.parseShort(s);
} else {
LACTI = Short.MIN_VALUE;
}
}

protected final void initLACTJ(String s) {
if (!s.trim().isEmpty()) {
LACTJ = Short.parseShort(s);
} else {
LACTJ = Short.MIN_VALUE;
}
}

protected final void initLACTK(String s) {
if (!s.trim().isEmpty()) {
LACTK = Short.parseShort(s);
} else {
LACTK = Short.MIN_VALUE;
}
}

protected final void initLACTL(String s) {
if (!s.trim().isEmpty()) {
LACTL = Short.parseShort(s);
} else {
LACTL = Short.MIN_VALUE;
}
}

protected final void initLCOH(String s) {
if (!s.trim().isEmpty()) {
LCOH = Byte.parseByte(s);
} else {
LCOH = Byte.MIN_VALUE;
}
}

protected final void initLEWGHT(String s) {
if (!s.trim().isEmpty()) {
LEWGHT = Double.parseDouble(s);
} else {
LEWGHT = Double.NaN;
}
}

protected final void initLEWTSW1(String s) {
if (!s.trim().isEmpty()) {
LEWTSW1 = Double.parseDouble(s);
} else {
LEWTSW1 = Double.NaN;
}
}

protected final void initLEWTSW2(String s) {
if (!s.trim().isEmpty()) {
LEWTSW2 = Double.parseDouble(s);
} else {
LEWTSW2 = Double.NaN;
}
}

protected final void initLEWTUK1(String s) {
if (!s.trim().isEmpty()) {
LEWTUK1 = Double.parseDouble(s);
} else {
LEWTUK1 = Double.NaN;
}
}

protected final void initLEWTUK2(String s) {
if (!s.trim().isEmpty()) {
LEWTUK2 = Double.parseDouble(s);
} else {
LEWTUK2 = Double.NaN;
}
}

protected final void initLFSAT1(String s) {
if (!s.trim().isEmpty()) {
LFSAT1 = Short.parseShort(s);
} else {
LFSAT1 = Short.MIN_VALUE;
}
}

protected final void initLFSAT2(String s) {
if (!s.trim().isEmpty()) {
LFSAT2 = Short.parseShort(s);
} else {
LFSAT2 = Short.MIN_VALUE;
}
}

protected final void initLFSAT3(String s) {
if (!s.trim().isEmpty()) {
LFSAT3 = Short.parseShort(s);
} else {
LFSAT3 = Short.MIN_VALUE;
}
}

protected final void initLFSAT4(String s) {
if (!s.trim().isEmpty()) {
LFSAT4 = Short.parseShort(s);
} else {
LFSAT4 = Short.MIN_VALUE;
}
}

protected final void initLFSAT5(String s) {
if (!s.trim().isEmpty()) {
LFSAT5 = Short.parseShort(s);
} else {
LFSAT5 = Short.MIN_VALUE;
}
}

protected final void initLFSAT6(String s) {
if (!s.trim().isEmpty()) {
LFSAT6 = Short.parseShort(s);
} else {
LFSAT6 = Short.MIN_VALUE;
}
}

protected final void initLFSAT7(String s) {
if (!s.trim().isEmpty()) {
LFSAT7 = Short.parseShort(s);
} else {
LFSAT7 = Short.MIN_VALUE;
}
}

protected final void initLFSAT8(String s) {
if (!s.trim().isEmpty()) {
LFSAT8 = Short.parseShort(s);
} else {
LFSAT8 = Short.MIN_VALUE;
}
}

protected final void initLFSATL(String s) {
if (!s.trim().isEmpty()) {
LFSATL = Short.parseShort(s);
} else {
LFSATL = Short.MIN_VALUE;
}
}

protected final void initLFSATO(String s) {
if (!s.trim().isEmpty()) {
LFSATO = Short.parseShort(s);
} else {
LFSATO = Short.MIN_VALUE;
}
}

protected final void initLKMOVY(String s) {
if (!s.trim().isEmpty()) {
LKMOVY = Short.parseShort(s);
} else {
LKMOVY = Short.MIN_VALUE;
}
}

protected final void initLKNBRD(String s) {
if (!s.trim().isEmpty()) {
LKNBRD = Short.parseShort(s);
} else {
LKNBRD = Short.MIN_VALUE;
}
}

protected final void initLMAR1M(String s) {
if (!s.trim().isEmpty()) {
LMAR1M = Byte.parseByte(s);
} else {
LMAR1M = Byte.MIN_VALUE;
}
}

protected final void initLMAR1Y(String s) {
if (!s.trim().isEmpty()) {
LMAR1Y = Short.parseShort(s);
} else {
LMAR1Y = Short.MIN_VALUE;
}
}

protected final void initLNPRNT(String s) {
if (!s.trim().isEmpty()) {
LNPRNT = Byte.parseByte(s);
} else {
LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initLPRNT(String s) {
if (!s.trim().isEmpty()) {
LPRNT = Byte.parseByte(s);
} else {
LPRNT = Byte.MIN_VALUE;
}
}

protected final void initLRWGHT(String s) {
if (!s.trim().isEmpty()) {
LRWGHT = Double.parseDouble(s);
} else {
LRWGHT = Double.NaN;
}
}

protected final void initLRWTSW1(String s) {
if (!s.trim().isEmpty()) {
LRWTSW1 = Double.parseDouble(s);
} else {
LRWTSW1 = Double.NaN;
}
}

protected final void initLRWTSW2(String s) {
if (!s.trim().isEmpty()) {
LRWTSW2 = Double.parseDouble(s);
} else {
LRWTSW2 = Double.NaN;
}
}

protected final void initLRWTUK1(String s) {
if (!s.trim().isEmpty()) {
LRWTUK1 = Double.parseDouble(s);
} else {
LRWTUK1 = Double.NaN;
}
}

protected final void initLRWTUK2(String s) {
if (!s.trim().isEmpty()) {
LRWTUK2 = Double.parseDouble(s);
} else {
LRWTUK2 = Double.NaN;
}
}

protected final void initLVCH(String s) {
if (!s.trim().isEmpty()) {
LVCH = Byte.parseByte(s);
} else {
LVCH = Byte.MIN_VALUE;
}
}

protected final void initLVGCH(String s) {
if (!s.trim().isEmpty()) {
LVGCH = Byte.parseByte(s);
} else {
LVGCH = Byte.MIN_VALUE;
}
}

protected final void initLVGGCH(String s) {
if (!s.trim().isEmpty()) {
LVGGCH = Byte.parseByte(s);
} else {
LVGGCH = Byte.MIN_VALUE;
}
}

protected final void initLVGGPA(String s) {
if (!s.trim().isEmpty()) {
LVGGPA = Byte.parseByte(s);
} else {
LVGGPA = Byte.MIN_VALUE;
}
}

protected final void initLVGPAR(String s) {
if (!s.trim().isEmpty()) {
LVGPAR = Byte.parseByte(s);
} else {
LVGPAR = Byte.MIN_VALUE;
}
}

protected final void initLVLONG(String s) {
if (!s.trim().isEmpty()) {
LVLONG = Byte.parseByte(s);
} else {
LVLONG = Byte.MIN_VALUE;
}
}

protected final void initLVMA(String s) {
if (!s.trim().isEmpty()) {
LVMA = Byte.parseByte(s);
} else {
LVMA = Byte.MIN_VALUE;
}
}

protected final void initLVPA(String s) {
if (!s.trim().isEmpty()) {
LVPA = Byte.parseByte(s);
} else {
LVPA = Byte.MIN_VALUE;
}
}

protected final void initLVSIB(String s) {
if (!s.trim().isEmpty()) {
LVSIB = Byte.parseByte(s);
} else {
LVSIB = Byte.MIN_VALUE;
}
}

protected final void initMAAGE(String s) {
if (!s.trim().isEmpty()) {
MAAGE = Byte.parseByte(s);
} else {
MAAGE = Byte.MIN_VALUE;
}
}

protected final void initMABOSS(String s) {
if (!s.trim().isEmpty()) {
MABOSS = Byte.parseByte(s);
} else {
MABOSS = Byte.MIN_VALUE;
}
}

protected final void initMABWLY(String s) {
if (!s.trim().isEmpty()) {
MABWLY = Byte.parseByte(s);
} else {
MABWLY = Byte.MIN_VALUE;
}
}

protected final void initMABWNLY(String s) {
if (!s.trim().isEmpty()) {
MABWNLY = Byte.parseByte(s);
} else {
MABWNLY = Byte.MIN_VALUE;
}
}

protected final void initMACH18(String s) {
if (!s.trim().isEmpty()) {
MACH18 = Byte.parseByte(s);
} else {
MACH18 = Byte.MIN_VALUE;
}
}

protected final void initMACSSF(String s) {
if (!s.trim().isEmpty()) {
MACSSF = Double.parseDouble(s);
} else {
MACSSF = Double.NaN;
}
}

protected final void initMACSSM(String s) {
if (!s.trim().isEmpty()) {
MACSSM = Double.parseDouble(s);
} else {
MACSSM = Double.NaN;
}
}

protected final void initMAFAR(String s) {
if (!s.trim().isEmpty()) {
MAFAR = Byte.parseByte(s);
} else {
MAFAR = Byte.MIN_VALUE;
}
}

protected final void initMAGOLD(String s) {
if (!s.trim().isEmpty()) {
MAGOLD = Byte.parseByte(s);
} else {
MAGOLD = Byte.MIN_VALUE;
}
}

protected final void initMAHGS(String s) {
if (!s.trim().isEmpty()) {
MAHGS = Double.parseDouble(s);
} else {
MAHGS = Double.NaN;
}
}

protected final void initMAISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
MAISCO88_CC = Short.parseShort(s);
} else {
MAISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initMAISCO_CC(String s) {
if (!s.trim().isEmpty()) {
MAISCO_CC = s;
}
}

protected final void initMAJU(String s) {
if (!s.trim().isEmpty()) {
MAJU = Byte.parseByte(s);
} else {
MAJU = Byte.MIN_VALUE;
}
}

protected final void initMAJU_BH(String s) {
if (!s.trim().isEmpty()) {
MAJU_BH = Byte.parseByte(s);
} else {
MAJU_BH = Byte.MIN_VALUE;
}
}

protected final void initMALONE(String s) {
if (!s.trim().isEmpty()) {
MALONE = Byte.parseByte(s);
} else {
MALONE = Byte.MIN_VALUE;
}
}

protected final void initMAMAIL(String s) {
if (!s.trim().isEmpty()) {
MAMAIL = Byte.parseByte(s);
} else {
MAMAIL = Byte.MIN_VALUE;
}
}

protected final void initMAMNGR(String s) {
if (!s.trim().isEmpty()) {
MAMNGR = Byte.parseByte(s);
} else {
MAMNGR = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC8_DV = Byte.parseByte(s);
} else {
MANSSEC8_DV = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC_DV = Byte.parseByte(s);
} else {
MANSSEC_DV = Byte.MIN_VALUE;
}
}

protected final void initMARGSC(String s) {
if (!s.trim().isEmpty()) {
MARGSC = Byte.parseByte(s);
} else {
MARGSC = Byte.MIN_VALUE;
}
}

protected final void initMASEC(String s) {
if (!s.trim().isEmpty()) {
MASEC = Short.parseShort(s);
} else {
MASEC = Short.MIN_VALUE;
}
}

protected final void initMASEE(String s) {
if (!s.trim().isEmpty()) {
MASEE = Byte.parseByte(s);
} else {
MASEE = Byte.MIN_VALUE;
}
}

protected final void initMASEG(String s) {
if (!s.trim().isEmpty()) {
MASEG = Byte.parseByte(s);
} else {
MASEG = Byte.MIN_VALUE;
}
}

protected final void initMASEMP(String s) {
if (!s.trim().isEmpty()) {
MASEMP = Byte.parseByte(s);
} else {
MASEMP = Byte.MIN_VALUE;
}
}

protected final void initMASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC00_CC = Short.parseShort(s);
} else {
MASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC90_CC = Byte.parseByte(s);
} else {
MASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMASTAT(String s) {
if (!s.trim().isEmpty()) {
MASTAT = Short.parseShort(s);
} else {
MASTAT = Short.MIN_VALUE;
}
}

protected final void initMATEL(String s) {
if (!s.trim().isEmpty()) {
MATEL = Byte.parseByte(s);
} else {
MATEL = Byte.MIN_VALUE;
}
}

protected final void initMEMORIG_BH(String s) {
if (!s.trim().isEmpty()) {
MEMORIG_BH = Short.parseShort(s);
} else {
MEMORIG_BH = Short.MIN_VALUE;
}
}

protected final void initMLCHM(String s) {
if (!s.trim().isEmpty()) {
MLCHM = Short.parseShort(s);
} else {
MLCHM = Short.MIN_VALUE;
}
}

protected final void initMLCHY4(String s) {
if (!s.trim().isEmpty()) {
MLCHY4 = Short.parseShort(s);
} else {
MLCHY4 = Short.MIN_VALUE;
}
}

protected final void initMLSTAT_BH(String s) {
if (!s.trim().isEmpty()) {
MLSTAT_BH = Short.parseShort(s);
} else {
MLSTAT_BH = Short.MIN_VALUE;
}
}

protected final void initMNPID_BH(String s) {
if (!s.trim().isEmpty()) {
MNPID_BH = Integer.parseInt(s);
} else {
MNPID_BH = Integer.MIN_VALUE;
}
}

protected final void initMOBUSE(String s) {
if (!s.trim().isEmpty()) {
MOBUSE = Byte.parseByte(s);
} else {
MOBUSE = Byte.MIN_VALUE;
}
}

protected final void initMOVEST(String s) {
if (!s.trim().isEmpty()) {
MOVEST = Short.parseShort(s);
} else {
MOVEST = Short.MIN_VALUE;
}
}

protected final void initMOVJB(String s) {
if (!s.trim().isEmpty()) {
MOVJB = Short.parseShort(s);
} else {
MOVJB = Short.MIN_VALUE;
}
}

protected final void initMOVJBA(String s) {
if (!s.trim().isEmpty()) {
MOVJBA = Short.parseShort(s);
} else {
MOVJBA = Short.MIN_VALUE;
}
}

protected final void initMOVJBB(String s) {
if (!s.trim().isEmpty()) {
MOVJBB = Short.parseShort(s);
} else {
MOVJBB = Short.MIN_VALUE;
}
}

protected final void initMOVJBC(String s) {
if (!s.trim().isEmpty()) {
MOVJBC = Short.parseShort(s);
} else {
MOVJBC = Short.MIN_VALUE;
}
}

protected final void initMOVJBD(String s) {
if (!s.trim().isEmpty()) {
MOVJBD = Short.parseShort(s);
} else {
MOVJBD = Short.MIN_VALUE;
}
}

protected final void initMOVJBE(String s) {
if (!s.trim().isEmpty()) {
MOVJBE = Short.parseShort(s);
} else {
MOVJBE = Short.MIN_VALUE;
}
}

protected final void initMOVJBF(String s) {
if (!s.trim().isEmpty()) {
MOVJBF = Short.parseShort(s);
} else {
MOVJBF = Short.MIN_VALUE;
}
}

protected final void initMOVJBG(String s) {
if (!s.trim().isEmpty()) {
MOVJBG = Short.parseShort(s);
} else {
MOVJBG = Short.MIN_VALUE;
}
}

protected final void initMOVJBH(String s) {
if (!s.trim().isEmpty()) {
MOVJBH = Short.parseShort(s);
} else {
MOVJBH = Short.MIN_VALUE;
}
}

protected final void initMOVJBI(String s) {
if (!s.trim().isEmpty()) {
MOVJBI = Short.parseShort(s);
} else {
MOVJBI = Short.MIN_VALUE;
}
}

protected final void initMOVY1(String s) {
if (!s.trim().isEmpty()) {
MOVY1 = Short.parseShort(s);
} else {
MOVY1 = Short.MIN_VALUE;
}
}

protected final void initMOVY2(String s) {
if (!s.trim().isEmpty()) {
MOVY2 = Short.parseShort(s);
} else {
MOVY2 = Short.MIN_VALUE;
}
}

protected final void initMRJBOSS(String s) {
if (!s.trim().isEmpty()) {
MRJBOSS = Short.parseShort(s);
} else {
MRJBOSS = Short.MIN_VALUE;
}
}

protected final void initMRJCSSF(String s) {
if (!s.trim().isEmpty()) {
MRJCSSF = Double.parseDouble(s);
} else {
MRJCSSF = Double.NaN;
}
}

protected final void initMRJCSSM(String s) {
if (!s.trim().isEmpty()) {
MRJCSSM = Double.parseDouble(s);
} else {
MRJCSSM = Double.NaN;
}
}

protected final void initMRJEND(String s) {
if (!s.trim().isEmpty()) {
MRJEND = Short.parseShort(s);
} else {
MRJEND = Short.MIN_VALUE;
}
}

protected final void initMRJGOLD(String s) {
if (!s.trim().isEmpty()) {
MRJGOLD = Short.parseShort(s);
} else {
MRJGOLD = Short.MIN_VALUE;
}
}

protected final void initMRJHGS(String s) {
if (!s.trim().isEmpty()) {
MRJHGS = Double.parseDouble(s);
} else {
MRJHGS = Double.NaN;
}
}

protected final void initMRJISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
MRJISCO88_CC = Short.parseShort(s);
} else {
MRJISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initMRJISCO_CC(String s) {
if (!s.trim().isEmpty()) {
MRJISCO_CC = s;
}
}

protected final void initMRJMNGR(String s) {
if (!s.trim().isEmpty()) {
MRJMNGR = Short.parseShort(s);
} else {
MRJMNGR = Short.MIN_VALUE;
}
}

protected final void initMRJNSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
MRJNSSEC8_DV = Short.parseShort(s);
} else {
MRJNSSEC8_DV = Short.MIN_VALUE;
}
}

protected final void initMRJNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
MRJNSSEC_DV = Short.parseShort(s);
} else {
MRJNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initMRJRGSC(String s) {
if (!s.trim().isEmpty()) {
MRJRGSC = Short.parseShort(s);
} else {
MRJRGSC = Short.MIN_VALUE;
}
}

protected final void initMRJSEC(String s) {
if (!s.trim().isEmpty()) {
MRJSEC = Short.parseShort(s);
} else {
MRJSEC = Short.MIN_VALUE;
}
}

protected final void initMRJSEG(String s) {
if (!s.trim().isEmpty()) {
MRJSEG = Short.parseShort(s);
} else {
MRJSEG = Short.MIN_VALUE;
}
}

protected final void initMRJSEMP(String s) {
if (!s.trim().isEmpty()) {
MRJSEMP = Short.parseShort(s);
} else {
MRJSEMP = Short.MIN_VALUE;
}
}

protected final void initMRJSIC(String s) {
if (!s.trim().isEmpty()) {
MRJSIC = Short.parseShort(s);
} else {
MRJSIC = Short.MIN_VALUE;
}
}

protected final void initMRJSIC9(String s) {
if (!s.trim().isEmpty()) {
MRJSIC9 = Short.parseShort(s);
} else {
MRJSIC9 = Short.MIN_VALUE;
}
}

protected final void initMRJSIZE(String s) {
if (!s.trim().isEmpty()) {
MRJSIZE = Short.parseShort(s);
} else {
MRJSIZE = Short.MIN_VALUE;
}
}

protected final void initMRJSOC(String s) {
if (!s.trim().isEmpty()) {
MRJSOC = Short.parseShort(s);
} else {
MRJSOC = Short.MIN_VALUE;
}
}

protected final void initMSTATSAM(String s) {
if (!s.trim().isEmpty()) {
MSTATSAM = Short.parseShort(s);
} else {
MSTATSAM = Short.MIN_VALUE;
}
}

protected final void initNAIDXHH_BH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH_BH = Short.parseShort(s);
} else {
NAIDXHH_BH = Short.MIN_VALUE;
}
}

protected final void initNATIDA(String s) {
if (!s.trim().isEmpty()) {
NATIDA = Byte.parseByte(s);
} else {
NATIDA = Byte.MIN_VALUE;
}
}

protected final void initNATIDB(String s) {
if (!s.trim().isEmpty()) {
NATIDB = Byte.parseByte(s);
} else {
NATIDB = Byte.MIN_VALUE;
}
}

protected final void initNATIDE(String s) {
if (!s.trim().isEmpty()) {
NATIDE = Byte.parseByte(s);
} else {
NATIDE = Byte.MIN_VALUE;
}
}

protected final void initNATIDF(String s) {
if (!s.trim().isEmpty()) {
NATIDF = Byte.parseByte(s);
} else {
NATIDF = Byte.MIN_VALUE;
}
}

protected final void initNATIDG(String s) {
if (!s.trim().isEmpty()) {
NATIDG = Byte.parseByte(s);
} else {
NATIDG = Byte.MIN_VALUE;
}
}

protected final void initNATIDH(String s) {
if (!s.trim().isEmpty()) {
NATIDH = Byte.parseByte(s);
} else {
NATIDH = Byte.MIN_VALUE;
}
}

protected final void initNCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHILD_DV = Short.parseShort(s);
} else {
NCHILD_DV = Short.MIN_VALUE;
}
}

protected final void initNCIGS(String s) {
if (!s.trim().isEmpty()) {
NCIGS = Short.parseShort(s);
} else {
NCIGS = Short.MIN_VALUE;
}
}

protected final void initNET1AG(String s) {
if (!s.trim().isEmpty()) {
NET1AG = Short.parseShort(s);
} else {
NET1AG = Short.MIN_VALUE;
}
}

protected final void initNET1ET(String s) {
if (!s.trim().isEmpty()) {
NET1ET = Byte.parseByte(s);
} else {
NET1ET = Byte.MIN_VALUE;
}
}

protected final void initNET1JB(String s) {
if (!s.trim().isEmpty()) {
NET1JB = Short.parseShort(s);
} else {
NET1JB = Short.MIN_VALUE;
}
}

protected final void initNET1KN(String s) {
if (!s.trim().isEmpty()) {
NET1KN = Byte.parseByte(s);
} else {
NET1KN = Byte.MIN_VALUE;
}
}

protected final void initNET1LV(String s) {
if (!s.trim().isEmpty()) {
NET1LV = Byte.parseByte(s);
} else {
NET1LV = Byte.MIN_VALUE;
}
}

protected final void initNET1PH(String s) {
if (!s.trim().isEmpty()) {
NET1PH = Short.parseShort(s);
} else {
NET1PH = Short.MIN_VALUE;
}
}

protected final void initNET1RL(String s) {
if (!s.trim().isEmpty()) {
NET1RL = Byte.parseByte(s);
} else {
NET1RL = Byte.MIN_VALUE;
}
}

protected final void initNET1WR(String s) {
if (!s.trim().isEmpty()) {
NET1WR = Short.parseShort(s);
} else {
NET1WR = Short.MIN_VALUE;
}
}

protected final void initNET2AG(String s) {
if (!s.trim().isEmpty()) {
NET2AG = Short.parseShort(s);
} else {
NET2AG = Short.MIN_VALUE;
}
}

protected final void initNET2ET(String s) {
if (!s.trim().isEmpty()) {
NET2ET = Byte.parseByte(s);
} else {
NET2ET = Byte.MIN_VALUE;
}
}

protected final void initNET2JB(String s) {
if (!s.trim().isEmpty()) {
NET2JB = Short.parseShort(s);
} else {
NET2JB = Short.MIN_VALUE;
}
}

protected final void initNET2KN(String s) {
if (!s.trim().isEmpty()) {
NET2KN = Byte.parseByte(s);
} else {
NET2KN = Byte.MIN_VALUE;
}
}

protected final void initNET2LV(String s) {
if (!s.trim().isEmpty()) {
NET2LV = Byte.parseByte(s);
} else {
NET2LV = Byte.MIN_VALUE;
}
}

protected final void initNET2PH(String s) {
if (!s.trim().isEmpty()) {
NET2PH = Short.parseShort(s);
} else {
NET2PH = Short.MIN_VALUE;
}
}

protected final void initNET2RL(String s) {
if (!s.trim().isEmpty()) {
NET2RL = Byte.parseByte(s);
} else {
NET2RL = Byte.MIN_VALUE;
}
}

protected final void initNET2WR(String s) {
if (!s.trim().isEmpty()) {
NET2WR = Short.parseShort(s);
} else {
NET2WR = Short.MIN_VALUE;
}
}

protected final void initNET3AG(String s) {
if (!s.trim().isEmpty()) {
NET3AG = Short.parseShort(s);
} else {
NET3AG = Short.MIN_VALUE;
}
}

protected final void initNET3ET(String s) {
if (!s.trim().isEmpty()) {
NET3ET = Byte.parseByte(s);
} else {
NET3ET = Byte.MIN_VALUE;
}
}

protected final void initNET3JB(String s) {
if (!s.trim().isEmpty()) {
NET3JB = Short.parseShort(s);
} else {
NET3JB = Short.MIN_VALUE;
}
}

protected final void initNET3KN(String s) {
if (!s.trim().isEmpty()) {
NET3KN = Byte.parseByte(s);
} else {
NET3KN = Byte.MIN_VALUE;
}
}

protected final void initNET3LV(String s) {
if (!s.trim().isEmpty()) {
NET3LV = Byte.parseByte(s);
} else {
NET3LV = Byte.MIN_VALUE;
}
}

protected final void initNET3PH(String s) {
if (!s.trim().isEmpty()) {
NET3PH = Short.parseShort(s);
} else {
NET3PH = Short.MIN_VALUE;
}
}

protected final void initNET3RL(String s) {
if (!s.trim().isEmpty()) {
NET3RL = Byte.parseByte(s);
} else {
NET3RL = Byte.MIN_VALUE;
}
}

protected final void initNET3WR(String s) {
if (!s.trim().isEmpty()) {
NET3WR = Short.parseShort(s);
} else {
NET3WR = Short.MIN_VALUE;
}
}

protected final void initNETAG_1(String s) {
if (!s.trim().isEmpty()) {
NETAG_1 = Short.parseShort(s);
} else {
NETAG_1 = Short.MIN_VALUE;
}
}

protected final void initNETAG_2(String s) {
if (!s.trim().isEmpty()) {
NETAG_2 = Short.parseShort(s);
} else {
NETAG_2 = Short.MIN_VALUE;
}
}

protected final void initNETAG_3(String s) {
if (!s.trim().isEmpty()) {
NETAG_3 = Short.parseShort(s);
} else {
NETAG_3 = Short.MIN_VALUE;
}
}

protected final void initNETKN_1(String s) {
if (!s.trim().isEmpty()) {
NETKN_1 = Byte.parseByte(s);
} else {
NETKN_1 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_2(String s) {
if (!s.trim().isEmpty()) {
NETKN_2 = Byte.parseByte(s);
} else {
NETKN_2 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_3(String s) {
if (!s.trim().isEmpty()) {
NETKN_3 = Byte.parseByte(s);
} else {
NETKN_3 = Byte.MIN_VALUE;
}
}

protected final void initNETPH_1(String s) {
if (!s.trim().isEmpty()) {
NETPH_1 = Short.parseShort(s);
} else {
NETPH_1 = Short.MIN_VALUE;
}
}

protected final void initNETPH_2(String s) {
if (!s.trim().isEmpty()) {
NETPH_2 = Short.parseShort(s);
} else {
NETPH_2 = Short.MIN_VALUE;
}
}

protected final void initNETPH_3(String s) {
if (!s.trim().isEmpty()) {
NETPH_3 = Short.parseShort(s);
} else {
NETPH_3 = Short.MIN_VALUE;
}
}

protected final void initNETRL_1(String s) {
if (!s.trim().isEmpty()) {
NETRL_1 = Byte.parseByte(s);
} else {
NETRL_1 = Byte.MIN_VALUE;
}
}

protected final void initNETRL_2(String s) {
if (!s.trim().isEmpty()) {
NETRL_2 = Byte.parseByte(s);
} else {
NETRL_2 = Byte.MIN_VALUE;
}
}

protected final void initNETRL_3(String s) {
if (!s.trim().isEmpty()) {
NETRL_3 = Byte.parseByte(s);
} else {
NETRL_3 = Byte.MIN_VALUE;
}
}

protected final void initNETSX1(String s) {
if (!s.trim().isEmpty()) {
NETSX1 = Short.parseShort(s);
} else {
NETSX1 = Short.MIN_VALUE;
}
}

protected final void initNETSX2(String s) {
if (!s.trim().isEmpty()) {
NETSX2 = Short.parseShort(s);
} else {
NETSX2 = Short.MIN_VALUE;
}
}

protected final void initNETSX3(String s) {
if (!s.trim().isEmpty()) {
NETSX3 = Short.parseShort(s);
} else {
NETSX3 = Short.MIN_VALUE;
}
}

protected final void initNETSX_1(String s) {
if (!s.trim().isEmpty()) {
NETSX_1 = Short.parseShort(s);
} else {
NETSX_1 = Short.MIN_VALUE;
}
}

protected final void initNETSX_2(String s) {
if (!s.trim().isEmpty()) {
NETSX_2 = Short.parseShort(s);
} else {
NETSX_2 = Short.MIN_VALUE;
}
}

protected final void initNETSX_3(String s) {
if (!s.trim().isEmpty()) {
NETSX_3 = Short.parseShort(s);
} else {
NETSX_3 = Short.MIN_VALUE;
}
}

protected final void initNETWR_1(String s) {
if (!s.trim().isEmpty()) {
NETWR_1 = Short.parseShort(s);
} else {
NETWR_1 = Short.MIN_VALUE;
}
}

protected final void initNETWR_2(String s) {
if (!s.trim().isEmpty()) {
NETWR_2 = Short.parseShort(s);
} else {
NETWR_2 = Short.MIN_VALUE;
}
}

protected final void initNETWR_3(String s) {
if (!s.trim().isEmpty()) {
NETWR_3 = Short.parseShort(s);
} else {
NETWR_3 = Short.MIN_VALUE;
}
}

protected final void initNEWHY(String s) {
if (!s.trim().isEmpty()) {
NEWHY = Short.parseShort(s);
} else {
NEWHY = Short.MIN_VALUE;
}
}

protected final void initNF1(String s) {
if (!s.trim().isEmpty()) {
NF1 = Short.parseShort(s);
} else {
NF1 = Short.MIN_VALUE;
}
}

protected final void initNFH10_BH(String s) {
if (!s.trim().isEmpty()) {
NFH10_BH = Byte.parseByte(s);
} else {
NFH10_BH = Byte.MIN_VALUE;
}
}

protected final void initNFH11_BH(String s) {
if (!s.trim().isEmpty()) {
NFH11_BH = Byte.parseByte(s);
} else {
NFH11_BH = Byte.MIN_VALUE;
}
}

protected final void initNFH12_BH(String s) {
if (!s.trim().isEmpty()) {
NFH12_BH = Byte.parseByte(s);
} else {
NFH12_BH = Byte.MIN_VALUE;
}
}

protected final void initNFH1_BH(String s) {
if (!s.trim().isEmpty()) {
NFH1_BH = Byte.parseByte(s);
} else {
NFH1_BH = Byte.MIN_VALUE;
}
}

protected final void initNFH2_BH(String s) {
if (!s.trim().isEmpty()) {
NFH2_BH = Byte.parseByte(s);
} else {
NFH2_BH = Byte.MIN_VALUE;
}
}

protected final void initNFH3_BH(String s) {
if (!s.trim().isEmpty()) {
NFH3_BH = Byte.parseByte(s);
} else {
NFH3_BH = Byte.MIN_VALUE;
}
}

protected final void initNFH4_BH(String s) {
if (!s.trim().isEmpty()) {
NFH4_BH = Byte.parseByte(s);
} else {
NFH4_BH = Byte.MIN_VALUE;
}
}

protected final void initNFH5_BH(String s) {
if (!s.trim().isEmpty()) {
NFH5_BH = Byte.parseByte(s);
} else {
NFH5_BH = Byte.MIN_VALUE;
}
}

protected final void initNFH6_BH(String s) {
if (!s.trim().isEmpty()) {
NFH6_BH = Byte.parseByte(s);
} else {
NFH6_BH = Byte.MIN_VALUE;
}
}

protected final void initNFH7_BH(String s) {
if (!s.trim().isEmpty()) {
NFH7_BH = Byte.parseByte(s);
} else {
NFH7_BH = Byte.MIN_VALUE;
}
}

protected final void initNFH8_BH(String s) {
if (!s.trim().isEmpty()) {
NFH8_BH = Byte.parseByte(s);
} else {
NFH8_BH = Byte.MIN_VALUE;
}
}

protected final void initNFH9_BH(String s) {
if (!s.trim().isEmpty()) {
NFH9_BH = Byte.parseByte(s);
} else {
NFH9_BH = Byte.MIN_VALUE;
}
}

protected final void initNFHS1(String s) {
if (!s.trim().isEmpty()) {
NFHS1 = Byte.parseByte(s);
} else {
NFHS1 = Byte.MIN_VALUE;
}
}

protected final void initNFHS10(String s) {
if (!s.trim().isEmpty()) {
NFHS10 = Byte.parseByte(s);
} else {
NFHS10 = Byte.MIN_VALUE;
}
}

protected final void initNFHS11(String s) {
if (!s.trim().isEmpty()) {
NFHS11 = Byte.parseByte(s);
} else {
NFHS11 = Byte.MIN_VALUE;
}
}

protected final void initNFHS12(String s) {
if (!s.trim().isEmpty()) {
NFHS12 = Byte.parseByte(s);
} else {
NFHS12 = Byte.MIN_VALUE;
}
}

protected final void initNFHS2(String s) {
if (!s.trim().isEmpty()) {
NFHS2 = Byte.parseByte(s);
} else {
NFHS2 = Byte.MIN_VALUE;
}
}

protected final void initNFHS3(String s) {
if (!s.trim().isEmpty()) {
NFHS3 = Byte.parseByte(s);
} else {
NFHS3 = Byte.MIN_VALUE;
}
}

protected final void initNFHS4(String s) {
if (!s.trim().isEmpty()) {
NFHS4 = Byte.parseByte(s);
} else {
NFHS4 = Byte.MIN_VALUE;
}
}

protected final void initNFHS5(String s) {
if (!s.trim().isEmpty()) {
NFHS5 = Byte.parseByte(s);
} else {
NFHS5 = Byte.MIN_VALUE;
}
}

protected final void initNFHS6(String s) {
if (!s.trim().isEmpty()) {
NFHS6 = Byte.parseByte(s);
} else {
NFHS6 = Byte.MIN_VALUE;
}
}

protected final void initNFHS7(String s) {
if (!s.trim().isEmpty()) {
NFHS7 = Byte.parseByte(s);
} else {
NFHS7 = Byte.MIN_VALUE;
}
}

protected final void initNFHS8(String s) {
if (!s.trim().isEmpty()) {
NFHS8 = Byte.parseByte(s);
} else {
NFHS8 = Byte.MIN_VALUE;
}
}

protected final void initNFHS9(String s) {
if (!s.trim().isEmpty()) {
NFHS9 = Byte.parseByte(s);
} else {
NFHS9 = Byte.MIN_VALUE;
}
}

protected final void initNIPENS(String s) {
if (!s.trim().isEmpty()) {
NIPENS = Byte.parseByte(s);
} else {
NIPENS = Byte.MIN_VALUE;
}
}

protected final void initNISERPS(String s) {
if (!s.trim().isEmpty()) {
NISERPS = Byte.parseByte(s);
} else {
NISERPS = Byte.MIN_VALUE;
}
}

protected final void initNISJSA(String s) {
if (!s.trim().isEmpty()) {
NISJSA = Byte.parseByte(s);
} else {
NISJSA = Byte.MIN_VALUE;
}
}

protected final void initNJBNEW(String s) {
if (!s.trim().isEmpty()) {
NJBNEW = Short.parseShort(s);
} else {
NJBNEW = Short.MIN_VALUE;
}
}

protected final void initNJBSP(String s) {
if (!s.trim().isEmpty()) {
NJBSP = Short.parseShort(s);
} else {
NJBSP = Short.MIN_VALUE;
}
}

protected final void initNJBWKS(String s) {
if (!s.trim().isEmpty()) {
NJBWKS = Double.parseDouble(s);
} else {
NJBWKS = Double.NaN;
}
}

protected final void initNJISP(String s) {
if (!s.trim().isEmpty()) {
NJISP = Short.parseShort(s);
} else {
NJISP = Short.MIN_VALUE;
}
}

protected final void initNJIWKS(String s) {
if (!s.trim().isEmpty()) {
NJIWKS = Double.parseDouble(s);
} else {
NJIWKS = Double.NaN;
}
}

protected final void initNJUSP(String s) {
if (!s.trim().isEmpty()) {
NJUSP = Short.parseShort(s);
} else {
NJUSP = Short.MIN_VALUE;
}
}

protected final void initNJUWKS(String s) {
if (!s.trim().isEmpty()) {
NJUWKS = Double.parseDouble(s);
} else {
NJUWKS = Double.NaN;
}
}

protected final void initNLVCH(String s) {
if (!s.trim().isEmpty()) {
NLVCH = Byte.parseByte(s);
} else {
NLVCH = Byte.MIN_VALUE;
}
}

protected final void initNLVGCH(String s) {
if (!s.trim().isEmpty()) {
NLVGCH = Byte.parseByte(s);
} else {
NLVGCH = Byte.MIN_VALUE;
}
}

protected final void initNLVGGCH(String s) {
if (!s.trim().isEmpty()) {
NLVGGCH = Byte.parseByte(s);
} else {
NLVGGCH = Byte.MIN_VALUE;
}
}

protected final void initNLVGGPA(String s) {
if (!s.trim().isEmpty()) {
NLVGGPA = Byte.parseByte(s);
} else {
NLVGGPA = Byte.MIN_VALUE;
}
}

protected final void initNLVGPA(String s) {
if (!s.trim().isEmpty()) {
NLVGPA = Byte.parseByte(s);
} else {
NLVGPA = Byte.MIN_VALUE;
}
}

protected final void initNLVSIB(String s) {
if (!s.trim().isEmpty()) {
NLVSIB = Byte.parseByte(s);
} else {
NLVSIB = Byte.MIN_VALUE;
}
}

protected final void initNMAR_BH(String s) {
if (!s.trim().isEmpty()) {
NMAR_BH = Byte.parseByte(s);
} else {
NMAR_BH = Byte.MIN_VALUE;
}
}

protected final void initNOLVREL(String s) {
if (!s.trim().isEmpty()) {
NOLVREL = Byte.parseByte(s);
} else {
NOLVREL = Byte.MIN_VALUE;
}
}

protected final void initNQFEDA(String s) {
if (!s.trim().isEmpty()) {
NQFEDA = Byte.parseByte(s);
} else {
NQFEDA = Byte.MIN_VALUE;
}
}

protected final void initNQFEDB(String s) {
if (!s.trim().isEmpty()) {
NQFEDB = Byte.parseByte(s);
} else {
NQFEDB = Byte.MIN_VALUE;
}
}

protected final void initNQFEDC(String s) {
if (!s.trim().isEmpty()) {
NQFEDC = Byte.parseByte(s);
} else {
NQFEDC = Byte.MIN_VALUE;
}
}

protected final void initNQFEDD(String s) {
if (!s.trim().isEmpty()) {
NQFEDD = Short.parseShort(s);
} else {
NQFEDD = Short.MIN_VALUE;
}
}

protected final void initNQFEDE(String s) {
if (!s.trim().isEmpty()) {
NQFEDE = Short.parseShort(s);
} else {
NQFEDE = Short.MIN_VALUE;
}
}

protected final void initNQFEDF(String s) {
if (!s.trim().isEmpty()) {
NQFEDF = Byte.parseByte(s);
} else {
NQFEDF = Byte.MIN_VALUE;
}
}

protected final void initNQFEDG(String s) {
if (!s.trim().isEmpty()) {
NQFEDG = Byte.parseByte(s);
} else {
NQFEDG = Byte.MIN_VALUE;
}
}

protected final void initNQFEDH(String s) {
if (!s.trim().isEmpty()) {
NQFEDH = Byte.parseByte(s);
} else {
NQFEDH = Byte.MIN_VALUE;
}
}

protected final void initNQFEDI(String s) {
if (!s.trim().isEmpty()) {
NQFEDI = Byte.parseByte(s);
} else {
NQFEDI = Byte.MIN_VALUE;
}
}

protected final void initNQFEDJ(String s) {
if (!s.trim().isEmpty()) {
NQFEDJ = Byte.parseByte(s);
} else {
NQFEDJ = Byte.MIN_VALUE;
}
}

protected final void initNQFEDK(String s) {
if (!s.trim().isEmpty()) {
NQFEDK = Byte.parseByte(s);
} else {
NQFEDK = Byte.MIN_VALUE;
}
}

protected final void initNQFEDL(String s) {
if (!s.trim().isEmpty()) {
NQFEDL = Short.parseShort(s);
} else {
NQFEDL = Short.MIN_VALUE;
}
}

protected final void initNQFEDM(String s) {
if (!s.trim().isEmpty()) {
NQFEDM = Byte.parseByte(s);
} else {
NQFEDM = Byte.MIN_VALUE;
}
}

protected final void initNQFEDN(String s) {
if (!s.trim().isEmpty()) {
NQFEDN = Short.parseShort(s);
} else {
NQFEDN = Short.MIN_VALUE;
}
}

protected final void initNQFEDO(String s) {
if (!s.trim().isEmpty()) {
NQFEDO = Byte.parseByte(s);
} else {
NQFEDO = Byte.MIN_VALUE;
}
}

protected final void initNQFEDP(String s) {
if (!s.trim().isEmpty()) {
NQFEDP = Byte.parseByte(s);
} else {
NQFEDP = Byte.MIN_VALUE;
}
}

protected final void initNQFEDQ(String s) {
if (!s.trim().isEmpty()) {
NQFEDQ = Byte.parseByte(s);
} else {
NQFEDQ = Byte.MIN_VALUE;
}
}

protected final void initNQFEDR(String s) {
if (!s.trim().isEmpty()) {
NQFEDR = Byte.parseByte(s);
} else {
NQFEDR = Byte.MIN_VALUE;
}
}

protected final void initNQFEDS(String s) {
if (!s.trim().isEmpty()) {
NQFEDS = Short.parseShort(s);
} else {
NQFEDS = Short.MIN_VALUE;
}
}

protected final void initNQFEDT(String s) {
if (!s.trim().isEmpty()) {
NQFEDT = Byte.parseByte(s);
} else {
NQFEDT = Byte.MIN_VALUE;
}
}

protected final void initNQFEDU(String s) {
if (!s.trim().isEmpty()) {
NQFEDU = Byte.parseByte(s);
} else {
NQFEDU = Byte.MIN_VALUE;
}
}

protected final void initNQFEXA(String s) {
if (!s.trim().isEmpty()) {
NQFEXA = Short.parseShort(s);
} else {
NQFEXA = Short.MIN_VALUE;
}
}

protected final void initNQFEXB(String s) {
if (!s.trim().isEmpty()) {
NQFEXB = Short.parseShort(s);
} else {
NQFEXB = Short.MIN_VALUE;
}
}

protected final void initNQFEXG(String s) {
if (!s.trim().isEmpty()) {
NQFEXG = Byte.parseByte(s);
} else {
NQFEXG = Byte.MIN_VALUE;
}
}

protected final void initNQFEXH(String s) {
if (!s.trim().isEmpty()) {
NQFEXH = Byte.parseByte(s);
} else {
NQFEXH = Byte.MIN_VALUE;
}
}

protected final void initNQFEXI(String s) {
if (!s.trim().isEmpty()) {
NQFEXI = Byte.parseByte(s);
} else {
NQFEXI = Byte.MIN_VALUE;
}
}

protected final void initNQFEXL(String s) {
if (!s.trim().isEmpty()) {
NQFEXL = Byte.parseByte(s);
} else {
NQFEXL = Byte.MIN_VALUE;
}
}

protected final void initNQFEXM(String s) {
if (!s.trim().isEmpty()) {
NQFEXM = Byte.parseByte(s);
} else {
NQFEXM = Byte.MIN_VALUE;
}
}

protected final void initNQFEXN(String s) {
if (!s.trim().isEmpty()) {
NQFEXN = Byte.parseByte(s);
} else {
NQFEXN = Byte.MIN_VALUE;
}
}

protected final void initNQFEXO(String s) {
if (!s.trim().isEmpty()) {
NQFEXO = Byte.parseByte(s);
} else {
NQFEXO = Byte.MIN_VALUE;
}
}

protected final void initNTRAIN(String s) {
if (!s.trim().isEmpty()) {
NTRAIN = Byte.parseByte(s);
} else {
NTRAIN = Byte.MIN_VALUE;
}
}

protected final void initNXDTS(String s) {
if (!s.trim().isEmpty()) {
NXDTS = Short.parseShort(s);
} else {
NXDTS = Short.MIN_VALUE;
}
}

protected final void initOPDEV1(String s) {
if (!s.trim().isEmpty()) {
OPDEV1 = Byte.parseByte(s);
} else {
OPDEV1 = Byte.MIN_VALUE;
}
}

protected final void initOPDEV2(String s) {
if (!s.trim().isEmpty()) {
OPDEV2 = Byte.parseByte(s);
} else {
OPDEV2 = Byte.MIN_VALUE;
}
}

protected final void initOPDVNI1(String s) {
if (!s.trim().isEmpty()) {
OPDVNI1 = Byte.parseByte(s);
} else {
OPDVNI1 = Byte.MIN_VALUE;
}
}

protected final void initOPDVNI2(String s) {
if (!s.trim().isEmpty()) {
OPDVNI2 = Byte.parseByte(s);
} else {
OPDVNI2 = Byte.MIN_VALUE;
}
}

protected final void initOPEUR1(String s) {
if (!s.trim().isEmpty()) {
OPEUR1 = Byte.parseByte(s);
} else {
OPEUR1 = Byte.MIN_VALUE;
}
}

protected final void initOPEUR2(String s) {
if (!s.trim().isEmpty()) {
OPEUR2 = Byte.parseByte(s);
} else {
OPEUR2 = Byte.MIN_VALUE;
}
}

protected final void initOPEUR3(String s) {
if (!s.trim().isEmpty()) {
OPEUR3 = Byte.parseByte(s);
} else {
OPEUR3 = Byte.MIN_VALUE;
}
}

protected final void initOPFAMK(String s) {
if (!s.trim().isEmpty()) {
OPFAMK = Short.parseShort(s);
} else {
OPFAMK = Short.MIN_VALUE;
}
}

protected final void initOPFAML(String s) {
if (!s.trim().isEmpty()) {
OPFAML = Short.parseShort(s);
} else {
OPFAML = Short.MIN_VALUE;
}
}

protected final void initOPFAMO(String s) {
if (!s.trim().isEmpty()) {
OPFAMO = Byte.parseByte(s);
} else {
OPFAMO = Byte.MIN_VALUE;
}
}

protected final void initOPFAMP(String s) {
if (!s.trim().isEmpty()) {
OPFAMP = Byte.parseByte(s);
} else {
OPFAMP = Byte.MIN_VALUE;
}
}

protected final void initOPFAMQ(String s) {
if (!s.trim().isEmpty()) {
OPFAMQ = Byte.parseByte(s);
} else {
OPFAMQ = Byte.MIN_VALUE;
}
}

protected final void initOPFAMR(String s) {
if (!s.trim().isEmpty()) {
OPFAMR = Byte.parseByte(s);
} else {
OPFAMR = Byte.MIN_VALUE;
}
}

protected final void initOPNISEC(String s) {
if (!s.trim().isEmpty()) {
OPNISEC = Byte.parseByte(s);
} else {
OPNISEC = Byte.MIN_VALUE;
}
}

protected final void initOPPOLA(String s) {
if (!s.trim().isEmpty()) {
OPPOLA = Short.parseShort(s);
} else {
OPPOLA = Short.MIN_VALUE;
}
}

protected final void initOPPOLB(String s) {
if (!s.trim().isEmpty()) {
OPPOLB = Short.parseShort(s);
} else {
OPPOLB = Short.MIN_VALUE;
}
}

protected final void initOPPOLC(String s) {
if (!s.trim().isEmpty()) {
OPPOLC = Short.parseShort(s);
} else {
OPPOLC = Short.MIN_VALUE;
}
}

protected final void initOPPOLD(String s) {
if (!s.trim().isEmpty()) {
OPPOLD = Short.parseShort(s);
} else {
OPPOLD = Short.MIN_VALUE;
}
}

protected final void initOPRLG2(String s) {
if (!s.trim().isEmpty()) {
OPRLG2 = Byte.parseByte(s);
} else {
OPRLG2 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG5(String s) {
if (!s.trim().isEmpty()) {
OPRLG5 = Byte.parseByte(s);
} else {
OPRLG5 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG7(String s) {
if (!s.trim().isEmpty()) {
OPRLG7 = Byte.parseByte(s);
} else {
OPRLG7 = Byte.MIN_VALUE;
}
}

protected final void initOVTNSA(String s) {
if (!s.trim().isEmpty()) {
OVTNSA = Byte.parseByte(s);
} else {
OVTNSA = Byte.MIN_VALUE;
}
}

protected final void initOVTPAY(String s) {
if (!s.trim().isEmpty()) {
OVTPAY = Byte.parseByte(s);
} else {
OVTPAY = Byte.MIN_VALUE;
}
}

protected final void initOVTRATE(String s) {
if (!s.trim().isEmpty()) {
OVTRATE = Double.parseDouble(s);
} else {
OVTRATE = Double.NaN;
}
}

protected final void initOVTRATE_BH(String s) {
if (!s.trim().isEmpty()) {
OVTRATE_BH = Double.parseDouble(s);
} else {
OVTRATE_BH = Double.NaN;
}
}

protected final void initOVTREST(String s) {
if (!s.trim().isEmpty()) {
OVTREST = Byte.parseByte(s);
} else {
OVTREST = Byte.MIN_VALUE;
}
}

protected final void initPAAGE(String s) {
if (!s.trim().isEmpty()) {
PAAGE = Byte.parseByte(s);
} else {
PAAGE = Byte.MIN_VALUE;
}
}

protected final void initPAAID1(String s) {
if (!s.trim().isEmpty()) {
PAAID1 = Byte.parseByte(s);
} else {
PAAID1 = Byte.MIN_VALUE;
}
}

protected final void initPAAID2(String s) {
if (!s.trim().isEmpty()) {
PAAID2 = Byte.parseByte(s);
} else {
PAAID2 = Byte.MIN_VALUE;
}
}

protected final void initPAAID3(String s) {
if (!s.trim().isEmpty()) {
PAAID3 = Byte.parseByte(s);
} else {
PAAID3 = Byte.MIN_VALUE;
}
}

protected final void initPAAID4(String s) {
if (!s.trim().isEmpty()) {
PAAID4 = Byte.parseByte(s);
} else {
PAAID4 = Byte.MIN_VALUE;
}
}

protected final void initPAAID5(String s) {
if (!s.trim().isEmpty()) {
PAAID5 = Byte.parseByte(s);
} else {
PAAID5 = Byte.MIN_VALUE;
}
}

protected final void initPAAID6(String s) {
if (!s.trim().isEmpty()) {
PAAID6 = Byte.parseByte(s);
} else {
PAAID6 = Byte.MIN_VALUE;
}
}

protected final void initPAAID7(String s) {
if (!s.trim().isEmpty()) {
PAAID7 = Byte.parseByte(s);
} else {
PAAID7 = Byte.MIN_VALUE;
}
}

protected final void initPAAID8(String s) {
if (!s.trim().isEmpty()) {
PAAID8 = Byte.parseByte(s);
} else {
PAAID8 = Byte.MIN_VALUE;
}
}

protected final void initPAAID96(String s) {
if (!s.trim().isEmpty()) {
PAAID96 = Byte.parseByte(s);
} else {
PAAID96 = Byte.MIN_VALUE;
}
}

protected final void initPAAID97(String s) {
if (!s.trim().isEmpty()) {
PAAID97 = Byte.parseByte(s);
} else {
PAAID97 = Byte.MIN_VALUE;
}
}

protected final void initPABOSS(String s) {
if (!s.trim().isEmpty()) {
PABOSS = Byte.parseByte(s);
} else {
PABOSS = Byte.MIN_VALUE;
}
}

protected final void initPACSSF(String s) {
if (!s.trim().isEmpty()) {
PACSSF = Double.parseDouble(s);
} else {
PACSSF = Double.NaN;
}
}

protected final void initPACSSM(String s) {
if (!s.trim().isEmpty()) {
PACSSM = Double.parseDouble(s);
} else {
PACSSM = Double.NaN;
}
}

protected final void initPAFAR(String s) {
if (!s.trim().isEmpty()) {
PAFAR = Byte.parseByte(s);
} else {
PAFAR = Byte.MIN_VALUE;
}
}

protected final void initPAGOLD(String s) {
if (!s.trim().isEmpty()) {
PAGOLD = Byte.parseByte(s);
} else {
PAGOLD = Byte.MIN_VALUE;
}
}

protected final void initPAHGS(String s) {
if (!s.trim().isEmpty()) {
PAHGS = Double.parseDouble(s);
} else {
PAHGS = Double.NaN;
}
}

protected final void initPAIDU1(String s) {
if (!s.trim().isEmpty()) {
PAIDU1 = Byte.parseByte(s);
} else {
PAIDU1 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU2(String s) {
if (!s.trim().isEmpty()) {
PAIDU2 = Byte.parseByte(s);
} else {
PAIDU2 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU3(String s) {
if (!s.trim().isEmpty()) {
PAIDU3 = Byte.parseByte(s);
} else {
PAIDU3 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU4(String s) {
if (!s.trim().isEmpty()) {
PAIDU4 = Byte.parseByte(s);
} else {
PAIDU4 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU5(String s) {
if (!s.trim().isEmpty()) {
PAIDU5 = Byte.parseByte(s);
} else {
PAIDU5 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU6(String s) {
if (!s.trim().isEmpty()) {
PAIDU6 = Byte.parseByte(s);
} else {
PAIDU6 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU7(String s) {
if (!s.trim().isEmpty()) {
PAIDU7 = Byte.parseByte(s);
} else {
PAIDU7 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU8(String s) {
if (!s.trim().isEmpty()) {
PAIDU8 = Byte.parseByte(s);
} else {
PAIDU8 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU96(String s) {
if (!s.trim().isEmpty()) {
PAIDU96 = Byte.parseByte(s);
} else {
PAIDU96 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU97(String s) {
if (!s.trim().isEmpty()) {
PAIDU97 = Byte.parseByte(s);
} else {
PAIDU97 = Byte.MIN_VALUE;
}
}

protected final void initPAISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
PAISCO88_CC = Short.parseShort(s);
} else {
PAISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initPAISCO_CC(String s) {
if (!s.trim().isEmpty()) {
PAISCO_CC = s;
}
}

protected final void initPAJU(String s) {
if (!s.trim().isEmpty()) {
PAJU = Byte.parseByte(s);
} else {
PAJU = Byte.MIN_VALUE;
}
}

protected final void initPAJU_BH(String s) {
if (!s.trim().isEmpty()) {
PAJU_BH = Byte.parseByte(s);
} else {
PAJU_BH = Byte.MIN_VALUE;
}
}

protected final void initPALONE(String s) {
if (!s.trim().isEmpty()) {
PALONE = Byte.parseByte(s);
} else {
PALONE = Byte.MIN_VALUE;
}
}

protected final void initPAMAIL(String s) {
if (!s.trim().isEmpty()) {
PAMAIL = Byte.parseByte(s);
} else {
PAMAIL = Byte.MIN_VALUE;
}
}

protected final void initPAMNGR(String s) {
if (!s.trim().isEmpty()) {
PAMNGR = Byte.parseByte(s);
} else {
PAMNGR = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC8_DV = Byte.parseByte(s);
} else {
PANSSEC8_DV = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC_DV = Byte.parseByte(s);
} else {
PANSSEC_DV = Byte.MIN_VALUE;
}
}

protected final void initPARGSC(String s) {
if (!s.trim().isEmpty()) {
PARGSC = Byte.parseByte(s);
} else {
PARGSC = Byte.MIN_VALUE;
}
}

protected final void initPARMAR(String s) {
if (!s.trim().isEmpty()) {
PARMAR = Byte.parseByte(s);
} else {
PARMAR = Byte.MIN_VALUE;
}
}

protected final void initPASEC(String s) {
if (!s.trim().isEmpty()) {
PASEC = Short.parseShort(s);
} else {
PASEC = Short.MIN_VALUE;
}
}

protected final void initPASEE(String s) {
if (!s.trim().isEmpty()) {
PASEE = Byte.parseByte(s);
} else {
PASEE = Byte.MIN_VALUE;
}
}

protected final void initPASEG(String s) {
if (!s.trim().isEmpty()) {
PASEG = Byte.parseByte(s);
} else {
PASEG = Byte.MIN_VALUE;
}
}

protected final void initPASEMP(String s) {
if (!s.trim().isEmpty()) {
PASEMP = Byte.parseByte(s);
} else {
PASEMP = Byte.MIN_VALUE;
}
}

protected final void initPASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC00_CC = Short.parseShort(s);
} else {
PASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC90_CC = Byte.parseByte(s);
} else {
PASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPATEL(String s) {
if (!s.trim().isEmpty()) {
PATEL = Byte.parseByte(s);
} else {
PATEL = Byte.MIN_VALUE;
}
}

protected final void initPAYCK1(String s) {
if (!s.trim().isEmpty()) {
PAYCK1 = Byte.parseByte(s);
} else {
PAYCK1 = Byte.MIN_VALUE;
}
}

protected final void initPAYDF1(String s) {
if (!s.trim().isEmpty()) {
PAYDF1 = Short.parseShort(s);
} else {
PAYDF1 = Short.MIN_VALUE;
}
}

protected final void initPAYDF2(String s) {
if (!s.trim().isEmpty()) {
PAYDF2 = Short.parseShort(s);
} else {
PAYDF2 = Short.MIN_VALUE;
}
}

protected final void initPAYDF3(String s) {
if (!s.trim().isEmpty()) {
PAYDF3 = Short.parseShort(s);
} else {
PAYDF3 = Short.MIN_VALUE;
}
}

protected final void initPAYDF4(String s) {
if (!s.trim().isEmpty()) {
PAYDF4 = Short.parseShort(s);
} else {
PAYDF4 = Short.MIN_VALUE;
}
}

protected final void initPAYDF5(String s) {
if (!s.trim().isEmpty()) {
PAYDF5 = Short.parseShort(s);
} else {
PAYDF5 = Short.MIN_VALUE;
}
}

protected final void initPAYDF6(String s) {
if (!s.trim().isEmpty()) {
PAYDF6 = Short.parseShort(s);
} else {
PAYDF6 = Short.MIN_VALUE;
}
}

protected final void initPAYDF7(String s) {
if (!s.trim().isEmpty()) {
PAYDF7 = Short.parseShort(s);
} else {
PAYDF7 = Short.MIN_VALUE;
}
}

protected final void initPAYDF8(String s) {
if (!s.trim().isEmpty()) {
PAYDF8 = Short.parseShort(s);
} else {
PAYDF8 = Short.MIN_VALUE;
}
}

protected final void initPAYDF9(String s) {
if (!s.trim().isEmpty()) {
PAYDF9 = Byte.parseByte(s);
} else {
PAYDF9 = Byte.MIN_VALUE;
}
}

protected final void initPAYGLI(String s) {
if (!s.trim().isEmpty()) {
PAYGLI = Short.parseShort(s);
} else {
PAYGLI = Short.MIN_VALUE;
}
}

protected final void initPAYGLY(String s) {
if (!s.trim().isEmpty()) {
PAYGLY = Double.parseDouble(s);
} else {
PAYGLY = Double.NaN;
}
}

protected final void initPAYGTI(String s) {
if (!s.trim().isEmpty()) {
PAYGTI = Short.parseShort(s);
} else {
PAYGTI = Short.MIN_VALUE;
}
}

protected final void initPAYGTY(String s) {
if (!s.trim().isEmpty()) {
PAYGTY = Double.parseDouble(s);
} else {
PAYGTY = Double.NaN;
}
}

protected final void initPAYGW(String s) {
if (!s.trim().isEmpty()) {
PAYGW = Double.parseDouble(s);
} else {
PAYGW = Double.NaN;
}
}

protected final void initPAYG_DV(String s) {
if (!s.trim().isEmpty()) {
PAYG_DV = Double.parseDouble(s);
} else {
PAYG_DV = Double.NaN;
}
}

protected final void initPAYLY(String s) {
if (!s.trim().isEmpty()) {
PAYLY = Integer.parseInt(s);
} else {
PAYLY = Integer.MIN_VALUE;
}
}

protected final void initPAYLYG(String s) {
if (!s.trim().isEmpty()) {
PAYLYG = Short.parseShort(s);
} else {
PAYLYG = Short.MIN_VALUE;
}
}

protected final void initPAYLYW(String s) {
if (!s.trim().isEmpty()) {
PAYLYW = Double.parseDouble(s);
} else {
PAYLYW = Double.NaN;
}
}

protected final void initPAYNLI(String s) {
if (!s.trim().isEmpty()) {
PAYNLI = Short.parseShort(s);
} else {
PAYNLI = Short.MIN_VALUE;
}
}

protected final void initPAYNLY(String s) {
if (!s.trim().isEmpty()) {
PAYNLY = Double.parseDouble(s);
} else {
PAYNLY = Double.NaN;
}
}

protected final void initPAYNTI(String s) {
if (!s.trim().isEmpty()) {
PAYNTI = Short.parseShort(s);
} else {
PAYNTI = Short.MIN_VALUE;
}
}

protected final void initPAYNTY(String s) {
if (!s.trim().isEmpty()) {
PAYNTY = Double.parseDouble(s);
} else {
PAYNTY = Double.NaN;
}
}

protected final void initPAYNW(String s) {
if (!s.trim().isEmpty()) {
PAYNW = Double.parseDouble(s);
} else {
PAYNW = Double.NaN;
}
}

protected final void initPAYS(String s) {
if (!s.trim().isEmpty()) {
PAYS = Integer.parseInt(s);
} else {
PAYS = Integer.MIN_VALUE;
}
}

protected final void initPAYSG(String s) {
if (!s.trim().isEmpty()) {
PAYSG = Short.parseShort(s);
} else {
PAYSG = Short.MIN_VALUE;
}
}

protected final void initPAYSLP(String s) {
if (!s.trim().isEmpty()) {
PAYSLP = Short.parseShort(s);
} else {
PAYSLP = Short.MIN_VALUE;
}
}

protected final void initPAYSW(String s) {
if (!s.trim().isEmpty()) {
PAYSW = Double.parseDouble(s);
} else {
PAYSW = Double.NaN;
}
}

protected final void initPAYTYP(String s) {
if (!s.trim().isEmpty()) {
PAYTYP = Byte.parseByte(s);
} else {
PAYTYP = Byte.MIN_VALUE;
}
}

protected final void initPAYTYP_BH(String s) {
if (!s.trim().isEmpty()) {
PAYTYP_BH = Byte.parseByte(s);
} else {
PAYTYP_BH = Byte.MIN_VALUE;
}
}

protected final void initPAYUW(String s) {
if (!s.trim().isEmpty()) {
PAYUW = Double.parseDouble(s);
} else {
PAYUW = Double.NaN;
}
}

protected final void initPCK1(String s) {
if (!s.trim().isEmpty()) {
PCK1 = Byte.parseByte(s);
} else {
PCK1 = Byte.MIN_VALUE;
}
}

protected final void initPCK2(String s) {
if (!s.trim().isEmpty()) {
PCK2 = Byte.parseByte(s);
} else {
PCK2 = Byte.MIN_VALUE;
}
}

protected final void initPE0H(String s) {
if (!s.trim().isEmpty()) {
PE0H = Byte.parseByte(s);
} else {
PE0H = Byte.MIN_VALUE;
}
}

protected final void initPE0M(String s) {
if (!s.trim().isEmpty()) {
PE0M = Byte.parseByte(s);
} else {
PE0M = Byte.MIN_VALUE;
}
}

protected final void initPENADD(String s) {
if (!s.trim().isEmpty()) {
PENADD = Short.parseShort(s);
} else {
PENADD = Short.MIN_VALUE;
}
}

protected final void initPENADV(String s) {
if (!s.trim().isEmpty()) {
PENADV = Short.parseShort(s);
} else {
PENADV = Short.MIN_VALUE;
}
}

protected final void initPENADW(String s) {
if (!s.trim().isEmpty()) {
PENADW = Double.parseDouble(s);
} else {
PENADW = Double.NaN;
}
}

protected final void initPENB4(String s) {
if (!s.trim().isEmpty()) {
PENB4 = Short.parseShort(s);
} else {
PENB4 = Short.MIN_VALUE;
}
}

protected final void initPENB4V(String s) {
if (!s.trim().isEmpty()) {
PENB4V = Short.parseShort(s);
} else {
PENB4V = Short.MIN_VALUE;
}
}

protected final void initPENB4W(String s) {
if (!s.trim().isEmpty()) {
PENB4W = Double.parseDouble(s);
} else {
PENB4W = Double.NaN;
}
}

protected final void initPENB4Y4(String s) {
if (!s.trim().isEmpty()) {
PENB4Y4 = Short.parseShort(s);
} else {
PENB4Y4 = Short.MIN_VALUE;
}
}

protected final void initPENCK1(String s) {
if (!s.trim().isEmpty()) {
PENCK1 = Byte.parseByte(s);
} else {
PENCK1 = Byte.MIN_VALUE;
}
}

protected final void initPENCK2(String s) {
if (!s.trim().isEmpty()) {
PENCK2 = Byte.parseByte(s);
} else {
PENCK2 = Byte.MIN_VALUE;
}
}

protected final void initPENMEX(String s) {
if (!s.trim().isEmpty()) {
PENMEX = Byte.parseByte(s);
} else {
PENMEX = Byte.MIN_VALUE;
}
}

protected final void initPENVRF(String s) {
if (!s.trim().isEmpty()) {
PENVRF = Byte.parseByte(s);
} else {
PENVRF = Byte.MIN_VALUE;
}
}

protected final void initPENYR4(String s) {
if (!s.trim().isEmpty()) {
PENYR4 = Short.parseShort(s);
} else {
PENYR4 = Short.MIN_VALUE;
}
}

protected final void initPF0H(String s) {
if (!s.trim().isEmpty()) {
PF0H = Byte.parseByte(s);
} else {
PF0H = Byte.MIN_VALUE;
}
}

protected final void initPF0M(String s) {
if (!s.trim().isEmpty()) {
PF0M = Byte.parseByte(s);
} else {
PF0M = Byte.MIN_VALUE;
}
}

protected final void initPID(String s) {
if (!s.trim().isEmpty()) {
PID = Integer.parseInt(s);
} else {
PID = Integer.MIN_VALUE;
}
}

protected final void initPLBORNC_CC(String s) {
if (!s.trim().isEmpty()) {
PLBORNC_CC = Short.parseShort(s);
} else {
PLBORNC_CC = Short.MIN_VALUE;
}
}

protected final void initPLNEW(String s) {
if (!s.trim().isEmpty()) {
PLNEW = Short.parseShort(s);
} else {
PLNEW = Short.MIN_VALUE;
}
}

protected final void initPLNOWM(String s) {
if (!s.trim().isEmpty()) {
PLNOWM = Short.parseShort(s);
} else {
PLNOWM = Short.MIN_VALUE;
}
}

protected final void initPLNOWY4(String s) {
if (!s.trim().isEmpty()) {
PLNOWY4 = Short.parseShort(s);
} else {
PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initPM0H(String s) {
if (!s.trim().isEmpty()) {
PM0H = Byte.parseByte(s);
} else {
PM0H = Byte.MIN_VALUE;
}
}

protected final void initPM0M(String s) {
if (!s.trim().isEmpty()) {
PM0M = Byte.parseByte(s);
} else {
PM0M = Byte.MIN_VALUE;
}
}

protected final void initPPLEVR(String s) {
if (!s.trim().isEmpty()) {
PPLEVR = Short.parseShort(s);
} else {
PPLEVR = Short.MIN_VALUE;
}
}

protected final void initPPPEN(String s) {
if (!s.trim().isEmpty()) {
PPPEN = Short.parseShort(s);
} else {
PPPEN = Short.MIN_VALUE;
}
}

protected final void initPPPEX(String s) {
if (!s.trim().isEmpty()) {
PPPEX = Byte.parseByte(s);
} else {
PPPEX = Byte.MIN_VALUE;
}
}

protected final void initPPPEXM(String s) {
if (!s.trim().isEmpty()) {
PPPEXM = Byte.parseByte(s);
} else {
PPPEXM = Byte.MIN_VALUE;
}
}

protected final void initPREARNI(String s) {
if (!s.trim().isEmpty()) {
PREARNI = Short.parseShort(s);
} else {
PREARNI = Short.MIN_VALUE;
}
}

protected final void initPREARN_BH(String s) {
if (!s.trim().isEmpty()) {
PREARN_BH = Short.parseShort(s);
} else {
PREARN_BH = Short.MIN_VALUE;
}
}

protected final void initPRESBGM(String s) {
if (!s.trim().isEmpty()) {
PRESBGM = Short.parseShort(s);
} else {
PRESBGM = Short.MIN_VALUE;
}
}

protected final void initPRESBY4(String s) {
if (!s.trim().isEmpty()) {
PRESBY4 = Short.parseShort(s);
} else {
PRESBY4 = Short.MIN_VALUE;
}
}

protected final void initPRESLY(String s) {
if (!s.trim().isEmpty()) {
PRESLY = Short.parseShort(s);
} else {
PRESLY = Short.MIN_VALUE;
}
}

protected final void initPRF101(String s) {
if (!s.trim().isEmpty()) {
PRF101 = Short.parseShort(s);
} else {
PRF101 = Short.MIN_VALUE;
}
}

protected final void initPRF102(String s) {
if (!s.trim().isEmpty()) {
PRF102 = Short.parseShort(s);
} else {
PRF102 = Short.MIN_VALUE;
}
}

protected final void initPRF107(String s) {
if (!s.trim().isEmpty()) {
PRF107 = Byte.parseByte(s);
} else {
PRF107 = Byte.MIN_VALUE;
}
}

protected final void initPRF116(String s) {
if (!s.trim().isEmpty()) {
PRF116 = Short.parseShort(s);
} else {
PRF116 = Short.MIN_VALUE;
}
}

protected final void initPRF125(String s) {
if (!s.trim().isEmpty()) {
PRF125 = Short.parseShort(s);
} else {
PRF125 = Short.MIN_VALUE;
}
}

protected final void initPRF131(String s) {
if (!s.trim().isEmpty()) {
PRF131 = Short.parseShort(s);
} else {
PRF131 = Short.MIN_VALUE;
}
}

protected final void initPRF135(String s) {
if (!s.trim().isEmpty()) {
PRF135 = Short.parseShort(s);
} else {
PRF135 = Short.MIN_VALUE;
}
}

protected final void initPRF137(String s) {
if (!s.trim().isEmpty()) {
PRF137 = Byte.parseByte(s);
} else {
PRF137 = Byte.MIN_VALUE;
}
}

protected final void initPRF139(String s) {
if (!s.trim().isEmpty()) {
PRF139 = Short.parseShort(s);
} else {
PRF139 = Short.MIN_VALUE;
}
}

protected final void initPRF141(String s) {
if (!s.trim().isEmpty()) {
PRF141 = Short.parseShort(s);
} else {
PRF141 = Short.MIN_VALUE;
}
}

protected final void initPRF143(String s) {
if (!s.trim().isEmpty()) {
PRF143 = Byte.parseByte(s);
} else {
PRF143 = Byte.MIN_VALUE;
}
}

protected final void initPRFEHQ(String s) {
if (!s.trim().isEmpty()) {
PRFEHQ = Short.parseShort(s);
} else {
PRFEHQ = Short.MIN_VALUE;
}
}

protected final void initPRFIRN(String s) {
if (!s.trim().isEmpty()) {
PRFIRN = Byte.parseByte(s);
} else {
PRFIRN = Byte.MIN_VALUE;
}
}

protected final void initPRFITBI(String s) {
if (!s.trim().isEmpty()) {
PRFITBI = Short.parseShort(s);
} else {
PRFITBI = Short.MIN_VALUE;
}
}

protected final void initPRFITB_BH(String s) {
if (!s.trim().isEmpty()) {
PRFITB_BH = Short.parseShort(s);
} else {
PRFITB_BH = Short.MIN_VALUE;
}
}

protected final void initPRJBBY4(String s) {
if (!s.trim().isEmpty()) {
PRJBBY4 = Short.parseShort(s);
} else {
PRJBBY4 = Short.MIN_VALUE;
}
}

protected final void initPRJBFT(String s) {
if (!s.trim().isEmpty()) {
PRJBFT = Byte.parseByte(s);
} else {
PRJBFT = Byte.MIN_VALUE;
}
}

protected final void initPRJBLY(String s) {
if (!s.trim().isEmpty()) {
PRJBLY = Short.parseShort(s);
} else {
PRJBLY = Short.MIN_VALUE;
}
}

protected final void initPRRS2I(String s) {
if (!s.trim().isEmpty()) {
PRRS2I = Short.parseShort(s);
} else {
PRRS2I = Short.MIN_VALUE;
}
}

protected final void initPRSEHQ(String s) {
if (!s.trim().isEmpty()) {
PRSEHQ = Short.parseShort(s);
} else {
PRSEHQ = Short.MIN_VALUE;
}
}

protected final void initPRWHY(String s) {
if (!s.trim().isEmpty()) {
PRWHY = Short.parseShort(s);
} else {
PRWHY = Short.MIN_VALUE;
}
}

protected final void initPV0H(String s) {
if (!s.trim().isEmpty()) {
PV0H = Byte.parseByte(s);
} else {
PV0H = Byte.MIN_VALUE;
}
}

protected final void initPV0M(String s) {
if (!s.trim().isEmpty()) {
PV0M = Byte.parseByte(s);
} else {
PV0M = Byte.MIN_VALUE;
}
}

protected final void initPYTC(String s) {
if (!s.trim().isEmpty()) {
PYTC = Byte.parseByte(s);
} else {
PYTC = Byte.MIN_VALUE;
}
}

protected final void initPYWFTC(String s) {
if (!s.trim().isEmpty()) {
PYWFTC = Short.parseShort(s);
} else {
PYWFTC = Short.MIN_VALUE;
}
}

protected final void initPYWFTCW(String s) {
if (!s.trim().isEmpty()) {
PYWFTCW = Double.parseDouble(s);
} else {
PYWFTCW = Double.NaN;
}
}

protected final void initQFA(String s) {
if (!s.trim().isEmpty()) {
QFA = Short.parseShort(s);
} else {
QFA = Short.MIN_VALUE;
}
}

protected final void initQFACHI(String s) {
if (!s.trim().isEmpty()) {
QFACHI = Short.parseShort(s);
} else {
QFACHI = Short.MIN_VALUE;
}
}

protected final void initQFB(String s) {
if (!s.trim().isEmpty()) {
QFB = Short.parseShort(s);
} else {
QFB = Short.MIN_VALUE;
}
}

protected final void initQFC(String s) {
if (!s.trim().isEmpty()) {
QFC = Short.parseShort(s);
} else {
QFC = Short.MIN_VALUE;
}
}

protected final void initQFD(String s) {
if (!s.trim().isEmpty()) {
QFD = Short.parseShort(s);
} else {
QFD = Short.MIN_VALUE;
}
}

protected final void initQFE(String s) {
if (!s.trim().isEmpty()) {
QFE = Short.parseShort(s);
} else {
QFE = Short.MIN_VALUE;
}
}

protected final void initQFED(String s) {
if (!s.trim().isEmpty()) {
QFED = Short.parseShort(s);
} else {
QFED = Short.MIN_VALUE;
}
}

protected final void initQFEDA(String s) {
if (!s.trim().isEmpty()) {
QFEDA = Short.parseShort(s);
} else {
QFEDA = Short.MIN_VALUE;
}
}

protected final void initQFEDB(String s) {
if (!s.trim().isEmpty()) {
QFEDB = Short.parseShort(s);
} else {
QFEDB = Short.MIN_VALUE;
}
}

protected final void initQFEDC(String s) {
if (!s.trim().isEmpty()) {
QFEDC = Short.parseShort(s);
} else {
QFEDC = Short.MIN_VALUE;
}
}

protected final void initQFEDD(String s) {
if (!s.trim().isEmpty()) {
QFEDD = Short.parseShort(s);
} else {
QFEDD = Short.MIN_VALUE;
}
}

protected final void initQFEDE(String s) {
if (!s.trim().isEmpty()) {
QFEDE = Short.parseShort(s);
} else {
QFEDE = Short.MIN_VALUE;
}
}

protected final void initQFEDF(String s) {
if (!s.trim().isEmpty()) {
QFEDF = Short.parseShort(s);
} else {
QFEDF = Short.MIN_VALUE;
}
}

protected final void initQFEDG(String s) {
if (!s.trim().isEmpty()) {
QFEDG = Short.parseShort(s);
} else {
QFEDG = Short.MIN_VALUE;
}
}

protected final void initQFEDH(String s) {
if (!s.trim().isEmpty()) {
QFEDH = Short.parseShort(s);
} else {
QFEDH = Short.MIN_VALUE;
}
}

protected final void initQFEDHI(String s) {
if (!s.trim().isEmpty()) {
QFEDHI = Short.parseShort(s);
} else {
QFEDHI = Short.MIN_VALUE;
}
}

protected final void initQFEDI(String s) {
if (!s.trim().isEmpty()) {
QFEDI = Short.parseShort(s);
} else {
QFEDI = Short.MIN_VALUE;
}
}

protected final void initQFEDJ(String s) {
if (!s.trim().isEmpty()) {
QFEDJ = Short.parseShort(s);
} else {
QFEDJ = Short.MIN_VALUE;
}
}

protected final void initQFEDK(String s) {
if (!s.trim().isEmpty()) {
QFEDK = Short.parseShort(s);
} else {
QFEDK = Short.MIN_VALUE;
}
}

protected final void initQFEDL(String s) {
if (!s.trim().isEmpty()) {
QFEDL = Short.parseShort(s);
} else {
QFEDL = Short.MIN_VALUE;
}
}

protected final void initQFEDM(String s) {
if (!s.trim().isEmpty()) {
QFEDM = Short.parseShort(s);
} else {
QFEDM = Short.MIN_VALUE;
}
}

protected final void initQFEDN(String s) {
if (!s.trim().isEmpty()) {
QFEDN = Short.parseShort(s);
} else {
QFEDN = Short.MIN_VALUE;
}
}

protected final void initQFEDO(String s) {
if (!s.trim().isEmpty()) {
QFEDO = Short.parseShort(s);
} else {
QFEDO = Short.MIN_VALUE;
}
}

protected final void initQFEDP(String s) {
if (!s.trim().isEmpty()) {
QFEDP = Short.parseShort(s);
} else {
QFEDP = Short.MIN_VALUE;
}
}

protected final void initQFEDQ(String s) {
if (!s.trim().isEmpty()) {
QFEDQ = Short.parseShort(s);
} else {
QFEDQ = Short.MIN_VALUE;
}
}

protected final void initQFEDR(String s) {
if (!s.trim().isEmpty()) {
QFEDR = Short.parseShort(s);
} else {
QFEDR = Short.MIN_VALUE;
}
}

protected final void initQFEDS(String s) {
if (!s.trim().isEmpty()) {
QFEDS = Short.parseShort(s);
} else {
QFEDS = Short.MIN_VALUE;
}
}

protected final void initQFEDT(String s) {
if (!s.trim().isEmpty()) {
QFEDT = Byte.parseByte(s);
} else {
QFEDT = Byte.MIN_VALUE;
}
}

protected final void initQFEDU(String s) {
if (!s.trim().isEmpty()) {
QFEDU = Byte.parseByte(s);
} else {
QFEDU = Byte.MIN_VALUE;
}
}

protected final void initQFEDX(String s) {
if (!s.trim().isEmpty()) {
QFEDX = Short.parseShort(s);
} else {
QFEDX = Short.MIN_VALUE;
}
}

protected final void initQFEDXA(String s) {
if (!s.trim().isEmpty()) {
QFEDXA = Short.parseShort(s);
} else {
QFEDXA = Short.MIN_VALUE;
}
}

protected final void initQFEDXB(String s) {
if (!s.trim().isEmpty()) {
QFEDXB = Short.parseShort(s);
} else {
QFEDXB = Short.MIN_VALUE;
}
}

protected final void initQFEDXG(String s) {
if (!s.trim().isEmpty()) {
QFEDXG = Short.parseShort(s);
} else {
QFEDXG = Short.MIN_VALUE;
}
}

protected final void initQFEDXH(String s) {
if (!s.trim().isEmpty()) {
QFEDXH = Short.parseShort(s);
} else {
QFEDXH = Short.MIN_VALUE;
}
}

protected final void initQFEDXI(String s) {
if (!s.trim().isEmpty()) {
QFEDXI = Short.parseShort(s);
} else {
QFEDXI = Short.MIN_VALUE;
}
}

protected final void initQFEDXL(String s) {
if (!s.trim().isEmpty()) {
QFEDXL = Byte.parseByte(s);
} else {
QFEDXL = Byte.MIN_VALUE;
}
}

protected final void initQFEDXM(String s) {
if (!s.trim().isEmpty()) {
QFEDXM = Byte.parseByte(s);
} else {
QFEDXM = Byte.MIN_VALUE;
}
}

protected final void initQFEDXN(String s) {
if (!s.trim().isEmpty()) {
QFEDXN = Byte.parseByte(s);
} else {
QFEDXN = Byte.MIN_VALUE;
}
}

protected final void initQFEDXO(String s) {
if (!s.trim().isEmpty()) {
QFEDXO = Byte.parseByte(s);
} else {
QFEDXO = Byte.MIN_VALUE;
}
}

protected final void initQFF(String s) {
if (!s.trim().isEmpty()) {
QFF = Short.parseShort(s);
} else {
QFF = Short.MIN_VALUE;
}
}

protected final void initQFG(String s) {
if (!s.trim().isEmpty()) {
QFG = Short.parseShort(s);
} else {
QFG = Short.MIN_VALUE;
}
}

protected final void initQFH(String s) {
if (!s.trim().isEmpty()) {
QFH = Short.parseShort(s);
} else {
QFH = Short.MIN_VALUE;
}
}

protected final void initQFHAS(String s) {
if (!s.trim().isEmpty()) {
QFHAS = Short.parseShort(s);
} else {
QFHAS = Short.MIN_VALUE;
}
}

protected final void initQFI(String s) {
if (!s.trim().isEmpty()) {
QFI = Short.parseShort(s);
} else {
QFI = Short.MIN_VALUE;
}
}

protected final void initQFJ(String s) {
if (!s.trim().isEmpty()) {
QFJ = Short.parseShort(s);
} else {
QFJ = Short.MIN_VALUE;
}
}

protected final void initQFK(String s) {
if (!s.trim().isEmpty()) {
QFK = Short.parseShort(s);
} else {
QFK = Short.MIN_VALUE;
}
}

protected final void initQFL(String s) {
if (!s.trim().isEmpty()) {
QFL = Short.parseShort(s);
} else {
QFL = Short.MIN_VALUE;
}
}

protected final void initQFM(String s) {
if (!s.trim().isEmpty()) {
QFM = Short.parseShort(s);
} else {
QFM = Short.MIN_VALUE;
}
}

protected final void initQFN(String s) {
if (!s.trim().isEmpty()) {
QFN = Short.parseShort(s);
} else {
QFN = Short.MIN_VALUE;
}
}

protected final void initQFREC(String s) {
if (!s.trim().isEmpty()) {
QFREC = Byte.parseByte(s);
} else {
QFREC = Byte.MIN_VALUE;
}
}

protected final void initQFVOC(String s) {
if (!s.trim().isEmpty()) {
QFVOC = Short.parseShort(s);
} else {
QFVOC = Short.MIN_VALUE;
}
}

protected final void initQFX(String s) {
if (!s.trim().isEmpty()) {
QFX = Short.parseShort(s);
} else {
QFX = Short.MIN_VALUE;
}
}

protected final void initQFXC(String s) {
if (!s.trim().isEmpty()) {
QFXC = Short.parseShort(s);
} else {
QFXC = Short.MIN_VALUE;
}
}

protected final void initQFXD(String s) {
if (!s.trim().isEmpty()) {
QFXD = Short.parseShort(s);
} else {
QFXD = Short.MIN_VALUE;
}
}

protected final void initQFXE(String s) {
if (!s.trim().isEmpty()) {
QFXE = Short.parseShort(s);
} else {
QFXE = Short.MIN_VALUE;
}
}

protected final void initQFXF(String s) {
if (!s.trim().isEmpty()) {
QFXF = Short.parseShort(s);
} else {
QFXF = Short.MIN_VALUE;
}
}

protected final void initQFXG(String s) {
if (!s.trim().isEmpty()) {
QFXG = Short.parseShort(s);
} else {
QFXG = Short.MIN_VALUE;
}
}

protected final void initQFXH(String s) {
if (!s.trim().isEmpty()) {
QFXH = Short.parseShort(s);
} else {
QFXH = Short.MIN_VALUE;
}
}

protected final void initQFXK(String s) {
if (!s.trim().isEmpty()) {
QFXK = Short.parseShort(s);
} else {
QFXK = Short.MIN_VALUE;
}
}

protected final void initQFXL(String s) {
if (!s.trim().isEmpty()) {
QFXL = Short.parseShort(s);
} else {
QFXL = Short.MIN_VALUE;
}
}

protected final void initQFXM(String s) {
if (!s.trim().isEmpty()) {
QFXM = Short.parseShort(s);
} else {
QFXM = Short.MIN_VALUE;
}
}

protected final void initQFXN(String s) {
if (!s.trim().isEmpty()) {
QFXN = Short.parseShort(s);
} else {
QFXN = Short.MIN_VALUE;
}
}

protected final void initQFXO(String s) {
if (!s.trim().isEmpty()) {
QFXO = Byte.parseByte(s);
} else {
QFXO = Byte.MIN_VALUE;
}
}

protected final void initQFXP(String s) {
if (!s.trim().isEmpty()) {
QFXP = Byte.parseByte(s);
} else {
QFXP = Byte.MIN_VALUE;
}
}

protected final void initQFXQ(String s) {
if (!s.trim().isEmpty()) {
QFXQ = Byte.parseByte(s);
} else {
QFXQ = Byte.MIN_VALUE;
}
}

protected final void initQFXR(String s) {
if (!s.trim().isEmpty()) {
QFXR = Byte.parseByte(s);
} else {
QFXR = Byte.MIN_VALUE;
}
}

protected final void initQLFA(String s) {
if (!s.trim().isEmpty()) {
QLFA = Byte.parseByte(s);
} else {
QLFA = Byte.MIN_VALUE;
}
}

protected final void initQLFB(String s) {
if (!s.trim().isEmpty()) {
QLFB = Byte.parseByte(s);
} else {
QLFB = Byte.MIN_VALUE;
}
}

protected final void initQLFC(String s) {
if (!s.trim().isEmpty()) {
QLFC = Byte.parseByte(s);
} else {
QLFC = Byte.MIN_VALUE;
}
}

protected final void initQLFD(String s) {
if (!s.trim().isEmpty()) {
QLFD = Byte.parseByte(s);
} else {
QLFD = Byte.MIN_VALUE;
}
}

protected final void initQLFE(String s) {
if (!s.trim().isEmpty()) {
QLFE = Byte.parseByte(s);
} else {
QLFE = Byte.MIN_VALUE;
}
}

protected final void initQLFF(String s) {
if (!s.trim().isEmpty()) {
QLFF = Byte.parseByte(s);
} else {
QLFF = Byte.MIN_VALUE;
}
}

protected final void initQLFG(String s) {
if (!s.trim().isEmpty()) {
QLFG = Byte.parseByte(s);
} else {
QLFG = Byte.MIN_VALUE;
}
}

protected final void initQLFH(String s) {
if (!s.trim().isEmpty()) {
QLFH = Byte.parseByte(s);
} else {
QLFH = Byte.MIN_VALUE;
}
}

protected final void initQLFI(String s) {
if (!s.trim().isEmpty()) {
QLFI = Byte.parseByte(s);
} else {
QLFI = Byte.MIN_VALUE;
}
}

protected final void initQLFJ(String s) {
if (!s.trim().isEmpty()) {
QLFJ = Byte.parseByte(s);
} else {
QLFJ = Byte.MIN_VALUE;
}
}

protected final void initQLFK(String s) {
if (!s.trim().isEmpty()) {
QLFK = Byte.parseByte(s);
} else {
QLFK = Byte.MIN_VALUE;
}
}

protected final void initQLFL(String s) {
if (!s.trim().isEmpty()) {
QLFL = Byte.parseByte(s);
} else {
QLFL = Byte.MIN_VALUE;
}
}

protected final void initQLFM(String s) {
if (!s.trim().isEmpty()) {
QLFM = Byte.parseByte(s);
} else {
QLFM = Byte.MIN_VALUE;
}
}

protected final void initQLFN(String s) {
if (!s.trim().isEmpty()) {
QLFN = Byte.parseByte(s);
} else {
QLFN = Byte.MIN_VALUE;
}
}

protected final void initQLFO(String s) {
if (!s.trim().isEmpty()) {
QLFO = Byte.parseByte(s);
} else {
QLFO = Byte.MIN_VALUE;
}
}

protected final void initQLFP(String s) {
if (!s.trim().isEmpty()) {
QLFP = Byte.parseByte(s);
} else {
QLFP = Byte.MIN_VALUE;
}
}

protected final void initQLFQ(String s) {
if (!s.trim().isEmpty()) {
QLFQ = Byte.parseByte(s);
} else {
QLFQ = Byte.MIN_VALUE;
}
}

protected final void initQLFR(String s) {
if (!s.trim().isEmpty()) {
QLFR = Byte.parseByte(s);
} else {
QLFR = Byte.MIN_VALUE;
}
}

protected final void initQLFS(String s) {
if (!s.trim().isEmpty()) {
QLFS = Byte.parseByte(s);
} else {
QLFS = Byte.MIN_VALUE;
}
}

protected final void initRACEL_BH(String s) {
if (!s.trim().isEmpty()) {
RACEL_BH = Byte.parseByte(s);
} else {
RACEL_BH = Byte.MIN_VALUE;
}
}

protected final void initRACH12(String s) {
if (!s.trim().isEmpty()) {
RACH12 = Short.parseShort(s);
} else {
RACH12 = Short.MIN_VALUE;
}
}

protected final void initRCHBEN(String s) {
if (!s.trim().isEmpty()) {
RCHBEN = Byte.parseByte(s);
} else {
RCHBEN = Byte.MIN_VALUE;
}
}

protected final void initRDSBEN(String s) {
if (!s.trim().isEmpty()) {
RDSBEN = Byte.parseByte(s);
} else {
RDSBEN = Byte.MIN_VALUE;
}
}

protected final void initRDSBN16(String s) {
if (!s.trim().isEmpty()) {
RDSBN16 = Byte.parseByte(s);
} else {
RDSBN16 = Byte.MIN_VALUE;
}
}

protected final void initRDSBN18(String s) {
if (!s.trim().isEmpty()) {
RDSBN18 = Byte.parseByte(s);
} else {
RDSBN18 = Byte.MIN_VALUE;
}
}

protected final void initRDSBN19(String s) {
if (!s.trim().isEmpty()) {
RDSBN19 = Byte.parseByte(s);
} else {
RDSBN19 = Byte.MIN_VALUE;
}
}

protected final void initRDSBN21(String s) {
if (!s.trim().isEmpty()) {
RDSBN21 = Byte.parseByte(s);
} else {
RDSBN21 = Byte.MIN_VALUE;
}
}

protected final void initRDSBN22(String s) {
if (!s.trim().isEmpty()) {
RDSBN22 = Byte.parseByte(s);
} else {
RDSBN22 = Byte.MIN_VALUE;
}
}

protected final void initRDSBN25(String s) {
if (!s.trim().isEmpty()) {
RDSBN25 = Byte.parseByte(s);
} else {
RDSBN25 = Byte.MIN_VALUE;
}
}

protected final void initRDSBN26(String s) {
if (!s.trim().isEmpty()) {
RDSBN26 = Byte.parseByte(s);
} else {
RDSBN26 = Byte.MIN_VALUE;
}
}

protected final void initRDSBN27(String s) {
if (!s.trim().isEmpty()) {
RDSBN27 = Byte.parseByte(s);
} else {
RDSBN27 = Byte.MIN_VALUE;
}
}

protected final void initRDSBN28(String s) {
if (!s.trim().isEmpty()) {
RDSBN28 = Byte.parseByte(s);
} else {
RDSBN28 = Byte.MIN_VALUE;
}
}

protected final void initREGION(String s) {
if (!s.trim().isEmpty()) {
REGION = Short.parseShort(s);
} else {
REGION = Short.MIN_VALUE;
}
}

protected final void initREMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
REMAIL_CODE = Byte.parseByte(s);
} else {
REMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initRETAMT(String s) {
if (!s.trim().isEmpty()) {
RETAMT = Byte.parseByte(s);
} else {
RETAMT = Byte.MIN_VALUE;
}
}

protected final void initRETEX(String s) {
if (!s.trim().isEmpty()) {
RETEX = Byte.parseByte(s);
} else {
RETEX = Byte.MIN_VALUE;
}
}

protected final void initRETEXP(String s) {
if (!s.trim().isEmpty()) {
RETEXP = Byte.parseByte(s);
} else {
RETEXP = Byte.MIN_VALUE;
}
}

protected final void initRETFIX(String s) {
if (!s.trim().isEmpty()) {
RETFIX = Byte.parseByte(s);
} else {
RETFIX = Byte.MIN_VALUE;
}
}

protected final void initRETSUF(String s) {
if (!s.trim().isEmpty()) {
RETSUF = Byte.parseByte(s);
} else {
RETSUF = Byte.MIN_VALUE;
}
}

protected final void initREWORK(String s) {
if (!s.trim().isEmpty()) {
REWORK = Byte.parseByte(s);
} else {
REWORK = Byte.MIN_VALUE;
}
}

protected final void initRF2CK(String s) {
if (!s.trim().isEmpty()) {
RF2CK = Byte.parseByte(s);
} else {
RF2CK = Byte.MIN_VALUE;
}
}

protected final void initRF6CK(String s) {
if (!s.trim().isEmpty()) {
RF6CK = Byte.parseByte(s);
} else {
RF6CK = Byte.MIN_VALUE;
}
}

protected final void initRHBEN(String s) {
if (!s.trim().isEmpty()) {
RHBEN = Byte.parseByte(s);
} else {
RHBEN = Byte.MIN_VALUE;
}
}

protected final void initRIS(String s) {
if (!s.trim().isEmpty()) {
RIS = Byte.parseByte(s);
} else {
RIS = Byte.MIN_VALUE;
}
}

protected final void initRJSA(String s) {
if (!s.trim().isEmpty()) {
RJSA = Byte.parseByte(s);
} else {
RJSA = Byte.MIN_VALUE;
}
}

protected final void initRPENCR(String s) {
if (!s.trim().isEmpty()) {
RPENCR = Byte.parseByte(s);
} else {
RPENCR = Byte.MIN_VALUE;
}
}

protected final void initRSRPEN(String s) {
if (!s.trim().isEmpty()) {
RSRPEN = Byte.parseByte(s);
} else {
RSRPEN = Byte.MIN_VALUE;
}
}

protected final void initRTCOMP(String s) {
if (!s.trim().isEmpty()) {
RTCOMP = Byte.parseByte(s);
} else {
RTCOMP = Byte.MIN_VALUE;
}
}

protected final void initRTCON1_BH(String s) {
if (!s.trim().isEmpty()) {
RTCON1_BH = Byte.parseByte(s);
} else {
RTCON1_BH = Byte.MIN_VALUE;
}
}

protected final void initRTCON2_BH(String s) {
if (!s.trim().isEmpty()) {
RTCON2_BH = Byte.parseByte(s);
} else {
RTCON2_BH = Byte.MIN_VALUE;
}
}

protected final void initRTCON3_BH(String s) {
if (!s.trim().isEmpty()) {
RTCON3_BH = Byte.parseByte(s);
} else {
RTCON3_BH = Byte.MIN_VALUE;
}
}

protected final void initRTCON4_BH(String s) {
if (!s.trim().isEmpty()) {
RTCON4_BH = Byte.parseByte(s);
} else {
RTCON4_BH = Byte.MIN_VALUE;
}
}

protected final void initRTFND1(String s) {
if (!s.trim().isEmpty()) {
RTFND1 = Byte.parseByte(s);
} else {
RTFND1 = Byte.MIN_VALUE;
}
}

protected final void initRTFND10(String s) {
if (!s.trim().isEmpty()) {
RTFND10 = Byte.parseByte(s);
} else {
RTFND10 = Byte.MIN_VALUE;
}
}

protected final void initRTFND2(String s) {
if (!s.trim().isEmpty()) {
RTFND2 = Byte.parseByte(s);
} else {
RTFND2 = Byte.MIN_VALUE;
}
}

protected final void initRTFND3(String s) {
if (!s.trim().isEmpty()) {
RTFND3 = Byte.parseByte(s);
} else {
RTFND3 = Byte.MIN_VALUE;
}
}

protected final void initRTFND4(String s) {
if (!s.trim().isEmpty()) {
RTFND4 = Byte.parseByte(s);
} else {
RTFND4 = Byte.MIN_VALUE;
}
}

protected final void initRTFND5(String s) {
if (!s.trim().isEmpty()) {
RTFND5 = Byte.parseByte(s);
} else {
RTFND5 = Byte.MIN_VALUE;
}
}

protected final void initRTFND6(String s) {
if (!s.trim().isEmpty()) {
RTFND6 = Byte.parseByte(s);
} else {
RTFND6 = Byte.MIN_VALUE;
}
}

protected final void initRTFND7(String s) {
if (!s.trim().isEmpty()) {
RTFND7 = Byte.parseByte(s);
} else {
RTFND7 = Byte.MIN_VALUE;
}
}

protected final void initRTFND8(String s) {
if (!s.trim().isEmpty()) {
RTFND8 = Byte.parseByte(s);
} else {
RTFND8 = Byte.MIN_VALUE;
}
}

protected final void initRTFND9(String s) {
if (!s.trim().isEmpty()) {
RTFND9 = Byte.parseByte(s);
} else {
RTFND9 = Byte.MIN_VALUE;
}
}

protected final void initRTFND96(String s) {
if (!s.trim().isEmpty()) {
RTFND96 = Byte.parseByte(s);
} else {
RTFND96 = Byte.MIN_VALUE;
}
}

protected final void initRTFNDA(String s) {
if (!s.trim().isEmpty()) {
RTFNDA = Byte.parseByte(s);
} else {
RTFNDA = Byte.MIN_VALUE;
}
}

protected final void initRTFNDB(String s) {
if (!s.trim().isEmpty()) {
RTFNDB = Byte.parseByte(s);
} else {
RTFNDB = Byte.MIN_VALUE;
}
}

protected final void initRTFNDC(String s) {
if (!s.trim().isEmpty()) {
RTFNDC = Byte.parseByte(s);
} else {
RTFNDC = Byte.MIN_VALUE;
}
}

protected final void initRTFNDD(String s) {
if (!s.trim().isEmpty()) {
RTFNDD = Byte.parseByte(s);
} else {
RTFNDD = Byte.MIN_VALUE;
}
}

protected final void initRTFNDE(String s) {
if (!s.trim().isEmpty()) {
RTFNDE = Byte.parseByte(s);
} else {
RTFNDE = Byte.MIN_VALUE;
}
}

protected final void initRTFNDF(String s) {
if (!s.trim().isEmpty()) {
RTFNDF = Byte.parseByte(s);
} else {
RTFNDF = Byte.MIN_VALUE;
}
}

protected final void initRTFNDG(String s) {
if (!s.trim().isEmpty()) {
RTFNDG = Byte.parseByte(s);
} else {
RTFNDG = Byte.MIN_VALUE;
}
}

protected final void initRTFNDH(String s) {
if (!s.trim().isEmpty()) {
RTFNDH = Byte.parseByte(s);
} else {
RTFNDH = Byte.MIN_VALUE;
}
}

protected final void initRTFNDI(String s) {
if (!s.trim().isEmpty()) {
RTFNDI = Byte.parseByte(s);
} else {
RTFNDI = Byte.MIN_VALUE;
}
}

protected final void initRTFNDJ(String s) {
if (!s.trim().isEmpty()) {
RTFNDJ = Byte.parseByte(s);
} else {
RTFNDJ = Byte.MIN_VALUE;
}
}

protected final void initRTFNDK(String s) {
if (!s.trim().isEmpty()) {
RTFNDK = Byte.parseByte(s);
} else {
RTFNDK = Byte.MIN_VALUE;
}
}

protected final void initRTFNDL(String s) {
if (!s.trim().isEmpty()) {
RTFNDL = Byte.parseByte(s);
} else {
RTFNDL = Byte.MIN_VALUE;
}
}

protected final void initRTFNDM(String s) {
if (!s.trim().isEmpty()) {
RTFNDM = Byte.parseByte(s);
} else {
RTFNDM = Byte.MIN_VALUE;
}
}

protected final void initRTFNDN(String s) {
if (!s.trim().isEmpty()) {
RTFNDN = Byte.parseByte(s);
} else {
RTFNDN = Byte.MIN_VALUE;
}
}

protected final void initRTFNDO(String s) {
if (!s.trim().isEmpty()) {
RTFNDO = Byte.parseByte(s);
} else {
RTFNDO = Byte.MIN_VALUE;
}
}

protected final void initRTFNDP(String s) {
if (!s.trim().isEmpty()) {
RTFNDP = Byte.parseByte(s);
} else {
RTFNDP = Byte.MIN_VALUE;
}
}

protected final void initRTLATA(String s) {
if (!s.trim().isEmpty()) {
RTLATA = Byte.parseByte(s);
} else {
RTLATA = Byte.MIN_VALUE;
}
}

protected final void initRTLATB(String s) {
if (!s.trim().isEmpty()) {
RTLATB = Byte.parseByte(s);
} else {
RTLATB = Byte.MIN_VALUE;
}
}

protected final void initRTLATC(String s) {
if (!s.trim().isEmpty()) {
RTLATC = Byte.parseByte(s);
} else {
RTLATC = Byte.MIN_VALUE;
}
}

protected final void initRTLATD(String s) {
if (!s.trim().isEmpty()) {
RTLATD = Byte.parseByte(s);
} else {
RTLATD = Byte.MIN_VALUE;
}
}

protected final void initRTLATE(String s) {
if (!s.trim().isEmpty()) {
RTLATE = Byte.parseByte(s);
} else {
RTLATE = Byte.MIN_VALUE;
}
}

protected final void initRTLATF(String s) {
if (!s.trim().isEmpty()) {
RTLATF = Byte.parseByte(s);
} else {
RTLATF = Byte.MIN_VALUE;
}
}

protected final void initRTLATG(String s) {
if (!s.trim().isEmpty()) {
RTLATG = Byte.parseByte(s);
} else {
RTLATG = Byte.MIN_VALUE;
}
}

protected final void initRTLATH(String s) {
if (!s.trim().isEmpty()) {
RTLATH = Byte.parseByte(s);
} else {
RTLATH = Byte.MIN_VALUE;
}
}

protected final void initRTLATI(String s) {
if (!s.trim().isEmpty()) {
RTLATI = Byte.parseByte(s);
} else {
RTLATI = Byte.MIN_VALUE;
}
}

protected final void initRTLATJ(String s) {
if (!s.trim().isEmpty()) {
RTLATJ = Byte.parseByte(s);
} else {
RTLATJ = Byte.MIN_VALUE;
}
}

protected final void initRTMAGE(String s) {
if (!s.trim().isEmpty()) {
RTMAGE = Byte.parseByte(s);
} else {
RTMAGE = Byte.MIN_VALUE;
}
}

protected final void initRTPRO1_BH(String s) {
if (!s.trim().isEmpty()) {
RTPRO1_BH = Byte.parseByte(s);
} else {
RTPRO1_BH = Byte.MIN_VALUE;
}
}

protected final void initRTPRO2_BH(String s) {
if (!s.trim().isEmpty()) {
RTPRO2_BH = Byte.parseByte(s);
} else {
RTPRO2_BH = Byte.MIN_VALUE;
}
}

protected final void initRTPRO3_BH(String s) {
if (!s.trim().isEmpty()) {
RTPRO3_BH = Byte.parseByte(s);
} else {
RTPRO3_BH = Byte.MIN_VALUE;
}
}

protected final void initRTPRO4_BH(String s) {
if (!s.trim().isEmpty()) {
RTPRO4_BH = Byte.parseByte(s);
} else {
RTPRO4_BH = Byte.MIN_VALUE;
}
}

protected final void initRTPRO5(String s) {
if (!s.trim().isEmpty()) {
RTPRO5 = Byte.parseByte(s);
} else {
RTPRO5 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO6(String s) {
if (!s.trim().isEmpty()) {
RTPRO6 = Byte.parseByte(s);
} else {
RTPRO6 = Byte.MIN_VALUE;
}
}

protected final void initRTRHM(String s) {
if (!s.trim().isEmpty()) {
RTRHM = Byte.parseByte(s);
} else {
RTRHM = Byte.MIN_VALUE;
}
}

protected final void initRTRLLT(String s) {
if (!s.trim().isEmpty()) {
RTRLLT = Byte.parseByte(s);
} else {
RTRLLT = Byte.MIN_VALUE;
}
}

protected final void initRTRLYA(String s) {
if (!s.trim().isEmpty()) {
RTRLYA = Byte.parseByte(s);
} else {
RTRLYA = Byte.MIN_VALUE;
}
}

protected final void initRTRLYB(String s) {
if (!s.trim().isEmpty()) {
RTRLYB = Byte.parseByte(s);
} else {
RTRLYB = Byte.MIN_VALUE;
}
}

protected final void initRTRLYC(String s) {
if (!s.trim().isEmpty()) {
RTRLYC = Byte.parseByte(s);
} else {
RTRLYC = Byte.MIN_VALUE;
}
}

protected final void initRTRLYD(String s) {
if (!s.trim().isEmpty()) {
RTRLYD = Byte.parseByte(s);
} else {
RTRLYD = Byte.MIN_VALUE;
}
}

protected final void initRTRLYE(String s) {
if (!s.trim().isEmpty()) {
RTRLYE = Byte.parseByte(s);
} else {
RTRLYE = Byte.MIN_VALUE;
}
}

protected final void initRTRLYF(String s) {
if (!s.trim().isEmpty()) {
RTRLYF = Byte.parseByte(s);
} else {
RTRLYF = Byte.MIN_VALUE;
}
}

protected final void initRTRLYG(String s) {
if (!s.trim().isEmpty()) {
RTRLYG = Byte.parseByte(s);
} else {
RTRLYG = Byte.MIN_VALUE;
}
}

protected final void initRTRLYH(String s) {
if (!s.trim().isEmpty()) {
RTRLYH = Byte.parseByte(s);
} else {
RTRLYH = Byte.MIN_VALUE;
}
}

protected final void initRTRLYI(String s) {
if (!s.trim().isEmpty()) {
RTRLYI = Byte.parseByte(s);
} else {
RTRLYI = Byte.MIN_VALUE;
}
}

protected final void initRTRLYJ(String s) {
if (!s.trim().isEmpty()) {
RTRLYJ = Byte.parseByte(s);
} else {
RTRLYJ = Byte.MIN_VALUE;
}
}

protected final void initRTRLYK(String s) {
if (!s.trim().isEmpty()) {
RTRLYK = Byte.parseByte(s);
} else {
RTRLYK = Byte.MIN_VALUE;
}
}

protected final void initRTRLYL(String s) {
if (!s.trim().isEmpty()) {
RTRLYL = Byte.parseByte(s);
} else {
RTRLYL = Byte.MIN_VALUE;
}
}

protected final void initRTRLYM(String s) {
if (!s.trim().isEmpty()) {
RTRLYM = Byte.parseByte(s);
} else {
RTRLYM = Byte.MIN_VALUE;
}
}

protected final void initRTSAT(String s) {
if (!s.trim().isEmpty()) {
RTSAT = Byte.parseByte(s);
} else {
RTSAT = Byte.MIN_VALUE;
}
}

protected final void initRTVOL(String s) {
if (!s.trim().isEmpty()) {
RTVOL = Byte.parseByte(s);
} else {
RTVOL = Byte.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSAMPST_BH(String s) {
if (!s.trim().isEmpty()) {
SAMPST_BH = Short.parseShort(s);
} else {
SAMPST_BH = Short.MIN_VALUE;
}
}

protected final void initSATINV(String s) {
if (!s.trim().isEmpty()) {
SATINV = Byte.parseByte(s);
} else {
SATINV = Byte.MIN_VALUE;
}
}

protected final void initSAVE(String s) {
if (!s.trim().isEmpty()) {
SAVE = Short.parseShort(s);
} else {
SAVE = Short.MIN_VALUE;
}
}

protected final void initSAVED(String s) {
if (!s.trim().isEmpty()) {
SAVED = Integer.parseInt(s);
} else {
SAVED = Integer.MIN_VALUE;
}
}

protected final void initSAVEY1(String s) {
if (!s.trim().isEmpty()) {
SAVEY1 = Short.parseShort(s);
} else {
SAVEY1 = Short.MIN_VALUE;
}
}

protected final void initSAVEY2(String s) {
if (!s.trim().isEmpty()) {
SAVEY2 = Short.parseShort(s);
} else {
SAVEY2 = Short.MIN_VALUE;
}
}

protected final void initSAVLT(String s) {
if (!s.trim().isEmpty()) {
SAVLT = Byte.parseByte(s);
} else {
SAVLT = Byte.MIN_VALUE;
}
}

protected final void initSAVREG(String s) {
if (!s.trim().isEmpty()) {
SAVREG = Byte.parseByte(s);
} else {
SAVREG = Byte.MIN_VALUE;
}
}

protected final void initSCNOW(String s) {
if (!s.trim().isEmpty()) {
SCNOW = Short.parseShort(s);
} else {
SCNOW = Short.MIN_VALUE;
}
}

protected final void initSCNOW2(String s) {
if (!s.trim().isEmpty()) {
SCNOW2 = Byte.parseByte(s);
} else {
SCNOW2 = Byte.MIN_VALUE;
}
}

protected final void initSCTYPE(String s) {
if (!s.trim().isEmpty()) {
SCTYPE = Short.parseShort(s);
} else {
SCTYPE = Short.MIN_VALUE;
}
}

protected final void initSMOKER(String s) {
if (!s.trim().isEmpty()) {
SMOKER = Short.parseShort(s);
} else {
SMOKER = Short.MIN_VALUE;
}
}

protected final void initSPINHH(String s) {
if (!s.trim().isEmpty()) {
SPINHH = Short.parseShort(s);
} else {
SPINHH = Short.MIN_VALUE;
}
}

protected final void initSPJB(String s) {
if (!s.trim().isEmpty()) {
SPJB = Short.parseShort(s);
} else {
SPJB = Short.MIN_VALUE;
}
}

protected final void initSPJBHR(String s) {
if (!s.trim().isEmpty()) {
SPJBHR = Short.parseShort(s);
} else {
SPJBHR = Short.MIN_VALUE;
}
}

protected final void initSPJBOT(String s) {
if (!s.trim().isEmpty()) {
SPJBOT = Short.parseShort(s);
} else {
SPJBOT = Short.MIN_VALUE;
}
}

protected final void initSPJBYR(String s) {
if (!s.trim().isEmpty()) {
SPJBYR = Short.parseShort(s);
} else {
SPJBYR = Short.MIN_VALUE;
}
}

protected final void initSPPAYG(String s) {
if (!s.trim().isEmpty()) {
SPPAYG = Double.parseDouble(s);
} else {
SPPAYG = Double.NaN;
}
}

protected final void initSPPAYGI(String s) {
if (!s.trim().isEmpty()) {
SPPAYGI = Short.parseShort(s);
} else {
SPPAYGI = Short.MIN_VALUE;
}
}

protected final void initSPPEN(String s) {
if (!s.trim().isEmpty()) {
SPPEN = Byte.parseByte(s);
} else {
SPPEN = Byte.MIN_VALUE;
}
}

protected final void initSPPID_BH(String s) {
if (!s.trim().isEmpty()) {
SPPID_BH = Integer.parseInt(s);
} else {
SPPID_BH = Integer.MIN_VALUE;
}
}

protected final void initSPSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
SPSOC90_CC = Short.parseShort(s);
} else {
SPSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initSTAKEH(String s) {
if (!s.trim().isEmpty()) {
STAKEH = Byte.parseByte(s);
} else {
STAKEH = Byte.MIN_VALUE;
}
}

protected final void initTELHTQ(String s) {
if (!s.trim().isEmpty()) {
TELHTQ = Byte.parseByte(s);
} else {
TELHTQ = Byte.MIN_VALUE;
}
}

protected final void initTELQAL(String s) {
if (!s.trim().isEmpty()) {
TELQAL = Byte.parseByte(s);
} else {
TELQAL = Byte.MIN_VALUE;
}
}

protected final void initTELQLY(String s) {
if (!s.trim().isEmpty()) {
TELQLY = Byte.parseByte(s);
} else {
TELQLY = Byte.MIN_VALUE;
}
}

protected final void initTENURE_DV(String s) {
if (!s.trim().isEmpty()) {
TENURE_DV = Short.parseShort(s);
} else {
TENURE_DV = Short.MIN_VALUE;
}
}

protected final void initTHHRPW(String s) {
if (!s.trim().isEmpty()) {
THHRPW = Byte.parseByte(s);
} else {
THHRPW = Byte.MIN_VALUE;
}
}

protected final void initTHRPOP(String s) {
if (!s.trim().isEmpty()) {
THRPOP = Byte.parseByte(s);
} else {
THRPOP = Byte.MIN_VALUE;
}
}

protected final void initTLHQLY(String s) {
if (!s.trim().isEmpty()) {
TLHQLY = Byte.parseByte(s);
} else {
TLHQLY = Byte.MIN_VALUE;
}
}

protected final void initTRAIN(String s) {
if (!s.trim().isEmpty()) {
TRAIN = Byte.parseByte(s);
} else {
TRAIN = Byte.MIN_VALUE;
}
}

protected final void initTRBEN1(String s) {
if (!s.trim().isEmpty()) {
TRBEN1 = Byte.parseByte(s);
} else {
TRBEN1 = Byte.MIN_VALUE;
}
}

protected final void initTRBEN2(String s) {
if (!s.trim().isEmpty()) {
TRBEN2 = Byte.parseByte(s);
} else {
TRBEN2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEA1(String s) {
if (!s.trim().isEmpty()) {
TRFEEA1 = Byte.parseByte(s);
} else {
TRFEEA1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEA2(String s) {
if (!s.trim().isEmpty()) {
TRFEEA2 = Byte.parseByte(s);
} else {
TRFEEA2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEA3(String s) {
if (!s.trim().isEmpty()) {
TRFEEA3 = Byte.parseByte(s);
} else {
TRFEEA3 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEB1(String s) {
if (!s.trim().isEmpty()) {
TRFEEB1 = Byte.parseByte(s);
} else {
TRFEEB1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEB2(String s) {
if (!s.trim().isEmpty()) {
TRFEEB2 = Byte.parseByte(s);
} else {
TRFEEB2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEB3(String s) {
if (!s.trim().isEmpty()) {
TRFEEB3 = Byte.parseByte(s);
} else {
TRFEEB3 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEC1(String s) {
if (!s.trim().isEmpty()) {
TRFEEC1 = Byte.parseByte(s);
} else {
TRFEEC1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEC2(String s) {
if (!s.trim().isEmpty()) {
TRFEEC2 = Byte.parseByte(s);
} else {
TRFEEC2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEC3(String s) {
if (!s.trim().isEmpty()) {
TRFEEC3 = Byte.parseByte(s);
} else {
TRFEEC3 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEE1(String s) {
if (!s.trim().isEmpty()) {
TRFEEE1 = Byte.parseByte(s);
} else {
TRFEEE1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEE2(String s) {
if (!s.trim().isEmpty()) {
TRFEEE2 = Byte.parseByte(s);
} else {
TRFEEE2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEE3(String s) {
if (!s.trim().isEmpty()) {
TRFEEE3 = Byte.parseByte(s);
} else {
TRFEEE3 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEF1(String s) {
if (!s.trim().isEmpty()) {
TRFEEF1 = Byte.parseByte(s);
} else {
TRFEEF1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEF2(String s) {
if (!s.trim().isEmpty()) {
TRFEEF2 = Byte.parseByte(s);
} else {
TRFEEF2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEF3(String s) {
if (!s.trim().isEmpty()) {
TRFEEF3 = Byte.parseByte(s);
} else {
TRFEEF3 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEG1(String s) {
if (!s.trim().isEmpty()) {
TRFEEG1 = Byte.parseByte(s);
} else {
TRFEEG1 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEG2(String s) {
if (!s.trim().isEmpty()) {
TRFEEG2 = Byte.parseByte(s);
} else {
TRFEEG2 = Byte.MIN_VALUE;
}
}

protected final void initTRFEEG3(String s) {
if (!s.trim().isEmpty()) {
TRFEEG3 = Byte.parseByte(s);
} else {
TRFEEG3 = Byte.MIN_VALUE;
}
}

protected final void initTRMORE1(String s) {
if (!s.trim().isEmpty()) {
TRMORE1 = Byte.parseByte(s);
} else {
TRMORE1 = Byte.MIN_VALUE;
}
}

protected final void initTRMORE2(String s) {
if (!s.trim().isEmpty()) {
TRMORE2 = Byte.parseByte(s);
} else {
TRMORE2 = Byte.MIN_VALUE;
}
}

protected final void initTROPAY(String s) {
if (!s.trim().isEmpty()) {
TROPAY = Byte.parseByte(s);
} else {
TROPAY = Byte.MIN_VALUE;
}
}

protected final void initTRPEN(String s) {
if (!s.trim().isEmpty()) {
TRPEN = Byte.parseByte(s);
} else {
TRPEN = Byte.MIN_VALUE;
}
}

protected final void initTRPLCE1(String s) {
if (!s.trim().isEmpty()) {
TRPLCE1 = Byte.parseByte(s);
} else {
TRPLCE1 = Byte.MIN_VALUE;
}
}

protected final void initTRPLCE2(String s) {
if (!s.trim().isEmpty()) {
TRPLCE2 = Byte.parseByte(s);
} else {
TRPLCE2 = Byte.MIN_VALUE;
}
}

protected final void initTRPLCE3(String s) {
if (!s.trim().isEmpty()) {
TRPLCE3 = Byte.parseByte(s);
} else {
TRPLCE3 = Byte.MIN_VALUE;
}
}

protected final void initTRQ1(String s) {
if (!s.trim().isEmpty()) {
TRQ1 = Short.parseShort(s);
} else {
TRQ1 = Short.MIN_VALUE;
}
}

protected final void initTRQ2(String s) {
if (!s.trim().isEmpty()) {
TRQ2 = Short.parseShort(s);
} else {
TRQ2 = Short.MIN_VALUE;
}
}

protected final void initTRQ3(String s) {
if (!s.trim().isEmpty()) {
TRQ3 = Short.parseShort(s);
} else {
TRQ3 = Short.MIN_VALUE;
}
}

protected final void initTRQLAC1(String s) {
if (!s.trim().isEmpty()) {
TRQLAC1 = Byte.parseByte(s);
} else {
TRQLAC1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLAC2(String s) {
if (!s.trim().isEmpty()) {
TRQLAC2 = Byte.parseByte(s);
} else {
TRQLAC2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLAC3(String s) {
if (!s.trim().isEmpty()) {
TRQLAC3 = Byte.parseByte(s);
} else {
TRQLAC3 = Byte.MIN_VALUE;
}
}

protected final void initTRQLXP1(String s) {
if (!s.trim().isEmpty()) {
TRQLXP1 = Byte.parseByte(s);
} else {
TRQLXP1 = Byte.MIN_VALUE;
}
}

protected final void initTRQLXP2(String s) {
if (!s.trim().isEmpty()) {
TRQLXP2 = Byte.parseByte(s);
} else {
TRQLXP2 = Byte.MIN_VALUE;
}
}

protected final void initTRQLXP3(String s) {
if (!s.trim().isEmpty()) {
TRQLXP3 = Byte.parseByte(s);
} else {
TRQLXP3 = Byte.MIN_VALUE;
}
}

protected final void initTRU1(String s) {
if (!s.trim().isEmpty()) {
TRU1 = Byte.parseByte(s);
} else {
TRU1 = Byte.MIN_VALUE;
}
}

protected final void initTRU2(String s) {
if (!s.trim().isEmpty()) {
TRU2 = Byte.parseByte(s);
} else {
TRU2 = Byte.MIN_VALUE;
}
}

protected final void initTRU3(String s) {
if (!s.trim().isEmpty()) {
TRU3 = Byte.parseByte(s);
} else {
TRU3 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYA1(String s) {
if (!s.trim().isEmpty()) {
TRWHYA1 = Byte.parseByte(s);
} else {
TRWHYA1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYA2(String s) {
if (!s.trim().isEmpty()) {
TRWHYA2 = Byte.parseByte(s);
} else {
TRWHYA2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYA3(String s) {
if (!s.trim().isEmpty()) {
TRWHYA3 = Byte.parseByte(s);
} else {
TRWHYA3 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYB1(String s) {
if (!s.trim().isEmpty()) {
TRWHYB1 = Byte.parseByte(s);
} else {
TRWHYB1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYB2(String s) {
if (!s.trim().isEmpty()) {
TRWHYB2 = Byte.parseByte(s);
} else {
TRWHYB2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYB3(String s) {
if (!s.trim().isEmpty()) {
TRWHYB3 = Byte.parseByte(s);
} else {
TRWHYB3 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYC1(String s) {
if (!s.trim().isEmpty()) {
TRWHYC1 = Byte.parseByte(s);
} else {
TRWHYC1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYC2(String s) {
if (!s.trim().isEmpty()) {
TRWHYC2 = Byte.parseByte(s);
} else {
TRWHYC2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYC3(String s) {
if (!s.trim().isEmpty()) {
TRWHYC3 = Byte.parseByte(s);
} else {
TRWHYC3 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYD1(String s) {
if (!s.trim().isEmpty()) {
TRWHYD1 = Byte.parseByte(s);
} else {
TRWHYD1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYD2(String s) {
if (!s.trim().isEmpty()) {
TRWHYD2 = Byte.parseByte(s);
} else {
TRWHYD2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYD3(String s) {
if (!s.trim().isEmpty()) {
TRWHYD3 = Byte.parseByte(s);
} else {
TRWHYD3 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYE1(String s) {
if (!s.trim().isEmpty()) {
TRWHYE1 = Byte.parseByte(s);
} else {
TRWHYE1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYE2(String s) {
if (!s.trim().isEmpty()) {
TRWHYE2 = Byte.parseByte(s);
} else {
TRWHYE2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHYE3(String s) {
if (!s.trim().isEmpty()) {
TRWHYE3 = Byte.parseByte(s);
} else {
TRWHYE3 = Byte.MIN_VALUE;
}
}

protected final void initTUIN1(String s) {
if (!s.trim().isEmpty()) {
TUIN1 = Short.parseShort(s);
} else {
TUIN1 = Short.MIN_VALUE;
}
}

protected final void initTUJBPL(String s) {
if (!s.trim().isEmpty()) {
TUJBPL = Short.parseShort(s);
} else {
TUJBPL = Short.MIN_VALUE;
}
}

protected final void initUKCITZN_DV_BH(String s) {
if (!s.trim().isEmpty()) {
UKCITZN_DV_BH = Byte.parseByte(s);
} else {
UKCITZN_DV_BH = Byte.MIN_VALUE;
}
}

protected final void initVOTE(String s) {
if (!s.trim().isEmpty()) {
VOTE = Short.parseShort(s);
} else {
VOTE = Short.MIN_VALUE;
}
}

protected final void initVOTE1(String s) {
if (!s.trim().isEmpty()) {
VOTE1 = Short.parseShort(s);
} else {
VOTE1 = Short.MIN_VALUE;
}
}

protected final void initVOTE2(String s) {
if (!s.trim().isEmpty()) {
VOTE2 = Short.parseShort(s);
} else {
VOTE2 = Short.MIN_VALUE;
}
}

protected final void initVOTE3(String s) {
if (!s.trim().isEmpty()) {
VOTE3 = Short.parseShort(s);
} else {
VOTE3 = Short.MIN_VALUE;
}
}

protected final void initVOTE3_BH(String s) {
if (!s.trim().isEmpty()) {
VOTE3_BH = Short.parseShort(s);
} else {
VOTE3_BH = Short.MIN_VALUE;
}
}

protected final void initVOTE4(String s) {
if (!s.trim().isEmpty()) {
VOTE4 = Short.parseShort(s);
} else {
VOTE4 = Short.MIN_VALUE;
}
}

protected final void initVOTE4_BH(String s) {
if (!s.trim().isEmpty()) {
VOTE4_BH = Short.parseShort(s);
} else {
VOTE4_BH = Short.MIN_VALUE;
}
}

protected final void initVOTE5(String s) {
if (!s.trim().isEmpty()) {
VOTE5 = Short.parseShort(s);
} else {
VOTE5 = Short.MIN_VALUE;
}
}

protected final void initVOTE6(String s) {
if (!s.trim().isEmpty()) {
VOTE6 = Short.parseShort(s);
} else {
VOTE6 = Short.MIN_VALUE;
}
}

protected final void initVOTE7(String s) {
if (!s.trim().isEmpty()) {
VOTE7 = Byte.parseByte(s);
} else {
VOTE7 = Byte.MIN_VALUE;
}
}

protected final void initVOTE8(String s) {
if (!s.trim().isEmpty()) {
VOTE8 = Byte.parseByte(s);
} else {
VOTE8 = Byte.MIN_VALUE;
}
}

protected final void initVOTE8_BH(String s) {
if (!s.trim().isEmpty()) {
VOTE8_BH = Byte.parseByte(s);
} else {
VOTE8_BH = Byte.MIN_VALUE;
}
}

protected final void initWINDF(String s) {
if (!s.trim().isEmpty()) {
WINDF = Byte.parseByte(s);
} else {
WINDF = Byte.MIN_VALUE;
}
}

protected final void initWINDFA(String s) {
if (!s.trim().isEmpty()) {
WINDFA = Byte.parseByte(s);
} else {
WINDFA = Byte.MIN_VALUE;
}
}

protected final void initWINDFAY(String s) {
if (!s.trim().isEmpty()) {
WINDFAY = Integer.parseInt(s);
} else {
WINDFAY = Integer.MIN_VALUE;
}
}

protected final void initWINDFB(String s) {
if (!s.trim().isEmpty()) {
WINDFB = Byte.parseByte(s);
} else {
WINDFB = Byte.MIN_VALUE;
}
}

protected final void initWINDFBY(String s) {
if (!s.trim().isEmpty()) {
WINDFBY = Integer.parseInt(s);
} else {
WINDFBY = Integer.MIN_VALUE;
}
}

protected final void initWINDFC(String s) {
if (!s.trim().isEmpty()) {
WINDFC = Byte.parseByte(s);
} else {
WINDFC = Byte.MIN_VALUE;
}
}

protected final void initWINDFCY(String s) {
if (!s.trim().isEmpty()) {
WINDFCY = Integer.parseInt(s);
} else {
WINDFCY = Integer.MIN_VALUE;
}
}

protected final void initWINDFD(String s) {
if (!s.trim().isEmpty()) {
WINDFD = Byte.parseByte(s);
} else {
WINDFD = Byte.MIN_VALUE;
}
}

protected final void initWINDFDY(String s) {
if (!s.trim().isEmpty()) {
WINDFDY = Integer.parseInt(s);
} else {
WINDFDY = Integer.MIN_VALUE;
}
}

protected final void initWINDFF(String s) {
if (!s.trim().isEmpty()) {
WINDFF = Byte.parseByte(s);
} else {
WINDFF = Byte.MIN_VALUE;
}
}

protected final void initWINDFFY(String s) {
if (!s.trim().isEmpty()) {
WINDFFY = Integer.parseInt(s);
} else {
WINDFFY = Integer.MIN_VALUE;
}
}

protected final void initWINDFG(String s) {
if (!s.trim().isEmpty()) {
WINDFG = Byte.parseByte(s);
} else {
WINDFG = Byte.MIN_VALUE;
}
}

protected final void initWINDFGY(String s) {
if (!s.trim().isEmpty()) {
WINDFGY = Integer.parseInt(s);
} else {
WINDFGY = Integer.MIN_VALUE;
}
}

protected final void initWINDFH(String s) {
if (!s.trim().isEmpty()) {
WINDFH = Byte.parseByte(s);
} else {
WINDFH = Byte.MIN_VALUE;
}
}

protected final void initWINDFHY(String s) {
if (!s.trim().isEmpty()) {
WINDFHY = Integer.parseInt(s);
} else {
WINDFHY = Integer.MIN_VALUE;
}
}

protected final void initWKTIME(String s) {
if (!s.trim().isEmpty()) {
WKTIME = Short.parseShort(s);
} else {
WKTIME = Short.MIN_VALUE;
}
}

protected final void initWLSH1(String s) {
if (!s.trim().isEmpty()) {
WLSH1 = Byte.parseByte(s);
} else {
WLSH1 = Byte.MIN_VALUE;
}
}

protected final void initWLSH2(String s) {
if (!s.trim().isEmpty()) {
WLSH2 = Byte.parseByte(s);
} else {
WLSH2 = Byte.MIN_VALUE;
}
}

protected final void initWLSH3(String s) {
if (!s.trim().isEmpty()) {
WLSH3 = Byte.parseByte(s);
} else {
WLSH3 = Byte.MIN_VALUE;
}
}

protected final void initWLSH4(String s) {
if (!s.trim().isEmpty()) {
WLSH4 = Byte.parseByte(s);
} else {
WLSH4 = Byte.MIN_VALUE;
}
}

protected final void initWLSH96(String s) {
if (!s.trim().isEmpty()) {
WLSH96 = Byte.parseByte(s);
} else {
WLSH96 = Byte.MIN_VALUE;
}
}

protected final void initWLSHUA(String s) {
if (!s.trim().isEmpty()) {
WLSHUA = Byte.parseByte(s);
} else {
WLSHUA = Byte.MIN_VALUE;
}
}

protected final void initWLSHUB(String s) {
if (!s.trim().isEmpty()) {
WLSHUB = Byte.parseByte(s);
} else {
WLSHUB = Byte.MIN_VALUE;
}
}

protected final void initWLSHUC(String s) {
if (!s.trim().isEmpty()) {
WLSHUC = Byte.parseByte(s);
} else {
WLSHUC = Byte.MIN_VALUE;
}
}

protected final void initWLSHUD(String s) {
if (!s.trim().isEmpty()) {
WLSHUD = Byte.parseByte(s);
} else {
WLSHUD = Byte.MIN_VALUE;
}
}

protected final void initWLSHUE(String s) {
if (!s.trim().isEmpty()) {
WLSHUE = Byte.parseByte(s);
} else {
WLSHUE = Byte.MIN_VALUE;
}
}

protected final void initXDTS(String s) {
if (!s.trim().isEmpty()) {
XDTS = Short.parseShort(s);
} else {
XDTS = Short.MIN_VALUE;
}
}

protected final void initXEWGHT(String s) {
if (!s.trim().isEmpty()) {
XEWGHT = Double.parseDouble(s);
} else {
XEWGHT = Double.NaN;
}
}

protected final void initXEWTUK1(String s) {
if (!s.trim().isEmpty()) {
XEWTUK1 = Double.parseDouble(s);
} else {
XEWTUK1 = Double.NaN;
}
}

protected final void initXEWTUK2(String s) {
if (!s.trim().isEmpty()) {
XEWTUK2 = Double.parseDouble(s);
} else {
XEWTUK2 = Double.NaN;
}
}

protected final void initXPCHC(String s) {
if (!s.trim().isEmpty()) {
XPCHC = Short.parseShort(s);
} else {
XPCHC = Short.MIN_VALUE;
}
}

protected final void initXPCHCF(String s) {
if (!s.trim().isEmpty()) {
XPCHCF = Short.parseShort(s);
} else {
XPCHCF = Short.MIN_VALUE;
}
}

protected final void initXPLEIS(String s) {
if (!s.trim().isEmpty()) {
XPLEIS = Byte.parseByte(s);
} else {
XPLEIS = Byte.MIN_VALUE;
}
}

protected final void initXPMEAL(String s) {
if (!s.trim().isEmpty()) {
XPMEAL = Byte.parseByte(s);
} else {
XPMEAL = Byte.MIN_VALUE;
}
}

protected final void initXPMOVE(String s) {
if (!s.trim().isEmpty()) {
XPMOVE = Byte.parseByte(s);
} else {
XPMOVE = Byte.MIN_VALUE;
}
}

protected final void initXRWGHT(String s) {
if (!s.trim().isEmpty()) {
XRWGHT = Double.parseDouble(s);
} else {
XRWGHT = Double.NaN;
}
}

protected final void initXRWTUK1(String s) {
if (!s.trim().isEmpty()) {
XRWTUK1 = Double.parseDouble(s);
} else {
XRWTUK1 = Double.NaN;
}
}

protected final void initXRWTUK2(String s) {
if (!s.trim().isEmpty()) {
XRWTUK2 = Double.parseDouble(s);
} else {
XRWTUK2 = Double.NaN;
}
}

protected final void initYASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC00_CC = Short.parseShort(s);
} else {
YASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC90_CC = Byte.parseByte(s);
} else {
YASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initYNOPEN1(String s) {
if (!s.trim().isEmpty()) {
YNOPEN1 = Byte.parseByte(s);
} else {
YNOPEN1 = Byte.MIN_VALUE;
}
}

protected final void initYNOPEN2(String s) {
if (!s.trim().isEmpty()) {
YNOPEN2 = Byte.parseByte(s);
} else {
YNOPEN2 = Byte.MIN_VALUE;
}
}

protected final void initYRTLAT(String s) {
if (!s.trim().isEmpty()) {
YRTLAT = Byte.parseByte(s);
} else {
YRTLAT = Byte.MIN_VALUE;
}
}

protected final void initYRTRLY(String s) {
if (!s.trim().isEmpty()) {
YRTRLY = Byte.parseByte(s);
} else {
YRTRLY = Byte.MIN_VALUE;
}
}

public byte getADLA() {
return ADLA;
}

public byte getADLAD() {
return ADLAD;
}

public byte getADLB() {
return ADLB;
}

public byte getADLBD() {
return ADLBD;
}

public byte getADLC() {
return ADLC;
}

public byte getADLCD() {
return ADLCD;
}

public byte getADLD() {
return ADLD;
}

public byte getADLDD() {
return ADLDD;
}

public byte getADLE() {
return ADLE;
}

public byte getADLED() {
return ADLED;
}

public byte getADLF() {
return ADLF;
}

public byte getADLFD() {
return ADLFD;
}

public short getAGE12() {
return AGE12;
}

public byte getAGEAD1() {
return AGEAD1;
}

public byte getAGEAD2() {
return AGEAD2;
}

public byte getAGEAD3() {
return AGEAD3;
}

public byte getAGEAD4() {
return AGEAD4;
}

public byte getAGEADV() {
return AGEADV;
}

public byte getAGERET() {
return AGERET;
}

public byte getAGEXRT() {
return AGEXRT;
}

public short getAGE_DV() {
return AGE_DV;
}

public byte getAGLT20() {
return AGLT20;
}

public short getAIDHRS_BH() {
return AIDHRS_BH;
}

public short getAIDHU1() {
return AIDHU1;
}

public short getAIDHU2() {
return AIDHU2;
}

public short getAIDHUA() {
return AIDHUA;
}

public short getAIDHUB() {
return AIDHUB;
}

public short getAIDHUC() {
return AIDHUC;
}

protected double BASNSA() {
return BASNSA;
}

protected double BASRATE() {
return BASRATE;
}

protected double BASRATE_BH() {
return BASRATE_BH;
}

public byte getBASREST() {
return BASREST;
}

public byte getBASREST_BH() {
return BASREST_BH;
}

public byte getBIRHH() {
return BIRHH;
}

public short getBIRTHY() {
return BIRTHY;
}

public short getBUNO() {
return BUNO;
}

public short getBUTYPE() {
return BUTYPE;
}

public byte getBWTAGM1() {
return BWTAGM1;
}

public byte getBWTAGM2() {
return BWTAGM2;
}

public byte getBWTAGM3() {
return BWTAGM3;
}

public byte getBWTEL1() {
return BWTEL1;
}

public byte getBWTEL2() {
return BWTEL2;
}

public byte getBWTEL3() {
return BWTEL3;
}

public byte getBWTG51() {
return BWTG51;
}

public byte getBWTG52() {
return BWTG52;
}

public byte getBWTG53() {
return BWTG53;
}

public short getBWTGM1() {
return BWTGM1;
}

public short getBWTGM2() {
return BWTGM2;
}

public byte getBWTGM3() {
return BWTGM3;
}

public byte getBWTKN1() {
return BWTKN1;
}

public byte getBWTKN2() {
return BWTKN2;
}

public byte getBWTKN3() {
return BWTKN3;
}

public byte getBWTLB1() {
return BWTLB1;
}

public byte getBWTLB2() {
return BWTLB2;
}

public byte getBWTLB3() {
return BWTLB3;
}

public byte getBWTOZ1() {
return BWTOZ1;
}

public byte getBWTOZ2() {
return BWTOZ2;
}

public byte getBWTOZ3() {
return BWTOZ3;
}

public byte getBWTPN1() {
return BWTPN1;
}

public byte getBWTPN2() {
return BWTPN2;
}

public byte getBWTPN3() {
return BWTPN3;
}

public byte getBWTWK1() {
return BWTWK1;
}

public byte getBWTWK2() {
return BWTWK2;
}

public byte getBWTWK3() {
return BWTWK3;
}

public byte getBWTXP1() {
return BWTXP1;
}

public byte getBWTXP2() {
return BWTXP2;
}

public byte getBWTXP3() {
return BWTXP3;
}

public byte getCAIDU1() {
return CAIDU1;
}

public byte getCAIDU2() {
return CAIDU2;
}

public byte getCAIDU3() {
return CAIDU3;
}

public byte getCAIDU4() {
return CAIDU4;
}

public byte getCAIDU5() {
return CAIDU5;
}

public byte getCAIDU6() {
return CAIDU6;
}

public byte getCAIDU7() {
return CAIDU7;
}

public byte getCAIDU8() {
return CAIDU8;
}

public byte getCAIDU96() {
return CAIDU96;
}

public byte getCAIDU97() {
return CAIDU97;
}

public short getCASMIN() {
return CASMIN;
}

public byte getCBAGEF() {
return CBAGEF;
}

public short getCH1BY4() {
return CH1BY4;
}

public byte getCHAID1() {
return CHAID1;
}

public byte getCHAID2() {
return CHAID2;
}

public byte getCHAID3() {
return CHAID3;
}

public byte getCHAID4() {
return CHAID4;
}

public byte getCHAID5() {
return CHAID5;
}

public byte getCHAID6() {
return CHAID6;
}

public byte getCHAID7() {
return CHAID7;
}

public byte getCHAID8() {
return CHAID8;
}

public byte getCHAID96() {
return CHAID96;
}

public byte getCHAID97() {
return CHAID97;
}

public byte getCHFAR() {
return CHFAR;
}

public byte getCHMAIL() {
return CHMAIL;
}

public byte getCHSEE() {
return CHSEE;
}

public byte getCHTEL() {
return CHTEL;
}

public short getCJSBGD() {
return CJSBGD;
}

public short getCJSBGM() {
return CJSBGM;
}

public short getCJSBGY4() {
return CJSBGY4;
}

public short getCJSBLY() {
return CJSBLY;
}

public byte getCJSCJS() {
return CJSCJS;
}

public byte getCJSCK1() {
return CJSCK1;
}

public byte getCJSCK2() {
return CJSCK2;
}

public byte getCJSCK3() {
return CJSCK3;
}

public byte getCJSCK4() {
return CJSCK4;
}

public byte getCJSED() {
return CJSED;
}

public byte getCJSEM() {
return CJSEM;
}

public short getCJSEY4() {
return CJSEY4;
}

public byte getCJSSTLY() {
return CJSSTLY;
}

public int getCJSTEN() {
return CJSTEN;
}

protected double CJSWK9() {
return CJSWK9;
}

public byte getCOH1BM() {
return COH1BM;
}

public short getCOH1BY() {
return COH1BY;
}

public byte getCOH1EM() {
return COH1EM;
}

public short getCOH1EY() {
return COH1EY;
}

public byte getCOH1MR() {
return COH1MR;
}

protected double DISTMOV() {
return DISTMOV;
}

public short getDOBY() {
return DOBY;
}

public short getEAAGE() {
return EAAGE;
}

public byte getEDASP() {
return EDASP;
}

public byte getEDASP_BH() {
return EDASP_BH;
}

public byte getEDBGM1() {
return EDBGM1;
}

public byte getEDBGM2() {
return EDBGM2;
}

public byte getEDBGM3() {
return EDBGM3;
}

public short getEDBGY1() {
return EDBGY1;
}

public short getEDBGY2() {
return EDBGY2;
}

public short getEDBGY3() {
return EDBGY3;
}

public byte getEDBLYR1() {
return EDBLYR1;
}

public byte getEDBLYR2() {
return EDBLYR2;
}

public byte getEDBLYR3() {
return EDBLYR3;
}

public byte getEDENM1() {
return EDENM1;
}

public byte getEDENM2() {
return EDENM2;
}

public byte getEDENM3() {
return EDENM3;
}

public byte getEDENNE1() {
return EDENNE1;
}

public byte getEDENNE2() {
return EDENNE2;
}

public byte getEDENNE3() {
return EDENNE3;
}

public short getEDENY1() {
return EDENY1;
}

public short getEDENY2() {
return EDENY2;
}

public short getEDENY3() {
return EDENY3;
}

public byte getEDFEEA1() {
return EDFEEA1;
}

public byte getEDFEEA2() {
return EDFEEA2;
}

public byte getEDFEEA3() {
return EDFEEA3;
}

public byte getEDFEEB1() {
return EDFEEB1;
}

public byte getEDFEEB2() {
return EDFEEB2;
}

public byte getEDFEEB3() {
return EDFEEB3;
}

public byte getEDFEEC1() {
return EDFEEC1;
}

public byte getEDFEEC2() {
return EDFEEC2;
}

public byte getEDFEEC3() {
return EDFEEC3;
}

public byte getEDFEED1() {
return EDFEED1;
}

public byte getEDFEED2() {
return EDFEED2;
}

public byte getEDFEED3() {
return EDFEED3;
}

public byte getEDFEEE1() {
return EDFEEE1;
}

public byte getEDFEEE2() {
return EDFEEE2;
}

public byte getEDFEEE3() {
return EDFEEE3;
}

public byte getEDFEEF1() {
return EDFEEF1;
}

public byte getEDFEEF2() {
return EDFEEF2;
}

public byte getEDFEEF3() {
return EDFEEF3;
}

public byte getEDFEEG1() {
return EDFEEG1;
}

public byte getEDFEEG2() {
return EDFEEG2;
}

public byte getEDFEEG3() {
return EDFEEG3;
}

public short getEDLYR() {
return EDLYR;
}

public byte getEDMORE1() {
return EDMORE1;
}

public byte getEDMORE2() {
return EDMORE2;
}

public byte getEDTYPE1() {
return EDTYPE1;
}

public byte getEDTYPE2() {
return EDTYPE2;
}

public byte getEDTYPE3() {
return EDTYPE3;
}

public short getEPROSH() {
return EPROSH;
}

public byte getEXTNSA() {
return EXTNSA;
}

protected double EXTRATE() {
return EXTRATE;
}

protected double EXTRATE_BH() {
return EXTRATE_BH;
}

public byte getEXTREST() {
return EXTREST;
}

public short getF101() {
return F101;
}

public short getF102() {
return F102;
}

public short getF103() {
return F103;
}

public short getF104() {
return F104;
}

public short getF105() {
return F105;
}

public byte getF106() {
return F106;
}

public byte getF107() {
return F107;
}

public byte getF116() {
return F116;
}

public short getF118() {
return F118;
}

public short getF119() {
return F119;
}

public short getF121() {
return F121;
}

public short getF122() {
return F122;
}

public short getF125() {
return F125;
}

public byte getF126() {
return F126;
}

public byte getF127() {
return F127;
}

public byte getF128() {
return F128;
}

public short getF132() {
return F132;
}

public short getF135() {
return F135;
}

public short getF136() {
return F136;
}

public short getF137() {
return F137;
}

public short getF138() {
return F138;
}

public short getF139() {
return F139;
}

public short getF140() {
return F140;
}

public short getF141() {
return F141;
}

public short getF142() {
return F142;
}

public byte getF143() {
return F143;
}

public short getF151() {
return F151;
}

public byte getF152() {
return F152;
}

public short getF153() {
return F153;
}

public short getF154() {
return F154;
}

public short getF155() {
return F155;
}

public short getF156() {
return F156;
}

public short getF157() {
return F157;
}

public byte getF158() {
return F158;
}

public byte getF159() {
return F159;
}

public byte getFEDASP() {
return FEDASP;
}

public byte getFEDLIK_BH() {
return FEDLIK_BH;
}

public byte getFEDNT1() {
return FEDNT1;
}

public byte getFEDNT2() {
return FEDNT2;
}

public byte getFEDTYP() {
return FEDTYP;
}

public short getFENOW_BH() {
return FENOW_BH;
}

public short getFETYPE() {
return FETYPE;
}

protected double FIHHMN() {
return FIHHMN;
}

public short getFIHHMNI() {
return FIHHMNI;
}

protected double FIMNB() {
return FIMNB;
}

public boolean getFIMNBI() {
return FIMNBI;
}

protected double FIMNI() {
return FIMNI;
}

public boolean getFIMNII() {
return FIMNII;
}

public boolean getFIMNLI() {
return FIMNLI;
}

protected double FIMNNL() {
return FIMNNL;
}

public boolean getFIMNNLI() {
return FIMNNLI;
}

protected double FIMNP() {
return FIMNP;
}

public boolean getFIMNPI() {
return FIMNPI;
}

public byte getFIMNSEL() {
return FIMNSEL;
}

protected double FIMNT() {
return FIMNT;
}

public boolean getFIMNTHI() {
return FIMNTHI;
}

public boolean getFIMNTI() {
return FIMNTI;
}

public short getFISITC() {
return FISITC;
}

public short getFISITX() {
return FISITX;
}

public short getFISITY() {
return FISITY;
}

public boolean getFIYEARI() {
return FIYEARI;
}

protected double FIYR() {
return FIYR;
}

protected double FIYRB() {
return FIYRB;
}

public boolean getFIYRBI() {
return FIYRBI;
}

public byte getFIYRDB1() {
return FIYRDB1;
}

public byte getFIYRDB2() {
return FIYRDB2;
}

public byte getFIYRDB3() {
return FIYRDB3;
}

public byte getFIYRDB4() {
return FIYRDB4;
}

public byte getFIYRDB5() {
return FIYRDB5;
}

public byte getFIYRDB6() {
return FIYRDB6;
}

public int getFIYRDIA() {
return FIYRDIA;
}

public int getFIYRDIC() {
return FIYRDIC;
}

public short getFIYRDII() {
return FIYRDII;
}

protected double FIYRI() {
return FIYRI;
}

public boolean getFIYRII() {
return FIYRII;
}

protected double FIYRL() {
return FIYRL;
}

public boolean getFIYRLI() {
return FIYRLI;
}

protected double FIYRNL() {
return FIYRNL;
}

public boolean getFIYRNLI() {
return FIYRNLI;
}

protected double FIYRP() {
return FIYRP;
}

public boolean getFIYRPI() {
return FIYRPI;
}

protected double FIYRT() {
return FIYRT;
}

public boolean getFIYRTI() {
return FIYRTI;
}

public int getFNPID_BH() {
return FNPID_BH;
}

public byte getFRNA() {
return FRNA;
}

public byte getFRNB() {
return FRNB;
}

public byte getFRNC() {
return FRNC;
}

public short getFTEXA() {
return FTEXA;
}

public short getFTEXA1() {
return FTEXA1;
}

public short getFTEXA2() {
return FTEXA2;
}

public short getFTEXA3() {
return FTEXA3;
}

public short getFTEXA4() {
return FTEXA4;
}

public short getFTEXA5() {
return FTEXA5;
}

public short getFTEXA6() {
return FTEXA6;
}

public short getFTEXAV() {
return FTEXAV;
}

protected double FTEXAW() {
return FTEXAW;
}

public short getFTEXB() {
return FTEXB;
}

public short getFTEXB1() {
return FTEXB1;
}

public short getFTEXB2() {
return FTEXB2;
}

public short getFTEXB3() {
return FTEXB3;
}

public short getFTEXB4() {
return FTEXB4;
}

public short getFTEXB5() {
return FTEXB5;
}

public short getFTEXB6() {
return FTEXB6;
}

public short getFTEXBV() {
return FTEXBV;
}

protected double FTEXBW() {
return FTEXBW;
}

public short getFTEXC() {
return FTEXC;
}

public short getFTEXC1() {
return FTEXC1;
}

public short getFTEXC2() {
return FTEXC2;
}

public short getFTEXC3() {
return FTEXC3;
}

public short getFTEXC4() {
return FTEXC4;
}

public short getFTEXC5() {
return FTEXC5;
}

public short getFTEXC6() {
return FTEXC6;
}

public short getFTEXCV() {
return FTEXCV;
}

protected double FTEXCW() {
return FTEXCW;
}

public short getFTEXHH() {
return FTEXHH;
}

public byte getHGEMP() {
return HGEMP;
}

public short getHGR2R() {
return HGR2R;
}

public short getHGRA() {
return HGRA;
}

public boolean getHGSEX() {
return HGSEX;
}

public short getHHCH12() {
return HHCH12;
}

public short getHHMEM() {
return HHMEM;
}

public short getHHSIZE() {
return HHSIZE;
}

public short getHHTYPE() {
return HHTYPE;
}

public int getHID() {
return HID;
}

public short getHIQUALB_DV() {
return HIQUALB_DV;
}

public short getHL2GP() {
return HL2GP;
}

public byte getHL2HOP() {
return HL2HOP;
}

public byte getHLAVPN() {
return HLAVPN;
}

public short getHLCK() {
return HLCK;
}

public short getHLCKA() {
return HLCKA;
}

public short getHLCKAN() {
return HLCKAN;
}

public short getHLCKB() {
return HLCKB;
}

public short getHLCKBN() {
return HLCKBN;
}

public short getHLCKC() {
return HLCKC;
}

public short getHLCKCN() {
return HLCKCN;
}

public short getHLCKD() {
return HLCKD;
}

public short getHLCKDN() {
return HLCKDN;
}

public short getHLCKE() {
return HLCKE;
}

public short getHLCKEN() {
return HLCKEN;
}

public short getHLCKF() {
return HLCKF;
}

public short getHLCKFN() {
return HLCKFN;
}

public short getHLCKG() {
return HLCKG;
}

public short getHLCKGN() {
return HLCKGN;
}

public short getHLCKH() {
return HLCKH;
}

public short getHLCKHN() {
return HLCKHN;
}

public short getHLCKI() {
return HLCKI;
}

public short getHLCKIN() {
return HLCKIN;
}

public short getHLCVR() {
return HLCVR;
}

public short getHLCVRH() {
return HLCVRH;
}

public short getHLCVRL() {
return HLCVRL;
}

public byte getHLDSBL1() {
return HLDSBL1;
}

public short getHLENDW() {
return HLENDW;
}

public byte getHLHT() {
return HLHT;
}

public short getHLHTC() {
return HLHTC;
}

public byte getHLHTF() {
return HLHTF;
}

public byte getHLHTI() {
return HLHTI;
}

public byte getHLIV65() {
return HLIV65;
}

public byte getHLLT() {
return HLLT;
}

public short getHLLTA() {
return HLLTA;
}

public short getHLLTB() {
return HLLTB;
}

public short getHLLTC() {
return HLLTC;
}

public short getHLLTD() {
return HLLTD;
}

public short getHLLTE() {
return HLLTE;
}

public byte getHLLTW() {
return HLLTW;
}

public short getHLLTWA() {
return HLLTWA;
}

public byte getHLPAIN() {
return HLPAIN;
}

public short getHLPRB() {
return HLPRB;
}

public short getHLPRBA() {
return HLPRBA;
}

public short getHLPRBB() {
return HLPRBB;
}

public short getHLPRBC() {
return HLPRBC;
}

public short getHLPRBD() {
return HLPRBD;
}

public short getHLPRBE() {
return HLPRBE;
}

public short getHLPRBF() {
return HLPRBF;
}

public short getHLPRBG() {
return HLPRBG;
}

public short getHLPRBH() {
return HLPRBH;
}

public short getHLPRBI() {
return HLPRBI;
}

public short getHLPRBJ() {
return HLPRBJ;
}

public short getHLPRBK() {
return HLPRBK;
}

public short getHLPRBL() {
return HLPRBL;
}

public short getHLPRBM() {
return HLPRBM;
}

public byte getHLPRBN() {
return HLPRBN;
}

public byte getHLPRBO() {
return HLPRBO;
}

public byte getHLPREG() {
return HLPREG;
}

public byte getHLPRXA() {
return HLPRXA;
}

public byte getHLPRXB() {
return HLPRXB;
}

public byte getHLPRXC() {
return HLPRXC;
}

public byte getHLPRXD() {
return HLPRXD;
}

public byte getHLPRXE() {
return HLPRXE;
}

public byte getHLPRXF() {
return HLPRXF;
}

public byte getHLPRXG() {
return HLPRXG;
}

public byte getHLPRXH() {
return HLPRXH;
}

public byte getHLPRXI() {
return HLPRXI;
}

public byte getHLPRXJ() {
return HLPRXJ;
}

public byte getHLPRXK() {
return HLPRXK;
}

public byte getHLPRXL() {
return HLPRXL;
}

public byte getHLPRXM() {
return HLPRXM;
}

public byte getHLPRXN() {
return HLPRXN;
}

public byte getHLPRXO() {
return HLPRXO;
}

public short getHLSTAT() {
return HLSTAT;
}

public short getHLSV() {
return HLSV;
}

public short getHLSVA() {
return HLSVA;
}

public short getHLSVAF() {
return HLSVAF;
}

public short getHLSVAN() {
return HLSVAN;
}

public short getHLSVB() {
return HLSVB;
}

public short getHLSVBF() {
return HLSVBF;
}

public short getHLSVBN() {
return HLSVBN;
}

public short getHLSVC() {
return HLSVC;
}

public short getHLSVCF() {
return HLSVCF;
}

public short getHLSVCN() {
return HLSVCN;
}

public short getHLSVD() {
return HLSVD;
}

public short getHLSVDF() {
return HLSVDF;
}

public short getHLSVDN() {
return HLSVDN;
}

public short getHLSVE() {
return HLSVE;
}

public short getHLSVEF() {
return HLSVEF;
}

public short getHLSVEN() {
return HLSVEN;
}

public short getHLSVF() {
return HLSVF;
}

public short getHLSVFF() {
return HLSVFF;
}

public short getHLSVFN() {
return HLSVFN;
}

public short getHLSVG() {
return HLSVG;
}

public short getHLSVGF() {
return HLSVGF;
}

public short getHLSVGN() {
return HLSVGN;
}

public short getHLSVH() {
return HLSVH;
}

public byte getHLSVHF() {
return HLSVHF;
}

public byte getHLSVHN() {
return HLSVHN;
}

public short getHLSVI() {
return HLSVI;
}

public short getHLSVIF() {
return HLSVIF;
}

public short getHLSVIN() {
return HLSVIN;
}

public short getHLSVJ() {
return HLSVJ;
}

public short getHLSVJF() {
return HLSVJF;
}

public short getHLSVJN() {
return HLSVJN;
}

public short getHLSVK() {
return HLSVK;
}

public short getHLSVKF() {
return HLSVKF;
}

public short getHLSVKN() {
return HLSVKN;
}

public short getHLSVL() {
return HLSVL;
}

public short getHLSVLF() {
return HLSVLF;
}

public short getHLSVLN() {
return HLSVLN;
}

public short getHLSVM() {
return HLSVM;
}

public short getHLSVMF() {
return HLSVMF;
}

public short getHLSVMN() {
return HLSVMN;
}

public byte getHLTRPN() {
return HLTRPN;
}

public byte getHLWTE() {
return HLWTE;
}

public short getHLWTK() {
return HLWTK;
}

public byte getHLWTL() {
return HLWTL;
}

public byte getHLWTM() {
return HLWTM;
}

public byte getHLWTP() {
return HLWTP;
}

public byte getHLWTPN() {
return HLWTPN;
}

public byte getHLWTR() {
return HLWTR;
}

public byte getHLWTS() {
return HLWTS;
}

public boolean getHOH() {
return HOH;
}

public short getHOSP() {
return HOSP;
}

public short getHOSPCH() {
return HOSPCH;
}

public short getHOSPD() {
return HOSPD;
}

public short getHOSPNHS() {
return HOSPNHS;
}

public short getHOWLNG() {
return HOWLNG;
}

public short getHUBUYS() {
return HUBUYS;
}

public short getHUBUYS_BH() {
return HUBUYS_BH;
}

public short getHUFRYS() {
return HUFRYS;
}

public short getHUFRYS_BH() {
return HUFRYS_BH;
}

public short getHUIRON() {
return HUIRON;
}

public short getHUIRON_BH() {
return HUIRON_BH;
}

public short getHUMOPS() {
return HUMOPS;
}

public short getHUMOPS_BH() {
return HUMOPS_BH;
}

public short getHUNURS() {
return HUNURS;
}

public short getHUSITS() {
return HUSITS;
}

public short getHUXPCH() {
return HUXPCH;
}

public short getIENDDATHM() {
return IENDDATHM;
}

public byte getINFTED() {
return INFTED;
}

public short getIODC() {
return IODC;
}

public short getISCED() {
return ISCED;
}

public short getISTRTDATHM() {
return ISTRTDATHM;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public byte getIV10A() {
return IV10A;
}

public byte getIV10B() {
return IV10B;
}

public byte getIV10C() {
return IV10C;
}

public byte getIV10D() {
return IV10D;
}

public byte getIV10E() {
return IV10E;
}

public byte getIV10F() {
return IV10F;
}

public byte getIV10G() {
return IV10G;
}

public byte getIV10H() {
return IV10H;
}

public byte getIV10I() {
return IV10I;
}

public byte getIV10J() {
return IV10J;
}

public byte getIV10K() {
return IV10K;
}

public byte getIV10L() {
return IV10L;
}

public byte getIV10NO() {
return IV10NO;
}

public short getIV2() {
return IV2;
}

public short getIV4() {
return IV4;
}

public short getIV5() {
return IV5;
}

public byte getIV5AA() {
return IV5AA;
}

public byte getIV5AB() {
return IV5AB;
}

public byte getIV5AC() {
return IV5AC;
}

public short getIV6A() {
return IV6A;
}

public short getIV6B() {
return IV6B;
}

public short getIV6C() {
return IV6C;
}

public short getIV6D() {
return IV6D;
}

public short getIV6E() {
return IV6E;
}

public short getIV6F() {
return IV6F;
}

public short getIV7() {
return IV7;
}

public byte getIV9() {
return IV9;
}

public byte getIVDA() {
return IVDA;
}

public byte getIVDB() {
return IVDB;
}

public byte getIVDC() {
return IVDC;
}

public byte getIVDD() {
return IVDD;
}

public byte getIVDE() {
return IVDE;
}

public short getIVEA() {
return IVEA;
}

public short getIVEB() {
return IVEB;
}

public short getIVEC() {
return IVEC;
}

public short getIVED() {
return IVED;
}

public short getIVEE() {
return IVEE;
}

public short getIVFA() {
return IVFA;
}

public short getIVFB() {
return IVFB;
}

public short getIVFC() {
return IVFC;
}

public short getIVFD() {
return IVFD;
}

public short getIVFE() {
return IVFE;
}

public byte getIVIOLW() {
return IVIOLW;
}

public short getIVJA() {
return IVJA;
}

public short getIVJB() {
return IVJB;
}

public short getIVJC() {
return IVJC;
}

public short getIVJD() {
return IVJD;
}

public short getIVJE() {
return IVJE;
}

public short getIVLYR() {
return IVLYR;
}

public short getIVMA() {
return IVMA;
}

public short getIVMB() {
return IVMB;
}

public short getIVMC() {
return IVMC;
}

public short getIVMD() {
return IVMD;
}

public short getIVME() {
return IVME;
}

public short getIVPA() {
return IVPA;
}

public short getIVPB() {
return IVPB;
}

public short getIVPC() {
return IVPC;
}

public short getIVPD() {
return IVPD;
}

public short getIVPE() {
return IVPE;
}

public short getIVSC() {
return IVSC;
}

public byte getIVSTAT2() {
return IVSTAT2;
}

public byte getIVVA() {
return IVVA;
}

public byte getIVVB() {
return IVVB;
}

public byte getIVVC() {
return IVVC;
}

public byte getIVVD() {
return IVVD;
}

public byte getIVVE() {
return IVVE;
}

public byte getJ1BOSS() {
return J1BOSS;
}

protected double J1CSSF() {
return J1CSSF;
}

protected double J1CSSM() {
return J1CSSM;
}

public byte getJ1GOLD() {
return J1GOLD;
}

protected double J1HGS() {
return J1HGS;
}

public short getJ1ISCO88_CC() {
return J1ISCO88_CC;
}

public String getJ1ISCO_CC() {
return J1ISCO_CC;
}

public byte getJ1MNGR() {
return J1MNGR;
}

public byte getJ1NONE_BH() {
return J1NONE_BH;
}

public byte getJ1NSSEC8_DV() {
return J1NSSEC8_DV;
}

public byte getJ1NSSEC_DV() {
return J1NSSEC_DV;
}

public byte getJ1RGSC() {
return J1RGSC;
}

public short getJ1SEC() {
return J1SEC;
}

public byte getJ1SEG() {
return J1SEG;
}

public byte getJ1SEMP() {
return J1SEMP;
}

public short getJ1SOC00_CC() {
return J1SOC00_CC;
}

public byte getJ1SOC90_CC() {
return J1SOC90_CC;
}

public short getJ2PAY_BH() {
return J2PAY_BH;
}

public short getJ2SOC00_CC() {
return J2SOC00_CC;
}

public short getJ2SOC90_CC() {
return J2SOC90_CC;
}

public byte getJBBGD1() {
return JBBGD1;
}

public short getJBBGLY() {
return JBBGLY;
}

public byte getJBBGLY1() {
return JBBGLY1;
}

public byte getJBBGM1() {
return JBBGM1;
}

public short getJBBGY41() {
return JBBGY41;
}

public short getJBCHC1() {
return JBCHC1;
}

public short getJBCHC2() {
return JBCHC2;
}

public short getJBCHC3() {
return JBCHC3;
}

public byte getJBCHGD() {
return JBCHGD;
}

public byte getJBCHGLY() {
return JBCHGLY;
}

public byte getJBCHGM() {
return JBCHGM;
}

public short getJBCHGY4() {
return JBCHGY4;
}

public byte getJBCK1() {
return JBCK1;
}

public byte getJBCK10() {
return JBCK10;
}

public byte getJBCK11() {
return JBCK11;
}

public byte getJBCK2() {
return JBCK2;
}

public byte getJBCK3() {
return JBCK3;
}

public byte getJBCK4() {
return JBCK4;
}

public byte getJBCK5() {
return JBCK5;
}

public byte getJBCK6() {
return JBCK6;
}

public byte getJBCK7() {
return JBCK7;
}

public byte getJBCK8() {
return JBCK8;
}

public byte getJBCK9() {
return JBCK9;
}

public byte getJBCSPL() {
return JBCSPL;
}

protected double JBCSSF() {
return JBCSSF;
}

protected double JBCSSM() {
return JBCSSM;
}

public byte getJBEMPP() {
return JBEMPP;
}

public byte getJBEMPR() {
return JBEMPR;
}

public short getJBGOLD() {
return JBGOLD;
}

protected double JBHGS() {
return JBHGS;
}

public short getJBHRLK() {
return JBHRLK;
}

public String getJBISCO_CC() {
return JBISCO_CC;
}

public byte getJBLKCHA() {
return JBLKCHA;
}

public byte getJBLKCHB() {
return JBLKCHB;
}

public byte getJBLKCHC() {
return JBLKCHC;
}

public byte getJBLKCHD() {
return JBLKCHD;
}

public byte getJBLKCHE() {
return JBLKCHE;
}

public byte getJBMNGP() {
return JBMNGP;
}

public short getJBNSSEC_DV() {
return JBNSSEC_DV;
}

public short getJBOFFY_BH() {
return JBOFFY_BH;
}

public int getJBONAM() {
return JBONAM;
}

public byte getJBONG() {
return JBONG;
}

public short getJBONUS() {
return JBONUS;
}

public short getJBOPPS() {
return JBOPPS;
}

public short getJBPEN() {
return JBPEN;
}

public short getJBPENM() {
return JBPENM;
}

public byte getJBPERFP() {
return JBPERFP;
}

public short getJBPL_BH() {
return JBPL_BH;
}

public byte getJBPROM() {
return JBPROM;
}

public short getJBRGSC_DV() {
return JBRGSC_DV;
}

public short getJBRISE() {
return JBRISE;
}

public short getJBSAT2() {
return JBSAT2;
}

public short getJBSAT4() {
return JBSAT4;
}

public short getJBSAT6() {
return JBSAT6;
}

public short getJBSAT7() {
return JBSAT7;
}

public short getJBSAT_BH() {
return JBSAT_BH;
}

public byte getJBSECTP() {
return JBSECTP;
}

public short getJBSECT_BH() {
return JBSECT_BH;
}

public short getJBSEC_BH() {
return JBSEC_BH;
}

public short getJBSEG_DV() {
return JBSEG_DV;
}

public byte getJBSEMPP() {
return JBSEMPP;
}

public byte getJBSEMPR() {
return JBSEMPR;
}

public short getJBSIC92() {
return JBSIC92;
}

public byte getJBSICP() {
return JBSICP;
}

public byte getJBSICR() {
return JBSICR;
}

public byte getJBSIZEP() {
return JBSIZEP;
}

public short getJBSOC00_CC() {
return JBSOC00_CC;
}

public short getJBSOC90LY_CC() {
return JBSOC90LY_CC;
}

public short getJBSOC90_CC() {
return JBSOC90_CC;
}

public byte getJBSOCP() {
return JBSOCP;
}

public byte getJBSOCR() {
return JBSOCR;
}

public short getJBSTATL() {
return JBSTATL;
}

public short getJBSTATT() {
return JBSTATT;
}

public byte getJBTERM1() {
return JBTERM1;
}

public byte getJBTERM2() {
return JBTERM2;
}

public byte getJBTERM2_BH() {
return JBTERM2_BH;
}

public short getJBTIME() {
return JBTIME;
}

public short getJBTTWM() {
return JBTTWM;
}

public short getJBUB() {
return JBUB;
}

public short getJBUBY() {
return JBUBY;
}

public byte getJBWKHRA() {
return JBWKHRA;
}

public byte getJBWKHRB() {
return JBWKHRB;
}

public byte getJBWKHRC() {
return JBWKHRC;
}

public byte getJBWKHRD() {
return JBWKHRD;
}

public byte getJBWKHRE() {
return JBWKHRE;
}

public byte getJBWKHRF() {
return JBWKHRF;
}

public byte getJBWKHRG() {
return JBWKHRG;
}

public byte getJBWKHRH() {
return JBWKHRH;
}

public byte getJBXPCHA() {
return JBXPCHA;
}

public byte getJBXPCHB() {
return JBXPCHB;
}

public byte getJBXPCHC() {
return JBXPCHC;
}

public byte getJBXPCHD() {
return JBXPCHD;
}

public byte getJBXPCHE() {
return JBXPCHE;
}

public byte getJHSTPY() {
return JHSTPY;
}

protected double JLCSSF() {
return JLCSSF;
}

protected double JLCSSM() {
return JLCSSM;
}

public short getJLGOLD() {
return JLGOLD;
}

protected double JLHGS() {
return JLHGS;
}

public short getJLID() {
return JLID;
}

public String getJLISCO_CC() {
return JLISCO_CC;
}

public short getJLNSSEC_DV() {
return JLNSSEC_DV;
}

public short getJLRGSC_DV() {
return JLRGSC_DV;
}

public short getJLSEC() {
return JLSEC;
}

public short getJLSEG_DV() {
return JLSEG_DV;
}

public short getJLSIC92() {
return JLSIC92;
}

public short getJLSOC00_CC() {
return JLSOC00_CC;
}

public short getJLSOC90_CC() {
return JLSOC90_CC;
}

public short getJLYID() {
return JLYID;
}

public short getJNMNTH() {
return JNMNTH;
}

public short getJNYEAR() {
return JNYEAR;
}

public byte getJSBGD1() {
return JSBGD1;
}

public byte getJSBGLY() {
return JSBGLY;
}

public byte getJSBGLY1() {
return JSBGLY1;
}

public byte getJSBGM1() {
return JSBGM1;
}

public short getJSBGY4() {
return JSBGY4;
}

public short getJSBGY41() {
return JSBGY41;
}

public byte getJSCK1() {
return JSCK1;
}

public short getJSHRLK() {
return JSHRLK;
}

protected double JSLOSS() {
return JSLOSS;
}

public byte getJSPART() {
return JSPART;
}

protected double JSPAYG() {
return JSPAYG;
}

public short getJSPAYGI() {
return JSPAYGI;
}

public int getJSPAYU() {
return JSPAYU;
}

public byte getJSPAYW() {
return JSPAYW;
}

protected double JSPAYW_BH() {
return JSPAYW_BH;
}

public short getJSPL_BH() {
return JSPL_BH;
}

public byte getJSPRLS() {
return JSPRLS;
}

public byte getJSPRNI() {
return JSPRNI;
}

protected double JSPROF() {
return JSPROF;
}

public short getJSPROFI() {
return JSPROFI;
}

public byte getJSPRTX() {
return JSPRTX;
}

public byte getJSPYNI() {
return JSPYNI;
}

public byte getJSPYTX() {
return JSPYTX;
}

public byte getJSSAME() {
return JSSAME;
}

public short getJSSAT() {
return JSSAT;
}

public short getJSSAT1() {
return JSSAT1;
}

public short getJSSAT2() {
return JSSAT2;
}

public short getJSSAT4() {
return JSSAT4;
}

public short getJSSAT5() {
return JSSAT5;
}

public short getJSTIME() {
return JSTIME;
}

public short getJSTTWM() {
return JSTTWM;
}

public byte getJSTYPEB() {
return JSTYPEB;
}

public short getJTYID() {
return JTYID;
}

public short getJUBGN() {
return JUBGN;
}

public short getJUHRSL() {
return JUHRSL;
}

public short getJUHRSX() {
return JUHRSX;
}

public short getJULK1() {
return JULK1;
}

public short getJULK4() {
return JULK4;
}

public short getJULK4X1() {
return JULK4X1;
}

public short getJULK4X2() {
return JULK4X2;
}

public short getJULK4X4() {
return JULK4X4;
}

public short getJULK4X5() {
return JULK4X5;
}

public short getJULK4X6() {
return JULK4X6;
}

public short getJULKA() {
return JULKA;
}

public short getJULKB() {
return JULKB;
}

public short getJULKC() {
return JULKC;
}

public short getJULKD() {
return JULKD;
}

public short getJULKE() {
return JULKE;
}

public short getJUPAYL() {
return JUPAYL;
}

public short getJUPAYX() {
return JUPAYX;
}

public short getJUSOC00_CC() {
return JUSOC00_CC;
}

public short getJUSOC90_CC() {
return JUSOC90_CC;
}

public short getJUSPEC() {
return JUSPEC;
}

public short getLACTA() {
return LACTA;
}

public short getLACTB() {
return LACTB;
}

public short getLACTC() {
return LACTC;
}

public short getLACTD() {
return LACTD;
}

public short getLACTE() {
return LACTE;
}

public short getLACTF() {
return LACTF;
}

public short getLACTH() {
return LACTH;
}

public short getLACTI() {
return LACTI;
}

public short getLACTJ() {
return LACTJ;
}

public short getLACTK() {
return LACTK;
}

public short getLACTL() {
return LACTL;
}

public byte getLCOH() {
return LCOH;
}

protected double LEWGHT() {
return LEWGHT;
}

protected double LEWTSW1() {
return LEWTSW1;
}

protected double LEWTSW2() {
return LEWTSW2;
}

protected double LEWTUK1() {
return LEWTUK1;
}

protected double LEWTUK2() {
return LEWTUK2;
}

public short getLFSAT1() {
return LFSAT1;
}

public short getLFSAT2() {
return LFSAT2;
}

public short getLFSAT3() {
return LFSAT3;
}

public short getLFSAT4() {
return LFSAT4;
}

public short getLFSAT5() {
return LFSAT5;
}

public short getLFSAT6() {
return LFSAT6;
}

public short getLFSAT7() {
return LFSAT7;
}

public short getLFSAT8() {
return LFSAT8;
}

public short getLFSATL() {
return LFSATL;
}

public short getLFSATO() {
return LFSATO;
}

public short getLKMOVY() {
return LKMOVY;
}

public short getLKNBRD() {
return LKNBRD;
}

public byte getLMAR1M() {
return LMAR1M;
}

public short getLMAR1Y() {
return LMAR1Y;
}

public byte getLNPRNT() {
return LNPRNT;
}

public byte getLPRNT() {
return LPRNT;
}

protected double LRWGHT() {
return LRWGHT;
}

protected double LRWTSW1() {
return LRWTSW1;
}

protected double LRWTSW2() {
return LRWTSW2;
}

protected double LRWTUK1() {
return LRWTUK1;
}

protected double LRWTUK2() {
return LRWTUK2;
}

public byte getLVCH() {
return LVCH;
}

public byte getLVGCH() {
return LVGCH;
}

public byte getLVGGCH() {
return LVGGCH;
}

public byte getLVGGPA() {
return LVGGPA;
}

public byte getLVGPAR() {
return LVGPAR;
}

public byte getLVLONG() {
return LVLONG;
}

public byte getLVMA() {
return LVMA;
}

public byte getLVPA() {
return LVPA;
}

public byte getLVSIB() {
return LVSIB;
}

public byte getMAAGE() {
return MAAGE;
}

public byte getMABOSS() {
return MABOSS;
}

public byte getMABWLY() {
return MABWLY;
}

public byte getMABWNLY() {
return MABWNLY;
}

public byte getMACH18() {
return MACH18;
}

protected double MACSSF() {
return MACSSF;
}

protected double MACSSM() {
return MACSSM;
}

public byte getMAFAR() {
return MAFAR;
}

public byte getMAGOLD() {
return MAGOLD;
}

protected double MAHGS() {
return MAHGS;
}

public short getMAISCO88_CC() {
return MAISCO88_CC;
}

public String getMAISCO_CC() {
return MAISCO_CC;
}

public byte getMAJU() {
return MAJU;
}

public byte getMAJU_BH() {
return MAJU_BH;
}

public byte getMALONE() {
return MALONE;
}

public byte getMAMAIL() {
return MAMAIL;
}

public byte getMAMNGR() {
return MAMNGR;
}

public byte getMANSSEC8_DV() {
return MANSSEC8_DV;
}

public byte getMANSSEC_DV() {
return MANSSEC_DV;
}

public byte getMARGSC() {
return MARGSC;
}

public short getMASEC() {
return MASEC;
}

public byte getMASEE() {
return MASEE;
}

public byte getMASEG() {
return MASEG;
}

public byte getMASEMP() {
return MASEMP;
}

public short getMASOC00_CC() {
return MASOC00_CC;
}

public byte getMASOC90_CC() {
return MASOC90_CC;
}

public short getMASTAT() {
return MASTAT;
}

public byte getMATEL() {
return MATEL;
}

public short getMEMORIG_BH() {
return MEMORIG_BH;
}

public short getMLCHM() {
return MLCHM;
}

public short getMLCHY4() {
return MLCHY4;
}

public short getMLSTAT_BH() {
return MLSTAT_BH;
}

public int getMNPID_BH() {
return MNPID_BH;
}

public byte getMOBUSE() {
return MOBUSE;
}

public short getMOVEST() {
return MOVEST;
}

public short getMOVJB() {
return MOVJB;
}

public short getMOVJBA() {
return MOVJBA;
}

public short getMOVJBB() {
return MOVJBB;
}

public short getMOVJBC() {
return MOVJBC;
}

public short getMOVJBD() {
return MOVJBD;
}

public short getMOVJBE() {
return MOVJBE;
}

public short getMOVJBF() {
return MOVJBF;
}

public short getMOVJBG() {
return MOVJBG;
}

public short getMOVJBH() {
return MOVJBH;
}

public short getMOVJBI() {
return MOVJBI;
}

public short getMOVY1() {
return MOVY1;
}

public short getMOVY2() {
return MOVY2;
}

public short getMRJBOSS() {
return MRJBOSS;
}

protected double MRJCSSF() {
return MRJCSSF;
}

protected double MRJCSSM() {
return MRJCSSM;
}

public short getMRJEND() {
return MRJEND;
}

public short getMRJGOLD() {
return MRJGOLD;
}

protected double MRJHGS() {
return MRJHGS;
}

public short getMRJISCO88_CC() {
return MRJISCO88_CC;
}

public String getMRJISCO_CC() {
return MRJISCO_CC;
}

public short getMRJMNGR() {
return MRJMNGR;
}

public short getMRJNSSEC8_DV() {
return MRJNSSEC8_DV;
}

public short getMRJNSSEC_DV() {
return MRJNSSEC_DV;
}

public short getMRJRGSC() {
return MRJRGSC;
}

public short getMRJSEC() {
return MRJSEC;
}

public short getMRJSEG() {
return MRJSEG;
}

public short getMRJSEMP() {
return MRJSEMP;
}

public short getMRJSIC() {
return MRJSIC;
}

public short getMRJSIC9() {
return MRJSIC9;
}

public short getMRJSIZE() {
return MRJSIZE;
}

public short getMRJSOC() {
return MRJSOC;
}

public short getMSTATSAM() {
return MSTATSAM;
}

public short getNAIDXHH_BH() {
return NAIDXHH_BH;
}

public byte getNATIDA() {
return NATIDA;
}

public byte getNATIDB() {
return NATIDB;
}

public byte getNATIDE() {
return NATIDE;
}

public byte getNATIDF() {
return NATIDF;
}

public byte getNATIDG() {
return NATIDG;
}

public byte getNATIDH() {
return NATIDH;
}

public short getNCHILD_DV() {
return NCHILD_DV;
}

public short getNCIGS() {
return NCIGS;
}

public short getNET1AG() {
return NET1AG;
}

public byte getNET1ET() {
return NET1ET;
}

public short getNET1JB() {
return NET1JB;
}

public byte getNET1KN() {
return NET1KN;
}

public byte getNET1LV() {
return NET1LV;
}

public short getNET1PH() {
return NET1PH;
}

public byte getNET1RL() {
return NET1RL;
}

public short getNET1WR() {
return NET1WR;
}

public short getNET2AG() {
return NET2AG;
}

public byte getNET2ET() {
return NET2ET;
}

public short getNET2JB() {
return NET2JB;
}

public byte getNET2KN() {
return NET2KN;
}

public byte getNET2LV() {
return NET2LV;
}

public short getNET2PH() {
return NET2PH;
}

public byte getNET2RL() {
return NET2RL;
}

public short getNET2WR() {
return NET2WR;
}

public short getNET3AG() {
return NET3AG;
}

public byte getNET3ET() {
return NET3ET;
}

public short getNET3JB() {
return NET3JB;
}

public byte getNET3KN() {
return NET3KN;
}

public byte getNET3LV() {
return NET3LV;
}

public short getNET3PH() {
return NET3PH;
}

public byte getNET3RL() {
return NET3RL;
}

public short getNET3WR() {
return NET3WR;
}

public short getNETAG_1() {
return NETAG_1;
}

public short getNETAG_2() {
return NETAG_2;
}

public short getNETAG_3() {
return NETAG_3;
}

public byte getNETKN_1() {
return NETKN_1;
}

public byte getNETKN_2() {
return NETKN_2;
}

public byte getNETKN_3() {
return NETKN_3;
}

public short getNETPH_1() {
return NETPH_1;
}

public short getNETPH_2() {
return NETPH_2;
}

public short getNETPH_3() {
return NETPH_3;
}

public byte getNETRL_1() {
return NETRL_1;
}

public byte getNETRL_2() {
return NETRL_2;
}

public byte getNETRL_3() {
return NETRL_3;
}

public short getNETSX1() {
return NETSX1;
}

public short getNETSX2() {
return NETSX2;
}

public short getNETSX3() {
return NETSX3;
}

public short getNETSX_1() {
return NETSX_1;
}

public short getNETSX_2() {
return NETSX_2;
}

public short getNETSX_3() {
return NETSX_3;
}

public short getNETWR_1() {
return NETWR_1;
}

public short getNETWR_2() {
return NETWR_2;
}

public short getNETWR_3() {
return NETWR_3;
}

public short getNEWHY() {
return NEWHY;
}

public short getNF1() {
return NF1;
}

public byte getNFH10_BH() {
return NFH10_BH;
}

public byte getNFH11_BH() {
return NFH11_BH;
}

public byte getNFH12_BH() {
return NFH12_BH;
}

public byte getNFH1_BH() {
return NFH1_BH;
}

public byte getNFH2_BH() {
return NFH2_BH;
}

public byte getNFH3_BH() {
return NFH3_BH;
}

public byte getNFH4_BH() {
return NFH4_BH;
}

public byte getNFH5_BH() {
return NFH5_BH;
}

public byte getNFH6_BH() {
return NFH6_BH;
}

public byte getNFH7_BH() {
return NFH7_BH;
}

public byte getNFH8_BH() {
return NFH8_BH;
}

public byte getNFH9_BH() {
return NFH9_BH;
}

public byte getNFHS1() {
return NFHS1;
}

public byte getNFHS10() {
return NFHS10;
}

public byte getNFHS11() {
return NFHS11;
}

public byte getNFHS12() {
return NFHS12;
}

public byte getNFHS2() {
return NFHS2;
}

public byte getNFHS3() {
return NFHS3;
}

public byte getNFHS4() {
return NFHS4;
}

public byte getNFHS5() {
return NFHS5;
}

public byte getNFHS6() {
return NFHS6;
}

public byte getNFHS7() {
return NFHS7;
}

public byte getNFHS8() {
return NFHS8;
}

public byte getNFHS9() {
return NFHS9;
}

public byte getNIPENS() {
return NIPENS;
}

public byte getNISERPS() {
return NISERPS;
}

public byte getNISJSA() {
return NISJSA;
}

public short getNJBNEW() {
return NJBNEW;
}

public short getNJBSP() {
return NJBSP;
}

protected double NJBWKS() {
return NJBWKS;
}

public short getNJISP() {
return NJISP;
}

protected double NJIWKS() {
return NJIWKS;
}

public short getNJUSP() {
return NJUSP;
}

protected double NJUWKS() {
return NJUWKS;
}

public byte getNLVCH() {
return NLVCH;
}

public byte getNLVGCH() {
return NLVGCH;
}

public byte getNLVGGCH() {
return NLVGGCH;
}

public byte getNLVGGPA() {
return NLVGGPA;
}

public byte getNLVGPA() {
return NLVGPA;
}

public byte getNLVSIB() {
return NLVSIB;
}

public byte getNMAR_BH() {
return NMAR_BH;
}

public byte getNOLVREL() {
return NOLVREL;
}

public byte getNQFEDA() {
return NQFEDA;
}

public byte getNQFEDB() {
return NQFEDB;
}

public byte getNQFEDC() {
return NQFEDC;
}

public short getNQFEDD() {
return NQFEDD;
}

public short getNQFEDE() {
return NQFEDE;
}

public byte getNQFEDF() {
return NQFEDF;
}

public byte getNQFEDG() {
return NQFEDG;
}

public byte getNQFEDH() {
return NQFEDH;
}

public byte getNQFEDI() {
return NQFEDI;
}

public byte getNQFEDJ() {
return NQFEDJ;
}

public byte getNQFEDK() {
return NQFEDK;
}

public short getNQFEDL() {
return NQFEDL;
}

public byte getNQFEDM() {
return NQFEDM;
}

public short getNQFEDN() {
return NQFEDN;
}

public byte getNQFEDO() {
return NQFEDO;
}

public byte getNQFEDP() {
return NQFEDP;
}

public byte getNQFEDQ() {
return NQFEDQ;
}

public byte getNQFEDR() {
return NQFEDR;
}

public short getNQFEDS() {
return NQFEDS;
}

public byte getNQFEDT() {
return NQFEDT;
}

public byte getNQFEDU() {
return NQFEDU;
}

public short getNQFEXA() {
return NQFEXA;
}

public short getNQFEXB() {
return NQFEXB;
}

public byte getNQFEXG() {
return NQFEXG;
}

public byte getNQFEXH() {
return NQFEXH;
}

public byte getNQFEXI() {
return NQFEXI;
}

public byte getNQFEXL() {
return NQFEXL;
}

public byte getNQFEXM() {
return NQFEXM;
}

public byte getNQFEXN() {
return NQFEXN;
}

public byte getNQFEXO() {
return NQFEXO;
}

public byte getNTRAIN() {
return NTRAIN;
}

public short getNXDTS() {
return NXDTS;
}

public byte getOPDEV1() {
return OPDEV1;
}

public byte getOPDEV2() {
return OPDEV2;
}

public byte getOPDVNI1() {
return OPDVNI1;
}

public byte getOPDVNI2() {
return OPDVNI2;
}

public byte getOPEUR1() {
return OPEUR1;
}

public byte getOPEUR2() {
return OPEUR2;
}

public byte getOPEUR3() {
return OPEUR3;
}

public short getOPFAMK() {
return OPFAMK;
}

public short getOPFAML() {
return OPFAML;
}

public byte getOPFAMO() {
return OPFAMO;
}

public byte getOPFAMP() {
return OPFAMP;
}

public byte getOPFAMQ() {
return OPFAMQ;
}

public byte getOPFAMR() {
return OPFAMR;
}

public byte getOPNISEC() {
return OPNISEC;
}

public short getOPPOLA() {
return OPPOLA;
}

public short getOPPOLB() {
return OPPOLB;
}

public short getOPPOLC() {
return OPPOLC;
}

public short getOPPOLD() {
return OPPOLD;
}

public byte getOPRLG2() {
return OPRLG2;
}

public byte getOPRLG5() {
return OPRLG5;
}

public byte getOPRLG7() {
return OPRLG7;
}

public byte getOVTNSA() {
return OVTNSA;
}

public byte getOVTPAY() {
return OVTPAY;
}

protected double OVTRATE() {
return OVTRATE;
}

protected double OVTRATE_BH() {
return OVTRATE_BH;
}

public byte getOVTREST() {
return OVTREST;
}

public byte getPAAGE() {
return PAAGE;
}

public byte getPAAID1() {
return PAAID1;
}

public byte getPAAID2() {
return PAAID2;
}

public byte getPAAID3() {
return PAAID3;
}

public byte getPAAID4() {
return PAAID4;
}

public byte getPAAID5() {
return PAAID5;
}

public byte getPAAID6() {
return PAAID6;
}

public byte getPAAID7() {
return PAAID7;
}

public byte getPAAID8() {
return PAAID8;
}

public byte getPAAID96() {
return PAAID96;
}

public byte getPAAID97() {
return PAAID97;
}

public byte getPABOSS() {
return PABOSS;
}

protected double PACSSF() {
return PACSSF;
}

protected double PACSSM() {
return PACSSM;
}

public byte getPAFAR() {
return PAFAR;
}

public byte getPAGOLD() {
return PAGOLD;
}

protected double PAHGS() {
return PAHGS;
}

public byte getPAIDU1() {
return PAIDU1;
}

public byte getPAIDU2() {
return PAIDU2;
}

public byte getPAIDU3() {
return PAIDU3;
}

public byte getPAIDU4() {
return PAIDU4;
}

public byte getPAIDU5() {
return PAIDU5;
}

public byte getPAIDU6() {
return PAIDU6;
}

public byte getPAIDU7() {
return PAIDU7;
}

public byte getPAIDU8() {
return PAIDU8;
}

public byte getPAIDU96() {
return PAIDU96;
}

public byte getPAIDU97() {
return PAIDU97;
}

public short getPAISCO88_CC() {
return PAISCO88_CC;
}

public String getPAISCO_CC() {
return PAISCO_CC;
}

public byte getPAJU() {
return PAJU;
}

public byte getPAJU_BH() {
return PAJU_BH;
}

public byte getPALONE() {
return PALONE;
}

public byte getPAMAIL() {
return PAMAIL;
}

public byte getPAMNGR() {
return PAMNGR;
}

public byte getPANSSEC8_DV() {
return PANSSEC8_DV;
}

public byte getPANSSEC_DV() {
return PANSSEC_DV;
}

public byte getPARGSC() {
return PARGSC;
}

public byte getPARMAR() {
return PARMAR;
}

public short getPASEC() {
return PASEC;
}

public byte getPASEE() {
return PASEE;
}

public byte getPASEG() {
return PASEG;
}

public byte getPASEMP() {
return PASEMP;
}

public short getPASOC00_CC() {
return PASOC00_CC;
}

public byte getPASOC90_CC() {
return PASOC90_CC;
}

public byte getPATEL() {
return PATEL;
}

public byte getPAYCK1() {
return PAYCK1;
}

public short getPAYDF1() {
return PAYDF1;
}

public short getPAYDF2() {
return PAYDF2;
}

public short getPAYDF3() {
return PAYDF3;
}

public short getPAYDF4() {
return PAYDF4;
}

public short getPAYDF5() {
return PAYDF5;
}

public short getPAYDF6() {
return PAYDF6;
}

public short getPAYDF7() {
return PAYDF7;
}

public short getPAYDF8() {
return PAYDF8;
}

public byte getPAYDF9() {
return PAYDF9;
}

public short getPAYGLI() {
return PAYGLI;
}

protected double PAYGLY() {
return PAYGLY;
}

public short getPAYGTI() {
return PAYGTI;
}

protected double PAYGTY() {
return PAYGTY;
}

protected double PAYGW() {
return PAYGW;
}

protected double PAYG_DV() {
return PAYG_DV;
}

public int getPAYLY() {
return PAYLY;
}

public short getPAYLYG() {
return PAYLYG;
}

protected double PAYLYW() {
return PAYLYW;
}

public short getPAYNLI() {
return PAYNLI;
}

protected double PAYNLY() {
return PAYNLY;
}

public short getPAYNTI() {
return PAYNTI;
}

protected double PAYNTY() {
return PAYNTY;
}

protected double PAYNW() {
return PAYNW;
}

public int getPAYS() {
return PAYS;
}

public short getPAYSG() {
return PAYSG;
}

public short getPAYSLP() {
return PAYSLP;
}

protected double PAYSW() {
return PAYSW;
}

public byte getPAYTYP() {
return PAYTYP;
}

public byte getPAYTYP_BH() {
return PAYTYP_BH;
}

protected double PAYUW() {
return PAYUW;
}

public byte getPCK1() {
return PCK1;
}

public byte getPCK2() {
return PCK2;
}

public byte getPE0H() {
return PE0H;
}

public byte getPE0M() {
return PE0M;
}

public short getPENADD() {
return PENADD;
}

public short getPENADV() {
return PENADV;
}

protected double PENADW() {
return PENADW;
}

public short getPENB4() {
return PENB4;
}

public short getPENB4V() {
return PENB4V;
}

protected double PENB4W() {
return PENB4W;
}

public short getPENB4Y4() {
return PENB4Y4;
}

public byte getPENCK1() {
return PENCK1;
}

public byte getPENCK2() {
return PENCK2;
}

public byte getPENMEX() {
return PENMEX;
}

public byte getPENVRF() {
return PENVRF;
}

public short getPENYR4() {
return PENYR4;
}

public byte getPF0H() {
return PF0H;
}

public byte getPF0M() {
return PF0M;
}

public int getPID() {
return PID;
}

public short getPLBORNC_CC() {
return PLBORNC_CC;
}

public short getPLNEW() {
return PLNEW;
}

public short getPLNOWM() {
return PLNOWM;
}

public short getPLNOWY4() {
return PLNOWY4;
}

public byte getPM0H() {
return PM0H;
}

public byte getPM0M() {
return PM0M;
}

public short getPPLEVR() {
return PPLEVR;
}

public short getPPPEN() {
return PPPEN;
}

public byte getPPPEX() {
return PPPEX;
}

public byte getPPPEXM() {
return PPPEXM;
}

public short getPREARNI() {
return PREARNI;
}

public short getPREARN_BH() {
return PREARN_BH;
}

public short getPRESBGM() {
return PRESBGM;
}

public short getPRESBY4() {
return PRESBY4;
}

public short getPRESLY() {
return PRESLY;
}

public short getPRF101() {
return PRF101;
}

public short getPRF102() {
return PRF102;
}

public byte getPRF107() {
return PRF107;
}

public short getPRF116() {
return PRF116;
}

public short getPRF125() {
return PRF125;
}

public short getPRF131() {
return PRF131;
}

public short getPRF135() {
return PRF135;
}

public byte getPRF137() {
return PRF137;
}

public short getPRF139() {
return PRF139;
}

public short getPRF141() {
return PRF141;
}

public byte getPRF143() {
return PRF143;
}

public short getPRFEHQ() {
return PRFEHQ;
}

public byte getPRFIRN() {
return PRFIRN;
}

public short getPRFITBI() {
return PRFITBI;
}

public short getPRFITB_BH() {
return PRFITB_BH;
}

public short getPRJBBY4() {
return PRJBBY4;
}

public byte getPRJBFT() {
return PRJBFT;
}

public short getPRJBLY() {
return PRJBLY;
}

public short getPRRS2I() {
return PRRS2I;
}

public short getPRSEHQ() {
return PRSEHQ;
}

public short getPRWHY() {
return PRWHY;
}

public byte getPV0H() {
return PV0H;
}

public byte getPV0M() {
return PV0M;
}

public byte getPYTC() {
return PYTC;
}

public short getPYWFTC() {
return PYWFTC;
}

protected double PYWFTCW() {
return PYWFTCW;
}

public short getQFA() {
return QFA;
}

public short getQFACHI() {
return QFACHI;
}

public short getQFB() {
return QFB;
}

public short getQFC() {
return QFC;
}

public short getQFD() {
return QFD;
}

public short getQFE() {
return QFE;
}

public short getQFED() {
return QFED;
}

public short getQFEDA() {
return QFEDA;
}

public short getQFEDB() {
return QFEDB;
}

public short getQFEDC() {
return QFEDC;
}

public short getQFEDD() {
return QFEDD;
}

public short getQFEDE() {
return QFEDE;
}

public short getQFEDF() {
return QFEDF;
}

public short getQFEDG() {
return QFEDG;
}

public short getQFEDH() {
return QFEDH;
}

public short getQFEDHI() {
return QFEDHI;
}

public short getQFEDI() {
return QFEDI;
}

public short getQFEDJ() {
return QFEDJ;
}

public short getQFEDK() {
return QFEDK;
}

public short getQFEDL() {
return QFEDL;
}

public short getQFEDM() {
return QFEDM;
}

public short getQFEDN() {
return QFEDN;
}

public short getQFEDO() {
return QFEDO;
}

public short getQFEDP() {
return QFEDP;
}

public short getQFEDQ() {
return QFEDQ;
}

public short getQFEDR() {
return QFEDR;
}

public short getQFEDS() {
return QFEDS;
}

public byte getQFEDT() {
return QFEDT;
}

public byte getQFEDU() {
return QFEDU;
}

public short getQFEDX() {
return QFEDX;
}

public short getQFEDXA() {
return QFEDXA;
}

public short getQFEDXB() {
return QFEDXB;
}

public short getQFEDXG() {
return QFEDXG;
}

public short getQFEDXH() {
return QFEDXH;
}

public short getQFEDXI() {
return QFEDXI;
}

public byte getQFEDXL() {
return QFEDXL;
}

public byte getQFEDXM() {
return QFEDXM;
}

public byte getQFEDXN() {
return QFEDXN;
}

public byte getQFEDXO() {
return QFEDXO;
}

public short getQFF() {
return QFF;
}

public short getQFG() {
return QFG;
}

public short getQFH() {
return QFH;
}

public short getQFHAS() {
return QFHAS;
}

public short getQFI() {
return QFI;
}

public short getQFJ() {
return QFJ;
}

public short getQFK() {
return QFK;
}

public short getQFL() {
return QFL;
}

public short getQFM() {
return QFM;
}

public short getQFN() {
return QFN;
}

public byte getQFREC() {
return QFREC;
}

public short getQFVOC() {
return QFVOC;
}

public short getQFX() {
return QFX;
}

public short getQFXC() {
return QFXC;
}

public short getQFXD() {
return QFXD;
}

public short getQFXE() {
return QFXE;
}

public short getQFXF() {
return QFXF;
}

public short getQFXG() {
return QFXG;
}

public short getQFXH() {
return QFXH;
}

public short getQFXK() {
return QFXK;
}

public short getQFXL() {
return QFXL;
}

public short getQFXM() {
return QFXM;
}

public short getQFXN() {
return QFXN;
}

public byte getQFXO() {
return QFXO;
}

public byte getQFXP() {
return QFXP;
}

public byte getQFXQ() {
return QFXQ;
}

public byte getQFXR() {
return QFXR;
}

public byte getQLFA() {
return QLFA;
}

public byte getQLFB() {
return QLFB;
}

public byte getQLFC() {
return QLFC;
}

public byte getQLFD() {
return QLFD;
}

public byte getQLFE() {
return QLFE;
}

public byte getQLFF() {
return QLFF;
}

public byte getQLFG() {
return QLFG;
}

public byte getQLFH() {
return QLFH;
}

public byte getQLFI() {
return QLFI;
}

public byte getQLFJ() {
return QLFJ;
}

public byte getQLFK() {
return QLFK;
}

public byte getQLFL() {
return QLFL;
}

public byte getQLFM() {
return QLFM;
}

public byte getQLFN() {
return QLFN;
}

public byte getQLFO() {
return QLFO;
}

public byte getQLFP() {
return QLFP;
}

public byte getQLFQ() {
return QLFQ;
}

public byte getQLFR() {
return QLFR;
}

public byte getQLFS() {
return QLFS;
}

public byte getRACEL_BH() {
return RACEL_BH;
}

public short getRACH12() {
return RACH12;
}

public byte getRCHBEN() {
return RCHBEN;
}

public byte getRDSBEN() {
return RDSBEN;
}

public byte getRDSBN16() {
return RDSBN16;
}

public byte getRDSBN18() {
return RDSBN18;
}

public byte getRDSBN19() {
return RDSBN19;
}

public byte getRDSBN21() {
return RDSBN21;
}

public byte getRDSBN22() {
return RDSBN22;
}

public byte getRDSBN25() {
return RDSBN25;
}

public byte getRDSBN26() {
return RDSBN26;
}

public byte getRDSBN27() {
return RDSBN27;
}

public byte getRDSBN28() {
return RDSBN28;
}

public short getREGION() {
return REGION;
}

public byte getREMAIL_CODE() {
return REMAIL_CODE;
}

public byte getRETAMT() {
return RETAMT;
}

public byte getRETEX() {
return RETEX;
}

public byte getRETEXP() {
return RETEXP;
}

public byte getRETFIX() {
return RETFIX;
}

public byte getRETSUF() {
return RETSUF;
}

public byte getREWORK() {
return REWORK;
}

public byte getRF2CK() {
return RF2CK;
}

public byte getRF6CK() {
return RF6CK;
}

public byte getRHBEN() {
return RHBEN;
}

public byte getRIS() {
return RIS;
}

public byte getRJSA() {
return RJSA;
}

public byte getRPENCR() {
return RPENCR;
}

public byte getRSRPEN() {
return RSRPEN;
}

public byte getRTCOMP() {
return RTCOMP;
}

public byte getRTCON1_BH() {
return RTCON1_BH;
}

public byte getRTCON2_BH() {
return RTCON2_BH;
}

public byte getRTCON3_BH() {
return RTCON3_BH;
}

public byte getRTCON4_BH() {
return RTCON4_BH;
}

public byte getRTFND1() {
return RTFND1;
}

public byte getRTFND10() {
return RTFND10;
}

public byte getRTFND2() {
return RTFND2;
}

public byte getRTFND3() {
return RTFND3;
}

public byte getRTFND4() {
return RTFND4;
}

public byte getRTFND5() {
return RTFND5;
}

public byte getRTFND6() {
return RTFND6;
}

public byte getRTFND7() {
return RTFND7;
}

public byte getRTFND8() {
return RTFND8;
}

public byte getRTFND9() {
return RTFND9;
}

public byte getRTFND96() {
return RTFND96;
}

public byte getRTFNDA() {
return RTFNDA;
}

public byte getRTFNDB() {
return RTFNDB;
}

public byte getRTFNDC() {
return RTFNDC;
}

public byte getRTFNDD() {
return RTFNDD;
}

public byte getRTFNDE() {
return RTFNDE;
}

public byte getRTFNDF() {
return RTFNDF;
}

public byte getRTFNDG() {
return RTFNDG;
}

public byte getRTFNDH() {
return RTFNDH;
}

public byte getRTFNDI() {
return RTFNDI;
}

public byte getRTFNDJ() {
return RTFNDJ;
}

public byte getRTFNDK() {
return RTFNDK;
}

public byte getRTFNDL() {
return RTFNDL;
}

public byte getRTFNDM() {
return RTFNDM;
}

public byte getRTFNDN() {
return RTFNDN;
}

public byte getRTFNDO() {
return RTFNDO;
}

public byte getRTFNDP() {
return RTFNDP;
}

public byte getRTLATA() {
return RTLATA;
}

public byte getRTLATB() {
return RTLATB;
}

public byte getRTLATC() {
return RTLATC;
}

public byte getRTLATD() {
return RTLATD;
}

public byte getRTLATE() {
return RTLATE;
}

public byte getRTLATF() {
return RTLATF;
}

public byte getRTLATG() {
return RTLATG;
}

public byte getRTLATH() {
return RTLATH;
}

public byte getRTLATI() {
return RTLATI;
}

public byte getRTLATJ() {
return RTLATJ;
}

public byte getRTMAGE() {
return RTMAGE;
}

public byte getRTPRO1_BH() {
return RTPRO1_BH;
}

public byte getRTPRO2_BH() {
return RTPRO2_BH;
}

public byte getRTPRO3_BH() {
return RTPRO3_BH;
}

public byte getRTPRO4_BH() {
return RTPRO4_BH;
}

public byte getRTPRO5() {
return RTPRO5;
}

public byte getRTPRO6() {
return RTPRO6;
}

public byte getRTRHM() {
return RTRHM;
}

public byte getRTRLLT() {
return RTRLLT;
}

public byte getRTRLYA() {
return RTRLYA;
}

public byte getRTRLYB() {
return RTRLYB;
}

public byte getRTRLYC() {
return RTRLYC;
}

public byte getRTRLYD() {
return RTRLYD;
}

public byte getRTRLYE() {
return RTRLYE;
}

public byte getRTRLYF() {
return RTRLYF;
}

public byte getRTRLYG() {
return RTRLYG;
}

public byte getRTRLYH() {
return RTRLYH;
}

public byte getRTRLYI() {
return RTRLYI;
}

public byte getRTRLYJ() {
return RTRLYJ;
}

public byte getRTRLYK() {
return RTRLYK;
}

public byte getRTRLYL() {
return RTRLYL;
}

public byte getRTRLYM() {
return RTRLYM;
}

public byte getRTSAT() {
return RTSAT;
}

public byte getRTVOL() {
return RTVOL;
}

public short getSAMPST() {
return SAMPST;
}

public short getSAMPST_BH() {
return SAMPST_BH;
}

public byte getSATINV() {
return SATINV;
}

public short getSAVE() {
return SAVE;
}

public int getSAVED() {
return SAVED;
}

public short getSAVEY1() {
return SAVEY1;
}

public short getSAVEY2() {
return SAVEY2;
}

public byte getSAVLT() {
return SAVLT;
}

public byte getSAVREG() {
return SAVREG;
}

public short getSCNOW() {
return SCNOW;
}

public byte getSCNOW2() {
return SCNOW2;
}

public short getSCTYPE() {
return SCTYPE;
}

public short getSMOKER() {
return SMOKER;
}

public short getSPINHH() {
return SPINHH;
}

public short getSPJB() {
return SPJB;
}

public short getSPJBHR() {
return SPJBHR;
}

public short getSPJBOT() {
return SPJBOT;
}

public short getSPJBYR() {
return SPJBYR;
}

protected double SPPAYG() {
return SPPAYG;
}

public short getSPPAYGI() {
return SPPAYGI;
}

public byte getSPPEN() {
return SPPEN;
}

public int getSPPID_BH() {
return SPPID_BH;
}

public short getSPSOC90_CC() {
return SPSOC90_CC;
}

public byte getSTAKEH() {
return STAKEH;
}

public byte getTELHTQ() {
return TELHTQ;
}

public byte getTELQAL() {
return TELQAL;
}

public byte getTELQLY() {
return TELQLY;
}

public short getTENURE_DV() {
return TENURE_DV;
}

public byte getTHHRPW() {
return THHRPW;
}

public byte getTHRPOP() {
return THRPOP;
}

public byte getTLHQLY() {
return TLHQLY;
}

public byte getTRAIN() {
return TRAIN;
}

public byte getTRBEN1() {
return TRBEN1;
}

public byte getTRBEN2() {
return TRBEN2;
}

public byte getTRFEEA1() {
return TRFEEA1;
}

public byte getTRFEEA2() {
return TRFEEA2;
}

public byte getTRFEEA3() {
return TRFEEA3;
}

public byte getTRFEEB1() {
return TRFEEB1;
}

public byte getTRFEEB2() {
return TRFEEB2;
}

public byte getTRFEEB3() {
return TRFEEB3;
}

public byte getTRFEEC1() {
return TRFEEC1;
}

public byte getTRFEEC2() {
return TRFEEC2;
}

public byte getTRFEEC3() {
return TRFEEC3;
}

public byte getTRFEEE1() {
return TRFEEE1;
}

public byte getTRFEEE2() {
return TRFEEE2;
}

public byte getTRFEEE3() {
return TRFEEE3;
}

public byte getTRFEEF1() {
return TRFEEF1;
}

public byte getTRFEEF2() {
return TRFEEF2;
}

public byte getTRFEEF3() {
return TRFEEF3;
}

public byte getTRFEEG1() {
return TRFEEG1;
}

public byte getTRFEEG2() {
return TRFEEG2;
}

public byte getTRFEEG3() {
return TRFEEG3;
}

public byte getTRMORE1() {
return TRMORE1;
}

public byte getTRMORE2() {
return TRMORE2;
}

public byte getTROPAY() {
return TROPAY;
}

public byte getTRPEN() {
return TRPEN;
}

public byte getTRPLCE1() {
return TRPLCE1;
}

public byte getTRPLCE2() {
return TRPLCE2;
}

public byte getTRPLCE3() {
return TRPLCE3;
}

public short getTRQ1() {
return TRQ1;
}

public short getTRQ2() {
return TRQ2;
}

public short getTRQ3() {
return TRQ3;
}

public byte getTRQLAC1() {
return TRQLAC1;
}

public byte getTRQLAC2() {
return TRQLAC2;
}

public byte getTRQLAC3() {
return TRQLAC3;
}

public byte getTRQLXP1() {
return TRQLXP1;
}

public byte getTRQLXP2() {
return TRQLXP2;
}

public byte getTRQLXP3() {
return TRQLXP3;
}

public byte getTRU1() {
return TRU1;
}

public byte getTRU2() {
return TRU2;
}

public byte getTRU3() {
return TRU3;
}

public byte getTRWHYA1() {
return TRWHYA1;
}

public byte getTRWHYA2() {
return TRWHYA2;
}

public byte getTRWHYA3() {
return TRWHYA3;
}

public byte getTRWHYB1() {
return TRWHYB1;
}

public byte getTRWHYB2() {
return TRWHYB2;
}

public byte getTRWHYB3() {
return TRWHYB3;
}

public byte getTRWHYC1() {
return TRWHYC1;
}

public byte getTRWHYC2() {
return TRWHYC2;
}

public byte getTRWHYC3() {
return TRWHYC3;
}

public byte getTRWHYD1() {
return TRWHYD1;
}

public byte getTRWHYD2() {
return TRWHYD2;
}

public byte getTRWHYD3() {
return TRWHYD3;
}

public byte getTRWHYE1() {
return TRWHYE1;
}

public byte getTRWHYE2() {
return TRWHYE2;
}

public byte getTRWHYE3() {
return TRWHYE3;
}

public short getTUIN1() {
return TUIN1;
}

public short getTUJBPL() {
return TUJBPL;
}

public byte getUKCITZN_DV_BH() {
return UKCITZN_DV_BH;
}

public short getVOTE() {
return VOTE;
}

public short getVOTE1() {
return VOTE1;
}

public short getVOTE2() {
return VOTE2;
}

public short getVOTE3() {
return VOTE3;
}

public short getVOTE3_BH() {
return VOTE3_BH;
}

public short getVOTE4() {
return VOTE4;
}

public short getVOTE4_BH() {
return VOTE4_BH;
}

public short getVOTE5() {
return VOTE5;
}

public short getVOTE6() {
return VOTE6;
}

public byte getVOTE7() {
return VOTE7;
}

public byte getVOTE8() {
return VOTE8;
}

public byte getVOTE8_BH() {
return VOTE8_BH;
}

public byte getWINDF() {
return WINDF;
}

public byte getWINDFA() {
return WINDFA;
}

public int getWINDFAY() {
return WINDFAY;
}

public byte getWINDFB() {
return WINDFB;
}

public int getWINDFBY() {
return WINDFBY;
}

public byte getWINDFC() {
return WINDFC;
}

public int getWINDFCY() {
return WINDFCY;
}

public byte getWINDFD() {
return WINDFD;
}

public int getWINDFDY() {
return WINDFDY;
}

public byte getWINDFF() {
return WINDFF;
}

public int getWINDFFY() {
return WINDFFY;
}

public byte getWINDFG() {
return WINDFG;
}

public int getWINDFGY() {
return WINDFGY;
}

public byte getWINDFH() {
return WINDFH;
}

public int getWINDFHY() {
return WINDFHY;
}

public short getWKTIME() {
return WKTIME;
}

public byte getWLSH1() {
return WLSH1;
}

public byte getWLSH2() {
return WLSH2;
}

public byte getWLSH3() {
return WLSH3;
}

public byte getWLSH4() {
return WLSH4;
}

public byte getWLSH96() {
return WLSH96;
}

public byte getWLSHUA() {
return WLSHUA;
}

public byte getWLSHUB() {
return WLSHUB;
}

public byte getWLSHUC() {
return WLSHUC;
}

public byte getWLSHUD() {
return WLSHUD;
}

public byte getWLSHUE() {
return WLSHUE;
}

public short getXDTS() {
return XDTS;
}

protected double XEWGHT() {
return XEWGHT;
}

protected double XEWTUK1() {
return XEWTUK1;
}

protected double XEWTUK2() {
return XEWTUK2;
}

public short getXPCHC() {
return XPCHC;
}

public short getXPCHCF() {
return XPCHCF;
}

public byte getXPLEIS() {
return XPLEIS;
}

public byte getXPMEAL() {
return XPMEAL;
}

public byte getXPMOVE() {
return XPMOVE;
}

protected double XRWGHT() {
return XRWGHT;
}

protected double XRWTUK1() {
return XRWTUK1;
}

protected double XRWTUK2() {
return XRWTUK2;
}

public short getYASOC00_CC() {
return YASOC00_CC;
}

public byte getYASOC90_CC() {
return YASOC90_CC;
}

public byte getYNOPEN1() {
return YNOPEN1;
}

public byte getYNOPEN2() {
return YNOPEN2;
}

public byte getYRTLAT() {
return YRTLAT;
}

public byte getYRTRLY() {
return YRTRLY;
}

public US_Wave16_indresp_Record(String line) {
s = line.split("\t");
initPID(s[0]);
initHIQUALB_DV(s[1]);
initHID(s[2]);
initHIDP(s[3]);
initPNO(s[4]);
initISTRTDATD(s[5]);
initISTRTDATM(s[6]);
initISTRTDATY(s[7]);
initIVLYR(s[8]);
initIVSTAT2(s[9]);
initISTRTDATHH(s[10]);
initISTRTDATHM(s[11]);
initLKNBRD(s[12]);
initLKMOVE(s[13]);
initLKMOVY(s[14]);
initXPMOVE(s[15]);
initPLNEW(s[16]);
initPLNOWM(s[17]);
initPLNOWY4(s[18]);
initMOVJB(s[19]);
initMOVJBA(s[20]);
initMOVJBB(s[21]);
initMOVJBC(s[22]);
initMOVJBD(s[23]);
initMOVJBE(s[24]);
initMOVJBF(s[25]);
initMOVJBG(s[26]);
initMOVJBH(s[27]);
initMOVJBI(s[28]);
initMOVY1(s[29]);
initMOVY2(s[30]);
initDOBY(s[31]);
initSEX(s[32]);
initMLSTAT_BH(s[33]);
initMSTATSAM(s[34]);
initMLCHM(s[35]);
initMLCHY4(s[36]);
initJBSTAT(s[37]);
initEDLYR(s[38]);
initEDTYPE1(s[39]);
initEDBLYR1(s[40]);
initEDBGM1(s[41]);
initEDBGY1(s[42]);
initEDENM1(s[43]);
initEDENY1(s[44]);
initEDENNE1(s[45]);
initEDFEEA1(s[46]);
initEDFEEB1(s[47]);
initEDFEEC1(s[48]);
initEDFEED1(s[49]);
initEDFEEE1(s[50]);
initEDFEEF1(s[51]);
initEDFEEG1(s[52]);
initEDMORE1(s[53]);
initEDTYPE2(s[54]);
initEDBLYR2(s[55]);
initEDBGM2(s[56]);
initEDBGY2(s[57]);
initEDENM2(s[58]);
initEDENY2(s[59]);
initEDENNE2(s[60]);
initEDFEEA2(s[61]);
initEDFEEB2(s[62]);
initEDFEEC2(s[63]);
initEDFEED2(s[64]);
initEDFEEE2(s[65]);
initEDFEEF2(s[66]);
initEDFEEG2(s[67]);
initEDMORE2(s[68]);
initEDTYPE3(s[69]);
initEDBLYR3(s[70]);
initEDBGM3(s[71]);
initEDBGY3(s[72]);
initEDENM3(s[73]);
initEDENY3(s[74]);
initEDENNE3(s[75]);
initEDFEEA3(s[76]);
initEDFEEB3(s[77]);
initEDFEEC3(s[78]);
initEDFEED3(s[79]);
initEDFEEE3(s[80]);
initEDFEEF3(s[81]);
initEDFEEG3(s[82]);
initYR2UK4(s[83]);
initNATIDB(s[84]);
initNATIDF(s[85]);
initNATIDG(s[86]);
initNATIDE(s[87]);
initNATIDA(s[88]);
initNATIDH(s[89]);
initRACEL_BH(s[90]);
initOPRLG5(s[91]);
initOPRLG7(s[92]);
initPAJU_BH(s[93]);
initPASEMP(s[94]);
initPABOSS(s[95]);
initPAMNGR(s[96]);
initMAJU_BH(s[97]);
initMASEMP(s[98]);
initMABOSS(s[99]);
initMAMNGR(s[100]);
initJ1NONE_BH(s[101]);
initJ1SEMP(s[102]);
initJ1BOSS(s[103]);
initJ1MNGR(s[104]);
initLCOH(s[105]);
initCOH1BM(s[106]);
initCOH1BY(s[107]);
initCOH1MR(s[108]);
initCOH1EM(s[109]);
initCOH1EY(s[110]);
initNMAR_BH(s[111]);
initLMAR1M(s[112]);
initLMAR1Y(s[113]);
initLPRNT(s[114]);
initLNPRNT(s[115]);
initCH1BY4(s[116]);
initSCHOOL(s[117]);
initSCEND(s[118]);
initSCTYPE(s[119]);
initSCNOW(s[120]);
initFETYPE(s[121]);
initFENOW_BH(s[122]);
initFEEND(s[123]);
initQFHAS(s[124]);
initQFA(s[125]);
initQFB(s[126]);
initQFC(s[127]);
initQFD(s[128]);
initQFE(s[129]);
initQFF(s[130]);
initQFG(s[131]);
initQFH(s[132]);
initQFI(s[133]);
initQFJ(s[134]);
initQFK(s[135]);
initQFL(s[136]);
initQFM(s[137]);
initQFN(s[138]);
initQFED(s[139]);
initQFEDA(s[140]);
initNQFEDA(s[141]);
initQFEDB(s[142]);
initNQFEDB(s[143]);
initQFEDC(s[144]);
initNQFEDC(s[145]);
initQFEDD(s[146]);
initNQFEDD(s[147]);
initQFEDE(s[148]);
initNQFEDE(s[149]);
initQFEDF(s[150]);
initNQFEDF(s[151]);
initQFEDG(s[152]);
initNQFEDG(s[153]);
initQFEDH(s[154]);
initNQFEDH(s[155]);
initQFEDI(s[156]);
initNQFEDI(s[157]);
initQFEDJ(s[158]);
initNQFEDJ(s[159]);
initQFEDT(s[160]);
initNQFEDT(s[161]);
initQFEDU(s[162]);
initNQFEDU(s[163]);
initQFEDK(s[164]);
initNQFEDK(s[165]);
initQFEDL(s[166]);
initNQFEDL(s[167]);
initQFEDM(s[168]);
initNQFEDM(s[169]);
initQFEDN(s[170]);
initNQFEDN(s[171]);
initQFEDO(s[172]);
initNQFEDO(s[173]);
initQFEDP(s[174]);
initNQFEDP(s[175]);
initQFEDQ(s[176]);
initNQFEDQ(s[177]);
initQFEDR(s[178]);
initNQFEDR(s[179]);
initQFEDS(s[180]);
initNQFEDS(s[181]);
initTRAIN(s[182]);
initNTRAIN(s[183]);
initTRPLCE1(s[184]);
initTRWHYA1(s[185]);
initTRWHYB1(s[186]);
initTRWHYC1(s[187]);
initTRWHYD1(s[188]);
initTRWHYE1(s[189]);
initTRQ1(s[190]);
initTRU1(s[191]);
initTRFEEA1(s[192]);
initTRFEEB1(s[193]);
initTRFEEC1(s[194]);
initTRFEEE1(s[195]);
initTRFEEF1(s[196]);
initTRFEEG1(s[197]);
initTRQLXP1(s[198]);
initTRQLAC1(s[199]);
initTRMORE1(s[200]);
initTRPLCE2(s[201]);
initTRWHYA2(s[202]);
initTRWHYB2(s[203]);
initTRWHYC2(s[204]);
initTRWHYD2(s[205]);
initTRWHYE2(s[206]);
initTRQ2(s[207]);
initTRU2(s[208]);
initTRFEEA2(s[209]);
initTRFEEB2(s[210]);
initTRFEEC2(s[211]);
initTRFEEE2(s[212]);
initTRFEEF2(s[213]);
initTRFEEG2(s[214]);
initTRQLXP2(s[215]);
initTRQLAC2(s[216]);
initTRMORE2(s[217]);
initTRPLCE3(s[218]);
initTRWHYA3(s[219]);
initTRWHYB3(s[220]);
initTRWHYC3(s[221]);
initTRWHYD3(s[222]);
initTRWHYE3(s[223]);
initTRQ3(s[224]);
initTRU3(s[225]);
initTRFEEA3(s[226]);
initTRFEEB3(s[227]);
initTRFEEC3(s[228]);
initTRFEEE3(s[229]);
initTRFEEF3(s[230]);
initTRFEEG3(s[231]);
initTRQLXP3(s[232]);
initTRQLAC3(s[233]);
initQFREC(s[234]);
initQFEDX(s[235]);
initQFEDXA(s[236]);
initNQFEXA(s[237]);
initQFEDXB(s[238]);
initNQFEXB(s[239]);
initQFEDXL(s[240]);
initNQFEXL(s[241]);
initQFEDXM(s[242]);
initNQFEXM(s[243]);
initQFEDXN(s[244]);
initNQFEXN(s[245]);
initQFEDXO(s[246]);
initNQFEXO(s[247]);
initQFEDXG(s[248]);
initNQFEXG(s[249]);
initQFEDXH(s[250]);
initNQFEXH(s[251]);
initQFEDXI(s[252]);
initNQFEXI(s[253]);
initQFX(s[254]);
initQFXC(s[255]);
initQFXD(s[256]);
initQFXE(s[257]);
initQFXF(s[258]);
initQFXG(s[259]);
initQFXH(s[260]);
initQFXO(s[261]);
initQFXP(s[262]);
initQFXQ(s[263]);
initQFXR(s[264]);
initQFXK(s[265]);
initQFXL(s[266]);
initQFXM(s[267]);
initQFXN(s[268]);
initBIRHH(s[269]);
initMABWLY(s[270]);
initMABWNLY(s[271]);
initBWTPN1(s[272]);
initBWTAGM1(s[273]);
initBWTXP1(s[274]);
initBWTEL1(s[275]);
initBWTWK1(s[276]);
initBWTKN1(s[277]);
initBWTLB1(s[278]);
initBWTOZ1(s[279]);
initBWTGM1(s[280]);
initBWTG51(s[281]);
initBWTPN2(s[282]);
initBWTAGM2(s[283]);
initBWTXP2(s[284]);
initBWTEL2(s[285]);
initBWTWK2(s[286]);
initBWTKN2(s[287]);
initBWTLB2(s[288]);
initBWTOZ2(s[289]);
initBWTGM2(s[290]);
initBWTG52(s[291]);
initBWTPN3(s[292]);
initBWTAGM3(s[293]);
initBWTXP3(s[294]);
initBWTEL3(s[295]);
initBWTWK3(s[296]);
initBWTKN3(s[297]);
initBWTLB3(s[298]);
initBWTOZ3(s[299]);
initBWTGM3(s[300]);
initBWTG53(s[301]);
initWLSH1(s[302]);
initWLSH2(s[303]);
initWLSH3(s[304]);
initWLSH4(s[305]);
initWLSH96(s[306]);
initWLSHUA(s[307]);
initWLSHUB(s[308]);
initWLSHUC(s[309]);
initWLSHUD(s[310]);
initWLSHUE(s[311]);
initAGLT20(s[312]);
initSCNOW2(s[313]);
initINFTED(s[314]);
initEDASP_BH(s[315]);
initFEDASP(s[316]);
initFEDTYP(s[317]);
initFEDLIK_BH(s[318]);
initFEDNT1(s[319]);
initFEDNT2(s[320]);
initAGERET(s[321]);
initREWORK(s[322]);
initRETEX(s[323]);
initAGEXRT(s[324]);
initRETFIX(s[325]);
initRTMAGE(s[326]);
initRTRLLT(s[327]);
initRTRLYA(s[328]);
initRTRLYB(s[329]);
initRTRLYC(s[330]);
initRTRLYD(s[331]);
initRTRLYE(s[332]);
initRTRLYF(s[333]);
initRTRLYG(s[334]);
initRTRLYH(s[335]);
initRTRLYI(s[336]);
initRTRLYJ(s[337]);
initRTRLYK(s[338]);
initRTRLYL(s[339]);
initRTRLYM(s[340]);
initYRTRLY(s[341]);
initRTLATA(s[342]);
initRTLATB(s[343]);
initRTLATC(s[344]);
initRTLATD(s[345]);
initRTLATE(s[346]);
initRTLATF(s[347]);
initRTLATG(s[348]);
initRTLATH(s[349]);
initRTLATI(s[350]);
initRTLATJ(s[351]);
initYRTLAT(s[352]);
initRTVOL(s[353]);
initRTSAT(s[354]);
initRTCOMP(s[355]);
initRTPRO1_BH(s[356]);
initRTPRO2_BH(s[357]);
initRTPRO3_BH(s[358]);
initRTPRO4_BH(s[359]);
initRTPRO5(s[360]);
initRTPRO6(s[361]);
initRTCON1_BH(s[362]);
initRTCON2_BH(s[363]);
initRTCON3_BH(s[364]);
initRTCON4_BH(s[365]);
initIVDA(s[366]);
initIVDB(s[367]);
initIVDC(s[368]);
initIVDD(s[369]);
initIVDE(s[370]);
initPM0H(s[371]);
initPM0M(s[372]);
initHLDSBL1(s[373]);
initHLSTAT(s[374]);
initHLPRB(s[375]);
initHLPRBA(s[376]);
initHLPRBB(s[377]);
initHLPRBC(s[378]);
initHLPRBD(s[379]);
initHLPRBE(s[380]);
initHLPRBF(s[381]);
initHLPRBG(s[382]);
initHLPRBH(s[383]);
initHLPRBI(s[384]);
initHLPRBJ(s[385]);
initHLPRBK(s[386]);
initHLPRBL(s[387]);
initHLPRBN(s[388]);
initHLPRBO(s[389]);
initHLPRBM(s[390]);
initHLPRXA(s[391]);
initHLPRXB(s[392]);
initHLPRXC(s[393]);
initHLPRXD(s[394]);
initHLPRXE(s[395]);
initHLPRXF(s[396]);
initHLPRXG(s[397]);
initHLPRXH(s[398]);
initHLPRXI(s[399]);
initHLPRXJ(s[400]);
initHLPRXK(s[401]);
initHLPRXL(s[402]);
initHLPRXM(s[403]);
initHLPRXN(s[404]);
initHLPRXO(s[405]);
initHLLT(s[406]);
initHLLTA(s[407]);
initHLLTB(s[408]);
initHLLTC(s[409]);
initHLLTD(s[410]);
initHLLTE(s[411]);
initHLLTW(s[412]);
initHLENDW(s[413]);
initHLLTWA(s[414]);
initHLPAIN(s[415]);
initHLTRPN(s[416]);
initHLAVPN(s[417]);
initHLWTPN(s[418]);
initHLIV65(s[419]);
initADLA(s[420]);
initADLAD(s[421]);
initADLB(s[422]);
initADLBD(s[423]);
initADLC(s[424]);
initADLCD(s[425]);
initADLD(s[426]);
initADLDD(s[427]);
initADLE(s[428]);
initADLED(s[429]);
initADLF(s[430]);
initADLFD(s[431]);
initRTRHM(s[432]);
initLVLONG(s[433]);
initHL2GP(s[434]);
initHL2HOP(s[435]);
initXDTS(s[436]);
initNXDTS(s[437]);
initHOSP(s[438]);
initHOSPD(s[439]);
initHOSPCH(s[440]);
initHOSPNHS(s[441]);
initHLCVR(s[442]);
initHLCVRH(s[443]);
initHLCVRL(s[444]);
initHLSV(s[445]);
initHLSVA(s[446]);
initHLSVAN(s[447]);
initHLSVAF(s[448]);
initHLSVB(s[449]);
initHLSVBN(s[450]);
initHLSVBF(s[451]);
initHLSVC(s[452]);
initHLSVCN(s[453]);
initHLSVCF(s[454]);
initHLSVD(s[455]);
initHLSVDN(s[456]);
initHLSVDF(s[457]);
initHLSVE(s[458]);
initHLSVEN(s[459]);
initHLSVEF(s[460]);
initHLSVF(s[461]);
initHLSVFN(s[462]);
initHLSVFF(s[463]);
initHLSVG(s[464]);
initHLSVGN(s[465]);
initHLSVGF(s[466]);
initHLSVH(s[467]);
initHLSVHN(s[468]);
initHLSVHF(s[469]);
initHLSVI(s[470]);
initHLSVIN(s[471]);
initHLSVIF(s[472]);
initHLSVL(s[473]);
initHLSVLN(s[474]);
initHLSVLF(s[475]);
initHLSVM(s[476]);
initHLSVMN(s[477]);
initHLSVMF(s[478]);
initHLSVJ(s[479]);
initHLSVJN(s[480]);
initHLSVJF(s[481]);
initHLSVK(s[482]);
initHLSVKN(s[483]);
initHLSVKF(s[484]);
initHLCK(s[485]);
initHLCKA(s[486]);
initHLCKAN(s[487]);
initHLCKB(s[488]);
initHLCKBN(s[489]);
initHLCKC(s[490]);
initHLCKCN(s[491]);
initHLCKD(s[492]);
initHLCKDN(s[493]);
initHLCKE(s[494]);
initHLCKEN(s[495]);
initHLCKI(s[496]);
initHLCKIN(s[497]);
initHLCKF(s[498]);
initHLCKFN(s[499]);
initHLCKG(s[500]);
initHLCKGN(s[501]);
initHLCKH(s[502]);
initHLCKHN(s[503]);
initSMOKER(s[504]);
initNCIGS(s[505]);
initHLHT(s[506]);
initHLHTF(s[507]);
initHLHTI(s[508]);
initHLHTC(s[509]);
initHLWTM(s[510]);
initHLWTS(s[511]);
initHLWTP(s[512]);
initHLWTK(s[513]);
initHLWTE(s[514]);
initHLWTL(s[515]);
initHLWTR(s[516]);
initCBAGEF(s[517]);
initHLPREG(s[518]);
initSPINHH(s[519]);
initAIDHH(s[520]);
initAIDHUA(s[521]);
initAIDHUB(s[522]);
initAIDHUC(s[523]);
initAIDXHH(s[524]);
initNAIDXHH_BH(s[525]);
initAIDHU1(s[526]);
initAIDHU2(s[527]);
initAIDHRS_BH(s[528]);
initIVMA(s[529]);
initIVMB(s[530]);
initIVMC(s[531]);
initIVMD(s[532]);
initIVME(s[533]);
initPE0H(s[534]);
initPE0M(s[535]);
initJBHAS(s[536]);
initJBOFF(s[537]);
initJBOFFY_BH(s[538]);
initJBTERM1(s[539]);
initJBTERM2_BH(s[540]);
initJBCK1(s[541]);
initJBSOCP(s[542]);
initJBCK2(s[543]);
initJBSOCR(s[544]);
initJBCK3(s[545]);
initJBSICP(s[546]);
initJBSIC92(s[547]);
initJBCK4(s[548]);
initJBSICR(s[549]);
initJBCK5(s[550]);
initJBEMPP(s[551]);
initJBCK6(s[552]);
initJBEMPR(s[553]);
initJBCK7(s[554]);
initJBSEMPP(s[555]);
initJBSEMPR(s[556]);
initJBSEMP(s[557]);
initJBCK8(s[558]);
initJBPROM(s[559]);
initJBCHGD(s[560]);
initJBCHGM(s[561]);
initJBCHGY4(s[562]);
initJBCHGLY(s[563]);
initJBCSPL(s[564]);
initJBCK9(s[565]);
initJBMNGP(s[566]);
initJBMNGR(s[567]);
initJBCK10(s[568]);
initJBSECTP(s[569]);
initJBSECT_BH(s[570]);
initJBCK11(s[571]);
initJBSIZEP(s[572]);
initJBSIZE(s[573]);
initJBHRS(s[574]);
initJBOT(s[575]);
initJBOTPD(s[576]);
initJBHRLK(s[577]);
initJBPL_BH(s[578]);
initJBTTWT(s[579]);
initJBTTWM(s[580]);
initJBSAT2(s[581]);
initJBSAT4(s[582]);
initJBSAT6(s[583]);
initJBSAT7(s[584]);
initJBSAT_BH(s[585]);
initPAYGL(s[586]);
initPAYGW(s[587]);
initPAYNL(s[588]);
initPAYNW(s[589]);
initPYTC(s[590]);
initPYWFTC(s[591]);
initPYWFTCW(s[592]);
initPAYSLP(s[593]);
initPAYUSL(s[594]);
initPAYU(s[595]);
initPAYUW(s[596]);
initPAYUG(s[597]);
initPAYDF1(s[598]);
initPAYDF2(s[599]);
initPAYDF3(s[600]);
initPAYDF4(s[601]);
initPAYDF5(s[602]);
initPAYDF6(s[603]);
initPAYDF7(s[604]);
initPAYDF9(s[605]);
initPAYDF8(s[606]);
initPAYTYP_BH(s[607]);
initOVTPAY(s[608]);
initEXTRATE(s[609]);
initEXTREST(s[610]);
initBASRATE(s[611]);
initBASREST(s[612]);
initOVTRATE(s[613]);
initOVTREST(s[614]);
initJBPERFP(s[615]);
initJBONUS(s[616]);
initJBONAM(s[617]);
initJBONG(s[618]);
initJBRISE(s[619]);
initTUJBPL(s[620]);
initTUIN1(s[621]);
initJBOPPS(s[622]);
initJBPEN(s[623]);
initJBPENM(s[624]);
initJBTIME(s[625]);
initJBWKHRA(s[626]);
initJBWKHRB(s[627]);
initJBWKHRC(s[628]);
initJBWKHRD(s[629]);
initJBWKHRE(s[630]);
initJBWKHRF(s[631]);
initJBWKHRG(s[632]);
initJBWKHRH(s[633]);
initPAYCK1(s[634]);
initPAYS(s[635]);
initPAYSW(s[636]);
initPAYSG(s[637]);
initJBBGD1(s[638]);
initJBBGM1(s[639]);
initJBBGY41(s[640]);
initJBBGLY1(s[641]);
initPAYLY(s[642]);
initPAYLYW(s[643]);
initPAYLYG(s[644]);
initJSBOSS(s[645]);
initJSSIZE(s[646]);
initJSHRS(s[647]);
initJSHRLK(s[648]);
initJSTIME(s[649]);
initJSTYPEB(s[650]);
initJSACCS(s[651]);
initJSPART(s[652]);
initJSPRBM(s[653]);
initJSPRBY4(s[654]);
initJSPREM(s[655]);
initJSPREY4(s[656]);
initJSPRF(s[657]);
initJSPRLS(s[658]);
initJSPRTX(s[659]);
initJSPRNI(s[660]);
initJSPAYU(s[661]);
initJSPAYW_BH(s[662]);
initJSPYTX(s[663]);
initJSPYNI(s[664]);
initJSPL_BH(s[665]);
initJSTTWTB(s[666]);
initJSTTWM(s[667]);
initJSSAT1(s[668]);
initJSSAT2(s[669]);
initJSSAT4(s[670]);
initJSSAT5(s[671]);
initJSSAT(s[672]);
initJSCK1(s[673]);
initJSSAME(s[674]);
initJSBGD1(s[675]);
initJSBGM1(s[676]);
initJSBGY41(s[677]);
initJSBGLY1(s[678]);
initJBLKCHA(s[679]);
initJBXPCHA(s[680]);
initJBLKCHB(s[681]);
initJBXPCHB(s[682]);
initJBLKCHC(s[683]);
initJBXPCHC(s[684]);
initJBLKCHD(s[685]);
initJBXPCHD(s[686]);
initJBLKCHE(s[687]);
initJBXPCHE(s[688]);
initRACH12(s[689]);
initJBCHC1(s[690]);
initJBCHC2(s[691]);
initJBCHC3(s[692]);
initXPCHCF(s[693]);
initXPCHC(s[694]);
initHUXPCH(s[695]);
initHUNURS(s[696]);
initJULK1(s[697]);
initJULK4(s[698]);
initJULKA(s[699]);
initJULKB(s[700]);
initJULKC(s[701]);
initJULKD(s[702]);
initJULKE(s[703]);
initJULKJB(s[704]);
initJUBGN(s[705]);
initJUSPEC(s[706]);
initJUHRSX(s[707]);
initJUPAYX(s[708]);
initJUPAYL(s[709]);
initJUHRSL(s[710]);
initEPROSH(s[711]);
initEAAGE(s[712]);
initJBUB(s[713]);
initJBUBY(s[714]);
initJ2HAS(s[715]);
initJ2SEMP(s[716]);
initJ2HRS(s[717]);
initJ2PAY_DV(s[718]);
initIVEA(s[719]);
initIVEB(s[720]);
initIVEC(s[721]);
initIVED(s[722]);
initIVEE(s[723]);
initCJSCK1(s[724]);
initCJSBGD(s[725]);
initCJSBGM(s[726]);
initCJSBGY4(s[727]);
initCJSBLY(s[728]);
initCJSCK2(s[729]);
initCJSCK3(s[730]);
initCJSSTLY(s[731]);
initCJSED(s[732]);
initCJSEM(s[733]);
initCJSEY4(s[734]);
initCJSCJS(s[735]);
initCJSCK4(s[736]);
initJHSTPY(s[737]);
initJBHAD(s[738]);
initJLENDY(s[739]);
initJLSIC92(s[740]);
initJLSEMP(s[741]);
initJLBOSS(s[742]);
initJLMNGR(s[743]);
initJLSIZE(s[744]);
initIVJA(s[745]);
initIVJB(s[746]);
initIVJC(s[747]);
initIVJD(s[748]);
initIVJE(s[749]);
initPV0H(s[750]);
initPV0M(s[751]);
initOPPOLA(s[752]);
initOPPOLB(s[753]);
initOPPOLC(s[754]);
initOPPOLD(s[755]);
initVOTE1(s[756]);
initVOTE2(s[757]);
initVOTE3_BH(s[758]);
initVOTE4_BH(s[759]);
initVOTE5(s[760]);
initVOTE7(s[761]);
initVOTE8_BH(s[762]);
initVOTE6(s[763]);
initOPDEV1(s[764]);
initOPDEV2(s[765]);
initOPDVNI1(s[766]);
initOPDVNI2(s[767]);
initOPNISEC(s[768]);
initOPEUR1(s[769]);
initOPEUR2(s[770]);
initOPEUR3(s[771]);
initLACTA(s[772]);
initLACTB(s[773]);
initLACTC(s[774]);
initLACTD(s[775]);
initLACTE(s[776]);
initLACTF(s[777]);
initLACTH(s[778]);
initLACTI(s[779]);
initLACTJ(s[780]);
initLACTK(s[781]);
initLACTL(s[782]);
initOPRLG2(s[783]);
initFRNA(s[784]);
initFRNB(s[785]);
initFRNC(s[786]);
initLVMA(s[787]);
initMAAGE(s[788]);
initLVPA(s[789]);
initPAAGE(s[790]);
initLVCH(s[791]);
initNLVCH(s[792]);
initLVSIB(s[793]);
initNLVSIB(s[794]);
initLVGCH(s[795]);
initNLVGCH(s[796]);
initLVGPAR(s[797]);
initNLVGPA(s[798]);
initLVGGCH(s[799]);
initNLVGGCH(s[800]);
initLVGGPA(s[801]);
initNLVGGPA(s[802]);
initNOLVREL(s[803]);
initPARMAR(s[804]);
initMALONE(s[805]);
initPALONE(s[806]);
initMASEE(s[807]);
initMATEL(s[808]);
initMAMAIL(s[809]);
initMAFAR(s[810]);
initPASEE(s[811]);
initPATEL(s[812]);
initPAMAIL(s[813]);
initPAFAR(s[814]);
initCHSEE(s[815]);
initCHTEL(s[816]);
initCHMAIL(s[817]);
initCHFAR(s[818]);
initCHAID1(s[819]);
initCHAID2(s[820]);
initCHAID3(s[821]);
initCHAID4(s[822]);
initCHAID5(s[823]);
initCHAID6(s[824]);
initCHAID7(s[825]);
initCHAID8(s[826]);
initCHAID97(s[827]);
initCHAID96(s[828]);
initCAIDU1(s[829]);
initCAIDU2(s[830]);
initCAIDU3(s[831]);
initCAIDU4(s[832]);
initCAIDU5(s[833]);
initCAIDU6(s[834]);
initCAIDU7(s[835]);
initCAIDU8(s[836]);
initCAIDU97(s[837]);
initCAIDU96(s[838]);
initPAAID1(s[839]);
initPAAID2(s[840]);
initPAAID3(s[841]);
initPAAID4(s[842]);
initPAAID5(s[843]);
initPAAID6(s[844]);
initPAAID7(s[845]);
initPAAID8(s[846]);
initPAAID97(s[847]);
initPAAID96(s[848]);
initPAIDU1(s[849]);
initPAIDU2(s[850]);
initPAIDU3(s[851]);
initPAIDU4(s[852]);
initPAIDU5(s[853]);
initPAIDU6(s[854]);
initPAIDU7(s[855]);
initPAIDU8(s[856]);
initPAIDU97(s[857]);
initPAIDU96(s[858]);
initIVVA(s[859]);
initIVVB(s[860]);
initIVVC(s[861]);
initIVVD(s[862]);
initIVVE(s[863]);
initPF0H(s[864]);
initPF0M(s[865]);
initF101(s[866]);
initF102(s[867]);
initF103(s[868]);
initF104(s[869]);
initF105(s[870]);
initF106(s[871]);
initF107(s[872]);
initF116(s[873]);
initF118(s[874]);
initF119(s[875]);
initF121(s[876]);
initF122(s[877]);
initF125(s[878]);
initF126(s[879]);
initF127(s[880]);
initF128(s[881]);
initF132(s[882]);
initF135(s[883]);
initF136(s[884]);
initF137(s[885]);
initF138(s[886]);
initF139(s[887]);
initF140(s[888]);
initF141(s[889]);
initF142(s[890]);
initF143(s[891]);
initF151(s[892]);
initF152(s[893]);
initF153(s[894]);
initF154(s[895]);
initF155(s[896]);
initF156(s[897]);
initF157(s[898]);
initF158(s[899]);
initF159(s[900]);
initRSRPEN(s[901]);
initRPENCR(s[902]);
initRDSBEN(s[903]);
initRDSBN16(s[904]);
initRDSBN18(s[905]);
initRDSBN19(s[906]);
initRDSBN21(s[907]);
initRDSBN22(s[908]);
initRDSBN25(s[909]);
initRDSBN26(s[910]);
initRDSBN27(s[911]);
initRDSBN28(s[912]);
initRIS(s[913]);
initRJSA(s[914]);
initNISJSA(s[915]);
initMACH18(s[916]);
initRCHBEN(s[917]);
initRHBEN(s[918]);
initNFHS1(s[919]);
initNFHS2(s[920]);
initNFHS3(s[921]);
initNFHS4(s[922]);
initNFHS5(s[923]);
initNFHS6(s[924]);
initNFHS7(s[925]);
initNFHS8(s[926]);
initNFHS9(s[927]);
initNFHS10(s[928]);
initNFHS11(s[929]);
initNFHS12(s[930]);
initNFH1_BH(s[931]);
initNFH2_BH(s[932]);
initNFH3_BH(s[933]);
initNFH4_BH(s[934]);
initNFH5_BH(s[935]);
initNFH6_BH(s[936]);
initNFH7_BH(s[937]);
initNFH8_BH(s[938]);
initNFH9_BH(s[939]);
initNFH10_BH(s[940]);
initNFH11_BH(s[941]);
initNFH12_BH(s[942]);
initNF1(s[943]);
initNIPENS(s[944]);
initNISERPS(s[945]);
initFINNOW(s[946]);
initFISITC(s[947]);
initFISITY(s[948]);
initFISITX(s[949]);
initFIYRDIA(s[950]);
initFIYRDB1(s[951]);
initFIYRDB2(s[952]);
initFIYRDB3(s[953]);
initFIYRDB4(s[954]);
initFIYRDB5(s[955]);
initFIYRDB6(s[956]);
initSAVE(s[957]);
initSAVED(s[958]);
initSAVEY1(s[959]);
initSAVEY2(s[960]);
initSAVREG(s[961]);
initSAVLT(s[962]);
initPPPEN(s[963]);
initPCK1(s[964]);
initPENVRF(s[965]);
initPCK2(s[966]);
initPENB4(s[967]);
initPENB4Y4(s[968]);
initPENB4V(s[969]);
initPENB4W(s[970]);
initPENYR4(s[971]);
initPENADD(s[972]);
initPENADV(s[973]);
initPENADW(s[974]);
initPENCK1(s[975]);
initPENMEX(s[976]);
initRF2CK(s[977]);
initPPPEX(s[978]);
initPPPEXM(s[979]);
initSTAKEH(s[980]);
initSPPEN(s[981]);
initPENCK2(s[982]);
initYNOPEN1(s[983]);
initYNOPEN2(s[984]);
initRTFNDA(s[985]);
initRTFNDB(s[986]);
initRTFNDC(s[987]);
initRTFNDD(s[988]);
initRTFNDE(s[989]);
initRTFNDF(s[990]);
initRTFNDG(s[991]);
initRTFNDH(s[992]);
initRTFNDI(s[993]);
initRTFNDJ(s[994]);
initRTFNDK(s[995]);
initRTFNDL(s[996]);
initRTFNDM(s[997]);
initRTFNDN(s[998]);
initRTFNDO(s[999]);
initRTFNDP(s[1000]);
initRF6CK(s[1001]);
initRETEXP(s[1002]);
initRETAMT(s[1003]);
initRETSUF(s[1004]);
initWINDF(s[1005]);
initWINDFA(s[1006]);
initWINDFAY(s[1007]);
initWINDFB(s[1008]);
initWINDFBY(s[1009]);
initWINDFC(s[1010]);
initWINDFCY(s[1011]);
initWINDFD(s[1012]);
initWINDFDY(s[1013]);
initWINDFF(s[1014]);
initWINDFFY(s[1015]);
initWINDFG(s[1016]);
initWINDFGY(s[1017]);
initWINDFH(s[1018]);
initWINDFHY(s[1019]);
initXPMEAL(s[1020]);
initXPLEIS(s[1021]);
initFTEXHH(s[1022]);
initFTEXA(s[1023]);
initFTEXA1(s[1024]);
initFTEXA2(s[1025]);
initFTEXA3(s[1026]);
initFTEXA4(s[1027]);
initFTEXA5(s[1028]);
initFTEXA6(s[1029]);
initFTEXAV(s[1030]);
initFTEXAW(s[1031]);
initFTEXB(s[1032]);
initFTEXB1(s[1033]);
initFTEXB2(s[1034]);
initFTEXB3(s[1035]);
initFTEXB4(s[1036]);
initFTEXB5(s[1037]);
initFTEXB6(s[1038]);
initFTEXBV(s[1039]);
initFTEXBW(s[1040]);
initFTEXC(s[1041]);
initFTEXC1(s[1042]);
initFTEXC2(s[1043]);
initFTEXC3(s[1044]);
initFTEXC4(s[1045]);
initFTEXC5(s[1046]);
initFTEXC6(s[1047]);
initFTEXCV(s[1048]);
initFTEXCW(s[1049]);
initHUBUYS_BH(s[1050]);
initHUFRYS_BH(s[1051]);
initHUMOPS_BH(s[1052]);
initHUIRON_BH(s[1053]);
initHHCH12(s[1054]);
initHUSITS(s[1055]);
initHOWLNG(s[1056]);
initCARUSE(s[1057]);
initMOBUSE(s[1058]);
initAGEADV(s[1059]);
initAGEAD1(s[1060]);
initAGEAD2(s[1061]);
initAGEAD3(s[1062]);
initAGEAD4(s[1063]);
initIVFA(s[1064]);
initIVFB(s[1065]);
initIVFC(s[1066]);
initIVFD(s[1067]);
initIVFE(s[1068]);
initIENDDATHH(s[1069]);
initIENDDATHM(s[1070]);
initIVSC(s[1071]);
initIVPRSNT(s[1072]);
initIV2(s[1073]);
initIV4(s[1074]);
initIV5(s[1075]);
initIV5AA(s[1076]);
initIV5AB(s[1077]);
initIV5AC(s[1078]);
initIV6A(s[1079]);
initIV6B(s[1080]);
initIV6C(s[1081]);
initIV6D(s[1082]);
initIV6E(s[1083]);
initIV6F(s[1084]);
initIV7(s[1085]);
initIV9(s[1086]);
initIV10NO(s[1087]);
initIV10A(s[1088]);
initIV10B(s[1089]);
initIV10C(s[1090]);
initIV10D(s[1091]);
initIV10E(s[1092]);
initIV10F(s[1093]);
initIV10G(s[1094]);
initIV10H(s[1095]);
initIV10I(s[1096]);
initIV10J(s[1097]);
initIV10K(s[1098]);
initIV10L(s[1099]);
initSCGHQA(s[1100]);
initSCGHQB(s[1101]);
initSCGHQC(s[1102]);
initSCGHQD(s[1103]);
initSCGHQE(s[1104]);
initSCGHQF(s[1105]);
initSCGHQG(s[1106]);
initSCGHQH(s[1107]);
initSCGHQI(s[1108]);
initSCGHQJ(s[1109]);
initSCGHQK(s[1110]);
initSCGHQL(s[1111]);
initOPFAMO(s[1112]);
initOPFAML(s[1113]);
initOPFAMP(s[1114]);
initOPFAMQ(s[1115]);
initOPFAMK(s[1116]);
initOPFAMR(s[1117]);
initLFSAT1(s[1118]);
initLFSAT2(s[1119]);
initLFSAT3(s[1120]);
initLFSAT4(s[1121]);
initLFSAT5(s[1122]);
initLFSAT6(s[1123]);
initLFSAT7(s[1124]);
initLFSAT8(s[1125]);
initLFSATO(s[1126]);
initLFSATL(s[1127]);
initSATINV(s[1128]);
initQLFA(s[1129]);
initQLFB(s[1130]);
initQLFC(s[1131]);
initQLFD(s[1132]);
initQLFE(s[1133]);
initQLFF(s[1134]);
initQLFG(s[1135]);
initQLFH(s[1136]);
initQLFI(s[1137]);
initQLFJ(s[1138]);
initQLFK(s[1139]);
initQLFL(s[1140]);
initQLFM(s[1141]);
initQLFN(s[1142]);
initQLFO(s[1143]);
initQLFP(s[1144]);
initQLFQ(s[1145]);
initQLFR(s[1146]);
initQLFS(s[1147]);
initNETSX1(s[1148]);
initNETSX2(s[1149]);
initNETSX3(s[1150]);
initNET1WR(s[1151]);
initNET2WR(s[1152]);
initNET3WR(s[1153]);
initNET1RL(s[1154]);
initNET2RL(s[1155]);
initNET3RL(s[1156]);
initNET1AG(s[1157]);
initNET2AG(s[1158]);
initNET3AG(s[1159]);
initNET1KN(s[1160]);
initNET2KN(s[1161]);
initNET3KN(s[1162]);
initNET1PH(s[1163]);
initNET2PH(s[1164]);
initNET3PH(s[1165]);
initNET1LV(s[1166]);
initNET2LV(s[1167]);
initNET3LV(s[1168]);
initNET1JB(s[1169]);
initNET2JB(s[1170]);
initNET3JB(s[1171]);
initNET1ET(s[1172]);
initNET2ET(s[1173]);
initNET3ET(s[1174]);
initPRRS2I(s[1175]);
initPRIPN(s[1176]);
initPRWHY(s[1177]);
initPPLEVR(s[1178]);
initPRESBGM(s[1179]);
initPRESBY4(s[1180]);
initPRESLY(s[1181]);
initPRFEHQ(s[1182]);
initPRSEHQ(s[1183]);
initPRJBFT(s[1184]);
initPRJBBY4(s[1185]);
initPRJBLY(s[1186]);
initPREARN_BH(s[1187]);
initPRF101(s[1188]);
initPRF102(s[1189]);
initPRF116(s[1190]);
initPRF131(s[1191]);
initPRF135(s[1192]);
initPRF137(s[1193]);
initPRF139(s[1194]);
initPRF125(s[1195]);
initPRF141(s[1196]);
initPRF143(s[1197]);
initPRF107(s[1198]);
initPRFIRN(s[1199]);
initPRFITB_BH(s[1200]);
initIVPA(s[1201]);
initIVPB(s[1202]);
initIVPC(s[1203]);
initIVPD(s[1204]);
initIVPE(s[1205]);
initTHRPOP(s[1206]);
initTHHRPW(s[1207]);
initTELQLY(s[1208]);
initTLHQLY(s[1209]);
initTELQAL(s[1210]);
initTELHTQ(s[1211]);
initTRPEN(s[1212]);
initTRBEN1(s[1213]);
initTRBEN2(s[1214]);
initTROPAY(s[1215]);
initPIDP(s[1216]);
initIVIOLW(s[1217]);
initHHMEM(s[1218]);
initNEWHY(s[1219]);
initJNMNTH(s[1220]);
initJNYEAR(s[1221]);
initIVFIO(s[1222]);
initIODC(s[1223]);
initMEMORIG_BH(s[1224]);
initHGR2R(s[1225]);
initHGSEX(s[1226]);
initBIRTHY(s[1227]);
initMASTAT(s[1228]);
initPPNO(s[1229]);
initHGEMP(s[1230]);
initHGBIOF(s[1231]);
initHGBIOM(s[1232]);
initHGRA(s[1233]);
initAGE_DV(s[1234]);
initAGE12(s[1235]);
initBUTYPE(s[1236]);
initBUNO(s[1237]);
initNCHILD_DV(s[1238]);
initHOH(s[1239]);
initRACH16_DV(s[1240]);
initSAMPST_BH(s[1241]);
initMOVEST(s[1242]);
initREGION(s[1243]);
initHHSIZE(s[1244]);
initHHTYPE(s[1245]);
initTENURE_DV(s[1246]);
initQFEDHI(s[1247]);
initQFVOC(s[1248]);
initQFACHI(s[1249]);
initJBFT_DV(s[1250]);
initPAYG_DV(s[1251]);
initPAYN_DV(s[1252]);
initPAYGU_DV(s[1253]);
initPAYNU_DV(s[1254]);
initPAYGTY(s[1255]);
initPAYGLY(s[1256]);
initPAYNTY(s[1257]);
initPAYNLY(s[1258]);
initJSPROF(s[1259]);
initJSLOSS(s[1260]);
initJSPAYG(s[1261]);
initCJSTEN(s[1262]);
initCJSWK9(s[1263]);
initJLID(s[1264]);
initJLYID(s[1265]);
initJTYID(s[1266]);
initJBSEG_DV(s[1267]);
initJBGOLD(s[1268]);
initJBRGSC_DV(s[1269]);
initJBCSSM(s[1270]);
initJBCSSF(s[1271]);
initJBHGS(s[1272]);
initJBSEC_BH(s[1273]);
initNJBWKS(s[1274]);
initNJUWKS(s[1275]);
initNJIWKS(s[1276]);
initNJBNEW(s[1277]);
initNJBSP(s[1278]);
initNJUSP(s[1279]);
initNJISP(s[1280]);
initJBSTATL(s[1281]);
initJBSTATT(s[1282]);
initJLSEG_DV(s[1283]);
initJLGOLD(s[1284]);
initJLRGSC_DV(s[1285]);
initJLCSSM(s[1286]);
initJLCSSF(s[1287]);
initJLHGS(s[1288]);
initJLSEC(s[1289]);
initVOTE(s[1290]);
initFIYRDIC(s[1291]);
initFIMNP(s[1292]);
initFIMNB(s[1293]);
initFIMNI(s[1294]);
initFIMNT(s[1295]);
initFIMNLABGRS_DV(s[1296]);
initFIMNNL(s[1297]);
initFIMNGRS_DV(s[1298]);
initFIYRL(s[1299]);
initFIYRNL(s[1300]);
initFIYRP(s[1301]);
initFIYRB(s[1302]);
initFIYRT(s[1303]);
initFIYRI(s[1304]);
initFIYR(s[1305]);
initFIHHMN(s[1306]);
initSCGHQ1_DV(s[1307]);
initSCGHQ2_DV(s[1308]);
initSPJB(s[1309]);
initSPJBHR(s[1310]);
initSPJBOT(s[1311]);
initSPPAYG(s[1312]);
initSPJBYR(s[1313]);
initLRWGHT(s[1314]);
initLEWGHT(s[1315]);
initXRWGHT(s[1316]);
initXEWGHT(s[1317]);
initJ2PAY_IF(s[1318]);
initFIYRDII(s[1319]);
initPREARNI(s[1320]);
initPRFITBI(s[1321]);
initPAYGU_IF(s[1322]);
initPAYNU_IF(s[1323]);
initPAYGTI(s[1324]);
initPAYGLI(s[1325]);
initPAYNTI(s[1326]);
initPAYNLI(s[1327]);
initJSPROFI(s[1328]);
initJSPAYGI(s[1329]);
initFIMNPI(s[1330]);
initFIMNBI(s[1331]);
initFIMNII(s[1332]);
initFIMNTI(s[1333]);
initFIMNNLI(s[1334]);
initFIMNLI(s[1335]);
initFIMNTHI(s[1336]);
initFIYRLI(s[1337]);
initFIYRNLI(s[1338]);
initFIYRPI(s[1339]);
initFIYRBI(s[1340]);
initFIYRTI(s[1341]);
initFIYRII(s[1342]);
initFIYEARI(s[1343]);
initSPPAYGI(s[1344]);
initFIHHMNI(s[1345]);
initMRJEND(s[1346]);
initMRJSOC(s[1347]);
initMRJSIC(s[1348]);
initMRJSIC9(s[1349]);
initMRJSEMP(s[1350]);
initMRJBOSS(s[1351]);
initMRJMNGR(s[1352]);
initMRJSIZE(s[1353]);
initMRJSEG(s[1354]);
initMRJGOLD(s[1355]);
initMRJRGSC(s[1356]);
initMRJCSSM(s[1357]);
initMRJCSSF(s[1358]);
initMRJHGS(s[1359]);
initMRJSEC(s[1360]);
initPASEG(s[1361]);
initPAGOLD(s[1362]);
initPARGSC(s[1363]);
initPACSSM(s[1364]);
initPACSSF(s[1365]);
initPAHGS(s[1366]);
initPASEC(s[1367]);
initMASEG(s[1368]);
initMAGOLD(s[1369]);
initMARGSC(s[1370]);
initMACSSM(s[1371]);
initMACSSF(s[1372]);
initMAHGS(s[1373]);
initMASEC(s[1374]);
initJ1SEG(s[1375]);
initJ1GOLD(s[1376]);
initJ1RGSC(s[1377]);
initJ1CSSM(s[1378]);
initJ1CSSF(s[1379]);
initJ1HGS(s[1380]);
initJ1SEC(s[1381]);
initFIMNSEL(s[1382]);
initXRWTUK1(s[1383]);
initXEWTUK1(s[1384]);
initXRWTUK2(s[1385]);
initXEWTUK2(s[1386]);
initLRWTSW1(s[1387]);
initLEWTSW1(s[1388]);
initLRWTSW2(s[1389]);
initLEWTSW2(s[1390]);
initLRWTUK1(s[1391]);
initLEWTUK1(s[1392]);
initLRWTUK2(s[1393]);
initLEWTUK2(s[1394]);
initSPPID_BH(s[1395]);
initFNPID_BH(s[1396]);
initMNPID_BH(s[1397]);
initJBBGD(s[1398]);
initJBBGM(s[1399]);
initJBBGY(s[1400]);
initJBBGLY(s[1401]);
initJSBGY4(s[1402]);
initJSBGLY(s[1403]);
initDISTMOV(s[1404]);
initGOR_DV(s[1405]);
initISCED(s[1406]);
initCASMIN(s[1407]);
initMRJISCO88_CC(s[1408]);
initJBISCO_CC(s[1409]);
initJLISCO_CC(s[1410]);
initJ1ISCO_CC(s[1411]);
initMAISCO_CC(s[1412]);
initPAISCO_CC(s[1413]);
initMRJISCO_CC(s[1414]);
initPLBORNC_CC(s[1415]);
initJ2PAY_BH(s[1416]);
initJLNSSEC_DV(s[1417]);
initMANSSEC_DV(s[1418]);
initPANSSEC_DV(s[1419]);
initMRJNSSEC_DV(s[1420]);
initJ1NSSEC_DV(s[1421]);
initJBNSSEC_DV(s[1422]);
initJBNSSEC8_DV(s[1423]);
initJLNSSEC8_DV(s[1424]);
initMANSSEC8_DV(s[1425]);
initPANSSEC8_DV(s[1426]);
initMRJNSSEC8_DV(s[1427]);
initJ1NSSEC8_DV(s[1428]);
initNETPH_1(s[1429]);
initNETSX_1(s[1430]);
initNETWR_1(s[1431]);
initNETRL_1(s[1432]);
initNETAG_1(s[1433]);
initNETKN_1(s[1434]);
initNETPH_2(s[1435]);
initNETSX_2(s[1436]);
initNETWR_2(s[1437]);
initNETRL_2(s[1438]);
initNETAG_2(s[1439]);
initNETKN_2(s[1440]);
initNETPH_3(s[1441]);
initNETSX_3(s[1442]);
initNETWR_3(s[1443]);
initNETRL_3(s[1444]);
initNETAG_3(s[1445]);
initNETKN_3(s[1446]);
initJULK4X1(s[1447]);
initJULK4X2(s[1448]);
initJULK4X4(s[1449]);
initJULK4X5(s[1450]);
initJULK4X6(s[1451]);
initRTFND1(s[1452]);
initRTFND2(s[1453]);
initRTFND3(s[1454]);
initRTFND4(s[1455]);
initRTFND5(s[1456]);
initRTFND6(s[1457]);
initRTFND7(s[1458]);
initRTFND8(s[1459]);
initRTFND9(s[1460]);
initRTFND10(s[1461]);
initRTFND96(s[1462]);
initHHORIG(s[1463]);
initMEMORIG(s[1464]);
initSAMPST(s[1465]);
initJULK4WK(s[1466]);
initPJULK4WK(s[1467]);
initMAJU(s[1468]);
initPAJU(s[1469]);
initEXTRATE_BH(s[1470]);
initEXTNSA(s[1471]);
initBASRATE_BH(s[1472]);
initBASREST_BH(s[1473]);
initBASNSA(s[1474]);
initOVTRATE_BH(s[1475]);
initOVTNSA(s[1476]);
initJSTTWT(s[1477]);
initREMAIL_CODE(s[1478]);
initMLSTAT(s[1479]);
initEDASP(s[1480]);
initJBSECT(s[1481]);
initJSPAYW(s[1482]);
initPLBORNC(s[1483]);
initVOTE3(s[1484]);
initVOTE4(s[1485]);
initVOTE8(s[1486]);
initPAYTYP(s[1487]);
initHUBUYS(s[1488]);
initHUFRYS(s[1489]);
initHUIRON(s[1490]);
initHUMOPS(s[1491]);
initJBPL(s[1492]);
initJBTERM2(s[1493]);
initJSPL(s[1494]);
initAIDHRS(s[1495]);
initJBSOC00_CC(s[1496]);
initMASOC90_CC(s[1497]);
initPASOC90_CC(s[1498]);
initJBSOC90_CC(s[1499]);
initJLSOC90_CC(s[1500]);
initJ1SOC90_CC(s[1501]);
initJ2SOC90_CC(s[1502]);
initJUSOC90_CC(s[1503]);
initYASOC90_CC(s[1504]);
initJBSOC90LY_CC(s[1505]);
initSPSOC90_CC(s[1506]);
initJBISCO88_CC(s[1507]);
initJLISCO88_CC(s[1508]);
initJ1ISCO88_CC(s[1509]);
initMAISCO88_CC(s[1510]);
initPAISCO88_CC(s[1511]);
initJ2SOC00_CC(s[1512]);
initJ1SOC00_CC(s[1513]);
initJLSOC00_CC(s[1514]);
initMASOC00_CC(s[1515]);
initPASOC00_CC(s[1516]);
initJUSOC00_CC(s[1517]);
initYASOC00_CC(s[1518]);
initUKCITZN_DV_BH(s[1519]);
initWKTIME(s[1520]);
initHIQUAL_DV(s[1521]);
}
}
