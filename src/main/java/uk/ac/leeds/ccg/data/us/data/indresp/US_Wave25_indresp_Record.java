/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.data.us.data.indresp;
public class US_Wave25_indresp_Record extends US_indresp_Record {
protected byte ADCTS;
protected byte ADDPAYA;
protected byte ADDPAYB;
protected byte ADLA;
protected byte ADLAD;
protected byte ADLB;
protected byte ADLBD;
protected byte ADLC;
protected byte ADLCD;
protected byte ADLD;
protected byte ADLDD;
protected byte ADLE;
protected byte ADLED;
protected byte ADLF;
protected byte ADLFD;
protected byte ADLG;
protected byte ADLGD;
protected byte ADLH;
protected byte ADLHD;
protected byte ADLI;
protected byte ADLID;
protected byte ADLJ;
protected byte ADLJD;
protected byte ADLK;
protected byte ADLKD;
protected byte ADLL;
protected byte ADLLD;
protected byte ADLM;
protected byte ADLMD;
protected byte ADLN;
protected byte ADLND;
protected byte AEDROF1;
protected byte AEDROF2;
protected byte AEDROF3;
protected double AEPUDA1;
protected byte AEPUDA2;
protected byte AEPUDA3;
protected byte AEPUWK1;
protected byte AEPUWK2;
protected byte AEPUWK3;
protected byte AGE2UK;
protected byte AGE2UKC;
protected byte AGEGR10_DV;
protected byte AGEGR13_DV;
protected byte AGEGR5_DV;
protected byte AGERET;
protected short AGE_DV;
protected byte AHVWELL;
protected byte AIDEFT;
protected short AIDHU1;
protected short AIDHU2;
protected byte AIDHUA1;
protected byte AIDHUA10;
protected byte AIDHUA11;
protected byte AIDHUA12;
protected byte AIDHUA13;
protected byte AIDHUA14;
protected byte AIDHUA15;
protected byte AIDHUA16;
protected byte AIDHUA2;
protected byte AIDHUA3;
protected byte AIDHUA4;
protected byte AIDHUA5;
protected byte AIDHUA6;
protected byte AIDHUA7;
protected byte AIDHUA8;
protected byte AIDHUA9;
protected byte ALLCOSTA;
protected byte ALLCOSTB;
protected byte ANYPAYA;
protected byte ANYPAYB;
protected byte APVOCIMP;
protected byte AREA;
protected byte ARGF;
protected byte ARGM;
protected byte ATTACKED1;
protected byte ATTACKED10;
protected byte ATTACKED11;
protected byte ATTACKED2;
protected byte ATTACKED3;
protected byte ATTACKED4;
protected byte ATTACKED5;
protected byte ATTACKED6;
protected byte ATTACKED7;
protected byte ATTACKED8;
protected byte ATTACKED9;
protected byte ATTACKED96;
protected byte ATTACKED97;
protected byte ATTACKEDO_CODE;
protected byte ATTACKED_DV;
protected byte AUDITC1;
protected byte AUDITC2;
protected byte AUDITC3;
protected byte AUDITC4;
protected byte AUDITC5;
protected byte AVOIDANCE1;
protected byte AVOIDANCE10;
protected byte AVOIDANCE11;
protected byte AVOIDANCE2;
protected byte AVOIDANCE3;
protected byte AVOIDANCE4;
protected byte AVOIDANCE5;
protected byte AVOIDANCE6;
protected byte AVOIDANCE7;
protected byte AVOIDANCE8;
protected byte AVOIDANCE9;
protected byte AVOIDANCE96;
protected byte AVOIDANCE97;
protected byte AVOIDANCEO_CODE;
protected byte AVOIDED_DV;
protected byte BASNSET;
protected double BASRATE;
protected byte BASREST;
protected byte BENBASE1;
protected byte BENBASE2;
protected byte BENBASE3;
protected byte BENBASE4;
protected byte BENBASE96;
protected byte BENCTC;
protected byte BENDIS1;
protected byte BENDIS10;
protected byte BENDIS12;
protected byte BENDIS2;
protected byte BENDIS3;
protected byte BENDIS4;
protected byte BENDIS5;
protected byte BENDIS7;
protected byte BENDIS8;
protected byte BENDIS96;
protected byte BENDIS97;
protected byte BENESA;
protected byte BENLINK;
protected byte BENPEN1;
protected byte BENPEN2;
protected byte BENPEN3;
protected byte BENPEN4;
protected byte BENPEN5;
protected byte BENPEN6;
protected byte BENPEN7;
protected byte BENPEN8;
protected byte BENPEN96;
protected byte BENSTA2;
protected byte BENSTA3;
protected byte BENSTA4;
protected byte BENSTA5;
protected byte BENSTA6;
protected byte BENSTA7;
protected byte BENSTA96;
protected byte BENSTA97;
protected short BIRTHY;
protected byte BREAKFST;
protected byte BUNO_DV;
protected byte CAIDU1;
protected byte CAIDU2;
protected byte CAIDU3;
protected byte CAIDU4;
protected byte CAIDU5;
protected byte CAIDU6;
protected byte CAIDU7;
protected byte CAIDU8;
protected byte CAIDU96;
protected byte CAIDU97;
protected byte CASCH;
protected int CASIINTNO;
protected byte CCARE;
protected byte CCWORK;
protected short CH1BY4;
protected byte CHAID1;
protected byte CHAID2;
protected byte CHAID3;
protected byte CHAID4;
protected byte CHAID5;
protected byte CHAID6;
protected byte CHAID7;
protected byte CHAID8;
protected byte CHAID96;
protected byte CHAID97;
protected byte CHCON;
protected byte CHFAR;
protected byte CHILDPNO;
protected byte CHKRESP1;
protected byte CHKRESP2;
protected byte CHKRESP3;
protected byte CHKRESP4;
protected boolean CHKRESPWEB;
protected byte CHKRESPWEB1;
protected byte CHKRESPWEB2;
protected byte CHKRESPWEB3;
protected byte CHKRESPWEB4;
protected byte CHKWEBDOBD;
protected byte CHKWEBDOBM;
protected short CHKWEBDOBY;
protected byte CHKWEBSEX;
protected byte CHSEE;
protected byte CITZN1;
protected byte CITZN2;
protected byte CITZN3;
protected byte CJBATT;
protected byte CJOB;
protected byte CMCOKIDNO1;
protected byte CMCOKIDNO10;
protected byte CMCOKIDNO11;
protected byte CMCOKIDNO12;
protected byte CMCOKIDNO13;
protected byte CMCOKIDNO14;
protected byte CMCOKIDNO15;
protected byte CMCOKIDNO16;
protected byte CMCOKIDNO2;
protected byte CMCOKIDNO3;
protected byte CMCOKIDNO4;
protected byte CMCOKIDNO5;
protected byte CMCOKIDNO6;
protected byte CMCOKIDNO7;
protected byte CMCOKIDNO8;
protected byte CMCOKIDNO9;
protected byte CMCORD;
protected byte CMCORDALL;
protected double CMCORDAM;
protected byte CMCORDPER;
protected short CMCORDRCAM;
protected byte CMCORDRCPR;
protected byte CMCORDREC;
protected byte CMCORDTM;
protected byte CMCSAACT;
protected byte CMCSAALL;
protected short CMCSAAM;
protected byte CMCSANIL1;
protected byte CMCSANIL2;
protected byte CMCSANIL3;
protected byte CMCSANIL4;
protected byte CMCSANIL5;
protected byte CMCSANIL6;
protected byte CMCSANIL7;
protected byte CMCSANIL8;
protected byte CMCSANIL9;
protected byte CMCSANIL97;
protected byte CMCSAPER;
protected byte CMCSAPR;
protected byte CMFBAOP;
protected byte CMFLAG01;
protected byte CMFLAG02;
protected byte CMFLAG03;
protected byte CMFLAG04;
protected byte CMFLAG05;
protected byte CMFLAG06;
protected byte CMFLAG07;
protected boolean CMFLAG08;
protected boolean CMFLAG09;
protected byte CMFLAG10;
protected boolean CMFLAG11;
protected boolean CMFLAG12;
protected boolean CMFLAG13;
protected boolean CMFLAG14;
protected boolean CMFLAG15;
protected boolean CMFLAG16;
protected byte CMKNDEVR1;
protected byte CMKNDEVR2;
protected byte CMKNDEVR3;
protected byte CMKNDEVR4;
protected byte CMKNDEVR96;
protected byte CMKNDEVR97;
protected byte CMLSTAT1;
protected byte CMLSTAT2;
protected byte CMLSTAT3;
protected byte CMLSTAT4;
protected byte CMNIL1;
protected byte CMNIL10;
protected byte CMNIL11;
protected byte CMNIL12;
protected byte CMNIL4;
protected byte CMNIL5;
protected byte CMNIL6;
protected byte CMNIL7;
protected byte CMNIL8;
protected byte CMNIL9;
protected byte CMNIL97;
protected byte CMOTHPAY1;
protected byte CMOTHPAY10;
protected byte CMOTHPAY11;
protected byte CMOTHPAY2;
protected byte CMOTHPAY3;
protected byte CMOTHPAY4;
protected byte CMOTHPAY5;
protected byte CMOTHPAY6;
protected byte CMOTHPAY7;
protected byte CMOTHPAY8;
protected byte CMOTHPAY9;
protected byte CMOTHPAY96;
protected byte CMOTHPAY97;
protected byte CMROUTE01;
protected byte CMROUTE02;
protected byte CMROUTE03;
protected byte CMROUTE04;
protected byte CMROUTE05;
protected byte CMROUTE06;
protected byte CMROUTE07;
protected byte CMROUTE08;
protected byte CMROUTE09;
protected byte CMROUTE10;
protected byte CMROUTE11;
protected byte CMROUTE12;
protected boolean CMROUTE13;
protected boolean CMROUTE14;
protected boolean CMROUTE15;
protected boolean CMROUTE16;
protected byte CMSAMEA;
protected byte CMSAMEB;
protected byte CMSAMEC;
protected byte CMVOL;
protected byte CMVOLALL;
protected double CMVOLAM;
protected byte CMVOLFIN;
protected byte CMVOLKIDNO1;
protected byte CMVOLKIDNO10;
protected byte CMVOLKIDNO11;
protected byte CMVOLKIDNO12;
protected byte CMVOLKIDNO13;
protected byte CMVOLKIDNO14;
protected byte CMVOLKIDNO15;
protected byte CMVOLKIDNO16;
protected byte CMVOLKIDNO2;
protected byte CMVOLKIDNO3;
protected byte CMVOLKIDNO4;
protected byte CMVOLKIDNO5;
protected byte CMVOLKIDNO6;
protected byte CMVOLKIDNO7;
protected byte CMVOLKIDNO8;
protected byte CMVOLKIDNO9;
protected byte CMVOLPER;
protected short CMVOLRCAM;
protected byte CMVOLRCPR;
protected byte CMVOLREC;
protected byte CMVOLTM;
protected byte COH1BM;
protected short COH1BY;
protected byte COH1EM;
protected short COH1EY;
protected byte COH1MR;
protected byte COHAB;
protected byte COHABN;
protected boolean COHAB_DV;
protected byte COMWACT31;
protected byte COMWACT32;
protected byte COMWACT33;
protected byte COMWACT34;
protected byte COMWACT35;
protected byte COMWACT36;
protected byte COMWACT37;
protected byte COMWACT38;
protected byte COMWACT396;
protected byte COMWACT398;
protected byte COMWPAS31;
protected byte COMWPAS32;
protected byte COMWPAS33;
protected byte COMWPAS34;
protected byte COMWPAS35;
protected byte COMWPAS396;
protected byte COMWPAS398;
protected byte CONTFT;
protected byte COOPNXTYR;
protected byte CORDRECPER;
protected byte COUNTRY;
protected byte CSACALC;
protected double CSACALCAM;
protected byte CSAKIDNO1;
protected byte CSAKIDNO10;
protected byte CSAKIDNO11;
protected byte CSAKIDNO12;
protected byte CSAKIDNO13;
protected byte CSAKIDNO14;
protected byte CSAKIDNO15;
protected byte CSAKIDNO16;
protected byte CSAKIDNO2;
protected byte CSAKIDNO3;
protected byte CSAKIDNO4;
protected byte CSAKIDNO5;
protected byte CSAKIDNO6;
protected byte CSAKIDNO7;
protected byte CSAKIDNO8;
protected byte CSAKIDNO9;
protected byte CSAPAYTO;
protected byte CSARECPER;
protected byte CSTAT;
protected byte CTADD1_CODE;
protected byte CTADD2_CODE;
protected byte CTCNTY_CODE;
protected byte CTCONSCONF1;
protected byte CTCONSCONF2;
protected byte CTCONSCONF3;
protected byte CTCONSCONF4;
protected byte CTCONSCONF5;
protected byte CTCONSCONF6;
protected byte CTCONSCONF7;
protected byte CTCONSCONF8;
protected byte CTCONSCONF94;
protected byte CTCONSCONF95;
protected byte CTEMAIL_CODE;
protected byte CTPCODE_CODE;
protected byte CTREL;
protected byte CTTEL1_CODE;
protected byte CTTEL2_CODE;
protected byte CTTOWN_CODE;
protected byte CUDDLEKID;
protected byte CURRJOB1;
protected byte CURRJOB2;
protected byte CURRJOB3;
protected byte CURRJOB4;
protected byte CURRJOB5;
protected byte CURRJOB6;
protected byte CURRPART1;
protected byte CURRPART2;
protected byte CURRPART3;
protected byte CURRPART4;
protected byte CURRSTAT1;
protected byte CURRSTAT2;
protected byte CURRSTAT3;
protected byte CURRSTAT4;
protected byte CURRSTAT5;
protected byte CURRSTAT6;
protected short DCDOBY;
protected byte DCSATM;
protected byte DCSEX;
protected boolean DEPCHL_DV;
protected byte DETINC1;
protected byte DETINC2;
protected byte DETINC3;
protected byte DETINC4;
protected byte DETINC5;
protected byte DETINC6;
protected byte DINNER;
protected byte DISDIF1;
protected byte DISDIF10;
protected byte DISDIF11;
protected byte DISDIF12;
protected byte DISDIF2;
protected byte DISDIF3;
protected byte DISDIF4;
protected byte DISDIF5;
protected byte DISDIF6;
protected byte DISDIF7;
protected byte DISDIF8;
protected byte DISDIF9;
protected byte DISDIF96;
protected byte DISEFFECTS1;
protected byte DISEFFECTS2;
protected byte DISEFFECTS3;
protected byte DISEFFECTS4;
protected byte DISEFFECTS5;
protected byte DISSEV1;
protected byte DISSEV10;
protected byte DISSEV11;
protected byte DISSEV12;
protected byte DISSEV2;
protected byte DISSEV3;
protected byte DISSEV4;
protected byte DISSEV5;
protected byte DISSEV6;
protected byte DISSEV7;
protected byte DISSEV8;
protected byte DISSEV9;
protected byte DIVCHK1;
protected byte DIVCHK2;
protected byte DIVCHK3;
protected byte DIVCHK4;
protected byte DIVFIN1;
protected byte DIVFIN2;
protected byte DIVFIN3;
protected byte DIVFIN4;
protected short DOBY_DV;
protected byte DONEPROXY;
protected byte DPFREQA;
protected boolean DPFREQB;
protected byte DPPAYA;
protected byte DPPAYB;
protected byte DRGMJ;
protected byte DRGOTH;
protected byte DRGSOL;
protected byte DRIVE;
protected byte DV2UK16;
protected byte DVAGE;
protected byte DVAGE2UK;
protected byte DVM1;
protected byte DVM2;
protected byte DVM3;
protected byte DVM4;
protected short DVY41;
protected short DVY42;
protected byte DVY43;
protected byte DVY44;
protected byte EATLIVU;
protected byte ECIGS;
protected byte EDASP;
protected short EDTYPE;
protected byte EDUCATION;
protected byte EMPCHK;
protected byte EMPLOY;
protected byte EMPSTENDD;
protected byte EMPSTENDM;
protected short EMPSTENDY4;
protected byte ENDMNTH1;
protected byte ENDMNTH2;
protected byte ENDMNTH3;
protected short EPROSH;
protected byte ETHN_DV;
protected byte EXSAME;
protected double EXTRATE;
protected byte EXTREST;
protected byte FAMILY;
protected byte FAMSUP;
protected byte FARKID;
protected byte FATHER;
protected byte FENOW;
protected byte FENOW_CAWI;
protected byte FF_BENTYPE01;
protected byte FF_BENTYPE02;
protected byte FF_BENTYPE03;
protected byte FF_BENTYPE04;
protected byte FF_BENTYPE05;
protected byte FF_BENTYPE06;
protected byte FF_BENTYPE07;
protected byte FF_BENTYPE08;
protected byte FF_BENTYPE09;
protected byte FF_BENTYPE10;
protected byte FF_BENTYPE11;
protected byte FF_BENTYPE12;
protected byte FF_BENTYPE13;
protected byte FF_BENTYPE14;
protected byte FF_BENTYPE15;
protected byte FF_BENTYPE16;
protected byte FF_BENTYPE17;
protected byte FF_BENTYPE18;
protected byte FF_BENTYPE19;
protected byte FF_BENTYPE20;
protected byte FF_BENTYPE21;
protected byte FF_BENTYPE22;
protected byte FF_BENTYPE23;
protected byte FF_BENTYPE24;
protected byte FF_BENTYPE25;
protected byte FF_BENTYPE26;
protected byte FF_BENTYPE27;
protected byte FF_BENTYPE28;
protected byte FF_BENTYPE29;
protected byte FF_BENTYPE30;
protected byte FF_BENTYPE31;
protected byte FF_BENTYPE32;
protected byte FF_BENTYPE33;
protected byte FF_BENTYPE34;
protected byte FF_BENTYPE35;
protected byte FF_BENTYPE36;
protected byte FF_BENTYPE37;
protected byte FF_BENTYPE38;
protected byte FF_BENTYPE39;
protected byte FF_BENTYPE40;
protected byte FF_BENTYPE41;
protected byte FF_EMPLW;
protected byte FF_IVINTLANG;
protected byte FF_IVLOLW;
protected byte FF_JBMNGR;
protected byte FF_JBSEMP;
protected byte FF_JBSIZE;
protected byte FF_JBSTAT;
protected byte FF_OPRLG;
protected byte FF_OPRLG0;
protected byte FF_OPRLG0NI;
protected byte FF_UKBORN;
protected short FF_YR2UK4;
protected double FIBENOTHR_DV;
protected double FIBENOTHR_IF;
protected byte FIBENOTHR_TC;
protected double FIMNGRS_IF;
protected byte FIMNGRS_TC;
protected double FIMNINVNET_DV;
protected double FIMNLABGRS_IF;
protected byte FIMNLABGRS_TC;
protected double FIMNLABNET_DV;
protected byte FIMNLABNET_TC;
protected double FIMNMISC_DV;
protected double FIMNNET_DV;
protected double FIMNPEN_DV;
protected double FIMNPRBEN_DV;
protected double FIMNSBEN_DV;
protected byte FINFUT;
protected byte FIYRDB1;
protected byte FIYRDB2;
protected byte FIYRDB3;
protected byte FIYRDB4;
protected byte FIYRDB5;
protected byte FIYRDB6;
protected int FIYRDIA;
protected double FIYRINVINC_DV;
protected byte FIYRINVINC_IF;
protected byte FIYRINVINC_TC;
protected int FNPID;
protected byte FNPNO;
protected int FNSPID;
protected byte FNSPNO;
protected byte FRDRG;
protected byte FROBULLI;
protected byte FROBULLY;
protected byte FRPBULLI;
protected byte FRPBULLY;
protected byte FRUITAMT;
protected byte FT2ENDM1;
protected byte FT2ENDM2;
protected short FT2ENDY41;
protected short FT2ENDY42;
protected byte FTEDANY;
protected byte FTEDEND1;
protected byte FTEDEND2;
protected byte FTEDMOR1;
protected byte FTEDMOR2;
protected byte FTEDSTARTM1;
protected byte FTEDSTARTM2;
protected short FTEDSTARTY41;
protected short FTEDSTARTY42;
protected byte FTENDM;
protected short FTENDY4;
protected int FTEXV;
protected byte FTEXW;
protected byte FTQUALS;
protected short FUTRA;
protected short FUTRB;
protected short FUTRC;
protected short FUTRD;
protected short FUTRE;
protected short FUTRF;
protected short FUTRG;
protected short FUTRH;
protected short FUTRI;
protected short FUTRJ;
protected short FUTRK;
protected short FUTRL;
protected byte GCSE5;
protected byte GCSEENG;
protected byte GCSEMAT;
protected int GRFPID;
protected byte GRFPNO;
protected int GRMPID;
protected byte GRMPNO;
protected byte HASEMAIL;
protected byte HASSTEP;
protected byte HAVEDP1;
protected byte HAVEDP2;
protected byte HAVEDP3;
protected byte HCOND1;
protected byte HCOND10;
protected byte HCOND11;
protected byte HCOND12;
protected byte HCOND13;
protected byte HCOND14;
protected byte HCOND15;
protected byte HCOND16;
protected byte HCOND17;
protected byte HCOND18;
protected byte HCOND19;
protected byte HCOND2;
protected byte HCOND20;
protected byte HCOND3;
protected byte HCOND4;
protected byte HCOND5;
protected byte HCOND6;
protected byte HCOND7;
protected byte HCOND8;
protected byte HCOND9;
protected byte HCOND96;
protected byte HCONDA01;
protected byte HCONDA02;
protected byte HCONDA03;
protected byte HCONDA04;
protected byte HCONDA05;
protected byte HCONDA06;
protected byte HCONDA07;
protected byte HCONDA08;
protected byte HCONDA09;
protected byte HCONDA10;
protected byte HCONDA11;
protected byte HCONDA12;
protected byte HCONDA13;
protected byte HCONDA14;
protected byte HCONDA15;
protected byte HCONDA16;
protected byte HCONDA17;
protected byte HCONDA19;
protected boolean HCONDA20;
protected byte HCONDN1;
protected byte HCONDN10;
protected byte HCONDN11;
protected byte HCONDN12;
protected byte HCONDN13;
protected byte HCONDN14;
protected byte HCONDN15;
protected byte HCONDN16;
protected byte HCONDN17;
protected byte HCONDN18;
protected byte HCONDN19;
protected byte HCONDN2;
protected byte HCONDN20;
protected byte HCONDN3;
protected byte HCONDN4;
protected byte HCONDN5;
protected byte HCONDN6;
protected byte HCONDN7;
protected byte HCONDN8;
protected byte HCONDN9;
protected byte HCONDN96;
protected byte HCONDNO1;
protected byte HCONDNO2;
protected byte HCONDNO3;
protected byte HCONDNO4;
protected byte HCONDNO5;
protected byte HCONDNO_CODE;
protected byte HCONDNS1;
protected byte HCONDNS2;
protected byte HCONDNS3;
protected byte HCONDNS4;
protected byte HCONDNS5;
protected byte HCONDO_CODE;
protected byte HCONDS01;
protected byte HCONDS02;
protected byte HCONDS03;
protected byte HCONDS04;
protected byte HCONDS05;
protected byte HCONDS08;
protected byte HCONDS09;
protected byte HCONDS10;
protected byte HCONDS11;
protected byte HCONDS12;
protected byte HCONDS13;
protected byte HCONDS14;
protected byte HCONDS15;
protected byte HCONDS16;
protected byte HCONDS17;
protected byte HEALTH;
protected byte HEAPPLIED;
protected byte HEDLIK;
protected byte HEDNT;
protected byte HEDNTO_CODE;
protected byte HELPCODE1;
protected byte HELPCODE2;
protected byte HELPCODE3;
protected byte HELPCODE4;
protected byte HELPCODE5;
protected byte HELPCODE6;
protected byte HELPCODE7;
protected byte HELPCODE8;
protected byte HELPHOURS1;
protected byte HELPHOURS2;
protected byte HELPHOURS3;
protected byte HELPHOURS4;
protected byte HELPHOURS5;
protected byte HELPHOURS6;
protected byte HELPHOURS7;
protected byte HELPHOURS8;
protected byte HELPHOURSB1;
protected byte HELPHOURSB2;
protected byte HELPHOURSB3;
protected byte HELPHOURSB4;
protected byte HELPHOURSB5;
protected boolean HELPHOURSB6;
protected boolean HELPHOURSB7;
protected boolean HELPHOURSB8;
protected byte HGADOPTF;
protected byte HGADOPTM;
protected byte HGPART;
protected byte HHRESP_DV;
protected byte HHTYPE_DV;
protected byte HINFANO1;
protected byte HINFANO2;
protected byte HINFANO3;
protected byte HINFANO4;
protected byte HINFANO5;
protected byte HINFANO6;
protected boolean HINFANO7;
protected byte HINFANO8;
protected byte HINFANO9;
protected byte HINFBNO1;
protected byte HINFBNO2;
protected byte HINFBNO3;
protected byte HINFBNO4;
protected byte HINFBNO5;
protected byte HINFBNO6;
protected byte HINFBNO7;
protected byte HINFBNO8;
protected byte HINFBNO9;
protected byte HITSIB;
protected short HL2GP;
protected byte HL2HOP;
protected byte HLPFORMA1;
protected byte HLPFORMA2;
protected byte HLPFORMA3;
protected byte HLPFORMA4;
protected byte HLPFORMA5;
protected byte HLPFORMA6;
protected byte HLPFORMA7;
protected byte HLPFORMA96;
protected byte HLPFORMA97;
protected byte HLPFORMB1;
protected byte HLPFORMB2;
protected byte HLPFORMB3;
protected byte HLPFORMB4;
protected byte HLPFORMB5;
protected byte HLPFORMB6;
protected byte HLPFORMB7;
protected byte HLPFORMB96;
protected byte HLPFORMB97;
protected byte HLPHMWK;
protected byte HLPINFA1;
protected byte HLPINFA10;
protected byte HLPINFA2;
protected byte HLPINFA3;
protected byte HLPINFA4;
protected byte HLPINFA5;
protected byte HLPINFA6;
protected byte HLPINFA7;
protected byte HLPINFA8;
protected byte HLPINFA9;
protected byte HLPINFA96;
protected byte HLPINFB1;
protected byte HLPINFB10;
protected byte HLPINFB2;
protected byte HLPINFB3;
protected byte HLPINFB4;
protected byte HLPINFB5;
protected byte HLPINFB6;
protected byte HLPINFB7;
protected byte HLPINFB8;
protected byte HLPINFB9;
protected byte HLPINFB96;
protected short HOSP;
protected byte HOSPC1;
protected byte HOSPC2;
protected byte HOSPC3;
protected byte HOSPC4;
protected byte HOSPC5;
protected short HOSPCH;
protected short HOSPD;
protected short HOSPDC1;
protected short HOSPDC2;
protected short HOSPDC3;
protected byte HOSPDC4;
protected byte HOSPDC5;
protected byte HOUSING;
protected byte HOWPAYA1;
protected byte HOWPAYA2;
protected byte HOWPAYA3;
protected byte HOWPAYB1;
protected byte HOWPAYB2;
protected byte HOWPAYB3;
protected int HRPID;
protected byte HRPNO;
protected byte HRS_SLPH;
protected byte HRS_SLPM;
protected byte IENDDATD;
protected byte IENDDATM;
protected byte IENDDATMM;
protected byte IENDDATSS;
protected short IENDDATY;
protected byte INCASS;
protected double IND5MUS_LW;
protected double IND5MUS_XW;
protected double INDBD91_LW;
protected double INDBDUB_LW;
protected double INDIN01_LW;
protected double INDIN91_LW;
protected double INDINUB_LW;
protected double INDINUB_XW;
protected double INDINUI_LW;
protected double INDINUI_XW;
protected double INDINUS_LW;
protected byte INDLEARN;
protected byte INDLEARNEW;
protected byte INDMODE;
protected double INDNS91_LW;
protected double INDNSUB_LW;
protected double INDPXUB_LW;
protected double INDPXUB_XW;
protected double INDPXUI_LW;
protected double INDPXUI_XW;
protected double INDPXUS_LW;
protected double INDSCUB_LW;
protected double INDSCUB_XW;
protected double INDSCUI_LW;
protected double INDSCUI_XW;
protected double INDSCUS_LW;
protected byte INSULTED1;
protected byte INSULTED10;
protected byte INSULTED11;
protected byte INSULTED2;
protected byte INSULTED3;
protected byte INSULTED4;
protected byte INSULTED5;
protected byte INSULTED6;
protected byte INSULTED7;
protected byte INSULTED8;
protected byte INSULTED9;
protected byte INSULTED96;
protected byte INSULTED97;
protected byte INSULTEDO_CODE;
protected byte INSULTED_DV;
protected byte INTDATD_DV;
protected byte INTDATM_DV;
protected short INTDATY_DV;
protected byte INTQUS;
protected byte IOUTCOME;
protected boolean IPROXY;
protected byte ISTRTDATMM;
protected byte ISTRTDATSS;
protected short ISTRTDATY;
protected byte IVAFFCT11;
protected byte IVAFFCT12;
protected byte IVAFFCT13;
protected byte IVAFFCT14;
protected byte IVAFFCT15;
protected byte IVAFFCT17;
protected byte IVAFFCT21;
protected byte IVAFFCT22;
protected byte IVAFFCT23;
protected byte IVAFFCT27;
protected byte IVAFFCT30;
protected byte IVAFFCT97;
protected byte IVCOOP;
protected byte IVINFNCE;
protected byte IVLIBAL;
protected byte IVLIENG;
protected byte IVLITRANS;
protected byte IVLIWHO;
protected byte J1BOSS;
protected byte J1MNGR;
protected byte J1NONE;
protected byte J1NSSEC5_DV;
protected byte J1SEMP;
protected short J1SOC00_CC;
protected short J1SOC10_CC;
protected byte J1SOC90_CC;
protected byte J2NSSEC5_DV;
protected int J2PAY;
protected double J2PAYNET_DV;
protected short J2SOC00_CC;
protected short J2SOC10_CC;
protected short J2SOC90_CC;
protected byte JBATT1;
protected byte JBATT2;
protected byte JBATT3;
protected byte JBATT4;
protected byte JBATT5;
protected byte JBATT6;
protected byte JBENDD;
protected byte JBENDM;
protected byte JBENDREAS1;
protected byte JBENDREAS10;
protected byte JBENDREAS11;
protected byte JBENDREAS2;
protected byte JBENDREAS3;
protected byte JBENDREAS4;
protected byte JBENDREAS5;
protected byte JBENDREAS6;
protected byte JBENDREAS7;
protected byte JBENDREAS8;
protected byte JBENDREAS9;
protected byte JBENDREAS97;
protected short JBENDY4;
protected byte JBES2000;
protected byte JBIINDB_DV;
protected byte JBMNGRCHK;
protected byte JBNSSEC3_DV;
protected byte JBNSSEC5_DV;
protected short JBNSSEC_DV;
protected byte JBOFFY;
protected short JBRGSC_DV;
protected byte JBSAMR;
protected byte JBSAT;
protected byte JBSECTPUB;
protected byte JBSEDV;
protected byte JBSEMPCHK;
protected byte JBSIC07CHK;
protected byte JBSIC07_CC;
protected byte JBSIZECHK;
protected byte JBSOC00CHK;
protected short JBSOC00_CC;
protected short JBSOC10_CC;
protected byte JBSOCGR_DV;
protected byte JBTERM1;
protected byte JBTERM2;
protected byte JLENDM;
protected byte JLES2000;
protected byte JLIINDB_DV;
protected byte JLNSSEC3_DV;
protected byte JLNSSEC5_DV;
protected short JLNSSEC_DV;
protected short JLRGSC_DV;
protected byte JLSEDV;
protected byte JLSIC07_CC;
protected short JLSOC00_CC;
protected short JLSOC10_CC;
protected byte JOBDENY;
protected byte JOBHOURS1;
protected byte JOBHOURS2;
protected byte JOBHOURS3;
protected byte JOBHOURS4;
protected byte JOBHOURS5;
protected byte JOBHOURS6;
protected byte JOBLOOK;
protected int JSOWNAMT;
protected byte JSOWNOTH;
protected byte JSOWNSUM;
protected short JSOWOTAM;
protected byte JSPART;
protected int JSPAYU;
protected byte JSPAYW;
protected byte JSPRLS;
protected byte JSPRNI;
protected byte JSPRTX;
protected byte JSPYNI;
protected byte JSPYTX;
protected byte JSTTWTB_CAWI;
protected byte JSTYPEB;
protected byte JSWORKAC;
protected byte JSWORKTRAV;
protected short JUBGN;
protected short JULK4X1;
protected short JULK4X2;
protected byte JULK4X3;
protected short JULK4X4;
protected short JULK4X5;
protected short JULK4X6;
protected byte JULK4X96;
protected byte KID2UNI01;
protected byte KID2UNI02;
protected byte KID2UNI03;
protected byte KID2UNI04;
protected byte KID2UNI05;
protected byte KID2UNI06;
protected byte KID2UNI07;
protected byte KID2UNI08;
protected byte KID2UNI09;
protected byte KID2UNI10;
protected byte KID2UNI11;
protected byte KID2UNI12;
protected byte KID2UNI13;
protected byte KID2UNI14;
protected byte KID2UNI15;
protected byte KID2UNI16;
protected byte KIDSPT;
protected short LAAMTA;
protected byte LADOPT;
protected byte LAFREQA;
protected byte LAHELP11;
protected byte LAHELP12;
protected byte LAHELP13;
protected byte LAHELP14;
protected byte LAHELP15;
protected byte LAHELP16;
protected byte LAHELP17;
protected byte LAHELP18;
protected byte LAPAYA1;
protected byte LAPAYA2;
protected byte LAPAYB1;
protected byte LAPAYB2;
protected byte LATE;
protected byte LCHMULTI1;
protected byte LCHMULTI2;
protected byte LCHMULTI3;
protected byte LCOHNPI;
protected byte LEVELIMP;
protected byte LIENG;
protected byte LIHOW;
protected byte LINGUA;
protected byte LITRANS;
protected byte LIVESP;
protected boolean LIVESP_DV;
protected byte LIVEWITH;
protected byte LIWHO;
protected byte LMAR1M;
protected short LMAR1Y;
protected byte LMCBM1;
protected byte LMCBM2;
protected byte LMCBM3;
protected byte LMCBM4;
protected short LMCBY41;
protected short LMCBY42;
protected short LMCBY43;
protected short LMCBY44;
protected byte LMSPM1;
protected byte LMSPM2;
protected byte LMSPM3;
protected byte LMSPM4;
protected short LMSPY41;
protected short LMSPY42;
protected short LMSPY43;
protected short LMSPY44;
protected byte LNADOPT;
protected byte LNPRNT;
protected byte LPRNT;
protected byte LVHM;
protected byte LVREL1;
protected byte LVREL10;
protected byte LVREL2;
protected byte LVREL3;
protected byte LVREL4;
protected byte LVREL5;
protected byte LVREL6;
protected byte LVREL7;
protected byte LVREL8;
protected byte LVREL9;
protected byte LVREL96;
protected byte LVSCHDO;
protected byte LWWRONG;
protected byte MAAGE;
protected byte MABROAD;
protected short MABROADC1;
protected short MABROADC2;
protected short MABROADC3;
protected short MABROADC4;
protected short MABROADC5;
protected byte MACOB;
protected byte MACON;
protected byte MAFAR;
protected byte MAJU;
protected byte MALONE;
protected byte MAMOSTCON;
protected byte MANSSEC5_DV;
protected byte MARSTAT;
protected byte MASEE;
protected short MASOC00_CC;
protected short MASOC10_CC;
protected byte MASOC90_CC;
protected byte MASTAT_DV;
protected byte MATLEAVE;
protected byte MATLV;
protected byte MATLVENDD;
protected byte MATLVENDM;
protected short MATLVENDY4;
protected byte MATLVSTD;
protected byte MATLVSTM;
protected short MATLVSTY4;
protected byte MAYRUK;
protected byte MDAY;
protected byte MDHRS;
protected byte MDMIN;
protected byte MED_SLP;
protected byte MEMPLOY;
protected byte MINDIRECT;
protected short MINDIRECTC1;
protected short MINDIRECTC2;
protected short MINDIRECTC3;
protected short MINDIRECTC4;
protected short MINDIRECTC5;
protected byte MINTENT;
protected byte MINTWHEN;
protected byte MISSOURCE01;
protected byte MISSOURCE02;
protected byte MISSOURCE03;
protected byte MISSOURCE04;
protected byte MISSOURCE05;
protected byte MISSOURCE06;
protected byte MISSOURCE07;
protected byte MISSOURCE08;
protected byte MISSOURCE09;
protected byte MISSOURCE10;
protected byte MISSOURCE11;
protected byte MISSOURCE12;
protected byte MISSOURCE13;
protected byte MISSOURCE14;
protected byte MISSOURCE15;
protected byte MISSOURCE16;
protected byte MISSOURCE18;
protected byte MISSOURCE19;
protected byte MISSOURCE20;
protected byte MISSOURCE21;
protected byte MISSOURCE22;
protected byte MISSOURCE23;
protected byte MISSOURCE24;
protected byte MISSOURCE25;
protected byte MISSOURCE26;
protected byte MISSOURCE27;
protected byte MISSOURCE28;
protected byte MISSOURCE29;
protected byte MISSOURCE30;
protected byte MISSOURCE31;
protected byte MISSOURCE32;
protected byte MISSOURCE33;
protected byte MISSOURCE34;
protected byte MISSOURCE35;
protected byte MISSOURCE36;
protected byte MISSOURCE37;
protected byte MISSOURCE38;
protected byte MISSOURCE39;
protected byte MISSOURCE40;
protected byte MISSOURCE41;
protected byte MLAGST;
protected byte MLAGSTU;
protected byte MLFUTR;
protected byte MLIVED;
protected short MLIVEDC1;
protected short MLIVEDC2;
protected short MLIVEDC3;
protected short MLIVEDC4;
protected short MLIVEDC5;
protected byte MLIVEDIST;
protected byte MLIVEDIST5;
protected byte MLIVEDISTF;
protected byte MLRNOT1;
protected byte MLRNOT10;
protected byte MLRNOT11;
protected byte MLRNOT12;
protected byte MLRNOT13;
protected byte MLRNOT2;
protected byte MLRNOT3;
protected byte MLRNOT4;
protected byte MLRNOT5;
protected byte MLRNOT6;
protected byte MLRNOT7;
protected byte MLRNOT8;
protected byte MLRNOT9;
protected byte MLRNOT97;
protected byte MLSTATCHK;
protected byte MLWKFPT;
protected byte MNABROAD;
protected byte MNLIVED;
protected byte MNMOVES;
protected byte MNOTHERC;
protected int MNPID;
protected byte MNPNO;
protected int MNSPID;
protected byte MNSPNO;
protected byte MOBCOMP;
protected byte MOBUSE;
protected byte MONTH;
protected byte MOVDIR;
protected byte MOVEOTH_CODE;
protected byte MOVY11;
protected byte MOVY12;
protected byte MOVY13;
protected byte MOVY14;
protected byte MOVY15;
protected byte MOVY16;
protected byte MREASON1;
protected byte MREASON2;
protected byte MREASON3;
protected byte MREASON4;
protected byte MREASON5;
protected byte MREASON6;
protected byte MREASON7;
protected byte MREASON97;
protected byte MREASONO_CODE;
protected byte MRETURNED;
protected byte MSTATCH1;
protected byte MSTATCH2;
protected byte MSTATCH3;
protected byte MSTATCH4;
protected short MSTATSAM;
protected byte MSTATSAMN;
protected byte MVEVER;
protected byte MVMNTH;
protected short MVYR;
protected byte MWHRS;
protected byte MWMIN;
protected byte N1619ABS;
protected byte NADOPTCH;
protected byte NAIDXHH;
protected byte NATID1;
protected byte NATID2;
protected byte NATID3;
protected byte NATID4;
protected byte NATID5;
protected byte NATID6;
protected byte NATID97;
protected byte NCH10;
protected byte NCH10TO15;
protected byte NCH14RESP;
protected byte NCH3RESP;
protected byte NCH415RESP;
protected byte NCH5RESP;
protected byte NCH5TO15;
protected byte NCH8RESP;
protected byte NCHILD;
protected short NCHILD_DV;
protected byte NCHRESP;
protected byte NCHUNDER16;
protected short NCIGS;
protected byte NCRR1;
protected byte NCRR11;
protected byte NCRR12;
protected byte NCRR3;
protected byte NCRR4;
protected byte NCRR5;
protected byte NCRR6;
protected byte NCRR8;
protected byte NCRR9;
protected byte NCRRM;
protected short NCRRY4;
protected byte NDEPCHL_DV;
protected byte NETPUSE;
protected byte NETUSE;
protected byte NEXTELSE1;
protected byte NEXTELSE2;
protected byte NEXTELSE3;
protected byte NEXTELSE4;
protected byte NEXTELSE5;
protected byte NEXTELSE6;
protected byte NEXTJOB1;
protected byte NEXTJOB2;
protected byte NEXTJOB3;
protected byte NEXTJOB4;
protected byte NEXTJOB5;
protected byte NEXTJOB6;
protected byte NEXTSTAT1;
protected byte NEXTSTAT2;
protected byte NEXTSTAT3;
protected byte NEXTSTAT4;
protected byte NEXTSTAT5;
protected byte NEXTSTAT6;
protected byte NFH01;
protected byte NFH02;
protected byte NFH03;
protected byte NFH04;
protected byte NFH05;
protected byte NFH06;
protected byte NFH07;
protected byte NFH08;
protected byte NFH09;
protected byte NFH10;
protected byte NFH11;
protected byte NFH12;
protected byte NFH13;
protected byte NFH14;
protected byte NFH15;
protected byte NFH16;
protected byte NFH18;
protected byte NFH19;
protected byte NFH20;
protected byte NFH21;
protected byte NFH22;
protected byte NFH23;
protected byte NFH24;
protected byte NFH25;
protected byte NFH26;
protected byte NFH27;
protected byte NFH28;
protected byte NFH29;
protected byte NFH30;
protected byte NFH31;
protected byte NFH32;
protected byte NFH33;
protected byte NFH34;
protected byte NFH35;
protected byte NFH36;
protected byte NFH37;
protected byte NFH38;
protected byte NFH39;
protected byte NFH40;
protected byte NFH41;
protected byte NGCSE5;
protected byte NGCSEENG;
protected byte NGCSEMAT;
protected byte NGRP_DV;
protected byte NHIQUAL_DV;
protected byte NIACT;
protected byte NIREL;
protected byte NISERPS;
protected byte NMAR;
protected byte NMPSP_DV;
protected byte NNATCH;
protected byte NNEWBORN;
protected byte NNMPSP_DV;
protected byte NNSIB_DV;
protected byte NNSSIB_DV;
protected byte NOPAYA;
protected byte NOPAYB;
protected byte NOTEMPCHK;
protected byte NPDINDLEARN;
protected byte NPENSIONER_DV;
protected byte NPNS_DV;
protected byte NPN_DV;
protected byte NQFHIGH_DV;
protected byte NRELS3;
protected byte NRELS4;
protected byte NRELS5;
protected byte NRELS6;
protected byte NRELS7;
protected byte NRELS8;
protected byte NUNDER16ABS;
protected byte NUNMPSP_DV;
protected byte NXTENDREAS1;
protected byte NXTENDREAS10;
protected byte NXTENDREAS11;
protected byte NXTENDREAS2;
protected byte NXTENDREAS3;
protected byte NXTENDREAS4;
protected byte NXTENDREAS5;
protected byte NXTENDREAS6;
protected byte NXTENDREAS7;
protected byte NXTENDREAS8;
protected byte NXTENDREAS9;
protected byte NXTENDREAS97;
protected byte NXTJBENDD;
protected byte NXTJBENDM;
protected short NXTJBENDY4;
protected byte NXTJBES;
protected byte NXTJBHRS;
protected byte NXTST;
protected byte NXTSTELSE;
protected byte NXTSTENDD;
protected byte NXTSTENDM;
protected short NXTSTENDY4;
protected byte OCIMPA;
protected byte OCIMPB;
protected byte OCIMPE;
protected byte OCIMPF;
protected byte OCIMPI;
protected byte OCIMPK;
protected byte OCIMPL;
protected byte ODDSAPPLY;
protected byte ODDSEMP1;
protected byte ODDSEMP3;
protected byte ODDSQUAL;
protected byte ODDSSCHOL;
protected byte OHCH16;
protected byte OPRLG;
protected byte OPRLG0;
protected byte OPRLG0NI;
protected byte OPRLG1;
protected byte ORIGADD;
protected byte OTHBEN1;
protected byte OTHBEN2;
protected byte OTHBEN3;
protected byte OTHBEN4;
protected byte OTHBEN5;
protected byte OTHBEN6;
protected byte OTHBEN7;
protected byte OTHBEN8;
protected byte OTHBEN9;
protected byte OTHBEN96;
protected byte OTHBEN97;
protected byte OTHCONT;
protected byte OVTNSET;
protected byte OVTPAY;
protected double OVTRATE;
protected byte OVTREST;
protected byte PAAGE;
protected byte PAAID1;
protected byte PAAID2;
protected byte PAAID3;
protected byte PAAID4;
protected byte PAAID5;
protected byte PAAID6;
protected byte PAAID7;
protected byte PAAID8;
protected byte PAAID96;
protected byte PAAID97;
protected byte PACOB;
protected byte PACON;
protected byte PAFAR;
protected byte PAIDU1;
protected byte PAIDU2;
protected byte PAIDU3;
protected byte PAIDU4;
protected byte PAIDU5;
protected byte PAIDU6;
protected byte PAIDU7;
protected byte PAIDU8;
protected byte PAIDU96;
protected byte PAIDU97;
protected byte PAJU;
protected byte PALONE;
protected byte PAMOSTCON;
protected byte PANSSEC5_DV;
protected byte PAREVE;
protected byte PARMAR;
protected byte PARSCH;
protected byte PASEE;
protected short PASOC00_CC;
protected short PASOC10_CC;
protected byte PASOC90_CC;
protected double PAYAMTA;
protected double PAYAMTB;
protected double PAYDV;
protected byte PAYFREQA;
protected byte PAYFREQB;
protected byte PAYGWC;
protected byte PAYNWC;
protected byte PAYRUK;
protected byte PAYTYP;
protected byte PAYUWC;
protected double PAYU_DV;
protected short PBIRTHY;
protected byte PBNFT1;
protected byte PBNFT10;
protected byte PBNFT11;
protected byte PBNFT12;
protected byte PBNFT13;
protected byte PBNFT2;
protected byte PBNFT3;
protected byte PBNFT4;
protected byte PBNFT5;
protected byte PBNFT6;
protected byte PBNFT7;
protected byte PBNFT8;
protected byte PBNFT9;
protected byte PBNFT96;
protected byte PDVAGE;
protected byte PEDCHPNO;
protected byte PENMEX;
protected byte PENSIONER_DV;
protected byte PHEAPPLIED;
protected int PID;
protected int PIDP1;
protected int PIDP2;
protected int PIDP3;
protected int PIDP4;
protected byte PJBPTFT;
protected byte PJSPTFT;
protected byte PLIENG;
protected byte PLITRANS;
protected short PLNOWM;
protected short PLNOWY4;
protected int PN1PID;
protected byte PN1PNO;
protected byte PN1SEX;
protected int PN2PID;
protected byte PN2PNO;
protected byte PN2SEX;
protected int PNS1PID;
protected byte PNS1PNO;
protected byte PNS1SEX;
protected int PNS2PID;
protected byte PNS2PNO;
protected byte PNS2SEX;
protected byte PODDSAPPLY;
protected byte PODDSEMP1;
protected byte PODDSEMP3;
protected byte PODDSQUAL;
protected byte PODDSSCHOL;
protected int PPID;
protected byte PPPEX;
protected byte PPPEXM;
protected byte PPSEX;
protected byte PRAISEKID;
protected byte PREARN;
protected byte PREARNA;
protected byte PREARNW;
protected byte PREASON;
protected byte PREG;
protected byte PREGEND1;
protected byte PREGEND2;
protected byte PREGEND3;
protected byte PREGFERT1;
protected byte PREGFERT2;
protected byte PREGFERT3;
protected byte PREGFT11;
protected byte PREGFT12;
protected boolean PREGFT13;
protected byte PREGFT21;
protected byte PREGFT22;
protected boolean PREGFT23;
protected byte PREGFT31;
protected byte PREGFT32;
protected boolean PREGFT33;
protected byte PREGFT41;
protected byte PREGFT42;
protected boolean PREGFT43;
protected byte PREGFT51;
protected byte PREGFT52;
protected boolean PREGFT53;
protected byte PREGFT61;
protected byte PREGFT62;
protected boolean PREGFT63;
protected byte PREGFT961;
protected byte PREGFT962;
protected boolean PREGFT963;
protected byte PREGM1;
protected byte PREGM2;
protected byte PREGM3;
protected byte PREGOUT1;
protected byte PREGOUT2;
protected byte PREGOUT3;
protected byte PREGSMK11;
protected byte PREGSMK12;
protected byte PREGSMK13;
protected byte PREGSMK21;
protected byte PREGSMK22;
protected byte PREGSMK23;
protected byte PREGSMK31;
protected byte PREGSMK32;
protected byte PREGSMK33;
protected byte PREGSMOKE1;
protected byte PREGSMOKE2;
protected byte PREGSMOKE3;
protected byte PREGSPD1;
protected boolean PREGSPD2;
protected boolean PREGSPD3;
protected short PREGY41;
protected short PREGY42;
protected short PREGY43;
protected byte PREL;
protected byte PRFITB;
protected byte PRFITBA;
protected byte PRFITBW;
protected byte PS1;
protected byte PS10;
protected byte PS11;
protected byte PS12;
protected byte PS13;
protected byte PS14;
protected byte PS15;
protected byte PS16;
protected byte PS17;
protected byte PS18;
protected byte PS19;
protected byte PS2;
protected byte PS20;
protected byte PS21;
protected byte PS22;
protected byte PS23;
protected byte PS24;
protected byte PS25;
protected byte PS26;
protected byte PS27;
protected byte PS28;
protected byte PS29;
protected byte PS3;
protected byte PS30;
protected byte PS31;
protected byte PS32;
protected byte PS4;
protected byte PS5;
protected byte PS6;
protected byte PS7;
protected byte PS8;
protected byte PS9;
protected byte PSDQA_DV;
protected byte PSDQB_DV;
protected byte PSDQC_DV;
protected byte PSNUMCH;
protected int PSU;
protected byte PUNIFIN1;
protected byte PUNISUB1;
protected byte PVTPYSET;
protected int PXPBORROW;
protected int PXPEARN1;
protected byte PXPEARN1DK;
protected int PXPEARN3;
protected byte PXPEARN3DK;
protected int PXPEARNG1;
protected byte PXPEARNG1DK;
protected int PXPEARNG3;
protected byte PXPEARNG3DK;
protected int PXPTUITION;
protected byte PYENRL;
protected byte QFHIGH;
protected boolean QFHIGHFL_DV;
protected byte QFHIGH_DV;
protected byte QFVOC1;
protected byte QFVOC10;
protected byte QFVOC11;
protected byte QFVOC12;
protected byte QFVOC13;
protected byte QFVOC14;
protected byte QFVOC15;
protected byte QFVOC2;
protected byte QFVOC3;
protected byte QFVOC4;
protected byte QFVOC5;
protected byte QFVOC6;
protected byte QFVOC7;
protected byte QFVOC8;
protected byte QFVOC9;
protected byte QFVOC96;
protected byte QUALNEW1;
protected byte QUALNEW10;
protected byte QUALNEW11;
protected byte QUALNEW13;
protected byte QUALNEW15;
protected byte QUALNEW16;
protected byte QUALNEW17;
protected byte QUALNEW18;
protected byte QUALNEW19;
protected byte QUALNEW2;
protected byte QUALNEW20;
protected byte QUALNEW21;
protected byte QUALNEW22;
protected byte QUALNEW23;
protected byte QUALNEW24;
protected byte QUALNEW25;
protected byte QUALNEW26;
protected byte QUALNEW27;
protected byte QUALNEW28;
protected byte QUALNEW29;
protected byte QUALNEW3;
protected byte QUALNEW30;
protected byte QUALNEW31;
protected byte QUALNEW32;
protected byte QUALNEW33;
protected byte QUALNEW4;
protected byte QUALNEW5;
protected byte QUALNEW6;
protected byte QUALNEW7;
protected byte QUALNEW8;
protected byte QUALNEW9;
protected byte QUALOC;
protected byte QUARREL;
protected byte QUARTER;
protected byte RACEL;
protected byte RACELAT;
protected byte RACELBT;
protected byte RACELMT;
protected byte RACELOT_CODE;
protected short RACELO_CODE;
protected byte RACELT;
protected byte RACELWT;
protected byte RACEL_DV;
protected byte REASEND10_1;
protected byte REASEND10_2;
protected byte REASEND10_3;
protected byte REASEND10_4;
protected byte REASEND10_5;
protected byte REASEND10_6;
protected byte REASEND11_1;
protected byte REASEND11_2;
protected byte REASEND11_3;
protected byte REASEND11_4;
protected byte REASEND11_5;
protected byte REASEND11_6;
protected byte REASEND1_1;
protected byte REASEND1_2;
protected byte REASEND1_3;
protected byte REASEND1_4;
protected byte REASEND1_5;
protected byte REASEND1_6;
protected byte REASEND2_1;
protected byte REASEND2_2;
protected byte REASEND2_3;
protected byte REASEND2_4;
protected byte REASEND2_5;
protected byte REASEND2_6;
protected byte REASEND3_1;
protected byte REASEND3_2;
protected byte REASEND3_3;
protected byte REASEND3_4;
protected byte REASEND3_5;
protected byte REASEND3_6;
protected byte REASEND4_1;
protected byte REASEND4_2;
protected byte REASEND4_3;
protected byte REASEND4_4;
protected byte REASEND4_5;
protected byte REASEND4_6;
protected byte REASEND5_1;
protected byte REASEND5_2;
protected byte REASEND5_3;
protected byte REASEND5_4;
protected byte REASEND5_5;
protected byte REASEND5_6;
protected byte REASEND6_1;
protected byte REASEND6_2;
protected byte REASEND6_3;
protected byte REASEND6_4;
protected byte REASEND6_5;
protected byte REASEND6_6;
protected byte REASEND7_1;
protected byte REASEND7_2;
protected byte REASEND7_3;
protected byte REASEND7_4;
protected byte REASEND7_5;
protected byte REASEND7_6;
protected byte REASEND8_1;
protected byte REASEND8_2;
protected byte REASEND8_3;
protected byte REASEND8_4;
protected byte REASEND8_5;
protected byte REASEND8_6;
protected byte REASEND97_1;
protected byte REASEND97_2;
protected byte REASEND97_3;
protected byte REASEND97_4;
protected byte REASEND97_5;
protected byte REASEND97_6;
protected byte REASEND9_1;
protected byte REASEND9_2;
protected byte REASEND9_3;
protected byte REASEND9_4;
protected byte REASEND9_5;
protected byte REASEND9_6;
protected byte RELKID;
protected byte RELUP;
protected byte REMAIL_CODE;
protected short REMCNTRY1;
protected short REMCNTRY2;
protected short REMCNTRY3;
protected short REMCNTRY4;
protected byte REMHOW1;
protected byte REMHOW2;
protected byte REMHOW3;
protected byte REMHOW4;
protected byte REMIT1;
protected byte REMIT2;
protected byte REMIT3;
protected byte REMIT4;
protected byte REMIT5;
protected short REMITAMT1;
protected int REMITAMT2;
protected short REMITAMT3;
protected int REMITAMT4;
protected byte REMITFREQ1;
protected byte REMITFREQ2;
protected byte REMITFREQ3;
protected byte REMITFREQ4;
protected byte REMITREG1;
protected byte REMITREG2;
protected byte REMITREG3;
protected byte REMITREG4;
protected byte REMITUSUAL1;
protected byte REMITUSUAL2;
protected byte REMITUSUAL3;
protected byte REMITUSUAL4;
protected boolean REMUSAMT1;
protected short REMUSAMT2;
protected short REMUSAMT3;
protected short REMUSAMT4;
protected byte RESATTACKED1_1;
protected byte RESATTACKED1_10;
protected byte RESATTACKED1_11;
protected byte RESATTACKED1_12;
protected byte RESATTACKED1_2;
protected byte RESATTACKED1_3;
protected byte RESATTACKED1_4;
protected byte RESATTACKED1_5;
protected byte RESATTACKED1_6;
protected byte RESATTACKED1_7;
protected byte RESATTACKED1_8;
protected byte RESATTACKED1_9;
protected byte RESATTACKED2_1;
protected byte RESATTACKED2_10;
protected byte RESATTACKED2_11;
protected byte RESATTACKED2_12;
protected byte RESATTACKED2_2;
protected byte RESATTACKED2_3;
protected byte RESATTACKED2_4;
protected byte RESATTACKED2_5;
protected byte RESATTACKED2_6;
protected byte RESATTACKED2_7;
protected byte RESATTACKED2_8;
protected byte RESATTACKED2_9;
protected byte RESATTACKED3_1;
protected byte RESATTACKED3_10;
protected byte RESATTACKED3_11;
protected byte RESATTACKED3_12;
protected byte RESATTACKED3_2;
protected byte RESATTACKED3_3;
protected byte RESATTACKED3_4;
protected byte RESATTACKED3_5;
protected byte RESATTACKED3_6;
protected byte RESATTACKED3_7;
protected byte RESATTACKED3_8;
protected byte RESATTACKED3_9;
protected byte RESATTACKED4_1;
protected byte RESATTACKED4_10;
protected byte RESATTACKED4_11;
protected byte RESATTACKED4_12;
protected byte RESATTACKED4_2;
protected byte RESATTACKED4_3;
protected byte RESATTACKED4_4;
protected byte RESATTACKED4_5;
protected byte RESATTACKED4_6;
protected byte RESATTACKED4_7;
protected byte RESATTACKED4_8;
protected byte RESATTACKED4_9;
protected byte RESATTACKED5_1;
protected byte RESATTACKED5_10;
protected byte RESATTACKED5_11;
protected byte RESATTACKED5_12;
protected byte RESATTACKED5_2;
protected byte RESATTACKED5_3;
protected byte RESATTACKED5_4;
protected byte RESATTACKED5_5;
protected byte RESATTACKED5_6;
protected byte RESATTACKED5_7;
protected byte RESATTACKED5_8;
protected byte RESATTACKED5_9;
protected byte RESATTACKED6_1;
protected byte RESATTACKED6_10;
protected byte RESATTACKED6_11;
protected byte RESATTACKED6_12;
protected byte RESATTACKED6_2;
protected byte RESATTACKED6_3;
protected byte RESATTACKED6_4;
protected byte RESATTACKED6_5;
protected byte RESATTACKED6_6;
protected byte RESATTACKED6_7;
protected byte RESATTACKED6_8;
protected byte RESATTACKED6_9;
protected byte RESATTACKED7_1;
protected byte RESATTACKED7_10;
protected byte RESATTACKED7_11;
protected byte RESATTACKED7_12;
protected byte RESATTACKED7_2;
protected byte RESATTACKED7_3;
protected byte RESATTACKED7_4;
protected byte RESATTACKED7_5;
protected byte RESATTACKED7_6;
protected byte RESATTACKED7_7;
protected byte RESATTACKED7_8;
protected byte RESATTACKED7_9;
protected byte RESATTACKED8_1;
protected byte RESATTACKED8_10;
protected byte RESATTACKED8_11;
protected byte RESATTACKED8_12;
protected byte RESATTACKED8_2;
protected byte RESATTACKED8_3;
protected byte RESATTACKED8_4;
protected byte RESATTACKED8_5;
protected byte RESATTACKED8_6;
protected byte RESATTACKED8_7;
protected byte RESATTACKED8_8;
protected byte RESATTACKED8_9;
protected byte RESATTACKED96_1;
protected byte RESATTACKED96_10;
protected byte RESATTACKED96_11;
protected byte RESATTACKED96_12;
protected byte RESATTACKED96_2;
protected byte RESATTACKED96_3;
protected byte RESATTACKED96_4;
protected byte RESATTACKED96_5;
protected byte RESATTACKED96_6;
protected byte RESATTACKED96_7;
protected byte RESATTACKED96_8;
protected byte RESATTACKED96_9;
protected byte RESATTACKED97_1;
protected byte RESATTACKED97_10;
protected byte RESATTACKED97_11;
protected byte RESATTACKED97_12;
protected byte RESATTACKED97_2;
protected byte RESATTACKED97_3;
protected byte RESATTACKED97_4;
protected byte RESATTACKED97_5;
protected byte RESATTACKED97_6;
protected byte RESATTACKED97_7;
protected byte RESATTACKED97_8;
protected byte RESATTACKED97_9;
protected byte RESATTACKED9_1;
protected byte RESATTACKED9_10;
protected byte RESATTACKED9_11;
protected byte RESATTACKED9_12;
protected byte RESATTACKED9_2;
protected byte RESATTACKED9_3;
protected byte RESATTACKED9_4;
protected byte RESATTACKED9_5;
protected byte RESATTACKED9_6;
protected byte RESATTACKED9_7;
protected byte RESATTACKED9_8;
protected byte RESATTACKED9_9;
protected byte RESAVOID1_1;
protected byte RESAVOID1_10;
protected byte RESAVOID1_11;
protected byte RESAVOID1_12;
protected byte RESAVOID1_2;
protected byte RESAVOID1_3;
protected byte RESAVOID1_4;
protected byte RESAVOID1_5;
protected byte RESAVOID1_6;
protected byte RESAVOID1_7;
protected byte RESAVOID1_8;
protected byte RESAVOID1_9;
protected byte RESAVOID2_1;
protected byte RESAVOID2_10;
protected byte RESAVOID2_11;
protected byte RESAVOID2_12;
protected byte RESAVOID2_2;
protected byte RESAVOID2_3;
protected byte RESAVOID2_4;
protected byte RESAVOID2_5;
protected byte RESAVOID2_6;
protected byte RESAVOID2_7;
protected byte RESAVOID2_8;
protected byte RESAVOID2_9;
protected byte RESAVOID3_1;
protected byte RESAVOID3_10;
protected byte RESAVOID3_11;
protected byte RESAVOID3_12;
protected byte RESAVOID3_2;
protected byte RESAVOID3_3;
protected byte RESAVOID3_4;
protected byte RESAVOID3_5;
protected byte RESAVOID3_6;
protected byte RESAVOID3_7;
protected byte RESAVOID3_8;
protected byte RESAVOID3_9;
protected byte RESAVOID4_1;
protected byte RESAVOID4_10;
protected byte RESAVOID4_11;
protected byte RESAVOID4_12;
protected byte RESAVOID4_2;
protected byte RESAVOID4_3;
protected byte RESAVOID4_4;
protected byte RESAVOID4_5;
protected byte RESAVOID4_6;
protected byte RESAVOID4_7;
protected byte RESAVOID4_8;
protected byte RESAVOID4_9;
protected byte RESAVOID5_1;
protected byte RESAVOID5_10;
protected byte RESAVOID5_11;
protected byte RESAVOID5_12;
protected byte RESAVOID5_2;
protected byte RESAVOID5_3;
protected byte RESAVOID5_4;
protected byte RESAVOID5_5;
protected byte RESAVOID5_6;
protected byte RESAVOID5_7;
protected byte RESAVOID5_8;
protected byte RESAVOID5_9;
protected byte RESAVOID6_1;
protected byte RESAVOID6_10;
protected byte RESAVOID6_11;
protected byte RESAVOID6_12;
protected byte RESAVOID6_2;
protected byte RESAVOID6_3;
protected byte RESAVOID6_4;
protected byte RESAVOID6_5;
protected byte RESAVOID6_6;
protected byte RESAVOID6_7;
protected byte RESAVOID6_8;
protected byte RESAVOID6_9;
protected byte RESAVOID7_1;
protected byte RESAVOID7_10;
protected byte RESAVOID7_11;
protected byte RESAVOID7_12;
protected byte RESAVOID7_2;
protected byte RESAVOID7_3;
protected byte RESAVOID7_4;
protected byte RESAVOID7_5;
protected byte RESAVOID7_6;
protected byte RESAVOID7_7;
protected byte RESAVOID7_8;
protected byte RESAVOID7_9;
protected byte RESAVOID8_1;
protected byte RESAVOID8_10;
protected byte RESAVOID8_11;
protected byte RESAVOID8_12;
protected byte RESAVOID8_2;
protected byte RESAVOID8_3;
protected byte RESAVOID8_4;
protected byte RESAVOID8_5;
protected byte RESAVOID8_6;
protected byte RESAVOID8_7;
protected byte RESAVOID8_8;
protected byte RESAVOID8_9;
protected byte RESAVOID96_1;
protected byte RESAVOID96_10;
protected byte RESAVOID96_11;
protected byte RESAVOID96_12;
protected byte RESAVOID96_2;
protected byte RESAVOID96_3;
protected byte RESAVOID96_4;
protected byte RESAVOID96_5;
protected byte RESAVOID96_6;
protected byte RESAVOID96_7;
protected byte RESAVOID96_8;
protected byte RESAVOID96_9;
protected byte RESAVOID97_1;
protected byte RESAVOID97_10;
protected byte RESAVOID97_11;
protected byte RESAVOID97_12;
protected byte RESAVOID97_2;
protected byte RESAVOID97_3;
protected byte RESAVOID97_4;
protected byte RESAVOID97_5;
protected byte RESAVOID97_6;
protected byte RESAVOID97_7;
protected byte RESAVOID97_8;
protected byte RESAVOID97_9;
protected byte RESAVOID9_1;
protected byte RESAVOID9_10;
protected byte RESAVOID9_11;
protected byte RESAVOID9_12;
protected byte RESAVOID9_2;
protected byte RESAVOID9_3;
protected byte RESAVOID9_4;
protected byte RESAVOID9_5;
protected byte RESAVOID9_6;
protected byte RESAVOID9_7;
protected byte RESAVOID9_8;
protected byte RESAVOID9_9;
protected byte RESINSULTED1_1;
protected byte RESINSULTED1_10;
protected byte RESINSULTED1_11;
protected byte RESINSULTED1_12;
protected byte RESINSULTED1_2;
protected byte RESINSULTED1_3;
protected byte RESINSULTED1_4;
protected byte RESINSULTED1_5;
protected byte RESINSULTED1_6;
protected byte RESINSULTED1_7;
protected byte RESINSULTED1_8;
protected byte RESINSULTED1_9;
protected byte RESINSULTED2_1;
protected byte RESINSULTED2_10;
protected byte RESINSULTED2_11;
protected byte RESINSULTED2_12;
protected byte RESINSULTED2_2;
protected byte RESINSULTED2_3;
protected byte RESINSULTED2_4;
protected byte RESINSULTED2_5;
protected byte RESINSULTED2_6;
protected byte RESINSULTED2_7;
protected byte RESINSULTED2_8;
protected byte RESINSULTED2_9;
protected byte RESINSULTED3_1;
protected byte RESINSULTED3_10;
protected byte RESINSULTED3_11;
protected byte RESINSULTED3_12;
protected byte RESINSULTED3_2;
protected byte RESINSULTED3_3;
protected byte RESINSULTED3_4;
protected byte RESINSULTED3_5;
protected byte RESINSULTED3_6;
protected byte RESINSULTED3_7;
protected byte RESINSULTED3_8;
protected byte RESINSULTED3_9;
protected byte RESINSULTED4_1;
protected byte RESINSULTED4_10;
protected byte RESINSULTED4_11;
protected byte RESINSULTED4_12;
protected byte RESINSULTED4_2;
protected byte RESINSULTED4_3;
protected byte RESINSULTED4_4;
protected byte RESINSULTED4_5;
protected byte RESINSULTED4_6;
protected byte RESINSULTED4_7;
protected byte RESINSULTED4_8;
protected byte RESINSULTED4_9;
protected byte RESINSULTED5_1;
protected byte RESINSULTED5_10;
protected byte RESINSULTED5_11;
protected byte RESINSULTED5_12;
protected byte RESINSULTED5_2;
protected byte RESINSULTED5_3;
protected byte RESINSULTED5_4;
protected byte RESINSULTED5_5;
protected byte RESINSULTED5_6;
protected byte RESINSULTED5_7;
protected byte RESINSULTED5_8;
protected byte RESINSULTED5_9;
protected byte RESINSULTED6_1;
protected byte RESINSULTED6_10;
protected byte RESINSULTED6_11;
protected byte RESINSULTED6_12;
protected byte RESINSULTED6_2;
protected byte RESINSULTED6_3;
protected byte RESINSULTED6_4;
protected byte RESINSULTED6_5;
protected byte RESINSULTED6_6;
protected byte RESINSULTED6_7;
protected byte RESINSULTED6_8;
protected byte RESINSULTED6_9;
protected byte RESINSULTED7_1;
protected byte RESINSULTED7_10;
protected byte RESINSULTED7_11;
protected byte RESINSULTED7_12;
protected byte RESINSULTED7_2;
protected byte RESINSULTED7_3;
protected byte RESINSULTED7_4;
protected byte RESINSULTED7_5;
protected byte RESINSULTED7_6;
protected byte RESINSULTED7_7;
protected byte RESINSULTED7_8;
protected byte RESINSULTED7_9;
protected byte RESINSULTED8_1;
protected byte RESINSULTED8_10;
protected byte RESINSULTED8_11;
protected byte RESINSULTED8_12;
protected byte RESINSULTED8_2;
protected byte RESINSULTED8_3;
protected byte RESINSULTED8_4;
protected byte RESINSULTED8_5;
protected byte RESINSULTED8_6;
protected byte RESINSULTED8_7;
protected byte RESINSULTED8_8;
protected byte RESINSULTED8_9;
protected byte RESINSULTED96_1;
protected byte RESINSULTED96_10;
protected byte RESINSULTED96_11;
protected byte RESINSULTED96_12;
protected byte RESINSULTED96_2;
protected byte RESINSULTED96_3;
protected byte RESINSULTED96_4;
protected byte RESINSULTED96_5;
protected byte RESINSULTED96_6;
protected byte RESINSULTED96_7;
protected byte RESINSULTED96_8;
protected byte RESINSULTED96_9;
protected byte RESINSULTED97_1;
protected byte RESINSULTED97_10;
protected byte RESINSULTED97_11;
protected byte RESINSULTED97_12;
protected byte RESINSULTED97_2;
protected byte RESINSULTED97_3;
protected byte RESINSULTED97_4;
protected byte RESINSULTED97_5;
protected byte RESINSULTED97_6;
protected byte RESINSULTED97_7;
protected byte RESINSULTED97_8;
protected byte RESINSULTED97_9;
protected byte RESINSULTED9_1;
protected byte RESINSULTED9_10;
protected byte RESINSULTED9_11;
protected byte RESINSULTED9_12;
protected byte RESINSULTED9_2;
protected byte RESINSULTED9_3;
protected byte RESINSULTED9_4;
protected byte RESINSULTED9_5;
protected byte RESINSULTED9_6;
protected byte RESINSULTED9_7;
protected byte RESINSULTED9_8;
protected byte RESINSULTED9_9;
protected byte RESJOBDENY1;
protected byte RESJOBDENY2;
protected byte RESJOBDENY3;
protected byte RESJOBDENY4;
protected byte RESJOBDENY5;
protected byte RESJOBDENY6;
protected byte RESJOBDENY7;
protected byte RESJOBDENY8;
protected byte RESJOBDENY9;
protected byte RESJOBDENY96;
protected byte RESJOBDENY97;
protected boolean RESPF16;
protected boolean RESPF16_DV;
protected boolean RESPM16;
protected boolean RESPM16_DV;
protected byte RESUNSAFE1_1;
protected byte RESUNSAFE1_10;
protected byte RESUNSAFE1_11;
protected byte RESUNSAFE1_12;
protected byte RESUNSAFE1_2;
protected byte RESUNSAFE1_3;
protected byte RESUNSAFE1_4;
protected byte RESUNSAFE1_5;
protected byte RESUNSAFE1_6;
protected byte RESUNSAFE1_7;
protected byte RESUNSAFE1_8;
protected byte RESUNSAFE1_9;
protected byte RESUNSAFE2_1;
protected byte RESUNSAFE2_10;
protected byte RESUNSAFE2_11;
protected byte RESUNSAFE2_12;
protected byte RESUNSAFE2_2;
protected byte RESUNSAFE2_3;
protected byte RESUNSAFE2_4;
protected byte RESUNSAFE2_5;
protected byte RESUNSAFE2_6;
protected byte RESUNSAFE2_7;
protected byte RESUNSAFE2_8;
protected byte RESUNSAFE2_9;
protected byte RESUNSAFE3_1;
protected byte RESUNSAFE3_10;
protected byte RESUNSAFE3_11;
protected byte RESUNSAFE3_12;
protected byte RESUNSAFE3_2;
protected byte RESUNSAFE3_3;
protected byte RESUNSAFE3_4;
protected byte RESUNSAFE3_5;
protected byte RESUNSAFE3_6;
protected byte RESUNSAFE3_7;
protected byte RESUNSAFE3_8;
protected byte RESUNSAFE3_9;
protected byte RESUNSAFE4_1;
protected byte RESUNSAFE4_10;
protected byte RESUNSAFE4_11;
protected byte RESUNSAFE4_12;
protected byte RESUNSAFE4_2;
protected byte RESUNSAFE4_3;
protected byte RESUNSAFE4_4;
protected byte RESUNSAFE4_5;
protected byte RESUNSAFE4_6;
protected byte RESUNSAFE4_7;
protected byte RESUNSAFE4_8;
protected byte RESUNSAFE4_9;
protected byte RESUNSAFE5_1;
protected byte RESUNSAFE5_10;
protected byte RESUNSAFE5_11;
protected byte RESUNSAFE5_12;
protected byte RESUNSAFE5_2;
protected byte RESUNSAFE5_3;
protected byte RESUNSAFE5_4;
protected byte RESUNSAFE5_5;
protected byte RESUNSAFE5_6;
protected byte RESUNSAFE5_7;
protected byte RESUNSAFE5_8;
protected byte RESUNSAFE5_9;
protected byte RESUNSAFE6_1;
protected byte RESUNSAFE6_10;
protected byte RESUNSAFE6_11;
protected byte RESUNSAFE6_12;
protected byte RESUNSAFE6_2;
protected byte RESUNSAFE6_3;
protected byte RESUNSAFE6_4;
protected byte RESUNSAFE6_5;
protected byte RESUNSAFE6_6;
protected byte RESUNSAFE6_7;
protected byte RESUNSAFE6_8;
protected byte RESUNSAFE6_9;
protected byte RESUNSAFE7_1;
protected byte RESUNSAFE7_10;
protected byte RESUNSAFE7_11;
protected byte RESUNSAFE7_12;
protected byte RESUNSAFE7_2;
protected byte RESUNSAFE7_3;
protected byte RESUNSAFE7_4;
protected byte RESUNSAFE7_5;
protected byte RESUNSAFE7_6;
protected byte RESUNSAFE7_7;
protected byte RESUNSAFE7_8;
protected byte RESUNSAFE7_9;
protected byte RESUNSAFE8_1;
protected byte RESUNSAFE8_10;
protected byte RESUNSAFE8_11;
protected byte RESUNSAFE8_12;
protected byte RESUNSAFE8_2;
protected byte RESUNSAFE8_3;
protected byte RESUNSAFE8_4;
protected byte RESUNSAFE8_5;
protected byte RESUNSAFE8_6;
protected byte RESUNSAFE8_7;
protected byte RESUNSAFE8_8;
protected byte RESUNSAFE8_9;
protected byte RESUNSAFE96_1;
protected byte RESUNSAFE96_10;
protected byte RESUNSAFE96_11;
protected byte RESUNSAFE96_12;
protected byte RESUNSAFE96_2;
protected byte RESUNSAFE96_3;
protected byte RESUNSAFE96_4;
protected byte RESUNSAFE96_5;
protected byte RESUNSAFE96_6;
protected byte RESUNSAFE96_7;
protected byte RESUNSAFE96_8;
protected byte RESUNSAFE96_9;
protected byte RESUNSAFE97_1;
protected byte RESUNSAFE97_10;
protected byte RESUNSAFE97_11;
protected byte RESUNSAFE97_12;
protected byte RESUNSAFE97_2;
protected byte RESUNSAFE97_3;
protected byte RESUNSAFE97_4;
protected byte RESUNSAFE97_5;
protected byte RESUNSAFE97_6;
protected byte RESUNSAFE97_7;
protected byte RESUNSAFE97_8;
protected byte RESUNSAFE97_9;
protected byte RESUNSAFE9_1;
protected byte RESUNSAFE9_10;
protected byte RESUNSAFE9_11;
protected byte RESUNSAFE9_12;
protected byte RESUNSAFE9_2;
protected byte RESUNSAFE9_3;
protected byte RESUNSAFE9_4;
protected byte RESUNSAFE9_5;
protected byte RESUNSAFE9_6;
protected byte RESUNSAFE9_7;
protected byte RESUNSAFE9_8;
protected byte RESUNSAFE9_9;
protected byte RETAMT;
protected byte RETCHK;
protected byte RETSUF;
protected byte RHLAND_CODE;
protected boolean RINGFENCE;
protected byte RPHMOB_CODE;
protected byte RPHWRK_CODE;
protected byte RTCON1;
protected byte RTCON2;
protected byte RTCON3;
protected byte RTCON4;
protected byte RTEXPJB;
protected byte RTFND1;
protected byte RTFND10;
protected byte RTFND2;
protected byte RTFND3;
protected byte RTFND4;
protected byte RTFND5;
protected byte RTFND6;
protected byte RTFND7;
protected byte RTFND8;
protected byte RTFND9;
protected byte RTFND96;
protected byte RTPRO1;
protected byte RTPRO2;
protected byte RTPRO3;
protected byte RTPRO4;
protected byte RTPRO5;
protected byte RTPRO6;
protected byte RULESKID;
protected byte SAMEJOB;
protected short SAMPST;
protected byte SCAC;
protected byte SCDASCOH_DV;
protected byte SCDASSAT_DV;
protected boolean SCDATA_DV;
protected byte SCFINEMB;
protected byte SCFINSMALL;
protected boolean SCFLADV;
protected byte SCHLLOC;
protected byte SCHOK;
protected byte SCHOOLCNTRY1;
protected byte SCHOOLCNTRY2;
protected byte SCHOOLCNTRY3;
protected byte SCHOOLCNTRY4;
protected byte SCHOOLCNTRY5;
protected byte SCHOOL_CAWI;
protected byte SCLFSAT1;
protected byte SCLFSAT2;
protected byte SCLFSAT7;
protected byte SCLFSATO;
protected byte SCPAROUTINT;
protected byte SCPAYCODEA11;
protected byte SCPAYCODEA12;
protected byte SCPAYCODEA13;
protected byte SCPAYCODEA14;
protected byte SCPAYCODEA15;
protected byte SCPAYCODEA16;
protected byte SCPAYCODEA17;
protected byte SCPAYCODEA18;
protected byte SCPAYCODEB11;
protected byte SCPAYCODEB12;
protected byte SCPAYCODEB13;
protected byte SCPAYCODEB14;
protected byte SCPAYCODEB15;
protected byte SCPAYCODEB16;
protected byte SCPAYCODEB17;
protected byte SCPAYCODEB18;
protected byte SCPAYREA;
protected byte SCPAYREB;
protected byte SCRELHAPPY;
protected byte SCRELPARAR;
protected byte SCRELPARCD;
protected byte SCRELPARDS;
protected byte SCRELPAREI;
protected byte SCRELPARIR;
protected byte SCRELPARKS;
protected byte SCRELPARRG;
protected byte SCRELPARWT;
protected byte SCRF1;
protected byte SCRF2;
protected byte SCRF3;
protected byte SCRF4;
protected byte SCRF5;
protected byte SCRF6;
protected byte SCRF97;
protected byte SCRX_CODE;
protected byte SCSF1;
protected byte SCSF2A;
protected byte SCSF2B;
protected byte SCSF3A;
protected byte SCSF3B;
protected byte SCSF4A;
protected byte SCSF4B;
protected byte SCSF5;
protected byte SCSF6A;
protected byte SCSF6B;
protected byte SCSF6C;
protected byte SCSF7;
protected byte SCUN1;
protected byte SCUN2;
protected byte SCUN3;
protected byte SCUN97;
protected byte SCUX_CODE;
protected byte SCWEMWBA;
protected byte SCWEMWBB;
protected byte SCWEMWBC;
protected byte SCWEMWBD;
protected byte SCWEMWBE;
protected byte SCWEMWBF;
protected byte SCWEMWBG;
protected double SEEARNGRS_DV;
protected byte SEEARNGRS_IF;
protected double SEEARNNET_DV;
protected byte SEEKID;
protected byte SEXUOR;
protected byte SEX_DV;
protected byte SF1;
protected double SF12MCS_DV;
protected double SF12PCS_DV;
protected byte SIBHIT;
protected byte SIBLING;
protected byte SIBSTEAL;
protected byte SIBTEASE;
protected byte SIBVERAB;
protected boolean SINGLE_DV;
protected byte SLAPKID;
protected byte SLP_QUAL;
protected byte SMARTMOB;
protected byte SMKMNTH11;
protected byte SMKMNTH12;
protected byte SMKMNTH13;
protected byte SMKMNTH21;
protected byte SMKMNTH22;
protected byte SMKMNTH23;
protected byte SMKMNTH31;
protected byte SMKMNTH32;
protected byte SMKMNTH33;
protected short SMOKER;
protected byte SOCCONT;
protected byte SOCIALKID;
protected byte SPPEN;
protected int SPPID;
protected byte SPPNO;
protected byte STATCM1;
protected byte STATCM2;
protected byte STATCM3;
protected byte STATCM4;
protected short STATCY41;
protected short STATCY42;
protected short STATCY43;
protected short STATCY44;
protected byte STATENDD1;
protected byte STATENDD2;
protected byte STATENDD3;
protected byte STATENDD4;
protected byte STATENDD5;
protected byte STATENDD6;
protected byte STATENDM1;
protected byte STATENDM2;
protected byte STATENDM3;
protected byte STATENDM4;
protected byte STATENDM5;
protected byte STATENDM6;
protected short STATENDY41;
protected short STATENDY42;
protected short STATENDY43;
protected short STATENDY44;
protected short STATENDY45;
protected short STATENDY46;
protected short STAYKID;
protected byte STAYKIDW;
protected byte STEALSIB;
protected byte STENDREAS1;
protected byte STENDREAS10;
protected byte STENDREAS11;
protected byte STENDREAS2;
protected byte STENDREAS3;
protected byte STENDREAS4;
protected byte STENDREAS5;
protected byte STENDREAS6;
protected byte STENDREAS7;
protected byte STENDREAS8;
protected byte STENDREAS9;
protected byte STENDREAS97;
protected byte STEPREL;
protected short STRATA;
protected byte SUSP;
protected byte SWEMWBS_DV;
protected byte TALKMATTER;
protected byte TEASESIB;
protected byte TLKF;
protected byte TLKM;
protected byte TRAINANY;
protected short TRAINDAYS1;
protected short TRAINDAYS2;
protected short TRAINDAYS3;
protected byte TRAINEND1;
protected byte TRAINEND2;
protected byte TRAINEND3;
protected byte TRAINHRS1;
protected byte TRAINHRS2;
protected byte TRAINHRS3;
protected byte TRAINN;
protected byte TRAINPURP11;
protected byte TRAINPURP12;
protected byte TRAINPURP13;
protected byte TRAINPURP21;
protected byte TRAINPURP22;
protected byte TRAINPURP23;
protected byte TRAINPURP31;
protected byte TRAINPURP32;
protected byte TRAINPURP33;
protected byte TRAINPURP41;
protected byte TRAINPURP42;
protected byte TRAINPURP43;
protected byte TRAINPURP51;
protected byte TRAINPURP52;
protected byte TRAINPURP53;
protected byte TRAINPURP61;
protected byte TRAINPURP62;
protected byte TRAINPURP63;
protected byte TRAINPURP71;
protected byte TRAINPURP72;
protected byte TRAINPURP73;
protected byte TRAINQUAL1;
protected byte TRAINQUAL2;
protected byte TRAINQUAL3;
protected byte TRQUAL1;
protected byte TRQUAL10;
protected byte TRQUAL11;
protected byte TRQUAL13;
protected byte TRQUAL15;
protected byte TRQUAL16;
protected byte TRQUAL17;
protected byte TRQUAL18;
protected byte TRQUAL19;
protected byte TRQUAL2;
protected byte TRQUAL20;
protected byte TRQUAL21;
protected byte TRQUAL22;
protected byte TRQUAL23;
protected byte TRQUAL24;
protected byte TRQUAL25;
protected byte TRQUAL26;
protected byte TRQUAL27;
protected byte TRQUAL28;
protected byte TRQUAL29;
protected byte TRQUAL3;
protected byte TRQUAL30;
protected byte TRQUAL31;
protected byte TRQUAL32;
protected byte TRQUAL33;
protected byte TRQUAL34;
protected byte TRQUAL4;
protected byte TRQUAL5;
protected byte TRQUAL6;
protected byte TRQUAL7;
protected byte TRQUAL8;
protected byte TRQUAL9;
protected byte TRWHO1;
protected byte TRWHO2;
protected byte TRWHO3;
protected byte TSLP_30M;
protected byte TSLP_CGH;
protected byte TSLP_WAK;
protected byte TSTA_AWK;
protected byte UKAHEAD;
protected byte UKBORN;
protected byte UKWELC;
protected byte UNDQUS;
protected byte UNIFIN1;
protected byte UNISUB1;
protected byte UNSAFE1;
protected byte UNSAFE10;
protected byte UNSAFE11;
protected byte UNSAFE2;
protected byte UNSAFE3;
protected byte UNSAFE4;
protected byte UNSAFE5;
protected byte UNSAFE6;
protected byte UNSAFE7;
protected byte UNSAFE8;
protected byte UNSAFE9;
protected byte UNSAFE96;
protected byte UNSAFE97;
protected byte UNSAFEO_CODE;
protected byte UNSAFE_DV;
protected byte UPSET;
protected byte URBAN_DV;
protected byte USBREAD1;
protected byte USBREAD2;
protected byte USBREAD3;
protected byte USBREAD4;
protected byte USBREAD5;
protected byte USBREAD6;
protected byte USBREAD7;
protected byte USDAIRY1;
protected byte USDAIRY2;
protected byte USDAIRY3;
protected byte USDAIRY4;
protected byte USDAIRY5;
protected byte USDAIRY6;
protected byte VDAY;
protected byte VDHRS;
protected byte VDMIN;
protected byte VEGEAMT;
protected byte VERABSIB;
protected byte VOLRECPER;
protected short VOTE1;
protected short VOTE2;
protected short VOTE3;
protected short VOTE4;
protected short VOTE5;
protected short VOTE6;
protected byte VOTE7;
protected byte VOTE8;
protected byte VOUCHLETTER;
protected byte VWHRS;
protected byte VWMIN;
protected byte WDAY;
protected byte WDHRS;
protected byte WDMIN;
protected byte WEKID;
protected byte WHODEAL;
protected byte WKFRUIT;
protected byte WKPLSAM;
protected byte WKVEGE;
protected byte WORKTRAV;
protected byte WWHRS;
protected byte WWMIN;
protected int XPBORROW;
protected int XPEARN1;
protected byte XPEARN1DK;
protected int XPEARN3;
protected byte XPEARN3DK;
protected int XPEARNG1;
protected byte XPEARNG1DK;
protected int XPEARNG3;
protected byte XPEARNG3DK;
protected byte XPMOVE;
protected byte XPMVMNTH;
protected byte XPMVWHN;
protected byte XPMVWHR;
protected short XPMVYR;
protected int XPTUITION;
protected byte XTRA5MINOSM_DV;
protected byte XTRA5MIN_DV;
protected byte YAJBSRV1;
protected byte YAJBSRV2;
protected byte YAJBSRV3;
protected byte YAJBSRV4;
protected byte YAJBSRV5;
protected byte YAJBSRV7;
protected byte YAJBSRV8;
protected byte YAJBSRV96;
protected byte YANSSEC5_DV;
protected short YASOC00_CC;
protected short YASOC10_CC;
protected byte YASOC90_CC;
protected byte YELLKID;
protected byte YPNETCHT;
protected byte YPNPAL;
protected byte YPSOCWEB;
protected final void initADCTS(String s) {
if (!s.trim().isEmpty()) {
ADCTS = Byte.parseByte(s);
} else {
ADCTS = Byte.MIN_VALUE;
}
}

protected final void initADDPAYA(String s) {
if (!s.trim().isEmpty()) {
ADDPAYA = Byte.parseByte(s);
} else {
ADDPAYA = Byte.MIN_VALUE;
}
}

protected final void initADDPAYB(String s) {
if (!s.trim().isEmpty()) {
ADDPAYB = Byte.parseByte(s);
} else {
ADDPAYB = Byte.MIN_VALUE;
}
}

protected final void initADLA(String s) {
if (!s.trim().isEmpty()) {
ADLA = Byte.parseByte(s);
} else {
ADLA = Byte.MIN_VALUE;
}
}

protected final void initADLAD(String s) {
if (!s.trim().isEmpty()) {
ADLAD = Byte.parseByte(s);
} else {
ADLAD = Byte.MIN_VALUE;
}
}

protected final void initADLB(String s) {
if (!s.trim().isEmpty()) {
ADLB = Byte.parseByte(s);
} else {
ADLB = Byte.MIN_VALUE;
}
}

protected final void initADLBD(String s) {
if (!s.trim().isEmpty()) {
ADLBD = Byte.parseByte(s);
} else {
ADLBD = Byte.MIN_VALUE;
}
}

protected final void initADLC(String s) {
if (!s.trim().isEmpty()) {
ADLC = Byte.parseByte(s);
} else {
ADLC = Byte.MIN_VALUE;
}
}

protected final void initADLCD(String s) {
if (!s.trim().isEmpty()) {
ADLCD = Byte.parseByte(s);
} else {
ADLCD = Byte.MIN_VALUE;
}
}

protected final void initADLD(String s) {
if (!s.trim().isEmpty()) {
ADLD = Byte.parseByte(s);
} else {
ADLD = Byte.MIN_VALUE;
}
}

protected final void initADLDD(String s) {
if (!s.trim().isEmpty()) {
ADLDD = Byte.parseByte(s);
} else {
ADLDD = Byte.MIN_VALUE;
}
}

protected final void initADLE(String s) {
if (!s.trim().isEmpty()) {
ADLE = Byte.parseByte(s);
} else {
ADLE = Byte.MIN_VALUE;
}
}

protected final void initADLED(String s) {
if (!s.trim().isEmpty()) {
ADLED = Byte.parseByte(s);
} else {
ADLED = Byte.MIN_VALUE;
}
}

protected final void initADLF(String s) {
if (!s.trim().isEmpty()) {
ADLF = Byte.parseByte(s);
} else {
ADLF = Byte.MIN_VALUE;
}
}

protected final void initADLFD(String s) {
if (!s.trim().isEmpty()) {
ADLFD = Byte.parseByte(s);
} else {
ADLFD = Byte.MIN_VALUE;
}
}

protected final void initADLG(String s) {
if (!s.trim().isEmpty()) {
ADLG = Byte.parseByte(s);
} else {
ADLG = Byte.MIN_VALUE;
}
}

protected final void initADLGD(String s) {
if (!s.trim().isEmpty()) {
ADLGD = Byte.parseByte(s);
} else {
ADLGD = Byte.MIN_VALUE;
}
}

protected final void initADLH(String s) {
if (!s.trim().isEmpty()) {
ADLH = Byte.parseByte(s);
} else {
ADLH = Byte.MIN_VALUE;
}
}

protected final void initADLHD(String s) {
if (!s.trim().isEmpty()) {
ADLHD = Byte.parseByte(s);
} else {
ADLHD = Byte.MIN_VALUE;
}
}

protected final void initADLI(String s) {
if (!s.trim().isEmpty()) {
ADLI = Byte.parseByte(s);
} else {
ADLI = Byte.MIN_VALUE;
}
}

protected final void initADLID(String s) {
if (!s.trim().isEmpty()) {
ADLID = Byte.parseByte(s);
} else {
ADLID = Byte.MIN_VALUE;
}
}

protected final void initADLJ(String s) {
if (!s.trim().isEmpty()) {
ADLJ = Byte.parseByte(s);
} else {
ADLJ = Byte.MIN_VALUE;
}
}

protected final void initADLJD(String s) {
if (!s.trim().isEmpty()) {
ADLJD = Byte.parseByte(s);
} else {
ADLJD = Byte.MIN_VALUE;
}
}

protected final void initADLK(String s) {
if (!s.trim().isEmpty()) {
ADLK = Byte.parseByte(s);
} else {
ADLK = Byte.MIN_VALUE;
}
}

protected final void initADLKD(String s) {
if (!s.trim().isEmpty()) {
ADLKD = Byte.parseByte(s);
} else {
ADLKD = Byte.MIN_VALUE;
}
}

protected final void initADLL(String s) {
if (!s.trim().isEmpty()) {
ADLL = Byte.parseByte(s);
} else {
ADLL = Byte.MIN_VALUE;
}
}

protected final void initADLLD(String s) {
if (!s.trim().isEmpty()) {
ADLLD = Byte.parseByte(s);
} else {
ADLLD = Byte.MIN_VALUE;
}
}

protected final void initADLM(String s) {
if (!s.trim().isEmpty()) {
ADLM = Byte.parseByte(s);
} else {
ADLM = Byte.MIN_VALUE;
}
}

protected final void initADLMD(String s) {
if (!s.trim().isEmpty()) {
ADLMD = Byte.parseByte(s);
} else {
ADLMD = Byte.MIN_VALUE;
}
}

protected final void initADLN(String s) {
if (!s.trim().isEmpty()) {
ADLN = Byte.parseByte(s);
} else {
ADLN = Byte.MIN_VALUE;
}
}

protected final void initADLND(String s) {
if (!s.trim().isEmpty()) {
ADLND = Byte.parseByte(s);
} else {
ADLND = Byte.MIN_VALUE;
}
}

protected final void initAEDROF1(String s) {
if (!s.trim().isEmpty()) {
AEDROF1 = Byte.parseByte(s);
} else {
AEDROF1 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF2(String s) {
if (!s.trim().isEmpty()) {
AEDROF2 = Byte.parseByte(s);
} else {
AEDROF2 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF3(String s) {
if (!s.trim().isEmpty()) {
AEDROF3 = Byte.parseByte(s);
} else {
AEDROF3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA1(String s) {
if (!s.trim().isEmpty()) {
AEPUDA1 = Double.parseDouble(s);
} else {
AEPUDA1 = Double.NaN;
}
}

protected final void initAEPUDA2(String s) {
if (!s.trim().isEmpty()) {
AEPUDA2 = Byte.parseByte(s);
} else {
AEPUDA2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA3(String s) {
if (!s.trim().isEmpty()) {
AEPUDA3 = Byte.parseByte(s);
} else {
AEPUDA3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK1(String s) {
if (!s.trim().isEmpty()) {
AEPUWK1 = Byte.parseByte(s);
} else {
AEPUWK1 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK2(String s) {
if (!s.trim().isEmpty()) {
AEPUWK2 = Byte.parseByte(s);
} else {
AEPUWK2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK3(String s) {
if (!s.trim().isEmpty()) {
AEPUWK3 = Byte.parseByte(s);
} else {
AEPUWK3 = Byte.MIN_VALUE;
}
}

protected final void initAGE2UK(String s) {
if (!s.trim().isEmpty()) {
AGE2UK = Byte.parseByte(s);
} else {
AGE2UK = Byte.MIN_VALUE;
}
}

protected final void initAGE2UKC(String s) {
if (!s.trim().isEmpty()) {
AGE2UKC = Byte.parseByte(s);
} else {
AGE2UKC = Byte.MIN_VALUE;
}
}

protected final void initAGEGR10_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR10_DV = Byte.parseByte(s);
} else {
AGEGR10_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR13_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR13_DV = Byte.parseByte(s);
} else {
AGEGR13_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR5_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR5_DV = Byte.parseByte(s);
} else {
AGEGR5_DV = Byte.MIN_VALUE;
}
}

protected final void initAGERET(String s) {
if (!s.trim().isEmpty()) {
AGERET = Byte.parseByte(s);
} else {
AGERET = Byte.MIN_VALUE;
}
}

protected final void initAGE_DV(String s) {
if (!s.trim().isEmpty()) {
AGE_DV = Short.parseShort(s);
} else {
AGE_DV = Short.MIN_VALUE;
}
}

protected final void initAHVWELL(String s) {
if (!s.trim().isEmpty()) {
AHVWELL = Byte.parseByte(s);
} else {
AHVWELL = Byte.MIN_VALUE;
}
}

protected final void initAIDEFT(String s) {
if (!s.trim().isEmpty()) {
AIDEFT = Byte.parseByte(s);
} else {
AIDEFT = Byte.MIN_VALUE;
}
}

protected final void initAIDHU1(String s) {
if (!s.trim().isEmpty()) {
AIDHU1 = Short.parseShort(s);
} else {
AIDHU1 = Short.MIN_VALUE;
}
}

protected final void initAIDHU2(String s) {
if (!s.trim().isEmpty()) {
AIDHU2 = Short.parseShort(s);
} else {
AIDHU2 = Short.MIN_VALUE;
}
}

protected final void initAIDHUA1(String s) {
if (!s.trim().isEmpty()) {
AIDHUA1 = Byte.parseByte(s);
} else {
AIDHUA1 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA10(String s) {
if (!s.trim().isEmpty()) {
AIDHUA10 = Byte.parseByte(s);
} else {
AIDHUA10 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA11(String s) {
if (!s.trim().isEmpty()) {
AIDHUA11 = Byte.parseByte(s);
} else {
AIDHUA11 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA12(String s) {
if (!s.trim().isEmpty()) {
AIDHUA12 = Byte.parseByte(s);
} else {
AIDHUA12 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA13(String s) {
if (!s.trim().isEmpty()) {
AIDHUA13 = Byte.parseByte(s);
} else {
AIDHUA13 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA14(String s) {
if (!s.trim().isEmpty()) {
AIDHUA14 = Byte.parseByte(s);
} else {
AIDHUA14 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA15(String s) {
if (!s.trim().isEmpty()) {
AIDHUA15 = Byte.parseByte(s);
} else {
AIDHUA15 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA16(String s) {
if (!s.trim().isEmpty()) {
AIDHUA16 = Byte.parseByte(s);
} else {
AIDHUA16 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA2(String s) {
if (!s.trim().isEmpty()) {
AIDHUA2 = Byte.parseByte(s);
} else {
AIDHUA2 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA3(String s) {
if (!s.trim().isEmpty()) {
AIDHUA3 = Byte.parseByte(s);
} else {
AIDHUA3 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA4(String s) {
if (!s.trim().isEmpty()) {
AIDHUA4 = Byte.parseByte(s);
} else {
AIDHUA4 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA5(String s) {
if (!s.trim().isEmpty()) {
AIDHUA5 = Byte.parseByte(s);
} else {
AIDHUA5 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA6(String s) {
if (!s.trim().isEmpty()) {
AIDHUA6 = Byte.parseByte(s);
} else {
AIDHUA6 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA7(String s) {
if (!s.trim().isEmpty()) {
AIDHUA7 = Byte.parseByte(s);
} else {
AIDHUA7 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA8(String s) {
if (!s.trim().isEmpty()) {
AIDHUA8 = Byte.parseByte(s);
} else {
AIDHUA8 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA9(String s) {
if (!s.trim().isEmpty()) {
AIDHUA9 = Byte.parseByte(s);
} else {
AIDHUA9 = Byte.MIN_VALUE;
}
}

protected final void initALLCOSTA(String s) {
if (!s.trim().isEmpty()) {
ALLCOSTA = Byte.parseByte(s);
} else {
ALLCOSTA = Byte.MIN_VALUE;
}
}

protected final void initALLCOSTB(String s) {
if (!s.trim().isEmpty()) {
ALLCOSTB = Byte.parseByte(s);
} else {
ALLCOSTB = Byte.MIN_VALUE;
}
}

protected final void initANYPAYA(String s) {
if (!s.trim().isEmpty()) {
ANYPAYA = Byte.parseByte(s);
} else {
ANYPAYA = Byte.MIN_VALUE;
}
}

protected final void initANYPAYB(String s) {
if (!s.trim().isEmpty()) {
ANYPAYB = Byte.parseByte(s);
} else {
ANYPAYB = Byte.MIN_VALUE;
}
}

protected final void initAPVOCIMP(String s) {
if (!s.trim().isEmpty()) {
APVOCIMP = Byte.parseByte(s);
} else {
APVOCIMP = Byte.MIN_VALUE;
}
}

protected final void initAREA(String s) {
if (!s.trim().isEmpty()) {
AREA = Byte.parseByte(s);
} else {
AREA = Byte.MIN_VALUE;
}
}

protected final void initARGF(String s) {
if (!s.trim().isEmpty()) {
ARGF = Byte.parseByte(s);
} else {
ARGF = Byte.MIN_VALUE;
}
}

protected final void initARGM(String s) {
if (!s.trim().isEmpty()) {
ARGM = Byte.parseByte(s);
} else {
ARGM = Byte.MIN_VALUE;
}
}

protected final void initATTACKED1(String s) {
if (!s.trim().isEmpty()) {
ATTACKED1 = Byte.parseByte(s);
} else {
ATTACKED1 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED10(String s) {
if (!s.trim().isEmpty()) {
ATTACKED10 = Byte.parseByte(s);
} else {
ATTACKED10 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED11(String s) {
if (!s.trim().isEmpty()) {
ATTACKED11 = Byte.parseByte(s);
} else {
ATTACKED11 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED2(String s) {
if (!s.trim().isEmpty()) {
ATTACKED2 = Byte.parseByte(s);
} else {
ATTACKED2 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED3(String s) {
if (!s.trim().isEmpty()) {
ATTACKED3 = Byte.parseByte(s);
} else {
ATTACKED3 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED4(String s) {
if (!s.trim().isEmpty()) {
ATTACKED4 = Byte.parseByte(s);
} else {
ATTACKED4 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED5(String s) {
if (!s.trim().isEmpty()) {
ATTACKED5 = Byte.parseByte(s);
} else {
ATTACKED5 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED6(String s) {
if (!s.trim().isEmpty()) {
ATTACKED6 = Byte.parseByte(s);
} else {
ATTACKED6 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED7(String s) {
if (!s.trim().isEmpty()) {
ATTACKED7 = Byte.parseByte(s);
} else {
ATTACKED7 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED8(String s) {
if (!s.trim().isEmpty()) {
ATTACKED8 = Byte.parseByte(s);
} else {
ATTACKED8 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED9(String s) {
if (!s.trim().isEmpty()) {
ATTACKED9 = Byte.parseByte(s);
} else {
ATTACKED9 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED96(String s) {
if (!s.trim().isEmpty()) {
ATTACKED96 = Byte.parseByte(s);
} else {
ATTACKED96 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED97(String s) {
if (!s.trim().isEmpty()) {
ATTACKED97 = Byte.parseByte(s);
} else {
ATTACKED97 = Byte.MIN_VALUE;
}
}

protected final void initATTACKEDO_CODE(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDO_CODE = Byte.parseByte(s);
} else {
ATTACKEDO_CODE = Byte.MIN_VALUE;
}
}

protected final void initATTACKED_DV(String s) {
if (!s.trim().isEmpty()) {
ATTACKED_DV = Byte.parseByte(s);
} else {
ATTACKED_DV = Byte.MIN_VALUE;
}
}

protected final void initAUDITC1(String s) {
if (!s.trim().isEmpty()) {
AUDITC1 = Byte.parseByte(s);
} else {
AUDITC1 = Byte.MIN_VALUE;
}
}

protected final void initAUDITC2(String s) {
if (!s.trim().isEmpty()) {
AUDITC2 = Byte.parseByte(s);
} else {
AUDITC2 = Byte.MIN_VALUE;
}
}

protected final void initAUDITC3(String s) {
if (!s.trim().isEmpty()) {
AUDITC3 = Byte.parseByte(s);
} else {
AUDITC3 = Byte.MIN_VALUE;
}
}

protected final void initAUDITC4(String s) {
if (!s.trim().isEmpty()) {
AUDITC4 = Byte.parseByte(s);
} else {
AUDITC4 = Byte.MIN_VALUE;
}
}

protected final void initAUDITC5(String s) {
if (!s.trim().isEmpty()) {
AUDITC5 = Byte.parseByte(s);
} else {
AUDITC5 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE1(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE1 = Byte.parseByte(s);
} else {
AVOIDANCE1 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE10(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE10 = Byte.parseByte(s);
} else {
AVOIDANCE10 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE11(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE11 = Byte.parseByte(s);
} else {
AVOIDANCE11 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE2(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE2 = Byte.parseByte(s);
} else {
AVOIDANCE2 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE3(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE3 = Byte.parseByte(s);
} else {
AVOIDANCE3 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE4(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE4 = Byte.parseByte(s);
} else {
AVOIDANCE4 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE5(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE5 = Byte.parseByte(s);
} else {
AVOIDANCE5 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE6(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE6 = Byte.parseByte(s);
} else {
AVOIDANCE6 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE7(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE7 = Byte.parseByte(s);
} else {
AVOIDANCE7 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE8(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE8 = Byte.parseByte(s);
} else {
AVOIDANCE8 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE9(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE9 = Byte.parseByte(s);
} else {
AVOIDANCE9 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE96(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE96 = Byte.parseByte(s);
} else {
AVOIDANCE96 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE97(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE97 = Byte.parseByte(s);
} else {
AVOIDANCE97 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEO_CODE(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEO_CODE = Byte.parseByte(s);
} else {
AVOIDANCEO_CODE = Byte.MIN_VALUE;
}
}

protected final void initAVOIDED_DV(String s) {
if (!s.trim().isEmpty()) {
AVOIDED_DV = Byte.parseByte(s);
} else {
AVOIDED_DV = Byte.MIN_VALUE;
}
}

protected final void initBASNSET(String s) {
if (!s.trim().isEmpty()) {
BASNSET = Byte.parseByte(s);
} else {
BASNSET = Byte.MIN_VALUE;
}
}

protected final void initBASRATE(String s) {
if (!s.trim().isEmpty()) {
BASRATE = Double.parseDouble(s);
} else {
BASRATE = Double.NaN;
}
}

protected final void initBASREST(String s) {
if (!s.trim().isEmpty()) {
BASREST = Byte.parseByte(s);
} else {
BASREST = Byte.MIN_VALUE;
}
}

protected final void initBENBASE1(String s) {
if (!s.trim().isEmpty()) {
BENBASE1 = Byte.parseByte(s);
} else {
BENBASE1 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE2(String s) {
if (!s.trim().isEmpty()) {
BENBASE2 = Byte.parseByte(s);
} else {
BENBASE2 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE3(String s) {
if (!s.trim().isEmpty()) {
BENBASE3 = Byte.parseByte(s);
} else {
BENBASE3 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE4(String s) {
if (!s.trim().isEmpty()) {
BENBASE4 = Byte.parseByte(s);
} else {
BENBASE4 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE96(String s) {
if (!s.trim().isEmpty()) {
BENBASE96 = Byte.parseByte(s);
} else {
BENBASE96 = Byte.MIN_VALUE;
}
}

protected final void initBENCTC(String s) {
if (!s.trim().isEmpty()) {
BENCTC = Byte.parseByte(s);
} else {
BENCTC = Byte.MIN_VALUE;
}
}

protected final void initBENDIS1(String s) {
if (!s.trim().isEmpty()) {
BENDIS1 = Byte.parseByte(s);
} else {
BENDIS1 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS10(String s) {
if (!s.trim().isEmpty()) {
BENDIS10 = Byte.parseByte(s);
} else {
BENDIS10 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS12(String s) {
if (!s.trim().isEmpty()) {
BENDIS12 = Byte.parseByte(s);
} else {
BENDIS12 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS2(String s) {
if (!s.trim().isEmpty()) {
BENDIS2 = Byte.parseByte(s);
} else {
BENDIS2 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS3(String s) {
if (!s.trim().isEmpty()) {
BENDIS3 = Byte.parseByte(s);
} else {
BENDIS3 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS4(String s) {
if (!s.trim().isEmpty()) {
BENDIS4 = Byte.parseByte(s);
} else {
BENDIS4 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS5(String s) {
if (!s.trim().isEmpty()) {
BENDIS5 = Byte.parseByte(s);
} else {
BENDIS5 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS7(String s) {
if (!s.trim().isEmpty()) {
BENDIS7 = Byte.parseByte(s);
} else {
BENDIS7 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS8(String s) {
if (!s.trim().isEmpty()) {
BENDIS8 = Byte.parseByte(s);
} else {
BENDIS8 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS96(String s) {
if (!s.trim().isEmpty()) {
BENDIS96 = Byte.parseByte(s);
} else {
BENDIS96 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS97(String s) {
if (!s.trim().isEmpty()) {
BENDIS97 = Byte.parseByte(s);
} else {
BENDIS97 = Byte.MIN_VALUE;
}
}

protected final void initBENESA(String s) {
if (!s.trim().isEmpty()) {
BENESA = Byte.parseByte(s);
} else {
BENESA = Byte.MIN_VALUE;
}
}

protected final void initBENLINK(String s) {
if (!s.trim().isEmpty()) {
BENLINK = Byte.parseByte(s);
} else {
BENLINK = Byte.MIN_VALUE;
}
}

protected final void initBENPEN1(String s) {
if (!s.trim().isEmpty()) {
BENPEN1 = Byte.parseByte(s);
} else {
BENPEN1 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN2(String s) {
if (!s.trim().isEmpty()) {
BENPEN2 = Byte.parseByte(s);
} else {
BENPEN2 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN3(String s) {
if (!s.trim().isEmpty()) {
BENPEN3 = Byte.parseByte(s);
} else {
BENPEN3 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN4(String s) {
if (!s.trim().isEmpty()) {
BENPEN4 = Byte.parseByte(s);
} else {
BENPEN4 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN5(String s) {
if (!s.trim().isEmpty()) {
BENPEN5 = Byte.parseByte(s);
} else {
BENPEN5 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN6(String s) {
if (!s.trim().isEmpty()) {
BENPEN6 = Byte.parseByte(s);
} else {
BENPEN6 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN7(String s) {
if (!s.trim().isEmpty()) {
BENPEN7 = Byte.parseByte(s);
} else {
BENPEN7 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN8(String s) {
if (!s.trim().isEmpty()) {
BENPEN8 = Byte.parseByte(s);
} else {
BENPEN8 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN96(String s) {
if (!s.trim().isEmpty()) {
BENPEN96 = Byte.parseByte(s);
} else {
BENPEN96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA2(String s) {
if (!s.trim().isEmpty()) {
BENSTA2 = Byte.parseByte(s);
} else {
BENSTA2 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA3(String s) {
if (!s.trim().isEmpty()) {
BENSTA3 = Byte.parseByte(s);
} else {
BENSTA3 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA4(String s) {
if (!s.trim().isEmpty()) {
BENSTA4 = Byte.parseByte(s);
} else {
BENSTA4 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA5(String s) {
if (!s.trim().isEmpty()) {
BENSTA5 = Byte.parseByte(s);
} else {
BENSTA5 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA6(String s) {
if (!s.trim().isEmpty()) {
BENSTA6 = Byte.parseByte(s);
} else {
BENSTA6 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA7(String s) {
if (!s.trim().isEmpty()) {
BENSTA7 = Byte.parseByte(s);
} else {
BENSTA7 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA96(String s) {
if (!s.trim().isEmpty()) {
BENSTA96 = Byte.parseByte(s);
} else {
BENSTA96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA97(String s) {
if (!s.trim().isEmpty()) {
BENSTA97 = Byte.parseByte(s);
} else {
BENSTA97 = Byte.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBREAKFST(String s) {
if (!s.trim().isEmpty()) {
BREAKFST = Byte.parseByte(s);
} else {
BREAKFST = Byte.MIN_VALUE;
}
}

protected final void initBUNO_DV(String s) {
if (!s.trim().isEmpty()) {
BUNO_DV = Byte.parseByte(s);
} else {
BUNO_DV = Byte.MIN_VALUE;
}
}

protected final void initCAIDU1(String s) {
if (!s.trim().isEmpty()) {
CAIDU1 = Byte.parseByte(s);
} else {
CAIDU1 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU2(String s) {
if (!s.trim().isEmpty()) {
CAIDU2 = Byte.parseByte(s);
} else {
CAIDU2 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU3(String s) {
if (!s.trim().isEmpty()) {
CAIDU3 = Byte.parseByte(s);
} else {
CAIDU3 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU4(String s) {
if (!s.trim().isEmpty()) {
CAIDU4 = Byte.parseByte(s);
} else {
CAIDU4 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU5(String s) {
if (!s.trim().isEmpty()) {
CAIDU5 = Byte.parseByte(s);
} else {
CAIDU5 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU6(String s) {
if (!s.trim().isEmpty()) {
CAIDU6 = Byte.parseByte(s);
} else {
CAIDU6 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU7(String s) {
if (!s.trim().isEmpty()) {
CAIDU7 = Byte.parseByte(s);
} else {
CAIDU7 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU8(String s) {
if (!s.trim().isEmpty()) {
CAIDU8 = Byte.parseByte(s);
} else {
CAIDU8 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU96(String s) {
if (!s.trim().isEmpty()) {
CAIDU96 = Byte.parseByte(s);
} else {
CAIDU96 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU97(String s) {
if (!s.trim().isEmpty()) {
CAIDU97 = Byte.parseByte(s);
} else {
CAIDU97 = Byte.MIN_VALUE;
}
}

protected final void initCASCH(String s) {
if (!s.trim().isEmpty()) {
CASCH = Byte.parseByte(s);
} else {
CASCH = Byte.MIN_VALUE;
}
}

protected final void initCASIINTNO(String s) {
if (!s.trim().isEmpty()) {
CASIINTNO = Integer.parseInt(s);
} else {
CASIINTNO = Integer.MIN_VALUE;
}
}

protected final void initCCARE(String s) {
if (!s.trim().isEmpty()) {
CCARE = Byte.parseByte(s);
} else {
CCARE = Byte.MIN_VALUE;
}
}

protected final void initCCWORK(String s) {
if (!s.trim().isEmpty()) {
CCWORK = Byte.parseByte(s);
} else {
CCWORK = Byte.MIN_VALUE;
}
}

protected final void initCH1BY4(String s) {
if (!s.trim().isEmpty()) {
CH1BY4 = Short.parseShort(s);
} else {
CH1BY4 = Short.MIN_VALUE;
}
}

protected final void initCHAID1(String s) {
if (!s.trim().isEmpty()) {
CHAID1 = Byte.parseByte(s);
} else {
CHAID1 = Byte.MIN_VALUE;
}
}

protected final void initCHAID2(String s) {
if (!s.trim().isEmpty()) {
CHAID2 = Byte.parseByte(s);
} else {
CHAID2 = Byte.MIN_VALUE;
}
}

protected final void initCHAID3(String s) {
if (!s.trim().isEmpty()) {
CHAID3 = Byte.parseByte(s);
} else {
CHAID3 = Byte.MIN_VALUE;
}
}

protected final void initCHAID4(String s) {
if (!s.trim().isEmpty()) {
CHAID4 = Byte.parseByte(s);
} else {
CHAID4 = Byte.MIN_VALUE;
}
}

protected final void initCHAID5(String s) {
if (!s.trim().isEmpty()) {
CHAID5 = Byte.parseByte(s);
} else {
CHAID5 = Byte.MIN_VALUE;
}
}

protected final void initCHAID6(String s) {
if (!s.trim().isEmpty()) {
CHAID6 = Byte.parseByte(s);
} else {
CHAID6 = Byte.MIN_VALUE;
}
}

protected final void initCHAID7(String s) {
if (!s.trim().isEmpty()) {
CHAID7 = Byte.parseByte(s);
} else {
CHAID7 = Byte.MIN_VALUE;
}
}

protected final void initCHAID8(String s) {
if (!s.trim().isEmpty()) {
CHAID8 = Byte.parseByte(s);
} else {
CHAID8 = Byte.MIN_VALUE;
}
}

protected final void initCHAID96(String s) {
if (!s.trim().isEmpty()) {
CHAID96 = Byte.parseByte(s);
} else {
CHAID96 = Byte.MIN_VALUE;
}
}

protected final void initCHAID97(String s) {
if (!s.trim().isEmpty()) {
CHAID97 = Byte.parseByte(s);
} else {
CHAID97 = Byte.MIN_VALUE;
}
}

protected final void initCHCON(String s) {
if (!s.trim().isEmpty()) {
CHCON = Byte.parseByte(s);
} else {
CHCON = Byte.MIN_VALUE;
}
}

protected final void initCHFAR(String s) {
if (!s.trim().isEmpty()) {
CHFAR = Byte.parseByte(s);
} else {
CHFAR = Byte.MIN_VALUE;
}
}

protected final void initCHILDPNO(String s) {
if (!s.trim().isEmpty()) {
CHILDPNO = Byte.parseByte(s);
} else {
CHILDPNO = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP1(String s) {
if (!s.trim().isEmpty()) {
CHKRESP1 = Byte.parseByte(s);
} else {
CHKRESP1 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP2(String s) {
if (!s.trim().isEmpty()) {
CHKRESP2 = Byte.parseByte(s);
} else {
CHKRESP2 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP3(String s) {
if (!s.trim().isEmpty()) {
CHKRESP3 = Byte.parseByte(s);
} else {
CHKRESP3 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP4(String s) {
if (!s.trim().isEmpty()) {
CHKRESP4 = Byte.parseByte(s);
} else {
CHKRESP4 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESPWEB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CHKRESPWEB = false;
} else {
CHKRESPWEB = true;
}
}
}

protected final void initCHKRESPWEB1(String s) {
if (!s.trim().isEmpty()) {
CHKRESPWEB1 = Byte.parseByte(s);
} else {
CHKRESPWEB1 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESPWEB2(String s) {
if (!s.trim().isEmpty()) {
CHKRESPWEB2 = Byte.parseByte(s);
} else {
CHKRESPWEB2 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESPWEB3(String s) {
if (!s.trim().isEmpty()) {
CHKRESPWEB3 = Byte.parseByte(s);
} else {
CHKRESPWEB3 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESPWEB4(String s) {
if (!s.trim().isEmpty()) {
CHKRESPWEB4 = Byte.parseByte(s);
} else {
CHKRESPWEB4 = Byte.MIN_VALUE;
}
}

protected final void initCHKWEBDOBD(String s) {
if (!s.trim().isEmpty()) {
CHKWEBDOBD = Byte.parseByte(s);
} else {
CHKWEBDOBD = Byte.MIN_VALUE;
}
}

protected final void initCHKWEBDOBM(String s) {
if (!s.trim().isEmpty()) {
CHKWEBDOBM = Byte.parseByte(s);
} else {
CHKWEBDOBM = Byte.MIN_VALUE;
}
}

protected final void initCHKWEBDOBY(String s) {
if (!s.trim().isEmpty()) {
CHKWEBDOBY = Short.parseShort(s);
} else {
CHKWEBDOBY = Short.MIN_VALUE;
}
}

protected final void initCHKWEBSEX(String s) {
if (!s.trim().isEmpty()) {
CHKWEBSEX = Byte.parseByte(s);
} else {
CHKWEBSEX = Byte.MIN_VALUE;
}
}

protected final void initCHSEE(String s) {
if (!s.trim().isEmpty()) {
CHSEE = Byte.parseByte(s);
} else {
CHSEE = Byte.MIN_VALUE;
}
}

protected final void initCITZN1(String s) {
if (!s.trim().isEmpty()) {
CITZN1 = Byte.parseByte(s);
} else {
CITZN1 = Byte.MIN_VALUE;
}
}

protected final void initCITZN2(String s) {
if (!s.trim().isEmpty()) {
CITZN2 = Byte.parseByte(s);
} else {
CITZN2 = Byte.MIN_VALUE;
}
}

protected final void initCITZN3(String s) {
if (!s.trim().isEmpty()) {
CITZN3 = Byte.parseByte(s);
} else {
CITZN3 = Byte.MIN_VALUE;
}
}

protected final void initCJBATT(String s) {
if (!s.trim().isEmpty()) {
CJBATT = Byte.parseByte(s);
} else {
CJBATT = Byte.MIN_VALUE;
}
}

protected final void initCJOB(String s) {
if (!s.trim().isEmpty()) {
CJOB = Byte.parseByte(s);
} else {
CJOB = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO1(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO1 = Byte.parseByte(s);
} else {
CMCOKIDNO1 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO10(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO10 = Byte.parseByte(s);
} else {
CMCOKIDNO10 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO11(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO11 = Byte.parseByte(s);
} else {
CMCOKIDNO11 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO12(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO12 = Byte.parseByte(s);
} else {
CMCOKIDNO12 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO13(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO13 = Byte.parseByte(s);
} else {
CMCOKIDNO13 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO14(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO14 = Byte.parseByte(s);
} else {
CMCOKIDNO14 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO15(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO15 = Byte.parseByte(s);
} else {
CMCOKIDNO15 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO16(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO16 = Byte.parseByte(s);
} else {
CMCOKIDNO16 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO2(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO2 = Byte.parseByte(s);
} else {
CMCOKIDNO2 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO3(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO3 = Byte.parseByte(s);
} else {
CMCOKIDNO3 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO4(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO4 = Byte.parseByte(s);
} else {
CMCOKIDNO4 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO5(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO5 = Byte.parseByte(s);
} else {
CMCOKIDNO5 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO6(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO6 = Byte.parseByte(s);
} else {
CMCOKIDNO6 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO7(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO7 = Byte.parseByte(s);
} else {
CMCOKIDNO7 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO8(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO8 = Byte.parseByte(s);
} else {
CMCOKIDNO8 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO9(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO9 = Byte.parseByte(s);
} else {
CMCOKIDNO9 = Byte.MIN_VALUE;
}
}

protected final void initCMCORD(String s) {
if (!s.trim().isEmpty()) {
CMCORD = Byte.parseByte(s);
} else {
CMCORD = Byte.MIN_VALUE;
}
}

protected final void initCMCORDALL(String s) {
if (!s.trim().isEmpty()) {
CMCORDALL = Byte.parseByte(s);
} else {
CMCORDALL = Byte.MIN_VALUE;
}
}

protected final void initCMCORDAM(String s) {
if (!s.trim().isEmpty()) {
CMCORDAM = Double.parseDouble(s);
} else {
CMCORDAM = Double.NaN;
}
}

protected final void initCMCORDPER(String s) {
if (!s.trim().isEmpty()) {
CMCORDPER = Byte.parseByte(s);
} else {
CMCORDPER = Byte.MIN_VALUE;
}
}

protected final void initCMCORDRCAM(String s) {
if (!s.trim().isEmpty()) {
CMCORDRCAM = Short.parseShort(s);
} else {
CMCORDRCAM = Short.MIN_VALUE;
}
}

protected final void initCMCORDRCPR(String s) {
if (!s.trim().isEmpty()) {
CMCORDRCPR = Byte.parseByte(s);
} else {
CMCORDRCPR = Byte.MIN_VALUE;
}
}

protected final void initCMCORDREC(String s) {
if (!s.trim().isEmpty()) {
CMCORDREC = Byte.parseByte(s);
} else {
CMCORDREC = Byte.MIN_VALUE;
}
}

protected final void initCMCORDTM(String s) {
if (!s.trim().isEmpty()) {
CMCORDTM = Byte.parseByte(s);
} else {
CMCORDTM = Byte.MIN_VALUE;
}
}

protected final void initCMCSAACT(String s) {
if (!s.trim().isEmpty()) {
CMCSAACT = Byte.parseByte(s);
} else {
CMCSAACT = Byte.MIN_VALUE;
}
}

protected final void initCMCSAALL(String s) {
if (!s.trim().isEmpty()) {
CMCSAALL = Byte.parseByte(s);
} else {
CMCSAALL = Byte.MIN_VALUE;
}
}

protected final void initCMCSAAM(String s) {
if (!s.trim().isEmpty()) {
CMCSAAM = Short.parseShort(s);
} else {
CMCSAAM = Short.MIN_VALUE;
}
}

protected final void initCMCSANIL1(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL1 = Byte.parseByte(s);
} else {
CMCSANIL1 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL2(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL2 = Byte.parseByte(s);
} else {
CMCSANIL2 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL3(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL3 = Byte.parseByte(s);
} else {
CMCSANIL3 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL4(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL4 = Byte.parseByte(s);
} else {
CMCSANIL4 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL5(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL5 = Byte.parseByte(s);
} else {
CMCSANIL5 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL6(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL6 = Byte.parseByte(s);
} else {
CMCSANIL6 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL7(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL7 = Byte.parseByte(s);
} else {
CMCSANIL7 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL8(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL8 = Byte.parseByte(s);
} else {
CMCSANIL8 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL9(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL9 = Byte.parseByte(s);
} else {
CMCSANIL9 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL97(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL97 = Byte.parseByte(s);
} else {
CMCSANIL97 = Byte.MIN_VALUE;
}
}

protected final void initCMCSAPER(String s) {
if (!s.trim().isEmpty()) {
CMCSAPER = Byte.parseByte(s);
} else {
CMCSAPER = Byte.MIN_VALUE;
}
}

protected final void initCMCSAPR(String s) {
if (!s.trim().isEmpty()) {
CMCSAPR = Byte.parseByte(s);
} else {
CMCSAPR = Byte.MIN_VALUE;
}
}

protected final void initCMFBAOP(String s) {
if (!s.trim().isEmpty()) {
CMFBAOP = Byte.parseByte(s);
} else {
CMFBAOP = Byte.MIN_VALUE;
}
}

protected final void initCMFLAG01(String s) {
if (!s.trim().isEmpty()) {
CMFLAG01 = Byte.parseByte(s);
} else {
CMFLAG01 = Byte.MIN_VALUE;
}
}

protected final void initCMFLAG02(String s) {
if (!s.trim().isEmpty()) {
CMFLAG02 = Byte.parseByte(s);
} else {
CMFLAG02 = Byte.MIN_VALUE;
}
}

protected final void initCMFLAG03(String s) {
if (!s.trim().isEmpty()) {
CMFLAG03 = Byte.parseByte(s);
} else {
CMFLAG03 = Byte.MIN_VALUE;
}
}

protected final void initCMFLAG04(String s) {
if (!s.trim().isEmpty()) {
CMFLAG04 = Byte.parseByte(s);
} else {
CMFLAG04 = Byte.MIN_VALUE;
}
}

protected final void initCMFLAG05(String s) {
if (!s.trim().isEmpty()) {
CMFLAG05 = Byte.parseByte(s);
} else {
CMFLAG05 = Byte.MIN_VALUE;
}
}

protected final void initCMFLAG06(String s) {
if (!s.trim().isEmpty()) {
CMFLAG06 = Byte.parseByte(s);
} else {
CMFLAG06 = Byte.MIN_VALUE;
}
}

protected final void initCMFLAG07(String s) {
if (!s.trim().isEmpty()) {
CMFLAG07 = Byte.parseByte(s);
} else {
CMFLAG07 = Byte.MIN_VALUE;
}
}

protected final void initCMFLAG08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CMFLAG08 = false;
} else {
CMFLAG08 = true;
}
}
}

protected final void initCMFLAG09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CMFLAG09 = false;
} else {
CMFLAG09 = true;
}
}
}

protected final void initCMFLAG10(String s) {
if (!s.trim().isEmpty()) {
CMFLAG10 = Byte.parseByte(s);
} else {
CMFLAG10 = Byte.MIN_VALUE;
}
}

protected final void initCMFLAG11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CMFLAG11 = false;
} else {
CMFLAG11 = true;
}
}
}

protected final void initCMFLAG12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CMFLAG12 = false;
} else {
CMFLAG12 = true;
}
}
}

protected final void initCMFLAG13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CMFLAG13 = false;
} else {
CMFLAG13 = true;
}
}
}

protected final void initCMFLAG14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CMFLAG14 = false;
} else {
CMFLAG14 = true;
}
}
}

protected final void initCMFLAG15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CMFLAG15 = false;
} else {
CMFLAG15 = true;
}
}
}

protected final void initCMFLAG16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CMFLAG16 = false;
} else {
CMFLAG16 = true;
}
}
}

protected final void initCMKNDEVR1(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR1 = Byte.parseByte(s);
} else {
CMKNDEVR1 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR2(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR2 = Byte.parseByte(s);
} else {
CMKNDEVR2 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR3(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR3 = Byte.parseByte(s);
} else {
CMKNDEVR3 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR4(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR4 = Byte.parseByte(s);
} else {
CMKNDEVR4 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR96(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR96 = Byte.parseByte(s);
} else {
CMKNDEVR96 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR97(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR97 = Byte.parseByte(s);
} else {
CMKNDEVR97 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT1(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT1 = Byte.parseByte(s);
} else {
CMLSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT2(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT2 = Byte.parseByte(s);
} else {
CMLSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT3(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT3 = Byte.parseByte(s);
} else {
CMLSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT4(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT4 = Byte.parseByte(s);
} else {
CMLSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL1(String s) {
if (!s.trim().isEmpty()) {
CMNIL1 = Byte.parseByte(s);
} else {
CMNIL1 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL10(String s) {
if (!s.trim().isEmpty()) {
CMNIL10 = Byte.parseByte(s);
} else {
CMNIL10 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL11(String s) {
if (!s.trim().isEmpty()) {
CMNIL11 = Byte.parseByte(s);
} else {
CMNIL11 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL12(String s) {
if (!s.trim().isEmpty()) {
CMNIL12 = Byte.parseByte(s);
} else {
CMNIL12 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL4(String s) {
if (!s.trim().isEmpty()) {
CMNIL4 = Byte.parseByte(s);
} else {
CMNIL4 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL5(String s) {
if (!s.trim().isEmpty()) {
CMNIL5 = Byte.parseByte(s);
} else {
CMNIL5 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL6(String s) {
if (!s.trim().isEmpty()) {
CMNIL6 = Byte.parseByte(s);
} else {
CMNIL6 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL7(String s) {
if (!s.trim().isEmpty()) {
CMNIL7 = Byte.parseByte(s);
} else {
CMNIL7 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL8(String s) {
if (!s.trim().isEmpty()) {
CMNIL8 = Byte.parseByte(s);
} else {
CMNIL8 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL9(String s) {
if (!s.trim().isEmpty()) {
CMNIL9 = Byte.parseByte(s);
} else {
CMNIL9 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL97(String s) {
if (!s.trim().isEmpty()) {
CMNIL97 = Byte.parseByte(s);
} else {
CMNIL97 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY1(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY1 = Byte.parseByte(s);
} else {
CMOTHPAY1 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY10(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY10 = Byte.parseByte(s);
} else {
CMOTHPAY10 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY11(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY11 = Byte.parseByte(s);
} else {
CMOTHPAY11 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY2(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY2 = Byte.parseByte(s);
} else {
CMOTHPAY2 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY3(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY3 = Byte.parseByte(s);
} else {
CMOTHPAY3 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY4(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY4 = Byte.parseByte(s);
} else {
CMOTHPAY4 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY5(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY5 = Byte.parseByte(s);
} else {
CMOTHPAY5 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY6(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY6 = Byte.parseByte(s);
} else {
CMOTHPAY6 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY7(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY7 = Byte.parseByte(s);
} else {
CMOTHPAY7 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY8(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY8 = Byte.parseByte(s);
} else {
CMOTHPAY8 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY9(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY9 = Byte.parseByte(s);
} else {
CMOTHPAY9 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY96(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY96 = Byte.parseByte(s);
} else {
CMOTHPAY96 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY97(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY97 = Byte.parseByte(s);
} else {
CMOTHPAY97 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE01(String s) {
if (!s.trim().isEmpty()) {
CMROUTE01 = Byte.parseByte(s);
} else {
CMROUTE01 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE02(String s) {
if (!s.trim().isEmpty()) {
CMROUTE02 = Byte.parseByte(s);
} else {
CMROUTE02 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE03(String s) {
if (!s.trim().isEmpty()) {
CMROUTE03 = Byte.parseByte(s);
} else {
CMROUTE03 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE04(String s) {
if (!s.trim().isEmpty()) {
CMROUTE04 = Byte.parseByte(s);
} else {
CMROUTE04 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE05(String s) {
if (!s.trim().isEmpty()) {
CMROUTE05 = Byte.parseByte(s);
} else {
CMROUTE05 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE06(String s) {
if (!s.trim().isEmpty()) {
CMROUTE06 = Byte.parseByte(s);
} else {
CMROUTE06 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE07(String s) {
if (!s.trim().isEmpty()) {
CMROUTE07 = Byte.parseByte(s);
} else {
CMROUTE07 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE08(String s) {
if (!s.trim().isEmpty()) {
CMROUTE08 = Byte.parseByte(s);
} else {
CMROUTE08 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE09(String s) {
if (!s.trim().isEmpty()) {
CMROUTE09 = Byte.parseByte(s);
} else {
CMROUTE09 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE10(String s) {
if (!s.trim().isEmpty()) {
CMROUTE10 = Byte.parseByte(s);
} else {
CMROUTE10 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE11(String s) {
if (!s.trim().isEmpty()) {
CMROUTE11 = Byte.parseByte(s);
} else {
CMROUTE11 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE12(String s) {
if (!s.trim().isEmpty()) {
CMROUTE12 = Byte.parseByte(s);
} else {
CMROUTE12 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
CMROUTE13 = false;
} else {
CMROUTE13 = true;
}
}
}

protected final void initCMROUTE14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
CMROUTE14 = false;
} else {
CMROUTE14 = true;
}
}
}

protected final void initCMROUTE15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
CMROUTE15 = false;
} else {
CMROUTE15 = true;
}
}
}

protected final void initCMROUTE16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
CMROUTE16 = false;
} else {
CMROUTE16 = true;
}
}
}

protected final void initCMSAMEA(String s) {
if (!s.trim().isEmpty()) {
CMSAMEA = Byte.parseByte(s);
} else {
CMSAMEA = Byte.MIN_VALUE;
}
}

protected final void initCMSAMEB(String s) {
if (!s.trim().isEmpty()) {
CMSAMEB = Byte.parseByte(s);
} else {
CMSAMEB = Byte.MIN_VALUE;
}
}

protected final void initCMSAMEC(String s) {
if (!s.trim().isEmpty()) {
CMSAMEC = Byte.parseByte(s);
} else {
CMSAMEC = Byte.MIN_VALUE;
}
}

protected final void initCMVOL(String s) {
if (!s.trim().isEmpty()) {
CMVOL = Byte.parseByte(s);
} else {
CMVOL = Byte.MIN_VALUE;
}
}

protected final void initCMVOLALL(String s) {
if (!s.trim().isEmpty()) {
CMVOLALL = Byte.parseByte(s);
} else {
CMVOLALL = Byte.MIN_VALUE;
}
}

protected final void initCMVOLAM(String s) {
if (!s.trim().isEmpty()) {
CMVOLAM = Double.parseDouble(s);
} else {
CMVOLAM = Double.NaN;
}
}

protected final void initCMVOLFIN(String s) {
if (!s.trim().isEmpty()) {
CMVOLFIN = Byte.parseByte(s);
} else {
CMVOLFIN = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO1(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO1 = Byte.parseByte(s);
} else {
CMVOLKIDNO1 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO10(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO10 = Byte.parseByte(s);
} else {
CMVOLKIDNO10 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO11(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO11 = Byte.parseByte(s);
} else {
CMVOLKIDNO11 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO12(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO12 = Byte.parseByte(s);
} else {
CMVOLKIDNO12 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO13(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO13 = Byte.parseByte(s);
} else {
CMVOLKIDNO13 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO14(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO14 = Byte.parseByte(s);
} else {
CMVOLKIDNO14 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO15(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO15 = Byte.parseByte(s);
} else {
CMVOLKIDNO15 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO16(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO16 = Byte.parseByte(s);
} else {
CMVOLKIDNO16 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO2(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO2 = Byte.parseByte(s);
} else {
CMVOLKIDNO2 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO3(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO3 = Byte.parseByte(s);
} else {
CMVOLKIDNO3 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO4(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO4 = Byte.parseByte(s);
} else {
CMVOLKIDNO4 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO5(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO5 = Byte.parseByte(s);
} else {
CMVOLKIDNO5 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO6(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO6 = Byte.parseByte(s);
} else {
CMVOLKIDNO6 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO7(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO7 = Byte.parseByte(s);
} else {
CMVOLKIDNO7 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO8(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO8 = Byte.parseByte(s);
} else {
CMVOLKIDNO8 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO9(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO9 = Byte.parseByte(s);
} else {
CMVOLKIDNO9 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLPER(String s) {
if (!s.trim().isEmpty()) {
CMVOLPER = Byte.parseByte(s);
} else {
CMVOLPER = Byte.MIN_VALUE;
}
}

protected final void initCMVOLRCAM(String s) {
if (!s.trim().isEmpty()) {
CMVOLRCAM = Short.parseShort(s);
} else {
CMVOLRCAM = Short.MIN_VALUE;
}
}

protected final void initCMVOLRCPR(String s) {
if (!s.trim().isEmpty()) {
CMVOLRCPR = Byte.parseByte(s);
} else {
CMVOLRCPR = Byte.MIN_VALUE;
}
}

protected final void initCMVOLREC(String s) {
if (!s.trim().isEmpty()) {
CMVOLREC = Byte.parseByte(s);
} else {
CMVOLREC = Byte.MIN_VALUE;
}
}

protected final void initCMVOLTM(String s) {
if (!s.trim().isEmpty()) {
CMVOLTM = Byte.parseByte(s);
} else {
CMVOLTM = Byte.MIN_VALUE;
}
}

protected final void initCOH1BM(String s) {
if (!s.trim().isEmpty()) {
COH1BM = Byte.parseByte(s);
} else {
COH1BM = Byte.MIN_VALUE;
}
}

protected final void initCOH1BY(String s) {
if (!s.trim().isEmpty()) {
COH1BY = Short.parseShort(s);
} else {
COH1BY = Short.MIN_VALUE;
}
}

protected final void initCOH1EM(String s) {
if (!s.trim().isEmpty()) {
COH1EM = Byte.parseByte(s);
} else {
COH1EM = Byte.MIN_VALUE;
}
}

protected final void initCOH1EY(String s) {
if (!s.trim().isEmpty()) {
COH1EY = Short.parseShort(s);
} else {
COH1EY = Short.MIN_VALUE;
}
}

protected final void initCOH1MR(String s) {
if (!s.trim().isEmpty()) {
COH1MR = Byte.parseByte(s);
} else {
COH1MR = Byte.MIN_VALUE;
}
}

protected final void initCOHAB(String s) {
if (!s.trim().isEmpty()) {
COHAB = Byte.parseByte(s);
} else {
COHAB = Byte.MIN_VALUE;
}
}

protected final void initCOHABN(String s) {
if (!s.trim().isEmpty()) {
COHABN = Byte.parseByte(s);
} else {
COHABN = Byte.MIN_VALUE;
}
}

protected final void initCOHAB_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
COHAB_DV = false;
} else {
COHAB_DV = true;
}
}
}

protected final void initCOMWACT31(String s) {
if (!s.trim().isEmpty()) {
COMWACT31 = Byte.parseByte(s);
} else {
COMWACT31 = Byte.MIN_VALUE;
}
}

protected final void initCOMWACT32(String s) {
if (!s.trim().isEmpty()) {
COMWACT32 = Byte.parseByte(s);
} else {
COMWACT32 = Byte.MIN_VALUE;
}
}

protected final void initCOMWACT33(String s) {
if (!s.trim().isEmpty()) {
COMWACT33 = Byte.parseByte(s);
} else {
COMWACT33 = Byte.MIN_VALUE;
}
}

protected final void initCOMWACT34(String s) {
if (!s.trim().isEmpty()) {
COMWACT34 = Byte.parseByte(s);
} else {
COMWACT34 = Byte.MIN_VALUE;
}
}

protected final void initCOMWACT35(String s) {
if (!s.trim().isEmpty()) {
COMWACT35 = Byte.parseByte(s);
} else {
COMWACT35 = Byte.MIN_VALUE;
}
}

protected final void initCOMWACT36(String s) {
if (!s.trim().isEmpty()) {
COMWACT36 = Byte.parseByte(s);
} else {
COMWACT36 = Byte.MIN_VALUE;
}
}

protected final void initCOMWACT37(String s) {
if (!s.trim().isEmpty()) {
COMWACT37 = Byte.parseByte(s);
} else {
COMWACT37 = Byte.MIN_VALUE;
}
}

protected final void initCOMWACT38(String s) {
if (!s.trim().isEmpty()) {
COMWACT38 = Byte.parseByte(s);
} else {
COMWACT38 = Byte.MIN_VALUE;
}
}

protected final void initCOMWACT396(String s) {
if (!s.trim().isEmpty()) {
COMWACT396 = Byte.parseByte(s);
} else {
COMWACT396 = Byte.MIN_VALUE;
}
}

protected final void initCOMWACT398(String s) {
if (!s.trim().isEmpty()) {
COMWACT398 = Byte.parseByte(s);
} else {
COMWACT398 = Byte.MIN_VALUE;
}
}

protected final void initCOMWPAS31(String s) {
if (!s.trim().isEmpty()) {
COMWPAS31 = Byte.parseByte(s);
} else {
COMWPAS31 = Byte.MIN_VALUE;
}
}

protected final void initCOMWPAS32(String s) {
if (!s.trim().isEmpty()) {
COMWPAS32 = Byte.parseByte(s);
} else {
COMWPAS32 = Byte.MIN_VALUE;
}
}

protected final void initCOMWPAS33(String s) {
if (!s.trim().isEmpty()) {
COMWPAS33 = Byte.parseByte(s);
} else {
COMWPAS33 = Byte.MIN_VALUE;
}
}

protected final void initCOMWPAS34(String s) {
if (!s.trim().isEmpty()) {
COMWPAS34 = Byte.parseByte(s);
} else {
COMWPAS34 = Byte.MIN_VALUE;
}
}

protected final void initCOMWPAS35(String s) {
if (!s.trim().isEmpty()) {
COMWPAS35 = Byte.parseByte(s);
} else {
COMWPAS35 = Byte.MIN_VALUE;
}
}

protected final void initCOMWPAS396(String s) {
if (!s.trim().isEmpty()) {
COMWPAS396 = Byte.parseByte(s);
} else {
COMWPAS396 = Byte.MIN_VALUE;
}
}

protected final void initCOMWPAS398(String s) {
if (!s.trim().isEmpty()) {
COMWPAS398 = Byte.parseByte(s);
} else {
COMWPAS398 = Byte.MIN_VALUE;
}
}

protected final void initCONTFT(String s) {
if (!s.trim().isEmpty()) {
CONTFT = Byte.parseByte(s);
} else {
CONTFT = Byte.MIN_VALUE;
}
}

protected final void initCOOPNXTYR(String s) {
if (!s.trim().isEmpty()) {
COOPNXTYR = Byte.parseByte(s);
} else {
COOPNXTYR = Byte.MIN_VALUE;
}
}

protected final void initCORDRECPER(String s) {
if (!s.trim().isEmpty()) {
CORDRECPER = Byte.parseByte(s);
} else {
CORDRECPER = Byte.MIN_VALUE;
}
}

protected final void initCOUNTRY(String s) {
if (!s.trim().isEmpty()) {
COUNTRY = Byte.parseByte(s);
} else {
COUNTRY = Byte.MIN_VALUE;
}
}

protected final void initCSACALC(String s) {
if (!s.trim().isEmpty()) {
CSACALC = Byte.parseByte(s);
} else {
CSACALC = Byte.MIN_VALUE;
}
}

protected final void initCSACALCAM(String s) {
if (!s.trim().isEmpty()) {
CSACALCAM = Double.parseDouble(s);
} else {
CSACALCAM = Double.NaN;
}
}

protected final void initCSAKIDNO1(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO1 = Byte.parseByte(s);
} else {
CSAKIDNO1 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO10(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO10 = Byte.parseByte(s);
} else {
CSAKIDNO10 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO11(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO11 = Byte.parseByte(s);
} else {
CSAKIDNO11 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO12(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO12 = Byte.parseByte(s);
} else {
CSAKIDNO12 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO13(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO13 = Byte.parseByte(s);
} else {
CSAKIDNO13 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO14(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO14 = Byte.parseByte(s);
} else {
CSAKIDNO14 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO15(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO15 = Byte.parseByte(s);
} else {
CSAKIDNO15 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO16(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO16 = Byte.parseByte(s);
} else {
CSAKIDNO16 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO2(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO2 = Byte.parseByte(s);
} else {
CSAKIDNO2 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO3(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO3 = Byte.parseByte(s);
} else {
CSAKIDNO3 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO4(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO4 = Byte.parseByte(s);
} else {
CSAKIDNO4 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO5(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO5 = Byte.parseByte(s);
} else {
CSAKIDNO5 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO6(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO6 = Byte.parseByte(s);
} else {
CSAKIDNO6 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO7(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO7 = Byte.parseByte(s);
} else {
CSAKIDNO7 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO8(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO8 = Byte.parseByte(s);
} else {
CSAKIDNO8 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO9(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO9 = Byte.parseByte(s);
} else {
CSAKIDNO9 = Byte.MIN_VALUE;
}
}

protected final void initCSAPAYTO(String s) {
if (!s.trim().isEmpty()) {
CSAPAYTO = Byte.parseByte(s);
} else {
CSAPAYTO = Byte.MIN_VALUE;
}
}

protected final void initCSARECPER(String s) {
if (!s.trim().isEmpty()) {
CSARECPER = Byte.parseByte(s);
} else {
CSARECPER = Byte.MIN_VALUE;
}
}

protected final void initCSTAT(String s) {
if (!s.trim().isEmpty()) {
CSTAT = Byte.parseByte(s);
} else {
CSTAT = Byte.MIN_VALUE;
}
}

protected final void initCTADD1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD1_CODE = Byte.parseByte(s);
} else {
CTADD1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTADD2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD2_CODE = Byte.parseByte(s);
} else {
CTADD2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCNTY_CODE(String s) {
if (!s.trim().isEmpty()) {
CTCNTY_CODE = Byte.parseByte(s);
} else {
CTCNTY_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF1(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF1 = Byte.parseByte(s);
} else {
CTCONSCONF1 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF2(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF2 = Byte.parseByte(s);
} else {
CTCONSCONF2 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF3(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF3 = Byte.parseByte(s);
} else {
CTCONSCONF3 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF4(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF4 = Byte.parseByte(s);
} else {
CTCONSCONF4 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF5(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF5 = Byte.parseByte(s);
} else {
CTCONSCONF5 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF6(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF6 = Byte.parseByte(s);
} else {
CTCONSCONF6 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF7(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF7 = Byte.parseByte(s);
} else {
CTCONSCONF7 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF8(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF8 = Byte.parseByte(s);
} else {
CTCONSCONF8 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF94(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF94 = Byte.parseByte(s);
} else {
CTCONSCONF94 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF95(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF95 = Byte.parseByte(s);
} else {
CTCONSCONF95 = Byte.MIN_VALUE;
}
}

protected final void initCTEMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
CTEMAIL_CODE = Byte.parseByte(s);
} else {
CTEMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTPCODE_CODE(String s) {
if (!s.trim().isEmpty()) {
CTPCODE_CODE = Byte.parseByte(s);
} else {
CTPCODE_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTREL(String s) {
if (!s.trim().isEmpty()) {
CTREL = Byte.parseByte(s);
} else {
CTREL = Byte.MIN_VALUE;
}
}

protected final void initCTTEL1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL1_CODE = Byte.parseByte(s);
} else {
CTTEL1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTEL2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL2_CODE = Byte.parseByte(s);
} else {
CTTEL2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTOWN_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTOWN_CODE = Byte.parseByte(s);
} else {
CTTOWN_CODE = Byte.MIN_VALUE;
}
}

protected final void initCUDDLEKID(String s) {
if (!s.trim().isEmpty()) {
CUDDLEKID = Byte.parseByte(s);
} else {
CUDDLEKID = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB1(String s) {
if (!s.trim().isEmpty()) {
CURRJOB1 = Byte.parseByte(s);
} else {
CURRJOB1 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB2(String s) {
if (!s.trim().isEmpty()) {
CURRJOB2 = Byte.parseByte(s);
} else {
CURRJOB2 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB3(String s) {
if (!s.trim().isEmpty()) {
CURRJOB3 = Byte.parseByte(s);
} else {
CURRJOB3 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB4(String s) {
if (!s.trim().isEmpty()) {
CURRJOB4 = Byte.parseByte(s);
} else {
CURRJOB4 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB5(String s) {
if (!s.trim().isEmpty()) {
CURRJOB5 = Byte.parseByte(s);
} else {
CURRJOB5 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB6(String s) {
if (!s.trim().isEmpty()) {
CURRJOB6 = Byte.parseByte(s);
} else {
CURRJOB6 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART1(String s) {
if (!s.trim().isEmpty()) {
CURRPART1 = Byte.parseByte(s);
} else {
CURRPART1 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART2(String s) {
if (!s.trim().isEmpty()) {
CURRPART2 = Byte.parseByte(s);
} else {
CURRPART2 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART3(String s) {
if (!s.trim().isEmpty()) {
CURRPART3 = Byte.parseByte(s);
} else {
CURRPART3 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART4(String s) {
if (!s.trim().isEmpty()) {
CURRPART4 = Byte.parseByte(s);
} else {
CURRPART4 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT1(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT1 = Byte.parseByte(s);
} else {
CURRSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT2(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT2 = Byte.parseByte(s);
} else {
CURRSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT3(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT3 = Byte.parseByte(s);
} else {
CURRSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT4(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT4 = Byte.parseByte(s);
} else {
CURRSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT5(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT5 = Byte.parseByte(s);
} else {
CURRSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT6(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT6 = Byte.parseByte(s);
} else {
CURRSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initDCDOBY(String s) {
if (!s.trim().isEmpty()) {
DCDOBY = Short.parseShort(s);
} else {
DCDOBY = Short.MIN_VALUE;
}
}

protected final void initDCSATM(String s) {
if (!s.trim().isEmpty()) {
DCSATM = Byte.parseByte(s);
} else {
DCSATM = Byte.MIN_VALUE;
}
}

protected final void initDCSEX(String s) {
if (!s.trim().isEmpty()) {
DCSEX = Byte.parseByte(s);
} else {
DCSEX = Byte.MIN_VALUE;
}
}

protected final void initDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DEPCHL_DV = false;
} else {
DEPCHL_DV = true;
}
}
}

protected final void initDETINC1(String s) {
if (!s.trim().isEmpty()) {
DETINC1 = Byte.parseByte(s);
} else {
DETINC1 = Byte.MIN_VALUE;
}
}

protected final void initDETINC2(String s) {
if (!s.trim().isEmpty()) {
DETINC2 = Byte.parseByte(s);
} else {
DETINC2 = Byte.MIN_VALUE;
}
}

protected final void initDETINC3(String s) {
if (!s.trim().isEmpty()) {
DETINC3 = Byte.parseByte(s);
} else {
DETINC3 = Byte.MIN_VALUE;
}
}

protected final void initDETINC4(String s) {
if (!s.trim().isEmpty()) {
DETINC4 = Byte.parseByte(s);
} else {
DETINC4 = Byte.MIN_VALUE;
}
}

protected final void initDETINC5(String s) {
if (!s.trim().isEmpty()) {
DETINC5 = Byte.parseByte(s);
} else {
DETINC5 = Byte.MIN_VALUE;
}
}

protected final void initDETINC6(String s) {
if (!s.trim().isEmpty()) {
DETINC6 = Byte.parseByte(s);
} else {
DETINC6 = Byte.MIN_VALUE;
}
}

protected final void initDINNER(String s) {
if (!s.trim().isEmpty()) {
DINNER = Byte.parseByte(s);
} else {
DINNER = Byte.MIN_VALUE;
}
}

protected final void initDISDIF1(String s) {
if (!s.trim().isEmpty()) {
DISDIF1 = Byte.parseByte(s);
} else {
DISDIF1 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF10(String s) {
if (!s.trim().isEmpty()) {
DISDIF10 = Byte.parseByte(s);
} else {
DISDIF10 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF11(String s) {
if (!s.trim().isEmpty()) {
DISDIF11 = Byte.parseByte(s);
} else {
DISDIF11 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF12(String s) {
if (!s.trim().isEmpty()) {
DISDIF12 = Byte.parseByte(s);
} else {
DISDIF12 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF2(String s) {
if (!s.trim().isEmpty()) {
DISDIF2 = Byte.parseByte(s);
} else {
DISDIF2 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF3(String s) {
if (!s.trim().isEmpty()) {
DISDIF3 = Byte.parseByte(s);
} else {
DISDIF3 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF4(String s) {
if (!s.trim().isEmpty()) {
DISDIF4 = Byte.parseByte(s);
} else {
DISDIF4 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF5(String s) {
if (!s.trim().isEmpty()) {
DISDIF5 = Byte.parseByte(s);
} else {
DISDIF5 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF6(String s) {
if (!s.trim().isEmpty()) {
DISDIF6 = Byte.parseByte(s);
} else {
DISDIF6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF7(String s) {
if (!s.trim().isEmpty()) {
DISDIF7 = Byte.parseByte(s);
} else {
DISDIF7 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF8(String s) {
if (!s.trim().isEmpty()) {
DISDIF8 = Byte.parseByte(s);
} else {
DISDIF8 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF9(String s) {
if (!s.trim().isEmpty()) {
DISDIF9 = Byte.parseByte(s);
} else {
DISDIF9 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF96(String s) {
if (!s.trim().isEmpty()) {
DISDIF96 = Byte.parseByte(s);
} else {
DISDIF96 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS1(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS1 = Byte.parseByte(s);
} else {
DISEFFECTS1 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS2(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS2 = Byte.parseByte(s);
} else {
DISEFFECTS2 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS3(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS3 = Byte.parseByte(s);
} else {
DISEFFECTS3 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS4(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS4 = Byte.parseByte(s);
} else {
DISEFFECTS4 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS5(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS5 = Byte.parseByte(s);
} else {
DISEFFECTS5 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV1(String s) {
if (!s.trim().isEmpty()) {
DISSEV1 = Byte.parseByte(s);
} else {
DISSEV1 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV10(String s) {
if (!s.trim().isEmpty()) {
DISSEV10 = Byte.parseByte(s);
} else {
DISSEV10 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV11(String s) {
if (!s.trim().isEmpty()) {
DISSEV11 = Byte.parseByte(s);
} else {
DISSEV11 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV12(String s) {
if (!s.trim().isEmpty()) {
DISSEV12 = Byte.parseByte(s);
} else {
DISSEV12 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV2(String s) {
if (!s.trim().isEmpty()) {
DISSEV2 = Byte.parseByte(s);
} else {
DISSEV2 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV3(String s) {
if (!s.trim().isEmpty()) {
DISSEV3 = Byte.parseByte(s);
} else {
DISSEV3 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV4(String s) {
if (!s.trim().isEmpty()) {
DISSEV4 = Byte.parseByte(s);
} else {
DISSEV4 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV5(String s) {
if (!s.trim().isEmpty()) {
DISSEV5 = Byte.parseByte(s);
} else {
DISSEV5 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV6(String s) {
if (!s.trim().isEmpty()) {
DISSEV6 = Byte.parseByte(s);
} else {
DISSEV6 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV7(String s) {
if (!s.trim().isEmpty()) {
DISSEV7 = Byte.parseByte(s);
} else {
DISSEV7 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV8(String s) {
if (!s.trim().isEmpty()) {
DISSEV8 = Byte.parseByte(s);
} else {
DISSEV8 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV9(String s) {
if (!s.trim().isEmpty()) {
DISSEV9 = Byte.parseByte(s);
} else {
DISSEV9 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK1(String s) {
if (!s.trim().isEmpty()) {
DIVCHK1 = Byte.parseByte(s);
} else {
DIVCHK1 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK2(String s) {
if (!s.trim().isEmpty()) {
DIVCHK2 = Byte.parseByte(s);
} else {
DIVCHK2 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK3(String s) {
if (!s.trim().isEmpty()) {
DIVCHK3 = Byte.parseByte(s);
} else {
DIVCHK3 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK4(String s) {
if (!s.trim().isEmpty()) {
DIVCHK4 = Byte.parseByte(s);
} else {
DIVCHK4 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN1(String s) {
if (!s.trim().isEmpty()) {
DIVFIN1 = Byte.parseByte(s);
} else {
DIVFIN1 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN2(String s) {
if (!s.trim().isEmpty()) {
DIVFIN2 = Byte.parseByte(s);
} else {
DIVFIN2 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN3(String s) {
if (!s.trim().isEmpty()) {
DIVFIN3 = Byte.parseByte(s);
} else {
DIVFIN3 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN4(String s) {
if (!s.trim().isEmpty()) {
DIVFIN4 = Byte.parseByte(s);
} else {
DIVFIN4 = Byte.MIN_VALUE;
}
}

protected final void initDOBY_DV(String s) {
if (!s.trim().isEmpty()) {
DOBY_DV = Short.parseShort(s);
} else {
DOBY_DV = Short.MIN_VALUE;
}
}

protected final void initDONEPROXY(String s) {
if (!s.trim().isEmpty()) {
DONEPROXY = Byte.parseByte(s);
} else {
DONEPROXY = Byte.MIN_VALUE;
}
}

protected final void initDPFREQA(String s) {
if (!s.trim().isEmpty()) {
DPFREQA = Byte.parseByte(s);
} else {
DPFREQA = Byte.MIN_VALUE;
}
}

protected final void initDPFREQB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
DPFREQB = false;
} else {
DPFREQB = true;
}
}
}

protected final void initDPPAYA(String s) {
if (!s.trim().isEmpty()) {
DPPAYA = Byte.parseByte(s);
} else {
DPPAYA = Byte.MIN_VALUE;
}
}

protected final void initDPPAYB(String s) {
if (!s.trim().isEmpty()) {
DPPAYB = Byte.parseByte(s);
} else {
DPPAYB = Byte.MIN_VALUE;
}
}

protected final void initDRGMJ(String s) {
if (!s.trim().isEmpty()) {
DRGMJ = Byte.parseByte(s);
} else {
DRGMJ = Byte.MIN_VALUE;
}
}

protected final void initDRGOTH(String s) {
if (!s.trim().isEmpty()) {
DRGOTH = Byte.parseByte(s);
} else {
DRGOTH = Byte.MIN_VALUE;
}
}

protected final void initDRGSOL(String s) {
if (!s.trim().isEmpty()) {
DRGSOL = Byte.parseByte(s);
} else {
DRGSOL = Byte.MIN_VALUE;
}
}

protected final void initDRIVE(String s) {
if (!s.trim().isEmpty()) {
DRIVE = Byte.parseByte(s);
} else {
DRIVE = Byte.MIN_VALUE;
}
}

protected final void initDV2UK16(String s) {
if (!s.trim().isEmpty()) {
DV2UK16 = Byte.parseByte(s);
} else {
DV2UK16 = Byte.MIN_VALUE;
}
}

protected final void initDVAGE(String s) {
if (!s.trim().isEmpty()) {
DVAGE = Byte.parseByte(s);
} else {
DVAGE = Byte.MIN_VALUE;
}
}

protected final void initDVAGE2UK(String s) {
if (!s.trim().isEmpty()) {
DVAGE2UK = Byte.parseByte(s);
} else {
DVAGE2UK = Byte.MIN_VALUE;
}
}

protected final void initDVM1(String s) {
if (!s.trim().isEmpty()) {
DVM1 = Byte.parseByte(s);
} else {
DVM1 = Byte.MIN_VALUE;
}
}

protected final void initDVM2(String s) {
if (!s.trim().isEmpty()) {
DVM2 = Byte.parseByte(s);
} else {
DVM2 = Byte.MIN_VALUE;
}
}

protected final void initDVM3(String s) {
if (!s.trim().isEmpty()) {
DVM3 = Byte.parseByte(s);
} else {
DVM3 = Byte.MIN_VALUE;
}
}

protected final void initDVM4(String s) {
if (!s.trim().isEmpty()) {
DVM4 = Byte.parseByte(s);
} else {
DVM4 = Byte.MIN_VALUE;
}
}

protected final void initDVY41(String s) {
if (!s.trim().isEmpty()) {
DVY41 = Short.parseShort(s);
} else {
DVY41 = Short.MIN_VALUE;
}
}

protected final void initDVY42(String s) {
if (!s.trim().isEmpty()) {
DVY42 = Short.parseShort(s);
} else {
DVY42 = Short.MIN_VALUE;
}
}

protected final void initDVY43(String s) {
if (!s.trim().isEmpty()) {
DVY43 = Byte.parseByte(s);
} else {
DVY43 = Byte.MIN_VALUE;
}
}

protected final void initDVY44(String s) {
if (!s.trim().isEmpty()) {
DVY44 = Byte.parseByte(s);
} else {
DVY44 = Byte.MIN_VALUE;
}
}

protected final void initEATLIVU(String s) {
if (!s.trim().isEmpty()) {
EATLIVU = Byte.parseByte(s);
} else {
EATLIVU = Byte.MIN_VALUE;
}
}

protected final void initECIGS(String s) {
if (!s.trim().isEmpty()) {
ECIGS = Byte.parseByte(s);
} else {
ECIGS = Byte.MIN_VALUE;
}
}

protected final void initEDASP(String s) {
if (!s.trim().isEmpty()) {
EDASP = Byte.parseByte(s);
} else {
EDASP = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE(String s) {
if (!s.trim().isEmpty()) {
EDTYPE = Short.parseShort(s);
} else {
EDTYPE = Short.MIN_VALUE;
}
}

protected final void initEDUCATION(String s) {
if (!s.trim().isEmpty()) {
EDUCATION = Byte.parseByte(s);
} else {
EDUCATION = Byte.MIN_VALUE;
}
}

protected final void initEMPCHK(String s) {
if (!s.trim().isEmpty()) {
EMPCHK = Byte.parseByte(s);
} else {
EMPCHK = Byte.MIN_VALUE;
}
}

protected final void initEMPLOY(String s) {
if (!s.trim().isEmpty()) {
EMPLOY = Byte.parseByte(s);
} else {
EMPLOY = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDD(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDD = Byte.parseByte(s);
} else {
EMPSTENDD = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDM(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDM = Byte.parseByte(s);
} else {
EMPSTENDM = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDY4(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDY4 = Short.parseShort(s);
} else {
EMPSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initENDMNTH1(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH1 = Byte.parseByte(s);
} else {
ENDMNTH1 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH2(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH2 = Byte.parseByte(s);
} else {
ENDMNTH2 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH3(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH3 = Byte.parseByte(s);
} else {
ENDMNTH3 = Byte.MIN_VALUE;
}
}

protected final void initEPROSH(String s) {
if (!s.trim().isEmpty()) {
EPROSH = Short.parseShort(s);
} else {
EPROSH = Short.MIN_VALUE;
}
}

protected final void initETHN_DV(String s) {
if (!s.trim().isEmpty()) {
ETHN_DV = Byte.parseByte(s);
} else {
ETHN_DV = Byte.MIN_VALUE;
}
}

protected final void initEXSAME(String s) {
if (!s.trim().isEmpty()) {
EXSAME = Byte.parseByte(s);
} else {
EXSAME = Byte.MIN_VALUE;
}
}

protected final void initEXTRATE(String s) {
if (!s.trim().isEmpty()) {
EXTRATE = Double.parseDouble(s);
} else {
EXTRATE = Double.NaN;
}
}

protected final void initEXTREST(String s) {
if (!s.trim().isEmpty()) {
EXTREST = Byte.parseByte(s);
} else {
EXTREST = Byte.MIN_VALUE;
}
}

protected final void initFAMILY(String s) {
if (!s.trim().isEmpty()) {
FAMILY = Byte.parseByte(s);
} else {
FAMILY = Byte.MIN_VALUE;
}
}

protected final void initFAMSUP(String s) {
if (!s.trim().isEmpty()) {
FAMSUP = Byte.parseByte(s);
} else {
FAMSUP = Byte.MIN_VALUE;
}
}

protected final void initFARKID(String s) {
if (!s.trim().isEmpty()) {
FARKID = Byte.parseByte(s);
} else {
FARKID = Byte.MIN_VALUE;
}
}

protected final void initFATHER(String s) {
if (!s.trim().isEmpty()) {
FATHER = Byte.parseByte(s);
} else {
FATHER = Byte.MIN_VALUE;
}
}

protected final void initFENOW(String s) {
if (!s.trim().isEmpty()) {
FENOW = Byte.parseByte(s);
} else {
FENOW = Byte.MIN_VALUE;
}
}

protected final void initFENOW_CAWI(String s) {
if (!s.trim().isEmpty()) {
FENOW_CAWI = Byte.parseByte(s);
} else {
FENOW_CAWI = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE01(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE01 = Byte.parseByte(s);
} else {
FF_BENTYPE01 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE02(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE02 = Byte.parseByte(s);
} else {
FF_BENTYPE02 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE03(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE03 = Byte.parseByte(s);
} else {
FF_BENTYPE03 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE04(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE04 = Byte.parseByte(s);
} else {
FF_BENTYPE04 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE05(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE05 = Byte.parseByte(s);
} else {
FF_BENTYPE05 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE06(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE06 = Byte.parseByte(s);
} else {
FF_BENTYPE06 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE07(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE07 = Byte.parseByte(s);
} else {
FF_BENTYPE07 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE08(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE08 = Byte.parseByte(s);
} else {
FF_BENTYPE08 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE09(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE09 = Byte.parseByte(s);
} else {
FF_BENTYPE09 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE10(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE10 = Byte.parseByte(s);
} else {
FF_BENTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE11(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE11 = Byte.parseByte(s);
} else {
FF_BENTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE12(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE12 = Byte.parseByte(s);
} else {
FF_BENTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE13(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE13 = Byte.parseByte(s);
} else {
FF_BENTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE14(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE14 = Byte.parseByte(s);
} else {
FF_BENTYPE14 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE15(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE15 = Byte.parseByte(s);
} else {
FF_BENTYPE15 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE16(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE16 = Byte.parseByte(s);
} else {
FF_BENTYPE16 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE17(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE17 = Byte.parseByte(s);
} else {
FF_BENTYPE17 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE18(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE18 = Byte.parseByte(s);
} else {
FF_BENTYPE18 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE19(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE19 = Byte.parseByte(s);
} else {
FF_BENTYPE19 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE20(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE20 = Byte.parseByte(s);
} else {
FF_BENTYPE20 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE21(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE21 = Byte.parseByte(s);
} else {
FF_BENTYPE21 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE22(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE22 = Byte.parseByte(s);
} else {
FF_BENTYPE22 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE23(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE23 = Byte.parseByte(s);
} else {
FF_BENTYPE23 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE24(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE24 = Byte.parseByte(s);
} else {
FF_BENTYPE24 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE25(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE25 = Byte.parseByte(s);
} else {
FF_BENTYPE25 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE26(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE26 = Byte.parseByte(s);
} else {
FF_BENTYPE26 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE27(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE27 = Byte.parseByte(s);
} else {
FF_BENTYPE27 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE28(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE28 = Byte.parseByte(s);
} else {
FF_BENTYPE28 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE29(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE29 = Byte.parseByte(s);
} else {
FF_BENTYPE29 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE30(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE30 = Byte.parseByte(s);
} else {
FF_BENTYPE30 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE31(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE31 = Byte.parseByte(s);
} else {
FF_BENTYPE31 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE32(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE32 = Byte.parseByte(s);
} else {
FF_BENTYPE32 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE33(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE33 = Byte.parseByte(s);
} else {
FF_BENTYPE33 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE34(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE34 = Byte.parseByte(s);
} else {
FF_BENTYPE34 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE35(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE35 = Byte.parseByte(s);
} else {
FF_BENTYPE35 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE36(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE36 = Byte.parseByte(s);
} else {
FF_BENTYPE36 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE37(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE37 = Byte.parseByte(s);
} else {
FF_BENTYPE37 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE38(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE38 = Byte.parseByte(s);
} else {
FF_BENTYPE38 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE39(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE39 = Byte.parseByte(s);
} else {
FF_BENTYPE39 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE40(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE40 = Byte.parseByte(s);
} else {
FF_BENTYPE40 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE41(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE41 = Byte.parseByte(s);
} else {
FF_BENTYPE41 = Byte.MIN_VALUE;
}
}

protected final void initFF_EMPLW(String s) {
if (!s.trim().isEmpty()) {
FF_EMPLW = Byte.parseByte(s);
} else {
FF_EMPLW = Byte.MIN_VALUE;
}
}

protected final void initFF_IVINTLANG(String s) {
if (!s.trim().isEmpty()) {
FF_IVINTLANG = Byte.parseByte(s);
} else {
FF_IVINTLANG = Byte.MIN_VALUE;
}
}

protected final void initFF_IVLOLW(String s) {
if (!s.trim().isEmpty()) {
FF_IVLOLW = Byte.parseByte(s);
} else {
FF_IVLOLW = Byte.MIN_VALUE;
}
}

protected final void initFF_JBMNGR(String s) {
if (!s.trim().isEmpty()) {
FF_JBMNGR = Byte.parseByte(s);
} else {
FF_JBMNGR = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSEMP(String s) {
if (!s.trim().isEmpty()) {
FF_JBSEMP = Byte.parseByte(s);
} else {
FF_JBSEMP = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSIZE(String s) {
if (!s.trim().isEmpty()) {
FF_JBSIZE = Byte.parseByte(s);
} else {
FF_JBSIZE = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSTAT(String s) {
if (!s.trim().isEmpty()) {
FF_JBSTAT = Byte.parseByte(s);
} else {
FF_JBSTAT = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG = Byte.parseByte(s);
} else {
FF_OPRLG = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0 = Byte.parseByte(s);
} else {
FF_OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0NI = Byte.parseByte(s);
} else {
FF_OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initFF_UKBORN(String s) {
if (!s.trim().isEmpty()) {
FF_UKBORN = Byte.parseByte(s);
} else {
FF_UKBORN = Byte.MIN_VALUE;
}
}

protected final void initFF_YR2UK4(String s) {
if (!s.trim().isEmpty()) {
FF_YR2UK4 = Short.parseShort(s);
} else {
FF_YR2UK4 = Short.MIN_VALUE;
}
}

protected final void initFIBENOTHR_DV(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_DV = Double.parseDouble(s);
} else {
FIBENOTHR_DV = Double.NaN;
}
}

protected final void initFIBENOTHR_IF(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_IF = Double.parseDouble(s);
} else {
FIBENOTHR_IF = Double.NaN;
}
}

protected final void initFIBENOTHR_TC(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_TC = Byte.parseByte(s);
} else {
FIBENOTHR_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_IF = Double.parseDouble(s);
} else {
FIMNGRS_IF = Double.NaN;
}
}

protected final void initFIMNGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_TC = Byte.parseByte(s);
} else {
FIMNGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNINVNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNINVNET_DV = Double.parseDouble(s);
} else {
FIMNINVNET_DV = Double.NaN;
}
}

protected final void initFIMNLABGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_IF = Double.parseDouble(s);
} else {
FIMNLABGRS_IF = Double.NaN;
}
}

protected final void initFIMNLABGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_TC = Byte.parseByte(s);
} else {
FIMNLABGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNLABNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_DV = Double.parseDouble(s);
} else {
FIMNLABNET_DV = Double.NaN;
}
}

protected final void initFIMNLABNET_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_TC = Byte.parseByte(s);
} else {
FIMNLABNET_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNMISC_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNMISC_DV = Double.parseDouble(s);
} else {
FIMNMISC_DV = Double.NaN;
}
}

protected final void initFIMNNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNNET_DV = Double.parseDouble(s);
} else {
FIMNNET_DV = Double.NaN;
}
}

protected final void initFIMNPEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPEN_DV = Double.parseDouble(s);
} else {
FIMNPEN_DV = Double.NaN;
}
}

protected final void initFIMNPRBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPRBEN_DV = Double.parseDouble(s);
} else {
FIMNPRBEN_DV = Double.NaN;
}
}

protected final void initFIMNSBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNSBEN_DV = Double.parseDouble(s);
} else {
FIMNSBEN_DV = Double.NaN;
}
}

protected final void initFINFUT(String s) {
if (!s.trim().isEmpty()) {
FINFUT = Byte.parseByte(s);
} else {
FINFUT = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB1(String s) {
if (!s.trim().isEmpty()) {
FIYRDB1 = Byte.parseByte(s);
} else {
FIYRDB1 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB2(String s) {
if (!s.trim().isEmpty()) {
FIYRDB2 = Byte.parseByte(s);
} else {
FIYRDB2 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB3(String s) {
if (!s.trim().isEmpty()) {
FIYRDB3 = Byte.parseByte(s);
} else {
FIYRDB3 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB4(String s) {
if (!s.trim().isEmpty()) {
FIYRDB4 = Byte.parseByte(s);
} else {
FIYRDB4 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB5(String s) {
if (!s.trim().isEmpty()) {
FIYRDB5 = Byte.parseByte(s);
} else {
FIYRDB5 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB6(String s) {
if (!s.trim().isEmpty()) {
FIYRDB6 = Byte.parseByte(s);
} else {
FIYRDB6 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDIA(String s) {
if (!s.trim().isEmpty()) {
FIYRDIA = Integer.parseInt(s);
} else {
FIYRDIA = Integer.MIN_VALUE;
}
}

protected final void initFIYRINVINC_DV(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_DV = Double.parseDouble(s);
} else {
FIYRINVINC_DV = Double.NaN;
}
}

protected final void initFIYRINVINC_IF(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_IF = Byte.parseByte(s);
} else {
FIYRINVINC_IF = Byte.MIN_VALUE;
}
}

protected final void initFIYRINVINC_TC(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_TC = Byte.parseByte(s);
} else {
FIYRINVINC_TC = Byte.MIN_VALUE;
}
}

protected final void initFNPID(String s) {
if (!s.trim().isEmpty()) {
FNPID = Integer.parseInt(s);
} else {
FNPID = Integer.MIN_VALUE;
}
}

protected final void initFNPNO(String s) {
if (!s.trim().isEmpty()) {
FNPNO = Byte.parseByte(s);
} else {
FNPNO = Byte.MIN_VALUE;
}
}

protected final void initFNSPID(String s) {
if (!s.trim().isEmpty()) {
FNSPID = Integer.parseInt(s);
} else {
FNSPID = Integer.MIN_VALUE;
}
}

protected final void initFNSPNO(String s) {
if (!s.trim().isEmpty()) {
FNSPNO = Byte.parseByte(s);
} else {
FNSPNO = Byte.MIN_VALUE;
}
}

protected final void initFRDRG(String s) {
if (!s.trim().isEmpty()) {
FRDRG = Byte.parseByte(s);
} else {
FRDRG = Byte.MIN_VALUE;
}
}

protected final void initFROBULLI(String s) {
if (!s.trim().isEmpty()) {
FROBULLI = Byte.parseByte(s);
} else {
FROBULLI = Byte.MIN_VALUE;
}
}

protected final void initFROBULLY(String s) {
if (!s.trim().isEmpty()) {
FROBULLY = Byte.parseByte(s);
} else {
FROBULLY = Byte.MIN_VALUE;
}
}

protected final void initFRPBULLI(String s) {
if (!s.trim().isEmpty()) {
FRPBULLI = Byte.parseByte(s);
} else {
FRPBULLI = Byte.MIN_VALUE;
}
}

protected final void initFRPBULLY(String s) {
if (!s.trim().isEmpty()) {
FRPBULLY = Byte.parseByte(s);
} else {
FRPBULLY = Byte.MIN_VALUE;
}
}

protected final void initFRUITAMT(String s) {
if (!s.trim().isEmpty()) {
FRUITAMT = Byte.parseByte(s);
} else {
FRUITAMT = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM1(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM1 = Byte.parseByte(s);
} else {
FT2ENDM1 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM2(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM2 = Byte.parseByte(s);
} else {
FT2ENDM2 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDY41(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY41 = Short.parseShort(s);
} else {
FT2ENDY41 = Short.MIN_VALUE;
}
}

protected final void initFT2ENDY42(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY42 = Short.parseShort(s);
} else {
FT2ENDY42 = Short.MIN_VALUE;
}
}

protected final void initFTEDANY(String s) {
if (!s.trim().isEmpty()) {
FTEDANY = Byte.parseByte(s);
} else {
FTEDANY = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND1(String s) {
if (!s.trim().isEmpty()) {
FTEDEND1 = Byte.parseByte(s);
} else {
FTEDEND1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND2(String s) {
if (!s.trim().isEmpty()) {
FTEDEND2 = Byte.parseByte(s);
} else {
FTEDEND2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR1(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR1 = Byte.parseByte(s);
} else {
FTEDMOR1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR2(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR2 = Byte.parseByte(s);
} else {
FTEDMOR2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM1(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM1 = Byte.parseByte(s);
} else {
FTEDSTARTM1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM2(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM2 = Byte.parseByte(s);
} else {
FTEDSTARTM2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTY41(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY41 = Short.parseShort(s);
} else {
FTEDSTARTY41 = Short.MIN_VALUE;
}
}

protected final void initFTEDSTARTY42(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY42 = Short.parseShort(s);
} else {
FTEDSTARTY42 = Short.MIN_VALUE;
}
}

protected final void initFTENDM(String s) {
if (!s.trim().isEmpty()) {
FTENDM = Byte.parseByte(s);
} else {
FTENDM = Byte.MIN_VALUE;
}
}

protected final void initFTENDY4(String s) {
if (!s.trim().isEmpty()) {
FTENDY4 = Short.parseShort(s);
} else {
FTENDY4 = Short.MIN_VALUE;
}
}

protected final void initFTEXV(String s) {
if (!s.trim().isEmpty()) {
FTEXV = Integer.parseInt(s);
} else {
FTEXV = Integer.MIN_VALUE;
}
}

protected final void initFTEXW(String s) {
if (!s.trim().isEmpty()) {
FTEXW = Byte.parseByte(s);
} else {
FTEXW = Byte.MIN_VALUE;
}
}

protected final void initFTQUALS(String s) {
if (!s.trim().isEmpty()) {
FTQUALS = Byte.parseByte(s);
} else {
FTQUALS = Byte.MIN_VALUE;
}
}

protected final void initFUTRA(String s) {
if (!s.trim().isEmpty()) {
FUTRA = Short.parseShort(s);
} else {
FUTRA = Short.MIN_VALUE;
}
}

protected final void initFUTRB(String s) {
if (!s.trim().isEmpty()) {
FUTRB = Short.parseShort(s);
} else {
FUTRB = Short.MIN_VALUE;
}
}

protected final void initFUTRC(String s) {
if (!s.trim().isEmpty()) {
FUTRC = Short.parseShort(s);
} else {
FUTRC = Short.MIN_VALUE;
}
}

protected final void initFUTRD(String s) {
if (!s.trim().isEmpty()) {
FUTRD = Short.parseShort(s);
} else {
FUTRD = Short.MIN_VALUE;
}
}

protected final void initFUTRE(String s) {
if (!s.trim().isEmpty()) {
FUTRE = Short.parseShort(s);
} else {
FUTRE = Short.MIN_VALUE;
}
}

protected final void initFUTRF(String s) {
if (!s.trim().isEmpty()) {
FUTRF = Short.parseShort(s);
} else {
FUTRF = Short.MIN_VALUE;
}
}

protected final void initFUTRG(String s) {
if (!s.trim().isEmpty()) {
FUTRG = Short.parseShort(s);
} else {
FUTRG = Short.MIN_VALUE;
}
}

protected final void initFUTRH(String s) {
if (!s.trim().isEmpty()) {
FUTRH = Short.parseShort(s);
} else {
FUTRH = Short.MIN_VALUE;
}
}

protected final void initFUTRI(String s) {
if (!s.trim().isEmpty()) {
FUTRI = Short.parseShort(s);
} else {
FUTRI = Short.MIN_VALUE;
}
}

protected final void initFUTRJ(String s) {
if (!s.trim().isEmpty()) {
FUTRJ = Short.parseShort(s);
} else {
FUTRJ = Short.MIN_VALUE;
}
}

protected final void initFUTRK(String s) {
if (!s.trim().isEmpty()) {
FUTRK = Short.parseShort(s);
} else {
FUTRK = Short.MIN_VALUE;
}
}

protected final void initFUTRL(String s) {
if (!s.trim().isEmpty()) {
FUTRL = Short.parseShort(s);
} else {
FUTRL = Short.MIN_VALUE;
}
}

protected final void initGCSE5(String s) {
if (!s.trim().isEmpty()) {
GCSE5 = Byte.parseByte(s);
} else {
GCSE5 = Byte.MIN_VALUE;
}
}

protected final void initGCSEENG(String s) {
if (!s.trim().isEmpty()) {
GCSEENG = Byte.parseByte(s);
} else {
GCSEENG = Byte.MIN_VALUE;
}
}

protected final void initGCSEMAT(String s) {
if (!s.trim().isEmpty()) {
GCSEMAT = Byte.parseByte(s);
} else {
GCSEMAT = Byte.MIN_VALUE;
}
}

protected final void initGRFPID(String s) {
if (!s.trim().isEmpty()) {
GRFPID = Integer.parseInt(s);
} else {
GRFPID = Integer.MIN_VALUE;
}
}

protected final void initGRFPNO(String s) {
if (!s.trim().isEmpty()) {
GRFPNO = Byte.parseByte(s);
} else {
GRFPNO = Byte.MIN_VALUE;
}
}

protected final void initGRMPID(String s) {
if (!s.trim().isEmpty()) {
GRMPID = Integer.parseInt(s);
} else {
GRMPID = Integer.MIN_VALUE;
}
}

protected final void initGRMPNO(String s) {
if (!s.trim().isEmpty()) {
GRMPNO = Byte.parseByte(s);
} else {
GRMPNO = Byte.MIN_VALUE;
}
}

protected final void initHASEMAIL(String s) {
if (!s.trim().isEmpty()) {
HASEMAIL = Byte.parseByte(s);
} else {
HASEMAIL = Byte.MIN_VALUE;
}
}

protected final void initHASSTEP(String s) {
if (!s.trim().isEmpty()) {
HASSTEP = Byte.parseByte(s);
} else {
HASSTEP = Byte.MIN_VALUE;
}
}

protected final void initHAVEDP1(String s) {
if (!s.trim().isEmpty()) {
HAVEDP1 = Byte.parseByte(s);
} else {
HAVEDP1 = Byte.MIN_VALUE;
}
}

protected final void initHAVEDP2(String s) {
if (!s.trim().isEmpty()) {
HAVEDP2 = Byte.parseByte(s);
} else {
HAVEDP2 = Byte.MIN_VALUE;
}
}

protected final void initHAVEDP3(String s) {
if (!s.trim().isEmpty()) {
HAVEDP3 = Byte.parseByte(s);
} else {
HAVEDP3 = Byte.MIN_VALUE;
}
}

protected final void initHCOND1(String s) {
if (!s.trim().isEmpty()) {
HCOND1 = Byte.parseByte(s);
} else {
HCOND1 = Byte.MIN_VALUE;
}
}

protected final void initHCOND10(String s) {
if (!s.trim().isEmpty()) {
HCOND10 = Byte.parseByte(s);
} else {
HCOND10 = Byte.MIN_VALUE;
}
}

protected final void initHCOND11(String s) {
if (!s.trim().isEmpty()) {
HCOND11 = Byte.parseByte(s);
} else {
HCOND11 = Byte.MIN_VALUE;
}
}

protected final void initHCOND12(String s) {
if (!s.trim().isEmpty()) {
HCOND12 = Byte.parseByte(s);
} else {
HCOND12 = Byte.MIN_VALUE;
}
}

protected final void initHCOND13(String s) {
if (!s.trim().isEmpty()) {
HCOND13 = Byte.parseByte(s);
} else {
HCOND13 = Byte.MIN_VALUE;
}
}

protected final void initHCOND14(String s) {
if (!s.trim().isEmpty()) {
HCOND14 = Byte.parseByte(s);
} else {
HCOND14 = Byte.MIN_VALUE;
}
}

protected final void initHCOND15(String s) {
if (!s.trim().isEmpty()) {
HCOND15 = Byte.parseByte(s);
} else {
HCOND15 = Byte.MIN_VALUE;
}
}

protected final void initHCOND16(String s) {
if (!s.trim().isEmpty()) {
HCOND16 = Byte.parseByte(s);
} else {
HCOND16 = Byte.MIN_VALUE;
}
}

protected final void initHCOND17(String s) {
if (!s.trim().isEmpty()) {
HCOND17 = Byte.parseByte(s);
} else {
HCOND17 = Byte.MIN_VALUE;
}
}

protected final void initHCOND18(String s) {
if (!s.trim().isEmpty()) {
HCOND18 = Byte.parseByte(s);
} else {
HCOND18 = Byte.MIN_VALUE;
}
}

protected final void initHCOND19(String s) {
if (!s.trim().isEmpty()) {
HCOND19 = Byte.parseByte(s);
} else {
HCOND19 = Byte.MIN_VALUE;
}
}

protected final void initHCOND2(String s) {
if (!s.trim().isEmpty()) {
HCOND2 = Byte.parseByte(s);
} else {
HCOND2 = Byte.MIN_VALUE;
}
}

protected final void initHCOND20(String s) {
if (!s.trim().isEmpty()) {
HCOND20 = Byte.parseByte(s);
} else {
HCOND20 = Byte.MIN_VALUE;
}
}

protected final void initHCOND3(String s) {
if (!s.trim().isEmpty()) {
HCOND3 = Byte.parseByte(s);
} else {
HCOND3 = Byte.MIN_VALUE;
}
}

protected final void initHCOND4(String s) {
if (!s.trim().isEmpty()) {
HCOND4 = Byte.parseByte(s);
} else {
HCOND4 = Byte.MIN_VALUE;
}
}

protected final void initHCOND5(String s) {
if (!s.trim().isEmpty()) {
HCOND5 = Byte.parseByte(s);
} else {
HCOND5 = Byte.MIN_VALUE;
}
}

protected final void initHCOND6(String s) {
if (!s.trim().isEmpty()) {
HCOND6 = Byte.parseByte(s);
} else {
HCOND6 = Byte.MIN_VALUE;
}
}

protected final void initHCOND7(String s) {
if (!s.trim().isEmpty()) {
HCOND7 = Byte.parseByte(s);
} else {
HCOND7 = Byte.MIN_VALUE;
}
}

protected final void initHCOND8(String s) {
if (!s.trim().isEmpty()) {
HCOND8 = Byte.parseByte(s);
} else {
HCOND8 = Byte.MIN_VALUE;
}
}

protected final void initHCOND9(String s) {
if (!s.trim().isEmpty()) {
HCOND9 = Byte.parseByte(s);
} else {
HCOND9 = Byte.MIN_VALUE;
}
}

protected final void initHCOND96(String s) {
if (!s.trim().isEmpty()) {
HCOND96 = Byte.parseByte(s);
} else {
HCOND96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA01(String s) {
if (!s.trim().isEmpty()) {
HCONDA01 = Byte.parseByte(s);
} else {
HCONDA01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA02(String s) {
if (!s.trim().isEmpty()) {
HCONDA02 = Byte.parseByte(s);
} else {
HCONDA02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA03(String s) {
if (!s.trim().isEmpty()) {
HCONDA03 = Byte.parseByte(s);
} else {
HCONDA03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA04(String s) {
if (!s.trim().isEmpty()) {
HCONDA04 = Byte.parseByte(s);
} else {
HCONDA04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA05(String s) {
if (!s.trim().isEmpty()) {
HCONDA05 = Byte.parseByte(s);
} else {
HCONDA05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA06(String s) {
if (!s.trim().isEmpty()) {
HCONDA06 = Byte.parseByte(s);
} else {
HCONDA06 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA07(String s) {
if (!s.trim().isEmpty()) {
HCONDA07 = Byte.parseByte(s);
} else {
HCONDA07 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA08(String s) {
if (!s.trim().isEmpty()) {
HCONDA08 = Byte.parseByte(s);
} else {
HCONDA08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA09(String s) {
if (!s.trim().isEmpty()) {
HCONDA09 = Byte.parseByte(s);
} else {
HCONDA09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA10(String s) {
if (!s.trim().isEmpty()) {
HCONDA10 = Byte.parseByte(s);
} else {
HCONDA10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA11(String s) {
if (!s.trim().isEmpty()) {
HCONDA11 = Byte.parseByte(s);
} else {
HCONDA11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA12(String s) {
if (!s.trim().isEmpty()) {
HCONDA12 = Byte.parseByte(s);
} else {
HCONDA12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA13(String s) {
if (!s.trim().isEmpty()) {
HCONDA13 = Byte.parseByte(s);
} else {
HCONDA13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA14(String s) {
if (!s.trim().isEmpty()) {
HCONDA14 = Byte.parseByte(s);
} else {
HCONDA14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA15(String s) {
if (!s.trim().isEmpty()) {
HCONDA15 = Byte.parseByte(s);
} else {
HCONDA15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA16(String s) {
if (!s.trim().isEmpty()) {
HCONDA16 = Byte.parseByte(s);
} else {
HCONDA16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA17(String s) {
if (!s.trim().isEmpty()) {
HCONDA17 = Byte.parseByte(s);
} else {
HCONDA17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA19(String s) {
if (!s.trim().isEmpty()) {
HCONDA19 = Byte.parseByte(s);
} else {
HCONDA19 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HCONDA20 = false;
} else {
HCONDA20 = true;
}
}
}

protected final void initHCONDN1(String s) {
if (!s.trim().isEmpty()) {
HCONDN1 = Byte.parseByte(s);
} else {
HCONDN1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN10(String s) {
if (!s.trim().isEmpty()) {
HCONDN10 = Byte.parseByte(s);
} else {
HCONDN10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN11(String s) {
if (!s.trim().isEmpty()) {
HCONDN11 = Byte.parseByte(s);
} else {
HCONDN11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN12(String s) {
if (!s.trim().isEmpty()) {
HCONDN12 = Byte.parseByte(s);
} else {
HCONDN12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN13(String s) {
if (!s.trim().isEmpty()) {
HCONDN13 = Byte.parseByte(s);
} else {
HCONDN13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN14(String s) {
if (!s.trim().isEmpty()) {
HCONDN14 = Byte.parseByte(s);
} else {
HCONDN14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN15(String s) {
if (!s.trim().isEmpty()) {
HCONDN15 = Byte.parseByte(s);
} else {
HCONDN15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN16(String s) {
if (!s.trim().isEmpty()) {
HCONDN16 = Byte.parseByte(s);
} else {
HCONDN16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN17(String s) {
if (!s.trim().isEmpty()) {
HCONDN17 = Byte.parseByte(s);
} else {
HCONDN17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN18(String s) {
if (!s.trim().isEmpty()) {
HCONDN18 = Byte.parseByte(s);
} else {
HCONDN18 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN19(String s) {
if (!s.trim().isEmpty()) {
HCONDN19 = Byte.parseByte(s);
} else {
HCONDN19 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN2(String s) {
if (!s.trim().isEmpty()) {
HCONDN2 = Byte.parseByte(s);
} else {
HCONDN2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN20(String s) {
if (!s.trim().isEmpty()) {
HCONDN20 = Byte.parseByte(s);
} else {
HCONDN20 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN3(String s) {
if (!s.trim().isEmpty()) {
HCONDN3 = Byte.parseByte(s);
} else {
HCONDN3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN4(String s) {
if (!s.trim().isEmpty()) {
HCONDN4 = Byte.parseByte(s);
} else {
HCONDN4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN5(String s) {
if (!s.trim().isEmpty()) {
HCONDN5 = Byte.parseByte(s);
} else {
HCONDN5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN6(String s) {
if (!s.trim().isEmpty()) {
HCONDN6 = Byte.parseByte(s);
} else {
HCONDN6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN7(String s) {
if (!s.trim().isEmpty()) {
HCONDN7 = Byte.parseByte(s);
} else {
HCONDN7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN8(String s) {
if (!s.trim().isEmpty()) {
HCONDN8 = Byte.parseByte(s);
} else {
HCONDN8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN9(String s) {
if (!s.trim().isEmpty()) {
HCONDN9 = Byte.parseByte(s);
} else {
HCONDN9 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN96(String s) {
if (!s.trim().isEmpty()) {
HCONDN96 = Byte.parseByte(s);
} else {
HCONDN96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO1(String s) {
if (!s.trim().isEmpty()) {
HCONDNO1 = Byte.parseByte(s);
} else {
HCONDNO1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO2(String s) {
if (!s.trim().isEmpty()) {
HCONDNO2 = Byte.parseByte(s);
} else {
HCONDNO2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO3(String s) {
if (!s.trim().isEmpty()) {
HCONDNO3 = Byte.parseByte(s);
} else {
HCONDNO3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO4(String s) {
if (!s.trim().isEmpty()) {
HCONDNO4 = Byte.parseByte(s);
} else {
HCONDNO4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO5(String s) {
if (!s.trim().isEmpty()) {
HCONDNO5 = Byte.parseByte(s);
} else {
HCONDNO5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO_CODE(String s) {
if (!s.trim().isEmpty()) {
HCONDNO_CODE = Byte.parseByte(s);
} else {
HCONDNO_CODE = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS1(String s) {
if (!s.trim().isEmpty()) {
HCONDNS1 = Byte.parseByte(s);
} else {
HCONDNS1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS2(String s) {
if (!s.trim().isEmpty()) {
HCONDNS2 = Byte.parseByte(s);
} else {
HCONDNS2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS3(String s) {
if (!s.trim().isEmpty()) {
HCONDNS3 = Byte.parseByte(s);
} else {
HCONDNS3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS4(String s) {
if (!s.trim().isEmpty()) {
HCONDNS4 = Byte.parseByte(s);
} else {
HCONDNS4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS5(String s) {
if (!s.trim().isEmpty()) {
HCONDNS5 = Byte.parseByte(s);
} else {
HCONDNS5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDO_CODE(String s) {
if (!s.trim().isEmpty()) {
HCONDO_CODE = Byte.parseByte(s);
} else {
HCONDO_CODE = Byte.MIN_VALUE;
}
}

protected final void initHCONDS01(String s) {
if (!s.trim().isEmpty()) {
HCONDS01 = Byte.parseByte(s);
} else {
HCONDS01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS02(String s) {
if (!s.trim().isEmpty()) {
HCONDS02 = Byte.parseByte(s);
} else {
HCONDS02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS03(String s) {
if (!s.trim().isEmpty()) {
HCONDS03 = Byte.parseByte(s);
} else {
HCONDS03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS04(String s) {
if (!s.trim().isEmpty()) {
HCONDS04 = Byte.parseByte(s);
} else {
HCONDS04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS05(String s) {
if (!s.trim().isEmpty()) {
HCONDS05 = Byte.parseByte(s);
} else {
HCONDS05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS08(String s) {
if (!s.trim().isEmpty()) {
HCONDS08 = Byte.parseByte(s);
} else {
HCONDS08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS09(String s) {
if (!s.trim().isEmpty()) {
HCONDS09 = Byte.parseByte(s);
} else {
HCONDS09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS10(String s) {
if (!s.trim().isEmpty()) {
HCONDS10 = Byte.parseByte(s);
} else {
HCONDS10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS11(String s) {
if (!s.trim().isEmpty()) {
HCONDS11 = Byte.parseByte(s);
} else {
HCONDS11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS12(String s) {
if (!s.trim().isEmpty()) {
HCONDS12 = Byte.parseByte(s);
} else {
HCONDS12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS13(String s) {
if (!s.trim().isEmpty()) {
HCONDS13 = Byte.parseByte(s);
} else {
HCONDS13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS14(String s) {
if (!s.trim().isEmpty()) {
HCONDS14 = Byte.parseByte(s);
} else {
HCONDS14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS15(String s) {
if (!s.trim().isEmpty()) {
HCONDS15 = Byte.parseByte(s);
} else {
HCONDS15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS16(String s) {
if (!s.trim().isEmpty()) {
HCONDS16 = Byte.parseByte(s);
} else {
HCONDS16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS17(String s) {
if (!s.trim().isEmpty()) {
HCONDS17 = Byte.parseByte(s);
} else {
HCONDS17 = Byte.MIN_VALUE;
}
}

protected final void initHEALTH(String s) {
if (!s.trim().isEmpty()) {
HEALTH = Byte.parseByte(s);
} else {
HEALTH = Byte.MIN_VALUE;
}
}

protected final void initHEAPPLIED(String s) {
if (!s.trim().isEmpty()) {
HEAPPLIED = Byte.parseByte(s);
} else {
HEAPPLIED = Byte.MIN_VALUE;
}
}

protected final void initHEDLIK(String s) {
if (!s.trim().isEmpty()) {
HEDLIK = Byte.parseByte(s);
} else {
HEDLIK = Byte.MIN_VALUE;
}
}

protected final void initHEDNT(String s) {
if (!s.trim().isEmpty()) {
HEDNT = Byte.parseByte(s);
} else {
HEDNT = Byte.MIN_VALUE;
}
}

protected final void initHEDNTO_CODE(String s) {
if (!s.trim().isEmpty()) {
HEDNTO_CODE = Byte.parseByte(s);
} else {
HEDNTO_CODE = Byte.MIN_VALUE;
}
}

protected final void initHELPCODE1(String s) {
if (!s.trim().isEmpty()) {
HELPCODE1 = Byte.parseByte(s);
} else {
HELPCODE1 = Byte.MIN_VALUE;
}
}

protected final void initHELPCODE2(String s) {
if (!s.trim().isEmpty()) {
HELPCODE2 = Byte.parseByte(s);
} else {
HELPCODE2 = Byte.MIN_VALUE;
}
}

protected final void initHELPCODE3(String s) {
if (!s.trim().isEmpty()) {
HELPCODE3 = Byte.parseByte(s);
} else {
HELPCODE3 = Byte.MIN_VALUE;
}
}

protected final void initHELPCODE4(String s) {
if (!s.trim().isEmpty()) {
HELPCODE4 = Byte.parseByte(s);
} else {
HELPCODE4 = Byte.MIN_VALUE;
}
}

protected final void initHELPCODE5(String s) {
if (!s.trim().isEmpty()) {
HELPCODE5 = Byte.parseByte(s);
} else {
HELPCODE5 = Byte.MIN_VALUE;
}
}

protected final void initHELPCODE6(String s) {
if (!s.trim().isEmpty()) {
HELPCODE6 = Byte.parseByte(s);
} else {
HELPCODE6 = Byte.MIN_VALUE;
}
}

protected final void initHELPCODE7(String s) {
if (!s.trim().isEmpty()) {
HELPCODE7 = Byte.parseByte(s);
} else {
HELPCODE7 = Byte.MIN_VALUE;
}
}

protected final void initHELPCODE8(String s) {
if (!s.trim().isEmpty()) {
HELPCODE8 = Byte.parseByte(s);
} else {
HELPCODE8 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURS1(String s) {
if (!s.trim().isEmpty()) {
HELPHOURS1 = Byte.parseByte(s);
} else {
HELPHOURS1 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURS2(String s) {
if (!s.trim().isEmpty()) {
HELPHOURS2 = Byte.parseByte(s);
} else {
HELPHOURS2 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURS3(String s) {
if (!s.trim().isEmpty()) {
HELPHOURS3 = Byte.parseByte(s);
} else {
HELPHOURS3 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURS4(String s) {
if (!s.trim().isEmpty()) {
HELPHOURS4 = Byte.parseByte(s);
} else {
HELPHOURS4 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURS5(String s) {
if (!s.trim().isEmpty()) {
HELPHOURS5 = Byte.parseByte(s);
} else {
HELPHOURS5 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURS6(String s) {
if (!s.trim().isEmpty()) {
HELPHOURS6 = Byte.parseByte(s);
} else {
HELPHOURS6 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURS7(String s) {
if (!s.trim().isEmpty()) {
HELPHOURS7 = Byte.parseByte(s);
} else {
HELPHOURS7 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURS8(String s) {
if (!s.trim().isEmpty()) {
HELPHOURS8 = Byte.parseByte(s);
} else {
HELPHOURS8 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURSB1(String s) {
if (!s.trim().isEmpty()) {
HELPHOURSB1 = Byte.parseByte(s);
} else {
HELPHOURSB1 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURSB2(String s) {
if (!s.trim().isEmpty()) {
HELPHOURSB2 = Byte.parseByte(s);
} else {
HELPHOURSB2 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURSB3(String s) {
if (!s.trim().isEmpty()) {
HELPHOURSB3 = Byte.parseByte(s);
} else {
HELPHOURSB3 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURSB4(String s) {
if (!s.trim().isEmpty()) {
HELPHOURSB4 = Byte.parseByte(s);
} else {
HELPHOURSB4 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURSB5(String s) {
if (!s.trim().isEmpty()) {
HELPHOURSB5 = Byte.parseByte(s);
} else {
HELPHOURSB5 = Byte.MIN_VALUE;
}
}

protected final void initHELPHOURSB6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HELPHOURSB6 = false;
} else {
HELPHOURSB6 = true;
}
}
}

protected final void initHELPHOURSB7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HELPHOURSB7 = false;
} else {
HELPHOURSB7 = true;
}
}
}

protected final void initHELPHOURSB8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HELPHOURSB8 = false;
} else {
HELPHOURSB8 = true;
}
}
}

protected final void initHGADOPTF(String s) {
if (!s.trim().isEmpty()) {
HGADOPTF = Byte.parseByte(s);
} else {
HGADOPTF = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTM(String s) {
if (!s.trim().isEmpty()) {
HGADOPTM = Byte.parseByte(s);
} else {
HGADOPTM = Byte.MIN_VALUE;
}
}

protected final void initHGPART(String s) {
if (!s.trim().isEmpty()) {
HGPART = Byte.parseByte(s);
} else {
HGPART = Byte.MIN_VALUE;
}
}

protected final void initHHRESP_DV(String s) {
if (!s.trim().isEmpty()) {
HHRESP_DV = Byte.parseByte(s);
} else {
HHRESP_DV = Byte.MIN_VALUE;
}
}

protected final void initHHTYPE_DV(String s) {
if (!s.trim().isEmpty()) {
HHTYPE_DV = Byte.parseByte(s);
} else {
HHTYPE_DV = Byte.MIN_VALUE;
}
}

protected final void initHINFANO1(String s) {
if (!s.trim().isEmpty()) {
HINFANO1 = Byte.parseByte(s);
} else {
HINFANO1 = Byte.MIN_VALUE;
}
}

protected final void initHINFANO2(String s) {
if (!s.trim().isEmpty()) {
HINFANO2 = Byte.parseByte(s);
} else {
HINFANO2 = Byte.MIN_VALUE;
}
}

protected final void initHINFANO3(String s) {
if (!s.trim().isEmpty()) {
HINFANO3 = Byte.parseByte(s);
} else {
HINFANO3 = Byte.MIN_VALUE;
}
}

protected final void initHINFANO4(String s) {
if (!s.trim().isEmpty()) {
HINFANO4 = Byte.parseByte(s);
} else {
HINFANO4 = Byte.MIN_VALUE;
}
}

protected final void initHINFANO5(String s) {
if (!s.trim().isEmpty()) {
HINFANO5 = Byte.parseByte(s);
} else {
HINFANO5 = Byte.MIN_VALUE;
}
}

protected final void initHINFANO6(String s) {
if (!s.trim().isEmpty()) {
HINFANO6 = Byte.parseByte(s);
} else {
HINFANO6 = Byte.MIN_VALUE;
}
}

protected final void initHINFANO7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HINFANO7 = false;
} else {
HINFANO7 = true;
}
}
}

protected final void initHINFANO8(String s) {
if (!s.trim().isEmpty()) {
HINFANO8 = Byte.parseByte(s);
} else {
HINFANO8 = Byte.MIN_VALUE;
}
}

protected final void initHINFANO9(String s) {
if (!s.trim().isEmpty()) {
HINFANO9 = Byte.parseByte(s);
} else {
HINFANO9 = Byte.MIN_VALUE;
}
}

protected final void initHINFBNO1(String s) {
if (!s.trim().isEmpty()) {
HINFBNO1 = Byte.parseByte(s);
} else {
HINFBNO1 = Byte.MIN_VALUE;
}
}

protected final void initHINFBNO2(String s) {
if (!s.trim().isEmpty()) {
HINFBNO2 = Byte.parseByte(s);
} else {
HINFBNO2 = Byte.MIN_VALUE;
}
}

protected final void initHINFBNO3(String s) {
if (!s.trim().isEmpty()) {
HINFBNO3 = Byte.parseByte(s);
} else {
HINFBNO3 = Byte.MIN_VALUE;
}
}

protected final void initHINFBNO4(String s) {
if (!s.trim().isEmpty()) {
HINFBNO4 = Byte.parseByte(s);
} else {
HINFBNO4 = Byte.MIN_VALUE;
}
}

protected final void initHINFBNO5(String s) {
if (!s.trim().isEmpty()) {
HINFBNO5 = Byte.parseByte(s);
} else {
HINFBNO5 = Byte.MIN_VALUE;
}
}

protected final void initHINFBNO6(String s) {
if (!s.trim().isEmpty()) {
HINFBNO6 = Byte.parseByte(s);
} else {
HINFBNO6 = Byte.MIN_VALUE;
}
}

protected final void initHINFBNO7(String s) {
if (!s.trim().isEmpty()) {
HINFBNO7 = Byte.parseByte(s);
} else {
HINFBNO7 = Byte.MIN_VALUE;
}
}

protected final void initHINFBNO8(String s) {
if (!s.trim().isEmpty()) {
HINFBNO8 = Byte.parseByte(s);
} else {
HINFBNO8 = Byte.MIN_VALUE;
}
}

protected final void initHINFBNO9(String s) {
if (!s.trim().isEmpty()) {
HINFBNO9 = Byte.parseByte(s);
} else {
HINFBNO9 = Byte.MIN_VALUE;
}
}

protected final void initHITSIB(String s) {
if (!s.trim().isEmpty()) {
HITSIB = Byte.parseByte(s);
} else {
HITSIB = Byte.MIN_VALUE;
}
}

protected final void initHL2GP(String s) {
if (!s.trim().isEmpty()) {
HL2GP = Short.parseShort(s);
} else {
HL2GP = Short.MIN_VALUE;
}
}

protected final void initHL2HOP(String s) {
if (!s.trim().isEmpty()) {
HL2HOP = Byte.parseByte(s);
} else {
HL2HOP = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMA1(String s) {
if (!s.trim().isEmpty()) {
HLPFORMA1 = Byte.parseByte(s);
} else {
HLPFORMA1 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMA2(String s) {
if (!s.trim().isEmpty()) {
HLPFORMA2 = Byte.parseByte(s);
} else {
HLPFORMA2 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMA3(String s) {
if (!s.trim().isEmpty()) {
HLPFORMA3 = Byte.parseByte(s);
} else {
HLPFORMA3 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMA4(String s) {
if (!s.trim().isEmpty()) {
HLPFORMA4 = Byte.parseByte(s);
} else {
HLPFORMA4 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMA5(String s) {
if (!s.trim().isEmpty()) {
HLPFORMA5 = Byte.parseByte(s);
} else {
HLPFORMA5 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMA6(String s) {
if (!s.trim().isEmpty()) {
HLPFORMA6 = Byte.parseByte(s);
} else {
HLPFORMA6 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMA7(String s) {
if (!s.trim().isEmpty()) {
HLPFORMA7 = Byte.parseByte(s);
} else {
HLPFORMA7 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMA96(String s) {
if (!s.trim().isEmpty()) {
HLPFORMA96 = Byte.parseByte(s);
} else {
HLPFORMA96 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMA97(String s) {
if (!s.trim().isEmpty()) {
HLPFORMA97 = Byte.parseByte(s);
} else {
HLPFORMA97 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMB1(String s) {
if (!s.trim().isEmpty()) {
HLPFORMB1 = Byte.parseByte(s);
} else {
HLPFORMB1 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMB2(String s) {
if (!s.trim().isEmpty()) {
HLPFORMB2 = Byte.parseByte(s);
} else {
HLPFORMB2 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMB3(String s) {
if (!s.trim().isEmpty()) {
HLPFORMB3 = Byte.parseByte(s);
} else {
HLPFORMB3 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMB4(String s) {
if (!s.trim().isEmpty()) {
HLPFORMB4 = Byte.parseByte(s);
} else {
HLPFORMB4 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMB5(String s) {
if (!s.trim().isEmpty()) {
HLPFORMB5 = Byte.parseByte(s);
} else {
HLPFORMB5 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMB6(String s) {
if (!s.trim().isEmpty()) {
HLPFORMB6 = Byte.parseByte(s);
} else {
HLPFORMB6 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMB7(String s) {
if (!s.trim().isEmpty()) {
HLPFORMB7 = Byte.parseByte(s);
} else {
HLPFORMB7 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMB96(String s) {
if (!s.trim().isEmpty()) {
HLPFORMB96 = Byte.parseByte(s);
} else {
HLPFORMB96 = Byte.MIN_VALUE;
}
}

protected final void initHLPFORMB97(String s) {
if (!s.trim().isEmpty()) {
HLPFORMB97 = Byte.parseByte(s);
} else {
HLPFORMB97 = Byte.MIN_VALUE;
}
}

protected final void initHLPHMWK(String s) {
if (!s.trim().isEmpty()) {
HLPHMWK = Byte.parseByte(s);
} else {
HLPHMWK = Byte.MIN_VALUE;
}
}

protected final void initHLPINFA1(String s) {
if (!s.trim().isEmpty()) {
HLPINFA1 = Byte.parseByte(s);
} else {
HLPINFA1 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFA10(String s) {
if (!s.trim().isEmpty()) {
HLPINFA10 = Byte.parseByte(s);
} else {
HLPINFA10 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFA2(String s) {
if (!s.trim().isEmpty()) {
HLPINFA2 = Byte.parseByte(s);
} else {
HLPINFA2 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFA3(String s) {
if (!s.trim().isEmpty()) {
HLPINFA3 = Byte.parseByte(s);
} else {
HLPINFA3 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFA4(String s) {
if (!s.trim().isEmpty()) {
HLPINFA4 = Byte.parseByte(s);
} else {
HLPINFA4 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFA5(String s) {
if (!s.trim().isEmpty()) {
HLPINFA5 = Byte.parseByte(s);
} else {
HLPINFA5 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFA6(String s) {
if (!s.trim().isEmpty()) {
HLPINFA6 = Byte.parseByte(s);
} else {
HLPINFA6 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFA7(String s) {
if (!s.trim().isEmpty()) {
HLPINFA7 = Byte.parseByte(s);
} else {
HLPINFA7 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFA8(String s) {
if (!s.trim().isEmpty()) {
HLPINFA8 = Byte.parseByte(s);
} else {
HLPINFA8 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFA9(String s) {
if (!s.trim().isEmpty()) {
HLPINFA9 = Byte.parseByte(s);
} else {
HLPINFA9 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFA96(String s) {
if (!s.trim().isEmpty()) {
HLPINFA96 = Byte.parseByte(s);
} else {
HLPINFA96 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFB1(String s) {
if (!s.trim().isEmpty()) {
HLPINFB1 = Byte.parseByte(s);
} else {
HLPINFB1 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFB10(String s) {
if (!s.trim().isEmpty()) {
HLPINFB10 = Byte.parseByte(s);
} else {
HLPINFB10 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFB2(String s) {
if (!s.trim().isEmpty()) {
HLPINFB2 = Byte.parseByte(s);
} else {
HLPINFB2 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFB3(String s) {
if (!s.trim().isEmpty()) {
HLPINFB3 = Byte.parseByte(s);
} else {
HLPINFB3 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFB4(String s) {
if (!s.trim().isEmpty()) {
HLPINFB4 = Byte.parseByte(s);
} else {
HLPINFB4 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFB5(String s) {
if (!s.trim().isEmpty()) {
HLPINFB5 = Byte.parseByte(s);
} else {
HLPINFB5 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFB6(String s) {
if (!s.trim().isEmpty()) {
HLPINFB6 = Byte.parseByte(s);
} else {
HLPINFB6 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFB7(String s) {
if (!s.trim().isEmpty()) {
HLPINFB7 = Byte.parseByte(s);
} else {
HLPINFB7 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFB8(String s) {
if (!s.trim().isEmpty()) {
HLPINFB8 = Byte.parseByte(s);
} else {
HLPINFB8 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFB9(String s) {
if (!s.trim().isEmpty()) {
HLPINFB9 = Byte.parseByte(s);
} else {
HLPINFB9 = Byte.MIN_VALUE;
}
}

protected final void initHLPINFB96(String s) {
if (!s.trim().isEmpty()) {
HLPINFB96 = Byte.parseByte(s);
} else {
HLPINFB96 = Byte.MIN_VALUE;
}
}

protected final void initHOSP(String s) {
if (!s.trim().isEmpty()) {
HOSP = Short.parseShort(s);
} else {
HOSP = Short.MIN_VALUE;
}
}

protected final void initHOSPC1(String s) {
if (!s.trim().isEmpty()) {
HOSPC1 = Byte.parseByte(s);
} else {
HOSPC1 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC2(String s) {
if (!s.trim().isEmpty()) {
HOSPC2 = Byte.parseByte(s);
} else {
HOSPC2 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC3(String s) {
if (!s.trim().isEmpty()) {
HOSPC3 = Byte.parseByte(s);
} else {
HOSPC3 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC4(String s) {
if (!s.trim().isEmpty()) {
HOSPC4 = Byte.parseByte(s);
} else {
HOSPC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC5(String s) {
if (!s.trim().isEmpty()) {
HOSPC5 = Byte.parseByte(s);
} else {
HOSPC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPCH(String s) {
if (!s.trim().isEmpty()) {
HOSPCH = Short.parseShort(s);
} else {
HOSPCH = Short.MIN_VALUE;
}
}

protected final void initHOSPD(String s) {
if (!s.trim().isEmpty()) {
HOSPD = Short.parseShort(s);
} else {
HOSPD = Short.MIN_VALUE;
}
}

protected final void initHOSPDC1(String s) {
if (!s.trim().isEmpty()) {
HOSPDC1 = Short.parseShort(s);
} else {
HOSPDC1 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC2(String s) {
if (!s.trim().isEmpty()) {
HOSPDC2 = Short.parseShort(s);
} else {
HOSPDC2 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC3(String s) {
if (!s.trim().isEmpty()) {
HOSPDC3 = Short.parseShort(s);
} else {
HOSPDC3 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC4(String s) {
if (!s.trim().isEmpty()) {
HOSPDC4 = Byte.parseByte(s);
} else {
HOSPDC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC5(String s) {
if (!s.trim().isEmpty()) {
HOSPDC5 = Byte.parseByte(s);
} else {
HOSPDC5 = Byte.MIN_VALUE;
}
}

protected final void initHOUSING(String s) {
if (!s.trim().isEmpty()) {
HOUSING = Byte.parseByte(s);
} else {
HOUSING = Byte.MIN_VALUE;
}
}

protected final void initHOWPAYA1(String s) {
if (!s.trim().isEmpty()) {
HOWPAYA1 = Byte.parseByte(s);
} else {
HOWPAYA1 = Byte.MIN_VALUE;
}
}

protected final void initHOWPAYA2(String s) {
if (!s.trim().isEmpty()) {
HOWPAYA2 = Byte.parseByte(s);
} else {
HOWPAYA2 = Byte.MIN_VALUE;
}
}

protected final void initHOWPAYA3(String s) {
if (!s.trim().isEmpty()) {
HOWPAYA3 = Byte.parseByte(s);
} else {
HOWPAYA3 = Byte.MIN_VALUE;
}
}

protected final void initHOWPAYB1(String s) {
if (!s.trim().isEmpty()) {
HOWPAYB1 = Byte.parseByte(s);
} else {
HOWPAYB1 = Byte.MIN_VALUE;
}
}

protected final void initHOWPAYB2(String s) {
if (!s.trim().isEmpty()) {
HOWPAYB2 = Byte.parseByte(s);
} else {
HOWPAYB2 = Byte.MIN_VALUE;
}
}

protected final void initHOWPAYB3(String s) {
if (!s.trim().isEmpty()) {
HOWPAYB3 = Byte.parseByte(s);
} else {
HOWPAYB3 = Byte.MIN_VALUE;
}
}

protected final void initHRPID(String s) {
if (!s.trim().isEmpty()) {
HRPID = Integer.parseInt(s);
} else {
HRPID = Integer.MIN_VALUE;
}
}

protected final void initHRPNO(String s) {
if (!s.trim().isEmpty()) {
HRPNO = Byte.parseByte(s);
} else {
HRPNO = Byte.MIN_VALUE;
}
}

protected final void initHRS_SLPH(String s) {
if (!s.trim().isEmpty()) {
HRS_SLPH = Byte.parseByte(s);
} else {
HRS_SLPH = Byte.MIN_VALUE;
}
}

protected final void initHRS_SLPM(String s) {
if (!s.trim().isEmpty()) {
HRS_SLPM = Byte.parseByte(s);
} else {
HRS_SLPM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATD(String s) {
if (!s.trim().isEmpty()) {
IENDDATD = Byte.parseByte(s);
} else {
IENDDATD = Byte.MIN_VALUE;
}
}

protected final void initIENDDATM(String s) {
if (!s.trim().isEmpty()) {
IENDDATM = Byte.parseByte(s);
} else {
IENDDATM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATMM(String s) {
if (!s.trim().isEmpty()) {
IENDDATMM = Byte.parseByte(s);
} else {
IENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATSS(String s) {
if (!s.trim().isEmpty()) {
IENDDATSS = Byte.parseByte(s);
} else {
IENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initIENDDATY(String s) {
if (!s.trim().isEmpty()) {
IENDDATY = Short.parseShort(s);
} else {
IENDDATY = Short.MIN_VALUE;
}
}

protected final void initINCASS(String s) {
if (!s.trim().isEmpty()) {
INCASS = Byte.parseByte(s);
} else {
INCASS = Byte.MIN_VALUE;
}
}

protected final void initIND5MUS_LW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_LW = Double.parseDouble(s);
} else {
IND5MUS_LW = Double.NaN;
}
}

protected final void initIND5MUS_XW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_XW = Double.parseDouble(s);
} else {
IND5MUS_XW = Double.NaN;
}
}

protected final void initINDBD91_LW(String s) {
if (!s.trim().isEmpty()) {
INDBD91_LW = Double.parseDouble(s);
} else {
INDBD91_LW = Double.NaN;
}
}

protected final void initINDBDUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDBDUB_LW = Double.parseDouble(s);
} else {
INDBDUB_LW = Double.NaN;
}
}

protected final void initINDIN01_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN01_LW = Double.parseDouble(s);
} else {
INDIN01_LW = Double.NaN;
}
}

protected final void initINDIN91_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN91_LW = Double.parseDouble(s);
} else {
INDIN91_LW = Double.NaN;
}
}

protected final void initINDINUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_LW = Double.parseDouble(s);
} else {
INDINUB_LW = Double.NaN;
}
}

protected final void initINDINUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_XW = Double.parseDouble(s);
} else {
INDINUB_XW = Double.NaN;
}
}

protected final void initINDINUI_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUI_LW = Double.parseDouble(s);
} else {
INDINUI_LW = Double.NaN;
}
}

protected final void initINDINUI_XW(String s) {
if (!s.trim().isEmpty()) {
INDINUI_XW = Double.parseDouble(s);
} else {
INDINUI_XW = Double.NaN;
}
}

protected final void initINDINUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUS_LW = Double.parseDouble(s);
} else {
INDINUS_LW = Double.NaN;
}
}

protected final void initINDLEARN(String s) {
if (!s.trim().isEmpty()) {
INDLEARN = Byte.parseByte(s);
} else {
INDLEARN = Byte.MIN_VALUE;
}
}

protected final void initINDLEARNEW(String s) {
if (!s.trim().isEmpty()) {
INDLEARNEW = Byte.parseByte(s);
} else {
INDLEARNEW = Byte.MIN_VALUE;
}
}

protected final void initINDMODE(String s) {
if (!s.trim().isEmpty()) {
INDMODE = Byte.parseByte(s);
} else {
INDMODE = Byte.MIN_VALUE;
}
}

protected final void initINDNS91_LW(String s) {
if (!s.trim().isEmpty()) {
INDNS91_LW = Double.parseDouble(s);
} else {
INDNS91_LW = Double.NaN;
}
}

protected final void initINDNSUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDNSUB_LW = Double.parseDouble(s);
} else {
INDNSUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_LW = Double.parseDouble(s);
} else {
INDPXUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_XW = Double.parseDouble(s);
} else {
INDPXUB_XW = Double.NaN;
}
}

protected final void initINDPXUI_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUI_LW = Double.parseDouble(s);
} else {
INDPXUI_LW = Double.NaN;
}
}

protected final void initINDPXUI_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXUI_XW = Double.parseDouble(s);
} else {
INDPXUI_XW = Double.NaN;
}
}

protected final void initINDPXUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUS_LW = Double.parseDouble(s);
} else {
INDPXUS_LW = Double.NaN;
}
}

protected final void initINDSCUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_LW = Double.parseDouble(s);
} else {
INDSCUB_LW = Double.NaN;
}
}

protected final void initINDSCUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_XW = Double.parseDouble(s);
} else {
INDSCUB_XW = Double.NaN;
}
}

protected final void initINDSCUI_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUI_LW = Double.parseDouble(s);
} else {
INDSCUI_LW = Double.NaN;
}
}

protected final void initINDSCUI_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCUI_XW = Double.parseDouble(s);
} else {
INDSCUI_XW = Double.NaN;
}
}

protected final void initINDSCUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUS_LW = Double.parseDouble(s);
} else {
INDSCUS_LW = Double.NaN;
}
}

protected final void initINSULTED1(String s) {
if (!s.trim().isEmpty()) {
INSULTED1 = Byte.parseByte(s);
} else {
INSULTED1 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED10(String s) {
if (!s.trim().isEmpty()) {
INSULTED10 = Byte.parseByte(s);
} else {
INSULTED10 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED11(String s) {
if (!s.trim().isEmpty()) {
INSULTED11 = Byte.parseByte(s);
} else {
INSULTED11 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED2(String s) {
if (!s.trim().isEmpty()) {
INSULTED2 = Byte.parseByte(s);
} else {
INSULTED2 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED3(String s) {
if (!s.trim().isEmpty()) {
INSULTED3 = Byte.parseByte(s);
} else {
INSULTED3 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED4(String s) {
if (!s.trim().isEmpty()) {
INSULTED4 = Byte.parseByte(s);
} else {
INSULTED4 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED5(String s) {
if (!s.trim().isEmpty()) {
INSULTED5 = Byte.parseByte(s);
} else {
INSULTED5 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED6(String s) {
if (!s.trim().isEmpty()) {
INSULTED6 = Byte.parseByte(s);
} else {
INSULTED6 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED7(String s) {
if (!s.trim().isEmpty()) {
INSULTED7 = Byte.parseByte(s);
} else {
INSULTED7 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED8(String s) {
if (!s.trim().isEmpty()) {
INSULTED8 = Byte.parseByte(s);
} else {
INSULTED8 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED9(String s) {
if (!s.trim().isEmpty()) {
INSULTED9 = Byte.parseByte(s);
} else {
INSULTED9 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED96(String s) {
if (!s.trim().isEmpty()) {
INSULTED96 = Byte.parseByte(s);
} else {
INSULTED96 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED97(String s) {
if (!s.trim().isEmpty()) {
INSULTED97 = Byte.parseByte(s);
} else {
INSULTED97 = Byte.MIN_VALUE;
}
}

protected final void initINSULTEDO_CODE(String s) {
if (!s.trim().isEmpty()) {
INSULTEDO_CODE = Byte.parseByte(s);
} else {
INSULTEDO_CODE = Byte.MIN_VALUE;
}
}

protected final void initINSULTED_DV(String s) {
if (!s.trim().isEmpty()) {
INSULTED_DV = Byte.parseByte(s);
} else {
INSULTED_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATD_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATD_DV = Byte.parseByte(s);
} else {
INTDATD_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATM_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATM_DV = Byte.parseByte(s);
} else {
INTDATM_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATY_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATY_DV = Short.parseShort(s);
} else {
INTDATY_DV = Short.MIN_VALUE;
}
}

protected final void initINTQUS(String s) {
if (!s.trim().isEmpty()) {
INTQUS = Byte.parseByte(s);
} else {
INTQUS = Byte.MIN_VALUE;
}
}

protected final void initIOUTCOME(String s) {
if (!s.trim().isEmpty()) {
IOUTCOME = Byte.parseByte(s);
} else {
IOUTCOME = Byte.MIN_VALUE;
}
}

protected final void initIPROXY(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IPROXY = false;
} else {
IPROXY = true;
}
}
}

protected final void initISTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATMM = Byte.parseByte(s);
} else {
ISTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATSS = Byte.parseByte(s);
} else {
ISTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initIVAFFCT11(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT11 = Byte.parseByte(s);
} else {
IVAFFCT11 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT12(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT12 = Byte.parseByte(s);
} else {
IVAFFCT12 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT13(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT13 = Byte.parseByte(s);
} else {
IVAFFCT13 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT14(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT14 = Byte.parseByte(s);
} else {
IVAFFCT14 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT15(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT15 = Byte.parseByte(s);
} else {
IVAFFCT15 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT17(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT17 = Byte.parseByte(s);
} else {
IVAFFCT17 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT21(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT21 = Byte.parseByte(s);
} else {
IVAFFCT21 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT22(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT22 = Byte.parseByte(s);
} else {
IVAFFCT22 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT23(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT23 = Byte.parseByte(s);
} else {
IVAFFCT23 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT27(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT27 = Byte.parseByte(s);
} else {
IVAFFCT27 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT30(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT30 = Byte.parseByte(s);
} else {
IVAFFCT30 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT97(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT97 = Byte.parseByte(s);
} else {
IVAFFCT97 = Byte.MIN_VALUE;
}
}

protected final void initIVCOOP(String s) {
if (!s.trim().isEmpty()) {
IVCOOP = Byte.parseByte(s);
} else {
IVCOOP = Byte.MIN_VALUE;
}
}

protected final void initIVINFNCE(String s) {
if (!s.trim().isEmpty()) {
IVINFNCE = Byte.parseByte(s);
} else {
IVINFNCE = Byte.MIN_VALUE;
}
}

protected final void initIVLIBAL(String s) {
if (!s.trim().isEmpty()) {
IVLIBAL = Byte.parseByte(s);
} else {
IVLIBAL = Byte.MIN_VALUE;
}
}

protected final void initIVLIENG(String s) {
if (!s.trim().isEmpty()) {
IVLIENG = Byte.parseByte(s);
} else {
IVLIENG = Byte.MIN_VALUE;
}
}

protected final void initIVLITRANS(String s) {
if (!s.trim().isEmpty()) {
IVLITRANS = Byte.parseByte(s);
} else {
IVLITRANS = Byte.MIN_VALUE;
}
}

protected final void initIVLIWHO(String s) {
if (!s.trim().isEmpty()) {
IVLIWHO = Byte.parseByte(s);
} else {
IVLIWHO = Byte.MIN_VALUE;
}
}

protected final void initJ1BOSS(String s) {
if (!s.trim().isEmpty()) {
J1BOSS = Byte.parseByte(s);
} else {
J1BOSS = Byte.MIN_VALUE;
}
}

protected final void initJ1MNGR(String s) {
if (!s.trim().isEmpty()) {
J1MNGR = Byte.parseByte(s);
} else {
J1MNGR = Byte.MIN_VALUE;
}
}

protected final void initJ1NONE(String s) {
if (!s.trim().isEmpty()) {
J1NONE = Byte.parseByte(s);
} else {
J1NONE = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC5_DV = Byte.parseByte(s);
} else {
J1NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1SEMP(String s) {
if (!s.trim().isEmpty()) {
J1SEMP = Byte.parseByte(s);
} else {
J1SEMP = Byte.MIN_VALUE;
}
}

protected final void initJ1SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC00_CC = Short.parseShort(s);
} else {
J1SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC10_CC = Short.parseShort(s);
} else {
J1SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC90_CC = Byte.parseByte(s);
} else {
J1SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJ2NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J2NSSEC5_DV = Byte.parseByte(s);
} else {
J2NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ2PAY(String s) {
if (!s.trim().isEmpty()) {
J2PAY = Integer.parseInt(s);
} else {
J2PAY = Integer.MIN_VALUE;
}
}

protected final void initJ2PAYNET_DV(String s) {
if (!s.trim().isEmpty()) {
J2PAYNET_DV = Double.parseDouble(s);
} else {
J2PAYNET_DV = Double.NaN;
}
}

protected final void initJ2SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC00_CC = Short.parseShort(s);
} else {
J2SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC10_CC = Short.parseShort(s);
} else {
J2SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC90_CC = Short.parseShort(s);
} else {
J2SOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBATT1(String s) {
if (!s.trim().isEmpty()) {
JBATT1 = Byte.parseByte(s);
} else {
JBATT1 = Byte.MIN_VALUE;
}
}

protected final void initJBATT2(String s) {
if (!s.trim().isEmpty()) {
JBATT2 = Byte.parseByte(s);
} else {
JBATT2 = Byte.MIN_VALUE;
}
}

protected final void initJBATT3(String s) {
if (!s.trim().isEmpty()) {
JBATT3 = Byte.parseByte(s);
} else {
JBATT3 = Byte.MIN_VALUE;
}
}

protected final void initJBATT4(String s) {
if (!s.trim().isEmpty()) {
JBATT4 = Byte.parseByte(s);
} else {
JBATT4 = Byte.MIN_VALUE;
}
}

protected final void initJBATT5(String s) {
if (!s.trim().isEmpty()) {
JBATT5 = Byte.parseByte(s);
} else {
JBATT5 = Byte.MIN_VALUE;
}
}

protected final void initJBATT6(String s) {
if (!s.trim().isEmpty()) {
JBATT6 = Byte.parseByte(s);
} else {
JBATT6 = Byte.MIN_VALUE;
}
}

protected final void initJBENDD(String s) {
if (!s.trim().isEmpty()) {
JBENDD = Byte.parseByte(s);
} else {
JBENDD = Byte.MIN_VALUE;
}
}

protected final void initJBENDM(String s) {
if (!s.trim().isEmpty()) {
JBENDM = Byte.parseByte(s);
} else {
JBENDM = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS1(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS1 = Byte.parseByte(s);
} else {
JBENDREAS1 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS10(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS10 = Byte.parseByte(s);
} else {
JBENDREAS10 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS11(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS11 = Byte.parseByte(s);
} else {
JBENDREAS11 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS2(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS2 = Byte.parseByte(s);
} else {
JBENDREAS2 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS3(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS3 = Byte.parseByte(s);
} else {
JBENDREAS3 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS4(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS4 = Byte.parseByte(s);
} else {
JBENDREAS4 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS5(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS5 = Byte.parseByte(s);
} else {
JBENDREAS5 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS6(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS6 = Byte.parseByte(s);
} else {
JBENDREAS6 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS7(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS7 = Byte.parseByte(s);
} else {
JBENDREAS7 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS8(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS8 = Byte.parseByte(s);
} else {
JBENDREAS8 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS9(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS9 = Byte.parseByte(s);
} else {
JBENDREAS9 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS97(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS97 = Byte.parseByte(s);
} else {
JBENDREAS97 = Byte.MIN_VALUE;
}
}

protected final void initJBENDY4(String s) {
if (!s.trim().isEmpty()) {
JBENDY4 = Short.parseShort(s);
} else {
JBENDY4 = Short.MIN_VALUE;
}
}

protected final void initJBES2000(String s) {
if (!s.trim().isEmpty()) {
JBES2000 = Byte.parseByte(s);
} else {
JBES2000 = Byte.MIN_VALUE;
}
}

protected final void initJBIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JBIINDB_DV = Byte.parseByte(s);
} else {
JBIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJBMNGRCHK(String s) {
if (!s.trim().isEmpty()) {
JBMNGRCHK = Byte.parseByte(s);
} else {
JBMNGRCHK = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC3_DV = Byte.parseByte(s);
} else {
JBNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC5_DV = Byte.parseByte(s);
} else {
JBNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC_DV = Short.parseShort(s);
} else {
JBNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJBOFFY(String s) {
if (!s.trim().isEmpty()) {
JBOFFY = Byte.parseByte(s);
} else {
JBOFFY = Byte.MIN_VALUE;
}
}

protected final void initJBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JBRGSC_DV = Short.parseShort(s);
} else {
JBRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJBSAMR(String s) {
if (!s.trim().isEmpty()) {
JBSAMR = Byte.parseByte(s);
} else {
JBSAMR = Byte.MIN_VALUE;
}
}

protected final void initJBSAT(String s) {
if (!s.trim().isEmpty()) {
JBSAT = Byte.parseByte(s);
} else {
JBSAT = Byte.MIN_VALUE;
}
}

protected final void initJBSECTPUB(String s) {
if (!s.trim().isEmpty()) {
JBSECTPUB = Byte.parseByte(s);
} else {
JBSECTPUB = Byte.MIN_VALUE;
}
}

protected final void initJBSEDV(String s) {
if (!s.trim().isEmpty()) {
JBSEDV = Byte.parseByte(s);
} else {
JBSEDV = Byte.MIN_VALUE;
}
}

protected final void initJBSEMPCHK(String s) {
if (!s.trim().isEmpty()) {
JBSEMPCHK = Byte.parseByte(s);
} else {
JBSEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07CHK(String s) {
if (!s.trim().isEmpty()) {
JBSIC07CHK = Byte.parseByte(s);
} else {
JBSIC07CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JBSIC07_CC = Byte.parseByte(s);
} else {
JBSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJBSIZECHK(String s) {
if (!s.trim().isEmpty()) {
JBSIZECHK = Byte.parseByte(s);
} else {
JBSIZECHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00CHK(String s) {
if (!s.trim().isEmpty()) {
JBSOC00CHK = Byte.parseByte(s);
} else {
JBSOC00CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC00_CC = Short.parseShort(s);
} else {
JBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC10_CC = Short.parseShort(s);
} else {
JBSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOCGR_DV(String s) {
if (!s.trim().isEmpty()) {
JBSOCGR_DV = Byte.parseByte(s);
} else {
JBSOCGR_DV = Byte.MIN_VALUE;
}
}

protected final void initJBTERM1(String s) {
if (!s.trim().isEmpty()) {
JBTERM1 = Byte.parseByte(s);
} else {
JBTERM1 = Byte.MIN_VALUE;
}
}

protected final void initJBTERM2(String s) {
if (!s.trim().isEmpty()) {
JBTERM2 = Byte.parseByte(s);
} else {
JBTERM2 = Byte.MIN_VALUE;
}
}

protected final void initJLENDM(String s) {
if (!s.trim().isEmpty()) {
JLENDM = Byte.parseByte(s);
} else {
JLENDM = Byte.MIN_VALUE;
}
}

protected final void initJLES2000(String s) {
if (!s.trim().isEmpty()) {
JLES2000 = Byte.parseByte(s);
} else {
JLES2000 = Byte.MIN_VALUE;
}
}

protected final void initJLIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JLIINDB_DV = Byte.parseByte(s);
} else {
JLIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC3_DV = Byte.parseByte(s);
} else {
JLNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC5_DV = Byte.parseByte(s);
} else {
JLNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC_DV = Short.parseShort(s);
} else {
JLNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JLRGSC_DV = Short.parseShort(s);
} else {
JLRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJLSEDV(String s) {
if (!s.trim().isEmpty()) {
JLSEDV = Byte.parseByte(s);
} else {
JLSEDV = Byte.MIN_VALUE;
}
}

protected final void initJLSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JLSIC07_CC = Byte.parseByte(s);
} else {
JLSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJLSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC00_CC = Short.parseShort(s);
} else {
JLSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJLSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC10_CC = Short.parseShort(s);
} else {
JLSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJOBDENY(String s) {
if (!s.trim().isEmpty()) {
JOBDENY = Byte.parseByte(s);
} else {
JOBDENY = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS1(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS1 = Byte.parseByte(s);
} else {
JOBHOURS1 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS2(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS2 = Byte.parseByte(s);
} else {
JOBHOURS2 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS3(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS3 = Byte.parseByte(s);
} else {
JOBHOURS3 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS4(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS4 = Byte.parseByte(s);
} else {
JOBHOURS4 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS5(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS5 = Byte.parseByte(s);
} else {
JOBHOURS5 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS6(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS6 = Byte.parseByte(s);
} else {
JOBHOURS6 = Byte.MIN_VALUE;
}
}

protected final void initJOBLOOK(String s) {
if (!s.trim().isEmpty()) {
JOBLOOK = Byte.parseByte(s);
} else {
JOBLOOK = Byte.MIN_VALUE;
}
}

protected final void initJSOWNAMT(String s) {
if (!s.trim().isEmpty()) {
JSOWNAMT = Integer.parseInt(s);
} else {
JSOWNAMT = Integer.MIN_VALUE;
}
}

protected final void initJSOWNOTH(String s) {
if (!s.trim().isEmpty()) {
JSOWNOTH = Byte.parseByte(s);
} else {
JSOWNOTH = Byte.MIN_VALUE;
}
}

protected final void initJSOWNSUM(String s) {
if (!s.trim().isEmpty()) {
JSOWNSUM = Byte.parseByte(s);
} else {
JSOWNSUM = Byte.MIN_VALUE;
}
}

protected final void initJSOWOTAM(String s) {
if (!s.trim().isEmpty()) {
JSOWOTAM = Short.parseShort(s);
} else {
JSOWOTAM = Short.MIN_VALUE;
}
}

protected final void initJSPART(String s) {
if (!s.trim().isEmpty()) {
JSPART = Byte.parseByte(s);
} else {
JSPART = Byte.MIN_VALUE;
}
}

protected final void initJSPAYU(String s) {
if (!s.trim().isEmpty()) {
JSPAYU = Integer.parseInt(s);
} else {
JSPAYU = Integer.MIN_VALUE;
}
}

protected final void initJSPAYW(String s) {
if (!s.trim().isEmpty()) {
JSPAYW = Byte.parseByte(s);
} else {
JSPAYW = Byte.MIN_VALUE;
}
}

protected final void initJSPRLS(String s) {
if (!s.trim().isEmpty()) {
JSPRLS = Byte.parseByte(s);
} else {
JSPRLS = Byte.MIN_VALUE;
}
}

protected final void initJSPRNI(String s) {
if (!s.trim().isEmpty()) {
JSPRNI = Byte.parseByte(s);
} else {
JSPRNI = Byte.MIN_VALUE;
}
}

protected final void initJSPRTX(String s) {
if (!s.trim().isEmpty()) {
JSPRTX = Byte.parseByte(s);
} else {
JSPRTX = Byte.MIN_VALUE;
}
}

protected final void initJSPYNI(String s) {
if (!s.trim().isEmpty()) {
JSPYNI = Byte.parseByte(s);
} else {
JSPYNI = Byte.MIN_VALUE;
}
}

protected final void initJSPYTX(String s) {
if (!s.trim().isEmpty()) {
JSPYTX = Byte.parseByte(s);
} else {
JSPYTX = Byte.MIN_VALUE;
}
}

protected final void initJSTTWTB_CAWI(String s) {
if (!s.trim().isEmpty()) {
JSTTWTB_CAWI = Byte.parseByte(s);
} else {
JSTTWTB_CAWI = Byte.MIN_VALUE;
}
}

protected final void initJSTYPEB(String s) {
if (!s.trim().isEmpty()) {
JSTYPEB = Byte.parseByte(s);
} else {
JSTYPEB = Byte.MIN_VALUE;
}
}

protected final void initJSWORKAC(String s) {
if (!s.trim().isEmpty()) {
JSWORKAC = Byte.parseByte(s);
} else {
JSWORKAC = Byte.MIN_VALUE;
}
}

protected final void initJSWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
JSWORKTRAV = Byte.parseByte(s);
} else {
JSWORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initJUBGN(String s) {
if (!s.trim().isEmpty()) {
JUBGN = Short.parseShort(s);
} else {
JUBGN = Short.MIN_VALUE;
}
}

protected final void initJULK4X1(String s) {
if (!s.trim().isEmpty()) {
JULK4X1 = Short.parseShort(s);
} else {
JULK4X1 = Short.MIN_VALUE;
}
}

protected final void initJULK4X2(String s) {
if (!s.trim().isEmpty()) {
JULK4X2 = Short.parseShort(s);
} else {
JULK4X2 = Short.MIN_VALUE;
}
}

protected final void initJULK4X3(String s) {
if (!s.trim().isEmpty()) {
JULK4X3 = Byte.parseByte(s);
} else {
JULK4X3 = Byte.MIN_VALUE;
}
}

protected final void initJULK4X4(String s) {
if (!s.trim().isEmpty()) {
JULK4X4 = Short.parseShort(s);
} else {
JULK4X4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X5(String s) {
if (!s.trim().isEmpty()) {
JULK4X5 = Short.parseShort(s);
} else {
JULK4X5 = Short.MIN_VALUE;
}
}

protected final void initJULK4X6(String s) {
if (!s.trim().isEmpty()) {
JULK4X6 = Short.parseShort(s);
} else {
JULK4X6 = Short.MIN_VALUE;
}
}

protected final void initJULK4X96(String s) {
if (!s.trim().isEmpty()) {
JULK4X96 = Byte.parseByte(s);
} else {
JULK4X96 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI01(String s) {
if (!s.trim().isEmpty()) {
KID2UNI01 = Byte.parseByte(s);
} else {
KID2UNI01 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI02(String s) {
if (!s.trim().isEmpty()) {
KID2UNI02 = Byte.parseByte(s);
} else {
KID2UNI02 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI03(String s) {
if (!s.trim().isEmpty()) {
KID2UNI03 = Byte.parseByte(s);
} else {
KID2UNI03 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI04(String s) {
if (!s.trim().isEmpty()) {
KID2UNI04 = Byte.parseByte(s);
} else {
KID2UNI04 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI05(String s) {
if (!s.trim().isEmpty()) {
KID2UNI05 = Byte.parseByte(s);
} else {
KID2UNI05 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI06(String s) {
if (!s.trim().isEmpty()) {
KID2UNI06 = Byte.parseByte(s);
} else {
KID2UNI06 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI07(String s) {
if (!s.trim().isEmpty()) {
KID2UNI07 = Byte.parseByte(s);
} else {
KID2UNI07 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI08(String s) {
if (!s.trim().isEmpty()) {
KID2UNI08 = Byte.parseByte(s);
} else {
KID2UNI08 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI09(String s) {
if (!s.trim().isEmpty()) {
KID2UNI09 = Byte.parseByte(s);
} else {
KID2UNI09 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI10(String s) {
if (!s.trim().isEmpty()) {
KID2UNI10 = Byte.parseByte(s);
} else {
KID2UNI10 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI11(String s) {
if (!s.trim().isEmpty()) {
KID2UNI11 = Byte.parseByte(s);
} else {
KID2UNI11 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI12(String s) {
if (!s.trim().isEmpty()) {
KID2UNI12 = Byte.parseByte(s);
} else {
KID2UNI12 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI13(String s) {
if (!s.trim().isEmpty()) {
KID2UNI13 = Byte.parseByte(s);
} else {
KID2UNI13 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI14(String s) {
if (!s.trim().isEmpty()) {
KID2UNI14 = Byte.parseByte(s);
} else {
KID2UNI14 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI15(String s) {
if (!s.trim().isEmpty()) {
KID2UNI15 = Byte.parseByte(s);
} else {
KID2UNI15 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI16(String s) {
if (!s.trim().isEmpty()) {
KID2UNI16 = Byte.parseByte(s);
} else {
KID2UNI16 = Byte.MIN_VALUE;
}
}

protected final void initKIDSPT(String s) {
if (!s.trim().isEmpty()) {
KIDSPT = Byte.parseByte(s);
} else {
KIDSPT = Byte.MIN_VALUE;
}
}

protected final void initLAAMTA(String s) {
if (!s.trim().isEmpty()) {
LAAMTA = Short.parseShort(s);
} else {
LAAMTA = Short.MIN_VALUE;
}
}

protected final void initLADOPT(String s) {
if (!s.trim().isEmpty()) {
LADOPT = Byte.parseByte(s);
} else {
LADOPT = Byte.MIN_VALUE;
}
}

protected final void initLAFREQA(String s) {
if (!s.trim().isEmpty()) {
LAFREQA = Byte.parseByte(s);
} else {
LAFREQA = Byte.MIN_VALUE;
}
}

protected final void initLAHELP11(String s) {
if (!s.trim().isEmpty()) {
LAHELP11 = Byte.parseByte(s);
} else {
LAHELP11 = Byte.MIN_VALUE;
}
}

protected final void initLAHELP12(String s) {
if (!s.trim().isEmpty()) {
LAHELP12 = Byte.parseByte(s);
} else {
LAHELP12 = Byte.MIN_VALUE;
}
}

protected final void initLAHELP13(String s) {
if (!s.trim().isEmpty()) {
LAHELP13 = Byte.parseByte(s);
} else {
LAHELP13 = Byte.MIN_VALUE;
}
}

protected final void initLAHELP14(String s) {
if (!s.trim().isEmpty()) {
LAHELP14 = Byte.parseByte(s);
} else {
LAHELP14 = Byte.MIN_VALUE;
}
}

protected final void initLAHELP15(String s) {
if (!s.trim().isEmpty()) {
LAHELP15 = Byte.parseByte(s);
} else {
LAHELP15 = Byte.MIN_VALUE;
}
}

protected final void initLAHELP16(String s) {
if (!s.trim().isEmpty()) {
LAHELP16 = Byte.parseByte(s);
} else {
LAHELP16 = Byte.MIN_VALUE;
}
}

protected final void initLAHELP17(String s) {
if (!s.trim().isEmpty()) {
LAHELP17 = Byte.parseByte(s);
} else {
LAHELP17 = Byte.MIN_VALUE;
}
}

protected final void initLAHELP18(String s) {
if (!s.trim().isEmpty()) {
LAHELP18 = Byte.parseByte(s);
} else {
LAHELP18 = Byte.MIN_VALUE;
}
}

protected final void initLAPAYA1(String s) {
if (!s.trim().isEmpty()) {
LAPAYA1 = Byte.parseByte(s);
} else {
LAPAYA1 = Byte.MIN_VALUE;
}
}

protected final void initLAPAYA2(String s) {
if (!s.trim().isEmpty()) {
LAPAYA2 = Byte.parseByte(s);
} else {
LAPAYA2 = Byte.MIN_VALUE;
}
}

protected final void initLAPAYB1(String s) {
if (!s.trim().isEmpty()) {
LAPAYB1 = Byte.parseByte(s);
} else {
LAPAYB1 = Byte.MIN_VALUE;
}
}

protected final void initLAPAYB2(String s) {
if (!s.trim().isEmpty()) {
LAPAYB2 = Byte.parseByte(s);
} else {
LAPAYB2 = Byte.MIN_VALUE;
}
}

protected final void initLATE(String s) {
if (!s.trim().isEmpty()) {
LATE = Byte.parseByte(s);
} else {
LATE = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI1(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI1 = Byte.parseByte(s);
} else {
LCHMULTI1 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI2(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI2 = Byte.parseByte(s);
} else {
LCHMULTI2 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI3(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI3 = Byte.parseByte(s);
} else {
LCHMULTI3 = Byte.MIN_VALUE;
}
}

protected final void initLCOHNPI(String s) {
if (!s.trim().isEmpty()) {
LCOHNPI = Byte.parseByte(s);
} else {
LCOHNPI = Byte.MIN_VALUE;
}
}

protected final void initLEVELIMP(String s) {
if (!s.trim().isEmpty()) {
LEVELIMP = Byte.parseByte(s);
} else {
LEVELIMP = Byte.MIN_VALUE;
}
}

protected final void initLIENG(String s) {
if (!s.trim().isEmpty()) {
LIENG = Byte.parseByte(s);
} else {
LIENG = Byte.MIN_VALUE;
}
}

protected final void initLIHOW(String s) {
if (!s.trim().isEmpty()) {
LIHOW = Byte.parseByte(s);
} else {
LIHOW = Byte.MIN_VALUE;
}
}

protected final void initLINGUA(String s) {
if (!s.trim().isEmpty()) {
LINGUA = Byte.parseByte(s);
} else {
LINGUA = Byte.MIN_VALUE;
}
}

protected final void initLITRANS(String s) {
if (!s.trim().isEmpty()) {
LITRANS = Byte.parseByte(s);
} else {
LITRANS = Byte.MIN_VALUE;
}
}

protected final void initLIVESP(String s) {
if (!s.trim().isEmpty()) {
LIVESP = Byte.parseByte(s);
} else {
LIVESP = Byte.MIN_VALUE;
}
}

protected final void initLIVESP_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
LIVESP_DV = false;
} else {
LIVESP_DV = true;
}
}
}

protected final void initLIVEWITH(String s) {
if (!s.trim().isEmpty()) {
LIVEWITH = Byte.parseByte(s);
} else {
LIVEWITH = Byte.MIN_VALUE;
}
}

protected final void initLIWHO(String s) {
if (!s.trim().isEmpty()) {
LIWHO = Byte.parseByte(s);
} else {
LIWHO = Byte.MIN_VALUE;
}
}

protected final void initLMAR1M(String s) {
if (!s.trim().isEmpty()) {
LMAR1M = Byte.parseByte(s);
} else {
LMAR1M = Byte.MIN_VALUE;
}
}

protected final void initLMAR1Y(String s) {
if (!s.trim().isEmpty()) {
LMAR1Y = Short.parseShort(s);
} else {
LMAR1Y = Short.MIN_VALUE;
}
}

protected final void initLMCBM1(String s) {
if (!s.trim().isEmpty()) {
LMCBM1 = Byte.parseByte(s);
} else {
LMCBM1 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM2(String s) {
if (!s.trim().isEmpty()) {
LMCBM2 = Byte.parseByte(s);
} else {
LMCBM2 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM3(String s) {
if (!s.trim().isEmpty()) {
LMCBM3 = Byte.parseByte(s);
} else {
LMCBM3 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM4(String s) {
if (!s.trim().isEmpty()) {
LMCBM4 = Byte.parseByte(s);
} else {
LMCBM4 = Byte.MIN_VALUE;
}
}

protected final void initLMCBY41(String s) {
if (!s.trim().isEmpty()) {
LMCBY41 = Short.parseShort(s);
} else {
LMCBY41 = Short.MIN_VALUE;
}
}

protected final void initLMCBY42(String s) {
if (!s.trim().isEmpty()) {
LMCBY42 = Short.parseShort(s);
} else {
LMCBY42 = Short.MIN_VALUE;
}
}

protected final void initLMCBY43(String s) {
if (!s.trim().isEmpty()) {
LMCBY43 = Short.parseShort(s);
} else {
LMCBY43 = Short.MIN_VALUE;
}
}

protected final void initLMCBY44(String s) {
if (!s.trim().isEmpty()) {
LMCBY44 = Short.parseShort(s);
} else {
LMCBY44 = Short.MIN_VALUE;
}
}

protected final void initLMSPM1(String s) {
if (!s.trim().isEmpty()) {
LMSPM1 = Byte.parseByte(s);
} else {
LMSPM1 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM2(String s) {
if (!s.trim().isEmpty()) {
LMSPM2 = Byte.parseByte(s);
} else {
LMSPM2 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM3(String s) {
if (!s.trim().isEmpty()) {
LMSPM3 = Byte.parseByte(s);
} else {
LMSPM3 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM4(String s) {
if (!s.trim().isEmpty()) {
LMSPM4 = Byte.parseByte(s);
} else {
LMSPM4 = Byte.MIN_VALUE;
}
}

protected final void initLMSPY41(String s) {
if (!s.trim().isEmpty()) {
LMSPY41 = Short.parseShort(s);
} else {
LMSPY41 = Short.MIN_VALUE;
}
}

protected final void initLMSPY42(String s) {
if (!s.trim().isEmpty()) {
LMSPY42 = Short.parseShort(s);
} else {
LMSPY42 = Short.MIN_VALUE;
}
}

protected final void initLMSPY43(String s) {
if (!s.trim().isEmpty()) {
LMSPY43 = Short.parseShort(s);
} else {
LMSPY43 = Short.MIN_VALUE;
}
}

protected final void initLMSPY44(String s) {
if (!s.trim().isEmpty()) {
LMSPY44 = Short.parseShort(s);
} else {
LMSPY44 = Short.MIN_VALUE;
}
}

protected final void initLNADOPT(String s) {
if (!s.trim().isEmpty()) {
LNADOPT = Byte.parseByte(s);
} else {
LNADOPT = Byte.MIN_VALUE;
}
}

protected final void initLNPRNT(String s) {
if (!s.trim().isEmpty()) {
LNPRNT = Byte.parseByte(s);
} else {
LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initLPRNT(String s) {
if (!s.trim().isEmpty()) {
LPRNT = Byte.parseByte(s);
} else {
LPRNT = Byte.MIN_VALUE;
}
}

protected final void initLVHM(String s) {
if (!s.trim().isEmpty()) {
LVHM = Byte.parseByte(s);
} else {
LVHM = Byte.MIN_VALUE;
}
}

protected final void initLVREL1(String s) {
if (!s.trim().isEmpty()) {
LVREL1 = Byte.parseByte(s);
} else {
LVREL1 = Byte.MIN_VALUE;
}
}

protected final void initLVREL10(String s) {
if (!s.trim().isEmpty()) {
LVREL10 = Byte.parseByte(s);
} else {
LVREL10 = Byte.MIN_VALUE;
}
}

protected final void initLVREL2(String s) {
if (!s.trim().isEmpty()) {
LVREL2 = Byte.parseByte(s);
} else {
LVREL2 = Byte.MIN_VALUE;
}
}

protected final void initLVREL3(String s) {
if (!s.trim().isEmpty()) {
LVREL3 = Byte.parseByte(s);
} else {
LVREL3 = Byte.MIN_VALUE;
}
}

protected final void initLVREL4(String s) {
if (!s.trim().isEmpty()) {
LVREL4 = Byte.parseByte(s);
} else {
LVREL4 = Byte.MIN_VALUE;
}
}

protected final void initLVREL5(String s) {
if (!s.trim().isEmpty()) {
LVREL5 = Byte.parseByte(s);
} else {
LVREL5 = Byte.MIN_VALUE;
}
}

protected final void initLVREL6(String s) {
if (!s.trim().isEmpty()) {
LVREL6 = Byte.parseByte(s);
} else {
LVREL6 = Byte.MIN_VALUE;
}
}

protected final void initLVREL7(String s) {
if (!s.trim().isEmpty()) {
LVREL7 = Byte.parseByte(s);
} else {
LVREL7 = Byte.MIN_VALUE;
}
}

protected final void initLVREL8(String s) {
if (!s.trim().isEmpty()) {
LVREL8 = Byte.parseByte(s);
} else {
LVREL8 = Byte.MIN_VALUE;
}
}

protected final void initLVREL9(String s) {
if (!s.trim().isEmpty()) {
LVREL9 = Byte.parseByte(s);
} else {
LVREL9 = Byte.MIN_VALUE;
}
}

protected final void initLVREL96(String s) {
if (!s.trim().isEmpty()) {
LVREL96 = Byte.parseByte(s);
} else {
LVREL96 = Byte.MIN_VALUE;
}
}

protected final void initLVSCHDO(String s) {
if (!s.trim().isEmpty()) {
LVSCHDO = Byte.parseByte(s);
} else {
LVSCHDO = Byte.MIN_VALUE;
}
}

protected final void initLWWRONG(String s) {
if (!s.trim().isEmpty()) {
LWWRONG = Byte.parseByte(s);
} else {
LWWRONG = Byte.MIN_VALUE;
}
}

protected final void initMAAGE(String s) {
if (!s.trim().isEmpty()) {
MAAGE = Byte.parseByte(s);
} else {
MAAGE = Byte.MIN_VALUE;
}
}

protected final void initMABROAD(String s) {
if (!s.trim().isEmpty()) {
MABROAD = Byte.parseByte(s);
} else {
MABROAD = Byte.MIN_VALUE;
}
}

protected final void initMABROADC1(String s) {
if (!s.trim().isEmpty()) {
MABROADC1 = Short.parseShort(s);
} else {
MABROADC1 = Short.MIN_VALUE;
}
}

protected final void initMABROADC2(String s) {
if (!s.trim().isEmpty()) {
MABROADC2 = Short.parseShort(s);
} else {
MABROADC2 = Short.MIN_VALUE;
}
}

protected final void initMABROADC3(String s) {
if (!s.trim().isEmpty()) {
MABROADC3 = Short.parseShort(s);
} else {
MABROADC3 = Short.MIN_VALUE;
}
}

protected final void initMABROADC4(String s) {
if (!s.trim().isEmpty()) {
MABROADC4 = Short.parseShort(s);
} else {
MABROADC4 = Short.MIN_VALUE;
}
}

protected final void initMABROADC5(String s) {
if (!s.trim().isEmpty()) {
MABROADC5 = Short.parseShort(s);
} else {
MABROADC5 = Short.MIN_VALUE;
}
}

protected final void initMACOB(String s) {
if (!s.trim().isEmpty()) {
MACOB = Byte.parseByte(s);
} else {
MACOB = Byte.MIN_VALUE;
}
}

protected final void initMACON(String s) {
if (!s.trim().isEmpty()) {
MACON = Byte.parseByte(s);
} else {
MACON = Byte.MIN_VALUE;
}
}

protected final void initMAFAR(String s) {
if (!s.trim().isEmpty()) {
MAFAR = Byte.parseByte(s);
} else {
MAFAR = Byte.MIN_VALUE;
}
}

protected final void initMAJU(String s) {
if (!s.trim().isEmpty()) {
MAJU = Byte.parseByte(s);
} else {
MAJU = Byte.MIN_VALUE;
}
}

protected final void initMALONE(String s) {
if (!s.trim().isEmpty()) {
MALONE = Byte.parseByte(s);
} else {
MALONE = Byte.MIN_VALUE;
}
}

protected final void initMAMOSTCON(String s) {
if (!s.trim().isEmpty()) {
MAMOSTCON = Byte.parseByte(s);
} else {
MAMOSTCON = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC5_DV = Byte.parseByte(s);
} else {
MANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initMARSTAT(String s) {
if (!s.trim().isEmpty()) {
MARSTAT = Byte.parseByte(s);
} else {
MARSTAT = Byte.MIN_VALUE;
}
}

protected final void initMASEE(String s) {
if (!s.trim().isEmpty()) {
MASEE = Byte.parseByte(s);
} else {
MASEE = Byte.MIN_VALUE;
}
}

protected final void initMASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC00_CC = Short.parseShort(s);
} else {
MASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC10_CC = Short.parseShort(s);
} else {
MASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC90_CC = Byte.parseByte(s);
} else {
MASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMASTAT_DV(String s) {
if (!s.trim().isEmpty()) {
MASTAT_DV = Byte.parseByte(s);
} else {
MASTAT_DV = Byte.MIN_VALUE;
}
}

protected final void initMATLEAVE(String s) {
if (!s.trim().isEmpty()) {
MATLEAVE = Byte.parseByte(s);
} else {
MATLEAVE = Byte.MIN_VALUE;
}
}

protected final void initMATLV(String s) {
if (!s.trim().isEmpty()) {
MATLV = Byte.parseByte(s);
} else {
MATLV = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDD(String s) {
if (!s.trim().isEmpty()) {
MATLVENDD = Byte.parseByte(s);
} else {
MATLVENDD = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDM(String s) {
if (!s.trim().isEmpty()) {
MATLVENDM = Byte.parseByte(s);
} else {
MATLVENDM = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDY4(String s) {
if (!s.trim().isEmpty()) {
MATLVENDY4 = Short.parseShort(s);
} else {
MATLVENDY4 = Short.MIN_VALUE;
}
}

protected final void initMATLVSTD(String s) {
if (!s.trim().isEmpty()) {
MATLVSTD = Byte.parseByte(s);
} else {
MATLVSTD = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTM(String s) {
if (!s.trim().isEmpty()) {
MATLVSTM = Byte.parseByte(s);
} else {
MATLVSTM = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTY4(String s) {
if (!s.trim().isEmpty()) {
MATLVSTY4 = Short.parseShort(s);
} else {
MATLVSTY4 = Short.MIN_VALUE;
}
}

protected final void initMAYRUK(String s) {
if (!s.trim().isEmpty()) {
MAYRUK = Byte.parseByte(s);
} else {
MAYRUK = Byte.MIN_VALUE;
}
}

protected final void initMDAY(String s) {
if (!s.trim().isEmpty()) {
MDAY = Byte.parseByte(s);
} else {
MDAY = Byte.MIN_VALUE;
}
}

protected final void initMDHRS(String s) {
if (!s.trim().isEmpty()) {
MDHRS = Byte.parseByte(s);
} else {
MDHRS = Byte.MIN_VALUE;
}
}

protected final void initMDMIN(String s) {
if (!s.trim().isEmpty()) {
MDMIN = Byte.parseByte(s);
} else {
MDMIN = Byte.MIN_VALUE;
}
}

protected final void initMED_SLP(String s) {
if (!s.trim().isEmpty()) {
MED_SLP = Byte.parseByte(s);
} else {
MED_SLP = Byte.MIN_VALUE;
}
}

protected final void initMEMPLOY(String s) {
if (!s.trim().isEmpty()) {
MEMPLOY = Byte.parseByte(s);
} else {
MEMPLOY = Byte.MIN_VALUE;
}
}

protected final void initMINDIRECT(String s) {
if (!s.trim().isEmpty()) {
MINDIRECT = Byte.parseByte(s);
} else {
MINDIRECT = Byte.MIN_VALUE;
}
}

protected final void initMINDIRECTC1(String s) {
if (!s.trim().isEmpty()) {
MINDIRECTC1 = Short.parseShort(s);
} else {
MINDIRECTC1 = Short.MIN_VALUE;
}
}

protected final void initMINDIRECTC2(String s) {
if (!s.trim().isEmpty()) {
MINDIRECTC2 = Short.parseShort(s);
} else {
MINDIRECTC2 = Short.MIN_VALUE;
}
}

protected final void initMINDIRECTC3(String s) {
if (!s.trim().isEmpty()) {
MINDIRECTC3 = Short.parseShort(s);
} else {
MINDIRECTC3 = Short.MIN_VALUE;
}
}

protected final void initMINDIRECTC4(String s) {
if (!s.trim().isEmpty()) {
MINDIRECTC4 = Short.parseShort(s);
} else {
MINDIRECTC4 = Short.MIN_VALUE;
}
}

protected final void initMINDIRECTC5(String s) {
if (!s.trim().isEmpty()) {
MINDIRECTC5 = Short.parseShort(s);
} else {
MINDIRECTC5 = Short.MIN_VALUE;
}
}

protected final void initMINTENT(String s) {
if (!s.trim().isEmpty()) {
MINTENT = Byte.parseByte(s);
} else {
MINTENT = Byte.MIN_VALUE;
}
}

protected final void initMINTWHEN(String s) {
if (!s.trim().isEmpty()) {
MINTWHEN = Byte.parseByte(s);
} else {
MINTWHEN = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE01(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE01 = Byte.parseByte(s);
} else {
MISSOURCE01 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE02(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE02 = Byte.parseByte(s);
} else {
MISSOURCE02 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE03(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE03 = Byte.parseByte(s);
} else {
MISSOURCE03 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE04(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE04 = Byte.parseByte(s);
} else {
MISSOURCE04 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE05(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE05 = Byte.parseByte(s);
} else {
MISSOURCE05 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE06(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE06 = Byte.parseByte(s);
} else {
MISSOURCE06 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE07(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE07 = Byte.parseByte(s);
} else {
MISSOURCE07 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE08(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE08 = Byte.parseByte(s);
} else {
MISSOURCE08 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE09(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE09 = Byte.parseByte(s);
} else {
MISSOURCE09 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE10(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE10 = Byte.parseByte(s);
} else {
MISSOURCE10 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE11(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE11 = Byte.parseByte(s);
} else {
MISSOURCE11 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE12(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE12 = Byte.parseByte(s);
} else {
MISSOURCE12 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE13(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE13 = Byte.parseByte(s);
} else {
MISSOURCE13 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE14(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE14 = Byte.parseByte(s);
} else {
MISSOURCE14 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE15(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE15 = Byte.parseByte(s);
} else {
MISSOURCE15 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE16(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE16 = Byte.parseByte(s);
} else {
MISSOURCE16 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE18(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE18 = Byte.parseByte(s);
} else {
MISSOURCE18 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE19(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE19 = Byte.parseByte(s);
} else {
MISSOURCE19 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE20(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE20 = Byte.parseByte(s);
} else {
MISSOURCE20 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE21(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE21 = Byte.parseByte(s);
} else {
MISSOURCE21 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE22(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE22 = Byte.parseByte(s);
} else {
MISSOURCE22 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE23(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE23 = Byte.parseByte(s);
} else {
MISSOURCE23 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE24(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE24 = Byte.parseByte(s);
} else {
MISSOURCE24 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE25(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE25 = Byte.parseByte(s);
} else {
MISSOURCE25 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE26(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE26 = Byte.parseByte(s);
} else {
MISSOURCE26 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE27(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE27 = Byte.parseByte(s);
} else {
MISSOURCE27 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE28(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE28 = Byte.parseByte(s);
} else {
MISSOURCE28 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE29(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE29 = Byte.parseByte(s);
} else {
MISSOURCE29 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE30(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE30 = Byte.parseByte(s);
} else {
MISSOURCE30 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE31(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE31 = Byte.parseByte(s);
} else {
MISSOURCE31 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE32(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE32 = Byte.parseByte(s);
} else {
MISSOURCE32 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE33(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE33 = Byte.parseByte(s);
} else {
MISSOURCE33 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE34(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE34 = Byte.parseByte(s);
} else {
MISSOURCE34 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE35(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE35 = Byte.parseByte(s);
} else {
MISSOURCE35 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE36(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE36 = Byte.parseByte(s);
} else {
MISSOURCE36 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE37(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE37 = Byte.parseByte(s);
} else {
MISSOURCE37 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE38(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE38 = Byte.parseByte(s);
} else {
MISSOURCE38 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE39(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE39 = Byte.parseByte(s);
} else {
MISSOURCE39 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE40(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE40 = Byte.parseByte(s);
} else {
MISSOURCE40 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE41(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE41 = Byte.parseByte(s);
} else {
MISSOURCE41 = Byte.MIN_VALUE;
}
}

protected final void initMLAGST(String s) {
if (!s.trim().isEmpty()) {
MLAGST = Byte.parseByte(s);
} else {
MLAGST = Byte.MIN_VALUE;
}
}

protected final void initMLAGSTU(String s) {
if (!s.trim().isEmpty()) {
MLAGSTU = Byte.parseByte(s);
} else {
MLAGSTU = Byte.MIN_VALUE;
}
}

protected final void initMLFUTR(String s) {
if (!s.trim().isEmpty()) {
MLFUTR = Byte.parseByte(s);
} else {
MLFUTR = Byte.MIN_VALUE;
}
}

protected final void initMLIVED(String s) {
if (!s.trim().isEmpty()) {
MLIVED = Byte.parseByte(s);
} else {
MLIVED = Byte.MIN_VALUE;
}
}

protected final void initMLIVEDC1(String s) {
if (!s.trim().isEmpty()) {
MLIVEDC1 = Short.parseShort(s);
} else {
MLIVEDC1 = Short.MIN_VALUE;
}
}

protected final void initMLIVEDC2(String s) {
if (!s.trim().isEmpty()) {
MLIVEDC2 = Short.parseShort(s);
} else {
MLIVEDC2 = Short.MIN_VALUE;
}
}

protected final void initMLIVEDC3(String s) {
if (!s.trim().isEmpty()) {
MLIVEDC3 = Short.parseShort(s);
} else {
MLIVEDC3 = Short.MIN_VALUE;
}
}

protected final void initMLIVEDC4(String s) {
if (!s.trim().isEmpty()) {
MLIVEDC4 = Short.parseShort(s);
} else {
MLIVEDC4 = Short.MIN_VALUE;
}
}

protected final void initMLIVEDC5(String s) {
if (!s.trim().isEmpty()) {
MLIVEDC5 = Short.parseShort(s);
} else {
MLIVEDC5 = Short.MIN_VALUE;
}
}

protected final void initMLIVEDIST(String s) {
if (!s.trim().isEmpty()) {
MLIVEDIST = Byte.parseByte(s);
} else {
MLIVEDIST = Byte.MIN_VALUE;
}
}

protected final void initMLIVEDIST5(String s) {
if (!s.trim().isEmpty()) {
MLIVEDIST5 = Byte.parseByte(s);
} else {
MLIVEDIST5 = Byte.MIN_VALUE;
}
}

protected final void initMLIVEDISTF(String s) {
if (!s.trim().isEmpty()) {
MLIVEDISTF = Byte.parseByte(s);
} else {
MLIVEDISTF = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT1(String s) {
if (!s.trim().isEmpty()) {
MLRNOT1 = Byte.parseByte(s);
} else {
MLRNOT1 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT10(String s) {
if (!s.trim().isEmpty()) {
MLRNOT10 = Byte.parseByte(s);
} else {
MLRNOT10 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT11(String s) {
if (!s.trim().isEmpty()) {
MLRNOT11 = Byte.parseByte(s);
} else {
MLRNOT11 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT12(String s) {
if (!s.trim().isEmpty()) {
MLRNOT12 = Byte.parseByte(s);
} else {
MLRNOT12 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT13(String s) {
if (!s.trim().isEmpty()) {
MLRNOT13 = Byte.parseByte(s);
} else {
MLRNOT13 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT2(String s) {
if (!s.trim().isEmpty()) {
MLRNOT2 = Byte.parseByte(s);
} else {
MLRNOT2 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT3(String s) {
if (!s.trim().isEmpty()) {
MLRNOT3 = Byte.parseByte(s);
} else {
MLRNOT3 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT4(String s) {
if (!s.trim().isEmpty()) {
MLRNOT4 = Byte.parseByte(s);
} else {
MLRNOT4 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT5(String s) {
if (!s.trim().isEmpty()) {
MLRNOT5 = Byte.parseByte(s);
} else {
MLRNOT5 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT6(String s) {
if (!s.trim().isEmpty()) {
MLRNOT6 = Byte.parseByte(s);
} else {
MLRNOT6 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT7(String s) {
if (!s.trim().isEmpty()) {
MLRNOT7 = Byte.parseByte(s);
} else {
MLRNOT7 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT8(String s) {
if (!s.trim().isEmpty()) {
MLRNOT8 = Byte.parseByte(s);
} else {
MLRNOT8 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT9(String s) {
if (!s.trim().isEmpty()) {
MLRNOT9 = Byte.parseByte(s);
} else {
MLRNOT9 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT97(String s) {
if (!s.trim().isEmpty()) {
MLRNOT97 = Byte.parseByte(s);
} else {
MLRNOT97 = Byte.MIN_VALUE;
}
}

protected final void initMLSTATCHK(String s) {
if (!s.trim().isEmpty()) {
MLSTATCHK = Byte.parseByte(s);
} else {
MLSTATCHK = Byte.MIN_VALUE;
}
}

protected final void initMLWKFPT(String s) {
if (!s.trim().isEmpty()) {
MLWKFPT = Byte.parseByte(s);
} else {
MLWKFPT = Byte.MIN_VALUE;
}
}

protected final void initMNABROAD(String s) {
if (!s.trim().isEmpty()) {
MNABROAD = Byte.parseByte(s);
} else {
MNABROAD = Byte.MIN_VALUE;
}
}

protected final void initMNLIVED(String s) {
if (!s.trim().isEmpty()) {
MNLIVED = Byte.parseByte(s);
} else {
MNLIVED = Byte.MIN_VALUE;
}
}

protected final void initMNMOVES(String s) {
if (!s.trim().isEmpty()) {
MNMOVES = Byte.parseByte(s);
} else {
MNMOVES = Byte.MIN_VALUE;
}
}

protected final void initMNOTHERC(String s) {
if (!s.trim().isEmpty()) {
MNOTHERC = Byte.parseByte(s);
} else {
MNOTHERC = Byte.MIN_VALUE;
}
}

protected final void initMNPID(String s) {
if (!s.trim().isEmpty()) {
MNPID = Integer.parseInt(s);
} else {
MNPID = Integer.MIN_VALUE;
}
}

protected final void initMNPNO(String s) {
if (!s.trim().isEmpty()) {
MNPNO = Byte.parseByte(s);
} else {
MNPNO = Byte.MIN_VALUE;
}
}

protected final void initMNSPID(String s) {
if (!s.trim().isEmpty()) {
MNSPID = Integer.parseInt(s);
} else {
MNSPID = Integer.MIN_VALUE;
}
}

protected final void initMNSPNO(String s) {
if (!s.trim().isEmpty()) {
MNSPNO = Byte.parseByte(s);
} else {
MNSPNO = Byte.MIN_VALUE;
}
}

protected final void initMOBCOMP(String s) {
if (!s.trim().isEmpty()) {
MOBCOMP = Byte.parseByte(s);
} else {
MOBCOMP = Byte.MIN_VALUE;
}
}

protected final void initMOBUSE(String s) {
if (!s.trim().isEmpty()) {
MOBUSE = Byte.parseByte(s);
} else {
MOBUSE = Byte.MIN_VALUE;
}
}

protected final void initMONTH(String s) {
if (!s.trim().isEmpty()) {
MONTH = Byte.parseByte(s);
} else {
MONTH = Byte.MIN_VALUE;
}
}

protected final void initMOVDIR(String s) {
if (!s.trim().isEmpty()) {
MOVDIR = Byte.parseByte(s);
} else {
MOVDIR = Byte.MIN_VALUE;
}
}

protected final void initMOVEOTH_CODE(String s) {
if (!s.trim().isEmpty()) {
MOVEOTH_CODE = Byte.parseByte(s);
} else {
MOVEOTH_CODE = Byte.MIN_VALUE;
}
}

protected final void initMOVY11(String s) {
if (!s.trim().isEmpty()) {
MOVY11 = Byte.parseByte(s);
} else {
MOVY11 = Byte.MIN_VALUE;
}
}

protected final void initMOVY12(String s) {
if (!s.trim().isEmpty()) {
MOVY12 = Byte.parseByte(s);
} else {
MOVY12 = Byte.MIN_VALUE;
}
}

protected final void initMOVY13(String s) {
if (!s.trim().isEmpty()) {
MOVY13 = Byte.parseByte(s);
} else {
MOVY13 = Byte.MIN_VALUE;
}
}

protected final void initMOVY14(String s) {
if (!s.trim().isEmpty()) {
MOVY14 = Byte.parseByte(s);
} else {
MOVY14 = Byte.MIN_VALUE;
}
}

protected final void initMOVY15(String s) {
if (!s.trim().isEmpty()) {
MOVY15 = Byte.parseByte(s);
} else {
MOVY15 = Byte.MIN_VALUE;
}
}

protected final void initMOVY16(String s) {
if (!s.trim().isEmpty()) {
MOVY16 = Byte.parseByte(s);
} else {
MOVY16 = Byte.MIN_VALUE;
}
}

protected final void initMREASON1(String s) {
if (!s.trim().isEmpty()) {
MREASON1 = Byte.parseByte(s);
} else {
MREASON1 = Byte.MIN_VALUE;
}
}

protected final void initMREASON2(String s) {
if (!s.trim().isEmpty()) {
MREASON2 = Byte.parseByte(s);
} else {
MREASON2 = Byte.MIN_VALUE;
}
}

protected final void initMREASON3(String s) {
if (!s.trim().isEmpty()) {
MREASON3 = Byte.parseByte(s);
} else {
MREASON3 = Byte.MIN_VALUE;
}
}

protected final void initMREASON4(String s) {
if (!s.trim().isEmpty()) {
MREASON4 = Byte.parseByte(s);
} else {
MREASON4 = Byte.MIN_VALUE;
}
}

protected final void initMREASON5(String s) {
if (!s.trim().isEmpty()) {
MREASON5 = Byte.parseByte(s);
} else {
MREASON5 = Byte.MIN_VALUE;
}
}

protected final void initMREASON6(String s) {
if (!s.trim().isEmpty()) {
MREASON6 = Byte.parseByte(s);
} else {
MREASON6 = Byte.MIN_VALUE;
}
}

protected final void initMREASON7(String s) {
if (!s.trim().isEmpty()) {
MREASON7 = Byte.parseByte(s);
} else {
MREASON7 = Byte.MIN_VALUE;
}
}

protected final void initMREASON97(String s) {
if (!s.trim().isEmpty()) {
MREASON97 = Byte.parseByte(s);
} else {
MREASON97 = Byte.MIN_VALUE;
}
}

protected final void initMREASONO_CODE(String s) {
if (!s.trim().isEmpty()) {
MREASONO_CODE = Byte.parseByte(s);
} else {
MREASONO_CODE = Byte.MIN_VALUE;
}
}

protected final void initMRETURNED(String s) {
if (!s.trim().isEmpty()) {
MRETURNED = Byte.parseByte(s);
} else {
MRETURNED = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH1(String s) {
if (!s.trim().isEmpty()) {
MSTATCH1 = Byte.parseByte(s);
} else {
MSTATCH1 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH2(String s) {
if (!s.trim().isEmpty()) {
MSTATCH2 = Byte.parseByte(s);
} else {
MSTATCH2 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH3(String s) {
if (!s.trim().isEmpty()) {
MSTATCH3 = Byte.parseByte(s);
} else {
MSTATCH3 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH4(String s) {
if (!s.trim().isEmpty()) {
MSTATCH4 = Byte.parseByte(s);
} else {
MSTATCH4 = Byte.MIN_VALUE;
}
}

protected final void initMSTATSAM(String s) {
if (!s.trim().isEmpty()) {
MSTATSAM = Short.parseShort(s);
} else {
MSTATSAM = Short.MIN_VALUE;
}
}

protected final void initMSTATSAMN(String s) {
if (!s.trim().isEmpty()) {
MSTATSAMN = Byte.parseByte(s);
} else {
MSTATSAMN = Byte.MIN_VALUE;
}
}

protected final void initMVEVER(String s) {
if (!s.trim().isEmpty()) {
MVEVER = Byte.parseByte(s);
} else {
MVEVER = Byte.MIN_VALUE;
}
}

protected final void initMVMNTH(String s) {
if (!s.trim().isEmpty()) {
MVMNTH = Byte.parseByte(s);
} else {
MVMNTH = Byte.MIN_VALUE;
}
}

protected final void initMVYR(String s) {
if (!s.trim().isEmpty()) {
MVYR = Short.parseShort(s);
} else {
MVYR = Short.MIN_VALUE;
}
}

protected final void initMWHRS(String s) {
if (!s.trim().isEmpty()) {
MWHRS = Byte.parseByte(s);
} else {
MWHRS = Byte.MIN_VALUE;
}
}

protected final void initMWMIN(String s) {
if (!s.trim().isEmpty()) {
MWMIN = Byte.parseByte(s);
} else {
MWMIN = Byte.MIN_VALUE;
}
}

protected final void initN1619ABS(String s) {
if (!s.trim().isEmpty()) {
N1619ABS = Byte.parseByte(s);
} else {
N1619ABS = Byte.MIN_VALUE;
}
}

protected final void initNADOPTCH(String s) {
if (!s.trim().isEmpty()) {
NADOPTCH = Byte.parseByte(s);
} else {
NADOPTCH = Byte.MIN_VALUE;
}
}

protected final void initNAIDXHH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH = Byte.parseByte(s);
} else {
NAIDXHH = Byte.MIN_VALUE;
}
}

protected final void initNATID1(String s) {
if (!s.trim().isEmpty()) {
NATID1 = Byte.parseByte(s);
} else {
NATID1 = Byte.MIN_VALUE;
}
}

protected final void initNATID2(String s) {
if (!s.trim().isEmpty()) {
NATID2 = Byte.parseByte(s);
} else {
NATID2 = Byte.MIN_VALUE;
}
}

protected final void initNATID3(String s) {
if (!s.trim().isEmpty()) {
NATID3 = Byte.parseByte(s);
} else {
NATID3 = Byte.MIN_VALUE;
}
}

protected final void initNATID4(String s) {
if (!s.trim().isEmpty()) {
NATID4 = Byte.parseByte(s);
} else {
NATID4 = Byte.MIN_VALUE;
}
}

protected final void initNATID5(String s) {
if (!s.trim().isEmpty()) {
NATID5 = Byte.parseByte(s);
} else {
NATID5 = Byte.MIN_VALUE;
}
}

protected final void initNATID6(String s) {
if (!s.trim().isEmpty()) {
NATID6 = Byte.parseByte(s);
} else {
NATID6 = Byte.MIN_VALUE;
}
}

protected final void initNATID97(String s) {
if (!s.trim().isEmpty()) {
NATID97 = Byte.parseByte(s);
} else {
NATID97 = Byte.MIN_VALUE;
}
}

protected final void initNCH10(String s) {
if (!s.trim().isEmpty()) {
NCH10 = Byte.parseByte(s);
} else {
NCH10 = Byte.MIN_VALUE;
}
}

protected final void initNCH10TO15(String s) {
if (!s.trim().isEmpty()) {
NCH10TO15 = Byte.parseByte(s);
} else {
NCH10TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH14RESP(String s) {
if (!s.trim().isEmpty()) {
NCH14RESP = Byte.parseByte(s);
} else {
NCH14RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH3RESP(String s) {
if (!s.trim().isEmpty()) {
NCH3RESP = Byte.parseByte(s);
} else {
NCH3RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH415RESP(String s) {
if (!s.trim().isEmpty()) {
NCH415RESP = Byte.parseByte(s);
} else {
NCH415RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5RESP(String s) {
if (!s.trim().isEmpty()) {
NCH5RESP = Byte.parseByte(s);
} else {
NCH5RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5TO15(String s) {
if (!s.trim().isEmpty()) {
NCH5TO15 = Byte.parseByte(s);
} else {
NCH5TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH8RESP(String s) {
if (!s.trim().isEmpty()) {
NCH8RESP = Byte.parseByte(s);
} else {
NCH8RESP = Byte.MIN_VALUE;
}
}

protected final void initNCHILD(String s) {
if (!s.trim().isEmpty()) {
NCHILD = Byte.parseByte(s);
} else {
NCHILD = Byte.MIN_VALUE;
}
}

protected final void initNCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHILD_DV = Short.parseShort(s);
} else {
NCHILD_DV = Short.MIN_VALUE;
}
}

protected final void initNCHRESP(String s) {
if (!s.trim().isEmpty()) {
NCHRESP = Byte.parseByte(s);
} else {
NCHRESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUNDER16(String s) {
if (!s.trim().isEmpty()) {
NCHUNDER16 = Byte.parseByte(s);
} else {
NCHUNDER16 = Byte.MIN_VALUE;
}
}

protected final void initNCIGS(String s) {
if (!s.trim().isEmpty()) {
NCIGS = Short.parseShort(s);
} else {
NCIGS = Short.MIN_VALUE;
}
}

protected final void initNCRR1(String s) {
if (!s.trim().isEmpty()) {
NCRR1 = Byte.parseByte(s);
} else {
NCRR1 = Byte.MIN_VALUE;
}
}

protected final void initNCRR11(String s) {
if (!s.trim().isEmpty()) {
NCRR11 = Byte.parseByte(s);
} else {
NCRR11 = Byte.MIN_VALUE;
}
}

protected final void initNCRR12(String s) {
if (!s.trim().isEmpty()) {
NCRR12 = Byte.parseByte(s);
} else {
NCRR12 = Byte.MIN_VALUE;
}
}

protected final void initNCRR3(String s) {
if (!s.trim().isEmpty()) {
NCRR3 = Byte.parseByte(s);
} else {
NCRR3 = Byte.MIN_VALUE;
}
}

protected final void initNCRR4(String s) {
if (!s.trim().isEmpty()) {
NCRR4 = Byte.parseByte(s);
} else {
NCRR4 = Byte.MIN_VALUE;
}
}

protected final void initNCRR5(String s) {
if (!s.trim().isEmpty()) {
NCRR5 = Byte.parseByte(s);
} else {
NCRR5 = Byte.MIN_VALUE;
}
}

protected final void initNCRR6(String s) {
if (!s.trim().isEmpty()) {
NCRR6 = Byte.parseByte(s);
} else {
NCRR6 = Byte.MIN_VALUE;
}
}

protected final void initNCRR8(String s) {
if (!s.trim().isEmpty()) {
NCRR8 = Byte.parseByte(s);
} else {
NCRR8 = Byte.MIN_VALUE;
}
}

protected final void initNCRR9(String s) {
if (!s.trim().isEmpty()) {
NCRR9 = Byte.parseByte(s);
} else {
NCRR9 = Byte.MIN_VALUE;
}
}

protected final void initNCRRM(String s) {
if (!s.trim().isEmpty()) {
NCRRM = Byte.parseByte(s);
} else {
NCRRM = Byte.MIN_VALUE;
}
}

protected final void initNCRRY4(String s) {
if (!s.trim().isEmpty()) {
NCRRY4 = Short.parseShort(s);
} else {
NCRRY4 = Short.MIN_VALUE;
}
}

protected final void initNDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
NDEPCHL_DV = Byte.parseByte(s);
} else {
NDEPCHL_DV = Byte.MIN_VALUE;
}
}

protected final void initNETPUSE(String s) {
if (!s.trim().isEmpty()) {
NETPUSE = Byte.parseByte(s);
} else {
NETPUSE = Byte.MIN_VALUE;
}
}

protected final void initNETUSE(String s) {
if (!s.trim().isEmpty()) {
NETUSE = Byte.parseByte(s);
} else {
NETUSE = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE1(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE1 = Byte.parseByte(s);
} else {
NEXTELSE1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE2(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE2 = Byte.parseByte(s);
} else {
NEXTELSE2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE3(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE3 = Byte.parseByte(s);
} else {
NEXTELSE3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE4(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE4 = Byte.parseByte(s);
} else {
NEXTELSE4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE5(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE5 = Byte.parseByte(s);
} else {
NEXTELSE5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE6(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE6 = Byte.parseByte(s);
} else {
NEXTELSE6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB1(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB1 = Byte.parseByte(s);
} else {
NEXTJOB1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB2(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB2 = Byte.parseByte(s);
} else {
NEXTJOB2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB3(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB3 = Byte.parseByte(s);
} else {
NEXTJOB3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB4(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB4 = Byte.parseByte(s);
} else {
NEXTJOB4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB5(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB5 = Byte.parseByte(s);
} else {
NEXTJOB5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB6(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB6 = Byte.parseByte(s);
} else {
NEXTJOB6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT1(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT1 = Byte.parseByte(s);
} else {
NEXTSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT2(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT2 = Byte.parseByte(s);
} else {
NEXTSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT3(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT3 = Byte.parseByte(s);
} else {
NEXTSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT4(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT4 = Byte.parseByte(s);
} else {
NEXTSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT5(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT5 = Byte.parseByte(s);
} else {
NEXTSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT6(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT6 = Byte.parseByte(s);
} else {
NEXTSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initNFH01(String s) {
if (!s.trim().isEmpty()) {
NFH01 = Byte.parseByte(s);
} else {
NFH01 = Byte.MIN_VALUE;
}
}

protected final void initNFH02(String s) {
if (!s.trim().isEmpty()) {
NFH02 = Byte.parseByte(s);
} else {
NFH02 = Byte.MIN_VALUE;
}
}

protected final void initNFH03(String s) {
if (!s.trim().isEmpty()) {
NFH03 = Byte.parseByte(s);
} else {
NFH03 = Byte.MIN_VALUE;
}
}

protected final void initNFH04(String s) {
if (!s.trim().isEmpty()) {
NFH04 = Byte.parseByte(s);
} else {
NFH04 = Byte.MIN_VALUE;
}
}

protected final void initNFH05(String s) {
if (!s.trim().isEmpty()) {
NFH05 = Byte.parseByte(s);
} else {
NFH05 = Byte.MIN_VALUE;
}
}

protected final void initNFH06(String s) {
if (!s.trim().isEmpty()) {
NFH06 = Byte.parseByte(s);
} else {
NFH06 = Byte.MIN_VALUE;
}
}

protected final void initNFH07(String s) {
if (!s.trim().isEmpty()) {
NFH07 = Byte.parseByte(s);
} else {
NFH07 = Byte.MIN_VALUE;
}
}

protected final void initNFH08(String s) {
if (!s.trim().isEmpty()) {
NFH08 = Byte.parseByte(s);
} else {
NFH08 = Byte.MIN_VALUE;
}
}

protected final void initNFH09(String s) {
if (!s.trim().isEmpty()) {
NFH09 = Byte.parseByte(s);
} else {
NFH09 = Byte.MIN_VALUE;
}
}

protected final void initNFH10(String s) {
if (!s.trim().isEmpty()) {
NFH10 = Byte.parseByte(s);
} else {
NFH10 = Byte.MIN_VALUE;
}
}

protected final void initNFH11(String s) {
if (!s.trim().isEmpty()) {
NFH11 = Byte.parseByte(s);
} else {
NFH11 = Byte.MIN_VALUE;
}
}

protected final void initNFH12(String s) {
if (!s.trim().isEmpty()) {
NFH12 = Byte.parseByte(s);
} else {
NFH12 = Byte.MIN_VALUE;
}
}

protected final void initNFH13(String s) {
if (!s.trim().isEmpty()) {
NFH13 = Byte.parseByte(s);
} else {
NFH13 = Byte.MIN_VALUE;
}
}

protected final void initNFH14(String s) {
if (!s.trim().isEmpty()) {
NFH14 = Byte.parseByte(s);
} else {
NFH14 = Byte.MIN_VALUE;
}
}

protected final void initNFH15(String s) {
if (!s.trim().isEmpty()) {
NFH15 = Byte.parseByte(s);
} else {
NFH15 = Byte.MIN_VALUE;
}
}

protected final void initNFH16(String s) {
if (!s.trim().isEmpty()) {
NFH16 = Byte.parseByte(s);
} else {
NFH16 = Byte.MIN_VALUE;
}
}

protected final void initNFH18(String s) {
if (!s.trim().isEmpty()) {
NFH18 = Byte.parseByte(s);
} else {
NFH18 = Byte.MIN_VALUE;
}
}

protected final void initNFH19(String s) {
if (!s.trim().isEmpty()) {
NFH19 = Byte.parseByte(s);
} else {
NFH19 = Byte.MIN_VALUE;
}
}

protected final void initNFH20(String s) {
if (!s.trim().isEmpty()) {
NFH20 = Byte.parseByte(s);
} else {
NFH20 = Byte.MIN_VALUE;
}
}

protected final void initNFH21(String s) {
if (!s.trim().isEmpty()) {
NFH21 = Byte.parseByte(s);
} else {
NFH21 = Byte.MIN_VALUE;
}
}

protected final void initNFH22(String s) {
if (!s.trim().isEmpty()) {
NFH22 = Byte.parseByte(s);
} else {
NFH22 = Byte.MIN_VALUE;
}
}

protected final void initNFH23(String s) {
if (!s.trim().isEmpty()) {
NFH23 = Byte.parseByte(s);
} else {
NFH23 = Byte.MIN_VALUE;
}
}

protected final void initNFH24(String s) {
if (!s.trim().isEmpty()) {
NFH24 = Byte.parseByte(s);
} else {
NFH24 = Byte.MIN_VALUE;
}
}

protected final void initNFH25(String s) {
if (!s.trim().isEmpty()) {
NFH25 = Byte.parseByte(s);
} else {
NFH25 = Byte.MIN_VALUE;
}
}

protected final void initNFH26(String s) {
if (!s.trim().isEmpty()) {
NFH26 = Byte.parseByte(s);
} else {
NFH26 = Byte.MIN_VALUE;
}
}

protected final void initNFH27(String s) {
if (!s.trim().isEmpty()) {
NFH27 = Byte.parseByte(s);
} else {
NFH27 = Byte.MIN_VALUE;
}
}

protected final void initNFH28(String s) {
if (!s.trim().isEmpty()) {
NFH28 = Byte.parseByte(s);
} else {
NFH28 = Byte.MIN_VALUE;
}
}

protected final void initNFH29(String s) {
if (!s.trim().isEmpty()) {
NFH29 = Byte.parseByte(s);
} else {
NFH29 = Byte.MIN_VALUE;
}
}

protected final void initNFH30(String s) {
if (!s.trim().isEmpty()) {
NFH30 = Byte.parseByte(s);
} else {
NFH30 = Byte.MIN_VALUE;
}
}

protected final void initNFH31(String s) {
if (!s.trim().isEmpty()) {
NFH31 = Byte.parseByte(s);
} else {
NFH31 = Byte.MIN_VALUE;
}
}

protected final void initNFH32(String s) {
if (!s.trim().isEmpty()) {
NFH32 = Byte.parseByte(s);
} else {
NFH32 = Byte.MIN_VALUE;
}
}

protected final void initNFH33(String s) {
if (!s.trim().isEmpty()) {
NFH33 = Byte.parseByte(s);
} else {
NFH33 = Byte.MIN_VALUE;
}
}

protected final void initNFH34(String s) {
if (!s.trim().isEmpty()) {
NFH34 = Byte.parseByte(s);
} else {
NFH34 = Byte.MIN_VALUE;
}
}

protected final void initNFH35(String s) {
if (!s.trim().isEmpty()) {
NFH35 = Byte.parseByte(s);
} else {
NFH35 = Byte.MIN_VALUE;
}
}

protected final void initNFH36(String s) {
if (!s.trim().isEmpty()) {
NFH36 = Byte.parseByte(s);
} else {
NFH36 = Byte.MIN_VALUE;
}
}

protected final void initNFH37(String s) {
if (!s.trim().isEmpty()) {
NFH37 = Byte.parseByte(s);
} else {
NFH37 = Byte.MIN_VALUE;
}
}

protected final void initNFH38(String s) {
if (!s.trim().isEmpty()) {
NFH38 = Byte.parseByte(s);
} else {
NFH38 = Byte.MIN_VALUE;
}
}

protected final void initNFH39(String s) {
if (!s.trim().isEmpty()) {
NFH39 = Byte.parseByte(s);
} else {
NFH39 = Byte.MIN_VALUE;
}
}

protected final void initNFH40(String s) {
if (!s.trim().isEmpty()) {
NFH40 = Byte.parseByte(s);
} else {
NFH40 = Byte.MIN_VALUE;
}
}

protected final void initNFH41(String s) {
if (!s.trim().isEmpty()) {
NFH41 = Byte.parseByte(s);
} else {
NFH41 = Byte.MIN_VALUE;
}
}

protected final void initNGCSE5(String s) {
if (!s.trim().isEmpty()) {
NGCSE5 = Byte.parseByte(s);
} else {
NGCSE5 = Byte.MIN_VALUE;
}
}

protected final void initNGCSEENG(String s) {
if (!s.trim().isEmpty()) {
NGCSEENG = Byte.parseByte(s);
} else {
NGCSEENG = Byte.MIN_VALUE;
}
}

protected final void initNGCSEMAT(String s) {
if (!s.trim().isEmpty()) {
NGCSEMAT = Byte.parseByte(s);
} else {
NGCSEMAT = Byte.MIN_VALUE;
}
}

protected final void initNGRP_DV(String s) {
if (!s.trim().isEmpty()) {
NGRP_DV = Byte.parseByte(s);
} else {
NGRP_DV = Byte.MIN_VALUE;
}
}

protected final void initNHIQUAL_DV(String s) {
if (!s.trim().isEmpty()) {
NHIQUAL_DV = Byte.parseByte(s);
} else {
NHIQUAL_DV = Byte.MIN_VALUE;
}
}

protected final void initNIACT(String s) {
if (!s.trim().isEmpty()) {
NIACT = Byte.parseByte(s);
} else {
NIACT = Byte.MIN_VALUE;
}
}

protected final void initNIREL(String s) {
if (!s.trim().isEmpty()) {
NIREL = Byte.parseByte(s);
} else {
NIREL = Byte.MIN_VALUE;
}
}

protected final void initNISERPS(String s) {
if (!s.trim().isEmpty()) {
NISERPS = Byte.parseByte(s);
} else {
NISERPS = Byte.MIN_VALUE;
}
}

protected final void initNMAR(String s) {
if (!s.trim().isEmpty()) {
NMAR = Byte.parseByte(s);
} else {
NMAR = Byte.MIN_VALUE;
}
}

protected final void initNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NMPSP_DV = Byte.parseByte(s);
} else {
NMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNATCH(String s) {
if (!s.trim().isEmpty()) {
NNATCH = Byte.parseByte(s);
} else {
NNATCH = Byte.MIN_VALUE;
}
}

protected final void initNNEWBORN(String s) {
if (!s.trim().isEmpty()) {
NNEWBORN = Byte.parseByte(s);
} else {
NNEWBORN = Byte.MIN_VALUE;
}
}

protected final void initNNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NNMPSP_DV = Byte.parseByte(s);
} else {
NNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSIB_DV = Byte.parseByte(s);
} else {
NNSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSSIB_DV = Byte.parseByte(s);
} else {
NNSSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNOPAYA(String s) {
if (!s.trim().isEmpty()) {
NOPAYA = Byte.parseByte(s);
} else {
NOPAYA = Byte.MIN_VALUE;
}
}

protected final void initNOPAYB(String s) {
if (!s.trim().isEmpty()) {
NOPAYB = Byte.parseByte(s);
} else {
NOPAYB = Byte.MIN_VALUE;
}
}

protected final void initNOTEMPCHK(String s) {
if (!s.trim().isEmpty()) {
NOTEMPCHK = Byte.parseByte(s);
} else {
NOTEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initNPDINDLEARN(String s) {
if (!s.trim().isEmpty()) {
NPDINDLEARN = Byte.parseByte(s);
} else {
NPDINDLEARN = Byte.MIN_VALUE;
}
}

protected final void initNPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER_DV = Byte.parseByte(s);
} else {
NPENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initNPNS_DV(String s) {
if (!s.trim().isEmpty()) {
NPNS_DV = Byte.parseByte(s);
} else {
NPNS_DV = Byte.MIN_VALUE;
}
}

protected final void initNPN_DV(String s) {
if (!s.trim().isEmpty()) {
NPN_DV = Byte.parseByte(s);
} else {
NPN_DV = Byte.MIN_VALUE;
}
}

protected final void initNQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
NQFHIGH_DV = Byte.parseByte(s);
} else {
NQFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initNRELS3(String s) {
if (!s.trim().isEmpty()) {
NRELS3 = Byte.parseByte(s);
} else {
NRELS3 = Byte.MIN_VALUE;
}
}

protected final void initNRELS4(String s) {
if (!s.trim().isEmpty()) {
NRELS4 = Byte.parseByte(s);
} else {
NRELS4 = Byte.MIN_VALUE;
}
}

protected final void initNRELS5(String s) {
if (!s.trim().isEmpty()) {
NRELS5 = Byte.parseByte(s);
} else {
NRELS5 = Byte.MIN_VALUE;
}
}

protected final void initNRELS6(String s) {
if (!s.trim().isEmpty()) {
NRELS6 = Byte.parseByte(s);
} else {
NRELS6 = Byte.MIN_VALUE;
}
}

protected final void initNRELS7(String s) {
if (!s.trim().isEmpty()) {
NRELS7 = Byte.parseByte(s);
} else {
NRELS7 = Byte.MIN_VALUE;
}
}

protected final void initNRELS8(String s) {
if (!s.trim().isEmpty()) {
NRELS8 = Byte.parseByte(s);
} else {
NRELS8 = Byte.MIN_VALUE;
}
}

protected final void initNUNDER16ABS(String s) {
if (!s.trim().isEmpty()) {
NUNDER16ABS = Byte.parseByte(s);
} else {
NUNDER16ABS = Byte.MIN_VALUE;
}
}

protected final void initNUNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NUNMPSP_DV = Byte.parseByte(s);
} else {
NUNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS1(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS1 = Byte.parseByte(s);
} else {
NXTENDREAS1 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS10(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS10 = Byte.parseByte(s);
} else {
NXTENDREAS10 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS11(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS11 = Byte.parseByte(s);
} else {
NXTENDREAS11 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS2(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS2 = Byte.parseByte(s);
} else {
NXTENDREAS2 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS3(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS3 = Byte.parseByte(s);
} else {
NXTENDREAS3 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS4(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS4 = Byte.parseByte(s);
} else {
NXTENDREAS4 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS5(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS5 = Byte.parseByte(s);
} else {
NXTENDREAS5 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS6(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS6 = Byte.parseByte(s);
} else {
NXTENDREAS6 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS7(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS7 = Byte.parseByte(s);
} else {
NXTENDREAS7 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS8(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS8 = Byte.parseByte(s);
} else {
NXTENDREAS8 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS9(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS9 = Byte.parseByte(s);
} else {
NXTENDREAS9 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS97(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS97 = Byte.parseByte(s);
} else {
NXTENDREAS97 = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDD(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDD = Byte.parseByte(s);
} else {
NXTJBENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDM(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDM = Byte.parseByte(s);
} else {
NXTJBENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDY4 = Short.parseShort(s);
} else {
NXTJBENDY4 = Short.MIN_VALUE;
}
}

protected final void initNXTJBES(String s) {
if (!s.trim().isEmpty()) {
NXTJBES = Byte.parseByte(s);
} else {
NXTJBES = Byte.MIN_VALUE;
}
}

protected final void initNXTJBHRS(String s) {
if (!s.trim().isEmpty()) {
NXTJBHRS = Byte.parseByte(s);
} else {
NXTJBHRS = Byte.MIN_VALUE;
}
}

protected final void initNXTST(String s) {
if (!s.trim().isEmpty()) {
NXTST = Byte.parseByte(s);
} else {
NXTST = Byte.MIN_VALUE;
}
}

protected final void initNXTSTELSE(String s) {
if (!s.trim().isEmpty()) {
NXTSTELSE = Byte.parseByte(s);
} else {
NXTSTELSE = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDD(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDD = Byte.parseByte(s);
} else {
NXTSTENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDM(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDM = Byte.parseByte(s);
} else {
NXTSTENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDY4 = Short.parseShort(s);
} else {
NXTSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initOCIMPA(String s) {
if (!s.trim().isEmpty()) {
OCIMPA = Byte.parseByte(s);
} else {
OCIMPA = Byte.MIN_VALUE;
}
}

protected final void initOCIMPB(String s) {
if (!s.trim().isEmpty()) {
OCIMPB = Byte.parseByte(s);
} else {
OCIMPB = Byte.MIN_VALUE;
}
}

protected final void initOCIMPE(String s) {
if (!s.trim().isEmpty()) {
OCIMPE = Byte.parseByte(s);
} else {
OCIMPE = Byte.MIN_VALUE;
}
}

protected final void initOCIMPF(String s) {
if (!s.trim().isEmpty()) {
OCIMPF = Byte.parseByte(s);
} else {
OCIMPF = Byte.MIN_VALUE;
}
}

protected final void initOCIMPI(String s) {
if (!s.trim().isEmpty()) {
OCIMPI = Byte.parseByte(s);
} else {
OCIMPI = Byte.MIN_VALUE;
}
}

protected final void initOCIMPK(String s) {
if (!s.trim().isEmpty()) {
OCIMPK = Byte.parseByte(s);
} else {
OCIMPK = Byte.MIN_VALUE;
}
}

protected final void initOCIMPL(String s) {
if (!s.trim().isEmpty()) {
OCIMPL = Byte.parseByte(s);
} else {
OCIMPL = Byte.MIN_VALUE;
}
}

protected final void initODDSAPPLY(String s) {
if (!s.trim().isEmpty()) {
ODDSAPPLY = Byte.parseByte(s);
} else {
ODDSAPPLY = Byte.MIN_VALUE;
}
}

protected final void initODDSEMP1(String s) {
if (!s.trim().isEmpty()) {
ODDSEMP1 = Byte.parseByte(s);
} else {
ODDSEMP1 = Byte.MIN_VALUE;
}
}

protected final void initODDSEMP3(String s) {
if (!s.trim().isEmpty()) {
ODDSEMP3 = Byte.parseByte(s);
} else {
ODDSEMP3 = Byte.MIN_VALUE;
}
}

protected final void initODDSQUAL(String s) {
if (!s.trim().isEmpty()) {
ODDSQUAL = Byte.parseByte(s);
} else {
ODDSQUAL = Byte.MIN_VALUE;
}
}

protected final void initODDSSCHOL(String s) {
if (!s.trim().isEmpty()) {
ODDSSCHOL = Byte.parseByte(s);
} else {
ODDSSCHOL = Byte.MIN_VALUE;
}
}

protected final void initOHCH16(String s) {
if (!s.trim().isEmpty()) {
OHCH16 = Byte.parseByte(s);
} else {
OHCH16 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG(String s) {
if (!s.trim().isEmpty()) {
OPRLG = Byte.parseByte(s);
} else {
OPRLG = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0(String s) {
if (!s.trim().isEmpty()) {
OPRLG0 = Byte.parseByte(s);
} else {
OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
OPRLG0NI = Byte.parseByte(s);
} else {
OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initOPRLG1(String s) {
if (!s.trim().isEmpty()) {
OPRLG1 = Byte.parseByte(s);
} else {
OPRLG1 = Byte.MIN_VALUE;
}
}

protected final void initORIGADD(String s) {
if (!s.trim().isEmpty()) {
ORIGADD = Byte.parseByte(s);
} else {
ORIGADD = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN1(String s) {
if (!s.trim().isEmpty()) {
OTHBEN1 = Byte.parseByte(s);
} else {
OTHBEN1 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN2(String s) {
if (!s.trim().isEmpty()) {
OTHBEN2 = Byte.parseByte(s);
} else {
OTHBEN2 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN3(String s) {
if (!s.trim().isEmpty()) {
OTHBEN3 = Byte.parseByte(s);
} else {
OTHBEN3 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN4(String s) {
if (!s.trim().isEmpty()) {
OTHBEN4 = Byte.parseByte(s);
} else {
OTHBEN4 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN5(String s) {
if (!s.trim().isEmpty()) {
OTHBEN5 = Byte.parseByte(s);
} else {
OTHBEN5 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN6(String s) {
if (!s.trim().isEmpty()) {
OTHBEN6 = Byte.parseByte(s);
} else {
OTHBEN6 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN7(String s) {
if (!s.trim().isEmpty()) {
OTHBEN7 = Byte.parseByte(s);
} else {
OTHBEN7 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN8(String s) {
if (!s.trim().isEmpty()) {
OTHBEN8 = Byte.parseByte(s);
} else {
OTHBEN8 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN9(String s) {
if (!s.trim().isEmpty()) {
OTHBEN9 = Byte.parseByte(s);
} else {
OTHBEN9 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN96(String s) {
if (!s.trim().isEmpty()) {
OTHBEN96 = Byte.parseByte(s);
} else {
OTHBEN96 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN97(String s) {
if (!s.trim().isEmpty()) {
OTHBEN97 = Byte.parseByte(s);
} else {
OTHBEN97 = Byte.MIN_VALUE;
}
}

protected final void initOTHCONT(String s) {
if (!s.trim().isEmpty()) {
OTHCONT = Byte.parseByte(s);
} else {
OTHCONT = Byte.MIN_VALUE;
}
}

protected final void initOVTNSET(String s) {
if (!s.trim().isEmpty()) {
OVTNSET = Byte.parseByte(s);
} else {
OVTNSET = Byte.MIN_VALUE;
}
}

protected final void initOVTPAY(String s) {
if (!s.trim().isEmpty()) {
OVTPAY = Byte.parseByte(s);
} else {
OVTPAY = Byte.MIN_VALUE;
}
}

protected final void initOVTRATE(String s) {
if (!s.trim().isEmpty()) {
OVTRATE = Double.parseDouble(s);
} else {
OVTRATE = Double.NaN;
}
}

protected final void initOVTREST(String s) {
if (!s.trim().isEmpty()) {
OVTREST = Byte.parseByte(s);
} else {
OVTREST = Byte.MIN_VALUE;
}
}

protected final void initPAAGE(String s) {
if (!s.trim().isEmpty()) {
PAAGE = Byte.parseByte(s);
} else {
PAAGE = Byte.MIN_VALUE;
}
}

protected final void initPAAID1(String s) {
if (!s.trim().isEmpty()) {
PAAID1 = Byte.parseByte(s);
} else {
PAAID1 = Byte.MIN_VALUE;
}
}

protected final void initPAAID2(String s) {
if (!s.trim().isEmpty()) {
PAAID2 = Byte.parseByte(s);
} else {
PAAID2 = Byte.MIN_VALUE;
}
}

protected final void initPAAID3(String s) {
if (!s.trim().isEmpty()) {
PAAID3 = Byte.parseByte(s);
} else {
PAAID3 = Byte.MIN_VALUE;
}
}

protected final void initPAAID4(String s) {
if (!s.trim().isEmpty()) {
PAAID4 = Byte.parseByte(s);
} else {
PAAID4 = Byte.MIN_VALUE;
}
}

protected final void initPAAID5(String s) {
if (!s.trim().isEmpty()) {
PAAID5 = Byte.parseByte(s);
} else {
PAAID5 = Byte.MIN_VALUE;
}
}

protected final void initPAAID6(String s) {
if (!s.trim().isEmpty()) {
PAAID6 = Byte.parseByte(s);
} else {
PAAID6 = Byte.MIN_VALUE;
}
}

protected final void initPAAID7(String s) {
if (!s.trim().isEmpty()) {
PAAID7 = Byte.parseByte(s);
} else {
PAAID7 = Byte.MIN_VALUE;
}
}

protected final void initPAAID8(String s) {
if (!s.trim().isEmpty()) {
PAAID8 = Byte.parseByte(s);
} else {
PAAID8 = Byte.MIN_VALUE;
}
}

protected final void initPAAID96(String s) {
if (!s.trim().isEmpty()) {
PAAID96 = Byte.parseByte(s);
} else {
PAAID96 = Byte.MIN_VALUE;
}
}

protected final void initPAAID97(String s) {
if (!s.trim().isEmpty()) {
PAAID97 = Byte.parseByte(s);
} else {
PAAID97 = Byte.MIN_VALUE;
}
}

protected final void initPACOB(String s) {
if (!s.trim().isEmpty()) {
PACOB = Byte.parseByte(s);
} else {
PACOB = Byte.MIN_VALUE;
}
}

protected final void initPACON(String s) {
if (!s.trim().isEmpty()) {
PACON = Byte.parseByte(s);
} else {
PACON = Byte.MIN_VALUE;
}
}

protected final void initPAFAR(String s) {
if (!s.trim().isEmpty()) {
PAFAR = Byte.parseByte(s);
} else {
PAFAR = Byte.MIN_VALUE;
}
}

protected final void initPAIDU1(String s) {
if (!s.trim().isEmpty()) {
PAIDU1 = Byte.parseByte(s);
} else {
PAIDU1 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU2(String s) {
if (!s.trim().isEmpty()) {
PAIDU2 = Byte.parseByte(s);
} else {
PAIDU2 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU3(String s) {
if (!s.trim().isEmpty()) {
PAIDU3 = Byte.parseByte(s);
} else {
PAIDU3 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU4(String s) {
if (!s.trim().isEmpty()) {
PAIDU4 = Byte.parseByte(s);
} else {
PAIDU4 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU5(String s) {
if (!s.trim().isEmpty()) {
PAIDU5 = Byte.parseByte(s);
} else {
PAIDU5 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU6(String s) {
if (!s.trim().isEmpty()) {
PAIDU6 = Byte.parseByte(s);
} else {
PAIDU6 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU7(String s) {
if (!s.trim().isEmpty()) {
PAIDU7 = Byte.parseByte(s);
} else {
PAIDU7 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU8(String s) {
if (!s.trim().isEmpty()) {
PAIDU8 = Byte.parseByte(s);
} else {
PAIDU8 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU96(String s) {
if (!s.trim().isEmpty()) {
PAIDU96 = Byte.parseByte(s);
} else {
PAIDU96 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU97(String s) {
if (!s.trim().isEmpty()) {
PAIDU97 = Byte.parseByte(s);
} else {
PAIDU97 = Byte.MIN_VALUE;
}
}

protected final void initPAJU(String s) {
if (!s.trim().isEmpty()) {
PAJU = Byte.parseByte(s);
} else {
PAJU = Byte.MIN_VALUE;
}
}

protected final void initPALONE(String s) {
if (!s.trim().isEmpty()) {
PALONE = Byte.parseByte(s);
} else {
PALONE = Byte.MIN_VALUE;
}
}

protected final void initPAMOSTCON(String s) {
if (!s.trim().isEmpty()) {
PAMOSTCON = Byte.parseByte(s);
} else {
PAMOSTCON = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC5_DV = Byte.parseByte(s);
} else {
PANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initPAREVE(String s) {
if (!s.trim().isEmpty()) {
PAREVE = Byte.parseByte(s);
} else {
PAREVE = Byte.MIN_VALUE;
}
}

protected final void initPARMAR(String s) {
if (!s.trim().isEmpty()) {
PARMAR = Byte.parseByte(s);
} else {
PARMAR = Byte.MIN_VALUE;
}
}

protected final void initPARSCH(String s) {
if (!s.trim().isEmpty()) {
PARSCH = Byte.parseByte(s);
} else {
PARSCH = Byte.MIN_VALUE;
}
}

protected final void initPASEE(String s) {
if (!s.trim().isEmpty()) {
PASEE = Byte.parseByte(s);
} else {
PASEE = Byte.MIN_VALUE;
}
}

protected final void initPASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC00_CC = Short.parseShort(s);
} else {
PASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC10_CC = Short.parseShort(s);
} else {
PASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC90_CC = Byte.parseByte(s);
} else {
PASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPAYAMTA(String s) {
if (!s.trim().isEmpty()) {
PAYAMTA = Double.parseDouble(s);
} else {
PAYAMTA = Double.NaN;
}
}

protected final void initPAYAMTB(String s) {
if (!s.trim().isEmpty()) {
PAYAMTB = Double.parseDouble(s);
} else {
PAYAMTB = Double.NaN;
}
}

protected final void initPAYDV(String s) {
if (!s.trim().isEmpty()) {
PAYDV = Double.parseDouble(s);
} else {
PAYDV = Double.NaN;
}
}

protected final void initPAYFREQA(String s) {
if (!s.trim().isEmpty()) {
PAYFREQA = Byte.parseByte(s);
} else {
PAYFREQA = Byte.MIN_VALUE;
}
}

protected final void initPAYFREQB(String s) {
if (!s.trim().isEmpty()) {
PAYFREQB = Byte.parseByte(s);
} else {
PAYFREQB = Byte.MIN_VALUE;
}
}

protected final void initPAYGWC(String s) {
if (!s.trim().isEmpty()) {
PAYGWC = Byte.parseByte(s);
} else {
PAYGWC = Byte.MIN_VALUE;
}
}

protected final void initPAYNWC(String s) {
if (!s.trim().isEmpty()) {
PAYNWC = Byte.parseByte(s);
} else {
PAYNWC = Byte.MIN_VALUE;
}
}

protected final void initPAYRUK(String s) {
if (!s.trim().isEmpty()) {
PAYRUK = Byte.parseByte(s);
} else {
PAYRUK = Byte.MIN_VALUE;
}
}

protected final void initPAYTYP(String s) {
if (!s.trim().isEmpty()) {
PAYTYP = Byte.parseByte(s);
} else {
PAYTYP = Byte.MIN_VALUE;
}
}

protected final void initPAYUWC(String s) {
if (!s.trim().isEmpty()) {
PAYUWC = Byte.parseByte(s);
} else {
PAYUWC = Byte.MIN_VALUE;
}
}

protected final void initPAYU_DV(String s) {
if (!s.trim().isEmpty()) {
PAYU_DV = Double.parseDouble(s);
} else {
PAYU_DV = Double.NaN;
}
}

protected final void initPBIRTHY(String s) {
if (!s.trim().isEmpty()) {
PBIRTHY = Short.parseShort(s);
} else {
PBIRTHY = Short.MIN_VALUE;
}
}

protected final void initPBNFT1(String s) {
if (!s.trim().isEmpty()) {
PBNFT1 = Byte.parseByte(s);
} else {
PBNFT1 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT10(String s) {
if (!s.trim().isEmpty()) {
PBNFT10 = Byte.parseByte(s);
} else {
PBNFT10 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT11(String s) {
if (!s.trim().isEmpty()) {
PBNFT11 = Byte.parseByte(s);
} else {
PBNFT11 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT12(String s) {
if (!s.trim().isEmpty()) {
PBNFT12 = Byte.parseByte(s);
} else {
PBNFT12 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT13(String s) {
if (!s.trim().isEmpty()) {
PBNFT13 = Byte.parseByte(s);
} else {
PBNFT13 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT2(String s) {
if (!s.trim().isEmpty()) {
PBNFT2 = Byte.parseByte(s);
} else {
PBNFT2 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT3(String s) {
if (!s.trim().isEmpty()) {
PBNFT3 = Byte.parseByte(s);
} else {
PBNFT3 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT4(String s) {
if (!s.trim().isEmpty()) {
PBNFT4 = Byte.parseByte(s);
} else {
PBNFT4 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT5(String s) {
if (!s.trim().isEmpty()) {
PBNFT5 = Byte.parseByte(s);
} else {
PBNFT5 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT6(String s) {
if (!s.trim().isEmpty()) {
PBNFT6 = Byte.parseByte(s);
} else {
PBNFT6 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT7(String s) {
if (!s.trim().isEmpty()) {
PBNFT7 = Byte.parseByte(s);
} else {
PBNFT7 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT8(String s) {
if (!s.trim().isEmpty()) {
PBNFT8 = Byte.parseByte(s);
} else {
PBNFT8 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT9(String s) {
if (!s.trim().isEmpty()) {
PBNFT9 = Byte.parseByte(s);
} else {
PBNFT9 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT96(String s) {
if (!s.trim().isEmpty()) {
PBNFT96 = Byte.parseByte(s);
} else {
PBNFT96 = Byte.MIN_VALUE;
}
}

protected final void initPDVAGE(String s) {
if (!s.trim().isEmpty()) {
PDVAGE = Byte.parseByte(s);
} else {
PDVAGE = Byte.MIN_VALUE;
}
}

protected final void initPEDCHPNO(String s) {
if (!s.trim().isEmpty()) {
PEDCHPNO = Byte.parseByte(s);
} else {
PEDCHPNO = Byte.MIN_VALUE;
}
}

protected final void initPENMEX(String s) {
if (!s.trim().isEmpty()) {
PENMEX = Byte.parseByte(s);
} else {
PENMEX = Byte.MIN_VALUE;
}
}

protected final void initPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
PENSIONER_DV = Byte.parseByte(s);
} else {
PENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initPHEAPPLIED(String s) {
if (!s.trim().isEmpty()) {
PHEAPPLIED = Byte.parseByte(s);
} else {
PHEAPPLIED = Byte.MIN_VALUE;
}
}

protected final void initPID(String s) {
if (!s.trim().isEmpty()) {
PID = Integer.parseInt(s);
} else {
PID = Integer.MIN_VALUE;
}
}

protected final void initPIDP1(String s) {
if (!s.trim().isEmpty()) {
PIDP1 = Integer.parseInt(s);
} else {
PIDP1 = Integer.MIN_VALUE;
}
}

protected final void initPIDP2(String s) {
if (!s.trim().isEmpty()) {
PIDP2 = Integer.parseInt(s);
} else {
PIDP2 = Integer.MIN_VALUE;
}
}

protected final void initPIDP3(String s) {
if (!s.trim().isEmpty()) {
PIDP3 = Integer.parseInt(s);
} else {
PIDP3 = Integer.MIN_VALUE;
}
}

protected final void initPIDP4(String s) {
if (!s.trim().isEmpty()) {
PIDP4 = Integer.parseInt(s);
} else {
PIDP4 = Integer.MIN_VALUE;
}
}

protected final void initPJBPTFT(String s) {
if (!s.trim().isEmpty()) {
PJBPTFT = Byte.parseByte(s);
} else {
PJBPTFT = Byte.MIN_VALUE;
}
}

protected final void initPJSPTFT(String s) {
if (!s.trim().isEmpty()) {
PJSPTFT = Byte.parseByte(s);
} else {
PJSPTFT = Byte.MIN_VALUE;
}
}

protected final void initPLIENG(String s) {
if (!s.trim().isEmpty()) {
PLIENG = Byte.parseByte(s);
} else {
PLIENG = Byte.MIN_VALUE;
}
}

protected final void initPLITRANS(String s) {
if (!s.trim().isEmpty()) {
PLITRANS = Byte.parseByte(s);
} else {
PLITRANS = Byte.MIN_VALUE;
}
}

protected final void initPLNOWM(String s) {
if (!s.trim().isEmpty()) {
PLNOWM = Short.parseShort(s);
} else {
PLNOWM = Short.MIN_VALUE;
}
}

protected final void initPLNOWY4(String s) {
if (!s.trim().isEmpty()) {
PLNOWY4 = Short.parseShort(s);
} else {
PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initPN1PID(String s) {
if (!s.trim().isEmpty()) {
PN1PID = Integer.parseInt(s);
} else {
PN1PID = Integer.MIN_VALUE;
}
}

protected final void initPN1PNO(String s) {
if (!s.trim().isEmpty()) {
PN1PNO = Byte.parseByte(s);
} else {
PN1PNO = Byte.MIN_VALUE;
}
}

protected final void initPN1SEX(String s) {
if (!s.trim().isEmpty()) {
PN1SEX = Byte.parseByte(s);
} else {
PN1SEX = Byte.MIN_VALUE;
}
}

protected final void initPN2PID(String s) {
if (!s.trim().isEmpty()) {
PN2PID = Integer.parseInt(s);
} else {
PN2PID = Integer.MIN_VALUE;
}
}

protected final void initPN2PNO(String s) {
if (!s.trim().isEmpty()) {
PN2PNO = Byte.parseByte(s);
} else {
PN2PNO = Byte.MIN_VALUE;
}
}

protected final void initPN2SEX(String s) {
if (!s.trim().isEmpty()) {
PN2SEX = Byte.parseByte(s);
} else {
PN2SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS1PID(String s) {
if (!s.trim().isEmpty()) {
PNS1PID = Integer.parseInt(s);
} else {
PNS1PID = Integer.MIN_VALUE;
}
}

protected final void initPNS1PNO(String s) {
if (!s.trim().isEmpty()) {
PNS1PNO = Byte.parseByte(s);
} else {
PNS1PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS1SEX(String s) {
if (!s.trim().isEmpty()) {
PNS1SEX = Byte.parseByte(s);
} else {
PNS1SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS2PID(String s) {
if (!s.trim().isEmpty()) {
PNS2PID = Integer.parseInt(s);
} else {
PNS2PID = Integer.MIN_VALUE;
}
}

protected final void initPNS2PNO(String s) {
if (!s.trim().isEmpty()) {
PNS2PNO = Byte.parseByte(s);
} else {
PNS2PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS2SEX(String s) {
if (!s.trim().isEmpty()) {
PNS2SEX = Byte.parseByte(s);
} else {
PNS2SEX = Byte.MIN_VALUE;
}
}

protected final void initPODDSAPPLY(String s) {
if (!s.trim().isEmpty()) {
PODDSAPPLY = Byte.parseByte(s);
} else {
PODDSAPPLY = Byte.MIN_VALUE;
}
}

protected final void initPODDSEMP1(String s) {
if (!s.trim().isEmpty()) {
PODDSEMP1 = Byte.parseByte(s);
} else {
PODDSEMP1 = Byte.MIN_VALUE;
}
}

protected final void initPODDSEMP3(String s) {
if (!s.trim().isEmpty()) {
PODDSEMP3 = Byte.parseByte(s);
} else {
PODDSEMP3 = Byte.MIN_VALUE;
}
}

protected final void initPODDSQUAL(String s) {
if (!s.trim().isEmpty()) {
PODDSQUAL = Byte.parseByte(s);
} else {
PODDSQUAL = Byte.MIN_VALUE;
}
}

protected final void initPODDSSCHOL(String s) {
if (!s.trim().isEmpty()) {
PODDSSCHOL = Byte.parseByte(s);
} else {
PODDSSCHOL = Byte.MIN_VALUE;
}
}

protected final void initPPID(String s) {
if (!s.trim().isEmpty()) {
PPID = Integer.parseInt(s);
} else {
PPID = Integer.MIN_VALUE;
}
}

protected final void initPPPEX(String s) {
if (!s.trim().isEmpty()) {
PPPEX = Byte.parseByte(s);
} else {
PPPEX = Byte.MIN_VALUE;
}
}

protected final void initPPPEXM(String s) {
if (!s.trim().isEmpty()) {
PPPEXM = Byte.parseByte(s);
} else {
PPPEXM = Byte.MIN_VALUE;
}
}

protected final void initPPSEX(String s) {
if (!s.trim().isEmpty()) {
PPSEX = Byte.parseByte(s);
} else {
PPSEX = Byte.MIN_VALUE;
}
}

protected final void initPRAISEKID(String s) {
if (!s.trim().isEmpty()) {
PRAISEKID = Byte.parseByte(s);
} else {
PRAISEKID = Byte.MIN_VALUE;
}
}

protected final void initPREARN(String s) {
if (!s.trim().isEmpty()) {
PREARN = Byte.parseByte(s);
} else {
PREARN = Byte.MIN_VALUE;
}
}

protected final void initPREARNA(String s) {
if (!s.trim().isEmpty()) {
PREARNA = Byte.parseByte(s);
} else {
PREARNA = Byte.MIN_VALUE;
}
}

protected final void initPREARNW(String s) {
if (!s.trim().isEmpty()) {
PREARNW = Byte.parseByte(s);
} else {
PREARNW = Byte.MIN_VALUE;
}
}

protected final void initPREASON(String s) {
if (!s.trim().isEmpty()) {
PREASON = Byte.parseByte(s);
} else {
PREASON = Byte.MIN_VALUE;
}
}

protected final void initPREG(String s) {
if (!s.trim().isEmpty()) {
PREG = Byte.parseByte(s);
} else {
PREG = Byte.MIN_VALUE;
}
}

protected final void initPREGEND1(String s) {
if (!s.trim().isEmpty()) {
PREGEND1 = Byte.parseByte(s);
} else {
PREGEND1 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND2(String s) {
if (!s.trim().isEmpty()) {
PREGEND2 = Byte.parseByte(s);
} else {
PREGEND2 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND3(String s) {
if (!s.trim().isEmpty()) {
PREGEND3 = Byte.parseByte(s);
} else {
PREGEND3 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT1(String s) {
if (!s.trim().isEmpty()) {
PREGFERT1 = Byte.parseByte(s);
} else {
PREGFERT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT2(String s) {
if (!s.trim().isEmpty()) {
PREGFERT2 = Byte.parseByte(s);
} else {
PREGFERT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT3(String s) {
if (!s.trim().isEmpty()) {
PREGFERT3 = Byte.parseByte(s);
} else {
PREGFERT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT11(String s) {
if (!s.trim().isEmpty()) {
PREGFT11 = Byte.parseByte(s);
} else {
PREGFT11 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT12(String s) {
if (!s.trim().isEmpty()) {
PREGFT12 = Byte.parseByte(s);
} else {
PREGFT12 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT13 = false;
} else {
PREGFT13 = true;
}
}
}

protected final void initPREGFT21(String s) {
if (!s.trim().isEmpty()) {
PREGFT21 = Byte.parseByte(s);
} else {
PREGFT21 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT22(String s) {
if (!s.trim().isEmpty()) {
PREGFT22 = Byte.parseByte(s);
} else {
PREGFT22 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT23(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT23 = false;
} else {
PREGFT23 = true;
}
}
}

protected final void initPREGFT31(String s) {
if (!s.trim().isEmpty()) {
PREGFT31 = Byte.parseByte(s);
} else {
PREGFT31 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT32(String s) {
if (!s.trim().isEmpty()) {
PREGFT32 = Byte.parseByte(s);
} else {
PREGFT32 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT33 = false;
} else {
PREGFT33 = true;
}
}
}

protected final void initPREGFT41(String s) {
if (!s.trim().isEmpty()) {
PREGFT41 = Byte.parseByte(s);
} else {
PREGFT41 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT42(String s) {
if (!s.trim().isEmpty()) {
PREGFT42 = Byte.parseByte(s);
} else {
PREGFT42 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT43(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT43 = false;
} else {
PREGFT43 = true;
}
}
}

protected final void initPREGFT51(String s) {
if (!s.trim().isEmpty()) {
PREGFT51 = Byte.parseByte(s);
} else {
PREGFT51 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT52(String s) {
if (!s.trim().isEmpty()) {
PREGFT52 = Byte.parseByte(s);
} else {
PREGFT52 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT53(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT53 = false;
} else {
PREGFT53 = true;
}
}
}

protected final void initPREGFT61(String s) {
if (!s.trim().isEmpty()) {
PREGFT61 = Byte.parseByte(s);
} else {
PREGFT61 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT62(String s) {
if (!s.trim().isEmpty()) {
PREGFT62 = Byte.parseByte(s);
} else {
PREGFT62 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT63 = false;
} else {
PREGFT63 = true;
}
}
}

protected final void initPREGFT961(String s) {
if (!s.trim().isEmpty()) {
PREGFT961 = Byte.parseByte(s);
} else {
PREGFT961 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT962(String s) {
if (!s.trim().isEmpty()) {
PREGFT962 = Byte.parseByte(s);
} else {
PREGFT962 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT963(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT963 = false;
} else {
PREGFT963 = true;
}
}
}

protected final void initPREGM1(String s) {
if (!s.trim().isEmpty()) {
PREGM1 = Byte.parseByte(s);
} else {
PREGM1 = Byte.MIN_VALUE;
}
}

protected final void initPREGM2(String s) {
if (!s.trim().isEmpty()) {
PREGM2 = Byte.parseByte(s);
} else {
PREGM2 = Byte.MIN_VALUE;
}
}

protected final void initPREGM3(String s) {
if (!s.trim().isEmpty()) {
PREGM3 = Byte.parseByte(s);
} else {
PREGM3 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT1(String s) {
if (!s.trim().isEmpty()) {
PREGOUT1 = Byte.parseByte(s);
} else {
PREGOUT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT2(String s) {
if (!s.trim().isEmpty()) {
PREGOUT2 = Byte.parseByte(s);
} else {
PREGOUT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT3(String s) {
if (!s.trim().isEmpty()) {
PREGOUT3 = Byte.parseByte(s);
} else {
PREGOUT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK11(String s) {
if (!s.trim().isEmpty()) {
PREGSMK11 = Byte.parseByte(s);
} else {
PREGSMK11 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK12(String s) {
if (!s.trim().isEmpty()) {
PREGSMK12 = Byte.parseByte(s);
} else {
PREGSMK12 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK13(String s) {
if (!s.trim().isEmpty()) {
PREGSMK13 = Byte.parseByte(s);
} else {
PREGSMK13 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK21(String s) {
if (!s.trim().isEmpty()) {
PREGSMK21 = Byte.parseByte(s);
} else {
PREGSMK21 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK22(String s) {
if (!s.trim().isEmpty()) {
PREGSMK22 = Byte.parseByte(s);
} else {
PREGSMK22 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK23(String s) {
if (!s.trim().isEmpty()) {
PREGSMK23 = Byte.parseByte(s);
} else {
PREGSMK23 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK31(String s) {
if (!s.trim().isEmpty()) {
PREGSMK31 = Byte.parseByte(s);
} else {
PREGSMK31 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK32(String s) {
if (!s.trim().isEmpty()) {
PREGSMK32 = Byte.parseByte(s);
} else {
PREGSMK32 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK33(String s) {
if (!s.trim().isEmpty()) {
PREGSMK33 = Byte.parseByte(s);
} else {
PREGSMK33 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE1(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE1 = Byte.parseByte(s);
} else {
PREGSMOKE1 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE2(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE2 = Byte.parseByte(s);
} else {
PREGSMOKE2 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE3(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE3 = Byte.parseByte(s);
} else {
PREGSMOKE3 = Byte.MIN_VALUE;
}
}

protected final void initPREGSPD1(String s) {
if (!s.trim().isEmpty()) {
PREGSPD1 = Byte.parseByte(s);
} else {
PREGSPD1 = Byte.MIN_VALUE;
}
}

protected final void initPREGSPD2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGSPD2 = false;
} else {
PREGSPD2 = true;
}
}
}

protected final void initPREGSPD3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGSPD3 = false;
} else {
PREGSPD3 = true;
}
}
}

protected final void initPREGY41(String s) {
if (!s.trim().isEmpty()) {
PREGY41 = Short.parseShort(s);
} else {
PREGY41 = Short.MIN_VALUE;
}
}

protected final void initPREGY42(String s) {
if (!s.trim().isEmpty()) {
PREGY42 = Short.parseShort(s);
} else {
PREGY42 = Short.MIN_VALUE;
}
}

protected final void initPREGY43(String s) {
if (!s.trim().isEmpty()) {
PREGY43 = Short.parseShort(s);
} else {
PREGY43 = Short.MIN_VALUE;
}
}

protected final void initPREL(String s) {
if (!s.trim().isEmpty()) {
PREL = Byte.parseByte(s);
} else {
PREL = Byte.MIN_VALUE;
}
}

protected final void initPRFITB(String s) {
if (!s.trim().isEmpty()) {
PRFITB = Byte.parseByte(s);
} else {
PRFITB = Byte.MIN_VALUE;
}
}

protected final void initPRFITBA(String s) {
if (!s.trim().isEmpty()) {
PRFITBA = Byte.parseByte(s);
} else {
PRFITBA = Byte.MIN_VALUE;
}
}

protected final void initPRFITBW(String s) {
if (!s.trim().isEmpty()) {
PRFITBW = Byte.parseByte(s);
} else {
PRFITBW = Byte.MIN_VALUE;
}
}

protected final void initPS1(String s) {
if (!s.trim().isEmpty()) {
PS1 = Byte.parseByte(s);
} else {
PS1 = Byte.MIN_VALUE;
}
}

protected final void initPS10(String s) {
if (!s.trim().isEmpty()) {
PS10 = Byte.parseByte(s);
} else {
PS10 = Byte.MIN_VALUE;
}
}

protected final void initPS11(String s) {
if (!s.trim().isEmpty()) {
PS11 = Byte.parseByte(s);
} else {
PS11 = Byte.MIN_VALUE;
}
}

protected final void initPS12(String s) {
if (!s.trim().isEmpty()) {
PS12 = Byte.parseByte(s);
} else {
PS12 = Byte.MIN_VALUE;
}
}

protected final void initPS13(String s) {
if (!s.trim().isEmpty()) {
PS13 = Byte.parseByte(s);
} else {
PS13 = Byte.MIN_VALUE;
}
}

protected final void initPS14(String s) {
if (!s.trim().isEmpty()) {
PS14 = Byte.parseByte(s);
} else {
PS14 = Byte.MIN_VALUE;
}
}

protected final void initPS15(String s) {
if (!s.trim().isEmpty()) {
PS15 = Byte.parseByte(s);
} else {
PS15 = Byte.MIN_VALUE;
}
}

protected final void initPS16(String s) {
if (!s.trim().isEmpty()) {
PS16 = Byte.parseByte(s);
} else {
PS16 = Byte.MIN_VALUE;
}
}

protected final void initPS17(String s) {
if (!s.trim().isEmpty()) {
PS17 = Byte.parseByte(s);
} else {
PS17 = Byte.MIN_VALUE;
}
}

protected final void initPS18(String s) {
if (!s.trim().isEmpty()) {
PS18 = Byte.parseByte(s);
} else {
PS18 = Byte.MIN_VALUE;
}
}

protected final void initPS19(String s) {
if (!s.trim().isEmpty()) {
PS19 = Byte.parseByte(s);
} else {
PS19 = Byte.MIN_VALUE;
}
}

protected final void initPS2(String s) {
if (!s.trim().isEmpty()) {
PS2 = Byte.parseByte(s);
} else {
PS2 = Byte.MIN_VALUE;
}
}

protected final void initPS20(String s) {
if (!s.trim().isEmpty()) {
PS20 = Byte.parseByte(s);
} else {
PS20 = Byte.MIN_VALUE;
}
}

protected final void initPS21(String s) {
if (!s.trim().isEmpty()) {
PS21 = Byte.parseByte(s);
} else {
PS21 = Byte.MIN_VALUE;
}
}

protected final void initPS22(String s) {
if (!s.trim().isEmpty()) {
PS22 = Byte.parseByte(s);
} else {
PS22 = Byte.MIN_VALUE;
}
}

protected final void initPS23(String s) {
if (!s.trim().isEmpty()) {
PS23 = Byte.parseByte(s);
} else {
PS23 = Byte.MIN_VALUE;
}
}

protected final void initPS24(String s) {
if (!s.trim().isEmpty()) {
PS24 = Byte.parseByte(s);
} else {
PS24 = Byte.MIN_VALUE;
}
}

protected final void initPS25(String s) {
if (!s.trim().isEmpty()) {
PS25 = Byte.parseByte(s);
} else {
PS25 = Byte.MIN_VALUE;
}
}

protected final void initPS26(String s) {
if (!s.trim().isEmpty()) {
PS26 = Byte.parseByte(s);
} else {
PS26 = Byte.MIN_VALUE;
}
}

protected final void initPS27(String s) {
if (!s.trim().isEmpty()) {
PS27 = Byte.parseByte(s);
} else {
PS27 = Byte.MIN_VALUE;
}
}

protected final void initPS28(String s) {
if (!s.trim().isEmpty()) {
PS28 = Byte.parseByte(s);
} else {
PS28 = Byte.MIN_VALUE;
}
}

protected final void initPS29(String s) {
if (!s.trim().isEmpty()) {
PS29 = Byte.parseByte(s);
} else {
PS29 = Byte.MIN_VALUE;
}
}

protected final void initPS3(String s) {
if (!s.trim().isEmpty()) {
PS3 = Byte.parseByte(s);
} else {
PS3 = Byte.MIN_VALUE;
}
}

protected final void initPS30(String s) {
if (!s.trim().isEmpty()) {
PS30 = Byte.parseByte(s);
} else {
PS30 = Byte.MIN_VALUE;
}
}

protected final void initPS31(String s) {
if (!s.trim().isEmpty()) {
PS31 = Byte.parseByte(s);
} else {
PS31 = Byte.MIN_VALUE;
}
}

protected final void initPS32(String s) {
if (!s.trim().isEmpty()) {
PS32 = Byte.parseByte(s);
} else {
PS32 = Byte.MIN_VALUE;
}
}

protected final void initPS4(String s) {
if (!s.trim().isEmpty()) {
PS4 = Byte.parseByte(s);
} else {
PS4 = Byte.MIN_VALUE;
}
}

protected final void initPS5(String s) {
if (!s.trim().isEmpty()) {
PS5 = Byte.parseByte(s);
} else {
PS5 = Byte.MIN_VALUE;
}
}

protected final void initPS6(String s) {
if (!s.trim().isEmpty()) {
PS6 = Byte.parseByte(s);
} else {
PS6 = Byte.MIN_VALUE;
}
}

protected final void initPS7(String s) {
if (!s.trim().isEmpty()) {
PS7 = Byte.parseByte(s);
} else {
PS7 = Byte.MIN_VALUE;
}
}

protected final void initPS8(String s) {
if (!s.trim().isEmpty()) {
PS8 = Byte.parseByte(s);
} else {
PS8 = Byte.MIN_VALUE;
}
}

protected final void initPS9(String s) {
if (!s.trim().isEmpty()) {
PS9 = Byte.parseByte(s);
} else {
PS9 = Byte.MIN_VALUE;
}
}

protected final void initPSDQA_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQA_DV = Byte.parseByte(s);
} else {
PSDQA_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQB_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQB_DV = Byte.parseByte(s);
} else {
PSDQB_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQC_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQC_DV = Byte.parseByte(s);
} else {
PSDQC_DV = Byte.MIN_VALUE;
}
}

protected final void initPSNUMCH(String s) {
if (!s.trim().isEmpty()) {
PSNUMCH = Byte.parseByte(s);
} else {
PSNUMCH = Byte.MIN_VALUE;
}
}

protected final void initPSU(String s) {
if (!s.trim().isEmpty()) {
PSU = Integer.parseInt(s);
} else {
PSU = Integer.MIN_VALUE;
}
}

protected final void initPUNIFIN1(String s) {
if (!s.trim().isEmpty()) {
PUNIFIN1 = Byte.parseByte(s);
} else {
PUNIFIN1 = Byte.MIN_VALUE;
}
}

protected final void initPUNISUB1(String s) {
if (!s.trim().isEmpty()) {
PUNISUB1 = Byte.parseByte(s);
} else {
PUNISUB1 = Byte.MIN_VALUE;
}
}

protected final void initPVTPYSET(String s) {
if (!s.trim().isEmpty()) {
PVTPYSET = Byte.parseByte(s);
} else {
PVTPYSET = Byte.MIN_VALUE;
}
}

protected final void initPXPBORROW(String s) {
if (!s.trim().isEmpty()) {
PXPBORROW = Integer.parseInt(s);
} else {
PXPBORROW = Integer.MIN_VALUE;
}
}

protected final void initPXPEARN1(String s) {
if (!s.trim().isEmpty()) {
PXPEARN1 = Integer.parseInt(s);
} else {
PXPEARN1 = Integer.MIN_VALUE;
}
}

protected final void initPXPEARN1DK(String s) {
if (!s.trim().isEmpty()) {
PXPEARN1DK = Byte.parseByte(s);
} else {
PXPEARN1DK = Byte.MIN_VALUE;
}
}

protected final void initPXPEARN3(String s) {
if (!s.trim().isEmpty()) {
PXPEARN3 = Integer.parseInt(s);
} else {
PXPEARN3 = Integer.MIN_VALUE;
}
}

protected final void initPXPEARN3DK(String s) {
if (!s.trim().isEmpty()) {
PXPEARN3DK = Byte.parseByte(s);
} else {
PXPEARN3DK = Byte.MIN_VALUE;
}
}

protected final void initPXPEARNG1(String s) {
if (!s.trim().isEmpty()) {
PXPEARNG1 = Integer.parseInt(s);
} else {
PXPEARNG1 = Integer.MIN_VALUE;
}
}

protected final void initPXPEARNG1DK(String s) {
if (!s.trim().isEmpty()) {
PXPEARNG1DK = Byte.parseByte(s);
} else {
PXPEARNG1DK = Byte.MIN_VALUE;
}
}

protected final void initPXPEARNG3(String s) {
if (!s.trim().isEmpty()) {
PXPEARNG3 = Integer.parseInt(s);
} else {
PXPEARNG3 = Integer.MIN_VALUE;
}
}

protected final void initPXPEARNG3DK(String s) {
if (!s.trim().isEmpty()) {
PXPEARNG3DK = Byte.parseByte(s);
} else {
PXPEARNG3DK = Byte.MIN_VALUE;
}
}

protected final void initPXPTUITION(String s) {
if (!s.trim().isEmpty()) {
PXPTUITION = Integer.parseInt(s);
} else {
PXPTUITION = Integer.MIN_VALUE;
}
}

protected final void initPYENRL(String s) {
if (!s.trim().isEmpty()) {
PYENRL = Byte.parseByte(s);
} else {
PYENRL = Byte.MIN_VALUE;
}
}

protected final void initQFHIGH(String s) {
if (!s.trim().isEmpty()) {
QFHIGH = Byte.parseByte(s);
} else {
QFHIGH = Byte.MIN_VALUE;
}
}

protected final void initQFHIGHFL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
QFHIGHFL_DV = false;
} else {
QFHIGHFL_DV = true;
}
}
}

protected final void initQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
QFHIGH_DV = Byte.parseByte(s);
} else {
QFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initQFVOC1(String s) {
if (!s.trim().isEmpty()) {
QFVOC1 = Byte.parseByte(s);
} else {
QFVOC1 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC10(String s) {
if (!s.trim().isEmpty()) {
QFVOC10 = Byte.parseByte(s);
} else {
QFVOC10 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC11(String s) {
if (!s.trim().isEmpty()) {
QFVOC11 = Byte.parseByte(s);
} else {
QFVOC11 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC12(String s) {
if (!s.trim().isEmpty()) {
QFVOC12 = Byte.parseByte(s);
} else {
QFVOC12 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC13(String s) {
if (!s.trim().isEmpty()) {
QFVOC13 = Byte.parseByte(s);
} else {
QFVOC13 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC14(String s) {
if (!s.trim().isEmpty()) {
QFVOC14 = Byte.parseByte(s);
} else {
QFVOC14 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC15(String s) {
if (!s.trim().isEmpty()) {
QFVOC15 = Byte.parseByte(s);
} else {
QFVOC15 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC2(String s) {
if (!s.trim().isEmpty()) {
QFVOC2 = Byte.parseByte(s);
} else {
QFVOC2 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC3(String s) {
if (!s.trim().isEmpty()) {
QFVOC3 = Byte.parseByte(s);
} else {
QFVOC3 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC4(String s) {
if (!s.trim().isEmpty()) {
QFVOC4 = Byte.parseByte(s);
} else {
QFVOC4 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC5(String s) {
if (!s.trim().isEmpty()) {
QFVOC5 = Byte.parseByte(s);
} else {
QFVOC5 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC6(String s) {
if (!s.trim().isEmpty()) {
QFVOC6 = Byte.parseByte(s);
} else {
QFVOC6 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC7(String s) {
if (!s.trim().isEmpty()) {
QFVOC7 = Byte.parseByte(s);
} else {
QFVOC7 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC8(String s) {
if (!s.trim().isEmpty()) {
QFVOC8 = Byte.parseByte(s);
} else {
QFVOC8 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC9(String s) {
if (!s.trim().isEmpty()) {
QFVOC9 = Byte.parseByte(s);
} else {
QFVOC9 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC96(String s) {
if (!s.trim().isEmpty()) {
QFVOC96 = Byte.parseByte(s);
} else {
QFVOC96 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW1(String s) {
if (!s.trim().isEmpty()) {
QUALNEW1 = Byte.parseByte(s);
} else {
QUALNEW1 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW10(String s) {
if (!s.trim().isEmpty()) {
QUALNEW10 = Byte.parseByte(s);
} else {
QUALNEW10 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW11(String s) {
if (!s.trim().isEmpty()) {
QUALNEW11 = Byte.parseByte(s);
} else {
QUALNEW11 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW13(String s) {
if (!s.trim().isEmpty()) {
QUALNEW13 = Byte.parseByte(s);
} else {
QUALNEW13 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW15(String s) {
if (!s.trim().isEmpty()) {
QUALNEW15 = Byte.parseByte(s);
} else {
QUALNEW15 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW16(String s) {
if (!s.trim().isEmpty()) {
QUALNEW16 = Byte.parseByte(s);
} else {
QUALNEW16 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW17(String s) {
if (!s.trim().isEmpty()) {
QUALNEW17 = Byte.parseByte(s);
} else {
QUALNEW17 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW18(String s) {
if (!s.trim().isEmpty()) {
QUALNEW18 = Byte.parseByte(s);
} else {
QUALNEW18 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW19(String s) {
if (!s.trim().isEmpty()) {
QUALNEW19 = Byte.parseByte(s);
} else {
QUALNEW19 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW2(String s) {
if (!s.trim().isEmpty()) {
QUALNEW2 = Byte.parseByte(s);
} else {
QUALNEW2 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW20(String s) {
if (!s.trim().isEmpty()) {
QUALNEW20 = Byte.parseByte(s);
} else {
QUALNEW20 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW21(String s) {
if (!s.trim().isEmpty()) {
QUALNEW21 = Byte.parseByte(s);
} else {
QUALNEW21 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW22(String s) {
if (!s.trim().isEmpty()) {
QUALNEW22 = Byte.parseByte(s);
} else {
QUALNEW22 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW23(String s) {
if (!s.trim().isEmpty()) {
QUALNEW23 = Byte.parseByte(s);
} else {
QUALNEW23 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW24(String s) {
if (!s.trim().isEmpty()) {
QUALNEW24 = Byte.parseByte(s);
} else {
QUALNEW24 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW25(String s) {
if (!s.trim().isEmpty()) {
QUALNEW25 = Byte.parseByte(s);
} else {
QUALNEW25 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW26(String s) {
if (!s.trim().isEmpty()) {
QUALNEW26 = Byte.parseByte(s);
} else {
QUALNEW26 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW27(String s) {
if (!s.trim().isEmpty()) {
QUALNEW27 = Byte.parseByte(s);
} else {
QUALNEW27 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW28(String s) {
if (!s.trim().isEmpty()) {
QUALNEW28 = Byte.parseByte(s);
} else {
QUALNEW28 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW29(String s) {
if (!s.trim().isEmpty()) {
QUALNEW29 = Byte.parseByte(s);
} else {
QUALNEW29 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW3(String s) {
if (!s.trim().isEmpty()) {
QUALNEW3 = Byte.parseByte(s);
} else {
QUALNEW3 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW30(String s) {
if (!s.trim().isEmpty()) {
QUALNEW30 = Byte.parseByte(s);
} else {
QUALNEW30 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW31(String s) {
if (!s.trim().isEmpty()) {
QUALNEW31 = Byte.parseByte(s);
} else {
QUALNEW31 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW32(String s) {
if (!s.trim().isEmpty()) {
QUALNEW32 = Byte.parseByte(s);
} else {
QUALNEW32 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW33(String s) {
if (!s.trim().isEmpty()) {
QUALNEW33 = Byte.parseByte(s);
} else {
QUALNEW33 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW4(String s) {
if (!s.trim().isEmpty()) {
QUALNEW4 = Byte.parseByte(s);
} else {
QUALNEW4 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW5(String s) {
if (!s.trim().isEmpty()) {
QUALNEW5 = Byte.parseByte(s);
} else {
QUALNEW5 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW6(String s) {
if (!s.trim().isEmpty()) {
QUALNEW6 = Byte.parseByte(s);
} else {
QUALNEW6 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW7(String s) {
if (!s.trim().isEmpty()) {
QUALNEW7 = Byte.parseByte(s);
} else {
QUALNEW7 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW8(String s) {
if (!s.trim().isEmpty()) {
QUALNEW8 = Byte.parseByte(s);
} else {
QUALNEW8 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW9(String s) {
if (!s.trim().isEmpty()) {
QUALNEW9 = Byte.parseByte(s);
} else {
QUALNEW9 = Byte.MIN_VALUE;
}
}

protected final void initQUALOC(String s) {
if (!s.trim().isEmpty()) {
QUALOC = Byte.parseByte(s);
} else {
QUALOC = Byte.MIN_VALUE;
}
}

protected final void initQUARREL(String s) {
if (!s.trim().isEmpty()) {
QUARREL = Byte.parseByte(s);
} else {
QUARREL = Byte.MIN_VALUE;
}
}

protected final void initQUARTER(String s) {
if (!s.trim().isEmpty()) {
QUARTER = Byte.parseByte(s);
} else {
QUARTER = Byte.MIN_VALUE;
}
}

protected final void initRACEL(String s) {
if (!s.trim().isEmpty()) {
RACEL = Byte.parseByte(s);
} else {
RACEL = Byte.MIN_VALUE;
}
}

protected final void initRACELAT(String s) {
if (!s.trim().isEmpty()) {
RACELAT = Byte.parseByte(s);
} else {
RACELAT = Byte.MIN_VALUE;
}
}

protected final void initRACELBT(String s) {
if (!s.trim().isEmpty()) {
RACELBT = Byte.parseByte(s);
} else {
RACELBT = Byte.MIN_VALUE;
}
}

protected final void initRACELMT(String s) {
if (!s.trim().isEmpty()) {
RACELMT = Byte.parseByte(s);
} else {
RACELMT = Byte.MIN_VALUE;
}
}

protected final void initRACELOT_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELOT_CODE = Byte.parseByte(s);
} else {
RACELOT_CODE = Byte.MIN_VALUE;
}
}

protected final void initRACELO_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELO_CODE = Short.parseShort(s);
} else {
RACELO_CODE = Short.MIN_VALUE;
}
}

protected final void initRACELT(String s) {
if (!s.trim().isEmpty()) {
RACELT = Byte.parseByte(s);
} else {
RACELT = Byte.MIN_VALUE;
}
}

protected final void initRACELWT(String s) {
if (!s.trim().isEmpty()) {
RACELWT = Byte.parseByte(s);
} else {
RACELWT = Byte.MIN_VALUE;
}
}

protected final void initRACEL_DV(String s) {
if (!s.trim().isEmpty()) {
RACEL_DV = Byte.parseByte(s);
} else {
RACEL_DV = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_1(String s) {
if (!s.trim().isEmpty()) {
REASEND10_1 = Byte.parseByte(s);
} else {
REASEND10_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_2(String s) {
if (!s.trim().isEmpty()) {
REASEND10_2 = Byte.parseByte(s);
} else {
REASEND10_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_3(String s) {
if (!s.trim().isEmpty()) {
REASEND10_3 = Byte.parseByte(s);
} else {
REASEND10_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_4(String s) {
if (!s.trim().isEmpty()) {
REASEND10_4 = Byte.parseByte(s);
} else {
REASEND10_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_5(String s) {
if (!s.trim().isEmpty()) {
REASEND10_5 = Byte.parseByte(s);
} else {
REASEND10_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_6(String s) {
if (!s.trim().isEmpty()) {
REASEND10_6 = Byte.parseByte(s);
} else {
REASEND10_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_1(String s) {
if (!s.trim().isEmpty()) {
REASEND11_1 = Byte.parseByte(s);
} else {
REASEND11_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_2(String s) {
if (!s.trim().isEmpty()) {
REASEND11_2 = Byte.parseByte(s);
} else {
REASEND11_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_3(String s) {
if (!s.trim().isEmpty()) {
REASEND11_3 = Byte.parseByte(s);
} else {
REASEND11_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_4(String s) {
if (!s.trim().isEmpty()) {
REASEND11_4 = Byte.parseByte(s);
} else {
REASEND11_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_5(String s) {
if (!s.trim().isEmpty()) {
REASEND11_5 = Byte.parseByte(s);
} else {
REASEND11_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_6(String s) {
if (!s.trim().isEmpty()) {
REASEND11_6 = Byte.parseByte(s);
} else {
REASEND11_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_1(String s) {
if (!s.trim().isEmpty()) {
REASEND1_1 = Byte.parseByte(s);
} else {
REASEND1_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_2(String s) {
if (!s.trim().isEmpty()) {
REASEND1_2 = Byte.parseByte(s);
} else {
REASEND1_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_3(String s) {
if (!s.trim().isEmpty()) {
REASEND1_3 = Byte.parseByte(s);
} else {
REASEND1_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_4(String s) {
if (!s.trim().isEmpty()) {
REASEND1_4 = Byte.parseByte(s);
} else {
REASEND1_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_5(String s) {
if (!s.trim().isEmpty()) {
REASEND1_5 = Byte.parseByte(s);
} else {
REASEND1_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_6(String s) {
if (!s.trim().isEmpty()) {
REASEND1_6 = Byte.parseByte(s);
} else {
REASEND1_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_1(String s) {
if (!s.trim().isEmpty()) {
REASEND2_1 = Byte.parseByte(s);
} else {
REASEND2_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_2(String s) {
if (!s.trim().isEmpty()) {
REASEND2_2 = Byte.parseByte(s);
} else {
REASEND2_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_3(String s) {
if (!s.trim().isEmpty()) {
REASEND2_3 = Byte.parseByte(s);
} else {
REASEND2_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_4(String s) {
if (!s.trim().isEmpty()) {
REASEND2_4 = Byte.parseByte(s);
} else {
REASEND2_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_5(String s) {
if (!s.trim().isEmpty()) {
REASEND2_5 = Byte.parseByte(s);
} else {
REASEND2_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_6(String s) {
if (!s.trim().isEmpty()) {
REASEND2_6 = Byte.parseByte(s);
} else {
REASEND2_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_1(String s) {
if (!s.trim().isEmpty()) {
REASEND3_1 = Byte.parseByte(s);
} else {
REASEND3_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_2(String s) {
if (!s.trim().isEmpty()) {
REASEND3_2 = Byte.parseByte(s);
} else {
REASEND3_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_3(String s) {
if (!s.trim().isEmpty()) {
REASEND3_3 = Byte.parseByte(s);
} else {
REASEND3_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_4(String s) {
if (!s.trim().isEmpty()) {
REASEND3_4 = Byte.parseByte(s);
} else {
REASEND3_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_5(String s) {
if (!s.trim().isEmpty()) {
REASEND3_5 = Byte.parseByte(s);
} else {
REASEND3_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_6(String s) {
if (!s.trim().isEmpty()) {
REASEND3_6 = Byte.parseByte(s);
} else {
REASEND3_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_1(String s) {
if (!s.trim().isEmpty()) {
REASEND4_1 = Byte.parseByte(s);
} else {
REASEND4_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_2(String s) {
if (!s.trim().isEmpty()) {
REASEND4_2 = Byte.parseByte(s);
} else {
REASEND4_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_3(String s) {
if (!s.trim().isEmpty()) {
REASEND4_3 = Byte.parseByte(s);
} else {
REASEND4_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_4(String s) {
if (!s.trim().isEmpty()) {
REASEND4_4 = Byte.parseByte(s);
} else {
REASEND4_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_5(String s) {
if (!s.trim().isEmpty()) {
REASEND4_5 = Byte.parseByte(s);
} else {
REASEND4_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_6(String s) {
if (!s.trim().isEmpty()) {
REASEND4_6 = Byte.parseByte(s);
} else {
REASEND4_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_1(String s) {
if (!s.trim().isEmpty()) {
REASEND5_1 = Byte.parseByte(s);
} else {
REASEND5_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_2(String s) {
if (!s.trim().isEmpty()) {
REASEND5_2 = Byte.parseByte(s);
} else {
REASEND5_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_3(String s) {
if (!s.trim().isEmpty()) {
REASEND5_3 = Byte.parseByte(s);
} else {
REASEND5_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_4(String s) {
if (!s.trim().isEmpty()) {
REASEND5_4 = Byte.parseByte(s);
} else {
REASEND5_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_5(String s) {
if (!s.trim().isEmpty()) {
REASEND5_5 = Byte.parseByte(s);
} else {
REASEND5_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_6(String s) {
if (!s.trim().isEmpty()) {
REASEND5_6 = Byte.parseByte(s);
} else {
REASEND5_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_1(String s) {
if (!s.trim().isEmpty()) {
REASEND6_1 = Byte.parseByte(s);
} else {
REASEND6_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_2(String s) {
if (!s.trim().isEmpty()) {
REASEND6_2 = Byte.parseByte(s);
} else {
REASEND6_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_3(String s) {
if (!s.trim().isEmpty()) {
REASEND6_3 = Byte.parseByte(s);
} else {
REASEND6_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_4(String s) {
if (!s.trim().isEmpty()) {
REASEND6_4 = Byte.parseByte(s);
} else {
REASEND6_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_5(String s) {
if (!s.trim().isEmpty()) {
REASEND6_5 = Byte.parseByte(s);
} else {
REASEND6_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_6(String s) {
if (!s.trim().isEmpty()) {
REASEND6_6 = Byte.parseByte(s);
} else {
REASEND6_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_1(String s) {
if (!s.trim().isEmpty()) {
REASEND7_1 = Byte.parseByte(s);
} else {
REASEND7_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_2(String s) {
if (!s.trim().isEmpty()) {
REASEND7_2 = Byte.parseByte(s);
} else {
REASEND7_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_3(String s) {
if (!s.trim().isEmpty()) {
REASEND7_3 = Byte.parseByte(s);
} else {
REASEND7_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_4(String s) {
if (!s.trim().isEmpty()) {
REASEND7_4 = Byte.parseByte(s);
} else {
REASEND7_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_5(String s) {
if (!s.trim().isEmpty()) {
REASEND7_5 = Byte.parseByte(s);
} else {
REASEND7_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_6(String s) {
if (!s.trim().isEmpty()) {
REASEND7_6 = Byte.parseByte(s);
} else {
REASEND7_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_1(String s) {
if (!s.trim().isEmpty()) {
REASEND8_1 = Byte.parseByte(s);
} else {
REASEND8_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_2(String s) {
if (!s.trim().isEmpty()) {
REASEND8_2 = Byte.parseByte(s);
} else {
REASEND8_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_3(String s) {
if (!s.trim().isEmpty()) {
REASEND8_3 = Byte.parseByte(s);
} else {
REASEND8_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_4(String s) {
if (!s.trim().isEmpty()) {
REASEND8_4 = Byte.parseByte(s);
} else {
REASEND8_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_5(String s) {
if (!s.trim().isEmpty()) {
REASEND8_5 = Byte.parseByte(s);
} else {
REASEND8_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_6(String s) {
if (!s.trim().isEmpty()) {
REASEND8_6 = Byte.parseByte(s);
} else {
REASEND8_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_1(String s) {
if (!s.trim().isEmpty()) {
REASEND97_1 = Byte.parseByte(s);
} else {
REASEND97_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_2(String s) {
if (!s.trim().isEmpty()) {
REASEND97_2 = Byte.parseByte(s);
} else {
REASEND97_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_3(String s) {
if (!s.trim().isEmpty()) {
REASEND97_3 = Byte.parseByte(s);
} else {
REASEND97_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_4(String s) {
if (!s.trim().isEmpty()) {
REASEND97_4 = Byte.parseByte(s);
} else {
REASEND97_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_5(String s) {
if (!s.trim().isEmpty()) {
REASEND97_5 = Byte.parseByte(s);
} else {
REASEND97_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_6(String s) {
if (!s.trim().isEmpty()) {
REASEND97_6 = Byte.parseByte(s);
} else {
REASEND97_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_1(String s) {
if (!s.trim().isEmpty()) {
REASEND9_1 = Byte.parseByte(s);
} else {
REASEND9_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_2(String s) {
if (!s.trim().isEmpty()) {
REASEND9_2 = Byte.parseByte(s);
} else {
REASEND9_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_3(String s) {
if (!s.trim().isEmpty()) {
REASEND9_3 = Byte.parseByte(s);
} else {
REASEND9_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_4(String s) {
if (!s.trim().isEmpty()) {
REASEND9_4 = Byte.parseByte(s);
} else {
REASEND9_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_5(String s) {
if (!s.trim().isEmpty()) {
REASEND9_5 = Byte.parseByte(s);
} else {
REASEND9_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_6(String s) {
if (!s.trim().isEmpty()) {
REASEND9_6 = Byte.parseByte(s);
} else {
REASEND9_6 = Byte.MIN_VALUE;
}
}

protected final void initRELKID(String s) {
if (!s.trim().isEmpty()) {
RELKID = Byte.parseByte(s);
} else {
RELKID = Byte.MIN_VALUE;
}
}

protected final void initRELUP(String s) {
if (!s.trim().isEmpty()) {
RELUP = Byte.parseByte(s);
} else {
RELUP = Byte.MIN_VALUE;
}
}

protected final void initREMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
REMAIL_CODE = Byte.parseByte(s);
} else {
REMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initREMCNTRY1(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY1 = Short.parseShort(s);
} else {
REMCNTRY1 = Short.MIN_VALUE;
}
}

protected final void initREMCNTRY2(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY2 = Short.parseShort(s);
} else {
REMCNTRY2 = Short.MIN_VALUE;
}
}

protected final void initREMCNTRY3(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY3 = Short.parseShort(s);
} else {
REMCNTRY3 = Short.MIN_VALUE;
}
}

protected final void initREMCNTRY4(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY4 = Short.parseShort(s);
} else {
REMCNTRY4 = Short.MIN_VALUE;
}
}

protected final void initREMHOW1(String s) {
if (!s.trim().isEmpty()) {
REMHOW1 = Byte.parseByte(s);
} else {
REMHOW1 = Byte.MIN_VALUE;
}
}

protected final void initREMHOW2(String s) {
if (!s.trim().isEmpty()) {
REMHOW2 = Byte.parseByte(s);
} else {
REMHOW2 = Byte.MIN_VALUE;
}
}

protected final void initREMHOW3(String s) {
if (!s.trim().isEmpty()) {
REMHOW3 = Byte.parseByte(s);
} else {
REMHOW3 = Byte.MIN_VALUE;
}
}

protected final void initREMHOW4(String s) {
if (!s.trim().isEmpty()) {
REMHOW4 = Byte.parseByte(s);
} else {
REMHOW4 = Byte.MIN_VALUE;
}
}

protected final void initREMIT1(String s) {
if (!s.trim().isEmpty()) {
REMIT1 = Byte.parseByte(s);
} else {
REMIT1 = Byte.MIN_VALUE;
}
}

protected final void initREMIT2(String s) {
if (!s.trim().isEmpty()) {
REMIT2 = Byte.parseByte(s);
} else {
REMIT2 = Byte.MIN_VALUE;
}
}

protected final void initREMIT3(String s) {
if (!s.trim().isEmpty()) {
REMIT3 = Byte.parseByte(s);
} else {
REMIT3 = Byte.MIN_VALUE;
}
}

protected final void initREMIT4(String s) {
if (!s.trim().isEmpty()) {
REMIT4 = Byte.parseByte(s);
} else {
REMIT4 = Byte.MIN_VALUE;
}
}

protected final void initREMIT5(String s) {
if (!s.trim().isEmpty()) {
REMIT5 = Byte.parseByte(s);
} else {
REMIT5 = Byte.MIN_VALUE;
}
}

protected final void initREMITAMT1(String s) {
if (!s.trim().isEmpty()) {
REMITAMT1 = Short.parseShort(s);
} else {
REMITAMT1 = Short.MIN_VALUE;
}
}

protected final void initREMITAMT2(String s) {
if (!s.trim().isEmpty()) {
REMITAMT2 = Integer.parseInt(s);
} else {
REMITAMT2 = Integer.MIN_VALUE;
}
}

protected final void initREMITAMT3(String s) {
if (!s.trim().isEmpty()) {
REMITAMT3 = Short.parseShort(s);
} else {
REMITAMT3 = Short.MIN_VALUE;
}
}

protected final void initREMITAMT4(String s) {
if (!s.trim().isEmpty()) {
REMITAMT4 = Integer.parseInt(s);
} else {
REMITAMT4 = Integer.MIN_VALUE;
}
}

protected final void initREMITFREQ1(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ1 = Byte.parseByte(s);
} else {
REMITFREQ1 = Byte.MIN_VALUE;
}
}

protected final void initREMITFREQ2(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ2 = Byte.parseByte(s);
} else {
REMITFREQ2 = Byte.MIN_VALUE;
}
}

protected final void initREMITFREQ3(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ3 = Byte.parseByte(s);
} else {
REMITFREQ3 = Byte.MIN_VALUE;
}
}

protected final void initREMITFREQ4(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ4 = Byte.parseByte(s);
} else {
REMITFREQ4 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG1(String s) {
if (!s.trim().isEmpty()) {
REMITREG1 = Byte.parseByte(s);
} else {
REMITREG1 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG2(String s) {
if (!s.trim().isEmpty()) {
REMITREG2 = Byte.parseByte(s);
} else {
REMITREG2 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG3(String s) {
if (!s.trim().isEmpty()) {
REMITREG3 = Byte.parseByte(s);
} else {
REMITREG3 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG4(String s) {
if (!s.trim().isEmpty()) {
REMITREG4 = Byte.parseByte(s);
} else {
REMITREG4 = Byte.MIN_VALUE;
}
}

protected final void initREMITUSUAL1(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL1 = Byte.parseByte(s);
} else {
REMITUSUAL1 = Byte.MIN_VALUE;
}
}

protected final void initREMITUSUAL2(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL2 = Byte.parseByte(s);
} else {
REMITUSUAL2 = Byte.MIN_VALUE;
}
}

protected final void initREMITUSUAL3(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL3 = Byte.parseByte(s);
} else {
REMITUSUAL3 = Byte.MIN_VALUE;
}
}

protected final void initREMITUSUAL4(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL4 = Byte.parseByte(s);
} else {
REMITUSUAL4 = Byte.MIN_VALUE;
}
}

protected final void initREMUSAMT1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
REMUSAMT1 = false;
} else {
REMUSAMT1 = true;
}
}
}

protected final void initREMUSAMT2(String s) {
if (!s.trim().isEmpty()) {
REMUSAMT2 = Short.parseShort(s);
} else {
REMUSAMT2 = Short.MIN_VALUE;
}
}

protected final void initREMUSAMT3(String s) {
if (!s.trim().isEmpty()) {
REMUSAMT3 = Short.parseShort(s);
} else {
REMUSAMT3 = Short.MIN_VALUE;
}
}

protected final void initREMUSAMT4(String s) {
if (!s.trim().isEmpty()) {
REMUSAMT4 = Short.parseShort(s);
} else {
REMUSAMT4 = Short.MIN_VALUE;
}
}

protected final void initRESATTACKED1_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_1 = Byte.parseByte(s);
} else {
RESATTACKED1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_10 = Byte.parseByte(s);
} else {
RESATTACKED1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_11 = Byte.parseByte(s);
} else {
RESATTACKED1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_12 = Byte.parseByte(s);
} else {
RESATTACKED1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_2 = Byte.parseByte(s);
} else {
RESATTACKED1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_3 = Byte.parseByte(s);
} else {
RESATTACKED1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_4 = Byte.parseByte(s);
} else {
RESATTACKED1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_5 = Byte.parseByte(s);
} else {
RESATTACKED1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_6 = Byte.parseByte(s);
} else {
RESATTACKED1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_7 = Byte.parseByte(s);
} else {
RESATTACKED1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_8 = Byte.parseByte(s);
} else {
RESATTACKED1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_9 = Byte.parseByte(s);
} else {
RESATTACKED1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_1 = Byte.parseByte(s);
} else {
RESATTACKED2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_10 = Byte.parseByte(s);
} else {
RESATTACKED2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_11 = Byte.parseByte(s);
} else {
RESATTACKED2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_12 = Byte.parseByte(s);
} else {
RESATTACKED2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_2 = Byte.parseByte(s);
} else {
RESATTACKED2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_3 = Byte.parseByte(s);
} else {
RESATTACKED2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_4 = Byte.parseByte(s);
} else {
RESATTACKED2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_5 = Byte.parseByte(s);
} else {
RESATTACKED2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_6 = Byte.parseByte(s);
} else {
RESATTACKED2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_7 = Byte.parseByte(s);
} else {
RESATTACKED2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_8 = Byte.parseByte(s);
} else {
RESATTACKED2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_9 = Byte.parseByte(s);
} else {
RESATTACKED2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_1 = Byte.parseByte(s);
} else {
RESATTACKED3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_10 = Byte.parseByte(s);
} else {
RESATTACKED3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_11 = Byte.parseByte(s);
} else {
RESATTACKED3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_12 = Byte.parseByte(s);
} else {
RESATTACKED3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_2 = Byte.parseByte(s);
} else {
RESATTACKED3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_3 = Byte.parseByte(s);
} else {
RESATTACKED3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_4 = Byte.parseByte(s);
} else {
RESATTACKED3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_5 = Byte.parseByte(s);
} else {
RESATTACKED3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_6 = Byte.parseByte(s);
} else {
RESATTACKED3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_7 = Byte.parseByte(s);
} else {
RESATTACKED3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_8 = Byte.parseByte(s);
} else {
RESATTACKED3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_9 = Byte.parseByte(s);
} else {
RESATTACKED3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_1 = Byte.parseByte(s);
} else {
RESATTACKED4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_10 = Byte.parseByte(s);
} else {
RESATTACKED4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_11 = Byte.parseByte(s);
} else {
RESATTACKED4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_12 = Byte.parseByte(s);
} else {
RESATTACKED4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_2 = Byte.parseByte(s);
} else {
RESATTACKED4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_3 = Byte.parseByte(s);
} else {
RESATTACKED4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_4 = Byte.parseByte(s);
} else {
RESATTACKED4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_5 = Byte.parseByte(s);
} else {
RESATTACKED4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_6 = Byte.parseByte(s);
} else {
RESATTACKED4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_7 = Byte.parseByte(s);
} else {
RESATTACKED4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_8 = Byte.parseByte(s);
} else {
RESATTACKED4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_9 = Byte.parseByte(s);
} else {
RESATTACKED4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_1 = Byte.parseByte(s);
} else {
RESATTACKED5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_10 = Byte.parseByte(s);
} else {
RESATTACKED5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_11 = Byte.parseByte(s);
} else {
RESATTACKED5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_12 = Byte.parseByte(s);
} else {
RESATTACKED5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_2 = Byte.parseByte(s);
} else {
RESATTACKED5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_3 = Byte.parseByte(s);
} else {
RESATTACKED5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_4 = Byte.parseByte(s);
} else {
RESATTACKED5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_5 = Byte.parseByte(s);
} else {
RESATTACKED5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_6 = Byte.parseByte(s);
} else {
RESATTACKED5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_7 = Byte.parseByte(s);
} else {
RESATTACKED5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_8 = Byte.parseByte(s);
} else {
RESATTACKED5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_9 = Byte.parseByte(s);
} else {
RESATTACKED5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_1 = Byte.parseByte(s);
} else {
RESATTACKED6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_10 = Byte.parseByte(s);
} else {
RESATTACKED6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_11 = Byte.parseByte(s);
} else {
RESATTACKED6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_12 = Byte.parseByte(s);
} else {
RESATTACKED6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_2 = Byte.parseByte(s);
} else {
RESATTACKED6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_3 = Byte.parseByte(s);
} else {
RESATTACKED6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_4 = Byte.parseByte(s);
} else {
RESATTACKED6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_5 = Byte.parseByte(s);
} else {
RESATTACKED6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_6 = Byte.parseByte(s);
} else {
RESATTACKED6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_7 = Byte.parseByte(s);
} else {
RESATTACKED6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_8 = Byte.parseByte(s);
} else {
RESATTACKED6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_9 = Byte.parseByte(s);
} else {
RESATTACKED6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_1 = Byte.parseByte(s);
} else {
RESATTACKED7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_10 = Byte.parseByte(s);
} else {
RESATTACKED7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_11 = Byte.parseByte(s);
} else {
RESATTACKED7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_12 = Byte.parseByte(s);
} else {
RESATTACKED7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_2 = Byte.parseByte(s);
} else {
RESATTACKED7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_3 = Byte.parseByte(s);
} else {
RESATTACKED7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_4 = Byte.parseByte(s);
} else {
RESATTACKED7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_5 = Byte.parseByte(s);
} else {
RESATTACKED7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_6 = Byte.parseByte(s);
} else {
RESATTACKED7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_7 = Byte.parseByte(s);
} else {
RESATTACKED7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_8 = Byte.parseByte(s);
} else {
RESATTACKED7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_9 = Byte.parseByte(s);
} else {
RESATTACKED7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_1 = Byte.parseByte(s);
} else {
RESATTACKED8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_10 = Byte.parseByte(s);
} else {
RESATTACKED8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_11 = Byte.parseByte(s);
} else {
RESATTACKED8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_12 = Byte.parseByte(s);
} else {
RESATTACKED8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_2 = Byte.parseByte(s);
} else {
RESATTACKED8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_3 = Byte.parseByte(s);
} else {
RESATTACKED8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_4 = Byte.parseByte(s);
} else {
RESATTACKED8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_5 = Byte.parseByte(s);
} else {
RESATTACKED8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_6 = Byte.parseByte(s);
} else {
RESATTACKED8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_7 = Byte.parseByte(s);
} else {
RESATTACKED8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_8 = Byte.parseByte(s);
} else {
RESATTACKED8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_9 = Byte.parseByte(s);
} else {
RESATTACKED8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_1 = Byte.parseByte(s);
} else {
RESATTACKED96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_10 = Byte.parseByte(s);
} else {
RESATTACKED96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_11 = Byte.parseByte(s);
} else {
RESATTACKED96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_12 = Byte.parseByte(s);
} else {
RESATTACKED96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_2 = Byte.parseByte(s);
} else {
RESATTACKED96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_3 = Byte.parseByte(s);
} else {
RESATTACKED96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_4 = Byte.parseByte(s);
} else {
RESATTACKED96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_5 = Byte.parseByte(s);
} else {
RESATTACKED96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_6 = Byte.parseByte(s);
} else {
RESATTACKED96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_7 = Byte.parseByte(s);
} else {
RESATTACKED96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_8 = Byte.parseByte(s);
} else {
RESATTACKED96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_9 = Byte.parseByte(s);
} else {
RESATTACKED96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_1 = Byte.parseByte(s);
} else {
RESATTACKED97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_10 = Byte.parseByte(s);
} else {
RESATTACKED97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_11 = Byte.parseByte(s);
} else {
RESATTACKED97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_12 = Byte.parseByte(s);
} else {
RESATTACKED97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_2 = Byte.parseByte(s);
} else {
RESATTACKED97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_3 = Byte.parseByte(s);
} else {
RESATTACKED97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_4 = Byte.parseByte(s);
} else {
RESATTACKED97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_5 = Byte.parseByte(s);
} else {
RESATTACKED97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_6 = Byte.parseByte(s);
} else {
RESATTACKED97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_7 = Byte.parseByte(s);
} else {
RESATTACKED97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_8 = Byte.parseByte(s);
} else {
RESATTACKED97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_9 = Byte.parseByte(s);
} else {
RESATTACKED97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_1 = Byte.parseByte(s);
} else {
RESATTACKED9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_10 = Byte.parseByte(s);
} else {
RESATTACKED9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_11 = Byte.parseByte(s);
} else {
RESATTACKED9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_12 = Byte.parseByte(s);
} else {
RESATTACKED9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_2 = Byte.parseByte(s);
} else {
RESATTACKED9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_3 = Byte.parseByte(s);
} else {
RESATTACKED9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_4 = Byte.parseByte(s);
} else {
RESATTACKED9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_5 = Byte.parseByte(s);
} else {
RESATTACKED9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_6 = Byte.parseByte(s);
} else {
RESATTACKED9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_7 = Byte.parseByte(s);
} else {
RESATTACKED9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_8 = Byte.parseByte(s);
} else {
RESATTACKED9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_9 = Byte.parseByte(s);
} else {
RESATTACKED9_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_1 = Byte.parseByte(s);
} else {
RESAVOID1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_10 = Byte.parseByte(s);
} else {
RESAVOID1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_11 = Byte.parseByte(s);
} else {
RESAVOID1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_12 = Byte.parseByte(s);
} else {
RESAVOID1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_2 = Byte.parseByte(s);
} else {
RESAVOID1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_3 = Byte.parseByte(s);
} else {
RESAVOID1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_4 = Byte.parseByte(s);
} else {
RESAVOID1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_5 = Byte.parseByte(s);
} else {
RESAVOID1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_6 = Byte.parseByte(s);
} else {
RESAVOID1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_7 = Byte.parseByte(s);
} else {
RESAVOID1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_8 = Byte.parseByte(s);
} else {
RESAVOID1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_9 = Byte.parseByte(s);
} else {
RESAVOID1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_1 = Byte.parseByte(s);
} else {
RESAVOID2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_10 = Byte.parseByte(s);
} else {
RESAVOID2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_11 = Byte.parseByte(s);
} else {
RESAVOID2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_12 = Byte.parseByte(s);
} else {
RESAVOID2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_2 = Byte.parseByte(s);
} else {
RESAVOID2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_3 = Byte.parseByte(s);
} else {
RESAVOID2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_4 = Byte.parseByte(s);
} else {
RESAVOID2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_5 = Byte.parseByte(s);
} else {
RESAVOID2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_6 = Byte.parseByte(s);
} else {
RESAVOID2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_7 = Byte.parseByte(s);
} else {
RESAVOID2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_8 = Byte.parseByte(s);
} else {
RESAVOID2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_9 = Byte.parseByte(s);
} else {
RESAVOID2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_1 = Byte.parseByte(s);
} else {
RESAVOID3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_10 = Byte.parseByte(s);
} else {
RESAVOID3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_11 = Byte.parseByte(s);
} else {
RESAVOID3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_12 = Byte.parseByte(s);
} else {
RESAVOID3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_2 = Byte.parseByte(s);
} else {
RESAVOID3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_3 = Byte.parseByte(s);
} else {
RESAVOID3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_4 = Byte.parseByte(s);
} else {
RESAVOID3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_5 = Byte.parseByte(s);
} else {
RESAVOID3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_6 = Byte.parseByte(s);
} else {
RESAVOID3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_7 = Byte.parseByte(s);
} else {
RESAVOID3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_8 = Byte.parseByte(s);
} else {
RESAVOID3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_9 = Byte.parseByte(s);
} else {
RESAVOID3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_1 = Byte.parseByte(s);
} else {
RESAVOID4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_10 = Byte.parseByte(s);
} else {
RESAVOID4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_11 = Byte.parseByte(s);
} else {
RESAVOID4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_12 = Byte.parseByte(s);
} else {
RESAVOID4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_2 = Byte.parseByte(s);
} else {
RESAVOID4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_3 = Byte.parseByte(s);
} else {
RESAVOID4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_4 = Byte.parseByte(s);
} else {
RESAVOID4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_5 = Byte.parseByte(s);
} else {
RESAVOID4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_6 = Byte.parseByte(s);
} else {
RESAVOID4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_7 = Byte.parseByte(s);
} else {
RESAVOID4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_8 = Byte.parseByte(s);
} else {
RESAVOID4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_9 = Byte.parseByte(s);
} else {
RESAVOID4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_1 = Byte.parseByte(s);
} else {
RESAVOID5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_10 = Byte.parseByte(s);
} else {
RESAVOID5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_11 = Byte.parseByte(s);
} else {
RESAVOID5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_12 = Byte.parseByte(s);
} else {
RESAVOID5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_2 = Byte.parseByte(s);
} else {
RESAVOID5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_3 = Byte.parseByte(s);
} else {
RESAVOID5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_4 = Byte.parseByte(s);
} else {
RESAVOID5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_5 = Byte.parseByte(s);
} else {
RESAVOID5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_6 = Byte.parseByte(s);
} else {
RESAVOID5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_7 = Byte.parseByte(s);
} else {
RESAVOID5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_8 = Byte.parseByte(s);
} else {
RESAVOID5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_9 = Byte.parseByte(s);
} else {
RESAVOID5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_1 = Byte.parseByte(s);
} else {
RESAVOID6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_10 = Byte.parseByte(s);
} else {
RESAVOID6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_11 = Byte.parseByte(s);
} else {
RESAVOID6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_12 = Byte.parseByte(s);
} else {
RESAVOID6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_2 = Byte.parseByte(s);
} else {
RESAVOID6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_3 = Byte.parseByte(s);
} else {
RESAVOID6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_4 = Byte.parseByte(s);
} else {
RESAVOID6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_5 = Byte.parseByte(s);
} else {
RESAVOID6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_6 = Byte.parseByte(s);
} else {
RESAVOID6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_7 = Byte.parseByte(s);
} else {
RESAVOID6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_8 = Byte.parseByte(s);
} else {
RESAVOID6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_9 = Byte.parseByte(s);
} else {
RESAVOID6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_1 = Byte.parseByte(s);
} else {
RESAVOID7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_10 = Byte.parseByte(s);
} else {
RESAVOID7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_11 = Byte.parseByte(s);
} else {
RESAVOID7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_12 = Byte.parseByte(s);
} else {
RESAVOID7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_2 = Byte.parseByte(s);
} else {
RESAVOID7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_3 = Byte.parseByte(s);
} else {
RESAVOID7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_4 = Byte.parseByte(s);
} else {
RESAVOID7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_5 = Byte.parseByte(s);
} else {
RESAVOID7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_6 = Byte.parseByte(s);
} else {
RESAVOID7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_7 = Byte.parseByte(s);
} else {
RESAVOID7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_8 = Byte.parseByte(s);
} else {
RESAVOID7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_9 = Byte.parseByte(s);
} else {
RESAVOID7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_1 = Byte.parseByte(s);
} else {
RESAVOID8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_10 = Byte.parseByte(s);
} else {
RESAVOID8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_11 = Byte.parseByte(s);
} else {
RESAVOID8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_12 = Byte.parseByte(s);
} else {
RESAVOID8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_2 = Byte.parseByte(s);
} else {
RESAVOID8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_3 = Byte.parseByte(s);
} else {
RESAVOID8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_4 = Byte.parseByte(s);
} else {
RESAVOID8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_5 = Byte.parseByte(s);
} else {
RESAVOID8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_6 = Byte.parseByte(s);
} else {
RESAVOID8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_7 = Byte.parseByte(s);
} else {
RESAVOID8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_8 = Byte.parseByte(s);
} else {
RESAVOID8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_9 = Byte.parseByte(s);
} else {
RESAVOID8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_1 = Byte.parseByte(s);
} else {
RESAVOID96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_10 = Byte.parseByte(s);
} else {
RESAVOID96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_11 = Byte.parseByte(s);
} else {
RESAVOID96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_12 = Byte.parseByte(s);
} else {
RESAVOID96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_2 = Byte.parseByte(s);
} else {
RESAVOID96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_3 = Byte.parseByte(s);
} else {
RESAVOID96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_4 = Byte.parseByte(s);
} else {
RESAVOID96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_5 = Byte.parseByte(s);
} else {
RESAVOID96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_6 = Byte.parseByte(s);
} else {
RESAVOID96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_7 = Byte.parseByte(s);
} else {
RESAVOID96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_8 = Byte.parseByte(s);
} else {
RESAVOID96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_9 = Byte.parseByte(s);
} else {
RESAVOID96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_1 = Byte.parseByte(s);
} else {
RESAVOID97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_10 = Byte.parseByte(s);
} else {
RESAVOID97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_11 = Byte.parseByte(s);
} else {
RESAVOID97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_12 = Byte.parseByte(s);
} else {
RESAVOID97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_2 = Byte.parseByte(s);
} else {
RESAVOID97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_3 = Byte.parseByte(s);
} else {
RESAVOID97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_4 = Byte.parseByte(s);
} else {
RESAVOID97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_5 = Byte.parseByte(s);
} else {
RESAVOID97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_6 = Byte.parseByte(s);
} else {
RESAVOID97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_7 = Byte.parseByte(s);
} else {
RESAVOID97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_8 = Byte.parseByte(s);
} else {
RESAVOID97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_9 = Byte.parseByte(s);
} else {
RESAVOID97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_1 = Byte.parseByte(s);
} else {
RESAVOID9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_10 = Byte.parseByte(s);
} else {
RESAVOID9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_11 = Byte.parseByte(s);
} else {
RESAVOID9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_12 = Byte.parseByte(s);
} else {
RESAVOID9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_2 = Byte.parseByte(s);
} else {
RESAVOID9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_3 = Byte.parseByte(s);
} else {
RESAVOID9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_4 = Byte.parseByte(s);
} else {
RESAVOID9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_5 = Byte.parseByte(s);
} else {
RESAVOID9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_6 = Byte.parseByte(s);
} else {
RESAVOID9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_7 = Byte.parseByte(s);
} else {
RESAVOID9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_8 = Byte.parseByte(s);
} else {
RESAVOID9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_9 = Byte.parseByte(s);
} else {
RESAVOID9_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_1 = Byte.parseByte(s);
} else {
RESINSULTED1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_10 = Byte.parseByte(s);
} else {
RESINSULTED1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_11 = Byte.parseByte(s);
} else {
RESINSULTED1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_12 = Byte.parseByte(s);
} else {
RESINSULTED1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_2 = Byte.parseByte(s);
} else {
RESINSULTED1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_3 = Byte.parseByte(s);
} else {
RESINSULTED1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_4 = Byte.parseByte(s);
} else {
RESINSULTED1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_5 = Byte.parseByte(s);
} else {
RESINSULTED1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_6 = Byte.parseByte(s);
} else {
RESINSULTED1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_7 = Byte.parseByte(s);
} else {
RESINSULTED1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_8 = Byte.parseByte(s);
} else {
RESINSULTED1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_9 = Byte.parseByte(s);
} else {
RESINSULTED1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_1 = Byte.parseByte(s);
} else {
RESINSULTED2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_10 = Byte.parseByte(s);
} else {
RESINSULTED2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_11 = Byte.parseByte(s);
} else {
RESINSULTED2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_12 = Byte.parseByte(s);
} else {
RESINSULTED2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_2 = Byte.parseByte(s);
} else {
RESINSULTED2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_3 = Byte.parseByte(s);
} else {
RESINSULTED2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_4 = Byte.parseByte(s);
} else {
RESINSULTED2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_5 = Byte.parseByte(s);
} else {
RESINSULTED2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_6 = Byte.parseByte(s);
} else {
RESINSULTED2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_7 = Byte.parseByte(s);
} else {
RESINSULTED2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_8 = Byte.parseByte(s);
} else {
RESINSULTED2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_9 = Byte.parseByte(s);
} else {
RESINSULTED2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_1 = Byte.parseByte(s);
} else {
RESINSULTED3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_10 = Byte.parseByte(s);
} else {
RESINSULTED3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_11 = Byte.parseByte(s);
} else {
RESINSULTED3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_12 = Byte.parseByte(s);
} else {
RESINSULTED3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_2 = Byte.parseByte(s);
} else {
RESINSULTED3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_3 = Byte.parseByte(s);
} else {
RESINSULTED3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_4 = Byte.parseByte(s);
} else {
RESINSULTED3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_5 = Byte.parseByte(s);
} else {
RESINSULTED3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_6 = Byte.parseByte(s);
} else {
RESINSULTED3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_7 = Byte.parseByte(s);
} else {
RESINSULTED3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_8 = Byte.parseByte(s);
} else {
RESINSULTED3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_9 = Byte.parseByte(s);
} else {
RESINSULTED3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_1 = Byte.parseByte(s);
} else {
RESINSULTED4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_10 = Byte.parseByte(s);
} else {
RESINSULTED4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_11 = Byte.parseByte(s);
} else {
RESINSULTED4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_12 = Byte.parseByte(s);
} else {
RESINSULTED4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_2 = Byte.parseByte(s);
} else {
RESINSULTED4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_3 = Byte.parseByte(s);
} else {
RESINSULTED4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_4 = Byte.parseByte(s);
} else {
RESINSULTED4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_5 = Byte.parseByte(s);
} else {
RESINSULTED4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_6 = Byte.parseByte(s);
} else {
RESINSULTED4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_7 = Byte.parseByte(s);
} else {
RESINSULTED4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_8 = Byte.parseByte(s);
} else {
RESINSULTED4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_9 = Byte.parseByte(s);
} else {
RESINSULTED4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_1 = Byte.parseByte(s);
} else {
RESINSULTED5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_10 = Byte.parseByte(s);
} else {
RESINSULTED5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_11 = Byte.parseByte(s);
} else {
RESINSULTED5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_12 = Byte.parseByte(s);
} else {
RESINSULTED5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_2 = Byte.parseByte(s);
} else {
RESINSULTED5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_3 = Byte.parseByte(s);
} else {
RESINSULTED5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_4 = Byte.parseByte(s);
} else {
RESINSULTED5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_5 = Byte.parseByte(s);
} else {
RESINSULTED5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_6 = Byte.parseByte(s);
} else {
RESINSULTED5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_7 = Byte.parseByte(s);
} else {
RESINSULTED5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_8 = Byte.parseByte(s);
} else {
RESINSULTED5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_9 = Byte.parseByte(s);
} else {
RESINSULTED5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_1 = Byte.parseByte(s);
} else {
RESINSULTED6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_10 = Byte.parseByte(s);
} else {
RESINSULTED6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_11 = Byte.parseByte(s);
} else {
RESINSULTED6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_12 = Byte.parseByte(s);
} else {
RESINSULTED6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_2 = Byte.parseByte(s);
} else {
RESINSULTED6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_3 = Byte.parseByte(s);
} else {
RESINSULTED6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_4 = Byte.parseByte(s);
} else {
RESINSULTED6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_5 = Byte.parseByte(s);
} else {
RESINSULTED6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_6 = Byte.parseByte(s);
} else {
RESINSULTED6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_7 = Byte.parseByte(s);
} else {
RESINSULTED6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_8 = Byte.parseByte(s);
} else {
RESINSULTED6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_9 = Byte.parseByte(s);
} else {
RESINSULTED6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_1 = Byte.parseByte(s);
} else {
RESINSULTED7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_10 = Byte.parseByte(s);
} else {
RESINSULTED7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_11 = Byte.parseByte(s);
} else {
RESINSULTED7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_12 = Byte.parseByte(s);
} else {
RESINSULTED7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_2 = Byte.parseByte(s);
} else {
RESINSULTED7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_3 = Byte.parseByte(s);
} else {
RESINSULTED7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_4 = Byte.parseByte(s);
} else {
RESINSULTED7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_5 = Byte.parseByte(s);
} else {
RESINSULTED7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_6 = Byte.parseByte(s);
} else {
RESINSULTED7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_7 = Byte.parseByte(s);
} else {
RESINSULTED7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_8 = Byte.parseByte(s);
} else {
RESINSULTED7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_9 = Byte.parseByte(s);
} else {
RESINSULTED7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_1 = Byte.parseByte(s);
} else {
RESINSULTED8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_10 = Byte.parseByte(s);
} else {
RESINSULTED8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_11 = Byte.parseByte(s);
} else {
RESINSULTED8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_12 = Byte.parseByte(s);
} else {
RESINSULTED8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_2 = Byte.parseByte(s);
} else {
RESINSULTED8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_3 = Byte.parseByte(s);
} else {
RESINSULTED8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_4 = Byte.parseByte(s);
} else {
RESINSULTED8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_5 = Byte.parseByte(s);
} else {
RESINSULTED8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_6 = Byte.parseByte(s);
} else {
RESINSULTED8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_7 = Byte.parseByte(s);
} else {
RESINSULTED8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_8 = Byte.parseByte(s);
} else {
RESINSULTED8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_9 = Byte.parseByte(s);
} else {
RESINSULTED8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_1 = Byte.parseByte(s);
} else {
RESINSULTED96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_10 = Byte.parseByte(s);
} else {
RESINSULTED96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_11 = Byte.parseByte(s);
} else {
RESINSULTED96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_12 = Byte.parseByte(s);
} else {
RESINSULTED96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_2 = Byte.parseByte(s);
} else {
RESINSULTED96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_3 = Byte.parseByte(s);
} else {
RESINSULTED96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_4 = Byte.parseByte(s);
} else {
RESINSULTED96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_5 = Byte.parseByte(s);
} else {
RESINSULTED96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_6 = Byte.parseByte(s);
} else {
RESINSULTED96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_7 = Byte.parseByte(s);
} else {
RESINSULTED96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_8 = Byte.parseByte(s);
} else {
RESINSULTED96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_9 = Byte.parseByte(s);
} else {
RESINSULTED96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_1 = Byte.parseByte(s);
} else {
RESINSULTED97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_10 = Byte.parseByte(s);
} else {
RESINSULTED97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_11 = Byte.parseByte(s);
} else {
RESINSULTED97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_12 = Byte.parseByte(s);
} else {
RESINSULTED97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_2 = Byte.parseByte(s);
} else {
RESINSULTED97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_3 = Byte.parseByte(s);
} else {
RESINSULTED97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_4 = Byte.parseByte(s);
} else {
RESINSULTED97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_5 = Byte.parseByte(s);
} else {
RESINSULTED97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_6 = Byte.parseByte(s);
} else {
RESINSULTED97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_7 = Byte.parseByte(s);
} else {
RESINSULTED97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_8 = Byte.parseByte(s);
} else {
RESINSULTED97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_9 = Byte.parseByte(s);
} else {
RESINSULTED97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_1 = Byte.parseByte(s);
} else {
RESINSULTED9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_10 = Byte.parseByte(s);
} else {
RESINSULTED9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_11 = Byte.parseByte(s);
} else {
RESINSULTED9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_12 = Byte.parseByte(s);
} else {
RESINSULTED9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_2 = Byte.parseByte(s);
} else {
RESINSULTED9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_3 = Byte.parseByte(s);
} else {
RESINSULTED9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_4 = Byte.parseByte(s);
} else {
RESINSULTED9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_5 = Byte.parseByte(s);
} else {
RESINSULTED9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_6 = Byte.parseByte(s);
} else {
RESINSULTED9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_7 = Byte.parseByte(s);
} else {
RESINSULTED9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_8 = Byte.parseByte(s);
} else {
RESINSULTED9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_9 = Byte.parseByte(s);
} else {
RESINSULTED9_9 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY1(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY1 = Byte.parseByte(s);
} else {
RESJOBDENY1 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY2(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY2 = Byte.parseByte(s);
} else {
RESJOBDENY2 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY3(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY3 = Byte.parseByte(s);
} else {
RESJOBDENY3 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY4(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY4 = Byte.parseByte(s);
} else {
RESJOBDENY4 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY5(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY5 = Byte.parseByte(s);
} else {
RESJOBDENY5 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY6(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY6 = Byte.parseByte(s);
} else {
RESJOBDENY6 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY7(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY7 = Byte.parseByte(s);
} else {
RESJOBDENY7 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY8(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY8 = Byte.parseByte(s);
} else {
RESJOBDENY8 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY9(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY9 = Byte.parseByte(s);
} else {
RESJOBDENY9 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY96(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY96 = Byte.parseByte(s);
} else {
RESJOBDENY96 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY97(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY97 = Byte.parseByte(s);
} else {
RESJOBDENY97 = Byte.MIN_VALUE;
}
}

protected final void initRESPF16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
RESPF16 = false;
} else {
RESPF16 = true;
}
}
}

protected final void initRESPF16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16_DV = false;
} else {
RESPF16_DV = true;
}
}
}

protected final void initRESPM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
RESPM16 = false;
} else {
RESPM16 = true;
}
}
}

protected final void initRESPM16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16_DV = false;
} else {
RESPM16_DV = true;
}
}
}

protected final void initRESUNSAFE1_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_1 = Byte.parseByte(s);
} else {
RESUNSAFE1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_10 = Byte.parseByte(s);
} else {
RESUNSAFE1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_11 = Byte.parseByte(s);
} else {
RESUNSAFE1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_12 = Byte.parseByte(s);
} else {
RESUNSAFE1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_2 = Byte.parseByte(s);
} else {
RESUNSAFE1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_3 = Byte.parseByte(s);
} else {
RESUNSAFE1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_4 = Byte.parseByte(s);
} else {
RESUNSAFE1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_5 = Byte.parseByte(s);
} else {
RESUNSAFE1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_6 = Byte.parseByte(s);
} else {
RESUNSAFE1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_7 = Byte.parseByte(s);
} else {
RESUNSAFE1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_8 = Byte.parseByte(s);
} else {
RESUNSAFE1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_9 = Byte.parseByte(s);
} else {
RESUNSAFE1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_1 = Byte.parseByte(s);
} else {
RESUNSAFE2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_10 = Byte.parseByte(s);
} else {
RESUNSAFE2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_11 = Byte.parseByte(s);
} else {
RESUNSAFE2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_12 = Byte.parseByte(s);
} else {
RESUNSAFE2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_2 = Byte.parseByte(s);
} else {
RESUNSAFE2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_3 = Byte.parseByte(s);
} else {
RESUNSAFE2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_4 = Byte.parseByte(s);
} else {
RESUNSAFE2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_5 = Byte.parseByte(s);
} else {
RESUNSAFE2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_6 = Byte.parseByte(s);
} else {
RESUNSAFE2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_7 = Byte.parseByte(s);
} else {
RESUNSAFE2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_8 = Byte.parseByte(s);
} else {
RESUNSAFE2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_9 = Byte.parseByte(s);
} else {
RESUNSAFE2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_1 = Byte.parseByte(s);
} else {
RESUNSAFE3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_10 = Byte.parseByte(s);
} else {
RESUNSAFE3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_11 = Byte.parseByte(s);
} else {
RESUNSAFE3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_12 = Byte.parseByte(s);
} else {
RESUNSAFE3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_2 = Byte.parseByte(s);
} else {
RESUNSAFE3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_3 = Byte.parseByte(s);
} else {
RESUNSAFE3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_4 = Byte.parseByte(s);
} else {
RESUNSAFE3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_5 = Byte.parseByte(s);
} else {
RESUNSAFE3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_6 = Byte.parseByte(s);
} else {
RESUNSAFE3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_7 = Byte.parseByte(s);
} else {
RESUNSAFE3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_8 = Byte.parseByte(s);
} else {
RESUNSAFE3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_9 = Byte.parseByte(s);
} else {
RESUNSAFE3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_1 = Byte.parseByte(s);
} else {
RESUNSAFE4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_10 = Byte.parseByte(s);
} else {
RESUNSAFE4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_11 = Byte.parseByte(s);
} else {
RESUNSAFE4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_12 = Byte.parseByte(s);
} else {
RESUNSAFE4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_2 = Byte.parseByte(s);
} else {
RESUNSAFE4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_3 = Byte.parseByte(s);
} else {
RESUNSAFE4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_4 = Byte.parseByte(s);
} else {
RESUNSAFE4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_5 = Byte.parseByte(s);
} else {
RESUNSAFE4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_6 = Byte.parseByte(s);
} else {
RESUNSAFE4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_7 = Byte.parseByte(s);
} else {
RESUNSAFE4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_8 = Byte.parseByte(s);
} else {
RESUNSAFE4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_9 = Byte.parseByte(s);
} else {
RESUNSAFE4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_1 = Byte.parseByte(s);
} else {
RESUNSAFE5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_10 = Byte.parseByte(s);
} else {
RESUNSAFE5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_11 = Byte.parseByte(s);
} else {
RESUNSAFE5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_12 = Byte.parseByte(s);
} else {
RESUNSAFE5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_2 = Byte.parseByte(s);
} else {
RESUNSAFE5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_3 = Byte.parseByte(s);
} else {
RESUNSAFE5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_4 = Byte.parseByte(s);
} else {
RESUNSAFE5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_5 = Byte.parseByte(s);
} else {
RESUNSAFE5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_6 = Byte.parseByte(s);
} else {
RESUNSAFE5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_7 = Byte.parseByte(s);
} else {
RESUNSAFE5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_8 = Byte.parseByte(s);
} else {
RESUNSAFE5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_9 = Byte.parseByte(s);
} else {
RESUNSAFE5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_1 = Byte.parseByte(s);
} else {
RESUNSAFE6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_10 = Byte.parseByte(s);
} else {
RESUNSAFE6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_11 = Byte.parseByte(s);
} else {
RESUNSAFE6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_12 = Byte.parseByte(s);
} else {
RESUNSAFE6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_2 = Byte.parseByte(s);
} else {
RESUNSAFE6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_3 = Byte.parseByte(s);
} else {
RESUNSAFE6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_4 = Byte.parseByte(s);
} else {
RESUNSAFE6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_5 = Byte.parseByte(s);
} else {
RESUNSAFE6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_6 = Byte.parseByte(s);
} else {
RESUNSAFE6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_7 = Byte.parseByte(s);
} else {
RESUNSAFE6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_8 = Byte.parseByte(s);
} else {
RESUNSAFE6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_9 = Byte.parseByte(s);
} else {
RESUNSAFE6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_1 = Byte.parseByte(s);
} else {
RESUNSAFE7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_10 = Byte.parseByte(s);
} else {
RESUNSAFE7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_11 = Byte.parseByte(s);
} else {
RESUNSAFE7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_12 = Byte.parseByte(s);
} else {
RESUNSAFE7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_2 = Byte.parseByte(s);
} else {
RESUNSAFE7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_3 = Byte.parseByte(s);
} else {
RESUNSAFE7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_4 = Byte.parseByte(s);
} else {
RESUNSAFE7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_5 = Byte.parseByte(s);
} else {
RESUNSAFE7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_6 = Byte.parseByte(s);
} else {
RESUNSAFE7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_7 = Byte.parseByte(s);
} else {
RESUNSAFE7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_8 = Byte.parseByte(s);
} else {
RESUNSAFE7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_9 = Byte.parseByte(s);
} else {
RESUNSAFE7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_1 = Byte.parseByte(s);
} else {
RESUNSAFE8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_10 = Byte.parseByte(s);
} else {
RESUNSAFE8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_11 = Byte.parseByte(s);
} else {
RESUNSAFE8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_12 = Byte.parseByte(s);
} else {
RESUNSAFE8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_2 = Byte.parseByte(s);
} else {
RESUNSAFE8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_3 = Byte.parseByte(s);
} else {
RESUNSAFE8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_4 = Byte.parseByte(s);
} else {
RESUNSAFE8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_5 = Byte.parseByte(s);
} else {
RESUNSAFE8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_6 = Byte.parseByte(s);
} else {
RESUNSAFE8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_7 = Byte.parseByte(s);
} else {
RESUNSAFE8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_8 = Byte.parseByte(s);
} else {
RESUNSAFE8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_9 = Byte.parseByte(s);
} else {
RESUNSAFE8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_1 = Byte.parseByte(s);
} else {
RESUNSAFE96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_10 = Byte.parseByte(s);
} else {
RESUNSAFE96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_11 = Byte.parseByte(s);
} else {
RESUNSAFE96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_12 = Byte.parseByte(s);
} else {
RESUNSAFE96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_2 = Byte.parseByte(s);
} else {
RESUNSAFE96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_3 = Byte.parseByte(s);
} else {
RESUNSAFE96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_4 = Byte.parseByte(s);
} else {
RESUNSAFE96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_5 = Byte.parseByte(s);
} else {
RESUNSAFE96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_6 = Byte.parseByte(s);
} else {
RESUNSAFE96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_7 = Byte.parseByte(s);
} else {
RESUNSAFE96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_8 = Byte.parseByte(s);
} else {
RESUNSAFE96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_9 = Byte.parseByte(s);
} else {
RESUNSAFE96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_1 = Byte.parseByte(s);
} else {
RESUNSAFE97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_10 = Byte.parseByte(s);
} else {
RESUNSAFE97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_11 = Byte.parseByte(s);
} else {
RESUNSAFE97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_12 = Byte.parseByte(s);
} else {
RESUNSAFE97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_2 = Byte.parseByte(s);
} else {
RESUNSAFE97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_3 = Byte.parseByte(s);
} else {
RESUNSAFE97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_4 = Byte.parseByte(s);
} else {
RESUNSAFE97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_5 = Byte.parseByte(s);
} else {
RESUNSAFE97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_6 = Byte.parseByte(s);
} else {
RESUNSAFE97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_7 = Byte.parseByte(s);
} else {
RESUNSAFE97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_8 = Byte.parseByte(s);
} else {
RESUNSAFE97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_9 = Byte.parseByte(s);
} else {
RESUNSAFE97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_1 = Byte.parseByte(s);
} else {
RESUNSAFE9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_10 = Byte.parseByte(s);
} else {
RESUNSAFE9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_11 = Byte.parseByte(s);
} else {
RESUNSAFE9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_12 = Byte.parseByte(s);
} else {
RESUNSAFE9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_2 = Byte.parseByte(s);
} else {
RESUNSAFE9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_3 = Byte.parseByte(s);
} else {
RESUNSAFE9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_4 = Byte.parseByte(s);
} else {
RESUNSAFE9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_5 = Byte.parseByte(s);
} else {
RESUNSAFE9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_6 = Byte.parseByte(s);
} else {
RESUNSAFE9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_7 = Byte.parseByte(s);
} else {
RESUNSAFE9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_8 = Byte.parseByte(s);
} else {
RESUNSAFE9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_9 = Byte.parseByte(s);
} else {
RESUNSAFE9_9 = Byte.MIN_VALUE;
}
}

protected final void initRETAMT(String s) {
if (!s.trim().isEmpty()) {
RETAMT = Byte.parseByte(s);
} else {
RETAMT = Byte.MIN_VALUE;
}
}

protected final void initRETCHK(String s) {
if (!s.trim().isEmpty()) {
RETCHK = Byte.parseByte(s);
} else {
RETCHK = Byte.MIN_VALUE;
}
}

protected final void initRETSUF(String s) {
if (!s.trim().isEmpty()) {
RETSUF = Byte.parseByte(s);
} else {
RETSUF = Byte.MIN_VALUE;
}
}

protected final void initRHLAND_CODE(String s) {
if (!s.trim().isEmpty()) {
RHLAND_CODE = Byte.parseByte(s);
} else {
RHLAND_CODE = Byte.MIN_VALUE;
}
}

protected final void initRINGFENCE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
RINGFENCE = false;
} else {
RINGFENCE = true;
}
}
}

protected final void initRPHMOB_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHMOB_CODE = Byte.parseByte(s);
} else {
RPHMOB_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHWRK_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHWRK_CODE = Byte.parseByte(s);
} else {
RPHWRK_CODE = Byte.MIN_VALUE;
}
}

protected final void initRTCON1(String s) {
if (!s.trim().isEmpty()) {
RTCON1 = Byte.parseByte(s);
} else {
RTCON1 = Byte.MIN_VALUE;
}
}

protected final void initRTCON2(String s) {
if (!s.trim().isEmpty()) {
RTCON2 = Byte.parseByte(s);
} else {
RTCON2 = Byte.MIN_VALUE;
}
}

protected final void initRTCON3(String s) {
if (!s.trim().isEmpty()) {
RTCON3 = Byte.parseByte(s);
} else {
RTCON3 = Byte.MIN_VALUE;
}
}

protected final void initRTCON4(String s) {
if (!s.trim().isEmpty()) {
RTCON4 = Byte.parseByte(s);
} else {
RTCON4 = Byte.MIN_VALUE;
}
}

protected final void initRTEXPJB(String s) {
if (!s.trim().isEmpty()) {
RTEXPJB = Byte.parseByte(s);
} else {
RTEXPJB = Byte.MIN_VALUE;
}
}

protected final void initRTFND1(String s) {
if (!s.trim().isEmpty()) {
RTFND1 = Byte.parseByte(s);
} else {
RTFND1 = Byte.MIN_VALUE;
}
}

protected final void initRTFND10(String s) {
if (!s.trim().isEmpty()) {
RTFND10 = Byte.parseByte(s);
} else {
RTFND10 = Byte.MIN_VALUE;
}
}

protected final void initRTFND2(String s) {
if (!s.trim().isEmpty()) {
RTFND2 = Byte.parseByte(s);
} else {
RTFND2 = Byte.MIN_VALUE;
}
}

protected final void initRTFND3(String s) {
if (!s.trim().isEmpty()) {
RTFND3 = Byte.parseByte(s);
} else {
RTFND3 = Byte.MIN_VALUE;
}
}

protected final void initRTFND4(String s) {
if (!s.trim().isEmpty()) {
RTFND4 = Byte.parseByte(s);
} else {
RTFND4 = Byte.MIN_VALUE;
}
}

protected final void initRTFND5(String s) {
if (!s.trim().isEmpty()) {
RTFND5 = Byte.parseByte(s);
} else {
RTFND5 = Byte.MIN_VALUE;
}
}

protected final void initRTFND6(String s) {
if (!s.trim().isEmpty()) {
RTFND6 = Byte.parseByte(s);
} else {
RTFND6 = Byte.MIN_VALUE;
}
}

protected final void initRTFND7(String s) {
if (!s.trim().isEmpty()) {
RTFND7 = Byte.parseByte(s);
} else {
RTFND7 = Byte.MIN_VALUE;
}
}

protected final void initRTFND8(String s) {
if (!s.trim().isEmpty()) {
RTFND8 = Byte.parseByte(s);
} else {
RTFND8 = Byte.MIN_VALUE;
}
}

protected final void initRTFND9(String s) {
if (!s.trim().isEmpty()) {
RTFND9 = Byte.parseByte(s);
} else {
RTFND9 = Byte.MIN_VALUE;
}
}

protected final void initRTFND96(String s) {
if (!s.trim().isEmpty()) {
RTFND96 = Byte.parseByte(s);
} else {
RTFND96 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO1(String s) {
if (!s.trim().isEmpty()) {
RTPRO1 = Byte.parseByte(s);
} else {
RTPRO1 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO2(String s) {
if (!s.trim().isEmpty()) {
RTPRO2 = Byte.parseByte(s);
} else {
RTPRO2 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO3(String s) {
if (!s.trim().isEmpty()) {
RTPRO3 = Byte.parseByte(s);
} else {
RTPRO3 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO4(String s) {
if (!s.trim().isEmpty()) {
RTPRO4 = Byte.parseByte(s);
} else {
RTPRO4 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO5(String s) {
if (!s.trim().isEmpty()) {
RTPRO5 = Byte.parseByte(s);
} else {
RTPRO5 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO6(String s) {
if (!s.trim().isEmpty()) {
RTPRO6 = Byte.parseByte(s);
} else {
RTPRO6 = Byte.MIN_VALUE;
}
}

protected final void initRULESKID(String s) {
if (!s.trim().isEmpty()) {
RULESKID = Byte.parseByte(s);
} else {
RULESKID = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB = Byte.parseByte(s);
} else {
SAMEJOB = Byte.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSCAC(String s) {
if (!s.trim().isEmpty()) {
SCAC = Byte.parseByte(s);
} else {
SCAC = Byte.MIN_VALUE;
}
}

protected final void initSCDASCOH_DV(String s) {
if (!s.trim().isEmpty()) {
SCDASCOH_DV = Byte.parseByte(s);
} else {
SCDASCOH_DV = Byte.MIN_VALUE;
}
}

protected final void initSCDASSAT_DV(String s) {
if (!s.trim().isEmpty()) {
SCDASSAT_DV = Byte.parseByte(s);
} else {
SCDASSAT_DV = Byte.MIN_VALUE;
}
}

protected final void initSCDATA_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
SCDATA_DV = false;
} else {
SCDATA_DV = true;
}
}
}

protected final void initSCFINEMB(String s) {
if (!s.trim().isEmpty()) {
SCFINEMB = Byte.parseByte(s);
} else {
SCFINEMB = Byte.MIN_VALUE;
}
}

protected final void initSCFINSMALL(String s) {
if (!s.trim().isEmpty()) {
SCFINSMALL = Byte.parseByte(s);
} else {
SCFINSMALL = Byte.MIN_VALUE;
}
}

protected final void initSCFLADV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
SCFLADV = false;
} else {
SCFLADV = true;
}
}
}

protected final void initSCHLLOC(String s) {
if (!s.trim().isEmpty()) {
SCHLLOC = Byte.parseByte(s);
} else {
SCHLLOC = Byte.MIN_VALUE;
}
}

protected final void initSCHOK(String s) {
if (!s.trim().isEmpty()) {
SCHOK = Byte.parseByte(s);
} else {
SCHOK = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY1(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY1 = Byte.parseByte(s);
} else {
SCHOOLCNTRY1 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY2(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY2 = Byte.parseByte(s);
} else {
SCHOOLCNTRY2 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY3(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY3 = Byte.parseByte(s);
} else {
SCHOOLCNTRY3 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY4(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY4 = Byte.parseByte(s);
} else {
SCHOOLCNTRY4 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY5(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY5 = Byte.parseByte(s);
} else {
SCHOOLCNTRY5 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOL_CAWI(String s) {
if (!s.trim().isEmpty()) {
SCHOOL_CAWI = Byte.parseByte(s);
} else {
SCHOOL_CAWI = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT1(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT1 = Byte.parseByte(s);
} else {
SCLFSAT1 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT2(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT2 = Byte.parseByte(s);
} else {
SCLFSAT2 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT7(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT7 = Byte.parseByte(s);
} else {
SCLFSAT7 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSATO(String s) {
if (!s.trim().isEmpty()) {
SCLFSATO = Byte.parseByte(s);
} else {
SCLFSATO = Byte.MIN_VALUE;
}
}

protected final void initSCPAROUTINT(String s) {
if (!s.trim().isEmpty()) {
SCPAROUTINT = Byte.parseByte(s);
} else {
SCPAROUTINT = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEA11(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEA11 = Byte.parseByte(s);
} else {
SCPAYCODEA11 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEA12(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEA12 = Byte.parseByte(s);
} else {
SCPAYCODEA12 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEA13(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEA13 = Byte.parseByte(s);
} else {
SCPAYCODEA13 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEA14(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEA14 = Byte.parseByte(s);
} else {
SCPAYCODEA14 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEA15(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEA15 = Byte.parseByte(s);
} else {
SCPAYCODEA15 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEA16(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEA16 = Byte.parseByte(s);
} else {
SCPAYCODEA16 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEA17(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEA17 = Byte.parseByte(s);
} else {
SCPAYCODEA17 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEA18(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEA18 = Byte.parseByte(s);
} else {
SCPAYCODEA18 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEB11(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEB11 = Byte.parseByte(s);
} else {
SCPAYCODEB11 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEB12(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEB12 = Byte.parseByte(s);
} else {
SCPAYCODEB12 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEB13(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEB13 = Byte.parseByte(s);
} else {
SCPAYCODEB13 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEB14(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEB14 = Byte.parseByte(s);
} else {
SCPAYCODEB14 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEB15(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEB15 = Byte.parseByte(s);
} else {
SCPAYCODEB15 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEB16(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEB16 = Byte.parseByte(s);
} else {
SCPAYCODEB16 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEB17(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEB17 = Byte.parseByte(s);
} else {
SCPAYCODEB17 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYCODEB18(String s) {
if (!s.trim().isEmpty()) {
SCPAYCODEB18 = Byte.parseByte(s);
} else {
SCPAYCODEB18 = Byte.MIN_VALUE;
}
}

protected final void initSCPAYREA(String s) {
if (!s.trim().isEmpty()) {
SCPAYREA = Byte.parseByte(s);
} else {
SCPAYREA = Byte.MIN_VALUE;
}
}

protected final void initSCPAYREB(String s) {
if (!s.trim().isEmpty()) {
SCPAYREB = Byte.parseByte(s);
} else {
SCPAYREB = Byte.MIN_VALUE;
}
}

protected final void initSCRELHAPPY(String s) {
if (!s.trim().isEmpty()) {
SCRELHAPPY = Byte.parseByte(s);
} else {
SCRELHAPPY = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARAR(String s) {
if (!s.trim().isEmpty()) {
SCRELPARAR = Byte.parseByte(s);
} else {
SCRELPARAR = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARCD(String s) {
if (!s.trim().isEmpty()) {
SCRELPARCD = Byte.parseByte(s);
} else {
SCRELPARCD = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARDS(String s) {
if (!s.trim().isEmpty()) {
SCRELPARDS = Byte.parseByte(s);
} else {
SCRELPARDS = Byte.MIN_VALUE;
}
}

protected final void initSCRELPAREI(String s) {
if (!s.trim().isEmpty()) {
SCRELPAREI = Byte.parseByte(s);
} else {
SCRELPAREI = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARIR(String s) {
if (!s.trim().isEmpty()) {
SCRELPARIR = Byte.parseByte(s);
} else {
SCRELPARIR = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARKS(String s) {
if (!s.trim().isEmpty()) {
SCRELPARKS = Byte.parseByte(s);
} else {
SCRELPARKS = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARRG(String s) {
if (!s.trim().isEmpty()) {
SCRELPARRG = Byte.parseByte(s);
} else {
SCRELPARRG = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARWT(String s) {
if (!s.trim().isEmpty()) {
SCRELPARWT = Byte.parseByte(s);
} else {
SCRELPARWT = Byte.MIN_VALUE;
}
}

protected final void initSCRF1(String s) {
if (!s.trim().isEmpty()) {
SCRF1 = Byte.parseByte(s);
} else {
SCRF1 = Byte.MIN_VALUE;
}
}

protected final void initSCRF2(String s) {
if (!s.trim().isEmpty()) {
SCRF2 = Byte.parseByte(s);
} else {
SCRF2 = Byte.MIN_VALUE;
}
}

protected final void initSCRF3(String s) {
if (!s.trim().isEmpty()) {
SCRF3 = Byte.parseByte(s);
} else {
SCRF3 = Byte.MIN_VALUE;
}
}

protected final void initSCRF4(String s) {
if (!s.trim().isEmpty()) {
SCRF4 = Byte.parseByte(s);
} else {
SCRF4 = Byte.MIN_VALUE;
}
}

protected final void initSCRF5(String s) {
if (!s.trim().isEmpty()) {
SCRF5 = Byte.parseByte(s);
} else {
SCRF5 = Byte.MIN_VALUE;
}
}

protected final void initSCRF6(String s) {
if (!s.trim().isEmpty()) {
SCRF6 = Byte.parseByte(s);
} else {
SCRF6 = Byte.MIN_VALUE;
}
}

protected final void initSCRF97(String s) {
if (!s.trim().isEmpty()) {
SCRF97 = Byte.parseByte(s);
} else {
SCRF97 = Byte.MIN_VALUE;
}
}

protected final void initSCRX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCRX_CODE = Byte.parseByte(s);
} else {
SCRX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSCSF1(String s) {
if (!s.trim().isEmpty()) {
SCSF1 = Byte.parseByte(s);
} else {
SCSF1 = Byte.MIN_VALUE;
}
}

protected final void initSCSF2A(String s) {
if (!s.trim().isEmpty()) {
SCSF2A = Byte.parseByte(s);
} else {
SCSF2A = Byte.MIN_VALUE;
}
}

protected final void initSCSF2B(String s) {
if (!s.trim().isEmpty()) {
SCSF2B = Byte.parseByte(s);
} else {
SCSF2B = Byte.MIN_VALUE;
}
}

protected final void initSCSF3A(String s) {
if (!s.trim().isEmpty()) {
SCSF3A = Byte.parseByte(s);
} else {
SCSF3A = Byte.MIN_VALUE;
}
}

protected final void initSCSF3B(String s) {
if (!s.trim().isEmpty()) {
SCSF3B = Byte.parseByte(s);
} else {
SCSF3B = Byte.MIN_VALUE;
}
}

protected final void initSCSF4A(String s) {
if (!s.trim().isEmpty()) {
SCSF4A = Byte.parseByte(s);
} else {
SCSF4A = Byte.MIN_VALUE;
}
}

protected final void initSCSF4B(String s) {
if (!s.trim().isEmpty()) {
SCSF4B = Byte.parseByte(s);
} else {
SCSF4B = Byte.MIN_VALUE;
}
}

protected final void initSCSF5(String s) {
if (!s.trim().isEmpty()) {
SCSF5 = Byte.parseByte(s);
} else {
SCSF5 = Byte.MIN_VALUE;
}
}

protected final void initSCSF6A(String s) {
if (!s.trim().isEmpty()) {
SCSF6A = Byte.parseByte(s);
} else {
SCSF6A = Byte.MIN_VALUE;
}
}

protected final void initSCSF6B(String s) {
if (!s.trim().isEmpty()) {
SCSF6B = Byte.parseByte(s);
} else {
SCSF6B = Byte.MIN_VALUE;
}
}

protected final void initSCSF6C(String s) {
if (!s.trim().isEmpty()) {
SCSF6C = Byte.parseByte(s);
} else {
SCSF6C = Byte.MIN_VALUE;
}
}

protected final void initSCSF7(String s) {
if (!s.trim().isEmpty()) {
SCSF7 = Byte.parseByte(s);
} else {
SCSF7 = Byte.MIN_VALUE;
}
}

protected final void initSCUN1(String s) {
if (!s.trim().isEmpty()) {
SCUN1 = Byte.parseByte(s);
} else {
SCUN1 = Byte.MIN_VALUE;
}
}

protected final void initSCUN2(String s) {
if (!s.trim().isEmpty()) {
SCUN2 = Byte.parseByte(s);
} else {
SCUN2 = Byte.MIN_VALUE;
}
}

protected final void initSCUN3(String s) {
if (!s.trim().isEmpty()) {
SCUN3 = Byte.parseByte(s);
} else {
SCUN3 = Byte.MIN_VALUE;
}
}

protected final void initSCUN97(String s) {
if (!s.trim().isEmpty()) {
SCUN97 = Byte.parseByte(s);
} else {
SCUN97 = Byte.MIN_VALUE;
}
}

protected final void initSCUX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCUX_CODE = Byte.parseByte(s);
} else {
SCUX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBA(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBA = Byte.parseByte(s);
} else {
SCWEMWBA = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBB(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBB = Byte.parseByte(s);
} else {
SCWEMWBB = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBC(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBC = Byte.parseByte(s);
} else {
SCWEMWBC = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBD(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBD = Byte.parseByte(s);
} else {
SCWEMWBD = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBE(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBE = Byte.parseByte(s);
} else {
SCWEMWBE = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBF(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBF = Byte.parseByte(s);
} else {
SCWEMWBF = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBG(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBG = Byte.parseByte(s);
} else {
SCWEMWBG = Byte.MIN_VALUE;
}
}

protected final void initSEEARNGRS_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_DV = Double.parseDouble(s);
} else {
SEEARNGRS_DV = Double.NaN;
}
}

protected final void initSEEARNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_IF = Byte.parseByte(s);
} else {
SEEARNGRS_IF = Byte.MIN_VALUE;
}
}

protected final void initSEEARNNET_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNNET_DV = Double.parseDouble(s);
} else {
SEEARNNET_DV = Double.NaN;
}
}

protected final void initSEEKID(String s) {
if (!s.trim().isEmpty()) {
SEEKID = Byte.parseByte(s);
} else {
SEEKID = Byte.MIN_VALUE;
}
}

protected final void initSEXUOR(String s) {
if (!s.trim().isEmpty()) {
SEXUOR = Byte.parseByte(s);
} else {
SEXUOR = Byte.MIN_VALUE;
}
}

protected final void initSEX_DV(String s) {
if (!s.trim().isEmpty()) {
SEX_DV = Byte.parseByte(s);
} else {
SEX_DV = Byte.MIN_VALUE;
}
}

protected final void initSF1(String s) {
if (!s.trim().isEmpty()) {
SF1 = Byte.parseByte(s);
} else {
SF1 = Byte.MIN_VALUE;
}
}

protected final void initSF12MCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12MCS_DV = Double.parseDouble(s);
} else {
SF12MCS_DV = Double.NaN;
}
}

protected final void initSF12PCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12PCS_DV = Double.parseDouble(s);
} else {
SF12PCS_DV = Double.NaN;
}
}

protected final void initSIBHIT(String s) {
if (!s.trim().isEmpty()) {
SIBHIT = Byte.parseByte(s);
} else {
SIBHIT = Byte.MIN_VALUE;
}
}

protected final void initSIBLING(String s) {
if (!s.trim().isEmpty()) {
SIBLING = Byte.parseByte(s);
} else {
SIBLING = Byte.MIN_VALUE;
}
}

protected final void initSIBSTEAL(String s) {
if (!s.trim().isEmpty()) {
SIBSTEAL = Byte.parseByte(s);
} else {
SIBSTEAL = Byte.MIN_VALUE;
}
}

protected final void initSIBTEASE(String s) {
if (!s.trim().isEmpty()) {
SIBTEASE = Byte.parseByte(s);
} else {
SIBTEASE = Byte.MIN_VALUE;
}
}

protected final void initSIBVERAB(String s) {
if (!s.trim().isEmpty()) {
SIBVERAB = Byte.parseByte(s);
} else {
SIBVERAB = Byte.MIN_VALUE;
}
}

protected final void initSINGLE_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
SINGLE_DV = false;
} else {
SINGLE_DV = true;
}
}
}

protected final void initSLAPKID(String s) {
if (!s.trim().isEmpty()) {
SLAPKID = Byte.parseByte(s);
} else {
SLAPKID = Byte.MIN_VALUE;
}
}

protected final void initSLP_QUAL(String s) {
if (!s.trim().isEmpty()) {
SLP_QUAL = Byte.parseByte(s);
} else {
SLP_QUAL = Byte.MIN_VALUE;
}
}

protected final void initSMARTMOB(String s) {
if (!s.trim().isEmpty()) {
SMARTMOB = Byte.parseByte(s);
} else {
SMARTMOB = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH11(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH11 = Byte.parseByte(s);
} else {
SMKMNTH11 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH12(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH12 = Byte.parseByte(s);
} else {
SMKMNTH12 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH13(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH13 = Byte.parseByte(s);
} else {
SMKMNTH13 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH21(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH21 = Byte.parseByte(s);
} else {
SMKMNTH21 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH22(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH22 = Byte.parseByte(s);
} else {
SMKMNTH22 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH23(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH23 = Byte.parseByte(s);
} else {
SMKMNTH23 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH31(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH31 = Byte.parseByte(s);
} else {
SMKMNTH31 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH32(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH32 = Byte.parseByte(s);
} else {
SMKMNTH32 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH33(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH33 = Byte.parseByte(s);
} else {
SMKMNTH33 = Byte.MIN_VALUE;
}
}

protected final void initSMOKER(String s) {
if (!s.trim().isEmpty()) {
SMOKER = Short.parseShort(s);
} else {
SMOKER = Short.MIN_VALUE;
}
}

protected final void initSOCCONT(String s) {
if (!s.trim().isEmpty()) {
SOCCONT = Byte.parseByte(s);
} else {
SOCCONT = Byte.MIN_VALUE;
}
}

protected final void initSOCIALKID(String s) {
if (!s.trim().isEmpty()) {
SOCIALKID = Byte.parseByte(s);
} else {
SOCIALKID = Byte.MIN_VALUE;
}
}

protected final void initSPPEN(String s) {
if (!s.trim().isEmpty()) {
SPPEN = Byte.parseByte(s);
} else {
SPPEN = Byte.MIN_VALUE;
}
}

protected final void initSPPID(String s) {
if (!s.trim().isEmpty()) {
SPPID = Integer.parseInt(s);
} else {
SPPID = Integer.MIN_VALUE;
}
}

protected final void initSPPNO(String s) {
if (!s.trim().isEmpty()) {
SPPNO = Byte.parseByte(s);
} else {
SPPNO = Byte.MIN_VALUE;
}
}

protected final void initSTATCM1(String s) {
if (!s.trim().isEmpty()) {
STATCM1 = Byte.parseByte(s);
} else {
STATCM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM2(String s) {
if (!s.trim().isEmpty()) {
STATCM2 = Byte.parseByte(s);
} else {
STATCM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM3(String s) {
if (!s.trim().isEmpty()) {
STATCM3 = Byte.parseByte(s);
} else {
STATCM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM4(String s) {
if (!s.trim().isEmpty()) {
STATCM4 = Byte.parseByte(s);
} else {
STATCM4 = Byte.MIN_VALUE;
}
}

protected final void initSTATCY41(String s) {
if (!s.trim().isEmpty()) {
STATCY41 = Short.parseShort(s);
} else {
STATCY41 = Short.MIN_VALUE;
}
}

protected final void initSTATCY42(String s) {
if (!s.trim().isEmpty()) {
STATCY42 = Short.parseShort(s);
} else {
STATCY42 = Short.MIN_VALUE;
}
}

protected final void initSTATCY43(String s) {
if (!s.trim().isEmpty()) {
STATCY43 = Short.parseShort(s);
} else {
STATCY43 = Short.MIN_VALUE;
}
}

protected final void initSTATCY44(String s) {
if (!s.trim().isEmpty()) {
STATCY44 = Short.parseShort(s);
} else {
STATCY44 = Short.MIN_VALUE;
}
}

protected final void initSTATENDD1(String s) {
if (!s.trim().isEmpty()) {
STATENDD1 = Byte.parseByte(s);
} else {
STATENDD1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD2(String s) {
if (!s.trim().isEmpty()) {
STATENDD2 = Byte.parseByte(s);
} else {
STATENDD2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD3(String s) {
if (!s.trim().isEmpty()) {
STATENDD3 = Byte.parseByte(s);
} else {
STATENDD3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD4(String s) {
if (!s.trim().isEmpty()) {
STATENDD4 = Byte.parseByte(s);
} else {
STATENDD4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD5(String s) {
if (!s.trim().isEmpty()) {
STATENDD5 = Byte.parseByte(s);
} else {
STATENDD5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD6(String s) {
if (!s.trim().isEmpty()) {
STATENDD6 = Byte.parseByte(s);
} else {
STATENDD6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM1(String s) {
if (!s.trim().isEmpty()) {
STATENDM1 = Byte.parseByte(s);
} else {
STATENDM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM2(String s) {
if (!s.trim().isEmpty()) {
STATENDM2 = Byte.parseByte(s);
} else {
STATENDM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM3(String s) {
if (!s.trim().isEmpty()) {
STATENDM3 = Byte.parseByte(s);
} else {
STATENDM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM4(String s) {
if (!s.trim().isEmpty()) {
STATENDM4 = Byte.parseByte(s);
} else {
STATENDM4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM5(String s) {
if (!s.trim().isEmpty()) {
STATENDM5 = Byte.parseByte(s);
} else {
STATENDM5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM6(String s) {
if (!s.trim().isEmpty()) {
STATENDM6 = Byte.parseByte(s);
} else {
STATENDM6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDY41(String s) {
if (!s.trim().isEmpty()) {
STATENDY41 = Short.parseShort(s);
} else {
STATENDY41 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY42(String s) {
if (!s.trim().isEmpty()) {
STATENDY42 = Short.parseShort(s);
} else {
STATENDY42 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY43(String s) {
if (!s.trim().isEmpty()) {
STATENDY43 = Short.parseShort(s);
} else {
STATENDY43 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY44(String s) {
if (!s.trim().isEmpty()) {
STATENDY44 = Short.parseShort(s);
} else {
STATENDY44 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY45(String s) {
if (!s.trim().isEmpty()) {
STATENDY45 = Short.parseShort(s);
} else {
STATENDY45 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY46(String s) {
if (!s.trim().isEmpty()) {
STATENDY46 = Short.parseShort(s);
} else {
STATENDY46 = Short.MIN_VALUE;
}
}

protected final void initSTAYKID(String s) {
if (!s.trim().isEmpty()) {
STAYKID = Short.parseShort(s);
} else {
STAYKID = Short.MIN_VALUE;
}
}

protected final void initSTAYKIDW(String s) {
if (!s.trim().isEmpty()) {
STAYKIDW = Byte.parseByte(s);
} else {
STAYKIDW = Byte.MIN_VALUE;
}
}

protected final void initSTEALSIB(String s) {
if (!s.trim().isEmpty()) {
STEALSIB = Byte.parseByte(s);
} else {
STEALSIB = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS1(String s) {
if (!s.trim().isEmpty()) {
STENDREAS1 = Byte.parseByte(s);
} else {
STENDREAS1 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS10(String s) {
if (!s.trim().isEmpty()) {
STENDREAS10 = Byte.parseByte(s);
} else {
STENDREAS10 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS11(String s) {
if (!s.trim().isEmpty()) {
STENDREAS11 = Byte.parseByte(s);
} else {
STENDREAS11 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS2(String s) {
if (!s.trim().isEmpty()) {
STENDREAS2 = Byte.parseByte(s);
} else {
STENDREAS2 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS3(String s) {
if (!s.trim().isEmpty()) {
STENDREAS3 = Byte.parseByte(s);
} else {
STENDREAS3 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS4(String s) {
if (!s.trim().isEmpty()) {
STENDREAS4 = Byte.parseByte(s);
} else {
STENDREAS4 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS5(String s) {
if (!s.trim().isEmpty()) {
STENDREAS5 = Byte.parseByte(s);
} else {
STENDREAS5 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS6(String s) {
if (!s.trim().isEmpty()) {
STENDREAS6 = Byte.parseByte(s);
} else {
STENDREAS6 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS7(String s) {
if (!s.trim().isEmpty()) {
STENDREAS7 = Byte.parseByte(s);
} else {
STENDREAS7 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS8(String s) {
if (!s.trim().isEmpty()) {
STENDREAS8 = Byte.parseByte(s);
} else {
STENDREAS8 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS9(String s) {
if (!s.trim().isEmpty()) {
STENDREAS9 = Byte.parseByte(s);
} else {
STENDREAS9 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS97(String s) {
if (!s.trim().isEmpty()) {
STENDREAS97 = Byte.parseByte(s);
} else {
STENDREAS97 = Byte.MIN_VALUE;
}
}

protected final void initSTEPREL(String s) {
if (!s.trim().isEmpty()) {
STEPREL = Byte.parseByte(s);
} else {
STEPREL = Byte.MIN_VALUE;
}
}

protected final void initSTRATA(String s) {
if (!s.trim().isEmpty()) {
STRATA = Short.parseShort(s);
} else {
STRATA = Short.MIN_VALUE;
}
}

protected final void initSUSP(String s) {
if (!s.trim().isEmpty()) {
SUSP = Byte.parseByte(s);
} else {
SUSP = Byte.MIN_VALUE;
}
}

protected final void initSWEMWBS_DV(String s) {
if (!s.trim().isEmpty()) {
SWEMWBS_DV = Byte.parseByte(s);
} else {
SWEMWBS_DV = Byte.MIN_VALUE;
}
}

protected final void initTALKMATTER(String s) {
if (!s.trim().isEmpty()) {
TALKMATTER = Byte.parseByte(s);
} else {
TALKMATTER = Byte.MIN_VALUE;
}
}

protected final void initTEASESIB(String s) {
if (!s.trim().isEmpty()) {
TEASESIB = Byte.parseByte(s);
} else {
TEASESIB = Byte.MIN_VALUE;
}
}

protected final void initTLKF(String s) {
if (!s.trim().isEmpty()) {
TLKF = Byte.parseByte(s);
} else {
TLKF = Byte.MIN_VALUE;
}
}

protected final void initTLKM(String s) {
if (!s.trim().isEmpty()) {
TLKM = Byte.parseByte(s);
} else {
TLKM = Byte.MIN_VALUE;
}
}

protected final void initTRAINANY(String s) {
if (!s.trim().isEmpty()) {
TRAINANY = Byte.parseByte(s);
} else {
TRAINANY = Byte.MIN_VALUE;
}
}

protected final void initTRAINDAYS1(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS1 = Short.parseShort(s);
} else {
TRAINDAYS1 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS2(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS2 = Short.parseShort(s);
} else {
TRAINDAYS2 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS3(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS3 = Short.parseShort(s);
} else {
TRAINDAYS3 = Short.MIN_VALUE;
}
}

protected final void initTRAINEND1(String s) {
if (!s.trim().isEmpty()) {
TRAINEND1 = Byte.parseByte(s);
} else {
TRAINEND1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND2(String s) {
if (!s.trim().isEmpty()) {
TRAINEND2 = Byte.parseByte(s);
} else {
TRAINEND2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND3(String s) {
if (!s.trim().isEmpty()) {
TRAINEND3 = Byte.parseByte(s);
} else {
TRAINEND3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS1(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS1 = Byte.parseByte(s);
} else {
TRAINHRS1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS2(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS2 = Byte.parseByte(s);
} else {
TRAINHRS2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS3(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS3 = Byte.parseByte(s);
} else {
TRAINHRS3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINN(String s) {
if (!s.trim().isEmpty()) {
TRAINN = Byte.parseByte(s);
} else {
TRAINN = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP11(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP11 = Byte.parseByte(s);
} else {
TRAINPURP11 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP12(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP12 = Byte.parseByte(s);
} else {
TRAINPURP12 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP13(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP13 = Byte.parseByte(s);
} else {
TRAINPURP13 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP21(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP21 = Byte.parseByte(s);
} else {
TRAINPURP21 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP22(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP22 = Byte.parseByte(s);
} else {
TRAINPURP22 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP23(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP23 = Byte.parseByte(s);
} else {
TRAINPURP23 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP31(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP31 = Byte.parseByte(s);
} else {
TRAINPURP31 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP32(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP32 = Byte.parseByte(s);
} else {
TRAINPURP32 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP33(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP33 = Byte.parseByte(s);
} else {
TRAINPURP33 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP41(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP41 = Byte.parseByte(s);
} else {
TRAINPURP41 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP42(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP42 = Byte.parseByte(s);
} else {
TRAINPURP42 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP43(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP43 = Byte.parseByte(s);
} else {
TRAINPURP43 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP51(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP51 = Byte.parseByte(s);
} else {
TRAINPURP51 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP52(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP52 = Byte.parseByte(s);
} else {
TRAINPURP52 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP53(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP53 = Byte.parseByte(s);
} else {
TRAINPURP53 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP61(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP61 = Byte.parseByte(s);
} else {
TRAINPURP61 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP62(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP62 = Byte.parseByte(s);
} else {
TRAINPURP62 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP63(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP63 = Byte.parseByte(s);
} else {
TRAINPURP63 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP71(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP71 = Byte.parseByte(s);
} else {
TRAINPURP71 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP72(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP72 = Byte.parseByte(s);
} else {
TRAINPURP72 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP73(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP73 = Byte.parseByte(s);
} else {
TRAINPURP73 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL1 = Byte.parseByte(s);
} else {
TRAINQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL2 = Byte.parseByte(s);
} else {
TRAINQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL3 = Byte.parseByte(s);
} else {
TRAINQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRQUAL1 = Byte.parseByte(s);
} else {
TRQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL10(String s) {
if (!s.trim().isEmpty()) {
TRQUAL10 = Byte.parseByte(s);
} else {
TRQUAL10 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL11(String s) {
if (!s.trim().isEmpty()) {
TRQUAL11 = Byte.parseByte(s);
} else {
TRQUAL11 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL13(String s) {
if (!s.trim().isEmpty()) {
TRQUAL13 = Byte.parseByte(s);
} else {
TRQUAL13 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL15(String s) {
if (!s.trim().isEmpty()) {
TRQUAL15 = Byte.parseByte(s);
} else {
TRQUAL15 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL16(String s) {
if (!s.trim().isEmpty()) {
TRQUAL16 = Byte.parseByte(s);
} else {
TRQUAL16 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL17(String s) {
if (!s.trim().isEmpty()) {
TRQUAL17 = Byte.parseByte(s);
} else {
TRQUAL17 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL18(String s) {
if (!s.trim().isEmpty()) {
TRQUAL18 = Byte.parseByte(s);
} else {
TRQUAL18 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL19(String s) {
if (!s.trim().isEmpty()) {
TRQUAL19 = Byte.parseByte(s);
} else {
TRQUAL19 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRQUAL2 = Byte.parseByte(s);
} else {
TRQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL20(String s) {
if (!s.trim().isEmpty()) {
TRQUAL20 = Byte.parseByte(s);
} else {
TRQUAL20 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL21(String s) {
if (!s.trim().isEmpty()) {
TRQUAL21 = Byte.parseByte(s);
} else {
TRQUAL21 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL22(String s) {
if (!s.trim().isEmpty()) {
TRQUAL22 = Byte.parseByte(s);
} else {
TRQUAL22 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL23(String s) {
if (!s.trim().isEmpty()) {
TRQUAL23 = Byte.parseByte(s);
} else {
TRQUAL23 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL24(String s) {
if (!s.trim().isEmpty()) {
TRQUAL24 = Byte.parseByte(s);
} else {
TRQUAL24 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL25(String s) {
if (!s.trim().isEmpty()) {
TRQUAL25 = Byte.parseByte(s);
} else {
TRQUAL25 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL26(String s) {
if (!s.trim().isEmpty()) {
TRQUAL26 = Byte.parseByte(s);
} else {
TRQUAL26 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL27(String s) {
if (!s.trim().isEmpty()) {
TRQUAL27 = Byte.parseByte(s);
} else {
TRQUAL27 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL28(String s) {
if (!s.trim().isEmpty()) {
TRQUAL28 = Byte.parseByte(s);
} else {
TRQUAL28 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL29(String s) {
if (!s.trim().isEmpty()) {
TRQUAL29 = Byte.parseByte(s);
} else {
TRQUAL29 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRQUAL3 = Byte.parseByte(s);
} else {
TRQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL30(String s) {
if (!s.trim().isEmpty()) {
TRQUAL30 = Byte.parseByte(s);
} else {
TRQUAL30 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL31(String s) {
if (!s.trim().isEmpty()) {
TRQUAL31 = Byte.parseByte(s);
} else {
TRQUAL31 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL32(String s) {
if (!s.trim().isEmpty()) {
TRQUAL32 = Byte.parseByte(s);
} else {
TRQUAL32 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL33(String s) {
if (!s.trim().isEmpty()) {
TRQUAL33 = Byte.parseByte(s);
} else {
TRQUAL33 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL34(String s) {
if (!s.trim().isEmpty()) {
TRQUAL34 = Byte.parseByte(s);
} else {
TRQUAL34 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL4(String s) {
if (!s.trim().isEmpty()) {
TRQUAL4 = Byte.parseByte(s);
} else {
TRQUAL4 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL5(String s) {
if (!s.trim().isEmpty()) {
TRQUAL5 = Byte.parseByte(s);
} else {
TRQUAL5 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL6(String s) {
if (!s.trim().isEmpty()) {
TRQUAL6 = Byte.parseByte(s);
} else {
TRQUAL6 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL7(String s) {
if (!s.trim().isEmpty()) {
TRQUAL7 = Byte.parseByte(s);
} else {
TRQUAL7 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL8(String s) {
if (!s.trim().isEmpty()) {
TRQUAL8 = Byte.parseByte(s);
} else {
TRQUAL8 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL9(String s) {
if (!s.trim().isEmpty()) {
TRQUAL9 = Byte.parseByte(s);
} else {
TRQUAL9 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO1(String s) {
if (!s.trim().isEmpty()) {
TRWHO1 = Byte.parseByte(s);
} else {
TRWHO1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO2(String s) {
if (!s.trim().isEmpty()) {
TRWHO2 = Byte.parseByte(s);
} else {
TRWHO2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO3(String s) {
if (!s.trim().isEmpty()) {
TRWHO3 = Byte.parseByte(s);
} else {
TRWHO3 = Byte.MIN_VALUE;
}
}

protected final void initTSLP_30M(String s) {
if (!s.trim().isEmpty()) {
TSLP_30M = Byte.parseByte(s);
} else {
TSLP_30M = Byte.MIN_VALUE;
}
}

protected final void initTSLP_CGH(String s) {
if (!s.trim().isEmpty()) {
TSLP_CGH = Byte.parseByte(s);
} else {
TSLP_CGH = Byte.MIN_VALUE;
}
}

protected final void initTSLP_WAK(String s) {
if (!s.trim().isEmpty()) {
TSLP_WAK = Byte.parseByte(s);
} else {
TSLP_WAK = Byte.MIN_VALUE;
}
}

protected final void initTSTA_AWK(String s) {
if (!s.trim().isEmpty()) {
TSTA_AWK = Byte.parseByte(s);
} else {
TSTA_AWK = Byte.MIN_VALUE;
}
}

protected final void initUKAHEAD(String s) {
if (!s.trim().isEmpty()) {
UKAHEAD = Byte.parseByte(s);
} else {
UKAHEAD = Byte.MIN_VALUE;
}
}

protected final void initUKBORN(String s) {
if (!s.trim().isEmpty()) {
UKBORN = Byte.parseByte(s);
} else {
UKBORN = Byte.MIN_VALUE;
}
}

protected final void initUKWELC(String s) {
if (!s.trim().isEmpty()) {
UKWELC = Byte.parseByte(s);
} else {
UKWELC = Byte.MIN_VALUE;
}
}

protected final void initUNDQUS(String s) {
if (!s.trim().isEmpty()) {
UNDQUS = Byte.parseByte(s);
} else {
UNDQUS = Byte.MIN_VALUE;
}
}

protected final void initUNIFIN1(String s) {
if (!s.trim().isEmpty()) {
UNIFIN1 = Byte.parseByte(s);
} else {
UNIFIN1 = Byte.MIN_VALUE;
}
}

protected final void initUNISUB1(String s) {
if (!s.trim().isEmpty()) {
UNISUB1 = Byte.parseByte(s);
} else {
UNISUB1 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE1(String s) {
if (!s.trim().isEmpty()) {
UNSAFE1 = Byte.parseByte(s);
} else {
UNSAFE1 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE10(String s) {
if (!s.trim().isEmpty()) {
UNSAFE10 = Byte.parseByte(s);
} else {
UNSAFE10 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE11(String s) {
if (!s.trim().isEmpty()) {
UNSAFE11 = Byte.parseByte(s);
} else {
UNSAFE11 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE2(String s) {
if (!s.trim().isEmpty()) {
UNSAFE2 = Byte.parseByte(s);
} else {
UNSAFE2 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE3(String s) {
if (!s.trim().isEmpty()) {
UNSAFE3 = Byte.parseByte(s);
} else {
UNSAFE3 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE4(String s) {
if (!s.trim().isEmpty()) {
UNSAFE4 = Byte.parseByte(s);
} else {
UNSAFE4 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE5(String s) {
if (!s.trim().isEmpty()) {
UNSAFE5 = Byte.parseByte(s);
} else {
UNSAFE5 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE6(String s) {
if (!s.trim().isEmpty()) {
UNSAFE6 = Byte.parseByte(s);
} else {
UNSAFE6 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE7(String s) {
if (!s.trim().isEmpty()) {
UNSAFE7 = Byte.parseByte(s);
} else {
UNSAFE7 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE8(String s) {
if (!s.trim().isEmpty()) {
UNSAFE8 = Byte.parseByte(s);
} else {
UNSAFE8 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE9(String s) {
if (!s.trim().isEmpty()) {
UNSAFE9 = Byte.parseByte(s);
} else {
UNSAFE9 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE96(String s) {
if (!s.trim().isEmpty()) {
UNSAFE96 = Byte.parseByte(s);
} else {
UNSAFE96 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE97(String s) {
if (!s.trim().isEmpty()) {
UNSAFE97 = Byte.parseByte(s);
} else {
UNSAFE97 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEO_CODE(String s) {
if (!s.trim().isEmpty()) {
UNSAFEO_CODE = Byte.parseByte(s);
} else {
UNSAFEO_CODE = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE_DV(String s) {
if (!s.trim().isEmpty()) {
UNSAFE_DV = Byte.parseByte(s);
} else {
UNSAFE_DV = Byte.MIN_VALUE;
}
}

protected final void initUPSET(String s) {
if (!s.trim().isEmpty()) {
UPSET = Byte.parseByte(s);
} else {
UPSET = Byte.MIN_VALUE;
}
}

protected final void initURBAN_DV(String s) {
if (!s.trim().isEmpty()) {
URBAN_DV = Byte.parseByte(s);
} else {
URBAN_DV = Byte.MIN_VALUE;
}
}

protected final void initUSBREAD1(String s) {
if (!s.trim().isEmpty()) {
USBREAD1 = Byte.parseByte(s);
} else {
USBREAD1 = Byte.MIN_VALUE;
}
}

protected final void initUSBREAD2(String s) {
if (!s.trim().isEmpty()) {
USBREAD2 = Byte.parseByte(s);
} else {
USBREAD2 = Byte.MIN_VALUE;
}
}

protected final void initUSBREAD3(String s) {
if (!s.trim().isEmpty()) {
USBREAD3 = Byte.parseByte(s);
} else {
USBREAD3 = Byte.MIN_VALUE;
}
}

protected final void initUSBREAD4(String s) {
if (!s.trim().isEmpty()) {
USBREAD4 = Byte.parseByte(s);
} else {
USBREAD4 = Byte.MIN_VALUE;
}
}

protected final void initUSBREAD5(String s) {
if (!s.trim().isEmpty()) {
USBREAD5 = Byte.parseByte(s);
} else {
USBREAD5 = Byte.MIN_VALUE;
}
}

protected final void initUSBREAD6(String s) {
if (!s.trim().isEmpty()) {
USBREAD6 = Byte.parseByte(s);
} else {
USBREAD6 = Byte.MIN_VALUE;
}
}

protected final void initUSBREAD7(String s) {
if (!s.trim().isEmpty()) {
USBREAD7 = Byte.parseByte(s);
} else {
USBREAD7 = Byte.MIN_VALUE;
}
}

protected final void initUSDAIRY1(String s) {
if (!s.trim().isEmpty()) {
USDAIRY1 = Byte.parseByte(s);
} else {
USDAIRY1 = Byte.MIN_VALUE;
}
}

protected final void initUSDAIRY2(String s) {
if (!s.trim().isEmpty()) {
USDAIRY2 = Byte.parseByte(s);
} else {
USDAIRY2 = Byte.MIN_VALUE;
}
}

protected final void initUSDAIRY3(String s) {
if (!s.trim().isEmpty()) {
USDAIRY3 = Byte.parseByte(s);
} else {
USDAIRY3 = Byte.MIN_VALUE;
}
}

protected final void initUSDAIRY4(String s) {
if (!s.trim().isEmpty()) {
USDAIRY4 = Byte.parseByte(s);
} else {
USDAIRY4 = Byte.MIN_VALUE;
}
}

protected final void initUSDAIRY5(String s) {
if (!s.trim().isEmpty()) {
USDAIRY5 = Byte.parseByte(s);
} else {
USDAIRY5 = Byte.MIN_VALUE;
}
}

protected final void initUSDAIRY6(String s) {
if (!s.trim().isEmpty()) {
USDAIRY6 = Byte.parseByte(s);
} else {
USDAIRY6 = Byte.MIN_VALUE;
}
}

protected final void initVDAY(String s) {
if (!s.trim().isEmpty()) {
VDAY = Byte.parseByte(s);
} else {
VDAY = Byte.MIN_VALUE;
}
}

protected final void initVDHRS(String s) {
if (!s.trim().isEmpty()) {
VDHRS = Byte.parseByte(s);
} else {
VDHRS = Byte.MIN_VALUE;
}
}

protected final void initVDMIN(String s) {
if (!s.trim().isEmpty()) {
VDMIN = Byte.parseByte(s);
} else {
VDMIN = Byte.MIN_VALUE;
}
}

protected final void initVEGEAMT(String s) {
if (!s.trim().isEmpty()) {
VEGEAMT = Byte.parseByte(s);
} else {
VEGEAMT = Byte.MIN_VALUE;
}
}

protected final void initVERABSIB(String s) {
if (!s.trim().isEmpty()) {
VERABSIB = Byte.parseByte(s);
} else {
VERABSIB = Byte.MIN_VALUE;
}
}

protected final void initVOLRECPER(String s) {
if (!s.trim().isEmpty()) {
VOLRECPER = Byte.parseByte(s);
} else {
VOLRECPER = Byte.MIN_VALUE;
}
}

protected final void initVOTE1(String s) {
if (!s.trim().isEmpty()) {
VOTE1 = Short.parseShort(s);
} else {
VOTE1 = Short.MIN_VALUE;
}
}

protected final void initVOTE2(String s) {
if (!s.trim().isEmpty()) {
VOTE2 = Short.parseShort(s);
} else {
VOTE2 = Short.MIN_VALUE;
}
}

protected final void initVOTE3(String s) {
if (!s.trim().isEmpty()) {
VOTE3 = Short.parseShort(s);
} else {
VOTE3 = Short.MIN_VALUE;
}
}

protected final void initVOTE4(String s) {
if (!s.trim().isEmpty()) {
VOTE4 = Short.parseShort(s);
} else {
VOTE4 = Short.MIN_VALUE;
}
}

protected final void initVOTE5(String s) {
if (!s.trim().isEmpty()) {
VOTE5 = Short.parseShort(s);
} else {
VOTE5 = Short.MIN_VALUE;
}
}

protected final void initVOTE6(String s) {
if (!s.trim().isEmpty()) {
VOTE6 = Short.parseShort(s);
} else {
VOTE6 = Short.MIN_VALUE;
}
}

protected final void initVOTE7(String s) {
if (!s.trim().isEmpty()) {
VOTE7 = Byte.parseByte(s);
} else {
VOTE7 = Byte.MIN_VALUE;
}
}

protected final void initVOTE8(String s) {
if (!s.trim().isEmpty()) {
VOTE8 = Byte.parseByte(s);
} else {
VOTE8 = Byte.MIN_VALUE;
}
}

protected final void initVOUCHLETTER(String s) {
if (!s.trim().isEmpty()) {
VOUCHLETTER = Byte.parseByte(s);
} else {
VOUCHLETTER = Byte.MIN_VALUE;
}
}

protected final void initVWHRS(String s) {
if (!s.trim().isEmpty()) {
VWHRS = Byte.parseByte(s);
} else {
VWHRS = Byte.MIN_VALUE;
}
}

protected final void initVWMIN(String s) {
if (!s.trim().isEmpty()) {
VWMIN = Byte.parseByte(s);
} else {
VWMIN = Byte.MIN_VALUE;
}
}

protected final void initWDAY(String s) {
if (!s.trim().isEmpty()) {
WDAY = Byte.parseByte(s);
} else {
WDAY = Byte.MIN_VALUE;
}
}

protected final void initWDHRS(String s) {
if (!s.trim().isEmpty()) {
WDHRS = Byte.parseByte(s);
} else {
WDHRS = Byte.MIN_VALUE;
}
}

protected final void initWDMIN(String s) {
if (!s.trim().isEmpty()) {
WDMIN = Byte.parseByte(s);
} else {
WDMIN = Byte.MIN_VALUE;
}
}

protected final void initWEKID(String s) {
if (!s.trim().isEmpty()) {
WEKID = Byte.parseByte(s);
} else {
WEKID = Byte.MIN_VALUE;
}
}

protected final void initWHODEAL(String s) {
if (!s.trim().isEmpty()) {
WHODEAL = Byte.parseByte(s);
} else {
WHODEAL = Byte.MIN_VALUE;
}
}

protected final void initWKFRUIT(String s) {
if (!s.trim().isEmpty()) {
WKFRUIT = Byte.parseByte(s);
} else {
WKFRUIT = Byte.MIN_VALUE;
}
}

protected final void initWKPLSAM(String s) {
if (!s.trim().isEmpty()) {
WKPLSAM = Byte.parseByte(s);
} else {
WKPLSAM = Byte.MIN_VALUE;
}
}

protected final void initWKVEGE(String s) {
if (!s.trim().isEmpty()) {
WKVEGE = Byte.parseByte(s);
} else {
WKVEGE = Byte.MIN_VALUE;
}
}

protected final void initWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
WORKTRAV = Byte.parseByte(s);
} else {
WORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initWWHRS(String s) {
if (!s.trim().isEmpty()) {
WWHRS = Byte.parseByte(s);
} else {
WWHRS = Byte.MIN_VALUE;
}
}

protected final void initWWMIN(String s) {
if (!s.trim().isEmpty()) {
WWMIN = Byte.parseByte(s);
} else {
WWMIN = Byte.MIN_VALUE;
}
}

protected final void initXPBORROW(String s) {
if (!s.trim().isEmpty()) {
XPBORROW = Integer.parseInt(s);
} else {
XPBORROW = Integer.MIN_VALUE;
}
}

protected final void initXPEARN1(String s) {
if (!s.trim().isEmpty()) {
XPEARN1 = Integer.parseInt(s);
} else {
XPEARN1 = Integer.MIN_VALUE;
}
}

protected final void initXPEARN1DK(String s) {
if (!s.trim().isEmpty()) {
XPEARN1DK = Byte.parseByte(s);
} else {
XPEARN1DK = Byte.MIN_VALUE;
}
}

protected final void initXPEARN3(String s) {
if (!s.trim().isEmpty()) {
XPEARN3 = Integer.parseInt(s);
} else {
XPEARN3 = Integer.MIN_VALUE;
}
}

protected final void initXPEARN3DK(String s) {
if (!s.trim().isEmpty()) {
XPEARN3DK = Byte.parseByte(s);
} else {
XPEARN3DK = Byte.MIN_VALUE;
}
}

protected final void initXPEARNG1(String s) {
if (!s.trim().isEmpty()) {
XPEARNG1 = Integer.parseInt(s);
} else {
XPEARNG1 = Integer.MIN_VALUE;
}
}

protected final void initXPEARNG1DK(String s) {
if (!s.trim().isEmpty()) {
XPEARNG1DK = Byte.parseByte(s);
} else {
XPEARNG1DK = Byte.MIN_VALUE;
}
}

protected final void initXPEARNG3(String s) {
if (!s.trim().isEmpty()) {
XPEARNG3 = Integer.parseInt(s);
} else {
XPEARNG3 = Integer.MIN_VALUE;
}
}

protected final void initXPEARNG3DK(String s) {
if (!s.trim().isEmpty()) {
XPEARNG3DK = Byte.parseByte(s);
} else {
XPEARNG3DK = Byte.MIN_VALUE;
}
}

protected final void initXPMOVE(String s) {
if (!s.trim().isEmpty()) {
XPMOVE = Byte.parseByte(s);
} else {
XPMOVE = Byte.MIN_VALUE;
}
}

protected final void initXPMVMNTH(String s) {
if (!s.trim().isEmpty()) {
XPMVMNTH = Byte.parseByte(s);
} else {
XPMVMNTH = Byte.MIN_VALUE;
}
}

protected final void initXPMVWHN(String s) {
if (!s.trim().isEmpty()) {
XPMVWHN = Byte.parseByte(s);
} else {
XPMVWHN = Byte.MIN_VALUE;
}
}

protected final void initXPMVWHR(String s) {
if (!s.trim().isEmpty()) {
XPMVWHR = Byte.parseByte(s);
} else {
XPMVWHR = Byte.MIN_VALUE;
}
}

protected final void initXPMVYR(String s) {
if (!s.trim().isEmpty()) {
XPMVYR = Short.parseShort(s);
} else {
XPMVYR = Short.MIN_VALUE;
}
}

protected final void initXPTUITION(String s) {
if (!s.trim().isEmpty()) {
XPTUITION = Integer.parseInt(s);
} else {
XPTUITION = Integer.MIN_VALUE;
}
}

protected final void initXTRA5MINOSM_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MINOSM_DV = Byte.parseByte(s);
} else {
XTRA5MINOSM_DV = Byte.MIN_VALUE;
}
}

protected final void initXTRA5MIN_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MIN_DV = Byte.parseByte(s);
} else {
XTRA5MIN_DV = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV1(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV1 = Byte.parseByte(s);
} else {
YAJBSRV1 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV2(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV2 = Byte.parseByte(s);
} else {
YAJBSRV2 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV3(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV3 = Byte.parseByte(s);
} else {
YAJBSRV3 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV4(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV4 = Byte.parseByte(s);
} else {
YAJBSRV4 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV5(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV5 = Byte.parseByte(s);
} else {
YAJBSRV5 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV7(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV7 = Byte.parseByte(s);
} else {
YAJBSRV7 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV8(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV8 = Byte.parseByte(s);
} else {
YAJBSRV8 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV96(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV96 = Byte.parseByte(s);
} else {
YAJBSRV96 = Byte.MIN_VALUE;
}
}

protected final void initYANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
YANSSEC5_DV = Byte.parseByte(s);
} else {
YANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initYASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC00_CC = Short.parseShort(s);
} else {
YASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC10_CC = Short.parseShort(s);
} else {
YASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC90_CC = Byte.parseByte(s);
} else {
YASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initYELLKID(String s) {
if (!s.trim().isEmpty()) {
YELLKID = Byte.parseByte(s);
} else {
YELLKID = Byte.MIN_VALUE;
}
}

protected final void initYPNETCHT(String s) {
if (!s.trim().isEmpty()) {
YPNETCHT = Byte.parseByte(s);
} else {
YPNETCHT = Byte.MIN_VALUE;
}
}

protected final void initYPNPAL(String s) {
if (!s.trim().isEmpty()) {
YPNPAL = Byte.parseByte(s);
} else {
YPNPAL = Byte.MIN_VALUE;
}
}

protected final void initYPSOCWEB(String s) {
if (!s.trim().isEmpty()) {
YPSOCWEB = Byte.parseByte(s);
} else {
YPSOCWEB = Byte.MIN_VALUE;
}
}

public byte getADCTS() {
return ADCTS;
}

public byte getADDPAYA() {
return ADDPAYA;
}

public byte getADDPAYB() {
return ADDPAYB;
}

public byte getADLA() {
return ADLA;
}

public byte getADLAD() {
return ADLAD;
}

public byte getADLB() {
return ADLB;
}

public byte getADLBD() {
return ADLBD;
}

public byte getADLC() {
return ADLC;
}

public byte getADLCD() {
return ADLCD;
}

public byte getADLD() {
return ADLD;
}

public byte getADLDD() {
return ADLDD;
}

public byte getADLE() {
return ADLE;
}

public byte getADLED() {
return ADLED;
}

public byte getADLF() {
return ADLF;
}

public byte getADLFD() {
return ADLFD;
}

public byte getADLG() {
return ADLG;
}

public byte getADLGD() {
return ADLGD;
}

public byte getADLH() {
return ADLH;
}

public byte getADLHD() {
return ADLHD;
}

public byte getADLI() {
return ADLI;
}

public byte getADLID() {
return ADLID;
}

public byte getADLJ() {
return ADLJ;
}

public byte getADLJD() {
return ADLJD;
}

public byte getADLK() {
return ADLK;
}

public byte getADLKD() {
return ADLKD;
}

public byte getADLL() {
return ADLL;
}

public byte getADLLD() {
return ADLLD;
}

public byte getADLM() {
return ADLM;
}

public byte getADLMD() {
return ADLMD;
}

public byte getADLN() {
return ADLN;
}

public byte getADLND() {
return ADLND;
}

public byte getAEDROF1() {
return AEDROF1;
}

public byte getAEDROF2() {
return AEDROF2;
}

public byte getAEDROF3() {
return AEDROF3;
}

protected double AEPUDA1() {
return AEPUDA1;
}

public byte getAEPUDA2() {
return AEPUDA2;
}

public byte getAEPUDA3() {
return AEPUDA3;
}

public byte getAEPUWK1() {
return AEPUWK1;
}

public byte getAEPUWK2() {
return AEPUWK2;
}

public byte getAEPUWK3() {
return AEPUWK3;
}

public byte getAGE2UK() {
return AGE2UK;
}

public byte getAGE2UKC() {
return AGE2UKC;
}

public byte getAGEGR10_DV() {
return AGEGR10_DV;
}

public byte getAGEGR13_DV() {
return AGEGR13_DV;
}

public byte getAGEGR5_DV() {
return AGEGR5_DV;
}

public byte getAGERET() {
return AGERET;
}

public short getAGE_DV() {
return AGE_DV;
}

public byte getAHVWELL() {
return AHVWELL;
}

public byte getAIDEFT() {
return AIDEFT;
}

public short getAIDHU1() {
return AIDHU1;
}

public short getAIDHU2() {
return AIDHU2;
}

public byte getAIDHUA1() {
return AIDHUA1;
}

public byte getAIDHUA10() {
return AIDHUA10;
}

public byte getAIDHUA11() {
return AIDHUA11;
}

public byte getAIDHUA12() {
return AIDHUA12;
}

public byte getAIDHUA13() {
return AIDHUA13;
}

public byte getAIDHUA14() {
return AIDHUA14;
}

public byte getAIDHUA15() {
return AIDHUA15;
}

public byte getAIDHUA16() {
return AIDHUA16;
}

public byte getAIDHUA2() {
return AIDHUA2;
}

public byte getAIDHUA3() {
return AIDHUA3;
}

public byte getAIDHUA4() {
return AIDHUA4;
}

public byte getAIDHUA5() {
return AIDHUA5;
}

public byte getAIDHUA6() {
return AIDHUA6;
}

public byte getAIDHUA7() {
return AIDHUA7;
}

public byte getAIDHUA8() {
return AIDHUA8;
}

public byte getAIDHUA9() {
return AIDHUA9;
}

public byte getALLCOSTA() {
return ALLCOSTA;
}

public byte getALLCOSTB() {
return ALLCOSTB;
}

public byte getANYPAYA() {
return ANYPAYA;
}

public byte getANYPAYB() {
return ANYPAYB;
}

public byte getAPVOCIMP() {
return APVOCIMP;
}

public byte getAREA() {
return AREA;
}

public byte getARGF() {
return ARGF;
}

public byte getARGM() {
return ARGM;
}

public byte getATTACKED1() {
return ATTACKED1;
}

public byte getATTACKED10() {
return ATTACKED10;
}

public byte getATTACKED11() {
return ATTACKED11;
}

public byte getATTACKED2() {
return ATTACKED2;
}

public byte getATTACKED3() {
return ATTACKED3;
}

public byte getATTACKED4() {
return ATTACKED4;
}

public byte getATTACKED5() {
return ATTACKED5;
}

public byte getATTACKED6() {
return ATTACKED6;
}

public byte getATTACKED7() {
return ATTACKED7;
}

public byte getATTACKED8() {
return ATTACKED8;
}

public byte getATTACKED9() {
return ATTACKED9;
}

public byte getATTACKED96() {
return ATTACKED96;
}

public byte getATTACKED97() {
return ATTACKED97;
}

public byte getATTACKEDO_CODE() {
return ATTACKEDO_CODE;
}

public byte getATTACKED_DV() {
return ATTACKED_DV;
}

public byte getAUDITC1() {
return AUDITC1;
}

public byte getAUDITC2() {
return AUDITC2;
}

public byte getAUDITC3() {
return AUDITC3;
}

public byte getAUDITC4() {
return AUDITC4;
}

public byte getAUDITC5() {
return AUDITC5;
}

public byte getAVOIDANCE1() {
return AVOIDANCE1;
}

public byte getAVOIDANCE10() {
return AVOIDANCE10;
}

public byte getAVOIDANCE11() {
return AVOIDANCE11;
}

public byte getAVOIDANCE2() {
return AVOIDANCE2;
}

public byte getAVOIDANCE3() {
return AVOIDANCE3;
}

public byte getAVOIDANCE4() {
return AVOIDANCE4;
}

public byte getAVOIDANCE5() {
return AVOIDANCE5;
}

public byte getAVOIDANCE6() {
return AVOIDANCE6;
}

public byte getAVOIDANCE7() {
return AVOIDANCE7;
}

public byte getAVOIDANCE8() {
return AVOIDANCE8;
}

public byte getAVOIDANCE9() {
return AVOIDANCE9;
}

public byte getAVOIDANCE96() {
return AVOIDANCE96;
}

public byte getAVOIDANCE97() {
return AVOIDANCE97;
}

public byte getAVOIDANCEO_CODE() {
return AVOIDANCEO_CODE;
}

public byte getAVOIDED_DV() {
return AVOIDED_DV;
}

public byte getBASNSET() {
return BASNSET;
}

protected double BASRATE() {
return BASRATE;
}

public byte getBASREST() {
return BASREST;
}

public byte getBENBASE1() {
return BENBASE1;
}

public byte getBENBASE2() {
return BENBASE2;
}

public byte getBENBASE3() {
return BENBASE3;
}

public byte getBENBASE4() {
return BENBASE4;
}

public byte getBENBASE96() {
return BENBASE96;
}

public byte getBENCTC() {
return BENCTC;
}

public byte getBENDIS1() {
return BENDIS1;
}

public byte getBENDIS10() {
return BENDIS10;
}

public byte getBENDIS12() {
return BENDIS12;
}

public byte getBENDIS2() {
return BENDIS2;
}

public byte getBENDIS3() {
return BENDIS3;
}

public byte getBENDIS4() {
return BENDIS4;
}

public byte getBENDIS5() {
return BENDIS5;
}

public byte getBENDIS7() {
return BENDIS7;
}

public byte getBENDIS8() {
return BENDIS8;
}

public byte getBENDIS96() {
return BENDIS96;
}

public byte getBENDIS97() {
return BENDIS97;
}

public byte getBENESA() {
return BENESA;
}

public byte getBENLINK() {
return BENLINK;
}

public byte getBENPEN1() {
return BENPEN1;
}

public byte getBENPEN2() {
return BENPEN2;
}

public byte getBENPEN3() {
return BENPEN3;
}

public byte getBENPEN4() {
return BENPEN4;
}

public byte getBENPEN5() {
return BENPEN5;
}

public byte getBENPEN6() {
return BENPEN6;
}

public byte getBENPEN7() {
return BENPEN7;
}

public byte getBENPEN8() {
return BENPEN8;
}

public byte getBENPEN96() {
return BENPEN96;
}

public byte getBENSTA2() {
return BENSTA2;
}

public byte getBENSTA3() {
return BENSTA3;
}

public byte getBENSTA4() {
return BENSTA4;
}

public byte getBENSTA5() {
return BENSTA5;
}

public byte getBENSTA6() {
return BENSTA6;
}

public byte getBENSTA7() {
return BENSTA7;
}

public byte getBENSTA96() {
return BENSTA96;
}

public byte getBENSTA97() {
return BENSTA97;
}

public short getBIRTHY() {
return BIRTHY;
}

public byte getBREAKFST() {
return BREAKFST;
}

public byte getBUNO_DV() {
return BUNO_DV;
}

public byte getCAIDU1() {
return CAIDU1;
}

public byte getCAIDU2() {
return CAIDU2;
}

public byte getCAIDU3() {
return CAIDU3;
}

public byte getCAIDU4() {
return CAIDU4;
}

public byte getCAIDU5() {
return CAIDU5;
}

public byte getCAIDU6() {
return CAIDU6;
}

public byte getCAIDU7() {
return CAIDU7;
}

public byte getCAIDU8() {
return CAIDU8;
}

public byte getCAIDU96() {
return CAIDU96;
}

public byte getCAIDU97() {
return CAIDU97;
}

public byte getCASCH() {
return CASCH;
}

public int getCASIINTNO() {
return CASIINTNO;
}

public byte getCCARE() {
return CCARE;
}

public byte getCCWORK() {
return CCWORK;
}

public short getCH1BY4() {
return CH1BY4;
}

public byte getCHAID1() {
return CHAID1;
}

public byte getCHAID2() {
return CHAID2;
}

public byte getCHAID3() {
return CHAID3;
}

public byte getCHAID4() {
return CHAID4;
}

public byte getCHAID5() {
return CHAID5;
}

public byte getCHAID6() {
return CHAID6;
}

public byte getCHAID7() {
return CHAID7;
}

public byte getCHAID8() {
return CHAID8;
}

public byte getCHAID96() {
return CHAID96;
}

public byte getCHAID97() {
return CHAID97;
}

public byte getCHCON() {
return CHCON;
}

public byte getCHFAR() {
return CHFAR;
}

public byte getCHILDPNO() {
return CHILDPNO;
}

public byte getCHKRESP1() {
return CHKRESP1;
}

public byte getCHKRESP2() {
return CHKRESP2;
}

public byte getCHKRESP3() {
return CHKRESP3;
}

public byte getCHKRESP4() {
return CHKRESP4;
}

public boolean getCHKRESPWEB() {
return CHKRESPWEB;
}

public byte getCHKRESPWEB1() {
return CHKRESPWEB1;
}

public byte getCHKRESPWEB2() {
return CHKRESPWEB2;
}

public byte getCHKRESPWEB3() {
return CHKRESPWEB3;
}

public byte getCHKRESPWEB4() {
return CHKRESPWEB4;
}

public byte getCHKWEBDOBD() {
return CHKWEBDOBD;
}

public byte getCHKWEBDOBM() {
return CHKWEBDOBM;
}

public short getCHKWEBDOBY() {
return CHKWEBDOBY;
}

public byte getCHKWEBSEX() {
return CHKWEBSEX;
}

public byte getCHSEE() {
return CHSEE;
}

public byte getCITZN1() {
return CITZN1;
}

public byte getCITZN2() {
return CITZN2;
}

public byte getCITZN3() {
return CITZN3;
}

public byte getCJBATT() {
return CJBATT;
}

public byte getCJOB() {
return CJOB;
}

public byte getCMCOKIDNO1() {
return CMCOKIDNO1;
}

public byte getCMCOKIDNO10() {
return CMCOKIDNO10;
}

public byte getCMCOKIDNO11() {
return CMCOKIDNO11;
}

public byte getCMCOKIDNO12() {
return CMCOKIDNO12;
}

public byte getCMCOKIDNO13() {
return CMCOKIDNO13;
}

public byte getCMCOKIDNO14() {
return CMCOKIDNO14;
}

public byte getCMCOKIDNO15() {
return CMCOKIDNO15;
}

public byte getCMCOKIDNO16() {
return CMCOKIDNO16;
}

public byte getCMCOKIDNO2() {
return CMCOKIDNO2;
}

public byte getCMCOKIDNO3() {
return CMCOKIDNO3;
}

public byte getCMCOKIDNO4() {
return CMCOKIDNO4;
}

public byte getCMCOKIDNO5() {
return CMCOKIDNO5;
}

public byte getCMCOKIDNO6() {
return CMCOKIDNO6;
}

public byte getCMCOKIDNO7() {
return CMCOKIDNO7;
}

public byte getCMCOKIDNO8() {
return CMCOKIDNO8;
}

public byte getCMCOKIDNO9() {
return CMCOKIDNO9;
}

public byte getCMCORD() {
return CMCORD;
}

public byte getCMCORDALL() {
return CMCORDALL;
}

protected double CMCORDAM() {
return CMCORDAM;
}

public byte getCMCORDPER() {
return CMCORDPER;
}

public short getCMCORDRCAM() {
return CMCORDRCAM;
}

public byte getCMCORDRCPR() {
return CMCORDRCPR;
}

public byte getCMCORDREC() {
return CMCORDREC;
}

public byte getCMCORDTM() {
return CMCORDTM;
}

public byte getCMCSAACT() {
return CMCSAACT;
}

public byte getCMCSAALL() {
return CMCSAALL;
}

public short getCMCSAAM() {
return CMCSAAM;
}

public byte getCMCSANIL1() {
return CMCSANIL1;
}

public byte getCMCSANIL2() {
return CMCSANIL2;
}

public byte getCMCSANIL3() {
return CMCSANIL3;
}

public byte getCMCSANIL4() {
return CMCSANIL4;
}

public byte getCMCSANIL5() {
return CMCSANIL5;
}

public byte getCMCSANIL6() {
return CMCSANIL6;
}

public byte getCMCSANIL7() {
return CMCSANIL7;
}

public byte getCMCSANIL8() {
return CMCSANIL8;
}

public byte getCMCSANIL9() {
return CMCSANIL9;
}

public byte getCMCSANIL97() {
return CMCSANIL97;
}

public byte getCMCSAPER() {
return CMCSAPER;
}

public byte getCMCSAPR() {
return CMCSAPR;
}

public byte getCMFBAOP() {
return CMFBAOP;
}

public byte getCMFLAG01() {
return CMFLAG01;
}

public byte getCMFLAG02() {
return CMFLAG02;
}

public byte getCMFLAG03() {
return CMFLAG03;
}

public byte getCMFLAG04() {
return CMFLAG04;
}

public byte getCMFLAG05() {
return CMFLAG05;
}

public byte getCMFLAG06() {
return CMFLAG06;
}

public byte getCMFLAG07() {
return CMFLAG07;
}

public boolean getCMFLAG08() {
return CMFLAG08;
}

public boolean getCMFLAG09() {
return CMFLAG09;
}

public byte getCMFLAG10() {
return CMFLAG10;
}

public boolean getCMFLAG11() {
return CMFLAG11;
}

public boolean getCMFLAG12() {
return CMFLAG12;
}

public boolean getCMFLAG13() {
return CMFLAG13;
}

public boolean getCMFLAG14() {
return CMFLAG14;
}

public boolean getCMFLAG15() {
return CMFLAG15;
}

public boolean getCMFLAG16() {
return CMFLAG16;
}

public byte getCMKNDEVR1() {
return CMKNDEVR1;
}

public byte getCMKNDEVR2() {
return CMKNDEVR2;
}

public byte getCMKNDEVR3() {
return CMKNDEVR3;
}

public byte getCMKNDEVR4() {
return CMKNDEVR4;
}

public byte getCMKNDEVR96() {
return CMKNDEVR96;
}

public byte getCMKNDEVR97() {
return CMKNDEVR97;
}

public byte getCMLSTAT1() {
return CMLSTAT1;
}

public byte getCMLSTAT2() {
return CMLSTAT2;
}

public byte getCMLSTAT3() {
return CMLSTAT3;
}

public byte getCMLSTAT4() {
return CMLSTAT4;
}

public byte getCMNIL1() {
return CMNIL1;
}

public byte getCMNIL10() {
return CMNIL10;
}

public byte getCMNIL11() {
return CMNIL11;
}

public byte getCMNIL12() {
return CMNIL12;
}

public byte getCMNIL4() {
return CMNIL4;
}

public byte getCMNIL5() {
return CMNIL5;
}

public byte getCMNIL6() {
return CMNIL6;
}

public byte getCMNIL7() {
return CMNIL7;
}

public byte getCMNIL8() {
return CMNIL8;
}

public byte getCMNIL9() {
return CMNIL9;
}

public byte getCMNIL97() {
return CMNIL97;
}

public byte getCMOTHPAY1() {
return CMOTHPAY1;
}

public byte getCMOTHPAY10() {
return CMOTHPAY10;
}

public byte getCMOTHPAY11() {
return CMOTHPAY11;
}

public byte getCMOTHPAY2() {
return CMOTHPAY2;
}

public byte getCMOTHPAY3() {
return CMOTHPAY3;
}

public byte getCMOTHPAY4() {
return CMOTHPAY4;
}

public byte getCMOTHPAY5() {
return CMOTHPAY5;
}

public byte getCMOTHPAY6() {
return CMOTHPAY6;
}

public byte getCMOTHPAY7() {
return CMOTHPAY7;
}

public byte getCMOTHPAY8() {
return CMOTHPAY8;
}

public byte getCMOTHPAY9() {
return CMOTHPAY9;
}

public byte getCMOTHPAY96() {
return CMOTHPAY96;
}

public byte getCMOTHPAY97() {
return CMOTHPAY97;
}

public byte getCMROUTE01() {
return CMROUTE01;
}

public byte getCMROUTE02() {
return CMROUTE02;
}

public byte getCMROUTE03() {
return CMROUTE03;
}

public byte getCMROUTE04() {
return CMROUTE04;
}

public byte getCMROUTE05() {
return CMROUTE05;
}

public byte getCMROUTE06() {
return CMROUTE06;
}

public byte getCMROUTE07() {
return CMROUTE07;
}

public byte getCMROUTE08() {
return CMROUTE08;
}

public byte getCMROUTE09() {
return CMROUTE09;
}

public byte getCMROUTE10() {
return CMROUTE10;
}

public byte getCMROUTE11() {
return CMROUTE11;
}

public byte getCMROUTE12() {
return CMROUTE12;
}

public boolean getCMROUTE13() {
return CMROUTE13;
}

public boolean getCMROUTE14() {
return CMROUTE14;
}

public boolean getCMROUTE15() {
return CMROUTE15;
}

public boolean getCMROUTE16() {
return CMROUTE16;
}

public byte getCMSAMEA() {
return CMSAMEA;
}

public byte getCMSAMEB() {
return CMSAMEB;
}

public byte getCMSAMEC() {
return CMSAMEC;
}

public byte getCMVOL() {
return CMVOL;
}

public byte getCMVOLALL() {
return CMVOLALL;
}

protected double CMVOLAM() {
return CMVOLAM;
}

public byte getCMVOLFIN() {
return CMVOLFIN;
}

public byte getCMVOLKIDNO1() {
return CMVOLKIDNO1;
}

public byte getCMVOLKIDNO10() {
return CMVOLKIDNO10;
}

public byte getCMVOLKIDNO11() {
return CMVOLKIDNO11;
}

public byte getCMVOLKIDNO12() {
return CMVOLKIDNO12;
}

public byte getCMVOLKIDNO13() {
return CMVOLKIDNO13;
}

public byte getCMVOLKIDNO14() {
return CMVOLKIDNO14;
}

public byte getCMVOLKIDNO15() {
return CMVOLKIDNO15;
}

public byte getCMVOLKIDNO16() {
return CMVOLKIDNO16;
}

public byte getCMVOLKIDNO2() {
return CMVOLKIDNO2;
}

public byte getCMVOLKIDNO3() {
return CMVOLKIDNO3;
}

public byte getCMVOLKIDNO4() {
return CMVOLKIDNO4;
}

public byte getCMVOLKIDNO5() {
return CMVOLKIDNO5;
}

public byte getCMVOLKIDNO6() {
return CMVOLKIDNO6;
}

public byte getCMVOLKIDNO7() {
return CMVOLKIDNO7;
}

public byte getCMVOLKIDNO8() {
return CMVOLKIDNO8;
}

public byte getCMVOLKIDNO9() {
return CMVOLKIDNO9;
}

public byte getCMVOLPER() {
return CMVOLPER;
}

public short getCMVOLRCAM() {
return CMVOLRCAM;
}

public byte getCMVOLRCPR() {
return CMVOLRCPR;
}

public byte getCMVOLREC() {
return CMVOLREC;
}

public byte getCMVOLTM() {
return CMVOLTM;
}

public byte getCOH1BM() {
return COH1BM;
}

public short getCOH1BY() {
return COH1BY;
}

public byte getCOH1EM() {
return COH1EM;
}

public short getCOH1EY() {
return COH1EY;
}

public byte getCOH1MR() {
return COH1MR;
}

public byte getCOHAB() {
return COHAB;
}

public byte getCOHABN() {
return COHABN;
}

public boolean getCOHAB_DV() {
return COHAB_DV;
}

public byte getCOMWACT31() {
return COMWACT31;
}

public byte getCOMWACT32() {
return COMWACT32;
}

public byte getCOMWACT33() {
return COMWACT33;
}

public byte getCOMWACT34() {
return COMWACT34;
}

public byte getCOMWACT35() {
return COMWACT35;
}

public byte getCOMWACT36() {
return COMWACT36;
}

public byte getCOMWACT37() {
return COMWACT37;
}

public byte getCOMWACT38() {
return COMWACT38;
}

public byte getCOMWACT396() {
return COMWACT396;
}

public byte getCOMWACT398() {
return COMWACT398;
}

public byte getCOMWPAS31() {
return COMWPAS31;
}

public byte getCOMWPAS32() {
return COMWPAS32;
}

public byte getCOMWPAS33() {
return COMWPAS33;
}

public byte getCOMWPAS34() {
return COMWPAS34;
}

public byte getCOMWPAS35() {
return COMWPAS35;
}

public byte getCOMWPAS396() {
return COMWPAS396;
}

public byte getCOMWPAS398() {
return COMWPAS398;
}

public byte getCONTFT() {
return CONTFT;
}

public byte getCOOPNXTYR() {
return COOPNXTYR;
}

public byte getCORDRECPER() {
return CORDRECPER;
}

public byte getCOUNTRY() {
return COUNTRY;
}

public byte getCSACALC() {
return CSACALC;
}

protected double CSACALCAM() {
return CSACALCAM;
}

public byte getCSAKIDNO1() {
return CSAKIDNO1;
}

public byte getCSAKIDNO10() {
return CSAKIDNO10;
}

public byte getCSAKIDNO11() {
return CSAKIDNO11;
}

public byte getCSAKIDNO12() {
return CSAKIDNO12;
}

public byte getCSAKIDNO13() {
return CSAKIDNO13;
}

public byte getCSAKIDNO14() {
return CSAKIDNO14;
}

public byte getCSAKIDNO15() {
return CSAKIDNO15;
}

public byte getCSAKIDNO16() {
return CSAKIDNO16;
}

public byte getCSAKIDNO2() {
return CSAKIDNO2;
}

public byte getCSAKIDNO3() {
return CSAKIDNO3;
}

public byte getCSAKIDNO4() {
return CSAKIDNO4;
}

public byte getCSAKIDNO5() {
return CSAKIDNO5;
}

public byte getCSAKIDNO6() {
return CSAKIDNO6;
}

public byte getCSAKIDNO7() {
return CSAKIDNO7;
}

public byte getCSAKIDNO8() {
return CSAKIDNO8;
}

public byte getCSAKIDNO9() {
return CSAKIDNO9;
}

public byte getCSAPAYTO() {
return CSAPAYTO;
}

public byte getCSARECPER() {
return CSARECPER;
}

public byte getCSTAT() {
return CSTAT;
}

public byte getCTADD1_CODE() {
return CTADD1_CODE;
}

public byte getCTADD2_CODE() {
return CTADD2_CODE;
}

public byte getCTCNTY_CODE() {
return CTCNTY_CODE;
}

public byte getCTCONSCONF1() {
return CTCONSCONF1;
}

public byte getCTCONSCONF2() {
return CTCONSCONF2;
}

public byte getCTCONSCONF3() {
return CTCONSCONF3;
}

public byte getCTCONSCONF4() {
return CTCONSCONF4;
}

public byte getCTCONSCONF5() {
return CTCONSCONF5;
}

public byte getCTCONSCONF6() {
return CTCONSCONF6;
}

public byte getCTCONSCONF7() {
return CTCONSCONF7;
}

public byte getCTCONSCONF8() {
return CTCONSCONF8;
}

public byte getCTCONSCONF94() {
return CTCONSCONF94;
}

public byte getCTCONSCONF95() {
return CTCONSCONF95;
}

public byte getCTEMAIL_CODE() {
return CTEMAIL_CODE;
}

public byte getCTPCODE_CODE() {
return CTPCODE_CODE;
}

public byte getCTREL() {
return CTREL;
}

public byte getCTTEL1_CODE() {
return CTTEL1_CODE;
}

public byte getCTTEL2_CODE() {
return CTTEL2_CODE;
}

public byte getCTTOWN_CODE() {
return CTTOWN_CODE;
}

public byte getCUDDLEKID() {
return CUDDLEKID;
}

public byte getCURRJOB1() {
return CURRJOB1;
}

public byte getCURRJOB2() {
return CURRJOB2;
}

public byte getCURRJOB3() {
return CURRJOB3;
}

public byte getCURRJOB4() {
return CURRJOB4;
}

public byte getCURRJOB5() {
return CURRJOB5;
}

public byte getCURRJOB6() {
return CURRJOB6;
}

public byte getCURRPART1() {
return CURRPART1;
}

public byte getCURRPART2() {
return CURRPART2;
}

public byte getCURRPART3() {
return CURRPART3;
}

public byte getCURRPART4() {
return CURRPART4;
}

public byte getCURRSTAT1() {
return CURRSTAT1;
}

public byte getCURRSTAT2() {
return CURRSTAT2;
}

public byte getCURRSTAT3() {
return CURRSTAT3;
}

public byte getCURRSTAT4() {
return CURRSTAT4;
}

public byte getCURRSTAT5() {
return CURRSTAT5;
}

public byte getCURRSTAT6() {
return CURRSTAT6;
}

public short getDCDOBY() {
return DCDOBY;
}

public byte getDCSATM() {
return DCSATM;
}

public byte getDCSEX() {
return DCSEX;
}

public boolean getDEPCHL_DV() {
return DEPCHL_DV;
}

public byte getDETINC1() {
return DETINC1;
}

public byte getDETINC2() {
return DETINC2;
}

public byte getDETINC3() {
return DETINC3;
}

public byte getDETINC4() {
return DETINC4;
}

public byte getDETINC5() {
return DETINC5;
}

public byte getDETINC6() {
return DETINC6;
}

public byte getDINNER() {
return DINNER;
}

public byte getDISDIF1() {
return DISDIF1;
}

public byte getDISDIF10() {
return DISDIF10;
}

public byte getDISDIF11() {
return DISDIF11;
}

public byte getDISDIF12() {
return DISDIF12;
}

public byte getDISDIF2() {
return DISDIF2;
}

public byte getDISDIF3() {
return DISDIF3;
}

public byte getDISDIF4() {
return DISDIF4;
}

public byte getDISDIF5() {
return DISDIF5;
}

public byte getDISDIF6() {
return DISDIF6;
}

public byte getDISDIF7() {
return DISDIF7;
}

public byte getDISDIF8() {
return DISDIF8;
}

public byte getDISDIF9() {
return DISDIF9;
}

public byte getDISDIF96() {
return DISDIF96;
}

public byte getDISEFFECTS1() {
return DISEFFECTS1;
}

public byte getDISEFFECTS2() {
return DISEFFECTS2;
}

public byte getDISEFFECTS3() {
return DISEFFECTS3;
}

public byte getDISEFFECTS4() {
return DISEFFECTS4;
}

public byte getDISEFFECTS5() {
return DISEFFECTS5;
}

public byte getDISSEV1() {
return DISSEV1;
}

public byte getDISSEV10() {
return DISSEV10;
}

public byte getDISSEV11() {
return DISSEV11;
}

public byte getDISSEV12() {
return DISSEV12;
}

public byte getDISSEV2() {
return DISSEV2;
}

public byte getDISSEV3() {
return DISSEV3;
}

public byte getDISSEV4() {
return DISSEV4;
}

public byte getDISSEV5() {
return DISSEV5;
}

public byte getDISSEV6() {
return DISSEV6;
}

public byte getDISSEV7() {
return DISSEV7;
}

public byte getDISSEV8() {
return DISSEV8;
}

public byte getDISSEV9() {
return DISSEV9;
}

public byte getDIVCHK1() {
return DIVCHK1;
}

public byte getDIVCHK2() {
return DIVCHK2;
}

public byte getDIVCHK3() {
return DIVCHK3;
}

public byte getDIVCHK4() {
return DIVCHK4;
}

public byte getDIVFIN1() {
return DIVFIN1;
}

public byte getDIVFIN2() {
return DIVFIN2;
}

public byte getDIVFIN3() {
return DIVFIN3;
}

public byte getDIVFIN4() {
return DIVFIN4;
}

public short getDOBY_DV() {
return DOBY_DV;
}

public byte getDONEPROXY() {
return DONEPROXY;
}

public byte getDPFREQA() {
return DPFREQA;
}

public boolean getDPFREQB() {
return DPFREQB;
}

public byte getDPPAYA() {
return DPPAYA;
}

public byte getDPPAYB() {
return DPPAYB;
}

public byte getDRGMJ() {
return DRGMJ;
}

public byte getDRGOTH() {
return DRGOTH;
}

public byte getDRGSOL() {
return DRGSOL;
}

public byte getDRIVE() {
return DRIVE;
}

public byte getDV2UK16() {
return DV2UK16;
}

public byte getDVAGE() {
return DVAGE;
}

public byte getDVAGE2UK() {
return DVAGE2UK;
}

public byte getDVM1() {
return DVM1;
}

public byte getDVM2() {
return DVM2;
}

public byte getDVM3() {
return DVM3;
}

public byte getDVM4() {
return DVM4;
}

public short getDVY41() {
return DVY41;
}

public short getDVY42() {
return DVY42;
}

public byte getDVY43() {
return DVY43;
}

public byte getDVY44() {
return DVY44;
}

public byte getEATLIVU() {
return EATLIVU;
}

public byte getECIGS() {
return ECIGS;
}

public byte getEDASP() {
return EDASP;
}

public short getEDTYPE() {
return EDTYPE;
}

public byte getEDUCATION() {
return EDUCATION;
}

public byte getEMPCHK() {
return EMPCHK;
}

public byte getEMPLOY() {
return EMPLOY;
}

public byte getEMPSTENDD() {
return EMPSTENDD;
}

public byte getEMPSTENDM() {
return EMPSTENDM;
}

public short getEMPSTENDY4() {
return EMPSTENDY4;
}

public byte getENDMNTH1() {
return ENDMNTH1;
}

public byte getENDMNTH2() {
return ENDMNTH2;
}

public byte getENDMNTH3() {
return ENDMNTH3;
}

public short getEPROSH() {
return EPROSH;
}

public byte getETHN_DV() {
return ETHN_DV;
}

public byte getEXSAME() {
return EXSAME;
}

protected double EXTRATE() {
return EXTRATE;
}

public byte getEXTREST() {
return EXTREST;
}

public byte getFAMILY() {
return FAMILY;
}

public byte getFAMSUP() {
return FAMSUP;
}

public byte getFARKID() {
return FARKID;
}

public byte getFATHER() {
return FATHER;
}

public byte getFENOW() {
return FENOW;
}

public byte getFENOW_CAWI() {
return FENOW_CAWI;
}

public byte getFF_BENTYPE01() {
return FF_BENTYPE01;
}

public byte getFF_BENTYPE02() {
return FF_BENTYPE02;
}

public byte getFF_BENTYPE03() {
return FF_BENTYPE03;
}

public byte getFF_BENTYPE04() {
return FF_BENTYPE04;
}

public byte getFF_BENTYPE05() {
return FF_BENTYPE05;
}

public byte getFF_BENTYPE06() {
return FF_BENTYPE06;
}

public byte getFF_BENTYPE07() {
return FF_BENTYPE07;
}

public byte getFF_BENTYPE08() {
return FF_BENTYPE08;
}

public byte getFF_BENTYPE09() {
return FF_BENTYPE09;
}

public byte getFF_BENTYPE10() {
return FF_BENTYPE10;
}

public byte getFF_BENTYPE11() {
return FF_BENTYPE11;
}

public byte getFF_BENTYPE12() {
return FF_BENTYPE12;
}

public byte getFF_BENTYPE13() {
return FF_BENTYPE13;
}

public byte getFF_BENTYPE14() {
return FF_BENTYPE14;
}

public byte getFF_BENTYPE15() {
return FF_BENTYPE15;
}

public byte getFF_BENTYPE16() {
return FF_BENTYPE16;
}

public byte getFF_BENTYPE17() {
return FF_BENTYPE17;
}

public byte getFF_BENTYPE18() {
return FF_BENTYPE18;
}

public byte getFF_BENTYPE19() {
return FF_BENTYPE19;
}

public byte getFF_BENTYPE20() {
return FF_BENTYPE20;
}

public byte getFF_BENTYPE21() {
return FF_BENTYPE21;
}

public byte getFF_BENTYPE22() {
return FF_BENTYPE22;
}

public byte getFF_BENTYPE23() {
return FF_BENTYPE23;
}

public byte getFF_BENTYPE24() {
return FF_BENTYPE24;
}

public byte getFF_BENTYPE25() {
return FF_BENTYPE25;
}

public byte getFF_BENTYPE26() {
return FF_BENTYPE26;
}

public byte getFF_BENTYPE27() {
return FF_BENTYPE27;
}

public byte getFF_BENTYPE28() {
return FF_BENTYPE28;
}

public byte getFF_BENTYPE29() {
return FF_BENTYPE29;
}

public byte getFF_BENTYPE30() {
return FF_BENTYPE30;
}

public byte getFF_BENTYPE31() {
return FF_BENTYPE31;
}

public byte getFF_BENTYPE32() {
return FF_BENTYPE32;
}

public byte getFF_BENTYPE33() {
return FF_BENTYPE33;
}

public byte getFF_BENTYPE34() {
return FF_BENTYPE34;
}

public byte getFF_BENTYPE35() {
return FF_BENTYPE35;
}

public byte getFF_BENTYPE36() {
return FF_BENTYPE36;
}

public byte getFF_BENTYPE37() {
return FF_BENTYPE37;
}

public byte getFF_BENTYPE38() {
return FF_BENTYPE38;
}

public byte getFF_BENTYPE39() {
return FF_BENTYPE39;
}

public byte getFF_BENTYPE40() {
return FF_BENTYPE40;
}

public byte getFF_BENTYPE41() {
return FF_BENTYPE41;
}

public byte getFF_EMPLW() {
return FF_EMPLW;
}

public byte getFF_IVINTLANG() {
return FF_IVINTLANG;
}

public byte getFF_IVLOLW() {
return FF_IVLOLW;
}

public byte getFF_JBMNGR() {
return FF_JBMNGR;
}

public byte getFF_JBSEMP() {
return FF_JBSEMP;
}

public byte getFF_JBSIZE() {
return FF_JBSIZE;
}

public byte getFF_JBSTAT() {
return FF_JBSTAT;
}

public byte getFF_OPRLG() {
return FF_OPRLG;
}

public byte getFF_OPRLG0() {
return FF_OPRLG0;
}

public byte getFF_OPRLG0NI() {
return FF_OPRLG0NI;
}

public byte getFF_UKBORN() {
return FF_UKBORN;
}

public short getFF_YR2UK4() {
return FF_YR2UK4;
}

protected double FIBENOTHR_DV() {
return FIBENOTHR_DV;
}

protected double FIBENOTHR_IF() {
return FIBENOTHR_IF;
}

public byte getFIBENOTHR_TC() {
return FIBENOTHR_TC;
}

protected double FIMNGRS_IF() {
return FIMNGRS_IF;
}

public byte getFIMNGRS_TC() {
return FIMNGRS_TC;
}

protected double FIMNINVNET_DV() {
return FIMNINVNET_DV;
}

protected double FIMNLABGRS_IF() {
return FIMNLABGRS_IF;
}

public byte getFIMNLABGRS_TC() {
return FIMNLABGRS_TC;
}

protected double FIMNLABNET_DV() {
return FIMNLABNET_DV;
}

public byte getFIMNLABNET_TC() {
return FIMNLABNET_TC;
}

protected double FIMNMISC_DV() {
return FIMNMISC_DV;
}

protected double FIMNNET_DV() {
return FIMNNET_DV;
}

protected double FIMNPEN_DV() {
return FIMNPEN_DV;
}

protected double FIMNPRBEN_DV() {
return FIMNPRBEN_DV;
}

protected double FIMNSBEN_DV() {
return FIMNSBEN_DV;
}

public byte getFINFUT() {
return FINFUT;
}

public byte getFIYRDB1() {
return FIYRDB1;
}

public byte getFIYRDB2() {
return FIYRDB2;
}

public byte getFIYRDB3() {
return FIYRDB3;
}

public byte getFIYRDB4() {
return FIYRDB4;
}

public byte getFIYRDB5() {
return FIYRDB5;
}

public byte getFIYRDB6() {
return FIYRDB6;
}

public int getFIYRDIA() {
return FIYRDIA;
}

protected double FIYRINVINC_DV() {
return FIYRINVINC_DV;
}

public byte getFIYRINVINC_IF() {
return FIYRINVINC_IF;
}

public byte getFIYRINVINC_TC() {
return FIYRINVINC_TC;
}

public int getFNPID() {
return FNPID;
}

public byte getFNPNO() {
return FNPNO;
}

public int getFNSPID() {
return FNSPID;
}

public byte getFNSPNO() {
return FNSPNO;
}

public byte getFRDRG() {
return FRDRG;
}

public byte getFROBULLI() {
return FROBULLI;
}

public byte getFROBULLY() {
return FROBULLY;
}

public byte getFRPBULLI() {
return FRPBULLI;
}

public byte getFRPBULLY() {
return FRPBULLY;
}

public byte getFRUITAMT() {
return FRUITAMT;
}

public byte getFT2ENDM1() {
return FT2ENDM1;
}

public byte getFT2ENDM2() {
return FT2ENDM2;
}

public short getFT2ENDY41() {
return FT2ENDY41;
}

public short getFT2ENDY42() {
return FT2ENDY42;
}

public byte getFTEDANY() {
return FTEDANY;
}

public byte getFTEDEND1() {
return FTEDEND1;
}

public byte getFTEDEND2() {
return FTEDEND2;
}

public byte getFTEDMOR1() {
return FTEDMOR1;
}

public byte getFTEDMOR2() {
return FTEDMOR2;
}

public byte getFTEDSTARTM1() {
return FTEDSTARTM1;
}

public byte getFTEDSTARTM2() {
return FTEDSTARTM2;
}

public short getFTEDSTARTY41() {
return FTEDSTARTY41;
}

public short getFTEDSTARTY42() {
return FTEDSTARTY42;
}

public byte getFTENDM() {
return FTENDM;
}

public short getFTENDY4() {
return FTENDY4;
}

public int getFTEXV() {
return FTEXV;
}

public byte getFTEXW() {
return FTEXW;
}

public byte getFTQUALS() {
return FTQUALS;
}

public short getFUTRA() {
return FUTRA;
}

public short getFUTRB() {
return FUTRB;
}

public short getFUTRC() {
return FUTRC;
}

public short getFUTRD() {
return FUTRD;
}

public short getFUTRE() {
return FUTRE;
}

public short getFUTRF() {
return FUTRF;
}

public short getFUTRG() {
return FUTRG;
}

public short getFUTRH() {
return FUTRH;
}

public short getFUTRI() {
return FUTRI;
}

public short getFUTRJ() {
return FUTRJ;
}

public short getFUTRK() {
return FUTRK;
}

public short getFUTRL() {
return FUTRL;
}

public byte getGCSE5() {
return GCSE5;
}

public byte getGCSEENG() {
return GCSEENG;
}

public byte getGCSEMAT() {
return GCSEMAT;
}

public int getGRFPID() {
return GRFPID;
}

public byte getGRFPNO() {
return GRFPNO;
}

public int getGRMPID() {
return GRMPID;
}

public byte getGRMPNO() {
return GRMPNO;
}

public byte getHASEMAIL() {
return HASEMAIL;
}

public byte getHASSTEP() {
return HASSTEP;
}

public byte getHAVEDP1() {
return HAVEDP1;
}

public byte getHAVEDP2() {
return HAVEDP2;
}

public byte getHAVEDP3() {
return HAVEDP3;
}

public byte getHCOND1() {
return HCOND1;
}

public byte getHCOND10() {
return HCOND10;
}

public byte getHCOND11() {
return HCOND11;
}

public byte getHCOND12() {
return HCOND12;
}

public byte getHCOND13() {
return HCOND13;
}

public byte getHCOND14() {
return HCOND14;
}

public byte getHCOND15() {
return HCOND15;
}

public byte getHCOND16() {
return HCOND16;
}

public byte getHCOND17() {
return HCOND17;
}

public byte getHCOND18() {
return HCOND18;
}

public byte getHCOND19() {
return HCOND19;
}

public byte getHCOND2() {
return HCOND2;
}

public byte getHCOND20() {
return HCOND20;
}

public byte getHCOND3() {
return HCOND3;
}

public byte getHCOND4() {
return HCOND4;
}

public byte getHCOND5() {
return HCOND5;
}

public byte getHCOND6() {
return HCOND6;
}

public byte getHCOND7() {
return HCOND7;
}

public byte getHCOND8() {
return HCOND8;
}

public byte getHCOND9() {
return HCOND9;
}

public byte getHCOND96() {
return HCOND96;
}

public byte getHCONDA01() {
return HCONDA01;
}

public byte getHCONDA02() {
return HCONDA02;
}

public byte getHCONDA03() {
return HCONDA03;
}

public byte getHCONDA04() {
return HCONDA04;
}

public byte getHCONDA05() {
return HCONDA05;
}

public byte getHCONDA06() {
return HCONDA06;
}

public byte getHCONDA07() {
return HCONDA07;
}

public byte getHCONDA08() {
return HCONDA08;
}

public byte getHCONDA09() {
return HCONDA09;
}

public byte getHCONDA10() {
return HCONDA10;
}

public byte getHCONDA11() {
return HCONDA11;
}

public byte getHCONDA12() {
return HCONDA12;
}

public byte getHCONDA13() {
return HCONDA13;
}

public byte getHCONDA14() {
return HCONDA14;
}

public byte getHCONDA15() {
return HCONDA15;
}

public byte getHCONDA16() {
return HCONDA16;
}

public byte getHCONDA17() {
return HCONDA17;
}

public byte getHCONDA19() {
return HCONDA19;
}

public boolean getHCONDA20() {
return HCONDA20;
}

public byte getHCONDN1() {
return HCONDN1;
}

public byte getHCONDN10() {
return HCONDN10;
}

public byte getHCONDN11() {
return HCONDN11;
}

public byte getHCONDN12() {
return HCONDN12;
}

public byte getHCONDN13() {
return HCONDN13;
}

public byte getHCONDN14() {
return HCONDN14;
}

public byte getHCONDN15() {
return HCONDN15;
}

public byte getHCONDN16() {
return HCONDN16;
}

public byte getHCONDN17() {
return HCONDN17;
}

public byte getHCONDN18() {
return HCONDN18;
}

public byte getHCONDN19() {
return HCONDN19;
}

public byte getHCONDN2() {
return HCONDN2;
}

public byte getHCONDN20() {
return HCONDN20;
}

public byte getHCONDN3() {
return HCONDN3;
}

public byte getHCONDN4() {
return HCONDN4;
}

public byte getHCONDN5() {
return HCONDN5;
}

public byte getHCONDN6() {
return HCONDN6;
}

public byte getHCONDN7() {
return HCONDN7;
}

public byte getHCONDN8() {
return HCONDN8;
}

public byte getHCONDN9() {
return HCONDN9;
}

public byte getHCONDN96() {
return HCONDN96;
}

public byte getHCONDNO1() {
return HCONDNO1;
}

public byte getHCONDNO2() {
return HCONDNO2;
}

public byte getHCONDNO3() {
return HCONDNO3;
}

public byte getHCONDNO4() {
return HCONDNO4;
}

public byte getHCONDNO5() {
return HCONDNO5;
}

public byte getHCONDNO_CODE() {
return HCONDNO_CODE;
}

public byte getHCONDNS1() {
return HCONDNS1;
}

public byte getHCONDNS2() {
return HCONDNS2;
}

public byte getHCONDNS3() {
return HCONDNS3;
}

public byte getHCONDNS4() {
return HCONDNS4;
}

public byte getHCONDNS5() {
return HCONDNS5;
}

public byte getHCONDO_CODE() {
return HCONDO_CODE;
}

public byte getHCONDS01() {
return HCONDS01;
}

public byte getHCONDS02() {
return HCONDS02;
}

public byte getHCONDS03() {
return HCONDS03;
}

public byte getHCONDS04() {
return HCONDS04;
}

public byte getHCONDS05() {
return HCONDS05;
}

public byte getHCONDS08() {
return HCONDS08;
}

public byte getHCONDS09() {
return HCONDS09;
}

public byte getHCONDS10() {
return HCONDS10;
}

public byte getHCONDS11() {
return HCONDS11;
}

public byte getHCONDS12() {
return HCONDS12;
}

public byte getHCONDS13() {
return HCONDS13;
}

public byte getHCONDS14() {
return HCONDS14;
}

public byte getHCONDS15() {
return HCONDS15;
}

public byte getHCONDS16() {
return HCONDS16;
}

public byte getHCONDS17() {
return HCONDS17;
}

public byte getHEALTH() {
return HEALTH;
}

public byte getHEAPPLIED() {
return HEAPPLIED;
}

public byte getHEDLIK() {
return HEDLIK;
}

public byte getHEDNT() {
return HEDNT;
}

public byte getHEDNTO_CODE() {
return HEDNTO_CODE;
}

public byte getHELPCODE1() {
return HELPCODE1;
}

public byte getHELPCODE2() {
return HELPCODE2;
}

public byte getHELPCODE3() {
return HELPCODE3;
}

public byte getHELPCODE4() {
return HELPCODE4;
}

public byte getHELPCODE5() {
return HELPCODE5;
}

public byte getHELPCODE6() {
return HELPCODE6;
}

public byte getHELPCODE7() {
return HELPCODE7;
}

public byte getHELPCODE8() {
return HELPCODE8;
}

public byte getHELPHOURS1() {
return HELPHOURS1;
}

public byte getHELPHOURS2() {
return HELPHOURS2;
}

public byte getHELPHOURS3() {
return HELPHOURS3;
}

public byte getHELPHOURS4() {
return HELPHOURS4;
}

public byte getHELPHOURS5() {
return HELPHOURS5;
}

public byte getHELPHOURS6() {
return HELPHOURS6;
}

public byte getHELPHOURS7() {
return HELPHOURS7;
}

public byte getHELPHOURS8() {
return HELPHOURS8;
}

public byte getHELPHOURSB1() {
return HELPHOURSB1;
}

public byte getHELPHOURSB2() {
return HELPHOURSB2;
}

public byte getHELPHOURSB3() {
return HELPHOURSB3;
}

public byte getHELPHOURSB4() {
return HELPHOURSB4;
}

public byte getHELPHOURSB5() {
return HELPHOURSB5;
}

public boolean getHELPHOURSB6() {
return HELPHOURSB6;
}

public boolean getHELPHOURSB7() {
return HELPHOURSB7;
}

public boolean getHELPHOURSB8() {
return HELPHOURSB8;
}

public byte getHGADOPTF() {
return HGADOPTF;
}

public byte getHGADOPTM() {
return HGADOPTM;
}

public byte getHGPART() {
return HGPART;
}

public byte getHHRESP_DV() {
return HHRESP_DV;
}

public byte getHHTYPE_DV() {
return HHTYPE_DV;
}

public byte getHINFANO1() {
return HINFANO1;
}

public byte getHINFANO2() {
return HINFANO2;
}

public byte getHINFANO3() {
return HINFANO3;
}

public byte getHINFANO4() {
return HINFANO4;
}

public byte getHINFANO5() {
return HINFANO5;
}

public byte getHINFANO6() {
return HINFANO6;
}

public boolean getHINFANO7() {
return HINFANO7;
}

public byte getHINFANO8() {
return HINFANO8;
}

public byte getHINFANO9() {
return HINFANO9;
}

public byte getHINFBNO1() {
return HINFBNO1;
}

public byte getHINFBNO2() {
return HINFBNO2;
}

public byte getHINFBNO3() {
return HINFBNO3;
}

public byte getHINFBNO4() {
return HINFBNO4;
}

public byte getHINFBNO5() {
return HINFBNO5;
}

public byte getHINFBNO6() {
return HINFBNO6;
}

public byte getHINFBNO7() {
return HINFBNO7;
}

public byte getHINFBNO8() {
return HINFBNO8;
}

public byte getHINFBNO9() {
return HINFBNO9;
}

public byte getHITSIB() {
return HITSIB;
}

public short getHL2GP() {
return HL2GP;
}

public byte getHL2HOP() {
return HL2HOP;
}

public byte getHLPFORMA1() {
return HLPFORMA1;
}

public byte getHLPFORMA2() {
return HLPFORMA2;
}

public byte getHLPFORMA3() {
return HLPFORMA3;
}

public byte getHLPFORMA4() {
return HLPFORMA4;
}

public byte getHLPFORMA5() {
return HLPFORMA5;
}

public byte getHLPFORMA6() {
return HLPFORMA6;
}

public byte getHLPFORMA7() {
return HLPFORMA7;
}

public byte getHLPFORMA96() {
return HLPFORMA96;
}

public byte getHLPFORMA97() {
return HLPFORMA97;
}

public byte getHLPFORMB1() {
return HLPFORMB1;
}

public byte getHLPFORMB2() {
return HLPFORMB2;
}

public byte getHLPFORMB3() {
return HLPFORMB3;
}

public byte getHLPFORMB4() {
return HLPFORMB4;
}

public byte getHLPFORMB5() {
return HLPFORMB5;
}

public byte getHLPFORMB6() {
return HLPFORMB6;
}

public byte getHLPFORMB7() {
return HLPFORMB7;
}

public byte getHLPFORMB96() {
return HLPFORMB96;
}

public byte getHLPFORMB97() {
return HLPFORMB97;
}

public byte getHLPHMWK() {
return HLPHMWK;
}

public byte getHLPINFA1() {
return HLPINFA1;
}

public byte getHLPINFA10() {
return HLPINFA10;
}

public byte getHLPINFA2() {
return HLPINFA2;
}

public byte getHLPINFA3() {
return HLPINFA3;
}

public byte getHLPINFA4() {
return HLPINFA4;
}

public byte getHLPINFA5() {
return HLPINFA5;
}

public byte getHLPINFA6() {
return HLPINFA6;
}

public byte getHLPINFA7() {
return HLPINFA7;
}

public byte getHLPINFA8() {
return HLPINFA8;
}

public byte getHLPINFA9() {
return HLPINFA9;
}

public byte getHLPINFA96() {
return HLPINFA96;
}

public byte getHLPINFB1() {
return HLPINFB1;
}

public byte getHLPINFB10() {
return HLPINFB10;
}

public byte getHLPINFB2() {
return HLPINFB2;
}

public byte getHLPINFB3() {
return HLPINFB3;
}

public byte getHLPINFB4() {
return HLPINFB4;
}

public byte getHLPINFB5() {
return HLPINFB5;
}

public byte getHLPINFB6() {
return HLPINFB6;
}

public byte getHLPINFB7() {
return HLPINFB7;
}

public byte getHLPINFB8() {
return HLPINFB8;
}

public byte getHLPINFB9() {
return HLPINFB9;
}

public byte getHLPINFB96() {
return HLPINFB96;
}

public short getHOSP() {
return HOSP;
}

public byte getHOSPC1() {
return HOSPC1;
}

public byte getHOSPC2() {
return HOSPC2;
}

public byte getHOSPC3() {
return HOSPC3;
}

public byte getHOSPC4() {
return HOSPC4;
}

public byte getHOSPC5() {
return HOSPC5;
}

public short getHOSPCH() {
return HOSPCH;
}

public short getHOSPD() {
return HOSPD;
}

public short getHOSPDC1() {
return HOSPDC1;
}

public short getHOSPDC2() {
return HOSPDC2;
}

public short getHOSPDC3() {
return HOSPDC3;
}

public byte getHOSPDC4() {
return HOSPDC4;
}

public byte getHOSPDC5() {
return HOSPDC5;
}

public byte getHOUSING() {
return HOUSING;
}

public byte getHOWPAYA1() {
return HOWPAYA1;
}

public byte getHOWPAYA2() {
return HOWPAYA2;
}

public byte getHOWPAYA3() {
return HOWPAYA3;
}

public byte getHOWPAYB1() {
return HOWPAYB1;
}

public byte getHOWPAYB2() {
return HOWPAYB2;
}

public byte getHOWPAYB3() {
return HOWPAYB3;
}

public int getHRPID() {
return HRPID;
}

public byte getHRPNO() {
return HRPNO;
}

public byte getHRS_SLPH() {
return HRS_SLPH;
}

public byte getHRS_SLPM() {
return HRS_SLPM;
}

public byte getIENDDATD() {
return IENDDATD;
}

public byte getIENDDATM() {
return IENDDATM;
}

public byte getIENDDATMM() {
return IENDDATMM;
}

public byte getIENDDATSS() {
return IENDDATSS;
}

public short getIENDDATY() {
return IENDDATY;
}

public byte getINCASS() {
return INCASS;
}

protected double IND5MUS_LW() {
return IND5MUS_LW;
}

protected double IND5MUS_XW() {
return IND5MUS_XW;
}

protected double INDBD91_LW() {
return INDBD91_LW;
}

protected double INDBDUB_LW() {
return INDBDUB_LW;
}

protected double INDIN01_LW() {
return INDIN01_LW;
}

protected double INDIN91_LW() {
return INDIN91_LW;
}

protected double INDINUB_LW() {
return INDINUB_LW;
}

protected double INDINUB_XW() {
return INDINUB_XW;
}

protected double INDINUI_LW() {
return INDINUI_LW;
}

protected double INDINUI_XW() {
return INDINUI_XW;
}

protected double INDINUS_LW() {
return INDINUS_LW;
}

public byte getINDLEARN() {
return INDLEARN;
}

public byte getINDLEARNEW() {
return INDLEARNEW;
}

public byte getINDMODE() {
return INDMODE;
}

protected double INDNS91_LW() {
return INDNS91_LW;
}

protected double INDNSUB_LW() {
return INDNSUB_LW;
}

protected double INDPXUB_LW() {
return INDPXUB_LW;
}

protected double INDPXUB_XW() {
return INDPXUB_XW;
}

protected double INDPXUI_LW() {
return INDPXUI_LW;
}

protected double INDPXUI_XW() {
return INDPXUI_XW;
}

protected double INDPXUS_LW() {
return INDPXUS_LW;
}

protected double INDSCUB_LW() {
return INDSCUB_LW;
}

protected double INDSCUB_XW() {
return INDSCUB_XW;
}

protected double INDSCUI_LW() {
return INDSCUI_LW;
}

protected double INDSCUI_XW() {
return INDSCUI_XW;
}

protected double INDSCUS_LW() {
return INDSCUS_LW;
}

public byte getINSULTED1() {
return INSULTED1;
}

public byte getINSULTED10() {
return INSULTED10;
}

public byte getINSULTED11() {
return INSULTED11;
}

public byte getINSULTED2() {
return INSULTED2;
}

public byte getINSULTED3() {
return INSULTED3;
}

public byte getINSULTED4() {
return INSULTED4;
}

public byte getINSULTED5() {
return INSULTED5;
}

public byte getINSULTED6() {
return INSULTED6;
}

public byte getINSULTED7() {
return INSULTED7;
}

public byte getINSULTED8() {
return INSULTED8;
}

public byte getINSULTED9() {
return INSULTED9;
}

public byte getINSULTED96() {
return INSULTED96;
}

public byte getINSULTED97() {
return INSULTED97;
}

public byte getINSULTEDO_CODE() {
return INSULTEDO_CODE;
}

public byte getINSULTED_DV() {
return INSULTED_DV;
}

public byte getINTDATD_DV() {
return INTDATD_DV;
}

public byte getINTDATM_DV() {
return INTDATM_DV;
}

public short getINTDATY_DV() {
return INTDATY_DV;
}

public byte getINTQUS() {
return INTQUS;
}

public byte getIOUTCOME() {
return IOUTCOME;
}

public boolean getIPROXY() {
return IPROXY;
}

public byte getISTRTDATMM() {
return ISTRTDATMM;
}

public byte getISTRTDATSS() {
return ISTRTDATSS;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public byte getIVAFFCT11() {
return IVAFFCT11;
}

public byte getIVAFFCT12() {
return IVAFFCT12;
}

public byte getIVAFFCT13() {
return IVAFFCT13;
}

public byte getIVAFFCT14() {
return IVAFFCT14;
}

public byte getIVAFFCT15() {
return IVAFFCT15;
}

public byte getIVAFFCT17() {
return IVAFFCT17;
}

public byte getIVAFFCT21() {
return IVAFFCT21;
}

public byte getIVAFFCT22() {
return IVAFFCT22;
}

public byte getIVAFFCT23() {
return IVAFFCT23;
}

public byte getIVAFFCT27() {
return IVAFFCT27;
}

public byte getIVAFFCT30() {
return IVAFFCT30;
}

public byte getIVAFFCT97() {
return IVAFFCT97;
}

public byte getIVCOOP() {
return IVCOOP;
}

public byte getIVINFNCE() {
return IVINFNCE;
}

public byte getIVLIBAL() {
return IVLIBAL;
}

public byte getIVLIENG() {
return IVLIENG;
}

public byte getIVLITRANS() {
return IVLITRANS;
}

public byte getIVLIWHO() {
return IVLIWHO;
}

public byte getJ1BOSS() {
return J1BOSS;
}

public byte getJ1MNGR() {
return J1MNGR;
}

public byte getJ1NONE() {
return J1NONE;
}

public byte getJ1NSSEC5_DV() {
return J1NSSEC5_DV;
}

public byte getJ1SEMP() {
return J1SEMP;
}

public short getJ1SOC00_CC() {
return J1SOC00_CC;
}

public short getJ1SOC10_CC() {
return J1SOC10_CC;
}

public byte getJ1SOC90_CC() {
return J1SOC90_CC;
}

public byte getJ2NSSEC5_DV() {
return J2NSSEC5_DV;
}

public int getJ2PAY() {
return J2PAY;
}

protected double J2PAYNET_DV() {
return J2PAYNET_DV;
}

public short getJ2SOC00_CC() {
return J2SOC00_CC;
}

public short getJ2SOC10_CC() {
return J2SOC10_CC;
}

public short getJ2SOC90_CC() {
return J2SOC90_CC;
}

public byte getJBATT1() {
return JBATT1;
}

public byte getJBATT2() {
return JBATT2;
}

public byte getJBATT3() {
return JBATT3;
}

public byte getJBATT4() {
return JBATT4;
}

public byte getJBATT5() {
return JBATT5;
}

public byte getJBATT6() {
return JBATT6;
}

public byte getJBENDD() {
return JBENDD;
}

public byte getJBENDM() {
return JBENDM;
}

public byte getJBENDREAS1() {
return JBENDREAS1;
}

public byte getJBENDREAS10() {
return JBENDREAS10;
}

public byte getJBENDREAS11() {
return JBENDREAS11;
}

public byte getJBENDREAS2() {
return JBENDREAS2;
}

public byte getJBENDREAS3() {
return JBENDREAS3;
}

public byte getJBENDREAS4() {
return JBENDREAS4;
}

public byte getJBENDREAS5() {
return JBENDREAS5;
}

public byte getJBENDREAS6() {
return JBENDREAS6;
}

public byte getJBENDREAS7() {
return JBENDREAS7;
}

public byte getJBENDREAS8() {
return JBENDREAS8;
}

public byte getJBENDREAS9() {
return JBENDREAS9;
}

public byte getJBENDREAS97() {
return JBENDREAS97;
}

public short getJBENDY4() {
return JBENDY4;
}

public byte getJBES2000() {
return JBES2000;
}

public byte getJBIINDB_DV() {
return JBIINDB_DV;
}

public byte getJBMNGRCHK() {
return JBMNGRCHK;
}

public byte getJBNSSEC3_DV() {
return JBNSSEC3_DV;
}

public byte getJBNSSEC5_DV() {
return JBNSSEC5_DV;
}

public short getJBNSSEC_DV() {
return JBNSSEC_DV;
}

public byte getJBOFFY() {
return JBOFFY;
}

public short getJBRGSC_DV() {
return JBRGSC_DV;
}

public byte getJBSAMR() {
return JBSAMR;
}

public byte getJBSAT() {
return JBSAT;
}

public byte getJBSECTPUB() {
return JBSECTPUB;
}

public byte getJBSEDV() {
return JBSEDV;
}

public byte getJBSEMPCHK() {
return JBSEMPCHK;
}

public byte getJBSIC07CHK() {
return JBSIC07CHK;
}

public byte getJBSIC07_CC() {
return JBSIC07_CC;
}

public byte getJBSIZECHK() {
return JBSIZECHK;
}

public byte getJBSOC00CHK() {
return JBSOC00CHK;
}

public short getJBSOC00_CC() {
return JBSOC00_CC;
}

public short getJBSOC10_CC() {
return JBSOC10_CC;
}

public byte getJBSOCGR_DV() {
return JBSOCGR_DV;
}

public byte getJBTERM1() {
return JBTERM1;
}

public byte getJBTERM2() {
return JBTERM2;
}

public byte getJLENDM() {
return JLENDM;
}

public byte getJLES2000() {
return JLES2000;
}

public byte getJLIINDB_DV() {
return JLIINDB_DV;
}

public byte getJLNSSEC3_DV() {
return JLNSSEC3_DV;
}

public byte getJLNSSEC5_DV() {
return JLNSSEC5_DV;
}

public short getJLNSSEC_DV() {
return JLNSSEC_DV;
}

public short getJLRGSC_DV() {
return JLRGSC_DV;
}

public byte getJLSEDV() {
return JLSEDV;
}

public byte getJLSIC07_CC() {
return JLSIC07_CC;
}

public short getJLSOC00_CC() {
return JLSOC00_CC;
}

public short getJLSOC10_CC() {
return JLSOC10_CC;
}

public byte getJOBDENY() {
return JOBDENY;
}

public byte getJOBHOURS1() {
return JOBHOURS1;
}

public byte getJOBHOURS2() {
return JOBHOURS2;
}

public byte getJOBHOURS3() {
return JOBHOURS3;
}

public byte getJOBHOURS4() {
return JOBHOURS4;
}

public byte getJOBHOURS5() {
return JOBHOURS5;
}

public byte getJOBHOURS6() {
return JOBHOURS6;
}

public byte getJOBLOOK() {
return JOBLOOK;
}

public int getJSOWNAMT() {
return JSOWNAMT;
}

public byte getJSOWNOTH() {
return JSOWNOTH;
}

public byte getJSOWNSUM() {
return JSOWNSUM;
}

public short getJSOWOTAM() {
return JSOWOTAM;
}

public byte getJSPART() {
return JSPART;
}

public int getJSPAYU() {
return JSPAYU;
}

public byte getJSPAYW() {
return JSPAYW;
}

public byte getJSPRLS() {
return JSPRLS;
}

public byte getJSPRNI() {
return JSPRNI;
}

public byte getJSPRTX() {
return JSPRTX;
}

public byte getJSPYNI() {
return JSPYNI;
}

public byte getJSPYTX() {
return JSPYTX;
}

public byte getJSTTWTB_CAWI() {
return JSTTWTB_CAWI;
}

public byte getJSTYPEB() {
return JSTYPEB;
}

public byte getJSWORKAC() {
return JSWORKAC;
}

public byte getJSWORKTRAV() {
return JSWORKTRAV;
}

public short getJUBGN() {
return JUBGN;
}

public short getJULK4X1() {
return JULK4X1;
}

public short getJULK4X2() {
return JULK4X2;
}

public byte getJULK4X3() {
return JULK4X3;
}

public short getJULK4X4() {
return JULK4X4;
}

public short getJULK4X5() {
return JULK4X5;
}

public short getJULK4X6() {
return JULK4X6;
}

public byte getJULK4X96() {
return JULK4X96;
}

public byte getKID2UNI01() {
return KID2UNI01;
}

public byte getKID2UNI02() {
return KID2UNI02;
}

public byte getKID2UNI03() {
return KID2UNI03;
}

public byte getKID2UNI04() {
return KID2UNI04;
}

public byte getKID2UNI05() {
return KID2UNI05;
}

public byte getKID2UNI06() {
return KID2UNI06;
}

public byte getKID2UNI07() {
return KID2UNI07;
}

public byte getKID2UNI08() {
return KID2UNI08;
}

public byte getKID2UNI09() {
return KID2UNI09;
}

public byte getKID2UNI10() {
return KID2UNI10;
}

public byte getKID2UNI11() {
return KID2UNI11;
}

public byte getKID2UNI12() {
return KID2UNI12;
}

public byte getKID2UNI13() {
return KID2UNI13;
}

public byte getKID2UNI14() {
return KID2UNI14;
}

public byte getKID2UNI15() {
return KID2UNI15;
}

public byte getKID2UNI16() {
return KID2UNI16;
}

public byte getKIDSPT() {
return KIDSPT;
}

public short getLAAMTA() {
return LAAMTA;
}

public byte getLADOPT() {
return LADOPT;
}

public byte getLAFREQA() {
return LAFREQA;
}

public byte getLAHELP11() {
return LAHELP11;
}

public byte getLAHELP12() {
return LAHELP12;
}

public byte getLAHELP13() {
return LAHELP13;
}

public byte getLAHELP14() {
return LAHELP14;
}

public byte getLAHELP15() {
return LAHELP15;
}

public byte getLAHELP16() {
return LAHELP16;
}

public byte getLAHELP17() {
return LAHELP17;
}

public byte getLAHELP18() {
return LAHELP18;
}

public byte getLAPAYA1() {
return LAPAYA1;
}

public byte getLAPAYA2() {
return LAPAYA2;
}

public byte getLAPAYB1() {
return LAPAYB1;
}

public byte getLAPAYB2() {
return LAPAYB2;
}

public byte getLATE() {
return LATE;
}

public byte getLCHMULTI1() {
return LCHMULTI1;
}

public byte getLCHMULTI2() {
return LCHMULTI2;
}

public byte getLCHMULTI3() {
return LCHMULTI3;
}

public byte getLCOHNPI() {
return LCOHNPI;
}

public byte getLEVELIMP() {
return LEVELIMP;
}

public byte getLIENG() {
return LIENG;
}

public byte getLIHOW() {
return LIHOW;
}

public byte getLINGUA() {
return LINGUA;
}

public byte getLITRANS() {
return LITRANS;
}

public byte getLIVESP() {
return LIVESP;
}

public boolean getLIVESP_DV() {
return LIVESP_DV;
}

public byte getLIVEWITH() {
return LIVEWITH;
}

public byte getLIWHO() {
return LIWHO;
}

public byte getLMAR1M() {
return LMAR1M;
}

public short getLMAR1Y() {
return LMAR1Y;
}

public byte getLMCBM1() {
return LMCBM1;
}

public byte getLMCBM2() {
return LMCBM2;
}

public byte getLMCBM3() {
return LMCBM3;
}

public byte getLMCBM4() {
return LMCBM4;
}

public short getLMCBY41() {
return LMCBY41;
}

public short getLMCBY42() {
return LMCBY42;
}

public short getLMCBY43() {
return LMCBY43;
}

public short getLMCBY44() {
return LMCBY44;
}

public byte getLMSPM1() {
return LMSPM1;
}

public byte getLMSPM2() {
return LMSPM2;
}

public byte getLMSPM3() {
return LMSPM3;
}

public byte getLMSPM4() {
return LMSPM4;
}

public short getLMSPY41() {
return LMSPY41;
}

public short getLMSPY42() {
return LMSPY42;
}

public short getLMSPY43() {
return LMSPY43;
}

public short getLMSPY44() {
return LMSPY44;
}

public byte getLNADOPT() {
return LNADOPT;
}

public byte getLNPRNT() {
return LNPRNT;
}

public byte getLPRNT() {
return LPRNT;
}

public byte getLVHM() {
return LVHM;
}

public byte getLVREL1() {
return LVREL1;
}

public byte getLVREL10() {
return LVREL10;
}

public byte getLVREL2() {
return LVREL2;
}

public byte getLVREL3() {
return LVREL3;
}

public byte getLVREL4() {
return LVREL4;
}

public byte getLVREL5() {
return LVREL5;
}

public byte getLVREL6() {
return LVREL6;
}

public byte getLVREL7() {
return LVREL7;
}

public byte getLVREL8() {
return LVREL8;
}

public byte getLVREL9() {
return LVREL9;
}

public byte getLVREL96() {
return LVREL96;
}

public byte getLVSCHDO() {
return LVSCHDO;
}

public byte getLWWRONG() {
return LWWRONG;
}

public byte getMAAGE() {
return MAAGE;
}

public byte getMABROAD() {
return MABROAD;
}

public short getMABROADC1() {
return MABROADC1;
}

public short getMABROADC2() {
return MABROADC2;
}

public short getMABROADC3() {
return MABROADC3;
}

public short getMABROADC4() {
return MABROADC4;
}

public short getMABROADC5() {
return MABROADC5;
}

public byte getMACOB() {
return MACOB;
}

public byte getMACON() {
return MACON;
}

public byte getMAFAR() {
return MAFAR;
}

public byte getMAJU() {
return MAJU;
}

public byte getMALONE() {
return MALONE;
}

public byte getMAMOSTCON() {
return MAMOSTCON;
}

public byte getMANSSEC5_DV() {
return MANSSEC5_DV;
}

public byte getMARSTAT() {
return MARSTAT;
}

public byte getMASEE() {
return MASEE;
}

public short getMASOC00_CC() {
return MASOC00_CC;
}

public short getMASOC10_CC() {
return MASOC10_CC;
}

public byte getMASOC90_CC() {
return MASOC90_CC;
}

public byte getMASTAT_DV() {
return MASTAT_DV;
}

public byte getMATLEAVE() {
return MATLEAVE;
}

public byte getMATLV() {
return MATLV;
}

public byte getMATLVENDD() {
return MATLVENDD;
}

public byte getMATLVENDM() {
return MATLVENDM;
}

public short getMATLVENDY4() {
return MATLVENDY4;
}

public byte getMATLVSTD() {
return MATLVSTD;
}

public byte getMATLVSTM() {
return MATLVSTM;
}

public short getMATLVSTY4() {
return MATLVSTY4;
}

public byte getMAYRUK() {
return MAYRUK;
}

public byte getMDAY() {
return MDAY;
}

public byte getMDHRS() {
return MDHRS;
}

public byte getMDMIN() {
return MDMIN;
}

public byte getMED_SLP() {
return MED_SLP;
}

public byte getMEMPLOY() {
return MEMPLOY;
}

public byte getMINDIRECT() {
return MINDIRECT;
}

public short getMINDIRECTC1() {
return MINDIRECTC1;
}

public short getMINDIRECTC2() {
return MINDIRECTC2;
}

public short getMINDIRECTC3() {
return MINDIRECTC3;
}

public short getMINDIRECTC4() {
return MINDIRECTC4;
}

public short getMINDIRECTC5() {
return MINDIRECTC5;
}

public byte getMINTENT() {
return MINTENT;
}

public byte getMINTWHEN() {
return MINTWHEN;
}

public byte getMISSOURCE01() {
return MISSOURCE01;
}

public byte getMISSOURCE02() {
return MISSOURCE02;
}

public byte getMISSOURCE03() {
return MISSOURCE03;
}

public byte getMISSOURCE04() {
return MISSOURCE04;
}

public byte getMISSOURCE05() {
return MISSOURCE05;
}

public byte getMISSOURCE06() {
return MISSOURCE06;
}

public byte getMISSOURCE07() {
return MISSOURCE07;
}

public byte getMISSOURCE08() {
return MISSOURCE08;
}

public byte getMISSOURCE09() {
return MISSOURCE09;
}

public byte getMISSOURCE10() {
return MISSOURCE10;
}

public byte getMISSOURCE11() {
return MISSOURCE11;
}

public byte getMISSOURCE12() {
return MISSOURCE12;
}

public byte getMISSOURCE13() {
return MISSOURCE13;
}

public byte getMISSOURCE14() {
return MISSOURCE14;
}

public byte getMISSOURCE15() {
return MISSOURCE15;
}

public byte getMISSOURCE16() {
return MISSOURCE16;
}

public byte getMISSOURCE18() {
return MISSOURCE18;
}

public byte getMISSOURCE19() {
return MISSOURCE19;
}

public byte getMISSOURCE20() {
return MISSOURCE20;
}

public byte getMISSOURCE21() {
return MISSOURCE21;
}

public byte getMISSOURCE22() {
return MISSOURCE22;
}

public byte getMISSOURCE23() {
return MISSOURCE23;
}

public byte getMISSOURCE24() {
return MISSOURCE24;
}

public byte getMISSOURCE25() {
return MISSOURCE25;
}

public byte getMISSOURCE26() {
return MISSOURCE26;
}

public byte getMISSOURCE27() {
return MISSOURCE27;
}

public byte getMISSOURCE28() {
return MISSOURCE28;
}

public byte getMISSOURCE29() {
return MISSOURCE29;
}

public byte getMISSOURCE30() {
return MISSOURCE30;
}

public byte getMISSOURCE31() {
return MISSOURCE31;
}

public byte getMISSOURCE32() {
return MISSOURCE32;
}

public byte getMISSOURCE33() {
return MISSOURCE33;
}

public byte getMISSOURCE34() {
return MISSOURCE34;
}

public byte getMISSOURCE35() {
return MISSOURCE35;
}

public byte getMISSOURCE36() {
return MISSOURCE36;
}

public byte getMISSOURCE37() {
return MISSOURCE37;
}

public byte getMISSOURCE38() {
return MISSOURCE38;
}

public byte getMISSOURCE39() {
return MISSOURCE39;
}

public byte getMISSOURCE40() {
return MISSOURCE40;
}

public byte getMISSOURCE41() {
return MISSOURCE41;
}

public byte getMLAGST() {
return MLAGST;
}

public byte getMLAGSTU() {
return MLAGSTU;
}

public byte getMLFUTR() {
return MLFUTR;
}

public byte getMLIVED() {
return MLIVED;
}

public short getMLIVEDC1() {
return MLIVEDC1;
}

public short getMLIVEDC2() {
return MLIVEDC2;
}

public short getMLIVEDC3() {
return MLIVEDC3;
}

public short getMLIVEDC4() {
return MLIVEDC4;
}

public short getMLIVEDC5() {
return MLIVEDC5;
}

public byte getMLIVEDIST() {
return MLIVEDIST;
}

public byte getMLIVEDIST5() {
return MLIVEDIST5;
}

public byte getMLIVEDISTF() {
return MLIVEDISTF;
}

public byte getMLRNOT1() {
return MLRNOT1;
}

public byte getMLRNOT10() {
return MLRNOT10;
}

public byte getMLRNOT11() {
return MLRNOT11;
}

public byte getMLRNOT12() {
return MLRNOT12;
}

public byte getMLRNOT13() {
return MLRNOT13;
}

public byte getMLRNOT2() {
return MLRNOT2;
}

public byte getMLRNOT3() {
return MLRNOT3;
}

public byte getMLRNOT4() {
return MLRNOT4;
}

public byte getMLRNOT5() {
return MLRNOT5;
}

public byte getMLRNOT6() {
return MLRNOT6;
}

public byte getMLRNOT7() {
return MLRNOT7;
}

public byte getMLRNOT8() {
return MLRNOT8;
}

public byte getMLRNOT9() {
return MLRNOT9;
}

public byte getMLRNOT97() {
return MLRNOT97;
}

public byte getMLSTATCHK() {
return MLSTATCHK;
}

public byte getMLWKFPT() {
return MLWKFPT;
}

public byte getMNABROAD() {
return MNABROAD;
}

public byte getMNLIVED() {
return MNLIVED;
}

public byte getMNMOVES() {
return MNMOVES;
}

public byte getMNOTHERC() {
return MNOTHERC;
}

public int getMNPID() {
return MNPID;
}

public byte getMNPNO() {
return MNPNO;
}

public int getMNSPID() {
return MNSPID;
}

public byte getMNSPNO() {
return MNSPNO;
}

public byte getMOBCOMP() {
return MOBCOMP;
}

public byte getMOBUSE() {
return MOBUSE;
}

public byte getMONTH() {
return MONTH;
}

public byte getMOVDIR() {
return MOVDIR;
}

public byte getMOVEOTH_CODE() {
return MOVEOTH_CODE;
}

public byte getMOVY11() {
return MOVY11;
}

public byte getMOVY12() {
return MOVY12;
}

public byte getMOVY13() {
return MOVY13;
}

public byte getMOVY14() {
return MOVY14;
}

public byte getMOVY15() {
return MOVY15;
}

public byte getMOVY16() {
return MOVY16;
}

public byte getMREASON1() {
return MREASON1;
}

public byte getMREASON2() {
return MREASON2;
}

public byte getMREASON3() {
return MREASON3;
}

public byte getMREASON4() {
return MREASON4;
}

public byte getMREASON5() {
return MREASON5;
}

public byte getMREASON6() {
return MREASON6;
}

public byte getMREASON7() {
return MREASON7;
}

public byte getMREASON97() {
return MREASON97;
}

public byte getMREASONO_CODE() {
return MREASONO_CODE;
}

public byte getMRETURNED() {
return MRETURNED;
}

public byte getMSTATCH1() {
return MSTATCH1;
}

public byte getMSTATCH2() {
return MSTATCH2;
}

public byte getMSTATCH3() {
return MSTATCH3;
}

public byte getMSTATCH4() {
return MSTATCH4;
}

public short getMSTATSAM() {
return MSTATSAM;
}

public byte getMSTATSAMN() {
return MSTATSAMN;
}

public byte getMVEVER() {
return MVEVER;
}

public byte getMVMNTH() {
return MVMNTH;
}

public short getMVYR() {
return MVYR;
}

public byte getMWHRS() {
return MWHRS;
}

public byte getMWMIN() {
return MWMIN;
}

public byte getN1619ABS() {
return N1619ABS;
}

public byte getNADOPTCH() {
return NADOPTCH;
}

public byte getNAIDXHH() {
return NAIDXHH;
}

public byte getNATID1() {
return NATID1;
}

public byte getNATID2() {
return NATID2;
}

public byte getNATID3() {
return NATID3;
}

public byte getNATID4() {
return NATID4;
}

public byte getNATID5() {
return NATID5;
}

public byte getNATID6() {
return NATID6;
}

public byte getNATID97() {
return NATID97;
}

public byte getNCH10() {
return NCH10;
}

public byte getNCH10TO15() {
return NCH10TO15;
}

public byte getNCH14RESP() {
return NCH14RESP;
}

public byte getNCH3RESP() {
return NCH3RESP;
}

public byte getNCH415RESP() {
return NCH415RESP;
}

public byte getNCH5RESP() {
return NCH5RESP;
}

public byte getNCH5TO15() {
return NCH5TO15;
}

public byte getNCH8RESP() {
return NCH8RESP;
}

public byte getNCHILD() {
return NCHILD;
}

public short getNCHILD_DV() {
return NCHILD_DV;
}

public byte getNCHRESP() {
return NCHRESP;
}

public byte getNCHUNDER16() {
return NCHUNDER16;
}

public short getNCIGS() {
return NCIGS;
}

public byte getNCRR1() {
return NCRR1;
}

public byte getNCRR11() {
return NCRR11;
}

public byte getNCRR12() {
return NCRR12;
}

public byte getNCRR3() {
return NCRR3;
}

public byte getNCRR4() {
return NCRR4;
}

public byte getNCRR5() {
return NCRR5;
}

public byte getNCRR6() {
return NCRR6;
}

public byte getNCRR8() {
return NCRR8;
}

public byte getNCRR9() {
return NCRR9;
}

public byte getNCRRM() {
return NCRRM;
}

public short getNCRRY4() {
return NCRRY4;
}

public byte getNDEPCHL_DV() {
return NDEPCHL_DV;
}

public byte getNETPUSE() {
return NETPUSE;
}

public byte getNETUSE() {
return NETUSE;
}

public byte getNEXTELSE1() {
return NEXTELSE1;
}

public byte getNEXTELSE2() {
return NEXTELSE2;
}

public byte getNEXTELSE3() {
return NEXTELSE3;
}

public byte getNEXTELSE4() {
return NEXTELSE4;
}

public byte getNEXTELSE5() {
return NEXTELSE5;
}

public byte getNEXTELSE6() {
return NEXTELSE6;
}

public byte getNEXTJOB1() {
return NEXTJOB1;
}

public byte getNEXTJOB2() {
return NEXTJOB2;
}

public byte getNEXTJOB3() {
return NEXTJOB3;
}

public byte getNEXTJOB4() {
return NEXTJOB4;
}

public byte getNEXTJOB5() {
return NEXTJOB5;
}

public byte getNEXTJOB6() {
return NEXTJOB6;
}

public byte getNEXTSTAT1() {
return NEXTSTAT1;
}

public byte getNEXTSTAT2() {
return NEXTSTAT2;
}

public byte getNEXTSTAT3() {
return NEXTSTAT3;
}

public byte getNEXTSTAT4() {
return NEXTSTAT4;
}

public byte getNEXTSTAT5() {
return NEXTSTAT5;
}

public byte getNEXTSTAT6() {
return NEXTSTAT6;
}

public byte getNFH01() {
return NFH01;
}

public byte getNFH02() {
return NFH02;
}

public byte getNFH03() {
return NFH03;
}

public byte getNFH04() {
return NFH04;
}

public byte getNFH05() {
return NFH05;
}

public byte getNFH06() {
return NFH06;
}

public byte getNFH07() {
return NFH07;
}

public byte getNFH08() {
return NFH08;
}

public byte getNFH09() {
return NFH09;
}

public byte getNFH10() {
return NFH10;
}

public byte getNFH11() {
return NFH11;
}

public byte getNFH12() {
return NFH12;
}

public byte getNFH13() {
return NFH13;
}

public byte getNFH14() {
return NFH14;
}

public byte getNFH15() {
return NFH15;
}

public byte getNFH16() {
return NFH16;
}

public byte getNFH18() {
return NFH18;
}

public byte getNFH19() {
return NFH19;
}

public byte getNFH20() {
return NFH20;
}

public byte getNFH21() {
return NFH21;
}

public byte getNFH22() {
return NFH22;
}

public byte getNFH23() {
return NFH23;
}

public byte getNFH24() {
return NFH24;
}

public byte getNFH25() {
return NFH25;
}

public byte getNFH26() {
return NFH26;
}

public byte getNFH27() {
return NFH27;
}

public byte getNFH28() {
return NFH28;
}

public byte getNFH29() {
return NFH29;
}

public byte getNFH30() {
return NFH30;
}

public byte getNFH31() {
return NFH31;
}

public byte getNFH32() {
return NFH32;
}

public byte getNFH33() {
return NFH33;
}

public byte getNFH34() {
return NFH34;
}

public byte getNFH35() {
return NFH35;
}

public byte getNFH36() {
return NFH36;
}

public byte getNFH37() {
return NFH37;
}

public byte getNFH38() {
return NFH38;
}

public byte getNFH39() {
return NFH39;
}

public byte getNFH40() {
return NFH40;
}

public byte getNFH41() {
return NFH41;
}

public byte getNGCSE5() {
return NGCSE5;
}

public byte getNGCSEENG() {
return NGCSEENG;
}

public byte getNGCSEMAT() {
return NGCSEMAT;
}

public byte getNGRP_DV() {
return NGRP_DV;
}

public byte getNHIQUAL_DV() {
return NHIQUAL_DV;
}

public byte getNIACT() {
return NIACT;
}

public byte getNIREL() {
return NIREL;
}

public byte getNISERPS() {
return NISERPS;
}

public byte getNMAR() {
return NMAR;
}

public byte getNMPSP_DV() {
return NMPSP_DV;
}

public byte getNNATCH() {
return NNATCH;
}

public byte getNNEWBORN() {
return NNEWBORN;
}

public byte getNNMPSP_DV() {
return NNMPSP_DV;
}

public byte getNNSIB_DV() {
return NNSIB_DV;
}

public byte getNNSSIB_DV() {
return NNSSIB_DV;
}

public byte getNOPAYA() {
return NOPAYA;
}

public byte getNOPAYB() {
return NOPAYB;
}

public byte getNOTEMPCHK() {
return NOTEMPCHK;
}

public byte getNPDINDLEARN() {
return NPDINDLEARN;
}

public byte getNPENSIONER_DV() {
return NPENSIONER_DV;
}

public byte getNPNS_DV() {
return NPNS_DV;
}

public byte getNPN_DV() {
return NPN_DV;
}

public byte getNQFHIGH_DV() {
return NQFHIGH_DV;
}

public byte getNRELS3() {
return NRELS3;
}

public byte getNRELS4() {
return NRELS4;
}

public byte getNRELS5() {
return NRELS5;
}

public byte getNRELS6() {
return NRELS6;
}

public byte getNRELS7() {
return NRELS7;
}

public byte getNRELS8() {
return NRELS8;
}

public byte getNUNDER16ABS() {
return NUNDER16ABS;
}

public byte getNUNMPSP_DV() {
return NUNMPSP_DV;
}

public byte getNXTENDREAS1() {
return NXTENDREAS1;
}

public byte getNXTENDREAS10() {
return NXTENDREAS10;
}

public byte getNXTENDREAS11() {
return NXTENDREAS11;
}

public byte getNXTENDREAS2() {
return NXTENDREAS2;
}

public byte getNXTENDREAS3() {
return NXTENDREAS3;
}

public byte getNXTENDREAS4() {
return NXTENDREAS4;
}

public byte getNXTENDREAS5() {
return NXTENDREAS5;
}

public byte getNXTENDREAS6() {
return NXTENDREAS6;
}

public byte getNXTENDREAS7() {
return NXTENDREAS7;
}

public byte getNXTENDREAS8() {
return NXTENDREAS8;
}

public byte getNXTENDREAS9() {
return NXTENDREAS9;
}

public byte getNXTENDREAS97() {
return NXTENDREAS97;
}

public byte getNXTJBENDD() {
return NXTJBENDD;
}

public byte getNXTJBENDM() {
return NXTJBENDM;
}

public short getNXTJBENDY4() {
return NXTJBENDY4;
}

public byte getNXTJBES() {
return NXTJBES;
}

public byte getNXTJBHRS() {
return NXTJBHRS;
}

public byte getNXTST() {
return NXTST;
}

public byte getNXTSTELSE() {
return NXTSTELSE;
}

public byte getNXTSTENDD() {
return NXTSTENDD;
}

public byte getNXTSTENDM() {
return NXTSTENDM;
}

public short getNXTSTENDY4() {
return NXTSTENDY4;
}

public byte getOCIMPA() {
return OCIMPA;
}

public byte getOCIMPB() {
return OCIMPB;
}

public byte getOCIMPE() {
return OCIMPE;
}

public byte getOCIMPF() {
return OCIMPF;
}

public byte getOCIMPI() {
return OCIMPI;
}

public byte getOCIMPK() {
return OCIMPK;
}

public byte getOCIMPL() {
return OCIMPL;
}

public byte getODDSAPPLY() {
return ODDSAPPLY;
}

public byte getODDSEMP1() {
return ODDSEMP1;
}

public byte getODDSEMP3() {
return ODDSEMP3;
}

public byte getODDSQUAL() {
return ODDSQUAL;
}

public byte getODDSSCHOL() {
return ODDSSCHOL;
}

public byte getOHCH16() {
return OHCH16;
}

public byte getOPRLG() {
return OPRLG;
}

public byte getOPRLG0() {
return OPRLG0;
}

public byte getOPRLG0NI() {
return OPRLG0NI;
}

public byte getOPRLG1() {
return OPRLG1;
}

public byte getORIGADD() {
return ORIGADD;
}

public byte getOTHBEN1() {
return OTHBEN1;
}

public byte getOTHBEN2() {
return OTHBEN2;
}

public byte getOTHBEN3() {
return OTHBEN3;
}

public byte getOTHBEN4() {
return OTHBEN4;
}

public byte getOTHBEN5() {
return OTHBEN5;
}

public byte getOTHBEN6() {
return OTHBEN6;
}

public byte getOTHBEN7() {
return OTHBEN7;
}

public byte getOTHBEN8() {
return OTHBEN8;
}

public byte getOTHBEN9() {
return OTHBEN9;
}

public byte getOTHBEN96() {
return OTHBEN96;
}

public byte getOTHBEN97() {
return OTHBEN97;
}

public byte getOTHCONT() {
return OTHCONT;
}

public byte getOVTNSET() {
return OVTNSET;
}

public byte getOVTPAY() {
return OVTPAY;
}

protected double OVTRATE() {
return OVTRATE;
}

public byte getOVTREST() {
return OVTREST;
}

public byte getPAAGE() {
return PAAGE;
}

public byte getPAAID1() {
return PAAID1;
}

public byte getPAAID2() {
return PAAID2;
}

public byte getPAAID3() {
return PAAID3;
}

public byte getPAAID4() {
return PAAID4;
}

public byte getPAAID5() {
return PAAID5;
}

public byte getPAAID6() {
return PAAID6;
}

public byte getPAAID7() {
return PAAID7;
}

public byte getPAAID8() {
return PAAID8;
}

public byte getPAAID96() {
return PAAID96;
}

public byte getPAAID97() {
return PAAID97;
}

public byte getPACOB() {
return PACOB;
}

public byte getPACON() {
return PACON;
}

public byte getPAFAR() {
return PAFAR;
}

public byte getPAIDU1() {
return PAIDU1;
}

public byte getPAIDU2() {
return PAIDU2;
}

public byte getPAIDU3() {
return PAIDU3;
}

public byte getPAIDU4() {
return PAIDU4;
}

public byte getPAIDU5() {
return PAIDU5;
}

public byte getPAIDU6() {
return PAIDU6;
}

public byte getPAIDU7() {
return PAIDU7;
}

public byte getPAIDU8() {
return PAIDU8;
}

public byte getPAIDU96() {
return PAIDU96;
}

public byte getPAIDU97() {
return PAIDU97;
}

public byte getPAJU() {
return PAJU;
}

public byte getPALONE() {
return PALONE;
}

public byte getPAMOSTCON() {
return PAMOSTCON;
}

public byte getPANSSEC5_DV() {
return PANSSEC5_DV;
}

public byte getPAREVE() {
return PAREVE;
}

public byte getPARMAR() {
return PARMAR;
}

public byte getPARSCH() {
return PARSCH;
}

public byte getPASEE() {
return PASEE;
}

public short getPASOC00_CC() {
return PASOC00_CC;
}

public short getPASOC10_CC() {
return PASOC10_CC;
}

public byte getPASOC90_CC() {
return PASOC90_CC;
}

protected double PAYAMTA() {
return PAYAMTA;
}

protected double PAYAMTB() {
return PAYAMTB;
}

protected double PAYDV() {
return PAYDV;
}

public byte getPAYFREQA() {
return PAYFREQA;
}

public byte getPAYFREQB() {
return PAYFREQB;
}

public byte getPAYGWC() {
return PAYGWC;
}

public byte getPAYNWC() {
return PAYNWC;
}

public byte getPAYRUK() {
return PAYRUK;
}

public byte getPAYTYP() {
return PAYTYP;
}

public byte getPAYUWC() {
return PAYUWC;
}

protected double PAYU_DV() {
return PAYU_DV;
}

public short getPBIRTHY() {
return PBIRTHY;
}

public byte getPBNFT1() {
return PBNFT1;
}

public byte getPBNFT10() {
return PBNFT10;
}

public byte getPBNFT11() {
return PBNFT11;
}

public byte getPBNFT12() {
return PBNFT12;
}

public byte getPBNFT13() {
return PBNFT13;
}

public byte getPBNFT2() {
return PBNFT2;
}

public byte getPBNFT3() {
return PBNFT3;
}

public byte getPBNFT4() {
return PBNFT4;
}

public byte getPBNFT5() {
return PBNFT5;
}

public byte getPBNFT6() {
return PBNFT6;
}

public byte getPBNFT7() {
return PBNFT7;
}

public byte getPBNFT8() {
return PBNFT8;
}

public byte getPBNFT9() {
return PBNFT9;
}

public byte getPBNFT96() {
return PBNFT96;
}

public byte getPDVAGE() {
return PDVAGE;
}

public byte getPEDCHPNO() {
return PEDCHPNO;
}

public byte getPENMEX() {
return PENMEX;
}

public byte getPENSIONER_DV() {
return PENSIONER_DV;
}

public byte getPHEAPPLIED() {
return PHEAPPLIED;
}

public int getPID() {
return PID;
}

public int getPIDP1() {
return PIDP1;
}

public int getPIDP2() {
return PIDP2;
}

public int getPIDP3() {
return PIDP3;
}

public int getPIDP4() {
return PIDP4;
}

public byte getPJBPTFT() {
return PJBPTFT;
}

public byte getPJSPTFT() {
return PJSPTFT;
}

public byte getPLIENG() {
return PLIENG;
}

public byte getPLITRANS() {
return PLITRANS;
}

public short getPLNOWM() {
return PLNOWM;
}

public short getPLNOWY4() {
return PLNOWY4;
}

public int getPN1PID() {
return PN1PID;
}

public byte getPN1PNO() {
return PN1PNO;
}

public byte getPN1SEX() {
return PN1SEX;
}

public int getPN2PID() {
return PN2PID;
}

public byte getPN2PNO() {
return PN2PNO;
}

public byte getPN2SEX() {
return PN2SEX;
}

public int getPNS1PID() {
return PNS1PID;
}

public byte getPNS1PNO() {
return PNS1PNO;
}

public byte getPNS1SEX() {
return PNS1SEX;
}

public int getPNS2PID() {
return PNS2PID;
}

public byte getPNS2PNO() {
return PNS2PNO;
}

public byte getPNS2SEX() {
return PNS2SEX;
}

public byte getPODDSAPPLY() {
return PODDSAPPLY;
}

public byte getPODDSEMP1() {
return PODDSEMP1;
}

public byte getPODDSEMP3() {
return PODDSEMP3;
}

public byte getPODDSQUAL() {
return PODDSQUAL;
}

public byte getPODDSSCHOL() {
return PODDSSCHOL;
}

public int getPPID() {
return PPID;
}

public byte getPPPEX() {
return PPPEX;
}

public byte getPPPEXM() {
return PPPEXM;
}

public byte getPPSEX() {
return PPSEX;
}

public byte getPRAISEKID() {
return PRAISEKID;
}

public byte getPREARN() {
return PREARN;
}

public byte getPREARNA() {
return PREARNA;
}

public byte getPREARNW() {
return PREARNW;
}

public byte getPREASON() {
return PREASON;
}

public byte getPREG() {
return PREG;
}

public byte getPREGEND1() {
return PREGEND1;
}

public byte getPREGEND2() {
return PREGEND2;
}

public byte getPREGEND3() {
return PREGEND3;
}

public byte getPREGFERT1() {
return PREGFERT1;
}

public byte getPREGFERT2() {
return PREGFERT2;
}

public byte getPREGFERT3() {
return PREGFERT3;
}

public byte getPREGFT11() {
return PREGFT11;
}

public byte getPREGFT12() {
return PREGFT12;
}

public boolean getPREGFT13() {
return PREGFT13;
}

public byte getPREGFT21() {
return PREGFT21;
}

public byte getPREGFT22() {
return PREGFT22;
}

public boolean getPREGFT23() {
return PREGFT23;
}

public byte getPREGFT31() {
return PREGFT31;
}

public byte getPREGFT32() {
return PREGFT32;
}

public boolean getPREGFT33() {
return PREGFT33;
}

public byte getPREGFT41() {
return PREGFT41;
}

public byte getPREGFT42() {
return PREGFT42;
}

public boolean getPREGFT43() {
return PREGFT43;
}

public byte getPREGFT51() {
return PREGFT51;
}

public byte getPREGFT52() {
return PREGFT52;
}

public boolean getPREGFT53() {
return PREGFT53;
}

public byte getPREGFT61() {
return PREGFT61;
}

public byte getPREGFT62() {
return PREGFT62;
}

public boolean getPREGFT63() {
return PREGFT63;
}

public byte getPREGFT961() {
return PREGFT961;
}

public byte getPREGFT962() {
return PREGFT962;
}

public boolean getPREGFT963() {
return PREGFT963;
}

public byte getPREGM1() {
return PREGM1;
}

public byte getPREGM2() {
return PREGM2;
}

public byte getPREGM3() {
return PREGM3;
}

public byte getPREGOUT1() {
return PREGOUT1;
}

public byte getPREGOUT2() {
return PREGOUT2;
}

public byte getPREGOUT3() {
return PREGOUT3;
}

public byte getPREGSMK11() {
return PREGSMK11;
}

public byte getPREGSMK12() {
return PREGSMK12;
}

public byte getPREGSMK13() {
return PREGSMK13;
}

public byte getPREGSMK21() {
return PREGSMK21;
}

public byte getPREGSMK22() {
return PREGSMK22;
}

public byte getPREGSMK23() {
return PREGSMK23;
}

public byte getPREGSMK31() {
return PREGSMK31;
}

public byte getPREGSMK32() {
return PREGSMK32;
}

public byte getPREGSMK33() {
return PREGSMK33;
}

public byte getPREGSMOKE1() {
return PREGSMOKE1;
}

public byte getPREGSMOKE2() {
return PREGSMOKE2;
}

public byte getPREGSMOKE3() {
return PREGSMOKE3;
}

public byte getPREGSPD1() {
return PREGSPD1;
}

public boolean getPREGSPD2() {
return PREGSPD2;
}

public boolean getPREGSPD3() {
return PREGSPD3;
}

public short getPREGY41() {
return PREGY41;
}

public short getPREGY42() {
return PREGY42;
}

public short getPREGY43() {
return PREGY43;
}

public byte getPREL() {
return PREL;
}

public byte getPRFITB() {
return PRFITB;
}

public byte getPRFITBA() {
return PRFITBA;
}

public byte getPRFITBW() {
return PRFITBW;
}

public byte getPS1() {
return PS1;
}

public byte getPS10() {
return PS10;
}

public byte getPS11() {
return PS11;
}

public byte getPS12() {
return PS12;
}

public byte getPS13() {
return PS13;
}

public byte getPS14() {
return PS14;
}

public byte getPS15() {
return PS15;
}

public byte getPS16() {
return PS16;
}

public byte getPS17() {
return PS17;
}

public byte getPS18() {
return PS18;
}

public byte getPS19() {
return PS19;
}

public byte getPS2() {
return PS2;
}

public byte getPS20() {
return PS20;
}

public byte getPS21() {
return PS21;
}

public byte getPS22() {
return PS22;
}

public byte getPS23() {
return PS23;
}

public byte getPS24() {
return PS24;
}

public byte getPS25() {
return PS25;
}

public byte getPS26() {
return PS26;
}

public byte getPS27() {
return PS27;
}

public byte getPS28() {
return PS28;
}

public byte getPS29() {
return PS29;
}

public byte getPS3() {
return PS3;
}

public byte getPS30() {
return PS30;
}

public byte getPS31() {
return PS31;
}

public byte getPS32() {
return PS32;
}

public byte getPS4() {
return PS4;
}

public byte getPS5() {
return PS5;
}

public byte getPS6() {
return PS6;
}

public byte getPS7() {
return PS7;
}

public byte getPS8() {
return PS8;
}

public byte getPS9() {
return PS9;
}

public byte getPSDQA_DV() {
return PSDQA_DV;
}

public byte getPSDQB_DV() {
return PSDQB_DV;
}

public byte getPSDQC_DV() {
return PSDQC_DV;
}

public byte getPSNUMCH() {
return PSNUMCH;
}

public int getPSU() {
return PSU;
}

public byte getPUNIFIN1() {
return PUNIFIN1;
}

public byte getPUNISUB1() {
return PUNISUB1;
}

public byte getPVTPYSET() {
return PVTPYSET;
}

public int getPXPBORROW() {
return PXPBORROW;
}

public int getPXPEARN1() {
return PXPEARN1;
}

public byte getPXPEARN1DK() {
return PXPEARN1DK;
}

public int getPXPEARN3() {
return PXPEARN3;
}

public byte getPXPEARN3DK() {
return PXPEARN3DK;
}

public int getPXPEARNG1() {
return PXPEARNG1;
}

public byte getPXPEARNG1DK() {
return PXPEARNG1DK;
}

public int getPXPEARNG3() {
return PXPEARNG3;
}

public byte getPXPEARNG3DK() {
return PXPEARNG3DK;
}

public int getPXPTUITION() {
return PXPTUITION;
}

public byte getPYENRL() {
return PYENRL;
}

public byte getQFHIGH() {
return QFHIGH;
}

public boolean getQFHIGHFL_DV() {
return QFHIGHFL_DV;
}

public byte getQFHIGH_DV() {
return QFHIGH_DV;
}

public byte getQFVOC1() {
return QFVOC1;
}

public byte getQFVOC10() {
return QFVOC10;
}

public byte getQFVOC11() {
return QFVOC11;
}

public byte getQFVOC12() {
return QFVOC12;
}

public byte getQFVOC13() {
return QFVOC13;
}

public byte getQFVOC14() {
return QFVOC14;
}

public byte getQFVOC15() {
return QFVOC15;
}

public byte getQFVOC2() {
return QFVOC2;
}

public byte getQFVOC3() {
return QFVOC3;
}

public byte getQFVOC4() {
return QFVOC4;
}

public byte getQFVOC5() {
return QFVOC5;
}

public byte getQFVOC6() {
return QFVOC6;
}

public byte getQFVOC7() {
return QFVOC7;
}

public byte getQFVOC8() {
return QFVOC8;
}

public byte getQFVOC9() {
return QFVOC9;
}

public byte getQFVOC96() {
return QFVOC96;
}

public byte getQUALNEW1() {
return QUALNEW1;
}

public byte getQUALNEW10() {
return QUALNEW10;
}

public byte getQUALNEW11() {
return QUALNEW11;
}

public byte getQUALNEW13() {
return QUALNEW13;
}

public byte getQUALNEW15() {
return QUALNEW15;
}

public byte getQUALNEW16() {
return QUALNEW16;
}

public byte getQUALNEW17() {
return QUALNEW17;
}

public byte getQUALNEW18() {
return QUALNEW18;
}

public byte getQUALNEW19() {
return QUALNEW19;
}

public byte getQUALNEW2() {
return QUALNEW2;
}

public byte getQUALNEW20() {
return QUALNEW20;
}

public byte getQUALNEW21() {
return QUALNEW21;
}

public byte getQUALNEW22() {
return QUALNEW22;
}

public byte getQUALNEW23() {
return QUALNEW23;
}

public byte getQUALNEW24() {
return QUALNEW24;
}

public byte getQUALNEW25() {
return QUALNEW25;
}

public byte getQUALNEW26() {
return QUALNEW26;
}

public byte getQUALNEW27() {
return QUALNEW27;
}

public byte getQUALNEW28() {
return QUALNEW28;
}

public byte getQUALNEW29() {
return QUALNEW29;
}

public byte getQUALNEW3() {
return QUALNEW3;
}

public byte getQUALNEW30() {
return QUALNEW30;
}

public byte getQUALNEW31() {
return QUALNEW31;
}

public byte getQUALNEW32() {
return QUALNEW32;
}

public byte getQUALNEW33() {
return QUALNEW33;
}

public byte getQUALNEW4() {
return QUALNEW4;
}

public byte getQUALNEW5() {
return QUALNEW5;
}

public byte getQUALNEW6() {
return QUALNEW6;
}

public byte getQUALNEW7() {
return QUALNEW7;
}

public byte getQUALNEW8() {
return QUALNEW8;
}

public byte getQUALNEW9() {
return QUALNEW9;
}

public byte getQUALOC() {
return QUALOC;
}

public byte getQUARREL() {
return QUARREL;
}

public byte getQUARTER() {
return QUARTER;
}

public byte getRACEL() {
return RACEL;
}

public byte getRACELAT() {
return RACELAT;
}

public byte getRACELBT() {
return RACELBT;
}

public byte getRACELMT() {
return RACELMT;
}

public byte getRACELOT_CODE() {
return RACELOT_CODE;
}

public short getRACELO_CODE() {
return RACELO_CODE;
}

public byte getRACELT() {
return RACELT;
}

public byte getRACELWT() {
return RACELWT;
}

public byte getRACEL_DV() {
return RACEL_DV;
}

public byte getREASEND10_1() {
return REASEND10_1;
}

public byte getREASEND10_2() {
return REASEND10_2;
}

public byte getREASEND10_3() {
return REASEND10_3;
}

public byte getREASEND10_4() {
return REASEND10_4;
}

public byte getREASEND10_5() {
return REASEND10_5;
}

public byte getREASEND10_6() {
return REASEND10_6;
}

public byte getREASEND11_1() {
return REASEND11_1;
}

public byte getREASEND11_2() {
return REASEND11_2;
}

public byte getREASEND11_3() {
return REASEND11_3;
}

public byte getREASEND11_4() {
return REASEND11_4;
}

public byte getREASEND11_5() {
return REASEND11_5;
}

public byte getREASEND11_6() {
return REASEND11_6;
}

public byte getREASEND1_1() {
return REASEND1_1;
}

public byte getREASEND1_2() {
return REASEND1_2;
}

public byte getREASEND1_3() {
return REASEND1_3;
}

public byte getREASEND1_4() {
return REASEND1_4;
}

public byte getREASEND1_5() {
return REASEND1_5;
}

public byte getREASEND1_6() {
return REASEND1_6;
}

public byte getREASEND2_1() {
return REASEND2_1;
}

public byte getREASEND2_2() {
return REASEND2_2;
}

public byte getREASEND2_3() {
return REASEND2_3;
}

public byte getREASEND2_4() {
return REASEND2_4;
}

public byte getREASEND2_5() {
return REASEND2_5;
}

public byte getREASEND2_6() {
return REASEND2_6;
}

public byte getREASEND3_1() {
return REASEND3_1;
}

public byte getREASEND3_2() {
return REASEND3_2;
}

public byte getREASEND3_3() {
return REASEND3_3;
}

public byte getREASEND3_4() {
return REASEND3_4;
}

public byte getREASEND3_5() {
return REASEND3_5;
}

public byte getREASEND3_6() {
return REASEND3_6;
}

public byte getREASEND4_1() {
return REASEND4_1;
}

public byte getREASEND4_2() {
return REASEND4_2;
}

public byte getREASEND4_3() {
return REASEND4_3;
}

public byte getREASEND4_4() {
return REASEND4_4;
}

public byte getREASEND4_5() {
return REASEND4_5;
}

public byte getREASEND4_6() {
return REASEND4_6;
}

public byte getREASEND5_1() {
return REASEND5_1;
}

public byte getREASEND5_2() {
return REASEND5_2;
}

public byte getREASEND5_3() {
return REASEND5_3;
}

public byte getREASEND5_4() {
return REASEND5_4;
}

public byte getREASEND5_5() {
return REASEND5_5;
}

public byte getREASEND5_6() {
return REASEND5_6;
}

public byte getREASEND6_1() {
return REASEND6_1;
}

public byte getREASEND6_2() {
return REASEND6_2;
}

public byte getREASEND6_3() {
return REASEND6_3;
}

public byte getREASEND6_4() {
return REASEND6_4;
}

public byte getREASEND6_5() {
return REASEND6_5;
}

public byte getREASEND6_6() {
return REASEND6_6;
}

public byte getREASEND7_1() {
return REASEND7_1;
}

public byte getREASEND7_2() {
return REASEND7_2;
}

public byte getREASEND7_3() {
return REASEND7_3;
}

public byte getREASEND7_4() {
return REASEND7_4;
}

public byte getREASEND7_5() {
return REASEND7_5;
}

public byte getREASEND7_6() {
return REASEND7_6;
}

public byte getREASEND8_1() {
return REASEND8_1;
}

public byte getREASEND8_2() {
return REASEND8_2;
}

public byte getREASEND8_3() {
return REASEND8_3;
}

public byte getREASEND8_4() {
return REASEND8_4;
}

public byte getREASEND8_5() {
return REASEND8_5;
}

public byte getREASEND8_6() {
return REASEND8_6;
}

public byte getREASEND97_1() {
return REASEND97_1;
}

public byte getREASEND97_2() {
return REASEND97_2;
}

public byte getREASEND97_3() {
return REASEND97_3;
}

public byte getREASEND97_4() {
return REASEND97_4;
}

public byte getREASEND97_5() {
return REASEND97_5;
}

public byte getREASEND97_6() {
return REASEND97_6;
}

public byte getREASEND9_1() {
return REASEND9_1;
}

public byte getREASEND9_2() {
return REASEND9_2;
}

public byte getREASEND9_3() {
return REASEND9_3;
}

public byte getREASEND9_4() {
return REASEND9_4;
}

public byte getREASEND9_5() {
return REASEND9_5;
}

public byte getREASEND9_6() {
return REASEND9_6;
}

public byte getRELKID() {
return RELKID;
}

public byte getRELUP() {
return RELUP;
}

public byte getREMAIL_CODE() {
return REMAIL_CODE;
}

public short getREMCNTRY1() {
return REMCNTRY1;
}

public short getREMCNTRY2() {
return REMCNTRY2;
}

public short getREMCNTRY3() {
return REMCNTRY3;
}

public short getREMCNTRY4() {
return REMCNTRY4;
}

public byte getREMHOW1() {
return REMHOW1;
}

public byte getREMHOW2() {
return REMHOW2;
}

public byte getREMHOW3() {
return REMHOW3;
}

public byte getREMHOW4() {
return REMHOW4;
}

public byte getREMIT1() {
return REMIT1;
}

public byte getREMIT2() {
return REMIT2;
}

public byte getREMIT3() {
return REMIT3;
}

public byte getREMIT4() {
return REMIT4;
}

public byte getREMIT5() {
return REMIT5;
}

public short getREMITAMT1() {
return REMITAMT1;
}

public int getREMITAMT2() {
return REMITAMT2;
}

public short getREMITAMT3() {
return REMITAMT3;
}

public int getREMITAMT4() {
return REMITAMT4;
}

public byte getREMITFREQ1() {
return REMITFREQ1;
}

public byte getREMITFREQ2() {
return REMITFREQ2;
}

public byte getREMITFREQ3() {
return REMITFREQ3;
}

public byte getREMITFREQ4() {
return REMITFREQ4;
}

public byte getREMITREG1() {
return REMITREG1;
}

public byte getREMITREG2() {
return REMITREG2;
}

public byte getREMITREG3() {
return REMITREG3;
}

public byte getREMITREG4() {
return REMITREG4;
}

public byte getREMITUSUAL1() {
return REMITUSUAL1;
}

public byte getREMITUSUAL2() {
return REMITUSUAL2;
}

public byte getREMITUSUAL3() {
return REMITUSUAL3;
}

public byte getREMITUSUAL4() {
return REMITUSUAL4;
}

public boolean getREMUSAMT1() {
return REMUSAMT1;
}

public short getREMUSAMT2() {
return REMUSAMT2;
}

public short getREMUSAMT3() {
return REMUSAMT3;
}

public short getREMUSAMT4() {
return REMUSAMT4;
}

public byte getRESATTACKED1_1() {
return RESATTACKED1_1;
}

public byte getRESATTACKED1_10() {
return RESATTACKED1_10;
}

public byte getRESATTACKED1_11() {
return RESATTACKED1_11;
}

public byte getRESATTACKED1_12() {
return RESATTACKED1_12;
}

public byte getRESATTACKED1_2() {
return RESATTACKED1_2;
}

public byte getRESATTACKED1_3() {
return RESATTACKED1_3;
}

public byte getRESATTACKED1_4() {
return RESATTACKED1_4;
}

public byte getRESATTACKED1_5() {
return RESATTACKED1_5;
}

public byte getRESATTACKED1_6() {
return RESATTACKED1_6;
}

public byte getRESATTACKED1_7() {
return RESATTACKED1_7;
}

public byte getRESATTACKED1_8() {
return RESATTACKED1_8;
}

public byte getRESATTACKED1_9() {
return RESATTACKED1_9;
}

public byte getRESATTACKED2_1() {
return RESATTACKED2_1;
}

public byte getRESATTACKED2_10() {
return RESATTACKED2_10;
}

public byte getRESATTACKED2_11() {
return RESATTACKED2_11;
}

public byte getRESATTACKED2_12() {
return RESATTACKED2_12;
}

public byte getRESATTACKED2_2() {
return RESATTACKED2_2;
}

public byte getRESATTACKED2_3() {
return RESATTACKED2_3;
}

public byte getRESATTACKED2_4() {
return RESATTACKED2_4;
}

public byte getRESATTACKED2_5() {
return RESATTACKED2_5;
}

public byte getRESATTACKED2_6() {
return RESATTACKED2_6;
}

public byte getRESATTACKED2_7() {
return RESATTACKED2_7;
}

public byte getRESATTACKED2_8() {
return RESATTACKED2_8;
}

public byte getRESATTACKED2_9() {
return RESATTACKED2_9;
}

public byte getRESATTACKED3_1() {
return RESATTACKED3_1;
}

public byte getRESATTACKED3_10() {
return RESATTACKED3_10;
}

public byte getRESATTACKED3_11() {
return RESATTACKED3_11;
}

public byte getRESATTACKED3_12() {
return RESATTACKED3_12;
}

public byte getRESATTACKED3_2() {
return RESATTACKED3_2;
}

public byte getRESATTACKED3_3() {
return RESATTACKED3_3;
}

public byte getRESATTACKED3_4() {
return RESATTACKED3_4;
}

public byte getRESATTACKED3_5() {
return RESATTACKED3_5;
}

public byte getRESATTACKED3_6() {
return RESATTACKED3_6;
}

public byte getRESATTACKED3_7() {
return RESATTACKED3_7;
}

public byte getRESATTACKED3_8() {
return RESATTACKED3_8;
}

public byte getRESATTACKED3_9() {
return RESATTACKED3_9;
}

public byte getRESATTACKED4_1() {
return RESATTACKED4_1;
}

public byte getRESATTACKED4_10() {
return RESATTACKED4_10;
}

public byte getRESATTACKED4_11() {
return RESATTACKED4_11;
}

public byte getRESATTACKED4_12() {
return RESATTACKED4_12;
}

public byte getRESATTACKED4_2() {
return RESATTACKED4_2;
}

public byte getRESATTACKED4_3() {
return RESATTACKED4_3;
}

public byte getRESATTACKED4_4() {
return RESATTACKED4_4;
}

public byte getRESATTACKED4_5() {
return RESATTACKED4_5;
}

public byte getRESATTACKED4_6() {
return RESATTACKED4_6;
}

public byte getRESATTACKED4_7() {
return RESATTACKED4_7;
}

public byte getRESATTACKED4_8() {
return RESATTACKED4_8;
}

public byte getRESATTACKED4_9() {
return RESATTACKED4_9;
}

public byte getRESATTACKED5_1() {
return RESATTACKED5_1;
}

public byte getRESATTACKED5_10() {
return RESATTACKED5_10;
}

public byte getRESATTACKED5_11() {
return RESATTACKED5_11;
}

public byte getRESATTACKED5_12() {
return RESATTACKED5_12;
}

public byte getRESATTACKED5_2() {
return RESATTACKED5_2;
}

public byte getRESATTACKED5_3() {
return RESATTACKED5_3;
}

public byte getRESATTACKED5_4() {
return RESATTACKED5_4;
}

public byte getRESATTACKED5_5() {
return RESATTACKED5_5;
}

public byte getRESATTACKED5_6() {
return RESATTACKED5_6;
}

public byte getRESATTACKED5_7() {
return RESATTACKED5_7;
}

public byte getRESATTACKED5_8() {
return RESATTACKED5_8;
}

public byte getRESATTACKED5_9() {
return RESATTACKED5_9;
}

public byte getRESATTACKED6_1() {
return RESATTACKED6_1;
}

public byte getRESATTACKED6_10() {
return RESATTACKED6_10;
}

public byte getRESATTACKED6_11() {
return RESATTACKED6_11;
}

public byte getRESATTACKED6_12() {
return RESATTACKED6_12;
}

public byte getRESATTACKED6_2() {
return RESATTACKED6_2;
}

public byte getRESATTACKED6_3() {
return RESATTACKED6_3;
}

public byte getRESATTACKED6_4() {
return RESATTACKED6_4;
}

public byte getRESATTACKED6_5() {
return RESATTACKED6_5;
}

public byte getRESATTACKED6_6() {
return RESATTACKED6_6;
}

public byte getRESATTACKED6_7() {
return RESATTACKED6_7;
}

public byte getRESATTACKED6_8() {
return RESATTACKED6_8;
}

public byte getRESATTACKED6_9() {
return RESATTACKED6_9;
}

public byte getRESATTACKED7_1() {
return RESATTACKED7_1;
}

public byte getRESATTACKED7_10() {
return RESATTACKED7_10;
}

public byte getRESATTACKED7_11() {
return RESATTACKED7_11;
}

public byte getRESATTACKED7_12() {
return RESATTACKED7_12;
}

public byte getRESATTACKED7_2() {
return RESATTACKED7_2;
}

public byte getRESATTACKED7_3() {
return RESATTACKED7_3;
}

public byte getRESATTACKED7_4() {
return RESATTACKED7_4;
}

public byte getRESATTACKED7_5() {
return RESATTACKED7_5;
}

public byte getRESATTACKED7_6() {
return RESATTACKED7_6;
}

public byte getRESATTACKED7_7() {
return RESATTACKED7_7;
}

public byte getRESATTACKED7_8() {
return RESATTACKED7_8;
}

public byte getRESATTACKED7_9() {
return RESATTACKED7_9;
}

public byte getRESATTACKED8_1() {
return RESATTACKED8_1;
}

public byte getRESATTACKED8_10() {
return RESATTACKED8_10;
}

public byte getRESATTACKED8_11() {
return RESATTACKED8_11;
}

public byte getRESATTACKED8_12() {
return RESATTACKED8_12;
}

public byte getRESATTACKED8_2() {
return RESATTACKED8_2;
}

public byte getRESATTACKED8_3() {
return RESATTACKED8_3;
}

public byte getRESATTACKED8_4() {
return RESATTACKED8_4;
}

public byte getRESATTACKED8_5() {
return RESATTACKED8_5;
}

public byte getRESATTACKED8_6() {
return RESATTACKED8_6;
}

public byte getRESATTACKED8_7() {
return RESATTACKED8_7;
}

public byte getRESATTACKED8_8() {
return RESATTACKED8_8;
}

public byte getRESATTACKED8_9() {
return RESATTACKED8_9;
}

public byte getRESATTACKED96_1() {
return RESATTACKED96_1;
}

public byte getRESATTACKED96_10() {
return RESATTACKED96_10;
}

public byte getRESATTACKED96_11() {
return RESATTACKED96_11;
}

public byte getRESATTACKED96_12() {
return RESATTACKED96_12;
}

public byte getRESATTACKED96_2() {
return RESATTACKED96_2;
}

public byte getRESATTACKED96_3() {
return RESATTACKED96_3;
}

public byte getRESATTACKED96_4() {
return RESATTACKED96_4;
}

public byte getRESATTACKED96_5() {
return RESATTACKED96_5;
}

public byte getRESATTACKED96_6() {
return RESATTACKED96_6;
}

public byte getRESATTACKED96_7() {
return RESATTACKED96_7;
}

public byte getRESATTACKED96_8() {
return RESATTACKED96_8;
}

public byte getRESATTACKED96_9() {
return RESATTACKED96_9;
}

public byte getRESATTACKED97_1() {
return RESATTACKED97_1;
}

public byte getRESATTACKED97_10() {
return RESATTACKED97_10;
}

public byte getRESATTACKED97_11() {
return RESATTACKED97_11;
}

public byte getRESATTACKED97_12() {
return RESATTACKED97_12;
}

public byte getRESATTACKED97_2() {
return RESATTACKED97_2;
}

public byte getRESATTACKED97_3() {
return RESATTACKED97_3;
}

public byte getRESATTACKED97_4() {
return RESATTACKED97_4;
}

public byte getRESATTACKED97_5() {
return RESATTACKED97_5;
}

public byte getRESATTACKED97_6() {
return RESATTACKED97_6;
}

public byte getRESATTACKED97_7() {
return RESATTACKED97_7;
}

public byte getRESATTACKED97_8() {
return RESATTACKED97_8;
}

public byte getRESATTACKED97_9() {
return RESATTACKED97_9;
}

public byte getRESATTACKED9_1() {
return RESATTACKED9_1;
}

public byte getRESATTACKED9_10() {
return RESATTACKED9_10;
}

public byte getRESATTACKED9_11() {
return RESATTACKED9_11;
}

public byte getRESATTACKED9_12() {
return RESATTACKED9_12;
}

public byte getRESATTACKED9_2() {
return RESATTACKED9_2;
}

public byte getRESATTACKED9_3() {
return RESATTACKED9_3;
}

public byte getRESATTACKED9_4() {
return RESATTACKED9_4;
}

public byte getRESATTACKED9_5() {
return RESATTACKED9_5;
}

public byte getRESATTACKED9_6() {
return RESATTACKED9_6;
}

public byte getRESATTACKED9_7() {
return RESATTACKED9_7;
}

public byte getRESATTACKED9_8() {
return RESATTACKED9_8;
}

public byte getRESATTACKED9_9() {
return RESATTACKED9_9;
}

public byte getRESAVOID1_1() {
return RESAVOID1_1;
}

public byte getRESAVOID1_10() {
return RESAVOID1_10;
}

public byte getRESAVOID1_11() {
return RESAVOID1_11;
}

public byte getRESAVOID1_12() {
return RESAVOID1_12;
}

public byte getRESAVOID1_2() {
return RESAVOID1_2;
}

public byte getRESAVOID1_3() {
return RESAVOID1_3;
}

public byte getRESAVOID1_4() {
return RESAVOID1_4;
}

public byte getRESAVOID1_5() {
return RESAVOID1_5;
}

public byte getRESAVOID1_6() {
return RESAVOID1_6;
}

public byte getRESAVOID1_7() {
return RESAVOID1_7;
}

public byte getRESAVOID1_8() {
return RESAVOID1_8;
}

public byte getRESAVOID1_9() {
return RESAVOID1_9;
}

public byte getRESAVOID2_1() {
return RESAVOID2_1;
}

public byte getRESAVOID2_10() {
return RESAVOID2_10;
}

public byte getRESAVOID2_11() {
return RESAVOID2_11;
}

public byte getRESAVOID2_12() {
return RESAVOID2_12;
}

public byte getRESAVOID2_2() {
return RESAVOID2_2;
}

public byte getRESAVOID2_3() {
return RESAVOID2_3;
}

public byte getRESAVOID2_4() {
return RESAVOID2_4;
}

public byte getRESAVOID2_5() {
return RESAVOID2_5;
}

public byte getRESAVOID2_6() {
return RESAVOID2_6;
}

public byte getRESAVOID2_7() {
return RESAVOID2_7;
}

public byte getRESAVOID2_8() {
return RESAVOID2_8;
}

public byte getRESAVOID2_9() {
return RESAVOID2_9;
}

public byte getRESAVOID3_1() {
return RESAVOID3_1;
}

public byte getRESAVOID3_10() {
return RESAVOID3_10;
}

public byte getRESAVOID3_11() {
return RESAVOID3_11;
}

public byte getRESAVOID3_12() {
return RESAVOID3_12;
}

public byte getRESAVOID3_2() {
return RESAVOID3_2;
}

public byte getRESAVOID3_3() {
return RESAVOID3_3;
}

public byte getRESAVOID3_4() {
return RESAVOID3_4;
}

public byte getRESAVOID3_5() {
return RESAVOID3_5;
}

public byte getRESAVOID3_6() {
return RESAVOID3_6;
}

public byte getRESAVOID3_7() {
return RESAVOID3_7;
}

public byte getRESAVOID3_8() {
return RESAVOID3_8;
}

public byte getRESAVOID3_9() {
return RESAVOID3_9;
}

public byte getRESAVOID4_1() {
return RESAVOID4_1;
}

public byte getRESAVOID4_10() {
return RESAVOID4_10;
}

public byte getRESAVOID4_11() {
return RESAVOID4_11;
}

public byte getRESAVOID4_12() {
return RESAVOID4_12;
}

public byte getRESAVOID4_2() {
return RESAVOID4_2;
}

public byte getRESAVOID4_3() {
return RESAVOID4_3;
}

public byte getRESAVOID4_4() {
return RESAVOID4_4;
}

public byte getRESAVOID4_5() {
return RESAVOID4_5;
}

public byte getRESAVOID4_6() {
return RESAVOID4_6;
}

public byte getRESAVOID4_7() {
return RESAVOID4_7;
}

public byte getRESAVOID4_8() {
return RESAVOID4_8;
}

public byte getRESAVOID4_9() {
return RESAVOID4_9;
}

public byte getRESAVOID5_1() {
return RESAVOID5_1;
}

public byte getRESAVOID5_10() {
return RESAVOID5_10;
}

public byte getRESAVOID5_11() {
return RESAVOID5_11;
}

public byte getRESAVOID5_12() {
return RESAVOID5_12;
}

public byte getRESAVOID5_2() {
return RESAVOID5_2;
}

public byte getRESAVOID5_3() {
return RESAVOID5_3;
}

public byte getRESAVOID5_4() {
return RESAVOID5_4;
}

public byte getRESAVOID5_5() {
return RESAVOID5_5;
}

public byte getRESAVOID5_6() {
return RESAVOID5_6;
}

public byte getRESAVOID5_7() {
return RESAVOID5_7;
}

public byte getRESAVOID5_8() {
return RESAVOID5_8;
}

public byte getRESAVOID5_9() {
return RESAVOID5_9;
}

public byte getRESAVOID6_1() {
return RESAVOID6_1;
}

public byte getRESAVOID6_10() {
return RESAVOID6_10;
}

public byte getRESAVOID6_11() {
return RESAVOID6_11;
}

public byte getRESAVOID6_12() {
return RESAVOID6_12;
}

public byte getRESAVOID6_2() {
return RESAVOID6_2;
}

public byte getRESAVOID6_3() {
return RESAVOID6_3;
}

public byte getRESAVOID6_4() {
return RESAVOID6_4;
}

public byte getRESAVOID6_5() {
return RESAVOID6_5;
}

public byte getRESAVOID6_6() {
return RESAVOID6_6;
}

public byte getRESAVOID6_7() {
return RESAVOID6_7;
}

public byte getRESAVOID6_8() {
return RESAVOID6_8;
}

public byte getRESAVOID6_9() {
return RESAVOID6_9;
}

public byte getRESAVOID7_1() {
return RESAVOID7_1;
}

public byte getRESAVOID7_10() {
return RESAVOID7_10;
}

public byte getRESAVOID7_11() {
return RESAVOID7_11;
}

public byte getRESAVOID7_12() {
return RESAVOID7_12;
}

public byte getRESAVOID7_2() {
return RESAVOID7_2;
}

public byte getRESAVOID7_3() {
return RESAVOID7_3;
}

public byte getRESAVOID7_4() {
return RESAVOID7_4;
}

public byte getRESAVOID7_5() {
return RESAVOID7_5;
}

public byte getRESAVOID7_6() {
return RESAVOID7_6;
}

public byte getRESAVOID7_7() {
return RESAVOID7_7;
}

public byte getRESAVOID7_8() {
return RESAVOID7_8;
}

public byte getRESAVOID7_9() {
return RESAVOID7_9;
}

public byte getRESAVOID8_1() {
return RESAVOID8_1;
}

public byte getRESAVOID8_10() {
return RESAVOID8_10;
}

public byte getRESAVOID8_11() {
return RESAVOID8_11;
}

public byte getRESAVOID8_12() {
return RESAVOID8_12;
}

public byte getRESAVOID8_2() {
return RESAVOID8_2;
}

public byte getRESAVOID8_3() {
return RESAVOID8_3;
}

public byte getRESAVOID8_4() {
return RESAVOID8_4;
}

public byte getRESAVOID8_5() {
return RESAVOID8_5;
}

public byte getRESAVOID8_6() {
return RESAVOID8_6;
}

public byte getRESAVOID8_7() {
return RESAVOID8_7;
}

public byte getRESAVOID8_8() {
return RESAVOID8_8;
}

public byte getRESAVOID8_9() {
return RESAVOID8_9;
}

public byte getRESAVOID96_1() {
return RESAVOID96_1;
}

public byte getRESAVOID96_10() {
return RESAVOID96_10;
}

public byte getRESAVOID96_11() {
return RESAVOID96_11;
}

public byte getRESAVOID96_12() {
return RESAVOID96_12;
}

public byte getRESAVOID96_2() {
return RESAVOID96_2;
}

public byte getRESAVOID96_3() {
return RESAVOID96_3;
}

public byte getRESAVOID96_4() {
return RESAVOID96_4;
}

public byte getRESAVOID96_5() {
return RESAVOID96_5;
}

public byte getRESAVOID96_6() {
return RESAVOID96_6;
}

public byte getRESAVOID96_7() {
return RESAVOID96_7;
}

public byte getRESAVOID96_8() {
return RESAVOID96_8;
}

public byte getRESAVOID96_9() {
return RESAVOID96_9;
}

public byte getRESAVOID97_1() {
return RESAVOID97_1;
}

public byte getRESAVOID97_10() {
return RESAVOID97_10;
}

public byte getRESAVOID97_11() {
return RESAVOID97_11;
}

public byte getRESAVOID97_12() {
return RESAVOID97_12;
}

public byte getRESAVOID97_2() {
return RESAVOID97_2;
}

public byte getRESAVOID97_3() {
return RESAVOID97_3;
}

public byte getRESAVOID97_4() {
return RESAVOID97_4;
}

public byte getRESAVOID97_5() {
return RESAVOID97_5;
}

public byte getRESAVOID97_6() {
return RESAVOID97_6;
}

public byte getRESAVOID97_7() {
return RESAVOID97_7;
}

public byte getRESAVOID97_8() {
return RESAVOID97_8;
}

public byte getRESAVOID97_9() {
return RESAVOID97_9;
}

public byte getRESAVOID9_1() {
return RESAVOID9_1;
}

public byte getRESAVOID9_10() {
return RESAVOID9_10;
}

public byte getRESAVOID9_11() {
return RESAVOID9_11;
}

public byte getRESAVOID9_12() {
return RESAVOID9_12;
}

public byte getRESAVOID9_2() {
return RESAVOID9_2;
}

public byte getRESAVOID9_3() {
return RESAVOID9_3;
}

public byte getRESAVOID9_4() {
return RESAVOID9_4;
}

public byte getRESAVOID9_5() {
return RESAVOID9_5;
}

public byte getRESAVOID9_6() {
return RESAVOID9_6;
}

public byte getRESAVOID9_7() {
return RESAVOID9_7;
}

public byte getRESAVOID9_8() {
return RESAVOID9_8;
}

public byte getRESAVOID9_9() {
return RESAVOID9_9;
}

public byte getRESINSULTED1_1() {
return RESINSULTED1_1;
}

public byte getRESINSULTED1_10() {
return RESINSULTED1_10;
}

public byte getRESINSULTED1_11() {
return RESINSULTED1_11;
}

public byte getRESINSULTED1_12() {
return RESINSULTED1_12;
}

public byte getRESINSULTED1_2() {
return RESINSULTED1_2;
}

public byte getRESINSULTED1_3() {
return RESINSULTED1_3;
}

public byte getRESINSULTED1_4() {
return RESINSULTED1_4;
}

public byte getRESINSULTED1_5() {
return RESINSULTED1_5;
}

public byte getRESINSULTED1_6() {
return RESINSULTED1_6;
}

public byte getRESINSULTED1_7() {
return RESINSULTED1_7;
}

public byte getRESINSULTED1_8() {
return RESINSULTED1_8;
}

public byte getRESINSULTED1_9() {
return RESINSULTED1_9;
}

public byte getRESINSULTED2_1() {
return RESINSULTED2_1;
}

public byte getRESINSULTED2_10() {
return RESINSULTED2_10;
}

public byte getRESINSULTED2_11() {
return RESINSULTED2_11;
}

public byte getRESINSULTED2_12() {
return RESINSULTED2_12;
}

public byte getRESINSULTED2_2() {
return RESINSULTED2_2;
}

public byte getRESINSULTED2_3() {
return RESINSULTED2_3;
}

public byte getRESINSULTED2_4() {
return RESINSULTED2_4;
}

public byte getRESINSULTED2_5() {
return RESINSULTED2_5;
}

public byte getRESINSULTED2_6() {
return RESINSULTED2_6;
}

public byte getRESINSULTED2_7() {
return RESINSULTED2_7;
}

public byte getRESINSULTED2_8() {
return RESINSULTED2_8;
}

public byte getRESINSULTED2_9() {
return RESINSULTED2_9;
}

public byte getRESINSULTED3_1() {
return RESINSULTED3_1;
}

public byte getRESINSULTED3_10() {
return RESINSULTED3_10;
}

public byte getRESINSULTED3_11() {
return RESINSULTED3_11;
}

public byte getRESINSULTED3_12() {
return RESINSULTED3_12;
}

public byte getRESINSULTED3_2() {
return RESINSULTED3_2;
}

public byte getRESINSULTED3_3() {
return RESINSULTED3_3;
}

public byte getRESINSULTED3_4() {
return RESINSULTED3_4;
}

public byte getRESINSULTED3_5() {
return RESINSULTED3_5;
}

public byte getRESINSULTED3_6() {
return RESINSULTED3_6;
}

public byte getRESINSULTED3_7() {
return RESINSULTED3_7;
}

public byte getRESINSULTED3_8() {
return RESINSULTED3_8;
}

public byte getRESINSULTED3_9() {
return RESINSULTED3_9;
}

public byte getRESINSULTED4_1() {
return RESINSULTED4_1;
}

public byte getRESINSULTED4_10() {
return RESINSULTED4_10;
}

public byte getRESINSULTED4_11() {
return RESINSULTED4_11;
}

public byte getRESINSULTED4_12() {
return RESINSULTED4_12;
}

public byte getRESINSULTED4_2() {
return RESINSULTED4_2;
}

public byte getRESINSULTED4_3() {
return RESINSULTED4_3;
}

public byte getRESINSULTED4_4() {
return RESINSULTED4_4;
}

public byte getRESINSULTED4_5() {
return RESINSULTED4_5;
}

public byte getRESINSULTED4_6() {
return RESINSULTED4_6;
}

public byte getRESINSULTED4_7() {
return RESINSULTED4_7;
}

public byte getRESINSULTED4_8() {
return RESINSULTED4_8;
}

public byte getRESINSULTED4_9() {
return RESINSULTED4_9;
}

public byte getRESINSULTED5_1() {
return RESINSULTED5_1;
}

public byte getRESINSULTED5_10() {
return RESINSULTED5_10;
}

public byte getRESINSULTED5_11() {
return RESINSULTED5_11;
}

public byte getRESINSULTED5_12() {
return RESINSULTED5_12;
}

public byte getRESINSULTED5_2() {
return RESINSULTED5_2;
}

public byte getRESINSULTED5_3() {
return RESINSULTED5_3;
}

public byte getRESINSULTED5_4() {
return RESINSULTED5_4;
}

public byte getRESINSULTED5_5() {
return RESINSULTED5_5;
}

public byte getRESINSULTED5_6() {
return RESINSULTED5_6;
}

public byte getRESINSULTED5_7() {
return RESINSULTED5_7;
}

public byte getRESINSULTED5_8() {
return RESINSULTED5_8;
}

public byte getRESINSULTED5_9() {
return RESINSULTED5_9;
}

public byte getRESINSULTED6_1() {
return RESINSULTED6_1;
}

public byte getRESINSULTED6_10() {
return RESINSULTED6_10;
}

public byte getRESINSULTED6_11() {
return RESINSULTED6_11;
}

public byte getRESINSULTED6_12() {
return RESINSULTED6_12;
}

public byte getRESINSULTED6_2() {
return RESINSULTED6_2;
}

public byte getRESINSULTED6_3() {
return RESINSULTED6_3;
}

public byte getRESINSULTED6_4() {
return RESINSULTED6_4;
}

public byte getRESINSULTED6_5() {
return RESINSULTED6_5;
}

public byte getRESINSULTED6_6() {
return RESINSULTED6_6;
}

public byte getRESINSULTED6_7() {
return RESINSULTED6_7;
}

public byte getRESINSULTED6_8() {
return RESINSULTED6_8;
}

public byte getRESINSULTED6_9() {
return RESINSULTED6_9;
}

public byte getRESINSULTED7_1() {
return RESINSULTED7_1;
}

public byte getRESINSULTED7_10() {
return RESINSULTED7_10;
}

public byte getRESINSULTED7_11() {
return RESINSULTED7_11;
}

public byte getRESINSULTED7_12() {
return RESINSULTED7_12;
}

public byte getRESINSULTED7_2() {
return RESINSULTED7_2;
}

public byte getRESINSULTED7_3() {
return RESINSULTED7_3;
}

public byte getRESINSULTED7_4() {
return RESINSULTED7_4;
}

public byte getRESINSULTED7_5() {
return RESINSULTED7_5;
}

public byte getRESINSULTED7_6() {
return RESINSULTED7_6;
}

public byte getRESINSULTED7_7() {
return RESINSULTED7_7;
}

public byte getRESINSULTED7_8() {
return RESINSULTED7_8;
}

public byte getRESINSULTED7_9() {
return RESINSULTED7_9;
}

public byte getRESINSULTED8_1() {
return RESINSULTED8_1;
}

public byte getRESINSULTED8_10() {
return RESINSULTED8_10;
}

public byte getRESINSULTED8_11() {
return RESINSULTED8_11;
}

public byte getRESINSULTED8_12() {
return RESINSULTED8_12;
}

public byte getRESINSULTED8_2() {
return RESINSULTED8_2;
}

public byte getRESINSULTED8_3() {
return RESINSULTED8_3;
}

public byte getRESINSULTED8_4() {
return RESINSULTED8_4;
}

public byte getRESINSULTED8_5() {
return RESINSULTED8_5;
}

public byte getRESINSULTED8_6() {
return RESINSULTED8_6;
}

public byte getRESINSULTED8_7() {
return RESINSULTED8_7;
}

public byte getRESINSULTED8_8() {
return RESINSULTED8_8;
}

public byte getRESINSULTED8_9() {
return RESINSULTED8_9;
}

public byte getRESINSULTED96_1() {
return RESINSULTED96_1;
}

public byte getRESINSULTED96_10() {
return RESINSULTED96_10;
}

public byte getRESINSULTED96_11() {
return RESINSULTED96_11;
}

public byte getRESINSULTED96_12() {
return RESINSULTED96_12;
}

public byte getRESINSULTED96_2() {
return RESINSULTED96_2;
}

public byte getRESINSULTED96_3() {
return RESINSULTED96_3;
}

public byte getRESINSULTED96_4() {
return RESINSULTED96_4;
}

public byte getRESINSULTED96_5() {
return RESINSULTED96_5;
}

public byte getRESINSULTED96_6() {
return RESINSULTED96_6;
}

public byte getRESINSULTED96_7() {
return RESINSULTED96_7;
}

public byte getRESINSULTED96_8() {
return RESINSULTED96_8;
}

public byte getRESINSULTED96_9() {
return RESINSULTED96_9;
}

public byte getRESINSULTED97_1() {
return RESINSULTED97_1;
}

public byte getRESINSULTED97_10() {
return RESINSULTED97_10;
}

public byte getRESINSULTED97_11() {
return RESINSULTED97_11;
}

public byte getRESINSULTED97_12() {
return RESINSULTED97_12;
}

public byte getRESINSULTED97_2() {
return RESINSULTED97_2;
}

public byte getRESINSULTED97_3() {
return RESINSULTED97_3;
}

public byte getRESINSULTED97_4() {
return RESINSULTED97_4;
}

public byte getRESINSULTED97_5() {
return RESINSULTED97_5;
}

public byte getRESINSULTED97_6() {
return RESINSULTED97_6;
}

public byte getRESINSULTED97_7() {
return RESINSULTED97_7;
}

public byte getRESINSULTED97_8() {
return RESINSULTED97_8;
}

public byte getRESINSULTED97_9() {
return RESINSULTED97_9;
}

public byte getRESINSULTED9_1() {
return RESINSULTED9_1;
}

public byte getRESINSULTED9_10() {
return RESINSULTED9_10;
}

public byte getRESINSULTED9_11() {
return RESINSULTED9_11;
}

public byte getRESINSULTED9_12() {
return RESINSULTED9_12;
}

public byte getRESINSULTED9_2() {
return RESINSULTED9_2;
}

public byte getRESINSULTED9_3() {
return RESINSULTED9_3;
}

public byte getRESINSULTED9_4() {
return RESINSULTED9_4;
}

public byte getRESINSULTED9_5() {
return RESINSULTED9_5;
}

public byte getRESINSULTED9_6() {
return RESINSULTED9_6;
}

public byte getRESINSULTED9_7() {
return RESINSULTED9_7;
}

public byte getRESINSULTED9_8() {
return RESINSULTED9_8;
}

public byte getRESINSULTED9_9() {
return RESINSULTED9_9;
}

public byte getRESJOBDENY1() {
return RESJOBDENY1;
}

public byte getRESJOBDENY2() {
return RESJOBDENY2;
}

public byte getRESJOBDENY3() {
return RESJOBDENY3;
}

public byte getRESJOBDENY4() {
return RESJOBDENY4;
}

public byte getRESJOBDENY5() {
return RESJOBDENY5;
}

public byte getRESJOBDENY6() {
return RESJOBDENY6;
}

public byte getRESJOBDENY7() {
return RESJOBDENY7;
}

public byte getRESJOBDENY8() {
return RESJOBDENY8;
}

public byte getRESJOBDENY9() {
return RESJOBDENY9;
}

public byte getRESJOBDENY96() {
return RESJOBDENY96;
}

public byte getRESJOBDENY97() {
return RESJOBDENY97;
}

public boolean getRESPF16() {
return RESPF16;
}

public boolean getRESPF16_DV() {
return RESPF16_DV;
}

public boolean getRESPM16() {
return RESPM16;
}

public boolean getRESPM16_DV() {
return RESPM16_DV;
}

public byte getRESUNSAFE1_1() {
return RESUNSAFE1_1;
}

public byte getRESUNSAFE1_10() {
return RESUNSAFE1_10;
}

public byte getRESUNSAFE1_11() {
return RESUNSAFE1_11;
}

public byte getRESUNSAFE1_12() {
return RESUNSAFE1_12;
}

public byte getRESUNSAFE1_2() {
return RESUNSAFE1_2;
}

public byte getRESUNSAFE1_3() {
return RESUNSAFE1_3;
}

public byte getRESUNSAFE1_4() {
return RESUNSAFE1_4;
}

public byte getRESUNSAFE1_5() {
return RESUNSAFE1_5;
}

public byte getRESUNSAFE1_6() {
return RESUNSAFE1_6;
}

public byte getRESUNSAFE1_7() {
return RESUNSAFE1_7;
}

public byte getRESUNSAFE1_8() {
return RESUNSAFE1_8;
}

public byte getRESUNSAFE1_9() {
return RESUNSAFE1_9;
}

public byte getRESUNSAFE2_1() {
return RESUNSAFE2_1;
}

public byte getRESUNSAFE2_10() {
return RESUNSAFE2_10;
}

public byte getRESUNSAFE2_11() {
return RESUNSAFE2_11;
}

public byte getRESUNSAFE2_12() {
return RESUNSAFE2_12;
}

public byte getRESUNSAFE2_2() {
return RESUNSAFE2_2;
}

public byte getRESUNSAFE2_3() {
return RESUNSAFE2_3;
}

public byte getRESUNSAFE2_4() {
return RESUNSAFE2_4;
}

public byte getRESUNSAFE2_5() {
return RESUNSAFE2_5;
}

public byte getRESUNSAFE2_6() {
return RESUNSAFE2_6;
}

public byte getRESUNSAFE2_7() {
return RESUNSAFE2_7;
}

public byte getRESUNSAFE2_8() {
return RESUNSAFE2_8;
}

public byte getRESUNSAFE2_9() {
return RESUNSAFE2_9;
}

public byte getRESUNSAFE3_1() {
return RESUNSAFE3_1;
}

public byte getRESUNSAFE3_10() {
return RESUNSAFE3_10;
}

public byte getRESUNSAFE3_11() {
return RESUNSAFE3_11;
}

public byte getRESUNSAFE3_12() {
return RESUNSAFE3_12;
}

public byte getRESUNSAFE3_2() {
return RESUNSAFE3_2;
}

public byte getRESUNSAFE3_3() {
return RESUNSAFE3_3;
}

public byte getRESUNSAFE3_4() {
return RESUNSAFE3_4;
}

public byte getRESUNSAFE3_5() {
return RESUNSAFE3_5;
}

public byte getRESUNSAFE3_6() {
return RESUNSAFE3_6;
}

public byte getRESUNSAFE3_7() {
return RESUNSAFE3_7;
}

public byte getRESUNSAFE3_8() {
return RESUNSAFE3_8;
}

public byte getRESUNSAFE3_9() {
return RESUNSAFE3_9;
}

public byte getRESUNSAFE4_1() {
return RESUNSAFE4_1;
}

public byte getRESUNSAFE4_10() {
return RESUNSAFE4_10;
}

public byte getRESUNSAFE4_11() {
return RESUNSAFE4_11;
}

public byte getRESUNSAFE4_12() {
return RESUNSAFE4_12;
}

public byte getRESUNSAFE4_2() {
return RESUNSAFE4_2;
}

public byte getRESUNSAFE4_3() {
return RESUNSAFE4_3;
}

public byte getRESUNSAFE4_4() {
return RESUNSAFE4_4;
}

public byte getRESUNSAFE4_5() {
return RESUNSAFE4_5;
}

public byte getRESUNSAFE4_6() {
return RESUNSAFE4_6;
}

public byte getRESUNSAFE4_7() {
return RESUNSAFE4_7;
}

public byte getRESUNSAFE4_8() {
return RESUNSAFE4_8;
}

public byte getRESUNSAFE4_9() {
return RESUNSAFE4_9;
}

public byte getRESUNSAFE5_1() {
return RESUNSAFE5_1;
}

public byte getRESUNSAFE5_10() {
return RESUNSAFE5_10;
}

public byte getRESUNSAFE5_11() {
return RESUNSAFE5_11;
}

public byte getRESUNSAFE5_12() {
return RESUNSAFE5_12;
}

public byte getRESUNSAFE5_2() {
return RESUNSAFE5_2;
}

public byte getRESUNSAFE5_3() {
return RESUNSAFE5_3;
}

public byte getRESUNSAFE5_4() {
return RESUNSAFE5_4;
}

public byte getRESUNSAFE5_5() {
return RESUNSAFE5_5;
}

public byte getRESUNSAFE5_6() {
return RESUNSAFE5_6;
}

public byte getRESUNSAFE5_7() {
return RESUNSAFE5_7;
}

public byte getRESUNSAFE5_8() {
return RESUNSAFE5_8;
}

public byte getRESUNSAFE5_9() {
return RESUNSAFE5_9;
}

public byte getRESUNSAFE6_1() {
return RESUNSAFE6_1;
}

public byte getRESUNSAFE6_10() {
return RESUNSAFE6_10;
}

public byte getRESUNSAFE6_11() {
return RESUNSAFE6_11;
}

public byte getRESUNSAFE6_12() {
return RESUNSAFE6_12;
}

public byte getRESUNSAFE6_2() {
return RESUNSAFE6_2;
}

public byte getRESUNSAFE6_3() {
return RESUNSAFE6_3;
}

public byte getRESUNSAFE6_4() {
return RESUNSAFE6_4;
}

public byte getRESUNSAFE6_5() {
return RESUNSAFE6_5;
}

public byte getRESUNSAFE6_6() {
return RESUNSAFE6_6;
}

public byte getRESUNSAFE6_7() {
return RESUNSAFE6_7;
}

public byte getRESUNSAFE6_8() {
return RESUNSAFE6_8;
}

public byte getRESUNSAFE6_9() {
return RESUNSAFE6_9;
}

public byte getRESUNSAFE7_1() {
return RESUNSAFE7_1;
}

public byte getRESUNSAFE7_10() {
return RESUNSAFE7_10;
}

public byte getRESUNSAFE7_11() {
return RESUNSAFE7_11;
}

public byte getRESUNSAFE7_12() {
return RESUNSAFE7_12;
}

public byte getRESUNSAFE7_2() {
return RESUNSAFE7_2;
}

public byte getRESUNSAFE7_3() {
return RESUNSAFE7_3;
}

public byte getRESUNSAFE7_4() {
return RESUNSAFE7_4;
}

public byte getRESUNSAFE7_5() {
return RESUNSAFE7_5;
}

public byte getRESUNSAFE7_6() {
return RESUNSAFE7_6;
}

public byte getRESUNSAFE7_7() {
return RESUNSAFE7_7;
}

public byte getRESUNSAFE7_8() {
return RESUNSAFE7_8;
}

public byte getRESUNSAFE7_9() {
return RESUNSAFE7_9;
}

public byte getRESUNSAFE8_1() {
return RESUNSAFE8_1;
}

public byte getRESUNSAFE8_10() {
return RESUNSAFE8_10;
}

public byte getRESUNSAFE8_11() {
return RESUNSAFE8_11;
}

public byte getRESUNSAFE8_12() {
return RESUNSAFE8_12;
}

public byte getRESUNSAFE8_2() {
return RESUNSAFE8_2;
}

public byte getRESUNSAFE8_3() {
return RESUNSAFE8_3;
}

public byte getRESUNSAFE8_4() {
return RESUNSAFE8_4;
}

public byte getRESUNSAFE8_5() {
return RESUNSAFE8_5;
}

public byte getRESUNSAFE8_6() {
return RESUNSAFE8_6;
}

public byte getRESUNSAFE8_7() {
return RESUNSAFE8_7;
}

public byte getRESUNSAFE8_8() {
return RESUNSAFE8_8;
}

public byte getRESUNSAFE8_9() {
return RESUNSAFE8_9;
}

public byte getRESUNSAFE96_1() {
return RESUNSAFE96_1;
}

public byte getRESUNSAFE96_10() {
return RESUNSAFE96_10;
}

public byte getRESUNSAFE96_11() {
return RESUNSAFE96_11;
}

public byte getRESUNSAFE96_12() {
return RESUNSAFE96_12;
}

public byte getRESUNSAFE96_2() {
return RESUNSAFE96_2;
}

public byte getRESUNSAFE96_3() {
return RESUNSAFE96_3;
}

public byte getRESUNSAFE96_4() {
return RESUNSAFE96_4;
}

public byte getRESUNSAFE96_5() {
return RESUNSAFE96_5;
}

public byte getRESUNSAFE96_6() {
return RESUNSAFE96_6;
}

public byte getRESUNSAFE96_7() {
return RESUNSAFE96_7;
}

public byte getRESUNSAFE96_8() {
return RESUNSAFE96_8;
}

public byte getRESUNSAFE96_9() {
return RESUNSAFE96_9;
}

public byte getRESUNSAFE97_1() {
return RESUNSAFE97_1;
}

public byte getRESUNSAFE97_10() {
return RESUNSAFE97_10;
}

public byte getRESUNSAFE97_11() {
return RESUNSAFE97_11;
}

public byte getRESUNSAFE97_12() {
return RESUNSAFE97_12;
}

public byte getRESUNSAFE97_2() {
return RESUNSAFE97_2;
}

public byte getRESUNSAFE97_3() {
return RESUNSAFE97_3;
}

public byte getRESUNSAFE97_4() {
return RESUNSAFE97_4;
}

public byte getRESUNSAFE97_5() {
return RESUNSAFE97_5;
}

public byte getRESUNSAFE97_6() {
return RESUNSAFE97_6;
}

public byte getRESUNSAFE97_7() {
return RESUNSAFE97_7;
}

public byte getRESUNSAFE97_8() {
return RESUNSAFE97_8;
}

public byte getRESUNSAFE97_9() {
return RESUNSAFE97_9;
}

public byte getRESUNSAFE9_1() {
return RESUNSAFE9_1;
}

public byte getRESUNSAFE9_10() {
return RESUNSAFE9_10;
}

public byte getRESUNSAFE9_11() {
return RESUNSAFE9_11;
}

public byte getRESUNSAFE9_12() {
return RESUNSAFE9_12;
}

public byte getRESUNSAFE9_2() {
return RESUNSAFE9_2;
}

public byte getRESUNSAFE9_3() {
return RESUNSAFE9_3;
}

public byte getRESUNSAFE9_4() {
return RESUNSAFE9_4;
}

public byte getRESUNSAFE9_5() {
return RESUNSAFE9_5;
}

public byte getRESUNSAFE9_6() {
return RESUNSAFE9_6;
}

public byte getRESUNSAFE9_7() {
return RESUNSAFE9_7;
}

public byte getRESUNSAFE9_8() {
return RESUNSAFE9_8;
}

public byte getRESUNSAFE9_9() {
return RESUNSAFE9_9;
}

public byte getRETAMT() {
return RETAMT;
}

public byte getRETCHK() {
return RETCHK;
}

public byte getRETSUF() {
return RETSUF;
}

public byte getRHLAND_CODE() {
return RHLAND_CODE;
}

public boolean getRINGFENCE() {
return RINGFENCE;
}

public byte getRPHMOB_CODE() {
return RPHMOB_CODE;
}

public byte getRPHWRK_CODE() {
return RPHWRK_CODE;
}

public byte getRTCON1() {
return RTCON1;
}

public byte getRTCON2() {
return RTCON2;
}

public byte getRTCON3() {
return RTCON3;
}

public byte getRTCON4() {
return RTCON4;
}

public byte getRTEXPJB() {
return RTEXPJB;
}

public byte getRTFND1() {
return RTFND1;
}

public byte getRTFND10() {
return RTFND10;
}

public byte getRTFND2() {
return RTFND2;
}

public byte getRTFND3() {
return RTFND3;
}

public byte getRTFND4() {
return RTFND4;
}

public byte getRTFND5() {
return RTFND5;
}

public byte getRTFND6() {
return RTFND6;
}

public byte getRTFND7() {
return RTFND7;
}

public byte getRTFND8() {
return RTFND8;
}

public byte getRTFND9() {
return RTFND9;
}

public byte getRTFND96() {
return RTFND96;
}

public byte getRTPRO1() {
return RTPRO1;
}

public byte getRTPRO2() {
return RTPRO2;
}

public byte getRTPRO3() {
return RTPRO3;
}

public byte getRTPRO4() {
return RTPRO4;
}

public byte getRTPRO5() {
return RTPRO5;
}

public byte getRTPRO6() {
return RTPRO6;
}

public byte getRULESKID() {
return RULESKID;
}

public byte getSAMEJOB() {
return SAMEJOB;
}

public short getSAMPST() {
return SAMPST;
}

public byte getSCAC() {
return SCAC;
}

public byte getSCDASCOH_DV() {
return SCDASCOH_DV;
}

public byte getSCDASSAT_DV() {
return SCDASSAT_DV;
}

public boolean getSCDATA_DV() {
return SCDATA_DV;
}

public byte getSCFINEMB() {
return SCFINEMB;
}

public byte getSCFINSMALL() {
return SCFINSMALL;
}

public boolean getSCFLADV() {
return SCFLADV;
}

public byte getSCHLLOC() {
return SCHLLOC;
}

public byte getSCHOK() {
return SCHOK;
}

public byte getSCHOOLCNTRY1() {
return SCHOOLCNTRY1;
}

public byte getSCHOOLCNTRY2() {
return SCHOOLCNTRY2;
}

public byte getSCHOOLCNTRY3() {
return SCHOOLCNTRY3;
}

public byte getSCHOOLCNTRY4() {
return SCHOOLCNTRY4;
}

public byte getSCHOOLCNTRY5() {
return SCHOOLCNTRY5;
}

public byte getSCHOOL_CAWI() {
return SCHOOL_CAWI;
}

public byte getSCLFSAT1() {
return SCLFSAT1;
}

public byte getSCLFSAT2() {
return SCLFSAT2;
}

public byte getSCLFSAT7() {
return SCLFSAT7;
}

public byte getSCLFSATO() {
return SCLFSATO;
}

public byte getSCPAROUTINT() {
return SCPAROUTINT;
}

public byte getSCPAYCODEA11() {
return SCPAYCODEA11;
}

public byte getSCPAYCODEA12() {
return SCPAYCODEA12;
}

public byte getSCPAYCODEA13() {
return SCPAYCODEA13;
}

public byte getSCPAYCODEA14() {
return SCPAYCODEA14;
}

public byte getSCPAYCODEA15() {
return SCPAYCODEA15;
}

public byte getSCPAYCODEA16() {
return SCPAYCODEA16;
}

public byte getSCPAYCODEA17() {
return SCPAYCODEA17;
}

public byte getSCPAYCODEA18() {
return SCPAYCODEA18;
}

public byte getSCPAYCODEB11() {
return SCPAYCODEB11;
}

public byte getSCPAYCODEB12() {
return SCPAYCODEB12;
}

public byte getSCPAYCODEB13() {
return SCPAYCODEB13;
}

public byte getSCPAYCODEB14() {
return SCPAYCODEB14;
}

public byte getSCPAYCODEB15() {
return SCPAYCODEB15;
}

public byte getSCPAYCODEB16() {
return SCPAYCODEB16;
}

public byte getSCPAYCODEB17() {
return SCPAYCODEB17;
}

public byte getSCPAYCODEB18() {
return SCPAYCODEB18;
}

public byte getSCPAYREA() {
return SCPAYREA;
}

public byte getSCPAYREB() {
return SCPAYREB;
}

public byte getSCRELHAPPY() {
return SCRELHAPPY;
}

public byte getSCRELPARAR() {
return SCRELPARAR;
}

public byte getSCRELPARCD() {
return SCRELPARCD;
}

public byte getSCRELPARDS() {
return SCRELPARDS;
}

public byte getSCRELPAREI() {
return SCRELPAREI;
}

public byte getSCRELPARIR() {
return SCRELPARIR;
}

public byte getSCRELPARKS() {
return SCRELPARKS;
}

public byte getSCRELPARRG() {
return SCRELPARRG;
}

public byte getSCRELPARWT() {
return SCRELPARWT;
}

public byte getSCRF1() {
return SCRF1;
}

public byte getSCRF2() {
return SCRF2;
}

public byte getSCRF3() {
return SCRF3;
}

public byte getSCRF4() {
return SCRF4;
}

public byte getSCRF5() {
return SCRF5;
}

public byte getSCRF6() {
return SCRF6;
}

public byte getSCRF97() {
return SCRF97;
}

public byte getSCRX_CODE() {
return SCRX_CODE;
}

public byte getSCSF1() {
return SCSF1;
}

public byte getSCSF2A() {
return SCSF2A;
}

public byte getSCSF2B() {
return SCSF2B;
}

public byte getSCSF3A() {
return SCSF3A;
}

public byte getSCSF3B() {
return SCSF3B;
}

public byte getSCSF4A() {
return SCSF4A;
}

public byte getSCSF4B() {
return SCSF4B;
}

public byte getSCSF5() {
return SCSF5;
}

public byte getSCSF6A() {
return SCSF6A;
}

public byte getSCSF6B() {
return SCSF6B;
}

public byte getSCSF6C() {
return SCSF6C;
}

public byte getSCSF7() {
return SCSF7;
}

public byte getSCUN1() {
return SCUN1;
}

public byte getSCUN2() {
return SCUN2;
}

public byte getSCUN3() {
return SCUN3;
}

public byte getSCUN97() {
return SCUN97;
}

public byte getSCUX_CODE() {
return SCUX_CODE;
}

public byte getSCWEMWBA() {
return SCWEMWBA;
}

public byte getSCWEMWBB() {
return SCWEMWBB;
}

public byte getSCWEMWBC() {
return SCWEMWBC;
}

public byte getSCWEMWBD() {
return SCWEMWBD;
}

public byte getSCWEMWBE() {
return SCWEMWBE;
}

public byte getSCWEMWBF() {
return SCWEMWBF;
}

public byte getSCWEMWBG() {
return SCWEMWBG;
}

protected double SEEARNGRS_DV() {
return SEEARNGRS_DV;
}

public byte getSEEARNGRS_IF() {
return SEEARNGRS_IF;
}

protected double SEEARNNET_DV() {
return SEEARNNET_DV;
}

public byte getSEEKID() {
return SEEKID;
}

public byte getSEXUOR() {
return SEXUOR;
}

public byte getSEX_DV() {
return SEX_DV;
}

public byte getSF1() {
return SF1;
}

protected double SF12MCS_DV() {
return SF12MCS_DV;
}

protected double SF12PCS_DV() {
return SF12PCS_DV;
}

public byte getSIBHIT() {
return SIBHIT;
}

public byte getSIBLING() {
return SIBLING;
}

public byte getSIBSTEAL() {
return SIBSTEAL;
}

public byte getSIBTEASE() {
return SIBTEASE;
}

public byte getSIBVERAB() {
return SIBVERAB;
}

public boolean getSINGLE_DV() {
return SINGLE_DV;
}

public byte getSLAPKID() {
return SLAPKID;
}

public byte getSLP_QUAL() {
return SLP_QUAL;
}

public byte getSMARTMOB() {
return SMARTMOB;
}

public byte getSMKMNTH11() {
return SMKMNTH11;
}

public byte getSMKMNTH12() {
return SMKMNTH12;
}

public byte getSMKMNTH13() {
return SMKMNTH13;
}

public byte getSMKMNTH21() {
return SMKMNTH21;
}

public byte getSMKMNTH22() {
return SMKMNTH22;
}

public byte getSMKMNTH23() {
return SMKMNTH23;
}

public byte getSMKMNTH31() {
return SMKMNTH31;
}

public byte getSMKMNTH32() {
return SMKMNTH32;
}

public byte getSMKMNTH33() {
return SMKMNTH33;
}

public short getSMOKER() {
return SMOKER;
}

public byte getSOCCONT() {
return SOCCONT;
}

public byte getSOCIALKID() {
return SOCIALKID;
}

public byte getSPPEN() {
return SPPEN;
}

public int getSPPID() {
return SPPID;
}

public byte getSPPNO() {
return SPPNO;
}

public byte getSTATCM1() {
return STATCM1;
}

public byte getSTATCM2() {
return STATCM2;
}

public byte getSTATCM3() {
return STATCM3;
}

public byte getSTATCM4() {
return STATCM4;
}

public short getSTATCY41() {
return STATCY41;
}

public short getSTATCY42() {
return STATCY42;
}

public short getSTATCY43() {
return STATCY43;
}

public short getSTATCY44() {
return STATCY44;
}

public byte getSTATENDD1() {
return STATENDD1;
}

public byte getSTATENDD2() {
return STATENDD2;
}

public byte getSTATENDD3() {
return STATENDD3;
}

public byte getSTATENDD4() {
return STATENDD4;
}

public byte getSTATENDD5() {
return STATENDD5;
}

public byte getSTATENDD6() {
return STATENDD6;
}

public byte getSTATENDM1() {
return STATENDM1;
}

public byte getSTATENDM2() {
return STATENDM2;
}

public byte getSTATENDM3() {
return STATENDM3;
}

public byte getSTATENDM4() {
return STATENDM4;
}

public byte getSTATENDM5() {
return STATENDM5;
}

public byte getSTATENDM6() {
return STATENDM6;
}

public short getSTATENDY41() {
return STATENDY41;
}

public short getSTATENDY42() {
return STATENDY42;
}

public short getSTATENDY43() {
return STATENDY43;
}

public short getSTATENDY44() {
return STATENDY44;
}

public short getSTATENDY45() {
return STATENDY45;
}

public short getSTATENDY46() {
return STATENDY46;
}

public short getSTAYKID() {
return STAYKID;
}

public byte getSTAYKIDW() {
return STAYKIDW;
}

public byte getSTEALSIB() {
return STEALSIB;
}

public byte getSTENDREAS1() {
return STENDREAS1;
}

public byte getSTENDREAS10() {
return STENDREAS10;
}

public byte getSTENDREAS11() {
return STENDREAS11;
}

public byte getSTENDREAS2() {
return STENDREAS2;
}

public byte getSTENDREAS3() {
return STENDREAS3;
}

public byte getSTENDREAS4() {
return STENDREAS4;
}

public byte getSTENDREAS5() {
return STENDREAS5;
}

public byte getSTENDREAS6() {
return STENDREAS6;
}

public byte getSTENDREAS7() {
return STENDREAS7;
}

public byte getSTENDREAS8() {
return STENDREAS8;
}

public byte getSTENDREAS9() {
return STENDREAS9;
}

public byte getSTENDREAS97() {
return STENDREAS97;
}

public byte getSTEPREL() {
return STEPREL;
}

public short getSTRATA() {
return STRATA;
}

public byte getSUSP() {
return SUSP;
}

public byte getSWEMWBS_DV() {
return SWEMWBS_DV;
}

public byte getTALKMATTER() {
return TALKMATTER;
}

public byte getTEASESIB() {
return TEASESIB;
}

public byte getTLKF() {
return TLKF;
}

public byte getTLKM() {
return TLKM;
}

public byte getTRAINANY() {
return TRAINANY;
}

public short getTRAINDAYS1() {
return TRAINDAYS1;
}

public short getTRAINDAYS2() {
return TRAINDAYS2;
}

public short getTRAINDAYS3() {
return TRAINDAYS3;
}

public byte getTRAINEND1() {
return TRAINEND1;
}

public byte getTRAINEND2() {
return TRAINEND2;
}

public byte getTRAINEND3() {
return TRAINEND3;
}

public byte getTRAINHRS1() {
return TRAINHRS1;
}

public byte getTRAINHRS2() {
return TRAINHRS2;
}

public byte getTRAINHRS3() {
return TRAINHRS3;
}

public byte getTRAINN() {
return TRAINN;
}

public byte getTRAINPURP11() {
return TRAINPURP11;
}

public byte getTRAINPURP12() {
return TRAINPURP12;
}

public byte getTRAINPURP13() {
return TRAINPURP13;
}

public byte getTRAINPURP21() {
return TRAINPURP21;
}

public byte getTRAINPURP22() {
return TRAINPURP22;
}

public byte getTRAINPURP23() {
return TRAINPURP23;
}

public byte getTRAINPURP31() {
return TRAINPURP31;
}

public byte getTRAINPURP32() {
return TRAINPURP32;
}

public byte getTRAINPURP33() {
return TRAINPURP33;
}

public byte getTRAINPURP41() {
return TRAINPURP41;
}

public byte getTRAINPURP42() {
return TRAINPURP42;
}

public byte getTRAINPURP43() {
return TRAINPURP43;
}

public byte getTRAINPURP51() {
return TRAINPURP51;
}

public byte getTRAINPURP52() {
return TRAINPURP52;
}

public byte getTRAINPURP53() {
return TRAINPURP53;
}

public byte getTRAINPURP61() {
return TRAINPURP61;
}

public byte getTRAINPURP62() {
return TRAINPURP62;
}

public byte getTRAINPURP63() {
return TRAINPURP63;
}

public byte getTRAINPURP71() {
return TRAINPURP71;
}

public byte getTRAINPURP72() {
return TRAINPURP72;
}

public byte getTRAINPURP73() {
return TRAINPURP73;
}

public byte getTRAINQUAL1() {
return TRAINQUAL1;
}

public byte getTRAINQUAL2() {
return TRAINQUAL2;
}

public byte getTRAINQUAL3() {
return TRAINQUAL3;
}

public byte getTRQUAL1() {
return TRQUAL1;
}

public byte getTRQUAL10() {
return TRQUAL10;
}

public byte getTRQUAL11() {
return TRQUAL11;
}

public byte getTRQUAL13() {
return TRQUAL13;
}

public byte getTRQUAL15() {
return TRQUAL15;
}

public byte getTRQUAL16() {
return TRQUAL16;
}

public byte getTRQUAL17() {
return TRQUAL17;
}

public byte getTRQUAL18() {
return TRQUAL18;
}

public byte getTRQUAL19() {
return TRQUAL19;
}

public byte getTRQUAL2() {
return TRQUAL2;
}

public byte getTRQUAL20() {
return TRQUAL20;
}

public byte getTRQUAL21() {
return TRQUAL21;
}

public byte getTRQUAL22() {
return TRQUAL22;
}

public byte getTRQUAL23() {
return TRQUAL23;
}

public byte getTRQUAL24() {
return TRQUAL24;
}

public byte getTRQUAL25() {
return TRQUAL25;
}

public byte getTRQUAL26() {
return TRQUAL26;
}

public byte getTRQUAL27() {
return TRQUAL27;
}

public byte getTRQUAL28() {
return TRQUAL28;
}

public byte getTRQUAL29() {
return TRQUAL29;
}

public byte getTRQUAL3() {
return TRQUAL3;
}

public byte getTRQUAL30() {
return TRQUAL30;
}

public byte getTRQUAL31() {
return TRQUAL31;
}

public byte getTRQUAL32() {
return TRQUAL32;
}

public byte getTRQUAL33() {
return TRQUAL33;
}

public byte getTRQUAL34() {
return TRQUAL34;
}

public byte getTRQUAL4() {
return TRQUAL4;
}

public byte getTRQUAL5() {
return TRQUAL5;
}

public byte getTRQUAL6() {
return TRQUAL6;
}

public byte getTRQUAL7() {
return TRQUAL7;
}

public byte getTRQUAL8() {
return TRQUAL8;
}

public byte getTRQUAL9() {
return TRQUAL9;
}

public byte getTRWHO1() {
return TRWHO1;
}

public byte getTRWHO2() {
return TRWHO2;
}

public byte getTRWHO3() {
return TRWHO3;
}

public byte getTSLP_30M() {
return TSLP_30M;
}

public byte getTSLP_CGH() {
return TSLP_CGH;
}

public byte getTSLP_WAK() {
return TSLP_WAK;
}

public byte getTSTA_AWK() {
return TSTA_AWK;
}

public byte getUKAHEAD() {
return UKAHEAD;
}

public byte getUKBORN() {
return UKBORN;
}

public byte getUKWELC() {
return UKWELC;
}

public byte getUNDQUS() {
return UNDQUS;
}

public byte getUNIFIN1() {
return UNIFIN1;
}

public byte getUNISUB1() {
return UNISUB1;
}

public byte getUNSAFE1() {
return UNSAFE1;
}

public byte getUNSAFE10() {
return UNSAFE10;
}

public byte getUNSAFE11() {
return UNSAFE11;
}

public byte getUNSAFE2() {
return UNSAFE2;
}

public byte getUNSAFE3() {
return UNSAFE3;
}

public byte getUNSAFE4() {
return UNSAFE4;
}

public byte getUNSAFE5() {
return UNSAFE5;
}

public byte getUNSAFE6() {
return UNSAFE6;
}

public byte getUNSAFE7() {
return UNSAFE7;
}

public byte getUNSAFE8() {
return UNSAFE8;
}

public byte getUNSAFE9() {
return UNSAFE9;
}

public byte getUNSAFE96() {
return UNSAFE96;
}

public byte getUNSAFE97() {
return UNSAFE97;
}

public byte getUNSAFEO_CODE() {
return UNSAFEO_CODE;
}

public byte getUNSAFE_DV() {
return UNSAFE_DV;
}

public byte getUPSET() {
return UPSET;
}

public byte getURBAN_DV() {
return URBAN_DV;
}

public byte getUSBREAD1() {
return USBREAD1;
}

public byte getUSBREAD2() {
return USBREAD2;
}

public byte getUSBREAD3() {
return USBREAD3;
}

public byte getUSBREAD4() {
return USBREAD4;
}

public byte getUSBREAD5() {
return USBREAD5;
}

public byte getUSBREAD6() {
return USBREAD6;
}

public byte getUSBREAD7() {
return USBREAD7;
}

public byte getUSDAIRY1() {
return USDAIRY1;
}

public byte getUSDAIRY2() {
return USDAIRY2;
}

public byte getUSDAIRY3() {
return USDAIRY3;
}

public byte getUSDAIRY4() {
return USDAIRY4;
}

public byte getUSDAIRY5() {
return USDAIRY5;
}

public byte getUSDAIRY6() {
return USDAIRY6;
}

public byte getVDAY() {
return VDAY;
}

public byte getVDHRS() {
return VDHRS;
}

public byte getVDMIN() {
return VDMIN;
}

public byte getVEGEAMT() {
return VEGEAMT;
}

public byte getVERABSIB() {
return VERABSIB;
}

public byte getVOLRECPER() {
return VOLRECPER;
}

public short getVOTE1() {
return VOTE1;
}

public short getVOTE2() {
return VOTE2;
}

public short getVOTE3() {
return VOTE3;
}

public short getVOTE4() {
return VOTE4;
}

public short getVOTE5() {
return VOTE5;
}

public short getVOTE6() {
return VOTE6;
}

public byte getVOTE7() {
return VOTE7;
}

public byte getVOTE8() {
return VOTE8;
}

public byte getVOUCHLETTER() {
return VOUCHLETTER;
}

public byte getVWHRS() {
return VWHRS;
}

public byte getVWMIN() {
return VWMIN;
}

public byte getWDAY() {
return WDAY;
}

public byte getWDHRS() {
return WDHRS;
}

public byte getWDMIN() {
return WDMIN;
}

public byte getWEKID() {
return WEKID;
}

public byte getWHODEAL() {
return WHODEAL;
}

public byte getWKFRUIT() {
return WKFRUIT;
}

public byte getWKPLSAM() {
return WKPLSAM;
}

public byte getWKVEGE() {
return WKVEGE;
}

public byte getWORKTRAV() {
return WORKTRAV;
}

public byte getWWHRS() {
return WWHRS;
}

public byte getWWMIN() {
return WWMIN;
}

public int getXPBORROW() {
return XPBORROW;
}

public int getXPEARN1() {
return XPEARN1;
}

public byte getXPEARN1DK() {
return XPEARN1DK;
}

public int getXPEARN3() {
return XPEARN3;
}

public byte getXPEARN3DK() {
return XPEARN3DK;
}

public int getXPEARNG1() {
return XPEARNG1;
}

public byte getXPEARNG1DK() {
return XPEARNG1DK;
}

public int getXPEARNG3() {
return XPEARNG3;
}

public byte getXPEARNG3DK() {
return XPEARNG3DK;
}

public byte getXPMOVE() {
return XPMOVE;
}

public byte getXPMVMNTH() {
return XPMVMNTH;
}

public byte getXPMVWHN() {
return XPMVWHN;
}

public byte getXPMVWHR() {
return XPMVWHR;
}

public short getXPMVYR() {
return XPMVYR;
}

public int getXPTUITION() {
return XPTUITION;
}

public byte getXTRA5MINOSM_DV() {
return XTRA5MINOSM_DV;
}

public byte getXTRA5MIN_DV() {
return XTRA5MIN_DV;
}

public byte getYAJBSRV1() {
return YAJBSRV1;
}

public byte getYAJBSRV2() {
return YAJBSRV2;
}

public byte getYAJBSRV3() {
return YAJBSRV3;
}

public byte getYAJBSRV4() {
return YAJBSRV4;
}

public byte getYAJBSRV5() {
return YAJBSRV5;
}

public byte getYAJBSRV7() {
return YAJBSRV7;
}

public byte getYAJBSRV8() {
return YAJBSRV8;
}

public byte getYAJBSRV96() {
return YAJBSRV96;
}

public byte getYANSSEC5_DV() {
return YANSSEC5_DV;
}

public short getYASOC00_CC() {
return YASOC00_CC;
}

public short getYASOC10_CC() {
return YASOC10_CC;
}

public byte getYASOC90_CC() {
return YASOC90_CC;
}

public byte getYELLKID() {
return YELLKID;
}

public byte getYPNETCHT() {
return YPNETCHT;
}

public byte getYPNPAL() {
return YPNPAL;
}

public byte getYPSOCWEB() {
return YPSOCWEB;
}

public US_Wave25_indresp_Record(String line) {
s = line.split("\t");
initPIDP(s[0]);
initPID(s[1]);
initHIDP(s[2]);
initPNO(s[3]);
initCHILDPNO(s[4]);
initHHORIG(s[5]);
initMEMORIG(s[6]);
initPSU(s[7]);
initSTRATA(s[8]);
initSAMPST(s[9]);
initMONTH(s[10]);
initQUARTER(s[11]);
initIVFIO(s[12]);
initIOUTCOME(s[13]);
initSEX(s[14]);
initDVAGE(s[15]);
initBIRTHY(s[16]);
initCHKRESPWEB(s[17]);
initCHKRESPWEB1(s[18]);
initCHKRESPWEB2(s[19]);
initCHKRESPWEB3(s[20]);
initCHKRESPWEB4(s[21]);
initCHKWEBDOBD(s[22]);
initCHKWEBDOBM(s[23]);
initCHKWEBDOBY(s[24]);
initCHKWEBSEX(s[25]);
initNCHUNDER16(s[26]);
initNCH5TO15(s[27]);
initNCH10TO15(s[28]);
initNCH10(s[29]);
initNUNDER16ABS(s[30]);
initN1619ABS(s[31]);
initNCHRESP(s[32]);
initNCH14RESP(s[33]);
initNCH415RESP(s[34]);
initNCH3RESP(s[35]);
initNCH5RESP(s[36]);
initNCH8RESP(s[37]);
initNADOPTCH(s[38]);
initNNATCH(s[39]);
initSIBLING(s[40]);
initISTRTDATHH(s[41]);
initISTRTDATMM(s[42]);
initISTRTDATSS(s[43]);
initISTRTDATY(s[44]);
initISTRTDATM(s[45]);
initISTRTDATD(s[46]);
initLIENG(s[47]);
initLITRANS(s[48]);
initLIWHO(s[49]);
initLIHOW(s[50]);
initCHKRESP1(s[51]);
initCHKRESP2(s[52]);
initCHKRESP3(s[53]);
initCHKRESP4(s[54]);
initDCDOBY(s[55]);
initDCSEX(s[56]);
initPBIRTHY(s[57]);
initPDVAGE(s[58]);
initMVEVER(s[59]);
initMVMNTH(s[60]);
initMVYR(s[61]);
initLKMOVE(s[62]);
initXPMOVE(s[63]);
initXPMVWHN(s[64]);
initXPMVMNTH(s[65]);
initXPMVYR(s[66]);
initXPMVWHR(s[67]);
initJBSTAT(s[68]);
initMLSTATCHK(s[69]);
initMLSTAT(s[70]);
initDRIVE(s[71]);
initCARUSE(s[72]);
initMOBUSE(s[73]);
initSMARTMOB(s[74]);
initMOBCOMP(s[75]);
initNETPUSE(s[76]);
initUKBORN(s[77]);
initPLBORNC(s[78]);
initYR2UK4(s[79]);
initCITZN1(s[80]);
initCITZN2(s[81]);
initCITZN3(s[82]);
initQFHIGH(s[83]);
initQUALOC(s[84]);
initGCSE5(s[85]);
initGCSEENG(s[86]);
initGCSEMAT(s[87]);
initQFVOC1(s[88]);
initQFVOC2(s[89]);
initQFVOC3(s[90]);
initQFVOC4(s[91]);
initQFVOC5(s[92]);
initQFVOC6(s[93]);
initQFVOC7(s[94]);
initQFVOC8(s[95]);
initQFVOC9(s[96]);
initQFVOC10(s[97]);
initQFVOC11(s[98]);
initQFVOC12(s[99]);
initQFVOC13(s[100]);
initQFVOC14(s[101]);
initQFVOC15(s[102]);
initQFVOC96(s[103]);
initSCHOOL_CAWI(s[104]);
initSCHOOL(s[105]);
initSCEND(s[106]);
initSCHLLOC(s[107]);
initSCHOK(s[108]);
initFENOW_CAWI(s[109]);
initFENOW(s[110]);
initFEEND(s[111]);
initJ1NONE(s[112]);
initJ1SEMP(s[113]);
initJ1BOSS(s[114]);
initJ1MNGR(s[115]);
initEDTYPE(s[116]);
initEDASP(s[117]);
initLVSCHDO(s[118]);
initAHVWELL(s[119]);
initHEDLIK(s[120]);
initHEDNT(s[121]);
initLVHM(s[122]);
initOCIMPA(s[123]);
initOCIMPB(s[124]);
initOCIMPE(s[125]);
initOCIMPF(s[126]);
initOCIMPI(s[127]);
initOCIMPK(s[128]);
initOCIMPL(s[129]);
initFUTRA(s[130]);
initFUTRB(s[131]);
initFUTRC(s[132]);
initFUTRD(s[133]);
initFUTRE(s[134]);
initFUTRF(s[135]);
initFUTRG(s[136]);
initFUTRH(s[137]);
initFUTRI(s[138]);
initFUTRJ(s[139]);
initFUTRK(s[140]);
initFUTRL(s[141]);
initODDSQUAL(s[142]);
initHEAPPLIED(s[143]);
initODDSAPPLY(s[144]);
initODDSSCHOL(s[145]);
initXPTUITION(s[146]);
initXPBORROW(s[147]);
initUNIFIN1(s[148]);
initUNISUB1(s[149]);
initODDSEMP1(s[150]);
initODDSEMP3(s[151]);
initXPEARN1(s[152]);
initXPEARN1DK(s[153]);
initXPEARN3(s[154]);
initXPEARN3DK(s[155]);
initXPEARNG1(s[156]);
initXPEARNG1DK(s[157]);
initXPEARNG3(s[158]);
initXPEARNG3DK(s[159]);
initPEDCHPNO(s[160]);
initPODDSQUAL(s[161]);
initPHEAPPLIED(s[162]);
initPODDSAPPLY(s[163]);
initPODDSSCHOL(s[164]);
initPXPTUITION(s[165]);
initPXPBORROW(s[166]);
initPUNIFIN1(s[167]);
initPUNISUB1(s[168]);
initPODDSEMP1(s[169]);
initPODDSEMP3(s[170]);
initPXPEARN1(s[171]);
initPXPEARN1DK(s[172]);
initPXPEARN3(s[173]);
initPXPEARN3DK(s[174]);
initPXPEARNG1(s[175]);
initPXPEARNG1DK(s[176]);
initPXPEARNG3(s[177]);
initPXPEARNG3DK(s[178]);
initPAJU(s[179]);
initMAJU(s[180]);
initPACOB(s[181]);
initPAYRUK(s[182]);
initMACOB(s[183]);
initMAYRUK(s[184]);
initNATID1(s[185]);
initNATID2(s[186]);
initNATID3(s[187]);
initNATID4(s[188]);
initNATID5(s[189]);
initNATID6(s[190]);
initNATID97(s[191]);
initRACEL(s[192]);
initRACELO_CODE(s[193]);
initRACELT(s[194]);
initRACELWT(s[195]);
initRACELMT(s[196]);
initRACELAT(s[197]);
initRACELBT(s[198]);
initRACELOT_CODE(s[199]);
initOPRLG(s[200]);
initOPRLG0NI(s[201]);
initNIREL(s[202]);
initNIACT(s[203]);
initOPRLG0(s[204]);
initOPRLG1(s[205]);
initUNSAFE1(s[206]);
initUNSAFE2(s[207]);
initUNSAFE3(s[208]);
initUNSAFE4(s[209]);
initUNSAFE5(s[210]);
initUNSAFE6(s[211]);
initUNSAFE7(s[212]);
initUNSAFE8(s[213]);
initUNSAFE9(s[214]);
initUNSAFE10(s[215]);
initUNSAFE11(s[216]);
initUNSAFE96(s[217]);
initUNSAFE97(s[218]);
initUNSAFEO_CODE(s[219]);
initRESUNSAFE1_1(s[220]);
initRESUNSAFE2_1(s[221]);
initRESUNSAFE3_1(s[222]);
initRESUNSAFE4_1(s[223]);
initRESUNSAFE5_1(s[224]);
initRESUNSAFE6_1(s[225]);
initRESUNSAFE7_1(s[226]);
initRESUNSAFE8_1(s[227]);
initRESUNSAFE9_1(s[228]);
initRESUNSAFE96_1(s[229]);
initRESUNSAFE97_1(s[230]);
initRESUNSAFE1_2(s[231]);
initRESUNSAFE2_2(s[232]);
initRESUNSAFE3_2(s[233]);
initRESUNSAFE4_2(s[234]);
initRESUNSAFE5_2(s[235]);
initRESUNSAFE6_2(s[236]);
initRESUNSAFE7_2(s[237]);
initRESUNSAFE8_2(s[238]);
initRESUNSAFE9_2(s[239]);
initRESUNSAFE96_2(s[240]);
initRESUNSAFE97_2(s[241]);
initRESUNSAFE1_3(s[242]);
initRESUNSAFE2_3(s[243]);
initRESUNSAFE3_3(s[244]);
initRESUNSAFE4_3(s[245]);
initRESUNSAFE5_3(s[246]);
initRESUNSAFE6_3(s[247]);
initRESUNSAFE7_3(s[248]);
initRESUNSAFE8_3(s[249]);
initRESUNSAFE9_3(s[250]);
initRESUNSAFE96_3(s[251]);
initRESUNSAFE97_3(s[252]);
initRESUNSAFE1_4(s[253]);
initRESUNSAFE2_4(s[254]);
initRESUNSAFE3_4(s[255]);
initRESUNSAFE4_4(s[256]);
initRESUNSAFE5_4(s[257]);
initRESUNSAFE6_4(s[258]);
initRESUNSAFE7_4(s[259]);
initRESUNSAFE8_4(s[260]);
initRESUNSAFE9_4(s[261]);
initRESUNSAFE96_4(s[262]);
initRESUNSAFE97_4(s[263]);
initRESUNSAFE1_5(s[264]);
initRESUNSAFE2_5(s[265]);
initRESUNSAFE3_5(s[266]);
initRESUNSAFE4_5(s[267]);
initRESUNSAFE5_5(s[268]);
initRESUNSAFE6_5(s[269]);
initRESUNSAFE7_5(s[270]);
initRESUNSAFE8_5(s[271]);
initRESUNSAFE9_5(s[272]);
initRESUNSAFE96_5(s[273]);
initRESUNSAFE97_5(s[274]);
initRESUNSAFE1_6(s[275]);
initRESUNSAFE2_6(s[276]);
initRESUNSAFE3_6(s[277]);
initRESUNSAFE4_6(s[278]);
initRESUNSAFE5_6(s[279]);
initRESUNSAFE6_6(s[280]);
initRESUNSAFE7_6(s[281]);
initRESUNSAFE8_6(s[282]);
initRESUNSAFE9_6(s[283]);
initRESUNSAFE96_6(s[284]);
initRESUNSAFE97_6(s[285]);
initRESUNSAFE1_7(s[286]);
initRESUNSAFE2_7(s[287]);
initRESUNSAFE3_7(s[288]);
initRESUNSAFE4_7(s[289]);
initRESUNSAFE5_7(s[290]);
initRESUNSAFE6_7(s[291]);
initRESUNSAFE7_7(s[292]);
initRESUNSAFE8_7(s[293]);
initRESUNSAFE9_7(s[294]);
initRESUNSAFE96_7(s[295]);
initRESUNSAFE97_7(s[296]);
initRESUNSAFE1_8(s[297]);
initRESUNSAFE2_8(s[298]);
initRESUNSAFE3_8(s[299]);
initRESUNSAFE4_8(s[300]);
initRESUNSAFE5_8(s[301]);
initRESUNSAFE6_8(s[302]);
initRESUNSAFE7_8(s[303]);
initRESUNSAFE8_8(s[304]);
initRESUNSAFE9_8(s[305]);
initRESUNSAFE96_8(s[306]);
initRESUNSAFE97_8(s[307]);
initRESUNSAFE1_9(s[308]);
initRESUNSAFE2_9(s[309]);
initRESUNSAFE3_9(s[310]);
initRESUNSAFE4_9(s[311]);
initRESUNSAFE5_9(s[312]);
initRESUNSAFE6_9(s[313]);
initRESUNSAFE7_9(s[314]);
initRESUNSAFE8_9(s[315]);
initRESUNSAFE9_9(s[316]);
initRESUNSAFE96_9(s[317]);
initRESUNSAFE97_9(s[318]);
initRESUNSAFE1_10(s[319]);
initRESUNSAFE2_10(s[320]);
initRESUNSAFE3_10(s[321]);
initRESUNSAFE4_10(s[322]);
initRESUNSAFE5_10(s[323]);
initRESUNSAFE6_10(s[324]);
initRESUNSAFE7_10(s[325]);
initRESUNSAFE8_10(s[326]);
initRESUNSAFE9_10(s[327]);
initRESUNSAFE96_10(s[328]);
initRESUNSAFE97_10(s[329]);
initRESUNSAFE1_11(s[330]);
initRESUNSAFE2_11(s[331]);
initRESUNSAFE3_11(s[332]);
initRESUNSAFE4_11(s[333]);
initRESUNSAFE5_11(s[334]);
initRESUNSAFE6_11(s[335]);
initRESUNSAFE7_11(s[336]);
initRESUNSAFE8_11(s[337]);
initRESUNSAFE9_11(s[338]);
initRESUNSAFE96_11(s[339]);
initRESUNSAFE97_11(s[340]);
initRESUNSAFE1_12(s[341]);
initRESUNSAFE2_12(s[342]);
initRESUNSAFE3_12(s[343]);
initRESUNSAFE4_12(s[344]);
initRESUNSAFE5_12(s[345]);
initRESUNSAFE6_12(s[346]);
initRESUNSAFE7_12(s[347]);
initRESUNSAFE8_12(s[348]);
initRESUNSAFE9_12(s[349]);
initRESUNSAFE96_12(s[350]);
initRESUNSAFE97_12(s[351]);
initAVOIDANCE1(s[352]);
initAVOIDANCE2(s[353]);
initAVOIDANCE3(s[354]);
initAVOIDANCE4(s[355]);
initAVOIDANCE5(s[356]);
initAVOIDANCE6(s[357]);
initAVOIDANCE7(s[358]);
initAVOIDANCE8(s[359]);
initAVOIDANCE9(s[360]);
initAVOIDANCE10(s[361]);
initAVOIDANCE11(s[362]);
initAVOIDANCE96(s[363]);
initAVOIDANCE97(s[364]);
initAVOIDANCEO_CODE(s[365]);
initRESAVOID1_1(s[366]);
initRESAVOID2_1(s[367]);
initRESAVOID3_1(s[368]);
initRESAVOID4_1(s[369]);
initRESAVOID5_1(s[370]);
initRESAVOID6_1(s[371]);
initRESAVOID7_1(s[372]);
initRESAVOID8_1(s[373]);
initRESAVOID9_1(s[374]);
initRESAVOID96_1(s[375]);
initRESAVOID97_1(s[376]);
initRESAVOID1_2(s[377]);
initRESAVOID2_2(s[378]);
initRESAVOID3_2(s[379]);
initRESAVOID4_2(s[380]);
initRESAVOID5_2(s[381]);
initRESAVOID6_2(s[382]);
initRESAVOID7_2(s[383]);
initRESAVOID8_2(s[384]);
initRESAVOID9_2(s[385]);
initRESAVOID96_2(s[386]);
initRESAVOID97_2(s[387]);
initRESAVOID1_3(s[388]);
initRESAVOID2_3(s[389]);
initRESAVOID3_3(s[390]);
initRESAVOID4_3(s[391]);
initRESAVOID5_3(s[392]);
initRESAVOID6_3(s[393]);
initRESAVOID7_3(s[394]);
initRESAVOID8_3(s[395]);
initRESAVOID9_3(s[396]);
initRESAVOID96_3(s[397]);
initRESAVOID97_3(s[398]);
initRESAVOID1_4(s[399]);
initRESAVOID2_4(s[400]);
initRESAVOID3_4(s[401]);
initRESAVOID4_4(s[402]);
initRESAVOID5_4(s[403]);
initRESAVOID6_4(s[404]);
initRESAVOID7_4(s[405]);
initRESAVOID8_4(s[406]);
initRESAVOID9_4(s[407]);
initRESAVOID96_4(s[408]);
initRESAVOID97_4(s[409]);
initRESAVOID1_5(s[410]);
initRESAVOID2_5(s[411]);
initRESAVOID3_5(s[412]);
initRESAVOID4_5(s[413]);
initRESAVOID5_5(s[414]);
initRESAVOID6_5(s[415]);
initRESAVOID7_5(s[416]);
initRESAVOID8_5(s[417]);
initRESAVOID9_5(s[418]);
initRESAVOID96_5(s[419]);
initRESAVOID97_5(s[420]);
initRESAVOID1_6(s[421]);
initRESAVOID2_6(s[422]);
initRESAVOID3_6(s[423]);
initRESAVOID4_6(s[424]);
initRESAVOID5_6(s[425]);
initRESAVOID6_6(s[426]);
initRESAVOID7_6(s[427]);
initRESAVOID8_6(s[428]);
initRESAVOID9_6(s[429]);
initRESAVOID96_6(s[430]);
initRESAVOID97_6(s[431]);
initRESAVOID1_7(s[432]);
initRESAVOID2_7(s[433]);
initRESAVOID3_7(s[434]);
initRESAVOID4_7(s[435]);
initRESAVOID5_7(s[436]);
initRESAVOID6_7(s[437]);
initRESAVOID7_7(s[438]);
initRESAVOID8_7(s[439]);
initRESAVOID9_7(s[440]);
initRESAVOID96_7(s[441]);
initRESAVOID97_7(s[442]);
initRESAVOID1_8(s[443]);
initRESAVOID2_8(s[444]);
initRESAVOID3_8(s[445]);
initRESAVOID4_8(s[446]);
initRESAVOID5_8(s[447]);
initRESAVOID6_8(s[448]);
initRESAVOID7_8(s[449]);
initRESAVOID8_8(s[450]);
initRESAVOID9_8(s[451]);
initRESAVOID96_8(s[452]);
initRESAVOID97_8(s[453]);
initRESAVOID1_9(s[454]);
initRESAVOID2_9(s[455]);
initRESAVOID3_9(s[456]);
initRESAVOID4_9(s[457]);
initRESAVOID5_9(s[458]);
initRESAVOID6_9(s[459]);
initRESAVOID7_9(s[460]);
initRESAVOID8_9(s[461]);
initRESAVOID9_9(s[462]);
initRESAVOID96_9(s[463]);
initRESAVOID97_9(s[464]);
initRESAVOID1_10(s[465]);
initRESAVOID2_10(s[466]);
initRESAVOID3_10(s[467]);
initRESAVOID4_10(s[468]);
initRESAVOID5_10(s[469]);
initRESAVOID6_10(s[470]);
initRESAVOID7_10(s[471]);
initRESAVOID8_10(s[472]);
initRESAVOID9_10(s[473]);
initRESAVOID96_10(s[474]);
initRESAVOID97_10(s[475]);
initRESAVOID1_11(s[476]);
initRESAVOID2_11(s[477]);
initRESAVOID3_11(s[478]);
initRESAVOID4_11(s[479]);
initRESAVOID5_11(s[480]);
initRESAVOID6_11(s[481]);
initRESAVOID7_11(s[482]);
initRESAVOID8_11(s[483]);
initRESAVOID9_11(s[484]);
initRESAVOID96_11(s[485]);
initRESAVOID97_11(s[486]);
initRESAVOID1_12(s[487]);
initRESAVOID2_12(s[488]);
initRESAVOID3_12(s[489]);
initRESAVOID4_12(s[490]);
initRESAVOID5_12(s[491]);
initRESAVOID6_12(s[492]);
initRESAVOID7_12(s[493]);
initRESAVOID8_12(s[494]);
initRESAVOID9_12(s[495]);
initRESAVOID96_12(s[496]);
initRESAVOID97_12(s[497]);
initINSULTED1(s[498]);
initINSULTED2(s[499]);
initINSULTED3(s[500]);
initINSULTED4(s[501]);
initINSULTED5(s[502]);
initINSULTED6(s[503]);
initINSULTED7(s[504]);
initINSULTED8(s[505]);
initINSULTED9(s[506]);
initINSULTED10(s[507]);
initINSULTED11(s[508]);
initINSULTED96(s[509]);
initINSULTED97(s[510]);
initINSULTEDO_CODE(s[511]);
initRESINSULTED1_1(s[512]);
initRESINSULTED2_1(s[513]);
initRESINSULTED3_1(s[514]);
initRESINSULTED4_1(s[515]);
initRESINSULTED5_1(s[516]);
initRESINSULTED6_1(s[517]);
initRESINSULTED7_1(s[518]);
initRESINSULTED8_1(s[519]);
initRESINSULTED9_1(s[520]);
initRESINSULTED96_1(s[521]);
initRESINSULTED97_1(s[522]);
initRESINSULTED1_2(s[523]);
initRESINSULTED2_2(s[524]);
initRESINSULTED3_2(s[525]);
initRESINSULTED4_2(s[526]);
initRESINSULTED5_2(s[527]);
initRESINSULTED6_2(s[528]);
initRESINSULTED7_2(s[529]);
initRESINSULTED8_2(s[530]);
initRESINSULTED9_2(s[531]);
initRESINSULTED96_2(s[532]);
initRESINSULTED97_2(s[533]);
initRESINSULTED1_3(s[534]);
initRESINSULTED2_3(s[535]);
initRESINSULTED3_3(s[536]);
initRESINSULTED4_3(s[537]);
initRESINSULTED5_3(s[538]);
initRESINSULTED6_3(s[539]);
initRESINSULTED7_3(s[540]);
initRESINSULTED8_3(s[541]);
initRESINSULTED9_3(s[542]);
initRESINSULTED96_3(s[543]);
initRESINSULTED97_3(s[544]);
initRESINSULTED1_4(s[545]);
initRESINSULTED2_4(s[546]);
initRESINSULTED3_4(s[547]);
initRESINSULTED4_4(s[548]);
initRESINSULTED5_4(s[549]);
initRESINSULTED6_4(s[550]);
initRESINSULTED7_4(s[551]);
initRESINSULTED8_4(s[552]);
initRESINSULTED9_4(s[553]);
initRESINSULTED96_4(s[554]);
initRESINSULTED97_4(s[555]);
initRESINSULTED1_5(s[556]);
initRESINSULTED2_5(s[557]);
initRESINSULTED3_5(s[558]);
initRESINSULTED4_5(s[559]);
initRESINSULTED5_5(s[560]);
initRESINSULTED6_5(s[561]);
initRESINSULTED7_5(s[562]);
initRESINSULTED8_5(s[563]);
initRESINSULTED9_5(s[564]);
initRESINSULTED96_5(s[565]);
initRESINSULTED97_5(s[566]);
initRESINSULTED1_6(s[567]);
initRESINSULTED2_6(s[568]);
initRESINSULTED3_6(s[569]);
initRESINSULTED4_6(s[570]);
initRESINSULTED5_6(s[571]);
initRESINSULTED6_6(s[572]);
initRESINSULTED7_6(s[573]);
initRESINSULTED8_6(s[574]);
initRESINSULTED9_6(s[575]);
initRESINSULTED96_6(s[576]);
initRESINSULTED97_6(s[577]);
initRESINSULTED1_7(s[578]);
initRESINSULTED2_7(s[579]);
initRESINSULTED3_7(s[580]);
initRESINSULTED4_7(s[581]);
initRESINSULTED5_7(s[582]);
initRESINSULTED6_7(s[583]);
initRESINSULTED7_7(s[584]);
initRESINSULTED8_7(s[585]);
initRESINSULTED9_7(s[586]);
initRESINSULTED96_7(s[587]);
initRESINSULTED97_7(s[588]);
initRESINSULTED1_8(s[589]);
initRESINSULTED2_8(s[590]);
initRESINSULTED3_8(s[591]);
initRESINSULTED4_8(s[592]);
initRESINSULTED5_8(s[593]);
initRESINSULTED6_8(s[594]);
initRESINSULTED7_8(s[595]);
initRESINSULTED8_8(s[596]);
initRESINSULTED9_8(s[597]);
initRESINSULTED96_8(s[598]);
initRESINSULTED97_8(s[599]);
initRESINSULTED1_9(s[600]);
initRESINSULTED2_9(s[601]);
initRESINSULTED3_9(s[602]);
initRESINSULTED4_9(s[603]);
initRESINSULTED5_9(s[604]);
initRESINSULTED6_9(s[605]);
initRESINSULTED7_9(s[606]);
initRESINSULTED8_9(s[607]);
initRESINSULTED9_9(s[608]);
initRESINSULTED96_9(s[609]);
initRESINSULTED97_9(s[610]);
initRESINSULTED1_10(s[611]);
initRESINSULTED2_10(s[612]);
initRESINSULTED3_10(s[613]);
initRESINSULTED4_10(s[614]);
initRESINSULTED5_10(s[615]);
initRESINSULTED6_10(s[616]);
initRESINSULTED7_10(s[617]);
initRESINSULTED8_10(s[618]);
initRESINSULTED9_10(s[619]);
initRESINSULTED96_10(s[620]);
initRESINSULTED97_10(s[621]);
initRESINSULTED1_11(s[622]);
initRESINSULTED2_11(s[623]);
initRESINSULTED3_11(s[624]);
initRESINSULTED4_11(s[625]);
initRESINSULTED5_11(s[626]);
initRESINSULTED6_11(s[627]);
initRESINSULTED7_11(s[628]);
initRESINSULTED8_11(s[629]);
initRESINSULTED9_11(s[630]);
initRESINSULTED96_11(s[631]);
initRESINSULTED97_11(s[632]);
initRESINSULTED1_12(s[633]);
initRESINSULTED2_12(s[634]);
initRESINSULTED3_12(s[635]);
initRESINSULTED4_12(s[636]);
initRESINSULTED5_12(s[637]);
initRESINSULTED6_12(s[638]);
initRESINSULTED7_12(s[639]);
initRESINSULTED8_12(s[640]);
initRESINSULTED9_12(s[641]);
initRESINSULTED96_12(s[642]);
initRESINSULTED97_12(s[643]);
initATTACKED1(s[644]);
initATTACKED2(s[645]);
initATTACKED3(s[646]);
initATTACKED4(s[647]);
initATTACKED5(s[648]);
initATTACKED6(s[649]);
initATTACKED7(s[650]);
initATTACKED8(s[651]);
initATTACKED9(s[652]);
initATTACKED10(s[653]);
initATTACKED11(s[654]);
initATTACKED96(s[655]);
initATTACKED97(s[656]);
initATTACKEDO_CODE(s[657]);
initRESATTACKED1_1(s[658]);
initRESATTACKED2_1(s[659]);
initRESATTACKED3_1(s[660]);
initRESATTACKED4_1(s[661]);
initRESATTACKED5_1(s[662]);
initRESATTACKED6_1(s[663]);
initRESATTACKED7_1(s[664]);
initRESATTACKED8_1(s[665]);
initRESATTACKED9_1(s[666]);
initRESATTACKED96_1(s[667]);
initRESATTACKED97_1(s[668]);
initRESATTACKED1_2(s[669]);
initRESATTACKED2_2(s[670]);
initRESATTACKED3_2(s[671]);
initRESATTACKED4_2(s[672]);
initRESATTACKED5_2(s[673]);
initRESATTACKED6_2(s[674]);
initRESATTACKED7_2(s[675]);
initRESATTACKED8_2(s[676]);
initRESATTACKED9_2(s[677]);
initRESATTACKED96_2(s[678]);
initRESATTACKED97_2(s[679]);
initRESATTACKED1_3(s[680]);
initRESATTACKED2_3(s[681]);
initRESATTACKED3_3(s[682]);
initRESATTACKED4_3(s[683]);
initRESATTACKED5_3(s[684]);
initRESATTACKED6_3(s[685]);
initRESATTACKED7_3(s[686]);
initRESATTACKED8_3(s[687]);
initRESATTACKED9_3(s[688]);
initRESATTACKED96_3(s[689]);
initRESATTACKED97_3(s[690]);
initRESATTACKED1_4(s[691]);
initRESATTACKED2_4(s[692]);
initRESATTACKED3_4(s[693]);
initRESATTACKED4_4(s[694]);
initRESATTACKED5_4(s[695]);
initRESATTACKED6_4(s[696]);
initRESATTACKED7_4(s[697]);
initRESATTACKED8_4(s[698]);
initRESATTACKED9_4(s[699]);
initRESATTACKED96_4(s[700]);
initRESATTACKED97_4(s[701]);
initRESATTACKED1_5(s[702]);
initRESATTACKED2_5(s[703]);
initRESATTACKED3_5(s[704]);
initRESATTACKED4_5(s[705]);
initRESATTACKED5_5(s[706]);
initRESATTACKED6_5(s[707]);
initRESATTACKED7_5(s[708]);
initRESATTACKED8_5(s[709]);
initRESATTACKED9_5(s[710]);
initRESATTACKED96_5(s[711]);
initRESATTACKED97_5(s[712]);
initRESATTACKED1_6(s[713]);
initRESATTACKED2_6(s[714]);
initRESATTACKED3_6(s[715]);
initRESATTACKED4_6(s[716]);
initRESATTACKED5_6(s[717]);
initRESATTACKED6_6(s[718]);
initRESATTACKED7_6(s[719]);
initRESATTACKED8_6(s[720]);
initRESATTACKED9_6(s[721]);
initRESATTACKED96_6(s[722]);
initRESATTACKED97_6(s[723]);
initRESATTACKED1_7(s[724]);
initRESATTACKED2_7(s[725]);
initRESATTACKED3_7(s[726]);
initRESATTACKED4_7(s[727]);
initRESATTACKED5_7(s[728]);
initRESATTACKED6_7(s[729]);
initRESATTACKED7_7(s[730]);
initRESATTACKED8_7(s[731]);
initRESATTACKED9_7(s[732]);
initRESATTACKED96_7(s[733]);
initRESATTACKED97_7(s[734]);
initRESATTACKED1_8(s[735]);
initRESATTACKED2_8(s[736]);
initRESATTACKED3_8(s[737]);
initRESATTACKED4_8(s[738]);
initRESATTACKED5_8(s[739]);
initRESATTACKED6_8(s[740]);
initRESATTACKED7_8(s[741]);
initRESATTACKED8_8(s[742]);
initRESATTACKED9_8(s[743]);
initRESATTACKED96_8(s[744]);
initRESATTACKED97_8(s[745]);
initRESATTACKED1_9(s[746]);
initRESATTACKED2_9(s[747]);
initRESATTACKED3_9(s[748]);
initRESATTACKED4_9(s[749]);
initRESATTACKED5_9(s[750]);
initRESATTACKED6_9(s[751]);
initRESATTACKED7_9(s[752]);
initRESATTACKED8_9(s[753]);
initRESATTACKED9_9(s[754]);
initRESATTACKED96_9(s[755]);
initRESATTACKED97_9(s[756]);
initRESATTACKED1_10(s[757]);
initRESATTACKED2_10(s[758]);
initRESATTACKED3_10(s[759]);
initRESATTACKED4_10(s[760]);
initRESATTACKED5_10(s[761]);
initRESATTACKED6_10(s[762]);
initRESATTACKED7_10(s[763]);
initRESATTACKED8_10(s[764]);
initRESATTACKED9_10(s[765]);
initRESATTACKED96_10(s[766]);
initRESATTACKED97_10(s[767]);
initRESATTACKED1_11(s[768]);
initRESATTACKED2_11(s[769]);
initRESATTACKED3_11(s[770]);
initRESATTACKED4_11(s[771]);
initRESATTACKED5_11(s[772]);
initRESATTACKED6_11(s[773]);
initRESATTACKED7_11(s[774]);
initRESATTACKED8_11(s[775]);
initRESATTACKED9_11(s[776]);
initRESATTACKED96_11(s[777]);
initRESATTACKED97_11(s[778]);
initRESATTACKED1_12(s[779]);
initRESATTACKED2_12(s[780]);
initRESATTACKED3_12(s[781]);
initRESATTACKED4_12(s[782]);
initRESATTACKED5_12(s[783]);
initRESATTACKED6_12(s[784]);
initRESATTACKED7_12(s[785]);
initRESATTACKED8_12(s[786]);
initRESATTACKED9_12(s[787]);
initRESATTACKED96_12(s[788]);
initRESATTACKED97_12(s[789]);
initHEALTH(s[790]);
initHOSPC1(s[791]);
initHOSPDC1(s[792]);
initHOSPC2(s[793]);
initHOSPDC2(s[794]);
initHOSPC3(s[795]);
initHOSPDC3(s[796]);
initHOSPC4(s[797]);
initHOSPDC4(s[798]);
initHOSPC5(s[799]);
initHOSPDC5(s[800]);
initDISDIF1(s[801]);
initDISDIF2(s[802]);
initDISDIF3(s[803]);
initDISDIF4(s[804]);
initDISDIF5(s[805]);
initDISDIF6(s[806]);
initDISDIF7(s[807]);
initDISDIF8(s[808]);
initDISDIF9(s[809]);
initDISDIF10(s[810]);
initDISDIF11(s[811]);
initDISDIF12(s[812]);
initDISDIF96(s[813]);
initDISSEV1(s[814]);
initDISSEV2(s[815]);
initDISSEV3(s[816]);
initDISSEV4(s[817]);
initDISSEV5(s[818]);
initDISSEV6(s[819]);
initDISSEV7(s[820]);
initDISSEV8(s[821]);
initDISSEV9(s[822]);
initDISSEV10(s[823]);
initDISSEV11(s[824]);
initDISSEV12(s[825]);
initHRS_SLPH(s[826]);
initHRS_SLPM(s[827]);
initTSLP_30M(s[828]);
initTSLP_WAK(s[829]);
initTSLP_CGH(s[830]);
initMED_SLP(s[831]);
initTSTA_AWK(s[832]);
initSLP_QUAL(s[833]);
initHCOND1(s[834]);
initHCOND2(s[835]);
initHCOND3(s[836]);
initHCOND4(s[837]);
initHCOND5(s[838]);
initHCOND6(s[839]);
initHCOND7(s[840]);
initHCOND8(s[841]);
initHCOND9(s[842]);
initHCOND10(s[843]);
initHCOND11(s[844]);
initHCOND12(s[845]);
initHCOND13(s[846]);
initHCOND14(s[847]);
initHCOND15(s[848]);
initHCOND16(s[849]);
initHCOND17(s[850]);
initHCOND19(s[851]);
initHCOND20(s[852]);
initHCOND18(s[853]);
initHCOND96(s[854]);
initHCONDS01(s[855]);
initHCONDS02(s[856]);
initHCONDS03(s[857]);
initHCONDS04(s[858]);
initHCONDS05(s[859]);
initHCONDS08(s[860]);
initHCONDS09(s[861]);
initHCONDS10(s[862]);
initHCONDS11(s[863]);
initHCONDS12(s[864]);
initHCONDS13(s[865]);
initHCONDS14(s[866]);
initHCONDS15(s[867]);
initHCONDS16(s[868]);
initHCONDS17(s[869]);
initHCONDA01(s[870]);
initHCONDA02(s[871]);
initHCONDA03(s[872]);
initHCONDA04(s[873]);
initHCONDA05(s[874]);
initHCONDA06(s[875]);
initHCONDA07(s[876]);
initHCONDA08(s[877]);
initHCONDA09(s[878]);
initHCONDA10(s[879]);
initHCONDA11(s[880]);
initHCONDA12(s[881]);
initHCONDA13(s[882]);
initHCONDA14(s[883]);
initHCONDA15(s[884]);
initHCONDA16(s[885]);
initHCONDA17(s[886]);
initHCONDA19(s[887]);
initHCONDA20(s[888]);
initHL2GP(s[889]);
initHL2HOP(s[890]);
initHOSP(s[891]);
initHOSPD(s[892]);
initHOSPCH(s[893]);
initSMOKER(s[894]);
initNCIGS(s[895]);
initECIGS(s[896]);
initBREAKFST(s[897]);
initUSDAIRY1(s[898]);
initUSDAIRY2(s[899]);
initUSDAIRY3(s[900]);
initUSDAIRY4(s[901]);
initUSDAIRY5(s[902]);
initUSDAIRY6(s[903]);
initUSBREAD1(s[904]);
initUSBREAD2(s[905]);
initUSBREAD3(s[906]);
initUSBREAD4(s[907]);
initUSBREAD5(s[908]);
initUSBREAD6(s[909]);
initUSBREAD7(s[910]);
initWKFRUIT(s[911]);
initFRUITAMT(s[912]);
initWKVEGE(s[913]);
initVEGEAMT(s[914]);
initVDAY(s[915]);
initVDHRS(s[916]);
initVDMIN(s[917]);
initVWHRS(s[918]);
initVWMIN(s[919]);
initMDAY(s[920]);
initMDHRS(s[921]);
initMDMIN(s[922]);
initMWHRS(s[923]);
initMWMIN(s[924]);
initWDAY(s[925]);
initWDHRS(s[926]);
initWDMIN(s[927]);
initWWHRS(s[928]);
initWWMIN(s[929]);
initADLA(s[930]);
initADLAD(s[931]);
initADLB(s[932]);
initADLBD(s[933]);
initADLC(s[934]);
initADLCD(s[935]);
initADLD(s[936]);
initADLDD(s[937]);
initADLE(s[938]);
initADLED(s[939]);
initADLF(s[940]);
initADLFD(s[941]);
initADLG(s[942]);
initADLGD(s[943]);
initADLH(s[944]);
initADLHD(s[945]);
initADLI(s[946]);
initADLID(s[947]);
initADLJ(s[948]);
initADLJD(s[949]);
initADLK(s[950]);
initADLKD(s[951]);
initADLL(s[952]);
initADLLD(s[953]);
initADLM(s[954]);
initADLMD(s[955]);
initADLN(s[956]);
initADLND(s[957]);
initHLPINFA1(s[958]);
initHLPINFA2(s[959]);
initHLPINFA3(s[960]);
initHLPINFA4(s[961]);
initHLPINFA5(s[962]);
initHLPINFA6(s[963]);
initHLPINFA7(s[964]);
initHLPINFA8(s[965]);
initHLPINFA9(s[966]);
initHLPINFA10(s[967]);
initHLPINFA96(s[968]);
initHINFANO1(s[969]);
initHINFANO2(s[970]);
initHINFANO3(s[971]);
initHINFANO4(s[972]);
initHINFANO5(s[973]);
initHINFANO6(s[974]);
initHINFANO7(s[975]);
initHINFANO8(s[976]);
initHINFANO9(s[977]);
initHLPFORMA1(s[978]);
initHLPFORMA2(s[979]);
initHLPFORMA3(s[980]);
initHLPFORMA4(s[981]);
initHLPFORMA5(s[982]);
initHLPFORMA6(s[983]);
initHLPFORMA7(s[984]);
initHLPFORMA97(s[985]);
initHLPFORMA96(s[986]);
initHLPINFB1(s[987]);
initHLPINFB2(s[988]);
initHLPINFB3(s[989]);
initHLPINFB4(s[990]);
initHLPINFB5(s[991]);
initHLPINFB6(s[992]);
initHLPINFB7(s[993]);
initHLPINFB8(s[994]);
initHLPINFB9(s[995]);
initHLPINFB10(s[996]);
initHLPINFB96(s[997]);
initHINFBNO1(s[998]);
initHINFBNO2(s[999]);
initHINFBNO3(s[1000]);
initHINFBNO4(s[1001]);
initHINFBNO5(s[1002]);
initHINFBNO6(s[1003]);
initHINFBNO7(s[1004]);
initHINFBNO8(s[1005]);
initHINFBNO9(s[1006]);
initHLPFORMB1(s[1007]);
initHLPFORMB2(s[1008]);
initHLPFORMB3(s[1009]);
initHLPFORMB4(s[1010]);
initHLPFORMB5(s[1011]);
initHLPFORMB6(s[1012]);
initHLPFORMB7(s[1013]);
initHLPFORMB97(s[1014]);
initHLPFORMB96(s[1015]);
initHELPCODE1(s[1016]);
initHELPCODE2(s[1017]);
initHELPCODE3(s[1018]);
initHELPCODE4(s[1019]);
initHELPCODE5(s[1020]);
initHELPCODE6(s[1021]);
initHELPCODE7(s[1022]);
initHELPCODE8(s[1023]);
initHELPHOURS1(s[1024]);
initHELPHOURSB1(s[1025]);
initHELPHOURS2(s[1026]);
initHELPHOURSB2(s[1027]);
initHELPHOURS3(s[1028]);
initHELPHOURSB3(s[1029]);
initHELPHOURS4(s[1030]);
initHELPHOURSB4(s[1031]);
initHELPHOURS5(s[1032]);
initHELPHOURSB5(s[1033]);
initHELPHOURS6(s[1034]);
initHELPHOURSB6(s[1035]);
initHELPHOURS7(s[1036]);
initHELPHOURSB7(s[1037]);
initHELPHOURS8(s[1038]);
initHELPHOURSB8(s[1039]);
initWHODEAL(s[1040]);
initHAVEDP1(s[1041]);
initHAVEDP2(s[1042]);
initHAVEDP3(s[1043]);
initINCASS(s[1044]);
initLAHELP11(s[1045]);
initLAHELP12(s[1046]);
initLAHELP13(s[1047]);
initLAHELP14(s[1048]);
initLAHELP15(s[1049]);
initLAHELP16(s[1050]);
initLAHELP17(s[1051]);
initLAHELP18(s[1052]);
initSCPAYREA(s[1053]);
initSCPAYREB(s[1054]);
initSCPAYCODEA11(s[1055]);
initSCPAYCODEA12(s[1056]);
initSCPAYCODEA13(s[1057]);
initSCPAYCODEA14(s[1058]);
initSCPAYCODEA15(s[1059]);
initSCPAYCODEA16(s[1060]);
initSCPAYCODEA17(s[1061]);
initSCPAYCODEA18(s[1062]);
initSCPAYCODEB11(s[1063]);
initSCPAYCODEB12(s[1064]);
initSCPAYCODEB13(s[1065]);
initSCPAYCODEB14(s[1066]);
initSCPAYCODEB15(s[1067]);
initSCPAYCODEB16(s[1068]);
initSCPAYCODEB17(s[1069]);
initSCPAYCODEB18(s[1070]);
initANYPAYA(s[1071]);
initPAYAMTA(s[1072]);
initPAYFREQA(s[1073]);
initALLCOSTA(s[1074]);
initHOWPAYA1(s[1075]);
initHOWPAYA2(s[1076]);
initHOWPAYA3(s[1077]);
initADDPAYA(s[1078]);
initLAPAYA1(s[1079]);
initLAPAYA2(s[1080]);
initLAAMTA(s[1081]);
initLAFREQA(s[1082]);
initDPPAYA(s[1083]);
initDPFREQA(s[1084]);
initNOPAYA(s[1085]);
initANYPAYB(s[1086]);
initPAYAMTB(s[1087]);
initPAYFREQB(s[1088]);
initALLCOSTB(s[1089]);
initHOWPAYB1(s[1090]);
initHOWPAYB2(s[1091]);
initHOWPAYB3(s[1092]);
initADDPAYB(s[1093]);
initLAPAYB1(s[1094]);
initLAPAYB2(s[1095]);
initDPPAYB(s[1096]);
initDPFREQB(s[1097]);
initNOPAYB(s[1098]);
initAIDHH(s[1099]);
initAIDHUA1(s[1100]);
initAIDHUA2(s[1101]);
initAIDHUA3(s[1102]);
initAIDHUA4(s[1103]);
initAIDHUA5(s[1104]);
initAIDHUA6(s[1105]);
initAIDHUA7(s[1106]);
initAIDHUA8(s[1107]);
initAIDHUA9(s[1108]);
initAIDHUA10(s[1109]);
initAIDHUA11(s[1110]);
initAIDHUA12(s[1111]);
initAIDHUA13(s[1112]);
initAIDHUA14(s[1113]);
initAIDHUA15(s[1114]);
initAIDHUA16(s[1115]);
initAIDXHH(s[1116]);
initNAIDXHH(s[1117]);
initAIDHU1(s[1118]);
initAIDHU2(s[1119]);
initAIDHRS(s[1120]);
initAIDEFT(s[1121]);
initCASCH(s[1122]);
initLCOHNPI(s[1123]);
initCOH1BM(s[1124]);
initCOH1BY(s[1125]);
initCOH1MR(s[1126]);
initCOH1EM(s[1127]);
initCOH1EY(s[1128]);
initNMAR(s[1129]);
initLMAR1M(s[1130]);
initLMAR1Y(s[1131]);
initLADOPT(s[1132]);
initLNADOPT(s[1133]);
initLPRNT(s[1134]);
initLNPRNT(s[1135]);
initCH1BY4(s[1136]);
initMABROAD(s[1137]);
initMABROADC2(s[1138]);
initMABROADC3(s[1139]);
initMABROADC4(s[1140]);
initMABROADC5(s[1141]);
initMNABROAD(s[1142]);
initMINDIRECT(s[1143]);
initMNOTHERC(s[1144]);
initMINDIRECTC1(s[1145]);
initMINDIRECTC2(s[1146]);
initMINDIRECTC3(s[1147]);
initMINDIRECTC4(s[1148]);
initMINDIRECTC5(s[1149]);
initDVAGE2UK(s[1150]);
initAGE2UKC(s[1151]);
initAGE2UK(s[1152]);
initDV2UK16(s[1153]);
initMREASON1(s[1154]);
initMREASON2(s[1155]);
initMREASON3(s[1156]);
initMREASON4(s[1157]);
initMREASON5(s[1158]);
initMREASON6(s[1159]);
initMREASON7(s[1160]);
initMREASON97(s[1161]);
initMRETURNED(s[1162]);
initMLIVED(s[1163]);
initMNLIVED(s[1164]);
initMLIVEDC1(s[1165]);
initMLIVEDC2(s[1166]);
initMLIVEDC3(s[1167]);
initMLIVEDC4(s[1168]);
initMLIVEDC5(s[1169]);
initMNMOVES(s[1170]);
initMLIVEDIST(s[1171]);
initMLIVEDIST5(s[1172]);
initMLIVEDISTF(s[1173]);
initMINTENT(s[1174]);
initMINTWHEN(s[1175]);
initADCTS(s[1176]);
initMOVY11(s[1177]);
initMOVY12(s[1178]);
initMOVY13(s[1179]);
initMOVY14(s[1180]);
initMOVY15(s[1181]);
initMOVY16(s[1182]);
initFAMILY(s[1183]);
initEDUCATION(s[1184]);
initMEMPLOY(s[1185]);
initHOUSING(s[1186]);
initAREA(s[1187]);
initMOVEOTH_CODE(s[1188]);
initMOVDIR(s[1189]);
initPLNOWM(s[1190]);
initPLNOWY4(s[1191]);
initRELUP(s[1192]);
initMSTATSAM(s[1193]);
initLWWRONG(s[1194]);
initMSTATSAMN(s[1195]);
initMSTATCH1(s[1196]);
initSTATCM1(s[1197]);
initSTATCY41(s[1198]);
initDIVCHK1(s[1199]);
initDIVFIN1(s[1200]);
initDVM1(s[1201]);
initDVY41(s[1202]);
initCMLSTAT1(s[1203]);
initMSTATCH2(s[1204]);
initSTATCM2(s[1205]);
initSTATCY42(s[1206]);
initDIVCHK2(s[1207]);
initDIVFIN2(s[1208]);
initDVM2(s[1209]);
initDVY42(s[1210]);
initCMLSTAT2(s[1211]);
initMSTATCH3(s[1212]);
initSTATCM3(s[1213]);
initSTATCY43(s[1214]);
initDIVCHK3(s[1215]);
initDIVFIN3(s[1216]);
initDVM3(s[1217]);
initDVY43(s[1218]);
initCMLSTAT3(s[1219]);
initMSTATCH4(s[1220]);
initSTATCM4(s[1221]);
initSTATCY44(s[1222]);
initDIVCHK4(s[1223]);
initDIVFIN4(s[1224]);
initDVM4(s[1225]);
initDVY44(s[1226]);
initCMLSTAT4(s[1227]);
initCOHAB(s[1228]);
initCOHABN(s[1229]);
initLMCBM1(s[1230]);
initLMCBY41(s[1231]);
initCURRPART1(s[1232]);
initLMSPM1(s[1233]);
initLMSPY41(s[1234]);
initLMCBM2(s[1235]);
initLMCBY42(s[1236]);
initCURRPART2(s[1237]);
initLMSPM2(s[1238]);
initLMSPY42(s[1239]);
initLMCBM3(s[1240]);
initLMCBY43(s[1241]);
initCURRPART3(s[1242]);
initLMSPM3(s[1243]);
initLMSPY43(s[1244]);
initLMCBM4(s[1245]);
initLMCBY44(s[1246]);
initCURRPART4(s[1247]);
initLMSPM4(s[1248]);
initLMSPY44(s[1249]);
initFATHER(s[1250]);
initNCHILD(s[1251]);
initPREG(s[1252]);
initPREGM1(s[1253]);
initPREGY41(s[1254]);
initPREGFERT1(s[1255]);
initPREGFT11(s[1256]);
initPREGFT21(s[1257]);
initPREGFT31(s[1258]);
initPREGFT41(s[1259]);
initPREGFT51(s[1260]);
initPREGFT61(s[1261]);
initPREGFT961(s[1262]);
initPREGSPD1(s[1263]);
initPREGOUT1(s[1264]);
initPREGEND1(s[1265]);
initENDMNTH1(s[1266]);
initPREGSMOKE1(s[1267]);
initSMKMNTH11(s[1268]);
initSMKMNTH21(s[1269]);
initSMKMNTH31(s[1270]);
initPREGSMK11(s[1271]);
initPREGSMK21(s[1272]);
initPREGSMK31(s[1273]);
initAEDROF1(s[1274]);
initAEPUWK1(s[1275]);
initAEPUDA1(s[1276]);
initLCHMULTI1(s[1277]);
initPREGM2(s[1278]);
initPREGY42(s[1279]);
initPREGFERT2(s[1280]);
initPREGFT12(s[1281]);
initPREGFT22(s[1282]);
initPREGFT32(s[1283]);
initPREGFT42(s[1284]);
initPREGFT52(s[1285]);
initPREGFT62(s[1286]);
initPREGFT962(s[1287]);
initPREGSPD2(s[1288]);
initPREGOUT2(s[1289]);
initPREGEND2(s[1290]);
initENDMNTH2(s[1291]);
initPREGSMOKE2(s[1292]);
initSMKMNTH12(s[1293]);
initSMKMNTH22(s[1294]);
initSMKMNTH32(s[1295]);
initPREGSMK12(s[1296]);
initPREGSMK22(s[1297]);
initPREGSMK32(s[1298]);
initAEDROF2(s[1299]);
initAEPUWK2(s[1300]);
initAEPUDA2(s[1301]);
initLCHMULTI2(s[1302]);
initPREGM3(s[1303]);
initPREGY43(s[1304]);
initPREGFERT3(s[1305]);
initPREGFT13(s[1306]);
initPREGFT23(s[1307]);
initPREGFT33(s[1308]);
initPREGFT43(s[1309]);
initPREGFT53(s[1310]);
initPREGFT63(s[1311]);
initPREGFT963(s[1312]);
initPREGSPD3(s[1313]);
initPREGOUT3(s[1314]);
initPREGEND3(s[1315]);
initENDMNTH3(s[1316]);
initPREGSMOKE3(s[1317]);
initSMKMNTH13(s[1318]);
initSMKMNTH23(s[1319]);
initSMKMNTH33(s[1320]);
initPREGSMK13(s[1321]);
initPREGSMK23(s[1322]);
initPREGSMK33(s[1323]);
initAEDROF3(s[1324]);
initAEPUWK3(s[1325]);
initAEPUDA3(s[1326]);
initLCHMULTI3(s[1327]);
initNNEWBORN(s[1328]);
initHCONDNO1(s[1329]);
initHCONDNS1(s[1330]);
initHCONDNO2(s[1331]);
initHCONDNS2(s[1332]);
initHCONDNO3(s[1333]);
initHCONDNS3(s[1334]);
initHCONDNO4(s[1335]);
initHCONDNS4(s[1336]);
initHCONDNO5(s[1337]);
initHCONDNS5(s[1338]);
initHCONDN1(s[1339]);
initHCONDN2(s[1340]);
initHCONDN3(s[1341]);
initHCONDN4(s[1342]);
initHCONDN5(s[1343]);
initHCONDN6(s[1344]);
initHCONDN7(s[1345]);
initHCONDN8(s[1346]);
initHCONDN9(s[1347]);
initHCONDN10(s[1348]);
initHCONDN11(s[1349]);
initHCONDN12(s[1350]);
initHCONDN13(s[1351]);
initHCONDN14(s[1352]);
initHCONDN15(s[1353]);
initHCONDN16(s[1354]);
initHCONDN17(s[1355]);
initHCONDN19(s[1356]);
initHCONDN20(s[1357]);
initHCONDN18(s[1358]);
initHCONDN96(s[1359]);
initHCONDO_CODE(s[1360]);
initHCONDNO_CODE(s[1361]);
initCONTFT(s[1362]);
initFTENDM(s[1363]);
initFTENDY4(s[1364]);
initFTEDANY(s[1365]);
initFTQUALS(s[1366]);
initFTEDSTARTM1(s[1367]);
initFTEDSTARTY41(s[1368]);
initFTEDEND1(s[1369]);
initFT2ENDM1(s[1370]);
initFT2ENDY41(s[1371]);
initFTEDMOR1(s[1372]);
initFTEDSTARTM2(s[1373]);
initFTEDSTARTY42(s[1374]);
initFTEDEND2(s[1375]);
initFT2ENDM2(s[1376]);
initFT2ENDY42(s[1377]);
initFTEDMOR2(s[1378]);
initQUALNEW1(s[1379]);
initQUALNEW2(s[1380]);
initQUALNEW3(s[1381]);
initQUALNEW4(s[1382]);
initQUALNEW5(s[1383]);
initQUALNEW6(s[1384]);
initQUALNEW7(s[1385]);
initQUALNEW8(s[1386]);
initQUALNEW9(s[1387]);
initQUALNEW10(s[1388]);
initQUALNEW11(s[1389]);
initQUALNEW13(s[1390]);
initQUALNEW15(s[1391]);
initQUALNEW32(s[1392]);
initQUALNEW33(s[1393]);
initQUALNEW16(s[1394]);
initQUALNEW17(s[1395]);
initQUALNEW18(s[1396]);
initQUALNEW19(s[1397]);
initQUALNEW20(s[1398]);
initQUALNEW21(s[1399]);
initQUALNEW22(s[1400]);
initQUALNEW23(s[1401]);
initQUALNEW24(s[1402]);
initQUALNEW25(s[1403]);
initQUALNEW26(s[1404]);
initQUALNEW27(s[1405]);
initQUALNEW28(s[1406]);
initQUALNEW29(s[1407]);
initQUALNEW30(s[1408]);
initQUALNEW31(s[1409]);
initNGCSE5(s[1410]);
initNGCSEENG(s[1411]);
initNGCSEMAT(s[1412]);
initTRAINANY(s[1413]);
initTRWHO1(s[1414]);
initTRAINDAYS1(s[1415]);
initTRAINHRS1(s[1416]);
initTRAINEND1(s[1417]);
initTRAINPURP11(s[1418]);
initTRAINPURP21(s[1419]);
initTRAINPURP31(s[1420]);
initTRAINPURP41(s[1421]);
initTRAINPURP51(s[1422]);
initTRAINPURP61(s[1423]);
initTRAINPURP71(s[1424]);
initTRAINQUAL1(s[1425]);
initTRWHO2(s[1426]);
initTRAINDAYS2(s[1427]);
initTRAINHRS2(s[1428]);
initTRAINEND2(s[1429]);
initTRAINPURP12(s[1430]);
initTRAINPURP22(s[1431]);
initTRAINPURP32(s[1432]);
initTRAINPURP42(s[1433]);
initTRAINPURP52(s[1434]);
initTRAINPURP62(s[1435]);
initTRAINPURP72(s[1436]);
initTRAINQUAL2(s[1437]);
initTRWHO3(s[1438]);
initTRAINDAYS3(s[1439]);
initTRAINHRS3(s[1440]);
initTRAINEND3(s[1441]);
initTRAINPURP13(s[1442]);
initTRAINPURP23(s[1443]);
initTRAINPURP33(s[1444]);
initTRAINPURP43(s[1445]);
initTRAINPURP53(s[1446]);
initTRAINPURP63(s[1447]);
initTRAINPURP73(s[1448]);
initTRAINQUAL3(s[1449]);
initTRAINN(s[1450]);
initTRQUAL1(s[1451]);
initTRQUAL2(s[1452]);
initTRQUAL3(s[1453]);
initTRQUAL4(s[1454]);
initTRQUAL5(s[1455]);
initTRQUAL6(s[1456]);
initTRQUAL7(s[1457]);
initTRQUAL8(s[1458]);
initTRQUAL9(s[1459]);
initTRQUAL10(s[1460]);
initTRQUAL11(s[1461]);
initTRQUAL13(s[1462]);
initTRQUAL15(s[1463]);
initTRQUAL32(s[1464]);
initTRQUAL33(s[1465]);
initTRQUAL16(s[1466]);
initTRQUAL17(s[1467]);
initTRQUAL18(s[1468]);
initTRQUAL19(s[1469]);
initTRQUAL20(s[1470]);
initTRQUAL21(s[1471]);
initTRQUAL22(s[1472]);
initTRQUAL23(s[1473]);
initTRQUAL24(s[1474]);
initTRQUAL25(s[1475]);
initTRQUAL26(s[1476]);
initTRQUAL27(s[1477]);
initTRQUAL28(s[1478]);
initTRQUAL29(s[1479]);
initTRQUAL30(s[1480]);
initTRQUAL34(s[1481]);
initTRQUAL31(s[1482]);
initNOTEMPCHK(s[1483]);
initEMPCHK(s[1484]);
initEMPSTENDD(s[1485]);
initEMPSTENDM(s[1486]);
initEMPSTENDY4(s[1487]);
initSTENDREAS1(s[1488]);
initSTENDREAS2(s[1489]);
initSTENDREAS3(s[1490]);
initSTENDREAS4(s[1491]);
initSTENDREAS5(s[1492]);
initSTENDREAS6(s[1493]);
initSTENDREAS7(s[1494]);
initSTENDREAS8(s[1495]);
initSTENDREAS9(s[1496]);
initSTENDREAS10(s[1497]);
initSTENDREAS11(s[1498]);
initSTENDREAS97(s[1499]);
initNXTST(s[1500]);
initNEXTSTAT1(s[1501]);
initNEXTELSE1(s[1502]);
initCURRSTAT1(s[1503]);
initNEXTJOB1(s[1504]);
initCURRJOB1(s[1505]);
initJOBHOURS1(s[1506]);
initREASEND1_1(s[1507]);
initREASEND2_1(s[1508]);
initREASEND3_1(s[1509]);
initREASEND4_1(s[1510]);
initREASEND5_1(s[1511]);
initREASEND6_1(s[1512]);
initREASEND7_1(s[1513]);
initREASEND8_1(s[1514]);
initREASEND9_1(s[1515]);
initREASEND10_1(s[1516]);
initREASEND11_1(s[1517]);
initREASEND97_1(s[1518]);
initJBATT1(s[1519]);
initSTATENDD1(s[1520]);
initSTATENDM1(s[1521]);
initSTATENDY41(s[1522]);
initNEXTSTAT2(s[1523]);
initNEXTELSE2(s[1524]);
initCURRSTAT2(s[1525]);
initNEXTJOB2(s[1526]);
initCURRJOB2(s[1527]);
initJOBHOURS2(s[1528]);
initREASEND1_2(s[1529]);
initREASEND2_2(s[1530]);
initREASEND3_2(s[1531]);
initREASEND4_2(s[1532]);
initREASEND5_2(s[1533]);
initREASEND6_2(s[1534]);
initREASEND7_2(s[1535]);
initREASEND8_2(s[1536]);
initREASEND9_2(s[1537]);
initREASEND10_2(s[1538]);
initREASEND11_2(s[1539]);
initREASEND97_2(s[1540]);
initJBATT2(s[1541]);
initSTATENDD2(s[1542]);
initSTATENDM2(s[1543]);
initSTATENDY42(s[1544]);
initNEXTSTAT3(s[1545]);
initNEXTELSE3(s[1546]);
initCURRSTAT3(s[1547]);
initNEXTJOB3(s[1548]);
initCURRJOB3(s[1549]);
initJOBHOURS3(s[1550]);
initREASEND1_3(s[1551]);
initREASEND2_3(s[1552]);
initREASEND3_3(s[1553]);
initREASEND4_3(s[1554]);
initREASEND5_3(s[1555]);
initREASEND6_3(s[1556]);
initREASEND7_3(s[1557]);
initREASEND8_3(s[1558]);
initREASEND9_3(s[1559]);
initREASEND10_3(s[1560]);
initREASEND11_3(s[1561]);
initREASEND97_3(s[1562]);
initJBATT3(s[1563]);
initSTATENDD3(s[1564]);
initSTATENDM3(s[1565]);
initSTATENDY43(s[1566]);
initNEXTSTAT4(s[1567]);
initNEXTELSE4(s[1568]);
initCURRSTAT4(s[1569]);
initNEXTJOB4(s[1570]);
initCURRJOB4(s[1571]);
initJOBHOURS4(s[1572]);
initREASEND1_4(s[1573]);
initREASEND2_4(s[1574]);
initREASEND3_4(s[1575]);
initREASEND4_4(s[1576]);
initREASEND5_4(s[1577]);
initREASEND6_4(s[1578]);
initREASEND7_4(s[1579]);
initREASEND8_4(s[1580]);
initREASEND9_4(s[1581]);
initREASEND10_4(s[1582]);
initREASEND11_4(s[1583]);
initREASEND97_4(s[1584]);
initJBATT4(s[1585]);
initSTATENDD4(s[1586]);
initSTATENDM4(s[1587]);
initSTATENDY44(s[1588]);
initNEXTSTAT5(s[1589]);
initNEXTELSE5(s[1590]);
initCURRSTAT5(s[1591]);
initNEXTJOB5(s[1592]);
initCURRJOB5(s[1593]);
initJOBHOURS5(s[1594]);
initREASEND1_5(s[1595]);
initREASEND2_5(s[1596]);
initREASEND3_5(s[1597]);
initREASEND4_5(s[1598]);
initREASEND5_5(s[1599]);
initREASEND6_5(s[1600]);
initREASEND7_5(s[1601]);
initREASEND8_5(s[1602]);
initREASEND9_5(s[1603]);
initREASEND10_5(s[1604]);
initREASEND11_5(s[1605]);
initREASEND97_5(s[1606]);
initJBATT5(s[1607]);
initSTATENDD5(s[1608]);
initSTATENDM5(s[1609]);
initSTATENDY45(s[1610]);
initNEXTSTAT6(s[1611]);
initNEXTELSE6(s[1612]);
initCURRSTAT6(s[1613]);
initNEXTJOB6(s[1614]);
initCURRJOB6(s[1615]);
initJOBHOURS6(s[1616]);
initREASEND1_6(s[1617]);
initREASEND2_6(s[1618]);
initREASEND3_6(s[1619]);
initREASEND4_6(s[1620]);
initREASEND5_6(s[1621]);
initREASEND6_6(s[1622]);
initREASEND7_6(s[1623]);
initREASEND8_6(s[1624]);
initREASEND9_6(s[1625]);
initREASEND10_6(s[1626]);
initREASEND11_6(s[1627]);
initREASEND97_6(s[1628]);
initJBATT6(s[1629]);
initSTATENDD6(s[1630]);
initSTATENDM6(s[1631]);
initSTATENDY46(s[1632]);
initNXTSTELSE(s[1633]);
initCSTAT(s[1634]);
initNXTSTENDD(s[1635]);
initNXTSTENDM(s[1636]);
initNXTSTENDY4(s[1637]);
initJBSAMR(s[1638]);
initWKPLSAM(s[1639]);
initSAMEJOB(s[1640]);
initMATLV(s[1641]);
initMATLVSTD(s[1642]);
initMATLVSTM(s[1643]);
initMATLVSTY4(s[1644]);
initMATLVENDD(s[1645]);
initMATLVENDM(s[1646]);
initMATLVENDY4(s[1647]);
initJBENDD(s[1648]);
initJBENDM(s[1649]);
initJBENDY4(s[1650]);
initJBENDREAS1(s[1651]);
initJBENDREAS2(s[1652]);
initJBENDREAS3(s[1653]);
initJBENDREAS4(s[1654]);
initJBENDREAS5(s[1655]);
initJBENDREAS6(s[1656]);
initJBENDREAS7(s[1657]);
initJBENDREAS8(s[1658]);
initJBENDREAS9(s[1659]);
initJBENDREAS10(s[1660]);
initJBENDREAS11(s[1661]);
initJBENDREAS97(s[1662]);
initCJOB(s[1663]);
initNXTJBHRS(s[1664]);
initNXTJBES(s[1665]);
initNXTJBENDD(s[1666]);
initNXTJBENDM(s[1667]);
initNXTJBENDY4(s[1668]);
initNXTENDREAS1(s[1669]);
initNXTENDREAS2(s[1670]);
initNXTENDREAS3(s[1671]);
initNXTENDREAS4(s[1672]);
initNXTENDREAS5(s[1673]);
initNXTENDREAS6(s[1674]);
initNXTENDREAS7(s[1675]);
initNXTENDREAS8(s[1676]);
initNXTENDREAS9(s[1677]);
initNXTENDREAS10(s[1678]);
initNXTENDREAS11(s[1679]);
initNXTENDREAS97(s[1680]);
initCJBATT(s[1681]);
initJBHAS(s[1682]);
initJBOFF(s[1683]);
initJBOFFY(s[1684]);
initJBTERM1(s[1685]);
initJBTERM2(s[1686]);
initJBSIC07CHK(s[1687]);
initJBSOC00CHK(s[1688]);
initJBSEMPCHK(s[1689]);
initJBSEMP(s[1690]);
initJBBGD(s[1691]);
initJBBGM(s[1692]);
initJBBGY(s[1693]);
initJBMNGRCHK(s[1694]);
initJBMNGR(s[1695]);
initJBSIZECHK(s[1696]);
initJBSIZE(s[1697]);
initJBSECT(s[1698]);
initJBSECTPUB(s[1699]);
initJBHRS(s[1700]);
initJBOT(s[1701]);
initJBOTPD(s[1702]);
initJBPL(s[1703]);
initPAYGWC(s[1704]);
initPAYNWC(s[1705]);
initPAYUSL(s[1706]);
initPAYU(s[1707]);
initPAYUWC(s[1708]);
initPAYUG(s[1709]);
initPAYTYP(s[1710]);
initOVTPAY(s[1711]);
initPVTPYSET(s[1712]);
initEXTRATE(s[1713]);
initEXTREST(s[1714]);
initBASNSET(s[1715]);
initBASRATE(s[1716]);
initBASREST(s[1717]);
initOVTNSET(s[1718]);
initOVTRATE(s[1719]);
initOVTREST(s[1720]);
initJBTTWT(s[1721]);
initWORKTRAV(s[1722]);
initJSBOSS(s[1723]);
initJSSIZE(s[1724]);
initJSHRS(s[1725]);
initJSTYPEB(s[1726]);
initJSACCS(s[1727]);
initJSPART(s[1728]);
initJSPRBM(s[1729]);
initJSPRBY4(s[1730]);
initJSPREM(s[1731]);
initJSPREY4(s[1732]);
initJSPRLS(s[1733]);
initJSPRTX(s[1734]);
initJSPRNI(s[1735]);
initJSWORKAC(s[1736]);
initJSOWNSUM(s[1737]);
initJSOWNAMT(s[1738]);
initJSOWNOTH(s[1739]);
initJSOWOTAM(s[1740]);
initJSPAYU(s[1741]);
initJSPAYW(s[1742]);
initJSPYTX(s[1743]);
initJSPYNI(s[1744]);
initJSPL(s[1745]);
initJSTTWTB_CAWI(s[1746]);
initJSTTWT(s[1747]);
initJSTTWTB(s[1748]);
initJSWORKTRAV(s[1749]);
initJBSAT(s[1750]);
initJULK4WK(s[1751]);
initJULKJB(s[1752]);
initJUBGN(s[1753]);
initJULK4X1(s[1754]);
initJULK4X2(s[1755]);
initJULK4X3(s[1756]);
initJULK4X4(s[1757]);
initJULK4X5(s[1758]);
initJULK4X6(s[1759]);
initJULK4X96(s[1760]);
initJBHAD(s[1761]);
initJLENDM(s[1762]);
initJLENDY(s[1763]);
initJLSEMP(s[1764]);
initJLBOSS(s[1765]);
initJLMNGR(s[1766]);
initJLSIZE(s[1767]);
initEPROSH(s[1768]);
initMATLEAVE(s[1769]);
initMLFUTR(s[1770]);
initMLRNOT1(s[1771]);
initMLRNOT2(s[1772]);
initMLRNOT3(s[1773]);
initMLRNOT4(s[1774]);
initMLRNOT5(s[1775]);
initMLRNOT6(s[1776]);
initMLRNOT7(s[1777]);
initMLRNOT8(s[1778]);
initMLRNOT9(s[1779]);
initMLRNOT10(s[1780]);
initMLRNOT11(s[1781]);
initMLRNOT12(s[1782]);
initMLRNOT13(s[1783]);
initMLRNOT97(s[1784]);
initMLAGST(s[1785]);
initMLAGSTU(s[1786]);
initMLWKFPT(s[1787]);
initJ2HAS(s[1788]);
initJ2SEMP(s[1789]);
initJ2HRS(s[1790]);
initJ2PAY(s[1791]);
initJOBLOOK(s[1792]);
initJOBDENY(s[1793]);
initRESJOBDENY1(s[1794]);
initRESJOBDENY2(s[1795]);
initRESJOBDENY3(s[1796]);
initRESJOBDENY4(s[1797]);
initRESJOBDENY5(s[1798]);
initRESJOBDENY6(s[1799]);
initRESJOBDENY7(s[1800]);
initRESJOBDENY8(s[1801]);
initRESJOBDENY9(s[1802]);
initRESJOBDENY96(s[1803]);
initRESJOBDENY97(s[1804]);
initDISEFFECTS1(s[1805]);
initDISEFFECTS2(s[1806]);
initDISEFFECTS3(s[1807]);
initDISEFFECTS4(s[1808]);
initDISEFFECTS5(s[1809]);
initCCARE(s[1810]);
initCCWORK(s[1811]);
initLVREL1(s[1812]);
initLVREL2(s[1813]);
initLVREL3(s[1814]);
initLVREL4(s[1815]);
initLVREL5(s[1816]);
initLVREL6(s[1817]);
initLVREL7(s[1818]);
initLVREL8(s[1819]);
initLVREL9(s[1820]);
initLVREL10(s[1821]);
initLVREL96(s[1822]);
initMAMOSTCON(s[1823]);
initPAMOSTCON(s[1824]);
initMAAGE(s[1825]);
initPAAGE(s[1826]);
initNRELS3(s[1827]);
initNRELS4(s[1828]);
initNRELS5(s[1829]);
initNRELS6(s[1830]);
initNRELS7(s[1831]);
initNRELS8(s[1832]);
initPARMAR(s[1833]);
initMALONE(s[1834]);
initPALONE(s[1835]);
initOHCH16(s[1836]);
initSEEKID(s[1837]);
initWEKID(s[1838]);
initSTAYKID(s[1839]);
initSTAYKIDW(s[1840]);
initFARKID(s[1841]);
initRELKID(s[1842]);
initMASEE(s[1843]);
initMACON(s[1844]);
initMAFAR(s[1845]);
initPASEE(s[1846]);
initPACON(s[1847]);
initPAFAR(s[1848]);
initPAAID1(s[1849]);
initPAAID2(s[1850]);
initPAAID3(s[1851]);
initPAAID4(s[1852]);
initPAAID5(s[1853]);
initPAAID6(s[1854]);
initPAAID7(s[1855]);
initPAAID8(s[1856]);
initPAAID97(s[1857]);
initPAAID96(s[1858]);
initPAIDU1(s[1859]);
initPAIDU2(s[1860]);
initPAIDU3(s[1861]);
initPAIDU4(s[1862]);
initPAIDU5(s[1863]);
initPAIDU6(s[1864]);
initPAIDU7(s[1865]);
initPAIDU8(s[1866]);
initPAIDU97(s[1867]);
initPAIDU96(s[1868]);
initCHSEE(s[1869]);
initCHCON(s[1870]);
initCHFAR(s[1871]);
initCHAID1(s[1872]);
initCHAID2(s[1873]);
initCHAID3(s[1874]);
initCHAID4(s[1875]);
initCHAID5(s[1876]);
initCHAID6(s[1877]);
initCHAID7(s[1878]);
initCHAID8(s[1879]);
initCHAID97(s[1880]);
initCHAID96(s[1881]);
initCAIDU1(s[1882]);
initCAIDU2(s[1883]);
initCAIDU3(s[1884]);
initCAIDU4(s[1885]);
initCAIDU5(s[1886]);
initCAIDU6(s[1887]);
initCAIDU7(s[1888]);
initCAIDU8(s[1889]);
initCAIDU97(s[1890]);
initCAIDU96(s[1891]);
initKIDSPT(s[1892]);
initFTEXV(s[1893]);
initFTEXW(s[1894]);
initHLPHMWK(s[1895]);
initLEVELIMP(s[1896]);
initAPVOCIMP(s[1897]);
initKID2UNI01(s[1898]);
initKID2UNI02(s[1899]);
initKID2UNI03(s[1900]);
initKID2UNI04(s[1901]);
initKID2UNI05(s[1902]);
initKID2UNI06(s[1903]);
initKID2UNI07(s[1904]);
initKID2UNI08(s[1905]);
initKID2UNI09(s[1906]);
initKID2UNI10(s[1907]);
initKID2UNI11(s[1908]);
initKID2UNI12(s[1909]);
initKID2UNI13(s[1910]);
initKID2UNI14(s[1911]);
initKID2UNI15(s[1912]);
initKID2UNI16(s[1913]);
initSOCIALKID(s[1914]);
initDINNER(s[1915]);
initQUARREL(s[1916]);
initTALKMATTER(s[1917]);
initRULESKID(s[1918]);
initPYENRL(s[1919]);
initPRAISEKID(s[1920]);
initSLAPKID(s[1921]);
initCUDDLEKID(s[1922]);
initYELLKID(s[1923]);
initREMIT1(s[1924]);
initREMIT2(s[1925]);
initREMIT3(s[1926]);
initREMIT4(s[1927]);
initREMIT5(s[1928]);
initREMITFREQ1(s[1929]);
initREMITREG1(s[1930]);
initREMITAMT1(s[1931]);
initREMCNTRY1(s[1932]);
initREMITUSUAL1(s[1933]);
initREMUSAMT1(s[1934]);
initREMHOW1(s[1935]);
initREMITFREQ2(s[1936]);
initREMITREG2(s[1937]);
initREMITAMT2(s[1938]);
initREMCNTRY2(s[1939]);
initREMITUSUAL2(s[1940]);
initREMUSAMT2(s[1941]);
initREMHOW2(s[1942]);
initREMITFREQ3(s[1943]);
initREMITREG3(s[1944]);
initREMITAMT3(s[1945]);
initREMCNTRY3(s[1946]);
initREMITUSUAL3(s[1947]);
initREMUSAMT3(s[1948]);
initREMHOW3(s[1949]);
initREMITFREQ4(s[1950]);
initREMITREG4(s[1951]);
initREMITAMT4(s[1952]);
initREMCNTRY4(s[1953]);
initREMITUSUAL4(s[1954]);
initREMUSAMT4(s[1955]);
initREMHOW4(s[1956]);
initBENBASE1(s[1957]);
initBENBASE2(s[1958]);
initBENBASE3(s[1959]);
initBENBASE4(s[1960]);
initBENBASE96(s[1961]);
initBENCTC(s[1962]);
initBENPEN1(s[1963]);
initBENPEN2(s[1964]);
initBENPEN3(s[1965]);
initBENPEN4(s[1966]);
initBENPEN5(s[1967]);
initBENPEN6(s[1968]);
initBENPEN7(s[1969]);
initBENPEN8(s[1970]);
initBENPEN96(s[1971]);
initNISERPS(s[1972]);
initBENDIS1(s[1973]);
initBENDIS2(s[1974]);
initBENDIS3(s[1975]);
initBENDIS4(s[1976]);
initBENDIS5(s[1977]);
initBENDIS12(s[1978]);
initBENDIS7(s[1979]);
initBENDIS8(s[1980]);
initBENDIS10(s[1981]);
initBENDIS97(s[1982]);
initBENDIS96(s[1983]);
initBENESA(s[1984]);
initOTHBEN1(s[1985]);
initOTHBEN2(s[1986]);
initOTHBEN3(s[1987]);
initOTHBEN4(s[1988]);
initOTHBEN5(s[1989]);
initOTHBEN6(s[1990]);
initOTHBEN7(s[1991]);
initOTHBEN8(s[1992]);
initOTHBEN9(s[1993]);
initOTHBEN97(s[1994]);
initOTHBEN96(s[1995]);
initBENSTA2(s[1996]);
initBENSTA3(s[1997]);
initBENSTA4(s[1998]);
initBENSTA5(s[1999]);
initBENSTA6(s[2000]);
initBENSTA7(s[2001]);
initBENSTA97(s[2002]);
initBENSTA96(s[2003]);
initMISSOURCE01(s[2004]);
initMISSOURCE02(s[2005]);
initMISSOURCE03(s[2006]);
initMISSOURCE04(s[2007]);
initMISSOURCE05(s[2008]);
initMISSOURCE06(s[2009]);
initMISSOURCE07(s[2010]);
initMISSOURCE08(s[2011]);
initMISSOURCE09(s[2012]);
initMISSOURCE10(s[2013]);
initMISSOURCE11(s[2014]);
initMISSOURCE12(s[2015]);
initMISSOURCE13(s[2016]);
initMISSOURCE14(s[2017]);
initMISSOURCE15(s[2018]);
initMISSOURCE16(s[2019]);
initMISSOURCE18(s[2020]);
initMISSOURCE19(s[2021]);
initMISSOURCE20(s[2022]);
initMISSOURCE21(s[2023]);
initMISSOURCE22(s[2024]);
initMISSOURCE23(s[2025]);
initMISSOURCE24(s[2026]);
initMISSOURCE25(s[2027]);
initMISSOURCE26(s[2028]);
initMISSOURCE27(s[2029]);
initMISSOURCE28(s[2030]);
initMISSOURCE29(s[2031]);
initMISSOURCE30(s[2032]);
initMISSOURCE31(s[2033]);
initMISSOURCE32(s[2034]);
initMISSOURCE33(s[2035]);
initMISSOURCE34(s[2036]);
initMISSOURCE35(s[2037]);
initMISSOURCE36(s[2038]);
initMISSOURCE37(s[2039]);
initMISSOURCE38(s[2040]);
initMISSOURCE39(s[2041]);
initMISSOURCE40(s[2042]);
initMISSOURCE41(s[2043]);
initNFH01(s[2044]);
initNFH02(s[2045]);
initNFH03(s[2046]);
initNFH04(s[2047]);
initNFH05(s[2048]);
initNFH06(s[2049]);
initNFH07(s[2050]);
initNFH08(s[2051]);
initNFH09(s[2052]);
initNFH10(s[2053]);
initNFH11(s[2054]);
initNFH12(s[2055]);
initNFH13(s[2056]);
initNFH14(s[2057]);
initNFH15(s[2058]);
initNFH16(s[2059]);
initNFH18(s[2060]);
initNFH19(s[2061]);
initNFH20(s[2062]);
initNFH21(s[2063]);
initNFH22(s[2064]);
initNFH23(s[2065]);
initNFH24(s[2066]);
initNFH25(s[2067]);
initNFH26(s[2068]);
initNFH27(s[2069]);
initNFH28(s[2070]);
initNFH29(s[2071]);
initNFH30(s[2072]);
initNFH31(s[2073]);
initNFH32(s[2074]);
initNFH33(s[2075]);
initNFH34(s[2076]);
initNFH35(s[2077]);
initNFH36(s[2078]);
initNFH37(s[2079]);
initNFH38(s[2080]);
initNFH39(s[2081]);
initNFH40(s[2082]);
initNFH41(s[2083]);
initFIYRDIA(s[2084]);
initFIYRDB1(s[2085]);
initFIYRDB2(s[2086]);
initFIYRDB3(s[2087]);
initFIYRDB5(s[2088]);
initFIYRDB4(s[2089]);
initFIYRDB6(s[2090]);
initFINNOW(s[2091]);
initFINFUT(s[2092]);
initCMFLAG01(s[2093]);
initCMFLAG02(s[2094]);
initCMFLAG03(s[2095]);
initCMFLAG04(s[2096]);
initCMFLAG05(s[2097]);
initCMFLAG06(s[2098]);
initCMFLAG07(s[2099]);
initCMFLAG08(s[2100]);
initCMFLAG09(s[2101]);
initCMFLAG10(s[2102]);
initCMFLAG11(s[2103]);
initCMFLAG12(s[2104]);
initCMFLAG13(s[2105]);
initCMFLAG14(s[2106]);
initCMFLAG15(s[2107]);
initCMFLAG16(s[2108]);
initCMROUTE01(s[2109]);
initCMROUTE02(s[2110]);
initCMROUTE03(s[2111]);
initCMROUTE04(s[2112]);
initCMROUTE05(s[2113]);
initCMROUTE06(s[2114]);
initCMROUTE07(s[2115]);
initCMROUTE08(s[2116]);
initCMROUTE09(s[2117]);
initCMROUTE10(s[2118]);
initCMROUTE11(s[2119]);
initCMROUTE12(s[2120]);
initCMROUTE13(s[2121]);
initCMROUTE14(s[2122]);
initCMROUTE15(s[2123]);
initCMROUTE16(s[2124]);
initCSACALC(s[2125]);
initCSAKIDNO1(s[2126]);
initCSAKIDNO2(s[2127]);
initCSAKIDNO3(s[2128]);
initCSAKIDNO4(s[2129]);
initCSAKIDNO5(s[2130]);
initCSAKIDNO6(s[2131]);
initCSAKIDNO7(s[2132]);
initCSAKIDNO8(s[2133]);
initCSAKIDNO9(s[2134]);
initCSAKIDNO10(s[2135]);
initCSAKIDNO11(s[2136]);
initCSAKIDNO12(s[2137]);
initCSAKIDNO13(s[2138]);
initCSAKIDNO14(s[2139]);
initCSAKIDNO15(s[2140]);
initCSAKIDNO16(s[2141]);
initCSAPAYTO(s[2142]);
initCSACALCAM(s[2143]);
initCMCSAPER(s[2144]);
initCMCSAALL(s[2145]);
initCMCSAACT(s[2146]);
initCMCSAAM(s[2147]);
initCMCSAPR(s[2148]);
initCSARECPER(s[2149]);
initDCSATM(s[2150]);
initCMCSANIL1(s[2151]);
initCMCSANIL2(s[2152]);
initCMCSANIL3(s[2153]);
initCMCSANIL4(s[2154]);
initCMCSANIL5(s[2155]);
initCMCSANIL6(s[2156]);
initCMCSANIL7(s[2157]);
initCMCSANIL8(s[2158]);
initCMCSANIL9(s[2159]);
initCMCSANIL97(s[2160]);
initCMCORD(s[2161]);
initCMCOKIDNO1(s[2162]);
initCMCOKIDNO2(s[2163]);
initCMCOKIDNO3(s[2164]);
initCMCOKIDNO4(s[2165]);
initCMCOKIDNO5(s[2166]);
initCMCOKIDNO6(s[2167]);
initCMCOKIDNO7(s[2168]);
initCMCOKIDNO8(s[2169]);
initCMCOKIDNO9(s[2170]);
initCMCOKIDNO10(s[2171]);
initCMCOKIDNO11(s[2172]);
initCMCOKIDNO12(s[2173]);
initCMCOKIDNO13(s[2174]);
initCMCOKIDNO14(s[2175]);
initCMCOKIDNO15(s[2176]);
initCMCOKIDNO16(s[2177]);
initCMSAMEA(s[2178]);
initCMCORDAM(s[2179]);
initCMCORDPER(s[2180]);
initCMCORDALL(s[2181]);
initCMCORDREC(s[2182]);
initCMCORDRCAM(s[2183]);
initCMCORDRCPR(s[2184]);
initCORDRECPER(s[2185]);
initCMCORDTM(s[2186]);
initCMVOL(s[2187]);
initCMVOLFIN(s[2188]);
initCMVOLKIDNO1(s[2189]);
initCMVOLKIDNO2(s[2190]);
initCMVOLKIDNO3(s[2191]);
initCMVOLKIDNO4(s[2192]);
initCMVOLKIDNO5(s[2193]);
initCMVOLKIDNO6(s[2194]);
initCMVOLKIDNO7(s[2195]);
initCMVOLKIDNO8(s[2196]);
initCMVOLKIDNO9(s[2197]);
initCMVOLKIDNO10(s[2198]);
initCMVOLKIDNO11(s[2199]);
initCMVOLKIDNO12(s[2200]);
initCMVOLKIDNO13(s[2201]);
initCMVOLKIDNO14(s[2202]);
initCMVOLKIDNO15(s[2203]);
initCMVOLKIDNO16(s[2204]);
initCMSAMEB(s[2205]);
initCMSAMEC(s[2206]);
initCMVOLAM(s[2207]);
initCMVOLPER(s[2208]);
initCMVOLALL(s[2209]);
initCMVOLREC(s[2210]);
initCMVOLRCAM(s[2211]);
initCMVOLRCPR(s[2212]);
initVOLRECPER(s[2213]);
initCMVOLTM(s[2214]);
initCMFBAOP(s[2215]);
initCMNIL1(s[2216]);
initCMNIL4(s[2217]);
initCMNIL5(s[2218]);
initCMNIL6(s[2219]);
initCMNIL7(s[2220]);
initCMNIL8(s[2221]);
initCMNIL9(s[2222]);
initCMNIL10(s[2223]);
initCMNIL11(s[2224]);
initCMNIL12(s[2225]);
initCMNIL97(s[2226]);
initCMOTHPAY1(s[2227]);
initCMOTHPAY2(s[2228]);
initCMOTHPAY3(s[2229]);
initCMOTHPAY4(s[2230]);
initCMOTHPAY5(s[2231]);
initCMOTHPAY6(s[2232]);
initCMOTHPAY7(s[2233]);
initCMOTHPAY8(s[2234]);
initCMOTHPAY9(s[2235]);
initCMOTHPAY10(s[2236]);
initCMOTHPAY11(s[2237]);
initCMOTHPAY97(s[2238]);
initCMOTHPAY96(s[2239]);
initCMKNDEVR1(s[2240]);
initCMKNDEVR2(s[2241]);
initCMKNDEVR3(s[2242]);
initCMKNDEVR4(s[2243]);
initCMKNDEVR97(s[2244]);
initCMKNDEVR96(s[2245]);
initEXSAME(s[2246]);
initRETCHK(s[2247]);
initAGERET(s[2248]);
initRTPRO1(s[2249]);
initRTPRO2(s[2250]);
initRTPRO3(s[2251]);
initRTPRO4(s[2252]);
initRTPRO5(s[2253]);
initRTPRO6(s[2254]);
initRTCON1(s[2255]);
initRTCON2(s[2256]);
initRTCON3(s[2257]);
initRTCON4(s[2258]);
initPENMEX(s[2259]);
initPPPEX(s[2260]);
initPPPEXM(s[2261]);
initSPPEN(s[2262]);
initRTEXPJB(s[2263]);
initRTFND1(s[2264]);
initRTFND2(s[2265]);
initRTFND3(s[2266]);
initRTFND4(s[2267]);
initRTFND5(s[2268]);
initRTFND6(s[2269]);
initRTFND7(s[2270]);
initRTFND8(s[2271]);
initRTFND9(s[2272]);
initRTFND10(s[2273]);
initRTFND96(s[2274]);
initRETAMT(s[2275]);
initRETSUF(s[2276]);
initVOTE1(s[2277]);
initVOTE2(s[2278]);
initVOTE3(s[2279]);
initVOTE4(s[2280]);
initVOTE5(s[2281]);
initVOTE6(s[2282]);
initUKWELC(s[2283]);
initUKAHEAD(s[2284]);
initVOTE7(s[2285]);
initVOTE8(s[2286]);
initCOMWPAS31(s[2287]);
initCOMWPAS32(s[2288]);
initCOMWPAS33(s[2289]);
initCOMWPAS34(s[2290]);
initCOMWPAS35(s[2291]);
initCOMWPAS396(s[2292]);
initCOMWPAS398(s[2293]);
initCOMWACT31(s[2294]);
initCOMWACT32(s[2295]);
initCOMWACT33(s[2296]);
initCOMWACT34(s[2297]);
initCOMWACT35(s[2298]);
initCOMWACT36(s[2299]);
initCOMWACT37(s[2300]);
initCOMWACT38(s[2301]);
initCOMWACT396(s[2302]);
initCOMWACT398(s[2303]);
initSCAC(s[2304]);
initSCRF1(s[2305]);
initSCRF2(s[2306]);
initSCRF3(s[2307]);
initSCRF4(s[2308]);
initSCRF5(s[2309]);
initSCRF6(s[2310]);
initSCRF97(s[2311]);
initSCUN1(s[2312]);
initSCUN2(s[2313]);
initSCUN3(s[2314]);
initSCUN97(s[2315]);
initSCSF1(s[2316]);
initSCSF2A(s[2317]);
initSCSF2B(s[2318]);
initSCSF3A(s[2319]);
initSCSF3B(s[2320]);
initSCSF4A(s[2321]);
initSCSF4B(s[2322]);
initSCSF5(s[2323]);
initSCSF6A(s[2324]);
initSCSF6B(s[2325]);
initSCSF6C(s[2326]);
initSCSF7(s[2327]);
initSCGHQA(s[2328]);
initSCGHQB(s[2329]);
initSCGHQC(s[2330]);
initSCGHQD(s[2331]);
initSCGHQE(s[2332]);
initSCGHQF(s[2333]);
initSCGHQG(s[2334]);
initSCGHQH(s[2335]);
initSCGHQI(s[2336]);
initSCGHQJ(s[2337]);
initSCGHQK(s[2338]);
initSCGHQL(s[2339]);
initSCLFSAT1(s[2340]);
initSCLFSAT2(s[2341]);
initSCLFSAT7(s[2342]);
initSCLFSATO(s[2343]);
initAUDITC1(s[2344]);
initAUDITC2(s[2345]);
initAUDITC3(s[2346]);
initAUDITC4(s[2347]);
initAUDITC5(s[2348]);
initSCWEMWBA(s[2349]);
initSCWEMWBB(s[2350]);
initSCWEMWBC(s[2351]);
initSCWEMWBD(s[2352]);
initSCWEMWBE(s[2353]);
initSCWEMWBF(s[2354]);
initSCWEMWBG(s[2355]);
initSCFINEMB(s[2356]);
initSCFINSMALL(s[2357]);
initSCRELPAREI(s[2358]);
initSCRELPARCD(s[2359]);
initSCRELPARWT(s[2360]);
initSCRELPARDS(s[2361]);
initSCRELPARRG(s[2362]);
initSCRELPARAR(s[2363]);
initSCRELPARIR(s[2364]);
initSCRELPARKS(s[2365]);
initSCPAROUTINT(s[2366]);
initSCRELHAPPY(s[2367]);
initYPNPAL(s[2368]);
initYPSOCWEB(s[2369]);
initYPNETCHT(s[2370]);
initSEXUOR(s[2371]);
initEATLIVU(s[2372]);
initFAMSUP(s[2373]);
initUPSET(s[2374]);
initLATE(s[2375]);
initSIBHIT(s[2376]);
initSIBSTEAL(s[2377]);
initSIBVERAB(s[2378]);
initSIBTEASE(s[2379]);
initHITSIB(s[2380]);
initSTEALSIB(s[2381]);
initVERABSIB(s[2382]);
initTEASESIB(s[2383]);
initARGM(s[2384]);
initARGF(s[2385]);
initTLKM(s[2386]);
initTLKF(s[2387]);
initPARSCH(s[2388]);
initPAREVE(s[2389]);
initHASSTEP(s[2390]);
initSTEPREL(s[2391]);
initYAJBSRV1(s[2392]);
initYAJBSRV2(s[2393]);
initYAJBSRV3(s[2394]);
initYAJBSRV4(s[2395]);
initYAJBSRV5(s[2396]);
initYAJBSRV8(s[2397]);
initYAJBSRV7(s[2398]);
initYAJBSRV96(s[2399]);
initFRPBULLI(s[2400]);
initFROBULLI(s[2401]);
initFRPBULLY(s[2402]);
initFROBULLY(s[2403]);
initDRGSOL(s[2404]);
initDRGMJ(s[2405]);
initDRGOTH(s[2406]);
initFRDRG(s[2407]);
initNCRR1(s[2408]);
initNCRRM(s[2409]);
initNCRRY4(s[2410]);
initNCRR3(s[2411]);
initNCRR4(s[2412]);
initNCRR5(s[2413]);
initNCRR6(s[2414]);
initNCRR8(s[2415]);
initNCRR9(s[2416]);
initNCRR11(s[2417]);
initNCRR12(s[2418]);
initCASIINTNO(s[2419]);
initSCHOOLCNTRY1(s[2420]);
initSCHOOLCNTRY2(s[2421]);
initSCHOOLCNTRY3(s[2422]);
initSCHOOLCNTRY4(s[2423]);
initSCHOOLCNTRY5(s[2424]);
initNPDINDLEARN(s[2425]);
initINDLEARNEW(s[2426]);
initINDLEARN(s[2427]);
initBENLINK(s[2428]);
initVOUCHLETTER(s[2429]);
initHEDNTO_CODE(s[2430]);
initMREASONO_CODE(s[2431]);
initSCRX_CODE(s[2432]);
initSCUX_CODE(s[2433]);
initMARSTAT(s[2434]);
initLIVESP(s[2435]);
initLIVEWITH(s[2436]);
initEMPLOY(s[2437]);
initLINGUA(s[2438]);
initPIDP1(s[2439]);
initPIDP2(s[2440]);
initPIDP3(s[2441]);
initPIDP4(s[2442]);
initPS1(s[2443]);
initPS2(s[2444]);
initPS3(s[2445]);
initPS4(s[2446]);
initPS5(s[2447]);
initPS6(s[2448]);
initPS7(s[2449]);
initPS8(s[2450]);
initPS9(s[2451]);
initPS10(s[2452]);
initPS11(s[2453]);
initPS12(s[2454]);
initPS13(s[2455]);
initPS14(s[2456]);
initPS15(s[2457]);
initPS16(s[2458]);
initPS17(s[2459]);
initPS18(s[2460]);
initPS19(s[2461]);
initPS20(s[2462]);
initPS21(s[2463]);
initPS22(s[2464]);
initPS23(s[2465]);
initPS24(s[2466]);
initPS25(s[2467]);
initPS26(s[2468]);
initPS27(s[2469]);
initPS28(s[2470]);
initPS29(s[2471]);
initPS30(s[2472]);
initPS31(s[2473]);
initPS32(s[2474]);
initPSNUMCH(s[2475]);
initMABROADC1(s[2476]);
initDONEPROXY(s[2477]);
initIPROXY(s[2478]);
initPLIENG(s[2479]);
initPLITRANS(s[2480]);
initPREL(s[2481]);
initPREASON(s[2482]);
initPRIPN(s[2483]);
initSF1(s[2484]);
initPJULK4WK(s[2485]);
initPJBPTFT(s[2486]);
initPJSPTFT(s[2487]);
initPREARN(s[2488]);
initPREARNW(s[2489]);
initPREARNA(s[2490]);
initPBNFT1(s[2491]);
initPBNFT2(s[2492]);
initPBNFT13(s[2493]);
initPBNFT3(s[2494]);
initPBNFT4(s[2495]);
initPBNFT5(s[2496]);
initPBNFT6(s[2497]);
initPBNFT7(s[2498]);
initPBNFT8(s[2499]);
initPBNFT9(s[2500]);
initPBNFT10(s[2501]);
initPBNFT11(s[2502]);
initPBNFT12(s[2503]);
initPBNFT96(s[2504]);
initNETUSE(s[2505]);
initPRFITB(s[2506]);
initPRFITBW(s[2507]);
initPRFITBA(s[2508]);
initIENDDATHH(s[2509]);
initIENDDATMM(s[2510]);
initIENDDATSS(s[2511]);
initIENDDATY(s[2512]);
initIENDDATM(s[2513]);
initIENDDATD(s[2514]);
initIVCOOP(s[2515]);
initSUSP(s[2516]);
initUNDQUS(s[2517]);
initINTQUS(s[2518]);
initCOOPNXTYR(s[2519]);
initIVPRSNT(s[2520]);
initIVINFNCE(s[2521]);
initIVAFFCT11(s[2522]);
initIVAFFCT12(s[2523]);
initIVAFFCT13(s[2524]);
initIVAFFCT14(s[2525]);
initIVAFFCT15(s[2526]);
initIVAFFCT17(s[2527]);
initIVAFFCT21(s[2528]);
initIVAFFCT22(s[2529]);
initIVAFFCT23(s[2530]);
initIVAFFCT27(s[2531]);
initIVAFFCT30(s[2532]);
initIVAFFCT97(s[2533]);
initIVLIENG(s[2534]);
initIVLITRANS(s[2535]);
initIVLIWHO(s[2536]);
initIVLIBAL(s[2537]);
initHGPART(s[2538]);
initHGBIOM(s[2539]);
initHGBIOF(s[2540]);
initHGADOPTM(s[2541]);
initHGADOPTF(s[2542]);
initRESPM16(s[2543]);
initRESPF16(s[2544]);
initDETINC1(s[2545]);
initDETINC2(s[2546]);
initDETINC3(s[2547]);
initDETINC4(s[2548]);
initDETINC5(s[2549]);
initDETINC6(s[2550]);
initHASEMAIL(s[2551]);
initSOCCONT(s[2552]);
initOTHCONT(s[2553]);
initRHLAND_CODE(s[2554]);
initRPHMOB_CODE(s[2555]);
initRPHWRK_CODE(s[2556]);
initREMAIL_CODE(s[2557]);
initCTCONSCONF1(s[2558]);
initCTCONSCONF2(s[2559]);
initCTCONSCONF3(s[2560]);
initCTCONSCONF4(s[2561]);
initCTCONSCONF5(s[2562]);
initCTCONSCONF6(s[2563]);
initCTCONSCONF7(s[2564]);
initCTCONSCONF8(s[2565]);
initCTCONSCONF94(s[2566]);
initCTCONSCONF95(s[2567]);
initCTREL(s[2568]);
initCTTEL2_CODE(s[2569]);
initCTADD1_CODE(s[2570]);
initCTADD2_CODE(s[2571]);
initCTTOWN_CODE(s[2572]);
initCTCNTY_CODE(s[2573]);
initCTPCODE_CODE(s[2574]);
initCTTEL1_CODE(s[2575]);
initCTEMAIL_CODE(s[2576]);
initRINGFENCE(s[2577]);
initORIGADD(s[2578]);
initINDMODE(s[2579]);
initPPSEX(s[2580]);
initFNPID(s[2581]);
initMNPID(s[2582]);
initPN1PID(s[2583]);
initPN1PNO(s[2584]);
initPN1SEX(s[2585]);
initPN2PID(s[2586]);
initPN2PNO(s[2587]);
initPN2SEX(s[2588]);
initPNS1PID(s[2589]);
initPNS1PNO(s[2590]);
initPNS1SEX(s[2591]);
initPNS2PID(s[2592]);
initPNS2PNO(s[2593]);
initPNS2SEX(s[2594]);
initGRFPID(s[2595]);
initGRMPID(s[2596]);
initJ2PAY_IF(s[2597]);
initFIMNGRS_TC(s[2598]);
initFIMNGRS_DV(s[2599]);
initFIMNLABGRS_TC(s[2600]);
initFIMNLABGRS_DV(s[2601]);
initFIMNLABNET_TC(s[2602]);
initFIMNLABNET_DV(s[2603]);
initFIYRINVINC_TC(s[2604]);
initFIYRINVINC_DV(s[2605]);
initFIBENOTHR_TC(s[2606]);
initFIBENOTHR_DV(s[2607]);
initPAYGL(s[2608]);
initPAYNL(s[2609]);
initJSPRF(s[2610]);
initPAYGU_DV(s[2611]);
initPAYDV(s[2612]);
initPAYNU_DV(s[2613]);
initPAYN_DV(s[2614]);
initSEEARNGRS_DV(s[2615]);
initSEEARNNET_DV(s[2616]);
initJ2PAY_DV(s[2617]);
initJ2PAYNET_DV(s[2618]);
initFF_IVLOLW(s[2619]);
initFF_JBSEMP(s[2620]);
initFF_JBMNGR(s[2621]);
initFF_JBSIZE(s[2622]);
initFF_OPRLG(s[2623]);
initFF_OPRLG0(s[2624]);
initFF_OPRLG0NI(s[2625]);
initFF_UKBORN(s[2626]);
initFF_YR2UK4(s[2627]);
initFF_JBSTAT(s[2628]);
initFF_EMPLW(s[2629]);
initFF_BENTYPE01(s[2630]);
initFF_BENTYPE02(s[2631]);
initFF_BENTYPE03(s[2632]);
initFF_BENTYPE04(s[2633]);
initFF_BENTYPE05(s[2634]);
initFF_BENTYPE06(s[2635]);
initFF_BENTYPE07(s[2636]);
initFF_BENTYPE08(s[2637]);
initFF_BENTYPE09(s[2638]);
initFF_BENTYPE10(s[2639]);
initFF_BENTYPE11(s[2640]);
initFF_BENTYPE12(s[2641]);
initFF_BENTYPE13(s[2642]);
initFF_BENTYPE14(s[2643]);
initFF_BENTYPE15(s[2644]);
initFF_BENTYPE16(s[2645]);
initFF_BENTYPE17(s[2646]);
initFF_BENTYPE18(s[2647]);
initFF_BENTYPE19(s[2648]);
initFF_BENTYPE20(s[2649]);
initFF_BENTYPE21(s[2650]);
initFF_BENTYPE22(s[2651]);
initFF_BENTYPE23(s[2652]);
initFF_BENTYPE24(s[2653]);
initFF_BENTYPE25(s[2654]);
initFF_BENTYPE26(s[2655]);
initFF_BENTYPE27(s[2656]);
initFF_BENTYPE28(s[2657]);
initFF_BENTYPE29(s[2658]);
initFF_BENTYPE30(s[2659]);
initFF_BENTYPE31(s[2660]);
initFF_BENTYPE32(s[2661]);
initFF_BENTYPE33(s[2662]);
initFF_BENTYPE34(s[2663]);
initFF_BENTYPE35(s[2664]);
initFF_BENTYPE36(s[2665]);
initFF_BENTYPE37(s[2666]);
initFF_BENTYPE38(s[2667]);
initFF_BENTYPE39(s[2668]);
initFF_BENTYPE40(s[2669]);
initFF_BENTYPE41(s[2670]);
initFF_IVINTLANG(s[2671]);
initSEX_DV(s[2672]);
initAGE_DV(s[2673]);
initINTDATD_DV(s[2674]);
initINTDATM_DV(s[2675]);
initINTDATY_DV(s[2676]);
initDOBY_DV(s[2677]);
initPENSIONER_DV(s[2678]);
initNPN_DV(s[2679]);
initNPNS_DV(s[2680]);
initNGRP_DV(s[2681]);
initNNSIB_DV(s[2682]);
initNNSSIB_DV(s[2683]);
initNPENSIONER_DV(s[2684]);
initJBSOCGR_DV(s[2685]);
initSCDASSAT_DV(s[2686]);
initSCDASCOH_DV(s[2687]);
initSCDATA_DV(s[2688]);
initETHN_DV(s[2689]);
initFIMNMISC_DV(s[2690]);
initFIMNPRBEN_DV(s[2691]);
initFIMNINVNET_DV(s[2692]);
initFIMNPEN_DV(s[2693]);
initFIMNSBEN_DV(s[2694]);
initFIMNNET_DV(s[2695]);
initCOUNTRY(s[2696]);
initGOR_DV(s[2697]);
initURBAN_DV(s[2698]);
initHHRESP_DV(s[2699]);
initXTRA5MIN_DV(s[2700]);
initXTRA5MINOSM_DV(s[2701]);
initAGEGR5_DV(s[2702]);
initAGEGR10_DV(s[2703]);
initAGEGR13_DV(s[2704]);
initLIVESP_DV(s[2705]);
initCOHAB_DV(s[2706]);
initSINGLE_DV(s[2707]);
initMASTAT_DV(s[2708]);
initHHTYPE_DV(s[2709]);
initBUNO_DV(s[2710]);
initDEPCHL_DV(s[2711]);
initNCHILD_DV(s[2712]);
initNDEPCHL_DV(s[2713]);
initRESPM16_DV(s[2714]);
initRESPF16_DV(s[2715]);
initRACH16_DV(s[2716]);
initHRPID(s[2717]);
initHRPNO(s[2718]);
initPPID(s[2719]);
initPPNO(s[2720]);
initSPPID(s[2721]);
initSPPNO(s[2722]);
initFNPNO(s[2723]);
initFNSPID(s[2724]);
initFNSPNO(s[2725]);
initMNPNO(s[2726]);
initMNSPID(s[2727]);
initMNSPNO(s[2728]);
initGRFPNO(s[2729]);
initGRMPNO(s[2730]);
initQFHIGH_DV(s[2731]);
initNQFHIGH_DV(s[2732]);
initQFHIGHFL_DV(s[2733]);
initHIQUAL_DV(s[2734]);
initNHIQUAL_DV(s[2735]);
initNNMPSP_DV(s[2736]);
initNMPSP_DV(s[2737]);
initNUNMPSP_DV(s[2738]);
initJBFT_DV(s[2739]);
initJBSOC00_CC(s[2740]);
initJBSOC10_CC(s[2741]);
initJBSIC07_CC(s[2742]);
initJBIINDB_DV(s[2743]);
initJBES2000(s[2744]);
initJBSEDV(s[2745]);
initJBRGSC_DV(s[2746]);
initJBNSSEC_DV(s[2747]);
initJBNSSEC8_DV(s[2748]);
initJBNSSEC5_DV(s[2749]);
initJBNSSEC3_DV(s[2750]);
initJBISCO88_CC(s[2751]);
initJLSOC00_CC(s[2752]);
initJLSOC10_CC(s[2753]);
initJLSIC07_CC(s[2754]);
initJLIINDB_DV(s[2755]);
initJLES2000(s[2756]);
initJLSEDV(s[2757]);
initJLRGSC_DV(s[2758]);
initJLNSSEC_DV(s[2759]);
initJLNSSEC8_DV(s[2760]);
initJLNSSEC5_DV(s[2761]);
initJLNSSEC3_DV(s[2762]);
initJLISCO88_CC(s[2763]);
initPASOC90_CC(s[2764]);
initPASOC00_CC(s[2765]);
initPASOC10_CC(s[2766]);
initPANSSEC5_DV(s[2767]);
initMASOC90_CC(s[2768]);
initMASOC00_CC(s[2769]);
initMASOC10_CC(s[2770]);
initMANSSEC5_DV(s[2771]);
initJ1SOC90_CC(s[2772]);
initJ1SOC00_CC(s[2773]);
initJ1SOC10_CC(s[2774]);
initJ1NSSEC5_DV(s[2775]);
initJ2SOC90_CC(s[2776]);
initJ2SOC00_CC(s[2777]);
initJ2SOC10_CC(s[2778]);
initJ2NSSEC5_DV(s[2779]);
initYASOC90_CC(s[2780]);
initYASOC00_CC(s[2781]);
initYASOC10_CC(s[2782]);
initYANSSEC5_DV(s[2783]);
initSCGHQ1_DV(s[2784]);
initSCGHQ2_DV(s[2785]);
initSF12PCS_DV(s[2786]);
initSF12MCS_DV(s[2787]);
initSWEMWBS_DV(s[2788]);
initPSDQA_DV(s[2789]);
initPSDQB_DV(s[2790]);
initPSDQC_DV(s[2791]);
initSCFLADV(s[2792]);
initATTACKED_DV(s[2793]);
initAVOIDED_DV(s[2794]);
initINSULTED_DV(s[2795]);
initUNSAFE_DV(s[2796]);
initPAYU_DV(s[2797]);
initPAYGU_IF(s[2798]);
initPAYNU_IF(s[2799]);
initSEEARNGRS_IF(s[2800]);
initFIYRINVINC_IF(s[2801]);
initFIBENOTHR_IF(s[2802]);
initFIMNLABGRS_IF(s[2803]);
initFIMNGRS_IF(s[2804]);
initINDIN91_LW(s[2805]);
initINDIN01_LW(s[2806]);
initINDPXUS_LW(s[2807]);
initINDINUS_LW(s[2808]);
initINDSCUS_LW(s[2809]);
initIND5MUS_LW(s[2810]);
initINDPXUB_LW(s[2811]);
initINDINUB_LW(s[2812]);
initINDSCUB_LW(s[2813]);
initINDPXUI_LW(s[2814]);
initINDINUI_LW(s[2815]);
initINDSCUI_LW(s[2816]);
initINDNS91_LW(s[2817]);
initINDBD91_LW(s[2818]);
initINDNSUB_LW(s[2819]);
initINDBDUB_LW(s[2820]);
initINDPXUB_XW(s[2821]);
initINDINUB_XW(s[2822]);
initINDSCUB_XW(s[2823]);
initINDPXUI_XW(s[2824]);
initINDINUI_XW(s[2825]);
initINDSCUI_XW(s[2826]);
initIND5MUS_XW(s[2827]);
initRACEL_DV(s[2828]);
}
}
