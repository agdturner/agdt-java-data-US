/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.data.us.data.indresp;
public class US_Wave22_indresp_Record extends US_indresp_Record {
protected byte ADCTS;
protected byte ADOPTCH01;
protected byte ADOPTCH02;
protected byte ADOPTCH03;
protected byte ADOPTCH04;
protected byte ADOPTCH05;
protected byte ADOPTCH06;
protected boolean ADOPTCH07;
protected boolean ADOPTCH08;
protected boolean ADOPTCH09;
protected boolean ADOPTCH10;
protected boolean ADOPTCH11;
protected boolean ADOPTCH12;
protected boolean ADOPTCH13;
protected boolean ADOPTCH14;
protected boolean ADOPTCH15;
protected boolean ADOPTCH16;
protected byte ADSTATUS;
protected byte AEDROF1;
protected byte AEDROF2;
protected byte AEDROF3;
protected byte AEDROF4;
protected double AEPUDA1;
protected byte AEPUDA2;
protected byte AEPUDA3;
protected byte AEPUDA4;
protected byte AEPUWK1;
protected byte AEPUWK2;
protected byte AEPUWK3;
protected byte AEPUWK4;
protected byte AGEGR10_DV;
protected byte AGEGR13_DV;
protected byte AGEGR5_DV;
protected byte AGERET;
protected short AGE_DV;
protected byte AHVWELL;
protected byte AIDEFT;
protected short AIDHU1;
protected short AIDHU2;
protected byte AIDHUA1;
protected byte AIDHUA10;
protected byte AIDHUA11;
protected byte AIDHUA12;
protected byte AIDHUA13;
protected byte AIDHUA14;
protected byte AIDHUA15;
protected byte AIDHUA16;
protected byte AIDHUA2;
protected byte AIDHUA3;
protected byte AIDHUA4;
protected byte AIDHUA5;
protected byte AIDHUA6;
protected byte AIDHUA7;
protected byte AIDHUA8;
protected byte AIDHUA9;
protected byte ALLCH01;
protected byte ALLCH02;
protected byte ALLCH03;
protected byte ALLCH04;
protected byte ALLCH05;
protected byte ALLCH06;
protected byte ALLCH07;
protected byte ALLCH08;
protected byte ALLCH09;
protected byte ALLCH10;
protected boolean ALLCH11;
protected boolean ALLCH12;
protected boolean ALLCH13;
protected boolean ALLCH14;
protected boolean ALLCH15;
protected boolean ALLCH16;
protected byte AREA;
protected double BASNSA;
protected double BASRATE;
protected byte BASREST;
protected byte BENCB;
protected byte BENCTC;
protected byte BENDIS1;
protected byte BENDIS10;
protected byte BENDIS11;
protected byte BENDIS12;
protected byte BENDIS13;
protected byte BENDIS14;
protected byte BENDIS15;
protected byte BENDIS16;
protected byte BENDIS2;
protected byte BENDIS3;
protected byte BENDIS4;
protected byte BENDIS5;
protected byte BENDIS6;
protected byte BENDIS7;
protected byte BENDIS8;
protected byte BENDIS9;
protected byte BENDIS96;
protected byte BENDIS97;
protected byte BENFAM1;
protected byte BENFAM10;
protected byte BENFAM2;
protected byte BENFAM3;
protected byte BENFAM4;
protected byte BENFAM5;
protected byte BENFAM6;
protected byte BENFAM7;
protected byte BENFAM8;
protected byte BENFAM9;
protected byte BENFAM96;
protected byte BENHOU1;
protected byte BENHOU2;
protected byte BENHOU3;
protected byte BENHOU4;
protected byte BENHOU5;
protected byte BENHOU6;
protected byte BENHOU7;
protected byte BENHOU8;
protected byte BENHOU9;
protected byte BENHOU96;
protected byte BENLINK;
protected byte BENPEN1;
protected byte BENPEN10;
protected byte BENPEN11;
protected byte BENPEN12;
protected byte BENPEN13;
protected byte BENPEN2;
protected byte BENPEN3;
protected byte BENPEN4;
protected byte BENPEN5;
protected byte BENPEN6;
protected byte BENPEN7;
protected byte BENPEN8;
protected byte BENPEN9;
protected byte BENPEN96;
protected byte BENSTA1;
protected byte BENSTA10;
protected byte BENSTA11;
protected byte BENSTA12;
protected byte BENSTA13;
protected byte BENSTA2;
protected byte BENSTA3;
protected byte BENSTA4;
protected byte BENSTA5;
protected byte BENSTA6;
protected byte BENSTA7;
protected byte BENSTA9;
protected byte BENSTA96;
protected byte BENSTA97;
protected byte BENTAX1;
protected byte BENTAX10;
protected byte BENTAX2;
protected byte BENTAX3;
protected byte BENTAX4;
protected byte BENTAX5;
protected byte BENTAX6;
protected byte BENTAX7;
protected byte BENTAX8;
protected byte BENTAX9;
protected byte BENTAX96;
protected byte BENUNEMP1;
protected byte BENUNEMP2;
protected byte BENUNEMP3;
protected byte BENUNEMP4;
protected byte BENUNEMP5;
protected byte BENUNEMP6;
protected byte BENUNEMP7;
protected byte BENUNEMP96;
protected short BIRTHY;
protected byte BRLOOP;
protected byte BTYPE1;
protected byte BTYPE10;
protected byte BTYPE11;
protected byte BTYPE12;
protected byte BTYPE13;
protected byte BTYPE14;
protected byte BTYPE2;
protected byte BTYPE3;
protected byte BTYPE4;
protected byte BTYPE5;
protected byte BTYPE6;
protected byte BTYPE7;
protected byte BTYPE8;
protected byte BTYPE9;
protected byte BTYPE96;
protected byte BUNO_DV;
protected byte CARBUY1;
protected byte CARBUY10;
protected byte CARBUY11;
protected byte CARBUY12;
protected byte CARBUY2;
protected byte CARBUY3;
protected byte CARBUY4;
protected byte CARBUY5;
protected byte CARBUY6;
protected byte CARBUY7;
protected byte CARBUY8;
protected byte CARBUY9;
protected byte CARBUY97;
protected int CARMILES;
protected byte CARSRV1;
protected byte CARSRV2;
protected byte CARSRV3;
protected byte CASIEND;
protected int CCAMTJT;
protected int CCAMTSOLE;
protected byte CCARE;
protected byte CCBILLJT;
protected byte CCBILLSOLE;
protected byte CCJT;
protected byte CCJTP0;
protected byte CCJTP1;
protected byte CCJTP10;
protected byte CCJTP11;
protected byte CCJTP12;
protected byte CCJTP13;
protected byte CCJTP14;
protected byte CCJTP15;
protected byte CCJTP16;
protected byte CCJTP2;
protected byte CCJTP3;
protected byte CCJTP4;
protected byte CCJTP5;
protected byte CCJTP6;
protected byte CCJTP7;
protected byte CCJTP8;
protected byte CCJTP9;
protected byte CCSOLE;
protected byte CCWORK;
protected short CH1BY4;
protected short CHARAM;
protected byte CHARFREQ;
protected byte CHARGV;
protected byte CHBRFED01;
protected byte CHBRFED02;
protected boolean CHBRFED03;
protected boolean CHBRFED04;
protected boolean CHBRFED05;
protected boolean CHBRFED06;
protected boolean CHBRFED07;
protected boolean CHBRFED08;
protected boolean CHBRFED09;
protected boolean CHBRFED10;
protected boolean CHBRFED11;
protected boolean CHBRFED12;
protected boolean CHBRFED13;
protected boolean CHBRFED14;
protected boolean CHBRFED15;
protected boolean CHBRFED16;
protected byte CHILDPNO;
protected byte CHKRESP;
protected int CINDTIME;
protected byte CITZN1;
protected byte CITZN2;
protected byte CITZN3;
protected byte CJBATT;
protected byte CJOB;
protected byte CMLSTAT1;
protected byte CMLSTAT2;
protected byte CMLSTAT3;
protected byte COH1BM;
protected short COH1BY;
protected byte COH1EM;
protected short COH1EY;
protected byte COH1MR;
protected byte COHAB;
protected byte COHABN;
protected boolean COHAB_DV;
protected byte CONTFT;
protected byte COUNTRY;
protected int CREDAMT;
protected byte CREDITOR;
protected int CREDJT;
protected int CREDSOLE;
protected byte CSTAT;
protected byte CTADD1_CODE;
protected byte CTADD2_CODE;
protected byte CTCNTY_CODE;
protected byte CTCONS;
protected byte CTCONSCONF1;
protected byte CTCONSCONF2;
protected byte CTCONSCONF3;
protected byte CTCONSCONF4;
protected byte CTCONSCONF5;
protected byte CTCONSCONF6;
protected byte CTCONSCONF7;
protected byte CTCONSCONF8;
protected byte CTCONSCONF94;
protected byte CTEMAIL_CODE;
protected byte CTPCODE_CODE;
protected byte CTREL;
protected byte CTTEL1_CODE;
protected byte CTTEL2_CODE;
protected byte CTTOWN_CODE;
protected byte CURRJOB1;
protected byte CURRJOB2;
protected byte CURRJOB3;
protected byte CURRJOB4;
protected byte CURRJOB5;
protected byte CURRJOB6;
protected byte CURRPART1;
protected byte CURRPART2;
protected byte CURRSTAT1;
protected byte CURRSTAT2;
protected byte CURRSTAT3;
protected byte CURRSTAT4;
protected byte CURRSTAT5;
protected byte CURRSTAT6;
protected byte CURRYNOT1;
protected byte CURRYNOT2;
protected byte CURRYNOT3;
protected byte CURRYNOT4;
protected byte CURRYNOT5;
protected byte CURRYNOT6;
protected byte CURRYNOT7;
protected byte CURRYNOT8;
protected byte CURRYNOT96;
protected byte CURRYNOT97;
protected byte DEBT1;
protected byte DEBT2;
protected byte DEBT4;
protected byte DEBT5;
protected byte DEBT6;
protected byte DEBT7;
protected byte DEBT8;
protected byte DEBT96;
protected byte DEBT97;
protected byte DEBTC1;
protected byte DEBTC2;
protected byte DEBTC3;
protected byte DEBTC4;
protected byte DEBTC5;
protected byte DEBTINFO1;
protected byte DEBTINFO10;
protected byte DEBTINFO11;
protected byte DEBTINFO2;
protected byte DEBTINFO3;
protected byte DEBTINFO4;
protected byte DEBTINFO5;
protected byte DEBTINFO6;
protected byte DEBTINFO7;
protected byte DEBTINFO8;
protected byte DEBTINFO9;
protected byte DEBTINFO97;
protected byte DEBTOTH1;
protected byte DEBTOTH2;
protected byte DEBTOTH3;
protected byte DEBTOTH4;
protected byte DEBTOTH96;
protected byte DEBTPN0;
protected byte DEBTPN1;
protected byte DEBTPN10;
protected byte DEBTPN11;
protected byte DEBTPN12;
protected byte DEBTPN13;
protected byte DEBTPN14;
protected byte DEBTPN15;
protected byte DEBTPN16;
protected byte DEBTPN2;
protected byte DEBTPN3;
protected byte DEBTPN4;
protected byte DEBTPN5;
protected byte DEBTPN6;
protected byte DEBTPN7;
protected byte DEBTPN8;
protected byte DEBTPN9;
protected byte DEBTSJ;
protected int DEBTSK;
protected byte DEBTWHO1;
protected byte DEBTWHO2;
protected byte DEBTWHO3;
protected byte DEBTWHO4;
protected byte DEBTWHO97;
protected int DEBTY;
protected boolean DEPCHL_DV;
protected byte DEPENTH1;
protected byte DEPENTH2;
protected byte DEPENTH3;
protected byte DEPENTH4;
protected byte DEPENTH5;
protected byte DEPENTH6;
protected byte DETINC1;
protected byte DETINC2;
protected byte DETINC3;
protected byte DETINC4;
protected byte DETINC5;
protected byte DETINC6;
protected byte DISDIF1;
protected byte DISDIF10;
protected byte DISDIF11;
protected byte DISDIF12;
protected byte DISDIF2;
protected byte DISDIF3;
protected byte DISDIF4;
protected byte DISDIF5;
protected byte DISDIF6;
protected byte DISDIF7;
protected byte DISDIF8;
protected byte DISDIF9;
protected byte DISDIF96;
protected byte DIVCHK1;
protected byte DIVCHK2;
protected byte DIVCHK3;
protected byte DIVFIN1;
protected byte DIVFIN2;
protected byte DIVFIN3;
protected byte DKLM;
protected short DOBY_DV;
protected byte DONEPROXY;
protected byte DRGMJ;
protected byte DRGOTH;
protected byte DRGSOL;
protected byte DRIVE;
protected byte DRNK4W;
protected byte DVAGE;
protected byte DVM1;
protected byte DVM2;
protected byte DVM3;
protected short DVY41;
protected short DVY42;
protected byte DVY43;
protected byte EATLIVU;
protected byte EDASP;
protected byte EDLINK;
protected byte EDLINKCONF;
protected byte EDLINKCONFB;
protected byte EDLINKKIDE;
protected byte EDLINKKIDSWN;
protected short EDTYPE;
protected byte EDUCATION;
protected byte EDUCISGN;
protected byte EDUCLINKB1;
protected byte EDUCLINKB2;
protected byte EDUCLINKB3;
protected byte EDUCRECD;
protected byte EDUCRSGN;
protected byte EDUCSN;
protected byte EMPCHK;
protected byte EMPLOY;
protected byte EMPSTENDD;
protected byte EMPSTENDM;
protected short EMPSTENDY4;
protected byte ENDMNTH1;
protected byte ENDMNTH2;
protected byte ENDMNTH3;
protected byte ENDMNTH4;
protected byte ENVHABIT1;
protected byte ENVHABIT10;
protected byte ENVHABIT11;
protected byte ENVHABIT2;
protected byte ENVHABIT3;
protected byte ENVHABIT4;
protected byte ENVHABIT5;
protected byte ENVHABIT6;
protected byte ENVHABIT7;
protected byte ENVHABIT8;
protected byte ENVHABIT9;
protected short EPROSH;
protected byte ETHN_DV;
protected byte EVRALC;
protected byte EVRSMO;
protected byte EXPMANAGE1;
protected byte EXPMANAGE10;
protected byte EXPMANAGE11;
protected byte EXPMANAGE2;
protected byte EXPMANAGE3;
protected byte EXPMANAGE4;
protected byte EXPMANAGE5;
protected byte EXPMANAGE6;
protected byte EXPMANAGE7;
protected byte EXPMANAGE8;
protected byte EXPMANAGE9;
protected byte EXPMANAGE97;
protected byte EXTNSA;
protected double EXTRATE;
protected byte EXTREST;
protected byte FAMILY;
protected byte FAMSUP;
protected byte FATHER;
protected byte FENOW;
protected byte FFBRFEDLW;
protected byte FF_BENTYPE01;
protected byte FF_BENTYPE02;
protected byte FF_BENTYPE03;
protected byte FF_BENTYPE04;
protected byte FF_BENTYPE05;
protected byte FF_BENTYPE06;
protected byte FF_BENTYPE07;
protected byte FF_BENTYPE08;
protected byte FF_BENTYPE09;
protected byte FF_BENTYPE10;
protected byte FF_BENTYPE11;
protected byte FF_BENTYPE12;
protected byte FF_BENTYPE13;
protected byte FF_BENTYPE14;
protected byte FF_BENTYPE15;
protected byte FF_BENTYPE16;
protected byte FF_BENTYPE17;
protected byte FF_BENTYPE18;
protected byte FF_BENTYPE19;
protected byte FF_BENTYPE20;
protected byte FF_BENTYPE21;
protected byte FF_BENTYPE22;
protected byte FF_BENTYPE23;
protected byte FF_BENTYPE24;
protected byte FF_BENTYPE25;
protected byte FF_BENTYPE26;
protected byte FF_BENTYPE27;
protected byte FF_BENTYPE28;
protected byte FF_BENTYPE29;
protected byte FF_BENTYPE30;
protected byte FF_BENTYPE31;
protected byte FF_BENTYPE32;
protected byte FF_BENTYPE33;
protected byte FF_BENTYPE34;
protected byte FF_BENTYPE35;
protected byte FF_BENTYPE36;
protected byte FF_BENTYPE37;
protected byte FF_BENTYPE38;
protected byte FF_BENTYPE39;
protected byte FF_EMPLW;
protected byte FF_EVERINT;
protected byte FF_IVINTLANG;
protected byte FF_IVLOLW;
protected byte FF_JBMNGR;
protected byte FF_JBSEMP;
protected byte FF_JBSIZE;
protected byte FF_JBSTAT;
protected byte FF_OPRLG;
protected byte FF_OPRLG0;
protected byte FF_OPRLG0NI;
protected byte FF_TEL;
protected byte FF_UKBORN;
protected short FF_YR2UK4;
protected double FIBENOTHR_DV;
protected double FIBENOTHR_IF;
protected byte FIBENOTHR_TC;
protected double FIMNGRS_IF;
protected byte FIMNGRS_TC;
protected double FIMNINVNET_DV;
protected double FIMNLABGRS_IF;
protected byte FIMNLABGRS_TC;
protected double FIMNLABNET_DV;
protected byte FIMNLABNET_TC;
protected double FIMNMISC_DV;
protected double FIMNNET_DV;
protected double FIMNPEN_DV;
protected double FIMNPRBEN_DV;
protected double FIMNSBEN_DV;
protected byte FINFUT;
protected byte FIVEALCDR;
protected byte FIYRDB1;
protected byte FIYRDB2;
protected byte FIYRDB3;
protected byte FIYRDB4;
protected byte FIYRDB5;
protected byte FIYRDB6;
protected int FIYRDIA;
protected double FIYRINVINC_DV;
protected byte FIYRINVINC_IF;
protected byte FIYRINVINC_TC;
protected byte FLAGLINKB1;
protected byte FLAGLINKB2;
protected byte FLAGLINKB3;
protected byte FLYES1;
protected byte FLYES2;
protected byte FLYES3;
protected byte FLYES4;
protected int FNPID;
protected byte FNPNO;
protected int FNSPID;
protected byte FNSPNO;
protected byte FRDRG;
protected byte FT2ENDM1;
protected byte FT2ENDM2;
protected short FT2ENDY41;
protected short FT2ENDY42;
protected byte FTEDANY;
protected byte FTEDEND1;
protected byte FTEDEND2;
protected byte FTEDMOR1;
protected byte FTEDMOR2;
protected byte FTEDSTARTM1;
protected byte FTEDSTARTM2;
protected short FTEDSTARTY41;
protected short FTEDSTARTY42;
protected byte FTENDM;
protected short FTENDY4;
protected byte FTQUALS;
protected int GRFPID;
protected byte GRFPNO;
protected int GRMPID;
protected byte GRMPNO;
protected byte HASCURR;
protected byte HASEMAIL;
protected byte HCOND1;
protected byte HCOND10;
protected byte HCOND11;
protected byte HCOND12;
protected byte HCOND13;
protected byte HCOND14;
protected byte HCOND15;
protected byte HCOND16;
protected byte HCOND17;
protected byte HCOND2;
protected byte HCOND3;
protected byte HCOND4;
protected byte HCOND5;
protected byte HCOND6;
protected byte HCOND7;
protected byte HCOND8;
protected byte HCOND9;
protected byte HCOND96;
protected byte HCONDA01;
protected byte HCONDA02;
protected byte HCONDA03;
protected byte HCONDA04;
protected byte HCONDA05;
protected byte HCONDA06;
protected byte HCONDA07;
protected byte HCONDA08;
protected byte HCONDA09;
protected byte HCONDA10;
protected byte HCONDA11;
protected byte HCONDA12;
protected byte HCONDA13;
protected byte HCONDA14;
protected byte HCONDA15;
protected byte HCONDA16;
protected byte HCONDA17;
protected byte HCONDN1;
protected byte HCONDN10;
protected byte HCONDN11;
protected byte HCONDN12;
protected byte HCONDN13;
protected byte HCONDN14;
protected byte HCONDN15;
protected byte HCONDN16;
protected byte HCONDN17;
protected byte HCONDN2;
protected byte HCONDN3;
protected byte HCONDN4;
protected byte HCONDN5;
protected byte HCONDN6;
protected byte HCONDN7;
protected byte HCONDN8;
protected byte HCONDN9;
protected byte HCONDN96;
protected byte HCONDNO1;
protected byte HCONDNO10;
protected byte HCONDNO2;
protected byte HCONDNO3;
protected byte HCONDNO4;
protected byte HCONDNO5;
protected byte HCONDNO6;
protected byte HCONDNO7;
protected byte HCONDNO8;
protected byte HCONDNO9;
protected byte HCONDNS1;
protected byte HCONDNS10;
protected byte HCONDNS2;
protected byte HCONDNS3;
protected byte HCONDNS4;
protected byte HCONDNS5;
protected byte HCONDNS6;
protected byte HCONDNS7;
protected byte HCONDNS8;
protected byte HCONDNS9;
protected byte HCONDS01;
protected byte HCONDS02;
protected byte HCONDS03;
protected byte HCONDS04;
protected byte HCONDS05;
protected byte HCONDS08;
protected byte HCONDS09;
protected byte HCONDS10;
protected byte HCONDS11;
protected byte HCONDS12;
protected byte HCONDS13;
protected byte HCONDS14;
protected byte HCONDS15;
protected byte HCONDS16;
protected byte HCONDS17;
protected byte HEALTH;
protected byte HEALTHSN;
protected byte HEDLIK;
protected byte HEDNT;
protected byte HEDNTO_CODE;
protected byte HGADOPTF;
protected byte HGADOPTM;
protected byte HGPART;
protected byte HHRESP_DV;
protected byte HHTYPE_DV;
protected byte HLTHISGN;
protected byte HLTHKIDLINK;
protected byte HLTHLINK;
protected byte HLTHLINKB1;
protected byte HLTHLINKB2;
protected byte HLTHLINKB3;
protected byte HLTHRECD;
protected byte HLTHRSGN;
protected byte HOSPC1;
protected byte HOSPC10;
protected byte HOSPC2;
protected byte HOSPC3;
protected byte HOSPC4;
protected byte HOSPC5;
protected byte HOSPC6;
protected byte HOSPC7;
protected byte HOSPC8;
protected byte HOSPC9;
protected short HOSPDC1;
protected boolean HOSPDC10;
protected short HOSPDC2;
protected short HOSPDC3;
protected byte HOSPDC4;
protected byte HOSPDC5;
protected byte HOSPDC6;
protected byte HOSPDC7;
protected byte HOSPDC8;
protected boolean HOSPDC9;
protected byte HOUSING;
protected short HOWLNG;
protected int HRPID;
protected byte HRPNO;
protected byte HRS_SLPH;
protected byte HRS_SLPM;
protected byte HUBOSS;
protected short HUBUYS;
protected byte HUCAR;
protected byte HUDIY;
protected short HUFRYS;
protected short HUIRON;
protected short HUMOPS;
protected byte HUPOTS;
protected byte HURUNS;
protected short HUSITS;
protected byte IENDDATMM;
protected byte IENDDATSS;
protected double IND5MUS_LW;
protected double IND5MUS_XW;
protected double INDBD91_LW;
protected double INDBDUB_LW;
protected double INDIN01_LW;
protected double INDIN91_LW;
protected double INDINUB_LW;
protected double INDINUB_XW;
protected double INDINUS_LW;
protected byte INDMODE;
protected double INDNS91_LW;
protected double INDNSUB_LW;
protected double INDPXUB_LW;
protected double INDPXUB_XW;
protected double INDPXUS_LW;
protected double INDSCUB_LW;
protected double INDSCUB_XW;
protected double INDSCUS_LW;
protected byte INFSAVE1;
protected byte INFSAVE2;
protected byte INFSAVE3;
protected byte INFSAVE4;
protected byte INFSAVE5;
protected byte INFSAVE6;
protected byte INFSAVE96;
protected byte INOCONTACT;
protected byte INTCONTACT;
protected byte INTDATDV;
protected byte INTDATM_DV;
protected short INTDATY_DV;
protected byte INTSIGNHEALTH;
protected byte INVITRO1;
protected byte INVITRO2;
protected byte INVITRO3;
protected byte INVITRO4;
protected byte IOUTCOME;
protected byte ISTRTDATMM;
protected byte ISTRTDATSS;
protected short ISTRTDATY;
protected short ISYEAR;
protected byte IVAFFCT11;
protected byte IVAFFCT12;
protected byte IVAFFCT13;
protected byte IVAFFCT14;
protected byte IVAFFCT15;
protected byte IVAFFCT17;
protected byte IVAFFCT21;
protected byte IVAFFCT22;
protected byte IVAFFCT23;
protected byte IVAFFCT27;
protected byte IVAFFCT30;
protected byte IVAFFCT97;
protected byte IVCOOP;
protected byte IVINFNCE;
protected byte IVLIBAL;
protected byte IVLIENG;
protected byte IVLITRANS;
protected byte IVLIWHO;
protected byte J1BOSS;
protected byte J1MNGR;
protected byte J1NONE;
protected byte J1NSSEC5_DV;
protected byte J1SEMP;
protected short J1SOC00_CC;
protected short J1SOC10_CC;
protected byte J1SOC90_CC;
protected byte J2NSSEC5_DV;
protected int J2PAY;
protected double J2PAYNET_DV;
protected short J2SOC00_CC;
protected short J2SOC10_CC;
protected short J2SOC90_CC;
protected byte JBATT1;
protected byte JBATT2;
protected byte JBATT3;
protected byte JBATT4;
protected byte JBATT5;
protected byte JBATT6;
protected byte JBBGDATD;
protected byte JBBGDATM;
protected short JBBGDATY;
protected byte JBENDD;
protected byte JBENDM;
protected byte JBENDREAS;
protected short JBENDY4;
protected byte JBES2000;
protected byte JBFLEX1;
protected byte JBFLEX2;
protected byte JBFLEX3;
protected byte JBFLEX4;
protected byte JBFLEX5;
protected byte JBFLEX6;
protected byte JBFLEX7;
protected byte JBFLEX8;
protected byte JBFLEX96;
protected byte JBFXINF;
protected byte JBFXUSE1;
protected byte JBFXUSE2;
protected byte JBFXUSE3;
protected byte JBFXUSE4;
protected byte JBFXUSE5;
protected byte JBFXUSE6;
protected byte JBFXUSE7;
protected byte JBFXUSE8;
protected byte JBFXUSE96;
protected byte JBIINDB_DV;
protected byte JBLKCHA;
protected byte JBLKCHB;
protected byte JBLKCHC;
protected byte JBLKCHD;
protected byte JBLKCHE;
protected byte JBMNGRCHK;
protected byte JBNSSEC3_DV;
protected byte JBNSSEC5_DV;
protected short JBNSSEC_DV;
protected byte JBOFFY;
protected short JBONUS;
protected short JBPEN;
protected short JBPENM;
protected short JBPENY4;
protected byte JBPERFP;
protected short JBRGSC_DV;
protected short JBRISE;
protected byte JBSAMR;
protected byte JBSAT;
protected byte JBSEC;
protected byte JBSECTPUB;
protected short JBSEG_DV;
protected byte JBSEMPCHK;
protected byte JBSIC07CHK;
protected byte JBSIC07_CC;
protected byte JBSIZECHK;
protected byte JBSOC00CHK;
protected short JBSOC00_CC;
protected short JBSOC10_CC;
protected byte JBSOCGR_DV;
protected byte JBTERM1;
protected byte JBTERM2;
protected byte JBXPCHA;
protected byte JBXPCHB;
protected byte JBXPCHC;
protected byte JBXPCHD;
protected byte JBXPCHE;
protected byte JLENDM;
protected byte JLES2000;
protected byte JLIINDB_DV;
protected byte JLNSSEC3_DV;
protected byte JLNSSEC5_DV;
protected short JLNSSEC_DV;
protected short JLRGSC_DV;
protected short JLSEG_DV;
protected byte JLSIC07_CC;
protected short JLSOC00_CC;
protected short JLSOC10_CC;
protected byte JOBHOURS1;
protected byte JOBHOURS2;
protected byte JOBHOURS3;
protected byte JOBHOURS4;
protected byte JOBHOURS5;
protected byte JOBHOURS6;
protected byte JSPART;
protected int JSPAYU;
protected byte JSPAYW;
protected byte JSPRLS;
protected byte JSPRNI;
protected byte JSPRTX;
protected byte JSPYNI;
protected byte JSPYTX;
protected byte JSTYPEB;
protected byte JSWORKTRAV;
protected short JUBGN;
protected short JULK4X1;
protected short JULK4X2;
protected byte JULK4X3;
protected short JULK4X4;
protected short JULK4X5;
protected short JULK4X6;
protected byte JULK4X96;
protected byte JWBS1_DV;
protected byte JWBS2_DV;
protected byte LADOPT;
protected byte LATE;
protected byte LCHMULTI1;
protected byte LCHMULTI2;
protected byte LCHMULTI3;
protected byte LCHMULTI4;
protected byte LCOHNPI;
protected double LENINDINTV;
protected byte LIENG;
protected byte LIHOW;
protected byte LINGUA;
protected byte LITRANS;
protected byte LIVESP;
protected boolean LIVESP_DV;
protected byte LIVEWITH;
protected byte LIWHO;
protected byte LMAR1M;
protected short LMAR1Y;
protected byte LMCBM1;
protected byte LMCBM2;
protected short LMCBY41;
protected short LMCBY42;
protected byte LMSPM1;
protected byte LMSPM2;
protected short LMSPY41;
protected short LMSPY42;
protected byte LNADOPT;
protected byte LNPRNT;
protected byte LPRNT;
protected byte LVHM;
protected byte LVMTHP;
protected byte LVSCHDO;
protected byte LVWHY;
protected short LVYRP;
protected byte LWWRONG;
protected byte MACOB;
protected byte MAJU;
protected byte MANSSEC5_DV;
protected byte MARSTAT;
protected short MASOC00_CC;
protected short MASOC10_CC;
protected byte MASOC90_CC;
protected byte MASTAT_DV;
protected byte MATLEAVE;
protected byte MATLV;
protected byte MATLVENDD;
protected byte MATLVENDM;
protected short MATLVENDY4;
protected byte MATLVSTD;
protected byte MATLVSTM;
protected short MATLVSTY4;
protected byte MAYRUK;
protected byte MEMPLOY;
protected byte MESLP;
protected byte MLAGST;
protected byte MLAGSTU;
protected byte MLFUTR;
protected byte MLRNOT1;
protected byte MLRNOT10;
protected byte MLRNOT11;
protected byte MLRNOT12;
protected byte MLRNOT13;
protected byte MLRNOT2;
protected byte MLRNOT3;
protected byte MLRNOT4;
protected byte MLRNOT5;
protected byte MLRNOT6;
protected byte MLRNOT7;
protected byte MLRNOT8;
protected byte MLRNOT9;
protected byte MLRNOT97;
protected byte MLSTATCHK;
protected byte MLWKFPT;
protected int MNPID;
protected byte MNPNO;
protected int MNSPID;
protected byte MNSPNO;
protected byte MOBUSE;
protected byte MONTH;
protected byte MOVDIR;
protected byte MOVEOTH_CODE;
protected byte MOVY11;
protected byte MOVY12;
protected byte MOVY13;
protected byte MOVY14;
protected byte MOVY15;
protected byte MOVY16;
protected byte MSTATCH1;
protected byte MSTATCH2;
protected byte MSTATCH3;
protected short MSTATSAM;
protected byte MSTATSAMN;
protected byte MVEVER;
protected byte MVMNTH;
protected short MVYR;
protected byte NADOPTCH;
protected byte NAIDXHH;
protected byte NATCH01;
protected byte NATCH02;
protected byte NATCH03;
protected byte NATCH04;
protected byte NATCH05;
protected byte NATCH06;
protected byte NATCH07;
protected byte NATCH08;
protected byte NATCH09;
protected byte NATCH10;
protected byte NATCH11;
protected byte NATCH12;
protected boolean NATCH13;
protected boolean NATCH14;
protected boolean NATCH15;
protected boolean NATCH16;
protected byte NATID1;
protected byte NATID2;
protected byte NATID3;
protected byte NATID4;
protected byte NATID5;
protected byte NATID6;
protected byte NATID97;
protected byte NCARS;
protected byte NCCJT;
protected byte NCCSOLE;
protected byte NCH10;
protected byte NCH10TO15;
protected byte NCH14RESP;
protected byte NCH3RESP;
protected byte NCH415RESP;
protected byte NCH5RESP;
protected byte NCH5TO15;
protected byte NCH8RESP;
protected byte NCHILD;
protected byte NCHILDV;
protected byte NCHRESP;
protected byte NCHUND18RESP;
protected byte NCHUNDER16;
protected byte NCRR1;
protected byte NCRR11;
protected byte NCRR12;
protected byte NCRR3;
protected byte NCRR4;
protected byte NCRR5;
protected byte NCRR6;
protected byte NCRR8;
protected byte NCRR9;
protected byte NCRRM;
protected short NCRRY4;
protected byte NDEPCHL_DV;
protected byte NETPUSE;
protected byte NETUSE;
protected byte NEXT;
protected byte NEXT1;
protected byte NEXT2;
protected byte NEXT3;
protected byte NEXT4;
protected byte NEXT5;
protected byte NEXT6;
protected byte NEXTELSE1;
protected byte NEXTELSE2;
protected byte NEXTELSE3;
protected byte NEXTELSE4;
protected byte NEXTELSE5;
protected byte NEXTELSE6;
protected byte NEXTJOB1;
protected byte NEXTJOB2;
protected byte NEXTJOB3;
protected byte NEXTJOB4;
protected byte NEXTJOB5;
protected byte NEXTJOB6;
protected byte NEXTSTAT1;
protected byte NEXTSTAT2;
protected byte NEXTSTAT3;
protected byte NEXTSTAT4;
protected byte NEXTSTAT5;
protected byte NEXTSTAT6;
protected byte NFH01;
protected byte NFH02;
protected byte NFH03;
protected byte NFH04;
protected byte NFH05;
protected byte NFH06;
protected byte NFH07;
protected byte NFH08;
protected byte NFH09;
protected byte NFH10;
protected byte NFH11;
protected byte NFH12;
protected byte NFH13;
protected byte NFH14;
protected byte NFH15;
protected byte NFH16;
protected byte NFH17;
protected byte NFH18;
protected byte NFH19;
protected byte NFH20;
protected byte NFH21;
protected byte NFH22;
protected byte NFH23;
protected byte NFH24;
protected byte NFH25;
protected byte NFH26;
protected byte NFH27;
protected byte NFH28;
protected byte NFH29;
protected byte NFH30;
protected byte NFH31;
protected byte NFH32;
protected byte NFH33;
protected byte NFH34;
protected byte NFH35;
protected byte NFH36;
protected byte NFH37;
protected byte NFH38;
protected byte NFH39;
protected byte NFLYEU;
protected byte NFLYIN;
protected byte NFLYOS;
protected byte NGRP_DV;
protected byte NHIQUAL_DV;
protected byte NIACT;
protected byte NIREL;
protected byte NISERPS;
protected byte NMAR;
protected byte NMPSP_DV;
protected byte NNATCH;
protected byte NNEWBORN;
protected byte NNMPSP_DV;
protected byte NNSIB_DV;
protected byte NNSSIB_DV;
protected byte NOSVY;
protected byte NOTEMPCHK;
protected byte NPENSIONER_DV;
protected byte NPNS_DV;
protected byte NPN_DV;
protected byte NQFHIGH_DV;
protected byte NUNMPSP_DV;
protected byte NXTJBENDD;
protected byte NXTJBENDM;
protected short NXTJBENDY4;
protected byte NXTJBES;
protected byte NXTJBHRS;
protected byte NXTST;
protected byte NXTSTELSE;
protected byte NXTSTENDD;
protected byte NXTSTENDM;
protected short NXTSTENDY4;
protected byte OLYMACT11;
protected byte OLYMACT12;
protected byte OLYMACT13;
protected byte OLYMACT14;
protected byte OLYMACT15;
protected byte OLYMACT16;
protected byte OLYMACT17;
protected byte OLYMACT18;
protected byte OLYMACT196;
protected byte OLYMACT198;
protected byte OLYMACT21;
protected byte OLYMACT22;
protected byte OLYMACT23;
protected byte OLYMACT24;
protected byte OLYMACT25;
protected byte OLYMACT26;
protected byte OLYMACT27;
protected byte OLYMACT28;
protected byte OLYMACT296;
protected byte OLYMACT298;
protected byte OLYMACT31;
protected byte OLYMACT32;
protected byte OLYMACT33;
protected byte OLYMACT34;
protected byte OLYMACT35;
protected byte OLYMACT36;
protected byte OLYMACT37;
protected byte OLYMACT38;
protected byte OLYMACT396;
protected byte OLYMACT398;
protected byte OLYMPAS11;
protected byte OLYMPAS12;
protected byte OLYMPAS13;
protected byte OLYMPAS14;
protected byte OLYMPAS15;
protected byte OLYMPAS196;
protected byte OLYMPAS198;
protected byte OLYMPAS21;
protected byte OLYMPAS22;
protected byte OLYMPAS23;
protected byte OLYMPAS24;
protected byte OLYMPAS25;
protected byte OLYMPAS296;
protected byte OLYMPAS298;
protected byte OLYMPAS31;
protected byte OLYMPAS32;
protected byte OLYMPAS33;
protected byte OLYMPAS34;
protected byte OLYMPAS35;
protected byte OLYMPAS396;
protected byte OLYMPAS398;
protected byte OPRLG;
protected byte OPRLG0;
protected byte OPRLG0NI;
protected byte OPRLG1;
protected byte OPRLG2;
protected byte OPRLG3;
protected byte OPSERV1;
protected byte OPSERV10;
protected byte OPSERV2;
protected byte OPSERV3;
protected byte OPSERV4;
protected byte OPSERV5;
protected byte OPSERV6;
protected byte OPSERV7;
protected byte OPSERV8;
protected byte OPSERV9;
protected byte ORIGADD;
protected byte OTHCONT;
protected byte OVTNSA;
protected byte OVTPAY;
protected double OVTRATE;
protected byte OVTREST;
protected byte PACOB;
protected byte PAJU;
protected byte PANSSEC5_DV;
protected short PASOC00_CC;
protected short PASOC10_CC;
protected byte PASOC90_CC;
protected byte PAYGWC;
protected double PAYG_DV;
protected byte PAYNWC;
protected byte PAYRUK;
protected byte PAYTYP;
protected byte PAYUWC;
protected double PAYU_DV;
protected byte PBNFT1;
protected byte PBNFT10;
protected byte PBNFT11;
protected byte PBNFT12;
protected byte PBNFT13;
protected byte PBNFT2;
protected byte PBNFT3;
protected byte PBNFT4;
protected byte PBNFT5;
protected byte PBNFT6;
protected byte PBNFT7;
protected byte PBNFT8;
protected byte PBNFT9;
protected byte PBNFT96;
protected byte PENMCN;
protected byte PENMEX;
protected double PENMPY;
protected byte PENMTP;
protected byte PENSIONER_DV;
protected byte PENSPB;
protected int PID;
protected byte PJBPTFT;
protected byte PJSPTFT;
protected byte PLIVPAR;
protected short PLNOWM;
protected short PLNOWY4;
protected int PN1PID;
protected byte PN1PNO;
protected byte PN1SEX;
protected int PN2PID;
protected byte PN2PNO;
protected byte PN2SEX;
protected byte PNCARS;
protected int PNS1PID;
protected byte PNS1PNO;
protected byte PNS1SEX;
protected int PNS2PID;
protected byte PNS2PNO;
protected byte PNS2SEX;
protected byte PPEN;
protected byte PPENSIONER;
protected byte PPENT;
protected int PPID;
protected byte PPPEX;
protected byte PPPEXM;
protected int PPRAM;
protected byte PPRAMPC;
protected byte PPREG;
protected byte PPSEX;
protected short PPYRS;
protected byte PRAYFREQ;
protected byte PREARN;
protected byte PREARNA;
protected byte PREARNW;
protected byte PREASON;
protected byte PREG;
protected byte PREGEND1;
protected byte PREGEND2;
protected byte PREGEND3;
protected byte PREGEND4;
protected byte PREGFERT1;
protected byte PREGFERT2;
protected byte PREGFERT3;
protected byte PREGFERT4;
protected byte PREGM1;
protected byte PREGM2;
protected byte PREGM3;
protected byte PREGM4;
protected byte PREGOUT1;
protected byte PREGOUT2;
protected byte PREGOUT3;
protected byte PREGOUT4;
protected byte PREGSMK11;
protected byte PREGSMK12;
protected byte PREGSMK13;
protected byte PREGSMK14;
protected byte PREGSMK21;
protected byte PREGSMK22;
protected byte PREGSMK23;
protected byte PREGSMK24;
protected byte PREGSMK31;
protected byte PREGSMK32;
protected byte PREGSMK33;
protected byte PREGSMK34;
protected byte PREGSMOKE1;
protected byte PREGSMOKE2;
protected byte PREGSMOKE3;
protected byte PREGSMOKE4;
protected short PREGY41;
protected short PREGY42;
protected short PREGY43;
protected short PREGY44;
protected byte PREL;
protected byte PRFITB;
protected byte PRFITBA;
protected byte PRFITBW;
protected byte PS1;
protected byte PS10;
protected byte PS11;
protected byte PS12;
protected byte PS13;
protected byte PS14;
protected byte PS15;
protected byte PS16;
protected byte PS17;
protected byte PS18;
protected byte PS19;
protected byte PS2;
protected byte PS20;
protected byte PS21;
protected byte PS22;
protected byte PS23;
protected byte PS24;
protected byte PS25;
protected byte PS26;
protected byte PS27;
protected byte PS28;
protected byte PS29;
protected byte PS3;
protected byte PS30;
protected byte PS31;
protected byte PS32;
protected byte PS4;
protected byte PS5;
protected byte PS6;
protected byte PS7;
protected byte PS8;
protected byte PS9;
protected byte PSDQA_DV;
protected byte PSDQB_DV;
protected byte PSDQC_DV;
protected byte PSIBLINGS;
protected byte PSNUMCH;
protected int PSU;
protected byte QFHIGH;
protected boolean QFHIGHFL_DV;
protected byte QFHIGH_DV;
protected byte QFVOC1;
protected byte QFVOC10;
protected byte QFVOC11;
protected byte QFVOC12;
protected byte QFVOC13;
protected byte QFVOC14;
protected byte QFVOC15;
protected byte QFVOC2;
protected byte QFVOC3;
protected byte QFVOC4;
protected byte QFVOC5;
protected byte QFVOC6;
protected byte QFVOC7;
protected byte QFVOC8;
protected byte QFVOC9;
protected byte QFVOC96;
protected byte QUALNEW1;
protected byte QUALNEW10;
protected byte QUALNEW11;
protected byte QUALNEW13;
protected byte QUALNEW15;
protected byte QUALNEW16;
protected byte QUALNEW17;
protected byte QUALNEW18;
protected byte QUALNEW19;
protected byte QUALNEW2;
protected byte QUALNEW20;
protected byte QUALNEW21;
protected byte QUALNEW22;
protected byte QUALNEW23;
protected byte QUALNEW24;
protected byte QUALNEW25;
protected byte QUALNEW26;
protected byte QUALNEW27;
protected byte QUALNEW28;
protected byte QUALNEW29;
protected byte QUALNEW3;
protected byte QUALNEW30;
protected byte QUALNEW31;
protected byte QUALNEW4;
protected byte QUALNEW5;
protected byte QUALNEW6;
protected byte QUALNEW7;
protected byte QUALNEW8;
protected byte QUALNEW9;
protected byte QUALOC;
protected byte RACEL;
protected byte RACELAT;
protected byte RACELBT;
protected byte RACELMT;
protected byte RACELOT_CODE;
protected short RACELO_CODE;
protected byte RACELT;
protected byte RACELWT;
protected byte RACEL_DV;
protected byte RCOTHERCODE;
protected byte REASEND1;
protected byte REASEND2;
protected byte REASEND3;
protected byte REASEND4;
protected byte REASEND5;
protected byte REASEND6;
protected byte REFBANK;
protected byte REFBNKY;
protected byte RELUP;
protected byte REMAIL_CODE;
protected short REMCNTRY1;
protected short REMCNTRY2;
protected short REMCNTRY3;
protected short REMCNTRY4;
protected byte REMHOW1;
protected byte REMHOW2;
protected byte REMHOW3;
protected byte REMHOW4;
protected byte REMIT1;
protected byte REMIT2;
protected byte REMIT3;
protected byte REMIT4;
protected byte REMIT5;
protected short REMITAMT1;
protected int REMITAMT2;
protected short REMITAMT3;
protected int REMITAMT4;
protected byte REMITFREQ1;
protected byte REMITFREQ2;
protected byte REMITFREQ3;
protected byte REMITFREQ4;
protected byte REMITREG1;
protected byte REMITREG2;
protected byte REMITREG3;
protected byte REMITREG4;
protected byte REMITUSUAL1;
protected byte REMITUSUAL2;
protected byte REMITUSUAL3;
protected byte REMITUSUAL4;
protected boolean RESPF16;
protected boolean RESPF16_DV;
protected boolean RESPM16;
protected boolean RESPM16_DV;
protected byte RETAMT;
protected byte RETCHK;
protected byte RETSUF;
protected byte RHLANCODE;
protected byte RLCHARITY;
protected byte RLDRNK;
protected byte RLEAT;
protected byte RLFRIENDS;
protected byte RLJOB;
protected byte RLJOBY1;
protected byte RLJOBY2;
protected byte RLJOBY3;
protected byte RLJOBY4;
protected byte RLJOBY5;
protected byte RLJOBY6;
protected byte RLJOBY97;
protected byte RLMARG;
protected byte RLSAVE;
protected byte RLSCHL;
protected byte RLWEAR;
protected byte RPHMOB_CODE;
protected byte RPHWRK_CODE;
protected byte RTCON1;
protected byte RTCON2;
protected byte RTCON3;
protected byte RTCON4;
protected byte RTEXPJB;
protected byte RTFND1;
protected byte RTFND10;
protected byte RTFND2;
protected byte RTFND3;
protected byte RTFND4;
protected byte RTFND5;
protected byte RTFND6;
protected byte RTFND7;
protected byte RTFND8;
protected byte RTFND9;
protected byte RTFND96;
protected byte RTPRO1;
protected byte RTPRO2;
protected byte RTPRO3;
protected byte RTPRO4;
protected byte RTPRO5;
protected byte RTPRO6;
protected byte SAMEJOB;
protected short SAMPST;
protected byte SAVDOCS;
protected short SAVE;
protected int SAVED;
protected byte SAVLT;
protected byte SAVREG;
protected byte SCAC;
protected byte SCENV_BCCC;
protected byte SCENV_CANC;
protected byte SCENV_CREX;
protected byte SCENV_CRLF;
protected byte SCENV_FITL;
protected byte SCENV_FTST;
protected byte SCENV_GRN;
protected byte SCENV_MEDS;
protected byte SCENV_NOOT;
protected byte SCENV_NOWO;
protected byte SCENV_PMEP;
protected byte SCENV_TLAT;
protected byte SCFLAG_DV;
protected byte SCHLLOC;
protected byte SCHOK;
protected byte SCHOOLCNTRY1;
protected byte SCHOOLCNTRY2;
protected byte SCHOOLCNTRY3;
protected byte SCHOOLCNTRY4;
protected byte SCHOOLCNTRY5;
protected byte SCLFSAT1;
protected byte SCLFSAT2;
protected byte SCLFSAT7;
protected byte SCLFSATO;
protected byte SCOPECL200;
protected byte SCOPECL30;
protected byte SCOPFAMA;
protected byte SCOPFAMB;
protected byte SCOPFAMD;
protected byte SCOPFAMF;
protected byte SCOPFAMH;
protected byte SCRF1;
protected byte SCRF2;
protected byte SCRF3;
protected byte SCRF4;
protected byte SCRF5;
protected byte SCRF6;
protected byte SCRF97;
protected byte SCRX_CODE;
protected byte SCSF1;
protected byte SCSF2A;
protected byte SCSF2B;
protected byte SCSF3A;
protected byte SCSF3B;
protected byte SCSF4A;
protected byte SCSF4B;
protected byte SCSF5;
protected byte SCSF6A;
protected byte SCSF6B;
protected byte SCSF6C;
protected byte SCSF7;
protected byte SCUN1;
protected byte SCUN2;
protected byte SCUN3;
protected byte SCUN97;
protected byte SCUX_CODE;
protected byte SCWEMWBA;
protected byte SCWEMWBB;
protected byte SCWEMWBC;
protected byte SCWEMWBD;
protected byte SCWEMWBE;
protected byte SCWEMWBF;
protected byte SCWEMWBG;
protected byte SCWKIMP;
protected byte SCWKOR1;
protected byte SCWKOR10;
protected byte SCWKOR11;
protected byte SCWKOR12;
protected byte SCWKOR13;
protected byte SCWKOR14;
protected byte SCWKOR15;
protected byte SCWKOR2;
protected byte SCWKOR3;
protected byte SCWKOR4;
protected byte SCWKOR5;
protected byte SCWKOR6;
protected byte SCWKOR7;
protected byte SCWKOR8;
protected byte SCWKOR9;
protected double SEEARNGRS_DV;
protected byte SEEARNGRS_IF;
protected double SEEARNNET_DV;
protected byte SERVUSE1;
protected byte SERVUSE10;
protected byte SERVUSE2;
protected byte SERVUSE3;
protected byte SERVUSE4;
protected byte SERVUSE5;
protected byte SERVUSE6;
protected byte SERVUSE7;
protected byte SERVUSE8;
protected byte SERVUSE9;
protected byte SERVUSE96;
protected byte SEX_DV;
protected byte SF1;
protected double SF12MCS_DV;
protected double SF12PCS_DV;
protected byte SIGNEDUCKIDS1;
protected byte SIGNEDUCKIDS2;
protected byte SIGNHEALTHKI1;
protected byte SIGNHEALTHKI2;
protected boolean SINGLE_DV;
protected byte SLP_QUAL;
protected byte SMKMNTH11;
protected byte SMKMNTH12;
protected byte SMKMNTH13;
protected byte SMKMNTH14;
protected byte SMKMNTH21;
protected byte SMKMNTH22;
protected byte SMKMNTH23;
protected byte SMKMNTH24;
protected byte SMKMNTH31;
protected byte SMKMNTH32;
protected byte SMKMNTH33;
protected byte SMKMNTH34;
protected byte SMOFRQ;
protected byte SOCCONT;
protected byte SPPEN;
protected int SPPID;
protected byte SPPNO;
protected byte SRVYNOT1;
protected byte SRVYNOT10;
protected byte SRVYNOT2;
protected byte SRVYNOT3;
protected byte SRVYNOT4;
protected byte SRVYNOT5;
protected byte SRVYNOT6;
protected byte SRVYNOT7;
protected byte SRVYNOT8;
protected byte SRVYNOT9;
protected byte STATCM1;
protected byte STATCM2;
protected byte STATCM3;
protected short STATCY41;
protected short STATCY42;
protected short STATCY43;
protected byte STATENDD1;
protected byte STATENDD2;
protected byte STATENDD3;
protected byte STATENDD4;
protected byte STATENDD5;
protected byte STATENDD6;
protected byte STATENDM1;
protected byte STATENDM2;
protected byte STATENDM3;
protected byte STATENDM4;
protected byte STATENDM5;
protected byte STATENDM6;
protected short STATENDY41;
protected short STATENDY42;
protected short STATENDY43;
protected short STATENDY44;
protected short STATENDY45;
protected short STATENDY46;
protected byte STENDREAS;
protected short STRATA;
protected byte SUSP;
protected byte SVACTS1;
protected byte SVACTS2;
protected byte SVACTS3;
protected byte SVACTS4;
protected byte SVACTS5;
protected byte SVACTS96;
protected byte SVACTS97;
protected int SVAMT1;
protected int SVAMT2;
protected int SVAMT3;
protected int SVAMT4;
protected int SVAMT5;
protected int SVAMT6;
protected byte SVB1_1;
protected byte SVB1_2;
protected byte SVB1_3;
protected byte SVB1_4;
protected byte SVB1_5;
protected byte SVB1_6;
protected byte SVB2_1;
protected byte SVB2_2;
protected byte SVB2_3;
protected byte SVB2_4;
protected byte SVB2_5;
protected byte SVB2_6;
protected byte SVB3_1;
protected byte SVB3_2;
protected byte SVB3_3;
protected byte SVB3_4;
protected byte SVB3_5;
protected byte SVB3_6;
protected byte SVB4_1;
protected byte SVB4_2;
protected byte SVB4_3;
protected byte SVB4_4;
protected byte SVB4_5;
protected byte SVB4_6;
protected byte SVB5_1;
protected byte SVB5_2;
protected byte SVB5_3;
protected byte SVB5_4;
protected byte SVB5_5;
protected byte SVB5_6;
protected byte SVPN0_1;
protected byte SVPN0_2;
protected boolean SVPN0_3;
protected boolean SVPN0_4;
protected boolean SVPN0_5;
protected boolean SVPN0_6;
protected byte SVPN10_1;
protected byte SVPN10_2;
protected boolean SVPN10_3;
protected boolean SVPN10_4;
protected boolean SVPN10_5;
protected boolean SVPN10_6;
protected byte SVPN11_1;
protected byte SVPN11_2;
protected boolean SVPN11_3;
protected boolean SVPN11_4;
protected boolean SVPN11_5;
protected boolean SVPN11_6;
protected byte SVPN12_1;
protected byte SVPN12_2;
protected boolean SVPN12_3;
protected boolean SVPN12_4;
protected boolean SVPN12_5;
protected boolean SVPN12_6;
protected byte SVPN13_1;
protected byte SVPN13_2;
protected boolean SVPN13_3;
protected boolean SVPN13_4;
protected boolean SVPN13_5;
protected boolean SVPN13_6;
protected byte SVPN14_1;
protected byte SVPN14_2;
protected boolean SVPN14_3;
protected boolean SVPN14_4;
protected boolean SVPN14_5;
protected boolean SVPN14_6;
protected byte SVPN15_1;
protected byte SVPN15_2;
protected boolean SVPN15_3;
protected boolean SVPN15_4;
protected boolean SVPN15_5;
protected boolean SVPN15_6;
protected byte SVPN16_1;
protected byte SVPN16_2;
protected boolean SVPN16_3;
protected boolean SVPN16_4;
protected boolean SVPN16_5;
protected boolean SVPN16_6;
protected byte SVPN1_1;
protected byte SVPN1_2;
protected boolean SVPN1_3;
protected boolean SVPN1_4;
protected boolean SVPN1_5;
protected boolean SVPN1_6;
protected byte SVPN2_1;
protected byte SVPN2_2;
protected boolean SVPN2_3;
protected boolean SVPN2_4;
protected boolean SVPN2_5;
protected boolean SVPN2_6;
protected byte SVPN3_1;
protected byte SVPN3_2;
protected boolean SVPN3_3;
protected boolean SVPN3_4;
protected boolean SVPN3_5;
protected boolean SVPN3_6;
protected byte SVPN4_1;
protected byte SVPN4_2;
protected boolean SVPN4_3;
protected boolean SVPN4_4;
protected boolean SVPN4_5;
protected boolean SVPN4_6;
protected byte SVPN5_1;
protected byte SVPN5_2;
protected boolean SVPN5_3;
protected boolean SVPN5_4;
protected boolean SVPN5_5;
protected boolean SVPN5_6;
protected byte SVPN6_1;
protected byte SVPN6_2;
protected boolean SVPN6_3;
protected boolean SVPN6_4;
protected boolean SVPN6_5;
protected boolean SVPN6_6;
protected byte SVPN7_1;
protected byte SVPN7_2;
protected boolean SVPN7_3;
protected boolean SVPN7_4;
protected boolean SVPN7_5;
protected boolean SVPN7_6;
protected byte SVPN8_1;
protected byte SVPN8_2;
protected boolean SVPN8_3;
protected boolean SVPN8_4;
protected boolean SVPN8_5;
protected boolean SVPN8_6;
protected byte SVPN9_1;
protected byte SVPN9_2;
protected boolean SVPN9_3;
protected boolean SVPN9_4;
protected boolean SVPN9_5;
protected boolean SVPN9_6;
protected byte SVSJ1;
protected byte SVSJ2;
protected boolean SVSJ3;
protected boolean SVSJ4;
protected boolean SVSJ5;
protected boolean SVSJ6;
protected int SVSK1;
protected int SVSK2;
protected boolean SVSK3;
protected boolean SVSK4;
protected boolean SVSK5;
protected boolean SVSK6;
protected byte SWEMWBS_DV;
protected byte TF_JBSEMP;
protected short TMTIME;
protected byte TRAINANY;
protected short TRAINDAYS1;
protected short TRAINDAYS2;
protected short TRAINDAYS3;
protected byte TRAINEND1;
protected byte TRAINEND2;
protected byte TRAINEND3;
protected byte TRAINHRS1;
protected byte TRAINHRS2;
protected byte TRAINHRS3;
protected byte TRAINN;
protected byte TRAINPURP11;
protected byte TRAINPURP12;
protected byte TRAINPURP13;
protected byte TRAINPURP21;
protected byte TRAINPURP22;
protected byte TRAINPURP23;
protected byte TRAINPURP31;
protected byte TRAINPURP32;
protected byte TRAINPURP33;
protected byte TRAINPURP41;
protected byte TRAINPURP42;
protected byte TRAINPURP43;
protected byte TRAINPURP51;
protected byte TRAINPURP52;
protected byte TRAINPURP53;
protected byte TRAINPURP61;
protected byte TRAINPURP62;
protected byte TRAINPURP63;
protected byte TRAINPURP71;
protected byte TRAINPURP72;
protected byte TRAINPURP73;
protected byte TRAINQUAL1;
protected byte TRAINQUAL2;
protected byte TRAINQUAL3;
protected byte TRBIKEFQ;
protected byte TRBUSFQ;
protected byte TRCARFQ;
protected byte TRQUAL1;
protected byte TRQUAL10;
protected byte TRQUAL11;
protected byte TRQUAL13;
protected byte TRQUAL15;
protected byte TRQUAL16;
protected byte TRQUAL17;
protected byte TRQUAL18;
protected byte TRQUAL19;
protected byte TRQUAL2;
protected byte TRQUAL20;
protected byte TRQUAL21;
protected byte TRQUAL22;
protected byte TRQUAL23;
protected byte TRQUAL24;
protected byte TRQUAL25;
protected byte TRQUAL26;
protected byte TRQUAL27;
protected byte TRQUAL28;
protected byte TRQUAL29;
protected byte TRQUAL3;
protected byte TRQUAL30;
protected byte TRQUAL31;
protected byte TRQUAL4;
protected byte TRQUAL5;
protected byte TRQUAL6;
protected byte TRQUAL7;
protected byte TRQUAL8;
protected byte TRQUAL9;
protected byte TRTRNFQ;
protected byte TRWHO1;
protected byte TRWHO2;
protected byte TRWHO3;
protected byte TSLP_30M;
protected byte TSLP_CGH;
protected byte TSLP_WAK;
protected byte TSTA_AWK;
protected short TUIN1;
protected short TUJBPL;
protected byte TWKCAR;
protected byte TWKDIFF1;
protected byte TWKDIFF2;
protected byte TWKDIFF3;
protected byte TWKDIFF4;
protected byte TWKDIFF5;
protected byte TWKDIFF6;
protected byte TWKDIFF7;
protected byte TWKDIFF8;
protected byte TWKDIFF97;
protected byte TWKDIFFM;
protected byte UKBORN;
protected byte UNDQUS;
protected byte UNUSEXP;
protected byte UPSET;
protected byte URBAN_DV;
protected byte VOLFREQ;
protected short VOLHRS;
protected byte VOLUN;
protected short VOTE1;
protected short VOTE2;
protected short VOTE3;
protected short VOTE4;
protected short VOTE5;
protected short VOTE6;
protected byte WHORUAGE;
protected byte WHORUEDU;
protected byte WHORUFAM;
protected byte WHORUPOL;
protected byte WHORUPRO;
protected byte WHORURAC;
protected byte WHORUSEX;
protected byte WKAUT1;
protected byte WKAUT2;
protected byte WKAUT3;
protected byte WKAUT4;
protected byte WKAUT5;
protected byte WKENDS;
protected byte WKPLSAM;
protected short WKTIME;
protected short WORKDIS;
protected byte WORKTRAV;
protected byte XPMOVE;
protected byte XPMVMNTH;
protected byte XPMVWHN;
protected byte XPMVWHR;
protected short XPMVYR;
protected byte XTRA5MINOSM_DV;
protected byte XTRA5MIN_DV;
protected byte YAFUTA;
protected byte YAFUTB;
protected byte YAJBSRV1;
protected byte YAJBSRV2;
protected byte YAJBSRV3;
protected byte YAJBSRV4;
protected byte YAJBSRV5;
protected byte YAJBSRV7;
protected byte YAJBSRV8;
protected byte YAJBSRV96;
protected byte YANSSEC5_DV;
protected short YASOC00_CC;
protected short YASOC10_CC;
protected byte YASOC90_CC;
protected byte YNOTBIKE1;
protected byte YNOTBIKE2;
protected byte YNOTBIKE3;
protected byte YNOTBIKE96;
protected byte YPAMAR;
protected byte YPAPAR;
protected byte YPESTA;
protected byte YPESTB;
protected byte YPESTC;
protected byte YPESTE;
protected byte YPESTF;
protected byte YPESTI;
protected byte YPESTJ;
protected byte YPESTK;
protected byte YPNETCHT;
protected byte YPNPAL;
protected byte YPSOCWEB;
protected final void initADCTS(String s) {
if (!s.trim().isEmpty()) {
ADCTS = Byte.parseByte(s);
} else {
ADCTS = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH01(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH01 = Byte.parseByte(s);
} else {
ADOPTCH01 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH02(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH02 = Byte.parseByte(s);
} else {
ADOPTCH02 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH03(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH03 = Byte.parseByte(s);
} else {
ADOPTCH03 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH04(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH04 = Byte.parseByte(s);
} else {
ADOPTCH04 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH05(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH05 = Byte.parseByte(s);
} else {
ADOPTCH05 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH06(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH06 = Byte.parseByte(s);
} else {
ADOPTCH06 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH07 = false;
} else {
ADOPTCH07 = true;
}
}
}

protected final void initADOPTCH08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH08 = false;
} else {
ADOPTCH08 = true;
}
}
}

protected final void initADOPTCH09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH09 = false;
} else {
ADOPTCH09 = true;
}
}
}

protected final void initADOPTCH10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH10 = false;
} else {
ADOPTCH10 = true;
}
}
}

protected final void initADOPTCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH11 = false;
} else {
ADOPTCH11 = true;
}
}
}

protected final void initADOPTCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH12 = false;
} else {
ADOPTCH12 = true;
}
}
}

protected final void initADOPTCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH13 = false;
} else {
ADOPTCH13 = true;
}
}
}

protected final void initADOPTCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH14 = false;
} else {
ADOPTCH14 = true;
}
}
}

protected final void initADOPTCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH15 = false;
} else {
ADOPTCH15 = true;
}
}
}

protected final void initADOPTCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH16 = false;
} else {
ADOPTCH16 = true;
}
}
}

protected final void initADSTATUS(String s) {
if (!s.trim().isEmpty()) {
ADSTATUS = Byte.parseByte(s);
} else {
ADSTATUS = Byte.MIN_VALUE;
}
}

protected final void initAEDROF1(String s) {
if (!s.trim().isEmpty()) {
AEDROF1 = Byte.parseByte(s);
} else {
AEDROF1 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF2(String s) {
if (!s.trim().isEmpty()) {
AEDROF2 = Byte.parseByte(s);
} else {
AEDROF2 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF3(String s) {
if (!s.trim().isEmpty()) {
AEDROF3 = Byte.parseByte(s);
} else {
AEDROF3 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF4(String s) {
if (!s.trim().isEmpty()) {
AEDROF4 = Byte.parseByte(s);
} else {
AEDROF4 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA1(String s) {
if (!s.trim().isEmpty()) {
AEPUDA1 = Double.parseDouble(s);
} else {
AEPUDA1 = Double.NaN;
}
}

protected final void initAEPUDA2(String s) {
if (!s.trim().isEmpty()) {
AEPUDA2 = Byte.parseByte(s);
} else {
AEPUDA2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA3(String s) {
if (!s.trim().isEmpty()) {
AEPUDA3 = Byte.parseByte(s);
} else {
AEPUDA3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA4(String s) {
if (!s.trim().isEmpty()) {
AEPUDA4 = Byte.parseByte(s);
} else {
AEPUDA4 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK1(String s) {
if (!s.trim().isEmpty()) {
AEPUWK1 = Byte.parseByte(s);
} else {
AEPUWK1 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK2(String s) {
if (!s.trim().isEmpty()) {
AEPUWK2 = Byte.parseByte(s);
} else {
AEPUWK2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK3(String s) {
if (!s.trim().isEmpty()) {
AEPUWK3 = Byte.parseByte(s);
} else {
AEPUWK3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK4(String s) {
if (!s.trim().isEmpty()) {
AEPUWK4 = Byte.parseByte(s);
} else {
AEPUWK4 = Byte.MIN_VALUE;
}
}

protected final void initAGEGR10_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR10_DV = Byte.parseByte(s);
} else {
AGEGR10_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR13_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR13_DV = Byte.parseByte(s);
} else {
AGEGR13_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR5_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR5_DV = Byte.parseByte(s);
} else {
AGEGR5_DV = Byte.MIN_VALUE;
}
}

protected final void initAGERET(String s) {
if (!s.trim().isEmpty()) {
AGERET = Byte.parseByte(s);
} else {
AGERET = Byte.MIN_VALUE;
}
}

protected final void initAGE_DV(String s) {
if (!s.trim().isEmpty()) {
AGE_DV = Short.parseShort(s);
} else {
AGE_DV = Short.MIN_VALUE;
}
}

protected final void initAHVWELL(String s) {
if (!s.trim().isEmpty()) {
AHVWELL = Byte.parseByte(s);
} else {
AHVWELL = Byte.MIN_VALUE;
}
}

protected final void initAIDEFT(String s) {
if (!s.trim().isEmpty()) {
AIDEFT = Byte.parseByte(s);
} else {
AIDEFT = Byte.MIN_VALUE;
}
}

protected final void initAIDHU1(String s) {
if (!s.trim().isEmpty()) {
AIDHU1 = Short.parseShort(s);
} else {
AIDHU1 = Short.MIN_VALUE;
}
}

protected final void initAIDHU2(String s) {
if (!s.trim().isEmpty()) {
AIDHU2 = Short.parseShort(s);
} else {
AIDHU2 = Short.MIN_VALUE;
}
}

protected final void initAIDHUA1(String s) {
if (!s.trim().isEmpty()) {
AIDHUA1 = Byte.parseByte(s);
} else {
AIDHUA1 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA10(String s) {
if (!s.trim().isEmpty()) {
AIDHUA10 = Byte.parseByte(s);
} else {
AIDHUA10 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA11(String s) {
if (!s.trim().isEmpty()) {
AIDHUA11 = Byte.parseByte(s);
} else {
AIDHUA11 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA12(String s) {
if (!s.trim().isEmpty()) {
AIDHUA12 = Byte.parseByte(s);
} else {
AIDHUA12 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA13(String s) {
if (!s.trim().isEmpty()) {
AIDHUA13 = Byte.parseByte(s);
} else {
AIDHUA13 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA14(String s) {
if (!s.trim().isEmpty()) {
AIDHUA14 = Byte.parseByte(s);
} else {
AIDHUA14 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA15(String s) {
if (!s.trim().isEmpty()) {
AIDHUA15 = Byte.parseByte(s);
} else {
AIDHUA15 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA16(String s) {
if (!s.trim().isEmpty()) {
AIDHUA16 = Byte.parseByte(s);
} else {
AIDHUA16 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA2(String s) {
if (!s.trim().isEmpty()) {
AIDHUA2 = Byte.parseByte(s);
} else {
AIDHUA2 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA3(String s) {
if (!s.trim().isEmpty()) {
AIDHUA3 = Byte.parseByte(s);
} else {
AIDHUA3 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA4(String s) {
if (!s.trim().isEmpty()) {
AIDHUA4 = Byte.parseByte(s);
} else {
AIDHUA4 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA5(String s) {
if (!s.trim().isEmpty()) {
AIDHUA5 = Byte.parseByte(s);
} else {
AIDHUA5 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA6(String s) {
if (!s.trim().isEmpty()) {
AIDHUA6 = Byte.parseByte(s);
} else {
AIDHUA6 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA7(String s) {
if (!s.trim().isEmpty()) {
AIDHUA7 = Byte.parseByte(s);
} else {
AIDHUA7 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA8(String s) {
if (!s.trim().isEmpty()) {
AIDHUA8 = Byte.parseByte(s);
} else {
AIDHUA8 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA9(String s) {
if (!s.trim().isEmpty()) {
AIDHUA9 = Byte.parseByte(s);
} else {
AIDHUA9 = Byte.MIN_VALUE;
}
}

protected final void initALLCH01(String s) {
if (!s.trim().isEmpty()) {
ALLCH01 = Byte.parseByte(s);
} else {
ALLCH01 = Byte.MIN_VALUE;
}
}

protected final void initALLCH02(String s) {
if (!s.trim().isEmpty()) {
ALLCH02 = Byte.parseByte(s);
} else {
ALLCH02 = Byte.MIN_VALUE;
}
}

protected final void initALLCH03(String s) {
if (!s.trim().isEmpty()) {
ALLCH03 = Byte.parseByte(s);
} else {
ALLCH03 = Byte.MIN_VALUE;
}
}

protected final void initALLCH04(String s) {
if (!s.trim().isEmpty()) {
ALLCH04 = Byte.parseByte(s);
} else {
ALLCH04 = Byte.MIN_VALUE;
}
}

protected final void initALLCH05(String s) {
if (!s.trim().isEmpty()) {
ALLCH05 = Byte.parseByte(s);
} else {
ALLCH05 = Byte.MIN_VALUE;
}
}

protected final void initALLCH06(String s) {
if (!s.trim().isEmpty()) {
ALLCH06 = Byte.parseByte(s);
} else {
ALLCH06 = Byte.MIN_VALUE;
}
}

protected final void initALLCH07(String s) {
if (!s.trim().isEmpty()) {
ALLCH07 = Byte.parseByte(s);
} else {
ALLCH07 = Byte.MIN_VALUE;
}
}

protected final void initALLCH08(String s) {
if (!s.trim().isEmpty()) {
ALLCH08 = Byte.parseByte(s);
} else {
ALLCH08 = Byte.MIN_VALUE;
}
}

protected final void initALLCH09(String s) {
if (!s.trim().isEmpty()) {
ALLCH09 = Byte.parseByte(s);
} else {
ALLCH09 = Byte.MIN_VALUE;
}
}

protected final void initALLCH10(String s) {
if (!s.trim().isEmpty()) {
ALLCH10 = Byte.parseByte(s);
} else {
ALLCH10 = Byte.MIN_VALUE;
}
}

protected final void initALLCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH11 = false;
} else {
ALLCH11 = true;
}
}
}

protected final void initALLCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH12 = false;
} else {
ALLCH12 = true;
}
}
}

protected final void initALLCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH13 = false;
} else {
ALLCH13 = true;
}
}
}

protected final void initALLCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH14 = false;
} else {
ALLCH14 = true;
}
}
}

protected final void initALLCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH15 = false;
} else {
ALLCH15 = true;
}
}
}

protected final void initALLCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH16 = false;
} else {
ALLCH16 = true;
}
}
}

protected final void initAREA(String s) {
if (!s.trim().isEmpty()) {
AREA = Byte.parseByte(s);
} else {
AREA = Byte.MIN_VALUE;
}
}

protected final void initBASNSA(String s) {
if (!s.trim().isEmpty()) {
BASNSA = Double.parseDouble(s);
} else {
BASNSA = Double.NaN;
}
}

protected final void initBASRATE(String s) {
if (!s.trim().isEmpty()) {
BASRATE = Double.parseDouble(s);
} else {
BASRATE = Double.NaN;
}
}

protected final void initBASREST(String s) {
if (!s.trim().isEmpty()) {
BASREST = Byte.parseByte(s);
} else {
BASREST = Byte.MIN_VALUE;
}
}

protected final void initBENCB(String s) {
if (!s.trim().isEmpty()) {
BENCB = Byte.parseByte(s);
} else {
BENCB = Byte.MIN_VALUE;
}
}

protected final void initBENCTC(String s) {
if (!s.trim().isEmpty()) {
BENCTC = Byte.parseByte(s);
} else {
BENCTC = Byte.MIN_VALUE;
}
}

protected final void initBENDIS1(String s) {
if (!s.trim().isEmpty()) {
BENDIS1 = Byte.parseByte(s);
} else {
BENDIS1 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS10(String s) {
if (!s.trim().isEmpty()) {
BENDIS10 = Byte.parseByte(s);
} else {
BENDIS10 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS11(String s) {
if (!s.trim().isEmpty()) {
BENDIS11 = Byte.parseByte(s);
} else {
BENDIS11 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS12(String s) {
if (!s.trim().isEmpty()) {
BENDIS12 = Byte.parseByte(s);
} else {
BENDIS12 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS13(String s) {
if (!s.trim().isEmpty()) {
BENDIS13 = Byte.parseByte(s);
} else {
BENDIS13 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS14(String s) {
if (!s.trim().isEmpty()) {
BENDIS14 = Byte.parseByte(s);
} else {
BENDIS14 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS15(String s) {
if (!s.trim().isEmpty()) {
BENDIS15 = Byte.parseByte(s);
} else {
BENDIS15 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS16(String s) {
if (!s.trim().isEmpty()) {
BENDIS16 = Byte.parseByte(s);
} else {
BENDIS16 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS2(String s) {
if (!s.trim().isEmpty()) {
BENDIS2 = Byte.parseByte(s);
} else {
BENDIS2 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS3(String s) {
if (!s.trim().isEmpty()) {
BENDIS3 = Byte.parseByte(s);
} else {
BENDIS3 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS4(String s) {
if (!s.trim().isEmpty()) {
BENDIS4 = Byte.parseByte(s);
} else {
BENDIS4 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS5(String s) {
if (!s.trim().isEmpty()) {
BENDIS5 = Byte.parseByte(s);
} else {
BENDIS5 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS6(String s) {
if (!s.trim().isEmpty()) {
BENDIS6 = Byte.parseByte(s);
} else {
BENDIS6 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS7(String s) {
if (!s.trim().isEmpty()) {
BENDIS7 = Byte.parseByte(s);
} else {
BENDIS7 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS8(String s) {
if (!s.trim().isEmpty()) {
BENDIS8 = Byte.parseByte(s);
} else {
BENDIS8 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS9(String s) {
if (!s.trim().isEmpty()) {
BENDIS9 = Byte.parseByte(s);
} else {
BENDIS9 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS96(String s) {
if (!s.trim().isEmpty()) {
BENDIS96 = Byte.parseByte(s);
} else {
BENDIS96 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS97(String s) {
if (!s.trim().isEmpty()) {
BENDIS97 = Byte.parseByte(s);
} else {
BENDIS97 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM1(String s) {
if (!s.trim().isEmpty()) {
BENFAM1 = Byte.parseByte(s);
} else {
BENFAM1 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM10(String s) {
if (!s.trim().isEmpty()) {
BENFAM10 = Byte.parseByte(s);
} else {
BENFAM10 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM2(String s) {
if (!s.trim().isEmpty()) {
BENFAM2 = Byte.parseByte(s);
} else {
BENFAM2 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM3(String s) {
if (!s.trim().isEmpty()) {
BENFAM3 = Byte.parseByte(s);
} else {
BENFAM3 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM4(String s) {
if (!s.trim().isEmpty()) {
BENFAM4 = Byte.parseByte(s);
} else {
BENFAM4 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM5(String s) {
if (!s.trim().isEmpty()) {
BENFAM5 = Byte.parseByte(s);
} else {
BENFAM5 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM6(String s) {
if (!s.trim().isEmpty()) {
BENFAM6 = Byte.parseByte(s);
} else {
BENFAM6 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM7(String s) {
if (!s.trim().isEmpty()) {
BENFAM7 = Byte.parseByte(s);
} else {
BENFAM7 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM8(String s) {
if (!s.trim().isEmpty()) {
BENFAM8 = Byte.parseByte(s);
} else {
BENFAM8 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM9(String s) {
if (!s.trim().isEmpty()) {
BENFAM9 = Byte.parseByte(s);
} else {
BENFAM9 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM96(String s) {
if (!s.trim().isEmpty()) {
BENFAM96 = Byte.parseByte(s);
} else {
BENFAM96 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU1(String s) {
if (!s.trim().isEmpty()) {
BENHOU1 = Byte.parseByte(s);
} else {
BENHOU1 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU2(String s) {
if (!s.trim().isEmpty()) {
BENHOU2 = Byte.parseByte(s);
} else {
BENHOU2 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU3(String s) {
if (!s.trim().isEmpty()) {
BENHOU3 = Byte.parseByte(s);
} else {
BENHOU3 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU4(String s) {
if (!s.trim().isEmpty()) {
BENHOU4 = Byte.parseByte(s);
} else {
BENHOU4 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU5(String s) {
if (!s.trim().isEmpty()) {
BENHOU5 = Byte.parseByte(s);
} else {
BENHOU5 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU6(String s) {
if (!s.trim().isEmpty()) {
BENHOU6 = Byte.parseByte(s);
} else {
BENHOU6 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU7(String s) {
if (!s.trim().isEmpty()) {
BENHOU7 = Byte.parseByte(s);
} else {
BENHOU7 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU8(String s) {
if (!s.trim().isEmpty()) {
BENHOU8 = Byte.parseByte(s);
} else {
BENHOU8 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU9(String s) {
if (!s.trim().isEmpty()) {
BENHOU9 = Byte.parseByte(s);
} else {
BENHOU9 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU96(String s) {
if (!s.trim().isEmpty()) {
BENHOU96 = Byte.parseByte(s);
} else {
BENHOU96 = Byte.MIN_VALUE;
}
}

protected final void initBENLINK(String s) {
if (!s.trim().isEmpty()) {
BENLINK = Byte.parseByte(s);
} else {
BENLINK = Byte.MIN_VALUE;
}
}

protected final void initBENPEN1(String s) {
if (!s.trim().isEmpty()) {
BENPEN1 = Byte.parseByte(s);
} else {
BENPEN1 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN10(String s) {
if (!s.trim().isEmpty()) {
BENPEN10 = Byte.parseByte(s);
} else {
BENPEN10 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN11(String s) {
if (!s.trim().isEmpty()) {
BENPEN11 = Byte.parseByte(s);
} else {
BENPEN11 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN12(String s) {
if (!s.trim().isEmpty()) {
BENPEN12 = Byte.parseByte(s);
} else {
BENPEN12 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN13(String s) {
if (!s.trim().isEmpty()) {
BENPEN13 = Byte.parseByte(s);
} else {
BENPEN13 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN2(String s) {
if (!s.trim().isEmpty()) {
BENPEN2 = Byte.parseByte(s);
} else {
BENPEN2 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN3(String s) {
if (!s.trim().isEmpty()) {
BENPEN3 = Byte.parseByte(s);
} else {
BENPEN3 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN4(String s) {
if (!s.trim().isEmpty()) {
BENPEN4 = Byte.parseByte(s);
} else {
BENPEN4 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN5(String s) {
if (!s.trim().isEmpty()) {
BENPEN5 = Byte.parseByte(s);
} else {
BENPEN5 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN6(String s) {
if (!s.trim().isEmpty()) {
BENPEN6 = Byte.parseByte(s);
} else {
BENPEN6 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN7(String s) {
if (!s.trim().isEmpty()) {
BENPEN7 = Byte.parseByte(s);
} else {
BENPEN7 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN8(String s) {
if (!s.trim().isEmpty()) {
BENPEN8 = Byte.parseByte(s);
} else {
BENPEN8 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN9(String s) {
if (!s.trim().isEmpty()) {
BENPEN9 = Byte.parseByte(s);
} else {
BENPEN9 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN96(String s) {
if (!s.trim().isEmpty()) {
BENPEN96 = Byte.parseByte(s);
} else {
BENPEN96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA1(String s) {
if (!s.trim().isEmpty()) {
BENSTA1 = Byte.parseByte(s);
} else {
BENSTA1 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA10(String s) {
if (!s.trim().isEmpty()) {
BENSTA10 = Byte.parseByte(s);
} else {
BENSTA10 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA11(String s) {
if (!s.trim().isEmpty()) {
BENSTA11 = Byte.parseByte(s);
} else {
BENSTA11 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA12(String s) {
if (!s.trim().isEmpty()) {
BENSTA12 = Byte.parseByte(s);
} else {
BENSTA12 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA13(String s) {
if (!s.trim().isEmpty()) {
BENSTA13 = Byte.parseByte(s);
} else {
BENSTA13 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA2(String s) {
if (!s.trim().isEmpty()) {
BENSTA2 = Byte.parseByte(s);
} else {
BENSTA2 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA3(String s) {
if (!s.trim().isEmpty()) {
BENSTA3 = Byte.parseByte(s);
} else {
BENSTA3 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA4(String s) {
if (!s.trim().isEmpty()) {
BENSTA4 = Byte.parseByte(s);
} else {
BENSTA4 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA5(String s) {
if (!s.trim().isEmpty()) {
BENSTA5 = Byte.parseByte(s);
} else {
BENSTA5 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA6(String s) {
if (!s.trim().isEmpty()) {
BENSTA6 = Byte.parseByte(s);
} else {
BENSTA6 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA7(String s) {
if (!s.trim().isEmpty()) {
BENSTA7 = Byte.parseByte(s);
} else {
BENSTA7 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA9(String s) {
if (!s.trim().isEmpty()) {
BENSTA9 = Byte.parseByte(s);
} else {
BENSTA9 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA96(String s) {
if (!s.trim().isEmpty()) {
BENSTA96 = Byte.parseByte(s);
} else {
BENSTA96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA97(String s) {
if (!s.trim().isEmpty()) {
BENSTA97 = Byte.parseByte(s);
} else {
BENSTA97 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX1(String s) {
if (!s.trim().isEmpty()) {
BENTAX1 = Byte.parseByte(s);
} else {
BENTAX1 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX10(String s) {
if (!s.trim().isEmpty()) {
BENTAX10 = Byte.parseByte(s);
} else {
BENTAX10 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX2(String s) {
if (!s.trim().isEmpty()) {
BENTAX2 = Byte.parseByte(s);
} else {
BENTAX2 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX3(String s) {
if (!s.trim().isEmpty()) {
BENTAX3 = Byte.parseByte(s);
} else {
BENTAX3 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX4(String s) {
if (!s.trim().isEmpty()) {
BENTAX4 = Byte.parseByte(s);
} else {
BENTAX4 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX5(String s) {
if (!s.trim().isEmpty()) {
BENTAX5 = Byte.parseByte(s);
} else {
BENTAX5 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX6(String s) {
if (!s.trim().isEmpty()) {
BENTAX6 = Byte.parseByte(s);
} else {
BENTAX6 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX7(String s) {
if (!s.trim().isEmpty()) {
BENTAX7 = Byte.parseByte(s);
} else {
BENTAX7 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX8(String s) {
if (!s.trim().isEmpty()) {
BENTAX8 = Byte.parseByte(s);
} else {
BENTAX8 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX9(String s) {
if (!s.trim().isEmpty()) {
BENTAX9 = Byte.parseByte(s);
} else {
BENTAX9 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX96(String s) {
if (!s.trim().isEmpty()) {
BENTAX96 = Byte.parseByte(s);
} else {
BENTAX96 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP1(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP1 = Byte.parseByte(s);
} else {
BENUNEMP1 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP2(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP2 = Byte.parseByte(s);
} else {
BENUNEMP2 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP3(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP3 = Byte.parseByte(s);
} else {
BENUNEMP3 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP4(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP4 = Byte.parseByte(s);
} else {
BENUNEMP4 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP5(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP5 = Byte.parseByte(s);
} else {
BENUNEMP5 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP6(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP6 = Byte.parseByte(s);
} else {
BENUNEMP6 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP7(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP7 = Byte.parseByte(s);
} else {
BENUNEMP7 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP96(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP96 = Byte.parseByte(s);
} else {
BENUNEMP96 = Byte.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBRLOOP(String s) {
if (!s.trim().isEmpty()) {
BRLOOP = Byte.parseByte(s);
} else {
BRLOOP = Byte.MIN_VALUE;
}
}

protected final void initBTYPE1(String s) {
if (!s.trim().isEmpty()) {
BTYPE1 = Byte.parseByte(s);
} else {
BTYPE1 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE10(String s) {
if (!s.trim().isEmpty()) {
BTYPE10 = Byte.parseByte(s);
} else {
BTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE11(String s) {
if (!s.trim().isEmpty()) {
BTYPE11 = Byte.parseByte(s);
} else {
BTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE12(String s) {
if (!s.trim().isEmpty()) {
BTYPE12 = Byte.parseByte(s);
} else {
BTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE13(String s) {
if (!s.trim().isEmpty()) {
BTYPE13 = Byte.parseByte(s);
} else {
BTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE14(String s) {
if (!s.trim().isEmpty()) {
BTYPE14 = Byte.parseByte(s);
} else {
BTYPE14 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE2(String s) {
if (!s.trim().isEmpty()) {
BTYPE2 = Byte.parseByte(s);
} else {
BTYPE2 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE3(String s) {
if (!s.trim().isEmpty()) {
BTYPE3 = Byte.parseByte(s);
} else {
BTYPE3 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE4(String s) {
if (!s.trim().isEmpty()) {
BTYPE4 = Byte.parseByte(s);
} else {
BTYPE4 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE5(String s) {
if (!s.trim().isEmpty()) {
BTYPE5 = Byte.parseByte(s);
} else {
BTYPE5 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE6(String s) {
if (!s.trim().isEmpty()) {
BTYPE6 = Byte.parseByte(s);
} else {
BTYPE6 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE7(String s) {
if (!s.trim().isEmpty()) {
BTYPE7 = Byte.parseByte(s);
} else {
BTYPE7 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE8(String s) {
if (!s.trim().isEmpty()) {
BTYPE8 = Byte.parseByte(s);
} else {
BTYPE8 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE9(String s) {
if (!s.trim().isEmpty()) {
BTYPE9 = Byte.parseByte(s);
} else {
BTYPE9 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE96(String s) {
if (!s.trim().isEmpty()) {
BTYPE96 = Byte.parseByte(s);
} else {
BTYPE96 = Byte.MIN_VALUE;
}
}

protected final void initBUNO_DV(String s) {
if (!s.trim().isEmpty()) {
BUNO_DV = Byte.parseByte(s);
} else {
BUNO_DV = Byte.MIN_VALUE;
}
}

protected final void initCARBUY1(String s) {
if (!s.trim().isEmpty()) {
CARBUY1 = Byte.parseByte(s);
} else {
CARBUY1 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY10(String s) {
if (!s.trim().isEmpty()) {
CARBUY10 = Byte.parseByte(s);
} else {
CARBUY10 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY11(String s) {
if (!s.trim().isEmpty()) {
CARBUY11 = Byte.parseByte(s);
} else {
CARBUY11 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY12(String s) {
if (!s.trim().isEmpty()) {
CARBUY12 = Byte.parseByte(s);
} else {
CARBUY12 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY2(String s) {
if (!s.trim().isEmpty()) {
CARBUY2 = Byte.parseByte(s);
} else {
CARBUY2 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY3(String s) {
if (!s.trim().isEmpty()) {
CARBUY3 = Byte.parseByte(s);
} else {
CARBUY3 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY4(String s) {
if (!s.trim().isEmpty()) {
CARBUY4 = Byte.parseByte(s);
} else {
CARBUY4 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY5(String s) {
if (!s.trim().isEmpty()) {
CARBUY5 = Byte.parseByte(s);
} else {
CARBUY5 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY6(String s) {
if (!s.trim().isEmpty()) {
CARBUY6 = Byte.parseByte(s);
} else {
CARBUY6 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY7(String s) {
if (!s.trim().isEmpty()) {
CARBUY7 = Byte.parseByte(s);
} else {
CARBUY7 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY8(String s) {
if (!s.trim().isEmpty()) {
CARBUY8 = Byte.parseByte(s);
} else {
CARBUY8 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY9(String s) {
if (!s.trim().isEmpty()) {
CARBUY9 = Byte.parseByte(s);
} else {
CARBUY9 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY97(String s) {
if (!s.trim().isEmpty()) {
CARBUY97 = Byte.parseByte(s);
} else {
CARBUY97 = Byte.MIN_VALUE;
}
}

protected final void initCARMILES(String s) {
if (!s.trim().isEmpty()) {
CARMILES = Integer.parseInt(s);
} else {
CARMILES = Integer.MIN_VALUE;
}
}

protected final void initCARSRV1(String s) {
if (!s.trim().isEmpty()) {
CARSRV1 = Byte.parseByte(s);
} else {
CARSRV1 = Byte.MIN_VALUE;
}
}

protected final void initCARSRV2(String s) {
if (!s.trim().isEmpty()) {
CARSRV2 = Byte.parseByte(s);
} else {
CARSRV2 = Byte.MIN_VALUE;
}
}

protected final void initCARSRV3(String s) {
if (!s.trim().isEmpty()) {
CARSRV3 = Byte.parseByte(s);
} else {
CARSRV3 = Byte.MIN_VALUE;
}
}

protected final void initCASIEND(String s) {
if (!s.trim().isEmpty()) {
CASIEND = Byte.parseByte(s);
} else {
CASIEND = Byte.MIN_VALUE;
}
}

protected final void initCCAMTJT(String s) {
if (!s.trim().isEmpty()) {
CCAMTJT = Integer.parseInt(s);
} else {
CCAMTJT = Integer.MIN_VALUE;
}
}

protected final void initCCAMTSOLE(String s) {
if (!s.trim().isEmpty()) {
CCAMTSOLE = Integer.parseInt(s);
} else {
CCAMTSOLE = Integer.MIN_VALUE;
}
}

protected final void initCCARE(String s) {
if (!s.trim().isEmpty()) {
CCARE = Byte.parseByte(s);
} else {
CCARE = Byte.MIN_VALUE;
}
}

protected final void initCCBILLJT(String s) {
if (!s.trim().isEmpty()) {
CCBILLJT = Byte.parseByte(s);
} else {
CCBILLJT = Byte.MIN_VALUE;
}
}

protected final void initCCBILLSOLE(String s) {
if (!s.trim().isEmpty()) {
CCBILLSOLE = Byte.parseByte(s);
} else {
CCBILLSOLE = Byte.MIN_VALUE;
}
}

protected final void initCCJT(String s) {
if (!s.trim().isEmpty()) {
CCJT = Byte.parseByte(s);
} else {
CCJT = Byte.MIN_VALUE;
}
}

protected final void initCCJTP0(String s) {
if (!s.trim().isEmpty()) {
CCJTP0 = Byte.parseByte(s);
} else {
CCJTP0 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP1(String s) {
if (!s.trim().isEmpty()) {
CCJTP1 = Byte.parseByte(s);
} else {
CCJTP1 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP10(String s) {
if (!s.trim().isEmpty()) {
CCJTP10 = Byte.parseByte(s);
} else {
CCJTP10 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP11(String s) {
if (!s.trim().isEmpty()) {
CCJTP11 = Byte.parseByte(s);
} else {
CCJTP11 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP12(String s) {
if (!s.trim().isEmpty()) {
CCJTP12 = Byte.parseByte(s);
} else {
CCJTP12 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP13(String s) {
if (!s.trim().isEmpty()) {
CCJTP13 = Byte.parseByte(s);
} else {
CCJTP13 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP14(String s) {
if (!s.trim().isEmpty()) {
CCJTP14 = Byte.parseByte(s);
} else {
CCJTP14 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP15(String s) {
if (!s.trim().isEmpty()) {
CCJTP15 = Byte.parseByte(s);
} else {
CCJTP15 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP16(String s) {
if (!s.trim().isEmpty()) {
CCJTP16 = Byte.parseByte(s);
} else {
CCJTP16 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP2(String s) {
if (!s.trim().isEmpty()) {
CCJTP2 = Byte.parseByte(s);
} else {
CCJTP2 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP3(String s) {
if (!s.trim().isEmpty()) {
CCJTP3 = Byte.parseByte(s);
} else {
CCJTP3 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP4(String s) {
if (!s.trim().isEmpty()) {
CCJTP4 = Byte.parseByte(s);
} else {
CCJTP4 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP5(String s) {
if (!s.trim().isEmpty()) {
CCJTP5 = Byte.parseByte(s);
} else {
CCJTP5 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP6(String s) {
if (!s.trim().isEmpty()) {
CCJTP6 = Byte.parseByte(s);
} else {
CCJTP6 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP7(String s) {
if (!s.trim().isEmpty()) {
CCJTP7 = Byte.parseByte(s);
} else {
CCJTP7 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP8(String s) {
if (!s.trim().isEmpty()) {
CCJTP8 = Byte.parseByte(s);
} else {
CCJTP8 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP9(String s) {
if (!s.trim().isEmpty()) {
CCJTP9 = Byte.parseByte(s);
} else {
CCJTP9 = Byte.MIN_VALUE;
}
}

protected final void initCCSOLE(String s) {
if (!s.trim().isEmpty()) {
CCSOLE = Byte.parseByte(s);
} else {
CCSOLE = Byte.MIN_VALUE;
}
}

protected final void initCCWORK(String s) {
if (!s.trim().isEmpty()) {
CCWORK = Byte.parseByte(s);
} else {
CCWORK = Byte.MIN_VALUE;
}
}

protected final void initCH1BY4(String s) {
if (!s.trim().isEmpty()) {
CH1BY4 = Short.parseShort(s);
} else {
CH1BY4 = Short.MIN_VALUE;
}
}

protected final void initCHARAM(String s) {
if (!s.trim().isEmpty()) {
CHARAM = Short.parseShort(s);
} else {
CHARAM = Short.MIN_VALUE;
}
}

protected final void initCHARFREQ(String s) {
if (!s.trim().isEmpty()) {
CHARFREQ = Byte.parseByte(s);
} else {
CHARFREQ = Byte.MIN_VALUE;
}
}

protected final void initCHARGV(String s) {
if (!s.trim().isEmpty()) {
CHARGV = Byte.parseByte(s);
} else {
CHARGV = Byte.MIN_VALUE;
}
}

protected final void initCHBRFED01(String s) {
if (!s.trim().isEmpty()) {
CHBRFED01 = Byte.parseByte(s);
} else {
CHBRFED01 = Byte.MIN_VALUE;
}
}

protected final void initCHBRFED02(String s) {
if (!s.trim().isEmpty()) {
CHBRFED02 = Byte.parseByte(s);
} else {
CHBRFED02 = Byte.MIN_VALUE;
}
}

protected final void initCHBRFED03(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED03 = false;
} else {
CHBRFED03 = true;
}
}
}

protected final void initCHBRFED04(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED04 = false;
} else {
CHBRFED04 = true;
}
}
}

protected final void initCHBRFED05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED05 = false;
} else {
CHBRFED05 = true;
}
}
}

protected final void initCHBRFED06(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED06 = false;
} else {
CHBRFED06 = true;
}
}
}

protected final void initCHBRFED07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED07 = false;
} else {
CHBRFED07 = true;
}
}
}

protected final void initCHBRFED08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED08 = false;
} else {
CHBRFED08 = true;
}
}
}

protected final void initCHBRFED09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED09 = false;
} else {
CHBRFED09 = true;
}
}
}

protected final void initCHBRFED10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED10 = false;
} else {
CHBRFED10 = true;
}
}
}

protected final void initCHBRFED11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED11 = false;
} else {
CHBRFED11 = true;
}
}
}

protected final void initCHBRFED12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED12 = false;
} else {
CHBRFED12 = true;
}
}
}

protected final void initCHBRFED13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED13 = false;
} else {
CHBRFED13 = true;
}
}
}

protected final void initCHBRFED14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED14 = false;
} else {
CHBRFED14 = true;
}
}
}

protected final void initCHBRFED15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED15 = false;
} else {
CHBRFED15 = true;
}
}
}

protected final void initCHBRFED16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
CHBRFED16 = false;
} else {
CHBRFED16 = true;
}
}
}

protected final void initCHILDPNO(String s) {
if (!s.trim().isEmpty()) {
CHILDPNO = Byte.parseByte(s);
} else {
CHILDPNO = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP(String s) {
if (!s.trim().isEmpty()) {
CHKRESP = Byte.parseByte(s);
} else {
CHKRESP = Byte.MIN_VALUE;
}
}

protected final void initCINDTIME(String s) {
if (!s.trim().isEmpty()) {
CINDTIME = Integer.parseInt(s);
} else {
CINDTIME = Integer.MIN_VALUE;
}
}

protected final void initCITZN1(String s) {
if (!s.trim().isEmpty()) {
CITZN1 = Byte.parseByte(s);
} else {
CITZN1 = Byte.MIN_VALUE;
}
}

protected final void initCITZN2(String s) {
if (!s.trim().isEmpty()) {
CITZN2 = Byte.parseByte(s);
} else {
CITZN2 = Byte.MIN_VALUE;
}
}

protected final void initCITZN3(String s) {
if (!s.trim().isEmpty()) {
CITZN3 = Byte.parseByte(s);
} else {
CITZN3 = Byte.MIN_VALUE;
}
}

protected final void initCJBATT(String s) {
if (!s.trim().isEmpty()) {
CJBATT = Byte.parseByte(s);
} else {
CJBATT = Byte.MIN_VALUE;
}
}

protected final void initCJOB(String s) {
if (!s.trim().isEmpty()) {
CJOB = Byte.parseByte(s);
} else {
CJOB = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT1(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT1 = Byte.parseByte(s);
} else {
CMLSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT2(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT2 = Byte.parseByte(s);
} else {
CMLSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT3(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT3 = Byte.parseByte(s);
} else {
CMLSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCOH1BM(String s) {
if (!s.trim().isEmpty()) {
COH1BM = Byte.parseByte(s);
} else {
COH1BM = Byte.MIN_VALUE;
}
}

protected final void initCOH1BY(String s) {
if (!s.trim().isEmpty()) {
COH1BY = Short.parseShort(s);
} else {
COH1BY = Short.MIN_VALUE;
}
}

protected final void initCOH1EM(String s) {
if (!s.trim().isEmpty()) {
COH1EM = Byte.parseByte(s);
} else {
COH1EM = Byte.MIN_VALUE;
}
}

protected final void initCOH1EY(String s) {
if (!s.trim().isEmpty()) {
COH1EY = Short.parseShort(s);
} else {
COH1EY = Short.MIN_VALUE;
}
}

protected final void initCOH1MR(String s) {
if (!s.trim().isEmpty()) {
COH1MR = Byte.parseByte(s);
} else {
COH1MR = Byte.MIN_VALUE;
}
}

protected final void initCOHAB(String s) {
if (!s.trim().isEmpty()) {
COHAB = Byte.parseByte(s);
} else {
COHAB = Byte.MIN_VALUE;
}
}

protected final void initCOHABN(String s) {
if (!s.trim().isEmpty()) {
COHABN = Byte.parseByte(s);
} else {
COHABN = Byte.MIN_VALUE;
}
}

protected final void initCOHAB_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
COHAB_DV = false;
} else {
COHAB_DV = true;
}
}
}

protected final void initCONTFT(String s) {
if (!s.trim().isEmpty()) {
CONTFT = Byte.parseByte(s);
} else {
CONTFT = Byte.MIN_VALUE;
}
}

protected final void initCOUNTRY(String s) {
if (!s.trim().isEmpty()) {
COUNTRY = Byte.parseByte(s);
} else {
COUNTRY = Byte.MIN_VALUE;
}
}

protected final void initCREDAMT(String s) {
if (!s.trim().isEmpty()) {
CREDAMT = Integer.parseInt(s);
} else {
CREDAMT = Integer.MIN_VALUE;
}
}

protected final void initCREDITOR(String s) {
if (!s.trim().isEmpty()) {
CREDITOR = Byte.parseByte(s);
} else {
CREDITOR = Byte.MIN_VALUE;
}
}

protected final void initCREDJT(String s) {
if (!s.trim().isEmpty()) {
CREDJT = Integer.parseInt(s);
} else {
CREDJT = Integer.MIN_VALUE;
}
}

protected final void initCREDSOLE(String s) {
if (!s.trim().isEmpty()) {
CREDSOLE = Integer.parseInt(s);
} else {
CREDSOLE = Integer.MIN_VALUE;
}
}

protected final void initCSTAT(String s) {
if (!s.trim().isEmpty()) {
CSTAT = Byte.parseByte(s);
} else {
CSTAT = Byte.MIN_VALUE;
}
}

protected final void initCTADD1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD1_CODE = Byte.parseByte(s);
} else {
CTADD1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTADD2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD2_CODE = Byte.parseByte(s);
} else {
CTADD2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCNTY_CODE(String s) {
if (!s.trim().isEmpty()) {
CTCNTY_CODE = Byte.parseByte(s);
} else {
CTCNTY_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCONS(String s) {
if (!s.trim().isEmpty()) {
CTCONS = Byte.parseByte(s);
} else {
CTCONS = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF1(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF1 = Byte.parseByte(s);
} else {
CTCONSCONF1 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF2(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF2 = Byte.parseByte(s);
} else {
CTCONSCONF2 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF3(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF3 = Byte.parseByte(s);
} else {
CTCONSCONF3 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF4(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF4 = Byte.parseByte(s);
} else {
CTCONSCONF4 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF5(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF5 = Byte.parseByte(s);
} else {
CTCONSCONF5 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF6(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF6 = Byte.parseByte(s);
} else {
CTCONSCONF6 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF7(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF7 = Byte.parseByte(s);
} else {
CTCONSCONF7 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF8(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF8 = Byte.parseByte(s);
} else {
CTCONSCONF8 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF94(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF94 = Byte.parseByte(s);
} else {
CTCONSCONF94 = Byte.MIN_VALUE;
}
}

protected final void initCTEMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
CTEMAIL_CODE = Byte.parseByte(s);
} else {
CTEMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTPCODE_CODE(String s) {
if (!s.trim().isEmpty()) {
CTPCODE_CODE = Byte.parseByte(s);
} else {
CTPCODE_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTREL(String s) {
if (!s.trim().isEmpty()) {
CTREL = Byte.parseByte(s);
} else {
CTREL = Byte.MIN_VALUE;
}
}

protected final void initCTTEL1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL1_CODE = Byte.parseByte(s);
} else {
CTTEL1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTEL2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL2_CODE = Byte.parseByte(s);
} else {
CTTEL2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTOWN_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTOWN_CODE = Byte.parseByte(s);
} else {
CTTOWN_CODE = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB1(String s) {
if (!s.trim().isEmpty()) {
CURRJOB1 = Byte.parseByte(s);
} else {
CURRJOB1 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB2(String s) {
if (!s.trim().isEmpty()) {
CURRJOB2 = Byte.parseByte(s);
} else {
CURRJOB2 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB3(String s) {
if (!s.trim().isEmpty()) {
CURRJOB3 = Byte.parseByte(s);
} else {
CURRJOB3 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB4(String s) {
if (!s.trim().isEmpty()) {
CURRJOB4 = Byte.parseByte(s);
} else {
CURRJOB4 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB5(String s) {
if (!s.trim().isEmpty()) {
CURRJOB5 = Byte.parseByte(s);
} else {
CURRJOB5 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB6(String s) {
if (!s.trim().isEmpty()) {
CURRJOB6 = Byte.parseByte(s);
} else {
CURRJOB6 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART1(String s) {
if (!s.trim().isEmpty()) {
CURRPART1 = Byte.parseByte(s);
} else {
CURRPART1 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART2(String s) {
if (!s.trim().isEmpty()) {
CURRPART2 = Byte.parseByte(s);
} else {
CURRPART2 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT1(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT1 = Byte.parseByte(s);
} else {
CURRSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT2(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT2 = Byte.parseByte(s);
} else {
CURRSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT3(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT3 = Byte.parseByte(s);
} else {
CURRSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT4(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT4 = Byte.parseByte(s);
} else {
CURRSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT5(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT5 = Byte.parseByte(s);
} else {
CURRSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT6(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT6 = Byte.parseByte(s);
} else {
CURRSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initCURRYNOT1(String s) {
if (!s.trim().isEmpty()) {
CURRYNOT1 = Byte.parseByte(s);
} else {
CURRYNOT1 = Byte.MIN_VALUE;
}
}

protected final void initCURRYNOT2(String s) {
if (!s.trim().isEmpty()) {
CURRYNOT2 = Byte.parseByte(s);
} else {
CURRYNOT2 = Byte.MIN_VALUE;
}
}

protected final void initCURRYNOT3(String s) {
if (!s.trim().isEmpty()) {
CURRYNOT3 = Byte.parseByte(s);
} else {
CURRYNOT3 = Byte.MIN_VALUE;
}
}

protected final void initCURRYNOT4(String s) {
if (!s.trim().isEmpty()) {
CURRYNOT4 = Byte.parseByte(s);
} else {
CURRYNOT4 = Byte.MIN_VALUE;
}
}

protected final void initCURRYNOT5(String s) {
if (!s.trim().isEmpty()) {
CURRYNOT5 = Byte.parseByte(s);
} else {
CURRYNOT5 = Byte.MIN_VALUE;
}
}

protected final void initCURRYNOT6(String s) {
if (!s.trim().isEmpty()) {
CURRYNOT6 = Byte.parseByte(s);
} else {
CURRYNOT6 = Byte.MIN_VALUE;
}
}

protected final void initCURRYNOT7(String s) {
if (!s.trim().isEmpty()) {
CURRYNOT7 = Byte.parseByte(s);
} else {
CURRYNOT7 = Byte.MIN_VALUE;
}
}

protected final void initCURRYNOT8(String s) {
if (!s.trim().isEmpty()) {
CURRYNOT8 = Byte.parseByte(s);
} else {
CURRYNOT8 = Byte.MIN_VALUE;
}
}

protected final void initCURRYNOT96(String s) {
if (!s.trim().isEmpty()) {
CURRYNOT96 = Byte.parseByte(s);
} else {
CURRYNOT96 = Byte.MIN_VALUE;
}
}

protected final void initCURRYNOT97(String s) {
if (!s.trim().isEmpty()) {
CURRYNOT97 = Byte.parseByte(s);
} else {
CURRYNOT97 = Byte.MIN_VALUE;
}
}

protected final void initDEBT1(String s) {
if (!s.trim().isEmpty()) {
DEBT1 = Byte.parseByte(s);
} else {
DEBT1 = Byte.MIN_VALUE;
}
}

protected final void initDEBT2(String s) {
if (!s.trim().isEmpty()) {
DEBT2 = Byte.parseByte(s);
} else {
DEBT2 = Byte.MIN_VALUE;
}
}

protected final void initDEBT4(String s) {
if (!s.trim().isEmpty()) {
DEBT4 = Byte.parseByte(s);
} else {
DEBT4 = Byte.MIN_VALUE;
}
}

protected final void initDEBT5(String s) {
if (!s.trim().isEmpty()) {
DEBT5 = Byte.parseByte(s);
} else {
DEBT5 = Byte.MIN_VALUE;
}
}

protected final void initDEBT6(String s) {
if (!s.trim().isEmpty()) {
DEBT6 = Byte.parseByte(s);
} else {
DEBT6 = Byte.MIN_VALUE;
}
}

protected final void initDEBT7(String s) {
if (!s.trim().isEmpty()) {
DEBT7 = Byte.parseByte(s);
} else {
DEBT7 = Byte.MIN_VALUE;
}
}

protected final void initDEBT8(String s) {
if (!s.trim().isEmpty()) {
DEBT8 = Byte.parseByte(s);
} else {
DEBT8 = Byte.MIN_VALUE;
}
}

protected final void initDEBT96(String s) {
if (!s.trim().isEmpty()) {
DEBT96 = Byte.parseByte(s);
} else {
DEBT96 = Byte.MIN_VALUE;
}
}

protected final void initDEBT97(String s) {
if (!s.trim().isEmpty()) {
DEBT97 = Byte.parseByte(s);
} else {
DEBT97 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC1(String s) {
if (!s.trim().isEmpty()) {
DEBTC1 = Byte.parseByte(s);
} else {
DEBTC1 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC2(String s) {
if (!s.trim().isEmpty()) {
DEBTC2 = Byte.parseByte(s);
} else {
DEBTC2 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC3(String s) {
if (!s.trim().isEmpty()) {
DEBTC3 = Byte.parseByte(s);
} else {
DEBTC3 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC4(String s) {
if (!s.trim().isEmpty()) {
DEBTC4 = Byte.parseByte(s);
} else {
DEBTC4 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC5(String s) {
if (!s.trim().isEmpty()) {
DEBTC5 = Byte.parseByte(s);
} else {
DEBTC5 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO1(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO1 = Byte.parseByte(s);
} else {
DEBTINFO1 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO10(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO10 = Byte.parseByte(s);
} else {
DEBTINFO10 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO11(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO11 = Byte.parseByte(s);
} else {
DEBTINFO11 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO2(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO2 = Byte.parseByte(s);
} else {
DEBTINFO2 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO3(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO3 = Byte.parseByte(s);
} else {
DEBTINFO3 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO4(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO4 = Byte.parseByte(s);
} else {
DEBTINFO4 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO5(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO5 = Byte.parseByte(s);
} else {
DEBTINFO5 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO6(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO6 = Byte.parseByte(s);
} else {
DEBTINFO6 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO7(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO7 = Byte.parseByte(s);
} else {
DEBTINFO7 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO8(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO8 = Byte.parseByte(s);
} else {
DEBTINFO8 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO9(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO9 = Byte.parseByte(s);
} else {
DEBTINFO9 = Byte.MIN_VALUE;
}
}

protected final void initDEBTINFO97(String s) {
if (!s.trim().isEmpty()) {
DEBTINFO97 = Byte.parseByte(s);
} else {
DEBTINFO97 = Byte.MIN_VALUE;
}
}

protected final void initDEBTOTH1(String s) {
if (!s.trim().isEmpty()) {
DEBTOTH1 = Byte.parseByte(s);
} else {
DEBTOTH1 = Byte.MIN_VALUE;
}
}

protected final void initDEBTOTH2(String s) {
if (!s.trim().isEmpty()) {
DEBTOTH2 = Byte.parseByte(s);
} else {
DEBTOTH2 = Byte.MIN_VALUE;
}
}

protected final void initDEBTOTH3(String s) {
if (!s.trim().isEmpty()) {
DEBTOTH3 = Byte.parseByte(s);
} else {
DEBTOTH3 = Byte.MIN_VALUE;
}
}

protected final void initDEBTOTH4(String s) {
if (!s.trim().isEmpty()) {
DEBTOTH4 = Byte.parseByte(s);
} else {
DEBTOTH4 = Byte.MIN_VALUE;
}
}

protected final void initDEBTOTH96(String s) {
if (!s.trim().isEmpty()) {
DEBTOTH96 = Byte.parseByte(s);
} else {
DEBTOTH96 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN0(String s) {
if (!s.trim().isEmpty()) {
DEBTPN0 = Byte.parseByte(s);
} else {
DEBTPN0 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN1(String s) {
if (!s.trim().isEmpty()) {
DEBTPN1 = Byte.parseByte(s);
} else {
DEBTPN1 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN10(String s) {
if (!s.trim().isEmpty()) {
DEBTPN10 = Byte.parseByte(s);
} else {
DEBTPN10 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN11(String s) {
if (!s.trim().isEmpty()) {
DEBTPN11 = Byte.parseByte(s);
} else {
DEBTPN11 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN12(String s) {
if (!s.trim().isEmpty()) {
DEBTPN12 = Byte.parseByte(s);
} else {
DEBTPN12 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN13(String s) {
if (!s.trim().isEmpty()) {
DEBTPN13 = Byte.parseByte(s);
} else {
DEBTPN13 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN14(String s) {
if (!s.trim().isEmpty()) {
DEBTPN14 = Byte.parseByte(s);
} else {
DEBTPN14 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN15(String s) {
if (!s.trim().isEmpty()) {
DEBTPN15 = Byte.parseByte(s);
} else {
DEBTPN15 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN16(String s) {
if (!s.trim().isEmpty()) {
DEBTPN16 = Byte.parseByte(s);
} else {
DEBTPN16 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN2(String s) {
if (!s.trim().isEmpty()) {
DEBTPN2 = Byte.parseByte(s);
} else {
DEBTPN2 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN3(String s) {
if (!s.trim().isEmpty()) {
DEBTPN3 = Byte.parseByte(s);
} else {
DEBTPN3 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN4(String s) {
if (!s.trim().isEmpty()) {
DEBTPN4 = Byte.parseByte(s);
} else {
DEBTPN4 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN5(String s) {
if (!s.trim().isEmpty()) {
DEBTPN5 = Byte.parseByte(s);
} else {
DEBTPN5 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN6(String s) {
if (!s.trim().isEmpty()) {
DEBTPN6 = Byte.parseByte(s);
} else {
DEBTPN6 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN7(String s) {
if (!s.trim().isEmpty()) {
DEBTPN7 = Byte.parseByte(s);
} else {
DEBTPN7 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN8(String s) {
if (!s.trim().isEmpty()) {
DEBTPN8 = Byte.parseByte(s);
} else {
DEBTPN8 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN9(String s) {
if (!s.trim().isEmpty()) {
DEBTPN9 = Byte.parseByte(s);
} else {
DEBTPN9 = Byte.MIN_VALUE;
}
}

protected final void initDEBTSJ(String s) {
if (!s.trim().isEmpty()) {
DEBTSJ = Byte.parseByte(s);
} else {
DEBTSJ = Byte.MIN_VALUE;
}
}

protected final void initDEBTSK(String s) {
if (!s.trim().isEmpty()) {
DEBTSK = Integer.parseInt(s);
} else {
DEBTSK = Integer.MIN_VALUE;
}
}

protected final void initDEBTWHO1(String s) {
if (!s.trim().isEmpty()) {
DEBTWHO1 = Byte.parseByte(s);
} else {
DEBTWHO1 = Byte.MIN_VALUE;
}
}

protected final void initDEBTWHO2(String s) {
if (!s.trim().isEmpty()) {
DEBTWHO2 = Byte.parseByte(s);
} else {
DEBTWHO2 = Byte.MIN_VALUE;
}
}

protected final void initDEBTWHO3(String s) {
if (!s.trim().isEmpty()) {
DEBTWHO3 = Byte.parseByte(s);
} else {
DEBTWHO3 = Byte.MIN_VALUE;
}
}

protected final void initDEBTWHO4(String s) {
if (!s.trim().isEmpty()) {
DEBTWHO4 = Byte.parseByte(s);
} else {
DEBTWHO4 = Byte.MIN_VALUE;
}
}

protected final void initDEBTWHO97(String s) {
if (!s.trim().isEmpty()) {
DEBTWHO97 = Byte.parseByte(s);
} else {
DEBTWHO97 = Byte.MIN_VALUE;
}
}

protected final void initDEBTY(String s) {
if (!s.trim().isEmpty()) {
DEBTY = Integer.parseInt(s);
} else {
DEBTY = Integer.MIN_VALUE;
}
}

protected final void initDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DEPCHL_DV = false;
} else {
DEPCHL_DV = true;
}
}
}

protected final void initDEPENTH1(String s) {
if (!s.trim().isEmpty()) {
DEPENTH1 = Byte.parseByte(s);
} else {
DEPENTH1 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH2(String s) {
if (!s.trim().isEmpty()) {
DEPENTH2 = Byte.parseByte(s);
} else {
DEPENTH2 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH3(String s) {
if (!s.trim().isEmpty()) {
DEPENTH3 = Byte.parseByte(s);
} else {
DEPENTH3 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH4(String s) {
if (!s.trim().isEmpty()) {
DEPENTH4 = Byte.parseByte(s);
} else {
DEPENTH4 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH5(String s) {
if (!s.trim().isEmpty()) {
DEPENTH5 = Byte.parseByte(s);
} else {
DEPENTH5 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH6(String s) {
if (!s.trim().isEmpty()) {
DEPENTH6 = Byte.parseByte(s);
} else {
DEPENTH6 = Byte.MIN_VALUE;
}
}

protected final void initDETINC1(String s) {
if (!s.trim().isEmpty()) {
DETINC1 = Byte.parseByte(s);
} else {
DETINC1 = Byte.MIN_VALUE;
}
}

protected final void initDETINC2(String s) {
if (!s.trim().isEmpty()) {
DETINC2 = Byte.parseByte(s);
} else {
DETINC2 = Byte.MIN_VALUE;
}
}

protected final void initDETINC3(String s) {
if (!s.trim().isEmpty()) {
DETINC3 = Byte.parseByte(s);
} else {
DETINC3 = Byte.MIN_VALUE;
}
}

protected final void initDETINC4(String s) {
if (!s.trim().isEmpty()) {
DETINC4 = Byte.parseByte(s);
} else {
DETINC4 = Byte.MIN_VALUE;
}
}

protected final void initDETINC5(String s) {
if (!s.trim().isEmpty()) {
DETINC5 = Byte.parseByte(s);
} else {
DETINC5 = Byte.MIN_VALUE;
}
}

protected final void initDETINC6(String s) {
if (!s.trim().isEmpty()) {
DETINC6 = Byte.parseByte(s);
} else {
DETINC6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF1(String s) {
if (!s.trim().isEmpty()) {
DISDIF1 = Byte.parseByte(s);
} else {
DISDIF1 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF10(String s) {
if (!s.trim().isEmpty()) {
DISDIF10 = Byte.parseByte(s);
} else {
DISDIF10 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF11(String s) {
if (!s.trim().isEmpty()) {
DISDIF11 = Byte.parseByte(s);
} else {
DISDIF11 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF12(String s) {
if (!s.trim().isEmpty()) {
DISDIF12 = Byte.parseByte(s);
} else {
DISDIF12 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF2(String s) {
if (!s.trim().isEmpty()) {
DISDIF2 = Byte.parseByte(s);
} else {
DISDIF2 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF3(String s) {
if (!s.trim().isEmpty()) {
DISDIF3 = Byte.parseByte(s);
} else {
DISDIF3 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF4(String s) {
if (!s.trim().isEmpty()) {
DISDIF4 = Byte.parseByte(s);
} else {
DISDIF4 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF5(String s) {
if (!s.trim().isEmpty()) {
DISDIF5 = Byte.parseByte(s);
} else {
DISDIF5 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF6(String s) {
if (!s.trim().isEmpty()) {
DISDIF6 = Byte.parseByte(s);
} else {
DISDIF6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF7(String s) {
if (!s.trim().isEmpty()) {
DISDIF7 = Byte.parseByte(s);
} else {
DISDIF7 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF8(String s) {
if (!s.trim().isEmpty()) {
DISDIF8 = Byte.parseByte(s);
} else {
DISDIF8 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF9(String s) {
if (!s.trim().isEmpty()) {
DISDIF9 = Byte.parseByte(s);
} else {
DISDIF9 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF96(String s) {
if (!s.trim().isEmpty()) {
DISDIF96 = Byte.parseByte(s);
} else {
DISDIF96 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK1(String s) {
if (!s.trim().isEmpty()) {
DIVCHK1 = Byte.parseByte(s);
} else {
DIVCHK1 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK2(String s) {
if (!s.trim().isEmpty()) {
DIVCHK2 = Byte.parseByte(s);
} else {
DIVCHK2 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK3(String s) {
if (!s.trim().isEmpty()) {
DIVCHK3 = Byte.parseByte(s);
} else {
DIVCHK3 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN1(String s) {
if (!s.trim().isEmpty()) {
DIVFIN1 = Byte.parseByte(s);
} else {
DIVFIN1 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN2(String s) {
if (!s.trim().isEmpty()) {
DIVFIN2 = Byte.parseByte(s);
} else {
DIVFIN2 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN3(String s) {
if (!s.trim().isEmpty()) {
DIVFIN3 = Byte.parseByte(s);
} else {
DIVFIN3 = Byte.MIN_VALUE;
}
}

protected final void initDKLM(String s) {
if (!s.trim().isEmpty()) {
DKLM = Byte.parseByte(s);
} else {
DKLM = Byte.MIN_VALUE;
}
}

protected final void initDOBY_DV(String s) {
if (!s.trim().isEmpty()) {
DOBY_DV = Short.parseShort(s);
} else {
DOBY_DV = Short.MIN_VALUE;
}
}

protected final void initDONEPROXY(String s) {
if (!s.trim().isEmpty()) {
DONEPROXY = Byte.parseByte(s);
} else {
DONEPROXY = Byte.MIN_VALUE;
}
}

protected final void initDRGMJ(String s) {
if (!s.trim().isEmpty()) {
DRGMJ = Byte.parseByte(s);
} else {
DRGMJ = Byte.MIN_VALUE;
}
}

protected final void initDRGOTH(String s) {
if (!s.trim().isEmpty()) {
DRGOTH = Byte.parseByte(s);
} else {
DRGOTH = Byte.MIN_VALUE;
}
}

protected final void initDRGSOL(String s) {
if (!s.trim().isEmpty()) {
DRGSOL = Byte.parseByte(s);
} else {
DRGSOL = Byte.MIN_VALUE;
}
}

protected final void initDRIVE(String s) {
if (!s.trim().isEmpty()) {
DRIVE = Byte.parseByte(s);
} else {
DRIVE = Byte.MIN_VALUE;
}
}

protected final void initDRNK4W(String s) {
if (!s.trim().isEmpty()) {
DRNK4W = Byte.parseByte(s);
} else {
DRNK4W = Byte.MIN_VALUE;
}
}

protected final void initDVAGE(String s) {
if (!s.trim().isEmpty()) {
DVAGE = Byte.parseByte(s);
} else {
DVAGE = Byte.MIN_VALUE;
}
}

protected final void initDVM1(String s) {
if (!s.trim().isEmpty()) {
DVM1 = Byte.parseByte(s);
} else {
DVM1 = Byte.MIN_VALUE;
}
}

protected final void initDVM2(String s) {
if (!s.trim().isEmpty()) {
DVM2 = Byte.parseByte(s);
} else {
DVM2 = Byte.MIN_VALUE;
}
}

protected final void initDVM3(String s) {
if (!s.trim().isEmpty()) {
DVM3 = Byte.parseByte(s);
} else {
DVM3 = Byte.MIN_VALUE;
}
}

protected final void initDVY41(String s) {
if (!s.trim().isEmpty()) {
DVY41 = Short.parseShort(s);
} else {
DVY41 = Short.MIN_VALUE;
}
}

protected final void initDVY42(String s) {
if (!s.trim().isEmpty()) {
DVY42 = Short.parseShort(s);
} else {
DVY42 = Short.MIN_VALUE;
}
}

protected final void initDVY43(String s) {
if (!s.trim().isEmpty()) {
DVY43 = Byte.parseByte(s);
} else {
DVY43 = Byte.MIN_VALUE;
}
}

protected final void initEATLIVU(String s) {
if (!s.trim().isEmpty()) {
EATLIVU = Byte.parseByte(s);
} else {
EATLIVU = Byte.MIN_VALUE;
}
}

protected final void initEDASP(String s) {
if (!s.trim().isEmpty()) {
EDASP = Byte.parseByte(s);
} else {
EDASP = Byte.MIN_VALUE;
}
}

protected final void initEDLINK(String s) {
if (!s.trim().isEmpty()) {
EDLINK = Byte.parseByte(s);
} else {
EDLINK = Byte.MIN_VALUE;
}
}

protected final void initEDLINKCONF(String s) {
if (!s.trim().isEmpty()) {
EDLINKCONF = Byte.parseByte(s);
} else {
EDLINKCONF = Byte.MIN_VALUE;
}
}

protected final void initEDLINKCONFB(String s) {
if (!s.trim().isEmpty()) {
EDLINKCONFB = Byte.parseByte(s);
} else {
EDLINKCONFB = Byte.MIN_VALUE;
}
}

protected final void initEDLINKKIDE(String s) {
if (!s.trim().isEmpty()) {
EDLINKKIDE = Byte.parseByte(s);
} else {
EDLINKKIDE = Byte.MIN_VALUE;
}
}

protected final void initEDLINKKIDSWN(String s) {
if (!s.trim().isEmpty()) {
EDLINKKIDSWN = Byte.parseByte(s);
} else {
EDLINKKIDSWN = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE(String s) {
if (!s.trim().isEmpty()) {
EDTYPE = Short.parseShort(s);
} else {
EDTYPE = Short.MIN_VALUE;
}
}

protected final void initEDUCATION(String s) {
if (!s.trim().isEmpty()) {
EDUCATION = Byte.parseByte(s);
} else {
EDUCATION = Byte.MIN_VALUE;
}
}

protected final void initEDUCISGN(String s) {
if (!s.trim().isEmpty()) {
EDUCISGN = Byte.parseByte(s);
} else {
EDUCISGN = Byte.MIN_VALUE;
}
}

protected final void initEDUCLINKB1(String s) {
if (!s.trim().isEmpty()) {
EDUCLINKB1 = Byte.parseByte(s);
} else {
EDUCLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initEDUCLINKB2(String s) {
if (!s.trim().isEmpty()) {
EDUCLINKB2 = Byte.parseByte(s);
} else {
EDUCLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initEDUCLINKB3(String s) {
if (!s.trim().isEmpty()) {
EDUCLINKB3 = Byte.parseByte(s);
} else {
EDUCLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initEDUCRECD(String s) {
if (!s.trim().isEmpty()) {
EDUCRECD = Byte.parseByte(s);
} else {
EDUCRECD = Byte.MIN_VALUE;
}
}

protected final void initEDUCRSGN(String s) {
if (!s.trim().isEmpty()) {
EDUCRSGN = Byte.parseByte(s);
} else {
EDUCRSGN = Byte.MIN_VALUE;
}
}

protected final void initEDUCSN(String s) {
if (!s.trim().isEmpty()) {
EDUCSN = Byte.parseByte(s);
} else {
EDUCSN = Byte.MIN_VALUE;
}
}

protected final void initEMPCHK(String s) {
if (!s.trim().isEmpty()) {
EMPCHK = Byte.parseByte(s);
} else {
EMPCHK = Byte.MIN_VALUE;
}
}

protected final void initEMPLOY(String s) {
if (!s.trim().isEmpty()) {
EMPLOY = Byte.parseByte(s);
} else {
EMPLOY = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDD(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDD = Byte.parseByte(s);
} else {
EMPSTENDD = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDM(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDM = Byte.parseByte(s);
} else {
EMPSTENDM = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDY4(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDY4 = Short.parseShort(s);
} else {
EMPSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initENDMNTH1(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH1 = Byte.parseByte(s);
} else {
ENDMNTH1 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH2(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH2 = Byte.parseByte(s);
} else {
ENDMNTH2 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH3(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH3 = Byte.parseByte(s);
} else {
ENDMNTH3 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH4(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH4 = Byte.parseByte(s);
} else {
ENDMNTH4 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT1(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT1 = Byte.parseByte(s);
} else {
ENVHABIT1 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT10(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT10 = Byte.parseByte(s);
} else {
ENVHABIT10 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT11(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT11 = Byte.parseByte(s);
} else {
ENVHABIT11 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT2(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT2 = Byte.parseByte(s);
} else {
ENVHABIT2 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT3(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT3 = Byte.parseByte(s);
} else {
ENVHABIT3 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT4(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT4 = Byte.parseByte(s);
} else {
ENVHABIT4 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT5(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT5 = Byte.parseByte(s);
} else {
ENVHABIT5 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT6(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT6 = Byte.parseByte(s);
} else {
ENVHABIT6 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT7(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT7 = Byte.parseByte(s);
} else {
ENVHABIT7 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT8(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT8 = Byte.parseByte(s);
} else {
ENVHABIT8 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT9(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT9 = Byte.parseByte(s);
} else {
ENVHABIT9 = Byte.MIN_VALUE;
}
}

protected final void initEPROSH(String s) {
if (!s.trim().isEmpty()) {
EPROSH = Short.parseShort(s);
} else {
EPROSH = Short.MIN_VALUE;
}
}

protected final void initETHN_DV(String s) {
if (!s.trim().isEmpty()) {
ETHN_DV = Byte.parseByte(s);
} else {
ETHN_DV = Byte.MIN_VALUE;
}
}

protected final void initEVRALC(String s) {
if (!s.trim().isEmpty()) {
EVRALC = Byte.parseByte(s);
} else {
EVRALC = Byte.MIN_VALUE;
}
}

protected final void initEVRSMO(String s) {
if (!s.trim().isEmpty()) {
EVRSMO = Byte.parseByte(s);
} else {
EVRSMO = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE1(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE1 = Byte.parseByte(s);
} else {
EXPMANAGE1 = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE10(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE10 = Byte.parseByte(s);
} else {
EXPMANAGE10 = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE11(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE11 = Byte.parseByte(s);
} else {
EXPMANAGE11 = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE2(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE2 = Byte.parseByte(s);
} else {
EXPMANAGE2 = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE3(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE3 = Byte.parseByte(s);
} else {
EXPMANAGE3 = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE4(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE4 = Byte.parseByte(s);
} else {
EXPMANAGE4 = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE5(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE5 = Byte.parseByte(s);
} else {
EXPMANAGE5 = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE6(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE6 = Byte.parseByte(s);
} else {
EXPMANAGE6 = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE7(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE7 = Byte.parseByte(s);
} else {
EXPMANAGE7 = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE8(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE8 = Byte.parseByte(s);
} else {
EXPMANAGE8 = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE9(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE9 = Byte.parseByte(s);
} else {
EXPMANAGE9 = Byte.MIN_VALUE;
}
}

protected final void initEXPMANAGE97(String s) {
if (!s.trim().isEmpty()) {
EXPMANAGE97 = Byte.parseByte(s);
} else {
EXPMANAGE97 = Byte.MIN_VALUE;
}
}

protected final void initEXTNSA(String s) {
if (!s.trim().isEmpty()) {
EXTNSA = Byte.parseByte(s);
} else {
EXTNSA = Byte.MIN_VALUE;
}
}

protected final void initEXTRATE(String s) {
if (!s.trim().isEmpty()) {
EXTRATE = Double.parseDouble(s);
} else {
EXTRATE = Double.NaN;
}
}

protected final void initEXTREST(String s) {
if (!s.trim().isEmpty()) {
EXTREST = Byte.parseByte(s);
} else {
EXTREST = Byte.MIN_VALUE;
}
}

protected final void initFAMILY(String s) {
if (!s.trim().isEmpty()) {
FAMILY = Byte.parseByte(s);
} else {
FAMILY = Byte.MIN_VALUE;
}
}

protected final void initFAMSUP(String s) {
if (!s.trim().isEmpty()) {
FAMSUP = Byte.parseByte(s);
} else {
FAMSUP = Byte.MIN_VALUE;
}
}

protected final void initFATHER(String s) {
if (!s.trim().isEmpty()) {
FATHER = Byte.parseByte(s);
} else {
FATHER = Byte.MIN_VALUE;
}
}

protected final void initFENOW(String s) {
if (!s.trim().isEmpty()) {
FENOW = Byte.parseByte(s);
} else {
FENOW = Byte.MIN_VALUE;
}
}

protected final void initFFBRFEDLW(String s) {
if (!s.trim().isEmpty()) {
FFBRFEDLW = Byte.parseByte(s);
} else {
FFBRFEDLW = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE01(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE01 = Byte.parseByte(s);
} else {
FF_BENTYPE01 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE02(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE02 = Byte.parseByte(s);
} else {
FF_BENTYPE02 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE03(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE03 = Byte.parseByte(s);
} else {
FF_BENTYPE03 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE04(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE04 = Byte.parseByte(s);
} else {
FF_BENTYPE04 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE05(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE05 = Byte.parseByte(s);
} else {
FF_BENTYPE05 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE06(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE06 = Byte.parseByte(s);
} else {
FF_BENTYPE06 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE07(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE07 = Byte.parseByte(s);
} else {
FF_BENTYPE07 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE08(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE08 = Byte.parseByte(s);
} else {
FF_BENTYPE08 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE09(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE09 = Byte.parseByte(s);
} else {
FF_BENTYPE09 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE10(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE10 = Byte.parseByte(s);
} else {
FF_BENTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE11(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE11 = Byte.parseByte(s);
} else {
FF_BENTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE12(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE12 = Byte.parseByte(s);
} else {
FF_BENTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE13(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE13 = Byte.parseByte(s);
} else {
FF_BENTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE14(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE14 = Byte.parseByte(s);
} else {
FF_BENTYPE14 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE15(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE15 = Byte.parseByte(s);
} else {
FF_BENTYPE15 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE16(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE16 = Byte.parseByte(s);
} else {
FF_BENTYPE16 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE17(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE17 = Byte.parseByte(s);
} else {
FF_BENTYPE17 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE18(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE18 = Byte.parseByte(s);
} else {
FF_BENTYPE18 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE19(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE19 = Byte.parseByte(s);
} else {
FF_BENTYPE19 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE20(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE20 = Byte.parseByte(s);
} else {
FF_BENTYPE20 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE21(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE21 = Byte.parseByte(s);
} else {
FF_BENTYPE21 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE22(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE22 = Byte.parseByte(s);
} else {
FF_BENTYPE22 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE23(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE23 = Byte.parseByte(s);
} else {
FF_BENTYPE23 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE24(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE24 = Byte.parseByte(s);
} else {
FF_BENTYPE24 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE25(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE25 = Byte.parseByte(s);
} else {
FF_BENTYPE25 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE26(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE26 = Byte.parseByte(s);
} else {
FF_BENTYPE26 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE27(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE27 = Byte.parseByte(s);
} else {
FF_BENTYPE27 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE28(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE28 = Byte.parseByte(s);
} else {
FF_BENTYPE28 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE29(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE29 = Byte.parseByte(s);
} else {
FF_BENTYPE29 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE30(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE30 = Byte.parseByte(s);
} else {
FF_BENTYPE30 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE31(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE31 = Byte.parseByte(s);
} else {
FF_BENTYPE31 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE32(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE32 = Byte.parseByte(s);
} else {
FF_BENTYPE32 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE33(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE33 = Byte.parseByte(s);
} else {
FF_BENTYPE33 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE34(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE34 = Byte.parseByte(s);
} else {
FF_BENTYPE34 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE35(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE35 = Byte.parseByte(s);
} else {
FF_BENTYPE35 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE36(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE36 = Byte.parseByte(s);
} else {
FF_BENTYPE36 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE37(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE37 = Byte.parseByte(s);
} else {
FF_BENTYPE37 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE38(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE38 = Byte.parseByte(s);
} else {
FF_BENTYPE38 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE39(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE39 = Byte.parseByte(s);
} else {
FF_BENTYPE39 = Byte.MIN_VALUE;
}
}

protected final void initFF_EMPLW(String s) {
if (!s.trim().isEmpty()) {
FF_EMPLW = Byte.parseByte(s);
} else {
FF_EMPLW = Byte.MIN_VALUE;
}
}

protected final void initFF_EVERINT(String s) {
if (!s.trim().isEmpty()) {
FF_EVERINT = Byte.parseByte(s);
} else {
FF_EVERINT = Byte.MIN_VALUE;
}
}

protected final void initFF_IVINTLANG(String s) {
if (!s.trim().isEmpty()) {
FF_IVINTLANG = Byte.parseByte(s);
} else {
FF_IVINTLANG = Byte.MIN_VALUE;
}
}

protected final void initFF_IVLOLW(String s) {
if (!s.trim().isEmpty()) {
FF_IVLOLW = Byte.parseByte(s);
} else {
FF_IVLOLW = Byte.MIN_VALUE;
}
}

protected final void initFF_JBMNGR(String s) {
if (!s.trim().isEmpty()) {
FF_JBMNGR = Byte.parseByte(s);
} else {
FF_JBMNGR = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSEMP(String s) {
if (!s.trim().isEmpty()) {
FF_JBSEMP = Byte.parseByte(s);
} else {
FF_JBSEMP = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSIZE(String s) {
if (!s.trim().isEmpty()) {
FF_JBSIZE = Byte.parseByte(s);
} else {
FF_JBSIZE = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSTAT(String s) {
if (!s.trim().isEmpty()) {
FF_JBSTAT = Byte.parseByte(s);
} else {
FF_JBSTAT = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG = Byte.parseByte(s);
} else {
FF_OPRLG = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0 = Byte.parseByte(s);
} else {
FF_OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0NI = Byte.parseByte(s);
} else {
FF_OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initFF_TEL(String s) {
if (!s.trim().isEmpty()) {
FF_TEL = Byte.parseByte(s);
} else {
FF_TEL = Byte.MIN_VALUE;
}
}

protected final void initFF_UKBORN(String s) {
if (!s.trim().isEmpty()) {
FF_UKBORN = Byte.parseByte(s);
} else {
FF_UKBORN = Byte.MIN_VALUE;
}
}

protected final void initFF_YR2UK4(String s) {
if (!s.trim().isEmpty()) {
FF_YR2UK4 = Short.parseShort(s);
} else {
FF_YR2UK4 = Short.MIN_VALUE;
}
}

protected final void initFIBENOTHR_DV(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_DV = Double.parseDouble(s);
} else {
FIBENOTHR_DV = Double.NaN;
}
}

protected final void initFIBENOTHR_IF(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_IF = Double.parseDouble(s);
} else {
FIBENOTHR_IF = Double.NaN;
}
}

protected final void initFIBENOTHR_TC(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_TC = Byte.parseByte(s);
} else {
FIBENOTHR_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_IF = Double.parseDouble(s);
} else {
FIMNGRS_IF = Double.NaN;
}
}

protected final void initFIMNGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_TC = Byte.parseByte(s);
} else {
FIMNGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNINVNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNINVNET_DV = Double.parseDouble(s);
} else {
FIMNINVNET_DV = Double.NaN;
}
}

protected final void initFIMNLABGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_IF = Double.parseDouble(s);
} else {
FIMNLABGRS_IF = Double.NaN;
}
}

protected final void initFIMNLABGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_TC = Byte.parseByte(s);
} else {
FIMNLABGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNLABNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_DV = Double.parseDouble(s);
} else {
FIMNLABNET_DV = Double.NaN;
}
}

protected final void initFIMNLABNET_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_TC = Byte.parseByte(s);
} else {
FIMNLABNET_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNMISC_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNMISC_DV = Double.parseDouble(s);
} else {
FIMNMISC_DV = Double.NaN;
}
}

protected final void initFIMNNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNNET_DV = Double.parseDouble(s);
} else {
FIMNNET_DV = Double.NaN;
}
}

protected final void initFIMNPEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPEN_DV = Double.parseDouble(s);
} else {
FIMNPEN_DV = Double.NaN;
}
}

protected final void initFIMNPRBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPRBEN_DV = Double.parseDouble(s);
} else {
FIMNPRBEN_DV = Double.NaN;
}
}

protected final void initFIMNSBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNSBEN_DV = Double.parseDouble(s);
} else {
FIMNSBEN_DV = Double.NaN;
}
}

protected final void initFINFUT(String s) {
if (!s.trim().isEmpty()) {
FINFUT = Byte.parseByte(s);
} else {
FINFUT = Byte.MIN_VALUE;
}
}

protected final void initFIVEALCDR(String s) {
if (!s.trim().isEmpty()) {
FIVEALCDR = Byte.parseByte(s);
} else {
FIVEALCDR = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB1(String s) {
if (!s.trim().isEmpty()) {
FIYRDB1 = Byte.parseByte(s);
} else {
FIYRDB1 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB2(String s) {
if (!s.trim().isEmpty()) {
FIYRDB2 = Byte.parseByte(s);
} else {
FIYRDB2 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB3(String s) {
if (!s.trim().isEmpty()) {
FIYRDB3 = Byte.parseByte(s);
} else {
FIYRDB3 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB4(String s) {
if (!s.trim().isEmpty()) {
FIYRDB4 = Byte.parseByte(s);
} else {
FIYRDB4 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB5(String s) {
if (!s.trim().isEmpty()) {
FIYRDB5 = Byte.parseByte(s);
} else {
FIYRDB5 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB6(String s) {
if (!s.trim().isEmpty()) {
FIYRDB6 = Byte.parseByte(s);
} else {
FIYRDB6 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDIA(String s) {
if (!s.trim().isEmpty()) {
FIYRDIA = Integer.parseInt(s);
} else {
FIYRDIA = Integer.MIN_VALUE;
}
}

protected final void initFIYRINVINC_DV(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_DV = Double.parseDouble(s);
} else {
FIYRINVINC_DV = Double.NaN;
}
}

protected final void initFIYRINVINC_IF(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_IF = Byte.parseByte(s);
} else {
FIYRINVINC_IF = Byte.MIN_VALUE;
}
}

protected final void initFIYRINVINC_TC(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_TC = Byte.parseByte(s);
} else {
FIYRINVINC_TC = Byte.MIN_VALUE;
}
}

protected final void initFLAGLINKB1(String s) {
if (!s.trim().isEmpty()) {
FLAGLINKB1 = Byte.parseByte(s);
} else {
FLAGLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initFLAGLINKB2(String s) {
if (!s.trim().isEmpty()) {
FLAGLINKB2 = Byte.parseByte(s);
} else {
FLAGLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initFLAGLINKB3(String s) {
if (!s.trim().isEmpty()) {
FLAGLINKB3 = Byte.parseByte(s);
} else {
FLAGLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initFLYES1(String s) {
if (!s.trim().isEmpty()) {
FLYES1 = Byte.parseByte(s);
} else {
FLYES1 = Byte.MIN_VALUE;
}
}

protected final void initFLYES2(String s) {
if (!s.trim().isEmpty()) {
FLYES2 = Byte.parseByte(s);
} else {
FLYES2 = Byte.MIN_VALUE;
}
}

protected final void initFLYES3(String s) {
if (!s.trim().isEmpty()) {
FLYES3 = Byte.parseByte(s);
} else {
FLYES3 = Byte.MIN_VALUE;
}
}

protected final void initFLYES4(String s) {
if (!s.trim().isEmpty()) {
FLYES4 = Byte.parseByte(s);
} else {
FLYES4 = Byte.MIN_VALUE;
}
}

protected final void initFNPID(String s) {
if (!s.trim().isEmpty()) {
FNPID = Integer.parseInt(s);
} else {
FNPID = Integer.MIN_VALUE;
}
}

protected final void initFNPNO(String s) {
if (!s.trim().isEmpty()) {
FNPNO = Byte.parseByte(s);
} else {
FNPNO = Byte.MIN_VALUE;
}
}

protected final void initFNSPID(String s) {
if (!s.trim().isEmpty()) {
FNSPID = Integer.parseInt(s);
} else {
FNSPID = Integer.MIN_VALUE;
}
}

protected final void initFNSPNO(String s) {
if (!s.trim().isEmpty()) {
FNSPNO = Byte.parseByte(s);
} else {
FNSPNO = Byte.MIN_VALUE;
}
}

protected final void initFRDRG(String s) {
if (!s.trim().isEmpty()) {
FRDRG = Byte.parseByte(s);
} else {
FRDRG = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM1(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM1 = Byte.parseByte(s);
} else {
FT2ENDM1 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM2(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM2 = Byte.parseByte(s);
} else {
FT2ENDM2 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDY41(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY41 = Short.parseShort(s);
} else {
FT2ENDY41 = Short.MIN_VALUE;
}
}

protected final void initFT2ENDY42(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY42 = Short.parseShort(s);
} else {
FT2ENDY42 = Short.MIN_VALUE;
}
}

protected final void initFTEDANY(String s) {
if (!s.trim().isEmpty()) {
FTEDANY = Byte.parseByte(s);
} else {
FTEDANY = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND1(String s) {
if (!s.trim().isEmpty()) {
FTEDEND1 = Byte.parseByte(s);
} else {
FTEDEND1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND2(String s) {
if (!s.trim().isEmpty()) {
FTEDEND2 = Byte.parseByte(s);
} else {
FTEDEND2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR1(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR1 = Byte.parseByte(s);
} else {
FTEDMOR1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR2(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR2 = Byte.parseByte(s);
} else {
FTEDMOR2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM1(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM1 = Byte.parseByte(s);
} else {
FTEDSTARTM1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM2(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM2 = Byte.parseByte(s);
} else {
FTEDSTARTM2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTY41(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY41 = Short.parseShort(s);
} else {
FTEDSTARTY41 = Short.MIN_VALUE;
}
}

protected final void initFTEDSTARTY42(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY42 = Short.parseShort(s);
} else {
FTEDSTARTY42 = Short.MIN_VALUE;
}
}

protected final void initFTENDM(String s) {
if (!s.trim().isEmpty()) {
FTENDM = Byte.parseByte(s);
} else {
FTENDM = Byte.MIN_VALUE;
}
}

protected final void initFTENDY4(String s) {
if (!s.trim().isEmpty()) {
FTENDY4 = Short.parseShort(s);
} else {
FTENDY4 = Short.MIN_VALUE;
}
}

protected final void initFTQUALS(String s) {
if (!s.trim().isEmpty()) {
FTQUALS = Byte.parseByte(s);
} else {
FTQUALS = Byte.MIN_VALUE;
}
}

protected final void initGRFPID(String s) {
if (!s.trim().isEmpty()) {
GRFPID = Integer.parseInt(s);
} else {
GRFPID = Integer.MIN_VALUE;
}
}

protected final void initGRFPNO(String s) {
if (!s.trim().isEmpty()) {
GRFPNO = Byte.parseByte(s);
} else {
GRFPNO = Byte.MIN_VALUE;
}
}

protected final void initGRMPID(String s) {
if (!s.trim().isEmpty()) {
GRMPID = Integer.parseInt(s);
} else {
GRMPID = Integer.MIN_VALUE;
}
}

protected final void initGRMPNO(String s) {
if (!s.trim().isEmpty()) {
GRMPNO = Byte.parseByte(s);
} else {
GRMPNO = Byte.MIN_VALUE;
}
}

protected final void initHASCURR(String s) {
if (!s.trim().isEmpty()) {
HASCURR = Byte.parseByte(s);
} else {
HASCURR = Byte.MIN_VALUE;
}
}

protected final void initHASEMAIL(String s) {
if (!s.trim().isEmpty()) {
HASEMAIL = Byte.parseByte(s);
} else {
HASEMAIL = Byte.MIN_VALUE;
}
}

protected final void initHCOND1(String s) {
if (!s.trim().isEmpty()) {
HCOND1 = Byte.parseByte(s);
} else {
HCOND1 = Byte.MIN_VALUE;
}
}

protected final void initHCOND10(String s) {
if (!s.trim().isEmpty()) {
HCOND10 = Byte.parseByte(s);
} else {
HCOND10 = Byte.MIN_VALUE;
}
}

protected final void initHCOND11(String s) {
if (!s.trim().isEmpty()) {
HCOND11 = Byte.parseByte(s);
} else {
HCOND11 = Byte.MIN_VALUE;
}
}

protected final void initHCOND12(String s) {
if (!s.trim().isEmpty()) {
HCOND12 = Byte.parseByte(s);
} else {
HCOND12 = Byte.MIN_VALUE;
}
}

protected final void initHCOND13(String s) {
if (!s.trim().isEmpty()) {
HCOND13 = Byte.parseByte(s);
} else {
HCOND13 = Byte.MIN_VALUE;
}
}

protected final void initHCOND14(String s) {
if (!s.trim().isEmpty()) {
HCOND14 = Byte.parseByte(s);
} else {
HCOND14 = Byte.MIN_VALUE;
}
}

protected final void initHCOND15(String s) {
if (!s.trim().isEmpty()) {
HCOND15 = Byte.parseByte(s);
} else {
HCOND15 = Byte.MIN_VALUE;
}
}

protected final void initHCOND16(String s) {
if (!s.trim().isEmpty()) {
HCOND16 = Byte.parseByte(s);
} else {
HCOND16 = Byte.MIN_VALUE;
}
}

protected final void initHCOND17(String s) {
if (!s.trim().isEmpty()) {
HCOND17 = Byte.parseByte(s);
} else {
HCOND17 = Byte.MIN_VALUE;
}
}

protected final void initHCOND2(String s) {
if (!s.trim().isEmpty()) {
HCOND2 = Byte.parseByte(s);
} else {
HCOND2 = Byte.MIN_VALUE;
}
}

protected final void initHCOND3(String s) {
if (!s.trim().isEmpty()) {
HCOND3 = Byte.parseByte(s);
} else {
HCOND3 = Byte.MIN_VALUE;
}
}

protected final void initHCOND4(String s) {
if (!s.trim().isEmpty()) {
HCOND4 = Byte.parseByte(s);
} else {
HCOND4 = Byte.MIN_VALUE;
}
}

protected final void initHCOND5(String s) {
if (!s.trim().isEmpty()) {
HCOND5 = Byte.parseByte(s);
} else {
HCOND5 = Byte.MIN_VALUE;
}
}

protected final void initHCOND6(String s) {
if (!s.trim().isEmpty()) {
HCOND6 = Byte.parseByte(s);
} else {
HCOND6 = Byte.MIN_VALUE;
}
}

protected final void initHCOND7(String s) {
if (!s.trim().isEmpty()) {
HCOND7 = Byte.parseByte(s);
} else {
HCOND7 = Byte.MIN_VALUE;
}
}

protected final void initHCOND8(String s) {
if (!s.trim().isEmpty()) {
HCOND8 = Byte.parseByte(s);
} else {
HCOND8 = Byte.MIN_VALUE;
}
}

protected final void initHCOND9(String s) {
if (!s.trim().isEmpty()) {
HCOND9 = Byte.parseByte(s);
} else {
HCOND9 = Byte.MIN_VALUE;
}
}

protected final void initHCOND96(String s) {
if (!s.trim().isEmpty()) {
HCOND96 = Byte.parseByte(s);
} else {
HCOND96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA01(String s) {
if (!s.trim().isEmpty()) {
HCONDA01 = Byte.parseByte(s);
} else {
HCONDA01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA02(String s) {
if (!s.trim().isEmpty()) {
HCONDA02 = Byte.parseByte(s);
} else {
HCONDA02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA03(String s) {
if (!s.trim().isEmpty()) {
HCONDA03 = Byte.parseByte(s);
} else {
HCONDA03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA04(String s) {
if (!s.trim().isEmpty()) {
HCONDA04 = Byte.parseByte(s);
} else {
HCONDA04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA05(String s) {
if (!s.trim().isEmpty()) {
HCONDA05 = Byte.parseByte(s);
} else {
HCONDA05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA06(String s) {
if (!s.trim().isEmpty()) {
HCONDA06 = Byte.parseByte(s);
} else {
HCONDA06 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA07(String s) {
if (!s.trim().isEmpty()) {
HCONDA07 = Byte.parseByte(s);
} else {
HCONDA07 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA08(String s) {
if (!s.trim().isEmpty()) {
HCONDA08 = Byte.parseByte(s);
} else {
HCONDA08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA09(String s) {
if (!s.trim().isEmpty()) {
HCONDA09 = Byte.parseByte(s);
} else {
HCONDA09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA10(String s) {
if (!s.trim().isEmpty()) {
HCONDA10 = Byte.parseByte(s);
} else {
HCONDA10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA11(String s) {
if (!s.trim().isEmpty()) {
HCONDA11 = Byte.parseByte(s);
} else {
HCONDA11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA12(String s) {
if (!s.trim().isEmpty()) {
HCONDA12 = Byte.parseByte(s);
} else {
HCONDA12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA13(String s) {
if (!s.trim().isEmpty()) {
HCONDA13 = Byte.parseByte(s);
} else {
HCONDA13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA14(String s) {
if (!s.trim().isEmpty()) {
HCONDA14 = Byte.parseByte(s);
} else {
HCONDA14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA15(String s) {
if (!s.trim().isEmpty()) {
HCONDA15 = Byte.parseByte(s);
} else {
HCONDA15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA16(String s) {
if (!s.trim().isEmpty()) {
HCONDA16 = Byte.parseByte(s);
} else {
HCONDA16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA17(String s) {
if (!s.trim().isEmpty()) {
HCONDA17 = Byte.parseByte(s);
} else {
HCONDA17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN1(String s) {
if (!s.trim().isEmpty()) {
HCONDN1 = Byte.parseByte(s);
} else {
HCONDN1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN10(String s) {
if (!s.trim().isEmpty()) {
HCONDN10 = Byte.parseByte(s);
} else {
HCONDN10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN11(String s) {
if (!s.trim().isEmpty()) {
HCONDN11 = Byte.parseByte(s);
} else {
HCONDN11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN12(String s) {
if (!s.trim().isEmpty()) {
HCONDN12 = Byte.parseByte(s);
} else {
HCONDN12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN13(String s) {
if (!s.trim().isEmpty()) {
HCONDN13 = Byte.parseByte(s);
} else {
HCONDN13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN14(String s) {
if (!s.trim().isEmpty()) {
HCONDN14 = Byte.parseByte(s);
} else {
HCONDN14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN15(String s) {
if (!s.trim().isEmpty()) {
HCONDN15 = Byte.parseByte(s);
} else {
HCONDN15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN16(String s) {
if (!s.trim().isEmpty()) {
HCONDN16 = Byte.parseByte(s);
} else {
HCONDN16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN17(String s) {
if (!s.trim().isEmpty()) {
HCONDN17 = Byte.parseByte(s);
} else {
HCONDN17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN2(String s) {
if (!s.trim().isEmpty()) {
HCONDN2 = Byte.parseByte(s);
} else {
HCONDN2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN3(String s) {
if (!s.trim().isEmpty()) {
HCONDN3 = Byte.parseByte(s);
} else {
HCONDN3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN4(String s) {
if (!s.trim().isEmpty()) {
HCONDN4 = Byte.parseByte(s);
} else {
HCONDN4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN5(String s) {
if (!s.trim().isEmpty()) {
HCONDN5 = Byte.parseByte(s);
} else {
HCONDN5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN6(String s) {
if (!s.trim().isEmpty()) {
HCONDN6 = Byte.parseByte(s);
} else {
HCONDN6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN7(String s) {
if (!s.trim().isEmpty()) {
HCONDN7 = Byte.parseByte(s);
} else {
HCONDN7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN8(String s) {
if (!s.trim().isEmpty()) {
HCONDN8 = Byte.parseByte(s);
} else {
HCONDN8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN9(String s) {
if (!s.trim().isEmpty()) {
HCONDN9 = Byte.parseByte(s);
} else {
HCONDN9 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN96(String s) {
if (!s.trim().isEmpty()) {
HCONDN96 = Byte.parseByte(s);
} else {
HCONDN96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO1(String s) {
if (!s.trim().isEmpty()) {
HCONDNO1 = Byte.parseByte(s);
} else {
HCONDNO1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO10(String s) {
if (!s.trim().isEmpty()) {
HCONDNO10 = Byte.parseByte(s);
} else {
HCONDNO10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO2(String s) {
if (!s.trim().isEmpty()) {
HCONDNO2 = Byte.parseByte(s);
} else {
HCONDNO2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO3(String s) {
if (!s.trim().isEmpty()) {
HCONDNO3 = Byte.parseByte(s);
} else {
HCONDNO3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO4(String s) {
if (!s.trim().isEmpty()) {
HCONDNO4 = Byte.parseByte(s);
} else {
HCONDNO4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO5(String s) {
if (!s.trim().isEmpty()) {
HCONDNO5 = Byte.parseByte(s);
} else {
HCONDNO5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO6(String s) {
if (!s.trim().isEmpty()) {
HCONDNO6 = Byte.parseByte(s);
} else {
HCONDNO6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO7(String s) {
if (!s.trim().isEmpty()) {
HCONDNO7 = Byte.parseByte(s);
} else {
HCONDNO7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO8(String s) {
if (!s.trim().isEmpty()) {
HCONDNO8 = Byte.parseByte(s);
} else {
HCONDNO8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO9(String s) {
if (!s.trim().isEmpty()) {
HCONDNO9 = Byte.parseByte(s);
} else {
HCONDNO9 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS1(String s) {
if (!s.trim().isEmpty()) {
HCONDNS1 = Byte.parseByte(s);
} else {
HCONDNS1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS10(String s) {
if (!s.trim().isEmpty()) {
HCONDNS10 = Byte.parseByte(s);
} else {
HCONDNS10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS2(String s) {
if (!s.trim().isEmpty()) {
HCONDNS2 = Byte.parseByte(s);
} else {
HCONDNS2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS3(String s) {
if (!s.trim().isEmpty()) {
HCONDNS3 = Byte.parseByte(s);
} else {
HCONDNS3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS4(String s) {
if (!s.trim().isEmpty()) {
HCONDNS4 = Byte.parseByte(s);
} else {
HCONDNS4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS5(String s) {
if (!s.trim().isEmpty()) {
HCONDNS5 = Byte.parseByte(s);
} else {
HCONDNS5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS6(String s) {
if (!s.trim().isEmpty()) {
HCONDNS6 = Byte.parseByte(s);
} else {
HCONDNS6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS7(String s) {
if (!s.trim().isEmpty()) {
HCONDNS7 = Byte.parseByte(s);
} else {
HCONDNS7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS8(String s) {
if (!s.trim().isEmpty()) {
HCONDNS8 = Byte.parseByte(s);
} else {
HCONDNS8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS9(String s) {
if (!s.trim().isEmpty()) {
HCONDNS9 = Byte.parseByte(s);
} else {
HCONDNS9 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS01(String s) {
if (!s.trim().isEmpty()) {
HCONDS01 = Byte.parseByte(s);
} else {
HCONDS01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS02(String s) {
if (!s.trim().isEmpty()) {
HCONDS02 = Byte.parseByte(s);
} else {
HCONDS02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS03(String s) {
if (!s.trim().isEmpty()) {
HCONDS03 = Byte.parseByte(s);
} else {
HCONDS03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS04(String s) {
if (!s.trim().isEmpty()) {
HCONDS04 = Byte.parseByte(s);
} else {
HCONDS04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS05(String s) {
if (!s.trim().isEmpty()) {
HCONDS05 = Byte.parseByte(s);
} else {
HCONDS05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS08(String s) {
if (!s.trim().isEmpty()) {
HCONDS08 = Byte.parseByte(s);
} else {
HCONDS08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS09(String s) {
if (!s.trim().isEmpty()) {
HCONDS09 = Byte.parseByte(s);
} else {
HCONDS09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS10(String s) {
if (!s.trim().isEmpty()) {
HCONDS10 = Byte.parseByte(s);
} else {
HCONDS10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS11(String s) {
if (!s.trim().isEmpty()) {
HCONDS11 = Byte.parseByte(s);
} else {
HCONDS11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS12(String s) {
if (!s.trim().isEmpty()) {
HCONDS12 = Byte.parseByte(s);
} else {
HCONDS12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS13(String s) {
if (!s.trim().isEmpty()) {
HCONDS13 = Byte.parseByte(s);
} else {
HCONDS13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS14(String s) {
if (!s.trim().isEmpty()) {
HCONDS14 = Byte.parseByte(s);
} else {
HCONDS14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS15(String s) {
if (!s.trim().isEmpty()) {
HCONDS15 = Byte.parseByte(s);
} else {
HCONDS15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS16(String s) {
if (!s.trim().isEmpty()) {
HCONDS16 = Byte.parseByte(s);
} else {
HCONDS16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS17(String s) {
if (!s.trim().isEmpty()) {
HCONDS17 = Byte.parseByte(s);
} else {
HCONDS17 = Byte.MIN_VALUE;
}
}

protected final void initHEALTH(String s) {
if (!s.trim().isEmpty()) {
HEALTH = Byte.parseByte(s);
} else {
HEALTH = Byte.MIN_VALUE;
}
}

protected final void initHEALTHSN(String s) {
if (!s.trim().isEmpty()) {
HEALTHSN = Byte.parseByte(s);
} else {
HEALTHSN = Byte.MIN_VALUE;
}
}

protected final void initHEDLIK(String s) {
if (!s.trim().isEmpty()) {
HEDLIK = Byte.parseByte(s);
} else {
HEDLIK = Byte.MIN_VALUE;
}
}

protected final void initHEDNT(String s) {
if (!s.trim().isEmpty()) {
HEDNT = Byte.parseByte(s);
} else {
HEDNT = Byte.MIN_VALUE;
}
}

protected final void initHEDNTO_CODE(String s) {
if (!s.trim().isEmpty()) {
HEDNTO_CODE = Byte.parseByte(s);
} else {
HEDNTO_CODE = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTF(String s) {
if (!s.trim().isEmpty()) {
HGADOPTF = Byte.parseByte(s);
} else {
HGADOPTF = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTM(String s) {
if (!s.trim().isEmpty()) {
HGADOPTM = Byte.parseByte(s);
} else {
HGADOPTM = Byte.MIN_VALUE;
}
}

protected final void initHGPART(String s) {
if (!s.trim().isEmpty()) {
HGPART = Byte.parseByte(s);
} else {
HGPART = Byte.MIN_VALUE;
}
}

protected final void initHHRESP_DV(String s) {
if (!s.trim().isEmpty()) {
HHRESP_DV = Byte.parseByte(s);
} else {
HHRESP_DV = Byte.MIN_VALUE;
}
}

protected final void initHHTYPE_DV(String s) {
if (!s.trim().isEmpty()) {
HHTYPE_DV = Byte.parseByte(s);
} else {
HHTYPE_DV = Byte.MIN_VALUE;
}
}

protected final void initHLTHISGN(String s) {
if (!s.trim().isEmpty()) {
HLTHISGN = Byte.parseByte(s);
} else {
HLTHISGN = Byte.MIN_VALUE;
}
}

protected final void initHLTHKIDLINK(String s) {
if (!s.trim().isEmpty()) {
HLTHKIDLINK = Byte.parseByte(s);
} else {
HLTHKIDLINK = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINK(String s) {
if (!s.trim().isEmpty()) {
HLTHLINK = Byte.parseByte(s);
} else {
HLTHLINK = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINKB1(String s) {
if (!s.trim().isEmpty()) {
HLTHLINKB1 = Byte.parseByte(s);
} else {
HLTHLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINKB2(String s) {
if (!s.trim().isEmpty()) {
HLTHLINKB2 = Byte.parseByte(s);
} else {
HLTHLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINKB3(String s) {
if (!s.trim().isEmpty()) {
HLTHLINKB3 = Byte.parseByte(s);
} else {
HLTHLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initHLTHRECD(String s) {
if (!s.trim().isEmpty()) {
HLTHRECD = Byte.parseByte(s);
} else {
HLTHRECD = Byte.MIN_VALUE;
}
}

protected final void initHLTHRSGN(String s) {
if (!s.trim().isEmpty()) {
HLTHRSGN = Byte.parseByte(s);
} else {
HLTHRSGN = Byte.MIN_VALUE;
}
}

protected final void initHOSPC1(String s) {
if (!s.trim().isEmpty()) {
HOSPC1 = Byte.parseByte(s);
} else {
HOSPC1 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC10(String s) {
if (!s.trim().isEmpty()) {
HOSPC10 = Byte.parseByte(s);
} else {
HOSPC10 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC2(String s) {
if (!s.trim().isEmpty()) {
HOSPC2 = Byte.parseByte(s);
} else {
HOSPC2 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC3(String s) {
if (!s.trim().isEmpty()) {
HOSPC3 = Byte.parseByte(s);
} else {
HOSPC3 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC4(String s) {
if (!s.trim().isEmpty()) {
HOSPC4 = Byte.parseByte(s);
} else {
HOSPC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC5(String s) {
if (!s.trim().isEmpty()) {
HOSPC5 = Byte.parseByte(s);
} else {
HOSPC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC6(String s) {
if (!s.trim().isEmpty()) {
HOSPC6 = Byte.parseByte(s);
} else {
HOSPC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC7(String s) {
if (!s.trim().isEmpty()) {
HOSPC7 = Byte.parseByte(s);
} else {
HOSPC7 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC8(String s) {
if (!s.trim().isEmpty()) {
HOSPC8 = Byte.parseByte(s);
} else {
HOSPC8 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC9(String s) {
if (!s.trim().isEmpty()) {
HOSPC9 = Byte.parseByte(s);
} else {
HOSPC9 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC1(String s) {
if (!s.trim().isEmpty()) {
HOSPDC1 = Short.parseShort(s);
} else {
HOSPDC1 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOSPDC10 = false;
} else {
HOSPDC10 = true;
}
}
}

protected final void initHOSPDC2(String s) {
if (!s.trim().isEmpty()) {
HOSPDC2 = Short.parseShort(s);
} else {
HOSPDC2 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC3(String s) {
if (!s.trim().isEmpty()) {
HOSPDC3 = Short.parseShort(s);
} else {
HOSPDC3 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC4(String s) {
if (!s.trim().isEmpty()) {
HOSPDC4 = Byte.parseByte(s);
} else {
HOSPDC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC5(String s) {
if (!s.trim().isEmpty()) {
HOSPDC5 = Byte.parseByte(s);
} else {
HOSPDC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC6(String s) {
if (!s.trim().isEmpty()) {
HOSPDC6 = Byte.parseByte(s);
} else {
HOSPDC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC7(String s) {
if (!s.trim().isEmpty()) {
HOSPDC7 = Byte.parseByte(s);
} else {
HOSPDC7 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC8(String s) {
if (!s.trim().isEmpty()) {
HOSPDC8 = Byte.parseByte(s);
} else {
HOSPDC8 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOSPDC9 = false;
} else {
HOSPDC9 = true;
}
}
}

protected final void initHOUSING(String s) {
if (!s.trim().isEmpty()) {
HOUSING = Byte.parseByte(s);
} else {
HOUSING = Byte.MIN_VALUE;
}
}

protected final void initHOWLNG(String s) {
if (!s.trim().isEmpty()) {
HOWLNG = Short.parseShort(s);
} else {
HOWLNG = Short.MIN_VALUE;
}
}

protected final void initHRPID(String s) {
if (!s.trim().isEmpty()) {
HRPID = Integer.parseInt(s);
} else {
HRPID = Integer.MIN_VALUE;
}
}

protected final void initHRPNO(String s) {
if (!s.trim().isEmpty()) {
HRPNO = Byte.parseByte(s);
} else {
HRPNO = Byte.MIN_VALUE;
}
}

protected final void initHRS_SLPH(String s) {
if (!s.trim().isEmpty()) {
HRS_SLPH = Byte.parseByte(s);
} else {
HRS_SLPH = Byte.MIN_VALUE;
}
}

protected final void initHRS_SLPM(String s) {
if (!s.trim().isEmpty()) {
HRS_SLPM = Byte.parseByte(s);
} else {
HRS_SLPM = Byte.MIN_VALUE;
}
}

protected final void initHUBOSS(String s) {
if (!s.trim().isEmpty()) {
HUBOSS = Byte.parseByte(s);
} else {
HUBOSS = Byte.MIN_VALUE;
}
}

protected final void initHUBUYS(String s) {
if (!s.trim().isEmpty()) {
HUBUYS = Short.parseShort(s);
} else {
HUBUYS = Short.MIN_VALUE;
}
}

protected final void initHUCAR(String s) {
if (!s.trim().isEmpty()) {
HUCAR = Byte.parseByte(s);
} else {
HUCAR = Byte.MIN_VALUE;
}
}

protected final void initHUDIY(String s) {
if (!s.trim().isEmpty()) {
HUDIY = Byte.parseByte(s);
} else {
HUDIY = Byte.MIN_VALUE;
}
}

protected final void initHUFRYS(String s) {
if (!s.trim().isEmpty()) {
HUFRYS = Short.parseShort(s);
} else {
HUFRYS = Short.MIN_VALUE;
}
}

protected final void initHUIRON(String s) {
if (!s.trim().isEmpty()) {
HUIRON = Short.parseShort(s);
} else {
HUIRON = Short.MIN_VALUE;
}
}

protected final void initHUMOPS(String s) {
if (!s.trim().isEmpty()) {
HUMOPS = Short.parseShort(s);
} else {
HUMOPS = Short.MIN_VALUE;
}
}

protected final void initHUPOTS(String s) {
if (!s.trim().isEmpty()) {
HUPOTS = Byte.parseByte(s);
} else {
HUPOTS = Byte.MIN_VALUE;
}
}

protected final void initHURUNS(String s) {
if (!s.trim().isEmpty()) {
HURUNS = Byte.parseByte(s);
} else {
HURUNS = Byte.MIN_VALUE;
}
}

protected final void initHUSITS(String s) {
if (!s.trim().isEmpty()) {
HUSITS = Short.parseShort(s);
} else {
HUSITS = Short.MIN_VALUE;
}
}

protected final void initIENDDATMM(String s) {
if (!s.trim().isEmpty()) {
IENDDATMM = Byte.parseByte(s);
} else {
IENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATSS(String s) {
if (!s.trim().isEmpty()) {
IENDDATSS = Byte.parseByte(s);
} else {
IENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initIND5MUS_LW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_LW = Double.parseDouble(s);
} else {
IND5MUS_LW = Double.NaN;
}
}

protected final void initIND5MUS_XW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_XW = Double.parseDouble(s);
} else {
IND5MUS_XW = Double.NaN;
}
}

protected final void initINDBD91_LW(String s) {
if (!s.trim().isEmpty()) {
INDBD91_LW = Double.parseDouble(s);
} else {
INDBD91_LW = Double.NaN;
}
}

protected final void initINDBDUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDBDUB_LW = Double.parseDouble(s);
} else {
INDBDUB_LW = Double.NaN;
}
}

protected final void initINDIN01_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN01_LW = Double.parseDouble(s);
} else {
INDIN01_LW = Double.NaN;
}
}

protected final void initINDIN91_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN91_LW = Double.parseDouble(s);
} else {
INDIN91_LW = Double.NaN;
}
}

protected final void initINDINUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_LW = Double.parseDouble(s);
} else {
INDINUB_LW = Double.NaN;
}
}

protected final void initINDINUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_XW = Double.parseDouble(s);
} else {
INDINUB_XW = Double.NaN;
}
}

protected final void initINDINUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUS_LW = Double.parseDouble(s);
} else {
INDINUS_LW = Double.NaN;
}
}

protected final void initINDMODE(String s) {
if (!s.trim().isEmpty()) {
INDMODE = Byte.parseByte(s);
} else {
INDMODE = Byte.MIN_VALUE;
}
}

protected final void initINDNS91_LW(String s) {
if (!s.trim().isEmpty()) {
INDNS91_LW = Double.parseDouble(s);
} else {
INDNS91_LW = Double.NaN;
}
}

protected final void initINDNSUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDNSUB_LW = Double.parseDouble(s);
} else {
INDNSUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_LW = Double.parseDouble(s);
} else {
INDPXUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_XW = Double.parseDouble(s);
} else {
INDPXUB_XW = Double.NaN;
}
}

protected final void initINDPXUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUS_LW = Double.parseDouble(s);
} else {
INDPXUS_LW = Double.NaN;
}
}

protected final void initINDSCUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_LW = Double.parseDouble(s);
} else {
INDSCUB_LW = Double.NaN;
}
}

protected final void initINDSCUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_XW = Double.parseDouble(s);
} else {
INDSCUB_XW = Double.NaN;
}
}

protected final void initINDSCUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUS_LW = Double.parseDouble(s);
} else {
INDSCUS_LW = Double.NaN;
}
}

protected final void initINFSAVE1(String s) {
if (!s.trim().isEmpty()) {
INFSAVE1 = Byte.parseByte(s);
} else {
INFSAVE1 = Byte.MIN_VALUE;
}
}

protected final void initINFSAVE2(String s) {
if (!s.trim().isEmpty()) {
INFSAVE2 = Byte.parseByte(s);
} else {
INFSAVE2 = Byte.MIN_VALUE;
}
}

protected final void initINFSAVE3(String s) {
if (!s.trim().isEmpty()) {
INFSAVE3 = Byte.parseByte(s);
} else {
INFSAVE3 = Byte.MIN_VALUE;
}
}

protected final void initINFSAVE4(String s) {
if (!s.trim().isEmpty()) {
INFSAVE4 = Byte.parseByte(s);
} else {
INFSAVE4 = Byte.MIN_VALUE;
}
}

protected final void initINFSAVE5(String s) {
if (!s.trim().isEmpty()) {
INFSAVE5 = Byte.parseByte(s);
} else {
INFSAVE5 = Byte.MIN_VALUE;
}
}

protected final void initINFSAVE6(String s) {
if (!s.trim().isEmpty()) {
INFSAVE6 = Byte.parseByte(s);
} else {
INFSAVE6 = Byte.MIN_VALUE;
}
}

protected final void initINFSAVE96(String s) {
if (!s.trim().isEmpty()) {
INFSAVE96 = Byte.parseByte(s);
} else {
INFSAVE96 = Byte.MIN_VALUE;
}
}

protected final void initINOCONTACT(String s) {
if (!s.trim().isEmpty()) {
INOCONTACT = Byte.parseByte(s);
} else {
INOCONTACT = Byte.MIN_VALUE;
}
}

protected final void initINTCONTACT(String s) {
if (!s.trim().isEmpty()) {
INTCONTACT = Byte.parseByte(s);
} else {
INTCONTACT = Byte.MIN_VALUE;
}
}

protected final void initINTDATDV(String s) {
if (!s.trim().isEmpty()) {
INTDATDV = Byte.parseByte(s);
} else {
INTDATDV = Byte.MIN_VALUE;
}
}

protected final void initINTDATM_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATM_DV = Byte.parseByte(s);
} else {
INTDATM_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATY_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATY_DV = Short.parseShort(s);
} else {
INTDATY_DV = Short.MIN_VALUE;
}
}

protected final void initINTSIGNHEALTH(String s) {
if (!s.trim().isEmpty()) {
INTSIGNHEALTH = Byte.parseByte(s);
} else {
INTSIGNHEALTH = Byte.MIN_VALUE;
}
}

protected final void initINVITRO1(String s) {
if (!s.trim().isEmpty()) {
INVITRO1 = Byte.parseByte(s);
} else {
INVITRO1 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO2(String s) {
if (!s.trim().isEmpty()) {
INVITRO2 = Byte.parseByte(s);
} else {
INVITRO2 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO3(String s) {
if (!s.trim().isEmpty()) {
INVITRO3 = Byte.parseByte(s);
} else {
INVITRO3 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO4(String s) {
if (!s.trim().isEmpty()) {
INVITRO4 = Byte.parseByte(s);
} else {
INVITRO4 = Byte.MIN_VALUE;
}
}

protected final void initIOUTCOME(String s) {
if (!s.trim().isEmpty()) {
IOUTCOME = Byte.parseByte(s);
} else {
IOUTCOME = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATMM = Byte.parseByte(s);
} else {
ISTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATSS = Byte.parseByte(s);
} else {
ISTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initISYEAR(String s) {
if (!s.trim().isEmpty()) {
ISYEAR = Short.parseShort(s);
} else {
ISYEAR = Short.MIN_VALUE;
}
}

protected final void initIVAFFCT11(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT11 = Byte.parseByte(s);
} else {
IVAFFCT11 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT12(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT12 = Byte.parseByte(s);
} else {
IVAFFCT12 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT13(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT13 = Byte.parseByte(s);
} else {
IVAFFCT13 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT14(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT14 = Byte.parseByte(s);
} else {
IVAFFCT14 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT15(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT15 = Byte.parseByte(s);
} else {
IVAFFCT15 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT17(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT17 = Byte.parseByte(s);
} else {
IVAFFCT17 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT21(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT21 = Byte.parseByte(s);
} else {
IVAFFCT21 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT22(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT22 = Byte.parseByte(s);
} else {
IVAFFCT22 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT23(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT23 = Byte.parseByte(s);
} else {
IVAFFCT23 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT27(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT27 = Byte.parseByte(s);
} else {
IVAFFCT27 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT30(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT30 = Byte.parseByte(s);
} else {
IVAFFCT30 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT97(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT97 = Byte.parseByte(s);
} else {
IVAFFCT97 = Byte.MIN_VALUE;
}
}

protected final void initIVCOOP(String s) {
if (!s.trim().isEmpty()) {
IVCOOP = Byte.parseByte(s);
} else {
IVCOOP = Byte.MIN_VALUE;
}
}

protected final void initIVINFNCE(String s) {
if (!s.trim().isEmpty()) {
IVINFNCE = Byte.parseByte(s);
} else {
IVINFNCE = Byte.MIN_VALUE;
}
}

protected final void initIVLIBAL(String s) {
if (!s.trim().isEmpty()) {
IVLIBAL = Byte.parseByte(s);
} else {
IVLIBAL = Byte.MIN_VALUE;
}
}

protected final void initIVLIENG(String s) {
if (!s.trim().isEmpty()) {
IVLIENG = Byte.parseByte(s);
} else {
IVLIENG = Byte.MIN_VALUE;
}
}

protected final void initIVLITRANS(String s) {
if (!s.trim().isEmpty()) {
IVLITRANS = Byte.parseByte(s);
} else {
IVLITRANS = Byte.MIN_VALUE;
}
}

protected final void initIVLIWHO(String s) {
if (!s.trim().isEmpty()) {
IVLIWHO = Byte.parseByte(s);
} else {
IVLIWHO = Byte.MIN_VALUE;
}
}

protected final void initJ1BOSS(String s) {
if (!s.trim().isEmpty()) {
J1BOSS = Byte.parseByte(s);
} else {
J1BOSS = Byte.MIN_VALUE;
}
}

protected final void initJ1MNGR(String s) {
if (!s.trim().isEmpty()) {
J1MNGR = Byte.parseByte(s);
} else {
J1MNGR = Byte.MIN_VALUE;
}
}

protected final void initJ1NONE(String s) {
if (!s.trim().isEmpty()) {
J1NONE = Byte.parseByte(s);
} else {
J1NONE = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC5_DV = Byte.parseByte(s);
} else {
J1NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1SEMP(String s) {
if (!s.trim().isEmpty()) {
J1SEMP = Byte.parseByte(s);
} else {
J1SEMP = Byte.MIN_VALUE;
}
}

protected final void initJ1SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC00_CC = Short.parseShort(s);
} else {
J1SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC10_CC = Short.parseShort(s);
} else {
J1SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC90_CC = Byte.parseByte(s);
} else {
J1SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJ2NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J2NSSEC5_DV = Byte.parseByte(s);
} else {
J2NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ2PAY(String s) {
if (!s.trim().isEmpty()) {
J2PAY = Integer.parseInt(s);
} else {
J2PAY = Integer.MIN_VALUE;
}
}

protected final void initJ2PAYNET_DV(String s) {
if (!s.trim().isEmpty()) {
J2PAYNET_DV = Double.parseDouble(s);
} else {
J2PAYNET_DV = Double.NaN;
}
}

protected final void initJ2SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC00_CC = Short.parseShort(s);
} else {
J2SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC10_CC = Short.parseShort(s);
} else {
J2SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC90_CC = Short.parseShort(s);
} else {
J2SOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBATT1(String s) {
if (!s.trim().isEmpty()) {
JBATT1 = Byte.parseByte(s);
} else {
JBATT1 = Byte.MIN_VALUE;
}
}

protected final void initJBATT2(String s) {
if (!s.trim().isEmpty()) {
JBATT2 = Byte.parseByte(s);
} else {
JBATT2 = Byte.MIN_VALUE;
}
}

protected final void initJBATT3(String s) {
if (!s.trim().isEmpty()) {
JBATT3 = Byte.parseByte(s);
} else {
JBATT3 = Byte.MIN_VALUE;
}
}

protected final void initJBATT4(String s) {
if (!s.trim().isEmpty()) {
JBATT4 = Byte.parseByte(s);
} else {
JBATT4 = Byte.MIN_VALUE;
}
}

protected final void initJBATT5(String s) {
if (!s.trim().isEmpty()) {
JBATT5 = Byte.parseByte(s);
} else {
JBATT5 = Byte.MIN_VALUE;
}
}

protected final void initJBATT6(String s) {
if (!s.trim().isEmpty()) {
JBATT6 = Byte.parseByte(s);
} else {
JBATT6 = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATD(String s) {
if (!s.trim().isEmpty()) {
JBBGDATD = Byte.parseByte(s);
} else {
JBBGDATD = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATM(String s) {
if (!s.trim().isEmpty()) {
JBBGDATM = Byte.parseByte(s);
} else {
JBBGDATM = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATY(String s) {
if (!s.trim().isEmpty()) {
JBBGDATY = Short.parseShort(s);
} else {
JBBGDATY = Short.MIN_VALUE;
}
}

protected final void initJBENDD(String s) {
if (!s.trim().isEmpty()) {
JBENDD = Byte.parseByte(s);
} else {
JBENDD = Byte.MIN_VALUE;
}
}

protected final void initJBENDM(String s) {
if (!s.trim().isEmpty()) {
JBENDM = Byte.parseByte(s);
} else {
JBENDM = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS = Byte.parseByte(s);
} else {
JBENDREAS = Byte.MIN_VALUE;
}
}

protected final void initJBENDY4(String s) {
if (!s.trim().isEmpty()) {
JBENDY4 = Short.parseShort(s);
} else {
JBENDY4 = Short.MIN_VALUE;
}
}

protected final void initJBES2000(String s) {
if (!s.trim().isEmpty()) {
JBES2000 = Byte.parseByte(s);
} else {
JBES2000 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX1(String s) {
if (!s.trim().isEmpty()) {
JBFLEX1 = Byte.parseByte(s);
} else {
JBFLEX1 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX2(String s) {
if (!s.trim().isEmpty()) {
JBFLEX2 = Byte.parseByte(s);
} else {
JBFLEX2 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX3(String s) {
if (!s.trim().isEmpty()) {
JBFLEX3 = Byte.parseByte(s);
} else {
JBFLEX3 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX4(String s) {
if (!s.trim().isEmpty()) {
JBFLEX4 = Byte.parseByte(s);
} else {
JBFLEX4 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX5(String s) {
if (!s.trim().isEmpty()) {
JBFLEX5 = Byte.parseByte(s);
} else {
JBFLEX5 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX6(String s) {
if (!s.trim().isEmpty()) {
JBFLEX6 = Byte.parseByte(s);
} else {
JBFLEX6 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX7(String s) {
if (!s.trim().isEmpty()) {
JBFLEX7 = Byte.parseByte(s);
} else {
JBFLEX7 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX8(String s) {
if (!s.trim().isEmpty()) {
JBFLEX8 = Byte.parseByte(s);
} else {
JBFLEX8 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX96(String s) {
if (!s.trim().isEmpty()) {
JBFLEX96 = Byte.parseByte(s);
} else {
JBFLEX96 = Byte.MIN_VALUE;
}
}

protected final void initJBFXINF(String s) {
if (!s.trim().isEmpty()) {
JBFXINF = Byte.parseByte(s);
} else {
JBFXINF = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE1(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE1 = Byte.parseByte(s);
} else {
JBFXUSE1 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE2(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE2 = Byte.parseByte(s);
} else {
JBFXUSE2 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE3(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE3 = Byte.parseByte(s);
} else {
JBFXUSE3 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE4(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE4 = Byte.parseByte(s);
} else {
JBFXUSE4 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE5(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE5 = Byte.parseByte(s);
} else {
JBFXUSE5 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE6(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE6 = Byte.parseByte(s);
} else {
JBFXUSE6 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE7(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE7 = Byte.parseByte(s);
} else {
JBFXUSE7 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE8(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE8 = Byte.parseByte(s);
} else {
JBFXUSE8 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE96(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE96 = Byte.parseByte(s);
} else {
JBFXUSE96 = Byte.MIN_VALUE;
}
}

protected final void initJBIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JBIINDB_DV = Byte.parseByte(s);
} else {
JBIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHA(String s) {
if (!s.trim().isEmpty()) {
JBLKCHA = Byte.parseByte(s);
} else {
JBLKCHA = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHB(String s) {
if (!s.trim().isEmpty()) {
JBLKCHB = Byte.parseByte(s);
} else {
JBLKCHB = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHC(String s) {
if (!s.trim().isEmpty()) {
JBLKCHC = Byte.parseByte(s);
} else {
JBLKCHC = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHD(String s) {
if (!s.trim().isEmpty()) {
JBLKCHD = Byte.parseByte(s);
} else {
JBLKCHD = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHE(String s) {
if (!s.trim().isEmpty()) {
JBLKCHE = Byte.parseByte(s);
} else {
JBLKCHE = Byte.MIN_VALUE;
}
}

protected final void initJBMNGRCHK(String s) {
if (!s.trim().isEmpty()) {
JBMNGRCHK = Byte.parseByte(s);
} else {
JBMNGRCHK = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC3_DV = Byte.parseByte(s);
} else {
JBNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC5_DV = Byte.parseByte(s);
} else {
JBNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC_DV = Short.parseShort(s);
} else {
JBNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJBOFFY(String s) {
if (!s.trim().isEmpty()) {
JBOFFY = Byte.parseByte(s);
} else {
JBOFFY = Byte.MIN_VALUE;
}
}

protected final void initJBONUS(String s) {
if (!s.trim().isEmpty()) {
JBONUS = Short.parseShort(s);
} else {
JBONUS = Short.MIN_VALUE;
}
}

protected final void initJBPEN(String s) {
if (!s.trim().isEmpty()) {
JBPEN = Short.parseShort(s);
} else {
JBPEN = Short.MIN_VALUE;
}
}

protected final void initJBPENM(String s) {
if (!s.trim().isEmpty()) {
JBPENM = Short.parseShort(s);
} else {
JBPENM = Short.MIN_VALUE;
}
}

protected final void initJBPENY4(String s) {
if (!s.trim().isEmpty()) {
JBPENY4 = Short.parseShort(s);
} else {
JBPENY4 = Short.MIN_VALUE;
}
}

protected final void initJBPERFP(String s) {
if (!s.trim().isEmpty()) {
JBPERFP = Byte.parseByte(s);
} else {
JBPERFP = Byte.MIN_VALUE;
}
}

protected final void initJBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JBRGSC_DV = Short.parseShort(s);
} else {
JBRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJBRISE(String s) {
if (!s.trim().isEmpty()) {
JBRISE = Short.parseShort(s);
} else {
JBRISE = Short.MIN_VALUE;
}
}

protected final void initJBSAMR(String s) {
if (!s.trim().isEmpty()) {
JBSAMR = Byte.parseByte(s);
} else {
JBSAMR = Byte.MIN_VALUE;
}
}

protected final void initJBSAT(String s) {
if (!s.trim().isEmpty()) {
JBSAT = Byte.parseByte(s);
} else {
JBSAT = Byte.MIN_VALUE;
}
}

protected final void initJBSEC(String s) {
if (!s.trim().isEmpty()) {
JBSEC = Byte.parseByte(s);
} else {
JBSEC = Byte.MIN_VALUE;
}
}

protected final void initJBSECTPUB(String s) {
if (!s.trim().isEmpty()) {
JBSECTPUB = Byte.parseByte(s);
} else {
JBSECTPUB = Byte.MIN_VALUE;
}
}

protected final void initJBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JBSEG_DV = Short.parseShort(s);
} else {
JBSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJBSEMPCHK(String s) {
if (!s.trim().isEmpty()) {
JBSEMPCHK = Byte.parseByte(s);
} else {
JBSEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07CHK(String s) {
if (!s.trim().isEmpty()) {
JBSIC07CHK = Byte.parseByte(s);
} else {
JBSIC07CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JBSIC07_CC = Byte.parseByte(s);
} else {
JBSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJBSIZECHK(String s) {
if (!s.trim().isEmpty()) {
JBSIZECHK = Byte.parseByte(s);
} else {
JBSIZECHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00CHK(String s) {
if (!s.trim().isEmpty()) {
JBSOC00CHK = Byte.parseByte(s);
} else {
JBSOC00CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC00_CC = Short.parseShort(s);
} else {
JBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC10_CC = Short.parseShort(s);
} else {
JBSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOCGR_DV(String s) {
if (!s.trim().isEmpty()) {
JBSOCGR_DV = Byte.parseByte(s);
} else {
JBSOCGR_DV = Byte.MIN_VALUE;
}
}

protected final void initJBTERM1(String s) {
if (!s.trim().isEmpty()) {
JBTERM1 = Byte.parseByte(s);
} else {
JBTERM1 = Byte.MIN_VALUE;
}
}

protected final void initJBTERM2(String s) {
if (!s.trim().isEmpty()) {
JBTERM2 = Byte.parseByte(s);
} else {
JBTERM2 = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHA(String s) {
if (!s.trim().isEmpty()) {
JBXPCHA = Byte.parseByte(s);
} else {
JBXPCHA = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHB(String s) {
if (!s.trim().isEmpty()) {
JBXPCHB = Byte.parseByte(s);
} else {
JBXPCHB = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHC(String s) {
if (!s.trim().isEmpty()) {
JBXPCHC = Byte.parseByte(s);
} else {
JBXPCHC = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHD(String s) {
if (!s.trim().isEmpty()) {
JBXPCHD = Byte.parseByte(s);
} else {
JBXPCHD = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHE(String s) {
if (!s.trim().isEmpty()) {
JBXPCHE = Byte.parseByte(s);
} else {
JBXPCHE = Byte.MIN_VALUE;
}
}

protected final void initJLENDM(String s) {
if (!s.trim().isEmpty()) {
JLENDM = Byte.parseByte(s);
} else {
JLENDM = Byte.MIN_VALUE;
}
}

protected final void initJLES2000(String s) {
if (!s.trim().isEmpty()) {
JLES2000 = Byte.parseByte(s);
} else {
JLES2000 = Byte.MIN_VALUE;
}
}

protected final void initJLIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JLIINDB_DV = Byte.parseByte(s);
} else {
JLIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC3_DV = Byte.parseByte(s);
} else {
JLNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC5_DV = Byte.parseByte(s);
} else {
JLNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC_DV = Short.parseShort(s);
} else {
JLNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JLRGSC_DV = Short.parseShort(s);
} else {
JLRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JLSEG_DV = Short.parseShort(s);
} else {
JLSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJLSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JLSIC07_CC = Byte.parseByte(s);
} else {
JLSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJLSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC00_CC = Short.parseShort(s);
} else {
JLSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJLSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC10_CC = Short.parseShort(s);
} else {
JLSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJOBHOURS1(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS1 = Byte.parseByte(s);
} else {
JOBHOURS1 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS2(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS2 = Byte.parseByte(s);
} else {
JOBHOURS2 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS3(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS3 = Byte.parseByte(s);
} else {
JOBHOURS3 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS4(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS4 = Byte.parseByte(s);
} else {
JOBHOURS4 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS5(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS5 = Byte.parseByte(s);
} else {
JOBHOURS5 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS6(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS6 = Byte.parseByte(s);
} else {
JOBHOURS6 = Byte.MIN_VALUE;
}
}

protected final void initJSPART(String s) {
if (!s.trim().isEmpty()) {
JSPART = Byte.parseByte(s);
} else {
JSPART = Byte.MIN_VALUE;
}
}

protected final void initJSPAYU(String s) {
if (!s.trim().isEmpty()) {
JSPAYU = Integer.parseInt(s);
} else {
JSPAYU = Integer.MIN_VALUE;
}
}

protected final void initJSPAYW(String s) {
if (!s.trim().isEmpty()) {
JSPAYW = Byte.parseByte(s);
} else {
JSPAYW = Byte.MIN_VALUE;
}
}

protected final void initJSPRLS(String s) {
if (!s.trim().isEmpty()) {
JSPRLS = Byte.parseByte(s);
} else {
JSPRLS = Byte.MIN_VALUE;
}
}

protected final void initJSPRNI(String s) {
if (!s.trim().isEmpty()) {
JSPRNI = Byte.parseByte(s);
} else {
JSPRNI = Byte.MIN_VALUE;
}
}

protected final void initJSPRTX(String s) {
if (!s.trim().isEmpty()) {
JSPRTX = Byte.parseByte(s);
} else {
JSPRTX = Byte.MIN_VALUE;
}
}

protected final void initJSPYNI(String s) {
if (!s.trim().isEmpty()) {
JSPYNI = Byte.parseByte(s);
} else {
JSPYNI = Byte.MIN_VALUE;
}
}

protected final void initJSPYTX(String s) {
if (!s.trim().isEmpty()) {
JSPYTX = Byte.parseByte(s);
} else {
JSPYTX = Byte.MIN_VALUE;
}
}

protected final void initJSTYPEB(String s) {
if (!s.trim().isEmpty()) {
JSTYPEB = Byte.parseByte(s);
} else {
JSTYPEB = Byte.MIN_VALUE;
}
}

protected final void initJSWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
JSWORKTRAV = Byte.parseByte(s);
} else {
JSWORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initJUBGN(String s) {
if (!s.trim().isEmpty()) {
JUBGN = Short.parseShort(s);
} else {
JUBGN = Short.MIN_VALUE;
}
}

protected final void initJULK4X1(String s) {
if (!s.trim().isEmpty()) {
JULK4X1 = Short.parseShort(s);
} else {
JULK4X1 = Short.MIN_VALUE;
}
}

protected final void initJULK4X2(String s) {
if (!s.trim().isEmpty()) {
JULK4X2 = Short.parseShort(s);
} else {
JULK4X2 = Short.MIN_VALUE;
}
}

protected final void initJULK4X3(String s) {
if (!s.trim().isEmpty()) {
JULK4X3 = Byte.parseByte(s);
} else {
JULK4X3 = Byte.MIN_VALUE;
}
}

protected final void initJULK4X4(String s) {
if (!s.trim().isEmpty()) {
JULK4X4 = Short.parseShort(s);
} else {
JULK4X4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X5(String s) {
if (!s.trim().isEmpty()) {
JULK4X5 = Short.parseShort(s);
} else {
JULK4X5 = Short.MIN_VALUE;
}
}

protected final void initJULK4X6(String s) {
if (!s.trim().isEmpty()) {
JULK4X6 = Short.parseShort(s);
} else {
JULK4X6 = Short.MIN_VALUE;
}
}

protected final void initJULK4X96(String s) {
if (!s.trim().isEmpty()) {
JULK4X96 = Byte.parseByte(s);
} else {
JULK4X96 = Byte.MIN_VALUE;
}
}

protected final void initJWBS1_DV(String s) {
if (!s.trim().isEmpty()) {
JWBS1_DV = Byte.parseByte(s);
} else {
JWBS1_DV = Byte.MIN_VALUE;
}
}

protected final void initJWBS2_DV(String s) {
if (!s.trim().isEmpty()) {
JWBS2_DV = Byte.parseByte(s);
} else {
JWBS2_DV = Byte.MIN_VALUE;
}
}

protected final void initLADOPT(String s) {
if (!s.trim().isEmpty()) {
LADOPT = Byte.parseByte(s);
} else {
LADOPT = Byte.MIN_VALUE;
}
}

protected final void initLATE(String s) {
if (!s.trim().isEmpty()) {
LATE = Byte.parseByte(s);
} else {
LATE = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI1(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI1 = Byte.parseByte(s);
} else {
LCHMULTI1 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI2(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI2 = Byte.parseByte(s);
} else {
LCHMULTI2 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI3(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI3 = Byte.parseByte(s);
} else {
LCHMULTI3 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI4(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI4 = Byte.parseByte(s);
} else {
LCHMULTI4 = Byte.MIN_VALUE;
}
}

protected final void initLCOHNPI(String s) {
if (!s.trim().isEmpty()) {
LCOHNPI = Byte.parseByte(s);
} else {
LCOHNPI = Byte.MIN_VALUE;
}
}

protected final void initLENINDINTV(String s) {
if (!s.trim().isEmpty()) {
LENINDINTV = Double.parseDouble(s);
} else {
LENINDINTV = Double.NaN;
}
}

protected final void initLIENG(String s) {
if (!s.trim().isEmpty()) {
LIENG = Byte.parseByte(s);
} else {
LIENG = Byte.MIN_VALUE;
}
}

protected final void initLIHOW(String s) {
if (!s.trim().isEmpty()) {
LIHOW = Byte.parseByte(s);
} else {
LIHOW = Byte.MIN_VALUE;
}
}

protected final void initLINGUA(String s) {
if (!s.trim().isEmpty()) {
LINGUA = Byte.parseByte(s);
} else {
LINGUA = Byte.MIN_VALUE;
}
}

protected final void initLITRANS(String s) {
if (!s.trim().isEmpty()) {
LITRANS = Byte.parseByte(s);
} else {
LITRANS = Byte.MIN_VALUE;
}
}

protected final void initLIVESP(String s) {
if (!s.trim().isEmpty()) {
LIVESP = Byte.parseByte(s);
} else {
LIVESP = Byte.MIN_VALUE;
}
}

protected final void initLIVESP_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
LIVESP_DV = false;
} else {
LIVESP_DV = true;
}
}
}

protected final void initLIVEWITH(String s) {
if (!s.trim().isEmpty()) {
LIVEWITH = Byte.parseByte(s);
} else {
LIVEWITH = Byte.MIN_VALUE;
}
}

protected final void initLIWHO(String s) {
if (!s.trim().isEmpty()) {
LIWHO = Byte.parseByte(s);
} else {
LIWHO = Byte.MIN_VALUE;
}
}

protected final void initLMAR1M(String s) {
if (!s.trim().isEmpty()) {
LMAR1M = Byte.parseByte(s);
} else {
LMAR1M = Byte.MIN_VALUE;
}
}

protected final void initLMAR1Y(String s) {
if (!s.trim().isEmpty()) {
LMAR1Y = Short.parseShort(s);
} else {
LMAR1Y = Short.MIN_VALUE;
}
}

protected final void initLMCBM1(String s) {
if (!s.trim().isEmpty()) {
LMCBM1 = Byte.parseByte(s);
} else {
LMCBM1 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM2(String s) {
if (!s.trim().isEmpty()) {
LMCBM2 = Byte.parseByte(s);
} else {
LMCBM2 = Byte.MIN_VALUE;
}
}

protected final void initLMCBY41(String s) {
if (!s.trim().isEmpty()) {
LMCBY41 = Short.parseShort(s);
} else {
LMCBY41 = Short.MIN_VALUE;
}
}

protected final void initLMCBY42(String s) {
if (!s.trim().isEmpty()) {
LMCBY42 = Short.parseShort(s);
} else {
LMCBY42 = Short.MIN_VALUE;
}
}

protected final void initLMSPM1(String s) {
if (!s.trim().isEmpty()) {
LMSPM1 = Byte.parseByte(s);
} else {
LMSPM1 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM2(String s) {
if (!s.trim().isEmpty()) {
LMSPM2 = Byte.parseByte(s);
} else {
LMSPM2 = Byte.MIN_VALUE;
}
}

protected final void initLMSPY41(String s) {
if (!s.trim().isEmpty()) {
LMSPY41 = Short.parseShort(s);
} else {
LMSPY41 = Short.MIN_VALUE;
}
}

protected final void initLMSPY42(String s) {
if (!s.trim().isEmpty()) {
LMSPY42 = Short.parseShort(s);
} else {
LMSPY42 = Short.MIN_VALUE;
}
}

protected final void initLNADOPT(String s) {
if (!s.trim().isEmpty()) {
LNADOPT = Byte.parseByte(s);
} else {
LNADOPT = Byte.MIN_VALUE;
}
}

protected final void initLNPRNT(String s) {
if (!s.trim().isEmpty()) {
LNPRNT = Byte.parseByte(s);
} else {
LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initLPRNT(String s) {
if (!s.trim().isEmpty()) {
LPRNT = Byte.parseByte(s);
} else {
LPRNT = Byte.MIN_VALUE;
}
}

protected final void initLVHM(String s) {
if (!s.trim().isEmpty()) {
LVHM = Byte.parseByte(s);
} else {
LVHM = Byte.MIN_VALUE;
}
}

protected final void initLVMTHP(String s) {
if (!s.trim().isEmpty()) {
LVMTHP = Byte.parseByte(s);
} else {
LVMTHP = Byte.MIN_VALUE;
}
}

protected final void initLVSCHDO(String s) {
if (!s.trim().isEmpty()) {
LVSCHDO = Byte.parseByte(s);
} else {
LVSCHDO = Byte.MIN_VALUE;
}
}

protected final void initLVWHY(String s) {
if (!s.trim().isEmpty()) {
LVWHY = Byte.parseByte(s);
} else {
LVWHY = Byte.MIN_VALUE;
}
}

protected final void initLVYRP(String s) {
if (!s.trim().isEmpty()) {
LVYRP = Short.parseShort(s);
} else {
LVYRP = Short.MIN_VALUE;
}
}

protected final void initLWWRONG(String s) {
if (!s.trim().isEmpty()) {
LWWRONG = Byte.parseByte(s);
} else {
LWWRONG = Byte.MIN_VALUE;
}
}

protected final void initMACOB(String s) {
if (!s.trim().isEmpty()) {
MACOB = Byte.parseByte(s);
} else {
MACOB = Byte.MIN_VALUE;
}
}

protected final void initMAJU(String s) {
if (!s.trim().isEmpty()) {
MAJU = Byte.parseByte(s);
} else {
MAJU = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC5_DV = Byte.parseByte(s);
} else {
MANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initMARSTAT(String s) {
if (!s.trim().isEmpty()) {
MARSTAT = Byte.parseByte(s);
} else {
MARSTAT = Byte.MIN_VALUE;
}
}

protected final void initMASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC00_CC = Short.parseShort(s);
} else {
MASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC10_CC = Short.parseShort(s);
} else {
MASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC90_CC = Byte.parseByte(s);
} else {
MASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMASTAT_DV(String s) {
if (!s.trim().isEmpty()) {
MASTAT_DV = Byte.parseByte(s);
} else {
MASTAT_DV = Byte.MIN_VALUE;
}
}

protected final void initMATLEAVE(String s) {
if (!s.trim().isEmpty()) {
MATLEAVE = Byte.parseByte(s);
} else {
MATLEAVE = Byte.MIN_VALUE;
}
}

protected final void initMATLV(String s) {
if (!s.trim().isEmpty()) {
MATLV = Byte.parseByte(s);
} else {
MATLV = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDD(String s) {
if (!s.trim().isEmpty()) {
MATLVENDD = Byte.parseByte(s);
} else {
MATLVENDD = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDM(String s) {
if (!s.trim().isEmpty()) {
MATLVENDM = Byte.parseByte(s);
} else {
MATLVENDM = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDY4(String s) {
if (!s.trim().isEmpty()) {
MATLVENDY4 = Short.parseShort(s);
} else {
MATLVENDY4 = Short.MIN_VALUE;
}
}

protected final void initMATLVSTD(String s) {
if (!s.trim().isEmpty()) {
MATLVSTD = Byte.parseByte(s);
} else {
MATLVSTD = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTM(String s) {
if (!s.trim().isEmpty()) {
MATLVSTM = Byte.parseByte(s);
} else {
MATLVSTM = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTY4(String s) {
if (!s.trim().isEmpty()) {
MATLVSTY4 = Short.parseShort(s);
} else {
MATLVSTY4 = Short.MIN_VALUE;
}
}

protected final void initMAYRUK(String s) {
if (!s.trim().isEmpty()) {
MAYRUK = Byte.parseByte(s);
} else {
MAYRUK = Byte.MIN_VALUE;
}
}

protected final void initMEMPLOY(String s) {
if (!s.trim().isEmpty()) {
MEMPLOY = Byte.parseByte(s);
} else {
MEMPLOY = Byte.MIN_VALUE;
}
}

protected final void initMESLP(String s) {
if (!s.trim().isEmpty()) {
MESLP = Byte.parseByte(s);
} else {
MESLP = Byte.MIN_VALUE;
}
}

protected final void initMLAGST(String s) {
if (!s.trim().isEmpty()) {
MLAGST = Byte.parseByte(s);
} else {
MLAGST = Byte.MIN_VALUE;
}
}

protected final void initMLAGSTU(String s) {
if (!s.trim().isEmpty()) {
MLAGSTU = Byte.parseByte(s);
} else {
MLAGSTU = Byte.MIN_VALUE;
}
}

protected final void initMLFUTR(String s) {
if (!s.trim().isEmpty()) {
MLFUTR = Byte.parseByte(s);
} else {
MLFUTR = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT1(String s) {
if (!s.trim().isEmpty()) {
MLRNOT1 = Byte.parseByte(s);
} else {
MLRNOT1 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT10(String s) {
if (!s.trim().isEmpty()) {
MLRNOT10 = Byte.parseByte(s);
} else {
MLRNOT10 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT11(String s) {
if (!s.trim().isEmpty()) {
MLRNOT11 = Byte.parseByte(s);
} else {
MLRNOT11 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT12(String s) {
if (!s.trim().isEmpty()) {
MLRNOT12 = Byte.parseByte(s);
} else {
MLRNOT12 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT13(String s) {
if (!s.trim().isEmpty()) {
MLRNOT13 = Byte.parseByte(s);
} else {
MLRNOT13 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT2(String s) {
if (!s.trim().isEmpty()) {
MLRNOT2 = Byte.parseByte(s);
} else {
MLRNOT2 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT3(String s) {
if (!s.trim().isEmpty()) {
MLRNOT3 = Byte.parseByte(s);
} else {
MLRNOT3 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT4(String s) {
if (!s.trim().isEmpty()) {
MLRNOT4 = Byte.parseByte(s);
} else {
MLRNOT4 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT5(String s) {
if (!s.trim().isEmpty()) {
MLRNOT5 = Byte.parseByte(s);
} else {
MLRNOT5 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT6(String s) {
if (!s.trim().isEmpty()) {
MLRNOT6 = Byte.parseByte(s);
} else {
MLRNOT6 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT7(String s) {
if (!s.trim().isEmpty()) {
MLRNOT7 = Byte.parseByte(s);
} else {
MLRNOT7 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT8(String s) {
if (!s.trim().isEmpty()) {
MLRNOT8 = Byte.parseByte(s);
} else {
MLRNOT8 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT9(String s) {
if (!s.trim().isEmpty()) {
MLRNOT9 = Byte.parseByte(s);
} else {
MLRNOT9 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT97(String s) {
if (!s.trim().isEmpty()) {
MLRNOT97 = Byte.parseByte(s);
} else {
MLRNOT97 = Byte.MIN_VALUE;
}
}

protected final void initMLSTATCHK(String s) {
if (!s.trim().isEmpty()) {
MLSTATCHK = Byte.parseByte(s);
} else {
MLSTATCHK = Byte.MIN_VALUE;
}
}

protected final void initMLWKFPT(String s) {
if (!s.trim().isEmpty()) {
MLWKFPT = Byte.parseByte(s);
} else {
MLWKFPT = Byte.MIN_VALUE;
}
}

protected final void initMNPID(String s) {
if (!s.trim().isEmpty()) {
MNPID = Integer.parseInt(s);
} else {
MNPID = Integer.MIN_VALUE;
}
}

protected final void initMNPNO(String s) {
if (!s.trim().isEmpty()) {
MNPNO = Byte.parseByte(s);
} else {
MNPNO = Byte.MIN_VALUE;
}
}

protected final void initMNSPID(String s) {
if (!s.trim().isEmpty()) {
MNSPID = Integer.parseInt(s);
} else {
MNSPID = Integer.MIN_VALUE;
}
}

protected final void initMNSPNO(String s) {
if (!s.trim().isEmpty()) {
MNSPNO = Byte.parseByte(s);
} else {
MNSPNO = Byte.MIN_VALUE;
}
}

protected final void initMOBUSE(String s) {
if (!s.trim().isEmpty()) {
MOBUSE = Byte.parseByte(s);
} else {
MOBUSE = Byte.MIN_VALUE;
}
}

protected final void initMONTH(String s) {
if (!s.trim().isEmpty()) {
MONTH = Byte.parseByte(s);
} else {
MONTH = Byte.MIN_VALUE;
}
}

protected final void initMOVDIR(String s) {
if (!s.trim().isEmpty()) {
MOVDIR = Byte.parseByte(s);
} else {
MOVDIR = Byte.MIN_VALUE;
}
}

protected final void initMOVEOTH_CODE(String s) {
if (!s.trim().isEmpty()) {
MOVEOTH_CODE = Byte.parseByte(s);
} else {
MOVEOTH_CODE = Byte.MIN_VALUE;
}
}

protected final void initMOVY11(String s) {
if (!s.trim().isEmpty()) {
MOVY11 = Byte.parseByte(s);
} else {
MOVY11 = Byte.MIN_VALUE;
}
}

protected final void initMOVY12(String s) {
if (!s.trim().isEmpty()) {
MOVY12 = Byte.parseByte(s);
} else {
MOVY12 = Byte.MIN_VALUE;
}
}

protected final void initMOVY13(String s) {
if (!s.trim().isEmpty()) {
MOVY13 = Byte.parseByte(s);
} else {
MOVY13 = Byte.MIN_VALUE;
}
}

protected final void initMOVY14(String s) {
if (!s.trim().isEmpty()) {
MOVY14 = Byte.parseByte(s);
} else {
MOVY14 = Byte.MIN_VALUE;
}
}

protected final void initMOVY15(String s) {
if (!s.trim().isEmpty()) {
MOVY15 = Byte.parseByte(s);
} else {
MOVY15 = Byte.MIN_VALUE;
}
}

protected final void initMOVY16(String s) {
if (!s.trim().isEmpty()) {
MOVY16 = Byte.parseByte(s);
} else {
MOVY16 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH1(String s) {
if (!s.trim().isEmpty()) {
MSTATCH1 = Byte.parseByte(s);
} else {
MSTATCH1 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH2(String s) {
if (!s.trim().isEmpty()) {
MSTATCH2 = Byte.parseByte(s);
} else {
MSTATCH2 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH3(String s) {
if (!s.trim().isEmpty()) {
MSTATCH3 = Byte.parseByte(s);
} else {
MSTATCH3 = Byte.MIN_VALUE;
}
}

protected final void initMSTATSAM(String s) {
if (!s.trim().isEmpty()) {
MSTATSAM = Short.parseShort(s);
} else {
MSTATSAM = Short.MIN_VALUE;
}
}

protected final void initMSTATSAMN(String s) {
if (!s.trim().isEmpty()) {
MSTATSAMN = Byte.parseByte(s);
} else {
MSTATSAMN = Byte.MIN_VALUE;
}
}

protected final void initMVEVER(String s) {
if (!s.trim().isEmpty()) {
MVEVER = Byte.parseByte(s);
} else {
MVEVER = Byte.MIN_VALUE;
}
}

protected final void initMVMNTH(String s) {
if (!s.trim().isEmpty()) {
MVMNTH = Byte.parseByte(s);
} else {
MVMNTH = Byte.MIN_VALUE;
}
}

protected final void initMVYR(String s) {
if (!s.trim().isEmpty()) {
MVYR = Short.parseShort(s);
} else {
MVYR = Short.MIN_VALUE;
}
}

protected final void initNADOPTCH(String s) {
if (!s.trim().isEmpty()) {
NADOPTCH = Byte.parseByte(s);
} else {
NADOPTCH = Byte.MIN_VALUE;
}
}

protected final void initNAIDXHH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH = Byte.parseByte(s);
} else {
NAIDXHH = Byte.MIN_VALUE;
}
}

protected final void initNATCH01(String s) {
if (!s.trim().isEmpty()) {
NATCH01 = Byte.parseByte(s);
} else {
NATCH01 = Byte.MIN_VALUE;
}
}

protected final void initNATCH02(String s) {
if (!s.trim().isEmpty()) {
NATCH02 = Byte.parseByte(s);
} else {
NATCH02 = Byte.MIN_VALUE;
}
}

protected final void initNATCH03(String s) {
if (!s.trim().isEmpty()) {
NATCH03 = Byte.parseByte(s);
} else {
NATCH03 = Byte.MIN_VALUE;
}
}

protected final void initNATCH04(String s) {
if (!s.trim().isEmpty()) {
NATCH04 = Byte.parseByte(s);
} else {
NATCH04 = Byte.MIN_VALUE;
}
}

protected final void initNATCH05(String s) {
if (!s.trim().isEmpty()) {
NATCH05 = Byte.parseByte(s);
} else {
NATCH05 = Byte.MIN_VALUE;
}
}

protected final void initNATCH06(String s) {
if (!s.trim().isEmpty()) {
NATCH06 = Byte.parseByte(s);
} else {
NATCH06 = Byte.MIN_VALUE;
}
}

protected final void initNATCH07(String s) {
if (!s.trim().isEmpty()) {
NATCH07 = Byte.parseByte(s);
} else {
NATCH07 = Byte.MIN_VALUE;
}
}

protected final void initNATCH08(String s) {
if (!s.trim().isEmpty()) {
NATCH08 = Byte.parseByte(s);
} else {
NATCH08 = Byte.MIN_VALUE;
}
}

protected final void initNATCH09(String s) {
if (!s.trim().isEmpty()) {
NATCH09 = Byte.parseByte(s);
} else {
NATCH09 = Byte.MIN_VALUE;
}
}

protected final void initNATCH10(String s) {
if (!s.trim().isEmpty()) {
NATCH10 = Byte.parseByte(s);
} else {
NATCH10 = Byte.MIN_VALUE;
}
}

protected final void initNATCH11(String s) {
if (!s.trim().isEmpty()) {
NATCH11 = Byte.parseByte(s);
} else {
NATCH11 = Byte.MIN_VALUE;
}
}

protected final void initNATCH12(String s) {
if (!s.trim().isEmpty()) {
NATCH12 = Byte.parseByte(s);
} else {
NATCH12 = Byte.MIN_VALUE;
}
}

protected final void initNATCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH13 = false;
} else {
NATCH13 = true;
}
}
}

protected final void initNATCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH14 = false;
} else {
NATCH14 = true;
}
}
}

protected final void initNATCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH15 = false;
} else {
NATCH15 = true;
}
}
}

protected final void initNATCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH16 = false;
} else {
NATCH16 = true;
}
}
}

protected final void initNATID1(String s) {
if (!s.trim().isEmpty()) {
NATID1 = Byte.parseByte(s);
} else {
NATID1 = Byte.MIN_VALUE;
}
}

protected final void initNATID2(String s) {
if (!s.trim().isEmpty()) {
NATID2 = Byte.parseByte(s);
} else {
NATID2 = Byte.MIN_VALUE;
}
}

protected final void initNATID3(String s) {
if (!s.trim().isEmpty()) {
NATID3 = Byte.parseByte(s);
} else {
NATID3 = Byte.MIN_VALUE;
}
}

protected final void initNATID4(String s) {
if (!s.trim().isEmpty()) {
NATID4 = Byte.parseByte(s);
} else {
NATID4 = Byte.MIN_VALUE;
}
}

protected final void initNATID5(String s) {
if (!s.trim().isEmpty()) {
NATID5 = Byte.parseByte(s);
} else {
NATID5 = Byte.MIN_VALUE;
}
}

protected final void initNATID6(String s) {
if (!s.trim().isEmpty()) {
NATID6 = Byte.parseByte(s);
} else {
NATID6 = Byte.MIN_VALUE;
}
}

protected final void initNATID97(String s) {
if (!s.trim().isEmpty()) {
NATID97 = Byte.parseByte(s);
} else {
NATID97 = Byte.MIN_VALUE;
}
}

protected final void initNCARS(String s) {
if (!s.trim().isEmpty()) {
NCARS = Byte.parseByte(s);
} else {
NCARS = Byte.MIN_VALUE;
}
}

protected final void initNCCJT(String s) {
if (!s.trim().isEmpty()) {
NCCJT = Byte.parseByte(s);
} else {
NCCJT = Byte.MIN_VALUE;
}
}

protected final void initNCCSOLE(String s) {
if (!s.trim().isEmpty()) {
NCCSOLE = Byte.parseByte(s);
} else {
NCCSOLE = Byte.MIN_VALUE;
}
}

protected final void initNCH10(String s) {
if (!s.trim().isEmpty()) {
NCH10 = Byte.parseByte(s);
} else {
NCH10 = Byte.MIN_VALUE;
}
}

protected final void initNCH10TO15(String s) {
if (!s.trim().isEmpty()) {
NCH10TO15 = Byte.parseByte(s);
} else {
NCH10TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH14RESP(String s) {
if (!s.trim().isEmpty()) {
NCH14RESP = Byte.parseByte(s);
} else {
NCH14RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH3RESP(String s) {
if (!s.trim().isEmpty()) {
NCH3RESP = Byte.parseByte(s);
} else {
NCH3RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH415RESP(String s) {
if (!s.trim().isEmpty()) {
NCH415RESP = Byte.parseByte(s);
} else {
NCH415RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5RESP(String s) {
if (!s.trim().isEmpty()) {
NCH5RESP = Byte.parseByte(s);
} else {
NCH5RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5TO15(String s) {
if (!s.trim().isEmpty()) {
NCH5TO15 = Byte.parseByte(s);
} else {
NCH5TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH8RESP(String s) {
if (!s.trim().isEmpty()) {
NCH8RESP = Byte.parseByte(s);
} else {
NCH8RESP = Byte.MIN_VALUE;
}
}

protected final void initNCHILD(String s) {
if (!s.trim().isEmpty()) {
NCHILD = Byte.parseByte(s);
} else {
NCHILD = Byte.MIN_VALUE;
}
}

protected final void initNCHILDV(String s) {
if (!s.trim().isEmpty()) {
NCHILDV = Byte.parseByte(s);
} else {
NCHILDV = Byte.MIN_VALUE;
}
}

protected final void initNCHRESP(String s) {
if (!s.trim().isEmpty()) {
NCHRESP = Byte.parseByte(s);
} else {
NCHRESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUND18RESP(String s) {
if (!s.trim().isEmpty()) {
NCHUND18RESP = Byte.parseByte(s);
} else {
NCHUND18RESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUNDER16(String s) {
if (!s.trim().isEmpty()) {
NCHUNDER16 = Byte.parseByte(s);
} else {
NCHUNDER16 = Byte.MIN_VALUE;
}
}

protected final void initNCRR1(String s) {
if (!s.trim().isEmpty()) {
NCRR1 = Byte.parseByte(s);
} else {
NCRR1 = Byte.MIN_VALUE;
}
}

protected final void initNCRR11(String s) {
if (!s.trim().isEmpty()) {
NCRR11 = Byte.parseByte(s);
} else {
NCRR11 = Byte.MIN_VALUE;
}
}

protected final void initNCRR12(String s) {
if (!s.trim().isEmpty()) {
NCRR12 = Byte.parseByte(s);
} else {
NCRR12 = Byte.MIN_VALUE;
}
}

protected final void initNCRR3(String s) {
if (!s.trim().isEmpty()) {
NCRR3 = Byte.parseByte(s);
} else {
NCRR3 = Byte.MIN_VALUE;
}
}

protected final void initNCRR4(String s) {
if (!s.trim().isEmpty()) {
NCRR4 = Byte.parseByte(s);
} else {
NCRR4 = Byte.MIN_VALUE;
}
}

protected final void initNCRR5(String s) {
if (!s.trim().isEmpty()) {
NCRR5 = Byte.parseByte(s);
} else {
NCRR5 = Byte.MIN_VALUE;
}
}

protected final void initNCRR6(String s) {
if (!s.trim().isEmpty()) {
NCRR6 = Byte.parseByte(s);
} else {
NCRR6 = Byte.MIN_VALUE;
}
}

protected final void initNCRR8(String s) {
if (!s.trim().isEmpty()) {
NCRR8 = Byte.parseByte(s);
} else {
NCRR8 = Byte.MIN_VALUE;
}
}

protected final void initNCRR9(String s) {
if (!s.trim().isEmpty()) {
NCRR9 = Byte.parseByte(s);
} else {
NCRR9 = Byte.MIN_VALUE;
}
}

protected final void initNCRRM(String s) {
if (!s.trim().isEmpty()) {
NCRRM = Byte.parseByte(s);
} else {
NCRRM = Byte.MIN_VALUE;
}
}

protected final void initNCRRY4(String s) {
if (!s.trim().isEmpty()) {
NCRRY4 = Short.parseShort(s);
} else {
NCRRY4 = Short.MIN_VALUE;
}
}

protected final void initNDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
NDEPCHL_DV = Byte.parseByte(s);
} else {
NDEPCHL_DV = Byte.MIN_VALUE;
}
}

protected final void initNETPUSE(String s) {
if (!s.trim().isEmpty()) {
NETPUSE = Byte.parseByte(s);
} else {
NETPUSE = Byte.MIN_VALUE;
}
}

protected final void initNETUSE(String s) {
if (!s.trim().isEmpty()) {
NETUSE = Byte.parseByte(s);
} else {
NETUSE = Byte.MIN_VALUE;
}
}

protected final void initNEXT(String s) {
if (!s.trim().isEmpty()) {
NEXT = Byte.parseByte(s);
} else {
NEXT = Byte.MIN_VALUE;
}
}

protected final void initNEXT1(String s) {
if (!s.trim().isEmpty()) {
NEXT1 = Byte.parseByte(s);
} else {
NEXT1 = Byte.MIN_VALUE;
}
}

protected final void initNEXT2(String s) {
if (!s.trim().isEmpty()) {
NEXT2 = Byte.parseByte(s);
} else {
NEXT2 = Byte.MIN_VALUE;
}
}

protected final void initNEXT3(String s) {
if (!s.trim().isEmpty()) {
NEXT3 = Byte.parseByte(s);
} else {
NEXT3 = Byte.MIN_VALUE;
}
}

protected final void initNEXT4(String s) {
if (!s.trim().isEmpty()) {
NEXT4 = Byte.parseByte(s);
} else {
NEXT4 = Byte.MIN_VALUE;
}
}

protected final void initNEXT5(String s) {
if (!s.trim().isEmpty()) {
NEXT5 = Byte.parseByte(s);
} else {
NEXT5 = Byte.MIN_VALUE;
}
}

protected final void initNEXT6(String s) {
if (!s.trim().isEmpty()) {
NEXT6 = Byte.parseByte(s);
} else {
NEXT6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE1(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE1 = Byte.parseByte(s);
} else {
NEXTELSE1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE2(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE2 = Byte.parseByte(s);
} else {
NEXTELSE2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE3(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE3 = Byte.parseByte(s);
} else {
NEXTELSE3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE4(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE4 = Byte.parseByte(s);
} else {
NEXTELSE4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE5(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE5 = Byte.parseByte(s);
} else {
NEXTELSE5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE6(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE6 = Byte.parseByte(s);
} else {
NEXTELSE6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB1(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB1 = Byte.parseByte(s);
} else {
NEXTJOB1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB2(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB2 = Byte.parseByte(s);
} else {
NEXTJOB2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB3(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB3 = Byte.parseByte(s);
} else {
NEXTJOB3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB4(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB4 = Byte.parseByte(s);
} else {
NEXTJOB4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB5(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB5 = Byte.parseByte(s);
} else {
NEXTJOB5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB6(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB6 = Byte.parseByte(s);
} else {
NEXTJOB6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT1(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT1 = Byte.parseByte(s);
} else {
NEXTSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT2(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT2 = Byte.parseByte(s);
} else {
NEXTSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT3(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT3 = Byte.parseByte(s);
} else {
NEXTSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT4(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT4 = Byte.parseByte(s);
} else {
NEXTSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT5(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT5 = Byte.parseByte(s);
} else {
NEXTSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT6(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT6 = Byte.parseByte(s);
} else {
NEXTSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initNFH01(String s) {
if (!s.trim().isEmpty()) {
NFH01 = Byte.parseByte(s);
} else {
NFH01 = Byte.MIN_VALUE;
}
}

protected final void initNFH02(String s) {
if (!s.trim().isEmpty()) {
NFH02 = Byte.parseByte(s);
} else {
NFH02 = Byte.MIN_VALUE;
}
}

protected final void initNFH03(String s) {
if (!s.trim().isEmpty()) {
NFH03 = Byte.parseByte(s);
} else {
NFH03 = Byte.MIN_VALUE;
}
}

protected final void initNFH04(String s) {
if (!s.trim().isEmpty()) {
NFH04 = Byte.parseByte(s);
} else {
NFH04 = Byte.MIN_VALUE;
}
}

protected final void initNFH05(String s) {
if (!s.trim().isEmpty()) {
NFH05 = Byte.parseByte(s);
} else {
NFH05 = Byte.MIN_VALUE;
}
}

protected final void initNFH06(String s) {
if (!s.trim().isEmpty()) {
NFH06 = Byte.parseByte(s);
} else {
NFH06 = Byte.MIN_VALUE;
}
}

protected final void initNFH07(String s) {
if (!s.trim().isEmpty()) {
NFH07 = Byte.parseByte(s);
} else {
NFH07 = Byte.MIN_VALUE;
}
}

protected final void initNFH08(String s) {
if (!s.trim().isEmpty()) {
NFH08 = Byte.parseByte(s);
} else {
NFH08 = Byte.MIN_VALUE;
}
}

protected final void initNFH09(String s) {
if (!s.trim().isEmpty()) {
NFH09 = Byte.parseByte(s);
} else {
NFH09 = Byte.MIN_VALUE;
}
}

protected final void initNFH10(String s) {
if (!s.trim().isEmpty()) {
NFH10 = Byte.parseByte(s);
} else {
NFH10 = Byte.MIN_VALUE;
}
}

protected final void initNFH11(String s) {
if (!s.trim().isEmpty()) {
NFH11 = Byte.parseByte(s);
} else {
NFH11 = Byte.MIN_VALUE;
}
}

protected final void initNFH12(String s) {
if (!s.trim().isEmpty()) {
NFH12 = Byte.parseByte(s);
} else {
NFH12 = Byte.MIN_VALUE;
}
}

protected final void initNFH13(String s) {
if (!s.trim().isEmpty()) {
NFH13 = Byte.parseByte(s);
} else {
NFH13 = Byte.MIN_VALUE;
}
}

protected final void initNFH14(String s) {
if (!s.trim().isEmpty()) {
NFH14 = Byte.parseByte(s);
} else {
NFH14 = Byte.MIN_VALUE;
}
}

protected final void initNFH15(String s) {
if (!s.trim().isEmpty()) {
NFH15 = Byte.parseByte(s);
} else {
NFH15 = Byte.MIN_VALUE;
}
}

protected final void initNFH16(String s) {
if (!s.trim().isEmpty()) {
NFH16 = Byte.parseByte(s);
} else {
NFH16 = Byte.MIN_VALUE;
}
}

protected final void initNFH17(String s) {
if (!s.trim().isEmpty()) {
NFH17 = Byte.parseByte(s);
} else {
NFH17 = Byte.MIN_VALUE;
}
}

protected final void initNFH18(String s) {
if (!s.trim().isEmpty()) {
NFH18 = Byte.parseByte(s);
} else {
NFH18 = Byte.MIN_VALUE;
}
}

protected final void initNFH19(String s) {
if (!s.trim().isEmpty()) {
NFH19 = Byte.parseByte(s);
} else {
NFH19 = Byte.MIN_VALUE;
}
}

protected final void initNFH20(String s) {
if (!s.trim().isEmpty()) {
NFH20 = Byte.parseByte(s);
} else {
NFH20 = Byte.MIN_VALUE;
}
}

protected final void initNFH21(String s) {
if (!s.trim().isEmpty()) {
NFH21 = Byte.parseByte(s);
} else {
NFH21 = Byte.MIN_VALUE;
}
}

protected final void initNFH22(String s) {
if (!s.trim().isEmpty()) {
NFH22 = Byte.parseByte(s);
} else {
NFH22 = Byte.MIN_VALUE;
}
}

protected final void initNFH23(String s) {
if (!s.trim().isEmpty()) {
NFH23 = Byte.parseByte(s);
} else {
NFH23 = Byte.MIN_VALUE;
}
}

protected final void initNFH24(String s) {
if (!s.trim().isEmpty()) {
NFH24 = Byte.parseByte(s);
} else {
NFH24 = Byte.MIN_VALUE;
}
}

protected final void initNFH25(String s) {
if (!s.trim().isEmpty()) {
NFH25 = Byte.parseByte(s);
} else {
NFH25 = Byte.MIN_VALUE;
}
}

protected final void initNFH26(String s) {
if (!s.trim().isEmpty()) {
NFH26 = Byte.parseByte(s);
} else {
NFH26 = Byte.MIN_VALUE;
}
}

protected final void initNFH27(String s) {
if (!s.trim().isEmpty()) {
NFH27 = Byte.parseByte(s);
} else {
NFH27 = Byte.MIN_VALUE;
}
}

protected final void initNFH28(String s) {
if (!s.trim().isEmpty()) {
NFH28 = Byte.parseByte(s);
} else {
NFH28 = Byte.MIN_VALUE;
}
}

protected final void initNFH29(String s) {
if (!s.trim().isEmpty()) {
NFH29 = Byte.parseByte(s);
} else {
NFH29 = Byte.MIN_VALUE;
}
}

protected final void initNFH30(String s) {
if (!s.trim().isEmpty()) {
NFH30 = Byte.parseByte(s);
} else {
NFH30 = Byte.MIN_VALUE;
}
}

protected final void initNFH31(String s) {
if (!s.trim().isEmpty()) {
NFH31 = Byte.parseByte(s);
} else {
NFH31 = Byte.MIN_VALUE;
}
}

protected final void initNFH32(String s) {
if (!s.trim().isEmpty()) {
NFH32 = Byte.parseByte(s);
} else {
NFH32 = Byte.MIN_VALUE;
}
}

protected final void initNFH33(String s) {
if (!s.trim().isEmpty()) {
NFH33 = Byte.parseByte(s);
} else {
NFH33 = Byte.MIN_VALUE;
}
}

protected final void initNFH34(String s) {
if (!s.trim().isEmpty()) {
NFH34 = Byte.parseByte(s);
} else {
NFH34 = Byte.MIN_VALUE;
}
}

protected final void initNFH35(String s) {
if (!s.trim().isEmpty()) {
NFH35 = Byte.parseByte(s);
} else {
NFH35 = Byte.MIN_VALUE;
}
}

protected final void initNFH36(String s) {
if (!s.trim().isEmpty()) {
NFH36 = Byte.parseByte(s);
} else {
NFH36 = Byte.MIN_VALUE;
}
}

protected final void initNFH37(String s) {
if (!s.trim().isEmpty()) {
NFH37 = Byte.parseByte(s);
} else {
NFH37 = Byte.MIN_VALUE;
}
}

protected final void initNFH38(String s) {
if (!s.trim().isEmpty()) {
NFH38 = Byte.parseByte(s);
} else {
NFH38 = Byte.MIN_VALUE;
}
}

protected final void initNFH39(String s) {
if (!s.trim().isEmpty()) {
NFH39 = Byte.parseByte(s);
} else {
NFH39 = Byte.MIN_VALUE;
}
}

protected final void initNFLYEU(String s) {
if (!s.trim().isEmpty()) {
NFLYEU = Byte.parseByte(s);
} else {
NFLYEU = Byte.MIN_VALUE;
}
}

protected final void initNFLYIN(String s) {
if (!s.trim().isEmpty()) {
NFLYIN = Byte.parseByte(s);
} else {
NFLYIN = Byte.MIN_VALUE;
}
}

protected final void initNFLYOS(String s) {
if (!s.trim().isEmpty()) {
NFLYOS = Byte.parseByte(s);
} else {
NFLYOS = Byte.MIN_VALUE;
}
}

protected final void initNGRP_DV(String s) {
if (!s.trim().isEmpty()) {
NGRP_DV = Byte.parseByte(s);
} else {
NGRP_DV = Byte.MIN_VALUE;
}
}

protected final void initNHIQUAL_DV(String s) {
if (!s.trim().isEmpty()) {
NHIQUAL_DV = Byte.parseByte(s);
} else {
NHIQUAL_DV = Byte.MIN_VALUE;
}
}

protected final void initNIACT(String s) {
if (!s.trim().isEmpty()) {
NIACT = Byte.parseByte(s);
} else {
NIACT = Byte.MIN_VALUE;
}
}

protected final void initNIREL(String s) {
if (!s.trim().isEmpty()) {
NIREL = Byte.parseByte(s);
} else {
NIREL = Byte.MIN_VALUE;
}
}

protected final void initNISERPS(String s) {
if (!s.trim().isEmpty()) {
NISERPS = Byte.parseByte(s);
} else {
NISERPS = Byte.MIN_VALUE;
}
}

protected final void initNMAR(String s) {
if (!s.trim().isEmpty()) {
NMAR = Byte.parseByte(s);
} else {
NMAR = Byte.MIN_VALUE;
}
}

protected final void initNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NMPSP_DV = Byte.parseByte(s);
} else {
NMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNATCH(String s) {
if (!s.trim().isEmpty()) {
NNATCH = Byte.parseByte(s);
} else {
NNATCH = Byte.MIN_VALUE;
}
}

protected final void initNNEWBORN(String s) {
if (!s.trim().isEmpty()) {
NNEWBORN = Byte.parseByte(s);
} else {
NNEWBORN = Byte.MIN_VALUE;
}
}

protected final void initNNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NNMPSP_DV = Byte.parseByte(s);
} else {
NNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSIB_DV = Byte.parseByte(s);
} else {
NNSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSSIB_DV = Byte.parseByte(s);
} else {
NNSSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNOSVY(String s) {
if (!s.trim().isEmpty()) {
NOSVY = Byte.parseByte(s);
} else {
NOSVY = Byte.MIN_VALUE;
}
}

protected final void initNOTEMPCHK(String s) {
if (!s.trim().isEmpty()) {
NOTEMPCHK = Byte.parseByte(s);
} else {
NOTEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initNPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER_DV = Byte.parseByte(s);
} else {
NPENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initNPNS_DV(String s) {
if (!s.trim().isEmpty()) {
NPNS_DV = Byte.parseByte(s);
} else {
NPNS_DV = Byte.MIN_VALUE;
}
}

protected final void initNPN_DV(String s) {
if (!s.trim().isEmpty()) {
NPN_DV = Byte.parseByte(s);
} else {
NPN_DV = Byte.MIN_VALUE;
}
}

protected final void initNQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
NQFHIGH_DV = Byte.parseByte(s);
} else {
NQFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initNUNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NUNMPSP_DV = Byte.parseByte(s);
} else {
NUNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDD(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDD = Byte.parseByte(s);
} else {
NXTJBENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDM(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDM = Byte.parseByte(s);
} else {
NXTJBENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDY4 = Short.parseShort(s);
} else {
NXTJBENDY4 = Short.MIN_VALUE;
}
}

protected final void initNXTJBES(String s) {
if (!s.trim().isEmpty()) {
NXTJBES = Byte.parseByte(s);
} else {
NXTJBES = Byte.MIN_VALUE;
}
}

protected final void initNXTJBHRS(String s) {
if (!s.trim().isEmpty()) {
NXTJBHRS = Byte.parseByte(s);
} else {
NXTJBHRS = Byte.MIN_VALUE;
}
}

protected final void initNXTST(String s) {
if (!s.trim().isEmpty()) {
NXTST = Byte.parseByte(s);
} else {
NXTST = Byte.MIN_VALUE;
}
}

protected final void initNXTSTELSE(String s) {
if (!s.trim().isEmpty()) {
NXTSTELSE = Byte.parseByte(s);
} else {
NXTSTELSE = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDD(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDD = Byte.parseByte(s);
} else {
NXTSTENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDM(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDM = Byte.parseByte(s);
} else {
NXTSTENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDY4 = Short.parseShort(s);
} else {
NXTSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initOLYMACT11(String s) {
if (!s.trim().isEmpty()) {
OLYMACT11 = Byte.parseByte(s);
} else {
OLYMACT11 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT12(String s) {
if (!s.trim().isEmpty()) {
OLYMACT12 = Byte.parseByte(s);
} else {
OLYMACT12 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT13(String s) {
if (!s.trim().isEmpty()) {
OLYMACT13 = Byte.parseByte(s);
} else {
OLYMACT13 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT14(String s) {
if (!s.trim().isEmpty()) {
OLYMACT14 = Byte.parseByte(s);
} else {
OLYMACT14 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT15(String s) {
if (!s.trim().isEmpty()) {
OLYMACT15 = Byte.parseByte(s);
} else {
OLYMACT15 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT16(String s) {
if (!s.trim().isEmpty()) {
OLYMACT16 = Byte.parseByte(s);
} else {
OLYMACT16 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT17(String s) {
if (!s.trim().isEmpty()) {
OLYMACT17 = Byte.parseByte(s);
} else {
OLYMACT17 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT18(String s) {
if (!s.trim().isEmpty()) {
OLYMACT18 = Byte.parseByte(s);
} else {
OLYMACT18 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT196(String s) {
if (!s.trim().isEmpty()) {
OLYMACT196 = Byte.parseByte(s);
} else {
OLYMACT196 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT198(String s) {
if (!s.trim().isEmpty()) {
OLYMACT198 = Byte.parseByte(s);
} else {
OLYMACT198 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT21(String s) {
if (!s.trim().isEmpty()) {
OLYMACT21 = Byte.parseByte(s);
} else {
OLYMACT21 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT22(String s) {
if (!s.trim().isEmpty()) {
OLYMACT22 = Byte.parseByte(s);
} else {
OLYMACT22 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT23(String s) {
if (!s.trim().isEmpty()) {
OLYMACT23 = Byte.parseByte(s);
} else {
OLYMACT23 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT24(String s) {
if (!s.trim().isEmpty()) {
OLYMACT24 = Byte.parseByte(s);
} else {
OLYMACT24 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT25(String s) {
if (!s.trim().isEmpty()) {
OLYMACT25 = Byte.parseByte(s);
} else {
OLYMACT25 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT26(String s) {
if (!s.trim().isEmpty()) {
OLYMACT26 = Byte.parseByte(s);
} else {
OLYMACT26 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT27(String s) {
if (!s.trim().isEmpty()) {
OLYMACT27 = Byte.parseByte(s);
} else {
OLYMACT27 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT28(String s) {
if (!s.trim().isEmpty()) {
OLYMACT28 = Byte.parseByte(s);
} else {
OLYMACT28 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT296(String s) {
if (!s.trim().isEmpty()) {
OLYMACT296 = Byte.parseByte(s);
} else {
OLYMACT296 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT298(String s) {
if (!s.trim().isEmpty()) {
OLYMACT298 = Byte.parseByte(s);
} else {
OLYMACT298 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT31(String s) {
if (!s.trim().isEmpty()) {
OLYMACT31 = Byte.parseByte(s);
} else {
OLYMACT31 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT32(String s) {
if (!s.trim().isEmpty()) {
OLYMACT32 = Byte.parseByte(s);
} else {
OLYMACT32 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT33(String s) {
if (!s.trim().isEmpty()) {
OLYMACT33 = Byte.parseByte(s);
} else {
OLYMACT33 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT34(String s) {
if (!s.trim().isEmpty()) {
OLYMACT34 = Byte.parseByte(s);
} else {
OLYMACT34 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT35(String s) {
if (!s.trim().isEmpty()) {
OLYMACT35 = Byte.parseByte(s);
} else {
OLYMACT35 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT36(String s) {
if (!s.trim().isEmpty()) {
OLYMACT36 = Byte.parseByte(s);
} else {
OLYMACT36 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT37(String s) {
if (!s.trim().isEmpty()) {
OLYMACT37 = Byte.parseByte(s);
} else {
OLYMACT37 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT38(String s) {
if (!s.trim().isEmpty()) {
OLYMACT38 = Byte.parseByte(s);
} else {
OLYMACT38 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT396(String s) {
if (!s.trim().isEmpty()) {
OLYMACT396 = Byte.parseByte(s);
} else {
OLYMACT396 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT398(String s) {
if (!s.trim().isEmpty()) {
OLYMACT398 = Byte.parseByte(s);
} else {
OLYMACT398 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS11(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS11 = Byte.parseByte(s);
} else {
OLYMPAS11 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS12(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS12 = Byte.parseByte(s);
} else {
OLYMPAS12 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS13(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS13 = Byte.parseByte(s);
} else {
OLYMPAS13 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS14(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS14 = Byte.parseByte(s);
} else {
OLYMPAS14 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS15(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS15 = Byte.parseByte(s);
} else {
OLYMPAS15 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS196(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS196 = Byte.parseByte(s);
} else {
OLYMPAS196 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS198(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS198 = Byte.parseByte(s);
} else {
OLYMPAS198 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS21(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS21 = Byte.parseByte(s);
} else {
OLYMPAS21 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS22(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS22 = Byte.parseByte(s);
} else {
OLYMPAS22 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS23(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS23 = Byte.parseByte(s);
} else {
OLYMPAS23 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS24(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS24 = Byte.parseByte(s);
} else {
OLYMPAS24 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS25(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS25 = Byte.parseByte(s);
} else {
OLYMPAS25 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS296(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS296 = Byte.parseByte(s);
} else {
OLYMPAS296 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS298(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS298 = Byte.parseByte(s);
} else {
OLYMPAS298 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS31(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS31 = Byte.parseByte(s);
} else {
OLYMPAS31 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS32(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS32 = Byte.parseByte(s);
} else {
OLYMPAS32 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS33(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS33 = Byte.parseByte(s);
} else {
OLYMPAS33 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS34(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS34 = Byte.parseByte(s);
} else {
OLYMPAS34 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS35(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS35 = Byte.parseByte(s);
} else {
OLYMPAS35 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS396(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS396 = Byte.parseByte(s);
} else {
OLYMPAS396 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS398(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS398 = Byte.parseByte(s);
} else {
OLYMPAS398 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG(String s) {
if (!s.trim().isEmpty()) {
OPRLG = Byte.parseByte(s);
} else {
OPRLG = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0(String s) {
if (!s.trim().isEmpty()) {
OPRLG0 = Byte.parseByte(s);
} else {
OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
OPRLG0NI = Byte.parseByte(s);
} else {
OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initOPRLG1(String s) {
if (!s.trim().isEmpty()) {
OPRLG1 = Byte.parseByte(s);
} else {
OPRLG1 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG2(String s) {
if (!s.trim().isEmpty()) {
OPRLG2 = Byte.parseByte(s);
} else {
OPRLG2 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG3(String s) {
if (!s.trim().isEmpty()) {
OPRLG3 = Byte.parseByte(s);
} else {
OPRLG3 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV1(String s) {
if (!s.trim().isEmpty()) {
OPSERV1 = Byte.parseByte(s);
} else {
OPSERV1 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV10(String s) {
if (!s.trim().isEmpty()) {
OPSERV10 = Byte.parseByte(s);
} else {
OPSERV10 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV2(String s) {
if (!s.trim().isEmpty()) {
OPSERV2 = Byte.parseByte(s);
} else {
OPSERV2 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV3(String s) {
if (!s.trim().isEmpty()) {
OPSERV3 = Byte.parseByte(s);
} else {
OPSERV3 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV4(String s) {
if (!s.trim().isEmpty()) {
OPSERV4 = Byte.parseByte(s);
} else {
OPSERV4 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV5(String s) {
if (!s.trim().isEmpty()) {
OPSERV5 = Byte.parseByte(s);
} else {
OPSERV5 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV6(String s) {
if (!s.trim().isEmpty()) {
OPSERV6 = Byte.parseByte(s);
} else {
OPSERV6 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV7(String s) {
if (!s.trim().isEmpty()) {
OPSERV7 = Byte.parseByte(s);
} else {
OPSERV7 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV8(String s) {
if (!s.trim().isEmpty()) {
OPSERV8 = Byte.parseByte(s);
} else {
OPSERV8 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV9(String s) {
if (!s.trim().isEmpty()) {
OPSERV9 = Byte.parseByte(s);
} else {
OPSERV9 = Byte.MIN_VALUE;
}
}

protected final void initORIGADD(String s) {
if (!s.trim().isEmpty()) {
ORIGADD = Byte.parseByte(s);
} else {
ORIGADD = Byte.MIN_VALUE;
}
}

protected final void initOTHCONT(String s) {
if (!s.trim().isEmpty()) {
OTHCONT = Byte.parseByte(s);
} else {
OTHCONT = Byte.MIN_VALUE;
}
}

protected final void initOVTNSA(String s) {
if (!s.trim().isEmpty()) {
OVTNSA = Byte.parseByte(s);
} else {
OVTNSA = Byte.MIN_VALUE;
}
}

protected final void initOVTPAY(String s) {
if (!s.trim().isEmpty()) {
OVTPAY = Byte.parseByte(s);
} else {
OVTPAY = Byte.MIN_VALUE;
}
}

protected final void initOVTRATE(String s) {
if (!s.trim().isEmpty()) {
OVTRATE = Double.parseDouble(s);
} else {
OVTRATE = Double.NaN;
}
}

protected final void initOVTREST(String s) {
if (!s.trim().isEmpty()) {
OVTREST = Byte.parseByte(s);
} else {
OVTREST = Byte.MIN_VALUE;
}
}

protected final void initPACOB(String s) {
if (!s.trim().isEmpty()) {
PACOB = Byte.parseByte(s);
} else {
PACOB = Byte.MIN_VALUE;
}
}

protected final void initPAJU(String s) {
if (!s.trim().isEmpty()) {
PAJU = Byte.parseByte(s);
} else {
PAJU = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC5_DV = Byte.parseByte(s);
} else {
PANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initPASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC00_CC = Short.parseShort(s);
} else {
PASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC10_CC = Short.parseShort(s);
} else {
PASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC90_CC = Byte.parseByte(s);
} else {
PASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPAYGWC(String s) {
if (!s.trim().isEmpty()) {
PAYGWC = Byte.parseByte(s);
} else {
PAYGWC = Byte.MIN_VALUE;
}
}

protected final void initPAYG_DV(String s) {
if (!s.trim().isEmpty()) {
PAYG_DV = Double.parseDouble(s);
} else {
PAYG_DV = Double.NaN;
}
}

protected final void initPAYNWC(String s) {
if (!s.trim().isEmpty()) {
PAYNWC = Byte.parseByte(s);
} else {
PAYNWC = Byte.MIN_VALUE;
}
}

protected final void initPAYRUK(String s) {
if (!s.trim().isEmpty()) {
PAYRUK = Byte.parseByte(s);
} else {
PAYRUK = Byte.MIN_VALUE;
}
}

protected final void initPAYTYP(String s) {
if (!s.trim().isEmpty()) {
PAYTYP = Byte.parseByte(s);
} else {
PAYTYP = Byte.MIN_VALUE;
}
}

protected final void initPAYUWC(String s) {
if (!s.trim().isEmpty()) {
PAYUWC = Byte.parseByte(s);
} else {
PAYUWC = Byte.MIN_VALUE;
}
}

protected final void initPAYU_DV(String s) {
if (!s.trim().isEmpty()) {
PAYU_DV = Double.parseDouble(s);
} else {
PAYU_DV = Double.NaN;
}
}

protected final void initPBNFT1(String s) {
if (!s.trim().isEmpty()) {
PBNFT1 = Byte.parseByte(s);
} else {
PBNFT1 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT10(String s) {
if (!s.trim().isEmpty()) {
PBNFT10 = Byte.parseByte(s);
} else {
PBNFT10 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT11(String s) {
if (!s.trim().isEmpty()) {
PBNFT11 = Byte.parseByte(s);
} else {
PBNFT11 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT12(String s) {
if (!s.trim().isEmpty()) {
PBNFT12 = Byte.parseByte(s);
} else {
PBNFT12 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT13(String s) {
if (!s.trim().isEmpty()) {
PBNFT13 = Byte.parseByte(s);
} else {
PBNFT13 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT2(String s) {
if (!s.trim().isEmpty()) {
PBNFT2 = Byte.parseByte(s);
} else {
PBNFT2 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT3(String s) {
if (!s.trim().isEmpty()) {
PBNFT3 = Byte.parseByte(s);
} else {
PBNFT3 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT4(String s) {
if (!s.trim().isEmpty()) {
PBNFT4 = Byte.parseByte(s);
} else {
PBNFT4 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT5(String s) {
if (!s.trim().isEmpty()) {
PBNFT5 = Byte.parseByte(s);
} else {
PBNFT5 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT6(String s) {
if (!s.trim().isEmpty()) {
PBNFT6 = Byte.parseByte(s);
} else {
PBNFT6 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT7(String s) {
if (!s.trim().isEmpty()) {
PBNFT7 = Byte.parseByte(s);
} else {
PBNFT7 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT8(String s) {
if (!s.trim().isEmpty()) {
PBNFT8 = Byte.parseByte(s);
} else {
PBNFT8 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT9(String s) {
if (!s.trim().isEmpty()) {
PBNFT9 = Byte.parseByte(s);
} else {
PBNFT9 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT96(String s) {
if (!s.trim().isEmpty()) {
PBNFT96 = Byte.parseByte(s);
} else {
PBNFT96 = Byte.MIN_VALUE;
}
}

protected final void initPENMCN(String s) {
if (!s.trim().isEmpty()) {
PENMCN = Byte.parseByte(s);
} else {
PENMCN = Byte.MIN_VALUE;
}
}

protected final void initPENMEX(String s) {
if (!s.trim().isEmpty()) {
PENMEX = Byte.parseByte(s);
} else {
PENMEX = Byte.MIN_VALUE;
}
}

protected final void initPENMPY(String s) {
if (!s.trim().isEmpty()) {
PENMPY = Double.parseDouble(s);
} else {
PENMPY = Double.NaN;
}
}

protected final void initPENMTP(String s) {
if (!s.trim().isEmpty()) {
PENMTP = Byte.parseByte(s);
} else {
PENMTP = Byte.MIN_VALUE;
}
}

protected final void initPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
PENSIONER_DV = Byte.parseByte(s);
} else {
PENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initPENSPB(String s) {
if (!s.trim().isEmpty()) {
PENSPB = Byte.parseByte(s);
} else {
PENSPB = Byte.MIN_VALUE;
}
}

protected final void initPID(String s) {
if (!s.trim().isEmpty()) {
PID = Integer.parseInt(s);
} else {
PID = Integer.MIN_VALUE;
}
}

protected final void initPJBPTFT(String s) {
if (!s.trim().isEmpty()) {
PJBPTFT = Byte.parseByte(s);
} else {
PJBPTFT = Byte.MIN_VALUE;
}
}

protected final void initPJSPTFT(String s) {
if (!s.trim().isEmpty()) {
PJSPTFT = Byte.parseByte(s);
} else {
PJSPTFT = Byte.MIN_VALUE;
}
}

protected final void initPLIVPAR(String s) {
if (!s.trim().isEmpty()) {
PLIVPAR = Byte.parseByte(s);
} else {
PLIVPAR = Byte.MIN_VALUE;
}
}

protected final void initPLNOWM(String s) {
if (!s.trim().isEmpty()) {
PLNOWM = Short.parseShort(s);
} else {
PLNOWM = Short.MIN_VALUE;
}
}

protected final void initPLNOWY4(String s) {
if (!s.trim().isEmpty()) {
PLNOWY4 = Short.parseShort(s);
} else {
PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initPN1PID(String s) {
if (!s.trim().isEmpty()) {
PN1PID = Integer.parseInt(s);
} else {
PN1PID = Integer.MIN_VALUE;
}
}

protected final void initPN1PNO(String s) {
if (!s.trim().isEmpty()) {
PN1PNO = Byte.parseByte(s);
} else {
PN1PNO = Byte.MIN_VALUE;
}
}

protected final void initPN1SEX(String s) {
if (!s.trim().isEmpty()) {
PN1SEX = Byte.parseByte(s);
} else {
PN1SEX = Byte.MIN_VALUE;
}
}

protected final void initPN2PID(String s) {
if (!s.trim().isEmpty()) {
PN2PID = Integer.parseInt(s);
} else {
PN2PID = Integer.MIN_VALUE;
}
}

protected final void initPN2PNO(String s) {
if (!s.trim().isEmpty()) {
PN2PNO = Byte.parseByte(s);
} else {
PN2PNO = Byte.MIN_VALUE;
}
}

protected final void initPN2SEX(String s) {
if (!s.trim().isEmpty()) {
PN2SEX = Byte.parseByte(s);
} else {
PN2SEX = Byte.MIN_VALUE;
}
}

protected final void initPNCARS(String s) {
if (!s.trim().isEmpty()) {
PNCARS = Byte.parseByte(s);
} else {
PNCARS = Byte.MIN_VALUE;
}
}

protected final void initPNS1PID(String s) {
if (!s.trim().isEmpty()) {
PNS1PID = Integer.parseInt(s);
} else {
PNS1PID = Integer.MIN_VALUE;
}
}

protected final void initPNS1PNO(String s) {
if (!s.trim().isEmpty()) {
PNS1PNO = Byte.parseByte(s);
} else {
PNS1PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS1SEX(String s) {
if (!s.trim().isEmpty()) {
PNS1SEX = Byte.parseByte(s);
} else {
PNS1SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS2PID(String s) {
if (!s.trim().isEmpty()) {
PNS2PID = Integer.parseInt(s);
} else {
PNS2PID = Integer.MIN_VALUE;
}
}

protected final void initPNS2PNO(String s) {
if (!s.trim().isEmpty()) {
PNS2PNO = Byte.parseByte(s);
} else {
PNS2PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS2SEX(String s) {
if (!s.trim().isEmpty()) {
PNS2SEX = Byte.parseByte(s);
} else {
PNS2SEX = Byte.MIN_VALUE;
}
}

protected final void initPPEN(String s) {
if (!s.trim().isEmpty()) {
PPEN = Byte.parseByte(s);
} else {
PPEN = Byte.MIN_VALUE;
}
}

protected final void initPPENSIONER(String s) {
if (!s.trim().isEmpty()) {
PPENSIONER = Byte.parseByte(s);
} else {
PPENSIONER = Byte.MIN_VALUE;
}
}

protected final void initPPENT(String s) {
if (!s.trim().isEmpty()) {
PPENT = Byte.parseByte(s);
} else {
PPENT = Byte.MIN_VALUE;
}
}

protected final void initPPID(String s) {
if (!s.trim().isEmpty()) {
PPID = Integer.parseInt(s);
} else {
PPID = Integer.MIN_VALUE;
}
}

protected final void initPPPEX(String s) {
if (!s.trim().isEmpty()) {
PPPEX = Byte.parseByte(s);
} else {
PPPEX = Byte.MIN_VALUE;
}
}

protected final void initPPPEXM(String s) {
if (!s.trim().isEmpty()) {
PPPEXM = Byte.parseByte(s);
} else {
PPPEXM = Byte.MIN_VALUE;
}
}

protected final void initPPRAM(String s) {
if (!s.trim().isEmpty()) {
PPRAM = Integer.parseInt(s);
} else {
PPRAM = Integer.MIN_VALUE;
}
}

protected final void initPPRAMPC(String s) {
if (!s.trim().isEmpty()) {
PPRAMPC = Byte.parseByte(s);
} else {
PPRAMPC = Byte.MIN_VALUE;
}
}

protected final void initPPREG(String s) {
if (!s.trim().isEmpty()) {
PPREG = Byte.parseByte(s);
} else {
PPREG = Byte.MIN_VALUE;
}
}

protected final void initPPSEX(String s) {
if (!s.trim().isEmpty()) {
PPSEX = Byte.parseByte(s);
} else {
PPSEX = Byte.MIN_VALUE;
}
}

protected final void initPPYRS(String s) {
if (!s.trim().isEmpty()) {
PPYRS = Short.parseShort(s);
} else {
PPYRS = Short.MIN_VALUE;
}
}

protected final void initPRAYFREQ(String s) {
if (!s.trim().isEmpty()) {
PRAYFREQ = Byte.parseByte(s);
} else {
PRAYFREQ = Byte.MIN_VALUE;
}
}

protected final void initPREARN(String s) {
if (!s.trim().isEmpty()) {
PREARN = Byte.parseByte(s);
} else {
PREARN = Byte.MIN_VALUE;
}
}

protected final void initPREARNA(String s) {
if (!s.trim().isEmpty()) {
PREARNA = Byte.parseByte(s);
} else {
PREARNA = Byte.MIN_VALUE;
}
}

protected final void initPREARNW(String s) {
if (!s.trim().isEmpty()) {
PREARNW = Byte.parseByte(s);
} else {
PREARNW = Byte.MIN_VALUE;
}
}

protected final void initPREASON(String s) {
if (!s.trim().isEmpty()) {
PREASON = Byte.parseByte(s);
} else {
PREASON = Byte.MIN_VALUE;
}
}

protected final void initPREG(String s) {
if (!s.trim().isEmpty()) {
PREG = Byte.parseByte(s);
} else {
PREG = Byte.MIN_VALUE;
}
}

protected final void initPREGEND1(String s) {
if (!s.trim().isEmpty()) {
PREGEND1 = Byte.parseByte(s);
} else {
PREGEND1 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND2(String s) {
if (!s.trim().isEmpty()) {
PREGEND2 = Byte.parseByte(s);
} else {
PREGEND2 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND3(String s) {
if (!s.trim().isEmpty()) {
PREGEND3 = Byte.parseByte(s);
} else {
PREGEND3 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND4(String s) {
if (!s.trim().isEmpty()) {
PREGEND4 = Byte.parseByte(s);
} else {
PREGEND4 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT1(String s) {
if (!s.trim().isEmpty()) {
PREGFERT1 = Byte.parseByte(s);
} else {
PREGFERT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT2(String s) {
if (!s.trim().isEmpty()) {
PREGFERT2 = Byte.parseByte(s);
} else {
PREGFERT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT3(String s) {
if (!s.trim().isEmpty()) {
PREGFERT3 = Byte.parseByte(s);
} else {
PREGFERT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT4(String s) {
if (!s.trim().isEmpty()) {
PREGFERT4 = Byte.parseByte(s);
} else {
PREGFERT4 = Byte.MIN_VALUE;
}
}

protected final void initPREGM1(String s) {
if (!s.trim().isEmpty()) {
PREGM1 = Byte.parseByte(s);
} else {
PREGM1 = Byte.MIN_VALUE;
}
}

protected final void initPREGM2(String s) {
if (!s.trim().isEmpty()) {
PREGM2 = Byte.parseByte(s);
} else {
PREGM2 = Byte.MIN_VALUE;
}
}

protected final void initPREGM3(String s) {
if (!s.trim().isEmpty()) {
PREGM3 = Byte.parseByte(s);
} else {
PREGM3 = Byte.MIN_VALUE;
}
}

protected final void initPREGM4(String s) {
if (!s.trim().isEmpty()) {
PREGM4 = Byte.parseByte(s);
} else {
PREGM4 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT1(String s) {
if (!s.trim().isEmpty()) {
PREGOUT1 = Byte.parseByte(s);
} else {
PREGOUT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT2(String s) {
if (!s.trim().isEmpty()) {
PREGOUT2 = Byte.parseByte(s);
} else {
PREGOUT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT3(String s) {
if (!s.trim().isEmpty()) {
PREGOUT3 = Byte.parseByte(s);
} else {
PREGOUT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT4(String s) {
if (!s.trim().isEmpty()) {
PREGOUT4 = Byte.parseByte(s);
} else {
PREGOUT4 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK11(String s) {
if (!s.trim().isEmpty()) {
PREGSMK11 = Byte.parseByte(s);
} else {
PREGSMK11 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK12(String s) {
if (!s.trim().isEmpty()) {
PREGSMK12 = Byte.parseByte(s);
} else {
PREGSMK12 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK13(String s) {
if (!s.trim().isEmpty()) {
PREGSMK13 = Byte.parseByte(s);
} else {
PREGSMK13 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK14(String s) {
if (!s.trim().isEmpty()) {
PREGSMK14 = Byte.parseByte(s);
} else {
PREGSMK14 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK21(String s) {
if (!s.trim().isEmpty()) {
PREGSMK21 = Byte.parseByte(s);
} else {
PREGSMK21 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK22(String s) {
if (!s.trim().isEmpty()) {
PREGSMK22 = Byte.parseByte(s);
} else {
PREGSMK22 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK23(String s) {
if (!s.trim().isEmpty()) {
PREGSMK23 = Byte.parseByte(s);
} else {
PREGSMK23 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK24(String s) {
if (!s.trim().isEmpty()) {
PREGSMK24 = Byte.parseByte(s);
} else {
PREGSMK24 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK31(String s) {
if (!s.trim().isEmpty()) {
PREGSMK31 = Byte.parseByte(s);
} else {
PREGSMK31 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK32(String s) {
if (!s.trim().isEmpty()) {
PREGSMK32 = Byte.parseByte(s);
} else {
PREGSMK32 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK33(String s) {
if (!s.trim().isEmpty()) {
PREGSMK33 = Byte.parseByte(s);
} else {
PREGSMK33 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK34(String s) {
if (!s.trim().isEmpty()) {
PREGSMK34 = Byte.parseByte(s);
} else {
PREGSMK34 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE1(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE1 = Byte.parseByte(s);
} else {
PREGSMOKE1 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE2(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE2 = Byte.parseByte(s);
} else {
PREGSMOKE2 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE3(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE3 = Byte.parseByte(s);
} else {
PREGSMOKE3 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE4(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE4 = Byte.parseByte(s);
} else {
PREGSMOKE4 = Byte.MIN_VALUE;
}
}

protected final void initPREGY41(String s) {
if (!s.trim().isEmpty()) {
PREGY41 = Short.parseShort(s);
} else {
PREGY41 = Short.MIN_VALUE;
}
}

protected final void initPREGY42(String s) {
if (!s.trim().isEmpty()) {
PREGY42 = Short.parseShort(s);
} else {
PREGY42 = Short.MIN_VALUE;
}
}

protected final void initPREGY43(String s) {
if (!s.trim().isEmpty()) {
PREGY43 = Short.parseShort(s);
} else {
PREGY43 = Short.MIN_VALUE;
}
}

protected final void initPREGY44(String s) {
if (!s.trim().isEmpty()) {
PREGY44 = Short.parseShort(s);
} else {
PREGY44 = Short.MIN_VALUE;
}
}

protected final void initPREL(String s) {
if (!s.trim().isEmpty()) {
PREL = Byte.parseByte(s);
} else {
PREL = Byte.MIN_VALUE;
}
}

protected final void initPRFITB(String s) {
if (!s.trim().isEmpty()) {
PRFITB = Byte.parseByte(s);
} else {
PRFITB = Byte.MIN_VALUE;
}
}

protected final void initPRFITBA(String s) {
if (!s.trim().isEmpty()) {
PRFITBA = Byte.parseByte(s);
} else {
PRFITBA = Byte.MIN_VALUE;
}
}

protected final void initPRFITBW(String s) {
if (!s.trim().isEmpty()) {
PRFITBW = Byte.parseByte(s);
} else {
PRFITBW = Byte.MIN_VALUE;
}
}

protected final void initPS1(String s) {
if (!s.trim().isEmpty()) {
PS1 = Byte.parseByte(s);
} else {
PS1 = Byte.MIN_VALUE;
}
}

protected final void initPS10(String s) {
if (!s.trim().isEmpty()) {
PS10 = Byte.parseByte(s);
} else {
PS10 = Byte.MIN_VALUE;
}
}

protected final void initPS11(String s) {
if (!s.trim().isEmpty()) {
PS11 = Byte.parseByte(s);
} else {
PS11 = Byte.MIN_VALUE;
}
}

protected final void initPS12(String s) {
if (!s.trim().isEmpty()) {
PS12 = Byte.parseByte(s);
} else {
PS12 = Byte.MIN_VALUE;
}
}

protected final void initPS13(String s) {
if (!s.trim().isEmpty()) {
PS13 = Byte.parseByte(s);
} else {
PS13 = Byte.MIN_VALUE;
}
}

protected final void initPS14(String s) {
if (!s.trim().isEmpty()) {
PS14 = Byte.parseByte(s);
} else {
PS14 = Byte.MIN_VALUE;
}
}

protected final void initPS15(String s) {
if (!s.trim().isEmpty()) {
PS15 = Byte.parseByte(s);
} else {
PS15 = Byte.MIN_VALUE;
}
}

protected final void initPS16(String s) {
if (!s.trim().isEmpty()) {
PS16 = Byte.parseByte(s);
} else {
PS16 = Byte.MIN_VALUE;
}
}

protected final void initPS17(String s) {
if (!s.trim().isEmpty()) {
PS17 = Byte.parseByte(s);
} else {
PS17 = Byte.MIN_VALUE;
}
}

protected final void initPS18(String s) {
if (!s.trim().isEmpty()) {
PS18 = Byte.parseByte(s);
} else {
PS18 = Byte.MIN_VALUE;
}
}

protected final void initPS19(String s) {
if (!s.trim().isEmpty()) {
PS19 = Byte.parseByte(s);
} else {
PS19 = Byte.MIN_VALUE;
}
}

protected final void initPS2(String s) {
if (!s.trim().isEmpty()) {
PS2 = Byte.parseByte(s);
} else {
PS2 = Byte.MIN_VALUE;
}
}

protected final void initPS20(String s) {
if (!s.trim().isEmpty()) {
PS20 = Byte.parseByte(s);
} else {
PS20 = Byte.MIN_VALUE;
}
}

protected final void initPS21(String s) {
if (!s.trim().isEmpty()) {
PS21 = Byte.parseByte(s);
} else {
PS21 = Byte.MIN_VALUE;
}
}

protected final void initPS22(String s) {
if (!s.trim().isEmpty()) {
PS22 = Byte.parseByte(s);
} else {
PS22 = Byte.MIN_VALUE;
}
}

protected final void initPS23(String s) {
if (!s.trim().isEmpty()) {
PS23 = Byte.parseByte(s);
} else {
PS23 = Byte.MIN_VALUE;
}
}

protected final void initPS24(String s) {
if (!s.trim().isEmpty()) {
PS24 = Byte.parseByte(s);
} else {
PS24 = Byte.MIN_VALUE;
}
}

protected final void initPS25(String s) {
if (!s.trim().isEmpty()) {
PS25 = Byte.parseByte(s);
} else {
PS25 = Byte.MIN_VALUE;
}
}

protected final void initPS26(String s) {
if (!s.trim().isEmpty()) {
PS26 = Byte.parseByte(s);
} else {
PS26 = Byte.MIN_VALUE;
}
}

protected final void initPS27(String s) {
if (!s.trim().isEmpty()) {
PS27 = Byte.parseByte(s);
} else {
PS27 = Byte.MIN_VALUE;
}
}

protected final void initPS28(String s) {
if (!s.trim().isEmpty()) {
PS28 = Byte.parseByte(s);
} else {
PS28 = Byte.MIN_VALUE;
}
}

protected final void initPS29(String s) {
if (!s.trim().isEmpty()) {
PS29 = Byte.parseByte(s);
} else {
PS29 = Byte.MIN_VALUE;
}
}

protected final void initPS3(String s) {
if (!s.trim().isEmpty()) {
PS3 = Byte.parseByte(s);
} else {
PS3 = Byte.MIN_VALUE;
}
}

protected final void initPS30(String s) {
if (!s.trim().isEmpty()) {
PS30 = Byte.parseByte(s);
} else {
PS30 = Byte.MIN_VALUE;
}
}

protected final void initPS31(String s) {
if (!s.trim().isEmpty()) {
PS31 = Byte.parseByte(s);
} else {
PS31 = Byte.MIN_VALUE;
}
}

protected final void initPS32(String s) {
if (!s.trim().isEmpty()) {
PS32 = Byte.parseByte(s);
} else {
PS32 = Byte.MIN_VALUE;
}
}

protected final void initPS4(String s) {
if (!s.trim().isEmpty()) {
PS4 = Byte.parseByte(s);
} else {
PS4 = Byte.MIN_VALUE;
}
}

protected final void initPS5(String s) {
if (!s.trim().isEmpty()) {
PS5 = Byte.parseByte(s);
} else {
PS5 = Byte.MIN_VALUE;
}
}

protected final void initPS6(String s) {
if (!s.trim().isEmpty()) {
PS6 = Byte.parseByte(s);
} else {
PS6 = Byte.MIN_VALUE;
}
}

protected final void initPS7(String s) {
if (!s.trim().isEmpty()) {
PS7 = Byte.parseByte(s);
} else {
PS7 = Byte.MIN_VALUE;
}
}

protected final void initPS8(String s) {
if (!s.trim().isEmpty()) {
PS8 = Byte.parseByte(s);
} else {
PS8 = Byte.MIN_VALUE;
}
}

protected final void initPS9(String s) {
if (!s.trim().isEmpty()) {
PS9 = Byte.parseByte(s);
} else {
PS9 = Byte.MIN_VALUE;
}
}

protected final void initPSDQA_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQA_DV = Byte.parseByte(s);
} else {
PSDQA_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQB_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQB_DV = Byte.parseByte(s);
} else {
PSDQB_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQC_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQC_DV = Byte.parseByte(s);
} else {
PSDQC_DV = Byte.MIN_VALUE;
}
}

protected final void initPSIBLINGS(String s) {
if (!s.trim().isEmpty()) {
PSIBLINGS = Byte.parseByte(s);
} else {
PSIBLINGS = Byte.MIN_VALUE;
}
}

protected final void initPSNUMCH(String s) {
if (!s.trim().isEmpty()) {
PSNUMCH = Byte.parseByte(s);
} else {
PSNUMCH = Byte.MIN_VALUE;
}
}

protected final void initPSU(String s) {
if (!s.trim().isEmpty()) {
PSU = Integer.parseInt(s);
} else {
PSU = Integer.MIN_VALUE;
}
}

protected final void initQFHIGH(String s) {
if (!s.trim().isEmpty()) {
QFHIGH = Byte.parseByte(s);
} else {
QFHIGH = Byte.MIN_VALUE;
}
}

protected final void initQFHIGHFL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
QFHIGHFL_DV = false;
} else {
QFHIGHFL_DV = true;
}
}
}

protected final void initQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
QFHIGH_DV = Byte.parseByte(s);
} else {
QFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initQFVOC1(String s) {
if (!s.trim().isEmpty()) {
QFVOC1 = Byte.parseByte(s);
} else {
QFVOC1 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC10(String s) {
if (!s.trim().isEmpty()) {
QFVOC10 = Byte.parseByte(s);
} else {
QFVOC10 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC11(String s) {
if (!s.trim().isEmpty()) {
QFVOC11 = Byte.parseByte(s);
} else {
QFVOC11 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC12(String s) {
if (!s.trim().isEmpty()) {
QFVOC12 = Byte.parseByte(s);
} else {
QFVOC12 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC13(String s) {
if (!s.trim().isEmpty()) {
QFVOC13 = Byte.parseByte(s);
} else {
QFVOC13 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC14(String s) {
if (!s.trim().isEmpty()) {
QFVOC14 = Byte.parseByte(s);
} else {
QFVOC14 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC15(String s) {
if (!s.trim().isEmpty()) {
QFVOC15 = Byte.parseByte(s);
} else {
QFVOC15 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC2(String s) {
if (!s.trim().isEmpty()) {
QFVOC2 = Byte.parseByte(s);
} else {
QFVOC2 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC3(String s) {
if (!s.trim().isEmpty()) {
QFVOC3 = Byte.parseByte(s);
} else {
QFVOC3 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC4(String s) {
if (!s.trim().isEmpty()) {
QFVOC4 = Byte.parseByte(s);
} else {
QFVOC4 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC5(String s) {
if (!s.trim().isEmpty()) {
QFVOC5 = Byte.parseByte(s);
} else {
QFVOC5 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC6(String s) {
if (!s.trim().isEmpty()) {
QFVOC6 = Byte.parseByte(s);
} else {
QFVOC6 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC7(String s) {
if (!s.trim().isEmpty()) {
QFVOC7 = Byte.parseByte(s);
} else {
QFVOC7 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC8(String s) {
if (!s.trim().isEmpty()) {
QFVOC8 = Byte.parseByte(s);
} else {
QFVOC8 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC9(String s) {
if (!s.trim().isEmpty()) {
QFVOC9 = Byte.parseByte(s);
} else {
QFVOC9 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC96(String s) {
if (!s.trim().isEmpty()) {
QFVOC96 = Byte.parseByte(s);
} else {
QFVOC96 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW1(String s) {
if (!s.trim().isEmpty()) {
QUALNEW1 = Byte.parseByte(s);
} else {
QUALNEW1 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW10(String s) {
if (!s.trim().isEmpty()) {
QUALNEW10 = Byte.parseByte(s);
} else {
QUALNEW10 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW11(String s) {
if (!s.trim().isEmpty()) {
QUALNEW11 = Byte.parseByte(s);
} else {
QUALNEW11 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW13(String s) {
if (!s.trim().isEmpty()) {
QUALNEW13 = Byte.parseByte(s);
} else {
QUALNEW13 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW15(String s) {
if (!s.trim().isEmpty()) {
QUALNEW15 = Byte.parseByte(s);
} else {
QUALNEW15 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW16(String s) {
if (!s.trim().isEmpty()) {
QUALNEW16 = Byte.parseByte(s);
} else {
QUALNEW16 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW17(String s) {
if (!s.trim().isEmpty()) {
QUALNEW17 = Byte.parseByte(s);
} else {
QUALNEW17 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW18(String s) {
if (!s.trim().isEmpty()) {
QUALNEW18 = Byte.parseByte(s);
} else {
QUALNEW18 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW19(String s) {
if (!s.trim().isEmpty()) {
QUALNEW19 = Byte.parseByte(s);
} else {
QUALNEW19 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW2(String s) {
if (!s.trim().isEmpty()) {
QUALNEW2 = Byte.parseByte(s);
} else {
QUALNEW2 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW20(String s) {
if (!s.trim().isEmpty()) {
QUALNEW20 = Byte.parseByte(s);
} else {
QUALNEW20 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW21(String s) {
if (!s.trim().isEmpty()) {
QUALNEW21 = Byte.parseByte(s);
} else {
QUALNEW21 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW22(String s) {
if (!s.trim().isEmpty()) {
QUALNEW22 = Byte.parseByte(s);
} else {
QUALNEW22 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW23(String s) {
if (!s.trim().isEmpty()) {
QUALNEW23 = Byte.parseByte(s);
} else {
QUALNEW23 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW24(String s) {
if (!s.trim().isEmpty()) {
QUALNEW24 = Byte.parseByte(s);
} else {
QUALNEW24 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW25(String s) {
if (!s.trim().isEmpty()) {
QUALNEW25 = Byte.parseByte(s);
} else {
QUALNEW25 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW26(String s) {
if (!s.trim().isEmpty()) {
QUALNEW26 = Byte.parseByte(s);
} else {
QUALNEW26 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW27(String s) {
if (!s.trim().isEmpty()) {
QUALNEW27 = Byte.parseByte(s);
} else {
QUALNEW27 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW28(String s) {
if (!s.trim().isEmpty()) {
QUALNEW28 = Byte.parseByte(s);
} else {
QUALNEW28 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW29(String s) {
if (!s.trim().isEmpty()) {
QUALNEW29 = Byte.parseByte(s);
} else {
QUALNEW29 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW3(String s) {
if (!s.trim().isEmpty()) {
QUALNEW3 = Byte.parseByte(s);
} else {
QUALNEW3 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW30(String s) {
if (!s.trim().isEmpty()) {
QUALNEW30 = Byte.parseByte(s);
} else {
QUALNEW30 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW31(String s) {
if (!s.trim().isEmpty()) {
QUALNEW31 = Byte.parseByte(s);
} else {
QUALNEW31 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW4(String s) {
if (!s.trim().isEmpty()) {
QUALNEW4 = Byte.parseByte(s);
} else {
QUALNEW4 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW5(String s) {
if (!s.trim().isEmpty()) {
QUALNEW5 = Byte.parseByte(s);
} else {
QUALNEW5 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW6(String s) {
if (!s.trim().isEmpty()) {
QUALNEW6 = Byte.parseByte(s);
} else {
QUALNEW6 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW7(String s) {
if (!s.trim().isEmpty()) {
QUALNEW7 = Byte.parseByte(s);
} else {
QUALNEW7 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW8(String s) {
if (!s.trim().isEmpty()) {
QUALNEW8 = Byte.parseByte(s);
} else {
QUALNEW8 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW9(String s) {
if (!s.trim().isEmpty()) {
QUALNEW9 = Byte.parseByte(s);
} else {
QUALNEW9 = Byte.MIN_VALUE;
}
}

protected final void initQUALOC(String s) {
if (!s.trim().isEmpty()) {
QUALOC = Byte.parseByte(s);
} else {
QUALOC = Byte.MIN_VALUE;
}
}

protected final void initRACEL(String s) {
if (!s.trim().isEmpty()) {
RACEL = Byte.parseByte(s);
} else {
RACEL = Byte.MIN_VALUE;
}
}

protected final void initRACELAT(String s) {
if (!s.trim().isEmpty()) {
RACELAT = Byte.parseByte(s);
} else {
RACELAT = Byte.MIN_VALUE;
}
}

protected final void initRACELBT(String s) {
if (!s.trim().isEmpty()) {
RACELBT = Byte.parseByte(s);
} else {
RACELBT = Byte.MIN_VALUE;
}
}

protected final void initRACELMT(String s) {
if (!s.trim().isEmpty()) {
RACELMT = Byte.parseByte(s);
} else {
RACELMT = Byte.MIN_VALUE;
}
}

protected final void initRACELOT_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELOT_CODE = Byte.parseByte(s);
} else {
RACELOT_CODE = Byte.MIN_VALUE;
}
}

protected final void initRACELO_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELO_CODE = Short.parseShort(s);
} else {
RACELO_CODE = Short.MIN_VALUE;
}
}

protected final void initRACELT(String s) {
if (!s.trim().isEmpty()) {
RACELT = Byte.parseByte(s);
} else {
RACELT = Byte.MIN_VALUE;
}
}

protected final void initRACELWT(String s) {
if (!s.trim().isEmpty()) {
RACELWT = Byte.parseByte(s);
} else {
RACELWT = Byte.MIN_VALUE;
}
}

protected final void initRACEL_DV(String s) {
if (!s.trim().isEmpty()) {
RACEL_DV = Byte.parseByte(s);
} else {
RACEL_DV = Byte.MIN_VALUE;
}
}

protected final void initRCOTHERCODE(String s) {
if (!s.trim().isEmpty()) {
RCOTHERCODE = Byte.parseByte(s);
} else {
RCOTHERCODE = Byte.MIN_VALUE;
}
}

protected final void initREASEND1(String s) {
if (!s.trim().isEmpty()) {
REASEND1 = Byte.parseByte(s);
} else {
REASEND1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2(String s) {
if (!s.trim().isEmpty()) {
REASEND2 = Byte.parseByte(s);
} else {
REASEND2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3(String s) {
if (!s.trim().isEmpty()) {
REASEND3 = Byte.parseByte(s);
} else {
REASEND3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4(String s) {
if (!s.trim().isEmpty()) {
REASEND4 = Byte.parseByte(s);
} else {
REASEND4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5(String s) {
if (!s.trim().isEmpty()) {
REASEND5 = Byte.parseByte(s);
} else {
REASEND5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6(String s) {
if (!s.trim().isEmpty()) {
REASEND6 = Byte.parseByte(s);
} else {
REASEND6 = Byte.MIN_VALUE;
}
}

protected final void initREFBANK(String s) {
if (!s.trim().isEmpty()) {
REFBANK = Byte.parseByte(s);
} else {
REFBANK = Byte.MIN_VALUE;
}
}

protected final void initREFBNKY(String s) {
if (!s.trim().isEmpty()) {
REFBNKY = Byte.parseByte(s);
} else {
REFBNKY = Byte.MIN_VALUE;
}
}

protected final void initRELUP(String s) {
if (!s.trim().isEmpty()) {
RELUP = Byte.parseByte(s);
} else {
RELUP = Byte.MIN_VALUE;
}
}

protected final void initREMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
REMAIL_CODE = Byte.parseByte(s);
} else {
REMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initREMCNTRY1(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY1 = Short.parseShort(s);
} else {
REMCNTRY1 = Short.MIN_VALUE;
}
}

protected final void initREMCNTRY2(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY2 = Short.parseShort(s);
} else {
REMCNTRY2 = Short.MIN_VALUE;
}
}

protected final void initREMCNTRY3(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY3 = Short.parseShort(s);
} else {
REMCNTRY3 = Short.MIN_VALUE;
}
}

protected final void initREMCNTRY4(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY4 = Short.parseShort(s);
} else {
REMCNTRY4 = Short.MIN_VALUE;
}
}

protected final void initREMHOW1(String s) {
if (!s.trim().isEmpty()) {
REMHOW1 = Byte.parseByte(s);
} else {
REMHOW1 = Byte.MIN_VALUE;
}
}

protected final void initREMHOW2(String s) {
if (!s.trim().isEmpty()) {
REMHOW2 = Byte.parseByte(s);
} else {
REMHOW2 = Byte.MIN_VALUE;
}
}

protected final void initREMHOW3(String s) {
if (!s.trim().isEmpty()) {
REMHOW3 = Byte.parseByte(s);
} else {
REMHOW3 = Byte.MIN_VALUE;
}
}

protected final void initREMHOW4(String s) {
if (!s.trim().isEmpty()) {
REMHOW4 = Byte.parseByte(s);
} else {
REMHOW4 = Byte.MIN_VALUE;
}
}

protected final void initREMIT1(String s) {
if (!s.trim().isEmpty()) {
REMIT1 = Byte.parseByte(s);
} else {
REMIT1 = Byte.MIN_VALUE;
}
}

protected final void initREMIT2(String s) {
if (!s.trim().isEmpty()) {
REMIT2 = Byte.parseByte(s);
} else {
REMIT2 = Byte.MIN_VALUE;
}
}

protected final void initREMIT3(String s) {
if (!s.trim().isEmpty()) {
REMIT3 = Byte.parseByte(s);
} else {
REMIT3 = Byte.MIN_VALUE;
}
}

protected final void initREMIT4(String s) {
if (!s.trim().isEmpty()) {
REMIT4 = Byte.parseByte(s);
} else {
REMIT4 = Byte.MIN_VALUE;
}
}

protected final void initREMIT5(String s) {
if (!s.trim().isEmpty()) {
REMIT5 = Byte.parseByte(s);
} else {
REMIT5 = Byte.MIN_VALUE;
}
}

protected final void initREMITAMT1(String s) {
if (!s.trim().isEmpty()) {
REMITAMT1 = Short.parseShort(s);
} else {
REMITAMT1 = Short.MIN_VALUE;
}
}

protected final void initREMITAMT2(String s) {
if (!s.trim().isEmpty()) {
REMITAMT2 = Integer.parseInt(s);
} else {
REMITAMT2 = Integer.MIN_VALUE;
}
}

protected final void initREMITAMT3(String s) {
if (!s.trim().isEmpty()) {
REMITAMT3 = Short.parseShort(s);
} else {
REMITAMT3 = Short.MIN_VALUE;
}
}

protected final void initREMITAMT4(String s) {
if (!s.trim().isEmpty()) {
REMITAMT4 = Integer.parseInt(s);
} else {
REMITAMT4 = Integer.MIN_VALUE;
}
}

protected final void initREMITFREQ1(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ1 = Byte.parseByte(s);
} else {
REMITFREQ1 = Byte.MIN_VALUE;
}
}

protected final void initREMITFREQ2(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ2 = Byte.parseByte(s);
} else {
REMITFREQ2 = Byte.MIN_VALUE;
}
}

protected final void initREMITFREQ3(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ3 = Byte.parseByte(s);
} else {
REMITFREQ3 = Byte.MIN_VALUE;
}
}

protected final void initREMITFREQ4(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ4 = Byte.parseByte(s);
} else {
REMITFREQ4 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG1(String s) {
if (!s.trim().isEmpty()) {
REMITREG1 = Byte.parseByte(s);
} else {
REMITREG1 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG2(String s) {
if (!s.trim().isEmpty()) {
REMITREG2 = Byte.parseByte(s);
} else {
REMITREG2 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG3(String s) {
if (!s.trim().isEmpty()) {
REMITREG3 = Byte.parseByte(s);
} else {
REMITREG3 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG4(String s) {
if (!s.trim().isEmpty()) {
REMITREG4 = Byte.parseByte(s);
} else {
REMITREG4 = Byte.MIN_VALUE;
}
}

protected final void initREMITUSUAL1(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL1 = Byte.parseByte(s);
} else {
REMITUSUAL1 = Byte.MIN_VALUE;
}
}

protected final void initREMITUSUAL2(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL2 = Byte.parseByte(s);
} else {
REMITUSUAL2 = Byte.MIN_VALUE;
}
}

protected final void initREMITUSUAL3(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL3 = Byte.parseByte(s);
} else {
REMITUSUAL3 = Byte.MIN_VALUE;
}
}

protected final void initREMITUSUAL4(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL4 = Byte.parseByte(s);
} else {
REMITUSUAL4 = Byte.MIN_VALUE;
}
}

protected final void initRESPF16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16 = false;
} else {
RESPF16 = true;
}
}
}

protected final void initRESPF16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16_DV = false;
} else {
RESPF16_DV = true;
}
}
}

protected final void initRESPM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16 = false;
} else {
RESPM16 = true;
}
}
}

protected final void initRESPM16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16_DV = false;
} else {
RESPM16_DV = true;
}
}
}

protected final void initRETAMT(String s) {
if (!s.trim().isEmpty()) {
RETAMT = Byte.parseByte(s);
} else {
RETAMT = Byte.MIN_VALUE;
}
}

protected final void initRETCHK(String s) {
if (!s.trim().isEmpty()) {
RETCHK = Byte.parseByte(s);
} else {
RETCHK = Byte.MIN_VALUE;
}
}

protected final void initRETSUF(String s) {
if (!s.trim().isEmpty()) {
RETSUF = Byte.parseByte(s);
} else {
RETSUF = Byte.MIN_VALUE;
}
}

protected final void initRHLANCODE(String s) {
if (!s.trim().isEmpty()) {
RHLANCODE = Byte.parseByte(s);
} else {
RHLANCODE = Byte.MIN_VALUE;
}
}

protected final void initRLCHARITY(String s) {
if (!s.trim().isEmpty()) {
RLCHARITY = Byte.parseByte(s);
} else {
RLCHARITY = Byte.MIN_VALUE;
}
}

protected final void initRLDRNK(String s) {
if (!s.trim().isEmpty()) {
RLDRNK = Byte.parseByte(s);
} else {
RLDRNK = Byte.MIN_VALUE;
}
}

protected final void initRLEAT(String s) {
if (!s.trim().isEmpty()) {
RLEAT = Byte.parseByte(s);
} else {
RLEAT = Byte.MIN_VALUE;
}
}

protected final void initRLFRIENDS(String s) {
if (!s.trim().isEmpty()) {
RLFRIENDS = Byte.parseByte(s);
} else {
RLFRIENDS = Byte.MIN_VALUE;
}
}

protected final void initRLJOB(String s) {
if (!s.trim().isEmpty()) {
RLJOB = Byte.parseByte(s);
} else {
RLJOB = Byte.MIN_VALUE;
}
}

protected final void initRLJOBY1(String s) {
if (!s.trim().isEmpty()) {
RLJOBY1 = Byte.parseByte(s);
} else {
RLJOBY1 = Byte.MIN_VALUE;
}
}

protected final void initRLJOBY2(String s) {
if (!s.trim().isEmpty()) {
RLJOBY2 = Byte.parseByte(s);
} else {
RLJOBY2 = Byte.MIN_VALUE;
}
}

protected final void initRLJOBY3(String s) {
if (!s.trim().isEmpty()) {
RLJOBY3 = Byte.parseByte(s);
} else {
RLJOBY3 = Byte.MIN_VALUE;
}
}

protected final void initRLJOBY4(String s) {
if (!s.trim().isEmpty()) {
RLJOBY4 = Byte.parseByte(s);
} else {
RLJOBY4 = Byte.MIN_VALUE;
}
}

protected final void initRLJOBY5(String s) {
if (!s.trim().isEmpty()) {
RLJOBY5 = Byte.parseByte(s);
} else {
RLJOBY5 = Byte.MIN_VALUE;
}
}

protected final void initRLJOBY6(String s) {
if (!s.trim().isEmpty()) {
RLJOBY6 = Byte.parseByte(s);
} else {
RLJOBY6 = Byte.MIN_VALUE;
}
}

protected final void initRLJOBY97(String s) {
if (!s.trim().isEmpty()) {
RLJOBY97 = Byte.parseByte(s);
} else {
RLJOBY97 = Byte.MIN_VALUE;
}
}

protected final void initRLMARG(String s) {
if (!s.trim().isEmpty()) {
RLMARG = Byte.parseByte(s);
} else {
RLMARG = Byte.MIN_VALUE;
}
}

protected final void initRLSAVE(String s) {
if (!s.trim().isEmpty()) {
RLSAVE = Byte.parseByte(s);
} else {
RLSAVE = Byte.MIN_VALUE;
}
}

protected final void initRLSCHL(String s) {
if (!s.trim().isEmpty()) {
RLSCHL = Byte.parseByte(s);
} else {
RLSCHL = Byte.MIN_VALUE;
}
}

protected final void initRLWEAR(String s) {
if (!s.trim().isEmpty()) {
RLWEAR = Byte.parseByte(s);
} else {
RLWEAR = Byte.MIN_VALUE;
}
}

protected final void initRPHMOB_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHMOB_CODE = Byte.parseByte(s);
} else {
RPHMOB_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHWRK_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHWRK_CODE = Byte.parseByte(s);
} else {
RPHWRK_CODE = Byte.MIN_VALUE;
}
}

protected final void initRTCON1(String s) {
if (!s.trim().isEmpty()) {
RTCON1 = Byte.parseByte(s);
} else {
RTCON1 = Byte.MIN_VALUE;
}
}

protected final void initRTCON2(String s) {
if (!s.trim().isEmpty()) {
RTCON2 = Byte.parseByte(s);
} else {
RTCON2 = Byte.MIN_VALUE;
}
}

protected final void initRTCON3(String s) {
if (!s.trim().isEmpty()) {
RTCON3 = Byte.parseByte(s);
} else {
RTCON3 = Byte.MIN_VALUE;
}
}

protected final void initRTCON4(String s) {
if (!s.trim().isEmpty()) {
RTCON4 = Byte.parseByte(s);
} else {
RTCON4 = Byte.MIN_VALUE;
}
}

protected final void initRTEXPJB(String s) {
if (!s.trim().isEmpty()) {
RTEXPJB = Byte.parseByte(s);
} else {
RTEXPJB = Byte.MIN_VALUE;
}
}

protected final void initRTFND1(String s) {
if (!s.trim().isEmpty()) {
RTFND1 = Byte.parseByte(s);
} else {
RTFND1 = Byte.MIN_VALUE;
}
}

protected final void initRTFND10(String s) {
if (!s.trim().isEmpty()) {
RTFND10 = Byte.parseByte(s);
} else {
RTFND10 = Byte.MIN_VALUE;
}
}

protected final void initRTFND2(String s) {
if (!s.trim().isEmpty()) {
RTFND2 = Byte.parseByte(s);
} else {
RTFND2 = Byte.MIN_VALUE;
}
}

protected final void initRTFND3(String s) {
if (!s.trim().isEmpty()) {
RTFND3 = Byte.parseByte(s);
} else {
RTFND3 = Byte.MIN_VALUE;
}
}

protected final void initRTFND4(String s) {
if (!s.trim().isEmpty()) {
RTFND4 = Byte.parseByte(s);
} else {
RTFND4 = Byte.MIN_VALUE;
}
}

protected final void initRTFND5(String s) {
if (!s.trim().isEmpty()) {
RTFND5 = Byte.parseByte(s);
} else {
RTFND5 = Byte.MIN_VALUE;
}
}

protected final void initRTFND6(String s) {
if (!s.trim().isEmpty()) {
RTFND6 = Byte.parseByte(s);
} else {
RTFND6 = Byte.MIN_VALUE;
}
}

protected final void initRTFND7(String s) {
if (!s.trim().isEmpty()) {
RTFND7 = Byte.parseByte(s);
} else {
RTFND7 = Byte.MIN_VALUE;
}
}

protected final void initRTFND8(String s) {
if (!s.trim().isEmpty()) {
RTFND8 = Byte.parseByte(s);
} else {
RTFND8 = Byte.MIN_VALUE;
}
}

protected final void initRTFND9(String s) {
if (!s.trim().isEmpty()) {
RTFND9 = Byte.parseByte(s);
} else {
RTFND9 = Byte.MIN_VALUE;
}
}

protected final void initRTFND96(String s) {
if (!s.trim().isEmpty()) {
RTFND96 = Byte.parseByte(s);
} else {
RTFND96 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO1(String s) {
if (!s.trim().isEmpty()) {
RTPRO1 = Byte.parseByte(s);
} else {
RTPRO1 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO2(String s) {
if (!s.trim().isEmpty()) {
RTPRO2 = Byte.parseByte(s);
} else {
RTPRO2 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO3(String s) {
if (!s.trim().isEmpty()) {
RTPRO3 = Byte.parseByte(s);
} else {
RTPRO3 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO4(String s) {
if (!s.trim().isEmpty()) {
RTPRO4 = Byte.parseByte(s);
} else {
RTPRO4 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO5(String s) {
if (!s.trim().isEmpty()) {
RTPRO5 = Byte.parseByte(s);
} else {
RTPRO5 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO6(String s) {
if (!s.trim().isEmpty()) {
RTPRO6 = Byte.parseByte(s);
} else {
RTPRO6 = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB = Byte.parseByte(s);
} else {
SAMEJOB = Byte.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSAVDOCS(String s) {
if (!s.trim().isEmpty()) {
SAVDOCS = Byte.parseByte(s);
} else {
SAVDOCS = Byte.MIN_VALUE;
}
}

protected final void initSAVE(String s) {
if (!s.trim().isEmpty()) {
SAVE = Short.parseShort(s);
} else {
SAVE = Short.MIN_VALUE;
}
}

protected final void initSAVED(String s) {
if (!s.trim().isEmpty()) {
SAVED = Integer.parseInt(s);
} else {
SAVED = Integer.MIN_VALUE;
}
}

protected final void initSAVLT(String s) {
if (!s.trim().isEmpty()) {
SAVLT = Byte.parseByte(s);
} else {
SAVLT = Byte.MIN_VALUE;
}
}

protected final void initSAVREG(String s) {
if (!s.trim().isEmpty()) {
SAVREG = Byte.parseByte(s);
} else {
SAVREG = Byte.MIN_VALUE;
}
}

protected final void initSCAC(String s) {
if (!s.trim().isEmpty()) {
SCAC = Byte.parseByte(s);
} else {
SCAC = Byte.MIN_VALUE;
}
}

protected final void initSCENV_BCCC(String s) {
if (!s.trim().isEmpty()) {
SCENV_BCCC = Byte.parseByte(s);
} else {
SCENV_BCCC = Byte.MIN_VALUE;
}
}

protected final void initSCENV_CANC(String s) {
if (!s.trim().isEmpty()) {
SCENV_CANC = Byte.parseByte(s);
} else {
SCENV_CANC = Byte.MIN_VALUE;
}
}

protected final void initSCENV_CREX(String s) {
if (!s.trim().isEmpty()) {
SCENV_CREX = Byte.parseByte(s);
} else {
SCENV_CREX = Byte.MIN_VALUE;
}
}

protected final void initSCENV_CRLF(String s) {
if (!s.trim().isEmpty()) {
SCENV_CRLF = Byte.parseByte(s);
} else {
SCENV_CRLF = Byte.MIN_VALUE;
}
}

protected final void initSCENV_FITL(String s) {
if (!s.trim().isEmpty()) {
SCENV_FITL = Byte.parseByte(s);
} else {
SCENV_FITL = Byte.MIN_VALUE;
}
}

protected final void initSCENV_FTST(String s) {
if (!s.trim().isEmpty()) {
SCENV_FTST = Byte.parseByte(s);
} else {
SCENV_FTST = Byte.MIN_VALUE;
}
}

protected final void initSCENV_GRN(String s) {
if (!s.trim().isEmpty()) {
SCENV_GRN = Byte.parseByte(s);
} else {
SCENV_GRN = Byte.MIN_VALUE;
}
}

protected final void initSCENV_MEDS(String s) {
if (!s.trim().isEmpty()) {
SCENV_MEDS = Byte.parseByte(s);
} else {
SCENV_MEDS = Byte.MIN_VALUE;
}
}

protected final void initSCENV_NOOT(String s) {
if (!s.trim().isEmpty()) {
SCENV_NOOT = Byte.parseByte(s);
} else {
SCENV_NOOT = Byte.MIN_VALUE;
}
}

protected final void initSCENV_NOWO(String s) {
if (!s.trim().isEmpty()) {
SCENV_NOWO = Byte.parseByte(s);
} else {
SCENV_NOWO = Byte.MIN_VALUE;
}
}

protected final void initSCENV_PMEP(String s) {
if (!s.trim().isEmpty()) {
SCENV_PMEP = Byte.parseByte(s);
} else {
SCENV_PMEP = Byte.MIN_VALUE;
}
}

protected final void initSCENV_TLAT(String s) {
if (!s.trim().isEmpty()) {
SCENV_TLAT = Byte.parseByte(s);
} else {
SCENV_TLAT = Byte.MIN_VALUE;
}
}

protected final void initSCFLAG_DV(String s) {
if (!s.trim().isEmpty()) {
SCFLAG_DV = Byte.parseByte(s);
} else {
SCFLAG_DV = Byte.MIN_VALUE;
}
}

protected final void initSCHLLOC(String s) {
if (!s.trim().isEmpty()) {
SCHLLOC = Byte.parseByte(s);
} else {
SCHLLOC = Byte.MIN_VALUE;
}
}

protected final void initSCHOK(String s) {
if (!s.trim().isEmpty()) {
SCHOK = Byte.parseByte(s);
} else {
SCHOK = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY1(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY1 = Byte.parseByte(s);
} else {
SCHOOLCNTRY1 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY2(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY2 = Byte.parseByte(s);
} else {
SCHOOLCNTRY2 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY3(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY3 = Byte.parseByte(s);
} else {
SCHOOLCNTRY3 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY4(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY4 = Byte.parseByte(s);
} else {
SCHOOLCNTRY4 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY5(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY5 = Byte.parseByte(s);
} else {
SCHOOLCNTRY5 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT1(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT1 = Byte.parseByte(s);
} else {
SCLFSAT1 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT2(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT2 = Byte.parseByte(s);
} else {
SCLFSAT2 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT7(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT7 = Byte.parseByte(s);
} else {
SCLFSAT7 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSATO(String s) {
if (!s.trim().isEmpty()) {
SCLFSATO = Byte.parseByte(s);
} else {
SCLFSATO = Byte.MIN_VALUE;
}
}

protected final void initSCOPECL200(String s) {
if (!s.trim().isEmpty()) {
SCOPECL200 = Byte.parseByte(s);
} else {
SCOPECL200 = Byte.MIN_VALUE;
}
}

protected final void initSCOPECL30(String s) {
if (!s.trim().isEmpty()) {
SCOPECL30 = Byte.parseByte(s);
} else {
SCOPECL30 = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMA(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMA = Byte.parseByte(s);
} else {
SCOPFAMA = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMB(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMB = Byte.parseByte(s);
} else {
SCOPFAMB = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMD(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMD = Byte.parseByte(s);
} else {
SCOPFAMD = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMF(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMF = Byte.parseByte(s);
} else {
SCOPFAMF = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMH(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMH = Byte.parseByte(s);
} else {
SCOPFAMH = Byte.MIN_VALUE;
}
}

protected final void initSCRF1(String s) {
if (!s.trim().isEmpty()) {
SCRF1 = Byte.parseByte(s);
} else {
SCRF1 = Byte.MIN_VALUE;
}
}

protected final void initSCRF2(String s) {
if (!s.trim().isEmpty()) {
SCRF2 = Byte.parseByte(s);
} else {
SCRF2 = Byte.MIN_VALUE;
}
}

protected final void initSCRF3(String s) {
if (!s.trim().isEmpty()) {
SCRF3 = Byte.parseByte(s);
} else {
SCRF3 = Byte.MIN_VALUE;
}
}

protected final void initSCRF4(String s) {
if (!s.trim().isEmpty()) {
SCRF4 = Byte.parseByte(s);
} else {
SCRF4 = Byte.MIN_VALUE;
}
}

protected final void initSCRF5(String s) {
if (!s.trim().isEmpty()) {
SCRF5 = Byte.parseByte(s);
} else {
SCRF5 = Byte.MIN_VALUE;
}
}

protected final void initSCRF6(String s) {
if (!s.trim().isEmpty()) {
SCRF6 = Byte.parseByte(s);
} else {
SCRF6 = Byte.MIN_VALUE;
}
}

protected final void initSCRF97(String s) {
if (!s.trim().isEmpty()) {
SCRF97 = Byte.parseByte(s);
} else {
SCRF97 = Byte.MIN_VALUE;
}
}

protected final void initSCRX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCRX_CODE = Byte.parseByte(s);
} else {
SCRX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSCSF1(String s) {
if (!s.trim().isEmpty()) {
SCSF1 = Byte.parseByte(s);
} else {
SCSF1 = Byte.MIN_VALUE;
}
}

protected final void initSCSF2A(String s) {
if (!s.trim().isEmpty()) {
SCSF2A = Byte.parseByte(s);
} else {
SCSF2A = Byte.MIN_VALUE;
}
}

protected final void initSCSF2B(String s) {
if (!s.trim().isEmpty()) {
SCSF2B = Byte.parseByte(s);
} else {
SCSF2B = Byte.MIN_VALUE;
}
}

protected final void initSCSF3A(String s) {
if (!s.trim().isEmpty()) {
SCSF3A = Byte.parseByte(s);
} else {
SCSF3A = Byte.MIN_VALUE;
}
}

protected final void initSCSF3B(String s) {
if (!s.trim().isEmpty()) {
SCSF3B = Byte.parseByte(s);
} else {
SCSF3B = Byte.MIN_VALUE;
}
}

protected final void initSCSF4A(String s) {
if (!s.trim().isEmpty()) {
SCSF4A = Byte.parseByte(s);
} else {
SCSF4A = Byte.MIN_VALUE;
}
}

protected final void initSCSF4B(String s) {
if (!s.trim().isEmpty()) {
SCSF4B = Byte.parseByte(s);
} else {
SCSF4B = Byte.MIN_VALUE;
}
}

protected final void initSCSF5(String s) {
if (!s.trim().isEmpty()) {
SCSF5 = Byte.parseByte(s);
} else {
SCSF5 = Byte.MIN_VALUE;
}
}

protected final void initSCSF6A(String s) {
if (!s.trim().isEmpty()) {
SCSF6A = Byte.parseByte(s);
} else {
SCSF6A = Byte.MIN_VALUE;
}
}

protected final void initSCSF6B(String s) {
if (!s.trim().isEmpty()) {
SCSF6B = Byte.parseByte(s);
} else {
SCSF6B = Byte.MIN_VALUE;
}
}

protected final void initSCSF6C(String s) {
if (!s.trim().isEmpty()) {
SCSF6C = Byte.parseByte(s);
} else {
SCSF6C = Byte.MIN_VALUE;
}
}

protected final void initSCSF7(String s) {
if (!s.trim().isEmpty()) {
SCSF7 = Byte.parseByte(s);
} else {
SCSF7 = Byte.MIN_VALUE;
}
}

protected final void initSCUN1(String s) {
if (!s.trim().isEmpty()) {
SCUN1 = Byte.parseByte(s);
} else {
SCUN1 = Byte.MIN_VALUE;
}
}

protected final void initSCUN2(String s) {
if (!s.trim().isEmpty()) {
SCUN2 = Byte.parseByte(s);
} else {
SCUN2 = Byte.MIN_VALUE;
}
}

protected final void initSCUN3(String s) {
if (!s.trim().isEmpty()) {
SCUN3 = Byte.parseByte(s);
} else {
SCUN3 = Byte.MIN_VALUE;
}
}

protected final void initSCUN97(String s) {
if (!s.trim().isEmpty()) {
SCUN97 = Byte.parseByte(s);
} else {
SCUN97 = Byte.MIN_VALUE;
}
}

protected final void initSCUX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCUX_CODE = Byte.parseByte(s);
} else {
SCUX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBA(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBA = Byte.parseByte(s);
} else {
SCWEMWBA = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBB(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBB = Byte.parseByte(s);
} else {
SCWEMWBB = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBC(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBC = Byte.parseByte(s);
} else {
SCWEMWBC = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBD(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBD = Byte.parseByte(s);
} else {
SCWEMWBD = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBE(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBE = Byte.parseByte(s);
} else {
SCWEMWBE = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBF(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBF = Byte.parseByte(s);
} else {
SCWEMWBF = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBG(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBG = Byte.parseByte(s);
} else {
SCWEMWBG = Byte.MIN_VALUE;
}
}

protected final void initSCWKIMP(String s) {
if (!s.trim().isEmpty()) {
SCWKIMP = Byte.parseByte(s);
} else {
SCWKIMP = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR1(String s) {
if (!s.trim().isEmpty()) {
SCWKOR1 = Byte.parseByte(s);
} else {
SCWKOR1 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR10(String s) {
if (!s.trim().isEmpty()) {
SCWKOR10 = Byte.parseByte(s);
} else {
SCWKOR10 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR11(String s) {
if (!s.trim().isEmpty()) {
SCWKOR11 = Byte.parseByte(s);
} else {
SCWKOR11 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR12(String s) {
if (!s.trim().isEmpty()) {
SCWKOR12 = Byte.parseByte(s);
} else {
SCWKOR12 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR13(String s) {
if (!s.trim().isEmpty()) {
SCWKOR13 = Byte.parseByte(s);
} else {
SCWKOR13 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR14(String s) {
if (!s.trim().isEmpty()) {
SCWKOR14 = Byte.parseByte(s);
} else {
SCWKOR14 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR15(String s) {
if (!s.trim().isEmpty()) {
SCWKOR15 = Byte.parseByte(s);
} else {
SCWKOR15 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR2(String s) {
if (!s.trim().isEmpty()) {
SCWKOR2 = Byte.parseByte(s);
} else {
SCWKOR2 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR3(String s) {
if (!s.trim().isEmpty()) {
SCWKOR3 = Byte.parseByte(s);
} else {
SCWKOR3 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR4(String s) {
if (!s.trim().isEmpty()) {
SCWKOR4 = Byte.parseByte(s);
} else {
SCWKOR4 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR5(String s) {
if (!s.trim().isEmpty()) {
SCWKOR5 = Byte.parseByte(s);
} else {
SCWKOR5 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR6(String s) {
if (!s.trim().isEmpty()) {
SCWKOR6 = Byte.parseByte(s);
} else {
SCWKOR6 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR7(String s) {
if (!s.trim().isEmpty()) {
SCWKOR7 = Byte.parseByte(s);
} else {
SCWKOR7 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR8(String s) {
if (!s.trim().isEmpty()) {
SCWKOR8 = Byte.parseByte(s);
} else {
SCWKOR8 = Byte.MIN_VALUE;
}
}

protected final void initSCWKOR9(String s) {
if (!s.trim().isEmpty()) {
SCWKOR9 = Byte.parseByte(s);
} else {
SCWKOR9 = Byte.MIN_VALUE;
}
}

protected final void initSEEARNGRS_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_DV = Double.parseDouble(s);
} else {
SEEARNGRS_DV = Double.NaN;
}
}

protected final void initSEEARNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_IF = Byte.parseByte(s);
} else {
SEEARNGRS_IF = Byte.MIN_VALUE;
}
}

protected final void initSEEARNNET_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNNET_DV = Double.parseDouble(s);
} else {
SEEARNNET_DV = Double.NaN;
}
}

protected final void initSERVUSE1(String s) {
if (!s.trim().isEmpty()) {
SERVUSE1 = Byte.parseByte(s);
} else {
SERVUSE1 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE10(String s) {
if (!s.trim().isEmpty()) {
SERVUSE10 = Byte.parseByte(s);
} else {
SERVUSE10 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE2(String s) {
if (!s.trim().isEmpty()) {
SERVUSE2 = Byte.parseByte(s);
} else {
SERVUSE2 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE3(String s) {
if (!s.trim().isEmpty()) {
SERVUSE3 = Byte.parseByte(s);
} else {
SERVUSE3 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE4(String s) {
if (!s.trim().isEmpty()) {
SERVUSE4 = Byte.parseByte(s);
} else {
SERVUSE4 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE5(String s) {
if (!s.trim().isEmpty()) {
SERVUSE5 = Byte.parseByte(s);
} else {
SERVUSE5 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE6(String s) {
if (!s.trim().isEmpty()) {
SERVUSE6 = Byte.parseByte(s);
} else {
SERVUSE6 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE7(String s) {
if (!s.trim().isEmpty()) {
SERVUSE7 = Byte.parseByte(s);
} else {
SERVUSE7 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE8(String s) {
if (!s.trim().isEmpty()) {
SERVUSE8 = Byte.parseByte(s);
} else {
SERVUSE8 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE9(String s) {
if (!s.trim().isEmpty()) {
SERVUSE9 = Byte.parseByte(s);
} else {
SERVUSE9 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE96(String s) {
if (!s.trim().isEmpty()) {
SERVUSE96 = Byte.parseByte(s);
} else {
SERVUSE96 = Byte.MIN_VALUE;
}
}

protected final void initSEX_DV(String s) {
if (!s.trim().isEmpty()) {
SEX_DV = Byte.parseByte(s);
} else {
SEX_DV = Byte.MIN_VALUE;
}
}

protected final void initSF1(String s) {
if (!s.trim().isEmpty()) {
SF1 = Byte.parseByte(s);
} else {
SF1 = Byte.MIN_VALUE;
}
}

protected final void initSF12MCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12MCS_DV = Double.parseDouble(s);
} else {
SF12MCS_DV = Double.NaN;
}
}

protected final void initSF12PCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12PCS_DV = Double.parseDouble(s);
} else {
SF12PCS_DV = Double.NaN;
}
}

protected final void initSIGNEDUCKIDS1(String s) {
if (!s.trim().isEmpty()) {
SIGNEDUCKIDS1 = Byte.parseByte(s);
} else {
SIGNEDUCKIDS1 = Byte.MIN_VALUE;
}
}

protected final void initSIGNEDUCKIDS2(String s) {
if (!s.trim().isEmpty()) {
SIGNEDUCKIDS2 = Byte.parseByte(s);
} else {
SIGNEDUCKIDS2 = Byte.MIN_VALUE;
}
}

protected final void initSIGNHEALTHKI1(String s) {
if (!s.trim().isEmpty()) {
SIGNHEALTHKI1 = Byte.parseByte(s);
} else {
SIGNHEALTHKI1 = Byte.MIN_VALUE;
}
}

protected final void initSIGNHEALTHKI2(String s) {
if (!s.trim().isEmpty()) {
SIGNHEALTHKI2 = Byte.parseByte(s);
} else {
SIGNHEALTHKI2 = Byte.MIN_VALUE;
}
}

protected final void initSINGLE_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
SINGLE_DV = false;
} else {
SINGLE_DV = true;
}
}
}

protected final void initSLP_QUAL(String s) {
if (!s.trim().isEmpty()) {
SLP_QUAL = Byte.parseByte(s);
} else {
SLP_QUAL = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH11(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH11 = Byte.parseByte(s);
} else {
SMKMNTH11 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH12(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH12 = Byte.parseByte(s);
} else {
SMKMNTH12 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH13(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH13 = Byte.parseByte(s);
} else {
SMKMNTH13 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH14(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH14 = Byte.parseByte(s);
} else {
SMKMNTH14 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH21(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH21 = Byte.parseByte(s);
} else {
SMKMNTH21 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH22(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH22 = Byte.parseByte(s);
} else {
SMKMNTH22 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH23(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH23 = Byte.parseByte(s);
} else {
SMKMNTH23 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH24(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH24 = Byte.parseByte(s);
} else {
SMKMNTH24 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH31(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH31 = Byte.parseByte(s);
} else {
SMKMNTH31 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH32(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH32 = Byte.parseByte(s);
} else {
SMKMNTH32 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH33(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH33 = Byte.parseByte(s);
} else {
SMKMNTH33 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH34(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH34 = Byte.parseByte(s);
} else {
SMKMNTH34 = Byte.MIN_VALUE;
}
}

protected final void initSMOFRQ(String s) {
if (!s.trim().isEmpty()) {
SMOFRQ = Byte.parseByte(s);
} else {
SMOFRQ = Byte.MIN_VALUE;
}
}

protected final void initSOCCONT(String s) {
if (!s.trim().isEmpty()) {
SOCCONT = Byte.parseByte(s);
} else {
SOCCONT = Byte.MIN_VALUE;
}
}

protected final void initSPPEN(String s) {
if (!s.trim().isEmpty()) {
SPPEN = Byte.parseByte(s);
} else {
SPPEN = Byte.MIN_VALUE;
}
}

protected final void initSPPID(String s) {
if (!s.trim().isEmpty()) {
SPPID = Integer.parseInt(s);
} else {
SPPID = Integer.MIN_VALUE;
}
}

protected final void initSPPNO(String s) {
if (!s.trim().isEmpty()) {
SPPNO = Byte.parseByte(s);
} else {
SPPNO = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT1(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT1 = Byte.parseByte(s);
} else {
SRVYNOT1 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT10(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT10 = Byte.parseByte(s);
} else {
SRVYNOT10 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT2(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT2 = Byte.parseByte(s);
} else {
SRVYNOT2 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT3(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT3 = Byte.parseByte(s);
} else {
SRVYNOT3 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT4(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT4 = Byte.parseByte(s);
} else {
SRVYNOT4 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT5(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT5 = Byte.parseByte(s);
} else {
SRVYNOT5 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT6(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT6 = Byte.parseByte(s);
} else {
SRVYNOT6 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT7(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT7 = Byte.parseByte(s);
} else {
SRVYNOT7 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT8(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT8 = Byte.parseByte(s);
} else {
SRVYNOT8 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT9(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT9 = Byte.parseByte(s);
} else {
SRVYNOT9 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM1(String s) {
if (!s.trim().isEmpty()) {
STATCM1 = Byte.parseByte(s);
} else {
STATCM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM2(String s) {
if (!s.trim().isEmpty()) {
STATCM2 = Byte.parseByte(s);
} else {
STATCM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM3(String s) {
if (!s.trim().isEmpty()) {
STATCM3 = Byte.parseByte(s);
} else {
STATCM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATCY41(String s) {
if (!s.trim().isEmpty()) {
STATCY41 = Short.parseShort(s);
} else {
STATCY41 = Short.MIN_VALUE;
}
}

protected final void initSTATCY42(String s) {
if (!s.trim().isEmpty()) {
STATCY42 = Short.parseShort(s);
} else {
STATCY42 = Short.MIN_VALUE;
}
}

protected final void initSTATCY43(String s) {
if (!s.trim().isEmpty()) {
STATCY43 = Short.parseShort(s);
} else {
STATCY43 = Short.MIN_VALUE;
}
}

protected final void initSTATENDD1(String s) {
if (!s.trim().isEmpty()) {
STATENDD1 = Byte.parseByte(s);
} else {
STATENDD1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD2(String s) {
if (!s.trim().isEmpty()) {
STATENDD2 = Byte.parseByte(s);
} else {
STATENDD2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD3(String s) {
if (!s.trim().isEmpty()) {
STATENDD3 = Byte.parseByte(s);
} else {
STATENDD3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD4(String s) {
if (!s.trim().isEmpty()) {
STATENDD4 = Byte.parseByte(s);
} else {
STATENDD4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD5(String s) {
if (!s.trim().isEmpty()) {
STATENDD5 = Byte.parseByte(s);
} else {
STATENDD5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD6(String s) {
if (!s.trim().isEmpty()) {
STATENDD6 = Byte.parseByte(s);
} else {
STATENDD6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM1(String s) {
if (!s.trim().isEmpty()) {
STATENDM1 = Byte.parseByte(s);
} else {
STATENDM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM2(String s) {
if (!s.trim().isEmpty()) {
STATENDM2 = Byte.parseByte(s);
} else {
STATENDM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM3(String s) {
if (!s.trim().isEmpty()) {
STATENDM3 = Byte.parseByte(s);
} else {
STATENDM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM4(String s) {
if (!s.trim().isEmpty()) {
STATENDM4 = Byte.parseByte(s);
} else {
STATENDM4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM5(String s) {
if (!s.trim().isEmpty()) {
STATENDM5 = Byte.parseByte(s);
} else {
STATENDM5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM6(String s) {
if (!s.trim().isEmpty()) {
STATENDM6 = Byte.parseByte(s);
} else {
STATENDM6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDY41(String s) {
if (!s.trim().isEmpty()) {
STATENDY41 = Short.parseShort(s);
} else {
STATENDY41 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY42(String s) {
if (!s.trim().isEmpty()) {
STATENDY42 = Short.parseShort(s);
} else {
STATENDY42 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY43(String s) {
if (!s.trim().isEmpty()) {
STATENDY43 = Short.parseShort(s);
} else {
STATENDY43 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY44(String s) {
if (!s.trim().isEmpty()) {
STATENDY44 = Short.parseShort(s);
} else {
STATENDY44 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY45(String s) {
if (!s.trim().isEmpty()) {
STATENDY45 = Short.parseShort(s);
} else {
STATENDY45 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY46(String s) {
if (!s.trim().isEmpty()) {
STATENDY46 = Short.parseShort(s);
} else {
STATENDY46 = Short.MIN_VALUE;
}
}

protected final void initSTENDREAS(String s) {
if (!s.trim().isEmpty()) {
STENDREAS = Byte.parseByte(s);
} else {
STENDREAS = Byte.MIN_VALUE;
}
}

protected final void initSTRATA(String s) {
if (!s.trim().isEmpty()) {
STRATA = Short.parseShort(s);
} else {
STRATA = Short.MIN_VALUE;
}
}

protected final void initSUSP(String s) {
if (!s.trim().isEmpty()) {
SUSP = Byte.parseByte(s);
} else {
SUSP = Byte.MIN_VALUE;
}
}

protected final void initSVACTS1(String s) {
if (!s.trim().isEmpty()) {
SVACTS1 = Byte.parseByte(s);
} else {
SVACTS1 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS2(String s) {
if (!s.trim().isEmpty()) {
SVACTS2 = Byte.parseByte(s);
} else {
SVACTS2 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS3(String s) {
if (!s.trim().isEmpty()) {
SVACTS3 = Byte.parseByte(s);
} else {
SVACTS3 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS4(String s) {
if (!s.trim().isEmpty()) {
SVACTS4 = Byte.parseByte(s);
} else {
SVACTS4 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS5(String s) {
if (!s.trim().isEmpty()) {
SVACTS5 = Byte.parseByte(s);
} else {
SVACTS5 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS96(String s) {
if (!s.trim().isEmpty()) {
SVACTS96 = Byte.parseByte(s);
} else {
SVACTS96 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS97(String s) {
if (!s.trim().isEmpty()) {
SVACTS97 = Byte.parseByte(s);
} else {
SVACTS97 = Byte.MIN_VALUE;
}
}

protected final void initSVAMT1(String s) {
if (!s.trim().isEmpty()) {
SVAMT1 = Integer.parseInt(s);
} else {
SVAMT1 = Integer.MIN_VALUE;
}
}

protected final void initSVAMT2(String s) {
if (!s.trim().isEmpty()) {
SVAMT2 = Integer.parseInt(s);
} else {
SVAMT2 = Integer.MIN_VALUE;
}
}

protected final void initSVAMT3(String s) {
if (!s.trim().isEmpty()) {
SVAMT3 = Integer.parseInt(s);
} else {
SVAMT3 = Integer.MIN_VALUE;
}
}

protected final void initSVAMT4(String s) {
if (!s.trim().isEmpty()) {
SVAMT4 = Integer.parseInt(s);
} else {
SVAMT4 = Integer.MIN_VALUE;
}
}

protected final void initSVAMT5(String s) {
if (!s.trim().isEmpty()) {
SVAMT5 = Integer.parseInt(s);
} else {
SVAMT5 = Integer.MIN_VALUE;
}
}

protected final void initSVAMT6(String s) {
if (!s.trim().isEmpty()) {
SVAMT6 = Integer.parseInt(s);
} else {
SVAMT6 = Integer.MIN_VALUE;
}
}

protected final void initSVB1_1(String s) {
if (!s.trim().isEmpty()) {
SVB1_1 = Byte.parseByte(s);
} else {
SVB1_1 = Byte.MIN_VALUE;
}
}

protected final void initSVB1_2(String s) {
if (!s.trim().isEmpty()) {
SVB1_2 = Byte.parseByte(s);
} else {
SVB1_2 = Byte.MIN_VALUE;
}
}

protected final void initSVB1_3(String s) {
if (!s.trim().isEmpty()) {
SVB1_3 = Byte.parseByte(s);
} else {
SVB1_3 = Byte.MIN_VALUE;
}
}

protected final void initSVB1_4(String s) {
if (!s.trim().isEmpty()) {
SVB1_4 = Byte.parseByte(s);
} else {
SVB1_4 = Byte.MIN_VALUE;
}
}

protected final void initSVB1_5(String s) {
if (!s.trim().isEmpty()) {
SVB1_5 = Byte.parseByte(s);
} else {
SVB1_5 = Byte.MIN_VALUE;
}
}

protected final void initSVB1_6(String s) {
if (!s.trim().isEmpty()) {
SVB1_6 = Byte.parseByte(s);
} else {
SVB1_6 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_1(String s) {
if (!s.trim().isEmpty()) {
SVB2_1 = Byte.parseByte(s);
} else {
SVB2_1 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_2(String s) {
if (!s.trim().isEmpty()) {
SVB2_2 = Byte.parseByte(s);
} else {
SVB2_2 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_3(String s) {
if (!s.trim().isEmpty()) {
SVB2_3 = Byte.parseByte(s);
} else {
SVB2_3 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_4(String s) {
if (!s.trim().isEmpty()) {
SVB2_4 = Byte.parseByte(s);
} else {
SVB2_4 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_5(String s) {
if (!s.trim().isEmpty()) {
SVB2_5 = Byte.parseByte(s);
} else {
SVB2_5 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_6(String s) {
if (!s.trim().isEmpty()) {
SVB2_6 = Byte.parseByte(s);
} else {
SVB2_6 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_1(String s) {
if (!s.trim().isEmpty()) {
SVB3_1 = Byte.parseByte(s);
} else {
SVB3_1 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_2(String s) {
if (!s.trim().isEmpty()) {
SVB3_2 = Byte.parseByte(s);
} else {
SVB3_2 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_3(String s) {
if (!s.trim().isEmpty()) {
SVB3_3 = Byte.parseByte(s);
} else {
SVB3_3 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_4(String s) {
if (!s.trim().isEmpty()) {
SVB3_4 = Byte.parseByte(s);
} else {
SVB3_4 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_5(String s) {
if (!s.trim().isEmpty()) {
SVB3_5 = Byte.parseByte(s);
} else {
SVB3_5 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_6(String s) {
if (!s.trim().isEmpty()) {
SVB3_6 = Byte.parseByte(s);
} else {
SVB3_6 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_1(String s) {
if (!s.trim().isEmpty()) {
SVB4_1 = Byte.parseByte(s);
} else {
SVB4_1 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_2(String s) {
if (!s.trim().isEmpty()) {
SVB4_2 = Byte.parseByte(s);
} else {
SVB4_2 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_3(String s) {
if (!s.trim().isEmpty()) {
SVB4_3 = Byte.parseByte(s);
} else {
SVB4_3 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_4(String s) {
if (!s.trim().isEmpty()) {
SVB4_4 = Byte.parseByte(s);
} else {
SVB4_4 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_5(String s) {
if (!s.trim().isEmpty()) {
SVB4_5 = Byte.parseByte(s);
} else {
SVB4_5 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_6(String s) {
if (!s.trim().isEmpty()) {
SVB4_6 = Byte.parseByte(s);
} else {
SVB4_6 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_1(String s) {
if (!s.trim().isEmpty()) {
SVB5_1 = Byte.parseByte(s);
} else {
SVB5_1 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_2(String s) {
if (!s.trim().isEmpty()) {
SVB5_2 = Byte.parseByte(s);
} else {
SVB5_2 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_3(String s) {
if (!s.trim().isEmpty()) {
SVB5_3 = Byte.parseByte(s);
} else {
SVB5_3 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_4(String s) {
if (!s.trim().isEmpty()) {
SVB5_4 = Byte.parseByte(s);
} else {
SVB5_4 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_5(String s) {
if (!s.trim().isEmpty()) {
SVB5_5 = Byte.parseByte(s);
} else {
SVB5_5 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_6(String s) {
if (!s.trim().isEmpty()) {
SVB5_6 = Byte.parseByte(s);
} else {
SVB5_6 = Byte.MIN_VALUE;
}
}

protected final void initSVPN0_1(String s) {
if (!s.trim().isEmpty()) {
SVPN0_1 = Byte.parseByte(s);
} else {
SVPN0_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN0_2(String s) {
if (!s.trim().isEmpty()) {
SVPN0_2 = Byte.parseByte(s);
} else {
SVPN0_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN0_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN0_3 = false;
} else {
SVPN0_3 = true;
}
}
}

protected final void initSVPN0_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN0_4 = false;
} else {
SVPN0_4 = true;
}
}
}

protected final void initSVPN0_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN0_5 = false;
} else {
SVPN0_5 = true;
}
}
}

protected final void initSVPN0_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN0_6 = false;
} else {
SVPN0_6 = true;
}
}
}

protected final void initSVPN10_1(String s) {
if (!s.trim().isEmpty()) {
SVPN10_1 = Byte.parseByte(s);
} else {
SVPN10_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN10_2(String s) {
if (!s.trim().isEmpty()) {
SVPN10_2 = Byte.parseByte(s);
} else {
SVPN10_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN10_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN10_3 = false;
} else {
SVPN10_3 = true;
}
}
}

protected final void initSVPN10_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN10_4 = false;
} else {
SVPN10_4 = true;
}
}
}

protected final void initSVPN10_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN10_5 = false;
} else {
SVPN10_5 = true;
}
}
}

protected final void initSVPN10_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN10_6 = false;
} else {
SVPN10_6 = true;
}
}
}

protected final void initSVPN11_1(String s) {
if (!s.trim().isEmpty()) {
SVPN11_1 = Byte.parseByte(s);
} else {
SVPN11_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN11_2(String s) {
if (!s.trim().isEmpty()) {
SVPN11_2 = Byte.parseByte(s);
} else {
SVPN11_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN11_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN11_3 = false;
} else {
SVPN11_3 = true;
}
}
}

protected final void initSVPN11_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN11_4 = false;
} else {
SVPN11_4 = true;
}
}
}

protected final void initSVPN11_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN11_5 = false;
} else {
SVPN11_5 = true;
}
}
}

protected final void initSVPN11_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN11_6 = false;
} else {
SVPN11_6 = true;
}
}
}

protected final void initSVPN12_1(String s) {
if (!s.trim().isEmpty()) {
SVPN12_1 = Byte.parseByte(s);
} else {
SVPN12_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN12_2(String s) {
if (!s.trim().isEmpty()) {
SVPN12_2 = Byte.parseByte(s);
} else {
SVPN12_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN12_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN12_3 = false;
} else {
SVPN12_3 = true;
}
}
}

protected final void initSVPN12_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN12_4 = false;
} else {
SVPN12_4 = true;
}
}
}

protected final void initSVPN12_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN12_5 = false;
} else {
SVPN12_5 = true;
}
}
}

protected final void initSVPN12_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN12_6 = false;
} else {
SVPN12_6 = true;
}
}
}

protected final void initSVPN13_1(String s) {
if (!s.trim().isEmpty()) {
SVPN13_1 = Byte.parseByte(s);
} else {
SVPN13_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN13_2(String s) {
if (!s.trim().isEmpty()) {
SVPN13_2 = Byte.parseByte(s);
} else {
SVPN13_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN13_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN13_3 = false;
} else {
SVPN13_3 = true;
}
}
}

protected final void initSVPN13_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN13_4 = false;
} else {
SVPN13_4 = true;
}
}
}

protected final void initSVPN13_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN13_5 = false;
} else {
SVPN13_5 = true;
}
}
}

protected final void initSVPN13_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN13_6 = false;
} else {
SVPN13_6 = true;
}
}
}

protected final void initSVPN14_1(String s) {
if (!s.trim().isEmpty()) {
SVPN14_1 = Byte.parseByte(s);
} else {
SVPN14_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN14_2(String s) {
if (!s.trim().isEmpty()) {
SVPN14_2 = Byte.parseByte(s);
} else {
SVPN14_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN14_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN14_3 = false;
} else {
SVPN14_3 = true;
}
}
}

protected final void initSVPN14_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN14_4 = false;
} else {
SVPN14_4 = true;
}
}
}

protected final void initSVPN14_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN14_5 = false;
} else {
SVPN14_5 = true;
}
}
}

protected final void initSVPN14_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN14_6 = false;
} else {
SVPN14_6 = true;
}
}
}

protected final void initSVPN15_1(String s) {
if (!s.trim().isEmpty()) {
SVPN15_1 = Byte.parseByte(s);
} else {
SVPN15_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN15_2(String s) {
if (!s.trim().isEmpty()) {
SVPN15_2 = Byte.parseByte(s);
} else {
SVPN15_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN15_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN15_3 = false;
} else {
SVPN15_3 = true;
}
}
}

protected final void initSVPN15_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN15_4 = false;
} else {
SVPN15_4 = true;
}
}
}

protected final void initSVPN15_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN15_5 = false;
} else {
SVPN15_5 = true;
}
}
}

protected final void initSVPN15_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN15_6 = false;
} else {
SVPN15_6 = true;
}
}
}

protected final void initSVPN16_1(String s) {
if (!s.trim().isEmpty()) {
SVPN16_1 = Byte.parseByte(s);
} else {
SVPN16_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN16_2(String s) {
if (!s.trim().isEmpty()) {
SVPN16_2 = Byte.parseByte(s);
} else {
SVPN16_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN16_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN16_3 = false;
} else {
SVPN16_3 = true;
}
}
}

protected final void initSVPN16_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN16_4 = false;
} else {
SVPN16_4 = true;
}
}
}

protected final void initSVPN16_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN16_5 = false;
} else {
SVPN16_5 = true;
}
}
}

protected final void initSVPN16_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN16_6 = false;
} else {
SVPN16_6 = true;
}
}
}

protected final void initSVPN1_1(String s) {
if (!s.trim().isEmpty()) {
SVPN1_1 = Byte.parseByte(s);
} else {
SVPN1_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN1_2(String s) {
if (!s.trim().isEmpty()) {
SVPN1_2 = Byte.parseByte(s);
} else {
SVPN1_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN1_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN1_3 = false;
} else {
SVPN1_3 = true;
}
}
}

protected final void initSVPN1_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN1_4 = false;
} else {
SVPN1_4 = true;
}
}
}

protected final void initSVPN1_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN1_5 = false;
} else {
SVPN1_5 = true;
}
}
}

protected final void initSVPN1_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN1_6 = false;
} else {
SVPN1_6 = true;
}
}
}

protected final void initSVPN2_1(String s) {
if (!s.trim().isEmpty()) {
SVPN2_1 = Byte.parseByte(s);
} else {
SVPN2_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN2_2(String s) {
if (!s.trim().isEmpty()) {
SVPN2_2 = Byte.parseByte(s);
} else {
SVPN2_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN2_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN2_3 = false;
} else {
SVPN2_3 = true;
}
}
}

protected final void initSVPN2_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN2_4 = false;
} else {
SVPN2_4 = true;
}
}
}

protected final void initSVPN2_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN2_5 = false;
} else {
SVPN2_5 = true;
}
}
}

protected final void initSVPN2_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN2_6 = false;
} else {
SVPN2_6 = true;
}
}
}

protected final void initSVPN3_1(String s) {
if (!s.trim().isEmpty()) {
SVPN3_1 = Byte.parseByte(s);
} else {
SVPN3_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN3_2(String s) {
if (!s.trim().isEmpty()) {
SVPN3_2 = Byte.parseByte(s);
} else {
SVPN3_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN3_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN3_3 = false;
} else {
SVPN3_3 = true;
}
}
}

protected final void initSVPN3_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN3_4 = false;
} else {
SVPN3_4 = true;
}
}
}

protected final void initSVPN3_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN3_5 = false;
} else {
SVPN3_5 = true;
}
}
}

protected final void initSVPN3_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN3_6 = false;
} else {
SVPN3_6 = true;
}
}
}

protected final void initSVPN4_1(String s) {
if (!s.trim().isEmpty()) {
SVPN4_1 = Byte.parseByte(s);
} else {
SVPN4_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN4_2(String s) {
if (!s.trim().isEmpty()) {
SVPN4_2 = Byte.parseByte(s);
} else {
SVPN4_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN4_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN4_3 = false;
} else {
SVPN4_3 = true;
}
}
}

protected final void initSVPN4_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN4_4 = false;
} else {
SVPN4_4 = true;
}
}
}

protected final void initSVPN4_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN4_5 = false;
} else {
SVPN4_5 = true;
}
}
}

protected final void initSVPN4_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN4_6 = false;
} else {
SVPN4_6 = true;
}
}
}

protected final void initSVPN5_1(String s) {
if (!s.trim().isEmpty()) {
SVPN5_1 = Byte.parseByte(s);
} else {
SVPN5_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN5_2(String s) {
if (!s.trim().isEmpty()) {
SVPN5_2 = Byte.parseByte(s);
} else {
SVPN5_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN5_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN5_3 = false;
} else {
SVPN5_3 = true;
}
}
}

protected final void initSVPN5_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN5_4 = false;
} else {
SVPN5_4 = true;
}
}
}

protected final void initSVPN5_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN5_5 = false;
} else {
SVPN5_5 = true;
}
}
}

protected final void initSVPN5_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN5_6 = false;
} else {
SVPN5_6 = true;
}
}
}

protected final void initSVPN6_1(String s) {
if (!s.trim().isEmpty()) {
SVPN6_1 = Byte.parseByte(s);
} else {
SVPN6_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN6_2(String s) {
if (!s.trim().isEmpty()) {
SVPN6_2 = Byte.parseByte(s);
} else {
SVPN6_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN6_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN6_3 = false;
} else {
SVPN6_3 = true;
}
}
}

protected final void initSVPN6_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN6_4 = false;
} else {
SVPN6_4 = true;
}
}
}

protected final void initSVPN6_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN6_5 = false;
} else {
SVPN6_5 = true;
}
}
}

protected final void initSVPN6_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN6_6 = false;
} else {
SVPN6_6 = true;
}
}
}

protected final void initSVPN7_1(String s) {
if (!s.trim().isEmpty()) {
SVPN7_1 = Byte.parseByte(s);
} else {
SVPN7_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN7_2(String s) {
if (!s.trim().isEmpty()) {
SVPN7_2 = Byte.parseByte(s);
} else {
SVPN7_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN7_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN7_3 = false;
} else {
SVPN7_3 = true;
}
}
}

protected final void initSVPN7_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN7_4 = false;
} else {
SVPN7_4 = true;
}
}
}

protected final void initSVPN7_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN7_5 = false;
} else {
SVPN7_5 = true;
}
}
}

protected final void initSVPN7_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN7_6 = false;
} else {
SVPN7_6 = true;
}
}
}

protected final void initSVPN8_1(String s) {
if (!s.trim().isEmpty()) {
SVPN8_1 = Byte.parseByte(s);
} else {
SVPN8_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN8_2(String s) {
if (!s.trim().isEmpty()) {
SVPN8_2 = Byte.parseByte(s);
} else {
SVPN8_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN8_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN8_3 = false;
} else {
SVPN8_3 = true;
}
}
}

protected final void initSVPN8_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN8_4 = false;
} else {
SVPN8_4 = true;
}
}
}

protected final void initSVPN8_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN8_5 = false;
} else {
SVPN8_5 = true;
}
}
}

protected final void initSVPN8_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN8_6 = false;
} else {
SVPN8_6 = true;
}
}
}

protected final void initSVPN9_1(String s) {
if (!s.trim().isEmpty()) {
SVPN9_1 = Byte.parseByte(s);
} else {
SVPN9_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN9_2(String s) {
if (!s.trim().isEmpty()) {
SVPN9_2 = Byte.parseByte(s);
} else {
SVPN9_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN9_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN9_3 = false;
} else {
SVPN9_3 = true;
}
}
}

protected final void initSVPN9_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN9_4 = false;
} else {
SVPN9_4 = true;
}
}
}

protected final void initSVPN9_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN9_5 = false;
} else {
SVPN9_5 = true;
}
}
}

protected final void initSVPN9_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN9_6 = false;
} else {
SVPN9_6 = true;
}
}
}

protected final void initSVSJ1(String s) {
if (!s.trim().isEmpty()) {
SVSJ1 = Byte.parseByte(s);
} else {
SVSJ1 = Byte.MIN_VALUE;
}
}

protected final void initSVSJ2(String s) {
if (!s.trim().isEmpty()) {
SVSJ2 = Byte.parseByte(s);
} else {
SVSJ2 = Byte.MIN_VALUE;
}
}

protected final void initSVSJ3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSJ3 = false;
} else {
SVSJ3 = true;
}
}
}

protected final void initSVSJ4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSJ4 = false;
} else {
SVSJ4 = true;
}
}
}

protected final void initSVSJ5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSJ5 = false;
} else {
SVSJ5 = true;
}
}
}

protected final void initSVSJ6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSJ6 = false;
} else {
SVSJ6 = true;
}
}
}

protected final void initSVSK1(String s) {
if (!s.trim().isEmpty()) {
SVSK1 = Integer.parseInt(s);
} else {
SVSK1 = Integer.MIN_VALUE;
}
}

protected final void initSVSK2(String s) {
if (!s.trim().isEmpty()) {
SVSK2 = Integer.parseInt(s);
} else {
SVSK2 = Integer.MIN_VALUE;
}
}

protected final void initSVSK3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSK3 = false;
} else {
SVSK3 = true;
}
}
}

protected final void initSVSK4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSK4 = false;
} else {
SVSK4 = true;
}
}
}

protected final void initSVSK5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSK5 = false;
} else {
SVSK5 = true;
}
}
}

protected final void initSVSK6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSK6 = false;
} else {
SVSK6 = true;
}
}
}

protected final void initSWEMWBS_DV(String s) {
if (!s.trim().isEmpty()) {
SWEMWBS_DV = Byte.parseByte(s);
} else {
SWEMWBS_DV = Byte.MIN_VALUE;
}
}

protected final void initTF_JBSEMP(String s) {
if (!s.trim().isEmpty()) {
TF_JBSEMP = Byte.parseByte(s);
} else {
TF_JBSEMP = Byte.MIN_VALUE;
}
}

protected final void initTMTIME(String s) {
if (!s.trim().isEmpty()) {
TMTIME = Short.parseShort(s);
} else {
TMTIME = Short.MIN_VALUE;
}
}

protected final void initTRAINANY(String s) {
if (!s.trim().isEmpty()) {
TRAINANY = Byte.parseByte(s);
} else {
TRAINANY = Byte.MIN_VALUE;
}
}

protected final void initTRAINDAYS1(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS1 = Short.parseShort(s);
} else {
TRAINDAYS1 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS2(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS2 = Short.parseShort(s);
} else {
TRAINDAYS2 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS3(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS3 = Short.parseShort(s);
} else {
TRAINDAYS3 = Short.MIN_VALUE;
}
}

protected final void initTRAINEND1(String s) {
if (!s.trim().isEmpty()) {
TRAINEND1 = Byte.parseByte(s);
} else {
TRAINEND1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND2(String s) {
if (!s.trim().isEmpty()) {
TRAINEND2 = Byte.parseByte(s);
} else {
TRAINEND2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND3(String s) {
if (!s.trim().isEmpty()) {
TRAINEND3 = Byte.parseByte(s);
} else {
TRAINEND3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS1(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS1 = Byte.parseByte(s);
} else {
TRAINHRS1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS2(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS2 = Byte.parseByte(s);
} else {
TRAINHRS2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS3(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS3 = Byte.parseByte(s);
} else {
TRAINHRS3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINN(String s) {
if (!s.trim().isEmpty()) {
TRAINN = Byte.parseByte(s);
} else {
TRAINN = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP11(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP11 = Byte.parseByte(s);
} else {
TRAINPURP11 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP12(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP12 = Byte.parseByte(s);
} else {
TRAINPURP12 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP13(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP13 = Byte.parseByte(s);
} else {
TRAINPURP13 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP21(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP21 = Byte.parseByte(s);
} else {
TRAINPURP21 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP22(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP22 = Byte.parseByte(s);
} else {
TRAINPURP22 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP23(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP23 = Byte.parseByte(s);
} else {
TRAINPURP23 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP31(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP31 = Byte.parseByte(s);
} else {
TRAINPURP31 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP32(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP32 = Byte.parseByte(s);
} else {
TRAINPURP32 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP33(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP33 = Byte.parseByte(s);
} else {
TRAINPURP33 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP41(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP41 = Byte.parseByte(s);
} else {
TRAINPURP41 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP42(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP42 = Byte.parseByte(s);
} else {
TRAINPURP42 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP43(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP43 = Byte.parseByte(s);
} else {
TRAINPURP43 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP51(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP51 = Byte.parseByte(s);
} else {
TRAINPURP51 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP52(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP52 = Byte.parseByte(s);
} else {
TRAINPURP52 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP53(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP53 = Byte.parseByte(s);
} else {
TRAINPURP53 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP61(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP61 = Byte.parseByte(s);
} else {
TRAINPURP61 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP62(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP62 = Byte.parseByte(s);
} else {
TRAINPURP62 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP63(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP63 = Byte.parseByte(s);
} else {
TRAINPURP63 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP71(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP71 = Byte.parseByte(s);
} else {
TRAINPURP71 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP72(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP72 = Byte.parseByte(s);
} else {
TRAINPURP72 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP73(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP73 = Byte.parseByte(s);
} else {
TRAINPURP73 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL1 = Byte.parseByte(s);
} else {
TRAINQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL2 = Byte.parseByte(s);
} else {
TRAINQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL3 = Byte.parseByte(s);
} else {
TRAINQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRBIKEFQ(String s) {
if (!s.trim().isEmpty()) {
TRBIKEFQ = Byte.parseByte(s);
} else {
TRBIKEFQ = Byte.MIN_VALUE;
}
}

protected final void initTRBUSFQ(String s) {
if (!s.trim().isEmpty()) {
TRBUSFQ = Byte.parseByte(s);
} else {
TRBUSFQ = Byte.MIN_VALUE;
}
}

protected final void initTRCARFQ(String s) {
if (!s.trim().isEmpty()) {
TRCARFQ = Byte.parseByte(s);
} else {
TRCARFQ = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRQUAL1 = Byte.parseByte(s);
} else {
TRQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL10(String s) {
if (!s.trim().isEmpty()) {
TRQUAL10 = Byte.parseByte(s);
} else {
TRQUAL10 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL11(String s) {
if (!s.trim().isEmpty()) {
TRQUAL11 = Byte.parseByte(s);
} else {
TRQUAL11 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL13(String s) {
if (!s.trim().isEmpty()) {
TRQUAL13 = Byte.parseByte(s);
} else {
TRQUAL13 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL15(String s) {
if (!s.trim().isEmpty()) {
TRQUAL15 = Byte.parseByte(s);
} else {
TRQUAL15 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL16(String s) {
if (!s.trim().isEmpty()) {
TRQUAL16 = Byte.parseByte(s);
} else {
TRQUAL16 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL17(String s) {
if (!s.trim().isEmpty()) {
TRQUAL17 = Byte.parseByte(s);
} else {
TRQUAL17 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL18(String s) {
if (!s.trim().isEmpty()) {
TRQUAL18 = Byte.parseByte(s);
} else {
TRQUAL18 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL19(String s) {
if (!s.trim().isEmpty()) {
TRQUAL19 = Byte.parseByte(s);
} else {
TRQUAL19 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRQUAL2 = Byte.parseByte(s);
} else {
TRQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL20(String s) {
if (!s.trim().isEmpty()) {
TRQUAL20 = Byte.parseByte(s);
} else {
TRQUAL20 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL21(String s) {
if (!s.trim().isEmpty()) {
TRQUAL21 = Byte.parseByte(s);
} else {
TRQUAL21 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL22(String s) {
if (!s.trim().isEmpty()) {
TRQUAL22 = Byte.parseByte(s);
} else {
TRQUAL22 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL23(String s) {
if (!s.trim().isEmpty()) {
TRQUAL23 = Byte.parseByte(s);
} else {
TRQUAL23 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL24(String s) {
if (!s.trim().isEmpty()) {
TRQUAL24 = Byte.parseByte(s);
} else {
TRQUAL24 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL25(String s) {
if (!s.trim().isEmpty()) {
TRQUAL25 = Byte.parseByte(s);
} else {
TRQUAL25 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL26(String s) {
if (!s.trim().isEmpty()) {
TRQUAL26 = Byte.parseByte(s);
} else {
TRQUAL26 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL27(String s) {
if (!s.trim().isEmpty()) {
TRQUAL27 = Byte.parseByte(s);
} else {
TRQUAL27 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL28(String s) {
if (!s.trim().isEmpty()) {
TRQUAL28 = Byte.parseByte(s);
} else {
TRQUAL28 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL29(String s) {
if (!s.trim().isEmpty()) {
TRQUAL29 = Byte.parseByte(s);
} else {
TRQUAL29 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRQUAL3 = Byte.parseByte(s);
} else {
TRQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL30(String s) {
if (!s.trim().isEmpty()) {
TRQUAL30 = Byte.parseByte(s);
} else {
TRQUAL30 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL31(String s) {
if (!s.trim().isEmpty()) {
TRQUAL31 = Byte.parseByte(s);
} else {
TRQUAL31 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL4(String s) {
if (!s.trim().isEmpty()) {
TRQUAL4 = Byte.parseByte(s);
} else {
TRQUAL4 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL5(String s) {
if (!s.trim().isEmpty()) {
TRQUAL5 = Byte.parseByte(s);
} else {
TRQUAL5 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL6(String s) {
if (!s.trim().isEmpty()) {
TRQUAL6 = Byte.parseByte(s);
} else {
TRQUAL6 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL7(String s) {
if (!s.trim().isEmpty()) {
TRQUAL7 = Byte.parseByte(s);
} else {
TRQUAL7 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL8(String s) {
if (!s.trim().isEmpty()) {
TRQUAL8 = Byte.parseByte(s);
} else {
TRQUAL8 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL9(String s) {
if (!s.trim().isEmpty()) {
TRQUAL9 = Byte.parseByte(s);
} else {
TRQUAL9 = Byte.MIN_VALUE;
}
}

protected final void initTRTRNFQ(String s) {
if (!s.trim().isEmpty()) {
TRTRNFQ = Byte.parseByte(s);
} else {
TRTRNFQ = Byte.MIN_VALUE;
}
}

protected final void initTRWHO1(String s) {
if (!s.trim().isEmpty()) {
TRWHO1 = Byte.parseByte(s);
} else {
TRWHO1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO2(String s) {
if (!s.trim().isEmpty()) {
TRWHO2 = Byte.parseByte(s);
} else {
TRWHO2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO3(String s) {
if (!s.trim().isEmpty()) {
TRWHO3 = Byte.parseByte(s);
} else {
TRWHO3 = Byte.MIN_VALUE;
}
}

protected final void initTSLP_30M(String s) {
if (!s.trim().isEmpty()) {
TSLP_30M = Byte.parseByte(s);
} else {
TSLP_30M = Byte.MIN_VALUE;
}
}

protected final void initTSLP_CGH(String s) {
if (!s.trim().isEmpty()) {
TSLP_CGH = Byte.parseByte(s);
} else {
TSLP_CGH = Byte.MIN_VALUE;
}
}

protected final void initTSLP_WAK(String s) {
if (!s.trim().isEmpty()) {
TSLP_WAK = Byte.parseByte(s);
} else {
TSLP_WAK = Byte.MIN_VALUE;
}
}

protected final void initTSTA_AWK(String s) {
if (!s.trim().isEmpty()) {
TSTA_AWK = Byte.parseByte(s);
} else {
TSTA_AWK = Byte.MIN_VALUE;
}
}

protected final void initTUIN1(String s) {
if (!s.trim().isEmpty()) {
TUIN1 = Short.parseShort(s);
} else {
TUIN1 = Short.MIN_VALUE;
}
}

protected final void initTUJBPL(String s) {
if (!s.trim().isEmpty()) {
TUJBPL = Short.parseShort(s);
} else {
TUJBPL = Short.MIN_VALUE;
}
}

protected final void initTWKCAR(String s) {
if (!s.trim().isEmpty()) {
TWKCAR = Byte.parseByte(s);
} else {
TWKCAR = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF1(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF1 = Byte.parseByte(s);
} else {
TWKDIFF1 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF2(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF2 = Byte.parseByte(s);
} else {
TWKDIFF2 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF3(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF3 = Byte.parseByte(s);
} else {
TWKDIFF3 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF4(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF4 = Byte.parseByte(s);
} else {
TWKDIFF4 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF5(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF5 = Byte.parseByte(s);
} else {
TWKDIFF5 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF6(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF6 = Byte.parseByte(s);
} else {
TWKDIFF6 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF7(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF7 = Byte.parseByte(s);
} else {
TWKDIFF7 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF8(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF8 = Byte.parseByte(s);
} else {
TWKDIFF8 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF97(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF97 = Byte.parseByte(s);
} else {
TWKDIFF97 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFFM(String s) {
if (!s.trim().isEmpty()) {
TWKDIFFM = Byte.parseByte(s);
} else {
TWKDIFFM = Byte.MIN_VALUE;
}
}

protected final void initUKBORN(String s) {
if (!s.trim().isEmpty()) {
UKBORN = Byte.parseByte(s);
} else {
UKBORN = Byte.MIN_VALUE;
}
}

protected final void initUNDQUS(String s) {
if (!s.trim().isEmpty()) {
UNDQUS = Byte.parseByte(s);
} else {
UNDQUS = Byte.MIN_VALUE;
}
}

protected final void initUNUSEXP(String s) {
if (!s.trim().isEmpty()) {
UNUSEXP = Byte.parseByte(s);
} else {
UNUSEXP = Byte.MIN_VALUE;
}
}

protected final void initUPSET(String s) {
if (!s.trim().isEmpty()) {
UPSET = Byte.parseByte(s);
} else {
UPSET = Byte.MIN_VALUE;
}
}

protected final void initURBAN_DV(String s) {
if (!s.trim().isEmpty()) {
URBAN_DV = Byte.parseByte(s);
} else {
URBAN_DV = Byte.MIN_VALUE;
}
}

protected final void initVOLFREQ(String s) {
if (!s.trim().isEmpty()) {
VOLFREQ = Byte.parseByte(s);
} else {
VOLFREQ = Byte.MIN_VALUE;
}
}

protected final void initVOLHRS(String s) {
if (!s.trim().isEmpty()) {
VOLHRS = Short.parseShort(s);
} else {
VOLHRS = Short.MIN_VALUE;
}
}

protected final void initVOLUN(String s) {
if (!s.trim().isEmpty()) {
VOLUN = Byte.parseByte(s);
} else {
VOLUN = Byte.MIN_VALUE;
}
}

protected final void initVOTE1(String s) {
if (!s.trim().isEmpty()) {
VOTE1 = Short.parseShort(s);
} else {
VOTE1 = Short.MIN_VALUE;
}
}

protected final void initVOTE2(String s) {
if (!s.trim().isEmpty()) {
VOTE2 = Short.parseShort(s);
} else {
VOTE2 = Short.MIN_VALUE;
}
}

protected final void initVOTE3(String s) {
if (!s.trim().isEmpty()) {
VOTE3 = Short.parseShort(s);
} else {
VOTE3 = Short.MIN_VALUE;
}
}

protected final void initVOTE4(String s) {
if (!s.trim().isEmpty()) {
VOTE4 = Short.parseShort(s);
} else {
VOTE4 = Short.MIN_VALUE;
}
}

protected final void initVOTE5(String s) {
if (!s.trim().isEmpty()) {
VOTE5 = Short.parseShort(s);
} else {
VOTE5 = Short.MIN_VALUE;
}
}

protected final void initVOTE6(String s) {
if (!s.trim().isEmpty()) {
VOTE6 = Short.parseShort(s);
} else {
VOTE6 = Short.MIN_VALUE;
}
}

protected final void initWHORUAGE(String s) {
if (!s.trim().isEmpty()) {
WHORUAGE = Byte.parseByte(s);
} else {
WHORUAGE = Byte.MIN_VALUE;
}
}

protected final void initWHORUEDU(String s) {
if (!s.trim().isEmpty()) {
WHORUEDU = Byte.parseByte(s);
} else {
WHORUEDU = Byte.MIN_VALUE;
}
}

protected final void initWHORUFAM(String s) {
if (!s.trim().isEmpty()) {
WHORUFAM = Byte.parseByte(s);
} else {
WHORUFAM = Byte.MIN_VALUE;
}
}

protected final void initWHORUPOL(String s) {
if (!s.trim().isEmpty()) {
WHORUPOL = Byte.parseByte(s);
} else {
WHORUPOL = Byte.MIN_VALUE;
}
}

protected final void initWHORUPRO(String s) {
if (!s.trim().isEmpty()) {
WHORUPRO = Byte.parseByte(s);
} else {
WHORUPRO = Byte.MIN_VALUE;
}
}

protected final void initWHORURAC(String s) {
if (!s.trim().isEmpty()) {
WHORURAC = Byte.parseByte(s);
} else {
WHORURAC = Byte.MIN_VALUE;
}
}

protected final void initWHORUSEX(String s) {
if (!s.trim().isEmpty()) {
WHORUSEX = Byte.parseByte(s);
} else {
WHORUSEX = Byte.MIN_VALUE;
}
}

protected final void initWKAUT1(String s) {
if (!s.trim().isEmpty()) {
WKAUT1 = Byte.parseByte(s);
} else {
WKAUT1 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT2(String s) {
if (!s.trim().isEmpty()) {
WKAUT2 = Byte.parseByte(s);
} else {
WKAUT2 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT3(String s) {
if (!s.trim().isEmpty()) {
WKAUT3 = Byte.parseByte(s);
} else {
WKAUT3 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT4(String s) {
if (!s.trim().isEmpty()) {
WKAUT4 = Byte.parseByte(s);
} else {
WKAUT4 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT5(String s) {
if (!s.trim().isEmpty()) {
WKAUT5 = Byte.parseByte(s);
} else {
WKAUT5 = Byte.MIN_VALUE;
}
}

protected final void initWKENDS(String s) {
if (!s.trim().isEmpty()) {
WKENDS = Byte.parseByte(s);
} else {
WKENDS = Byte.MIN_VALUE;
}
}

protected final void initWKPLSAM(String s) {
if (!s.trim().isEmpty()) {
WKPLSAM = Byte.parseByte(s);
} else {
WKPLSAM = Byte.MIN_VALUE;
}
}

protected final void initWKTIME(String s) {
if (!s.trim().isEmpty()) {
WKTIME = Short.parseShort(s);
} else {
WKTIME = Short.MIN_VALUE;
}
}

protected final void initWORKDIS(String s) {
if (!s.trim().isEmpty()) {
WORKDIS = Short.parseShort(s);
} else {
WORKDIS = Short.MIN_VALUE;
}
}

protected final void initWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
WORKTRAV = Byte.parseByte(s);
} else {
WORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initXPMOVE(String s) {
if (!s.trim().isEmpty()) {
XPMOVE = Byte.parseByte(s);
} else {
XPMOVE = Byte.MIN_VALUE;
}
}

protected final void initXPMVMNTH(String s) {
if (!s.trim().isEmpty()) {
XPMVMNTH = Byte.parseByte(s);
} else {
XPMVMNTH = Byte.MIN_VALUE;
}
}

protected final void initXPMVWHN(String s) {
if (!s.trim().isEmpty()) {
XPMVWHN = Byte.parseByte(s);
} else {
XPMVWHN = Byte.MIN_VALUE;
}
}

protected final void initXPMVWHR(String s) {
if (!s.trim().isEmpty()) {
XPMVWHR = Byte.parseByte(s);
} else {
XPMVWHR = Byte.MIN_VALUE;
}
}

protected final void initXPMVYR(String s) {
if (!s.trim().isEmpty()) {
XPMVYR = Short.parseShort(s);
} else {
XPMVYR = Short.MIN_VALUE;
}
}

protected final void initXTRA5MINOSM_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MINOSM_DV = Byte.parseByte(s);
} else {
XTRA5MINOSM_DV = Byte.MIN_VALUE;
}
}

protected final void initXTRA5MIN_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MIN_DV = Byte.parseByte(s);
} else {
XTRA5MIN_DV = Byte.MIN_VALUE;
}
}

protected final void initYAFUTA(String s) {
if (!s.trim().isEmpty()) {
YAFUTA = Byte.parseByte(s);
} else {
YAFUTA = Byte.MIN_VALUE;
}
}

protected final void initYAFUTB(String s) {
if (!s.trim().isEmpty()) {
YAFUTB = Byte.parseByte(s);
} else {
YAFUTB = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV1(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV1 = Byte.parseByte(s);
} else {
YAJBSRV1 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV2(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV2 = Byte.parseByte(s);
} else {
YAJBSRV2 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV3(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV3 = Byte.parseByte(s);
} else {
YAJBSRV3 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV4(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV4 = Byte.parseByte(s);
} else {
YAJBSRV4 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV5(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV5 = Byte.parseByte(s);
} else {
YAJBSRV5 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV7(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV7 = Byte.parseByte(s);
} else {
YAJBSRV7 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV8(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV8 = Byte.parseByte(s);
} else {
YAJBSRV8 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV96(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV96 = Byte.parseByte(s);
} else {
YAJBSRV96 = Byte.MIN_VALUE;
}
}

protected final void initYANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
YANSSEC5_DV = Byte.parseByte(s);
} else {
YANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initYASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC00_CC = Short.parseShort(s);
} else {
YASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC10_CC = Short.parseShort(s);
} else {
YASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC90_CC = Byte.parseByte(s);
} else {
YASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE1(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE1 = Byte.parseByte(s);
} else {
YNOTBIKE1 = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE2(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE2 = Byte.parseByte(s);
} else {
YNOTBIKE2 = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE3(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE3 = Byte.parseByte(s);
} else {
YNOTBIKE3 = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE96(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE96 = Byte.parseByte(s);
} else {
YNOTBIKE96 = Byte.MIN_VALUE;
}
}

protected final void initYPAMAR(String s) {
if (!s.trim().isEmpty()) {
YPAMAR = Byte.parseByte(s);
} else {
YPAMAR = Byte.MIN_VALUE;
}
}

protected final void initYPAPAR(String s) {
if (!s.trim().isEmpty()) {
YPAPAR = Byte.parseByte(s);
} else {
YPAPAR = Byte.MIN_VALUE;
}
}

protected final void initYPESTA(String s) {
if (!s.trim().isEmpty()) {
YPESTA = Byte.parseByte(s);
} else {
YPESTA = Byte.MIN_VALUE;
}
}

protected final void initYPESTB(String s) {
if (!s.trim().isEmpty()) {
YPESTB = Byte.parseByte(s);
} else {
YPESTB = Byte.MIN_VALUE;
}
}

protected final void initYPESTC(String s) {
if (!s.trim().isEmpty()) {
YPESTC = Byte.parseByte(s);
} else {
YPESTC = Byte.MIN_VALUE;
}
}

protected final void initYPESTE(String s) {
if (!s.trim().isEmpty()) {
YPESTE = Byte.parseByte(s);
} else {
YPESTE = Byte.MIN_VALUE;
}
}

protected final void initYPESTF(String s) {
if (!s.trim().isEmpty()) {
YPESTF = Byte.parseByte(s);
} else {
YPESTF = Byte.MIN_VALUE;
}
}

protected final void initYPESTI(String s) {
if (!s.trim().isEmpty()) {
YPESTI = Byte.parseByte(s);
} else {
YPESTI = Byte.MIN_VALUE;
}
}

protected final void initYPESTJ(String s) {
if (!s.trim().isEmpty()) {
YPESTJ = Byte.parseByte(s);
} else {
YPESTJ = Byte.MIN_VALUE;
}
}

protected final void initYPESTK(String s) {
if (!s.trim().isEmpty()) {
YPESTK = Byte.parseByte(s);
} else {
YPESTK = Byte.MIN_VALUE;
}
}

protected final void initYPNETCHT(String s) {
if (!s.trim().isEmpty()) {
YPNETCHT = Byte.parseByte(s);
} else {
YPNETCHT = Byte.MIN_VALUE;
}
}

protected final void initYPNPAL(String s) {
if (!s.trim().isEmpty()) {
YPNPAL = Byte.parseByte(s);
} else {
YPNPAL = Byte.MIN_VALUE;
}
}

protected final void initYPSOCWEB(String s) {
if (!s.trim().isEmpty()) {
YPSOCWEB = Byte.parseByte(s);
} else {
YPSOCWEB = Byte.MIN_VALUE;
}
}

public byte getADCTS() {
return ADCTS;
}

public byte getADOPTCH01() {
return ADOPTCH01;
}

public byte getADOPTCH02() {
return ADOPTCH02;
}

public byte getADOPTCH03() {
return ADOPTCH03;
}

public byte getADOPTCH04() {
return ADOPTCH04;
}

public byte getADOPTCH05() {
return ADOPTCH05;
}

public byte getADOPTCH06() {
return ADOPTCH06;
}

public boolean getADOPTCH07() {
return ADOPTCH07;
}

public boolean getADOPTCH08() {
return ADOPTCH08;
}

public boolean getADOPTCH09() {
return ADOPTCH09;
}

public boolean getADOPTCH10() {
return ADOPTCH10;
}

public boolean getADOPTCH11() {
return ADOPTCH11;
}

public boolean getADOPTCH12() {
return ADOPTCH12;
}

public boolean getADOPTCH13() {
return ADOPTCH13;
}

public boolean getADOPTCH14() {
return ADOPTCH14;
}

public boolean getADOPTCH15() {
return ADOPTCH15;
}

public boolean getADOPTCH16() {
return ADOPTCH16;
}

public byte getADSTATUS() {
return ADSTATUS;
}

public byte getAEDROF1() {
return AEDROF1;
}

public byte getAEDROF2() {
return AEDROF2;
}

public byte getAEDROF3() {
return AEDROF3;
}

public byte getAEDROF4() {
return AEDROF4;
}

protected double AEPUDA1() {
return AEPUDA1;
}

public byte getAEPUDA2() {
return AEPUDA2;
}

public byte getAEPUDA3() {
return AEPUDA3;
}

public byte getAEPUDA4() {
return AEPUDA4;
}

public byte getAEPUWK1() {
return AEPUWK1;
}

public byte getAEPUWK2() {
return AEPUWK2;
}

public byte getAEPUWK3() {
return AEPUWK3;
}

public byte getAEPUWK4() {
return AEPUWK4;
}

public byte getAGEGR10_DV() {
return AGEGR10_DV;
}

public byte getAGEGR13_DV() {
return AGEGR13_DV;
}

public byte getAGEGR5_DV() {
return AGEGR5_DV;
}

public byte getAGERET() {
return AGERET;
}

public short getAGE_DV() {
return AGE_DV;
}

public byte getAHVWELL() {
return AHVWELL;
}

public byte getAIDEFT() {
return AIDEFT;
}

public short getAIDHU1() {
return AIDHU1;
}

public short getAIDHU2() {
return AIDHU2;
}

public byte getAIDHUA1() {
return AIDHUA1;
}

public byte getAIDHUA10() {
return AIDHUA10;
}

public byte getAIDHUA11() {
return AIDHUA11;
}

public byte getAIDHUA12() {
return AIDHUA12;
}

public byte getAIDHUA13() {
return AIDHUA13;
}

public byte getAIDHUA14() {
return AIDHUA14;
}

public byte getAIDHUA15() {
return AIDHUA15;
}

public byte getAIDHUA16() {
return AIDHUA16;
}

public byte getAIDHUA2() {
return AIDHUA2;
}

public byte getAIDHUA3() {
return AIDHUA3;
}

public byte getAIDHUA4() {
return AIDHUA4;
}

public byte getAIDHUA5() {
return AIDHUA5;
}

public byte getAIDHUA6() {
return AIDHUA6;
}

public byte getAIDHUA7() {
return AIDHUA7;
}

public byte getAIDHUA8() {
return AIDHUA8;
}

public byte getAIDHUA9() {
return AIDHUA9;
}

public byte getALLCH01() {
return ALLCH01;
}

public byte getALLCH02() {
return ALLCH02;
}

public byte getALLCH03() {
return ALLCH03;
}

public byte getALLCH04() {
return ALLCH04;
}

public byte getALLCH05() {
return ALLCH05;
}

public byte getALLCH06() {
return ALLCH06;
}

public byte getALLCH07() {
return ALLCH07;
}

public byte getALLCH08() {
return ALLCH08;
}

public byte getALLCH09() {
return ALLCH09;
}

public byte getALLCH10() {
return ALLCH10;
}

public boolean getALLCH11() {
return ALLCH11;
}

public boolean getALLCH12() {
return ALLCH12;
}

public boolean getALLCH13() {
return ALLCH13;
}

public boolean getALLCH14() {
return ALLCH14;
}

public boolean getALLCH15() {
return ALLCH15;
}

public boolean getALLCH16() {
return ALLCH16;
}

public byte getAREA() {
return AREA;
}

protected double BASNSA() {
return BASNSA;
}

protected double BASRATE() {
return BASRATE;
}

public byte getBASREST() {
return BASREST;
}

public byte getBENCB() {
return BENCB;
}

public byte getBENCTC() {
return BENCTC;
}

public byte getBENDIS1() {
return BENDIS1;
}

public byte getBENDIS10() {
return BENDIS10;
}

public byte getBENDIS11() {
return BENDIS11;
}

public byte getBENDIS12() {
return BENDIS12;
}

public byte getBENDIS13() {
return BENDIS13;
}

public byte getBENDIS14() {
return BENDIS14;
}

public byte getBENDIS15() {
return BENDIS15;
}

public byte getBENDIS16() {
return BENDIS16;
}

public byte getBENDIS2() {
return BENDIS2;
}

public byte getBENDIS3() {
return BENDIS3;
}

public byte getBENDIS4() {
return BENDIS4;
}

public byte getBENDIS5() {
return BENDIS5;
}

public byte getBENDIS6() {
return BENDIS6;
}

public byte getBENDIS7() {
return BENDIS7;
}

public byte getBENDIS8() {
return BENDIS8;
}

public byte getBENDIS9() {
return BENDIS9;
}

public byte getBENDIS96() {
return BENDIS96;
}

public byte getBENDIS97() {
return BENDIS97;
}

public byte getBENFAM1() {
return BENFAM1;
}

public byte getBENFAM10() {
return BENFAM10;
}

public byte getBENFAM2() {
return BENFAM2;
}

public byte getBENFAM3() {
return BENFAM3;
}

public byte getBENFAM4() {
return BENFAM4;
}

public byte getBENFAM5() {
return BENFAM5;
}

public byte getBENFAM6() {
return BENFAM6;
}

public byte getBENFAM7() {
return BENFAM7;
}

public byte getBENFAM8() {
return BENFAM8;
}

public byte getBENFAM9() {
return BENFAM9;
}

public byte getBENFAM96() {
return BENFAM96;
}

public byte getBENHOU1() {
return BENHOU1;
}

public byte getBENHOU2() {
return BENHOU2;
}

public byte getBENHOU3() {
return BENHOU3;
}

public byte getBENHOU4() {
return BENHOU4;
}

public byte getBENHOU5() {
return BENHOU5;
}

public byte getBENHOU6() {
return BENHOU6;
}

public byte getBENHOU7() {
return BENHOU7;
}

public byte getBENHOU8() {
return BENHOU8;
}

public byte getBENHOU9() {
return BENHOU9;
}

public byte getBENHOU96() {
return BENHOU96;
}

public byte getBENLINK() {
return BENLINK;
}

public byte getBENPEN1() {
return BENPEN1;
}

public byte getBENPEN10() {
return BENPEN10;
}

public byte getBENPEN11() {
return BENPEN11;
}

public byte getBENPEN12() {
return BENPEN12;
}

public byte getBENPEN13() {
return BENPEN13;
}

public byte getBENPEN2() {
return BENPEN2;
}

public byte getBENPEN3() {
return BENPEN3;
}

public byte getBENPEN4() {
return BENPEN4;
}

public byte getBENPEN5() {
return BENPEN5;
}

public byte getBENPEN6() {
return BENPEN6;
}

public byte getBENPEN7() {
return BENPEN7;
}

public byte getBENPEN8() {
return BENPEN8;
}

public byte getBENPEN9() {
return BENPEN9;
}

public byte getBENPEN96() {
return BENPEN96;
}

public byte getBENSTA1() {
return BENSTA1;
}

public byte getBENSTA10() {
return BENSTA10;
}

public byte getBENSTA11() {
return BENSTA11;
}

public byte getBENSTA12() {
return BENSTA12;
}

public byte getBENSTA13() {
return BENSTA13;
}

public byte getBENSTA2() {
return BENSTA2;
}

public byte getBENSTA3() {
return BENSTA3;
}

public byte getBENSTA4() {
return BENSTA4;
}

public byte getBENSTA5() {
return BENSTA5;
}

public byte getBENSTA6() {
return BENSTA6;
}

public byte getBENSTA7() {
return BENSTA7;
}

public byte getBENSTA9() {
return BENSTA9;
}

public byte getBENSTA96() {
return BENSTA96;
}

public byte getBENSTA97() {
return BENSTA97;
}

public byte getBENTAX1() {
return BENTAX1;
}

public byte getBENTAX10() {
return BENTAX10;
}

public byte getBENTAX2() {
return BENTAX2;
}

public byte getBENTAX3() {
return BENTAX3;
}

public byte getBENTAX4() {
return BENTAX4;
}

public byte getBENTAX5() {
return BENTAX5;
}

public byte getBENTAX6() {
return BENTAX6;
}

public byte getBENTAX7() {
return BENTAX7;
}

public byte getBENTAX8() {
return BENTAX8;
}

public byte getBENTAX9() {
return BENTAX9;
}

public byte getBENTAX96() {
return BENTAX96;
}

public byte getBENUNEMP1() {
return BENUNEMP1;
}

public byte getBENUNEMP2() {
return BENUNEMP2;
}

public byte getBENUNEMP3() {
return BENUNEMP3;
}

public byte getBENUNEMP4() {
return BENUNEMP4;
}

public byte getBENUNEMP5() {
return BENUNEMP5;
}

public byte getBENUNEMP6() {
return BENUNEMP6;
}

public byte getBENUNEMP7() {
return BENUNEMP7;
}

public byte getBENUNEMP96() {
return BENUNEMP96;
}

public short getBIRTHY() {
return BIRTHY;
}

public byte getBRLOOP() {
return BRLOOP;
}

public byte getBTYPE1() {
return BTYPE1;
}

public byte getBTYPE10() {
return BTYPE10;
}

public byte getBTYPE11() {
return BTYPE11;
}

public byte getBTYPE12() {
return BTYPE12;
}

public byte getBTYPE13() {
return BTYPE13;
}

public byte getBTYPE14() {
return BTYPE14;
}

public byte getBTYPE2() {
return BTYPE2;
}

public byte getBTYPE3() {
return BTYPE3;
}

public byte getBTYPE4() {
return BTYPE4;
}

public byte getBTYPE5() {
return BTYPE5;
}

public byte getBTYPE6() {
return BTYPE6;
}

public byte getBTYPE7() {
return BTYPE7;
}

public byte getBTYPE8() {
return BTYPE8;
}

public byte getBTYPE9() {
return BTYPE9;
}

public byte getBTYPE96() {
return BTYPE96;
}

public byte getBUNO_DV() {
return BUNO_DV;
}

public byte getCARBUY1() {
return CARBUY1;
}

public byte getCARBUY10() {
return CARBUY10;
}

public byte getCARBUY11() {
return CARBUY11;
}

public byte getCARBUY12() {
return CARBUY12;
}

public byte getCARBUY2() {
return CARBUY2;
}

public byte getCARBUY3() {
return CARBUY3;
}

public byte getCARBUY4() {
return CARBUY4;
}

public byte getCARBUY5() {
return CARBUY5;
}

public byte getCARBUY6() {
return CARBUY6;
}

public byte getCARBUY7() {
return CARBUY7;
}

public byte getCARBUY8() {
return CARBUY8;
}

public byte getCARBUY9() {
return CARBUY9;
}

public byte getCARBUY97() {
return CARBUY97;
}

public int getCARMILES() {
return CARMILES;
}

public byte getCARSRV1() {
return CARSRV1;
}

public byte getCARSRV2() {
return CARSRV2;
}

public byte getCARSRV3() {
return CARSRV3;
}

public byte getCASIEND() {
return CASIEND;
}

public int getCCAMTJT() {
return CCAMTJT;
}

public int getCCAMTSOLE() {
return CCAMTSOLE;
}

public byte getCCARE() {
return CCARE;
}

public byte getCCBILLJT() {
return CCBILLJT;
}

public byte getCCBILLSOLE() {
return CCBILLSOLE;
}

public byte getCCJT() {
return CCJT;
}

public byte getCCJTP0() {
return CCJTP0;
}

public byte getCCJTP1() {
return CCJTP1;
}

public byte getCCJTP10() {
return CCJTP10;
}

public byte getCCJTP11() {
return CCJTP11;
}

public byte getCCJTP12() {
return CCJTP12;
}

public byte getCCJTP13() {
return CCJTP13;
}

public byte getCCJTP14() {
return CCJTP14;
}

public byte getCCJTP15() {
return CCJTP15;
}

public byte getCCJTP16() {
return CCJTP16;
}

public byte getCCJTP2() {
return CCJTP2;
}

public byte getCCJTP3() {
return CCJTP3;
}

public byte getCCJTP4() {
return CCJTP4;
}

public byte getCCJTP5() {
return CCJTP5;
}

public byte getCCJTP6() {
return CCJTP6;
}

public byte getCCJTP7() {
return CCJTP7;
}

public byte getCCJTP8() {
return CCJTP8;
}

public byte getCCJTP9() {
return CCJTP9;
}

public byte getCCSOLE() {
return CCSOLE;
}

public byte getCCWORK() {
return CCWORK;
}

public short getCH1BY4() {
return CH1BY4;
}

public short getCHARAM() {
return CHARAM;
}

public byte getCHARFREQ() {
return CHARFREQ;
}

public byte getCHARGV() {
return CHARGV;
}

public byte getCHBRFED01() {
return CHBRFED01;
}

public byte getCHBRFED02() {
return CHBRFED02;
}

public boolean getCHBRFED03() {
return CHBRFED03;
}

public boolean getCHBRFED04() {
return CHBRFED04;
}

public boolean getCHBRFED05() {
return CHBRFED05;
}

public boolean getCHBRFED06() {
return CHBRFED06;
}

public boolean getCHBRFED07() {
return CHBRFED07;
}

public boolean getCHBRFED08() {
return CHBRFED08;
}

public boolean getCHBRFED09() {
return CHBRFED09;
}

public boolean getCHBRFED10() {
return CHBRFED10;
}

public boolean getCHBRFED11() {
return CHBRFED11;
}

public boolean getCHBRFED12() {
return CHBRFED12;
}

public boolean getCHBRFED13() {
return CHBRFED13;
}

public boolean getCHBRFED14() {
return CHBRFED14;
}

public boolean getCHBRFED15() {
return CHBRFED15;
}

public boolean getCHBRFED16() {
return CHBRFED16;
}

public byte getCHILDPNO() {
return CHILDPNO;
}

public byte getCHKRESP() {
return CHKRESP;
}

public int getCINDTIME() {
return CINDTIME;
}

public byte getCITZN1() {
return CITZN1;
}

public byte getCITZN2() {
return CITZN2;
}

public byte getCITZN3() {
return CITZN3;
}

public byte getCJBATT() {
return CJBATT;
}

public byte getCJOB() {
return CJOB;
}

public byte getCMLSTAT1() {
return CMLSTAT1;
}

public byte getCMLSTAT2() {
return CMLSTAT2;
}

public byte getCMLSTAT3() {
return CMLSTAT3;
}

public byte getCOH1BM() {
return COH1BM;
}

public short getCOH1BY() {
return COH1BY;
}

public byte getCOH1EM() {
return COH1EM;
}

public short getCOH1EY() {
return COH1EY;
}

public byte getCOH1MR() {
return COH1MR;
}

public byte getCOHAB() {
return COHAB;
}

public byte getCOHABN() {
return COHABN;
}

public boolean getCOHAB_DV() {
return COHAB_DV;
}

public byte getCONTFT() {
return CONTFT;
}

public byte getCOUNTRY() {
return COUNTRY;
}

public int getCREDAMT() {
return CREDAMT;
}

public byte getCREDITOR() {
return CREDITOR;
}

public int getCREDJT() {
return CREDJT;
}

public int getCREDSOLE() {
return CREDSOLE;
}

public byte getCSTAT() {
return CSTAT;
}

public byte getCTADD1_CODE() {
return CTADD1_CODE;
}

public byte getCTADD2_CODE() {
return CTADD2_CODE;
}

public byte getCTCNTY_CODE() {
return CTCNTY_CODE;
}

public byte getCTCONS() {
return CTCONS;
}

public byte getCTCONSCONF1() {
return CTCONSCONF1;
}

public byte getCTCONSCONF2() {
return CTCONSCONF2;
}

public byte getCTCONSCONF3() {
return CTCONSCONF3;
}

public byte getCTCONSCONF4() {
return CTCONSCONF4;
}

public byte getCTCONSCONF5() {
return CTCONSCONF5;
}

public byte getCTCONSCONF6() {
return CTCONSCONF6;
}

public byte getCTCONSCONF7() {
return CTCONSCONF7;
}

public byte getCTCONSCONF8() {
return CTCONSCONF8;
}

public byte getCTCONSCONF94() {
return CTCONSCONF94;
}

public byte getCTEMAIL_CODE() {
return CTEMAIL_CODE;
}

public byte getCTPCODE_CODE() {
return CTPCODE_CODE;
}

public byte getCTREL() {
return CTREL;
}

public byte getCTTEL1_CODE() {
return CTTEL1_CODE;
}

public byte getCTTEL2_CODE() {
return CTTEL2_CODE;
}

public byte getCTTOWN_CODE() {
return CTTOWN_CODE;
}

public byte getCURRJOB1() {
return CURRJOB1;
}

public byte getCURRJOB2() {
return CURRJOB2;
}

public byte getCURRJOB3() {
return CURRJOB3;
}

public byte getCURRJOB4() {
return CURRJOB4;
}

public byte getCURRJOB5() {
return CURRJOB5;
}

public byte getCURRJOB6() {
return CURRJOB6;
}

public byte getCURRPART1() {
return CURRPART1;
}

public byte getCURRPART2() {
return CURRPART2;
}

public byte getCURRSTAT1() {
return CURRSTAT1;
}

public byte getCURRSTAT2() {
return CURRSTAT2;
}

public byte getCURRSTAT3() {
return CURRSTAT3;
}

public byte getCURRSTAT4() {
return CURRSTAT4;
}

public byte getCURRSTAT5() {
return CURRSTAT5;
}

public byte getCURRSTAT6() {
return CURRSTAT6;
}

public byte getCURRYNOT1() {
return CURRYNOT1;
}

public byte getCURRYNOT2() {
return CURRYNOT2;
}

public byte getCURRYNOT3() {
return CURRYNOT3;
}

public byte getCURRYNOT4() {
return CURRYNOT4;
}

public byte getCURRYNOT5() {
return CURRYNOT5;
}

public byte getCURRYNOT6() {
return CURRYNOT6;
}

public byte getCURRYNOT7() {
return CURRYNOT7;
}

public byte getCURRYNOT8() {
return CURRYNOT8;
}

public byte getCURRYNOT96() {
return CURRYNOT96;
}

public byte getCURRYNOT97() {
return CURRYNOT97;
}

public byte getDEBT1() {
return DEBT1;
}

public byte getDEBT2() {
return DEBT2;
}

public byte getDEBT4() {
return DEBT4;
}

public byte getDEBT5() {
return DEBT5;
}

public byte getDEBT6() {
return DEBT6;
}

public byte getDEBT7() {
return DEBT7;
}

public byte getDEBT8() {
return DEBT8;
}

public byte getDEBT96() {
return DEBT96;
}

public byte getDEBT97() {
return DEBT97;
}

public byte getDEBTC1() {
return DEBTC1;
}

public byte getDEBTC2() {
return DEBTC2;
}

public byte getDEBTC3() {
return DEBTC3;
}

public byte getDEBTC4() {
return DEBTC4;
}

public byte getDEBTC5() {
return DEBTC5;
}

public byte getDEBTINFO1() {
return DEBTINFO1;
}

public byte getDEBTINFO10() {
return DEBTINFO10;
}

public byte getDEBTINFO11() {
return DEBTINFO11;
}

public byte getDEBTINFO2() {
return DEBTINFO2;
}

public byte getDEBTINFO3() {
return DEBTINFO3;
}

public byte getDEBTINFO4() {
return DEBTINFO4;
}

public byte getDEBTINFO5() {
return DEBTINFO5;
}

public byte getDEBTINFO6() {
return DEBTINFO6;
}

public byte getDEBTINFO7() {
return DEBTINFO7;
}

public byte getDEBTINFO8() {
return DEBTINFO8;
}

public byte getDEBTINFO9() {
return DEBTINFO9;
}

public byte getDEBTINFO97() {
return DEBTINFO97;
}

public byte getDEBTOTH1() {
return DEBTOTH1;
}

public byte getDEBTOTH2() {
return DEBTOTH2;
}

public byte getDEBTOTH3() {
return DEBTOTH3;
}

public byte getDEBTOTH4() {
return DEBTOTH4;
}

public byte getDEBTOTH96() {
return DEBTOTH96;
}

public byte getDEBTPN0() {
return DEBTPN0;
}

public byte getDEBTPN1() {
return DEBTPN1;
}

public byte getDEBTPN10() {
return DEBTPN10;
}

public byte getDEBTPN11() {
return DEBTPN11;
}

public byte getDEBTPN12() {
return DEBTPN12;
}

public byte getDEBTPN13() {
return DEBTPN13;
}

public byte getDEBTPN14() {
return DEBTPN14;
}

public byte getDEBTPN15() {
return DEBTPN15;
}

public byte getDEBTPN16() {
return DEBTPN16;
}

public byte getDEBTPN2() {
return DEBTPN2;
}

public byte getDEBTPN3() {
return DEBTPN3;
}

public byte getDEBTPN4() {
return DEBTPN4;
}

public byte getDEBTPN5() {
return DEBTPN5;
}

public byte getDEBTPN6() {
return DEBTPN6;
}

public byte getDEBTPN7() {
return DEBTPN7;
}

public byte getDEBTPN8() {
return DEBTPN8;
}

public byte getDEBTPN9() {
return DEBTPN9;
}

public byte getDEBTSJ() {
return DEBTSJ;
}

public int getDEBTSK() {
return DEBTSK;
}

public byte getDEBTWHO1() {
return DEBTWHO1;
}

public byte getDEBTWHO2() {
return DEBTWHO2;
}

public byte getDEBTWHO3() {
return DEBTWHO3;
}

public byte getDEBTWHO4() {
return DEBTWHO4;
}

public byte getDEBTWHO97() {
return DEBTWHO97;
}

public int getDEBTY() {
return DEBTY;
}

public boolean getDEPCHL_DV() {
return DEPCHL_DV;
}

public byte getDEPENTH1() {
return DEPENTH1;
}

public byte getDEPENTH2() {
return DEPENTH2;
}

public byte getDEPENTH3() {
return DEPENTH3;
}

public byte getDEPENTH4() {
return DEPENTH4;
}

public byte getDEPENTH5() {
return DEPENTH5;
}

public byte getDEPENTH6() {
return DEPENTH6;
}

public byte getDETINC1() {
return DETINC1;
}

public byte getDETINC2() {
return DETINC2;
}

public byte getDETINC3() {
return DETINC3;
}

public byte getDETINC4() {
return DETINC4;
}

public byte getDETINC5() {
return DETINC5;
}

public byte getDETINC6() {
return DETINC6;
}

public byte getDISDIF1() {
return DISDIF1;
}

public byte getDISDIF10() {
return DISDIF10;
}

public byte getDISDIF11() {
return DISDIF11;
}

public byte getDISDIF12() {
return DISDIF12;
}

public byte getDISDIF2() {
return DISDIF2;
}

public byte getDISDIF3() {
return DISDIF3;
}

public byte getDISDIF4() {
return DISDIF4;
}

public byte getDISDIF5() {
return DISDIF5;
}

public byte getDISDIF6() {
return DISDIF6;
}

public byte getDISDIF7() {
return DISDIF7;
}

public byte getDISDIF8() {
return DISDIF8;
}

public byte getDISDIF9() {
return DISDIF9;
}

public byte getDISDIF96() {
return DISDIF96;
}

public byte getDIVCHK1() {
return DIVCHK1;
}

public byte getDIVCHK2() {
return DIVCHK2;
}

public byte getDIVCHK3() {
return DIVCHK3;
}

public byte getDIVFIN1() {
return DIVFIN1;
}

public byte getDIVFIN2() {
return DIVFIN2;
}

public byte getDIVFIN3() {
return DIVFIN3;
}

public byte getDKLM() {
return DKLM;
}

public short getDOBY_DV() {
return DOBY_DV;
}

public byte getDONEPROXY() {
return DONEPROXY;
}

public byte getDRGMJ() {
return DRGMJ;
}

public byte getDRGOTH() {
return DRGOTH;
}

public byte getDRGSOL() {
return DRGSOL;
}

public byte getDRIVE() {
return DRIVE;
}

public byte getDRNK4W() {
return DRNK4W;
}

public byte getDVAGE() {
return DVAGE;
}

public byte getDVM1() {
return DVM1;
}

public byte getDVM2() {
return DVM2;
}

public byte getDVM3() {
return DVM3;
}

public short getDVY41() {
return DVY41;
}

public short getDVY42() {
return DVY42;
}

public byte getDVY43() {
return DVY43;
}

public byte getEATLIVU() {
return EATLIVU;
}

public byte getEDASP() {
return EDASP;
}

public byte getEDLINK() {
return EDLINK;
}

public byte getEDLINKCONF() {
return EDLINKCONF;
}

public byte getEDLINKCONFB() {
return EDLINKCONFB;
}

public byte getEDLINKKIDE() {
return EDLINKKIDE;
}

public byte getEDLINKKIDSWN() {
return EDLINKKIDSWN;
}

public short getEDTYPE() {
return EDTYPE;
}

public byte getEDUCATION() {
return EDUCATION;
}

public byte getEDUCISGN() {
return EDUCISGN;
}

public byte getEDUCLINKB1() {
return EDUCLINKB1;
}

public byte getEDUCLINKB2() {
return EDUCLINKB2;
}

public byte getEDUCLINKB3() {
return EDUCLINKB3;
}

public byte getEDUCRECD() {
return EDUCRECD;
}

public byte getEDUCRSGN() {
return EDUCRSGN;
}

public byte getEDUCSN() {
return EDUCSN;
}

public byte getEMPCHK() {
return EMPCHK;
}

public byte getEMPLOY() {
return EMPLOY;
}

public byte getEMPSTENDD() {
return EMPSTENDD;
}

public byte getEMPSTENDM() {
return EMPSTENDM;
}

public short getEMPSTENDY4() {
return EMPSTENDY4;
}

public byte getENDMNTH1() {
return ENDMNTH1;
}

public byte getENDMNTH2() {
return ENDMNTH2;
}

public byte getENDMNTH3() {
return ENDMNTH3;
}

public byte getENDMNTH4() {
return ENDMNTH4;
}

public byte getENVHABIT1() {
return ENVHABIT1;
}

public byte getENVHABIT10() {
return ENVHABIT10;
}

public byte getENVHABIT11() {
return ENVHABIT11;
}

public byte getENVHABIT2() {
return ENVHABIT2;
}

public byte getENVHABIT3() {
return ENVHABIT3;
}

public byte getENVHABIT4() {
return ENVHABIT4;
}

public byte getENVHABIT5() {
return ENVHABIT5;
}

public byte getENVHABIT6() {
return ENVHABIT6;
}

public byte getENVHABIT7() {
return ENVHABIT7;
}

public byte getENVHABIT8() {
return ENVHABIT8;
}

public byte getENVHABIT9() {
return ENVHABIT9;
}

public short getEPROSH() {
return EPROSH;
}

public byte getETHN_DV() {
return ETHN_DV;
}

public byte getEVRALC() {
return EVRALC;
}

public byte getEVRSMO() {
return EVRSMO;
}

public byte getEXPMANAGE1() {
return EXPMANAGE1;
}

public byte getEXPMANAGE10() {
return EXPMANAGE10;
}

public byte getEXPMANAGE11() {
return EXPMANAGE11;
}

public byte getEXPMANAGE2() {
return EXPMANAGE2;
}

public byte getEXPMANAGE3() {
return EXPMANAGE3;
}

public byte getEXPMANAGE4() {
return EXPMANAGE4;
}

public byte getEXPMANAGE5() {
return EXPMANAGE5;
}

public byte getEXPMANAGE6() {
return EXPMANAGE6;
}

public byte getEXPMANAGE7() {
return EXPMANAGE7;
}

public byte getEXPMANAGE8() {
return EXPMANAGE8;
}

public byte getEXPMANAGE9() {
return EXPMANAGE9;
}

public byte getEXPMANAGE97() {
return EXPMANAGE97;
}

public byte getEXTNSA() {
return EXTNSA;
}

protected double EXTRATE() {
return EXTRATE;
}

public byte getEXTREST() {
return EXTREST;
}

public byte getFAMILY() {
return FAMILY;
}

public byte getFAMSUP() {
return FAMSUP;
}

public byte getFATHER() {
return FATHER;
}

public byte getFENOW() {
return FENOW;
}

public byte getFFBRFEDLW() {
return FFBRFEDLW;
}

public byte getFF_BENTYPE01() {
return FF_BENTYPE01;
}

public byte getFF_BENTYPE02() {
return FF_BENTYPE02;
}

public byte getFF_BENTYPE03() {
return FF_BENTYPE03;
}

public byte getFF_BENTYPE04() {
return FF_BENTYPE04;
}

public byte getFF_BENTYPE05() {
return FF_BENTYPE05;
}

public byte getFF_BENTYPE06() {
return FF_BENTYPE06;
}

public byte getFF_BENTYPE07() {
return FF_BENTYPE07;
}

public byte getFF_BENTYPE08() {
return FF_BENTYPE08;
}

public byte getFF_BENTYPE09() {
return FF_BENTYPE09;
}

public byte getFF_BENTYPE10() {
return FF_BENTYPE10;
}

public byte getFF_BENTYPE11() {
return FF_BENTYPE11;
}

public byte getFF_BENTYPE12() {
return FF_BENTYPE12;
}

public byte getFF_BENTYPE13() {
return FF_BENTYPE13;
}

public byte getFF_BENTYPE14() {
return FF_BENTYPE14;
}

public byte getFF_BENTYPE15() {
return FF_BENTYPE15;
}

public byte getFF_BENTYPE16() {
return FF_BENTYPE16;
}

public byte getFF_BENTYPE17() {
return FF_BENTYPE17;
}

public byte getFF_BENTYPE18() {
return FF_BENTYPE18;
}

public byte getFF_BENTYPE19() {
return FF_BENTYPE19;
}

public byte getFF_BENTYPE20() {
return FF_BENTYPE20;
}

public byte getFF_BENTYPE21() {
return FF_BENTYPE21;
}

public byte getFF_BENTYPE22() {
return FF_BENTYPE22;
}

public byte getFF_BENTYPE23() {
return FF_BENTYPE23;
}

public byte getFF_BENTYPE24() {
return FF_BENTYPE24;
}

public byte getFF_BENTYPE25() {
return FF_BENTYPE25;
}

public byte getFF_BENTYPE26() {
return FF_BENTYPE26;
}

public byte getFF_BENTYPE27() {
return FF_BENTYPE27;
}

public byte getFF_BENTYPE28() {
return FF_BENTYPE28;
}

public byte getFF_BENTYPE29() {
return FF_BENTYPE29;
}

public byte getFF_BENTYPE30() {
return FF_BENTYPE30;
}

public byte getFF_BENTYPE31() {
return FF_BENTYPE31;
}

public byte getFF_BENTYPE32() {
return FF_BENTYPE32;
}

public byte getFF_BENTYPE33() {
return FF_BENTYPE33;
}

public byte getFF_BENTYPE34() {
return FF_BENTYPE34;
}

public byte getFF_BENTYPE35() {
return FF_BENTYPE35;
}

public byte getFF_BENTYPE36() {
return FF_BENTYPE36;
}

public byte getFF_BENTYPE37() {
return FF_BENTYPE37;
}

public byte getFF_BENTYPE38() {
return FF_BENTYPE38;
}

public byte getFF_BENTYPE39() {
return FF_BENTYPE39;
}

public byte getFF_EMPLW() {
return FF_EMPLW;
}

public byte getFF_EVERINT() {
return FF_EVERINT;
}

public byte getFF_IVINTLANG() {
return FF_IVINTLANG;
}

public byte getFF_IVLOLW() {
return FF_IVLOLW;
}

public byte getFF_JBMNGR() {
return FF_JBMNGR;
}

public byte getFF_JBSEMP() {
return FF_JBSEMP;
}

public byte getFF_JBSIZE() {
return FF_JBSIZE;
}

public byte getFF_JBSTAT() {
return FF_JBSTAT;
}

public byte getFF_OPRLG() {
return FF_OPRLG;
}

public byte getFF_OPRLG0() {
return FF_OPRLG0;
}

public byte getFF_OPRLG0NI() {
return FF_OPRLG0NI;
}

public byte getFF_TEL() {
return FF_TEL;
}

public byte getFF_UKBORN() {
return FF_UKBORN;
}

public short getFF_YR2UK4() {
return FF_YR2UK4;
}

protected double FIBENOTHR_DV() {
return FIBENOTHR_DV;
}

protected double FIBENOTHR_IF() {
return FIBENOTHR_IF;
}

public byte getFIBENOTHR_TC() {
return FIBENOTHR_TC;
}

protected double FIMNGRS_IF() {
return FIMNGRS_IF;
}

public byte getFIMNGRS_TC() {
return FIMNGRS_TC;
}

protected double FIMNINVNET_DV() {
return FIMNINVNET_DV;
}

protected double FIMNLABGRS_IF() {
return FIMNLABGRS_IF;
}

public byte getFIMNLABGRS_TC() {
return FIMNLABGRS_TC;
}

protected double FIMNLABNET_DV() {
return FIMNLABNET_DV;
}

public byte getFIMNLABNET_TC() {
return FIMNLABNET_TC;
}

protected double FIMNMISC_DV() {
return FIMNMISC_DV;
}

protected double FIMNNET_DV() {
return FIMNNET_DV;
}

protected double FIMNPEN_DV() {
return FIMNPEN_DV;
}

protected double FIMNPRBEN_DV() {
return FIMNPRBEN_DV;
}

protected double FIMNSBEN_DV() {
return FIMNSBEN_DV;
}

public byte getFINFUT() {
return FINFUT;
}

public byte getFIVEALCDR() {
return FIVEALCDR;
}

public byte getFIYRDB1() {
return FIYRDB1;
}

public byte getFIYRDB2() {
return FIYRDB2;
}

public byte getFIYRDB3() {
return FIYRDB3;
}

public byte getFIYRDB4() {
return FIYRDB4;
}

public byte getFIYRDB5() {
return FIYRDB5;
}

public byte getFIYRDB6() {
return FIYRDB6;
}

public int getFIYRDIA() {
return FIYRDIA;
}

protected double FIYRINVINC_DV() {
return FIYRINVINC_DV;
}

public byte getFIYRINVINC_IF() {
return FIYRINVINC_IF;
}

public byte getFIYRINVINC_TC() {
return FIYRINVINC_TC;
}

public byte getFLAGLINKB1() {
return FLAGLINKB1;
}

public byte getFLAGLINKB2() {
return FLAGLINKB2;
}

public byte getFLAGLINKB3() {
return FLAGLINKB3;
}

public byte getFLYES1() {
return FLYES1;
}

public byte getFLYES2() {
return FLYES2;
}

public byte getFLYES3() {
return FLYES3;
}

public byte getFLYES4() {
return FLYES4;
}

public int getFNPID() {
return FNPID;
}

public byte getFNPNO() {
return FNPNO;
}

public int getFNSPID() {
return FNSPID;
}

public byte getFNSPNO() {
return FNSPNO;
}

public byte getFRDRG() {
return FRDRG;
}

public byte getFT2ENDM1() {
return FT2ENDM1;
}

public byte getFT2ENDM2() {
return FT2ENDM2;
}

public short getFT2ENDY41() {
return FT2ENDY41;
}

public short getFT2ENDY42() {
return FT2ENDY42;
}

public byte getFTEDANY() {
return FTEDANY;
}

public byte getFTEDEND1() {
return FTEDEND1;
}

public byte getFTEDEND2() {
return FTEDEND2;
}

public byte getFTEDMOR1() {
return FTEDMOR1;
}

public byte getFTEDMOR2() {
return FTEDMOR2;
}

public byte getFTEDSTARTM1() {
return FTEDSTARTM1;
}

public byte getFTEDSTARTM2() {
return FTEDSTARTM2;
}

public short getFTEDSTARTY41() {
return FTEDSTARTY41;
}

public short getFTEDSTARTY42() {
return FTEDSTARTY42;
}

public byte getFTENDM() {
return FTENDM;
}

public short getFTENDY4() {
return FTENDY4;
}

public byte getFTQUALS() {
return FTQUALS;
}

public int getGRFPID() {
return GRFPID;
}

public byte getGRFPNO() {
return GRFPNO;
}

public int getGRMPID() {
return GRMPID;
}

public byte getGRMPNO() {
return GRMPNO;
}

public byte getHASCURR() {
return HASCURR;
}

public byte getHASEMAIL() {
return HASEMAIL;
}

public byte getHCOND1() {
return HCOND1;
}

public byte getHCOND10() {
return HCOND10;
}

public byte getHCOND11() {
return HCOND11;
}

public byte getHCOND12() {
return HCOND12;
}

public byte getHCOND13() {
return HCOND13;
}

public byte getHCOND14() {
return HCOND14;
}

public byte getHCOND15() {
return HCOND15;
}

public byte getHCOND16() {
return HCOND16;
}

public byte getHCOND17() {
return HCOND17;
}

public byte getHCOND2() {
return HCOND2;
}

public byte getHCOND3() {
return HCOND3;
}

public byte getHCOND4() {
return HCOND4;
}

public byte getHCOND5() {
return HCOND5;
}

public byte getHCOND6() {
return HCOND6;
}

public byte getHCOND7() {
return HCOND7;
}

public byte getHCOND8() {
return HCOND8;
}

public byte getHCOND9() {
return HCOND9;
}

public byte getHCOND96() {
return HCOND96;
}

public byte getHCONDA01() {
return HCONDA01;
}

public byte getHCONDA02() {
return HCONDA02;
}

public byte getHCONDA03() {
return HCONDA03;
}

public byte getHCONDA04() {
return HCONDA04;
}

public byte getHCONDA05() {
return HCONDA05;
}

public byte getHCONDA06() {
return HCONDA06;
}

public byte getHCONDA07() {
return HCONDA07;
}

public byte getHCONDA08() {
return HCONDA08;
}

public byte getHCONDA09() {
return HCONDA09;
}

public byte getHCONDA10() {
return HCONDA10;
}

public byte getHCONDA11() {
return HCONDA11;
}

public byte getHCONDA12() {
return HCONDA12;
}

public byte getHCONDA13() {
return HCONDA13;
}

public byte getHCONDA14() {
return HCONDA14;
}

public byte getHCONDA15() {
return HCONDA15;
}

public byte getHCONDA16() {
return HCONDA16;
}

public byte getHCONDA17() {
return HCONDA17;
}

public byte getHCONDN1() {
return HCONDN1;
}

public byte getHCONDN10() {
return HCONDN10;
}

public byte getHCONDN11() {
return HCONDN11;
}

public byte getHCONDN12() {
return HCONDN12;
}

public byte getHCONDN13() {
return HCONDN13;
}

public byte getHCONDN14() {
return HCONDN14;
}

public byte getHCONDN15() {
return HCONDN15;
}

public byte getHCONDN16() {
return HCONDN16;
}

public byte getHCONDN17() {
return HCONDN17;
}

public byte getHCONDN2() {
return HCONDN2;
}

public byte getHCONDN3() {
return HCONDN3;
}

public byte getHCONDN4() {
return HCONDN4;
}

public byte getHCONDN5() {
return HCONDN5;
}

public byte getHCONDN6() {
return HCONDN6;
}

public byte getHCONDN7() {
return HCONDN7;
}

public byte getHCONDN8() {
return HCONDN8;
}

public byte getHCONDN9() {
return HCONDN9;
}

public byte getHCONDN96() {
return HCONDN96;
}

public byte getHCONDNO1() {
return HCONDNO1;
}

public byte getHCONDNO10() {
return HCONDNO10;
}

public byte getHCONDNO2() {
return HCONDNO2;
}

public byte getHCONDNO3() {
return HCONDNO3;
}

public byte getHCONDNO4() {
return HCONDNO4;
}

public byte getHCONDNO5() {
return HCONDNO5;
}

public byte getHCONDNO6() {
return HCONDNO6;
}

public byte getHCONDNO7() {
return HCONDNO7;
}

public byte getHCONDNO8() {
return HCONDNO8;
}

public byte getHCONDNO9() {
return HCONDNO9;
}

public byte getHCONDNS1() {
return HCONDNS1;
}

public byte getHCONDNS10() {
return HCONDNS10;
}

public byte getHCONDNS2() {
return HCONDNS2;
}

public byte getHCONDNS3() {
return HCONDNS3;
}

public byte getHCONDNS4() {
return HCONDNS4;
}

public byte getHCONDNS5() {
return HCONDNS5;
}

public byte getHCONDNS6() {
return HCONDNS6;
}

public byte getHCONDNS7() {
return HCONDNS7;
}

public byte getHCONDNS8() {
return HCONDNS8;
}

public byte getHCONDNS9() {
return HCONDNS9;
}

public byte getHCONDS01() {
return HCONDS01;
}

public byte getHCONDS02() {
return HCONDS02;
}

public byte getHCONDS03() {
return HCONDS03;
}

public byte getHCONDS04() {
return HCONDS04;
}

public byte getHCONDS05() {
return HCONDS05;
}

public byte getHCONDS08() {
return HCONDS08;
}

public byte getHCONDS09() {
return HCONDS09;
}

public byte getHCONDS10() {
return HCONDS10;
}

public byte getHCONDS11() {
return HCONDS11;
}

public byte getHCONDS12() {
return HCONDS12;
}

public byte getHCONDS13() {
return HCONDS13;
}

public byte getHCONDS14() {
return HCONDS14;
}

public byte getHCONDS15() {
return HCONDS15;
}

public byte getHCONDS16() {
return HCONDS16;
}

public byte getHCONDS17() {
return HCONDS17;
}

public byte getHEALTH() {
return HEALTH;
}

public byte getHEALTHSN() {
return HEALTHSN;
}

public byte getHEDLIK() {
return HEDLIK;
}

public byte getHEDNT() {
return HEDNT;
}

public byte getHEDNTO_CODE() {
return HEDNTO_CODE;
}

public byte getHGADOPTF() {
return HGADOPTF;
}

public byte getHGADOPTM() {
return HGADOPTM;
}

public byte getHGPART() {
return HGPART;
}

public byte getHHRESP_DV() {
return HHRESP_DV;
}

public byte getHHTYPE_DV() {
return HHTYPE_DV;
}

public byte getHLTHISGN() {
return HLTHISGN;
}

public byte getHLTHKIDLINK() {
return HLTHKIDLINK;
}

public byte getHLTHLINK() {
return HLTHLINK;
}

public byte getHLTHLINKB1() {
return HLTHLINKB1;
}

public byte getHLTHLINKB2() {
return HLTHLINKB2;
}

public byte getHLTHLINKB3() {
return HLTHLINKB3;
}

public byte getHLTHRECD() {
return HLTHRECD;
}

public byte getHLTHRSGN() {
return HLTHRSGN;
}

public byte getHOSPC1() {
return HOSPC1;
}

public byte getHOSPC10() {
return HOSPC10;
}

public byte getHOSPC2() {
return HOSPC2;
}

public byte getHOSPC3() {
return HOSPC3;
}

public byte getHOSPC4() {
return HOSPC4;
}

public byte getHOSPC5() {
return HOSPC5;
}

public byte getHOSPC6() {
return HOSPC6;
}

public byte getHOSPC7() {
return HOSPC7;
}

public byte getHOSPC8() {
return HOSPC8;
}

public byte getHOSPC9() {
return HOSPC9;
}

public short getHOSPDC1() {
return HOSPDC1;
}

public boolean getHOSPDC10() {
return HOSPDC10;
}

public short getHOSPDC2() {
return HOSPDC2;
}

public short getHOSPDC3() {
return HOSPDC3;
}

public byte getHOSPDC4() {
return HOSPDC4;
}

public byte getHOSPDC5() {
return HOSPDC5;
}

public byte getHOSPDC6() {
return HOSPDC6;
}

public byte getHOSPDC7() {
return HOSPDC7;
}

public byte getHOSPDC8() {
return HOSPDC8;
}

public boolean getHOSPDC9() {
return HOSPDC9;
}

public byte getHOUSING() {
return HOUSING;
}

public short getHOWLNG() {
return HOWLNG;
}

public int getHRPID() {
return HRPID;
}

public byte getHRPNO() {
return HRPNO;
}

public byte getHRS_SLPH() {
return HRS_SLPH;
}

public byte getHRS_SLPM() {
return HRS_SLPM;
}

public byte getHUBOSS() {
return HUBOSS;
}

public short getHUBUYS() {
return HUBUYS;
}

public byte getHUCAR() {
return HUCAR;
}

public byte getHUDIY() {
return HUDIY;
}

public short getHUFRYS() {
return HUFRYS;
}

public short getHUIRON() {
return HUIRON;
}

public short getHUMOPS() {
return HUMOPS;
}

public byte getHUPOTS() {
return HUPOTS;
}

public byte getHURUNS() {
return HURUNS;
}

public short getHUSITS() {
return HUSITS;
}

public byte getIENDDATMM() {
return IENDDATMM;
}

public byte getIENDDATSS() {
return IENDDATSS;
}

protected double IND5MUS_LW() {
return IND5MUS_LW;
}

protected double IND5MUS_XW() {
return IND5MUS_XW;
}

protected double INDBD91_LW() {
return INDBD91_LW;
}

protected double INDBDUB_LW() {
return INDBDUB_LW;
}

protected double INDIN01_LW() {
return INDIN01_LW;
}

protected double INDIN91_LW() {
return INDIN91_LW;
}

protected double INDINUB_LW() {
return INDINUB_LW;
}

protected double INDINUB_XW() {
return INDINUB_XW;
}

protected double INDINUS_LW() {
return INDINUS_LW;
}

public byte getINDMODE() {
return INDMODE;
}

protected double INDNS91_LW() {
return INDNS91_LW;
}

protected double INDNSUB_LW() {
return INDNSUB_LW;
}

protected double INDPXUB_LW() {
return INDPXUB_LW;
}

protected double INDPXUB_XW() {
return INDPXUB_XW;
}

protected double INDPXUS_LW() {
return INDPXUS_LW;
}

protected double INDSCUB_LW() {
return INDSCUB_LW;
}

protected double INDSCUB_XW() {
return INDSCUB_XW;
}

protected double INDSCUS_LW() {
return INDSCUS_LW;
}

public byte getINFSAVE1() {
return INFSAVE1;
}

public byte getINFSAVE2() {
return INFSAVE2;
}

public byte getINFSAVE3() {
return INFSAVE3;
}

public byte getINFSAVE4() {
return INFSAVE4;
}

public byte getINFSAVE5() {
return INFSAVE5;
}

public byte getINFSAVE6() {
return INFSAVE6;
}

public byte getINFSAVE96() {
return INFSAVE96;
}

public byte getINOCONTACT() {
return INOCONTACT;
}

public byte getINTCONTACT() {
return INTCONTACT;
}

public byte getINTDATDV() {
return INTDATDV;
}

public byte getINTDATM_DV() {
return INTDATM_DV;
}

public short getINTDATY_DV() {
return INTDATY_DV;
}

public byte getINTSIGNHEALTH() {
return INTSIGNHEALTH;
}

public byte getINVITRO1() {
return INVITRO1;
}

public byte getINVITRO2() {
return INVITRO2;
}

public byte getINVITRO3() {
return INVITRO3;
}

public byte getINVITRO4() {
return INVITRO4;
}

public byte getIOUTCOME() {
return IOUTCOME;
}

public byte getISTRTDATMM() {
return ISTRTDATMM;
}

public byte getISTRTDATSS() {
return ISTRTDATSS;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public short getISYEAR() {
return ISYEAR;
}

public byte getIVAFFCT11() {
return IVAFFCT11;
}

public byte getIVAFFCT12() {
return IVAFFCT12;
}

public byte getIVAFFCT13() {
return IVAFFCT13;
}

public byte getIVAFFCT14() {
return IVAFFCT14;
}

public byte getIVAFFCT15() {
return IVAFFCT15;
}

public byte getIVAFFCT17() {
return IVAFFCT17;
}

public byte getIVAFFCT21() {
return IVAFFCT21;
}

public byte getIVAFFCT22() {
return IVAFFCT22;
}

public byte getIVAFFCT23() {
return IVAFFCT23;
}

public byte getIVAFFCT27() {
return IVAFFCT27;
}

public byte getIVAFFCT30() {
return IVAFFCT30;
}

public byte getIVAFFCT97() {
return IVAFFCT97;
}

public byte getIVCOOP() {
return IVCOOP;
}

public byte getIVINFNCE() {
return IVINFNCE;
}

public byte getIVLIBAL() {
return IVLIBAL;
}

public byte getIVLIENG() {
return IVLIENG;
}

public byte getIVLITRANS() {
return IVLITRANS;
}

public byte getIVLIWHO() {
return IVLIWHO;
}

public byte getJ1BOSS() {
return J1BOSS;
}

public byte getJ1MNGR() {
return J1MNGR;
}

public byte getJ1NONE() {
return J1NONE;
}

public byte getJ1NSSEC5_DV() {
return J1NSSEC5_DV;
}

public byte getJ1SEMP() {
return J1SEMP;
}

public short getJ1SOC00_CC() {
return J1SOC00_CC;
}

public short getJ1SOC10_CC() {
return J1SOC10_CC;
}

public byte getJ1SOC90_CC() {
return J1SOC90_CC;
}

public byte getJ2NSSEC5_DV() {
return J2NSSEC5_DV;
}

public int getJ2PAY() {
return J2PAY;
}

protected double J2PAYNET_DV() {
return J2PAYNET_DV;
}

public short getJ2SOC00_CC() {
return J2SOC00_CC;
}

public short getJ2SOC10_CC() {
return J2SOC10_CC;
}

public short getJ2SOC90_CC() {
return J2SOC90_CC;
}

public byte getJBATT1() {
return JBATT1;
}

public byte getJBATT2() {
return JBATT2;
}

public byte getJBATT3() {
return JBATT3;
}

public byte getJBATT4() {
return JBATT4;
}

public byte getJBATT5() {
return JBATT5;
}

public byte getJBATT6() {
return JBATT6;
}

public byte getJBBGDATD() {
return JBBGDATD;
}

public byte getJBBGDATM() {
return JBBGDATM;
}

public short getJBBGDATY() {
return JBBGDATY;
}

public byte getJBENDD() {
return JBENDD;
}

public byte getJBENDM() {
return JBENDM;
}

public byte getJBENDREAS() {
return JBENDREAS;
}

public short getJBENDY4() {
return JBENDY4;
}

public byte getJBES2000() {
return JBES2000;
}

public byte getJBFLEX1() {
return JBFLEX1;
}

public byte getJBFLEX2() {
return JBFLEX2;
}

public byte getJBFLEX3() {
return JBFLEX3;
}

public byte getJBFLEX4() {
return JBFLEX4;
}

public byte getJBFLEX5() {
return JBFLEX5;
}

public byte getJBFLEX6() {
return JBFLEX6;
}

public byte getJBFLEX7() {
return JBFLEX7;
}

public byte getJBFLEX8() {
return JBFLEX8;
}

public byte getJBFLEX96() {
return JBFLEX96;
}

public byte getJBFXINF() {
return JBFXINF;
}

public byte getJBFXUSE1() {
return JBFXUSE1;
}

public byte getJBFXUSE2() {
return JBFXUSE2;
}

public byte getJBFXUSE3() {
return JBFXUSE3;
}

public byte getJBFXUSE4() {
return JBFXUSE4;
}

public byte getJBFXUSE5() {
return JBFXUSE5;
}

public byte getJBFXUSE6() {
return JBFXUSE6;
}

public byte getJBFXUSE7() {
return JBFXUSE7;
}

public byte getJBFXUSE8() {
return JBFXUSE8;
}

public byte getJBFXUSE96() {
return JBFXUSE96;
}

public byte getJBIINDB_DV() {
return JBIINDB_DV;
}

public byte getJBLKCHA() {
return JBLKCHA;
}

public byte getJBLKCHB() {
return JBLKCHB;
}

public byte getJBLKCHC() {
return JBLKCHC;
}

public byte getJBLKCHD() {
return JBLKCHD;
}

public byte getJBLKCHE() {
return JBLKCHE;
}

public byte getJBMNGRCHK() {
return JBMNGRCHK;
}

public byte getJBNSSEC3_DV() {
return JBNSSEC3_DV;
}

public byte getJBNSSEC5_DV() {
return JBNSSEC5_DV;
}

public short getJBNSSEC_DV() {
return JBNSSEC_DV;
}

public byte getJBOFFY() {
return JBOFFY;
}

public short getJBONUS() {
return JBONUS;
}

public short getJBPEN() {
return JBPEN;
}

public short getJBPENM() {
return JBPENM;
}

public short getJBPENY4() {
return JBPENY4;
}

public byte getJBPERFP() {
return JBPERFP;
}

public short getJBRGSC_DV() {
return JBRGSC_DV;
}

public short getJBRISE() {
return JBRISE;
}

public byte getJBSAMR() {
return JBSAMR;
}

public byte getJBSAT() {
return JBSAT;
}

public byte getJBSEC() {
return JBSEC;
}

public byte getJBSECTPUB() {
return JBSECTPUB;
}

public short getJBSEG_DV() {
return JBSEG_DV;
}

public byte getJBSEMPCHK() {
return JBSEMPCHK;
}

public byte getJBSIC07CHK() {
return JBSIC07CHK;
}

public byte getJBSIC07_CC() {
return JBSIC07_CC;
}

public byte getJBSIZECHK() {
return JBSIZECHK;
}

public byte getJBSOC00CHK() {
return JBSOC00CHK;
}

public short getJBSOC00_CC() {
return JBSOC00_CC;
}

public short getJBSOC10_CC() {
return JBSOC10_CC;
}

public byte getJBSOCGR_DV() {
return JBSOCGR_DV;
}

public byte getJBTERM1() {
return JBTERM1;
}

public byte getJBTERM2() {
return JBTERM2;
}

public byte getJBXPCHA() {
return JBXPCHA;
}

public byte getJBXPCHB() {
return JBXPCHB;
}

public byte getJBXPCHC() {
return JBXPCHC;
}

public byte getJBXPCHD() {
return JBXPCHD;
}

public byte getJBXPCHE() {
return JBXPCHE;
}

public byte getJLENDM() {
return JLENDM;
}

public byte getJLES2000() {
return JLES2000;
}

public byte getJLIINDB_DV() {
return JLIINDB_DV;
}

public byte getJLNSSEC3_DV() {
return JLNSSEC3_DV;
}

public byte getJLNSSEC5_DV() {
return JLNSSEC5_DV;
}

public short getJLNSSEC_DV() {
return JLNSSEC_DV;
}

public short getJLRGSC_DV() {
return JLRGSC_DV;
}

public short getJLSEG_DV() {
return JLSEG_DV;
}

public byte getJLSIC07_CC() {
return JLSIC07_CC;
}

public short getJLSOC00_CC() {
return JLSOC00_CC;
}

public short getJLSOC10_CC() {
return JLSOC10_CC;
}

public byte getJOBHOURS1() {
return JOBHOURS1;
}

public byte getJOBHOURS2() {
return JOBHOURS2;
}

public byte getJOBHOURS3() {
return JOBHOURS3;
}

public byte getJOBHOURS4() {
return JOBHOURS4;
}

public byte getJOBHOURS5() {
return JOBHOURS5;
}

public byte getJOBHOURS6() {
return JOBHOURS6;
}

public byte getJSPART() {
return JSPART;
}

public int getJSPAYU() {
return JSPAYU;
}

public byte getJSPAYW() {
return JSPAYW;
}

public byte getJSPRLS() {
return JSPRLS;
}

public byte getJSPRNI() {
return JSPRNI;
}

public byte getJSPRTX() {
return JSPRTX;
}

public byte getJSPYNI() {
return JSPYNI;
}

public byte getJSPYTX() {
return JSPYTX;
}

public byte getJSTYPEB() {
return JSTYPEB;
}

public byte getJSWORKTRAV() {
return JSWORKTRAV;
}

public short getJUBGN() {
return JUBGN;
}

public short getJULK4X1() {
return JULK4X1;
}

public short getJULK4X2() {
return JULK4X2;
}

public byte getJULK4X3() {
return JULK4X3;
}

public short getJULK4X4() {
return JULK4X4;
}

public short getJULK4X5() {
return JULK4X5;
}

public short getJULK4X6() {
return JULK4X6;
}

public byte getJULK4X96() {
return JULK4X96;
}

public byte getJWBS1_DV() {
return JWBS1_DV;
}

public byte getJWBS2_DV() {
return JWBS2_DV;
}

public byte getLADOPT() {
return LADOPT;
}

public byte getLATE() {
return LATE;
}

public byte getLCHMULTI1() {
return LCHMULTI1;
}

public byte getLCHMULTI2() {
return LCHMULTI2;
}

public byte getLCHMULTI3() {
return LCHMULTI3;
}

public byte getLCHMULTI4() {
return LCHMULTI4;
}

public byte getLCOHNPI() {
return LCOHNPI;
}

protected double LENINDINTV() {
return LENINDINTV;
}

public byte getLIENG() {
return LIENG;
}

public byte getLIHOW() {
return LIHOW;
}

public byte getLINGUA() {
return LINGUA;
}

public byte getLITRANS() {
return LITRANS;
}

public byte getLIVESP() {
return LIVESP;
}

public boolean getLIVESP_DV() {
return LIVESP_DV;
}

public byte getLIVEWITH() {
return LIVEWITH;
}

public byte getLIWHO() {
return LIWHO;
}

public byte getLMAR1M() {
return LMAR1M;
}

public short getLMAR1Y() {
return LMAR1Y;
}

public byte getLMCBM1() {
return LMCBM1;
}

public byte getLMCBM2() {
return LMCBM2;
}

public short getLMCBY41() {
return LMCBY41;
}

public short getLMCBY42() {
return LMCBY42;
}

public byte getLMSPM1() {
return LMSPM1;
}

public byte getLMSPM2() {
return LMSPM2;
}

public short getLMSPY41() {
return LMSPY41;
}

public short getLMSPY42() {
return LMSPY42;
}

public byte getLNADOPT() {
return LNADOPT;
}

public byte getLNPRNT() {
return LNPRNT;
}

public byte getLPRNT() {
return LPRNT;
}

public byte getLVHM() {
return LVHM;
}

public byte getLVMTHP() {
return LVMTHP;
}

public byte getLVSCHDO() {
return LVSCHDO;
}

public byte getLVWHY() {
return LVWHY;
}

public short getLVYRP() {
return LVYRP;
}

public byte getLWWRONG() {
return LWWRONG;
}

public byte getMACOB() {
return MACOB;
}

public byte getMAJU() {
return MAJU;
}

public byte getMANSSEC5_DV() {
return MANSSEC5_DV;
}

public byte getMARSTAT() {
return MARSTAT;
}

public short getMASOC00_CC() {
return MASOC00_CC;
}

public short getMASOC10_CC() {
return MASOC10_CC;
}

public byte getMASOC90_CC() {
return MASOC90_CC;
}

public byte getMASTAT_DV() {
return MASTAT_DV;
}

public byte getMATLEAVE() {
return MATLEAVE;
}

public byte getMATLV() {
return MATLV;
}

public byte getMATLVENDD() {
return MATLVENDD;
}

public byte getMATLVENDM() {
return MATLVENDM;
}

public short getMATLVENDY4() {
return MATLVENDY4;
}

public byte getMATLVSTD() {
return MATLVSTD;
}

public byte getMATLVSTM() {
return MATLVSTM;
}

public short getMATLVSTY4() {
return MATLVSTY4;
}

public byte getMAYRUK() {
return MAYRUK;
}

public byte getMEMPLOY() {
return MEMPLOY;
}

public byte getMESLP() {
return MESLP;
}

public byte getMLAGST() {
return MLAGST;
}

public byte getMLAGSTU() {
return MLAGSTU;
}

public byte getMLFUTR() {
return MLFUTR;
}

public byte getMLRNOT1() {
return MLRNOT1;
}

public byte getMLRNOT10() {
return MLRNOT10;
}

public byte getMLRNOT11() {
return MLRNOT11;
}

public byte getMLRNOT12() {
return MLRNOT12;
}

public byte getMLRNOT13() {
return MLRNOT13;
}

public byte getMLRNOT2() {
return MLRNOT2;
}

public byte getMLRNOT3() {
return MLRNOT3;
}

public byte getMLRNOT4() {
return MLRNOT4;
}

public byte getMLRNOT5() {
return MLRNOT5;
}

public byte getMLRNOT6() {
return MLRNOT6;
}

public byte getMLRNOT7() {
return MLRNOT7;
}

public byte getMLRNOT8() {
return MLRNOT8;
}

public byte getMLRNOT9() {
return MLRNOT9;
}

public byte getMLRNOT97() {
return MLRNOT97;
}

public byte getMLSTATCHK() {
return MLSTATCHK;
}

public byte getMLWKFPT() {
return MLWKFPT;
}

public int getMNPID() {
return MNPID;
}

public byte getMNPNO() {
return MNPNO;
}

public int getMNSPID() {
return MNSPID;
}

public byte getMNSPNO() {
return MNSPNO;
}

public byte getMOBUSE() {
return MOBUSE;
}

public byte getMONTH() {
return MONTH;
}

public byte getMOVDIR() {
return MOVDIR;
}

public byte getMOVEOTH_CODE() {
return MOVEOTH_CODE;
}

public byte getMOVY11() {
return MOVY11;
}

public byte getMOVY12() {
return MOVY12;
}

public byte getMOVY13() {
return MOVY13;
}

public byte getMOVY14() {
return MOVY14;
}

public byte getMOVY15() {
return MOVY15;
}

public byte getMOVY16() {
return MOVY16;
}

public byte getMSTATCH1() {
return MSTATCH1;
}

public byte getMSTATCH2() {
return MSTATCH2;
}

public byte getMSTATCH3() {
return MSTATCH3;
}

public short getMSTATSAM() {
return MSTATSAM;
}

public byte getMSTATSAMN() {
return MSTATSAMN;
}

public byte getMVEVER() {
return MVEVER;
}

public byte getMVMNTH() {
return MVMNTH;
}

public short getMVYR() {
return MVYR;
}

public byte getNADOPTCH() {
return NADOPTCH;
}

public byte getNAIDXHH() {
return NAIDXHH;
}

public byte getNATCH01() {
return NATCH01;
}

public byte getNATCH02() {
return NATCH02;
}

public byte getNATCH03() {
return NATCH03;
}

public byte getNATCH04() {
return NATCH04;
}

public byte getNATCH05() {
return NATCH05;
}

public byte getNATCH06() {
return NATCH06;
}

public byte getNATCH07() {
return NATCH07;
}

public byte getNATCH08() {
return NATCH08;
}

public byte getNATCH09() {
return NATCH09;
}

public byte getNATCH10() {
return NATCH10;
}

public byte getNATCH11() {
return NATCH11;
}

public byte getNATCH12() {
return NATCH12;
}

public boolean getNATCH13() {
return NATCH13;
}

public boolean getNATCH14() {
return NATCH14;
}

public boolean getNATCH15() {
return NATCH15;
}

public boolean getNATCH16() {
return NATCH16;
}

public byte getNATID1() {
return NATID1;
}

public byte getNATID2() {
return NATID2;
}

public byte getNATID3() {
return NATID3;
}

public byte getNATID4() {
return NATID4;
}

public byte getNATID5() {
return NATID5;
}

public byte getNATID6() {
return NATID6;
}

public byte getNATID97() {
return NATID97;
}

public byte getNCARS() {
return NCARS;
}

public byte getNCCJT() {
return NCCJT;
}

public byte getNCCSOLE() {
return NCCSOLE;
}

public byte getNCH10() {
return NCH10;
}

public byte getNCH10TO15() {
return NCH10TO15;
}

public byte getNCH14RESP() {
return NCH14RESP;
}

public byte getNCH3RESP() {
return NCH3RESP;
}

public byte getNCH415RESP() {
return NCH415RESP;
}

public byte getNCH5RESP() {
return NCH5RESP;
}

public byte getNCH5TO15() {
return NCH5TO15;
}

public byte getNCH8RESP() {
return NCH8RESP;
}

public byte getNCHILD() {
return NCHILD;
}

public byte getNCHILDV() {
return NCHILDV;
}

public byte getNCHRESP() {
return NCHRESP;
}

public byte getNCHUND18RESP() {
return NCHUND18RESP;
}

public byte getNCHUNDER16() {
return NCHUNDER16;
}

public byte getNCRR1() {
return NCRR1;
}

public byte getNCRR11() {
return NCRR11;
}

public byte getNCRR12() {
return NCRR12;
}

public byte getNCRR3() {
return NCRR3;
}

public byte getNCRR4() {
return NCRR4;
}

public byte getNCRR5() {
return NCRR5;
}

public byte getNCRR6() {
return NCRR6;
}

public byte getNCRR8() {
return NCRR8;
}

public byte getNCRR9() {
return NCRR9;
}

public byte getNCRRM() {
return NCRRM;
}

public short getNCRRY4() {
return NCRRY4;
}

public byte getNDEPCHL_DV() {
return NDEPCHL_DV;
}

public byte getNETPUSE() {
return NETPUSE;
}

public byte getNETUSE() {
return NETUSE;
}

public byte getNEXT() {
return NEXT;
}

public byte getNEXT1() {
return NEXT1;
}

public byte getNEXT2() {
return NEXT2;
}

public byte getNEXT3() {
return NEXT3;
}

public byte getNEXT4() {
return NEXT4;
}

public byte getNEXT5() {
return NEXT5;
}

public byte getNEXT6() {
return NEXT6;
}

public byte getNEXTELSE1() {
return NEXTELSE1;
}

public byte getNEXTELSE2() {
return NEXTELSE2;
}

public byte getNEXTELSE3() {
return NEXTELSE3;
}

public byte getNEXTELSE4() {
return NEXTELSE4;
}

public byte getNEXTELSE5() {
return NEXTELSE5;
}

public byte getNEXTELSE6() {
return NEXTELSE6;
}

public byte getNEXTJOB1() {
return NEXTJOB1;
}

public byte getNEXTJOB2() {
return NEXTJOB2;
}

public byte getNEXTJOB3() {
return NEXTJOB3;
}

public byte getNEXTJOB4() {
return NEXTJOB4;
}

public byte getNEXTJOB5() {
return NEXTJOB5;
}

public byte getNEXTJOB6() {
return NEXTJOB6;
}

public byte getNEXTSTAT1() {
return NEXTSTAT1;
}

public byte getNEXTSTAT2() {
return NEXTSTAT2;
}

public byte getNEXTSTAT3() {
return NEXTSTAT3;
}

public byte getNEXTSTAT4() {
return NEXTSTAT4;
}

public byte getNEXTSTAT5() {
return NEXTSTAT5;
}

public byte getNEXTSTAT6() {
return NEXTSTAT6;
}

public byte getNFH01() {
return NFH01;
}

public byte getNFH02() {
return NFH02;
}

public byte getNFH03() {
return NFH03;
}

public byte getNFH04() {
return NFH04;
}

public byte getNFH05() {
return NFH05;
}

public byte getNFH06() {
return NFH06;
}

public byte getNFH07() {
return NFH07;
}

public byte getNFH08() {
return NFH08;
}

public byte getNFH09() {
return NFH09;
}

public byte getNFH10() {
return NFH10;
}

public byte getNFH11() {
return NFH11;
}

public byte getNFH12() {
return NFH12;
}

public byte getNFH13() {
return NFH13;
}

public byte getNFH14() {
return NFH14;
}

public byte getNFH15() {
return NFH15;
}

public byte getNFH16() {
return NFH16;
}

public byte getNFH17() {
return NFH17;
}

public byte getNFH18() {
return NFH18;
}

public byte getNFH19() {
return NFH19;
}

public byte getNFH20() {
return NFH20;
}

public byte getNFH21() {
return NFH21;
}

public byte getNFH22() {
return NFH22;
}

public byte getNFH23() {
return NFH23;
}

public byte getNFH24() {
return NFH24;
}

public byte getNFH25() {
return NFH25;
}

public byte getNFH26() {
return NFH26;
}

public byte getNFH27() {
return NFH27;
}

public byte getNFH28() {
return NFH28;
}

public byte getNFH29() {
return NFH29;
}

public byte getNFH30() {
return NFH30;
}

public byte getNFH31() {
return NFH31;
}

public byte getNFH32() {
return NFH32;
}

public byte getNFH33() {
return NFH33;
}

public byte getNFH34() {
return NFH34;
}

public byte getNFH35() {
return NFH35;
}

public byte getNFH36() {
return NFH36;
}

public byte getNFH37() {
return NFH37;
}

public byte getNFH38() {
return NFH38;
}

public byte getNFH39() {
return NFH39;
}

public byte getNFLYEU() {
return NFLYEU;
}

public byte getNFLYIN() {
return NFLYIN;
}

public byte getNFLYOS() {
return NFLYOS;
}

public byte getNGRP_DV() {
return NGRP_DV;
}

public byte getNHIQUAL_DV() {
return NHIQUAL_DV;
}

public byte getNIACT() {
return NIACT;
}

public byte getNIREL() {
return NIREL;
}

public byte getNISERPS() {
return NISERPS;
}

public byte getNMAR() {
return NMAR;
}

public byte getNMPSP_DV() {
return NMPSP_DV;
}

public byte getNNATCH() {
return NNATCH;
}

public byte getNNEWBORN() {
return NNEWBORN;
}

public byte getNNMPSP_DV() {
return NNMPSP_DV;
}

public byte getNNSIB_DV() {
return NNSIB_DV;
}

public byte getNNSSIB_DV() {
return NNSSIB_DV;
}

public byte getNOSVY() {
return NOSVY;
}

public byte getNOTEMPCHK() {
return NOTEMPCHK;
}

public byte getNPENSIONER_DV() {
return NPENSIONER_DV;
}

public byte getNPNS_DV() {
return NPNS_DV;
}

public byte getNPN_DV() {
return NPN_DV;
}

public byte getNQFHIGH_DV() {
return NQFHIGH_DV;
}

public byte getNUNMPSP_DV() {
return NUNMPSP_DV;
}

public byte getNXTJBENDD() {
return NXTJBENDD;
}

public byte getNXTJBENDM() {
return NXTJBENDM;
}

public short getNXTJBENDY4() {
return NXTJBENDY4;
}

public byte getNXTJBES() {
return NXTJBES;
}

public byte getNXTJBHRS() {
return NXTJBHRS;
}

public byte getNXTST() {
return NXTST;
}

public byte getNXTSTELSE() {
return NXTSTELSE;
}

public byte getNXTSTENDD() {
return NXTSTENDD;
}

public byte getNXTSTENDM() {
return NXTSTENDM;
}

public short getNXTSTENDY4() {
return NXTSTENDY4;
}

public byte getOLYMACT11() {
return OLYMACT11;
}

public byte getOLYMACT12() {
return OLYMACT12;
}

public byte getOLYMACT13() {
return OLYMACT13;
}

public byte getOLYMACT14() {
return OLYMACT14;
}

public byte getOLYMACT15() {
return OLYMACT15;
}

public byte getOLYMACT16() {
return OLYMACT16;
}

public byte getOLYMACT17() {
return OLYMACT17;
}

public byte getOLYMACT18() {
return OLYMACT18;
}

public byte getOLYMACT196() {
return OLYMACT196;
}

public byte getOLYMACT198() {
return OLYMACT198;
}

public byte getOLYMACT21() {
return OLYMACT21;
}

public byte getOLYMACT22() {
return OLYMACT22;
}

public byte getOLYMACT23() {
return OLYMACT23;
}

public byte getOLYMACT24() {
return OLYMACT24;
}

public byte getOLYMACT25() {
return OLYMACT25;
}

public byte getOLYMACT26() {
return OLYMACT26;
}

public byte getOLYMACT27() {
return OLYMACT27;
}

public byte getOLYMACT28() {
return OLYMACT28;
}

public byte getOLYMACT296() {
return OLYMACT296;
}

public byte getOLYMACT298() {
return OLYMACT298;
}

public byte getOLYMACT31() {
return OLYMACT31;
}

public byte getOLYMACT32() {
return OLYMACT32;
}

public byte getOLYMACT33() {
return OLYMACT33;
}

public byte getOLYMACT34() {
return OLYMACT34;
}

public byte getOLYMACT35() {
return OLYMACT35;
}

public byte getOLYMACT36() {
return OLYMACT36;
}

public byte getOLYMACT37() {
return OLYMACT37;
}

public byte getOLYMACT38() {
return OLYMACT38;
}

public byte getOLYMACT396() {
return OLYMACT396;
}

public byte getOLYMACT398() {
return OLYMACT398;
}

public byte getOLYMPAS11() {
return OLYMPAS11;
}

public byte getOLYMPAS12() {
return OLYMPAS12;
}

public byte getOLYMPAS13() {
return OLYMPAS13;
}

public byte getOLYMPAS14() {
return OLYMPAS14;
}

public byte getOLYMPAS15() {
return OLYMPAS15;
}

public byte getOLYMPAS196() {
return OLYMPAS196;
}

public byte getOLYMPAS198() {
return OLYMPAS198;
}

public byte getOLYMPAS21() {
return OLYMPAS21;
}

public byte getOLYMPAS22() {
return OLYMPAS22;
}

public byte getOLYMPAS23() {
return OLYMPAS23;
}

public byte getOLYMPAS24() {
return OLYMPAS24;
}

public byte getOLYMPAS25() {
return OLYMPAS25;
}

public byte getOLYMPAS296() {
return OLYMPAS296;
}

public byte getOLYMPAS298() {
return OLYMPAS298;
}

public byte getOLYMPAS31() {
return OLYMPAS31;
}

public byte getOLYMPAS32() {
return OLYMPAS32;
}

public byte getOLYMPAS33() {
return OLYMPAS33;
}

public byte getOLYMPAS34() {
return OLYMPAS34;
}

public byte getOLYMPAS35() {
return OLYMPAS35;
}

public byte getOLYMPAS396() {
return OLYMPAS396;
}

public byte getOLYMPAS398() {
return OLYMPAS398;
}

public byte getOPRLG() {
return OPRLG;
}

public byte getOPRLG0() {
return OPRLG0;
}

public byte getOPRLG0NI() {
return OPRLG0NI;
}

public byte getOPRLG1() {
return OPRLG1;
}

public byte getOPRLG2() {
return OPRLG2;
}

public byte getOPRLG3() {
return OPRLG3;
}

public byte getOPSERV1() {
return OPSERV1;
}

public byte getOPSERV10() {
return OPSERV10;
}

public byte getOPSERV2() {
return OPSERV2;
}

public byte getOPSERV3() {
return OPSERV3;
}

public byte getOPSERV4() {
return OPSERV4;
}

public byte getOPSERV5() {
return OPSERV5;
}

public byte getOPSERV6() {
return OPSERV6;
}

public byte getOPSERV7() {
return OPSERV7;
}

public byte getOPSERV8() {
return OPSERV8;
}

public byte getOPSERV9() {
return OPSERV9;
}

public byte getORIGADD() {
return ORIGADD;
}

public byte getOTHCONT() {
return OTHCONT;
}

public byte getOVTNSA() {
return OVTNSA;
}

public byte getOVTPAY() {
return OVTPAY;
}

protected double OVTRATE() {
return OVTRATE;
}

public byte getOVTREST() {
return OVTREST;
}

public byte getPACOB() {
return PACOB;
}

public byte getPAJU() {
return PAJU;
}

public byte getPANSSEC5_DV() {
return PANSSEC5_DV;
}

public short getPASOC00_CC() {
return PASOC00_CC;
}

public short getPASOC10_CC() {
return PASOC10_CC;
}

public byte getPASOC90_CC() {
return PASOC90_CC;
}

public byte getPAYGWC() {
return PAYGWC;
}

protected double PAYG_DV() {
return PAYG_DV;
}

public byte getPAYNWC() {
return PAYNWC;
}

public byte getPAYRUK() {
return PAYRUK;
}

public byte getPAYTYP() {
return PAYTYP;
}

public byte getPAYUWC() {
return PAYUWC;
}

protected double PAYU_DV() {
return PAYU_DV;
}

public byte getPBNFT1() {
return PBNFT1;
}

public byte getPBNFT10() {
return PBNFT10;
}

public byte getPBNFT11() {
return PBNFT11;
}

public byte getPBNFT12() {
return PBNFT12;
}

public byte getPBNFT13() {
return PBNFT13;
}

public byte getPBNFT2() {
return PBNFT2;
}

public byte getPBNFT3() {
return PBNFT3;
}

public byte getPBNFT4() {
return PBNFT4;
}

public byte getPBNFT5() {
return PBNFT5;
}

public byte getPBNFT6() {
return PBNFT6;
}

public byte getPBNFT7() {
return PBNFT7;
}

public byte getPBNFT8() {
return PBNFT8;
}

public byte getPBNFT9() {
return PBNFT9;
}

public byte getPBNFT96() {
return PBNFT96;
}

public byte getPENMCN() {
return PENMCN;
}

public byte getPENMEX() {
return PENMEX;
}

protected double PENMPY() {
return PENMPY;
}

public byte getPENMTP() {
return PENMTP;
}

public byte getPENSIONER_DV() {
return PENSIONER_DV;
}

public byte getPENSPB() {
return PENSPB;
}

public int getPID() {
return PID;
}

public byte getPJBPTFT() {
return PJBPTFT;
}

public byte getPJSPTFT() {
return PJSPTFT;
}

public byte getPLIVPAR() {
return PLIVPAR;
}

public short getPLNOWM() {
return PLNOWM;
}

public short getPLNOWY4() {
return PLNOWY4;
}

public int getPN1PID() {
return PN1PID;
}

public byte getPN1PNO() {
return PN1PNO;
}

public byte getPN1SEX() {
return PN1SEX;
}

public int getPN2PID() {
return PN2PID;
}

public byte getPN2PNO() {
return PN2PNO;
}

public byte getPN2SEX() {
return PN2SEX;
}

public byte getPNCARS() {
return PNCARS;
}

public int getPNS1PID() {
return PNS1PID;
}

public byte getPNS1PNO() {
return PNS1PNO;
}

public byte getPNS1SEX() {
return PNS1SEX;
}

public int getPNS2PID() {
return PNS2PID;
}

public byte getPNS2PNO() {
return PNS2PNO;
}

public byte getPNS2SEX() {
return PNS2SEX;
}

public byte getPPEN() {
return PPEN;
}

public byte getPPENSIONER() {
return PPENSIONER;
}

public byte getPPENT() {
return PPENT;
}

public int getPPID() {
return PPID;
}

public byte getPPPEX() {
return PPPEX;
}

public byte getPPPEXM() {
return PPPEXM;
}

public int getPPRAM() {
return PPRAM;
}

public byte getPPRAMPC() {
return PPRAMPC;
}

public byte getPPREG() {
return PPREG;
}

public byte getPPSEX() {
return PPSEX;
}

public short getPPYRS() {
return PPYRS;
}

public byte getPRAYFREQ() {
return PRAYFREQ;
}

public byte getPREARN() {
return PREARN;
}

public byte getPREARNA() {
return PREARNA;
}

public byte getPREARNW() {
return PREARNW;
}

public byte getPREASON() {
return PREASON;
}

public byte getPREG() {
return PREG;
}

public byte getPREGEND1() {
return PREGEND1;
}

public byte getPREGEND2() {
return PREGEND2;
}

public byte getPREGEND3() {
return PREGEND3;
}

public byte getPREGEND4() {
return PREGEND4;
}

public byte getPREGFERT1() {
return PREGFERT1;
}

public byte getPREGFERT2() {
return PREGFERT2;
}

public byte getPREGFERT3() {
return PREGFERT3;
}

public byte getPREGFERT4() {
return PREGFERT4;
}

public byte getPREGM1() {
return PREGM1;
}

public byte getPREGM2() {
return PREGM2;
}

public byte getPREGM3() {
return PREGM3;
}

public byte getPREGM4() {
return PREGM4;
}

public byte getPREGOUT1() {
return PREGOUT1;
}

public byte getPREGOUT2() {
return PREGOUT2;
}

public byte getPREGOUT3() {
return PREGOUT3;
}

public byte getPREGOUT4() {
return PREGOUT4;
}

public byte getPREGSMK11() {
return PREGSMK11;
}

public byte getPREGSMK12() {
return PREGSMK12;
}

public byte getPREGSMK13() {
return PREGSMK13;
}

public byte getPREGSMK14() {
return PREGSMK14;
}

public byte getPREGSMK21() {
return PREGSMK21;
}

public byte getPREGSMK22() {
return PREGSMK22;
}

public byte getPREGSMK23() {
return PREGSMK23;
}

public byte getPREGSMK24() {
return PREGSMK24;
}

public byte getPREGSMK31() {
return PREGSMK31;
}

public byte getPREGSMK32() {
return PREGSMK32;
}

public byte getPREGSMK33() {
return PREGSMK33;
}

public byte getPREGSMK34() {
return PREGSMK34;
}

public byte getPREGSMOKE1() {
return PREGSMOKE1;
}

public byte getPREGSMOKE2() {
return PREGSMOKE2;
}

public byte getPREGSMOKE3() {
return PREGSMOKE3;
}

public byte getPREGSMOKE4() {
return PREGSMOKE4;
}

public short getPREGY41() {
return PREGY41;
}

public short getPREGY42() {
return PREGY42;
}

public short getPREGY43() {
return PREGY43;
}

public short getPREGY44() {
return PREGY44;
}

public byte getPREL() {
return PREL;
}

public byte getPRFITB() {
return PRFITB;
}

public byte getPRFITBA() {
return PRFITBA;
}

public byte getPRFITBW() {
return PRFITBW;
}

public byte getPS1() {
return PS1;
}

public byte getPS10() {
return PS10;
}

public byte getPS11() {
return PS11;
}

public byte getPS12() {
return PS12;
}

public byte getPS13() {
return PS13;
}

public byte getPS14() {
return PS14;
}

public byte getPS15() {
return PS15;
}

public byte getPS16() {
return PS16;
}

public byte getPS17() {
return PS17;
}

public byte getPS18() {
return PS18;
}

public byte getPS19() {
return PS19;
}

public byte getPS2() {
return PS2;
}

public byte getPS20() {
return PS20;
}

public byte getPS21() {
return PS21;
}

public byte getPS22() {
return PS22;
}

public byte getPS23() {
return PS23;
}

public byte getPS24() {
return PS24;
}

public byte getPS25() {
return PS25;
}

public byte getPS26() {
return PS26;
}

public byte getPS27() {
return PS27;
}

public byte getPS28() {
return PS28;
}

public byte getPS29() {
return PS29;
}

public byte getPS3() {
return PS3;
}

public byte getPS30() {
return PS30;
}

public byte getPS31() {
return PS31;
}

public byte getPS32() {
return PS32;
}

public byte getPS4() {
return PS4;
}

public byte getPS5() {
return PS5;
}

public byte getPS6() {
return PS6;
}

public byte getPS7() {
return PS7;
}

public byte getPS8() {
return PS8;
}

public byte getPS9() {
return PS9;
}

public byte getPSDQA_DV() {
return PSDQA_DV;
}

public byte getPSDQB_DV() {
return PSDQB_DV;
}

public byte getPSDQC_DV() {
return PSDQC_DV;
}

public byte getPSIBLINGS() {
return PSIBLINGS;
}

public byte getPSNUMCH() {
return PSNUMCH;
}

public int getPSU() {
return PSU;
}

public byte getQFHIGH() {
return QFHIGH;
}

public boolean getQFHIGHFL_DV() {
return QFHIGHFL_DV;
}

public byte getQFHIGH_DV() {
return QFHIGH_DV;
}

public byte getQFVOC1() {
return QFVOC1;
}

public byte getQFVOC10() {
return QFVOC10;
}

public byte getQFVOC11() {
return QFVOC11;
}

public byte getQFVOC12() {
return QFVOC12;
}

public byte getQFVOC13() {
return QFVOC13;
}

public byte getQFVOC14() {
return QFVOC14;
}

public byte getQFVOC15() {
return QFVOC15;
}

public byte getQFVOC2() {
return QFVOC2;
}

public byte getQFVOC3() {
return QFVOC3;
}

public byte getQFVOC4() {
return QFVOC4;
}

public byte getQFVOC5() {
return QFVOC5;
}

public byte getQFVOC6() {
return QFVOC6;
}

public byte getQFVOC7() {
return QFVOC7;
}

public byte getQFVOC8() {
return QFVOC8;
}

public byte getQFVOC9() {
return QFVOC9;
}

public byte getQFVOC96() {
return QFVOC96;
}

public byte getQUALNEW1() {
return QUALNEW1;
}

public byte getQUALNEW10() {
return QUALNEW10;
}

public byte getQUALNEW11() {
return QUALNEW11;
}

public byte getQUALNEW13() {
return QUALNEW13;
}

public byte getQUALNEW15() {
return QUALNEW15;
}

public byte getQUALNEW16() {
return QUALNEW16;
}

public byte getQUALNEW17() {
return QUALNEW17;
}

public byte getQUALNEW18() {
return QUALNEW18;
}

public byte getQUALNEW19() {
return QUALNEW19;
}

public byte getQUALNEW2() {
return QUALNEW2;
}

public byte getQUALNEW20() {
return QUALNEW20;
}

public byte getQUALNEW21() {
return QUALNEW21;
}

public byte getQUALNEW22() {
return QUALNEW22;
}

public byte getQUALNEW23() {
return QUALNEW23;
}

public byte getQUALNEW24() {
return QUALNEW24;
}

public byte getQUALNEW25() {
return QUALNEW25;
}

public byte getQUALNEW26() {
return QUALNEW26;
}

public byte getQUALNEW27() {
return QUALNEW27;
}

public byte getQUALNEW28() {
return QUALNEW28;
}

public byte getQUALNEW29() {
return QUALNEW29;
}

public byte getQUALNEW3() {
return QUALNEW3;
}

public byte getQUALNEW30() {
return QUALNEW30;
}

public byte getQUALNEW31() {
return QUALNEW31;
}

public byte getQUALNEW4() {
return QUALNEW4;
}

public byte getQUALNEW5() {
return QUALNEW5;
}

public byte getQUALNEW6() {
return QUALNEW6;
}

public byte getQUALNEW7() {
return QUALNEW7;
}

public byte getQUALNEW8() {
return QUALNEW8;
}

public byte getQUALNEW9() {
return QUALNEW9;
}

public byte getQUALOC() {
return QUALOC;
}

public byte getRACEL() {
return RACEL;
}

public byte getRACELAT() {
return RACELAT;
}

public byte getRACELBT() {
return RACELBT;
}

public byte getRACELMT() {
return RACELMT;
}

public byte getRACELOT_CODE() {
return RACELOT_CODE;
}

public short getRACELO_CODE() {
return RACELO_CODE;
}

public byte getRACELT() {
return RACELT;
}

public byte getRACELWT() {
return RACELWT;
}

public byte getRACEL_DV() {
return RACEL_DV;
}

public byte getRCOTHERCODE() {
return RCOTHERCODE;
}

public byte getREASEND1() {
return REASEND1;
}

public byte getREASEND2() {
return REASEND2;
}

public byte getREASEND3() {
return REASEND3;
}

public byte getREASEND4() {
return REASEND4;
}

public byte getREASEND5() {
return REASEND5;
}

public byte getREASEND6() {
return REASEND6;
}

public byte getREFBANK() {
return REFBANK;
}

public byte getREFBNKY() {
return REFBNKY;
}

public byte getRELUP() {
return RELUP;
}

public byte getREMAIL_CODE() {
return REMAIL_CODE;
}

public short getREMCNTRY1() {
return REMCNTRY1;
}

public short getREMCNTRY2() {
return REMCNTRY2;
}

public short getREMCNTRY3() {
return REMCNTRY3;
}

public short getREMCNTRY4() {
return REMCNTRY4;
}

public byte getREMHOW1() {
return REMHOW1;
}

public byte getREMHOW2() {
return REMHOW2;
}

public byte getREMHOW3() {
return REMHOW3;
}

public byte getREMHOW4() {
return REMHOW4;
}

public byte getREMIT1() {
return REMIT1;
}

public byte getREMIT2() {
return REMIT2;
}

public byte getREMIT3() {
return REMIT3;
}

public byte getREMIT4() {
return REMIT4;
}

public byte getREMIT5() {
return REMIT5;
}

public short getREMITAMT1() {
return REMITAMT1;
}

public int getREMITAMT2() {
return REMITAMT2;
}

public short getREMITAMT3() {
return REMITAMT3;
}

public int getREMITAMT4() {
return REMITAMT4;
}

public byte getREMITFREQ1() {
return REMITFREQ1;
}

public byte getREMITFREQ2() {
return REMITFREQ2;
}

public byte getREMITFREQ3() {
return REMITFREQ3;
}

public byte getREMITFREQ4() {
return REMITFREQ4;
}

public byte getREMITREG1() {
return REMITREG1;
}

public byte getREMITREG2() {
return REMITREG2;
}

public byte getREMITREG3() {
return REMITREG3;
}

public byte getREMITREG4() {
return REMITREG4;
}

public byte getREMITUSUAL1() {
return REMITUSUAL1;
}

public byte getREMITUSUAL2() {
return REMITUSUAL2;
}

public byte getREMITUSUAL3() {
return REMITUSUAL3;
}

public byte getREMITUSUAL4() {
return REMITUSUAL4;
}

public boolean getRESPF16() {
return RESPF16;
}

public boolean getRESPF16_DV() {
return RESPF16_DV;
}

public boolean getRESPM16() {
return RESPM16;
}

public boolean getRESPM16_DV() {
return RESPM16_DV;
}

public byte getRETAMT() {
return RETAMT;
}

public byte getRETCHK() {
return RETCHK;
}

public byte getRETSUF() {
return RETSUF;
}

public byte getRHLANCODE() {
return RHLANCODE;
}

public byte getRLCHARITY() {
return RLCHARITY;
}

public byte getRLDRNK() {
return RLDRNK;
}

public byte getRLEAT() {
return RLEAT;
}

public byte getRLFRIENDS() {
return RLFRIENDS;
}

public byte getRLJOB() {
return RLJOB;
}

public byte getRLJOBY1() {
return RLJOBY1;
}

public byte getRLJOBY2() {
return RLJOBY2;
}

public byte getRLJOBY3() {
return RLJOBY3;
}

public byte getRLJOBY4() {
return RLJOBY4;
}

public byte getRLJOBY5() {
return RLJOBY5;
}

public byte getRLJOBY6() {
return RLJOBY6;
}

public byte getRLJOBY97() {
return RLJOBY97;
}

public byte getRLMARG() {
return RLMARG;
}

public byte getRLSAVE() {
return RLSAVE;
}

public byte getRLSCHL() {
return RLSCHL;
}

public byte getRLWEAR() {
return RLWEAR;
}

public byte getRPHMOB_CODE() {
return RPHMOB_CODE;
}

public byte getRPHWRK_CODE() {
return RPHWRK_CODE;
}

public byte getRTCON1() {
return RTCON1;
}

public byte getRTCON2() {
return RTCON2;
}

public byte getRTCON3() {
return RTCON3;
}

public byte getRTCON4() {
return RTCON4;
}

public byte getRTEXPJB() {
return RTEXPJB;
}

public byte getRTFND1() {
return RTFND1;
}

public byte getRTFND10() {
return RTFND10;
}

public byte getRTFND2() {
return RTFND2;
}

public byte getRTFND3() {
return RTFND3;
}

public byte getRTFND4() {
return RTFND4;
}

public byte getRTFND5() {
return RTFND5;
}

public byte getRTFND6() {
return RTFND6;
}

public byte getRTFND7() {
return RTFND7;
}

public byte getRTFND8() {
return RTFND8;
}

public byte getRTFND9() {
return RTFND9;
}

public byte getRTFND96() {
return RTFND96;
}

public byte getRTPRO1() {
return RTPRO1;
}

public byte getRTPRO2() {
return RTPRO2;
}

public byte getRTPRO3() {
return RTPRO3;
}

public byte getRTPRO4() {
return RTPRO4;
}

public byte getRTPRO5() {
return RTPRO5;
}

public byte getRTPRO6() {
return RTPRO6;
}

public byte getSAMEJOB() {
return SAMEJOB;
}

public short getSAMPST() {
return SAMPST;
}

public byte getSAVDOCS() {
return SAVDOCS;
}

public short getSAVE() {
return SAVE;
}

public int getSAVED() {
return SAVED;
}

public byte getSAVLT() {
return SAVLT;
}

public byte getSAVREG() {
return SAVREG;
}

public byte getSCAC() {
return SCAC;
}

public byte getSCENV_BCCC() {
return SCENV_BCCC;
}

public byte getSCENV_CANC() {
return SCENV_CANC;
}

public byte getSCENV_CREX() {
return SCENV_CREX;
}

public byte getSCENV_CRLF() {
return SCENV_CRLF;
}

public byte getSCENV_FITL() {
return SCENV_FITL;
}

public byte getSCENV_FTST() {
return SCENV_FTST;
}

public byte getSCENV_GRN() {
return SCENV_GRN;
}

public byte getSCENV_MEDS() {
return SCENV_MEDS;
}

public byte getSCENV_NOOT() {
return SCENV_NOOT;
}

public byte getSCENV_NOWO() {
return SCENV_NOWO;
}

public byte getSCENV_PMEP() {
return SCENV_PMEP;
}

public byte getSCENV_TLAT() {
return SCENV_TLAT;
}

public byte getSCFLAG_DV() {
return SCFLAG_DV;
}

public byte getSCHLLOC() {
return SCHLLOC;
}

public byte getSCHOK() {
return SCHOK;
}

public byte getSCHOOLCNTRY1() {
return SCHOOLCNTRY1;
}

public byte getSCHOOLCNTRY2() {
return SCHOOLCNTRY2;
}

public byte getSCHOOLCNTRY3() {
return SCHOOLCNTRY3;
}

public byte getSCHOOLCNTRY4() {
return SCHOOLCNTRY4;
}

public byte getSCHOOLCNTRY5() {
return SCHOOLCNTRY5;
}

public byte getSCLFSAT1() {
return SCLFSAT1;
}

public byte getSCLFSAT2() {
return SCLFSAT2;
}

public byte getSCLFSAT7() {
return SCLFSAT7;
}

public byte getSCLFSATO() {
return SCLFSATO;
}

public byte getSCOPECL200() {
return SCOPECL200;
}

public byte getSCOPECL30() {
return SCOPECL30;
}

public byte getSCOPFAMA() {
return SCOPFAMA;
}

public byte getSCOPFAMB() {
return SCOPFAMB;
}

public byte getSCOPFAMD() {
return SCOPFAMD;
}

public byte getSCOPFAMF() {
return SCOPFAMF;
}

public byte getSCOPFAMH() {
return SCOPFAMH;
}

public byte getSCRF1() {
return SCRF1;
}

public byte getSCRF2() {
return SCRF2;
}

public byte getSCRF3() {
return SCRF3;
}

public byte getSCRF4() {
return SCRF4;
}

public byte getSCRF5() {
return SCRF5;
}

public byte getSCRF6() {
return SCRF6;
}

public byte getSCRF97() {
return SCRF97;
}

public byte getSCRX_CODE() {
return SCRX_CODE;
}

public byte getSCSF1() {
return SCSF1;
}

public byte getSCSF2A() {
return SCSF2A;
}

public byte getSCSF2B() {
return SCSF2B;
}

public byte getSCSF3A() {
return SCSF3A;
}

public byte getSCSF3B() {
return SCSF3B;
}

public byte getSCSF4A() {
return SCSF4A;
}

public byte getSCSF4B() {
return SCSF4B;
}

public byte getSCSF5() {
return SCSF5;
}

public byte getSCSF6A() {
return SCSF6A;
}

public byte getSCSF6B() {
return SCSF6B;
}

public byte getSCSF6C() {
return SCSF6C;
}

public byte getSCSF7() {
return SCSF7;
}

public byte getSCUN1() {
return SCUN1;
}

public byte getSCUN2() {
return SCUN2;
}

public byte getSCUN3() {
return SCUN3;
}

public byte getSCUN97() {
return SCUN97;
}

public byte getSCUX_CODE() {
return SCUX_CODE;
}

public byte getSCWEMWBA() {
return SCWEMWBA;
}

public byte getSCWEMWBB() {
return SCWEMWBB;
}

public byte getSCWEMWBC() {
return SCWEMWBC;
}

public byte getSCWEMWBD() {
return SCWEMWBD;
}

public byte getSCWEMWBE() {
return SCWEMWBE;
}

public byte getSCWEMWBF() {
return SCWEMWBF;
}

public byte getSCWEMWBG() {
return SCWEMWBG;
}

public byte getSCWKIMP() {
return SCWKIMP;
}

public byte getSCWKOR1() {
return SCWKOR1;
}

public byte getSCWKOR10() {
return SCWKOR10;
}

public byte getSCWKOR11() {
return SCWKOR11;
}

public byte getSCWKOR12() {
return SCWKOR12;
}

public byte getSCWKOR13() {
return SCWKOR13;
}

public byte getSCWKOR14() {
return SCWKOR14;
}

public byte getSCWKOR15() {
return SCWKOR15;
}

public byte getSCWKOR2() {
return SCWKOR2;
}

public byte getSCWKOR3() {
return SCWKOR3;
}

public byte getSCWKOR4() {
return SCWKOR4;
}

public byte getSCWKOR5() {
return SCWKOR5;
}

public byte getSCWKOR6() {
return SCWKOR6;
}

public byte getSCWKOR7() {
return SCWKOR7;
}

public byte getSCWKOR8() {
return SCWKOR8;
}

public byte getSCWKOR9() {
return SCWKOR9;
}

protected double SEEARNGRS_DV() {
return SEEARNGRS_DV;
}

public byte getSEEARNGRS_IF() {
return SEEARNGRS_IF;
}

protected double SEEARNNET_DV() {
return SEEARNNET_DV;
}

public byte getSERVUSE1() {
return SERVUSE1;
}

public byte getSERVUSE10() {
return SERVUSE10;
}

public byte getSERVUSE2() {
return SERVUSE2;
}

public byte getSERVUSE3() {
return SERVUSE3;
}

public byte getSERVUSE4() {
return SERVUSE4;
}

public byte getSERVUSE5() {
return SERVUSE5;
}

public byte getSERVUSE6() {
return SERVUSE6;
}

public byte getSERVUSE7() {
return SERVUSE7;
}

public byte getSERVUSE8() {
return SERVUSE8;
}

public byte getSERVUSE9() {
return SERVUSE9;
}

public byte getSERVUSE96() {
return SERVUSE96;
}

public byte getSEX_DV() {
return SEX_DV;
}

public byte getSF1() {
return SF1;
}

protected double SF12MCS_DV() {
return SF12MCS_DV;
}

protected double SF12PCS_DV() {
return SF12PCS_DV;
}

public byte getSIGNEDUCKIDS1() {
return SIGNEDUCKIDS1;
}

public byte getSIGNEDUCKIDS2() {
return SIGNEDUCKIDS2;
}

public byte getSIGNHEALTHKI1() {
return SIGNHEALTHKI1;
}

public byte getSIGNHEALTHKI2() {
return SIGNHEALTHKI2;
}

public boolean getSINGLE_DV() {
return SINGLE_DV;
}

public byte getSLP_QUAL() {
return SLP_QUAL;
}

public byte getSMKMNTH11() {
return SMKMNTH11;
}

public byte getSMKMNTH12() {
return SMKMNTH12;
}

public byte getSMKMNTH13() {
return SMKMNTH13;
}

public byte getSMKMNTH14() {
return SMKMNTH14;
}

public byte getSMKMNTH21() {
return SMKMNTH21;
}

public byte getSMKMNTH22() {
return SMKMNTH22;
}

public byte getSMKMNTH23() {
return SMKMNTH23;
}

public byte getSMKMNTH24() {
return SMKMNTH24;
}

public byte getSMKMNTH31() {
return SMKMNTH31;
}

public byte getSMKMNTH32() {
return SMKMNTH32;
}

public byte getSMKMNTH33() {
return SMKMNTH33;
}

public byte getSMKMNTH34() {
return SMKMNTH34;
}

public byte getSMOFRQ() {
return SMOFRQ;
}

public byte getSOCCONT() {
return SOCCONT;
}

public byte getSPPEN() {
return SPPEN;
}

public int getSPPID() {
return SPPID;
}

public byte getSPPNO() {
return SPPNO;
}

public byte getSRVYNOT1() {
return SRVYNOT1;
}

public byte getSRVYNOT10() {
return SRVYNOT10;
}

public byte getSRVYNOT2() {
return SRVYNOT2;
}

public byte getSRVYNOT3() {
return SRVYNOT3;
}

public byte getSRVYNOT4() {
return SRVYNOT4;
}

public byte getSRVYNOT5() {
return SRVYNOT5;
}

public byte getSRVYNOT6() {
return SRVYNOT6;
}

public byte getSRVYNOT7() {
return SRVYNOT7;
}

public byte getSRVYNOT8() {
return SRVYNOT8;
}

public byte getSRVYNOT9() {
return SRVYNOT9;
}

public byte getSTATCM1() {
return STATCM1;
}

public byte getSTATCM2() {
return STATCM2;
}

public byte getSTATCM3() {
return STATCM3;
}

public short getSTATCY41() {
return STATCY41;
}

public short getSTATCY42() {
return STATCY42;
}

public short getSTATCY43() {
return STATCY43;
}

public byte getSTATENDD1() {
return STATENDD1;
}

public byte getSTATENDD2() {
return STATENDD2;
}

public byte getSTATENDD3() {
return STATENDD3;
}

public byte getSTATENDD4() {
return STATENDD4;
}

public byte getSTATENDD5() {
return STATENDD5;
}

public byte getSTATENDD6() {
return STATENDD6;
}

public byte getSTATENDM1() {
return STATENDM1;
}

public byte getSTATENDM2() {
return STATENDM2;
}

public byte getSTATENDM3() {
return STATENDM3;
}

public byte getSTATENDM4() {
return STATENDM4;
}

public byte getSTATENDM5() {
return STATENDM5;
}

public byte getSTATENDM6() {
return STATENDM6;
}

public short getSTATENDY41() {
return STATENDY41;
}

public short getSTATENDY42() {
return STATENDY42;
}

public short getSTATENDY43() {
return STATENDY43;
}

public short getSTATENDY44() {
return STATENDY44;
}

public short getSTATENDY45() {
return STATENDY45;
}

public short getSTATENDY46() {
return STATENDY46;
}

public byte getSTENDREAS() {
return STENDREAS;
}

public short getSTRATA() {
return STRATA;
}

public byte getSUSP() {
return SUSP;
}

public byte getSVACTS1() {
return SVACTS1;
}

public byte getSVACTS2() {
return SVACTS2;
}

public byte getSVACTS3() {
return SVACTS3;
}

public byte getSVACTS4() {
return SVACTS4;
}

public byte getSVACTS5() {
return SVACTS5;
}

public byte getSVACTS96() {
return SVACTS96;
}

public byte getSVACTS97() {
return SVACTS97;
}

public int getSVAMT1() {
return SVAMT1;
}

public int getSVAMT2() {
return SVAMT2;
}

public int getSVAMT3() {
return SVAMT3;
}

public int getSVAMT4() {
return SVAMT4;
}

public int getSVAMT5() {
return SVAMT5;
}

public int getSVAMT6() {
return SVAMT6;
}

public byte getSVB1_1() {
return SVB1_1;
}

public byte getSVB1_2() {
return SVB1_2;
}

public byte getSVB1_3() {
return SVB1_3;
}

public byte getSVB1_4() {
return SVB1_4;
}

public byte getSVB1_5() {
return SVB1_5;
}

public byte getSVB1_6() {
return SVB1_6;
}

public byte getSVB2_1() {
return SVB2_1;
}

public byte getSVB2_2() {
return SVB2_2;
}

public byte getSVB2_3() {
return SVB2_3;
}

public byte getSVB2_4() {
return SVB2_4;
}

public byte getSVB2_5() {
return SVB2_5;
}

public byte getSVB2_6() {
return SVB2_6;
}

public byte getSVB3_1() {
return SVB3_1;
}

public byte getSVB3_2() {
return SVB3_2;
}

public byte getSVB3_3() {
return SVB3_3;
}

public byte getSVB3_4() {
return SVB3_4;
}

public byte getSVB3_5() {
return SVB3_5;
}

public byte getSVB3_6() {
return SVB3_6;
}

public byte getSVB4_1() {
return SVB4_1;
}

public byte getSVB4_2() {
return SVB4_2;
}

public byte getSVB4_3() {
return SVB4_3;
}

public byte getSVB4_4() {
return SVB4_4;
}

public byte getSVB4_5() {
return SVB4_5;
}

public byte getSVB4_6() {
return SVB4_6;
}

public byte getSVB5_1() {
return SVB5_1;
}

public byte getSVB5_2() {
return SVB5_2;
}

public byte getSVB5_3() {
return SVB5_3;
}

public byte getSVB5_4() {
return SVB5_4;
}

public byte getSVB5_5() {
return SVB5_5;
}

public byte getSVB5_6() {
return SVB5_6;
}

public byte getSVPN0_1() {
return SVPN0_1;
}

public byte getSVPN0_2() {
return SVPN0_2;
}

public boolean getSVPN0_3() {
return SVPN0_3;
}

public boolean getSVPN0_4() {
return SVPN0_4;
}

public boolean getSVPN0_5() {
return SVPN0_5;
}

public boolean getSVPN0_6() {
return SVPN0_6;
}

public byte getSVPN10_1() {
return SVPN10_1;
}

public byte getSVPN10_2() {
return SVPN10_2;
}

public boolean getSVPN10_3() {
return SVPN10_3;
}

public boolean getSVPN10_4() {
return SVPN10_4;
}

public boolean getSVPN10_5() {
return SVPN10_5;
}

public boolean getSVPN10_6() {
return SVPN10_6;
}

public byte getSVPN11_1() {
return SVPN11_1;
}

public byte getSVPN11_2() {
return SVPN11_2;
}

public boolean getSVPN11_3() {
return SVPN11_3;
}

public boolean getSVPN11_4() {
return SVPN11_4;
}

public boolean getSVPN11_5() {
return SVPN11_5;
}

public boolean getSVPN11_6() {
return SVPN11_6;
}

public byte getSVPN12_1() {
return SVPN12_1;
}

public byte getSVPN12_2() {
return SVPN12_2;
}

public boolean getSVPN12_3() {
return SVPN12_3;
}

public boolean getSVPN12_4() {
return SVPN12_4;
}

public boolean getSVPN12_5() {
return SVPN12_5;
}

public boolean getSVPN12_6() {
return SVPN12_6;
}

public byte getSVPN13_1() {
return SVPN13_1;
}

public byte getSVPN13_2() {
return SVPN13_2;
}

public boolean getSVPN13_3() {
return SVPN13_3;
}

public boolean getSVPN13_4() {
return SVPN13_4;
}

public boolean getSVPN13_5() {
return SVPN13_5;
}

public boolean getSVPN13_6() {
return SVPN13_6;
}

public byte getSVPN14_1() {
return SVPN14_1;
}

public byte getSVPN14_2() {
return SVPN14_2;
}

public boolean getSVPN14_3() {
return SVPN14_3;
}

public boolean getSVPN14_4() {
return SVPN14_4;
}

public boolean getSVPN14_5() {
return SVPN14_5;
}

public boolean getSVPN14_6() {
return SVPN14_6;
}

public byte getSVPN15_1() {
return SVPN15_1;
}

public byte getSVPN15_2() {
return SVPN15_2;
}

public boolean getSVPN15_3() {
return SVPN15_3;
}

public boolean getSVPN15_4() {
return SVPN15_4;
}

public boolean getSVPN15_5() {
return SVPN15_5;
}

public boolean getSVPN15_6() {
return SVPN15_6;
}

public byte getSVPN16_1() {
return SVPN16_1;
}

public byte getSVPN16_2() {
return SVPN16_2;
}

public boolean getSVPN16_3() {
return SVPN16_3;
}

public boolean getSVPN16_4() {
return SVPN16_4;
}

public boolean getSVPN16_5() {
return SVPN16_5;
}

public boolean getSVPN16_6() {
return SVPN16_6;
}

public byte getSVPN1_1() {
return SVPN1_1;
}

public byte getSVPN1_2() {
return SVPN1_2;
}

public boolean getSVPN1_3() {
return SVPN1_3;
}

public boolean getSVPN1_4() {
return SVPN1_4;
}

public boolean getSVPN1_5() {
return SVPN1_5;
}

public boolean getSVPN1_6() {
return SVPN1_6;
}

public byte getSVPN2_1() {
return SVPN2_1;
}

public byte getSVPN2_2() {
return SVPN2_2;
}

public boolean getSVPN2_3() {
return SVPN2_3;
}

public boolean getSVPN2_4() {
return SVPN2_4;
}

public boolean getSVPN2_5() {
return SVPN2_5;
}

public boolean getSVPN2_6() {
return SVPN2_6;
}

public byte getSVPN3_1() {
return SVPN3_1;
}

public byte getSVPN3_2() {
return SVPN3_2;
}

public boolean getSVPN3_3() {
return SVPN3_3;
}

public boolean getSVPN3_4() {
return SVPN3_4;
}

public boolean getSVPN3_5() {
return SVPN3_5;
}

public boolean getSVPN3_6() {
return SVPN3_6;
}

public byte getSVPN4_1() {
return SVPN4_1;
}

public byte getSVPN4_2() {
return SVPN4_2;
}

public boolean getSVPN4_3() {
return SVPN4_3;
}

public boolean getSVPN4_4() {
return SVPN4_4;
}

public boolean getSVPN4_5() {
return SVPN4_5;
}

public boolean getSVPN4_6() {
return SVPN4_6;
}

public byte getSVPN5_1() {
return SVPN5_1;
}

public byte getSVPN5_2() {
return SVPN5_2;
}

public boolean getSVPN5_3() {
return SVPN5_3;
}

public boolean getSVPN5_4() {
return SVPN5_4;
}

public boolean getSVPN5_5() {
return SVPN5_5;
}

public boolean getSVPN5_6() {
return SVPN5_6;
}

public byte getSVPN6_1() {
return SVPN6_1;
}

public byte getSVPN6_2() {
return SVPN6_2;
}

public boolean getSVPN6_3() {
return SVPN6_3;
}

public boolean getSVPN6_4() {
return SVPN6_4;
}

public boolean getSVPN6_5() {
return SVPN6_5;
}

public boolean getSVPN6_6() {
return SVPN6_6;
}

public byte getSVPN7_1() {
return SVPN7_1;
}

public byte getSVPN7_2() {
return SVPN7_2;
}

public boolean getSVPN7_3() {
return SVPN7_3;
}

public boolean getSVPN7_4() {
return SVPN7_4;
}

public boolean getSVPN7_5() {
return SVPN7_5;
}

public boolean getSVPN7_6() {
return SVPN7_6;
}

public byte getSVPN8_1() {
return SVPN8_1;
}

public byte getSVPN8_2() {
return SVPN8_2;
}

public boolean getSVPN8_3() {
return SVPN8_3;
}

public boolean getSVPN8_4() {
return SVPN8_4;
}

public boolean getSVPN8_5() {
return SVPN8_5;
}

public boolean getSVPN8_6() {
return SVPN8_6;
}

public byte getSVPN9_1() {
return SVPN9_1;
}

public byte getSVPN9_2() {
return SVPN9_2;
}

public boolean getSVPN9_3() {
return SVPN9_3;
}

public boolean getSVPN9_4() {
return SVPN9_4;
}

public boolean getSVPN9_5() {
return SVPN9_5;
}

public boolean getSVPN9_6() {
return SVPN9_6;
}

public byte getSVSJ1() {
return SVSJ1;
}

public byte getSVSJ2() {
return SVSJ2;
}

public boolean getSVSJ3() {
return SVSJ3;
}

public boolean getSVSJ4() {
return SVSJ4;
}

public boolean getSVSJ5() {
return SVSJ5;
}

public boolean getSVSJ6() {
return SVSJ6;
}

public int getSVSK1() {
return SVSK1;
}

public int getSVSK2() {
return SVSK2;
}

public boolean getSVSK3() {
return SVSK3;
}

public boolean getSVSK4() {
return SVSK4;
}

public boolean getSVSK5() {
return SVSK5;
}

public boolean getSVSK6() {
return SVSK6;
}

public byte getSWEMWBS_DV() {
return SWEMWBS_DV;
}

public byte getTF_JBSEMP() {
return TF_JBSEMP;
}

public short getTMTIME() {
return TMTIME;
}

public byte getTRAINANY() {
return TRAINANY;
}

public short getTRAINDAYS1() {
return TRAINDAYS1;
}

public short getTRAINDAYS2() {
return TRAINDAYS2;
}

public short getTRAINDAYS3() {
return TRAINDAYS3;
}

public byte getTRAINEND1() {
return TRAINEND1;
}

public byte getTRAINEND2() {
return TRAINEND2;
}

public byte getTRAINEND3() {
return TRAINEND3;
}

public byte getTRAINHRS1() {
return TRAINHRS1;
}

public byte getTRAINHRS2() {
return TRAINHRS2;
}

public byte getTRAINHRS3() {
return TRAINHRS3;
}

public byte getTRAINN() {
return TRAINN;
}

public byte getTRAINPURP11() {
return TRAINPURP11;
}

public byte getTRAINPURP12() {
return TRAINPURP12;
}

public byte getTRAINPURP13() {
return TRAINPURP13;
}

public byte getTRAINPURP21() {
return TRAINPURP21;
}

public byte getTRAINPURP22() {
return TRAINPURP22;
}

public byte getTRAINPURP23() {
return TRAINPURP23;
}

public byte getTRAINPURP31() {
return TRAINPURP31;
}

public byte getTRAINPURP32() {
return TRAINPURP32;
}

public byte getTRAINPURP33() {
return TRAINPURP33;
}

public byte getTRAINPURP41() {
return TRAINPURP41;
}

public byte getTRAINPURP42() {
return TRAINPURP42;
}

public byte getTRAINPURP43() {
return TRAINPURP43;
}

public byte getTRAINPURP51() {
return TRAINPURP51;
}

public byte getTRAINPURP52() {
return TRAINPURP52;
}

public byte getTRAINPURP53() {
return TRAINPURP53;
}

public byte getTRAINPURP61() {
return TRAINPURP61;
}

public byte getTRAINPURP62() {
return TRAINPURP62;
}

public byte getTRAINPURP63() {
return TRAINPURP63;
}

public byte getTRAINPURP71() {
return TRAINPURP71;
}

public byte getTRAINPURP72() {
return TRAINPURP72;
}

public byte getTRAINPURP73() {
return TRAINPURP73;
}

public byte getTRAINQUAL1() {
return TRAINQUAL1;
}

public byte getTRAINQUAL2() {
return TRAINQUAL2;
}

public byte getTRAINQUAL3() {
return TRAINQUAL3;
}

public byte getTRBIKEFQ() {
return TRBIKEFQ;
}

public byte getTRBUSFQ() {
return TRBUSFQ;
}

public byte getTRCARFQ() {
return TRCARFQ;
}

public byte getTRQUAL1() {
return TRQUAL1;
}

public byte getTRQUAL10() {
return TRQUAL10;
}

public byte getTRQUAL11() {
return TRQUAL11;
}

public byte getTRQUAL13() {
return TRQUAL13;
}

public byte getTRQUAL15() {
return TRQUAL15;
}

public byte getTRQUAL16() {
return TRQUAL16;
}

public byte getTRQUAL17() {
return TRQUAL17;
}

public byte getTRQUAL18() {
return TRQUAL18;
}

public byte getTRQUAL19() {
return TRQUAL19;
}

public byte getTRQUAL2() {
return TRQUAL2;
}

public byte getTRQUAL20() {
return TRQUAL20;
}

public byte getTRQUAL21() {
return TRQUAL21;
}

public byte getTRQUAL22() {
return TRQUAL22;
}

public byte getTRQUAL23() {
return TRQUAL23;
}

public byte getTRQUAL24() {
return TRQUAL24;
}

public byte getTRQUAL25() {
return TRQUAL25;
}

public byte getTRQUAL26() {
return TRQUAL26;
}

public byte getTRQUAL27() {
return TRQUAL27;
}

public byte getTRQUAL28() {
return TRQUAL28;
}

public byte getTRQUAL29() {
return TRQUAL29;
}

public byte getTRQUAL3() {
return TRQUAL3;
}

public byte getTRQUAL30() {
return TRQUAL30;
}

public byte getTRQUAL31() {
return TRQUAL31;
}

public byte getTRQUAL4() {
return TRQUAL4;
}

public byte getTRQUAL5() {
return TRQUAL5;
}

public byte getTRQUAL6() {
return TRQUAL6;
}

public byte getTRQUAL7() {
return TRQUAL7;
}

public byte getTRQUAL8() {
return TRQUAL8;
}

public byte getTRQUAL9() {
return TRQUAL9;
}

public byte getTRTRNFQ() {
return TRTRNFQ;
}

public byte getTRWHO1() {
return TRWHO1;
}

public byte getTRWHO2() {
return TRWHO2;
}

public byte getTRWHO3() {
return TRWHO3;
}

public byte getTSLP_30M() {
return TSLP_30M;
}

public byte getTSLP_CGH() {
return TSLP_CGH;
}

public byte getTSLP_WAK() {
return TSLP_WAK;
}

public byte getTSTA_AWK() {
return TSTA_AWK;
}

public short getTUIN1() {
return TUIN1;
}

public short getTUJBPL() {
return TUJBPL;
}

public byte getTWKCAR() {
return TWKCAR;
}

public byte getTWKDIFF1() {
return TWKDIFF1;
}

public byte getTWKDIFF2() {
return TWKDIFF2;
}

public byte getTWKDIFF3() {
return TWKDIFF3;
}

public byte getTWKDIFF4() {
return TWKDIFF4;
}

public byte getTWKDIFF5() {
return TWKDIFF5;
}

public byte getTWKDIFF6() {
return TWKDIFF6;
}

public byte getTWKDIFF7() {
return TWKDIFF7;
}

public byte getTWKDIFF8() {
return TWKDIFF8;
}

public byte getTWKDIFF97() {
return TWKDIFF97;
}

public byte getTWKDIFFM() {
return TWKDIFFM;
}

public byte getUKBORN() {
return UKBORN;
}

public byte getUNDQUS() {
return UNDQUS;
}

public byte getUNUSEXP() {
return UNUSEXP;
}

public byte getUPSET() {
return UPSET;
}

public byte getURBAN_DV() {
return URBAN_DV;
}

public byte getVOLFREQ() {
return VOLFREQ;
}

public short getVOLHRS() {
return VOLHRS;
}

public byte getVOLUN() {
return VOLUN;
}

public short getVOTE1() {
return VOTE1;
}

public short getVOTE2() {
return VOTE2;
}

public short getVOTE3() {
return VOTE3;
}

public short getVOTE4() {
return VOTE4;
}

public short getVOTE5() {
return VOTE5;
}

public short getVOTE6() {
return VOTE6;
}

public byte getWHORUAGE() {
return WHORUAGE;
}

public byte getWHORUEDU() {
return WHORUEDU;
}

public byte getWHORUFAM() {
return WHORUFAM;
}

public byte getWHORUPOL() {
return WHORUPOL;
}

public byte getWHORUPRO() {
return WHORUPRO;
}

public byte getWHORURAC() {
return WHORURAC;
}

public byte getWHORUSEX() {
return WHORUSEX;
}

public byte getWKAUT1() {
return WKAUT1;
}

public byte getWKAUT2() {
return WKAUT2;
}

public byte getWKAUT3() {
return WKAUT3;
}

public byte getWKAUT4() {
return WKAUT4;
}

public byte getWKAUT5() {
return WKAUT5;
}

public byte getWKENDS() {
return WKENDS;
}

public byte getWKPLSAM() {
return WKPLSAM;
}

public short getWKTIME() {
return WKTIME;
}

public short getWORKDIS() {
return WORKDIS;
}

public byte getWORKTRAV() {
return WORKTRAV;
}

public byte getXPMOVE() {
return XPMOVE;
}

public byte getXPMVMNTH() {
return XPMVMNTH;
}

public byte getXPMVWHN() {
return XPMVWHN;
}

public byte getXPMVWHR() {
return XPMVWHR;
}

public short getXPMVYR() {
return XPMVYR;
}

public byte getXTRA5MINOSM_DV() {
return XTRA5MINOSM_DV;
}

public byte getXTRA5MIN_DV() {
return XTRA5MIN_DV;
}

public byte getYAFUTA() {
return YAFUTA;
}

public byte getYAFUTB() {
return YAFUTB;
}

public byte getYAJBSRV1() {
return YAJBSRV1;
}

public byte getYAJBSRV2() {
return YAJBSRV2;
}

public byte getYAJBSRV3() {
return YAJBSRV3;
}

public byte getYAJBSRV4() {
return YAJBSRV4;
}

public byte getYAJBSRV5() {
return YAJBSRV5;
}

public byte getYAJBSRV7() {
return YAJBSRV7;
}

public byte getYAJBSRV8() {
return YAJBSRV8;
}

public byte getYAJBSRV96() {
return YAJBSRV96;
}

public byte getYANSSEC5_DV() {
return YANSSEC5_DV;
}

public short getYASOC00_CC() {
return YASOC00_CC;
}

public short getYASOC10_CC() {
return YASOC10_CC;
}

public byte getYASOC90_CC() {
return YASOC90_CC;
}

public byte getYNOTBIKE1() {
return YNOTBIKE1;
}

public byte getYNOTBIKE2() {
return YNOTBIKE2;
}

public byte getYNOTBIKE3() {
return YNOTBIKE3;
}

public byte getYNOTBIKE96() {
return YNOTBIKE96;
}

public byte getYPAMAR() {
return YPAMAR;
}

public byte getYPAPAR() {
return YPAPAR;
}

public byte getYPESTA() {
return YPESTA;
}

public byte getYPESTB() {
return YPESTB;
}

public byte getYPESTC() {
return YPESTC;
}

public byte getYPESTE() {
return YPESTE;
}

public byte getYPESTF() {
return YPESTF;
}

public byte getYPESTI() {
return YPESTI;
}

public byte getYPESTJ() {
return YPESTJ;
}

public byte getYPESTK() {
return YPESTK;
}

public byte getYPNETCHT() {
return YPNETCHT;
}

public byte getYPNPAL() {
return YPNPAL;
}

public byte getYPSOCWEB() {
return YPSOCWEB;
}

public US_Wave22_indresp_Record(String line) {
s = line.split("\t");
initPIDP(s[0]);
initPID(s[1]);
initHIDP(s[2]);
initPNO(s[3]);
initCHILDPNO(s[4]);
initHHORIG(s[5]);
initMEMORIG(s[6]);
initPSU(s[7]);
initSTRATA(s[8]);
initSAMPST(s[9]);
initMONTH(s[10]);
initIVFIO(s[11]);
initIOUTCOME(s[12]);
initSEX(s[13]);
initDVAGE(s[14]);
initBIRTHY(s[15]);
initCINDTIME(s[16]);
initTMTIME(s[17]);
initNCARS(s[18]);
initLVWHY(s[19]);
initLVMTHP(s[20]);
initLVYRP(s[21]);
initISYEAR(s[22]);
initADSTATUS(s[23]);
initPLIVPAR(s[24]);
initPSIBLINGS(s[25]);
initPPENSIONER(s[26]);
initTF_JBSEMP(s[27]);
initINOCONTACT(s[28]);
initNCH14RESP(s[29]);
initNCH3RESP(s[30]);
initNCH5RESP(s[31]);
initNCH8RESP(s[32]);
initNCH415RESP(s[33]);
initNCHRESP(s[34]);
initNCHUND18RESP(s[35]);
initNATCH01(s[36]);
initNATCH02(s[37]);
initNATCH03(s[38]);
initNATCH04(s[39]);
initNATCH05(s[40]);
initNATCH06(s[41]);
initNATCH07(s[42]);
initNATCH08(s[43]);
initNATCH09(s[44]);
initNATCH10(s[45]);
initNATCH11(s[46]);
initNATCH12(s[47]);
initNATCH13(s[48]);
initNATCH14(s[49]);
initNATCH15(s[50]);
initNATCH16(s[51]);
initNNATCH(s[52]);
initNADOPTCH(s[53]);
initADOPTCH01(s[54]);
initADOPTCH02(s[55]);
initADOPTCH03(s[56]);
initADOPTCH04(s[57]);
initADOPTCH05(s[58]);
initADOPTCH06(s[59]);
initADOPTCH07(s[60]);
initADOPTCH08(s[61]);
initADOPTCH09(s[62]);
initADOPTCH10(s[63]);
initADOPTCH11(s[64]);
initADOPTCH12(s[65]);
initADOPTCH13(s[66]);
initADOPTCH14(s[67]);
initADOPTCH15(s[68]);
initADOPTCH16(s[69]);
initNCHUNDER16(s[70]);
initNCH5TO15(s[71]);
initNCH10TO15(s[72]);
initNCH10(s[73]);
initFFBRFEDLW(s[74]);
initCHBRFED01(s[75]);
initCHBRFED02(s[76]);
initCHBRFED03(s[77]);
initCHBRFED04(s[78]);
initCHBRFED05(s[79]);
initCHBRFED06(s[80]);
initCHBRFED07(s[81]);
initCHBRFED08(s[82]);
initCHBRFED09(s[83]);
initCHBRFED10(s[84]);
initCHBRFED11(s[85]);
initCHBRFED12(s[86]);
initCHBRFED13(s[87]);
initCHBRFED14(s[88]);
initCHBRFED15(s[89]);
initCHBRFED16(s[90]);
initALLCH01(s[91]);
initALLCH02(s[92]);
initALLCH03(s[93]);
initALLCH04(s[94]);
initALLCH05(s[95]);
initALLCH06(s[96]);
initALLCH07(s[97]);
initALLCH08(s[98]);
initALLCH09(s[99]);
initALLCH10(s[100]);
initALLCH11(s[101]);
initALLCH12(s[102]);
initALLCH13(s[103]);
initALLCH14(s[104]);
initALLCH15(s[105]);
initALLCH16(s[106]);
initISTRTDATY(s[107]);
initISTRTDATM(s[108]);
initISTRTDATD(s[109]);
initLIENG(s[110]);
initLITRANS(s[111]);
initLIWHO(s[112]);
initLIHOW(s[113]);
initCHKRESP(s[114]);
initMVEVER(s[115]);
initMVMNTH(s[116]);
initMVYR(s[117]);
initLKMOVE(s[118]);
initXPMVWHN(s[119]);
initXPMVMNTH(s[120]);
initXPMVWHR(s[121]);
initXPMOVE(s[122]);
initJBSTAT(s[123]);
initMLSTATCHK(s[124]);
initMLSTAT(s[125]);
initDRIVE(s[126]);
initCARUSE(s[127]);
initMOBUSE(s[128]);
initNETPUSE(s[129]);
initXPMVYR(s[130]);
initUKBORN(s[131]);
initPLBORNC(s[132]);
initYR2UK4(s[133]);
initCITZN1(s[134]);
initCITZN2(s[135]);
initCITZN3(s[136]);
initQFHIGH(s[137]);
initQUALOC(s[138]);
initQFVOC1(s[139]);
initQFVOC2(s[140]);
initQFVOC3(s[141]);
initQFVOC4(s[142]);
initQFVOC5(s[143]);
initQFVOC6(s[144]);
initQFVOC7(s[145]);
initQFVOC8(s[146]);
initQFVOC9(s[147]);
initQFVOC10(s[148]);
initQFVOC11(s[149]);
initQFVOC12(s[150]);
initQFVOC13(s[151]);
initQFVOC14(s[152]);
initQFVOC15(s[153]);
initQFVOC96(s[154]);
initSCHOOL(s[155]);
initSCEND(s[156]);
initSCHLLOC(s[157]);
initSCHOK(s[158]);
initFENOW(s[159]);
initFEEND(s[160]);
initEDTYPE(s[161]);
initEDASP(s[162]);
initLVSCHDO(s[163]);
initAHVWELL(s[164]);
initHEDLIK(s[165]);
initHEDNT(s[166]);
initJ1NONE(s[167]);
initJ1SEMP(s[168]);
initJ1BOSS(s[169]);
initJ1MNGR(s[170]);
initYPAMAR(s[171]);
initYPAPAR(s[172]);
initLVHM(s[173]);
initPAJU(s[174]);
initMAJU(s[175]);
initPACOB(s[176]);
initPAYRUK(s[177]);
initMACOB(s[178]);
initMAYRUK(s[179]);
initNATID1(s[180]);
initNATID2(s[181]);
initNATID3(s[182]);
initNATID4(s[183]);
initNATID5(s[184]);
initNATID6(s[185]);
initNATID97(s[186]);
initRACEL(s[187]);
initRACELO_CODE(s[188]);
initRACELT(s[189]);
initRACELWT(s[190]);
initRACELMT(s[191]);
initRACELAT(s[192]);
initRACELBT(s[193]);
initRACELOT_CODE(s[194]);
initOPRLG(s[195]);
initOPRLG0(s[196]);
initOPRLG1(s[197]);
initOPRLG0NI(s[198]);
initNIREL(s[199]);
initNIACT(s[200]);
initOPRLG2(s[201]);
initPRAYFREQ(s[202]);
initOPRLG3(s[203]);
initRLEAT(s[204]);
initRLDRNK(s[205]);
initRLWEAR(s[206]);
initRLMARG(s[207]);
initRLSCHL(s[208]);
initRLCHARITY(s[209]);
initRLSAVE(s[210]);
initRLFRIENDS(s[211]);
initRLJOB(s[212]);
initRLJOBY1(s[213]);
initRLJOBY2(s[214]);
initRLJOBY3(s[215]);
initRLJOBY4(s[216]);
initRLJOBY5(s[217]);
initRLJOBY6(s[218]);
initRLJOBY97(s[219]);
initSERVUSE1(s[220]);
initSERVUSE2(s[221]);
initSERVUSE3(s[222]);
initSERVUSE4(s[223]);
initSERVUSE5(s[224]);
initSERVUSE6(s[225]);
initSERVUSE7(s[226]);
initSERVUSE8(s[227]);
initSERVUSE9(s[228]);
initSERVUSE10(s[229]);
initSERVUSE96(s[230]);
initOPSERV1(s[231]);
initSRVYNOT1(s[232]);
initOPSERV2(s[233]);
initSRVYNOT2(s[234]);
initOPSERV3(s[235]);
initSRVYNOT3(s[236]);
initOPSERV4(s[237]);
initSRVYNOT4(s[238]);
initOPSERV5(s[239]);
initSRVYNOT5(s[240]);
initOPSERV6(s[241]);
initSRVYNOT6(s[242]);
initOPSERV7(s[243]);
initSRVYNOT7(s[244]);
initOPSERV8(s[245]);
initSRVYNOT8(s[246]);
initOPSERV9(s[247]);
initSRVYNOT9(s[248]);
initOPSERV10(s[249]);
initSRVYNOT10(s[250]);
initSF1(s[251]);
initHEALTH(s[252]);
initHOSPC1(s[253]);
initHOSPDC1(s[254]);
initHOSPC2(s[255]);
initHOSPDC2(s[256]);
initHOSPC3(s[257]);
initHOSPDC3(s[258]);
initHOSPC4(s[259]);
initHOSPDC4(s[260]);
initHOSPC5(s[261]);
initHOSPDC5(s[262]);
initHOSPC6(s[263]);
initHOSPDC6(s[264]);
initHOSPC7(s[265]);
initHOSPDC7(s[266]);
initHOSPC8(s[267]);
initHOSPDC8(s[268]);
initHOSPC9(s[269]);
initHOSPDC9(s[270]);
initHOSPC10(s[271]);
initHOSPDC10(s[272]);
initDISDIF1(s[273]);
initDISDIF2(s[274]);
initDISDIF3(s[275]);
initDISDIF4(s[276]);
initDISDIF5(s[277]);
initDISDIF6(s[278]);
initDISDIF7(s[279]);
initDISDIF8(s[280]);
initDISDIF9(s[281]);
initDISDIF10(s[282]);
initDISDIF11(s[283]);
initDISDIF12(s[284]);
initDISDIF96(s[285]);
initHRS_SLPH(s[286]);
initTSLP_30M(s[287]);
initTSLP_WAK(s[288]);
initTSLP_CGH(s[289]);
initMESLP(s[290]);
initTSTA_AWK(s[291]);
initSLP_QUAL(s[292]);
initHRS_SLPM(s[293]);
initHCOND1(s[294]);
initHCOND2(s[295]);
initHCOND3(s[296]);
initHCOND4(s[297]);
initHCOND5(s[298]);
initHCOND6(s[299]);
initHCOND7(s[300]);
initHCOND8(s[301]);
initHCOND9(s[302]);
initHCOND10(s[303]);
initHCOND11(s[304]);
initHCOND12(s[305]);
initHCOND13(s[306]);
initHCOND14(s[307]);
initHCOND15(s[308]);
initHCOND16(s[309]);
initHCOND17(s[310]);
initHCOND96(s[311]);
initHCONDS01(s[312]);
initHCONDS02(s[313]);
initHCONDS03(s[314]);
initHCONDS04(s[315]);
initHCONDS05(s[316]);
initHCONDS08(s[317]);
initHCONDS09(s[318]);
initHCONDS10(s[319]);
initHCONDS11(s[320]);
initHCONDS12(s[321]);
initHCONDS13(s[322]);
initHCONDS14(s[323]);
initHCONDS15(s[324]);
initHCONDS16(s[325]);
initHCONDS17(s[326]);
initHCONDA01(s[327]);
initHCONDA02(s[328]);
initHCONDA03(s[329]);
initHCONDA04(s[330]);
initHCONDA05(s[331]);
initHCONDA06(s[332]);
initHCONDA07(s[333]);
initHCONDA08(s[334]);
initHCONDA09(s[335]);
initHCONDA10(s[336]);
initHCONDA11(s[337]);
initHCONDA12(s[338]);
initHCONDA13(s[339]);
initHCONDA14(s[340]);
initHCONDA15(s[341]);
initHCONDA16(s[342]);
initHCONDA17(s[343]);
initAIDHH(s[344]);
initAIDHUA1(s[345]);
initAIDHUA2(s[346]);
initAIDHUA3(s[347]);
initAIDHUA4(s[348]);
initAIDHUA5(s[349]);
initAIDHUA6(s[350]);
initAIDHUA7(s[351]);
initAIDHUA8(s[352]);
initAIDHUA9(s[353]);
initAIDHUA10(s[354]);
initAIDHUA11(s[355]);
initAIDHUA12(s[356]);
initAIDHUA13(s[357]);
initAIDHUA14(s[358]);
initAIDHUA15(s[359]);
initAIDHUA16(s[360]);
initAIDXHH(s[361]);
initNAIDXHH(s[362]);
initAIDHU1(s[363]);
initAIDHU2(s[364]);
initAIDHRS(s[365]);
initAIDEFT(s[366]);
initLCOHNPI(s[367]);
initCOH1BM(s[368]);
initCOH1BY(s[369]);
initCOH1MR(s[370]);
initCOH1EM(s[371]);
initCOH1EY(s[372]);
initNMAR(s[373]);
initLMAR1M(s[374]);
initLMAR1Y(s[375]);
initLADOPT(s[376]);
initLNADOPT(s[377]);
initLPRNT(s[378]);
initLNPRNT(s[379]);
initCH1BY4(s[380]);
initADCTS(s[381]);
initMOVY11(s[382]);
initMOVY12(s[383]);
initMOVY13(s[384]);
initMOVY14(s[385]);
initMOVY15(s[386]);
initMOVY16(s[387]);
initFAMILY(s[388]);
initEDUCATION(s[389]);
initMEMPLOY(s[390]);
initHOUSING(s[391]);
initAREA(s[392]);
initMOVEOTH_CODE(s[393]);
initMOVDIR(s[394]);
initPLNOWM(s[395]);
initPLNOWY4(s[396]);
initRELUP(s[397]);
initMSTATSAM(s[398]);
initLWWRONG(s[399]);
initMSTATSAMN(s[400]);
initMSTATCH1(s[401]);
initSTATCM1(s[402]);
initSTATCY41(s[403]);
initDIVCHK1(s[404]);
initDIVFIN1(s[405]);
initDVM1(s[406]);
initDVY41(s[407]);
initCMLSTAT1(s[408]);
initMSTATCH2(s[409]);
initSTATCM2(s[410]);
initSTATCY42(s[411]);
initDIVCHK2(s[412]);
initDIVFIN2(s[413]);
initDVM2(s[414]);
initDVY42(s[415]);
initCMLSTAT2(s[416]);
initMSTATCH3(s[417]);
initSTATCM3(s[418]);
initSTATCY43(s[419]);
initDIVCHK3(s[420]);
initDIVFIN3(s[421]);
initDVM3(s[422]);
initDVY43(s[423]);
initCMLSTAT3(s[424]);
initCOHAB(s[425]);
initCOHABN(s[426]);
initLMCBM1(s[427]);
initLMCBY41(s[428]);
initCURRPART1(s[429]);
initLMSPM1(s[430]);
initLMSPY41(s[431]);
initLMCBM2(s[432]);
initLMCBY42(s[433]);
initCURRPART2(s[434]);
initLMSPM2(s[435]);
initLMSPY42(s[436]);
initFATHER(s[437]);
initNCHILD(s[438]);
initPREG(s[439]);
initPREGM1(s[440]);
initPREGY41(s[441]);
initPREGFERT1(s[442]);
initINVITRO1(s[443]);
initPREGOUT1(s[444]);
initPREGEND1(s[445]);
initENDMNTH1(s[446]);
initPREGSMOKE1(s[447]);
initSMKMNTH11(s[448]);
initSMKMNTH21(s[449]);
initSMKMNTH31(s[450]);
initPREGSMK11(s[451]);
initPREGSMK21(s[452]);
initPREGSMK31(s[453]);
initAEDROF1(s[454]);
initAEPUWK1(s[455]);
initAEPUDA1(s[456]);
initLCHMULTI1(s[457]);
initPREGM2(s[458]);
initPREGY42(s[459]);
initPREGFERT2(s[460]);
initINVITRO2(s[461]);
initPREGOUT2(s[462]);
initPREGEND2(s[463]);
initENDMNTH2(s[464]);
initPREGSMOKE2(s[465]);
initSMKMNTH12(s[466]);
initSMKMNTH22(s[467]);
initSMKMNTH32(s[468]);
initPREGSMK12(s[469]);
initPREGSMK22(s[470]);
initPREGSMK32(s[471]);
initAEDROF2(s[472]);
initAEPUWK2(s[473]);
initAEPUDA2(s[474]);
initLCHMULTI2(s[475]);
initPREGM3(s[476]);
initPREGY43(s[477]);
initPREGFERT3(s[478]);
initINVITRO3(s[479]);
initPREGOUT3(s[480]);
initPREGEND3(s[481]);
initENDMNTH3(s[482]);
initPREGSMOKE3(s[483]);
initSMKMNTH13(s[484]);
initSMKMNTH23(s[485]);
initSMKMNTH33(s[486]);
initPREGSMK13(s[487]);
initPREGSMK23(s[488]);
initPREGSMK33(s[489]);
initAEDROF3(s[490]);
initAEPUWK3(s[491]);
initAEPUDA3(s[492]);
initLCHMULTI3(s[493]);
initPREGM4(s[494]);
initPREGY44(s[495]);
initPREGFERT4(s[496]);
initINVITRO4(s[497]);
initPREGOUT4(s[498]);
initPREGEND4(s[499]);
initENDMNTH4(s[500]);
initPREGSMOKE4(s[501]);
initSMKMNTH14(s[502]);
initSMKMNTH24(s[503]);
initSMKMNTH34(s[504]);
initPREGSMK14(s[505]);
initPREGSMK24(s[506]);
initPREGSMK34(s[507]);
initAEDROF4(s[508]);
initAEPUWK4(s[509]);
initAEPUDA4(s[510]);
initLCHMULTI4(s[511]);
initNNEWBORN(s[512]);
initHCONDNO1(s[513]);
initHCONDNS1(s[514]);
initHCONDNO2(s[515]);
initHCONDNS2(s[516]);
initHCONDNO3(s[517]);
initHCONDNS3(s[518]);
initHCONDNO4(s[519]);
initHCONDNS4(s[520]);
initHCONDNO5(s[521]);
initHCONDNS5(s[522]);
initHCONDNO6(s[523]);
initHCONDNS6(s[524]);
initHCONDNO7(s[525]);
initHCONDNS7(s[526]);
initHCONDNO8(s[527]);
initHCONDNS8(s[528]);
initHCONDNO9(s[529]);
initHCONDNS9(s[530]);
initHCONDNO10(s[531]);
initHCONDNS10(s[532]);
initHCONDN1(s[533]);
initHCONDN2(s[534]);
initHCONDN3(s[535]);
initHCONDN4(s[536]);
initHCONDN5(s[537]);
initHCONDN6(s[538]);
initHCONDN7(s[539]);
initHCONDN8(s[540]);
initHCONDN9(s[541]);
initHCONDN10(s[542]);
initHCONDN11(s[543]);
initHCONDN12(s[544]);
initHCONDN13(s[545]);
initHCONDN14(s[546]);
initHCONDN15(s[547]);
initHCONDN16(s[548]);
initHCONDN17(s[549]);
initHCONDN96(s[550]);
initCONTFT(s[551]);
initFTENDM(s[552]);
initFTENDY4(s[553]);
initFTEDANY(s[554]);
initFTQUALS(s[555]);
initFTEDSTARTM1(s[556]);
initFTEDSTARTY41(s[557]);
initFTEDEND1(s[558]);
initFT2ENDM1(s[559]);
initFT2ENDY41(s[560]);
initFTEDMOR1(s[561]);
initFTEDSTARTM2(s[562]);
initFTEDSTARTY42(s[563]);
initFTEDEND2(s[564]);
initFT2ENDM2(s[565]);
initFT2ENDY42(s[566]);
initFTEDMOR2(s[567]);
initQUALNEW1(s[568]);
initQUALNEW2(s[569]);
initQUALNEW3(s[570]);
initQUALNEW4(s[571]);
initQUALNEW5(s[572]);
initQUALNEW6(s[573]);
initQUALNEW7(s[574]);
initQUALNEW8(s[575]);
initQUALNEW9(s[576]);
initQUALNEW10(s[577]);
initQUALNEW11(s[578]);
initQUALNEW13(s[579]);
initQUALNEW15(s[580]);
initQUALNEW16(s[581]);
initQUALNEW17(s[582]);
initQUALNEW18(s[583]);
initQUALNEW19(s[584]);
initQUALNEW20(s[585]);
initQUALNEW21(s[586]);
initQUALNEW22(s[587]);
initQUALNEW23(s[588]);
initQUALNEW24(s[589]);
initQUALNEW25(s[590]);
initQUALNEW26(s[591]);
initQUALNEW27(s[592]);
initQUALNEW28(s[593]);
initQUALNEW29(s[594]);
initQUALNEW30(s[595]);
initQUALNEW31(s[596]);
initTRAINANY(s[597]);
initTRWHO1(s[598]);
initTRAINDAYS1(s[599]);
initTRAINHRS1(s[600]);
initTRAINEND1(s[601]);
initTRAINPURP11(s[602]);
initTRAINPURP21(s[603]);
initTRAINPURP31(s[604]);
initTRAINPURP41(s[605]);
initTRAINPURP51(s[606]);
initTRAINPURP61(s[607]);
initTRAINPURP71(s[608]);
initTRAINQUAL1(s[609]);
initTRWHO2(s[610]);
initTRAINDAYS2(s[611]);
initTRAINHRS2(s[612]);
initTRAINEND2(s[613]);
initTRAINPURP12(s[614]);
initTRAINPURP22(s[615]);
initTRAINPURP32(s[616]);
initTRAINPURP42(s[617]);
initTRAINPURP52(s[618]);
initTRAINPURP62(s[619]);
initTRAINPURP72(s[620]);
initTRAINQUAL2(s[621]);
initTRWHO3(s[622]);
initTRAINDAYS3(s[623]);
initTRAINHRS3(s[624]);
initTRAINEND3(s[625]);
initTRAINPURP13(s[626]);
initTRAINPURP23(s[627]);
initTRAINPURP33(s[628]);
initTRAINPURP43(s[629]);
initTRAINPURP53(s[630]);
initTRAINPURP63(s[631]);
initTRAINPURP73(s[632]);
initTRAINQUAL3(s[633]);
initTRAINN(s[634]);
initTRQUAL1(s[635]);
initTRQUAL2(s[636]);
initTRQUAL3(s[637]);
initTRQUAL4(s[638]);
initTRQUAL5(s[639]);
initTRQUAL6(s[640]);
initTRQUAL7(s[641]);
initTRQUAL8(s[642]);
initTRQUAL9(s[643]);
initTRQUAL10(s[644]);
initTRQUAL11(s[645]);
initTRQUAL13(s[646]);
initTRQUAL15(s[647]);
initTRQUAL16(s[648]);
initTRQUAL17(s[649]);
initTRQUAL18(s[650]);
initTRQUAL19(s[651]);
initTRQUAL20(s[652]);
initTRQUAL21(s[653]);
initTRQUAL22(s[654]);
initTRQUAL23(s[655]);
initTRQUAL24(s[656]);
initTRQUAL25(s[657]);
initTRQUAL26(s[658]);
initTRQUAL27(s[659]);
initTRQUAL28(s[660]);
initTRQUAL29(s[661]);
initTRQUAL30(s[662]);
initTRQUAL31(s[663]);
initNOTEMPCHK(s[664]);
initEMPCHK(s[665]);
initEMPSTENDD(s[666]);
initEMPSTENDM(s[667]);
initEMPSTENDY4(s[668]);
initSTENDREAS(s[669]);
initNXTST(s[670]);
initNEXT1(s[671]);
initNEXTSTAT1(s[672]);
initNEXTELSE1(s[673]);
initCURRSTAT1(s[674]);
initNEXTJOB1(s[675]);
initCURRJOB1(s[676]);
initJOBHOURS1(s[677]);
initREASEND1(s[678]);
initJBATT1(s[679]);
initSTATENDD1(s[680]);
initSTATENDM1(s[681]);
initSTATENDY41(s[682]);
initNEXT2(s[683]);
initNEXTSTAT2(s[684]);
initNEXTELSE2(s[685]);
initCURRSTAT2(s[686]);
initNEXTJOB2(s[687]);
initCURRJOB2(s[688]);
initJOBHOURS2(s[689]);
initREASEND2(s[690]);
initJBATT2(s[691]);
initSTATENDD2(s[692]);
initSTATENDM2(s[693]);
initSTATENDY42(s[694]);
initNEXT3(s[695]);
initNEXTSTAT3(s[696]);
initNEXTELSE3(s[697]);
initCURRSTAT3(s[698]);
initNEXTJOB3(s[699]);
initCURRJOB3(s[700]);
initJOBHOURS3(s[701]);
initREASEND3(s[702]);
initJBATT3(s[703]);
initSTATENDD3(s[704]);
initSTATENDM3(s[705]);
initSTATENDY43(s[706]);
initNEXT4(s[707]);
initNEXTSTAT4(s[708]);
initNEXTELSE4(s[709]);
initCURRSTAT4(s[710]);
initNEXTJOB4(s[711]);
initCURRJOB4(s[712]);
initJOBHOURS4(s[713]);
initREASEND4(s[714]);
initJBATT4(s[715]);
initSTATENDD4(s[716]);
initSTATENDM4(s[717]);
initSTATENDY44(s[718]);
initNEXT5(s[719]);
initNEXTSTAT5(s[720]);
initNEXTELSE5(s[721]);
initCURRSTAT5(s[722]);
initNEXTJOB5(s[723]);
initCURRJOB5(s[724]);
initJOBHOURS5(s[725]);
initREASEND5(s[726]);
initJBATT5(s[727]);
initSTATENDD5(s[728]);
initSTATENDM5(s[729]);
initSTATENDY45(s[730]);
initNEXT6(s[731]);
initNEXTSTAT6(s[732]);
initNEXTELSE6(s[733]);
initCURRSTAT6(s[734]);
initNEXTJOB6(s[735]);
initCURRJOB6(s[736]);
initJOBHOURS6(s[737]);
initREASEND6(s[738]);
initJBATT6(s[739]);
initSTATENDD6(s[740]);
initSTATENDM6(s[741]);
initSTATENDY46(s[742]);
initNXTSTELSE(s[743]);
initCSTAT(s[744]);
initNXTSTENDD(s[745]);
initNXTSTENDM(s[746]);
initNXTSTENDY4(s[747]);
initJBSAMR(s[748]);
initWKPLSAM(s[749]);
initSAMEJOB(s[750]);
initMATLV(s[751]);
initMATLVSTD(s[752]);
initMATLVSTM(s[753]);
initMATLVSTY4(s[754]);
initMATLVENDD(s[755]);
initMATLVENDM(s[756]);
initMATLVENDY4(s[757]);
initJBENDD(s[758]);
initJBENDM(s[759]);
initJBENDY4(s[760]);
initJBENDREAS(s[761]);
initCJOB(s[762]);
initNXTJBHRS(s[763]);
initNXTJBES(s[764]);
initNXTJBENDD(s[765]);
initNXTJBENDM(s[766]);
initNXTJBENDY4(s[767]);
initCJBATT(s[768]);
initNEXT(s[769]);
initJBHAS(s[770]);
initJBOFF(s[771]);
initJBOFFY(s[772]);
initJBTERM1(s[773]);
initJBTERM2(s[774]);
initJBSIC07CHK(s[775]);
initJBSOC00CHK(s[776]);
initJBSEMPCHK(s[777]);
initJBSEMP(s[778]);
initJBBGDATY(s[779]);
initJBBGDATM(s[780]);
initJBBGDATD(s[781]);
initJBBGD(s[782]);
initJBBGM(s[783]);
initJBBGY(s[784]);
initJBMNGRCHK(s[785]);
initJBMNGR(s[786]);
initJBSIZECHK(s[787]);
initJBSIZE(s[788]);
initJBSECT(s[789]);
initJBSECTPUB(s[790]);
initJBHRS(s[791]);
initJBOT(s[792]);
initJBOTPD(s[793]);
initPAYGWC(s[794]);
initPAYNWC(s[795]);
initPAYUSL(s[796]);
initPAYU(s[797]);
initPAYUWC(s[798]);
initPAYUG(s[799]);
initPAYTYP(s[800]);
initOVTPAY(s[801]);
initEXTNSA(s[802]);
initEXTRATE(s[803]);
initEXTREST(s[804]);
initBASNSA(s[805]);
initBASRATE(s[806]);
initBASREST(s[807]);
initOVTNSA(s[808]);
initOVTRATE(s[809]);
initOVTREST(s[810]);
initJBPL(s[811]);
initJBTTWT(s[812]);
initWORKTRAV(s[813]);
initJSBOSS(s[814]);
initJSSIZE(s[815]);
initJSHRS(s[816]);
initJSTYPEB(s[817]);
initJSACCS(s[818]);
initJSPART(s[819]);
initJSPRBM(s[820]);
initJSPRBY4(s[821]);
initJSPREM(s[822]);
initJSPREY4(s[823]);
initJSPRLS(s[824]);
initJSPRTX(s[825]);
initJSPRNI(s[826]);
initJSPAYU(s[827]);
initJSPAYW(s[828]);
initJSPYTX(s[829]);
initJSPYNI(s[830]);
initJSPL(s[831]);
initJSTTWT(s[832]);
initJSTTWTB(s[833]);
initJSWORKTRAV(s[834]);
initWORKDIS(s[835]);
initTWKDIFF1(s[836]);
initTWKDIFF2(s[837]);
initTWKDIFF3(s[838]);
initTWKDIFF4(s[839]);
initTWKDIFF5(s[840]);
initTWKDIFF6(s[841]);
initTWKDIFF7(s[842]);
initTWKDIFF8(s[843]);
initTWKDIFF97(s[844]);
initTWKDIFFM(s[845]);
initTWKCAR(s[846]);
initJBSAT(s[847]);
initJBPERFP(s[848]);
initJBONUS(s[849]);
initJBRISE(s[850]);
initTUJBPL(s[851]);
initTUIN1(s[852]);
initJBPEN(s[853]);
initJBPENM(s[854]);
initJBPENY4(s[855]);
initPENMCN(s[856]);
initPENMPY(s[857]);
initPENMTP(s[858]);
initPENSPB(s[859]);
initWKTIME(s[860]);
initWKENDS(s[861]);
initJBFLEX1(s[862]);
initJBFLEX2(s[863]);
initJBFLEX3(s[864]);
initJBFLEX4(s[865]);
initJBFLEX5(s[866]);
initJBFLEX6(s[867]);
initJBFLEX7(s[868]);
initJBFLEX8(s[869]);
initJBFLEX96(s[870]);
initJBFXUSE1(s[871]);
initJBFXUSE2(s[872]);
initJBFXUSE3(s[873]);
initJBFXUSE4(s[874]);
initJBFXUSE5(s[875]);
initJBFXUSE6(s[876]);
initJBFXUSE7(s[877]);
initJBFXUSE8(s[878]);
initJBFXUSE96(s[879]);
initJBFXINF(s[880]);
initWKAUT1(s[881]);
initWKAUT2(s[882]);
initWKAUT3(s[883]);
initWKAUT4(s[884]);
initWKAUT5(s[885]);
initDEPENTH1(s[886]);
initDEPENTH2(s[887]);
initDEPENTH3(s[888]);
initDEPENTH4(s[889]);
initDEPENTH5(s[890]);
initDEPENTH6(s[891]);
initJBLKCHA(s[892]);
initJBXPCHA(s[893]);
initJBLKCHB(s[894]);
initJBXPCHB(s[895]);
initJBLKCHC(s[896]);
initJBXPCHC(s[897]);
initJBLKCHD(s[898]);
initJBXPCHD(s[899]);
initJBLKCHE(s[900]);
initJBXPCHE(s[901]);
initJBSEC(s[902]);
initJULK4WK(s[903]);
initJULKJB(s[904]);
initJUBGN(s[905]);
initJULK4X1(s[906]);
initJULK4X2(s[907]);
initJULK4X3(s[908]);
initJULK4X4(s[909]);
initJULK4X5(s[910]);
initJULK4X6(s[911]);
initJULK4X96(s[912]);
initJBHAD(s[913]);
initJLENDM(s[914]);
initJLENDY(s[915]);
initJLSEMP(s[916]);
initJLBOSS(s[917]);
initJLMNGR(s[918]);
initJLSIZE(s[919]);
initEPROSH(s[920]);
initMLFUTR(s[921]);
initMLRNOT1(s[922]);
initMLRNOT2(s[923]);
initMLRNOT3(s[924]);
initMLRNOT4(s[925]);
initMLRNOT5(s[926]);
initMLRNOT6(s[927]);
initMLRNOT7(s[928]);
initMLRNOT8(s[929]);
initMLRNOT9(s[930]);
initMLRNOT10(s[931]);
initMLRNOT11(s[932]);
initMLRNOT12(s[933]);
initMLRNOT13(s[934]);
initMLRNOT97(s[935]);
initMLAGST(s[936]);
initMLAGSTU(s[937]);
initMLWKFPT(s[938]);
initMATLEAVE(s[939]);
initJ2HAS(s[940]);
initJ2SEMP(s[941]);
initJ2HRS(s[942]);
initJ2PAY(s[943]);
initVOLUN(s[944]);
initVOLFREQ(s[945]);
initVOLHRS(s[946]);
initCHARGV(s[947]);
initCHARFREQ(s[948]);
initCHARAM(s[949]);
initTRCARFQ(s[950]);
initTRBUSFQ(s[951]);
initTRTRNFQ(s[952]);
initTRBIKEFQ(s[953]);
initYNOTBIKE1(s[954]);
initYNOTBIKE2(s[955]);
initYNOTBIKE3(s[956]);
initYNOTBIKE96(s[957]);
initCARSRV1(s[958]);
initCARSRV2(s[959]);
initCARSRV3(s[960]);
initPNCARS(s[961]);
initHUCAR(s[962]);
initCARBUY1(s[963]);
initCARBUY2(s[964]);
initCARBUY3(s[965]);
initCARBUY4(s[966]);
initCARBUY5(s[967]);
initCARBUY6(s[968]);
initCARBUY7(s[969]);
initCARBUY8(s[970]);
initCARBUY9(s[971]);
initCARBUY10(s[972]);
initCARBUY11(s[973]);
initCARBUY12(s[974]);
initCARBUY97(s[975]);
initCCARE(s[976]);
initCCWORK(s[977]);
initREMIT1(s[978]);
initREMIT2(s[979]);
initREMIT3(s[980]);
initREMIT4(s[981]);
initREMIT5(s[982]);
initREMITFREQ1(s[983]);
initREMITREG1(s[984]);
initREMITAMT1(s[985]);
initREMCNTRY1(s[986]);
initREMITUSUAL1(s[987]);
initREMHOW1(s[988]);
initREMITFREQ2(s[989]);
initREMITREG2(s[990]);
initREMITAMT2(s[991]);
initREMCNTRY2(s[992]);
initREMITUSUAL2(s[993]);
initREMHOW2(s[994]);
initREMITFREQ3(s[995]);
initREMITREG3(s[996]);
initREMITAMT3(s[997]);
initREMCNTRY3(s[998]);
initREMITUSUAL3(s[999]);
initREMHOW3(s[1000]);
initREMITFREQ4(s[1001]);
initREMITREG4(s[1002]);
initREMITAMT4(s[1003]);
initREMCNTRY4(s[1004]);
initREMITUSUAL4(s[1005]);
initREMHOW4(s[1006]);
initBTYPE1(s[1007]);
initBTYPE2(s[1008]);
initBTYPE10(s[1009]);
initBTYPE3(s[1010]);
initBTYPE4(s[1011]);
initBTYPE5(s[1012]);
initBTYPE6(s[1013]);
initBTYPE7(s[1014]);
initBTYPE8(s[1015]);
initBTYPE9(s[1016]);
initBTYPE11(s[1017]);
initBTYPE12(s[1018]);
initBTYPE13(s[1019]);
initBTYPE14(s[1020]);
initBTYPE96(s[1021]);
initBENUNEMP1(s[1022]);
initBENUNEMP2(s[1023]);
initBENUNEMP3(s[1024]);
initBENUNEMP4(s[1025]);
initBENUNEMP5(s[1026]);
initBENUNEMP6(s[1027]);
initBENUNEMP7(s[1028]);
initBENUNEMP96(s[1029]);
initBENDIS1(s[1030]);
initBENDIS11(s[1031]);
initBENDIS2(s[1032]);
initBENDIS3(s[1033]);
initBENDIS4(s[1034]);
initBENDIS5(s[1035]);
initBENDIS12(s[1036]);
initBENDIS6(s[1037]);
initBENDIS7(s[1038]);
initBENDIS8(s[1039]);
initBENDIS9(s[1040]);
initBENDIS10(s[1041]);
initBENDIS13(s[1042]);
initBENDIS14(s[1043]);
initBENDIS15(s[1044]);
initBENDIS16(s[1045]);
initBENDIS96(s[1046]);
initBENDIS97(s[1047]);
initBENPEN1(s[1048]);
initBENPEN2(s[1049]);
initBENPEN3(s[1050]);
initBENPEN4(s[1051]);
initBENPEN5(s[1052]);
initBENPEN6(s[1053]);
initBENPEN7(s[1054]);
initBENPEN8(s[1055]);
initBENPEN9(s[1056]);
initBENPEN10(s[1057]);
initBENPEN11(s[1058]);
initBENPEN12(s[1059]);
initBENPEN13(s[1060]);
initBENPEN96(s[1061]);
initNISERPS(s[1062]);
initBENCB(s[1063]);
initBENCTC(s[1064]);
initBENFAM1(s[1065]);
initBENFAM2(s[1066]);
initBENFAM3(s[1067]);
initBENFAM4(s[1068]);
initBENFAM5(s[1069]);
initBENFAM6(s[1070]);
initBENFAM7(s[1071]);
initBENFAM8(s[1072]);
initBENFAM9(s[1073]);
initBENFAM10(s[1074]);
initBENFAM96(s[1075]);
initBENTAX6(s[1076]);
initBENTAX1(s[1077]);
initBENTAX2(s[1078]);
initBENTAX3(s[1079]);
initBENTAX4(s[1080]);
initBENTAX5(s[1081]);
initBENTAX7(s[1082]);
initBENTAX8(s[1083]);
initBENTAX9(s[1084]);
initBENTAX10(s[1085]);
initBENTAX96(s[1086]);
initBENHOU1(s[1087]);
initBENHOU2(s[1088]);
initBENHOU3(s[1089]);
initBENHOU4(s[1090]);
initBENHOU5(s[1091]);
initBENHOU6(s[1092]);
initBENHOU7(s[1093]);
initBENHOU8(s[1094]);
initBENHOU9(s[1095]);
initBENHOU96(s[1096]);
initBENSTA1(s[1097]);
initBENSTA2(s[1098]);
initBENSTA3(s[1099]);
initBENSTA4(s[1100]);
initBENSTA5(s[1101]);
initBENSTA6(s[1102]);
initBENSTA7(s[1103]);
initBENSTA9(s[1104]);
initBENSTA10(s[1105]);
initBENSTA11(s[1106]);
initBENSTA12(s[1107]);
initBENSTA13(s[1108]);
initBENSTA96(s[1109]);
initBENSTA97(s[1110]);
initNFH01(s[1111]);
initNFH02(s[1112]);
initNFH03(s[1113]);
initNFH04(s[1114]);
initNFH05(s[1115]);
initNFH06(s[1116]);
initNFH07(s[1117]);
initNFH08(s[1118]);
initNFH09(s[1119]);
initNFH10(s[1120]);
initNFH11(s[1121]);
initNFH12(s[1122]);
initNFH13(s[1123]);
initNFH14(s[1124]);
initNFH15(s[1125]);
initNFH16(s[1126]);
initNFH17(s[1127]);
initNFH18(s[1128]);
initNFH19(s[1129]);
initNFH20(s[1130]);
initNFH21(s[1131]);
initNFH22(s[1132]);
initNFH23(s[1133]);
initNFH24(s[1134]);
initNFH25(s[1135]);
initNFH26(s[1136]);
initNFH27(s[1137]);
initNFH28(s[1138]);
initNFH29(s[1139]);
initNFH30(s[1140]);
initNFH31(s[1141]);
initNFH32(s[1142]);
initNFH33(s[1143]);
initNFH34(s[1144]);
initNFH35(s[1145]);
initNFH36(s[1146]);
initNFH37(s[1147]);
initNFH38(s[1148]);
initNFH39(s[1149]);
initFIYRDIA(s[1150]);
initFIYRDB1(s[1151]);
initFIYRDB2(s[1152]);
initFIYRDB3(s[1153]);
initFIYRDB4(s[1154]);
initFIYRDB5(s[1155]);
initFIYRDB6(s[1156]);
initFINNOW(s[1157]);
initFINFUT(s[1158]);
initSAVE(s[1159]);
initSAVED(s[1160]);
initSAVREG(s[1161]);
initSAVLT(s[1162]);
initPPEN(s[1163]);
initPPENT(s[1164]);
initPPYRS(s[1165]);
initPPREG(s[1166]);
initPPRAM(s[1167]);
initPPRAMPC(s[1168]);
initHASCURR(s[1169]);
initCURRYNOT1(s[1170]);
initCURRYNOT2(s[1171]);
initCURRYNOT3(s[1172]);
initCURRYNOT4(s[1173]);
initCURRYNOT5(s[1174]);
initCURRYNOT6(s[1175]);
initCURRYNOT7(s[1176]);
initCURRYNOT8(s[1177]);
initCURRYNOT97(s[1178]);
initCURRYNOT96(s[1179]);
initREFBANK(s[1180]);
initREFBNKY(s[1181]);
initSVACTS1(s[1182]);
initSVACTS2(s[1183]);
initSVACTS3(s[1184]);
initSVACTS4(s[1185]);
initSVACTS5(s[1186]);
initSVACTS97(s[1187]);
initSVACTS96(s[1188]);
initNOSVY(s[1189]);
initSVAMT1(s[1190]);
initSVB1_1(s[1191]);
initSVB2_1(s[1192]);
initSVB3_1(s[1193]);
initSVB5_1(s[1194]);
initSVB4_1(s[1195]);
initSVSJ1(s[1196]);
initSVPN0_1(s[1197]);
initSVPN1_1(s[1198]);
initSVPN2_1(s[1199]);
initSVPN3_1(s[1200]);
initSVPN4_1(s[1201]);
initSVPN5_1(s[1202]);
initSVPN6_1(s[1203]);
initSVPN7_1(s[1204]);
initSVPN8_1(s[1205]);
initSVPN9_1(s[1206]);
initSVPN10_1(s[1207]);
initSVPN11_1(s[1208]);
initSVPN12_1(s[1209]);
initSVPN13_1(s[1210]);
initSVPN14_1(s[1211]);
initSVPN15_1(s[1212]);
initSVPN16_1(s[1213]);
initSVSK1(s[1214]);
initSVAMT2(s[1215]);
initSVB1_2(s[1216]);
initSVB2_2(s[1217]);
initSVB3_2(s[1218]);
initSVB5_2(s[1219]);
initSVB4_2(s[1220]);
initSVSJ2(s[1221]);
initSVPN0_2(s[1222]);
initSVPN1_2(s[1223]);
initSVPN2_2(s[1224]);
initSVPN3_2(s[1225]);
initSVPN4_2(s[1226]);
initSVPN5_2(s[1227]);
initSVPN6_2(s[1228]);
initSVPN7_2(s[1229]);
initSVPN8_2(s[1230]);
initSVPN9_2(s[1231]);
initSVPN10_2(s[1232]);
initSVPN11_2(s[1233]);
initSVPN12_2(s[1234]);
initSVPN13_2(s[1235]);
initSVPN14_2(s[1236]);
initSVPN15_2(s[1237]);
initSVPN16_2(s[1238]);
initSVSK2(s[1239]);
initSVAMT3(s[1240]);
initSVB1_3(s[1241]);
initSVB2_3(s[1242]);
initSVB3_3(s[1243]);
initSVB5_3(s[1244]);
initSVB4_3(s[1245]);
initSVSJ3(s[1246]);
initSVPN0_3(s[1247]);
initSVPN1_3(s[1248]);
initSVPN2_3(s[1249]);
initSVPN3_3(s[1250]);
initSVPN4_3(s[1251]);
initSVPN5_3(s[1252]);
initSVPN6_3(s[1253]);
initSVPN7_3(s[1254]);
initSVPN8_3(s[1255]);
initSVPN9_3(s[1256]);
initSVPN10_3(s[1257]);
initSVPN11_3(s[1258]);
initSVPN12_3(s[1259]);
initSVPN13_3(s[1260]);
initSVPN14_3(s[1261]);
initSVPN15_3(s[1262]);
initSVPN16_3(s[1263]);
initSVSK3(s[1264]);
initSVAMT4(s[1265]);
initSVB1_4(s[1266]);
initSVB2_4(s[1267]);
initSVB3_4(s[1268]);
initSVB5_4(s[1269]);
initSVB4_4(s[1270]);
initSVSJ4(s[1271]);
initSVPN0_4(s[1272]);
initSVPN1_4(s[1273]);
initSVPN2_4(s[1274]);
initSVPN3_4(s[1275]);
initSVPN4_4(s[1276]);
initSVPN5_4(s[1277]);
initSVPN6_4(s[1278]);
initSVPN7_4(s[1279]);
initSVPN8_4(s[1280]);
initSVPN9_4(s[1281]);
initSVPN10_4(s[1282]);
initSVPN11_4(s[1283]);
initSVPN12_4(s[1284]);
initSVPN13_4(s[1285]);
initSVPN14_4(s[1286]);
initSVPN15_4(s[1287]);
initSVPN16_4(s[1288]);
initSVSK4(s[1289]);
initSVAMT5(s[1290]);
initSVB1_5(s[1291]);
initSVB2_5(s[1292]);
initSVB3_5(s[1293]);
initSVB5_5(s[1294]);
initSVB4_5(s[1295]);
initSVSJ5(s[1296]);
initSVPN0_5(s[1297]);
initSVPN1_5(s[1298]);
initSVPN2_5(s[1299]);
initSVPN3_5(s[1300]);
initSVPN4_5(s[1301]);
initSVPN5_5(s[1302]);
initSVPN6_5(s[1303]);
initSVPN7_5(s[1304]);
initSVPN8_5(s[1305]);
initSVPN9_5(s[1306]);
initSVPN10_5(s[1307]);
initSVPN11_5(s[1308]);
initSVPN12_5(s[1309]);
initSVPN13_5(s[1310]);
initSVPN14_5(s[1311]);
initSVPN15_5(s[1312]);
initSVPN16_5(s[1313]);
initSVSK5(s[1314]);
initSVAMT6(s[1315]);
initSVB1_6(s[1316]);
initSVB2_6(s[1317]);
initSVB3_6(s[1318]);
initSVB5_6(s[1319]);
initSVB4_6(s[1320]);
initSVSJ6(s[1321]);
initSVPN0_6(s[1322]);
initSVPN1_6(s[1323]);
initSVPN2_6(s[1324]);
initSVPN3_6(s[1325]);
initSVPN4_6(s[1326]);
initSVPN5_6(s[1327]);
initSVPN6_6(s[1328]);
initSVPN7_6(s[1329]);
initSVPN8_6(s[1330]);
initSVPN9_6(s[1331]);
initSVPN10_6(s[1332]);
initSVPN11_6(s[1333]);
initSVPN12_6(s[1334]);
initSVPN13_6(s[1335]);
initSVPN14_6(s[1336]);
initSVPN15_6(s[1337]);
initSVPN16_6(s[1338]);
initSVSK6(s[1339]);
initINFSAVE1(s[1340]);
initINFSAVE2(s[1341]);
initINFSAVE3(s[1342]);
initINFSAVE4(s[1343]);
initINFSAVE5(s[1344]);
initINFSAVE6(s[1345]);
initINFSAVE96(s[1346]);
initCCSOLE(s[1347]);
initNCCSOLE(s[1348]);
initCREDSOLE(s[1349]);
initCCBILLSOLE(s[1350]);
initCCAMTSOLE(s[1351]);
initCCJT(s[1352]);
initNCCJT(s[1353]);
initCCJTP0(s[1354]);
initCCJTP1(s[1355]);
initCCJTP2(s[1356]);
initCCJTP3(s[1357]);
initCCJTP4(s[1358]);
initCCJTP5(s[1359]);
initCCJTP6(s[1360]);
initCCJTP7(s[1361]);
initCCJTP8(s[1362]);
initCCJTP9(s[1363]);
initCCJTP10(s[1364]);
initCCJTP11(s[1365]);
initCCJTP12(s[1366]);
initCCJTP13(s[1367]);
initCCJTP14(s[1368]);
initCCJTP15(s[1369]);
initCCJTP16(s[1370]);
initCREDJT(s[1371]);
initCCBILLJT(s[1372]);
initCCAMTJT(s[1373]);
initDEBT1(s[1374]);
initDEBT2(s[1375]);
initDEBT4(s[1376]);
initDEBT5(s[1377]);
initDEBT6(s[1378]);
initDEBT7(s[1379]);
initDEBT8(s[1380]);
initDEBT97(s[1381]);
initDEBT96(s[1382]);
initDEBTINFO1(s[1383]);
initDEBTINFO2(s[1384]);
initDEBTINFO3(s[1385]);
initDEBTINFO4(s[1386]);
initDEBTINFO5(s[1387]);
initDEBTINFO6(s[1388]);
initDEBTINFO7(s[1389]);
initDEBTINFO8(s[1390]);
initDEBTINFO9(s[1391]);
initDEBTINFO10(s[1392]);
initDEBTINFO11(s[1393]);
initDEBTINFO97(s[1394]);
initDEBTY(s[1395]);
initDEBTC1(s[1396]);
initDEBTC2(s[1397]);
initDEBTC3(s[1398]);
initDEBTC5(s[1399]);
initDEBTC4(s[1400]);
initDEBTSJ(s[1401]);
initDEBTPN0(s[1402]);
initDEBTPN1(s[1403]);
initDEBTPN2(s[1404]);
initDEBTPN3(s[1405]);
initDEBTPN4(s[1406]);
initDEBTPN5(s[1407]);
initDEBTPN6(s[1408]);
initDEBTPN7(s[1409]);
initDEBTPN8(s[1410]);
initDEBTPN9(s[1411]);
initDEBTPN10(s[1412]);
initDEBTPN11(s[1413]);
initDEBTPN12(s[1414]);
initDEBTPN13(s[1415]);
initDEBTPN14(s[1416]);
initDEBTPN15(s[1417]);
initDEBTPN16(s[1418]);
initDEBTSK(s[1419]);
initDEBTWHO1(s[1420]);
initDEBTWHO2(s[1421]);
initDEBTWHO3(s[1422]);
initDEBTWHO4(s[1423]);
initDEBTWHO97(s[1424]);
initDEBTOTH1(s[1425]);
initDEBTOTH2(s[1426]);
initDEBTOTH3(s[1427]);
initDEBTOTH4(s[1428]);
initDEBTOTH96(s[1429]);
initCREDITOR(s[1430]);
initCREDAMT(s[1431]);
initUNUSEXP(s[1432]);
initEXPMANAGE1(s[1433]);
initEXPMANAGE2(s[1434]);
initEXPMANAGE3(s[1435]);
initEXPMANAGE4(s[1436]);
initEXPMANAGE5(s[1437]);
initEXPMANAGE6(s[1438]);
initEXPMANAGE7(s[1439]);
initEXPMANAGE8(s[1440]);
initEXPMANAGE9(s[1441]);
initEXPMANAGE10(s[1442]);
initEXPMANAGE11(s[1443]);
initEXPMANAGE97(s[1444]);
initHURUNS(s[1445]);
initSAVDOCS(s[1446]);
initRETCHK(s[1447]);
initAGERET(s[1448]);
initRTPRO1(s[1449]);
initRTPRO2(s[1450]);
initRTPRO3(s[1451]);
initRTPRO4(s[1452]);
initRTPRO5(s[1453]);
initRTPRO6(s[1454]);
initRTCON1(s[1455]);
initRTCON2(s[1456]);
initRTCON3(s[1457]);
initRTCON4(s[1458]);
initPENMEX(s[1459]);
initPPPEX(s[1460]);
initPPPEXM(s[1461]);
initSPPEN(s[1462]);
initRTEXPJB(s[1463]);
initRTFND1(s[1464]);
initRTFND2(s[1465]);
initRTFND3(s[1466]);
initRTFND4(s[1467]);
initRTFND5(s[1468]);
initRTFND6(s[1469]);
initRTFND7(s[1470]);
initRTFND8(s[1471]);
initRTFND9(s[1472]);
initRTFND10(s[1473]);
initRTFND96(s[1474]);
initRETAMT(s[1475]);
initRETSUF(s[1476]);
initHUBUYS(s[1477]);
initHUFRYS(s[1478]);
initHUMOPS(s[1479]);
initHUIRON(s[1480]);
initHUPOTS(s[1481]);
initHUDIY(s[1482]);
initHUSITS(s[1483]);
initHUBOSS(s[1484]);
initHOWLNG(s[1485]);
initVOTE1(s[1486]);
initVOTE2(s[1487]);
initVOTE3(s[1488]);
initVOTE4(s[1489]);
initVOTE5(s[1490]);
initVOTE6(s[1491]);
initOLYMPAS11(s[1492]);
initOLYMPAS12(s[1493]);
initOLYMPAS13(s[1494]);
initOLYMPAS14(s[1495]);
initOLYMPAS15(s[1496]);
initOLYMPAS196(s[1497]);
initOLYMPAS198(s[1498]);
initOLYMACT11(s[1499]);
initOLYMACT12(s[1500]);
initOLYMACT13(s[1501]);
initOLYMACT14(s[1502]);
initOLYMACT15(s[1503]);
initOLYMACT16(s[1504]);
initOLYMACT17(s[1505]);
initOLYMACT18(s[1506]);
initOLYMACT196(s[1507]);
initOLYMACT198(s[1508]);
initOLYMPAS21(s[1509]);
initOLYMPAS22(s[1510]);
initOLYMPAS23(s[1511]);
initOLYMPAS24(s[1512]);
initOLYMPAS25(s[1513]);
initOLYMPAS296(s[1514]);
initOLYMPAS298(s[1515]);
initOLYMACT21(s[1516]);
initOLYMACT22(s[1517]);
initOLYMACT23(s[1518]);
initOLYMACT24(s[1519]);
initOLYMACT25(s[1520]);
initOLYMACT26(s[1521]);
initOLYMACT27(s[1522]);
initOLYMACT28(s[1523]);
initOLYMACT296(s[1524]);
initOLYMACT298(s[1525]);
initOLYMPAS31(s[1526]);
initOLYMPAS32(s[1527]);
initOLYMPAS33(s[1528]);
initOLYMPAS34(s[1529]);
initOLYMPAS35(s[1530]);
initOLYMPAS396(s[1531]);
initOLYMPAS398(s[1532]);
initOLYMACT31(s[1533]);
initOLYMACT32(s[1534]);
initOLYMACT33(s[1535]);
initOLYMACT34(s[1536]);
initOLYMACT35(s[1537]);
initOLYMACT36(s[1538]);
initOLYMACT37(s[1539]);
initOLYMACT38(s[1540]);
initOLYMACT396(s[1541]);
initOLYMACT398(s[1542]);
initENVHABIT1(s[1543]);
initENVHABIT2(s[1544]);
initENVHABIT3(s[1545]);
initENVHABIT4(s[1546]);
initENVHABIT5(s[1547]);
initENVHABIT6(s[1548]);
initENVHABIT7(s[1549]);
initENVHABIT8(s[1550]);
initENVHABIT9(s[1551]);
initENVHABIT10(s[1552]);
initENVHABIT11(s[1553]);
initCARMILES(s[1554]);
initFLYES1(s[1555]);
initFLYES2(s[1556]);
initFLYES3(s[1557]);
initFLYES4(s[1558]);
initNFLYIN(s[1559]);
initNFLYEU(s[1560]);
initNFLYOS(s[1561]);
initSCAC(s[1562]);
initSCRF1(s[1563]);
initSCRF2(s[1564]);
initSCRF3(s[1565]);
initSCRF4(s[1566]);
initSCRF5(s[1567]);
initSCRF6(s[1568]);
initSCRF97(s[1569]);
initSCUN1(s[1570]);
initSCUN2(s[1571]);
initSCUN3(s[1572]);
initSCUN97(s[1573]);
initSCSF1(s[1574]);
initSCSF2A(s[1575]);
initSCSF2B(s[1576]);
initSCSF3A(s[1577]);
initSCSF3B(s[1578]);
initSCSF4A(s[1579]);
initSCSF4B(s[1580]);
initSCSF5(s[1581]);
initSCSF6A(s[1582]);
initSCSF6B(s[1583]);
initSCSF6C(s[1584]);
initSCSF7(s[1585]);
initSCGHQA(s[1586]);
initSCGHQB(s[1587]);
initSCGHQC(s[1588]);
initSCGHQD(s[1589]);
initSCGHQE(s[1590]);
initSCGHQF(s[1591]);
initSCGHQG(s[1592]);
initSCGHQH(s[1593]);
initSCGHQI(s[1594]);
initSCGHQJ(s[1595]);
initSCGHQK(s[1596]);
initSCGHQL(s[1597]);
initSCLFSAT1(s[1598]);
initSCLFSAT2(s[1599]);
initSCLFSAT7(s[1600]);
initSCLFSATO(s[1601]);
initSCWKIMP(s[1602]);
initSCWKOR1(s[1603]);
initSCWKOR2(s[1604]);
initSCWKOR3(s[1605]);
initSCWKOR4(s[1606]);
initSCWKOR5(s[1607]);
initSCWKOR6(s[1608]);
initSCWKOR7(s[1609]);
initSCWKOR8(s[1610]);
initSCWKOR9(s[1611]);
initSCWKOR10(s[1612]);
initSCWKOR11(s[1613]);
initSCWKOR12(s[1614]);
initSCWKOR13(s[1615]);
initSCWKOR14(s[1616]);
initSCWKOR15(s[1617]);
initSCOPFAMA(s[1618]);
initSCOPFAMB(s[1619]);
initSCOPFAMD(s[1620]);
initSCOPFAMF(s[1621]);
initSCOPFAMH(s[1622]);
initSCENV_FTST(s[1623]);
initSCENV_CRLF(s[1624]);
initSCENV_GRN(s[1625]);
initSCENV_BCCC(s[1626]);
initSCENV_PMEP(s[1627]);
initSCENV_MEDS(s[1628]);
initSCENV_CREX(s[1629]);
initSCENV_TLAT(s[1630]);
initSCENV_NOWO(s[1631]);
initSCENV_FITL(s[1632]);
initSCENV_NOOT(s[1633]);
initSCENV_CANC(s[1634]);
initSCOPECL30(s[1635]);
initSCOPECL200(s[1636]);
initSCWEMWBA(s[1637]);
initSCWEMWBB(s[1638]);
initSCWEMWBC(s[1639]);
initSCWEMWBD(s[1640]);
initSCWEMWBE(s[1641]);
initSCWEMWBF(s[1642]);
initSCWEMWBG(s[1643]);
initWHORUPRO(s[1644]);
initWHORUEDU(s[1645]);
initWHORURAC(s[1646]);
initWHORUPOL(s[1647]);
initWHORUFAM(s[1648]);
initWHORUSEX(s[1649]);
initWHORUAGE(s[1650]);
initYPNPAL(s[1651]);
initYPSOCWEB(s[1652]);
initYPNETCHT(s[1653]);
initEATLIVU(s[1654]);
initFAMSUP(s[1655]);
initUPSET(s[1656]);
initLATE(s[1657]);
initYPESTA(s[1658]);
initYPESTI(s[1659]);
initYPESTB(s[1660]);
initYPESTJ(s[1661]);
initYPESTC(s[1662]);
initYPESTK(s[1663]);
initYPESTE(s[1664]);
initYPESTF(s[1665]);
initYAJBSRV1(s[1666]);
initYAJBSRV2(s[1667]);
initYAJBSRV3(s[1668]);
initYAJBSRV4(s[1669]);
initYAJBSRV5(s[1670]);
initYAJBSRV8(s[1671]);
initYAJBSRV7(s[1672]);
initYAJBSRV96(s[1673]);
initEVRSMO(s[1674]);
initSMOFRQ(s[1675]);
initEVRALC(s[1676]);
initDKLM(s[1677]);
initFIVEALCDR(s[1678]);
initDRNK4W(s[1679]);
initDRGSOL(s[1680]);
initDRGMJ(s[1681]);
initDRGOTH(s[1682]);
initFRDRG(s[1683]);
initNCRR1(s[1684]);
initNCRRM(s[1685]);
initNCRRY4(s[1686]);
initNCRR3(s[1687]);
initNCRR4(s[1688]);
initNCRR5(s[1689]);
initNCRR6(s[1690]);
initNCRR8(s[1691]);
initNCRR9(s[1692]);
initNCRR11(s[1693]);
initNCRR12(s[1694]);
initCASIEND(s[1695]);
initSCHOOLCNTRY1(s[1696]);
initSCHOOLCNTRY2(s[1697]);
initSCHOOLCNTRY3(s[1698]);
initSCHOOLCNTRY4(s[1699]);
initSCHOOLCNTRY5(s[1700]);
initEDLINK(s[1701]);
initEDLINKCONF(s[1702]);
initEDLINKCONFB(s[1703]);
initEDLINKKIDE(s[1704]);
initEDLINKKIDSWN(s[1705]);
initEDUCSN(s[1706]);
initEDUCLINKB1(s[1707]);
initEDUCLINKB2(s[1708]);
initEDUCLINKB3(s[1709]);
initSIGNEDUCKIDS1(s[1710]);
initSIGNEDUCKIDS2(s[1711]);
initBENLINK(s[1712]);
initHLTHLINK(s[1713]);
initHLTHKIDLINK(s[1714]);
initHEALTHSN(s[1715]);
initHLTHLINKB1(s[1716]);
initHLTHLINKB2(s[1717]);
initHLTHLINKB3(s[1718]);
initFLAGLINKB1(s[1719]);
initFLAGLINKB2(s[1720]);
initFLAGLINKB3(s[1721]);
initINTSIGNHEALTH(s[1722]);
initSIGNHEALTHKI1(s[1723]);
initSIGNHEALTHKI2(s[1724]);
initLENINDINTV(s[1725]);
initBRLOOP(s[1726]);
initEDUCRECD(s[1727]);
initEDUCRSGN(s[1728]);
initEDUCISGN(s[1729]);
initHLTHRECD(s[1730]);
initHLTHRSGN(s[1731]);
initHLTHISGN(s[1732]);
initHEDNTO_CODE(s[1733]);
initYAFUTA(s[1734]);
initYAFUTB(s[1735]);
initSCRX_CODE(s[1736]);
initSCUX_CODE(s[1737]);
initMARSTAT(s[1738]);
initLIVESP(s[1739]);
initLIVEWITH(s[1740]);
initEMPLOY(s[1741]);
initLINGUA(s[1742]);
initPS1(s[1743]);
initPS2(s[1744]);
initPS3(s[1745]);
initPS4(s[1746]);
initPS5(s[1747]);
initPS6(s[1748]);
initPS7(s[1749]);
initPS8(s[1750]);
initPS9(s[1751]);
initPS10(s[1752]);
initPS11(s[1753]);
initPS12(s[1754]);
initPS13(s[1755]);
initPS14(s[1756]);
initPS15(s[1757]);
initPS16(s[1758]);
initPS17(s[1759]);
initPS18(s[1760]);
initPS19(s[1761]);
initPS20(s[1762]);
initPS21(s[1763]);
initPS22(s[1764]);
initPS23(s[1765]);
initPS24(s[1766]);
initPS25(s[1767]);
initPS26(s[1768]);
initPS27(s[1769]);
initPS28(s[1770]);
initPS29(s[1771]);
initPS30(s[1772]);
initPS31(s[1773]);
initPS32(s[1774]);
initPSNUMCH(s[1775]);
initDONEPROXY(s[1776]);
initPREL(s[1777]);
initPREASON(s[1778]);
initPRIPN(s[1779]);
initPJULK4WK(s[1780]);
initPJBPTFT(s[1781]);
initPJSPTFT(s[1782]);
initPREARN(s[1783]);
initPREARNW(s[1784]);
initPREARNA(s[1785]);
initPBNFT1(s[1786]);
initPBNFT2(s[1787]);
initPBNFT13(s[1788]);
initPBNFT3(s[1789]);
initPBNFT4(s[1790]);
initPBNFT5(s[1791]);
initPBNFT6(s[1792]);
initPBNFT7(s[1793]);
initPBNFT8(s[1794]);
initPBNFT9(s[1795]);
initPBNFT10(s[1796]);
initPBNFT11(s[1797]);
initPBNFT12(s[1798]);
initPBNFT96(s[1799]);
initNETUSE(s[1800]);
initPRFITB(s[1801]);
initPRFITBW(s[1802]);
initPRFITBA(s[1803]);
initIVCOOP(s[1804]);
initSUSP(s[1805]);
initUNDQUS(s[1806]);
initIVPRSNT(s[1807]);
initIVINFNCE(s[1808]);
initIVAFFCT11(s[1809]);
initIVAFFCT12(s[1810]);
initIVAFFCT13(s[1811]);
initIVAFFCT14(s[1812]);
initIVAFFCT15(s[1813]);
initIVAFFCT17(s[1814]);
initIVAFFCT21(s[1815]);
initIVAFFCT22(s[1816]);
initIVAFFCT23(s[1817]);
initIVAFFCT27(s[1818]);
initIVAFFCT30(s[1819]);
initIVAFFCT97(s[1820]);
initIVLIENG(s[1821]);
initIVLITRANS(s[1822]);
initIVLIWHO(s[1823]);
initIVLIBAL(s[1824]);
initHGBIOM(s[1825]);
initHGBIOF(s[1826]);
initRESPM16(s[1827]);
initRESPF16(s[1828]);
initHGADOPTM(s[1829]);
initHGADOPTF(s[1830]);
initHGPART(s[1831]);
initINTCONTACT(s[1832]);
initDETINC1(s[1833]);
initDETINC2(s[1834]);
initDETINC3(s[1835]);
initDETINC4(s[1836]);
initDETINC5(s[1837]);
initDETINC6(s[1838]);
initHASEMAIL(s[1839]);
initSOCCONT(s[1840]);
initOTHCONT(s[1841]);
initREMAIL_CODE(s[1842]);
initRHLANCODE(s[1843]);
initRPHMOB_CODE(s[1844]);
initRPHWRK_CODE(s[1845]);
initRCOTHERCODE(s[1846]);
initCTCONS(s[1847]);
initCTCONSCONF1(s[1848]);
initCTCONSCONF2(s[1849]);
initCTCONSCONF3(s[1850]);
initCTCONSCONF4(s[1851]);
initCTCONSCONF5(s[1852]);
initCTCONSCONF6(s[1853]);
initCTCONSCONF7(s[1854]);
initCTCONSCONF8(s[1855]);
initCTCONSCONF94(s[1856]);
initCTREL(s[1857]);
initCTTEL1_CODE(s[1858]);
initCTTEL2_CODE(s[1859]);
initCTADD1_CODE(s[1860]);
initCTADD2_CODE(s[1861]);
initCTEMAIL_CODE(s[1862]);
initCTTOWN_CODE(s[1863]);
initCTCNTY_CODE(s[1864]);
initCTPCODE_CODE(s[1865]);
initORIGADD(s[1866]);
initINDMODE(s[1867]);
initPPSEX(s[1868]);
initFNPID(s[1869]);
initMNPID(s[1870]);
initPN1PID(s[1871]);
initPN1PNO(s[1872]);
initPN1SEX(s[1873]);
initPN2PID(s[1874]);
initPN2PNO(s[1875]);
initPN2SEX(s[1876]);
initPNS1PID(s[1877]);
initPNS1PNO(s[1878]);
initPNS1SEX(s[1879]);
initPNS2PID(s[1880]);
initPNS2PNO(s[1881]);
initPNS2SEX(s[1882]);
initGRFPID(s[1883]);
initGRMPID(s[1884]);
initISTRTDATHH(s[1885]);
initISTRTDATMM(s[1886]);
initISTRTDATSS(s[1887]);
initIENDDATHH(s[1888]);
initIENDDATMM(s[1889]);
initIENDDATSS(s[1890]);
initJ2PAY_IF(s[1891]);
initFIMNGRS_TC(s[1892]);
initFIMNGRS_DV(s[1893]);
initFIMNLABGRS_TC(s[1894]);
initFIMNLABGRS_DV(s[1895]);
initFIMNLABNET_TC(s[1896]);
initFIMNLABNET_DV(s[1897]);
initFIYRINVINC_TC(s[1898]);
initFIYRINVINC_DV(s[1899]);
initFIBENOTHR_TC(s[1900]);
initFIBENOTHR_DV(s[1901]);
initPAYGL(s[1902]);
initPAYNL(s[1903]);
initJSPRF(s[1904]);
initPAYGU_DV(s[1905]);
initPAYG_DV(s[1906]);
initPAYNU_DV(s[1907]);
initPAYN_DV(s[1908]);
initSEEARNGRS_DV(s[1909]);
initSEEARNNET_DV(s[1910]);
initJ2PAY_DV(s[1911]);
initJ2PAYNET_DV(s[1912]);
initFF_EVERINT(s[1913]);
initFF_JBSTAT(s[1914]);
initFF_EMPLW(s[1915]);
initFF_IVLOLW(s[1916]);
initFF_TEL(s[1917]);
initFF_JBSEMP(s[1918]);
initFF_JBMNGR(s[1919]);
initFF_JBSIZE(s[1920]);
initFF_OPRLG(s[1921]);
initFF_OPRLG0(s[1922]);
initFF_OPRLG0NI(s[1923]);
initFF_UKBORN(s[1924]);
initFF_YR2UK4(s[1925]);
initFF_BENTYPE01(s[1926]);
initFF_BENTYPE02(s[1927]);
initFF_BENTYPE03(s[1928]);
initFF_BENTYPE04(s[1929]);
initFF_BENTYPE05(s[1930]);
initFF_BENTYPE06(s[1931]);
initFF_BENTYPE07(s[1932]);
initFF_BENTYPE08(s[1933]);
initFF_BENTYPE09(s[1934]);
initFF_BENTYPE10(s[1935]);
initFF_BENTYPE11(s[1936]);
initFF_BENTYPE12(s[1937]);
initFF_BENTYPE13(s[1938]);
initFF_BENTYPE14(s[1939]);
initFF_BENTYPE15(s[1940]);
initFF_BENTYPE16(s[1941]);
initFF_BENTYPE17(s[1942]);
initFF_BENTYPE18(s[1943]);
initFF_BENTYPE19(s[1944]);
initFF_BENTYPE20(s[1945]);
initFF_BENTYPE21(s[1946]);
initFF_BENTYPE22(s[1947]);
initFF_BENTYPE23(s[1948]);
initFF_BENTYPE24(s[1949]);
initFF_BENTYPE25(s[1950]);
initFF_BENTYPE26(s[1951]);
initFF_BENTYPE27(s[1952]);
initFF_BENTYPE28(s[1953]);
initFF_BENTYPE29(s[1954]);
initFF_BENTYPE30(s[1955]);
initFF_BENTYPE31(s[1956]);
initFF_BENTYPE32(s[1957]);
initFF_BENTYPE33(s[1958]);
initFF_BENTYPE34(s[1959]);
initFF_BENTYPE35(s[1960]);
initFF_BENTYPE36(s[1961]);
initFF_BENTYPE37(s[1962]);
initFF_BENTYPE38(s[1963]);
initFF_BENTYPE39(s[1964]);
initFF_IVINTLANG(s[1965]);
initSEX_DV(s[1966]);
initAGE_DV(s[1967]);
initINTDATDV(s[1968]);
initINTDATM_DV(s[1969]);
initINTDATY_DV(s[1970]);
initDOBY_DV(s[1971]);
initPENSIONER_DV(s[1972]);
initNPN_DV(s[1973]);
initNPNS_DV(s[1974]);
initNGRP_DV(s[1975]);
initNNSIB_DV(s[1976]);
initNNSSIB_DV(s[1977]);
initNPENSIONER_DV(s[1978]);
initJBSOCGR_DV(s[1979]);
initETHN_DV(s[1980]);
initFIMNMISC_DV(s[1981]);
initFIMNPRBEN_DV(s[1982]);
initFIMNINVNET_DV(s[1983]);
initFIMNPEN_DV(s[1984]);
initFIMNSBEN_DV(s[1985]);
initFIMNNET_DV(s[1986]);
initCOUNTRY(s[1987]);
initGOR_DV(s[1988]);
initURBAN_DV(s[1989]);
initHHRESP_DV(s[1990]);
initXTRA5MIN_DV(s[1991]);
initXTRA5MINOSM_DV(s[1992]);
initAGEGR5_DV(s[1993]);
initAGEGR10_DV(s[1994]);
initAGEGR13_DV(s[1995]);
initLIVESP_DV(s[1996]);
initCOHAB_DV(s[1997]);
initSINGLE_DV(s[1998]);
initMASTAT_DV(s[1999]);
initHHTYPE_DV(s[2000]);
initBUNO_DV(s[2001]);
initDEPCHL_DV(s[2002]);
initNCHILDV(s[2003]);
initNDEPCHL_DV(s[2004]);
initRESPM16_DV(s[2005]);
initRESPF16_DV(s[2006]);
initRACH16_DV(s[2007]);
initHRPID(s[2008]);
initHRPNO(s[2009]);
initPPID(s[2010]);
initPPNO(s[2011]);
initSPPID(s[2012]);
initSPPNO(s[2013]);
initFNPNO(s[2014]);
initFNSPID(s[2015]);
initFNSPNO(s[2016]);
initMNPNO(s[2017]);
initMNSPID(s[2018]);
initMNSPNO(s[2019]);
initGRFPNO(s[2020]);
initGRMPNO(s[2021]);
initQFHIGH_DV(s[2022]);
initNQFHIGH_DV(s[2023]);
initQFHIGHFL_DV(s[2024]);
initHIQUAL_DV(s[2025]);
initNHIQUAL_DV(s[2026]);
initNNMPSP_DV(s[2027]);
initNMPSP_DV(s[2028]);
initNUNMPSP_DV(s[2029]);
initJBFT_DV(s[2030]);
initJBSOC00_CC(s[2031]);
initJBSOC10_CC(s[2032]);
initJBSIC07_CC(s[2033]);
initJBIINDB_DV(s[2034]);
initJBES2000(s[2035]);
initJBSEG_DV(s[2036]);
initJBRGSC_DV(s[2037]);
initJBNSSEC_DV(s[2038]);
initJBNSSEC8_DV(s[2039]);
initJBNSSEC5_DV(s[2040]);
initJBNSSEC3_DV(s[2041]);
initJBISCO88_CC(s[2042]);
initJLSOC00_CC(s[2043]);
initJLSOC10_CC(s[2044]);
initJLSIC07_CC(s[2045]);
initJLIINDB_DV(s[2046]);
initJLES2000(s[2047]);
initJLSEG_DV(s[2048]);
initJLRGSC_DV(s[2049]);
initJLNSSEC_DV(s[2050]);
initJLNSSEC8_DV(s[2051]);
initJLNSSEC5_DV(s[2052]);
initJLNSSEC3_DV(s[2053]);
initJLISCO88_CC(s[2054]);
initPASOC90_CC(s[2055]);
initPASOC00_CC(s[2056]);
initPASOC10_CC(s[2057]);
initPANSSEC5_DV(s[2058]);
initMASOC90_CC(s[2059]);
initMASOC00_CC(s[2060]);
initMASOC10_CC(s[2061]);
initMANSSEC5_DV(s[2062]);
initJ1SOC90_CC(s[2063]);
initJ1SOC00_CC(s[2064]);
initJ1SOC10_CC(s[2065]);
initJ1NSSEC5_DV(s[2066]);
initJ2SOC90_CC(s[2067]);
initJ2SOC00_CC(s[2068]);
initJ2SOC10_CC(s[2069]);
initJ2NSSEC5_DV(s[2070]);
initYASOC90_CC(s[2071]);
initYASOC00_CC(s[2072]);
initYASOC10_CC(s[2073]);
initYANSSEC5_DV(s[2074]);
initSCGHQ1_DV(s[2075]);
initSCGHQ2_DV(s[2076]);
initSF12PCS_DV(s[2077]);
initSF12MCS_DV(s[2078]);
initSWEMWBS_DV(s[2079]);
initJWBS1_DV(s[2080]);
initJWBS2_DV(s[2081]);
initPSDQA_DV(s[2082]);
initPSDQB_DV(s[2083]);
initPSDQC_DV(s[2084]);
initSCFLAG_DV(s[2085]);
initPAYU_DV(s[2086]);
initPAYGU_IF(s[2087]);
initPAYNU_IF(s[2088]);
initSEEARNGRS_IF(s[2089]);
initFIYRINVINC_IF(s[2090]);
initFIBENOTHR_IF(s[2091]);
initFIMNLABGRS_IF(s[2092]);
initFIMNGRS_IF(s[2093]);
initINDIN91_LW(s[2094]);
initINDIN01_LW(s[2095]);
initINDPXUS_LW(s[2096]);
initINDINUS_LW(s[2097]);
initINDSCUS_LW(s[2098]);
initIND5MUS_LW(s[2099]);
initINDPXUB_LW(s[2100]);
initINDINUB_LW(s[2101]);
initINDSCUB_LW(s[2102]);
initINDNS91_LW(s[2103]);
initINDBD91_LW(s[2104]);
initINDNSUB_LW(s[2105]);
initINDBDUB_LW(s[2106]);
initINDPXUB_XW(s[2107]);
initINDINUB_XW(s[2108]);
initINDSCUB_XW(s[2109]);
initIND5MUS_XW(s[2110]);
initRACEL_DV(s[2111]);
}
}
