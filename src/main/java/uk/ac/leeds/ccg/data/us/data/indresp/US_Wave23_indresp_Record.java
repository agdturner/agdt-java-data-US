/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.data.us.data.indresp;
public class US_Wave23_indresp_Record extends US_indresp_Record {
protected byte ADCTS;
protected byte ADOPTCH01;
protected byte ADOPTCH02;
protected byte ADOPTCH03;
protected byte ADOPTCH04;
protected byte ADOPTCH05;
protected byte ADOPTCH06;
protected boolean ADOPTCH07;
protected boolean ADOPTCH08;
protected boolean ADOPTCH09;
protected boolean ADOPTCH10;
protected boolean ADOPTCH11;
protected boolean ADOPTCH12;
protected boolean ADOPTCH13;
protected boolean ADOPTCH14;
protected boolean ADOPTCH15;
protected boolean ADOPTCH16;
protected byte ADSTATUS;
protected byte ADVVOUCHER;
protected byte AEDROF1;
protected byte AEDROF2;
protected byte AEDROF3;
protected double AEPUDA1;
protected byte AEPUDA2;
protected byte AEPUDA3;
protected byte AEPUWK1;
protected byte AEPUWK2;
protected byte AEPUWK3;
protected byte AGDV;
protected byte AGEGR10_DV;
protected byte AGEGR13_DV;
protected byte AGEGR5_DV;
protected byte AGERET;
protected byte AGLQUIT;
protected byte AHVWELL;
protected byte AIDEFT;
protected short AIDHU1;
protected short AIDHU2;
protected byte AIDHUA1;
protected byte AIDHUA10;
protected byte AIDHUA11;
protected byte AIDHUA12;
protected byte AIDHUA13;
protected byte AIDHUA14;
protected byte AIDHUA15;
protected byte AIDHUA16;
protected byte AIDHUA2;
protected byte AIDHUA3;
protected byte AIDHUA4;
protected byte AIDHUA5;
protected byte AIDHUA6;
protected byte AIDHUA7;
protected byte AIDHUA8;
protected byte AIDHUA9;
protected byte ALLCH01;
protected byte ALLCH02;
protected byte ALLCH03;
protected byte ALLCH04;
protected byte ALLCH05;
protected byte ALLCH06;
protected byte ALLCH07;
protected byte ALLCH08;
protected byte ALLCH09;
protected byte ALLCH10;
protected boolean ALLCH11;
protected boolean ALLCH12;
protected boolean ALLCH13;
protected boolean ALLCH14;
protected boolean ALLCH15;
protected boolean ALLCH16;
protected byte ANYMORE;
protected byte ANYMORE2;
protected byte ANYMORE3;
protected byte ANYMORE4;
protected byte APVOCIMP;
protected byte ARCFREQ;
protected byte AREA;
protected byte ARGF;
protected byte ARGM;
protected byte ARTS1A1;
protected byte ARTS1A2;
protected byte ARTS1A3;
protected byte ARTS1A4;
protected byte ARTS1A5;
protected byte ARTS1A6;
protected byte ARTS1A7;
protected byte ARTS1A96;
protected byte ARTS1B10;
protected byte ARTS1B11;
protected byte ARTS1B12;
protected byte ARTS1B13;
protected byte ARTS1B14;
protected byte ARTS1B15;
protected byte ARTS1B9;
protected byte ARTS1B96;
protected byte ARTS1FREQ;
protected byte ARTS2A1;
protected byte ARTS2A2;
protected byte ARTS2A3;
protected byte ARTS2A4;
protected byte ARTS2A5;
protected byte ARTS2A6;
protected byte ARTS2A7;
protected byte ARTS2A96;
protected byte ARTS2B10;
protected byte ARTS2B11;
protected byte ARTS2B12;
protected byte ARTS2B13;
protected byte ARTS2B14;
protected byte ARTS2B15;
protected byte ARTS2B9;
protected byte ARTS2B96;
protected byte ARTS2FREQ;
protected byte ATTACKED1;
protected byte ATTACKED10;
protected byte ATTACKED11;
protected byte ATTACKED2;
protected byte ATTACKED3;
protected byte ATTACKED4;
protected byte ATTACKED5;
protected byte ATTACKED6;
protected byte ATTACKED7;
protected byte ATTACKED8;
protected byte ATTACKED9;
protected byte ATTACKED96;
protected byte ATTACKED97;
protected byte ATTACKEDO_CODE;
protected byte ATTACKED_DV;
protected byte AVOIDANCE1;
protected byte AVOIDANCE10;
protected byte AVOIDANCE11;
protected byte AVOIDANCE2;
protected byte AVOIDANCE3;
protected byte AVOIDANCE4;
protected byte AVOIDANCE5;
protected byte AVOIDANCE6;
protected byte AVOIDANCE7;
protected byte AVOIDANCE8;
protected byte AVOIDANCE9;
protected byte AVOIDANCE96;
protected byte AVOIDANCE97;
protected byte AVOIDANCEO_CODE;
protected byte AVOIDED_DV;
protected double BASNSA;
protected double BASRATE;
protected byte BASREST;
protected byte BENCB;
protected byte BENCTC;
protected byte BENDIS1;
protected byte BENDIS10;
protected byte BENDIS11;
protected byte BENDIS12;
protected byte BENDIS2;
protected byte BENDIS3;
protected byte BENDIS4;
protected byte BENDIS5;
protected byte BENDIS6;
protected byte BENDIS7;
protected byte BENDIS8;
protected byte BENDIS9;
protected byte BENDIS96;
protected byte BENDIS97;
protected byte BENESA;
protected byte BENFAM1;
protected byte BENFAM10;
protected byte BENFAM2;
protected byte BENFAM3;
protected byte BENFAM4;
protected byte BENFAM5;
protected byte BENFAM6;
protected byte BENFAM7;
protected byte BENFAM8;
protected byte BENFAM9;
protected byte BENFAM96;
protected byte BENHOU1;
protected byte BENHOU2;
protected byte BENHOU3;
protected byte BENHOU4;
protected byte BENHOU5;
protected byte BENHOU6;
protected byte BENHOU7;
protected byte BENHOU8;
protected byte BENHOU9;
protected byte BENHOU96;
protected byte BENPEN1;
protected byte BENPEN10;
protected byte BENPEN11;
protected byte BENPEN12;
protected byte BENPEN13;
protected byte BENPEN2;
protected byte BENPEN3;
protected byte BENPEN4;
protected byte BENPEN5;
protected byte BENPEN6;
protected byte BENPEN7;
protected byte BENPEN8;
protected byte BENPEN96;
protected byte BENSTA1;
protected byte BENSTA10;
protected byte BENSTA11;
protected byte BENSTA12;
protected byte BENSTA13;
protected byte BENSTA2;
protected byte BENSTA3;
protected byte BENSTA4;
protected byte BENSTA5;
protected byte BENSTA6;
protected byte BENSTA7;
protected byte BENSTA9;
protected byte BENSTA96;
protected byte BENSTA97;
protected byte BENTAX1;
protected byte BENTAX10;
protected byte BENTAX2;
protected byte BENTAX3;
protected byte BENTAX4;
protected byte BENTAX5;
protected byte BENTAX7;
protected byte BENTAX8;
protected byte BENTAX9;
protected byte BENTAX96;
protected byte BENUNEMP1;
protected byte BENUNEMP2;
protected byte BENUNEMP3;
protected byte BENUNEMP4;
protected byte BENUNEMP5;
protected byte BENUNEMP6;
protected byte BENUNEMP7;
protected byte BENUNEMP96;
protected short BIRTHY;
protected byte BOSSETHN;
protected byte BOSSSEX;
protected byte BTYPE1;
protected byte BTYPE10;
protected byte BTYPE2;
protected byte BTYPE3;
protected byte BTYPE4;
protected byte BTYPE5;
protected byte BTYPE6;
protected byte BTYPE7;
protected byte BTYPE8;
protected byte BTYPE9;
protected byte BTYPE96;
protected byte BUNO_DV;
protected byte CAIDU1;
protected byte CAIDU2;
protected byte CAIDU3;
protected byte CAIDU4;
protected byte CAIDU5;
protected byte CAIDU6;
protected byte CAIDU7;
protected byte CAIDU8;
protected byte CAIDU96;
protected byte CAIDU97;
protected byte CAPGIFTV;
protected byte CASIEND;
protected byte CATGIFTV;
protected byte CATVOUCHER;
protected byte CCARE;
protected byte CCWORK;
protected byte CDPREAMBLE;
protected short CH1BY4;
protected byte CHAID1;
protected byte CHAID2;
protected byte CHAID3;
protected byte CHAID4;
protected byte CHAID5;
protected byte CHAID6;
protected byte CHAID7;
protected byte CHAID8;
protected byte CHAID96;
protected byte CHAID97;
protected byte CHCON;
protected byte CHFAR;
protected byte CHILDPNO;
protected byte CHKCOA;
protected byte CHKRESP;
protected byte CHSEE;
protected int CINDTIME;
protected byte CITZN1;
protected byte CITZN2;
protected byte CITZN3;
protected byte CJBATT;
protected byte CJOB;
protected byte CLUB;
protected byte CMCOKIDNO1;
protected byte CMCOKIDNO2;
protected byte CMCOKIDNO3;
protected byte CMCOKIDNO4;
protected byte CMCOKIDNO5;
protected byte CMCORD;
protected byte CMCORDALL;
protected double CMCORDAM;
protected byte CMCORDPER;
protected short CMCORDRCAM;
protected byte CMCORDRCPR;
protected byte CMCORDREC;
protected byte CMCORDTM;
protected byte CMCSAACT;
protected byte CMCSAALL;
protected short CMCSAAM;
protected byte CMCSANIL1;
protected byte CMCSANIL2;
protected byte CMCSANIL3;
protected byte CMCSANIL4;
protected byte CMCSANIL5;
protected byte CMCSANIL6;
protected byte CMCSANIL7;
protected byte CMCSANIL8;
protected byte CMCSANIL9;
protected byte CMCSANIL97;
protected byte CMCSAPER;
protected byte CMCSAPR;
protected byte CMFLAG;
protected byte CMKNDEVR1;
protected byte CMKNDEVR2;
protected byte CMKNDEVR3;
protected byte CMKNDEVR4;
protected byte CMKNDEVR96;
protected byte CMKNDEVR97;
protected byte CMLSTAT1;
protected byte CMLSTAT2;
protected byte CMNIL1;
protected byte CMNIL10;
protected byte CMNIL2;
protected byte CMNIL3;
protected byte CMNIL4;
protected byte CMNIL5;
protected byte CMNIL6;
protected byte CMNIL7;
protected byte CMNIL8;
protected byte CMNIL9;
protected byte CMNIL97;
protected byte CMNKY1;
protected byte CMNKY2;
protected byte CMNKY3;
protected byte CMOTHPAY1;
protected byte CMOTHPAY10;
protected byte CMOTHPAY11;
protected byte CMOTHPAY2;
protected byte CMOTHPAY3;
protected byte CMOTHPAY4;
protected byte CMOTHPAY5;
protected byte CMOTHPAY6;
protected byte CMOTHPAY7;
protected byte CMOTHPAY8;
protected byte CMOTHPAY9;
protected byte CMOTHPAY96;
protected byte CMOTHPAY97;
protected byte CMROUTE;
protected byte CMSAMEA;
protected byte CMSAMEB;
protected byte CMSAMEC;
protected byte CMVOL;
protected byte CMVOLALL;
protected double CMVOLAM;
protected byte CMVOLKIDNO1;
protected byte CMVOLKIDNO2;
protected byte CMVOLKIDNO3;
protected byte CMVOLKIDNO4;
protected byte CMVOLKIDNO5;
protected byte CMVOLPER;
protected short CMVOLRCAM;
protected byte CMVOLRCPR;
protected byte CMVOLREC;
protected byte CMVOLTM;
protected byte COH1BM;
protected short COH1BY;
protected byte COH1EM;
protected short COH1EY;
protected byte COH1MR;
protected byte COHAB;
protected byte COHABN;
protected boolean COHAB_DV;
protected byte CONSINTRO;
protected byte CONTFT;
protected byte CORDRECPER;
protected byte COUNTRY;
protected byte COWOSEXN;
protected byte COWOSEXP;
protected byte CSACALC;
protected double CSACALCAM;
protected byte CSAKIDNO1;
protected byte CSAKIDNO2;
protected byte CSAKIDNO3;
protected byte CSAKIDNO4;
protected byte CSAKIDNO5;
protected byte CSAPAYTO;
protected byte CSARECPER;
protected byte CSTAT;
protected byte CTADD1_CODE;
protected byte CTADD2_CODE;
protected byte CTCNTY_CODE;
protected byte CTCONS;
protected byte CTCONSCONF1;
protected byte CTCONSCONF2;
protected byte CTCONSCONF3;
protected byte CTCONSCONF4;
protected byte CTCONSCONF5;
protected byte CTCONSCONF6;
protected byte CTCONSCONF7;
protected byte CTCONSCONF8;
protected byte CTCONSCONF94;
protected byte CTEMAIL_CODE;
protected byte CTPCODCODE;
protected byte CTREL;
protected byte CTTEL1_CODE;
protected byte CTTEL2_CODE;
protected byte CTTOWN_CODE;
protected byte CUDDLEKID;
protected byte CULTUREA;
protected byte CULTUREB;
protected byte CULTUREC;
protected byte CULTURED;
protected byte CULTUREE;
protected byte CULTUREF;
protected byte CULTUREG;
protected byte CURRJOB1;
protected byte CURRJOB2;
protected byte CURRJOB3;
protected byte CURRJOB4;
protected byte CURRJOB5;
protected byte CURRJOB6;
protected byte CURRPART1;
protected byte CURRPART2;
protected byte CURRPART3;
protected byte CURRPART4;
protected byte CURRSTAT1;
protected byte CURRSTAT2;
protected byte CURRSTAT3;
protected byte CURRSTAT4;
protected byte CURRSTAT5;
protected byte CURRSTAT6;
protected byte DAYWLK;
protected byte DCSATM;
protected byte DELAY1;
protected byte DELAY10;
protected byte DELAY2;
protected byte DELAY3;
protected byte DELAY4;
protected byte DELAY5;
protected byte DELAY6;
protected byte DELAY7;
protected byte DELAY8;
protected byte DELAY9;
protected boolean DEPCHL_DV;
protected byte DETINC1;
protected byte DETINC2;
protected byte DETINC3;
protected byte DETINC4;
protected byte DETINC5;
protected byte DETINC6;
protected byte DINNER;
protected byte DISDIF1;
protected byte DISDIF10;
protected byte DISDIF11;
protected byte DISDIF12;
protected byte DISDIF2;
protected byte DISDIF3;
protected byte DISDIF4;
protected byte DISDIF5;
protected byte DISDIF6;
protected byte DISDIF7;
protected byte DISDIF8;
protected byte DISDIF9;
protected byte DISDIF96;
protected byte DISEFFECTS1;
protected byte DISEFFECTS2;
protected byte DISEFFECTS3;
protected byte DISEFFECTS4;
protected byte DISEFFECTS5;
protected byte DIVCHK1;
protected byte DIVCHK2;
protected byte DIVFIN1;
protected byte DIVFIN2;
protected short DOBY_DV;
protected byte DONEPROXY;
protected byte DRGMJ;
protected byte DRGOTH;
protected byte DRGSOL;
protected byte DRIVE;
protected byte DVAGE;
protected byte DVM1;
protected byte DVM2;
protected short DVY41;
protected short DVY42;
protected byte EATLIVU;
protected byte EDASP;
protected byte EDLINK;
protected byte EDLINKCONF;
protected byte EDLINKCONFB;
protected boolean EDLINKKIDCONFSW;
protected byte EDLINKKIDE;
protected byte EDLINKKIDSWN;
protected boolean EDLKKIDCONFE;
protected short EDTYPE;
protected byte EDUCATION;
protected byte EDUCISGN;
protected boolean EDUCKIDSN;
protected byte EDUCLINKB1;
protected byte EDUCLINKB2;
protected byte EDUCLINKB3;
protected byte EDUCRECD;
protected byte EDUCRSGN;
protected byte EDUCSN;
protected byte EMAILENT;
protected byte EMPCHK;
protected byte EMPINTRO;
protected byte EMPLOY;
protected byte EMPSTENDD;
protected byte EMPSTENDM;
protected short EMPSTENDY4;
protected byte ENDMNTH1;
protected byte ENDMNTH2;
protected byte ENDMNTH3;
protected byte ENGFORM;
protected byte ENGLANG;
protected byte ENGREAD;
protected byte ENGSPK;
protected byte ENGTEL;
protected short EPROSH;
protected byte ETCOOTN;
protected byte ETCOOTP;
protected byte ETCOSAMN;
protected byte ETCOSAMP;
protected byte ETCOWHN;
protected byte ETCOWHP;
protected byte ETHCLOSE1;
protected byte ETHCLOSE10;
protected byte ETHCLOSE11;
protected byte ETHCLOSE2A;
protected byte ETHCLOSE2B;
protected byte ETHCLOSE3;
protected byte ETHCLOSE4A;
protected byte ETHCLOSE4B;
protected byte ETHCLOSE5;
protected byte ETHCLOSE6;
protected byte ETHCLOSE7;
protected byte ETHCLOSE8;
protected byte ETHCLOSE9;
protected byte ETHID10;
protected byte ETHID11;
protected byte ETHID12;
protected byte ETHID13;
protected byte ETHID14;
protected byte ETHID2;
protected byte ETHID3;
protected byte ETHID4A;
protected byte ETHID4B;
protected byte ETHID5;
protected byte ETHID6;
protected byte ETHID7;
protected byte ETHID8;
protected byte ETHID9;
protected byte ETHN_DV;
protected byte EVENT1;
protected byte EVENT1S;
protected byte EVENT2;
protected byte EVENT2S;
protected byte EVENT3;
protected byte EVENT3S;
protected byte EVENT4;
protected byte EVENT4S;
protected byte EXPREAM;
protected byte EXSAME;
protected byte EXTNSA;
protected double EXTRATE;
protected byte EXTREST;
protected byte FAMILY;
protected byte FAMSUP;
protected byte FARKID;
protected byte FATHER;
protected byte FENOW;
protected byte FF_BENTYPE01;
protected byte FF_BENTYPE02;
protected byte FF_BENTYPE03;
protected byte FF_BENTYPE04;
protected byte FF_BENTYPE05;
protected byte FF_BENTYPE06;
protected byte FF_BENTYPE07;
protected byte FF_BENTYPE08;
protected byte FF_BENTYPE09;
protected byte FF_BENTYPE10;
protected byte FF_BENTYPE11;
protected byte FF_BENTYPE12;
protected byte FF_BENTYPE13;
protected byte FF_BENTYPE14;
protected byte FF_BENTYPE15;
protected byte FF_BENTYPE16;
protected byte FF_BENTYPE17;
protected byte FF_BENTYPE18;
protected byte FF_BENTYPE19;
protected byte FF_BENTYPE20;
protected byte FF_BENTYPE21;
protected byte FF_BENTYPE22;
protected byte FF_BENTYPE23;
protected byte FF_BENTYPE24;
protected byte FF_BENTYPE25;
protected byte FF_BENTYPE26;
protected byte FF_BENTYPE27;
protected byte FF_BENTYPE28;
protected byte FF_BENTYPE29;
protected byte FF_BENTYPE30;
protected byte FF_BENTYPE31;
protected byte FF_BENTYPE32;
protected byte FF_BENTYPE33;
protected byte FF_BENTYPE34;
protected byte FF_BENTYPE35;
protected byte FF_BENTYPE36;
protected byte FF_BENTYPE37;
protected byte FF_BENTYPE38;
protected byte FF_BENTYPE39;
protected byte FF_BENTYPE40;
protected byte FF_BENTYPE41;
protected byte FF_EMPLW;
protected byte FF_EVERINT;
protected byte FF_IVINTLANG;
protected byte FF_IVLOLW;
protected byte FF_JBMNGR;
protected byte FF_JBSEMP;
protected byte FF_JBSIZE;
protected byte FF_JBSTAT;
protected byte FF_OPRLG;
protected byte FF_OPRLG0;
protected byte FF_OPRLG0NI;
protected byte FF_TEL;
protected byte FF_UKBORN;
protected short FF_YR2UK4;
protected double FIBENOTHR_DV;
protected double FIBENOTHR_IF;
protected byte FIBENOTHR_TC;
protected double FIMNGRS_IF;
protected byte FIMNGRS_TC;
protected double FIMNINVNET_DV;
protected double FIMNLABGRS_IF;
protected byte FIMNLABGRS_TC;
protected double FIMNLABNET_DV;
protected byte FIMNLABNET_TC;
protected double FIMNMISC_DV;
protected double FIMNNET_DV;
protected double FIMNPEN_DV;
protected double FIMNPRBEN_DV;
protected double FIMNSBEN_DV;
protected byte FINFUT;
protected byte FIYRDB1;
protected byte FIYRDB2;
protected byte FIYRDB3;
protected byte FIYRDB4;
protected byte FIYRDB5;
protected byte FIYRDB6;
protected int FIYRDIA;
protected double FIYRINVINC_DV;
protected byte FIYRINVINC_IF;
protected byte FIYRINVINC_TC;
protected byte FLAGLINKB1;
protected byte FLAGLINKB2;
protected byte FLAGLINKB3;
protected int FNPID;
protected byte FNPNO;
protected int FNSPID;
protected byte FNSPNO;
protected byte FOOD1;
protected byte FOOD2;
protected byte FOOD3;
protected byte FOOD4;
protected byte FOOD5;
protected byte FOOD6;
protected byte FOOD7;
protected byte FORMDIF;
protected byte FRDRG;
protected byte FROBULLI;
protected byte FROBULLY;
protected byte FRPBULLI;
protected byte FRPBULLY;
protected byte FRUVEGE;
protected byte FT2ENDM1;
protected byte FT2ENDM2;
protected short FT2ENDY41;
protected short FT2ENDY42;
protected byte FTEDANY;
protected byte FTEDEND1;
protected byte FTEDEND2;
protected byte FTEDMOR1;
protected byte FTEDMOR2;
protected byte FTEDSTARTM1;
protected byte FTEDSTARTM2;
protected short FTEDSTARTY41;
protected short FTEDSTARTY42;
protected byte FTENDM;
protected short FTENDY4;
protected int FTEXV;
protected byte FTEXW;
protected byte FTQUALS;
protected short FUTRA;
protected short FUTRB;
protected short FUTRC;
protected short FUTRD;
protected short FUTRE;
protected short FUTRF;
protected short FUTRG;
protected short FUTRH;
protected short FUTRI;
protected short FUTRJ;
protected short FUTRK;
protected short FUTRL;
protected byte GIVECOA;
protected int GRFPID;
protected byte GRFPNO;
protected int GRMPID;
protected byte GRMPNO;
protected byte HASEMAIL;
protected byte HASSTEP;
protected byte HCOND1;
protected byte HCOND10;
protected byte HCOND11;
protected byte HCOND12;
protected byte HCOND13;
protected byte HCOND14;
protected byte HCOND15;
protected byte HCOND16;
protected byte HCOND17;
protected byte HCOND2;
protected byte HCOND3;
protected byte HCOND4;
protected byte HCOND5;
protected byte HCOND6;
protected byte HCOND7;
protected byte HCOND8;
protected byte HCOND9;
protected byte HCOND96;
protected byte HCONDA01;
protected byte HCONDA02;
protected byte HCONDA03;
protected byte HCONDA04;
protected byte HCONDA05;
protected byte HCONDA06;
protected byte HCONDA07;
protected byte HCONDA08;
protected byte HCONDA09;
protected byte HCONDA10;
protected byte HCONDA11;
protected byte HCONDA12;
protected byte HCONDA13;
protected byte HCONDA14;
protected byte HCONDA15;
protected byte HCONDA16;
protected byte HCONDA17;
protected byte HCONDN1;
protected byte HCONDN10;
protected byte HCONDN11;
protected byte HCONDN12;
protected byte HCONDN13;
protected byte HCONDN14;
protected byte HCONDN15;
protected byte HCONDN16;
protected byte HCONDN17;
protected byte HCONDN2;
protected byte HCONDN3;
protected byte HCONDN4;
protected byte HCONDN5;
protected byte HCONDN6;
protected byte HCONDN7;
protected byte HCONDN8;
protected byte HCONDN9;
protected byte HCONDN96;
protected byte HCONDNO1;
protected byte HCONDNO2;
protected byte HCONDNO3;
protected byte HCONDNO4;
protected byte HCONDNO5;
protected byte HCONDNO6;
protected byte HCONDNO7;
protected byte HCONDNS1;
protected byte HCONDNS2;
protected byte HCONDNS3;
protected byte HCONDNS4;
protected byte HCONDNS5;
protected byte HCONDNS6;
protected byte HCONDNS7;
protected byte HCONDS01;
protected byte HCONDS02;
protected byte HCONDS03;
protected byte HCONDS04;
protected byte HCONDS05;
protected byte HCONDS08;
protected byte HCONDS09;
protected byte HCONDS10;
protected byte HCONDS11;
protected byte HCONDS12;
protected byte HCONDS13;
protected byte HCONDS14;
protected byte HCONDS15;
protected byte HCONDS16;
protected byte HCONDS17;
protected byte HEALTH;
protected boolean HEALTHKIDSN;
protected byte HEALTHSN;
protected byte HEDLIK;
protected byte HEDNT;
protected byte HEDNTO_CODE;
protected byte HERFREQ;
protected byte HERITAGE1;
protected byte HERITAGE2;
protected byte HERITAGE3;
protected byte HERITAGE4;
protected byte HERITAGE5;
protected byte HERITAGE6;
protected byte HERITAGE7;
protected byte HERITAGE8;
protected byte HERITAGE96;
protected byte HESACONS;
protected byte HGADOPTF;
protected byte HGADOPTM;
protected byte HGPART;
protected byte HHRESP_DV;
protected byte HHTYPDV;
protected byte HITSIB;
protected byte HLPHMWK;
protected byte HLTHISGN;
protected byte HLTHKIDLINK;
protected byte HLTHLINK;
protected byte HLTHLINKB1;
protected byte HLTHLINKB2;
protected byte HLTHLINKB3;
protected byte HLTHRECD;
protected byte HLTHRSGN;
protected byte HMRCLINK;
protected byte HOSPC1;
protected byte HOSPC2;
protected byte HOSPC3;
protected byte HOSPC4;
protected byte HOSPC5;
protected byte HOSPC6;
protected byte HOSPC7;
protected short HOSPDC1;
protected short HOSPDC2;
protected short HOSPDC3;
protected byte HOSPDC4;
protected byte HOSPDC5;
protected byte HOSPDC6;
protected byte HOSPDC7;
protected byte HOUSING;
protected int HRPID;
protected byte HRPNO;
protected byte IENDDATD;
protected byte IENDDATM;
protected byte IENDDATMM;
protected byte IENDDATSS;
protected short IENDDATY;
protected double IND5MUS_LW;
protected double IND5MUS_XW;
protected double INDBD91_LW;
protected double INDBDUB_LW;
protected double INDIN01_LW;
protected double INDIN91_LW;
protected double INDINUB_LW;
protected double INDINUB_XW;
protected double INDINUS_LW;
protected byte INDMODE;
protected double INDNS91_LW;
protected double INDNSUB_LW;
protected double INDPXUB_LW;
protected double INDPXUB_XW;
protected double INDPXUS_LW;
protected double INDSCUB_LW;
protected double INDSCUB_XW;
protected double INDSCUS_LW;
protected byte INSTOK;
protected byte INSTOK2;
protected byte INSTOK3;
protected byte INSTOK4;
protected byte INSULTED1;
protected byte INSULTED10;
protected byte INSULTED11;
protected byte INSULTED2;
protected byte INSULTED3;
protected byte INSULTED4;
protected byte INSULTED5;
protected byte INSULTED6;
protected byte INSULTED7;
protected byte INSULTED8;
protected byte INSULTED9;
protected byte INSULTED96;
protected byte INSULTED97;
protected byte INSULTEDO_CODE;
protected byte INSULTED_DV;
protected byte INTCONTACT;
protected byte INTDATD_DV;
protected byte INTDATM_DV;
protected short INTDATY_DV;
protected byte INTSIGNHEALTH;
protected byte INVITRO1;
protected byte INVITRO2;
protected byte INVITRO3;
protected byte IOUTCOME;
protected byte ISTRTDATMM;
protected byte ISTRTDATSS;
protected short ISTRTDATY;
protected short ISYEAR;
protected byte IVAFFCT11;
protected byte IVAFFCT12;
protected byte IVAFFCT13;
protected byte IVAFFCT14;
protected byte IVAFFCT15;
protected byte IVAFFCT17;
protected byte IVAFFCT21;
protected byte IVAFFCT22;
protected byte IVAFFCT23;
protected byte IVAFFCT27;
protected byte IVAFFCT30;
protected byte IVAFFCT97;
protected byte IVCOOP;
protected byte IVINFNCE;
protected byte IVLIBAL;
protected byte IVLIENG;
protected byte IVLITRANS;
protected byte IVLIWHO;
protected byte J1BOSS;
protected byte J1MNGR;
protected byte J1NONE;
protected byte J1NSSEC5_DV;
protected byte J1SEMP;
protected short J1SOC00_CC;
protected short J1SOC10_CC;
protected byte J1SOC90_CC;
protected byte J2NSSEC5_DV;
protected int J2PAY;
protected double J2PAYNET_DV;
protected short J2SOC00_CC;
protected short J2SOC10_CC;
protected short J2SOC90_CC;
protected byte JBATT1;
protected byte JBATT2;
protected byte JBATT3;
protected byte JBATT4;
protected byte JBATT5;
protected byte JBATT6;
protected byte JBBGDATD;
protected byte JBBGDATM;
protected short JBBGDATY;
protected byte JBENDD;
protected byte JBENDM;
protected byte JBENDREAS;
protected short JBENDY4;
protected byte JBES2000;
protected byte JBIINDB_DV;
protected byte JBMNGRCHK;
protected byte JBNSSEC3_DV;
protected byte JBNSSEC5_DV;
protected short JBNSSEC_DV;
protected byte JBOFFY;
protected short JBRGSC_DV;
protected byte JBSAMR;
protected byte JBSAT;
protected byte JBSECTPUB;
protected short JBSEG_DV;
protected byte JBSEMPCHK;
protected byte JBSIC07CHK;
protected byte JBSIC07_CC;
protected byte JBSIZECHK;
protected byte JBSOC00CHK;
protected short JBSOC00_CC;
protected short JBSOC10_CC;
protected byte JBSOCGR_DV;
protected byte JBTERM1;
protected byte JBTERM2;
protected byte JLENDM;
protected byte JLES2000;
protected byte JLIINDB_DV;
protected byte JLNSSEC3_DV;
protected byte JLNSSEC5_DV;
protected short JLNSSEC_DV;
protected short JLRGSC_DV;
protected short JLSEG_DV;
protected byte JLSIC07_CC;
protected short JLSOC00_CC;
protected short JLSOC10_CC;
protected byte JOBDENY;
protected byte JOBHOURS1;
protected byte JOBHOURS2;
protected byte JOBHOURS3;
protected byte JOBHOURS4;
protected byte JOBHOURS5;
protected byte JOBHOURS6;
protected byte JOBLOOK;
protected byte JSPART;
protected int JSPAYU;
protected byte JSPAYW;
protected byte JSPRLS;
protected byte JSPRNI;
protected byte JSPRTX;
protected byte JSPYNI;
protected byte JSPYTX;
protected byte JSTYPEB;
protected byte JSWORKTRAV;
protected short JUBGN;
protected short JULK4X1;
protected short JULK4X2;
protected byte JULK4X3;
protected short JULK4X4;
protected short JULK4X5;
protected short JULK4X6;
protected byte JULK4X96;
protected byte KID2UNI01;
protected byte KID2UNI02;
protected byte KID2UNI03;
protected byte KID2UNI04;
protected byte KID2UNI05;
protected byte KID2UNI06;
protected byte KID2UNI07;
protected byte KID2UNI08;
protected byte KID2UNI09;
protected byte KID2UNI10;
protected byte KID2UNI11;
protected byte KID2UNI12;
protected byte KID2UNI13;
protected byte KID2UNI14;
protected byte KID2UNI15;
protected byte KID2UNI16;
protected byte KIDSPT;
protected byte LADOPT;
protected byte LATE;
protected byte LCHMOR;
protected byte LCHMORN;
protected byte LCHMULTI1;
protected byte LCHMULTI2;
protected byte LCHMULTI3;
protected byte LCOHNPI;
protected double LENINDINTV;
protected byte LEVELIMP;
protected byte LGAPED;
protected byte LIBFREQ;
protected byte LIENG;
protected byte LIHOW;
protected byte LINGUA;
protected byte LITRANS;
protected byte LIVESP;
protected boolean LIVESP_DV;
protected byte LIVEWITH;
protected byte LIWHO;
protected byte LMAR1M;
protected short LMAR1Y;
protected byte LMCBM1;
protected byte LMCBM2;
protected byte LMCBM3;
protected byte LMCBM4;
protected short LMCBY41;
protected short LMCBY42;
protected short LMCBY43;
protected short LMCBY44;
protected byte LMSPM1;
protected byte LMSPM2;
protected byte LMSPM3;
protected byte LMSPM4;
protected short LMSPY41;
protected short LMSPY42;
protected short LMSPY43;
protected short LMSPY44;
protected byte LNADOPT;
protected byte LNPRNT;
protected byte LPRNT;
protected byte LVHM;
protected byte LVREL1;
protected byte LVREL10;
protected byte LVREL2;
protected byte LVREL3;
protected byte LVREL4;
protected byte LVREL5;
protected byte LVREL6;
protected byte LVREL7;
protected byte LVREL8;
protected byte LVREL9;
protected byte LVREL96;
protected byte LVSCHDO;
protected byte LWWRONG;
protected byte MAAGE;
protected byte MACOB;
protected byte MACON;
protected byte MAFAR;
protected byte MAJU;
protected byte MALONE;
protected byte MAMOSTCON;
protected byte MANSSEC5_DV;
protected byte MARSTAT;
protected byte MASEE;
protected short MASOC00_CC;
protected short MASOC10_CC;
protected byte MASOC90_CC;
protected byte MASTAT_DV;
protected byte MATLEAVE;
protected byte MATLV;
protected byte MATLVENDD;
protected byte MATLVENDM;
protected short MATLVENDY4;
protected byte MATLVSTD;
protected byte MATLVSTM;
protected short MATLVSTY4;
protected byte MAYRUK;
protected byte MEMPLOY;
protected byte MLA1;
protected byte MLA2;
protected byte MLA3;
protected byte MLA96;
protected byte MLAGST;
protected byte MLAGSTU;
protected byte MLFUTR;
protected byte MLRNOT1;
protected byte MLRNOT10;
protected byte MLRNOT11;
protected byte MLRNOT12;
protected byte MLRNOT13;
protected byte MLRNOT2;
protected byte MLRNOT3;
protected byte MLRNOT4;
protected byte MLRNOT5;
protected byte MLRNOT6;
protected byte MLRNOT7;
protected byte MLRNOT8;
protected byte MLRNOT9;
protected byte MLRNOT97;
protected byte MLSTATCHK;
protected byte MLWKFPT;
protected int MNPID;
protected byte MNPNO;
protected int MNSPID;
protected byte MNSPNO;
protected byte MOBCOMP;
protected byte MOBUSE;
protected byte MONTH;
protected byte MOVDIR;
protected byte MOVEOTH_CODE;
protected byte MOVY11;
protected byte MOVY12;
protected byte MOVY13;
protected byte MOVY14;
protected byte MOVY15;
protected byte MOVY16;
protected byte MPWEB;
protected byte MSTATCH1;
protected byte MSTATCH2;
protected short MSTATSAM;
protected byte MSTATSAMN;
protected byte MUSFREQ;
protected byte MVEVER;
protected byte MVMNTH;
protected short MVYR;
protected byte N1619ABS;
protected byte NADOPTCH;
protected byte NAIDXHH;
protected byte NATCH01;
protected byte NATCH02;
protected byte NATCH03;
protected byte NATCH04;
protected byte NATCH05;
protected byte NATCH06;
protected byte NATCH07;
protected byte NATCH08;
protected byte NATCH09;
protected byte NATCH10;
protected byte NATCH11;
protected byte NATCH12;
protected boolean NATCH13;
protected boolean NATCH14;
protected boolean NATCH15;
protected boolean NATCH16;
protected byte NATID1;
protected byte NATID2;
protected byte NATID3;
protected byte NATID4;
protected byte NATID5;
protected byte NATID6;
protected byte NATID97;
protected byte NCARS;
protected byte NCH10;
protected byte NCH10TO15;
protected byte NCH14RESP;
protected byte NCH3RESP;
protected byte NCH415RESP;
protected byte NCH5RESP;
protected byte NCH5TO15;
protected byte NCH8RESP;
protected byte NCHILD;
protected short NCHILD_DV;
protected byte NCHRESP;
protected byte NCHUND18RESP;
protected byte NCHUNDER16;
protected short NCIGS;
protected byte NCRR1;
protected byte NCRR11;
protected byte NCRR12;
protected byte NCRR3;
protected byte NCRR4;
protected byte NCRR5;
protected byte NCRR6;
protected byte NCRR8;
protected byte NCRR9;
protected byte NCRRM;
protected short NCRRY4;
protected byte NDEPCHL_DV;
protected byte NETPUSE;
protected byte NETUSE;
protected byte NEXT;
protected byte NEXT1;
protected byte NEXT2;
protected byte NEXT3;
protected byte NEXT4;
protected byte NEXT5;
protected byte NEXT6;
protected byte NEXTELSE1;
protected byte NEXTELSE2;
protected byte NEXTELSE3;
protected byte NEXTELSE4;
protected byte NEXTELSE5;
protected byte NEXTELSE6;
protected byte NEXTJOB1;
protected byte NEXTJOB2;
protected byte NEXTJOB3;
protected byte NEXTJOB4;
protected byte NEXTJOB5;
protected byte NEXTJOB6;
protected byte NEXTSTAT1;
protected byte NEXTSTAT2;
protected byte NEXTSTAT3;
protected byte NEXTSTAT4;
protected byte NEXTSTAT5;
protected byte NEXTSTAT6;
protected byte NFH01;
protected byte NFH02;
protected byte NFH03;
protected byte NFH04;
protected byte NFH05;
protected byte NFH06;
protected byte NFH07;
protected byte NFH08;
protected byte NFH09;
protected byte NFH10;
protected byte NFH11;
protected byte NFH12;
protected byte NFH13;
protected byte NFH14;
protected byte NFH15;
protected byte NFH16;
protected byte NFH17;
protected byte NFH18;
protected byte NFH19;
protected byte NFH20;
protected byte NFH21;
protected byte NFH22;
protected byte NFH23;
protected byte NFH24;
protected byte NFH25;
protected byte NFH26;
protected byte NFH27;
protected byte NFH28;
protected byte NFH29;
protected byte NFH30;
protected byte NFH31;
protected byte NFH32;
protected byte NFH33;
protected byte NFH34;
protected byte NFH35;
protected byte NFH36;
protected byte NFH37;
protected byte NFH38;
protected byte NFH39;
protected byte NGRP_DV;
protected byte NHIQUAL_DV;
protected byte NIACT;
protected byte NIREL;
protected byte NISERPS;
protected byte NJOBHIST;
protected byte NMAR;
protected byte NMPSP_DV;
protected byte NNATCH;
protected byte NNEWBORN;
protected byte NNMPSP_DV;
protected byte NNSIB_DV;
protected byte NNSSIB_DV;
protected byte NOTEMPCHK;
protected byte NPENSIONER_DV;
protected byte NPNS_DV;
protected byte NPN_DV;
protected byte NQFHIGH_DV;
protected byte NRELS1;
protected byte NRELS2;
protected byte NRELS3;
protected byte NRELS4;
protected byte NRELS5;
protected byte NRELS6;
protected byte NUNDER16;
protected byte NUNDER16ABS;
protected byte NUNDER20ABS;
protected byte NUNMPSP_DV;
protected byte NXTENDREAS;
protected byte NXTJBENDD;
protected byte NXTJBENDM;
protected short NXTJBENDY4;
protected byte NXTJBES;
protected byte NXTJBHRS;
protected byte NXTST;
protected byte NXTSTELSE;
protected byte NXTSTENDD;
protected byte NXTSTENDM;
protected short NXTSTENDY4;
protected byte OCIMPA;
protected byte OCIMPB;
protected byte OCIMPE;
protected byte OCIMPF;
protected byte OCIMPI;
protected byte OCIMPK;
protected byte OCIMPL;
protected byte OHCH16;
protected byte OLYMACT31;
protected byte OLYMACT32;
protected byte OLYMACT33;
protected byte OLYMACT34;
protected byte OLYMACT35;
protected byte OLYMACT36;
protected byte OLYMACT37;
protected byte OLYMACT38;
protected byte OLYMACT396;
protected byte OLYMACT398;
protected byte OLYMPAS31;
protected byte OLYMPAS32;
protected byte OLYMPAS33;
protected byte OLYMPAS34;
protected byte OLYMPAS35;
protected byte OLYMPAS396;
protected byte OLYMPAS398;
protected byte OPRLG;
protected byte OPRLG0;
protected byte OPRLG0NI;
protected byte OPRLG1;
protected byte ORIGADD;
protected byte OTHCONT;
protected byte OVTNSA;
protected byte OVTPAY;
protected double OVTRATE;
protected byte OVTREST;
protected byte PAAGE;
protected byte PAAID1;
protected byte PAAID2;
protected byte PAAID3;
protected byte PAAID4;
protected byte PAAID5;
protected byte PAAID6;
protected byte PAAID7;
protected byte PAAID8;
protected byte PAAID96;
protected byte PAAID97;
protected byte PACOB;
protected byte PACON;
protected byte PAFAR;
protected byte PAIDU1;
protected byte PAIDU2;
protected byte PAIDU3;
protected byte PAIDU4;
protected byte PAIDU5;
protected byte PAIDU6;
protected byte PAIDU7;
protected byte PAIDU8;
protected byte PAIDU96;
protected byte PAIDU97;
protected byte PAJU;
protected byte PALONE;
protected byte PAMOSTCON;
protected byte PANSSEC5_DV;
protected byte PARCHILD;
protected byte PAREVE;
protected byte PARMAR;
protected byte PARSCH;
protected byte PASEE;
protected short PASOC00_CC;
protected short PASOC10_CC;
protected byte PASOC90_CC;
protected byte PAYGWC;
protected double PAYG_DV;
protected byte PAYNWC;
protected byte PAYRUK;
protected byte PAYTYP;
protected byte PAYUWC;
protected double PAYU_DV;
protected byte PBNFT1;
protected byte PBNFT10;
protected byte PBNFT11;
protected byte PBNFT12;
protected byte PBNFT13;
protected byte PBNFT2;
protected byte PBNFT3;
protected byte PBNFT4;
protected byte PBNFT5;
protected byte PBNFT6;
protected byte PBNFT7;
protected byte PBNFT8;
protected byte PBNFT9;
protected byte PBNFT96;
protected byte PENMEX;
protected byte PENSIONER_DV;
protected int PID;
protected byte PJBPTFT;
protected byte PJSPTFT;
protected byte PLIVPAR;
protected short PLNOWM;
protected short PLNOWY4;
protected int PN1PID;
protected byte PN1PNO;
protected byte PN1SEX;
protected int PN2PID;
protected byte PN2PNO;
protected byte PN2SEX;
protected int PNS1PID;
protected byte PNS1PNO;
protected byte PNS1SEX;
protected int PNS2PID;
protected byte PNS2PNO;
protected byte PNS2SEX;
protected byte PPENSIONER;
protected int PPID;
protected byte PPPEX;
protected byte PPPEXM;
protected byte PPSEX;
protected byte PRAISEKID;
protected byte PREARN;
protected byte PREARNA;
protected byte PREARNW;
protected byte PREASON;
protected byte PREG;
protected byte PREGEND1;
protected byte PREGEND2;
protected byte PREGEND3;
protected byte PREGFERT1;
protected byte PREGFERT2;
protected byte PREGFERT3;
protected byte PREGM1;
protected byte PREGM2;
protected byte PREGM3;
protected byte PREGOUT1;
protected byte PREGOUT2;
protected byte PREGOUT3;
protected byte PREGSMK11;
protected byte PREGSMK12;
protected byte PREGSMK13;
protected byte PREGSMK21;
protected byte PREGSMK22;
protected byte PREGSMK23;
protected byte PREGSMK31;
protected byte PREGSMK32;
protected byte PREGSMK33;
protected byte PREGSMOKE1;
protected byte PREGSMOKE2;
protected byte PREGSMOKE3;
protected short PREGY41;
protected short PREGY42;
protected short PREGY43;
protected byte PREL;
protected byte PRFITB;
protected byte PRFITBA;
protected byte PRFITBW;
protected byte PRIDE10;
protected byte PRIDE11;
protected byte PRIDE12;
protected byte PRIDE13;
protected byte PRIDE14;
protected byte PRIDE2;
protected byte PRIDE4A;
protected byte PRIDE4B;
protected byte PRIDE5;
protected byte PRIDE6;
protected byte PRIDE7;
protected byte PRIDE8;
protected byte PRIDE9;
protected byte PS1;
protected byte PS10;
protected byte PS11;
protected byte PS12;
protected byte PS13;
protected byte PS14;
protected byte PS15;
protected byte PS16;
protected byte PS17;
protected byte PS18;
protected byte PS19;
protected byte PS2;
protected byte PS20;
protected byte PS21;
protected byte PS22;
protected byte PS23;
protected byte PS24;
protected byte PS25;
protected byte PS26;
protected byte PS27;
protected byte PS28;
protected byte PS29;
protected byte PS3;
protected byte PS30;
protected byte PS31;
protected byte PS32;
protected byte PS4;
protected byte PS5;
protected byte PS6;
protected byte PS7;
protected byte PS8;
protected byte PS9;
protected byte PSDQA_DV;
protected byte PSDQB_DV;
protected byte PSDQC_DV;
protected byte PSNUMCH;
protected int PSU;
protected byte PYENRL;
protected byte QFHIGH;
protected boolean QFHIGHFL_DV;
protected byte QFHIGH_DV;
protected byte QFVOC1;
protected byte QFVOC10;
protected byte QFVOC11;
protected byte QFVOC12;
protected byte QFVOC13;
protected byte QFVOC14;
protected byte QFVOC15;
protected byte QFVOC2;
protected byte QFVOC3;
protected byte QFVOC4;
protected byte QFVOC5;
protected byte QFVOC6;
protected byte QFVOC7;
protected byte QFVOC8;
protected byte QFVOC9;
protected byte QFVOC96;
protected byte QUALNEW1;
protected byte QUALNEW10;
protected byte QUALNEW11;
protected byte QUALNEW13;
protected byte QUALNEW15;
protected byte QUALNEW16;
protected byte QUALNEW17;
protected byte QUALNEW18;
protected byte QUALNEW19;
protected byte QUALNEW2;
protected byte QUALNEW20;
protected byte QUALNEW21;
protected byte QUALNEW22;
protected byte QUALNEW23;
protected byte QUALNEW24;
protected byte QUALNEW25;
protected byte QUALNEW26;
protected byte QUALNEW27;
protected byte QUALNEW28;
protected byte QUALNEW29;
protected byte QUALNEW3;
protected byte QUALNEW30;
protected byte QUALNEW31;
protected byte QUALNEW4;
protected byte QUALNEW5;
protected byte QUALNEW6;
protected byte QUALNEW7;
protected byte QUALNEW8;
protected byte QUALNEW9;
protected byte QUALOC;
protected byte QUARREL;
protected byte RACEL;
protected byte RACELAT;
protected byte RACELBT;
protected byte RACELMT;
protected byte RACELOT_CODE;
protected short RACELO_CODE;
protected byte RACELT;
protected byte RACELWT;
protected byte RACEL_DV;
protected byte READDIF;
protected byte REASEND1;
protected byte REASEND2;
protected byte REASEND3;
protected byte REASEND4;
protected byte REASEND5;
protected byte REASEND6;
protected byte RELKID;
protected byte RELUP;
protected byte REMAIL_CODE;
protected byte RESATTACKED1_1;
protected byte RESATTACKED1_10;
protected byte RESATTACKED1_11;
protected byte RESATTACKED1_12;
protected byte RESATTACKED1_2;
protected byte RESATTACKED1_3;
protected byte RESATTACKED1_4;
protected byte RESATTACKED1_5;
protected byte RESATTACKED1_6;
protected byte RESATTACKED1_7;
protected byte RESATTACKED1_8;
protected byte RESATTACKED1_9;
protected byte RESATTACKED2_1;
protected byte RESATTACKED2_10;
protected byte RESATTACKED2_11;
protected byte RESATTACKED2_12;
protected byte RESATTACKED2_2;
protected byte RESATTACKED2_3;
protected byte RESATTACKED2_4;
protected byte RESATTACKED2_5;
protected byte RESATTACKED2_6;
protected byte RESATTACKED2_7;
protected byte RESATTACKED2_8;
protected byte RESATTACKED2_9;
protected byte RESATTACKED3_1;
protected byte RESATTACKED3_10;
protected byte RESATTACKED3_11;
protected byte RESATTACKED3_12;
protected byte RESATTACKED3_2;
protected byte RESATTACKED3_3;
protected byte RESATTACKED3_4;
protected byte RESATTACKED3_5;
protected byte RESATTACKED3_6;
protected byte RESATTACKED3_7;
protected byte RESATTACKED3_8;
protected byte RESATTACKED3_9;
protected byte RESATTACKED4_1;
protected byte RESATTACKED4_10;
protected byte RESATTACKED4_11;
protected byte RESATTACKED4_12;
protected byte RESATTACKED4_2;
protected byte RESATTACKED4_3;
protected byte RESATTACKED4_4;
protected byte RESATTACKED4_5;
protected byte RESATTACKED4_6;
protected byte RESATTACKED4_7;
protected byte RESATTACKED4_8;
protected byte RESATTACKED4_9;
protected byte RESATTACKED5_1;
protected byte RESATTACKED5_10;
protected byte RESATTACKED5_11;
protected byte RESATTACKED5_12;
protected byte RESATTACKED5_2;
protected byte RESATTACKED5_3;
protected byte RESATTACKED5_4;
protected byte RESATTACKED5_5;
protected byte RESATTACKED5_6;
protected byte RESATTACKED5_7;
protected byte RESATTACKED5_8;
protected byte RESATTACKED5_9;
protected byte RESATTACKED6_1;
protected byte RESATTACKED6_10;
protected byte RESATTACKED6_11;
protected byte RESATTACKED6_12;
protected byte RESATTACKED6_2;
protected byte RESATTACKED6_3;
protected byte RESATTACKED6_4;
protected byte RESATTACKED6_5;
protected byte RESATTACKED6_6;
protected byte RESATTACKED6_7;
protected byte RESATTACKED6_8;
protected byte RESATTACKED6_9;
protected byte RESATTACKED7_1;
protected byte RESATTACKED7_10;
protected byte RESATTACKED7_11;
protected byte RESATTACKED7_12;
protected byte RESATTACKED7_2;
protected byte RESATTACKED7_3;
protected byte RESATTACKED7_4;
protected byte RESATTACKED7_5;
protected byte RESATTACKED7_6;
protected byte RESATTACKED7_7;
protected byte RESATTACKED7_8;
protected byte RESATTACKED7_9;
protected byte RESATTACKED8_1;
protected byte RESATTACKED8_10;
protected byte RESATTACKED8_11;
protected byte RESATTACKED8_12;
protected byte RESATTACKED8_2;
protected byte RESATTACKED8_3;
protected byte RESATTACKED8_4;
protected byte RESATTACKED8_5;
protected byte RESATTACKED8_6;
protected byte RESATTACKED8_7;
protected byte RESATTACKED8_8;
protected byte RESATTACKED8_9;
protected byte RESATTACKED96_1;
protected byte RESATTACKED96_10;
protected byte RESATTACKED96_11;
protected byte RESATTACKED96_12;
protected byte RESATTACKED96_2;
protected byte RESATTACKED96_3;
protected byte RESATTACKED96_4;
protected byte RESATTACKED96_5;
protected byte RESATTACKED96_6;
protected byte RESATTACKED96_7;
protected byte RESATTACKED96_8;
protected byte RESATTACKED96_9;
protected byte RESATTACKED97_1;
protected byte RESATTACKED97_10;
protected byte RESATTACKED97_11;
protected byte RESATTACKED97_12;
protected byte RESATTACKED97_2;
protected byte RESATTACKED97_3;
protected byte RESATTACKED97_4;
protected byte RESATTACKED97_5;
protected byte RESATTACKED97_6;
protected byte RESATTACKED97_7;
protected byte RESATTACKED97_8;
protected byte RESATTACKED97_9;
protected byte RESATTACKED9_1;
protected byte RESATTACKED9_10;
protected byte RESATTACKED9_11;
protected byte RESATTACKED9_12;
protected byte RESATTACKED9_2;
protected byte RESATTACKED9_3;
protected byte RESATTACKED9_4;
protected byte RESATTACKED9_5;
protected byte RESATTACKED9_6;
protected byte RESATTACKED9_7;
protected byte RESATTACKED9_8;
protected byte RESATTACKED9_9;
protected byte RESAVOID1_1;
protected byte RESAVOID1_10;
protected byte RESAVOID1_11;
protected byte RESAVOID1_12;
protected byte RESAVOID1_2;
protected byte RESAVOID1_3;
protected byte RESAVOID1_4;
protected byte RESAVOID1_5;
protected byte RESAVOID1_6;
protected byte RESAVOID1_7;
protected byte RESAVOID1_8;
protected byte RESAVOID1_9;
protected byte RESAVOID2_1;
protected byte RESAVOID2_10;
protected byte RESAVOID2_11;
protected byte RESAVOID2_12;
protected byte RESAVOID2_2;
protected byte RESAVOID2_3;
protected byte RESAVOID2_4;
protected byte RESAVOID2_5;
protected byte RESAVOID2_6;
protected byte RESAVOID2_7;
protected byte RESAVOID2_8;
protected byte RESAVOID2_9;
protected byte RESAVOID3_1;
protected byte RESAVOID3_10;
protected byte RESAVOID3_11;
protected byte RESAVOID3_12;
protected byte RESAVOID3_2;
protected byte RESAVOID3_3;
protected byte RESAVOID3_4;
protected byte RESAVOID3_5;
protected byte RESAVOID3_6;
protected byte RESAVOID3_7;
protected byte RESAVOID3_8;
protected byte RESAVOID3_9;
protected byte RESAVOID4_1;
protected byte RESAVOID4_10;
protected byte RESAVOID4_11;
protected byte RESAVOID4_12;
protected byte RESAVOID4_2;
protected byte RESAVOID4_3;
protected byte RESAVOID4_4;
protected byte RESAVOID4_5;
protected byte RESAVOID4_6;
protected byte RESAVOID4_7;
protected byte RESAVOID4_8;
protected byte RESAVOID4_9;
protected byte RESAVOID5_1;
protected byte RESAVOID5_10;
protected byte RESAVOID5_11;
protected byte RESAVOID5_12;
protected byte RESAVOID5_2;
protected byte RESAVOID5_3;
protected byte RESAVOID5_4;
protected byte RESAVOID5_5;
protected byte RESAVOID5_6;
protected byte RESAVOID5_7;
protected byte RESAVOID5_8;
protected byte RESAVOID5_9;
protected byte RESAVOID6_1;
protected byte RESAVOID6_10;
protected byte RESAVOID6_11;
protected byte RESAVOID6_12;
protected byte RESAVOID6_2;
protected byte RESAVOID6_3;
protected byte RESAVOID6_4;
protected byte RESAVOID6_5;
protected byte RESAVOID6_6;
protected byte RESAVOID6_7;
protected byte RESAVOID6_8;
protected byte RESAVOID6_9;
protected byte RESAVOID7_1;
protected byte RESAVOID7_10;
protected byte RESAVOID7_11;
protected byte RESAVOID7_12;
protected byte RESAVOID7_2;
protected byte RESAVOID7_3;
protected byte RESAVOID7_4;
protected byte RESAVOID7_5;
protected byte RESAVOID7_6;
protected byte RESAVOID7_7;
protected byte RESAVOID7_8;
protected byte RESAVOID7_9;
protected byte RESAVOID8_1;
protected byte RESAVOID8_10;
protected byte RESAVOID8_11;
protected byte RESAVOID8_12;
protected byte RESAVOID8_2;
protected byte RESAVOID8_3;
protected byte RESAVOID8_4;
protected byte RESAVOID8_5;
protected byte RESAVOID8_6;
protected byte RESAVOID8_7;
protected byte RESAVOID8_8;
protected byte RESAVOID8_9;
protected byte RESAVOID96_1;
protected byte RESAVOID96_10;
protected byte RESAVOID96_11;
protected byte RESAVOID96_12;
protected byte RESAVOID96_2;
protected byte RESAVOID96_3;
protected byte RESAVOID96_4;
protected byte RESAVOID96_5;
protected byte RESAVOID96_6;
protected byte RESAVOID96_7;
protected byte RESAVOID96_8;
protected byte RESAVOID96_9;
protected byte RESAVOID97_1;
protected byte RESAVOID97_10;
protected byte RESAVOID97_11;
protected byte RESAVOID97_12;
protected byte RESAVOID97_2;
protected byte RESAVOID97_3;
protected byte RESAVOID97_4;
protected byte RESAVOID97_5;
protected byte RESAVOID97_6;
protected byte RESAVOID97_7;
protected byte RESAVOID97_8;
protected byte RESAVOID97_9;
protected byte RESAVOID9_1;
protected byte RESAVOID9_10;
protected byte RESAVOID9_11;
protected byte RESAVOID9_12;
protected byte RESAVOID9_2;
protected byte RESAVOID9_3;
protected byte RESAVOID9_4;
protected byte RESAVOID9_5;
protected byte RESAVOID9_6;
protected byte RESAVOID9_7;
protected byte RESAVOID9_8;
protected byte RESAVOID9_9;
protected byte RESINSULTED1_1;
protected byte RESINSULTED1_10;
protected byte RESINSULTED1_11;
protected byte RESINSULTED1_12;
protected byte RESINSULTED1_2;
protected byte RESINSULTED1_3;
protected byte RESINSULTED1_4;
protected byte RESINSULTED1_5;
protected byte RESINSULTED1_6;
protected byte RESINSULTED1_7;
protected byte RESINSULTED1_8;
protected byte RESINSULTED1_9;
protected byte RESINSULTED2_1;
protected byte RESINSULTED2_10;
protected byte RESINSULTED2_11;
protected byte RESINSULTED2_12;
protected byte RESINSULTED2_2;
protected byte RESINSULTED2_3;
protected byte RESINSULTED2_4;
protected byte RESINSULTED2_5;
protected byte RESINSULTED2_6;
protected byte RESINSULTED2_7;
protected byte RESINSULTED2_8;
protected byte RESINSULTED2_9;
protected byte RESINSULTED3_1;
protected byte RESINSULTED3_10;
protected byte RESINSULTED3_11;
protected byte RESINSULTED3_12;
protected byte RESINSULTED3_2;
protected byte RESINSULTED3_3;
protected byte RESINSULTED3_4;
protected byte RESINSULTED3_5;
protected byte RESINSULTED3_6;
protected byte RESINSULTED3_7;
protected byte RESINSULTED3_8;
protected byte RESINSULTED3_9;
protected byte RESINSULTED4_1;
protected byte RESINSULTED4_10;
protected byte RESINSULTED4_11;
protected byte RESINSULTED4_12;
protected byte RESINSULTED4_2;
protected byte RESINSULTED4_3;
protected byte RESINSULTED4_4;
protected byte RESINSULTED4_5;
protected byte RESINSULTED4_6;
protected byte RESINSULTED4_7;
protected byte RESINSULTED4_8;
protected byte RESINSULTED4_9;
protected byte RESINSULTED5_1;
protected byte RESINSULTED5_10;
protected byte RESINSULTED5_11;
protected byte RESINSULTED5_12;
protected byte RESINSULTED5_2;
protected byte RESINSULTED5_3;
protected byte RESINSULTED5_4;
protected byte RESINSULTED5_5;
protected byte RESINSULTED5_6;
protected byte RESINSULTED5_7;
protected byte RESINSULTED5_8;
protected byte RESINSULTED5_9;
protected byte RESINSULTED6_1;
protected byte RESINSULTED6_10;
protected byte RESINSULTED6_11;
protected byte RESINSULTED6_12;
protected byte RESINSULTED6_2;
protected byte RESINSULTED6_3;
protected byte RESINSULTED6_4;
protected byte RESINSULTED6_5;
protected byte RESINSULTED6_6;
protected byte RESINSULTED6_7;
protected byte RESINSULTED6_8;
protected byte RESINSULTED6_9;
protected byte RESINSULTED7_1;
protected byte RESINSULTED7_10;
protected byte RESINSULTED7_11;
protected byte RESINSULTED7_12;
protected byte RESINSULTED7_2;
protected byte RESINSULTED7_3;
protected byte RESINSULTED7_4;
protected byte RESINSULTED7_5;
protected byte RESINSULTED7_6;
protected byte RESINSULTED7_7;
protected byte RESINSULTED7_8;
protected byte RESINSULTED7_9;
protected byte RESINSULTED8_1;
protected byte RESINSULTED8_10;
protected byte RESINSULTED8_11;
protected byte RESINSULTED8_12;
protected byte RESINSULTED8_2;
protected byte RESINSULTED8_3;
protected byte RESINSULTED8_4;
protected byte RESINSULTED8_5;
protected byte RESINSULTED8_6;
protected byte RESINSULTED8_7;
protected byte RESINSULTED8_8;
protected byte RESINSULTED8_9;
protected byte RESINSULTED96_1;
protected byte RESINSULTED96_10;
protected byte RESINSULTED96_11;
protected byte RESINSULTED96_12;
protected byte RESINSULTED96_2;
protected byte RESINSULTED96_3;
protected byte RESINSULTED96_4;
protected byte RESINSULTED96_5;
protected byte RESINSULTED96_6;
protected byte RESINSULTED96_7;
protected byte RESINSULTED96_8;
protected byte RESINSULTED96_9;
protected byte RESINSULTED97_1;
protected byte RESINSULTED97_10;
protected byte RESINSULTED97_11;
protected byte RESINSULTED97_12;
protected byte RESINSULTED97_2;
protected byte RESINSULTED97_3;
protected byte RESINSULTED97_4;
protected byte RESINSULTED97_5;
protected byte RESINSULTED97_6;
protected byte RESINSULTED97_7;
protected byte RESINSULTED97_8;
protected byte RESINSULTED97_9;
protected byte RESINSULTED9_1;
protected byte RESINSULTED9_10;
protected byte RESINSULTED9_11;
protected byte RESINSULTED9_12;
protected byte RESINSULTED9_2;
protected byte RESINSULTED9_3;
protected byte RESINSULTED9_4;
protected byte RESINSULTED9_5;
protected byte RESINSULTED9_6;
protected byte RESINSULTED9_7;
protected byte RESINSULTED9_8;
protected byte RESINSULTED9_9;
protected byte RESJOBDENY1;
protected byte RESJOBDENY2;
protected byte RESJOBDENY3;
protected byte RESJOBDENY4;
protected byte RESJOBDENY5;
protected byte RESJOBDENY6;
protected byte RESJOBDENY7;
protected byte RESJOBDENY8;
protected byte RESJOBDENY9;
protected byte RESJOBDENY96;
protected byte RESJOBDENY97;
protected boolean RESPF16;
protected boolean RESPF16_DV;
protected boolean RESPM16;
protected boolean RESPM16_DV;
protected byte RESUNSAFE1_1;
protected byte RESUNSAFE1_10;
protected byte RESUNSAFE1_11;
protected byte RESUNSAFE1_12;
protected byte RESUNSAFE1_2;
protected byte RESUNSAFE1_3;
protected byte RESUNSAFE1_4;
protected byte RESUNSAFE1_5;
protected byte RESUNSAFE1_6;
protected byte RESUNSAFE1_7;
protected byte RESUNSAFE1_8;
protected byte RESUNSAFE1_9;
protected byte RESUNSAFE2_1;
protected byte RESUNSAFE2_10;
protected byte RESUNSAFE2_11;
protected byte RESUNSAFE2_12;
protected byte RESUNSAFE2_2;
protected byte RESUNSAFE2_3;
protected byte RESUNSAFE2_4;
protected byte RESUNSAFE2_5;
protected byte RESUNSAFE2_6;
protected byte RESUNSAFE2_7;
protected byte RESUNSAFE2_8;
protected byte RESUNSAFE2_9;
protected byte RESUNSAFE3_1;
protected byte RESUNSAFE3_10;
protected byte RESUNSAFE3_11;
protected byte RESUNSAFE3_12;
protected byte RESUNSAFE3_2;
protected byte RESUNSAFE3_3;
protected byte RESUNSAFE3_4;
protected byte RESUNSAFE3_5;
protected byte RESUNSAFE3_6;
protected byte RESUNSAFE3_7;
protected byte RESUNSAFE3_8;
protected byte RESUNSAFE3_9;
protected byte RESUNSAFE4_1;
protected byte RESUNSAFE4_10;
protected byte RESUNSAFE4_11;
protected byte RESUNSAFE4_12;
protected byte RESUNSAFE4_2;
protected byte RESUNSAFE4_3;
protected byte RESUNSAFE4_4;
protected byte RESUNSAFE4_5;
protected byte RESUNSAFE4_6;
protected byte RESUNSAFE4_7;
protected byte RESUNSAFE4_8;
protected byte RESUNSAFE4_9;
protected byte RESUNSAFE5_1;
protected byte RESUNSAFE5_10;
protected byte RESUNSAFE5_11;
protected byte RESUNSAFE5_12;
protected byte RESUNSAFE5_2;
protected byte RESUNSAFE5_3;
protected byte RESUNSAFE5_4;
protected byte RESUNSAFE5_5;
protected byte RESUNSAFE5_6;
protected byte RESUNSAFE5_7;
protected byte RESUNSAFE5_8;
protected byte RESUNSAFE5_9;
protected byte RESUNSAFE6_1;
protected byte RESUNSAFE6_10;
protected byte RESUNSAFE6_11;
protected byte RESUNSAFE6_12;
protected byte RESUNSAFE6_2;
protected byte RESUNSAFE6_3;
protected byte RESUNSAFE6_4;
protected byte RESUNSAFE6_5;
protected byte RESUNSAFE6_6;
protected byte RESUNSAFE6_7;
protected byte RESUNSAFE6_8;
protected byte RESUNSAFE6_9;
protected byte RESUNSAFE7_1;
protected byte RESUNSAFE7_10;
protected byte RESUNSAFE7_11;
protected byte RESUNSAFE7_12;
protected byte RESUNSAFE7_2;
protected byte RESUNSAFE7_3;
protected byte RESUNSAFE7_4;
protected byte RESUNSAFE7_5;
protected byte RESUNSAFE7_6;
protected byte RESUNSAFE7_7;
protected byte RESUNSAFE7_8;
protected byte RESUNSAFE7_9;
protected byte RESUNSAFE8_1;
protected byte RESUNSAFE8_10;
protected byte RESUNSAFE8_11;
protected byte RESUNSAFE8_12;
protected byte RESUNSAFE8_2;
protected byte RESUNSAFE8_3;
protected byte RESUNSAFE8_4;
protected byte RESUNSAFE8_5;
protected byte RESUNSAFE8_6;
protected byte RESUNSAFE8_7;
protected byte RESUNSAFE8_8;
protected byte RESUNSAFE8_9;
protected byte RESUNSAFE96_1;
protected byte RESUNSAFE96_10;
protected byte RESUNSAFE96_11;
protected byte RESUNSAFE96_12;
protected byte RESUNSAFE96_2;
protected byte RESUNSAFE96_3;
protected byte RESUNSAFE96_4;
protected byte RESUNSAFE96_5;
protected byte RESUNSAFE96_6;
protected byte RESUNSAFE96_7;
protected byte RESUNSAFE96_8;
protected byte RESUNSAFE96_9;
protected byte RESUNSAFE97_1;
protected byte RESUNSAFE97_10;
protected byte RESUNSAFE97_11;
protected byte RESUNSAFE97_12;
protected byte RESUNSAFE97_2;
protected byte RESUNSAFE97_3;
protected byte RESUNSAFE97_4;
protected byte RESUNSAFE97_5;
protected byte RESUNSAFE97_6;
protected byte RESUNSAFE97_7;
protected byte RESUNSAFE97_8;
protected byte RESUNSAFE97_9;
protected byte RESUNSAFE9_1;
protected byte RESUNSAFE9_10;
protected byte RESUNSAFE9_11;
protected byte RESUNSAFE9_12;
protected byte RESUNSAFE9_2;
protected byte RESUNSAFE9_3;
protected byte RESUNSAFE9_4;
protected byte RESUNSAFE9_5;
protected byte RESUNSAFE9_6;
protected byte RESUNSAFE9_7;
protected byte RESUNSAFE9_8;
protected byte RESUNSAFE9_9;
protected byte RETAMT;
protected byte RETCHK;
protected byte RETSUF;
protected byte RHLAND_CODE;
protected byte RPHMOB_CODE;
protected byte RPHWRK_CODE;
protected byte RTCON1;
protected byte RTCON2;
protected byte RTCON3;
protected byte RTCON4;
protected byte RTEXPJB;
protected byte RTFND1;
protected byte RTFND10;
protected byte RTFND2;
protected byte RTFND3;
protected byte RTFND4;
protected byte RTFND5;
protected byte RTFND6;
protected byte RTFND7;
protected byte RTFND8;
protected byte RTFND9;
protected byte RTFND96;
protected byte RTPRO1;
protected byte RTPRO2;
protected byte RTPRO3;
protected byte RTPRO4;
protected byte RTPRO5;
protected byte RTPRO6;
protected byte RULESKID;
protected byte SAMEJOB;
protected short SAMPST;
protected byte SCAC;
protected byte SCAGE1DRNK;
protected byte SCALCL7D;
protected byte SCDASCOH_DV;
protected byte SCDASSAT_DV;
protected byte SCEVERDRNK;
protected byte SCFALCDRNK;
protected byte SCFANNOY;
protected byte SCFCRITIC;
protected byte SCFLAG_DV;
protected byte SCFLETDWN;
protected byte SCFOPENUP;
protected byte SCFRELY;
protected byte SCFRENDANY;
protected byte SCFUNDSTND;
protected byte SCHLLOC;
protected byte SCHOK;
protected byte SCHOOLCNTRY1;
protected byte SCHOOLCNTRY2;
protected byte SCHOOLCNTRY3;
protected byte SCHOOLCNTRY4;
protected byte SCHOOLCNTRY5;
protected byte SCLFSAT1;
protected byte SCLFSAT2;
protected byte SCLFSAT7;
protected byte SCLFSATO;
protected byte SCNALCL7D;
protected double SCNALCPINT;
protected double SCNALCPOPS;
protected double SCNALCSHOT;
protected double SCNALCWINE;
protected byte SCOTVOT1;
protected byte SCOTVOT2;
protected byte SCOTVOT3;
protected byte SCOTVOT4;
protected byte SCPANNOY;
protected byte SCPAROUTINT;
protected byte SCPCRITIC;
protected byte SCPLETDWN;
protected byte SCPOPENUP;
protected byte SCPRELY;
protected byte SCPUNDSTND;
protected byte SCRANNOY;
protected byte SCRCRITIC;
protected byte SCRELANY;
protected byte SCRELHAPPY;
protected byte SCRELPARAR;
protected byte SCRELPARCD;
protected byte SCRELPARDS;
protected byte SCRELPAREI;
protected byte SCRELPARIR;
protected byte SCRELPARKS;
protected byte SCRELPARRG;
protected byte SCRELPARWT;
protected byte SCRF1;
protected byte SCRF2;
protected byte SCRF3;
protected byte SCRF4;
protected byte SCRF5;
protected byte SCRF6;
protected byte SCRF97;
protected byte SCRLETDWN;
protected byte SCROPENUP;
protected byte SCRRELY;
protected byte SCRUNDSTND;
protected byte SCRX_CODE;
protected byte SCSF1;
protected byte SCSF2A;
protected byte SCSF2B;
protected byte SCSF3A;
protected byte SCSF3B;
protected byte SCSF4A;
protected byte SCSF4B;
protected byte SCSF5;
protected byte SCSF6A;
protected byte SCSF6B;
protected byte SCSF6C;
protected byte SCSF7;
protected byte SCSSUP1;
protected byte SCSSUPR2R;
protected byte SCUN1;
protected byte SCUN2;
protected byte SCUN3;
protected byte SCUN97;
protected byte SCUX_CODE;
protected byte SCWHORUAGE;
protected byte SCWHORUEDU;
protected byte SCWHORUFAM;
protected byte SCWHORUPOL;
protected byte SCWHORUPRO;
protected byte SCWHORURAC;
protected byte SCWHORUSEX;
protected byte SE1;
protected byte SE10;
protected byte SE2;
protected byte SE3;
protected byte SE4;
protected byte SE5;
protected byte SE6;
protected byte SE7;
protected byte SE8;
protected byte SE9;
protected double SEEARNGRS_DV;
protected byte SEEARNGRS_IF;
protected double SEEARNNET_DV;
protected byte SEEKID;
protected byte SEXUOR;
protected byte SEX_DV;
protected byte SF1;
protected double SF12MCS_DV;
protected double SF12PCS_DV;
protected byte SIBHIT;
protected byte SIBLING;
protected byte SIBSTEAL;
protected byte SIBTEASE;
protected byte SIBVERAB;
protected byte SIGNEDUCKIDS1;
protected byte SIGNEDUCKIDS2;
protected boolean SIGNHEALTHKIDS1;
protected boolean SIGNHEALTHKIDS2;
protected boolean SINGLDV;
protected byte SLAPKID;
protected byte SMAGBG;
protected byte SMARTMOB;
protected byte SMCIGS;
protected byte SMEVER;
protected byte SMKMNTH11;
protected byte SMKMNTH12;
protected byte SMKMNTH13;
protected byte SMKMNTH21;
protected byte SMKMNTH22;
protected byte SMKMNTH23;
protected byte SMKMNTH31;
protected byte SMKMNTH32;
protected byte SMKMNTH33;
protected byte SMNCIGS;
protected byte SMNOW;
protected byte SOCCONT;
protected byte SOCIALKID;
protected byte SPKDIF;
protected byte SPORTACT;
protected byte SPORTOTH_CODE;
protected byte SPORTS11;
protected byte SPORTS110;
protected byte SPORTS111;
protected byte SPORTS112;
protected byte SPORTS113;
protected byte SPORTS114;
protected byte SPORTS12;
protected byte SPORTS13;
protected byte SPORTS14;
protected byte SPORTS15;
protected byte SPORTS16;
protected byte SPORTS17;
protected byte SPORTS18;
protected byte SPORTS19;
protected byte SPORTS196;
protected byte SPORTS216;
protected byte SPORTS217;
protected byte SPORTS218;
protected byte SPORTS219;
protected byte SPORTS220;
protected byte SPORTS221;
protected byte SPORTS222;
protected byte SPORTS223;
protected byte SPORTS224;
protected byte SPORTS225;
protected byte SPORTS226;
protected byte SPORTS227;
protected byte SPORTS228;
protected byte SPORTS229;
protected byte SPORTS230;
protected byte SPORTS231;
protected byte SPORTS296;
protected byte SPORTS31;
protected byte SPORTS32;
protected byte SPORTS33;
protected byte SPORTS34;
protected byte SPORTS35;
protected byte SPORTS36;
protected byte SPORTS37;
protected byte SPORTS38;
protected byte SPORTS39;
protected byte SPORTS396;
protected byte SPORTS3FREQ;
protected byte SPORTSFREQ;
protected byte SPPEN;
protected int SPPID;
protected byte SPPNO;
protected byte STATCM1;
protected byte STATCM2;
protected short STATCY41;
protected short STATCY42;
protected byte STATENDD1;
protected byte STATENDD2;
protected byte STATENDD3;
protected byte STATENDD4;
protected byte STATENDD5;
protected byte STATENDD6;
protected byte STATENDM1;
protected byte STATENDM2;
protected byte STATENDM3;
protected byte STATENDM4;
protected byte STATENDM5;
protected byte STATENDM6;
protected short STATENDY41;
protected short STATENDY42;
protected short STATENDY43;
protected short STATENDY44;
protected short STATENDY45;
protected short STATENDY46;
protected short STAYKID;
protected byte STAYKIDW;
protected byte STEALSIB;
protected byte STENDREAS;
protected byte STEPREL;
protected short STRATA;
protected byte SUSP;
protected byte TALKMATTER;
protected byte TEASESIB;
protected byte TELDIF;
protected byte TLKF;
protected byte TLKM;
protected short TMTIME;
protected byte TRAINANY;
protected short TRAINDAYS1;
protected short TRAINDAYS2;
protected short TRAINDAYS3;
protected byte TRAINEND1;
protected byte TRAINEND2;
protected byte TRAINEND3;
protected byte TRAINHRS1;
protected byte TRAINHRS2;
protected byte TRAINHRS3;
protected byte TRAINN;
protected byte TRAINPURP11;
protected byte TRAINPURP12;
protected byte TRAINPURP13;
protected byte TRAINPURP21;
protected byte TRAINPURP22;
protected byte TRAINPURP23;
protected byte TRAINPURP31;
protected byte TRAINPURP32;
protected byte TRAINPURP33;
protected byte TRAINPURP41;
protected byte TRAINPURP42;
protected byte TRAINPURP43;
protected byte TRAINPURP51;
protected byte TRAINPURP52;
protected byte TRAINPURP53;
protected byte TRAINPURP61;
protected byte TRAINPURP62;
protected byte TRAINPURP63;
protected byte TRAINPURP71;
protected byte TRAINPURP72;
protected byte TRAINPURP73;
protected byte TRAINQUAL1;
protected byte TRAINQUAL2;
protected byte TRAINQUAL3;
protected byte TRQUAL1;
protected byte TRQUAL10;
protected byte TRQUAL11;
protected byte TRQUAL13;
protected byte TRQUAL15;
protected byte TRQUAL16;
protected byte TRQUAL17;
protected byte TRQUAL18;
protected byte TRQUAL19;
protected byte TRQUAL2;
protected byte TRQUAL20;
protected byte TRQUAL21;
protected byte TRQUAL22;
protected byte TRQUAL23;
protected byte TRQUAL24;
protected byte TRQUAL25;
protected byte TRQUAL26;
protected byte TRQUAL27;
protected byte TRQUAL28;
protected byte TRQUAL29;
protected byte TRQUAL3;
protected byte TRQUAL30;
protected byte TRQUAL31;
protected byte TRQUAL4;
protected byte TRQUAL5;
protected byte TRQUAL6;
protected byte TRQUAL7;
protected byte TRQUAL8;
protected byte TRQUAL9;
protected byte TRWHO1;
protected byte TRWHO2;
protected byte TRWHO3;
protected byte UKBORN;
protected byte UNDQUS;
protected byte UNSAFDV;
protected byte UNSAFE1;
protected byte UNSAFE10;
protected byte UNSAFE11;
protected byte UNSAFE2;
protected byte UNSAFE3;
protected byte UNSAFE4;
protected byte UNSAFE5;
protected byte UNSAFE6;
protected byte UNSAFE7;
protected byte UNSAFE8;
protected byte UNSAFE9;
protected byte UNSAFE96;
protected byte UNSAFE97;
protected byte UNSAFEO_CODE;
protected byte UPSET;
protected byte URBAN_DV;
protected byte USBREAD;
protected byte USDAIRY;
protected byte VERABSIB;
protected byte VOLRECPER;
protected short VOTE1;
protected short VOTE2;
protected short VOTE3;
protected short VOTE4;
protected short VOTE5;
protected short VOTE6;
protected byte VOUCHER;
protected boolean VOUCHERNI;
protected byte VREGLINK;
protected byte VREGUKN;
protected byte WALKPACE;
protected byte WEKID;
protected byte WKFRUIT;
protected byte WKPHYS;
protected byte WKPLSAM;
protected byte WKVEGE;
protected byte WLK10M;
protected byte WLK30MIN;
protected byte WORKTRAV;
protected byte XPMOVE;
protected byte XPMVMNTH;
protected byte XPMVWHN;
protected byte XPMVWHR;
protected short XPMVYR;
protected byte XTRA5MINOSM_DV;
protected byte XTRA5MIN_DV;
protected byte YAJBSRV1;
protected byte YAJBSRV2;
protected byte YAJBSRV3;
protected byte YAJBSRV4;
protected byte YAJBSRV5;
protected byte YAJBSRV7;
protected byte YAJBSRV8;
protected byte YAJBSRV96;
protected byte YANSSEC5_DV;
protected short YASOC00_CC;
protected short YASOC10_CC;
protected byte YASOC90_CC;
protected byte YELLKID;
protected byte YPNETCHT;
protected byte YPNPAL;
protected byte YPSOCWEB;
protected final void initADCTS(String s) {
if (!s.trim().isEmpty()) {
ADCTS = Byte.parseByte(s);
} else {
ADCTS = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH01(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH01 = Byte.parseByte(s);
} else {
ADOPTCH01 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH02(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH02 = Byte.parseByte(s);
} else {
ADOPTCH02 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH03(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH03 = Byte.parseByte(s);
} else {
ADOPTCH03 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH04(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH04 = Byte.parseByte(s);
} else {
ADOPTCH04 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH05(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH05 = Byte.parseByte(s);
} else {
ADOPTCH05 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH06(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH06 = Byte.parseByte(s);
} else {
ADOPTCH06 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH07 = false;
} else {
ADOPTCH07 = true;
}
}
}

protected final void initADOPTCH08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH08 = false;
} else {
ADOPTCH08 = true;
}
}
}

protected final void initADOPTCH09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH09 = false;
} else {
ADOPTCH09 = true;
}
}
}

protected final void initADOPTCH10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH10 = false;
} else {
ADOPTCH10 = true;
}
}
}

protected final void initADOPTCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH11 = false;
} else {
ADOPTCH11 = true;
}
}
}

protected final void initADOPTCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH12 = false;
} else {
ADOPTCH12 = true;
}
}
}

protected final void initADOPTCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH13 = false;
} else {
ADOPTCH13 = true;
}
}
}

protected final void initADOPTCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH14 = false;
} else {
ADOPTCH14 = true;
}
}
}

protected final void initADOPTCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH15 = false;
} else {
ADOPTCH15 = true;
}
}
}

protected final void initADOPTCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH16 = false;
} else {
ADOPTCH16 = true;
}
}
}

protected final void initADSTATUS(String s) {
if (!s.trim().isEmpty()) {
ADSTATUS = Byte.parseByte(s);
} else {
ADSTATUS = Byte.MIN_VALUE;
}
}

protected final void initADVVOUCHER(String s) {
if (!s.trim().isEmpty()) {
ADVVOUCHER = Byte.parseByte(s);
} else {
ADVVOUCHER = Byte.MIN_VALUE;
}
}

protected final void initAEDROF1(String s) {
if (!s.trim().isEmpty()) {
AEDROF1 = Byte.parseByte(s);
} else {
AEDROF1 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF2(String s) {
if (!s.trim().isEmpty()) {
AEDROF2 = Byte.parseByte(s);
} else {
AEDROF2 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF3(String s) {
if (!s.trim().isEmpty()) {
AEDROF3 = Byte.parseByte(s);
} else {
AEDROF3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA1(String s) {
if (!s.trim().isEmpty()) {
AEPUDA1 = Double.parseDouble(s);
} else {
AEPUDA1 = Double.NaN;
}
}

protected final void initAEPUDA2(String s) {
if (!s.trim().isEmpty()) {
AEPUDA2 = Byte.parseByte(s);
} else {
AEPUDA2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA3(String s) {
if (!s.trim().isEmpty()) {
AEPUDA3 = Byte.parseByte(s);
} else {
AEPUDA3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK1(String s) {
if (!s.trim().isEmpty()) {
AEPUWK1 = Byte.parseByte(s);
} else {
AEPUWK1 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK2(String s) {
if (!s.trim().isEmpty()) {
AEPUWK2 = Byte.parseByte(s);
} else {
AEPUWK2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK3(String s) {
if (!s.trim().isEmpty()) {
AEPUWK3 = Byte.parseByte(s);
} else {
AEPUWK3 = Byte.MIN_VALUE;
}
}

protected final void initAGDV(String s) {
if (!s.trim().isEmpty()) {
AGDV = Byte.parseByte(s);
} else {
AGDV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR10_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR10_DV = Byte.parseByte(s);
} else {
AGEGR10_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR13_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR13_DV = Byte.parseByte(s);
} else {
AGEGR13_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR5_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR5_DV = Byte.parseByte(s);
} else {
AGEGR5_DV = Byte.MIN_VALUE;
}
}

protected final void initAGERET(String s) {
if (!s.trim().isEmpty()) {
AGERET = Byte.parseByte(s);
} else {
AGERET = Byte.MIN_VALUE;
}
}

protected final void initAGLQUIT(String s) {
if (!s.trim().isEmpty()) {
AGLQUIT = Byte.parseByte(s);
} else {
AGLQUIT = Byte.MIN_VALUE;
}
}

protected final void initAHVWELL(String s) {
if (!s.trim().isEmpty()) {
AHVWELL = Byte.parseByte(s);
} else {
AHVWELL = Byte.MIN_VALUE;
}
}

protected final void initAIDEFT(String s) {
if (!s.trim().isEmpty()) {
AIDEFT = Byte.parseByte(s);
} else {
AIDEFT = Byte.MIN_VALUE;
}
}

protected final void initAIDHU1(String s) {
if (!s.trim().isEmpty()) {
AIDHU1 = Short.parseShort(s);
} else {
AIDHU1 = Short.MIN_VALUE;
}
}

protected final void initAIDHU2(String s) {
if (!s.trim().isEmpty()) {
AIDHU2 = Short.parseShort(s);
} else {
AIDHU2 = Short.MIN_VALUE;
}
}

protected final void initAIDHUA1(String s) {
if (!s.trim().isEmpty()) {
AIDHUA1 = Byte.parseByte(s);
} else {
AIDHUA1 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA10(String s) {
if (!s.trim().isEmpty()) {
AIDHUA10 = Byte.parseByte(s);
} else {
AIDHUA10 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA11(String s) {
if (!s.trim().isEmpty()) {
AIDHUA11 = Byte.parseByte(s);
} else {
AIDHUA11 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA12(String s) {
if (!s.trim().isEmpty()) {
AIDHUA12 = Byte.parseByte(s);
} else {
AIDHUA12 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA13(String s) {
if (!s.trim().isEmpty()) {
AIDHUA13 = Byte.parseByte(s);
} else {
AIDHUA13 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA14(String s) {
if (!s.trim().isEmpty()) {
AIDHUA14 = Byte.parseByte(s);
} else {
AIDHUA14 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA15(String s) {
if (!s.trim().isEmpty()) {
AIDHUA15 = Byte.parseByte(s);
} else {
AIDHUA15 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA16(String s) {
if (!s.trim().isEmpty()) {
AIDHUA16 = Byte.parseByte(s);
} else {
AIDHUA16 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA2(String s) {
if (!s.trim().isEmpty()) {
AIDHUA2 = Byte.parseByte(s);
} else {
AIDHUA2 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA3(String s) {
if (!s.trim().isEmpty()) {
AIDHUA3 = Byte.parseByte(s);
} else {
AIDHUA3 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA4(String s) {
if (!s.trim().isEmpty()) {
AIDHUA4 = Byte.parseByte(s);
} else {
AIDHUA4 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA5(String s) {
if (!s.trim().isEmpty()) {
AIDHUA5 = Byte.parseByte(s);
} else {
AIDHUA5 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA6(String s) {
if (!s.trim().isEmpty()) {
AIDHUA6 = Byte.parseByte(s);
} else {
AIDHUA6 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA7(String s) {
if (!s.trim().isEmpty()) {
AIDHUA7 = Byte.parseByte(s);
} else {
AIDHUA7 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA8(String s) {
if (!s.trim().isEmpty()) {
AIDHUA8 = Byte.parseByte(s);
} else {
AIDHUA8 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA9(String s) {
if (!s.trim().isEmpty()) {
AIDHUA9 = Byte.parseByte(s);
} else {
AIDHUA9 = Byte.MIN_VALUE;
}
}

protected final void initALLCH01(String s) {
if (!s.trim().isEmpty()) {
ALLCH01 = Byte.parseByte(s);
} else {
ALLCH01 = Byte.MIN_VALUE;
}
}

protected final void initALLCH02(String s) {
if (!s.trim().isEmpty()) {
ALLCH02 = Byte.parseByte(s);
} else {
ALLCH02 = Byte.MIN_VALUE;
}
}

protected final void initALLCH03(String s) {
if (!s.trim().isEmpty()) {
ALLCH03 = Byte.parseByte(s);
} else {
ALLCH03 = Byte.MIN_VALUE;
}
}

protected final void initALLCH04(String s) {
if (!s.trim().isEmpty()) {
ALLCH04 = Byte.parseByte(s);
} else {
ALLCH04 = Byte.MIN_VALUE;
}
}

protected final void initALLCH05(String s) {
if (!s.trim().isEmpty()) {
ALLCH05 = Byte.parseByte(s);
} else {
ALLCH05 = Byte.MIN_VALUE;
}
}

protected final void initALLCH06(String s) {
if (!s.trim().isEmpty()) {
ALLCH06 = Byte.parseByte(s);
} else {
ALLCH06 = Byte.MIN_VALUE;
}
}

protected final void initALLCH07(String s) {
if (!s.trim().isEmpty()) {
ALLCH07 = Byte.parseByte(s);
} else {
ALLCH07 = Byte.MIN_VALUE;
}
}

protected final void initALLCH08(String s) {
if (!s.trim().isEmpty()) {
ALLCH08 = Byte.parseByte(s);
} else {
ALLCH08 = Byte.MIN_VALUE;
}
}

protected final void initALLCH09(String s) {
if (!s.trim().isEmpty()) {
ALLCH09 = Byte.parseByte(s);
} else {
ALLCH09 = Byte.MIN_VALUE;
}
}

protected final void initALLCH10(String s) {
if (!s.trim().isEmpty()) {
ALLCH10 = Byte.parseByte(s);
} else {
ALLCH10 = Byte.MIN_VALUE;
}
}

protected final void initALLCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH11 = false;
} else {
ALLCH11 = true;
}
}
}

protected final void initALLCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH12 = false;
} else {
ALLCH12 = true;
}
}
}

protected final void initALLCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH13 = false;
} else {
ALLCH13 = true;
}
}
}

protected final void initALLCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH14 = false;
} else {
ALLCH14 = true;
}
}
}

protected final void initALLCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH15 = false;
} else {
ALLCH15 = true;
}
}
}

protected final void initALLCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH16 = false;
} else {
ALLCH16 = true;
}
}
}

protected final void initANYMORE(String s) {
if (!s.trim().isEmpty()) {
ANYMORE = Byte.parseByte(s);
} else {
ANYMORE = Byte.MIN_VALUE;
}
}

protected final void initANYMORE2(String s) {
if (!s.trim().isEmpty()) {
ANYMORE2 = Byte.parseByte(s);
} else {
ANYMORE2 = Byte.MIN_VALUE;
}
}

protected final void initANYMORE3(String s) {
if (!s.trim().isEmpty()) {
ANYMORE3 = Byte.parseByte(s);
} else {
ANYMORE3 = Byte.MIN_VALUE;
}
}

protected final void initANYMORE4(String s) {
if (!s.trim().isEmpty()) {
ANYMORE4 = Byte.parseByte(s);
} else {
ANYMORE4 = Byte.MIN_VALUE;
}
}

protected final void initAPVOCIMP(String s) {
if (!s.trim().isEmpty()) {
APVOCIMP = Byte.parseByte(s);
} else {
APVOCIMP = Byte.MIN_VALUE;
}
}

protected final void initARCFREQ(String s) {
if (!s.trim().isEmpty()) {
ARCFREQ = Byte.parseByte(s);
} else {
ARCFREQ = Byte.MIN_VALUE;
}
}

protected final void initAREA(String s) {
if (!s.trim().isEmpty()) {
AREA = Byte.parseByte(s);
} else {
AREA = Byte.MIN_VALUE;
}
}

protected final void initARGF(String s) {
if (!s.trim().isEmpty()) {
ARGF = Byte.parseByte(s);
} else {
ARGF = Byte.MIN_VALUE;
}
}

protected final void initARGM(String s) {
if (!s.trim().isEmpty()) {
ARGM = Byte.parseByte(s);
} else {
ARGM = Byte.MIN_VALUE;
}
}

protected final void initARTS1A1(String s) {
if (!s.trim().isEmpty()) {
ARTS1A1 = Byte.parseByte(s);
} else {
ARTS1A1 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A2(String s) {
if (!s.trim().isEmpty()) {
ARTS1A2 = Byte.parseByte(s);
} else {
ARTS1A2 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A3(String s) {
if (!s.trim().isEmpty()) {
ARTS1A3 = Byte.parseByte(s);
} else {
ARTS1A3 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A4(String s) {
if (!s.trim().isEmpty()) {
ARTS1A4 = Byte.parseByte(s);
} else {
ARTS1A4 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A5(String s) {
if (!s.trim().isEmpty()) {
ARTS1A5 = Byte.parseByte(s);
} else {
ARTS1A5 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A6(String s) {
if (!s.trim().isEmpty()) {
ARTS1A6 = Byte.parseByte(s);
} else {
ARTS1A6 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A7(String s) {
if (!s.trim().isEmpty()) {
ARTS1A7 = Byte.parseByte(s);
} else {
ARTS1A7 = Byte.MIN_VALUE;
}
}

protected final void initARTS1A96(String s) {
if (!s.trim().isEmpty()) {
ARTS1A96 = Byte.parseByte(s);
} else {
ARTS1A96 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B10(String s) {
if (!s.trim().isEmpty()) {
ARTS1B10 = Byte.parseByte(s);
} else {
ARTS1B10 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B11(String s) {
if (!s.trim().isEmpty()) {
ARTS1B11 = Byte.parseByte(s);
} else {
ARTS1B11 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B12(String s) {
if (!s.trim().isEmpty()) {
ARTS1B12 = Byte.parseByte(s);
} else {
ARTS1B12 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B13(String s) {
if (!s.trim().isEmpty()) {
ARTS1B13 = Byte.parseByte(s);
} else {
ARTS1B13 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B14(String s) {
if (!s.trim().isEmpty()) {
ARTS1B14 = Byte.parseByte(s);
} else {
ARTS1B14 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B15(String s) {
if (!s.trim().isEmpty()) {
ARTS1B15 = Byte.parseByte(s);
} else {
ARTS1B15 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B9(String s) {
if (!s.trim().isEmpty()) {
ARTS1B9 = Byte.parseByte(s);
} else {
ARTS1B9 = Byte.MIN_VALUE;
}
}

protected final void initARTS1B96(String s) {
if (!s.trim().isEmpty()) {
ARTS1B96 = Byte.parseByte(s);
} else {
ARTS1B96 = Byte.MIN_VALUE;
}
}

protected final void initARTS1FREQ(String s) {
if (!s.trim().isEmpty()) {
ARTS1FREQ = Byte.parseByte(s);
} else {
ARTS1FREQ = Byte.MIN_VALUE;
}
}

protected final void initARTS2A1(String s) {
if (!s.trim().isEmpty()) {
ARTS2A1 = Byte.parseByte(s);
} else {
ARTS2A1 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A2(String s) {
if (!s.trim().isEmpty()) {
ARTS2A2 = Byte.parseByte(s);
} else {
ARTS2A2 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A3(String s) {
if (!s.trim().isEmpty()) {
ARTS2A3 = Byte.parseByte(s);
} else {
ARTS2A3 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A4(String s) {
if (!s.trim().isEmpty()) {
ARTS2A4 = Byte.parseByte(s);
} else {
ARTS2A4 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A5(String s) {
if (!s.trim().isEmpty()) {
ARTS2A5 = Byte.parseByte(s);
} else {
ARTS2A5 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A6(String s) {
if (!s.trim().isEmpty()) {
ARTS2A6 = Byte.parseByte(s);
} else {
ARTS2A6 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A7(String s) {
if (!s.trim().isEmpty()) {
ARTS2A7 = Byte.parseByte(s);
} else {
ARTS2A7 = Byte.MIN_VALUE;
}
}

protected final void initARTS2A96(String s) {
if (!s.trim().isEmpty()) {
ARTS2A96 = Byte.parseByte(s);
} else {
ARTS2A96 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B10(String s) {
if (!s.trim().isEmpty()) {
ARTS2B10 = Byte.parseByte(s);
} else {
ARTS2B10 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B11(String s) {
if (!s.trim().isEmpty()) {
ARTS2B11 = Byte.parseByte(s);
} else {
ARTS2B11 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B12(String s) {
if (!s.trim().isEmpty()) {
ARTS2B12 = Byte.parseByte(s);
} else {
ARTS2B12 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B13(String s) {
if (!s.trim().isEmpty()) {
ARTS2B13 = Byte.parseByte(s);
} else {
ARTS2B13 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B14(String s) {
if (!s.trim().isEmpty()) {
ARTS2B14 = Byte.parseByte(s);
} else {
ARTS2B14 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B15(String s) {
if (!s.trim().isEmpty()) {
ARTS2B15 = Byte.parseByte(s);
} else {
ARTS2B15 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B9(String s) {
if (!s.trim().isEmpty()) {
ARTS2B9 = Byte.parseByte(s);
} else {
ARTS2B9 = Byte.MIN_VALUE;
}
}

protected final void initARTS2B96(String s) {
if (!s.trim().isEmpty()) {
ARTS2B96 = Byte.parseByte(s);
} else {
ARTS2B96 = Byte.MIN_VALUE;
}
}

protected final void initARTS2FREQ(String s) {
if (!s.trim().isEmpty()) {
ARTS2FREQ = Byte.parseByte(s);
} else {
ARTS2FREQ = Byte.MIN_VALUE;
}
}

protected final void initATTACKED1(String s) {
if (!s.trim().isEmpty()) {
ATTACKED1 = Byte.parseByte(s);
} else {
ATTACKED1 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED10(String s) {
if (!s.trim().isEmpty()) {
ATTACKED10 = Byte.parseByte(s);
} else {
ATTACKED10 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED11(String s) {
if (!s.trim().isEmpty()) {
ATTACKED11 = Byte.parseByte(s);
} else {
ATTACKED11 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED2(String s) {
if (!s.trim().isEmpty()) {
ATTACKED2 = Byte.parseByte(s);
} else {
ATTACKED2 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED3(String s) {
if (!s.trim().isEmpty()) {
ATTACKED3 = Byte.parseByte(s);
} else {
ATTACKED3 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED4(String s) {
if (!s.trim().isEmpty()) {
ATTACKED4 = Byte.parseByte(s);
} else {
ATTACKED4 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED5(String s) {
if (!s.trim().isEmpty()) {
ATTACKED5 = Byte.parseByte(s);
} else {
ATTACKED5 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED6(String s) {
if (!s.trim().isEmpty()) {
ATTACKED6 = Byte.parseByte(s);
} else {
ATTACKED6 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED7(String s) {
if (!s.trim().isEmpty()) {
ATTACKED7 = Byte.parseByte(s);
} else {
ATTACKED7 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED8(String s) {
if (!s.trim().isEmpty()) {
ATTACKED8 = Byte.parseByte(s);
} else {
ATTACKED8 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED9(String s) {
if (!s.trim().isEmpty()) {
ATTACKED9 = Byte.parseByte(s);
} else {
ATTACKED9 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED96(String s) {
if (!s.trim().isEmpty()) {
ATTACKED96 = Byte.parseByte(s);
} else {
ATTACKED96 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED97(String s) {
if (!s.trim().isEmpty()) {
ATTACKED97 = Byte.parseByte(s);
} else {
ATTACKED97 = Byte.MIN_VALUE;
}
}

protected final void initATTACKEDO_CODE(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDO_CODE = Byte.parseByte(s);
} else {
ATTACKEDO_CODE = Byte.MIN_VALUE;
}
}

protected final void initATTACKED_DV(String s) {
if (!s.trim().isEmpty()) {
ATTACKED_DV = Byte.parseByte(s);
} else {
ATTACKED_DV = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE1(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE1 = Byte.parseByte(s);
} else {
AVOIDANCE1 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE10(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE10 = Byte.parseByte(s);
} else {
AVOIDANCE10 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE11(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE11 = Byte.parseByte(s);
} else {
AVOIDANCE11 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE2(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE2 = Byte.parseByte(s);
} else {
AVOIDANCE2 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE3(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE3 = Byte.parseByte(s);
} else {
AVOIDANCE3 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE4(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE4 = Byte.parseByte(s);
} else {
AVOIDANCE4 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE5(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE5 = Byte.parseByte(s);
} else {
AVOIDANCE5 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE6(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE6 = Byte.parseByte(s);
} else {
AVOIDANCE6 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE7(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE7 = Byte.parseByte(s);
} else {
AVOIDANCE7 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE8(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE8 = Byte.parseByte(s);
} else {
AVOIDANCE8 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE9(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE9 = Byte.parseByte(s);
} else {
AVOIDANCE9 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE96(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE96 = Byte.parseByte(s);
} else {
AVOIDANCE96 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE97(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE97 = Byte.parseByte(s);
} else {
AVOIDANCE97 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEO_CODE(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEO_CODE = Byte.parseByte(s);
} else {
AVOIDANCEO_CODE = Byte.MIN_VALUE;
}
}

protected final void initAVOIDED_DV(String s) {
if (!s.trim().isEmpty()) {
AVOIDED_DV = Byte.parseByte(s);
} else {
AVOIDED_DV = Byte.MIN_VALUE;
}
}

protected final void initBASNSA(String s) {
if (!s.trim().isEmpty()) {
BASNSA = Double.parseDouble(s);
} else {
BASNSA = Double.NaN;
}
}

protected final void initBASRATE(String s) {
if (!s.trim().isEmpty()) {
BASRATE = Double.parseDouble(s);
} else {
BASRATE = Double.NaN;
}
}

protected final void initBASREST(String s) {
if (!s.trim().isEmpty()) {
BASREST = Byte.parseByte(s);
} else {
BASREST = Byte.MIN_VALUE;
}
}

protected final void initBENCB(String s) {
if (!s.trim().isEmpty()) {
BENCB = Byte.parseByte(s);
} else {
BENCB = Byte.MIN_VALUE;
}
}

protected final void initBENCTC(String s) {
if (!s.trim().isEmpty()) {
BENCTC = Byte.parseByte(s);
} else {
BENCTC = Byte.MIN_VALUE;
}
}

protected final void initBENDIS1(String s) {
if (!s.trim().isEmpty()) {
BENDIS1 = Byte.parseByte(s);
} else {
BENDIS1 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS10(String s) {
if (!s.trim().isEmpty()) {
BENDIS10 = Byte.parseByte(s);
} else {
BENDIS10 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS11(String s) {
if (!s.trim().isEmpty()) {
BENDIS11 = Byte.parseByte(s);
} else {
BENDIS11 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS12(String s) {
if (!s.trim().isEmpty()) {
BENDIS12 = Byte.parseByte(s);
} else {
BENDIS12 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS2(String s) {
if (!s.trim().isEmpty()) {
BENDIS2 = Byte.parseByte(s);
} else {
BENDIS2 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS3(String s) {
if (!s.trim().isEmpty()) {
BENDIS3 = Byte.parseByte(s);
} else {
BENDIS3 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS4(String s) {
if (!s.trim().isEmpty()) {
BENDIS4 = Byte.parseByte(s);
} else {
BENDIS4 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS5(String s) {
if (!s.trim().isEmpty()) {
BENDIS5 = Byte.parseByte(s);
} else {
BENDIS5 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS6(String s) {
if (!s.trim().isEmpty()) {
BENDIS6 = Byte.parseByte(s);
} else {
BENDIS6 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS7(String s) {
if (!s.trim().isEmpty()) {
BENDIS7 = Byte.parseByte(s);
} else {
BENDIS7 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS8(String s) {
if (!s.trim().isEmpty()) {
BENDIS8 = Byte.parseByte(s);
} else {
BENDIS8 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS9(String s) {
if (!s.trim().isEmpty()) {
BENDIS9 = Byte.parseByte(s);
} else {
BENDIS9 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS96(String s) {
if (!s.trim().isEmpty()) {
BENDIS96 = Byte.parseByte(s);
} else {
BENDIS96 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS97(String s) {
if (!s.trim().isEmpty()) {
BENDIS97 = Byte.parseByte(s);
} else {
BENDIS97 = Byte.MIN_VALUE;
}
}

protected final void initBENESA(String s) {
if (!s.trim().isEmpty()) {
BENESA = Byte.parseByte(s);
} else {
BENESA = Byte.MIN_VALUE;
}
}

protected final void initBENFAM1(String s) {
if (!s.trim().isEmpty()) {
BENFAM1 = Byte.parseByte(s);
} else {
BENFAM1 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM10(String s) {
if (!s.trim().isEmpty()) {
BENFAM10 = Byte.parseByte(s);
} else {
BENFAM10 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM2(String s) {
if (!s.trim().isEmpty()) {
BENFAM2 = Byte.parseByte(s);
} else {
BENFAM2 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM3(String s) {
if (!s.trim().isEmpty()) {
BENFAM3 = Byte.parseByte(s);
} else {
BENFAM3 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM4(String s) {
if (!s.trim().isEmpty()) {
BENFAM4 = Byte.parseByte(s);
} else {
BENFAM4 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM5(String s) {
if (!s.trim().isEmpty()) {
BENFAM5 = Byte.parseByte(s);
} else {
BENFAM5 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM6(String s) {
if (!s.trim().isEmpty()) {
BENFAM6 = Byte.parseByte(s);
} else {
BENFAM6 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM7(String s) {
if (!s.trim().isEmpty()) {
BENFAM7 = Byte.parseByte(s);
} else {
BENFAM7 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM8(String s) {
if (!s.trim().isEmpty()) {
BENFAM8 = Byte.parseByte(s);
} else {
BENFAM8 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM9(String s) {
if (!s.trim().isEmpty()) {
BENFAM9 = Byte.parseByte(s);
} else {
BENFAM9 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM96(String s) {
if (!s.trim().isEmpty()) {
BENFAM96 = Byte.parseByte(s);
} else {
BENFAM96 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU1(String s) {
if (!s.trim().isEmpty()) {
BENHOU1 = Byte.parseByte(s);
} else {
BENHOU1 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU2(String s) {
if (!s.trim().isEmpty()) {
BENHOU2 = Byte.parseByte(s);
} else {
BENHOU2 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU3(String s) {
if (!s.trim().isEmpty()) {
BENHOU3 = Byte.parseByte(s);
} else {
BENHOU3 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU4(String s) {
if (!s.trim().isEmpty()) {
BENHOU4 = Byte.parseByte(s);
} else {
BENHOU4 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU5(String s) {
if (!s.trim().isEmpty()) {
BENHOU5 = Byte.parseByte(s);
} else {
BENHOU5 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU6(String s) {
if (!s.trim().isEmpty()) {
BENHOU6 = Byte.parseByte(s);
} else {
BENHOU6 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU7(String s) {
if (!s.trim().isEmpty()) {
BENHOU7 = Byte.parseByte(s);
} else {
BENHOU7 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU8(String s) {
if (!s.trim().isEmpty()) {
BENHOU8 = Byte.parseByte(s);
} else {
BENHOU8 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU9(String s) {
if (!s.trim().isEmpty()) {
BENHOU9 = Byte.parseByte(s);
} else {
BENHOU9 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU96(String s) {
if (!s.trim().isEmpty()) {
BENHOU96 = Byte.parseByte(s);
} else {
BENHOU96 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN1(String s) {
if (!s.trim().isEmpty()) {
BENPEN1 = Byte.parseByte(s);
} else {
BENPEN1 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN10(String s) {
if (!s.trim().isEmpty()) {
BENPEN10 = Byte.parseByte(s);
} else {
BENPEN10 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN11(String s) {
if (!s.trim().isEmpty()) {
BENPEN11 = Byte.parseByte(s);
} else {
BENPEN11 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN12(String s) {
if (!s.trim().isEmpty()) {
BENPEN12 = Byte.parseByte(s);
} else {
BENPEN12 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN13(String s) {
if (!s.trim().isEmpty()) {
BENPEN13 = Byte.parseByte(s);
} else {
BENPEN13 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN2(String s) {
if (!s.trim().isEmpty()) {
BENPEN2 = Byte.parseByte(s);
} else {
BENPEN2 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN3(String s) {
if (!s.trim().isEmpty()) {
BENPEN3 = Byte.parseByte(s);
} else {
BENPEN3 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN4(String s) {
if (!s.trim().isEmpty()) {
BENPEN4 = Byte.parseByte(s);
} else {
BENPEN4 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN5(String s) {
if (!s.trim().isEmpty()) {
BENPEN5 = Byte.parseByte(s);
} else {
BENPEN5 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN6(String s) {
if (!s.trim().isEmpty()) {
BENPEN6 = Byte.parseByte(s);
} else {
BENPEN6 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN7(String s) {
if (!s.trim().isEmpty()) {
BENPEN7 = Byte.parseByte(s);
} else {
BENPEN7 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN8(String s) {
if (!s.trim().isEmpty()) {
BENPEN8 = Byte.parseByte(s);
} else {
BENPEN8 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN96(String s) {
if (!s.trim().isEmpty()) {
BENPEN96 = Byte.parseByte(s);
} else {
BENPEN96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA1(String s) {
if (!s.trim().isEmpty()) {
BENSTA1 = Byte.parseByte(s);
} else {
BENSTA1 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA10(String s) {
if (!s.trim().isEmpty()) {
BENSTA10 = Byte.parseByte(s);
} else {
BENSTA10 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA11(String s) {
if (!s.trim().isEmpty()) {
BENSTA11 = Byte.parseByte(s);
} else {
BENSTA11 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA12(String s) {
if (!s.trim().isEmpty()) {
BENSTA12 = Byte.parseByte(s);
} else {
BENSTA12 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA13(String s) {
if (!s.trim().isEmpty()) {
BENSTA13 = Byte.parseByte(s);
} else {
BENSTA13 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA2(String s) {
if (!s.trim().isEmpty()) {
BENSTA2 = Byte.parseByte(s);
} else {
BENSTA2 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA3(String s) {
if (!s.trim().isEmpty()) {
BENSTA3 = Byte.parseByte(s);
} else {
BENSTA3 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA4(String s) {
if (!s.trim().isEmpty()) {
BENSTA4 = Byte.parseByte(s);
} else {
BENSTA4 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA5(String s) {
if (!s.trim().isEmpty()) {
BENSTA5 = Byte.parseByte(s);
} else {
BENSTA5 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA6(String s) {
if (!s.trim().isEmpty()) {
BENSTA6 = Byte.parseByte(s);
} else {
BENSTA6 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA7(String s) {
if (!s.trim().isEmpty()) {
BENSTA7 = Byte.parseByte(s);
} else {
BENSTA7 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA9(String s) {
if (!s.trim().isEmpty()) {
BENSTA9 = Byte.parseByte(s);
} else {
BENSTA9 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA96(String s) {
if (!s.trim().isEmpty()) {
BENSTA96 = Byte.parseByte(s);
} else {
BENSTA96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA97(String s) {
if (!s.trim().isEmpty()) {
BENSTA97 = Byte.parseByte(s);
} else {
BENSTA97 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX1(String s) {
if (!s.trim().isEmpty()) {
BENTAX1 = Byte.parseByte(s);
} else {
BENTAX1 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX10(String s) {
if (!s.trim().isEmpty()) {
BENTAX10 = Byte.parseByte(s);
} else {
BENTAX10 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX2(String s) {
if (!s.trim().isEmpty()) {
BENTAX2 = Byte.parseByte(s);
} else {
BENTAX2 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX3(String s) {
if (!s.trim().isEmpty()) {
BENTAX3 = Byte.parseByte(s);
} else {
BENTAX3 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX4(String s) {
if (!s.trim().isEmpty()) {
BENTAX4 = Byte.parseByte(s);
} else {
BENTAX4 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX5(String s) {
if (!s.trim().isEmpty()) {
BENTAX5 = Byte.parseByte(s);
} else {
BENTAX5 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX7(String s) {
if (!s.trim().isEmpty()) {
BENTAX7 = Byte.parseByte(s);
} else {
BENTAX7 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX8(String s) {
if (!s.trim().isEmpty()) {
BENTAX8 = Byte.parseByte(s);
} else {
BENTAX8 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX9(String s) {
if (!s.trim().isEmpty()) {
BENTAX9 = Byte.parseByte(s);
} else {
BENTAX9 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX96(String s) {
if (!s.trim().isEmpty()) {
BENTAX96 = Byte.parseByte(s);
} else {
BENTAX96 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP1(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP1 = Byte.parseByte(s);
} else {
BENUNEMP1 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP2(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP2 = Byte.parseByte(s);
} else {
BENUNEMP2 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP3(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP3 = Byte.parseByte(s);
} else {
BENUNEMP3 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP4(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP4 = Byte.parseByte(s);
} else {
BENUNEMP4 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP5(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP5 = Byte.parseByte(s);
} else {
BENUNEMP5 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP6(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP6 = Byte.parseByte(s);
} else {
BENUNEMP6 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP7(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP7 = Byte.parseByte(s);
} else {
BENUNEMP7 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP96(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP96 = Byte.parseByte(s);
} else {
BENUNEMP96 = Byte.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBOSSETHN(String s) {
if (!s.trim().isEmpty()) {
BOSSETHN = Byte.parseByte(s);
} else {
BOSSETHN = Byte.MIN_VALUE;
}
}

protected final void initBOSSSEX(String s) {
if (!s.trim().isEmpty()) {
BOSSSEX = Byte.parseByte(s);
} else {
BOSSSEX = Byte.MIN_VALUE;
}
}

protected final void initBTYPE1(String s) {
if (!s.trim().isEmpty()) {
BTYPE1 = Byte.parseByte(s);
} else {
BTYPE1 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE10(String s) {
if (!s.trim().isEmpty()) {
BTYPE10 = Byte.parseByte(s);
} else {
BTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE2(String s) {
if (!s.trim().isEmpty()) {
BTYPE2 = Byte.parseByte(s);
} else {
BTYPE2 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE3(String s) {
if (!s.trim().isEmpty()) {
BTYPE3 = Byte.parseByte(s);
} else {
BTYPE3 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE4(String s) {
if (!s.trim().isEmpty()) {
BTYPE4 = Byte.parseByte(s);
} else {
BTYPE4 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE5(String s) {
if (!s.trim().isEmpty()) {
BTYPE5 = Byte.parseByte(s);
} else {
BTYPE5 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE6(String s) {
if (!s.trim().isEmpty()) {
BTYPE6 = Byte.parseByte(s);
} else {
BTYPE6 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE7(String s) {
if (!s.trim().isEmpty()) {
BTYPE7 = Byte.parseByte(s);
} else {
BTYPE7 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE8(String s) {
if (!s.trim().isEmpty()) {
BTYPE8 = Byte.parseByte(s);
} else {
BTYPE8 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE9(String s) {
if (!s.trim().isEmpty()) {
BTYPE9 = Byte.parseByte(s);
} else {
BTYPE9 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE96(String s) {
if (!s.trim().isEmpty()) {
BTYPE96 = Byte.parseByte(s);
} else {
BTYPE96 = Byte.MIN_VALUE;
}
}

protected final void initBUNO_DV(String s) {
if (!s.trim().isEmpty()) {
BUNO_DV = Byte.parseByte(s);
} else {
BUNO_DV = Byte.MIN_VALUE;
}
}

protected final void initCAIDU1(String s) {
if (!s.trim().isEmpty()) {
CAIDU1 = Byte.parseByte(s);
} else {
CAIDU1 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU2(String s) {
if (!s.trim().isEmpty()) {
CAIDU2 = Byte.parseByte(s);
} else {
CAIDU2 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU3(String s) {
if (!s.trim().isEmpty()) {
CAIDU3 = Byte.parseByte(s);
} else {
CAIDU3 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU4(String s) {
if (!s.trim().isEmpty()) {
CAIDU4 = Byte.parseByte(s);
} else {
CAIDU4 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU5(String s) {
if (!s.trim().isEmpty()) {
CAIDU5 = Byte.parseByte(s);
} else {
CAIDU5 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU6(String s) {
if (!s.trim().isEmpty()) {
CAIDU6 = Byte.parseByte(s);
} else {
CAIDU6 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU7(String s) {
if (!s.trim().isEmpty()) {
CAIDU7 = Byte.parseByte(s);
} else {
CAIDU7 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU8(String s) {
if (!s.trim().isEmpty()) {
CAIDU8 = Byte.parseByte(s);
} else {
CAIDU8 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU96(String s) {
if (!s.trim().isEmpty()) {
CAIDU96 = Byte.parseByte(s);
} else {
CAIDU96 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU97(String s) {
if (!s.trim().isEmpty()) {
CAIDU97 = Byte.parseByte(s);
} else {
CAIDU97 = Byte.MIN_VALUE;
}
}

protected final void initCAPGIFTV(String s) {
if (!s.trim().isEmpty()) {
CAPGIFTV = Byte.parseByte(s);
} else {
CAPGIFTV = Byte.MIN_VALUE;
}
}

protected final void initCASIEND(String s) {
if (!s.trim().isEmpty()) {
CASIEND = Byte.parseByte(s);
} else {
CASIEND = Byte.MIN_VALUE;
}
}

protected final void initCATGIFTV(String s) {
if (!s.trim().isEmpty()) {
CATGIFTV = Byte.parseByte(s);
} else {
CATGIFTV = Byte.MIN_VALUE;
}
}

protected final void initCATVOUCHER(String s) {
if (!s.trim().isEmpty()) {
CATVOUCHER = Byte.parseByte(s);
} else {
CATVOUCHER = Byte.MIN_VALUE;
}
}

protected final void initCCARE(String s) {
if (!s.trim().isEmpty()) {
CCARE = Byte.parseByte(s);
} else {
CCARE = Byte.MIN_VALUE;
}
}

protected final void initCCWORK(String s) {
if (!s.trim().isEmpty()) {
CCWORK = Byte.parseByte(s);
} else {
CCWORK = Byte.MIN_VALUE;
}
}

protected final void initCDPREAMBLE(String s) {
if (!s.trim().isEmpty()) {
CDPREAMBLE = Byte.parseByte(s);
} else {
CDPREAMBLE = Byte.MIN_VALUE;
}
}

protected final void initCH1BY4(String s) {
if (!s.trim().isEmpty()) {
CH1BY4 = Short.parseShort(s);
} else {
CH1BY4 = Short.MIN_VALUE;
}
}

protected final void initCHAID1(String s) {
if (!s.trim().isEmpty()) {
CHAID1 = Byte.parseByte(s);
} else {
CHAID1 = Byte.MIN_VALUE;
}
}

protected final void initCHAID2(String s) {
if (!s.trim().isEmpty()) {
CHAID2 = Byte.parseByte(s);
} else {
CHAID2 = Byte.MIN_VALUE;
}
}

protected final void initCHAID3(String s) {
if (!s.trim().isEmpty()) {
CHAID3 = Byte.parseByte(s);
} else {
CHAID3 = Byte.MIN_VALUE;
}
}

protected final void initCHAID4(String s) {
if (!s.trim().isEmpty()) {
CHAID4 = Byte.parseByte(s);
} else {
CHAID4 = Byte.MIN_VALUE;
}
}

protected final void initCHAID5(String s) {
if (!s.trim().isEmpty()) {
CHAID5 = Byte.parseByte(s);
} else {
CHAID5 = Byte.MIN_VALUE;
}
}

protected final void initCHAID6(String s) {
if (!s.trim().isEmpty()) {
CHAID6 = Byte.parseByte(s);
} else {
CHAID6 = Byte.MIN_VALUE;
}
}

protected final void initCHAID7(String s) {
if (!s.trim().isEmpty()) {
CHAID7 = Byte.parseByte(s);
} else {
CHAID7 = Byte.MIN_VALUE;
}
}

protected final void initCHAID8(String s) {
if (!s.trim().isEmpty()) {
CHAID8 = Byte.parseByte(s);
} else {
CHAID8 = Byte.MIN_VALUE;
}
}

protected final void initCHAID96(String s) {
if (!s.trim().isEmpty()) {
CHAID96 = Byte.parseByte(s);
} else {
CHAID96 = Byte.MIN_VALUE;
}
}

protected final void initCHAID97(String s) {
if (!s.trim().isEmpty()) {
CHAID97 = Byte.parseByte(s);
} else {
CHAID97 = Byte.MIN_VALUE;
}
}

protected final void initCHCON(String s) {
if (!s.trim().isEmpty()) {
CHCON = Byte.parseByte(s);
} else {
CHCON = Byte.MIN_VALUE;
}
}

protected final void initCHFAR(String s) {
if (!s.trim().isEmpty()) {
CHFAR = Byte.parseByte(s);
} else {
CHFAR = Byte.MIN_VALUE;
}
}

protected final void initCHILDPNO(String s) {
if (!s.trim().isEmpty()) {
CHILDPNO = Byte.parseByte(s);
} else {
CHILDPNO = Byte.MIN_VALUE;
}
}

protected final void initCHKCOA(String s) {
if (!s.trim().isEmpty()) {
CHKCOA = Byte.parseByte(s);
} else {
CHKCOA = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP(String s) {
if (!s.trim().isEmpty()) {
CHKRESP = Byte.parseByte(s);
} else {
CHKRESP = Byte.MIN_VALUE;
}
}

protected final void initCHSEE(String s) {
if (!s.trim().isEmpty()) {
CHSEE = Byte.parseByte(s);
} else {
CHSEE = Byte.MIN_VALUE;
}
}

protected final void initCINDTIME(String s) {
if (!s.trim().isEmpty()) {
CINDTIME = Integer.parseInt(s);
} else {
CINDTIME = Integer.MIN_VALUE;
}
}

protected final void initCITZN1(String s) {
if (!s.trim().isEmpty()) {
CITZN1 = Byte.parseByte(s);
} else {
CITZN1 = Byte.MIN_VALUE;
}
}

protected final void initCITZN2(String s) {
if (!s.trim().isEmpty()) {
CITZN2 = Byte.parseByte(s);
} else {
CITZN2 = Byte.MIN_VALUE;
}
}

protected final void initCITZN3(String s) {
if (!s.trim().isEmpty()) {
CITZN3 = Byte.parseByte(s);
} else {
CITZN3 = Byte.MIN_VALUE;
}
}

protected final void initCJBATT(String s) {
if (!s.trim().isEmpty()) {
CJBATT = Byte.parseByte(s);
} else {
CJBATT = Byte.MIN_VALUE;
}
}

protected final void initCJOB(String s) {
if (!s.trim().isEmpty()) {
CJOB = Byte.parseByte(s);
} else {
CJOB = Byte.MIN_VALUE;
}
}

protected final void initCLUB(String s) {
if (!s.trim().isEmpty()) {
CLUB = Byte.parseByte(s);
} else {
CLUB = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO1(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO1 = Byte.parseByte(s);
} else {
CMCOKIDNO1 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO2(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO2 = Byte.parseByte(s);
} else {
CMCOKIDNO2 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO3(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO3 = Byte.parseByte(s);
} else {
CMCOKIDNO3 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO4(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO4 = Byte.parseByte(s);
} else {
CMCOKIDNO4 = Byte.MIN_VALUE;
}
}

protected final void initCMCOKIDNO5(String s) {
if (!s.trim().isEmpty()) {
CMCOKIDNO5 = Byte.parseByte(s);
} else {
CMCOKIDNO5 = Byte.MIN_VALUE;
}
}

protected final void initCMCORD(String s) {
if (!s.trim().isEmpty()) {
CMCORD = Byte.parseByte(s);
} else {
CMCORD = Byte.MIN_VALUE;
}
}

protected final void initCMCORDALL(String s) {
if (!s.trim().isEmpty()) {
CMCORDALL = Byte.parseByte(s);
} else {
CMCORDALL = Byte.MIN_VALUE;
}
}

protected final void initCMCORDAM(String s) {
if (!s.trim().isEmpty()) {
CMCORDAM = Double.parseDouble(s);
} else {
CMCORDAM = Double.NaN;
}
}

protected final void initCMCORDPER(String s) {
if (!s.trim().isEmpty()) {
CMCORDPER = Byte.parseByte(s);
} else {
CMCORDPER = Byte.MIN_VALUE;
}
}

protected final void initCMCORDRCAM(String s) {
if (!s.trim().isEmpty()) {
CMCORDRCAM = Short.parseShort(s);
} else {
CMCORDRCAM = Short.MIN_VALUE;
}
}

protected final void initCMCORDRCPR(String s) {
if (!s.trim().isEmpty()) {
CMCORDRCPR = Byte.parseByte(s);
} else {
CMCORDRCPR = Byte.MIN_VALUE;
}
}

protected final void initCMCORDREC(String s) {
if (!s.trim().isEmpty()) {
CMCORDREC = Byte.parseByte(s);
} else {
CMCORDREC = Byte.MIN_VALUE;
}
}

protected final void initCMCORDTM(String s) {
if (!s.trim().isEmpty()) {
CMCORDTM = Byte.parseByte(s);
} else {
CMCORDTM = Byte.MIN_VALUE;
}
}

protected final void initCMCSAACT(String s) {
if (!s.trim().isEmpty()) {
CMCSAACT = Byte.parseByte(s);
} else {
CMCSAACT = Byte.MIN_VALUE;
}
}

protected final void initCMCSAALL(String s) {
if (!s.trim().isEmpty()) {
CMCSAALL = Byte.parseByte(s);
} else {
CMCSAALL = Byte.MIN_VALUE;
}
}

protected final void initCMCSAAM(String s) {
if (!s.trim().isEmpty()) {
CMCSAAM = Short.parseShort(s);
} else {
CMCSAAM = Short.MIN_VALUE;
}
}

protected final void initCMCSANIL1(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL1 = Byte.parseByte(s);
} else {
CMCSANIL1 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL2(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL2 = Byte.parseByte(s);
} else {
CMCSANIL2 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL3(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL3 = Byte.parseByte(s);
} else {
CMCSANIL3 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL4(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL4 = Byte.parseByte(s);
} else {
CMCSANIL4 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL5(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL5 = Byte.parseByte(s);
} else {
CMCSANIL5 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL6(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL6 = Byte.parseByte(s);
} else {
CMCSANIL6 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL7(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL7 = Byte.parseByte(s);
} else {
CMCSANIL7 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL8(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL8 = Byte.parseByte(s);
} else {
CMCSANIL8 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL9(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL9 = Byte.parseByte(s);
} else {
CMCSANIL9 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL97(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL97 = Byte.parseByte(s);
} else {
CMCSANIL97 = Byte.MIN_VALUE;
}
}

protected final void initCMCSAPER(String s) {
if (!s.trim().isEmpty()) {
CMCSAPER = Byte.parseByte(s);
} else {
CMCSAPER = Byte.MIN_VALUE;
}
}

protected final void initCMCSAPR(String s) {
if (!s.trim().isEmpty()) {
CMCSAPR = Byte.parseByte(s);
} else {
CMCSAPR = Byte.MIN_VALUE;
}
}

protected final void initCMFLAG(String s) {
if (!s.trim().isEmpty()) {
CMFLAG = Byte.parseByte(s);
} else {
CMFLAG = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR1(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR1 = Byte.parseByte(s);
} else {
CMKNDEVR1 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR2(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR2 = Byte.parseByte(s);
} else {
CMKNDEVR2 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR3(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR3 = Byte.parseByte(s);
} else {
CMKNDEVR3 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR4(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR4 = Byte.parseByte(s);
} else {
CMKNDEVR4 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR96(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR96 = Byte.parseByte(s);
} else {
CMKNDEVR96 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR97(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR97 = Byte.parseByte(s);
} else {
CMKNDEVR97 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT1(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT1 = Byte.parseByte(s);
} else {
CMLSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT2(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT2 = Byte.parseByte(s);
} else {
CMLSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL1(String s) {
if (!s.trim().isEmpty()) {
CMNIL1 = Byte.parseByte(s);
} else {
CMNIL1 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL10(String s) {
if (!s.trim().isEmpty()) {
CMNIL10 = Byte.parseByte(s);
} else {
CMNIL10 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL2(String s) {
if (!s.trim().isEmpty()) {
CMNIL2 = Byte.parseByte(s);
} else {
CMNIL2 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL3(String s) {
if (!s.trim().isEmpty()) {
CMNIL3 = Byte.parseByte(s);
} else {
CMNIL3 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL4(String s) {
if (!s.trim().isEmpty()) {
CMNIL4 = Byte.parseByte(s);
} else {
CMNIL4 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL5(String s) {
if (!s.trim().isEmpty()) {
CMNIL5 = Byte.parseByte(s);
} else {
CMNIL5 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL6(String s) {
if (!s.trim().isEmpty()) {
CMNIL6 = Byte.parseByte(s);
} else {
CMNIL6 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL7(String s) {
if (!s.trim().isEmpty()) {
CMNIL7 = Byte.parseByte(s);
} else {
CMNIL7 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL8(String s) {
if (!s.trim().isEmpty()) {
CMNIL8 = Byte.parseByte(s);
} else {
CMNIL8 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL9(String s) {
if (!s.trim().isEmpty()) {
CMNIL9 = Byte.parseByte(s);
} else {
CMNIL9 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL97(String s) {
if (!s.trim().isEmpty()) {
CMNIL97 = Byte.parseByte(s);
} else {
CMNIL97 = Byte.MIN_VALUE;
}
}

protected final void initCMNKY1(String s) {
if (!s.trim().isEmpty()) {
CMNKY1 = Byte.parseByte(s);
} else {
CMNKY1 = Byte.MIN_VALUE;
}
}

protected final void initCMNKY2(String s) {
if (!s.trim().isEmpty()) {
CMNKY2 = Byte.parseByte(s);
} else {
CMNKY2 = Byte.MIN_VALUE;
}
}

protected final void initCMNKY3(String s) {
if (!s.trim().isEmpty()) {
CMNKY3 = Byte.parseByte(s);
} else {
CMNKY3 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY1(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY1 = Byte.parseByte(s);
} else {
CMOTHPAY1 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY10(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY10 = Byte.parseByte(s);
} else {
CMOTHPAY10 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY11(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY11 = Byte.parseByte(s);
} else {
CMOTHPAY11 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY2(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY2 = Byte.parseByte(s);
} else {
CMOTHPAY2 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY3(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY3 = Byte.parseByte(s);
} else {
CMOTHPAY3 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY4(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY4 = Byte.parseByte(s);
} else {
CMOTHPAY4 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY5(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY5 = Byte.parseByte(s);
} else {
CMOTHPAY5 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY6(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY6 = Byte.parseByte(s);
} else {
CMOTHPAY6 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY7(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY7 = Byte.parseByte(s);
} else {
CMOTHPAY7 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY8(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY8 = Byte.parseByte(s);
} else {
CMOTHPAY8 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY9(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY9 = Byte.parseByte(s);
} else {
CMOTHPAY9 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY96(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY96 = Byte.parseByte(s);
} else {
CMOTHPAY96 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY97(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY97 = Byte.parseByte(s);
} else {
CMOTHPAY97 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE(String s) {
if (!s.trim().isEmpty()) {
CMROUTE = Byte.parseByte(s);
} else {
CMROUTE = Byte.MIN_VALUE;
}
}

protected final void initCMSAMEA(String s) {
if (!s.trim().isEmpty()) {
CMSAMEA = Byte.parseByte(s);
} else {
CMSAMEA = Byte.MIN_VALUE;
}
}

protected final void initCMSAMEB(String s) {
if (!s.trim().isEmpty()) {
CMSAMEB = Byte.parseByte(s);
} else {
CMSAMEB = Byte.MIN_VALUE;
}
}

protected final void initCMSAMEC(String s) {
if (!s.trim().isEmpty()) {
CMSAMEC = Byte.parseByte(s);
} else {
CMSAMEC = Byte.MIN_VALUE;
}
}

protected final void initCMVOL(String s) {
if (!s.trim().isEmpty()) {
CMVOL = Byte.parseByte(s);
} else {
CMVOL = Byte.MIN_VALUE;
}
}

protected final void initCMVOLALL(String s) {
if (!s.trim().isEmpty()) {
CMVOLALL = Byte.parseByte(s);
} else {
CMVOLALL = Byte.MIN_VALUE;
}
}

protected final void initCMVOLAM(String s) {
if (!s.trim().isEmpty()) {
CMVOLAM = Double.parseDouble(s);
} else {
CMVOLAM = Double.NaN;
}
}

protected final void initCMVOLKIDNO1(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO1 = Byte.parseByte(s);
} else {
CMVOLKIDNO1 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO2(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO2 = Byte.parseByte(s);
} else {
CMVOLKIDNO2 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO3(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO3 = Byte.parseByte(s);
} else {
CMVOLKIDNO3 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO4(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO4 = Byte.parseByte(s);
} else {
CMVOLKIDNO4 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLKIDNO5(String s) {
if (!s.trim().isEmpty()) {
CMVOLKIDNO5 = Byte.parseByte(s);
} else {
CMVOLKIDNO5 = Byte.MIN_VALUE;
}
}

protected final void initCMVOLPER(String s) {
if (!s.trim().isEmpty()) {
CMVOLPER = Byte.parseByte(s);
} else {
CMVOLPER = Byte.MIN_VALUE;
}
}

protected final void initCMVOLRCAM(String s) {
if (!s.trim().isEmpty()) {
CMVOLRCAM = Short.parseShort(s);
} else {
CMVOLRCAM = Short.MIN_VALUE;
}
}

protected final void initCMVOLRCPR(String s) {
if (!s.trim().isEmpty()) {
CMVOLRCPR = Byte.parseByte(s);
} else {
CMVOLRCPR = Byte.MIN_VALUE;
}
}

protected final void initCMVOLREC(String s) {
if (!s.trim().isEmpty()) {
CMVOLREC = Byte.parseByte(s);
} else {
CMVOLREC = Byte.MIN_VALUE;
}
}

protected final void initCMVOLTM(String s) {
if (!s.trim().isEmpty()) {
CMVOLTM = Byte.parseByte(s);
} else {
CMVOLTM = Byte.MIN_VALUE;
}
}

protected final void initCOH1BM(String s) {
if (!s.trim().isEmpty()) {
COH1BM = Byte.parseByte(s);
} else {
COH1BM = Byte.MIN_VALUE;
}
}

protected final void initCOH1BY(String s) {
if (!s.trim().isEmpty()) {
COH1BY = Short.parseShort(s);
} else {
COH1BY = Short.MIN_VALUE;
}
}

protected final void initCOH1EM(String s) {
if (!s.trim().isEmpty()) {
COH1EM = Byte.parseByte(s);
} else {
COH1EM = Byte.MIN_VALUE;
}
}

protected final void initCOH1EY(String s) {
if (!s.trim().isEmpty()) {
COH1EY = Short.parseShort(s);
} else {
COH1EY = Short.MIN_VALUE;
}
}

protected final void initCOH1MR(String s) {
if (!s.trim().isEmpty()) {
COH1MR = Byte.parseByte(s);
} else {
COH1MR = Byte.MIN_VALUE;
}
}

protected final void initCOHAB(String s) {
if (!s.trim().isEmpty()) {
COHAB = Byte.parseByte(s);
} else {
COHAB = Byte.MIN_VALUE;
}
}

protected final void initCOHABN(String s) {
if (!s.trim().isEmpty()) {
COHABN = Byte.parseByte(s);
} else {
COHABN = Byte.MIN_VALUE;
}
}

protected final void initCOHAB_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
COHAB_DV = false;
} else {
COHAB_DV = true;
}
}
}

protected final void initCONSINTRO(String s) {
if (!s.trim().isEmpty()) {
CONSINTRO = Byte.parseByte(s);
} else {
CONSINTRO = Byte.MIN_VALUE;
}
}

protected final void initCONTFT(String s) {
if (!s.trim().isEmpty()) {
CONTFT = Byte.parseByte(s);
} else {
CONTFT = Byte.MIN_VALUE;
}
}

protected final void initCORDRECPER(String s) {
if (!s.trim().isEmpty()) {
CORDRECPER = Byte.parseByte(s);
} else {
CORDRECPER = Byte.MIN_VALUE;
}
}

protected final void initCOUNTRY(String s) {
if (!s.trim().isEmpty()) {
COUNTRY = Byte.parseByte(s);
} else {
COUNTRY = Byte.MIN_VALUE;
}
}

protected final void initCOWOSEXN(String s) {
if (!s.trim().isEmpty()) {
COWOSEXN = Byte.parseByte(s);
} else {
COWOSEXN = Byte.MIN_VALUE;
}
}

protected final void initCOWOSEXP(String s) {
if (!s.trim().isEmpty()) {
COWOSEXP = Byte.parseByte(s);
} else {
COWOSEXP = Byte.MIN_VALUE;
}
}

protected final void initCSACALC(String s) {
if (!s.trim().isEmpty()) {
CSACALC = Byte.parseByte(s);
} else {
CSACALC = Byte.MIN_VALUE;
}
}

protected final void initCSACALCAM(String s) {
if (!s.trim().isEmpty()) {
CSACALCAM = Double.parseDouble(s);
} else {
CSACALCAM = Double.NaN;
}
}

protected final void initCSAKIDNO1(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO1 = Byte.parseByte(s);
} else {
CSAKIDNO1 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO2(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO2 = Byte.parseByte(s);
} else {
CSAKIDNO2 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO3(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO3 = Byte.parseByte(s);
} else {
CSAKIDNO3 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO4(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO4 = Byte.parseByte(s);
} else {
CSAKIDNO4 = Byte.MIN_VALUE;
}
}

protected final void initCSAKIDNO5(String s) {
if (!s.trim().isEmpty()) {
CSAKIDNO5 = Byte.parseByte(s);
} else {
CSAKIDNO5 = Byte.MIN_VALUE;
}
}

protected final void initCSAPAYTO(String s) {
if (!s.trim().isEmpty()) {
CSAPAYTO = Byte.parseByte(s);
} else {
CSAPAYTO = Byte.MIN_VALUE;
}
}

protected final void initCSARECPER(String s) {
if (!s.trim().isEmpty()) {
CSARECPER = Byte.parseByte(s);
} else {
CSARECPER = Byte.MIN_VALUE;
}
}

protected final void initCSTAT(String s) {
if (!s.trim().isEmpty()) {
CSTAT = Byte.parseByte(s);
} else {
CSTAT = Byte.MIN_VALUE;
}
}

protected final void initCTADD1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD1_CODE = Byte.parseByte(s);
} else {
CTADD1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTADD2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD2_CODE = Byte.parseByte(s);
} else {
CTADD2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCNTY_CODE(String s) {
if (!s.trim().isEmpty()) {
CTCNTY_CODE = Byte.parseByte(s);
} else {
CTCNTY_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCONS(String s) {
if (!s.trim().isEmpty()) {
CTCONS = Byte.parseByte(s);
} else {
CTCONS = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF1(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF1 = Byte.parseByte(s);
} else {
CTCONSCONF1 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF2(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF2 = Byte.parseByte(s);
} else {
CTCONSCONF2 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF3(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF3 = Byte.parseByte(s);
} else {
CTCONSCONF3 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF4(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF4 = Byte.parseByte(s);
} else {
CTCONSCONF4 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF5(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF5 = Byte.parseByte(s);
} else {
CTCONSCONF5 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF6(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF6 = Byte.parseByte(s);
} else {
CTCONSCONF6 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF7(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF7 = Byte.parseByte(s);
} else {
CTCONSCONF7 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF8(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF8 = Byte.parseByte(s);
} else {
CTCONSCONF8 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF94(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF94 = Byte.parseByte(s);
} else {
CTCONSCONF94 = Byte.MIN_VALUE;
}
}

protected final void initCTEMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
CTEMAIL_CODE = Byte.parseByte(s);
} else {
CTEMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTPCODCODE(String s) {
if (!s.trim().isEmpty()) {
CTPCODCODE = Byte.parseByte(s);
} else {
CTPCODCODE = Byte.MIN_VALUE;
}
}

protected final void initCTREL(String s) {
if (!s.trim().isEmpty()) {
CTREL = Byte.parseByte(s);
} else {
CTREL = Byte.MIN_VALUE;
}
}

protected final void initCTTEL1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL1_CODE = Byte.parseByte(s);
} else {
CTTEL1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTEL2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL2_CODE = Byte.parseByte(s);
} else {
CTTEL2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTOWN_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTOWN_CODE = Byte.parseByte(s);
} else {
CTTOWN_CODE = Byte.MIN_VALUE;
}
}

protected final void initCUDDLEKID(String s) {
if (!s.trim().isEmpty()) {
CUDDLEKID = Byte.parseByte(s);
} else {
CUDDLEKID = Byte.MIN_VALUE;
}
}

protected final void initCULTUREA(String s) {
if (!s.trim().isEmpty()) {
CULTUREA = Byte.parseByte(s);
} else {
CULTUREA = Byte.MIN_VALUE;
}
}

protected final void initCULTUREB(String s) {
if (!s.trim().isEmpty()) {
CULTUREB = Byte.parseByte(s);
} else {
CULTUREB = Byte.MIN_VALUE;
}
}

protected final void initCULTUREC(String s) {
if (!s.trim().isEmpty()) {
CULTUREC = Byte.parseByte(s);
} else {
CULTUREC = Byte.MIN_VALUE;
}
}

protected final void initCULTURED(String s) {
if (!s.trim().isEmpty()) {
CULTURED = Byte.parseByte(s);
} else {
CULTURED = Byte.MIN_VALUE;
}
}

protected final void initCULTUREE(String s) {
if (!s.trim().isEmpty()) {
CULTUREE = Byte.parseByte(s);
} else {
CULTUREE = Byte.MIN_VALUE;
}
}

protected final void initCULTUREF(String s) {
if (!s.trim().isEmpty()) {
CULTUREF = Byte.parseByte(s);
} else {
CULTUREF = Byte.MIN_VALUE;
}
}

protected final void initCULTUREG(String s) {
if (!s.trim().isEmpty()) {
CULTUREG = Byte.parseByte(s);
} else {
CULTUREG = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB1(String s) {
if (!s.trim().isEmpty()) {
CURRJOB1 = Byte.parseByte(s);
} else {
CURRJOB1 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB2(String s) {
if (!s.trim().isEmpty()) {
CURRJOB2 = Byte.parseByte(s);
} else {
CURRJOB2 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB3(String s) {
if (!s.trim().isEmpty()) {
CURRJOB3 = Byte.parseByte(s);
} else {
CURRJOB3 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB4(String s) {
if (!s.trim().isEmpty()) {
CURRJOB4 = Byte.parseByte(s);
} else {
CURRJOB4 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB5(String s) {
if (!s.trim().isEmpty()) {
CURRJOB5 = Byte.parseByte(s);
} else {
CURRJOB5 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB6(String s) {
if (!s.trim().isEmpty()) {
CURRJOB6 = Byte.parseByte(s);
} else {
CURRJOB6 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART1(String s) {
if (!s.trim().isEmpty()) {
CURRPART1 = Byte.parseByte(s);
} else {
CURRPART1 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART2(String s) {
if (!s.trim().isEmpty()) {
CURRPART2 = Byte.parseByte(s);
} else {
CURRPART2 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART3(String s) {
if (!s.trim().isEmpty()) {
CURRPART3 = Byte.parseByte(s);
} else {
CURRPART3 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART4(String s) {
if (!s.trim().isEmpty()) {
CURRPART4 = Byte.parseByte(s);
} else {
CURRPART4 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT1(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT1 = Byte.parseByte(s);
} else {
CURRSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT2(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT2 = Byte.parseByte(s);
} else {
CURRSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT3(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT3 = Byte.parseByte(s);
} else {
CURRSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT4(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT4 = Byte.parseByte(s);
} else {
CURRSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT5(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT5 = Byte.parseByte(s);
} else {
CURRSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT6(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT6 = Byte.parseByte(s);
} else {
CURRSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initDAYWLK(String s) {
if (!s.trim().isEmpty()) {
DAYWLK = Byte.parseByte(s);
} else {
DAYWLK = Byte.MIN_VALUE;
}
}

protected final void initDCSATM(String s) {
if (!s.trim().isEmpty()) {
DCSATM = Byte.parseByte(s);
} else {
DCSATM = Byte.MIN_VALUE;
}
}

protected final void initDELAY1(String s) {
if (!s.trim().isEmpty()) {
DELAY1 = Byte.parseByte(s);
} else {
DELAY1 = Byte.MIN_VALUE;
}
}

protected final void initDELAY10(String s) {
if (!s.trim().isEmpty()) {
DELAY10 = Byte.parseByte(s);
} else {
DELAY10 = Byte.MIN_VALUE;
}
}

protected final void initDELAY2(String s) {
if (!s.trim().isEmpty()) {
DELAY2 = Byte.parseByte(s);
} else {
DELAY2 = Byte.MIN_VALUE;
}
}

protected final void initDELAY3(String s) {
if (!s.trim().isEmpty()) {
DELAY3 = Byte.parseByte(s);
} else {
DELAY3 = Byte.MIN_VALUE;
}
}

protected final void initDELAY4(String s) {
if (!s.trim().isEmpty()) {
DELAY4 = Byte.parseByte(s);
} else {
DELAY4 = Byte.MIN_VALUE;
}
}

protected final void initDELAY5(String s) {
if (!s.trim().isEmpty()) {
DELAY5 = Byte.parseByte(s);
} else {
DELAY5 = Byte.MIN_VALUE;
}
}

protected final void initDELAY6(String s) {
if (!s.trim().isEmpty()) {
DELAY6 = Byte.parseByte(s);
} else {
DELAY6 = Byte.MIN_VALUE;
}
}

protected final void initDELAY7(String s) {
if (!s.trim().isEmpty()) {
DELAY7 = Byte.parseByte(s);
} else {
DELAY7 = Byte.MIN_VALUE;
}
}

protected final void initDELAY8(String s) {
if (!s.trim().isEmpty()) {
DELAY8 = Byte.parseByte(s);
} else {
DELAY8 = Byte.MIN_VALUE;
}
}

protected final void initDELAY9(String s) {
if (!s.trim().isEmpty()) {
DELAY9 = Byte.parseByte(s);
} else {
DELAY9 = Byte.MIN_VALUE;
}
}

protected final void initDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DEPCHL_DV = false;
} else {
DEPCHL_DV = true;
}
}
}

protected final void initDETINC1(String s) {
if (!s.trim().isEmpty()) {
DETINC1 = Byte.parseByte(s);
} else {
DETINC1 = Byte.MIN_VALUE;
}
}

protected final void initDETINC2(String s) {
if (!s.trim().isEmpty()) {
DETINC2 = Byte.parseByte(s);
} else {
DETINC2 = Byte.MIN_VALUE;
}
}

protected final void initDETINC3(String s) {
if (!s.trim().isEmpty()) {
DETINC3 = Byte.parseByte(s);
} else {
DETINC3 = Byte.MIN_VALUE;
}
}

protected final void initDETINC4(String s) {
if (!s.trim().isEmpty()) {
DETINC4 = Byte.parseByte(s);
} else {
DETINC4 = Byte.MIN_VALUE;
}
}

protected final void initDETINC5(String s) {
if (!s.trim().isEmpty()) {
DETINC5 = Byte.parseByte(s);
} else {
DETINC5 = Byte.MIN_VALUE;
}
}

protected final void initDETINC6(String s) {
if (!s.trim().isEmpty()) {
DETINC6 = Byte.parseByte(s);
} else {
DETINC6 = Byte.MIN_VALUE;
}
}

protected final void initDINNER(String s) {
if (!s.trim().isEmpty()) {
DINNER = Byte.parseByte(s);
} else {
DINNER = Byte.MIN_VALUE;
}
}

protected final void initDISDIF1(String s) {
if (!s.trim().isEmpty()) {
DISDIF1 = Byte.parseByte(s);
} else {
DISDIF1 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF10(String s) {
if (!s.trim().isEmpty()) {
DISDIF10 = Byte.parseByte(s);
} else {
DISDIF10 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF11(String s) {
if (!s.trim().isEmpty()) {
DISDIF11 = Byte.parseByte(s);
} else {
DISDIF11 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF12(String s) {
if (!s.trim().isEmpty()) {
DISDIF12 = Byte.parseByte(s);
} else {
DISDIF12 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF2(String s) {
if (!s.trim().isEmpty()) {
DISDIF2 = Byte.parseByte(s);
} else {
DISDIF2 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF3(String s) {
if (!s.trim().isEmpty()) {
DISDIF3 = Byte.parseByte(s);
} else {
DISDIF3 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF4(String s) {
if (!s.trim().isEmpty()) {
DISDIF4 = Byte.parseByte(s);
} else {
DISDIF4 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF5(String s) {
if (!s.trim().isEmpty()) {
DISDIF5 = Byte.parseByte(s);
} else {
DISDIF5 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF6(String s) {
if (!s.trim().isEmpty()) {
DISDIF6 = Byte.parseByte(s);
} else {
DISDIF6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF7(String s) {
if (!s.trim().isEmpty()) {
DISDIF7 = Byte.parseByte(s);
} else {
DISDIF7 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF8(String s) {
if (!s.trim().isEmpty()) {
DISDIF8 = Byte.parseByte(s);
} else {
DISDIF8 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF9(String s) {
if (!s.trim().isEmpty()) {
DISDIF9 = Byte.parseByte(s);
} else {
DISDIF9 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF96(String s) {
if (!s.trim().isEmpty()) {
DISDIF96 = Byte.parseByte(s);
} else {
DISDIF96 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS1(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS1 = Byte.parseByte(s);
} else {
DISEFFECTS1 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS2(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS2 = Byte.parseByte(s);
} else {
DISEFFECTS2 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS3(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS3 = Byte.parseByte(s);
} else {
DISEFFECTS3 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS4(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS4 = Byte.parseByte(s);
} else {
DISEFFECTS4 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS5(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS5 = Byte.parseByte(s);
} else {
DISEFFECTS5 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK1(String s) {
if (!s.trim().isEmpty()) {
DIVCHK1 = Byte.parseByte(s);
} else {
DIVCHK1 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK2(String s) {
if (!s.trim().isEmpty()) {
DIVCHK2 = Byte.parseByte(s);
} else {
DIVCHK2 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN1(String s) {
if (!s.trim().isEmpty()) {
DIVFIN1 = Byte.parseByte(s);
} else {
DIVFIN1 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN2(String s) {
if (!s.trim().isEmpty()) {
DIVFIN2 = Byte.parseByte(s);
} else {
DIVFIN2 = Byte.MIN_VALUE;
}
}

protected final void initDOBY_DV(String s) {
if (!s.trim().isEmpty()) {
DOBY_DV = Short.parseShort(s);
} else {
DOBY_DV = Short.MIN_VALUE;
}
}

protected final void initDONEPROXY(String s) {
if (!s.trim().isEmpty()) {
DONEPROXY = Byte.parseByte(s);
} else {
DONEPROXY = Byte.MIN_VALUE;
}
}

protected final void initDRGMJ(String s) {
if (!s.trim().isEmpty()) {
DRGMJ = Byte.parseByte(s);
} else {
DRGMJ = Byte.MIN_VALUE;
}
}

protected final void initDRGOTH(String s) {
if (!s.trim().isEmpty()) {
DRGOTH = Byte.parseByte(s);
} else {
DRGOTH = Byte.MIN_VALUE;
}
}

protected final void initDRGSOL(String s) {
if (!s.trim().isEmpty()) {
DRGSOL = Byte.parseByte(s);
} else {
DRGSOL = Byte.MIN_VALUE;
}
}

protected final void initDRIVE(String s) {
if (!s.trim().isEmpty()) {
DRIVE = Byte.parseByte(s);
} else {
DRIVE = Byte.MIN_VALUE;
}
}

protected final void initDVAGE(String s) {
if (!s.trim().isEmpty()) {
DVAGE = Byte.parseByte(s);
} else {
DVAGE = Byte.MIN_VALUE;
}
}

protected final void initDVM1(String s) {
if (!s.trim().isEmpty()) {
DVM1 = Byte.parseByte(s);
} else {
DVM1 = Byte.MIN_VALUE;
}
}

protected final void initDVM2(String s) {
if (!s.trim().isEmpty()) {
DVM2 = Byte.parseByte(s);
} else {
DVM2 = Byte.MIN_VALUE;
}
}

protected final void initDVY41(String s) {
if (!s.trim().isEmpty()) {
DVY41 = Short.parseShort(s);
} else {
DVY41 = Short.MIN_VALUE;
}
}

protected final void initDVY42(String s) {
if (!s.trim().isEmpty()) {
DVY42 = Short.parseShort(s);
} else {
DVY42 = Short.MIN_VALUE;
}
}

protected final void initEATLIVU(String s) {
if (!s.trim().isEmpty()) {
EATLIVU = Byte.parseByte(s);
} else {
EATLIVU = Byte.MIN_VALUE;
}
}

protected final void initEDASP(String s) {
if (!s.trim().isEmpty()) {
EDASP = Byte.parseByte(s);
} else {
EDASP = Byte.MIN_VALUE;
}
}

protected final void initEDLINK(String s) {
if (!s.trim().isEmpty()) {
EDLINK = Byte.parseByte(s);
} else {
EDLINK = Byte.MIN_VALUE;
}
}

protected final void initEDLINKCONF(String s) {
if (!s.trim().isEmpty()) {
EDLINKCONF = Byte.parseByte(s);
} else {
EDLINKCONF = Byte.MIN_VALUE;
}
}

protected final void initEDLINKCONFB(String s) {
if (!s.trim().isEmpty()) {
EDLINKCONFB = Byte.parseByte(s);
} else {
EDLINKCONFB = Byte.MIN_VALUE;
}
}

protected final void initEDLINKKIDCONFSW(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
EDLINKKIDCONFSW = false;
} else {
EDLINKKIDCONFSW = true;
}
}
}

protected final void initEDLINKKIDE(String s) {
if (!s.trim().isEmpty()) {
EDLINKKIDE = Byte.parseByte(s);
} else {
EDLINKKIDE = Byte.MIN_VALUE;
}
}

protected final void initEDLINKKIDSWN(String s) {
if (!s.trim().isEmpty()) {
EDLINKKIDSWN = Byte.parseByte(s);
} else {
EDLINKKIDSWN = Byte.MIN_VALUE;
}
}

protected final void initEDLKKIDCONFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
EDLKKIDCONFE = false;
} else {
EDLKKIDCONFE = true;
}
}
}

protected final void initEDTYPE(String s) {
if (!s.trim().isEmpty()) {
EDTYPE = Short.parseShort(s);
} else {
EDTYPE = Short.MIN_VALUE;
}
}

protected final void initEDUCATION(String s) {
if (!s.trim().isEmpty()) {
EDUCATION = Byte.parseByte(s);
} else {
EDUCATION = Byte.MIN_VALUE;
}
}

protected final void initEDUCISGN(String s) {
if (!s.trim().isEmpty()) {
EDUCISGN = Byte.parseByte(s);
} else {
EDUCISGN = Byte.MIN_VALUE;
}
}

protected final void initEDUCKIDSN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
EDUCKIDSN = false;
} else {
EDUCKIDSN = true;
}
}
}

protected final void initEDUCLINKB1(String s) {
if (!s.trim().isEmpty()) {
EDUCLINKB1 = Byte.parseByte(s);
} else {
EDUCLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initEDUCLINKB2(String s) {
if (!s.trim().isEmpty()) {
EDUCLINKB2 = Byte.parseByte(s);
} else {
EDUCLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initEDUCLINKB3(String s) {
if (!s.trim().isEmpty()) {
EDUCLINKB3 = Byte.parseByte(s);
} else {
EDUCLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initEDUCRECD(String s) {
if (!s.trim().isEmpty()) {
EDUCRECD = Byte.parseByte(s);
} else {
EDUCRECD = Byte.MIN_VALUE;
}
}

protected final void initEDUCRSGN(String s) {
if (!s.trim().isEmpty()) {
EDUCRSGN = Byte.parseByte(s);
} else {
EDUCRSGN = Byte.MIN_VALUE;
}
}

protected final void initEDUCSN(String s) {
if (!s.trim().isEmpty()) {
EDUCSN = Byte.parseByte(s);
} else {
EDUCSN = Byte.MIN_VALUE;
}
}

protected final void initEMAILENT(String s) {
if (!s.trim().isEmpty()) {
EMAILENT = Byte.parseByte(s);
} else {
EMAILENT = Byte.MIN_VALUE;
}
}

protected final void initEMPCHK(String s) {
if (!s.trim().isEmpty()) {
EMPCHK = Byte.parseByte(s);
} else {
EMPCHK = Byte.MIN_VALUE;
}
}

protected final void initEMPINTRO(String s) {
if (!s.trim().isEmpty()) {
EMPINTRO = Byte.parseByte(s);
} else {
EMPINTRO = Byte.MIN_VALUE;
}
}

protected final void initEMPLOY(String s) {
if (!s.trim().isEmpty()) {
EMPLOY = Byte.parseByte(s);
} else {
EMPLOY = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDD(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDD = Byte.parseByte(s);
} else {
EMPSTENDD = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDM(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDM = Byte.parseByte(s);
} else {
EMPSTENDM = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDY4(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDY4 = Short.parseShort(s);
} else {
EMPSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initENDMNTH1(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH1 = Byte.parseByte(s);
} else {
ENDMNTH1 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH2(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH2 = Byte.parseByte(s);
} else {
ENDMNTH2 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH3(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH3 = Byte.parseByte(s);
} else {
ENDMNTH3 = Byte.MIN_VALUE;
}
}

protected final void initENGFORM(String s) {
if (!s.trim().isEmpty()) {
ENGFORM = Byte.parseByte(s);
} else {
ENGFORM = Byte.MIN_VALUE;
}
}

protected final void initENGLANG(String s) {
if (!s.trim().isEmpty()) {
ENGLANG = Byte.parseByte(s);
} else {
ENGLANG = Byte.MIN_VALUE;
}
}

protected final void initENGREAD(String s) {
if (!s.trim().isEmpty()) {
ENGREAD = Byte.parseByte(s);
} else {
ENGREAD = Byte.MIN_VALUE;
}
}

protected final void initENGSPK(String s) {
if (!s.trim().isEmpty()) {
ENGSPK = Byte.parseByte(s);
} else {
ENGSPK = Byte.MIN_VALUE;
}
}

protected final void initENGTEL(String s) {
if (!s.trim().isEmpty()) {
ENGTEL = Byte.parseByte(s);
} else {
ENGTEL = Byte.MIN_VALUE;
}
}

protected final void initEPROSH(String s) {
if (!s.trim().isEmpty()) {
EPROSH = Short.parseShort(s);
} else {
EPROSH = Short.MIN_VALUE;
}
}

protected final void initETCOOTN(String s) {
if (!s.trim().isEmpty()) {
ETCOOTN = Byte.parseByte(s);
} else {
ETCOOTN = Byte.MIN_VALUE;
}
}

protected final void initETCOOTP(String s) {
if (!s.trim().isEmpty()) {
ETCOOTP = Byte.parseByte(s);
} else {
ETCOOTP = Byte.MIN_VALUE;
}
}

protected final void initETCOSAMN(String s) {
if (!s.trim().isEmpty()) {
ETCOSAMN = Byte.parseByte(s);
} else {
ETCOSAMN = Byte.MIN_VALUE;
}
}

protected final void initETCOSAMP(String s) {
if (!s.trim().isEmpty()) {
ETCOSAMP = Byte.parseByte(s);
} else {
ETCOSAMP = Byte.MIN_VALUE;
}
}

protected final void initETCOWHN(String s) {
if (!s.trim().isEmpty()) {
ETCOWHN = Byte.parseByte(s);
} else {
ETCOWHN = Byte.MIN_VALUE;
}
}

protected final void initETCOWHP(String s) {
if (!s.trim().isEmpty()) {
ETCOWHP = Byte.parseByte(s);
} else {
ETCOWHP = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE1(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE1 = Byte.parseByte(s);
} else {
ETHCLOSE1 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE10(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE10 = Byte.parseByte(s);
} else {
ETHCLOSE10 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE11(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE11 = Byte.parseByte(s);
} else {
ETHCLOSE11 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE2A(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE2A = Byte.parseByte(s);
} else {
ETHCLOSE2A = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE2B(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE2B = Byte.parseByte(s);
} else {
ETHCLOSE2B = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE3(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE3 = Byte.parseByte(s);
} else {
ETHCLOSE3 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE4A(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE4A = Byte.parseByte(s);
} else {
ETHCLOSE4A = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE4B(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE4B = Byte.parseByte(s);
} else {
ETHCLOSE4B = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE5(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE5 = Byte.parseByte(s);
} else {
ETHCLOSE5 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE6(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE6 = Byte.parseByte(s);
} else {
ETHCLOSE6 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE7(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE7 = Byte.parseByte(s);
} else {
ETHCLOSE7 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE8(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE8 = Byte.parseByte(s);
} else {
ETHCLOSE8 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE9(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE9 = Byte.parseByte(s);
} else {
ETHCLOSE9 = Byte.MIN_VALUE;
}
}

protected final void initETHID10(String s) {
if (!s.trim().isEmpty()) {
ETHID10 = Byte.parseByte(s);
} else {
ETHID10 = Byte.MIN_VALUE;
}
}

protected final void initETHID11(String s) {
if (!s.trim().isEmpty()) {
ETHID11 = Byte.parseByte(s);
} else {
ETHID11 = Byte.MIN_VALUE;
}
}

protected final void initETHID12(String s) {
if (!s.trim().isEmpty()) {
ETHID12 = Byte.parseByte(s);
} else {
ETHID12 = Byte.MIN_VALUE;
}
}

protected final void initETHID13(String s) {
if (!s.trim().isEmpty()) {
ETHID13 = Byte.parseByte(s);
} else {
ETHID13 = Byte.MIN_VALUE;
}
}

protected final void initETHID14(String s) {
if (!s.trim().isEmpty()) {
ETHID14 = Byte.parseByte(s);
} else {
ETHID14 = Byte.MIN_VALUE;
}
}

protected final void initETHID2(String s) {
if (!s.trim().isEmpty()) {
ETHID2 = Byte.parseByte(s);
} else {
ETHID2 = Byte.MIN_VALUE;
}
}

protected final void initETHID3(String s) {
if (!s.trim().isEmpty()) {
ETHID3 = Byte.parseByte(s);
} else {
ETHID3 = Byte.MIN_VALUE;
}
}

protected final void initETHID4A(String s) {
if (!s.trim().isEmpty()) {
ETHID4A = Byte.parseByte(s);
} else {
ETHID4A = Byte.MIN_VALUE;
}
}

protected final void initETHID4B(String s) {
if (!s.trim().isEmpty()) {
ETHID4B = Byte.parseByte(s);
} else {
ETHID4B = Byte.MIN_VALUE;
}
}

protected final void initETHID5(String s) {
if (!s.trim().isEmpty()) {
ETHID5 = Byte.parseByte(s);
} else {
ETHID5 = Byte.MIN_VALUE;
}
}

protected final void initETHID6(String s) {
if (!s.trim().isEmpty()) {
ETHID6 = Byte.parseByte(s);
} else {
ETHID6 = Byte.MIN_VALUE;
}
}

protected final void initETHID7(String s) {
if (!s.trim().isEmpty()) {
ETHID7 = Byte.parseByte(s);
} else {
ETHID7 = Byte.MIN_VALUE;
}
}

protected final void initETHID8(String s) {
if (!s.trim().isEmpty()) {
ETHID8 = Byte.parseByte(s);
} else {
ETHID8 = Byte.MIN_VALUE;
}
}

protected final void initETHID9(String s) {
if (!s.trim().isEmpty()) {
ETHID9 = Byte.parseByte(s);
} else {
ETHID9 = Byte.MIN_VALUE;
}
}

protected final void initETHN_DV(String s) {
if (!s.trim().isEmpty()) {
ETHN_DV = Byte.parseByte(s);
} else {
ETHN_DV = Byte.MIN_VALUE;
}
}

protected final void initEVENT1(String s) {
if (!s.trim().isEmpty()) {
EVENT1 = Byte.parseByte(s);
} else {
EVENT1 = Byte.MIN_VALUE;
}
}

protected final void initEVENT1S(String s) {
if (!s.trim().isEmpty()) {
EVENT1S = Byte.parseByte(s);
} else {
EVENT1S = Byte.MIN_VALUE;
}
}

protected final void initEVENT2(String s) {
if (!s.trim().isEmpty()) {
EVENT2 = Byte.parseByte(s);
} else {
EVENT2 = Byte.MIN_VALUE;
}
}

protected final void initEVENT2S(String s) {
if (!s.trim().isEmpty()) {
EVENT2S = Byte.parseByte(s);
} else {
EVENT2S = Byte.MIN_VALUE;
}
}

protected final void initEVENT3(String s) {
if (!s.trim().isEmpty()) {
EVENT3 = Byte.parseByte(s);
} else {
EVENT3 = Byte.MIN_VALUE;
}
}

protected final void initEVENT3S(String s) {
if (!s.trim().isEmpty()) {
EVENT3S = Byte.parseByte(s);
} else {
EVENT3S = Byte.MIN_VALUE;
}
}

protected final void initEVENT4(String s) {
if (!s.trim().isEmpty()) {
EVENT4 = Byte.parseByte(s);
} else {
EVENT4 = Byte.MIN_VALUE;
}
}

protected final void initEVENT4S(String s) {
if (!s.trim().isEmpty()) {
EVENT4S = Byte.parseByte(s);
} else {
EVENT4S = Byte.MIN_VALUE;
}
}

protected final void initEXPREAM(String s) {
if (!s.trim().isEmpty()) {
EXPREAM = Byte.parseByte(s);
} else {
EXPREAM = Byte.MIN_VALUE;
}
}

protected final void initEXSAME(String s) {
if (!s.trim().isEmpty()) {
EXSAME = Byte.parseByte(s);
} else {
EXSAME = Byte.MIN_VALUE;
}
}

protected final void initEXTNSA(String s) {
if (!s.trim().isEmpty()) {
EXTNSA = Byte.parseByte(s);
} else {
EXTNSA = Byte.MIN_VALUE;
}
}

protected final void initEXTRATE(String s) {
if (!s.trim().isEmpty()) {
EXTRATE = Double.parseDouble(s);
} else {
EXTRATE = Double.NaN;
}
}

protected final void initEXTREST(String s) {
if (!s.trim().isEmpty()) {
EXTREST = Byte.parseByte(s);
} else {
EXTREST = Byte.MIN_VALUE;
}
}

protected final void initFAMILY(String s) {
if (!s.trim().isEmpty()) {
FAMILY = Byte.parseByte(s);
} else {
FAMILY = Byte.MIN_VALUE;
}
}

protected final void initFAMSUP(String s) {
if (!s.trim().isEmpty()) {
FAMSUP = Byte.parseByte(s);
} else {
FAMSUP = Byte.MIN_VALUE;
}
}

protected final void initFARKID(String s) {
if (!s.trim().isEmpty()) {
FARKID = Byte.parseByte(s);
} else {
FARKID = Byte.MIN_VALUE;
}
}

protected final void initFATHER(String s) {
if (!s.trim().isEmpty()) {
FATHER = Byte.parseByte(s);
} else {
FATHER = Byte.MIN_VALUE;
}
}

protected final void initFENOW(String s) {
if (!s.trim().isEmpty()) {
FENOW = Byte.parseByte(s);
} else {
FENOW = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE01(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE01 = Byte.parseByte(s);
} else {
FF_BENTYPE01 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE02(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE02 = Byte.parseByte(s);
} else {
FF_BENTYPE02 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE03(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE03 = Byte.parseByte(s);
} else {
FF_BENTYPE03 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE04(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE04 = Byte.parseByte(s);
} else {
FF_BENTYPE04 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE05(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE05 = Byte.parseByte(s);
} else {
FF_BENTYPE05 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE06(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE06 = Byte.parseByte(s);
} else {
FF_BENTYPE06 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE07(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE07 = Byte.parseByte(s);
} else {
FF_BENTYPE07 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE08(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE08 = Byte.parseByte(s);
} else {
FF_BENTYPE08 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE09(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE09 = Byte.parseByte(s);
} else {
FF_BENTYPE09 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE10(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE10 = Byte.parseByte(s);
} else {
FF_BENTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE11(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE11 = Byte.parseByte(s);
} else {
FF_BENTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE12(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE12 = Byte.parseByte(s);
} else {
FF_BENTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE13(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE13 = Byte.parseByte(s);
} else {
FF_BENTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE14(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE14 = Byte.parseByte(s);
} else {
FF_BENTYPE14 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE15(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE15 = Byte.parseByte(s);
} else {
FF_BENTYPE15 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE16(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE16 = Byte.parseByte(s);
} else {
FF_BENTYPE16 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE17(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE17 = Byte.parseByte(s);
} else {
FF_BENTYPE17 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE18(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE18 = Byte.parseByte(s);
} else {
FF_BENTYPE18 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE19(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE19 = Byte.parseByte(s);
} else {
FF_BENTYPE19 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE20(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE20 = Byte.parseByte(s);
} else {
FF_BENTYPE20 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE21(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE21 = Byte.parseByte(s);
} else {
FF_BENTYPE21 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE22(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE22 = Byte.parseByte(s);
} else {
FF_BENTYPE22 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE23(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE23 = Byte.parseByte(s);
} else {
FF_BENTYPE23 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE24(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE24 = Byte.parseByte(s);
} else {
FF_BENTYPE24 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE25(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE25 = Byte.parseByte(s);
} else {
FF_BENTYPE25 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE26(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE26 = Byte.parseByte(s);
} else {
FF_BENTYPE26 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE27(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE27 = Byte.parseByte(s);
} else {
FF_BENTYPE27 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE28(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE28 = Byte.parseByte(s);
} else {
FF_BENTYPE28 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE29(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE29 = Byte.parseByte(s);
} else {
FF_BENTYPE29 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE30(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE30 = Byte.parseByte(s);
} else {
FF_BENTYPE30 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE31(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE31 = Byte.parseByte(s);
} else {
FF_BENTYPE31 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE32(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE32 = Byte.parseByte(s);
} else {
FF_BENTYPE32 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE33(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE33 = Byte.parseByte(s);
} else {
FF_BENTYPE33 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE34(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE34 = Byte.parseByte(s);
} else {
FF_BENTYPE34 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE35(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE35 = Byte.parseByte(s);
} else {
FF_BENTYPE35 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE36(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE36 = Byte.parseByte(s);
} else {
FF_BENTYPE36 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE37(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE37 = Byte.parseByte(s);
} else {
FF_BENTYPE37 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE38(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE38 = Byte.parseByte(s);
} else {
FF_BENTYPE38 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE39(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE39 = Byte.parseByte(s);
} else {
FF_BENTYPE39 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE40(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE40 = Byte.parseByte(s);
} else {
FF_BENTYPE40 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE41(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE41 = Byte.parseByte(s);
} else {
FF_BENTYPE41 = Byte.MIN_VALUE;
}
}

protected final void initFF_EMPLW(String s) {
if (!s.trim().isEmpty()) {
FF_EMPLW = Byte.parseByte(s);
} else {
FF_EMPLW = Byte.MIN_VALUE;
}
}

protected final void initFF_EVERINT(String s) {
if (!s.trim().isEmpty()) {
FF_EVERINT = Byte.parseByte(s);
} else {
FF_EVERINT = Byte.MIN_VALUE;
}
}

protected final void initFF_IVINTLANG(String s) {
if (!s.trim().isEmpty()) {
FF_IVINTLANG = Byte.parseByte(s);
} else {
FF_IVINTLANG = Byte.MIN_VALUE;
}
}

protected final void initFF_IVLOLW(String s) {
if (!s.trim().isEmpty()) {
FF_IVLOLW = Byte.parseByte(s);
} else {
FF_IVLOLW = Byte.MIN_VALUE;
}
}

protected final void initFF_JBMNGR(String s) {
if (!s.trim().isEmpty()) {
FF_JBMNGR = Byte.parseByte(s);
} else {
FF_JBMNGR = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSEMP(String s) {
if (!s.trim().isEmpty()) {
FF_JBSEMP = Byte.parseByte(s);
} else {
FF_JBSEMP = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSIZE(String s) {
if (!s.trim().isEmpty()) {
FF_JBSIZE = Byte.parseByte(s);
} else {
FF_JBSIZE = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSTAT(String s) {
if (!s.trim().isEmpty()) {
FF_JBSTAT = Byte.parseByte(s);
} else {
FF_JBSTAT = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG = Byte.parseByte(s);
} else {
FF_OPRLG = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0 = Byte.parseByte(s);
} else {
FF_OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0NI = Byte.parseByte(s);
} else {
FF_OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initFF_TEL(String s) {
if (!s.trim().isEmpty()) {
FF_TEL = Byte.parseByte(s);
} else {
FF_TEL = Byte.MIN_VALUE;
}
}

protected final void initFF_UKBORN(String s) {
if (!s.trim().isEmpty()) {
FF_UKBORN = Byte.parseByte(s);
} else {
FF_UKBORN = Byte.MIN_VALUE;
}
}

protected final void initFF_YR2UK4(String s) {
if (!s.trim().isEmpty()) {
FF_YR2UK4 = Short.parseShort(s);
} else {
FF_YR2UK4 = Short.MIN_VALUE;
}
}

protected final void initFIBENOTHR_DV(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_DV = Double.parseDouble(s);
} else {
FIBENOTHR_DV = Double.NaN;
}
}

protected final void initFIBENOTHR_IF(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_IF = Double.parseDouble(s);
} else {
FIBENOTHR_IF = Double.NaN;
}
}

protected final void initFIBENOTHR_TC(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_TC = Byte.parseByte(s);
} else {
FIBENOTHR_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_IF = Double.parseDouble(s);
} else {
FIMNGRS_IF = Double.NaN;
}
}

protected final void initFIMNGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_TC = Byte.parseByte(s);
} else {
FIMNGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNINVNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNINVNET_DV = Double.parseDouble(s);
} else {
FIMNINVNET_DV = Double.NaN;
}
}

protected final void initFIMNLABGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_IF = Double.parseDouble(s);
} else {
FIMNLABGRS_IF = Double.NaN;
}
}

protected final void initFIMNLABGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_TC = Byte.parseByte(s);
} else {
FIMNLABGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNLABNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_DV = Double.parseDouble(s);
} else {
FIMNLABNET_DV = Double.NaN;
}
}

protected final void initFIMNLABNET_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_TC = Byte.parseByte(s);
} else {
FIMNLABNET_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNMISC_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNMISC_DV = Double.parseDouble(s);
} else {
FIMNMISC_DV = Double.NaN;
}
}

protected final void initFIMNNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNNET_DV = Double.parseDouble(s);
} else {
FIMNNET_DV = Double.NaN;
}
}

protected final void initFIMNPEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPEN_DV = Double.parseDouble(s);
} else {
FIMNPEN_DV = Double.NaN;
}
}

protected final void initFIMNPRBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPRBEN_DV = Double.parseDouble(s);
} else {
FIMNPRBEN_DV = Double.NaN;
}
}

protected final void initFIMNSBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNSBEN_DV = Double.parseDouble(s);
} else {
FIMNSBEN_DV = Double.NaN;
}
}

protected final void initFINFUT(String s) {
if (!s.trim().isEmpty()) {
FINFUT = Byte.parseByte(s);
} else {
FINFUT = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB1(String s) {
if (!s.trim().isEmpty()) {
FIYRDB1 = Byte.parseByte(s);
} else {
FIYRDB1 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB2(String s) {
if (!s.trim().isEmpty()) {
FIYRDB2 = Byte.parseByte(s);
} else {
FIYRDB2 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB3(String s) {
if (!s.trim().isEmpty()) {
FIYRDB3 = Byte.parseByte(s);
} else {
FIYRDB3 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB4(String s) {
if (!s.trim().isEmpty()) {
FIYRDB4 = Byte.parseByte(s);
} else {
FIYRDB4 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB5(String s) {
if (!s.trim().isEmpty()) {
FIYRDB5 = Byte.parseByte(s);
} else {
FIYRDB5 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB6(String s) {
if (!s.trim().isEmpty()) {
FIYRDB6 = Byte.parseByte(s);
} else {
FIYRDB6 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDIA(String s) {
if (!s.trim().isEmpty()) {
FIYRDIA = Integer.parseInt(s);
} else {
FIYRDIA = Integer.MIN_VALUE;
}
}

protected final void initFIYRINVINC_DV(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_DV = Double.parseDouble(s);
} else {
FIYRINVINC_DV = Double.NaN;
}
}

protected final void initFIYRINVINC_IF(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_IF = Byte.parseByte(s);
} else {
FIYRINVINC_IF = Byte.MIN_VALUE;
}
}

protected final void initFIYRINVINC_TC(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_TC = Byte.parseByte(s);
} else {
FIYRINVINC_TC = Byte.MIN_VALUE;
}
}

protected final void initFLAGLINKB1(String s) {
if (!s.trim().isEmpty()) {
FLAGLINKB1 = Byte.parseByte(s);
} else {
FLAGLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initFLAGLINKB2(String s) {
if (!s.trim().isEmpty()) {
FLAGLINKB2 = Byte.parseByte(s);
} else {
FLAGLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initFLAGLINKB3(String s) {
if (!s.trim().isEmpty()) {
FLAGLINKB3 = Byte.parseByte(s);
} else {
FLAGLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initFNPID(String s) {
if (!s.trim().isEmpty()) {
FNPID = Integer.parseInt(s);
} else {
FNPID = Integer.MIN_VALUE;
}
}

protected final void initFNPNO(String s) {
if (!s.trim().isEmpty()) {
FNPNO = Byte.parseByte(s);
} else {
FNPNO = Byte.MIN_VALUE;
}
}

protected final void initFNSPID(String s) {
if (!s.trim().isEmpty()) {
FNSPID = Integer.parseInt(s);
} else {
FNSPID = Integer.MIN_VALUE;
}
}

protected final void initFNSPNO(String s) {
if (!s.trim().isEmpty()) {
FNSPNO = Byte.parseByte(s);
} else {
FNSPNO = Byte.MIN_VALUE;
}
}

protected final void initFOOD1(String s) {
if (!s.trim().isEmpty()) {
FOOD1 = Byte.parseByte(s);
} else {
FOOD1 = Byte.MIN_VALUE;
}
}

protected final void initFOOD2(String s) {
if (!s.trim().isEmpty()) {
FOOD2 = Byte.parseByte(s);
} else {
FOOD2 = Byte.MIN_VALUE;
}
}

protected final void initFOOD3(String s) {
if (!s.trim().isEmpty()) {
FOOD3 = Byte.parseByte(s);
} else {
FOOD3 = Byte.MIN_VALUE;
}
}

protected final void initFOOD4(String s) {
if (!s.trim().isEmpty()) {
FOOD4 = Byte.parseByte(s);
} else {
FOOD4 = Byte.MIN_VALUE;
}
}

protected final void initFOOD5(String s) {
if (!s.trim().isEmpty()) {
FOOD5 = Byte.parseByte(s);
} else {
FOOD5 = Byte.MIN_VALUE;
}
}

protected final void initFOOD6(String s) {
if (!s.trim().isEmpty()) {
FOOD6 = Byte.parseByte(s);
} else {
FOOD6 = Byte.MIN_VALUE;
}
}

protected final void initFOOD7(String s) {
if (!s.trim().isEmpty()) {
FOOD7 = Byte.parseByte(s);
} else {
FOOD7 = Byte.MIN_VALUE;
}
}

protected final void initFORMDIF(String s) {
if (!s.trim().isEmpty()) {
FORMDIF = Byte.parseByte(s);
} else {
FORMDIF = Byte.MIN_VALUE;
}
}

protected final void initFRDRG(String s) {
if (!s.trim().isEmpty()) {
FRDRG = Byte.parseByte(s);
} else {
FRDRG = Byte.MIN_VALUE;
}
}

protected final void initFROBULLI(String s) {
if (!s.trim().isEmpty()) {
FROBULLI = Byte.parseByte(s);
} else {
FROBULLI = Byte.MIN_VALUE;
}
}

protected final void initFROBULLY(String s) {
if (!s.trim().isEmpty()) {
FROBULLY = Byte.parseByte(s);
} else {
FROBULLY = Byte.MIN_VALUE;
}
}

protected final void initFRPBULLI(String s) {
if (!s.trim().isEmpty()) {
FRPBULLI = Byte.parseByte(s);
} else {
FRPBULLI = Byte.MIN_VALUE;
}
}

protected final void initFRPBULLY(String s) {
if (!s.trim().isEmpty()) {
FRPBULLY = Byte.parseByte(s);
} else {
FRPBULLY = Byte.MIN_VALUE;
}
}

protected final void initFRUVEGE(String s) {
if (!s.trim().isEmpty()) {
FRUVEGE = Byte.parseByte(s);
} else {
FRUVEGE = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM1(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM1 = Byte.parseByte(s);
} else {
FT2ENDM1 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM2(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM2 = Byte.parseByte(s);
} else {
FT2ENDM2 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDY41(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY41 = Short.parseShort(s);
} else {
FT2ENDY41 = Short.MIN_VALUE;
}
}

protected final void initFT2ENDY42(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY42 = Short.parseShort(s);
} else {
FT2ENDY42 = Short.MIN_VALUE;
}
}

protected final void initFTEDANY(String s) {
if (!s.trim().isEmpty()) {
FTEDANY = Byte.parseByte(s);
} else {
FTEDANY = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND1(String s) {
if (!s.trim().isEmpty()) {
FTEDEND1 = Byte.parseByte(s);
} else {
FTEDEND1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND2(String s) {
if (!s.trim().isEmpty()) {
FTEDEND2 = Byte.parseByte(s);
} else {
FTEDEND2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR1(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR1 = Byte.parseByte(s);
} else {
FTEDMOR1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR2(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR2 = Byte.parseByte(s);
} else {
FTEDMOR2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM1(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM1 = Byte.parseByte(s);
} else {
FTEDSTARTM1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM2(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM2 = Byte.parseByte(s);
} else {
FTEDSTARTM2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTY41(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY41 = Short.parseShort(s);
} else {
FTEDSTARTY41 = Short.MIN_VALUE;
}
}

protected final void initFTEDSTARTY42(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY42 = Short.parseShort(s);
} else {
FTEDSTARTY42 = Short.MIN_VALUE;
}
}

protected final void initFTENDM(String s) {
if (!s.trim().isEmpty()) {
FTENDM = Byte.parseByte(s);
} else {
FTENDM = Byte.MIN_VALUE;
}
}

protected final void initFTENDY4(String s) {
if (!s.trim().isEmpty()) {
FTENDY4 = Short.parseShort(s);
} else {
FTENDY4 = Short.MIN_VALUE;
}
}

protected final void initFTEXV(String s) {
if (!s.trim().isEmpty()) {
FTEXV = Integer.parseInt(s);
} else {
FTEXV = Integer.MIN_VALUE;
}
}

protected final void initFTEXW(String s) {
if (!s.trim().isEmpty()) {
FTEXW = Byte.parseByte(s);
} else {
FTEXW = Byte.MIN_VALUE;
}
}

protected final void initFTQUALS(String s) {
if (!s.trim().isEmpty()) {
FTQUALS = Byte.parseByte(s);
} else {
FTQUALS = Byte.MIN_VALUE;
}
}

protected final void initFUTRA(String s) {
if (!s.trim().isEmpty()) {
FUTRA = Short.parseShort(s);
} else {
FUTRA = Short.MIN_VALUE;
}
}

protected final void initFUTRB(String s) {
if (!s.trim().isEmpty()) {
FUTRB = Short.parseShort(s);
} else {
FUTRB = Short.MIN_VALUE;
}
}

protected final void initFUTRC(String s) {
if (!s.trim().isEmpty()) {
FUTRC = Short.parseShort(s);
} else {
FUTRC = Short.MIN_VALUE;
}
}

protected final void initFUTRD(String s) {
if (!s.trim().isEmpty()) {
FUTRD = Short.parseShort(s);
} else {
FUTRD = Short.MIN_VALUE;
}
}

protected final void initFUTRE(String s) {
if (!s.trim().isEmpty()) {
FUTRE = Short.parseShort(s);
} else {
FUTRE = Short.MIN_VALUE;
}
}

protected final void initFUTRF(String s) {
if (!s.trim().isEmpty()) {
FUTRF = Short.parseShort(s);
} else {
FUTRF = Short.MIN_VALUE;
}
}

protected final void initFUTRG(String s) {
if (!s.trim().isEmpty()) {
FUTRG = Short.parseShort(s);
} else {
FUTRG = Short.MIN_VALUE;
}
}

protected final void initFUTRH(String s) {
if (!s.trim().isEmpty()) {
FUTRH = Short.parseShort(s);
} else {
FUTRH = Short.MIN_VALUE;
}
}

protected final void initFUTRI(String s) {
if (!s.trim().isEmpty()) {
FUTRI = Short.parseShort(s);
} else {
FUTRI = Short.MIN_VALUE;
}
}

protected final void initFUTRJ(String s) {
if (!s.trim().isEmpty()) {
FUTRJ = Short.parseShort(s);
} else {
FUTRJ = Short.MIN_VALUE;
}
}

protected final void initFUTRK(String s) {
if (!s.trim().isEmpty()) {
FUTRK = Short.parseShort(s);
} else {
FUTRK = Short.MIN_VALUE;
}
}

protected final void initFUTRL(String s) {
if (!s.trim().isEmpty()) {
FUTRL = Short.parseShort(s);
} else {
FUTRL = Short.MIN_VALUE;
}
}

protected final void initGIVECOA(String s) {
if (!s.trim().isEmpty()) {
GIVECOA = Byte.parseByte(s);
} else {
GIVECOA = Byte.MIN_VALUE;
}
}

protected final void initGRFPID(String s) {
if (!s.trim().isEmpty()) {
GRFPID = Integer.parseInt(s);
} else {
GRFPID = Integer.MIN_VALUE;
}
}

protected final void initGRFPNO(String s) {
if (!s.trim().isEmpty()) {
GRFPNO = Byte.parseByte(s);
} else {
GRFPNO = Byte.MIN_VALUE;
}
}

protected final void initGRMPID(String s) {
if (!s.trim().isEmpty()) {
GRMPID = Integer.parseInt(s);
} else {
GRMPID = Integer.MIN_VALUE;
}
}

protected final void initGRMPNO(String s) {
if (!s.trim().isEmpty()) {
GRMPNO = Byte.parseByte(s);
} else {
GRMPNO = Byte.MIN_VALUE;
}
}

protected final void initHASEMAIL(String s) {
if (!s.trim().isEmpty()) {
HASEMAIL = Byte.parseByte(s);
} else {
HASEMAIL = Byte.MIN_VALUE;
}
}

protected final void initHASSTEP(String s) {
if (!s.trim().isEmpty()) {
HASSTEP = Byte.parseByte(s);
} else {
HASSTEP = Byte.MIN_VALUE;
}
}

protected final void initHCOND1(String s) {
if (!s.trim().isEmpty()) {
HCOND1 = Byte.parseByte(s);
} else {
HCOND1 = Byte.MIN_VALUE;
}
}

protected final void initHCOND10(String s) {
if (!s.trim().isEmpty()) {
HCOND10 = Byte.parseByte(s);
} else {
HCOND10 = Byte.MIN_VALUE;
}
}

protected final void initHCOND11(String s) {
if (!s.trim().isEmpty()) {
HCOND11 = Byte.parseByte(s);
} else {
HCOND11 = Byte.MIN_VALUE;
}
}

protected final void initHCOND12(String s) {
if (!s.trim().isEmpty()) {
HCOND12 = Byte.parseByte(s);
} else {
HCOND12 = Byte.MIN_VALUE;
}
}

protected final void initHCOND13(String s) {
if (!s.trim().isEmpty()) {
HCOND13 = Byte.parseByte(s);
} else {
HCOND13 = Byte.MIN_VALUE;
}
}

protected final void initHCOND14(String s) {
if (!s.trim().isEmpty()) {
HCOND14 = Byte.parseByte(s);
} else {
HCOND14 = Byte.MIN_VALUE;
}
}

protected final void initHCOND15(String s) {
if (!s.trim().isEmpty()) {
HCOND15 = Byte.parseByte(s);
} else {
HCOND15 = Byte.MIN_VALUE;
}
}

protected final void initHCOND16(String s) {
if (!s.trim().isEmpty()) {
HCOND16 = Byte.parseByte(s);
} else {
HCOND16 = Byte.MIN_VALUE;
}
}

protected final void initHCOND17(String s) {
if (!s.trim().isEmpty()) {
HCOND17 = Byte.parseByte(s);
} else {
HCOND17 = Byte.MIN_VALUE;
}
}

protected final void initHCOND2(String s) {
if (!s.trim().isEmpty()) {
HCOND2 = Byte.parseByte(s);
} else {
HCOND2 = Byte.MIN_VALUE;
}
}

protected final void initHCOND3(String s) {
if (!s.trim().isEmpty()) {
HCOND3 = Byte.parseByte(s);
} else {
HCOND3 = Byte.MIN_VALUE;
}
}

protected final void initHCOND4(String s) {
if (!s.trim().isEmpty()) {
HCOND4 = Byte.parseByte(s);
} else {
HCOND4 = Byte.MIN_VALUE;
}
}

protected final void initHCOND5(String s) {
if (!s.trim().isEmpty()) {
HCOND5 = Byte.parseByte(s);
} else {
HCOND5 = Byte.MIN_VALUE;
}
}

protected final void initHCOND6(String s) {
if (!s.trim().isEmpty()) {
HCOND6 = Byte.parseByte(s);
} else {
HCOND6 = Byte.MIN_VALUE;
}
}

protected final void initHCOND7(String s) {
if (!s.trim().isEmpty()) {
HCOND7 = Byte.parseByte(s);
} else {
HCOND7 = Byte.MIN_VALUE;
}
}

protected final void initHCOND8(String s) {
if (!s.trim().isEmpty()) {
HCOND8 = Byte.parseByte(s);
} else {
HCOND8 = Byte.MIN_VALUE;
}
}

protected final void initHCOND9(String s) {
if (!s.trim().isEmpty()) {
HCOND9 = Byte.parseByte(s);
} else {
HCOND9 = Byte.MIN_VALUE;
}
}

protected final void initHCOND96(String s) {
if (!s.trim().isEmpty()) {
HCOND96 = Byte.parseByte(s);
} else {
HCOND96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA01(String s) {
if (!s.trim().isEmpty()) {
HCONDA01 = Byte.parseByte(s);
} else {
HCONDA01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA02(String s) {
if (!s.trim().isEmpty()) {
HCONDA02 = Byte.parseByte(s);
} else {
HCONDA02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA03(String s) {
if (!s.trim().isEmpty()) {
HCONDA03 = Byte.parseByte(s);
} else {
HCONDA03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA04(String s) {
if (!s.trim().isEmpty()) {
HCONDA04 = Byte.parseByte(s);
} else {
HCONDA04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA05(String s) {
if (!s.trim().isEmpty()) {
HCONDA05 = Byte.parseByte(s);
} else {
HCONDA05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA06(String s) {
if (!s.trim().isEmpty()) {
HCONDA06 = Byte.parseByte(s);
} else {
HCONDA06 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA07(String s) {
if (!s.trim().isEmpty()) {
HCONDA07 = Byte.parseByte(s);
} else {
HCONDA07 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA08(String s) {
if (!s.trim().isEmpty()) {
HCONDA08 = Byte.parseByte(s);
} else {
HCONDA08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA09(String s) {
if (!s.trim().isEmpty()) {
HCONDA09 = Byte.parseByte(s);
} else {
HCONDA09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA10(String s) {
if (!s.trim().isEmpty()) {
HCONDA10 = Byte.parseByte(s);
} else {
HCONDA10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA11(String s) {
if (!s.trim().isEmpty()) {
HCONDA11 = Byte.parseByte(s);
} else {
HCONDA11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA12(String s) {
if (!s.trim().isEmpty()) {
HCONDA12 = Byte.parseByte(s);
} else {
HCONDA12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA13(String s) {
if (!s.trim().isEmpty()) {
HCONDA13 = Byte.parseByte(s);
} else {
HCONDA13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA14(String s) {
if (!s.trim().isEmpty()) {
HCONDA14 = Byte.parseByte(s);
} else {
HCONDA14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA15(String s) {
if (!s.trim().isEmpty()) {
HCONDA15 = Byte.parseByte(s);
} else {
HCONDA15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA16(String s) {
if (!s.trim().isEmpty()) {
HCONDA16 = Byte.parseByte(s);
} else {
HCONDA16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA17(String s) {
if (!s.trim().isEmpty()) {
HCONDA17 = Byte.parseByte(s);
} else {
HCONDA17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN1(String s) {
if (!s.trim().isEmpty()) {
HCONDN1 = Byte.parseByte(s);
} else {
HCONDN1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN10(String s) {
if (!s.trim().isEmpty()) {
HCONDN10 = Byte.parseByte(s);
} else {
HCONDN10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN11(String s) {
if (!s.trim().isEmpty()) {
HCONDN11 = Byte.parseByte(s);
} else {
HCONDN11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN12(String s) {
if (!s.trim().isEmpty()) {
HCONDN12 = Byte.parseByte(s);
} else {
HCONDN12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN13(String s) {
if (!s.trim().isEmpty()) {
HCONDN13 = Byte.parseByte(s);
} else {
HCONDN13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN14(String s) {
if (!s.trim().isEmpty()) {
HCONDN14 = Byte.parseByte(s);
} else {
HCONDN14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN15(String s) {
if (!s.trim().isEmpty()) {
HCONDN15 = Byte.parseByte(s);
} else {
HCONDN15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN16(String s) {
if (!s.trim().isEmpty()) {
HCONDN16 = Byte.parseByte(s);
} else {
HCONDN16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN17(String s) {
if (!s.trim().isEmpty()) {
HCONDN17 = Byte.parseByte(s);
} else {
HCONDN17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN2(String s) {
if (!s.trim().isEmpty()) {
HCONDN2 = Byte.parseByte(s);
} else {
HCONDN2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN3(String s) {
if (!s.trim().isEmpty()) {
HCONDN3 = Byte.parseByte(s);
} else {
HCONDN3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN4(String s) {
if (!s.trim().isEmpty()) {
HCONDN4 = Byte.parseByte(s);
} else {
HCONDN4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN5(String s) {
if (!s.trim().isEmpty()) {
HCONDN5 = Byte.parseByte(s);
} else {
HCONDN5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN6(String s) {
if (!s.trim().isEmpty()) {
HCONDN6 = Byte.parseByte(s);
} else {
HCONDN6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN7(String s) {
if (!s.trim().isEmpty()) {
HCONDN7 = Byte.parseByte(s);
} else {
HCONDN7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN8(String s) {
if (!s.trim().isEmpty()) {
HCONDN8 = Byte.parseByte(s);
} else {
HCONDN8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN9(String s) {
if (!s.trim().isEmpty()) {
HCONDN9 = Byte.parseByte(s);
} else {
HCONDN9 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN96(String s) {
if (!s.trim().isEmpty()) {
HCONDN96 = Byte.parseByte(s);
} else {
HCONDN96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO1(String s) {
if (!s.trim().isEmpty()) {
HCONDNO1 = Byte.parseByte(s);
} else {
HCONDNO1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO2(String s) {
if (!s.trim().isEmpty()) {
HCONDNO2 = Byte.parseByte(s);
} else {
HCONDNO2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO3(String s) {
if (!s.trim().isEmpty()) {
HCONDNO3 = Byte.parseByte(s);
} else {
HCONDNO3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO4(String s) {
if (!s.trim().isEmpty()) {
HCONDNO4 = Byte.parseByte(s);
} else {
HCONDNO4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO5(String s) {
if (!s.trim().isEmpty()) {
HCONDNO5 = Byte.parseByte(s);
} else {
HCONDNO5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO6(String s) {
if (!s.trim().isEmpty()) {
HCONDNO6 = Byte.parseByte(s);
} else {
HCONDNO6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO7(String s) {
if (!s.trim().isEmpty()) {
HCONDNO7 = Byte.parseByte(s);
} else {
HCONDNO7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS1(String s) {
if (!s.trim().isEmpty()) {
HCONDNS1 = Byte.parseByte(s);
} else {
HCONDNS1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS2(String s) {
if (!s.trim().isEmpty()) {
HCONDNS2 = Byte.parseByte(s);
} else {
HCONDNS2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS3(String s) {
if (!s.trim().isEmpty()) {
HCONDNS3 = Byte.parseByte(s);
} else {
HCONDNS3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS4(String s) {
if (!s.trim().isEmpty()) {
HCONDNS4 = Byte.parseByte(s);
} else {
HCONDNS4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS5(String s) {
if (!s.trim().isEmpty()) {
HCONDNS5 = Byte.parseByte(s);
} else {
HCONDNS5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS6(String s) {
if (!s.trim().isEmpty()) {
HCONDNS6 = Byte.parseByte(s);
} else {
HCONDNS6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS7(String s) {
if (!s.trim().isEmpty()) {
HCONDNS7 = Byte.parseByte(s);
} else {
HCONDNS7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS01(String s) {
if (!s.trim().isEmpty()) {
HCONDS01 = Byte.parseByte(s);
} else {
HCONDS01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS02(String s) {
if (!s.trim().isEmpty()) {
HCONDS02 = Byte.parseByte(s);
} else {
HCONDS02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS03(String s) {
if (!s.trim().isEmpty()) {
HCONDS03 = Byte.parseByte(s);
} else {
HCONDS03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS04(String s) {
if (!s.trim().isEmpty()) {
HCONDS04 = Byte.parseByte(s);
} else {
HCONDS04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS05(String s) {
if (!s.trim().isEmpty()) {
HCONDS05 = Byte.parseByte(s);
} else {
HCONDS05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS08(String s) {
if (!s.trim().isEmpty()) {
HCONDS08 = Byte.parseByte(s);
} else {
HCONDS08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS09(String s) {
if (!s.trim().isEmpty()) {
HCONDS09 = Byte.parseByte(s);
} else {
HCONDS09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS10(String s) {
if (!s.trim().isEmpty()) {
HCONDS10 = Byte.parseByte(s);
} else {
HCONDS10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS11(String s) {
if (!s.trim().isEmpty()) {
HCONDS11 = Byte.parseByte(s);
} else {
HCONDS11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS12(String s) {
if (!s.trim().isEmpty()) {
HCONDS12 = Byte.parseByte(s);
} else {
HCONDS12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS13(String s) {
if (!s.trim().isEmpty()) {
HCONDS13 = Byte.parseByte(s);
} else {
HCONDS13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS14(String s) {
if (!s.trim().isEmpty()) {
HCONDS14 = Byte.parseByte(s);
} else {
HCONDS14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS15(String s) {
if (!s.trim().isEmpty()) {
HCONDS15 = Byte.parseByte(s);
} else {
HCONDS15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS16(String s) {
if (!s.trim().isEmpty()) {
HCONDS16 = Byte.parseByte(s);
} else {
HCONDS16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS17(String s) {
if (!s.trim().isEmpty()) {
HCONDS17 = Byte.parseByte(s);
} else {
HCONDS17 = Byte.MIN_VALUE;
}
}

protected final void initHEALTH(String s) {
if (!s.trim().isEmpty()) {
HEALTH = Byte.parseByte(s);
} else {
HEALTH = Byte.MIN_VALUE;
}
}

protected final void initHEALTHKIDSN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
HEALTHKIDSN = false;
} else {
HEALTHKIDSN = true;
}
}
}

protected final void initHEALTHSN(String s) {
if (!s.trim().isEmpty()) {
HEALTHSN = Byte.parseByte(s);
} else {
HEALTHSN = Byte.MIN_VALUE;
}
}

protected final void initHEDLIK(String s) {
if (!s.trim().isEmpty()) {
HEDLIK = Byte.parseByte(s);
} else {
HEDLIK = Byte.MIN_VALUE;
}
}

protected final void initHEDNT(String s) {
if (!s.trim().isEmpty()) {
HEDNT = Byte.parseByte(s);
} else {
HEDNT = Byte.MIN_VALUE;
}
}

protected final void initHEDNTO_CODE(String s) {
if (!s.trim().isEmpty()) {
HEDNTO_CODE = Byte.parseByte(s);
} else {
HEDNTO_CODE = Byte.MIN_VALUE;
}
}

protected final void initHERFREQ(String s) {
if (!s.trim().isEmpty()) {
HERFREQ = Byte.parseByte(s);
} else {
HERFREQ = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE1(String s) {
if (!s.trim().isEmpty()) {
HERITAGE1 = Byte.parseByte(s);
} else {
HERITAGE1 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE2(String s) {
if (!s.trim().isEmpty()) {
HERITAGE2 = Byte.parseByte(s);
} else {
HERITAGE2 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE3(String s) {
if (!s.trim().isEmpty()) {
HERITAGE3 = Byte.parseByte(s);
} else {
HERITAGE3 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE4(String s) {
if (!s.trim().isEmpty()) {
HERITAGE4 = Byte.parseByte(s);
} else {
HERITAGE4 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE5(String s) {
if (!s.trim().isEmpty()) {
HERITAGE5 = Byte.parseByte(s);
} else {
HERITAGE5 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE6(String s) {
if (!s.trim().isEmpty()) {
HERITAGE6 = Byte.parseByte(s);
} else {
HERITAGE6 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE7(String s) {
if (!s.trim().isEmpty()) {
HERITAGE7 = Byte.parseByte(s);
} else {
HERITAGE7 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE8(String s) {
if (!s.trim().isEmpty()) {
HERITAGE8 = Byte.parseByte(s);
} else {
HERITAGE8 = Byte.MIN_VALUE;
}
}

protected final void initHERITAGE96(String s) {
if (!s.trim().isEmpty()) {
HERITAGE96 = Byte.parseByte(s);
} else {
HERITAGE96 = Byte.MIN_VALUE;
}
}

protected final void initHESACONS(String s) {
if (!s.trim().isEmpty()) {
HESACONS = Byte.parseByte(s);
} else {
HESACONS = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTF(String s) {
if (!s.trim().isEmpty()) {
HGADOPTF = Byte.parseByte(s);
} else {
HGADOPTF = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTM(String s) {
if (!s.trim().isEmpty()) {
HGADOPTM = Byte.parseByte(s);
} else {
HGADOPTM = Byte.MIN_VALUE;
}
}

protected final void initHGPART(String s) {
if (!s.trim().isEmpty()) {
HGPART = Byte.parseByte(s);
} else {
HGPART = Byte.MIN_VALUE;
}
}

protected final void initHHRESP_DV(String s) {
if (!s.trim().isEmpty()) {
HHRESP_DV = Byte.parseByte(s);
} else {
HHRESP_DV = Byte.MIN_VALUE;
}
}

protected final void initHHTYPDV(String s) {
if (!s.trim().isEmpty()) {
HHTYPDV = Byte.parseByte(s);
} else {
HHTYPDV = Byte.MIN_VALUE;
}
}

protected final void initHITSIB(String s) {
if (!s.trim().isEmpty()) {
HITSIB = Byte.parseByte(s);
} else {
HITSIB = Byte.MIN_VALUE;
}
}

protected final void initHLPHMWK(String s) {
if (!s.trim().isEmpty()) {
HLPHMWK = Byte.parseByte(s);
} else {
HLPHMWK = Byte.MIN_VALUE;
}
}

protected final void initHLTHISGN(String s) {
if (!s.trim().isEmpty()) {
HLTHISGN = Byte.parseByte(s);
} else {
HLTHISGN = Byte.MIN_VALUE;
}
}

protected final void initHLTHKIDLINK(String s) {
if (!s.trim().isEmpty()) {
HLTHKIDLINK = Byte.parseByte(s);
} else {
HLTHKIDLINK = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINK(String s) {
if (!s.trim().isEmpty()) {
HLTHLINK = Byte.parseByte(s);
} else {
HLTHLINK = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINKB1(String s) {
if (!s.trim().isEmpty()) {
HLTHLINKB1 = Byte.parseByte(s);
} else {
HLTHLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINKB2(String s) {
if (!s.trim().isEmpty()) {
HLTHLINKB2 = Byte.parseByte(s);
} else {
HLTHLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINKB3(String s) {
if (!s.trim().isEmpty()) {
HLTHLINKB3 = Byte.parseByte(s);
} else {
HLTHLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initHLTHRECD(String s) {
if (!s.trim().isEmpty()) {
HLTHRECD = Byte.parseByte(s);
} else {
HLTHRECD = Byte.MIN_VALUE;
}
}

protected final void initHLTHRSGN(String s) {
if (!s.trim().isEmpty()) {
HLTHRSGN = Byte.parseByte(s);
} else {
HLTHRSGN = Byte.MIN_VALUE;
}
}

protected final void initHMRCLINK(String s) {
if (!s.trim().isEmpty()) {
HMRCLINK = Byte.parseByte(s);
} else {
HMRCLINK = Byte.MIN_VALUE;
}
}

protected final void initHOSPC1(String s) {
if (!s.trim().isEmpty()) {
HOSPC1 = Byte.parseByte(s);
} else {
HOSPC1 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC2(String s) {
if (!s.trim().isEmpty()) {
HOSPC2 = Byte.parseByte(s);
} else {
HOSPC2 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC3(String s) {
if (!s.trim().isEmpty()) {
HOSPC3 = Byte.parseByte(s);
} else {
HOSPC3 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC4(String s) {
if (!s.trim().isEmpty()) {
HOSPC4 = Byte.parseByte(s);
} else {
HOSPC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC5(String s) {
if (!s.trim().isEmpty()) {
HOSPC5 = Byte.parseByte(s);
} else {
HOSPC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC6(String s) {
if (!s.trim().isEmpty()) {
HOSPC6 = Byte.parseByte(s);
} else {
HOSPC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC7(String s) {
if (!s.trim().isEmpty()) {
HOSPC7 = Byte.parseByte(s);
} else {
HOSPC7 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC1(String s) {
if (!s.trim().isEmpty()) {
HOSPDC1 = Short.parseShort(s);
} else {
HOSPDC1 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC2(String s) {
if (!s.trim().isEmpty()) {
HOSPDC2 = Short.parseShort(s);
} else {
HOSPDC2 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC3(String s) {
if (!s.trim().isEmpty()) {
HOSPDC3 = Short.parseShort(s);
} else {
HOSPDC3 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC4(String s) {
if (!s.trim().isEmpty()) {
HOSPDC4 = Byte.parseByte(s);
} else {
HOSPDC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC5(String s) {
if (!s.trim().isEmpty()) {
HOSPDC5 = Byte.parseByte(s);
} else {
HOSPDC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC6(String s) {
if (!s.trim().isEmpty()) {
HOSPDC6 = Byte.parseByte(s);
} else {
HOSPDC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC7(String s) {
if (!s.trim().isEmpty()) {
HOSPDC7 = Byte.parseByte(s);
} else {
HOSPDC7 = Byte.MIN_VALUE;
}
}

protected final void initHOUSING(String s) {
if (!s.trim().isEmpty()) {
HOUSING = Byte.parseByte(s);
} else {
HOUSING = Byte.MIN_VALUE;
}
}

protected final void initHRPID(String s) {
if (!s.trim().isEmpty()) {
HRPID = Integer.parseInt(s);
} else {
HRPID = Integer.MIN_VALUE;
}
}

protected final void initHRPNO(String s) {
if (!s.trim().isEmpty()) {
HRPNO = Byte.parseByte(s);
} else {
HRPNO = Byte.MIN_VALUE;
}
}

protected final void initIENDDATD(String s) {
if (!s.trim().isEmpty()) {
IENDDATD = Byte.parseByte(s);
} else {
IENDDATD = Byte.MIN_VALUE;
}
}

protected final void initIENDDATM(String s) {
if (!s.trim().isEmpty()) {
IENDDATM = Byte.parseByte(s);
} else {
IENDDATM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATMM(String s) {
if (!s.trim().isEmpty()) {
IENDDATMM = Byte.parseByte(s);
} else {
IENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATSS(String s) {
if (!s.trim().isEmpty()) {
IENDDATSS = Byte.parseByte(s);
} else {
IENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initIENDDATY(String s) {
if (!s.trim().isEmpty()) {
IENDDATY = Short.parseShort(s);
} else {
IENDDATY = Short.MIN_VALUE;
}
}

protected final void initIND5MUS_LW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_LW = Double.parseDouble(s);
} else {
IND5MUS_LW = Double.NaN;
}
}

protected final void initIND5MUS_XW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_XW = Double.parseDouble(s);
} else {
IND5MUS_XW = Double.NaN;
}
}

protected final void initINDBD91_LW(String s) {
if (!s.trim().isEmpty()) {
INDBD91_LW = Double.parseDouble(s);
} else {
INDBD91_LW = Double.NaN;
}
}

protected final void initINDBDUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDBDUB_LW = Double.parseDouble(s);
} else {
INDBDUB_LW = Double.NaN;
}
}

protected final void initINDIN01_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN01_LW = Double.parseDouble(s);
} else {
INDIN01_LW = Double.NaN;
}
}

protected final void initINDIN91_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN91_LW = Double.parseDouble(s);
} else {
INDIN91_LW = Double.NaN;
}
}

protected final void initINDINUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_LW = Double.parseDouble(s);
} else {
INDINUB_LW = Double.NaN;
}
}

protected final void initINDINUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_XW = Double.parseDouble(s);
} else {
INDINUB_XW = Double.NaN;
}
}

protected final void initINDINUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUS_LW = Double.parseDouble(s);
} else {
INDINUS_LW = Double.NaN;
}
}

protected final void initINDMODE(String s) {
if (!s.trim().isEmpty()) {
INDMODE = Byte.parseByte(s);
} else {
INDMODE = Byte.MIN_VALUE;
}
}

protected final void initINDNS91_LW(String s) {
if (!s.trim().isEmpty()) {
INDNS91_LW = Double.parseDouble(s);
} else {
INDNS91_LW = Double.NaN;
}
}

protected final void initINDNSUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDNSUB_LW = Double.parseDouble(s);
} else {
INDNSUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_LW = Double.parseDouble(s);
} else {
INDPXUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_XW = Double.parseDouble(s);
} else {
INDPXUB_XW = Double.NaN;
}
}

protected final void initINDPXUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUS_LW = Double.parseDouble(s);
} else {
INDPXUS_LW = Double.NaN;
}
}

protected final void initINDSCUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_LW = Double.parseDouble(s);
} else {
INDSCUB_LW = Double.NaN;
}
}

protected final void initINDSCUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_XW = Double.parseDouble(s);
} else {
INDSCUB_XW = Double.NaN;
}
}

protected final void initINDSCUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUS_LW = Double.parseDouble(s);
} else {
INDSCUS_LW = Double.NaN;
}
}

protected final void initINSTOK(String s) {
if (!s.trim().isEmpty()) {
INSTOK = Byte.parseByte(s);
} else {
INSTOK = Byte.MIN_VALUE;
}
}

protected final void initINSTOK2(String s) {
if (!s.trim().isEmpty()) {
INSTOK2 = Byte.parseByte(s);
} else {
INSTOK2 = Byte.MIN_VALUE;
}
}

protected final void initINSTOK3(String s) {
if (!s.trim().isEmpty()) {
INSTOK3 = Byte.parseByte(s);
} else {
INSTOK3 = Byte.MIN_VALUE;
}
}

protected final void initINSTOK4(String s) {
if (!s.trim().isEmpty()) {
INSTOK4 = Byte.parseByte(s);
} else {
INSTOK4 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED1(String s) {
if (!s.trim().isEmpty()) {
INSULTED1 = Byte.parseByte(s);
} else {
INSULTED1 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED10(String s) {
if (!s.trim().isEmpty()) {
INSULTED10 = Byte.parseByte(s);
} else {
INSULTED10 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED11(String s) {
if (!s.trim().isEmpty()) {
INSULTED11 = Byte.parseByte(s);
} else {
INSULTED11 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED2(String s) {
if (!s.trim().isEmpty()) {
INSULTED2 = Byte.parseByte(s);
} else {
INSULTED2 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED3(String s) {
if (!s.trim().isEmpty()) {
INSULTED3 = Byte.parseByte(s);
} else {
INSULTED3 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED4(String s) {
if (!s.trim().isEmpty()) {
INSULTED4 = Byte.parseByte(s);
} else {
INSULTED4 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED5(String s) {
if (!s.trim().isEmpty()) {
INSULTED5 = Byte.parseByte(s);
} else {
INSULTED5 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED6(String s) {
if (!s.trim().isEmpty()) {
INSULTED6 = Byte.parseByte(s);
} else {
INSULTED6 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED7(String s) {
if (!s.trim().isEmpty()) {
INSULTED7 = Byte.parseByte(s);
} else {
INSULTED7 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED8(String s) {
if (!s.trim().isEmpty()) {
INSULTED8 = Byte.parseByte(s);
} else {
INSULTED8 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED9(String s) {
if (!s.trim().isEmpty()) {
INSULTED9 = Byte.parseByte(s);
} else {
INSULTED9 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED96(String s) {
if (!s.trim().isEmpty()) {
INSULTED96 = Byte.parseByte(s);
} else {
INSULTED96 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED97(String s) {
if (!s.trim().isEmpty()) {
INSULTED97 = Byte.parseByte(s);
} else {
INSULTED97 = Byte.MIN_VALUE;
}
}

protected final void initINSULTEDO_CODE(String s) {
if (!s.trim().isEmpty()) {
INSULTEDO_CODE = Byte.parseByte(s);
} else {
INSULTEDO_CODE = Byte.MIN_VALUE;
}
}

protected final void initINSULTED_DV(String s) {
if (!s.trim().isEmpty()) {
INSULTED_DV = Byte.parseByte(s);
} else {
INSULTED_DV = Byte.MIN_VALUE;
}
}

protected final void initINTCONTACT(String s) {
if (!s.trim().isEmpty()) {
INTCONTACT = Byte.parseByte(s);
} else {
INTCONTACT = Byte.MIN_VALUE;
}
}

protected final void initINTDATD_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATD_DV = Byte.parseByte(s);
} else {
INTDATD_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATM_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATM_DV = Byte.parseByte(s);
} else {
INTDATM_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATY_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATY_DV = Short.parseShort(s);
} else {
INTDATY_DV = Short.MIN_VALUE;
}
}

protected final void initINTSIGNHEALTH(String s) {
if (!s.trim().isEmpty()) {
INTSIGNHEALTH = Byte.parseByte(s);
} else {
INTSIGNHEALTH = Byte.MIN_VALUE;
}
}

protected final void initINVITRO1(String s) {
if (!s.trim().isEmpty()) {
INVITRO1 = Byte.parseByte(s);
} else {
INVITRO1 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO2(String s) {
if (!s.trim().isEmpty()) {
INVITRO2 = Byte.parseByte(s);
} else {
INVITRO2 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO3(String s) {
if (!s.trim().isEmpty()) {
INVITRO3 = Byte.parseByte(s);
} else {
INVITRO3 = Byte.MIN_VALUE;
}
}

protected final void initIOUTCOME(String s) {
if (!s.trim().isEmpty()) {
IOUTCOME = Byte.parseByte(s);
} else {
IOUTCOME = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATMM = Byte.parseByte(s);
} else {
ISTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATSS = Byte.parseByte(s);
} else {
ISTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initISYEAR(String s) {
if (!s.trim().isEmpty()) {
ISYEAR = Short.parseShort(s);
} else {
ISYEAR = Short.MIN_VALUE;
}
}

protected final void initIVAFFCT11(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT11 = Byte.parseByte(s);
} else {
IVAFFCT11 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT12(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT12 = Byte.parseByte(s);
} else {
IVAFFCT12 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT13(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT13 = Byte.parseByte(s);
} else {
IVAFFCT13 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT14(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT14 = Byte.parseByte(s);
} else {
IVAFFCT14 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT15(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT15 = Byte.parseByte(s);
} else {
IVAFFCT15 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT17(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT17 = Byte.parseByte(s);
} else {
IVAFFCT17 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT21(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT21 = Byte.parseByte(s);
} else {
IVAFFCT21 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT22(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT22 = Byte.parseByte(s);
} else {
IVAFFCT22 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT23(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT23 = Byte.parseByte(s);
} else {
IVAFFCT23 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT27(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT27 = Byte.parseByte(s);
} else {
IVAFFCT27 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT30(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT30 = Byte.parseByte(s);
} else {
IVAFFCT30 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT97(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT97 = Byte.parseByte(s);
} else {
IVAFFCT97 = Byte.MIN_VALUE;
}
}

protected final void initIVCOOP(String s) {
if (!s.trim().isEmpty()) {
IVCOOP = Byte.parseByte(s);
} else {
IVCOOP = Byte.MIN_VALUE;
}
}

protected final void initIVINFNCE(String s) {
if (!s.trim().isEmpty()) {
IVINFNCE = Byte.parseByte(s);
} else {
IVINFNCE = Byte.MIN_VALUE;
}
}

protected final void initIVLIBAL(String s) {
if (!s.trim().isEmpty()) {
IVLIBAL = Byte.parseByte(s);
} else {
IVLIBAL = Byte.MIN_VALUE;
}
}

protected final void initIVLIENG(String s) {
if (!s.trim().isEmpty()) {
IVLIENG = Byte.parseByte(s);
} else {
IVLIENG = Byte.MIN_VALUE;
}
}

protected final void initIVLITRANS(String s) {
if (!s.trim().isEmpty()) {
IVLITRANS = Byte.parseByte(s);
} else {
IVLITRANS = Byte.MIN_VALUE;
}
}

protected final void initIVLIWHO(String s) {
if (!s.trim().isEmpty()) {
IVLIWHO = Byte.parseByte(s);
} else {
IVLIWHO = Byte.MIN_VALUE;
}
}

protected final void initJ1BOSS(String s) {
if (!s.trim().isEmpty()) {
J1BOSS = Byte.parseByte(s);
} else {
J1BOSS = Byte.MIN_VALUE;
}
}

protected final void initJ1MNGR(String s) {
if (!s.trim().isEmpty()) {
J1MNGR = Byte.parseByte(s);
} else {
J1MNGR = Byte.MIN_VALUE;
}
}

protected final void initJ1NONE(String s) {
if (!s.trim().isEmpty()) {
J1NONE = Byte.parseByte(s);
} else {
J1NONE = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC5_DV = Byte.parseByte(s);
} else {
J1NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1SEMP(String s) {
if (!s.trim().isEmpty()) {
J1SEMP = Byte.parseByte(s);
} else {
J1SEMP = Byte.MIN_VALUE;
}
}

protected final void initJ1SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC00_CC = Short.parseShort(s);
} else {
J1SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC10_CC = Short.parseShort(s);
} else {
J1SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC90_CC = Byte.parseByte(s);
} else {
J1SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJ2NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J2NSSEC5_DV = Byte.parseByte(s);
} else {
J2NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ2PAY(String s) {
if (!s.trim().isEmpty()) {
J2PAY = Integer.parseInt(s);
} else {
J2PAY = Integer.MIN_VALUE;
}
}

protected final void initJ2PAYNET_DV(String s) {
if (!s.trim().isEmpty()) {
J2PAYNET_DV = Double.parseDouble(s);
} else {
J2PAYNET_DV = Double.NaN;
}
}

protected final void initJ2SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC00_CC = Short.parseShort(s);
} else {
J2SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC10_CC = Short.parseShort(s);
} else {
J2SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC90_CC = Short.parseShort(s);
} else {
J2SOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBATT1(String s) {
if (!s.trim().isEmpty()) {
JBATT1 = Byte.parseByte(s);
} else {
JBATT1 = Byte.MIN_VALUE;
}
}

protected final void initJBATT2(String s) {
if (!s.trim().isEmpty()) {
JBATT2 = Byte.parseByte(s);
} else {
JBATT2 = Byte.MIN_VALUE;
}
}

protected final void initJBATT3(String s) {
if (!s.trim().isEmpty()) {
JBATT3 = Byte.parseByte(s);
} else {
JBATT3 = Byte.MIN_VALUE;
}
}

protected final void initJBATT4(String s) {
if (!s.trim().isEmpty()) {
JBATT4 = Byte.parseByte(s);
} else {
JBATT4 = Byte.MIN_VALUE;
}
}

protected final void initJBATT5(String s) {
if (!s.trim().isEmpty()) {
JBATT5 = Byte.parseByte(s);
} else {
JBATT5 = Byte.MIN_VALUE;
}
}

protected final void initJBATT6(String s) {
if (!s.trim().isEmpty()) {
JBATT6 = Byte.parseByte(s);
} else {
JBATT6 = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATD(String s) {
if (!s.trim().isEmpty()) {
JBBGDATD = Byte.parseByte(s);
} else {
JBBGDATD = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATM(String s) {
if (!s.trim().isEmpty()) {
JBBGDATM = Byte.parseByte(s);
} else {
JBBGDATM = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATY(String s) {
if (!s.trim().isEmpty()) {
JBBGDATY = Short.parseShort(s);
} else {
JBBGDATY = Short.MIN_VALUE;
}
}

protected final void initJBENDD(String s) {
if (!s.trim().isEmpty()) {
JBENDD = Byte.parseByte(s);
} else {
JBENDD = Byte.MIN_VALUE;
}
}

protected final void initJBENDM(String s) {
if (!s.trim().isEmpty()) {
JBENDM = Byte.parseByte(s);
} else {
JBENDM = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS = Byte.parseByte(s);
} else {
JBENDREAS = Byte.MIN_VALUE;
}
}

protected final void initJBENDY4(String s) {
if (!s.trim().isEmpty()) {
JBENDY4 = Short.parseShort(s);
} else {
JBENDY4 = Short.MIN_VALUE;
}
}

protected final void initJBES2000(String s) {
if (!s.trim().isEmpty()) {
JBES2000 = Byte.parseByte(s);
} else {
JBES2000 = Byte.MIN_VALUE;
}
}

protected final void initJBIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JBIINDB_DV = Byte.parseByte(s);
} else {
JBIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJBMNGRCHK(String s) {
if (!s.trim().isEmpty()) {
JBMNGRCHK = Byte.parseByte(s);
} else {
JBMNGRCHK = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC3_DV = Byte.parseByte(s);
} else {
JBNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC5_DV = Byte.parseByte(s);
} else {
JBNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC_DV = Short.parseShort(s);
} else {
JBNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJBOFFY(String s) {
if (!s.trim().isEmpty()) {
JBOFFY = Byte.parseByte(s);
} else {
JBOFFY = Byte.MIN_VALUE;
}
}

protected final void initJBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JBRGSC_DV = Short.parseShort(s);
} else {
JBRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJBSAMR(String s) {
if (!s.trim().isEmpty()) {
JBSAMR = Byte.parseByte(s);
} else {
JBSAMR = Byte.MIN_VALUE;
}
}

protected final void initJBSAT(String s) {
if (!s.trim().isEmpty()) {
JBSAT = Byte.parseByte(s);
} else {
JBSAT = Byte.MIN_VALUE;
}
}

protected final void initJBSECTPUB(String s) {
if (!s.trim().isEmpty()) {
JBSECTPUB = Byte.parseByte(s);
} else {
JBSECTPUB = Byte.MIN_VALUE;
}
}

protected final void initJBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JBSEG_DV = Short.parseShort(s);
} else {
JBSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJBSEMPCHK(String s) {
if (!s.trim().isEmpty()) {
JBSEMPCHK = Byte.parseByte(s);
} else {
JBSEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07CHK(String s) {
if (!s.trim().isEmpty()) {
JBSIC07CHK = Byte.parseByte(s);
} else {
JBSIC07CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JBSIC07_CC = Byte.parseByte(s);
} else {
JBSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJBSIZECHK(String s) {
if (!s.trim().isEmpty()) {
JBSIZECHK = Byte.parseByte(s);
} else {
JBSIZECHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00CHK(String s) {
if (!s.trim().isEmpty()) {
JBSOC00CHK = Byte.parseByte(s);
} else {
JBSOC00CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC00_CC = Short.parseShort(s);
} else {
JBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC10_CC = Short.parseShort(s);
} else {
JBSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOCGR_DV(String s) {
if (!s.trim().isEmpty()) {
JBSOCGR_DV = Byte.parseByte(s);
} else {
JBSOCGR_DV = Byte.MIN_VALUE;
}
}

protected final void initJBTERM1(String s) {
if (!s.trim().isEmpty()) {
JBTERM1 = Byte.parseByte(s);
} else {
JBTERM1 = Byte.MIN_VALUE;
}
}

protected final void initJBTERM2(String s) {
if (!s.trim().isEmpty()) {
JBTERM2 = Byte.parseByte(s);
} else {
JBTERM2 = Byte.MIN_VALUE;
}
}

protected final void initJLENDM(String s) {
if (!s.trim().isEmpty()) {
JLENDM = Byte.parseByte(s);
} else {
JLENDM = Byte.MIN_VALUE;
}
}

protected final void initJLES2000(String s) {
if (!s.trim().isEmpty()) {
JLES2000 = Byte.parseByte(s);
} else {
JLES2000 = Byte.MIN_VALUE;
}
}

protected final void initJLIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JLIINDB_DV = Byte.parseByte(s);
} else {
JLIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC3_DV = Byte.parseByte(s);
} else {
JLNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC5_DV = Byte.parseByte(s);
} else {
JLNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC_DV = Short.parseShort(s);
} else {
JLNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JLRGSC_DV = Short.parseShort(s);
} else {
JLRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JLSEG_DV = Short.parseShort(s);
} else {
JLSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJLSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JLSIC07_CC = Byte.parseByte(s);
} else {
JLSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJLSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC00_CC = Short.parseShort(s);
} else {
JLSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJLSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC10_CC = Short.parseShort(s);
} else {
JLSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJOBDENY(String s) {
if (!s.trim().isEmpty()) {
JOBDENY = Byte.parseByte(s);
} else {
JOBDENY = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS1(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS1 = Byte.parseByte(s);
} else {
JOBHOURS1 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS2(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS2 = Byte.parseByte(s);
} else {
JOBHOURS2 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS3(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS3 = Byte.parseByte(s);
} else {
JOBHOURS3 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS4(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS4 = Byte.parseByte(s);
} else {
JOBHOURS4 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS5(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS5 = Byte.parseByte(s);
} else {
JOBHOURS5 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS6(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS6 = Byte.parseByte(s);
} else {
JOBHOURS6 = Byte.MIN_VALUE;
}
}

protected final void initJOBLOOK(String s) {
if (!s.trim().isEmpty()) {
JOBLOOK = Byte.parseByte(s);
} else {
JOBLOOK = Byte.MIN_VALUE;
}
}

protected final void initJSPART(String s) {
if (!s.trim().isEmpty()) {
JSPART = Byte.parseByte(s);
} else {
JSPART = Byte.MIN_VALUE;
}
}

protected final void initJSPAYU(String s) {
if (!s.trim().isEmpty()) {
JSPAYU = Integer.parseInt(s);
} else {
JSPAYU = Integer.MIN_VALUE;
}
}

protected final void initJSPAYW(String s) {
if (!s.trim().isEmpty()) {
JSPAYW = Byte.parseByte(s);
} else {
JSPAYW = Byte.MIN_VALUE;
}
}

protected final void initJSPRLS(String s) {
if (!s.trim().isEmpty()) {
JSPRLS = Byte.parseByte(s);
} else {
JSPRLS = Byte.MIN_VALUE;
}
}

protected final void initJSPRNI(String s) {
if (!s.trim().isEmpty()) {
JSPRNI = Byte.parseByte(s);
} else {
JSPRNI = Byte.MIN_VALUE;
}
}

protected final void initJSPRTX(String s) {
if (!s.trim().isEmpty()) {
JSPRTX = Byte.parseByte(s);
} else {
JSPRTX = Byte.MIN_VALUE;
}
}

protected final void initJSPYNI(String s) {
if (!s.trim().isEmpty()) {
JSPYNI = Byte.parseByte(s);
} else {
JSPYNI = Byte.MIN_VALUE;
}
}

protected final void initJSPYTX(String s) {
if (!s.trim().isEmpty()) {
JSPYTX = Byte.parseByte(s);
} else {
JSPYTX = Byte.MIN_VALUE;
}
}

protected final void initJSTYPEB(String s) {
if (!s.trim().isEmpty()) {
JSTYPEB = Byte.parseByte(s);
} else {
JSTYPEB = Byte.MIN_VALUE;
}
}

protected final void initJSWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
JSWORKTRAV = Byte.parseByte(s);
} else {
JSWORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initJUBGN(String s) {
if (!s.trim().isEmpty()) {
JUBGN = Short.parseShort(s);
} else {
JUBGN = Short.MIN_VALUE;
}
}

protected final void initJULK4X1(String s) {
if (!s.trim().isEmpty()) {
JULK4X1 = Short.parseShort(s);
} else {
JULK4X1 = Short.MIN_VALUE;
}
}

protected final void initJULK4X2(String s) {
if (!s.trim().isEmpty()) {
JULK4X2 = Short.parseShort(s);
} else {
JULK4X2 = Short.MIN_VALUE;
}
}

protected final void initJULK4X3(String s) {
if (!s.trim().isEmpty()) {
JULK4X3 = Byte.parseByte(s);
} else {
JULK4X3 = Byte.MIN_VALUE;
}
}

protected final void initJULK4X4(String s) {
if (!s.trim().isEmpty()) {
JULK4X4 = Short.parseShort(s);
} else {
JULK4X4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X5(String s) {
if (!s.trim().isEmpty()) {
JULK4X5 = Short.parseShort(s);
} else {
JULK4X5 = Short.MIN_VALUE;
}
}

protected final void initJULK4X6(String s) {
if (!s.trim().isEmpty()) {
JULK4X6 = Short.parseShort(s);
} else {
JULK4X6 = Short.MIN_VALUE;
}
}

protected final void initJULK4X96(String s) {
if (!s.trim().isEmpty()) {
JULK4X96 = Byte.parseByte(s);
} else {
JULK4X96 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI01(String s) {
if (!s.trim().isEmpty()) {
KID2UNI01 = Byte.parseByte(s);
} else {
KID2UNI01 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI02(String s) {
if (!s.trim().isEmpty()) {
KID2UNI02 = Byte.parseByte(s);
} else {
KID2UNI02 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI03(String s) {
if (!s.trim().isEmpty()) {
KID2UNI03 = Byte.parseByte(s);
} else {
KID2UNI03 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI04(String s) {
if (!s.trim().isEmpty()) {
KID2UNI04 = Byte.parseByte(s);
} else {
KID2UNI04 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI05(String s) {
if (!s.trim().isEmpty()) {
KID2UNI05 = Byte.parseByte(s);
} else {
KID2UNI05 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI06(String s) {
if (!s.trim().isEmpty()) {
KID2UNI06 = Byte.parseByte(s);
} else {
KID2UNI06 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI07(String s) {
if (!s.trim().isEmpty()) {
KID2UNI07 = Byte.parseByte(s);
} else {
KID2UNI07 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI08(String s) {
if (!s.trim().isEmpty()) {
KID2UNI08 = Byte.parseByte(s);
} else {
KID2UNI08 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI09(String s) {
if (!s.trim().isEmpty()) {
KID2UNI09 = Byte.parseByte(s);
} else {
KID2UNI09 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI10(String s) {
if (!s.trim().isEmpty()) {
KID2UNI10 = Byte.parseByte(s);
} else {
KID2UNI10 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI11(String s) {
if (!s.trim().isEmpty()) {
KID2UNI11 = Byte.parseByte(s);
} else {
KID2UNI11 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI12(String s) {
if (!s.trim().isEmpty()) {
KID2UNI12 = Byte.parseByte(s);
} else {
KID2UNI12 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI13(String s) {
if (!s.trim().isEmpty()) {
KID2UNI13 = Byte.parseByte(s);
} else {
KID2UNI13 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI14(String s) {
if (!s.trim().isEmpty()) {
KID2UNI14 = Byte.parseByte(s);
} else {
KID2UNI14 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI15(String s) {
if (!s.trim().isEmpty()) {
KID2UNI15 = Byte.parseByte(s);
} else {
KID2UNI15 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI16(String s) {
if (!s.trim().isEmpty()) {
KID2UNI16 = Byte.parseByte(s);
} else {
KID2UNI16 = Byte.MIN_VALUE;
}
}

protected final void initKIDSPT(String s) {
if (!s.trim().isEmpty()) {
KIDSPT = Byte.parseByte(s);
} else {
KIDSPT = Byte.MIN_VALUE;
}
}

protected final void initLADOPT(String s) {
if (!s.trim().isEmpty()) {
LADOPT = Byte.parseByte(s);
} else {
LADOPT = Byte.MIN_VALUE;
}
}

protected final void initLATE(String s) {
if (!s.trim().isEmpty()) {
LATE = Byte.parseByte(s);
} else {
LATE = Byte.MIN_VALUE;
}
}

protected final void initLCHMOR(String s) {
if (!s.trim().isEmpty()) {
LCHMOR = Byte.parseByte(s);
} else {
LCHMOR = Byte.MIN_VALUE;
}
}

protected final void initLCHMORN(String s) {
if (!s.trim().isEmpty()) {
LCHMORN = Byte.parseByte(s);
} else {
LCHMORN = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI1(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI1 = Byte.parseByte(s);
} else {
LCHMULTI1 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI2(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI2 = Byte.parseByte(s);
} else {
LCHMULTI2 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI3(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI3 = Byte.parseByte(s);
} else {
LCHMULTI3 = Byte.MIN_VALUE;
}
}

protected final void initLCOHNPI(String s) {
if (!s.trim().isEmpty()) {
LCOHNPI = Byte.parseByte(s);
} else {
LCOHNPI = Byte.MIN_VALUE;
}
}

protected final void initLENINDINTV(String s) {
if (!s.trim().isEmpty()) {
LENINDINTV = Double.parseDouble(s);
} else {
LENINDINTV = Double.NaN;
}
}

protected final void initLEVELIMP(String s) {
if (!s.trim().isEmpty()) {
LEVELIMP = Byte.parseByte(s);
} else {
LEVELIMP = Byte.MIN_VALUE;
}
}

protected final void initLGAPED(String s) {
if (!s.trim().isEmpty()) {
LGAPED = Byte.parseByte(s);
} else {
LGAPED = Byte.MIN_VALUE;
}
}

protected final void initLIBFREQ(String s) {
if (!s.trim().isEmpty()) {
LIBFREQ = Byte.parseByte(s);
} else {
LIBFREQ = Byte.MIN_VALUE;
}
}

protected final void initLIENG(String s) {
if (!s.trim().isEmpty()) {
LIENG = Byte.parseByte(s);
} else {
LIENG = Byte.MIN_VALUE;
}
}

protected final void initLIHOW(String s) {
if (!s.trim().isEmpty()) {
LIHOW = Byte.parseByte(s);
} else {
LIHOW = Byte.MIN_VALUE;
}
}

protected final void initLINGUA(String s) {
if (!s.trim().isEmpty()) {
LINGUA = Byte.parseByte(s);
} else {
LINGUA = Byte.MIN_VALUE;
}
}

protected final void initLITRANS(String s) {
if (!s.trim().isEmpty()) {
LITRANS = Byte.parseByte(s);
} else {
LITRANS = Byte.MIN_VALUE;
}
}

protected final void initLIVESP(String s) {
if (!s.trim().isEmpty()) {
LIVESP = Byte.parseByte(s);
} else {
LIVESP = Byte.MIN_VALUE;
}
}

protected final void initLIVESP_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
LIVESP_DV = false;
} else {
LIVESP_DV = true;
}
}
}

protected final void initLIVEWITH(String s) {
if (!s.trim().isEmpty()) {
LIVEWITH = Byte.parseByte(s);
} else {
LIVEWITH = Byte.MIN_VALUE;
}
}

protected final void initLIWHO(String s) {
if (!s.trim().isEmpty()) {
LIWHO = Byte.parseByte(s);
} else {
LIWHO = Byte.MIN_VALUE;
}
}

protected final void initLMAR1M(String s) {
if (!s.trim().isEmpty()) {
LMAR1M = Byte.parseByte(s);
} else {
LMAR1M = Byte.MIN_VALUE;
}
}

protected final void initLMAR1Y(String s) {
if (!s.trim().isEmpty()) {
LMAR1Y = Short.parseShort(s);
} else {
LMAR1Y = Short.MIN_VALUE;
}
}

protected final void initLMCBM1(String s) {
if (!s.trim().isEmpty()) {
LMCBM1 = Byte.parseByte(s);
} else {
LMCBM1 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM2(String s) {
if (!s.trim().isEmpty()) {
LMCBM2 = Byte.parseByte(s);
} else {
LMCBM2 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM3(String s) {
if (!s.trim().isEmpty()) {
LMCBM3 = Byte.parseByte(s);
} else {
LMCBM3 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM4(String s) {
if (!s.trim().isEmpty()) {
LMCBM4 = Byte.parseByte(s);
} else {
LMCBM4 = Byte.MIN_VALUE;
}
}

protected final void initLMCBY41(String s) {
if (!s.trim().isEmpty()) {
LMCBY41 = Short.parseShort(s);
} else {
LMCBY41 = Short.MIN_VALUE;
}
}

protected final void initLMCBY42(String s) {
if (!s.trim().isEmpty()) {
LMCBY42 = Short.parseShort(s);
} else {
LMCBY42 = Short.MIN_VALUE;
}
}

protected final void initLMCBY43(String s) {
if (!s.trim().isEmpty()) {
LMCBY43 = Short.parseShort(s);
} else {
LMCBY43 = Short.MIN_VALUE;
}
}

protected final void initLMCBY44(String s) {
if (!s.trim().isEmpty()) {
LMCBY44 = Short.parseShort(s);
} else {
LMCBY44 = Short.MIN_VALUE;
}
}

protected final void initLMSPM1(String s) {
if (!s.trim().isEmpty()) {
LMSPM1 = Byte.parseByte(s);
} else {
LMSPM1 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM2(String s) {
if (!s.trim().isEmpty()) {
LMSPM2 = Byte.parseByte(s);
} else {
LMSPM2 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM3(String s) {
if (!s.trim().isEmpty()) {
LMSPM3 = Byte.parseByte(s);
} else {
LMSPM3 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM4(String s) {
if (!s.trim().isEmpty()) {
LMSPM4 = Byte.parseByte(s);
} else {
LMSPM4 = Byte.MIN_VALUE;
}
}

protected final void initLMSPY41(String s) {
if (!s.trim().isEmpty()) {
LMSPY41 = Short.parseShort(s);
} else {
LMSPY41 = Short.MIN_VALUE;
}
}

protected final void initLMSPY42(String s) {
if (!s.trim().isEmpty()) {
LMSPY42 = Short.parseShort(s);
} else {
LMSPY42 = Short.MIN_VALUE;
}
}

protected final void initLMSPY43(String s) {
if (!s.trim().isEmpty()) {
LMSPY43 = Short.parseShort(s);
} else {
LMSPY43 = Short.MIN_VALUE;
}
}

protected final void initLMSPY44(String s) {
if (!s.trim().isEmpty()) {
LMSPY44 = Short.parseShort(s);
} else {
LMSPY44 = Short.MIN_VALUE;
}
}

protected final void initLNADOPT(String s) {
if (!s.trim().isEmpty()) {
LNADOPT = Byte.parseByte(s);
} else {
LNADOPT = Byte.MIN_VALUE;
}
}

protected final void initLNPRNT(String s) {
if (!s.trim().isEmpty()) {
LNPRNT = Byte.parseByte(s);
} else {
LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initLPRNT(String s) {
if (!s.trim().isEmpty()) {
LPRNT = Byte.parseByte(s);
} else {
LPRNT = Byte.MIN_VALUE;
}
}

protected final void initLVHM(String s) {
if (!s.trim().isEmpty()) {
LVHM = Byte.parseByte(s);
} else {
LVHM = Byte.MIN_VALUE;
}
}

protected final void initLVREL1(String s) {
if (!s.trim().isEmpty()) {
LVREL1 = Byte.parseByte(s);
} else {
LVREL1 = Byte.MIN_VALUE;
}
}

protected final void initLVREL10(String s) {
if (!s.trim().isEmpty()) {
LVREL10 = Byte.parseByte(s);
} else {
LVREL10 = Byte.MIN_VALUE;
}
}

protected final void initLVREL2(String s) {
if (!s.trim().isEmpty()) {
LVREL2 = Byte.parseByte(s);
} else {
LVREL2 = Byte.MIN_VALUE;
}
}

protected final void initLVREL3(String s) {
if (!s.trim().isEmpty()) {
LVREL3 = Byte.parseByte(s);
} else {
LVREL3 = Byte.MIN_VALUE;
}
}

protected final void initLVREL4(String s) {
if (!s.trim().isEmpty()) {
LVREL4 = Byte.parseByte(s);
} else {
LVREL4 = Byte.MIN_VALUE;
}
}

protected final void initLVREL5(String s) {
if (!s.trim().isEmpty()) {
LVREL5 = Byte.parseByte(s);
} else {
LVREL5 = Byte.MIN_VALUE;
}
}

protected final void initLVREL6(String s) {
if (!s.trim().isEmpty()) {
LVREL6 = Byte.parseByte(s);
} else {
LVREL6 = Byte.MIN_VALUE;
}
}

protected final void initLVREL7(String s) {
if (!s.trim().isEmpty()) {
LVREL7 = Byte.parseByte(s);
} else {
LVREL7 = Byte.MIN_VALUE;
}
}

protected final void initLVREL8(String s) {
if (!s.trim().isEmpty()) {
LVREL8 = Byte.parseByte(s);
} else {
LVREL8 = Byte.MIN_VALUE;
}
}

protected final void initLVREL9(String s) {
if (!s.trim().isEmpty()) {
LVREL9 = Byte.parseByte(s);
} else {
LVREL9 = Byte.MIN_VALUE;
}
}

protected final void initLVREL96(String s) {
if (!s.trim().isEmpty()) {
LVREL96 = Byte.parseByte(s);
} else {
LVREL96 = Byte.MIN_VALUE;
}
}

protected final void initLVSCHDO(String s) {
if (!s.trim().isEmpty()) {
LVSCHDO = Byte.parseByte(s);
} else {
LVSCHDO = Byte.MIN_VALUE;
}
}

protected final void initLWWRONG(String s) {
if (!s.trim().isEmpty()) {
LWWRONG = Byte.parseByte(s);
} else {
LWWRONG = Byte.MIN_VALUE;
}
}

protected final void initMAAGE(String s) {
if (!s.trim().isEmpty()) {
MAAGE = Byte.parseByte(s);
} else {
MAAGE = Byte.MIN_VALUE;
}
}

protected final void initMACOB(String s) {
if (!s.trim().isEmpty()) {
MACOB = Byte.parseByte(s);
} else {
MACOB = Byte.MIN_VALUE;
}
}

protected final void initMACON(String s) {
if (!s.trim().isEmpty()) {
MACON = Byte.parseByte(s);
} else {
MACON = Byte.MIN_VALUE;
}
}

protected final void initMAFAR(String s) {
if (!s.trim().isEmpty()) {
MAFAR = Byte.parseByte(s);
} else {
MAFAR = Byte.MIN_VALUE;
}
}

protected final void initMAJU(String s) {
if (!s.trim().isEmpty()) {
MAJU = Byte.parseByte(s);
} else {
MAJU = Byte.MIN_VALUE;
}
}

protected final void initMALONE(String s) {
if (!s.trim().isEmpty()) {
MALONE = Byte.parseByte(s);
} else {
MALONE = Byte.MIN_VALUE;
}
}

protected final void initMAMOSTCON(String s) {
if (!s.trim().isEmpty()) {
MAMOSTCON = Byte.parseByte(s);
} else {
MAMOSTCON = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC5_DV = Byte.parseByte(s);
} else {
MANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initMARSTAT(String s) {
if (!s.trim().isEmpty()) {
MARSTAT = Byte.parseByte(s);
} else {
MARSTAT = Byte.MIN_VALUE;
}
}

protected final void initMASEE(String s) {
if (!s.trim().isEmpty()) {
MASEE = Byte.parseByte(s);
} else {
MASEE = Byte.MIN_VALUE;
}
}

protected final void initMASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC00_CC = Short.parseShort(s);
} else {
MASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC10_CC = Short.parseShort(s);
} else {
MASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC90_CC = Byte.parseByte(s);
} else {
MASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMASTAT_DV(String s) {
if (!s.trim().isEmpty()) {
MASTAT_DV = Byte.parseByte(s);
} else {
MASTAT_DV = Byte.MIN_VALUE;
}
}

protected final void initMATLEAVE(String s) {
if (!s.trim().isEmpty()) {
MATLEAVE = Byte.parseByte(s);
} else {
MATLEAVE = Byte.MIN_VALUE;
}
}

protected final void initMATLV(String s) {
if (!s.trim().isEmpty()) {
MATLV = Byte.parseByte(s);
} else {
MATLV = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDD(String s) {
if (!s.trim().isEmpty()) {
MATLVENDD = Byte.parseByte(s);
} else {
MATLVENDD = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDM(String s) {
if (!s.trim().isEmpty()) {
MATLVENDM = Byte.parseByte(s);
} else {
MATLVENDM = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDY4(String s) {
if (!s.trim().isEmpty()) {
MATLVENDY4 = Short.parseShort(s);
} else {
MATLVENDY4 = Short.MIN_VALUE;
}
}

protected final void initMATLVSTD(String s) {
if (!s.trim().isEmpty()) {
MATLVSTD = Byte.parseByte(s);
} else {
MATLVSTD = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTM(String s) {
if (!s.trim().isEmpty()) {
MATLVSTM = Byte.parseByte(s);
} else {
MATLVSTM = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTY4(String s) {
if (!s.trim().isEmpty()) {
MATLVSTY4 = Short.parseShort(s);
} else {
MATLVSTY4 = Short.MIN_VALUE;
}
}

protected final void initMAYRUK(String s) {
if (!s.trim().isEmpty()) {
MAYRUK = Byte.parseByte(s);
} else {
MAYRUK = Byte.MIN_VALUE;
}
}

protected final void initMEMPLOY(String s) {
if (!s.trim().isEmpty()) {
MEMPLOY = Byte.parseByte(s);
} else {
MEMPLOY = Byte.MIN_VALUE;
}
}

protected final void initMLA1(String s) {
if (!s.trim().isEmpty()) {
MLA1 = Byte.parseByte(s);
} else {
MLA1 = Byte.MIN_VALUE;
}
}

protected final void initMLA2(String s) {
if (!s.trim().isEmpty()) {
MLA2 = Byte.parseByte(s);
} else {
MLA2 = Byte.MIN_VALUE;
}
}

protected final void initMLA3(String s) {
if (!s.trim().isEmpty()) {
MLA3 = Byte.parseByte(s);
} else {
MLA3 = Byte.MIN_VALUE;
}
}

protected final void initMLA96(String s) {
if (!s.trim().isEmpty()) {
MLA96 = Byte.parseByte(s);
} else {
MLA96 = Byte.MIN_VALUE;
}
}

protected final void initMLAGST(String s) {
if (!s.trim().isEmpty()) {
MLAGST = Byte.parseByte(s);
} else {
MLAGST = Byte.MIN_VALUE;
}
}

protected final void initMLAGSTU(String s) {
if (!s.trim().isEmpty()) {
MLAGSTU = Byte.parseByte(s);
} else {
MLAGSTU = Byte.MIN_VALUE;
}
}

protected final void initMLFUTR(String s) {
if (!s.trim().isEmpty()) {
MLFUTR = Byte.parseByte(s);
} else {
MLFUTR = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT1(String s) {
if (!s.trim().isEmpty()) {
MLRNOT1 = Byte.parseByte(s);
} else {
MLRNOT1 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT10(String s) {
if (!s.trim().isEmpty()) {
MLRNOT10 = Byte.parseByte(s);
} else {
MLRNOT10 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT11(String s) {
if (!s.trim().isEmpty()) {
MLRNOT11 = Byte.parseByte(s);
} else {
MLRNOT11 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT12(String s) {
if (!s.trim().isEmpty()) {
MLRNOT12 = Byte.parseByte(s);
} else {
MLRNOT12 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT13(String s) {
if (!s.trim().isEmpty()) {
MLRNOT13 = Byte.parseByte(s);
} else {
MLRNOT13 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT2(String s) {
if (!s.trim().isEmpty()) {
MLRNOT2 = Byte.parseByte(s);
} else {
MLRNOT2 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT3(String s) {
if (!s.trim().isEmpty()) {
MLRNOT3 = Byte.parseByte(s);
} else {
MLRNOT3 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT4(String s) {
if (!s.trim().isEmpty()) {
MLRNOT4 = Byte.parseByte(s);
} else {
MLRNOT4 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT5(String s) {
if (!s.trim().isEmpty()) {
MLRNOT5 = Byte.parseByte(s);
} else {
MLRNOT5 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT6(String s) {
if (!s.trim().isEmpty()) {
MLRNOT6 = Byte.parseByte(s);
} else {
MLRNOT6 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT7(String s) {
if (!s.trim().isEmpty()) {
MLRNOT7 = Byte.parseByte(s);
} else {
MLRNOT7 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT8(String s) {
if (!s.trim().isEmpty()) {
MLRNOT8 = Byte.parseByte(s);
} else {
MLRNOT8 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT9(String s) {
if (!s.trim().isEmpty()) {
MLRNOT9 = Byte.parseByte(s);
} else {
MLRNOT9 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT97(String s) {
if (!s.trim().isEmpty()) {
MLRNOT97 = Byte.parseByte(s);
} else {
MLRNOT97 = Byte.MIN_VALUE;
}
}

protected final void initMLSTATCHK(String s) {
if (!s.trim().isEmpty()) {
MLSTATCHK = Byte.parseByte(s);
} else {
MLSTATCHK = Byte.MIN_VALUE;
}
}

protected final void initMLWKFPT(String s) {
if (!s.trim().isEmpty()) {
MLWKFPT = Byte.parseByte(s);
} else {
MLWKFPT = Byte.MIN_VALUE;
}
}

protected final void initMNPID(String s) {
if (!s.trim().isEmpty()) {
MNPID = Integer.parseInt(s);
} else {
MNPID = Integer.MIN_VALUE;
}
}

protected final void initMNPNO(String s) {
if (!s.trim().isEmpty()) {
MNPNO = Byte.parseByte(s);
} else {
MNPNO = Byte.MIN_VALUE;
}
}

protected final void initMNSPID(String s) {
if (!s.trim().isEmpty()) {
MNSPID = Integer.parseInt(s);
} else {
MNSPID = Integer.MIN_VALUE;
}
}

protected final void initMNSPNO(String s) {
if (!s.trim().isEmpty()) {
MNSPNO = Byte.parseByte(s);
} else {
MNSPNO = Byte.MIN_VALUE;
}
}

protected final void initMOBCOMP(String s) {
if (!s.trim().isEmpty()) {
MOBCOMP = Byte.parseByte(s);
} else {
MOBCOMP = Byte.MIN_VALUE;
}
}

protected final void initMOBUSE(String s) {
if (!s.trim().isEmpty()) {
MOBUSE = Byte.parseByte(s);
} else {
MOBUSE = Byte.MIN_VALUE;
}
}

protected final void initMONTH(String s) {
if (!s.trim().isEmpty()) {
MONTH = Byte.parseByte(s);
} else {
MONTH = Byte.MIN_VALUE;
}
}

protected final void initMOVDIR(String s) {
if (!s.trim().isEmpty()) {
MOVDIR = Byte.parseByte(s);
} else {
MOVDIR = Byte.MIN_VALUE;
}
}

protected final void initMOVEOTH_CODE(String s) {
if (!s.trim().isEmpty()) {
MOVEOTH_CODE = Byte.parseByte(s);
} else {
MOVEOTH_CODE = Byte.MIN_VALUE;
}
}

protected final void initMOVY11(String s) {
if (!s.trim().isEmpty()) {
MOVY11 = Byte.parseByte(s);
} else {
MOVY11 = Byte.MIN_VALUE;
}
}

protected final void initMOVY12(String s) {
if (!s.trim().isEmpty()) {
MOVY12 = Byte.parseByte(s);
} else {
MOVY12 = Byte.MIN_VALUE;
}
}

protected final void initMOVY13(String s) {
if (!s.trim().isEmpty()) {
MOVY13 = Byte.parseByte(s);
} else {
MOVY13 = Byte.MIN_VALUE;
}
}

protected final void initMOVY14(String s) {
if (!s.trim().isEmpty()) {
MOVY14 = Byte.parseByte(s);
} else {
MOVY14 = Byte.MIN_VALUE;
}
}

protected final void initMOVY15(String s) {
if (!s.trim().isEmpty()) {
MOVY15 = Byte.parseByte(s);
} else {
MOVY15 = Byte.MIN_VALUE;
}
}

protected final void initMOVY16(String s) {
if (!s.trim().isEmpty()) {
MOVY16 = Byte.parseByte(s);
} else {
MOVY16 = Byte.MIN_VALUE;
}
}

protected final void initMPWEB(String s) {
if (!s.trim().isEmpty()) {
MPWEB = Byte.parseByte(s);
} else {
MPWEB = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH1(String s) {
if (!s.trim().isEmpty()) {
MSTATCH1 = Byte.parseByte(s);
} else {
MSTATCH1 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH2(String s) {
if (!s.trim().isEmpty()) {
MSTATCH2 = Byte.parseByte(s);
} else {
MSTATCH2 = Byte.MIN_VALUE;
}
}

protected final void initMSTATSAM(String s) {
if (!s.trim().isEmpty()) {
MSTATSAM = Short.parseShort(s);
} else {
MSTATSAM = Short.MIN_VALUE;
}
}

protected final void initMSTATSAMN(String s) {
if (!s.trim().isEmpty()) {
MSTATSAMN = Byte.parseByte(s);
} else {
MSTATSAMN = Byte.MIN_VALUE;
}
}

protected final void initMUSFREQ(String s) {
if (!s.trim().isEmpty()) {
MUSFREQ = Byte.parseByte(s);
} else {
MUSFREQ = Byte.MIN_VALUE;
}
}

protected final void initMVEVER(String s) {
if (!s.trim().isEmpty()) {
MVEVER = Byte.parseByte(s);
} else {
MVEVER = Byte.MIN_VALUE;
}
}

protected final void initMVMNTH(String s) {
if (!s.trim().isEmpty()) {
MVMNTH = Byte.parseByte(s);
} else {
MVMNTH = Byte.MIN_VALUE;
}
}

protected final void initMVYR(String s) {
if (!s.trim().isEmpty()) {
MVYR = Short.parseShort(s);
} else {
MVYR = Short.MIN_VALUE;
}
}

protected final void initN1619ABS(String s) {
if (!s.trim().isEmpty()) {
N1619ABS = Byte.parseByte(s);
} else {
N1619ABS = Byte.MIN_VALUE;
}
}

protected final void initNADOPTCH(String s) {
if (!s.trim().isEmpty()) {
NADOPTCH = Byte.parseByte(s);
} else {
NADOPTCH = Byte.MIN_VALUE;
}
}

protected final void initNAIDXHH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH = Byte.parseByte(s);
} else {
NAIDXHH = Byte.MIN_VALUE;
}
}

protected final void initNATCH01(String s) {
if (!s.trim().isEmpty()) {
NATCH01 = Byte.parseByte(s);
} else {
NATCH01 = Byte.MIN_VALUE;
}
}

protected final void initNATCH02(String s) {
if (!s.trim().isEmpty()) {
NATCH02 = Byte.parseByte(s);
} else {
NATCH02 = Byte.MIN_VALUE;
}
}

protected final void initNATCH03(String s) {
if (!s.trim().isEmpty()) {
NATCH03 = Byte.parseByte(s);
} else {
NATCH03 = Byte.MIN_VALUE;
}
}

protected final void initNATCH04(String s) {
if (!s.trim().isEmpty()) {
NATCH04 = Byte.parseByte(s);
} else {
NATCH04 = Byte.MIN_VALUE;
}
}

protected final void initNATCH05(String s) {
if (!s.trim().isEmpty()) {
NATCH05 = Byte.parseByte(s);
} else {
NATCH05 = Byte.MIN_VALUE;
}
}

protected final void initNATCH06(String s) {
if (!s.trim().isEmpty()) {
NATCH06 = Byte.parseByte(s);
} else {
NATCH06 = Byte.MIN_VALUE;
}
}

protected final void initNATCH07(String s) {
if (!s.trim().isEmpty()) {
NATCH07 = Byte.parseByte(s);
} else {
NATCH07 = Byte.MIN_VALUE;
}
}

protected final void initNATCH08(String s) {
if (!s.trim().isEmpty()) {
NATCH08 = Byte.parseByte(s);
} else {
NATCH08 = Byte.MIN_VALUE;
}
}

protected final void initNATCH09(String s) {
if (!s.trim().isEmpty()) {
NATCH09 = Byte.parseByte(s);
} else {
NATCH09 = Byte.MIN_VALUE;
}
}

protected final void initNATCH10(String s) {
if (!s.trim().isEmpty()) {
NATCH10 = Byte.parseByte(s);
} else {
NATCH10 = Byte.MIN_VALUE;
}
}

protected final void initNATCH11(String s) {
if (!s.trim().isEmpty()) {
NATCH11 = Byte.parseByte(s);
} else {
NATCH11 = Byte.MIN_VALUE;
}
}

protected final void initNATCH12(String s) {
if (!s.trim().isEmpty()) {
NATCH12 = Byte.parseByte(s);
} else {
NATCH12 = Byte.MIN_VALUE;
}
}

protected final void initNATCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH13 = false;
} else {
NATCH13 = true;
}
}
}

protected final void initNATCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH14 = false;
} else {
NATCH14 = true;
}
}
}

protected final void initNATCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH15 = false;
} else {
NATCH15 = true;
}
}
}

protected final void initNATCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH16 = false;
} else {
NATCH16 = true;
}
}
}

protected final void initNATID1(String s) {
if (!s.trim().isEmpty()) {
NATID1 = Byte.parseByte(s);
} else {
NATID1 = Byte.MIN_VALUE;
}
}

protected final void initNATID2(String s) {
if (!s.trim().isEmpty()) {
NATID2 = Byte.parseByte(s);
} else {
NATID2 = Byte.MIN_VALUE;
}
}

protected final void initNATID3(String s) {
if (!s.trim().isEmpty()) {
NATID3 = Byte.parseByte(s);
} else {
NATID3 = Byte.MIN_VALUE;
}
}

protected final void initNATID4(String s) {
if (!s.trim().isEmpty()) {
NATID4 = Byte.parseByte(s);
} else {
NATID4 = Byte.MIN_VALUE;
}
}

protected final void initNATID5(String s) {
if (!s.trim().isEmpty()) {
NATID5 = Byte.parseByte(s);
} else {
NATID5 = Byte.MIN_VALUE;
}
}

protected final void initNATID6(String s) {
if (!s.trim().isEmpty()) {
NATID6 = Byte.parseByte(s);
} else {
NATID6 = Byte.MIN_VALUE;
}
}

protected final void initNATID97(String s) {
if (!s.trim().isEmpty()) {
NATID97 = Byte.parseByte(s);
} else {
NATID97 = Byte.MIN_VALUE;
}
}

protected final void initNCARS(String s) {
if (!s.trim().isEmpty()) {
NCARS = Byte.parseByte(s);
} else {
NCARS = Byte.MIN_VALUE;
}
}

protected final void initNCH10(String s) {
if (!s.trim().isEmpty()) {
NCH10 = Byte.parseByte(s);
} else {
NCH10 = Byte.MIN_VALUE;
}
}

protected final void initNCH10TO15(String s) {
if (!s.trim().isEmpty()) {
NCH10TO15 = Byte.parseByte(s);
} else {
NCH10TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH14RESP(String s) {
if (!s.trim().isEmpty()) {
NCH14RESP = Byte.parseByte(s);
} else {
NCH14RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH3RESP(String s) {
if (!s.trim().isEmpty()) {
NCH3RESP = Byte.parseByte(s);
} else {
NCH3RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH415RESP(String s) {
if (!s.trim().isEmpty()) {
NCH415RESP = Byte.parseByte(s);
} else {
NCH415RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5RESP(String s) {
if (!s.trim().isEmpty()) {
NCH5RESP = Byte.parseByte(s);
} else {
NCH5RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5TO15(String s) {
if (!s.trim().isEmpty()) {
NCH5TO15 = Byte.parseByte(s);
} else {
NCH5TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH8RESP(String s) {
if (!s.trim().isEmpty()) {
NCH8RESP = Byte.parseByte(s);
} else {
NCH8RESP = Byte.MIN_VALUE;
}
}

protected final void initNCHILD(String s) {
if (!s.trim().isEmpty()) {
NCHILD = Byte.parseByte(s);
} else {
NCHILD = Byte.MIN_VALUE;
}
}

protected final void initNCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHILD_DV = Short.parseShort(s);
} else {
NCHILD_DV = Short.MIN_VALUE;
}
}

protected final void initNCHRESP(String s) {
if (!s.trim().isEmpty()) {
NCHRESP = Byte.parseByte(s);
} else {
NCHRESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUND18RESP(String s) {
if (!s.trim().isEmpty()) {
NCHUND18RESP = Byte.parseByte(s);
} else {
NCHUND18RESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUNDER16(String s) {
if (!s.trim().isEmpty()) {
NCHUNDER16 = Byte.parseByte(s);
} else {
NCHUNDER16 = Byte.MIN_VALUE;
}
}

protected final void initNCIGS(String s) {
if (!s.trim().isEmpty()) {
NCIGS = Short.parseShort(s);
} else {
NCIGS = Short.MIN_VALUE;
}
}

protected final void initNCRR1(String s) {
if (!s.trim().isEmpty()) {
NCRR1 = Byte.parseByte(s);
} else {
NCRR1 = Byte.MIN_VALUE;
}
}

protected final void initNCRR11(String s) {
if (!s.trim().isEmpty()) {
NCRR11 = Byte.parseByte(s);
} else {
NCRR11 = Byte.MIN_VALUE;
}
}

protected final void initNCRR12(String s) {
if (!s.trim().isEmpty()) {
NCRR12 = Byte.parseByte(s);
} else {
NCRR12 = Byte.MIN_VALUE;
}
}

protected final void initNCRR3(String s) {
if (!s.trim().isEmpty()) {
NCRR3 = Byte.parseByte(s);
} else {
NCRR3 = Byte.MIN_VALUE;
}
}

protected final void initNCRR4(String s) {
if (!s.trim().isEmpty()) {
NCRR4 = Byte.parseByte(s);
} else {
NCRR4 = Byte.MIN_VALUE;
}
}

protected final void initNCRR5(String s) {
if (!s.trim().isEmpty()) {
NCRR5 = Byte.parseByte(s);
} else {
NCRR5 = Byte.MIN_VALUE;
}
}

protected final void initNCRR6(String s) {
if (!s.trim().isEmpty()) {
NCRR6 = Byte.parseByte(s);
} else {
NCRR6 = Byte.MIN_VALUE;
}
}

protected final void initNCRR8(String s) {
if (!s.trim().isEmpty()) {
NCRR8 = Byte.parseByte(s);
} else {
NCRR8 = Byte.MIN_VALUE;
}
}

protected final void initNCRR9(String s) {
if (!s.trim().isEmpty()) {
NCRR9 = Byte.parseByte(s);
} else {
NCRR9 = Byte.MIN_VALUE;
}
}

protected final void initNCRRM(String s) {
if (!s.trim().isEmpty()) {
NCRRM = Byte.parseByte(s);
} else {
NCRRM = Byte.MIN_VALUE;
}
}

protected final void initNCRRY4(String s) {
if (!s.trim().isEmpty()) {
NCRRY4 = Short.parseShort(s);
} else {
NCRRY4 = Short.MIN_VALUE;
}
}

protected final void initNDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
NDEPCHL_DV = Byte.parseByte(s);
} else {
NDEPCHL_DV = Byte.MIN_VALUE;
}
}

protected final void initNETPUSE(String s) {
if (!s.trim().isEmpty()) {
NETPUSE = Byte.parseByte(s);
} else {
NETPUSE = Byte.MIN_VALUE;
}
}

protected final void initNETUSE(String s) {
if (!s.trim().isEmpty()) {
NETUSE = Byte.parseByte(s);
} else {
NETUSE = Byte.MIN_VALUE;
}
}

protected final void initNEXT(String s) {
if (!s.trim().isEmpty()) {
NEXT = Byte.parseByte(s);
} else {
NEXT = Byte.MIN_VALUE;
}
}

protected final void initNEXT1(String s) {
if (!s.trim().isEmpty()) {
NEXT1 = Byte.parseByte(s);
} else {
NEXT1 = Byte.MIN_VALUE;
}
}

protected final void initNEXT2(String s) {
if (!s.trim().isEmpty()) {
NEXT2 = Byte.parseByte(s);
} else {
NEXT2 = Byte.MIN_VALUE;
}
}

protected final void initNEXT3(String s) {
if (!s.trim().isEmpty()) {
NEXT3 = Byte.parseByte(s);
} else {
NEXT3 = Byte.MIN_VALUE;
}
}

protected final void initNEXT4(String s) {
if (!s.trim().isEmpty()) {
NEXT4 = Byte.parseByte(s);
} else {
NEXT4 = Byte.MIN_VALUE;
}
}

protected final void initNEXT5(String s) {
if (!s.trim().isEmpty()) {
NEXT5 = Byte.parseByte(s);
} else {
NEXT5 = Byte.MIN_VALUE;
}
}

protected final void initNEXT6(String s) {
if (!s.trim().isEmpty()) {
NEXT6 = Byte.parseByte(s);
} else {
NEXT6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE1(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE1 = Byte.parseByte(s);
} else {
NEXTELSE1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE2(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE2 = Byte.parseByte(s);
} else {
NEXTELSE2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE3(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE3 = Byte.parseByte(s);
} else {
NEXTELSE3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE4(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE4 = Byte.parseByte(s);
} else {
NEXTELSE4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE5(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE5 = Byte.parseByte(s);
} else {
NEXTELSE5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE6(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE6 = Byte.parseByte(s);
} else {
NEXTELSE6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB1(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB1 = Byte.parseByte(s);
} else {
NEXTJOB1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB2(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB2 = Byte.parseByte(s);
} else {
NEXTJOB2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB3(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB3 = Byte.parseByte(s);
} else {
NEXTJOB3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB4(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB4 = Byte.parseByte(s);
} else {
NEXTJOB4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB5(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB5 = Byte.parseByte(s);
} else {
NEXTJOB5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB6(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB6 = Byte.parseByte(s);
} else {
NEXTJOB6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT1(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT1 = Byte.parseByte(s);
} else {
NEXTSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT2(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT2 = Byte.parseByte(s);
} else {
NEXTSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT3(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT3 = Byte.parseByte(s);
} else {
NEXTSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT4(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT4 = Byte.parseByte(s);
} else {
NEXTSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT5(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT5 = Byte.parseByte(s);
} else {
NEXTSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT6(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT6 = Byte.parseByte(s);
} else {
NEXTSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initNFH01(String s) {
if (!s.trim().isEmpty()) {
NFH01 = Byte.parseByte(s);
} else {
NFH01 = Byte.MIN_VALUE;
}
}

protected final void initNFH02(String s) {
if (!s.trim().isEmpty()) {
NFH02 = Byte.parseByte(s);
} else {
NFH02 = Byte.MIN_VALUE;
}
}

protected final void initNFH03(String s) {
if (!s.trim().isEmpty()) {
NFH03 = Byte.parseByte(s);
} else {
NFH03 = Byte.MIN_VALUE;
}
}

protected final void initNFH04(String s) {
if (!s.trim().isEmpty()) {
NFH04 = Byte.parseByte(s);
} else {
NFH04 = Byte.MIN_VALUE;
}
}

protected final void initNFH05(String s) {
if (!s.trim().isEmpty()) {
NFH05 = Byte.parseByte(s);
} else {
NFH05 = Byte.MIN_VALUE;
}
}

protected final void initNFH06(String s) {
if (!s.trim().isEmpty()) {
NFH06 = Byte.parseByte(s);
} else {
NFH06 = Byte.MIN_VALUE;
}
}

protected final void initNFH07(String s) {
if (!s.trim().isEmpty()) {
NFH07 = Byte.parseByte(s);
} else {
NFH07 = Byte.MIN_VALUE;
}
}

protected final void initNFH08(String s) {
if (!s.trim().isEmpty()) {
NFH08 = Byte.parseByte(s);
} else {
NFH08 = Byte.MIN_VALUE;
}
}

protected final void initNFH09(String s) {
if (!s.trim().isEmpty()) {
NFH09 = Byte.parseByte(s);
} else {
NFH09 = Byte.MIN_VALUE;
}
}

protected final void initNFH10(String s) {
if (!s.trim().isEmpty()) {
NFH10 = Byte.parseByte(s);
} else {
NFH10 = Byte.MIN_VALUE;
}
}

protected final void initNFH11(String s) {
if (!s.trim().isEmpty()) {
NFH11 = Byte.parseByte(s);
} else {
NFH11 = Byte.MIN_VALUE;
}
}

protected final void initNFH12(String s) {
if (!s.trim().isEmpty()) {
NFH12 = Byte.parseByte(s);
} else {
NFH12 = Byte.MIN_VALUE;
}
}

protected final void initNFH13(String s) {
if (!s.trim().isEmpty()) {
NFH13 = Byte.parseByte(s);
} else {
NFH13 = Byte.MIN_VALUE;
}
}

protected final void initNFH14(String s) {
if (!s.trim().isEmpty()) {
NFH14 = Byte.parseByte(s);
} else {
NFH14 = Byte.MIN_VALUE;
}
}

protected final void initNFH15(String s) {
if (!s.trim().isEmpty()) {
NFH15 = Byte.parseByte(s);
} else {
NFH15 = Byte.MIN_VALUE;
}
}

protected final void initNFH16(String s) {
if (!s.trim().isEmpty()) {
NFH16 = Byte.parseByte(s);
} else {
NFH16 = Byte.MIN_VALUE;
}
}

protected final void initNFH17(String s) {
if (!s.trim().isEmpty()) {
NFH17 = Byte.parseByte(s);
} else {
NFH17 = Byte.MIN_VALUE;
}
}

protected final void initNFH18(String s) {
if (!s.trim().isEmpty()) {
NFH18 = Byte.parseByte(s);
} else {
NFH18 = Byte.MIN_VALUE;
}
}

protected final void initNFH19(String s) {
if (!s.trim().isEmpty()) {
NFH19 = Byte.parseByte(s);
} else {
NFH19 = Byte.MIN_VALUE;
}
}

protected final void initNFH20(String s) {
if (!s.trim().isEmpty()) {
NFH20 = Byte.parseByte(s);
} else {
NFH20 = Byte.MIN_VALUE;
}
}

protected final void initNFH21(String s) {
if (!s.trim().isEmpty()) {
NFH21 = Byte.parseByte(s);
} else {
NFH21 = Byte.MIN_VALUE;
}
}

protected final void initNFH22(String s) {
if (!s.trim().isEmpty()) {
NFH22 = Byte.parseByte(s);
} else {
NFH22 = Byte.MIN_VALUE;
}
}

protected final void initNFH23(String s) {
if (!s.trim().isEmpty()) {
NFH23 = Byte.parseByte(s);
} else {
NFH23 = Byte.MIN_VALUE;
}
}

protected final void initNFH24(String s) {
if (!s.trim().isEmpty()) {
NFH24 = Byte.parseByte(s);
} else {
NFH24 = Byte.MIN_VALUE;
}
}

protected final void initNFH25(String s) {
if (!s.trim().isEmpty()) {
NFH25 = Byte.parseByte(s);
} else {
NFH25 = Byte.MIN_VALUE;
}
}

protected final void initNFH26(String s) {
if (!s.trim().isEmpty()) {
NFH26 = Byte.parseByte(s);
} else {
NFH26 = Byte.MIN_VALUE;
}
}

protected final void initNFH27(String s) {
if (!s.trim().isEmpty()) {
NFH27 = Byte.parseByte(s);
} else {
NFH27 = Byte.MIN_VALUE;
}
}

protected final void initNFH28(String s) {
if (!s.trim().isEmpty()) {
NFH28 = Byte.parseByte(s);
} else {
NFH28 = Byte.MIN_VALUE;
}
}

protected final void initNFH29(String s) {
if (!s.trim().isEmpty()) {
NFH29 = Byte.parseByte(s);
} else {
NFH29 = Byte.MIN_VALUE;
}
}

protected final void initNFH30(String s) {
if (!s.trim().isEmpty()) {
NFH30 = Byte.parseByte(s);
} else {
NFH30 = Byte.MIN_VALUE;
}
}

protected final void initNFH31(String s) {
if (!s.trim().isEmpty()) {
NFH31 = Byte.parseByte(s);
} else {
NFH31 = Byte.MIN_VALUE;
}
}

protected final void initNFH32(String s) {
if (!s.trim().isEmpty()) {
NFH32 = Byte.parseByte(s);
} else {
NFH32 = Byte.MIN_VALUE;
}
}

protected final void initNFH33(String s) {
if (!s.trim().isEmpty()) {
NFH33 = Byte.parseByte(s);
} else {
NFH33 = Byte.MIN_VALUE;
}
}

protected final void initNFH34(String s) {
if (!s.trim().isEmpty()) {
NFH34 = Byte.parseByte(s);
} else {
NFH34 = Byte.MIN_VALUE;
}
}

protected final void initNFH35(String s) {
if (!s.trim().isEmpty()) {
NFH35 = Byte.parseByte(s);
} else {
NFH35 = Byte.MIN_VALUE;
}
}

protected final void initNFH36(String s) {
if (!s.trim().isEmpty()) {
NFH36 = Byte.parseByte(s);
} else {
NFH36 = Byte.MIN_VALUE;
}
}

protected final void initNFH37(String s) {
if (!s.trim().isEmpty()) {
NFH37 = Byte.parseByte(s);
} else {
NFH37 = Byte.MIN_VALUE;
}
}

protected final void initNFH38(String s) {
if (!s.trim().isEmpty()) {
NFH38 = Byte.parseByte(s);
} else {
NFH38 = Byte.MIN_VALUE;
}
}

protected final void initNFH39(String s) {
if (!s.trim().isEmpty()) {
NFH39 = Byte.parseByte(s);
} else {
NFH39 = Byte.MIN_VALUE;
}
}

protected final void initNGRP_DV(String s) {
if (!s.trim().isEmpty()) {
NGRP_DV = Byte.parseByte(s);
} else {
NGRP_DV = Byte.MIN_VALUE;
}
}

protected final void initNHIQUAL_DV(String s) {
if (!s.trim().isEmpty()) {
NHIQUAL_DV = Byte.parseByte(s);
} else {
NHIQUAL_DV = Byte.MIN_VALUE;
}
}

protected final void initNIACT(String s) {
if (!s.trim().isEmpty()) {
NIACT = Byte.parseByte(s);
} else {
NIACT = Byte.MIN_VALUE;
}
}

protected final void initNIREL(String s) {
if (!s.trim().isEmpty()) {
NIREL = Byte.parseByte(s);
} else {
NIREL = Byte.MIN_VALUE;
}
}

protected final void initNISERPS(String s) {
if (!s.trim().isEmpty()) {
NISERPS = Byte.parseByte(s);
} else {
NISERPS = Byte.MIN_VALUE;
}
}

protected final void initNJOBHIST(String s) {
if (!s.trim().isEmpty()) {
NJOBHIST = Byte.parseByte(s);
} else {
NJOBHIST = Byte.MIN_VALUE;
}
}

protected final void initNMAR(String s) {
if (!s.trim().isEmpty()) {
NMAR = Byte.parseByte(s);
} else {
NMAR = Byte.MIN_VALUE;
}
}

protected final void initNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NMPSP_DV = Byte.parseByte(s);
} else {
NMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNATCH(String s) {
if (!s.trim().isEmpty()) {
NNATCH = Byte.parseByte(s);
} else {
NNATCH = Byte.MIN_VALUE;
}
}

protected final void initNNEWBORN(String s) {
if (!s.trim().isEmpty()) {
NNEWBORN = Byte.parseByte(s);
} else {
NNEWBORN = Byte.MIN_VALUE;
}
}

protected final void initNNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NNMPSP_DV = Byte.parseByte(s);
} else {
NNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSIB_DV = Byte.parseByte(s);
} else {
NNSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSSIB_DV = Byte.parseByte(s);
} else {
NNSSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNOTEMPCHK(String s) {
if (!s.trim().isEmpty()) {
NOTEMPCHK = Byte.parseByte(s);
} else {
NOTEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initNPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER_DV = Byte.parseByte(s);
} else {
NPENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initNPNS_DV(String s) {
if (!s.trim().isEmpty()) {
NPNS_DV = Byte.parseByte(s);
} else {
NPNS_DV = Byte.MIN_VALUE;
}
}

protected final void initNPN_DV(String s) {
if (!s.trim().isEmpty()) {
NPN_DV = Byte.parseByte(s);
} else {
NPN_DV = Byte.MIN_VALUE;
}
}

protected final void initNQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
NQFHIGH_DV = Byte.parseByte(s);
} else {
NQFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initNRELS1(String s) {
if (!s.trim().isEmpty()) {
NRELS1 = Byte.parseByte(s);
} else {
NRELS1 = Byte.MIN_VALUE;
}
}

protected final void initNRELS2(String s) {
if (!s.trim().isEmpty()) {
NRELS2 = Byte.parseByte(s);
} else {
NRELS2 = Byte.MIN_VALUE;
}
}

protected final void initNRELS3(String s) {
if (!s.trim().isEmpty()) {
NRELS3 = Byte.parseByte(s);
} else {
NRELS3 = Byte.MIN_VALUE;
}
}

protected final void initNRELS4(String s) {
if (!s.trim().isEmpty()) {
NRELS4 = Byte.parseByte(s);
} else {
NRELS4 = Byte.MIN_VALUE;
}
}

protected final void initNRELS5(String s) {
if (!s.trim().isEmpty()) {
NRELS5 = Byte.parseByte(s);
} else {
NRELS5 = Byte.MIN_VALUE;
}
}

protected final void initNRELS6(String s) {
if (!s.trim().isEmpty()) {
NRELS6 = Byte.parseByte(s);
} else {
NRELS6 = Byte.MIN_VALUE;
}
}

protected final void initNUNDER16(String s) {
if (!s.trim().isEmpty()) {
NUNDER16 = Byte.parseByte(s);
} else {
NUNDER16 = Byte.MIN_VALUE;
}
}

protected final void initNUNDER16ABS(String s) {
if (!s.trim().isEmpty()) {
NUNDER16ABS = Byte.parseByte(s);
} else {
NUNDER16ABS = Byte.MIN_VALUE;
}
}

protected final void initNUNDER20ABS(String s) {
if (!s.trim().isEmpty()) {
NUNDER20ABS = Byte.parseByte(s);
} else {
NUNDER20ABS = Byte.MIN_VALUE;
}
}

protected final void initNUNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NUNMPSP_DV = Byte.parseByte(s);
} else {
NUNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS = Byte.parseByte(s);
} else {
NXTENDREAS = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDD(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDD = Byte.parseByte(s);
} else {
NXTJBENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDM(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDM = Byte.parseByte(s);
} else {
NXTJBENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDY4 = Short.parseShort(s);
} else {
NXTJBENDY4 = Short.MIN_VALUE;
}
}

protected final void initNXTJBES(String s) {
if (!s.trim().isEmpty()) {
NXTJBES = Byte.parseByte(s);
} else {
NXTJBES = Byte.MIN_VALUE;
}
}

protected final void initNXTJBHRS(String s) {
if (!s.trim().isEmpty()) {
NXTJBHRS = Byte.parseByte(s);
} else {
NXTJBHRS = Byte.MIN_VALUE;
}
}

protected final void initNXTST(String s) {
if (!s.trim().isEmpty()) {
NXTST = Byte.parseByte(s);
} else {
NXTST = Byte.MIN_VALUE;
}
}

protected final void initNXTSTELSE(String s) {
if (!s.trim().isEmpty()) {
NXTSTELSE = Byte.parseByte(s);
} else {
NXTSTELSE = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDD(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDD = Byte.parseByte(s);
} else {
NXTSTENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDM(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDM = Byte.parseByte(s);
} else {
NXTSTENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDY4 = Short.parseShort(s);
} else {
NXTSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initOCIMPA(String s) {
if (!s.trim().isEmpty()) {
OCIMPA = Byte.parseByte(s);
} else {
OCIMPA = Byte.MIN_VALUE;
}
}

protected final void initOCIMPB(String s) {
if (!s.trim().isEmpty()) {
OCIMPB = Byte.parseByte(s);
} else {
OCIMPB = Byte.MIN_VALUE;
}
}

protected final void initOCIMPE(String s) {
if (!s.trim().isEmpty()) {
OCIMPE = Byte.parseByte(s);
} else {
OCIMPE = Byte.MIN_VALUE;
}
}

protected final void initOCIMPF(String s) {
if (!s.trim().isEmpty()) {
OCIMPF = Byte.parseByte(s);
} else {
OCIMPF = Byte.MIN_VALUE;
}
}

protected final void initOCIMPI(String s) {
if (!s.trim().isEmpty()) {
OCIMPI = Byte.parseByte(s);
} else {
OCIMPI = Byte.MIN_VALUE;
}
}

protected final void initOCIMPK(String s) {
if (!s.trim().isEmpty()) {
OCIMPK = Byte.parseByte(s);
} else {
OCIMPK = Byte.MIN_VALUE;
}
}

protected final void initOCIMPL(String s) {
if (!s.trim().isEmpty()) {
OCIMPL = Byte.parseByte(s);
} else {
OCIMPL = Byte.MIN_VALUE;
}
}

protected final void initOHCH16(String s) {
if (!s.trim().isEmpty()) {
OHCH16 = Byte.parseByte(s);
} else {
OHCH16 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT31(String s) {
if (!s.trim().isEmpty()) {
OLYMACT31 = Byte.parseByte(s);
} else {
OLYMACT31 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT32(String s) {
if (!s.trim().isEmpty()) {
OLYMACT32 = Byte.parseByte(s);
} else {
OLYMACT32 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT33(String s) {
if (!s.trim().isEmpty()) {
OLYMACT33 = Byte.parseByte(s);
} else {
OLYMACT33 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT34(String s) {
if (!s.trim().isEmpty()) {
OLYMACT34 = Byte.parseByte(s);
} else {
OLYMACT34 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT35(String s) {
if (!s.trim().isEmpty()) {
OLYMACT35 = Byte.parseByte(s);
} else {
OLYMACT35 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT36(String s) {
if (!s.trim().isEmpty()) {
OLYMACT36 = Byte.parseByte(s);
} else {
OLYMACT36 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT37(String s) {
if (!s.trim().isEmpty()) {
OLYMACT37 = Byte.parseByte(s);
} else {
OLYMACT37 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT38(String s) {
if (!s.trim().isEmpty()) {
OLYMACT38 = Byte.parseByte(s);
} else {
OLYMACT38 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT396(String s) {
if (!s.trim().isEmpty()) {
OLYMACT396 = Byte.parseByte(s);
} else {
OLYMACT396 = Byte.MIN_VALUE;
}
}

protected final void initOLYMACT398(String s) {
if (!s.trim().isEmpty()) {
OLYMACT398 = Byte.parseByte(s);
} else {
OLYMACT398 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS31(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS31 = Byte.parseByte(s);
} else {
OLYMPAS31 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS32(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS32 = Byte.parseByte(s);
} else {
OLYMPAS32 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS33(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS33 = Byte.parseByte(s);
} else {
OLYMPAS33 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS34(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS34 = Byte.parseByte(s);
} else {
OLYMPAS34 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS35(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS35 = Byte.parseByte(s);
} else {
OLYMPAS35 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS396(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS396 = Byte.parseByte(s);
} else {
OLYMPAS396 = Byte.MIN_VALUE;
}
}

protected final void initOLYMPAS398(String s) {
if (!s.trim().isEmpty()) {
OLYMPAS398 = Byte.parseByte(s);
} else {
OLYMPAS398 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG(String s) {
if (!s.trim().isEmpty()) {
OPRLG = Byte.parseByte(s);
} else {
OPRLG = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0(String s) {
if (!s.trim().isEmpty()) {
OPRLG0 = Byte.parseByte(s);
} else {
OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
OPRLG0NI = Byte.parseByte(s);
} else {
OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initOPRLG1(String s) {
if (!s.trim().isEmpty()) {
OPRLG1 = Byte.parseByte(s);
} else {
OPRLG1 = Byte.MIN_VALUE;
}
}

protected final void initORIGADD(String s) {
if (!s.trim().isEmpty()) {
ORIGADD = Byte.parseByte(s);
} else {
ORIGADD = Byte.MIN_VALUE;
}
}

protected final void initOTHCONT(String s) {
if (!s.trim().isEmpty()) {
OTHCONT = Byte.parseByte(s);
} else {
OTHCONT = Byte.MIN_VALUE;
}
}

protected final void initOVTNSA(String s) {
if (!s.trim().isEmpty()) {
OVTNSA = Byte.parseByte(s);
} else {
OVTNSA = Byte.MIN_VALUE;
}
}

protected final void initOVTPAY(String s) {
if (!s.trim().isEmpty()) {
OVTPAY = Byte.parseByte(s);
} else {
OVTPAY = Byte.MIN_VALUE;
}
}

protected final void initOVTRATE(String s) {
if (!s.trim().isEmpty()) {
OVTRATE = Double.parseDouble(s);
} else {
OVTRATE = Double.NaN;
}
}

protected final void initOVTREST(String s) {
if (!s.trim().isEmpty()) {
OVTREST = Byte.parseByte(s);
} else {
OVTREST = Byte.MIN_VALUE;
}
}

protected final void initPAAGE(String s) {
if (!s.trim().isEmpty()) {
PAAGE = Byte.parseByte(s);
} else {
PAAGE = Byte.MIN_VALUE;
}
}

protected final void initPAAID1(String s) {
if (!s.trim().isEmpty()) {
PAAID1 = Byte.parseByte(s);
} else {
PAAID1 = Byte.MIN_VALUE;
}
}

protected final void initPAAID2(String s) {
if (!s.trim().isEmpty()) {
PAAID2 = Byte.parseByte(s);
} else {
PAAID2 = Byte.MIN_VALUE;
}
}

protected final void initPAAID3(String s) {
if (!s.trim().isEmpty()) {
PAAID3 = Byte.parseByte(s);
} else {
PAAID3 = Byte.MIN_VALUE;
}
}

protected final void initPAAID4(String s) {
if (!s.trim().isEmpty()) {
PAAID4 = Byte.parseByte(s);
} else {
PAAID4 = Byte.MIN_VALUE;
}
}

protected final void initPAAID5(String s) {
if (!s.trim().isEmpty()) {
PAAID5 = Byte.parseByte(s);
} else {
PAAID5 = Byte.MIN_VALUE;
}
}

protected final void initPAAID6(String s) {
if (!s.trim().isEmpty()) {
PAAID6 = Byte.parseByte(s);
} else {
PAAID6 = Byte.MIN_VALUE;
}
}

protected final void initPAAID7(String s) {
if (!s.trim().isEmpty()) {
PAAID7 = Byte.parseByte(s);
} else {
PAAID7 = Byte.MIN_VALUE;
}
}

protected final void initPAAID8(String s) {
if (!s.trim().isEmpty()) {
PAAID8 = Byte.parseByte(s);
} else {
PAAID8 = Byte.MIN_VALUE;
}
}

protected final void initPAAID96(String s) {
if (!s.trim().isEmpty()) {
PAAID96 = Byte.parseByte(s);
} else {
PAAID96 = Byte.MIN_VALUE;
}
}

protected final void initPAAID97(String s) {
if (!s.trim().isEmpty()) {
PAAID97 = Byte.parseByte(s);
} else {
PAAID97 = Byte.MIN_VALUE;
}
}

protected final void initPACOB(String s) {
if (!s.trim().isEmpty()) {
PACOB = Byte.parseByte(s);
} else {
PACOB = Byte.MIN_VALUE;
}
}

protected final void initPACON(String s) {
if (!s.trim().isEmpty()) {
PACON = Byte.parseByte(s);
} else {
PACON = Byte.MIN_VALUE;
}
}

protected final void initPAFAR(String s) {
if (!s.trim().isEmpty()) {
PAFAR = Byte.parseByte(s);
} else {
PAFAR = Byte.MIN_VALUE;
}
}

protected final void initPAIDU1(String s) {
if (!s.trim().isEmpty()) {
PAIDU1 = Byte.parseByte(s);
} else {
PAIDU1 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU2(String s) {
if (!s.trim().isEmpty()) {
PAIDU2 = Byte.parseByte(s);
} else {
PAIDU2 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU3(String s) {
if (!s.trim().isEmpty()) {
PAIDU3 = Byte.parseByte(s);
} else {
PAIDU3 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU4(String s) {
if (!s.trim().isEmpty()) {
PAIDU4 = Byte.parseByte(s);
} else {
PAIDU4 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU5(String s) {
if (!s.trim().isEmpty()) {
PAIDU5 = Byte.parseByte(s);
} else {
PAIDU5 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU6(String s) {
if (!s.trim().isEmpty()) {
PAIDU6 = Byte.parseByte(s);
} else {
PAIDU6 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU7(String s) {
if (!s.trim().isEmpty()) {
PAIDU7 = Byte.parseByte(s);
} else {
PAIDU7 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU8(String s) {
if (!s.trim().isEmpty()) {
PAIDU8 = Byte.parseByte(s);
} else {
PAIDU8 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU96(String s) {
if (!s.trim().isEmpty()) {
PAIDU96 = Byte.parseByte(s);
} else {
PAIDU96 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU97(String s) {
if (!s.trim().isEmpty()) {
PAIDU97 = Byte.parseByte(s);
} else {
PAIDU97 = Byte.MIN_VALUE;
}
}

protected final void initPAJU(String s) {
if (!s.trim().isEmpty()) {
PAJU = Byte.parseByte(s);
} else {
PAJU = Byte.MIN_VALUE;
}
}

protected final void initPALONE(String s) {
if (!s.trim().isEmpty()) {
PALONE = Byte.parseByte(s);
} else {
PALONE = Byte.MIN_VALUE;
}
}

protected final void initPAMOSTCON(String s) {
if (!s.trim().isEmpty()) {
PAMOSTCON = Byte.parseByte(s);
} else {
PAMOSTCON = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC5_DV = Byte.parseByte(s);
} else {
PANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initPARCHILD(String s) {
if (!s.trim().isEmpty()) {
PARCHILD = Byte.parseByte(s);
} else {
PARCHILD = Byte.MIN_VALUE;
}
}

protected final void initPAREVE(String s) {
if (!s.trim().isEmpty()) {
PAREVE = Byte.parseByte(s);
} else {
PAREVE = Byte.MIN_VALUE;
}
}

protected final void initPARMAR(String s) {
if (!s.trim().isEmpty()) {
PARMAR = Byte.parseByte(s);
} else {
PARMAR = Byte.MIN_VALUE;
}
}

protected final void initPARSCH(String s) {
if (!s.trim().isEmpty()) {
PARSCH = Byte.parseByte(s);
} else {
PARSCH = Byte.MIN_VALUE;
}
}

protected final void initPASEE(String s) {
if (!s.trim().isEmpty()) {
PASEE = Byte.parseByte(s);
} else {
PASEE = Byte.MIN_VALUE;
}
}

protected final void initPASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC00_CC = Short.parseShort(s);
} else {
PASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC10_CC = Short.parseShort(s);
} else {
PASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC90_CC = Byte.parseByte(s);
} else {
PASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPAYGWC(String s) {
if (!s.trim().isEmpty()) {
PAYGWC = Byte.parseByte(s);
} else {
PAYGWC = Byte.MIN_VALUE;
}
}

protected final void initPAYG_DV(String s) {
if (!s.trim().isEmpty()) {
PAYG_DV = Double.parseDouble(s);
} else {
PAYG_DV = Double.NaN;
}
}

protected final void initPAYNWC(String s) {
if (!s.trim().isEmpty()) {
PAYNWC = Byte.parseByte(s);
} else {
PAYNWC = Byte.MIN_VALUE;
}
}

protected final void initPAYRUK(String s) {
if (!s.trim().isEmpty()) {
PAYRUK = Byte.parseByte(s);
} else {
PAYRUK = Byte.MIN_VALUE;
}
}

protected final void initPAYTYP(String s) {
if (!s.trim().isEmpty()) {
PAYTYP = Byte.parseByte(s);
} else {
PAYTYP = Byte.MIN_VALUE;
}
}

protected final void initPAYUWC(String s) {
if (!s.trim().isEmpty()) {
PAYUWC = Byte.parseByte(s);
} else {
PAYUWC = Byte.MIN_VALUE;
}
}

protected final void initPAYU_DV(String s) {
if (!s.trim().isEmpty()) {
PAYU_DV = Double.parseDouble(s);
} else {
PAYU_DV = Double.NaN;
}
}

protected final void initPBNFT1(String s) {
if (!s.trim().isEmpty()) {
PBNFT1 = Byte.parseByte(s);
} else {
PBNFT1 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT10(String s) {
if (!s.trim().isEmpty()) {
PBNFT10 = Byte.parseByte(s);
} else {
PBNFT10 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT11(String s) {
if (!s.trim().isEmpty()) {
PBNFT11 = Byte.parseByte(s);
} else {
PBNFT11 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT12(String s) {
if (!s.trim().isEmpty()) {
PBNFT12 = Byte.parseByte(s);
} else {
PBNFT12 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT13(String s) {
if (!s.trim().isEmpty()) {
PBNFT13 = Byte.parseByte(s);
} else {
PBNFT13 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT2(String s) {
if (!s.trim().isEmpty()) {
PBNFT2 = Byte.parseByte(s);
} else {
PBNFT2 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT3(String s) {
if (!s.trim().isEmpty()) {
PBNFT3 = Byte.parseByte(s);
} else {
PBNFT3 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT4(String s) {
if (!s.trim().isEmpty()) {
PBNFT4 = Byte.parseByte(s);
} else {
PBNFT4 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT5(String s) {
if (!s.trim().isEmpty()) {
PBNFT5 = Byte.parseByte(s);
} else {
PBNFT5 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT6(String s) {
if (!s.trim().isEmpty()) {
PBNFT6 = Byte.parseByte(s);
} else {
PBNFT6 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT7(String s) {
if (!s.trim().isEmpty()) {
PBNFT7 = Byte.parseByte(s);
} else {
PBNFT7 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT8(String s) {
if (!s.trim().isEmpty()) {
PBNFT8 = Byte.parseByte(s);
} else {
PBNFT8 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT9(String s) {
if (!s.trim().isEmpty()) {
PBNFT9 = Byte.parseByte(s);
} else {
PBNFT9 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT96(String s) {
if (!s.trim().isEmpty()) {
PBNFT96 = Byte.parseByte(s);
} else {
PBNFT96 = Byte.MIN_VALUE;
}
}

protected final void initPENMEX(String s) {
if (!s.trim().isEmpty()) {
PENMEX = Byte.parseByte(s);
} else {
PENMEX = Byte.MIN_VALUE;
}
}

protected final void initPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
PENSIONER_DV = Byte.parseByte(s);
} else {
PENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initPID(String s) {
if (!s.trim().isEmpty()) {
PID = Integer.parseInt(s);
} else {
PID = Integer.MIN_VALUE;
}
}

protected final void initPJBPTFT(String s) {
if (!s.trim().isEmpty()) {
PJBPTFT = Byte.parseByte(s);
} else {
PJBPTFT = Byte.MIN_VALUE;
}
}

protected final void initPJSPTFT(String s) {
if (!s.trim().isEmpty()) {
PJSPTFT = Byte.parseByte(s);
} else {
PJSPTFT = Byte.MIN_VALUE;
}
}

protected final void initPLIVPAR(String s) {
if (!s.trim().isEmpty()) {
PLIVPAR = Byte.parseByte(s);
} else {
PLIVPAR = Byte.MIN_VALUE;
}
}

protected final void initPLNOWM(String s) {
if (!s.trim().isEmpty()) {
PLNOWM = Short.parseShort(s);
} else {
PLNOWM = Short.MIN_VALUE;
}
}

protected final void initPLNOWY4(String s) {
if (!s.trim().isEmpty()) {
PLNOWY4 = Short.parseShort(s);
} else {
PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initPN1PID(String s) {
if (!s.trim().isEmpty()) {
PN1PID = Integer.parseInt(s);
} else {
PN1PID = Integer.MIN_VALUE;
}
}

protected final void initPN1PNO(String s) {
if (!s.trim().isEmpty()) {
PN1PNO = Byte.parseByte(s);
} else {
PN1PNO = Byte.MIN_VALUE;
}
}

protected final void initPN1SEX(String s) {
if (!s.trim().isEmpty()) {
PN1SEX = Byte.parseByte(s);
} else {
PN1SEX = Byte.MIN_VALUE;
}
}

protected final void initPN2PID(String s) {
if (!s.trim().isEmpty()) {
PN2PID = Integer.parseInt(s);
} else {
PN2PID = Integer.MIN_VALUE;
}
}

protected final void initPN2PNO(String s) {
if (!s.trim().isEmpty()) {
PN2PNO = Byte.parseByte(s);
} else {
PN2PNO = Byte.MIN_VALUE;
}
}

protected final void initPN2SEX(String s) {
if (!s.trim().isEmpty()) {
PN2SEX = Byte.parseByte(s);
} else {
PN2SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS1PID(String s) {
if (!s.trim().isEmpty()) {
PNS1PID = Integer.parseInt(s);
} else {
PNS1PID = Integer.MIN_VALUE;
}
}

protected final void initPNS1PNO(String s) {
if (!s.trim().isEmpty()) {
PNS1PNO = Byte.parseByte(s);
} else {
PNS1PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS1SEX(String s) {
if (!s.trim().isEmpty()) {
PNS1SEX = Byte.parseByte(s);
} else {
PNS1SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS2PID(String s) {
if (!s.trim().isEmpty()) {
PNS2PID = Integer.parseInt(s);
} else {
PNS2PID = Integer.MIN_VALUE;
}
}

protected final void initPNS2PNO(String s) {
if (!s.trim().isEmpty()) {
PNS2PNO = Byte.parseByte(s);
} else {
PNS2PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS2SEX(String s) {
if (!s.trim().isEmpty()) {
PNS2SEX = Byte.parseByte(s);
} else {
PNS2SEX = Byte.MIN_VALUE;
}
}

protected final void initPPENSIONER(String s) {
if (!s.trim().isEmpty()) {
PPENSIONER = Byte.parseByte(s);
} else {
PPENSIONER = Byte.MIN_VALUE;
}
}

protected final void initPPID(String s) {
if (!s.trim().isEmpty()) {
PPID = Integer.parseInt(s);
} else {
PPID = Integer.MIN_VALUE;
}
}

protected final void initPPPEX(String s) {
if (!s.trim().isEmpty()) {
PPPEX = Byte.parseByte(s);
} else {
PPPEX = Byte.MIN_VALUE;
}
}

protected final void initPPPEXM(String s) {
if (!s.trim().isEmpty()) {
PPPEXM = Byte.parseByte(s);
} else {
PPPEXM = Byte.MIN_VALUE;
}
}

protected final void initPPSEX(String s) {
if (!s.trim().isEmpty()) {
PPSEX = Byte.parseByte(s);
} else {
PPSEX = Byte.MIN_VALUE;
}
}

protected final void initPRAISEKID(String s) {
if (!s.trim().isEmpty()) {
PRAISEKID = Byte.parseByte(s);
} else {
PRAISEKID = Byte.MIN_VALUE;
}
}

protected final void initPREARN(String s) {
if (!s.trim().isEmpty()) {
PREARN = Byte.parseByte(s);
} else {
PREARN = Byte.MIN_VALUE;
}
}

protected final void initPREARNA(String s) {
if (!s.trim().isEmpty()) {
PREARNA = Byte.parseByte(s);
} else {
PREARNA = Byte.MIN_VALUE;
}
}

protected final void initPREARNW(String s) {
if (!s.trim().isEmpty()) {
PREARNW = Byte.parseByte(s);
} else {
PREARNW = Byte.MIN_VALUE;
}
}

protected final void initPREASON(String s) {
if (!s.trim().isEmpty()) {
PREASON = Byte.parseByte(s);
} else {
PREASON = Byte.MIN_VALUE;
}
}

protected final void initPREG(String s) {
if (!s.trim().isEmpty()) {
PREG = Byte.parseByte(s);
} else {
PREG = Byte.MIN_VALUE;
}
}

protected final void initPREGEND1(String s) {
if (!s.trim().isEmpty()) {
PREGEND1 = Byte.parseByte(s);
} else {
PREGEND1 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND2(String s) {
if (!s.trim().isEmpty()) {
PREGEND2 = Byte.parseByte(s);
} else {
PREGEND2 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND3(String s) {
if (!s.trim().isEmpty()) {
PREGEND3 = Byte.parseByte(s);
} else {
PREGEND3 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT1(String s) {
if (!s.trim().isEmpty()) {
PREGFERT1 = Byte.parseByte(s);
} else {
PREGFERT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT2(String s) {
if (!s.trim().isEmpty()) {
PREGFERT2 = Byte.parseByte(s);
} else {
PREGFERT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT3(String s) {
if (!s.trim().isEmpty()) {
PREGFERT3 = Byte.parseByte(s);
} else {
PREGFERT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGM1(String s) {
if (!s.trim().isEmpty()) {
PREGM1 = Byte.parseByte(s);
} else {
PREGM1 = Byte.MIN_VALUE;
}
}

protected final void initPREGM2(String s) {
if (!s.trim().isEmpty()) {
PREGM2 = Byte.parseByte(s);
} else {
PREGM2 = Byte.MIN_VALUE;
}
}

protected final void initPREGM3(String s) {
if (!s.trim().isEmpty()) {
PREGM3 = Byte.parseByte(s);
} else {
PREGM3 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT1(String s) {
if (!s.trim().isEmpty()) {
PREGOUT1 = Byte.parseByte(s);
} else {
PREGOUT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT2(String s) {
if (!s.trim().isEmpty()) {
PREGOUT2 = Byte.parseByte(s);
} else {
PREGOUT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT3(String s) {
if (!s.trim().isEmpty()) {
PREGOUT3 = Byte.parseByte(s);
} else {
PREGOUT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK11(String s) {
if (!s.trim().isEmpty()) {
PREGSMK11 = Byte.parseByte(s);
} else {
PREGSMK11 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK12(String s) {
if (!s.trim().isEmpty()) {
PREGSMK12 = Byte.parseByte(s);
} else {
PREGSMK12 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK13(String s) {
if (!s.trim().isEmpty()) {
PREGSMK13 = Byte.parseByte(s);
} else {
PREGSMK13 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK21(String s) {
if (!s.trim().isEmpty()) {
PREGSMK21 = Byte.parseByte(s);
} else {
PREGSMK21 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK22(String s) {
if (!s.trim().isEmpty()) {
PREGSMK22 = Byte.parseByte(s);
} else {
PREGSMK22 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK23(String s) {
if (!s.trim().isEmpty()) {
PREGSMK23 = Byte.parseByte(s);
} else {
PREGSMK23 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK31(String s) {
if (!s.trim().isEmpty()) {
PREGSMK31 = Byte.parseByte(s);
} else {
PREGSMK31 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK32(String s) {
if (!s.trim().isEmpty()) {
PREGSMK32 = Byte.parseByte(s);
} else {
PREGSMK32 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK33(String s) {
if (!s.trim().isEmpty()) {
PREGSMK33 = Byte.parseByte(s);
} else {
PREGSMK33 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE1(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE1 = Byte.parseByte(s);
} else {
PREGSMOKE1 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE2(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE2 = Byte.parseByte(s);
} else {
PREGSMOKE2 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE3(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE3 = Byte.parseByte(s);
} else {
PREGSMOKE3 = Byte.MIN_VALUE;
}
}

protected final void initPREGY41(String s) {
if (!s.trim().isEmpty()) {
PREGY41 = Short.parseShort(s);
} else {
PREGY41 = Short.MIN_VALUE;
}
}

protected final void initPREGY42(String s) {
if (!s.trim().isEmpty()) {
PREGY42 = Short.parseShort(s);
} else {
PREGY42 = Short.MIN_VALUE;
}
}

protected final void initPREGY43(String s) {
if (!s.trim().isEmpty()) {
PREGY43 = Short.parseShort(s);
} else {
PREGY43 = Short.MIN_VALUE;
}
}

protected final void initPREL(String s) {
if (!s.trim().isEmpty()) {
PREL = Byte.parseByte(s);
} else {
PREL = Byte.MIN_VALUE;
}
}

protected final void initPRFITB(String s) {
if (!s.trim().isEmpty()) {
PRFITB = Byte.parseByte(s);
} else {
PRFITB = Byte.MIN_VALUE;
}
}

protected final void initPRFITBA(String s) {
if (!s.trim().isEmpty()) {
PRFITBA = Byte.parseByte(s);
} else {
PRFITBA = Byte.MIN_VALUE;
}
}

protected final void initPRFITBW(String s) {
if (!s.trim().isEmpty()) {
PRFITBW = Byte.parseByte(s);
} else {
PRFITBW = Byte.MIN_VALUE;
}
}

protected final void initPRIDE10(String s) {
if (!s.trim().isEmpty()) {
PRIDE10 = Byte.parseByte(s);
} else {
PRIDE10 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE11(String s) {
if (!s.trim().isEmpty()) {
PRIDE11 = Byte.parseByte(s);
} else {
PRIDE11 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE12(String s) {
if (!s.trim().isEmpty()) {
PRIDE12 = Byte.parseByte(s);
} else {
PRIDE12 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE13(String s) {
if (!s.trim().isEmpty()) {
PRIDE13 = Byte.parseByte(s);
} else {
PRIDE13 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE14(String s) {
if (!s.trim().isEmpty()) {
PRIDE14 = Byte.parseByte(s);
} else {
PRIDE14 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE2(String s) {
if (!s.trim().isEmpty()) {
PRIDE2 = Byte.parseByte(s);
} else {
PRIDE2 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE4A(String s) {
if (!s.trim().isEmpty()) {
PRIDE4A = Byte.parseByte(s);
} else {
PRIDE4A = Byte.MIN_VALUE;
}
}

protected final void initPRIDE4B(String s) {
if (!s.trim().isEmpty()) {
PRIDE4B = Byte.parseByte(s);
} else {
PRIDE4B = Byte.MIN_VALUE;
}
}

protected final void initPRIDE5(String s) {
if (!s.trim().isEmpty()) {
PRIDE5 = Byte.parseByte(s);
} else {
PRIDE5 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE6(String s) {
if (!s.trim().isEmpty()) {
PRIDE6 = Byte.parseByte(s);
} else {
PRIDE6 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE7(String s) {
if (!s.trim().isEmpty()) {
PRIDE7 = Byte.parseByte(s);
} else {
PRIDE7 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE8(String s) {
if (!s.trim().isEmpty()) {
PRIDE8 = Byte.parseByte(s);
} else {
PRIDE8 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE9(String s) {
if (!s.trim().isEmpty()) {
PRIDE9 = Byte.parseByte(s);
} else {
PRIDE9 = Byte.MIN_VALUE;
}
}

protected final void initPS1(String s) {
if (!s.trim().isEmpty()) {
PS1 = Byte.parseByte(s);
} else {
PS1 = Byte.MIN_VALUE;
}
}

protected final void initPS10(String s) {
if (!s.trim().isEmpty()) {
PS10 = Byte.parseByte(s);
} else {
PS10 = Byte.MIN_VALUE;
}
}

protected final void initPS11(String s) {
if (!s.trim().isEmpty()) {
PS11 = Byte.parseByte(s);
} else {
PS11 = Byte.MIN_VALUE;
}
}

protected final void initPS12(String s) {
if (!s.trim().isEmpty()) {
PS12 = Byte.parseByte(s);
} else {
PS12 = Byte.MIN_VALUE;
}
}

protected final void initPS13(String s) {
if (!s.trim().isEmpty()) {
PS13 = Byte.parseByte(s);
} else {
PS13 = Byte.MIN_VALUE;
}
}

protected final void initPS14(String s) {
if (!s.trim().isEmpty()) {
PS14 = Byte.parseByte(s);
} else {
PS14 = Byte.MIN_VALUE;
}
}

protected final void initPS15(String s) {
if (!s.trim().isEmpty()) {
PS15 = Byte.parseByte(s);
} else {
PS15 = Byte.MIN_VALUE;
}
}

protected final void initPS16(String s) {
if (!s.trim().isEmpty()) {
PS16 = Byte.parseByte(s);
} else {
PS16 = Byte.MIN_VALUE;
}
}

protected final void initPS17(String s) {
if (!s.trim().isEmpty()) {
PS17 = Byte.parseByte(s);
} else {
PS17 = Byte.MIN_VALUE;
}
}

protected final void initPS18(String s) {
if (!s.trim().isEmpty()) {
PS18 = Byte.parseByte(s);
} else {
PS18 = Byte.MIN_VALUE;
}
}

protected final void initPS19(String s) {
if (!s.trim().isEmpty()) {
PS19 = Byte.parseByte(s);
} else {
PS19 = Byte.MIN_VALUE;
}
}

protected final void initPS2(String s) {
if (!s.trim().isEmpty()) {
PS2 = Byte.parseByte(s);
} else {
PS2 = Byte.MIN_VALUE;
}
}

protected final void initPS20(String s) {
if (!s.trim().isEmpty()) {
PS20 = Byte.parseByte(s);
} else {
PS20 = Byte.MIN_VALUE;
}
}

protected final void initPS21(String s) {
if (!s.trim().isEmpty()) {
PS21 = Byte.parseByte(s);
} else {
PS21 = Byte.MIN_VALUE;
}
}

protected final void initPS22(String s) {
if (!s.trim().isEmpty()) {
PS22 = Byte.parseByte(s);
} else {
PS22 = Byte.MIN_VALUE;
}
}

protected final void initPS23(String s) {
if (!s.trim().isEmpty()) {
PS23 = Byte.parseByte(s);
} else {
PS23 = Byte.MIN_VALUE;
}
}

protected final void initPS24(String s) {
if (!s.trim().isEmpty()) {
PS24 = Byte.parseByte(s);
} else {
PS24 = Byte.MIN_VALUE;
}
}

protected final void initPS25(String s) {
if (!s.trim().isEmpty()) {
PS25 = Byte.parseByte(s);
} else {
PS25 = Byte.MIN_VALUE;
}
}

protected final void initPS26(String s) {
if (!s.trim().isEmpty()) {
PS26 = Byte.parseByte(s);
} else {
PS26 = Byte.MIN_VALUE;
}
}

protected final void initPS27(String s) {
if (!s.trim().isEmpty()) {
PS27 = Byte.parseByte(s);
} else {
PS27 = Byte.MIN_VALUE;
}
}

protected final void initPS28(String s) {
if (!s.trim().isEmpty()) {
PS28 = Byte.parseByte(s);
} else {
PS28 = Byte.MIN_VALUE;
}
}

protected final void initPS29(String s) {
if (!s.trim().isEmpty()) {
PS29 = Byte.parseByte(s);
} else {
PS29 = Byte.MIN_VALUE;
}
}

protected final void initPS3(String s) {
if (!s.trim().isEmpty()) {
PS3 = Byte.parseByte(s);
} else {
PS3 = Byte.MIN_VALUE;
}
}

protected final void initPS30(String s) {
if (!s.trim().isEmpty()) {
PS30 = Byte.parseByte(s);
} else {
PS30 = Byte.MIN_VALUE;
}
}

protected final void initPS31(String s) {
if (!s.trim().isEmpty()) {
PS31 = Byte.parseByte(s);
} else {
PS31 = Byte.MIN_VALUE;
}
}

protected final void initPS32(String s) {
if (!s.trim().isEmpty()) {
PS32 = Byte.parseByte(s);
} else {
PS32 = Byte.MIN_VALUE;
}
}

protected final void initPS4(String s) {
if (!s.trim().isEmpty()) {
PS4 = Byte.parseByte(s);
} else {
PS4 = Byte.MIN_VALUE;
}
}

protected final void initPS5(String s) {
if (!s.trim().isEmpty()) {
PS5 = Byte.parseByte(s);
} else {
PS5 = Byte.MIN_VALUE;
}
}

protected final void initPS6(String s) {
if (!s.trim().isEmpty()) {
PS6 = Byte.parseByte(s);
} else {
PS6 = Byte.MIN_VALUE;
}
}

protected final void initPS7(String s) {
if (!s.trim().isEmpty()) {
PS7 = Byte.parseByte(s);
} else {
PS7 = Byte.MIN_VALUE;
}
}

protected final void initPS8(String s) {
if (!s.trim().isEmpty()) {
PS8 = Byte.parseByte(s);
} else {
PS8 = Byte.MIN_VALUE;
}
}

protected final void initPS9(String s) {
if (!s.trim().isEmpty()) {
PS9 = Byte.parseByte(s);
} else {
PS9 = Byte.MIN_VALUE;
}
}

protected final void initPSDQA_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQA_DV = Byte.parseByte(s);
} else {
PSDQA_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQB_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQB_DV = Byte.parseByte(s);
} else {
PSDQB_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQC_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQC_DV = Byte.parseByte(s);
} else {
PSDQC_DV = Byte.MIN_VALUE;
}
}

protected final void initPSNUMCH(String s) {
if (!s.trim().isEmpty()) {
PSNUMCH = Byte.parseByte(s);
} else {
PSNUMCH = Byte.MIN_VALUE;
}
}

protected final void initPSU(String s) {
if (!s.trim().isEmpty()) {
PSU = Integer.parseInt(s);
} else {
PSU = Integer.MIN_VALUE;
}
}

protected final void initPYENRL(String s) {
if (!s.trim().isEmpty()) {
PYENRL = Byte.parseByte(s);
} else {
PYENRL = Byte.MIN_VALUE;
}
}

protected final void initQFHIGH(String s) {
if (!s.trim().isEmpty()) {
QFHIGH = Byte.parseByte(s);
} else {
QFHIGH = Byte.MIN_VALUE;
}
}

protected final void initQFHIGHFL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
QFHIGHFL_DV = false;
} else {
QFHIGHFL_DV = true;
}
}
}

protected final void initQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
QFHIGH_DV = Byte.parseByte(s);
} else {
QFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initQFVOC1(String s) {
if (!s.trim().isEmpty()) {
QFVOC1 = Byte.parseByte(s);
} else {
QFVOC1 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC10(String s) {
if (!s.trim().isEmpty()) {
QFVOC10 = Byte.parseByte(s);
} else {
QFVOC10 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC11(String s) {
if (!s.trim().isEmpty()) {
QFVOC11 = Byte.parseByte(s);
} else {
QFVOC11 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC12(String s) {
if (!s.trim().isEmpty()) {
QFVOC12 = Byte.parseByte(s);
} else {
QFVOC12 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC13(String s) {
if (!s.trim().isEmpty()) {
QFVOC13 = Byte.parseByte(s);
} else {
QFVOC13 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC14(String s) {
if (!s.trim().isEmpty()) {
QFVOC14 = Byte.parseByte(s);
} else {
QFVOC14 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC15(String s) {
if (!s.trim().isEmpty()) {
QFVOC15 = Byte.parseByte(s);
} else {
QFVOC15 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC2(String s) {
if (!s.trim().isEmpty()) {
QFVOC2 = Byte.parseByte(s);
} else {
QFVOC2 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC3(String s) {
if (!s.trim().isEmpty()) {
QFVOC3 = Byte.parseByte(s);
} else {
QFVOC3 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC4(String s) {
if (!s.trim().isEmpty()) {
QFVOC4 = Byte.parseByte(s);
} else {
QFVOC4 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC5(String s) {
if (!s.trim().isEmpty()) {
QFVOC5 = Byte.parseByte(s);
} else {
QFVOC5 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC6(String s) {
if (!s.trim().isEmpty()) {
QFVOC6 = Byte.parseByte(s);
} else {
QFVOC6 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC7(String s) {
if (!s.trim().isEmpty()) {
QFVOC7 = Byte.parseByte(s);
} else {
QFVOC7 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC8(String s) {
if (!s.trim().isEmpty()) {
QFVOC8 = Byte.parseByte(s);
} else {
QFVOC8 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC9(String s) {
if (!s.trim().isEmpty()) {
QFVOC9 = Byte.parseByte(s);
} else {
QFVOC9 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC96(String s) {
if (!s.trim().isEmpty()) {
QFVOC96 = Byte.parseByte(s);
} else {
QFVOC96 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW1(String s) {
if (!s.trim().isEmpty()) {
QUALNEW1 = Byte.parseByte(s);
} else {
QUALNEW1 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW10(String s) {
if (!s.trim().isEmpty()) {
QUALNEW10 = Byte.parseByte(s);
} else {
QUALNEW10 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW11(String s) {
if (!s.trim().isEmpty()) {
QUALNEW11 = Byte.parseByte(s);
} else {
QUALNEW11 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW13(String s) {
if (!s.trim().isEmpty()) {
QUALNEW13 = Byte.parseByte(s);
} else {
QUALNEW13 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW15(String s) {
if (!s.trim().isEmpty()) {
QUALNEW15 = Byte.parseByte(s);
} else {
QUALNEW15 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW16(String s) {
if (!s.trim().isEmpty()) {
QUALNEW16 = Byte.parseByte(s);
} else {
QUALNEW16 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW17(String s) {
if (!s.trim().isEmpty()) {
QUALNEW17 = Byte.parseByte(s);
} else {
QUALNEW17 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW18(String s) {
if (!s.trim().isEmpty()) {
QUALNEW18 = Byte.parseByte(s);
} else {
QUALNEW18 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW19(String s) {
if (!s.trim().isEmpty()) {
QUALNEW19 = Byte.parseByte(s);
} else {
QUALNEW19 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW2(String s) {
if (!s.trim().isEmpty()) {
QUALNEW2 = Byte.parseByte(s);
} else {
QUALNEW2 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW20(String s) {
if (!s.trim().isEmpty()) {
QUALNEW20 = Byte.parseByte(s);
} else {
QUALNEW20 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW21(String s) {
if (!s.trim().isEmpty()) {
QUALNEW21 = Byte.parseByte(s);
} else {
QUALNEW21 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW22(String s) {
if (!s.trim().isEmpty()) {
QUALNEW22 = Byte.parseByte(s);
} else {
QUALNEW22 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW23(String s) {
if (!s.trim().isEmpty()) {
QUALNEW23 = Byte.parseByte(s);
} else {
QUALNEW23 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW24(String s) {
if (!s.trim().isEmpty()) {
QUALNEW24 = Byte.parseByte(s);
} else {
QUALNEW24 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW25(String s) {
if (!s.trim().isEmpty()) {
QUALNEW25 = Byte.parseByte(s);
} else {
QUALNEW25 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW26(String s) {
if (!s.trim().isEmpty()) {
QUALNEW26 = Byte.parseByte(s);
} else {
QUALNEW26 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW27(String s) {
if (!s.trim().isEmpty()) {
QUALNEW27 = Byte.parseByte(s);
} else {
QUALNEW27 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW28(String s) {
if (!s.trim().isEmpty()) {
QUALNEW28 = Byte.parseByte(s);
} else {
QUALNEW28 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW29(String s) {
if (!s.trim().isEmpty()) {
QUALNEW29 = Byte.parseByte(s);
} else {
QUALNEW29 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW3(String s) {
if (!s.trim().isEmpty()) {
QUALNEW3 = Byte.parseByte(s);
} else {
QUALNEW3 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW30(String s) {
if (!s.trim().isEmpty()) {
QUALNEW30 = Byte.parseByte(s);
} else {
QUALNEW30 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW31(String s) {
if (!s.trim().isEmpty()) {
QUALNEW31 = Byte.parseByte(s);
} else {
QUALNEW31 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW4(String s) {
if (!s.trim().isEmpty()) {
QUALNEW4 = Byte.parseByte(s);
} else {
QUALNEW4 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW5(String s) {
if (!s.trim().isEmpty()) {
QUALNEW5 = Byte.parseByte(s);
} else {
QUALNEW5 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW6(String s) {
if (!s.trim().isEmpty()) {
QUALNEW6 = Byte.parseByte(s);
} else {
QUALNEW6 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW7(String s) {
if (!s.trim().isEmpty()) {
QUALNEW7 = Byte.parseByte(s);
} else {
QUALNEW7 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW8(String s) {
if (!s.trim().isEmpty()) {
QUALNEW8 = Byte.parseByte(s);
} else {
QUALNEW8 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW9(String s) {
if (!s.trim().isEmpty()) {
QUALNEW9 = Byte.parseByte(s);
} else {
QUALNEW9 = Byte.MIN_VALUE;
}
}

protected final void initQUALOC(String s) {
if (!s.trim().isEmpty()) {
QUALOC = Byte.parseByte(s);
} else {
QUALOC = Byte.MIN_VALUE;
}
}

protected final void initQUARREL(String s) {
if (!s.trim().isEmpty()) {
QUARREL = Byte.parseByte(s);
} else {
QUARREL = Byte.MIN_VALUE;
}
}

protected final void initRACEL(String s) {
if (!s.trim().isEmpty()) {
RACEL = Byte.parseByte(s);
} else {
RACEL = Byte.MIN_VALUE;
}
}

protected final void initRACELAT(String s) {
if (!s.trim().isEmpty()) {
RACELAT = Byte.parseByte(s);
} else {
RACELAT = Byte.MIN_VALUE;
}
}

protected final void initRACELBT(String s) {
if (!s.trim().isEmpty()) {
RACELBT = Byte.parseByte(s);
} else {
RACELBT = Byte.MIN_VALUE;
}
}

protected final void initRACELMT(String s) {
if (!s.trim().isEmpty()) {
RACELMT = Byte.parseByte(s);
} else {
RACELMT = Byte.MIN_VALUE;
}
}

protected final void initRACELOT_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELOT_CODE = Byte.parseByte(s);
} else {
RACELOT_CODE = Byte.MIN_VALUE;
}
}

protected final void initRACELO_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELO_CODE = Short.parseShort(s);
} else {
RACELO_CODE = Short.MIN_VALUE;
}
}

protected final void initRACELT(String s) {
if (!s.trim().isEmpty()) {
RACELT = Byte.parseByte(s);
} else {
RACELT = Byte.MIN_VALUE;
}
}

protected final void initRACELWT(String s) {
if (!s.trim().isEmpty()) {
RACELWT = Byte.parseByte(s);
} else {
RACELWT = Byte.MIN_VALUE;
}
}

protected final void initRACEL_DV(String s) {
if (!s.trim().isEmpty()) {
RACEL_DV = Byte.parseByte(s);
} else {
RACEL_DV = Byte.MIN_VALUE;
}
}

protected final void initREADDIF(String s) {
if (!s.trim().isEmpty()) {
READDIF = Byte.parseByte(s);
} else {
READDIF = Byte.MIN_VALUE;
}
}

protected final void initREASEND1(String s) {
if (!s.trim().isEmpty()) {
REASEND1 = Byte.parseByte(s);
} else {
REASEND1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2(String s) {
if (!s.trim().isEmpty()) {
REASEND2 = Byte.parseByte(s);
} else {
REASEND2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3(String s) {
if (!s.trim().isEmpty()) {
REASEND3 = Byte.parseByte(s);
} else {
REASEND3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4(String s) {
if (!s.trim().isEmpty()) {
REASEND4 = Byte.parseByte(s);
} else {
REASEND4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5(String s) {
if (!s.trim().isEmpty()) {
REASEND5 = Byte.parseByte(s);
} else {
REASEND5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6(String s) {
if (!s.trim().isEmpty()) {
REASEND6 = Byte.parseByte(s);
} else {
REASEND6 = Byte.MIN_VALUE;
}
}

protected final void initRELKID(String s) {
if (!s.trim().isEmpty()) {
RELKID = Byte.parseByte(s);
} else {
RELKID = Byte.MIN_VALUE;
}
}

protected final void initRELUP(String s) {
if (!s.trim().isEmpty()) {
RELUP = Byte.parseByte(s);
} else {
RELUP = Byte.MIN_VALUE;
}
}

protected final void initREMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
REMAIL_CODE = Byte.parseByte(s);
} else {
REMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_1 = Byte.parseByte(s);
} else {
RESATTACKED1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_10 = Byte.parseByte(s);
} else {
RESATTACKED1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_11 = Byte.parseByte(s);
} else {
RESATTACKED1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_12 = Byte.parseByte(s);
} else {
RESATTACKED1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_2 = Byte.parseByte(s);
} else {
RESATTACKED1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_3 = Byte.parseByte(s);
} else {
RESATTACKED1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_4 = Byte.parseByte(s);
} else {
RESATTACKED1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_5 = Byte.parseByte(s);
} else {
RESATTACKED1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_6 = Byte.parseByte(s);
} else {
RESATTACKED1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_7 = Byte.parseByte(s);
} else {
RESATTACKED1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_8 = Byte.parseByte(s);
} else {
RESATTACKED1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_9 = Byte.parseByte(s);
} else {
RESATTACKED1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_1 = Byte.parseByte(s);
} else {
RESATTACKED2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_10 = Byte.parseByte(s);
} else {
RESATTACKED2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_11 = Byte.parseByte(s);
} else {
RESATTACKED2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_12 = Byte.parseByte(s);
} else {
RESATTACKED2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_2 = Byte.parseByte(s);
} else {
RESATTACKED2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_3 = Byte.parseByte(s);
} else {
RESATTACKED2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_4 = Byte.parseByte(s);
} else {
RESATTACKED2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_5 = Byte.parseByte(s);
} else {
RESATTACKED2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_6 = Byte.parseByte(s);
} else {
RESATTACKED2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_7 = Byte.parseByte(s);
} else {
RESATTACKED2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_8 = Byte.parseByte(s);
} else {
RESATTACKED2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_9 = Byte.parseByte(s);
} else {
RESATTACKED2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_1 = Byte.parseByte(s);
} else {
RESATTACKED3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_10 = Byte.parseByte(s);
} else {
RESATTACKED3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_11 = Byte.parseByte(s);
} else {
RESATTACKED3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_12 = Byte.parseByte(s);
} else {
RESATTACKED3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_2 = Byte.parseByte(s);
} else {
RESATTACKED3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_3 = Byte.parseByte(s);
} else {
RESATTACKED3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_4 = Byte.parseByte(s);
} else {
RESATTACKED3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_5 = Byte.parseByte(s);
} else {
RESATTACKED3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_6 = Byte.parseByte(s);
} else {
RESATTACKED3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_7 = Byte.parseByte(s);
} else {
RESATTACKED3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_8 = Byte.parseByte(s);
} else {
RESATTACKED3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_9 = Byte.parseByte(s);
} else {
RESATTACKED3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_1 = Byte.parseByte(s);
} else {
RESATTACKED4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_10 = Byte.parseByte(s);
} else {
RESATTACKED4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_11 = Byte.parseByte(s);
} else {
RESATTACKED4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_12 = Byte.parseByte(s);
} else {
RESATTACKED4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_2 = Byte.parseByte(s);
} else {
RESATTACKED4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_3 = Byte.parseByte(s);
} else {
RESATTACKED4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_4 = Byte.parseByte(s);
} else {
RESATTACKED4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_5 = Byte.parseByte(s);
} else {
RESATTACKED4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_6 = Byte.parseByte(s);
} else {
RESATTACKED4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_7 = Byte.parseByte(s);
} else {
RESATTACKED4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_8 = Byte.parseByte(s);
} else {
RESATTACKED4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_9 = Byte.parseByte(s);
} else {
RESATTACKED4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_1 = Byte.parseByte(s);
} else {
RESATTACKED5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_10 = Byte.parseByte(s);
} else {
RESATTACKED5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_11 = Byte.parseByte(s);
} else {
RESATTACKED5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_12 = Byte.parseByte(s);
} else {
RESATTACKED5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_2 = Byte.parseByte(s);
} else {
RESATTACKED5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_3 = Byte.parseByte(s);
} else {
RESATTACKED5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_4 = Byte.parseByte(s);
} else {
RESATTACKED5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_5 = Byte.parseByte(s);
} else {
RESATTACKED5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_6 = Byte.parseByte(s);
} else {
RESATTACKED5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_7 = Byte.parseByte(s);
} else {
RESATTACKED5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_8 = Byte.parseByte(s);
} else {
RESATTACKED5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_9 = Byte.parseByte(s);
} else {
RESATTACKED5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_1 = Byte.parseByte(s);
} else {
RESATTACKED6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_10 = Byte.parseByte(s);
} else {
RESATTACKED6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_11 = Byte.parseByte(s);
} else {
RESATTACKED6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_12 = Byte.parseByte(s);
} else {
RESATTACKED6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_2 = Byte.parseByte(s);
} else {
RESATTACKED6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_3 = Byte.parseByte(s);
} else {
RESATTACKED6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_4 = Byte.parseByte(s);
} else {
RESATTACKED6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_5 = Byte.parseByte(s);
} else {
RESATTACKED6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_6 = Byte.parseByte(s);
} else {
RESATTACKED6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_7 = Byte.parseByte(s);
} else {
RESATTACKED6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_8 = Byte.parseByte(s);
} else {
RESATTACKED6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_9 = Byte.parseByte(s);
} else {
RESATTACKED6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_1 = Byte.parseByte(s);
} else {
RESATTACKED7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_10 = Byte.parseByte(s);
} else {
RESATTACKED7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_11 = Byte.parseByte(s);
} else {
RESATTACKED7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_12 = Byte.parseByte(s);
} else {
RESATTACKED7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_2 = Byte.parseByte(s);
} else {
RESATTACKED7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_3 = Byte.parseByte(s);
} else {
RESATTACKED7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_4 = Byte.parseByte(s);
} else {
RESATTACKED7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_5 = Byte.parseByte(s);
} else {
RESATTACKED7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_6 = Byte.parseByte(s);
} else {
RESATTACKED7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_7 = Byte.parseByte(s);
} else {
RESATTACKED7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_8 = Byte.parseByte(s);
} else {
RESATTACKED7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_9 = Byte.parseByte(s);
} else {
RESATTACKED7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_1 = Byte.parseByte(s);
} else {
RESATTACKED8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_10 = Byte.parseByte(s);
} else {
RESATTACKED8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_11 = Byte.parseByte(s);
} else {
RESATTACKED8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_12 = Byte.parseByte(s);
} else {
RESATTACKED8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_2 = Byte.parseByte(s);
} else {
RESATTACKED8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_3 = Byte.parseByte(s);
} else {
RESATTACKED8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_4 = Byte.parseByte(s);
} else {
RESATTACKED8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_5 = Byte.parseByte(s);
} else {
RESATTACKED8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_6 = Byte.parseByte(s);
} else {
RESATTACKED8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_7 = Byte.parseByte(s);
} else {
RESATTACKED8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_8 = Byte.parseByte(s);
} else {
RESATTACKED8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_9 = Byte.parseByte(s);
} else {
RESATTACKED8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_1 = Byte.parseByte(s);
} else {
RESATTACKED96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_10 = Byte.parseByte(s);
} else {
RESATTACKED96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_11 = Byte.parseByte(s);
} else {
RESATTACKED96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_12 = Byte.parseByte(s);
} else {
RESATTACKED96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_2 = Byte.parseByte(s);
} else {
RESATTACKED96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_3 = Byte.parseByte(s);
} else {
RESATTACKED96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_4 = Byte.parseByte(s);
} else {
RESATTACKED96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_5 = Byte.parseByte(s);
} else {
RESATTACKED96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_6 = Byte.parseByte(s);
} else {
RESATTACKED96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_7 = Byte.parseByte(s);
} else {
RESATTACKED96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_8 = Byte.parseByte(s);
} else {
RESATTACKED96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_9 = Byte.parseByte(s);
} else {
RESATTACKED96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_1 = Byte.parseByte(s);
} else {
RESATTACKED97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_10 = Byte.parseByte(s);
} else {
RESATTACKED97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_11 = Byte.parseByte(s);
} else {
RESATTACKED97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_12 = Byte.parseByte(s);
} else {
RESATTACKED97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_2 = Byte.parseByte(s);
} else {
RESATTACKED97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_3 = Byte.parseByte(s);
} else {
RESATTACKED97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_4 = Byte.parseByte(s);
} else {
RESATTACKED97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_5 = Byte.parseByte(s);
} else {
RESATTACKED97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_6 = Byte.parseByte(s);
} else {
RESATTACKED97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_7 = Byte.parseByte(s);
} else {
RESATTACKED97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_8 = Byte.parseByte(s);
} else {
RESATTACKED97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_9 = Byte.parseByte(s);
} else {
RESATTACKED97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_1 = Byte.parseByte(s);
} else {
RESATTACKED9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_10 = Byte.parseByte(s);
} else {
RESATTACKED9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_11 = Byte.parseByte(s);
} else {
RESATTACKED9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_12 = Byte.parseByte(s);
} else {
RESATTACKED9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_2 = Byte.parseByte(s);
} else {
RESATTACKED9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_3 = Byte.parseByte(s);
} else {
RESATTACKED9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_4 = Byte.parseByte(s);
} else {
RESATTACKED9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_5 = Byte.parseByte(s);
} else {
RESATTACKED9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_6 = Byte.parseByte(s);
} else {
RESATTACKED9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_7 = Byte.parseByte(s);
} else {
RESATTACKED9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_8 = Byte.parseByte(s);
} else {
RESATTACKED9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_9 = Byte.parseByte(s);
} else {
RESATTACKED9_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_1 = Byte.parseByte(s);
} else {
RESAVOID1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_10 = Byte.parseByte(s);
} else {
RESAVOID1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_11 = Byte.parseByte(s);
} else {
RESAVOID1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_12 = Byte.parseByte(s);
} else {
RESAVOID1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_2 = Byte.parseByte(s);
} else {
RESAVOID1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_3 = Byte.parseByte(s);
} else {
RESAVOID1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_4 = Byte.parseByte(s);
} else {
RESAVOID1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_5 = Byte.parseByte(s);
} else {
RESAVOID1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_6 = Byte.parseByte(s);
} else {
RESAVOID1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_7 = Byte.parseByte(s);
} else {
RESAVOID1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_8 = Byte.parseByte(s);
} else {
RESAVOID1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_9 = Byte.parseByte(s);
} else {
RESAVOID1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_1 = Byte.parseByte(s);
} else {
RESAVOID2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_10 = Byte.parseByte(s);
} else {
RESAVOID2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_11 = Byte.parseByte(s);
} else {
RESAVOID2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_12 = Byte.parseByte(s);
} else {
RESAVOID2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_2 = Byte.parseByte(s);
} else {
RESAVOID2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_3 = Byte.parseByte(s);
} else {
RESAVOID2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_4 = Byte.parseByte(s);
} else {
RESAVOID2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_5 = Byte.parseByte(s);
} else {
RESAVOID2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_6 = Byte.parseByte(s);
} else {
RESAVOID2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_7 = Byte.parseByte(s);
} else {
RESAVOID2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_8 = Byte.parseByte(s);
} else {
RESAVOID2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_9 = Byte.parseByte(s);
} else {
RESAVOID2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_1 = Byte.parseByte(s);
} else {
RESAVOID3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_10 = Byte.parseByte(s);
} else {
RESAVOID3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_11 = Byte.parseByte(s);
} else {
RESAVOID3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_12 = Byte.parseByte(s);
} else {
RESAVOID3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_2 = Byte.parseByte(s);
} else {
RESAVOID3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_3 = Byte.parseByte(s);
} else {
RESAVOID3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_4 = Byte.parseByte(s);
} else {
RESAVOID3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_5 = Byte.parseByte(s);
} else {
RESAVOID3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_6 = Byte.parseByte(s);
} else {
RESAVOID3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_7 = Byte.parseByte(s);
} else {
RESAVOID3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_8 = Byte.parseByte(s);
} else {
RESAVOID3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_9 = Byte.parseByte(s);
} else {
RESAVOID3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_1 = Byte.parseByte(s);
} else {
RESAVOID4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_10 = Byte.parseByte(s);
} else {
RESAVOID4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_11 = Byte.parseByte(s);
} else {
RESAVOID4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_12 = Byte.parseByte(s);
} else {
RESAVOID4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_2 = Byte.parseByte(s);
} else {
RESAVOID4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_3 = Byte.parseByte(s);
} else {
RESAVOID4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_4 = Byte.parseByte(s);
} else {
RESAVOID4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_5 = Byte.parseByte(s);
} else {
RESAVOID4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_6 = Byte.parseByte(s);
} else {
RESAVOID4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_7 = Byte.parseByte(s);
} else {
RESAVOID4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_8 = Byte.parseByte(s);
} else {
RESAVOID4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_9 = Byte.parseByte(s);
} else {
RESAVOID4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_1 = Byte.parseByte(s);
} else {
RESAVOID5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_10 = Byte.parseByte(s);
} else {
RESAVOID5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_11 = Byte.parseByte(s);
} else {
RESAVOID5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_12 = Byte.parseByte(s);
} else {
RESAVOID5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_2 = Byte.parseByte(s);
} else {
RESAVOID5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_3 = Byte.parseByte(s);
} else {
RESAVOID5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_4 = Byte.parseByte(s);
} else {
RESAVOID5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_5 = Byte.parseByte(s);
} else {
RESAVOID5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_6 = Byte.parseByte(s);
} else {
RESAVOID5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_7 = Byte.parseByte(s);
} else {
RESAVOID5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_8 = Byte.parseByte(s);
} else {
RESAVOID5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_9 = Byte.parseByte(s);
} else {
RESAVOID5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_1 = Byte.parseByte(s);
} else {
RESAVOID6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_10 = Byte.parseByte(s);
} else {
RESAVOID6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_11 = Byte.parseByte(s);
} else {
RESAVOID6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_12 = Byte.parseByte(s);
} else {
RESAVOID6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_2 = Byte.parseByte(s);
} else {
RESAVOID6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_3 = Byte.parseByte(s);
} else {
RESAVOID6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_4 = Byte.parseByte(s);
} else {
RESAVOID6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_5 = Byte.parseByte(s);
} else {
RESAVOID6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_6 = Byte.parseByte(s);
} else {
RESAVOID6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_7 = Byte.parseByte(s);
} else {
RESAVOID6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_8 = Byte.parseByte(s);
} else {
RESAVOID6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_9 = Byte.parseByte(s);
} else {
RESAVOID6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_1 = Byte.parseByte(s);
} else {
RESAVOID7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_10 = Byte.parseByte(s);
} else {
RESAVOID7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_11 = Byte.parseByte(s);
} else {
RESAVOID7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_12 = Byte.parseByte(s);
} else {
RESAVOID7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_2 = Byte.parseByte(s);
} else {
RESAVOID7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_3 = Byte.parseByte(s);
} else {
RESAVOID7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_4 = Byte.parseByte(s);
} else {
RESAVOID7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_5 = Byte.parseByte(s);
} else {
RESAVOID7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_6 = Byte.parseByte(s);
} else {
RESAVOID7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_7 = Byte.parseByte(s);
} else {
RESAVOID7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_8 = Byte.parseByte(s);
} else {
RESAVOID7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_9 = Byte.parseByte(s);
} else {
RESAVOID7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_1 = Byte.parseByte(s);
} else {
RESAVOID8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_10 = Byte.parseByte(s);
} else {
RESAVOID8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_11 = Byte.parseByte(s);
} else {
RESAVOID8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_12 = Byte.parseByte(s);
} else {
RESAVOID8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_2 = Byte.parseByte(s);
} else {
RESAVOID8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_3 = Byte.parseByte(s);
} else {
RESAVOID8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_4 = Byte.parseByte(s);
} else {
RESAVOID8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_5 = Byte.parseByte(s);
} else {
RESAVOID8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_6 = Byte.parseByte(s);
} else {
RESAVOID8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_7 = Byte.parseByte(s);
} else {
RESAVOID8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_8 = Byte.parseByte(s);
} else {
RESAVOID8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_9 = Byte.parseByte(s);
} else {
RESAVOID8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_1 = Byte.parseByte(s);
} else {
RESAVOID96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_10 = Byte.parseByte(s);
} else {
RESAVOID96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_11 = Byte.parseByte(s);
} else {
RESAVOID96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_12 = Byte.parseByte(s);
} else {
RESAVOID96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_2 = Byte.parseByte(s);
} else {
RESAVOID96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_3 = Byte.parseByte(s);
} else {
RESAVOID96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_4 = Byte.parseByte(s);
} else {
RESAVOID96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_5 = Byte.parseByte(s);
} else {
RESAVOID96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_6 = Byte.parseByte(s);
} else {
RESAVOID96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_7 = Byte.parseByte(s);
} else {
RESAVOID96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_8 = Byte.parseByte(s);
} else {
RESAVOID96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_9 = Byte.parseByte(s);
} else {
RESAVOID96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_1 = Byte.parseByte(s);
} else {
RESAVOID97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_10 = Byte.parseByte(s);
} else {
RESAVOID97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_11 = Byte.parseByte(s);
} else {
RESAVOID97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_12 = Byte.parseByte(s);
} else {
RESAVOID97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_2 = Byte.parseByte(s);
} else {
RESAVOID97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_3 = Byte.parseByte(s);
} else {
RESAVOID97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_4 = Byte.parseByte(s);
} else {
RESAVOID97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_5 = Byte.parseByte(s);
} else {
RESAVOID97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_6 = Byte.parseByte(s);
} else {
RESAVOID97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_7 = Byte.parseByte(s);
} else {
RESAVOID97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_8 = Byte.parseByte(s);
} else {
RESAVOID97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_9 = Byte.parseByte(s);
} else {
RESAVOID97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_1 = Byte.parseByte(s);
} else {
RESAVOID9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_10 = Byte.parseByte(s);
} else {
RESAVOID9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_11 = Byte.parseByte(s);
} else {
RESAVOID9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_12 = Byte.parseByte(s);
} else {
RESAVOID9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_2 = Byte.parseByte(s);
} else {
RESAVOID9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_3 = Byte.parseByte(s);
} else {
RESAVOID9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_4 = Byte.parseByte(s);
} else {
RESAVOID9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_5 = Byte.parseByte(s);
} else {
RESAVOID9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_6 = Byte.parseByte(s);
} else {
RESAVOID9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_7 = Byte.parseByte(s);
} else {
RESAVOID9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_8 = Byte.parseByte(s);
} else {
RESAVOID9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_9 = Byte.parseByte(s);
} else {
RESAVOID9_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_1 = Byte.parseByte(s);
} else {
RESINSULTED1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_10 = Byte.parseByte(s);
} else {
RESINSULTED1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_11 = Byte.parseByte(s);
} else {
RESINSULTED1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_12 = Byte.parseByte(s);
} else {
RESINSULTED1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_2 = Byte.parseByte(s);
} else {
RESINSULTED1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_3 = Byte.parseByte(s);
} else {
RESINSULTED1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_4 = Byte.parseByte(s);
} else {
RESINSULTED1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_5 = Byte.parseByte(s);
} else {
RESINSULTED1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_6 = Byte.parseByte(s);
} else {
RESINSULTED1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_7 = Byte.parseByte(s);
} else {
RESINSULTED1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_8 = Byte.parseByte(s);
} else {
RESINSULTED1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_9 = Byte.parseByte(s);
} else {
RESINSULTED1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_1 = Byte.parseByte(s);
} else {
RESINSULTED2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_10 = Byte.parseByte(s);
} else {
RESINSULTED2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_11 = Byte.parseByte(s);
} else {
RESINSULTED2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_12 = Byte.parseByte(s);
} else {
RESINSULTED2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_2 = Byte.parseByte(s);
} else {
RESINSULTED2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_3 = Byte.parseByte(s);
} else {
RESINSULTED2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_4 = Byte.parseByte(s);
} else {
RESINSULTED2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_5 = Byte.parseByte(s);
} else {
RESINSULTED2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_6 = Byte.parseByte(s);
} else {
RESINSULTED2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_7 = Byte.parseByte(s);
} else {
RESINSULTED2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_8 = Byte.parseByte(s);
} else {
RESINSULTED2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_9 = Byte.parseByte(s);
} else {
RESINSULTED2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_1 = Byte.parseByte(s);
} else {
RESINSULTED3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_10 = Byte.parseByte(s);
} else {
RESINSULTED3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_11 = Byte.parseByte(s);
} else {
RESINSULTED3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_12 = Byte.parseByte(s);
} else {
RESINSULTED3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_2 = Byte.parseByte(s);
} else {
RESINSULTED3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_3 = Byte.parseByte(s);
} else {
RESINSULTED3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_4 = Byte.parseByte(s);
} else {
RESINSULTED3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_5 = Byte.parseByte(s);
} else {
RESINSULTED3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_6 = Byte.parseByte(s);
} else {
RESINSULTED3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_7 = Byte.parseByte(s);
} else {
RESINSULTED3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_8 = Byte.parseByte(s);
} else {
RESINSULTED3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_9 = Byte.parseByte(s);
} else {
RESINSULTED3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_1 = Byte.parseByte(s);
} else {
RESINSULTED4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_10 = Byte.parseByte(s);
} else {
RESINSULTED4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_11 = Byte.parseByte(s);
} else {
RESINSULTED4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_12 = Byte.parseByte(s);
} else {
RESINSULTED4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_2 = Byte.parseByte(s);
} else {
RESINSULTED4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_3 = Byte.parseByte(s);
} else {
RESINSULTED4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_4 = Byte.parseByte(s);
} else {
RESINSULTED4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_5 = Byte.parseByte(s);
} else {
RESINSULTED4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_6 = Byte.parseByte(s);
} else {
RESINSULTED4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_7 = Byte.parseByte(s);
} else {
RESINSULTED4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_8 = Byte.parseByte(s);
} else {
RESINSULTED4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_9 = Byte.parseByte(s);
} else {
RESINSULTED4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_1 = Byte.parseByte(s);
} else {
RESINSULTED5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_10 = Byte.parseByte(s);
} else {
RESINSULTED5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_11 = Byte.parseByte(s);
} else {
RESINSULTED5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_12 = Byte.parseByte(s);
} else {
RESINSULTED5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_2 = Byte.parseByte(s);
} else {
RESINSULTED5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_3 = Byte.parseByte(s);
} else {
RESINSULTED5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_4 = Byte.parseByte(s);
} else {
RESINSULTED5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_5 = Byte.parseByte(s);
} else {
RESINSULTED5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_6 = Byte.parseByte(s);
} else {
RESINSULTED5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_7 = Byte.parseByte(s);
} else {
RESINSULTED5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_8 = Byte.parseByte(s);
} else {
RESINSULTED5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_9 = Byte.parseByte(s);
} else {
RESINSULTED5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_1 = Byte.parseByte(s);
} else {
RESINSULTED6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_10 = Byte.parseByte(s);
} else {
RESINSULTED6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_11 = Byte.parseByte(s);
} else {
RESINSULTED6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_12 = Byte.parseByte(s);
} else {
RESINSULTED6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_2 = Byte.parseByte(s);
} else {
RESINSULTED6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_3 = Byte.parseByte(s);
} else {
RESINSULTED6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_4 = Byte.parseByte(s);
} else {
RESINSULTED6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_5 = Byte.parseByte(s);
} else {
RESINSULTED6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_6 = Byte.parseByte(s);
} else {
RESINSULTED6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_7 = Byte.parseByte(s);
} else {
RESINSULTED6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_8 = Byte.parseByte(s);
} else {
RESINSULTED6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_9 = Byte.parseByte(s);
} else {
RESINSULTED6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_1 = Byte.parseByte(s);
} else {
RESINSULTED7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_10 = Byte.parseByte(s);
} else {
RESINSULTED7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_11 = Byte.parseByte(s);
} else {
RESINSULTED7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_12 = Byte.parseByte(s);
} else {
RESINSULTED7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_2 = Byte.parseByte(s);
} else {
RESINSULTED7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_3 = Byte.parseByte(s);
} else {
RESINSULTED7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_4 = Byte.parseByte(s);
} else {
RESINSULTED7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_5 = Byte.parseByte(s);
} else {
RESINSULTED7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_6 = Byte.parseByte(s);
} else {
RESINSULTED7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_7 = Byte.parseByte(s);
} else {
RESINSULTED7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_8 = Byte.parseByte(s);
} else {
RESINSULTED7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_9 = Byte.parseByte(s);
} else {
RESINSULTED7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_1 = Byte.parseByte(s);
} else {
RESINSULTED8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_10 = Byte.parseByte(s);
} else {
RESINSULTED8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_11 = Byte.parseByte(s);
} else {
RESINSULTED8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_12 = Byte.parseByte(s);
} else {
RESINSULTED8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_2 = Byte.parseByte(s);
} else {
RESINSULTED8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_3 = Byte.parseByte(s);
} else {
RESINSULTED8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_4 = Byte.parseByte(s);
} else {
RESINSULTED8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_5 = Byte.parseByte(s);
} else {
RESINSULTED8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_6 = Byte.parseByte(s);
} else {
RESINSULTED8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_7 = Byte.parseByte(s);
} else {
RESINSULTED8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_8 = Byte.parseByte(s);
} else {
RESINSULTED8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_9 = Byte.parseByte(s);
} else {
RESINSULTED8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_1 = Byte.parseByte(s);
} else {
RESINSULTED96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_10 = Byte.parseByte(s);
} else {
RESINSULTED96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_11 = Byte.parseByte(s);
} else {
RESINSULTED96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_12 = Byte.parseByte(s);
} else {
RESINSULTED96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_2 = Byte.parseByte(s);
} else {
RESINSULTED96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_3 = Byte.parseByte(s);
} else {
RESINSULTED96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_4 = Byte.parseByte(s);
} else {
RESINSULTED96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_5 = Byte.parseByte(s);
} else {
RESINSULTED96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_6 = Byte.parseByte(s);
} else {
RESINSULTED96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_7 = Byte.parseByte(s);
} else {
RESINSULTED96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_8 = Byte.parseByte(s);
} else {
RESINSULTED96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_9 = Byte.parseByte(s);
} else {
RESINSULTED96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_1 = Byte.parseByte(s);
} else {
RESINSULTED97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_10 = Byte.parseByte(s);
} else {
RESINSULTED97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_11 = Byte.parseByte(s);
} else {
RESINSULTED97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_12 = Byte.parseByte(s);
} else {
RESINSULTED97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_2 = Byte.parseByte(s);
} else {
RESINSULTED97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_3 = Byte.parseByte(s);
} else {
RESINSULTED97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_4 = Byte.parseByte(s);
} else {
RESINSULTED97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_5 = Byte.parseByte(s);
} else {
RESINSULTED97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_6 = Byte.parseByte(s);
} else {
RESINSULTED97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_7 = Byte.parseByte(s);
} else {
RESINSULTED97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_8 = Byte.parseByte(s);
} else {
RESINSULTED97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_9 = Byte.parseByte(s);
} else {
RESINSULTED97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_1 = Byte.parseByte(s);
} else {
RESINSULTED9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_10 = Byte.parseByte(s);
} else {
RESINSULTED9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_11 = Byte.parseByte(s);
} else {
RESINSULTED9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_12 = Byte.parseByte(s);
} else {
RESINSULTED9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_2 = Byte.parseByte(s);
} else {
RESINSULTED9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_3 = Byte.parseByte(s);
} else {
RESINSULTED9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_4 = Byte.parseByte(s);
} else {
RESINSULTED9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_5 = Byte.parseByte(s);
} else {
RESINSULTED9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_6 = Byte.parseByte(s);
} else {
RESINSULTED9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_7 = Byte.parseByte(s);
} else {
RESINSULTED9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_8 = Byte.parseByte(s);
} else {
RESINSULTED9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_9 = Byte.parseByte(s);
} else {
RESINSULTED9_9 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY1(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY1 = Byte.parseByte(s);
} else {
RESJOBDENY1 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY2(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY2 = Byte.parseByte(s);
} else {
RESJOBDENY2 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY3(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY3 = Byte.parseByte(s);
} else {
RESJOBDENY3 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY4(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY4 = Byte.parseByte(s);
} else {
RESJOBDENY4 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY5(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY5 = Byte.parseByte(s);
} else {
RESJOBDENY5 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY6(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY6 = Byte.parseByte(s);
} else {
RESJOBDENY6 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY7(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY7 = Byte.parseByte(s);
} else {
RESJOBDENY7 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY8(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY8 = Byte.parseByte(s);
} else {
RESJOBDENY8 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY9(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY9 = Byte.parseByte(s);
} else {
RESJOBDENY9 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY96(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY96 = Byte.parseByte(s);
} else {
RESJOBDENY96 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY97(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY97 = Byte.parseByte(s);
} else {
RESJOBDENY97 = Byte.MIN_VALUE;
}
}

protected final void initRESPF16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16 = false;
} else {
RESPF16 = true;
}
}
}

protected final void initRESPF16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16_DV = false;
} else {
RESPF16_DV = true;
}
}
}

protected final void initRESPM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16 = false;
} else {
RESPM16 = true;
}
}
}

protected final void initRESPM16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16_DV = false;
} else {
RESPM16_DV = true;
}
}
}

protected final void initRESUNSAFE1_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_1 = Byte.parseByte(s);
} else {
RESUNSAFE1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_10 = Byte.parseByte(s);
} else {
RESUNSAFE1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_11 = Byte.parseByte(s);
} else {
RESUNSAFE1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_12 = Byte.parseByte(s);
} else {
RESUNSAFE1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_2 = Byte.parseByte(s);
} else {
RESUNSAFE1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_3 = Byte.parseByte(s);
} else {
RESUNSAFE1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_4 = Byte.parseByte(s);
} else {
RESUNSAFE1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_5 = Byte.parseByte(s);
} else {
RESUNSAFE1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_6 = Byte.parseByte(s);
} else {
RESUNSAFE1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_7 = Byte.parseByte(s);
} else {
RESUNSAFE1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_8 = Byte.parseByte(s);
} else {
RESUNSAFE1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_9 = Byte.parseByte(s);
} else {
RESUNSAFE1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_1 = Byte.parseByte(s);
} else {
RESUNSAFE2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_10 = Byte.parseByte(s);
} else {
RESUNSAFE2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_11 = Byte.parseByte(s);
} else {
RESUNSAFE2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_12 = Byte.parseByte(s);
} else {
RESUNSAFE2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_2 = Byte.parseByte(s);
} else {
RESUNSAFE2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_3 = Byte.parseByte(s);
} else {
RESUNSAFE2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_4 = Byte.parseByte(s);
} else {
RESUNSAFE2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_5 = Byte.parseByte(s);
} else {
RESUNSAFE2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_6 = Byte.parseByte(s);
} else {
RESUNSAFE2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_7 = Byte.parseByte(s);
} else {
RESUNSAFE2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_8 = Byte.parseByte(s);
} else {
RESUNSAFE2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_9 = Byte.parseByte(s);
} else {
RESUNSAFE2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_1 = Byte.parseByte(s);
} else {
RESUNSAFE3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_10 = Byte.parseByte(s);
} else {
RESUNSAFE3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_11 = Byte.parseByte(s);
} else {
RESUNSAFE3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_12 = Byte.parseByte(s);
} else {
RESUNSAFE3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_2 = Byte.parseByte(s);
} else {
RESUNSAFE3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_3 = Byte.parseByte(s);
} else {
RESUNSAFE3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_4 = Byte.parseByte(s);
} else {
RESUNSAFE3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_5 = Byte.parseByte(s);
} else {
RESUNSAFE3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_6 = Byte.parseByte(s);
} else {
RESUNSAFE3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_7 = Byte.parseByte(s);
} else {
RESUNSAFE3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_8 = Byte.parseByte(s);
} else {
RESUNSAFE3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_9 = Byte.parseByte(s);
} else {
RESUNSAFE3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_1 = Byte.parseByte(s);
} else {
RESUNSAFE4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_10 = Byte.parseByte(s);
} else {
RESUNSAFE4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_11 = Byte.parseByte(s);
} else {
RESUNSAFE4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_12 = Byte.parseByte(s);
} else {
RESUNSAFE4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_2 = Byte.parseByte(s);
} else {
RESUNSAFE4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_3 = Byte.parseByte(s);
} else {
RESUNSAFE4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_4 = Byte.parseByte(s);
} else {
RESUNSAFE4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_5 = Byte.parseByte(s);
} else {
RESUNSAFE4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_6 = Byte.parseByte(s);
} else {
RESUNSAFE4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_7 = Byte.parseByte(s);
} else {
RESUNSAFE4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_8 = Byte.parseByte(s);
} else {
RESUNSAFE4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_9 = Byte.parseByte(s);
} else {
RESUNSAFE4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_1 = Byte.parseByte(s);
} else {
RESUNSAFE5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_10 = Byte.parseByte(s);
} else {
RESUNSAFE5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_11 = Byte.parseByte(s);
} else {
RESUNSAFE5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_12 = Byte.parseByte(s);
} else {
RESUNSAFE5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_2 = Byte.parseByte(s);
} else {
RESUNSAFE5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_3 = Byte.parseByte(s);
} else {
RESUNSAFE5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_4 = Byte.parseByte(s);
} else {
RESUNSAFE5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_5 = Byte.parseByte(s);
} else {
RESUNSAFE5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_6 = Byte.parseByte(s);
} else {
RESUNSAFE5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_7 = Byte.parseByte(s);
} else {
RESUNSAFE5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_8 = Byte.parseByte(s);
} else {
RESUNSAFE5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_9 = Byte.parseByte(s);
} else {
RESUNSAFE5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_1 = Byte.parseByte(s);
} else {
RESUNSAFE6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_10 = Byte.parseByte(s);
} else {
RESUNSAFE6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_11 = Byte.parseByte(s);
} else {
RESUNSAFE6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_12 = Byte.parseByte(s);
} else {
RESUNSAFE6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_2 = Byte.parseByte(s);
} else {
RESUNSAFE6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_3 = Byte.parseByte(s);
} else {
RESUNSAFE6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_4 = Byte.parseByte(s);
} else {
RESUNSAFE6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_5 = Byte.parseByte(s);
} else {
RESUNSAFE6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_6 = Byte.parseByte(s);
} else {
RESUNSAFE6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_7 = Byte.parseByte(s);
} else {
RESUNSAFE6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_8 = Byte.parseByte(s);
} else {
RESUNSAFE6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_9 = Byte.parseByte(s);
} else {
RESUNSAFE6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_1 = Byte.parseByte(s);
} else {
RESUNSAFE7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_10 = Byte.parseByte(s);
} else {
RESUNSAFE7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_11 = Byte.parseByte(s);
} else {
RESUNSAFE7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_12 = Byte.parseByte(s);
} else {
RESUNSAFE7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_2 = Byte.parseByte(s);
} else {
RESUNSAFE7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_3 = Byte.parseByte(s);
} else {
RESUNSAFE7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_4 = Byte.parseByte(s);
} else {
RESUNSAFE7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_5 = Byte.parseByte(s);
} else {
RESUNSAFE7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_6 = Byte.parseByte(s);
} else {
RESUNSAFE7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_7 = Byte.parseByte(s);
} else {
RESUNSAFE7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_8 = Byte.parseByte(s);
} else {
RESUNSAFE7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_9 = Byte.parseByte(s);
} else {
RESUNSAFE7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_1 = Byte.parseByte(s);
} else {
RESUNSAFE8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_10 = Byte.parseByte(s);
} else {
RESUNSAFE8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_11 = Byte.parseByte(s);
} else {
RESUNSAFE8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_12 = Byte.parseByte(s);
} else {
RESUNSAFE8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_2 = Byte.parseByte(s);
} else {
RESUNSAFE8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_3 = Byte.parseByte(s);
} else {
RESUNSAFE8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_4 = Byte.parseByte(s);
} else {
RESUNSAFE8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_5 = Byte.parseByte(s);
} else {
RESUNSAFE8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_6 = Byte.parseByte(s);
} else {
RESUNSAFE8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_7 = Byte.parseByte(s);
} else {
RESUNSAFE8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_8 = Byte.parseByte(s);
} else {
RESUNSAFE8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_9 = Byte.parseByte(s);
} else {
RESUNSAFE8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_1 = Byte.parseByte(s);
} else {
RESUNSAFE96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_10 = Byte.parseByte(s);
} else {
RESUNSAFE96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_11 = Byte.parseByte(s);
} else {
RESUNSAFE96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_12 = Byte.parseByte(s);
} else {
RESUNSAFE96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_2 = Byte.parseByte(s);
} else {
RESUNSAFE96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_3 = Byte.parseByte(s);
} else {
RESUNSAFE96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_4 = Byte.parseByte(s);
} else {
RESUNSAFE96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_5 = Byte.parseByte(s);
} else {
RESUNSAFE96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_6 = Byte.parseByte(s);
} else {
RESUNSAFE96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_7 = Byte.parseByte(s);
} else {
RESUNSAFE96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_8 = Byte.parseByte(s);
} else {
RESUNSAFE96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_9 = Byte.parseByte(s);
} else {
RESUNSAFE96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_1 = Byte.parseByte(s);
} else {
RESUNSAFE97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_10 = Byte.parseByte(s);
} else {
RESUNSAFE97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_11 = Byte.parseByte(s);
} else {
RESUNSAFE97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_12 = Byte.parseByte(s);
} else {
RESUNSAFE97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_2 = Byte.parseByte(s);
} else {
RESUNSAFE97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_3 = Byte.parseByte(s);
} else {
RESUNSAFE97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_4 = Byte.parseByte(s);
} else {
RESUNSAFE97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_5 = Byte.parseByte(s);
} else {
RESUNSAFE97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_6 = Byte.parseByte(s);
} else {
RESUNSAFE97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_7 = Byte.parseByte(s);
} else {
RESUNSAFE97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_8 = Byte.parseByte(s);
} else {
RESUNSAFE97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_9 = Byte.parseByte(s);
} else {
RESUNSAFE97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_1 = Byte.parseByte(s);
} else {
RESUNSAFE9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_10 = Byte.parseByte(s);
} else {
RESUNSAFE9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_11 = Byte.parseByte(s);
} else {
RESUNSAFE9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_12 = Byte.parseByte(s);
} else {
RESUNSAFE9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_2 = Byte.parseByte(s);
} else {
RESUNSAFE9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_3 = Byte.parseByte(s);
} else {
RESUNSAFE9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_4 = Byte.parseByte(s);
} else {
RESUNSAFE9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_5 = Byte.parseByte(s);
} else {
RESUNSAFE9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_6 = Byte.parseByte(s);
} else {
RESUNSAFE9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_7 = Byte.parseByte(s);
} else {
RESUNSAFE9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_8 = Byte.parseByte(s);
} else {
RESUNSAFE9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_9 = Byte.parseByte(s);
} else {
RESUNSAFE9_9 = Byte.MIN_VALUE;
}
}

protected final void initRETAMT(String s) {
if (!s.trim().isEmpty()) {
RETAMT = Byte.parseByte(s);
} else {
RETAMT = Byte.MIN_VALUE;
}
}

protected final void initRETCHK(String s) {
if (!s.trim().isEmpty()) {
RETCHK = Byte.parseByte(s);
} else {
RETCHK = Byte.MIN_VALUE;
}
}

protected final void initRETSUF(String s) {
if (!s.trim().isEmpty()) {
RETSUF = Byte.parseByte(s);
} else {
RETSUF = Byte.MIN_VALUE;
}
}

protected final void initRHLAND_CODE(String s) {
if (!s.trim().isEmpty()) {
RHLAND_CODE = Byte.parseByte(s);
} else {
RHLAND_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHMOB_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHMOB_CODE = Byte.parseByte(s);
} else {
RPHMOB_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHWRK_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHWRK_CODE = Byte.parseByte(s);
} else {
RPHWRK_CODE = Byte.MIN_VALUE;
}
}

protected final void initRTCON1(String s) {
if (!s.trim().isEmpty()) {
RTCON1 = Byte.parseByte(s);
} else {
RTCON1 = Byte.MIN_VALUE;
}
}

protected final void initRTCON2(String s) {
if (!s.trim().isEmpty()) {
RTCON2 = Byte.parseByte(s);
} else {
RTCON2 = Byte.MIN_VALUE;
}
}

protected final void initRTCON3(String s) {
if (!s.trim().isEmpty()) {
RTCON3 = Byte.parseByte(s);
} else {
RTCON3 = Byte.MIN_VALUE;
}
}

protected final void initRTCON4(String s) {
if (!s.trim().isEmpty()) {
RTCON4 = Byte.parseByte(s);
} else {
RTCON4 = Byte.MIN_VALUE;
}
}

protected final void initRTEXPJB(String s) {
if (!s.trim().isEmpty()) {
RTEXPJB = Byte.parseByte(s);
} else {
RTEXPJB = Byte.MIN_VALUE;
}
}

protected final void initRTFND1(String s) {
if (!s.trim().isEmpty()) {
RTFND1 = Byte.parseByte(s);
} else {
RTFND1 = Byte.MIN_VALUE;
}
}

protected final void initRTFND10(String s) {
if (!s.trim().isEmpty()) {
RTFND10 = Byte.parseByte(s);
} else {
RTFND10 = Byte.MIN_VALUE;
}
}

protected final void initRTFND2(String s) {
if (!s.trim().isEmpty()) {
RTFND2 = Byte.parseByte(s);
} else {
RTFND2 = Byte.MIN_VALUE;
}
}

protected final void initRTFND3(String s) {
if (!s.trim().isEmpty()) {
RTFND3 = Byte.parseByte(s);
} else {
RTFND3 = Byte.MIN_VALUE;
}
}

protected final void initRTFND4(String s) {
if (!s.trim().isEmpty()) {
RTFND4 = Byte.parseByte(s);
} else {
RTFND4 = Byte.MIN_VALUE;
}
}

protected final void initRTFND5(String s) {
if (!s.trim().isEmpty()) {
RTFND5 = Byte.parseByte(s);
} else {
RTFND5 = Byte.MIN_VALUE;
}
}

protected final void initRTFND6(String s) {
if (!s.trim().isEmpty()) {
RTFND6 = Byte.parseByte(s);
} else {
RTFND6 = Byte.MIN_VALUE;
}
}

protected final void initRTFND7(String s) {
if (!s.trim().isEmpty()) {
RTFND7 = Byte.parseByte(s);
} else {
RTFND7 = Byte.MIN_VALUE;
}
}

protected final void initRTFND8(String s) {
if (!s.trim().isEmpty()) {
RTFND8 = Byte.parseByte(s);
} else {
RTFND8 = Byte.MIN_VALUE;
}
}

protected final void initRTFND9(String s) {
if (!s.trim().isEmpty()) {
RTFND9 = Byte.parseByte(s);
} else {
RTFND9 = Byte.MIN_VALUE;
}
}

protected final void initRTFND96(String s) {
if (!s.trim().isEmpty()) {
RTFND96 = Byte.parseByte(s);
} else {
RTFND96 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO1(String s) {
if (!s.trim().isEmpty()) {
RTPRO1 = Byte.parseByte(s);
} else {
RTPRO1 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO2(String s) {
if (!s.trim().isEmpty()) {
RTPRO2 = Byte.parseByte(s);
} else {
RTPRO2 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO3(String s) {
if (!s.trim().isEmpty()) {
RTPRO3 = Byte.parseByte(s);
} else {
RTPRO3 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO4(String s) {
if (!s.trim().isEmpty()) {
RTPRO4 = Byte.parseByte(s);
} else {
RTPRO4 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO5(String s) {
if (!s.trim().isEmpty()) {
RTPRO5 = Byte.parseByte(s);
} else {
RTPRO5 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO6(String s) {
if (!s.trim().isEmpty()) {
RTPRO6 = Byte.parseByte(s);
} else {
RTPRO6 = Byte.MIN_VALUE;
}
}

protected final void initRULESKID(String s) {
if (!s.trim().isEmpty()) {
RULESKID = Byte.parseByte(s);
} else {
RULESKID = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB = Byte.parseByte(s);
} else {
SAMEJOB = Byte.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSCAC(String s) {
if (!s.trim().isEmpty()) {
SCAC = Byte.parseByte(s);
} else {
SCAC = Byte.MIN_VALUE;
}
}

protected final void initSCAGE1DRNK(String s) {
if (!s.trim().isEmpty()) {
SCAGE1DRNK = Byte.parseByte(s);
} else {
SCAGE1DRNK = Byte.MIN_VALUE;
}
}

protected final void initSCALCL7D(String s) {
if (!s.trim().isEmpty()) {
SCALCL7D = Byte.parseByte(s);
} else {
SCALCL7D = Byte.MIN_VALUE;
}
}

protected final void initSCDASCOH_DV(String s) {
if (!s.trim().isEmpty()) {
SCDASCOH_DV = Byte.parseByte(s);
} else {
SCDASCOH_DV = Byte.MIN_VALUE;
}
}

protected final void initSCDASSAT_DV(String s) {
if (!s.trim().isEmpty()) {
SCDASSAT_DV = Byte.parseByte(s);
} else {
SCDASSAT_DV = Byte.MIN_VALUE;
}
}

protected final void initSCEVERDRNK(String s) {
if (!s.trim().isEmpty()) {
SCEVERDRNK = Byte.parseByte(s);
} else {
SCEVERDRNK = Byte.MIN_VALUE;
}
}

protected final void initSCFALCDRNK(String s) {
if (!s.trim().isEmpty()) {
SCFALCDRNK = Byte.parseByte(s);
} else {
SCFALCDRNK = Byte.MIN_VALUE;
}
}

protected final void initSCFANNOY(String s) {
if (!s.trim().isEmpty()) {
SCFANNOY = Byte.parseByte(s);
} else {
SCFANNOY = Byte.MIN_VALUE;
}
}

protected final void initSCFCRITIC(String s) {
if (!s.trim().isEmpty()) {
SCFCRITIC = Byte.parseByte(s);
} else {
SCFCRITIC = Byte.MIN_VALUE;
}
}

protected final void initSCFLAG_DV(String s) {
if (!s.trim().isEmpty()) {
SCFLAG_DV = Byte.parseByte(s);
} else {
SCFLAG_DV = Byte.MIN_VALUE;
}
}

protected final void initSCFLETDWN(String s) {
if (!s.trim().isEmpty()) {
SCFLETDWN = Byte.parseByte(s);
} else {
SCFLETDWN = Byte.MIN_VALUE;
}
}

protected final void initSCFOPENUP(String s) {
if (!s.trim().isEmpty()) {
SCFOPENUP = Byte.parseByte(s);
} else {
SCFOPENUP = Byte.MIN_VALUE;
}
}

protected final void initSCFRELY(String s) {
if (!s.trim().isEmpty()) {
SCFRELY = Byte.parseByte(s);
} else {
SCFRELY = Byte.MIN_VALUE;
}
}

protected final void initSCFRENDANY(String s) {
if (!s.trim().isEmpty()) {
SCFRENDANY = Byte.parseByte(s);
} else {
SCFRENDANY = Byte.MIN_VALUE;
}
}

protected final void initSCFUNDSTND(String s) {
if (!s.trim().isEmpty()) {
SCFUNDSTND = Byte.parseByte(s);
} else {
SCFUNDSTND = Byte.MIN_VALUE;
}
}

protected final void initSCHLLOC(String s) {
if (!s.trim().isEmpty()) {
SCHLLOC = Byte.parseByte(s);
} else {
SCHLLOC = Byte.MIN_VALUE;
}
}

protected final void initSCHOK(String s) {
if (!s.trim().isEmpty()) {
SCHOK = Byte.parseByte(s);
} else {
SCHOK = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY1(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY1 = Byte.parseByte(s);
} else {
SCHOOLCNTRY1 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY2(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY2 = Byte.parseByte(s);
} else {
SCHOOLCNTRY2 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY3(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY3 = Byte.parseByte(s);
} else {
SCHOOLCNTRY3 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY4(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY4 = Byte.parseByte(s);
} else {
SCHOOLCNTRY4 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY5(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY5 = Byte.parseByte(s);
} else {
SCHOOLCNTRY5 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT1(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT1 = Byte.parseByte(s);
} else {
SCLFSAT1 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT2(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT2 = Byte.parseByte(s);
} else {
SCLFSAT2 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT7(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT7 = Byte.parseByte(s);
} else {
SCLFSAT7 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSATO(String s) {
if (!s.trim().isEmpty()) {
SCLFSATO = Byte.parseByte(s);
} else {
SCLFSATO = Byte.MIN_VALUE;
}
}

protected final void initSCNALCL7D(String s) {
if (!s.trim().isEmpty()) {
SCNALCL7D = Byte.parseByte(s);
} else {
SCNALCL7D = Byte.MIN_VALUE;
}
}

protected final void initSCNALCPINT(String s) {
if (!s.trim().isEmpty()) {
SCNALCPINT = Double.parseDouble(s);
} else {
SCNALCPINT = Double.NaN;
}
}

protected final void initSCNALCPOPS(String s) {
if (!s.trim().isEmpty()) {
SCNALCPOPS = Double.parseDouble(s);
} else {
SCNALCPOPS = Double.NaN;
}
}

protected final void initSCNALCSHOT(String s) {
if (!s.trim().isEmpty()) {
SCNALCSHOT = Double.parseDouble(s);
} else {
SCNALCSHOT = Double.NaN;
}
}

protected final void initSCNALCWINE(String s) {
if (!s.trim().isEmpty()) {
SCNALCWINE = Double.parseDouble(s);
} else {
SCNALCWINE = Double.NaN;
}
}

protected final void initSCOTVOT1(String s) {
if (!s.trim().isEmpty()) {
SCOTVOT1 = Byte.parseByte(s);
} else {
SCOTVOT1 = Byte.MIN_VALUE;
}
}

protected final void initSCOTVOT2(String s) {
if (!s.trim().isEmpty()) {
SCOTVOT2 = Byte.parseByte(s);
} else {
SCOTVOT2 = Byte.MIN_VALUE;
}
}

protected final void initSCOTVOT3(String s) {
if (!s.trim().isEmpty()) {
SCOTVOT3 = Byte.parseByte(s);
} else {
SCOTVOT3 = Byte.MIN_VALUE;
}
}

protected final void initSCOTVOT4(String s) {
if (!s.trim().isEmpty()) {
SCOTVOT4 = Byte.parseByte(s);
} else {
SCOTVOT4 = Byte.MIN_VALUE;
}
}

protected final void initSCPANNOY(String s) {
if (!s.trim().isEmpty()) {
SCPANNOY = Byte.parseByte(s);
} else {
SCPANNOY = Byte.MIN_VALUE;
}
}

protected final void initSCPAROUTINT(String s) {
if (!s.trim().isEmpty()) {
SCPAROUTINT = Byte.parseByte(s);
} else {
SCPAROUTINT = Byte.MIN_VALUE;
}
}

protected final void initSCPCRITIC(String s) {
if (!s.trim().isEmpty()) {
SCPCRITIC = Byte.parseByte(s);
} else {
SCPCRITIC = Byte.MIN_VALUE;
}
}

protected final void initSCPLETDWN(String s) {
if (!s.trim().isEmpty()) {
SCPLETDWN = Byte.parseByte(s);
} else {
SCPLETDWN = Byte.MIN_VALUE;
}
}

protected final void initSCPOPENUP(String s) {
if (!s.trim().isEmpty()) {
SCPOPENUP = Byte.parseByte(s);
} else {
SCPOPENUP = Byte.MIN_VALUE;
}
}

protected final void initSCPRELY(String s) {
if (!s.trim().isEmpty()) {
SCPRELY = Byte.parseByte(s);
} else {
SCPRELY = Byte.MIN_VALUE;
}
}

protected final void initSCPUNDSTND(String s) {
if (!s.trim().isEmpty()) {
SCPUNDSTND = Byte.parseByte(s);
} else {
SCPUNDSTND = Byte.MIN_VALUE;
}
}

protected final void initSCRANNOY(String s) {
if (!s.trim().isEmpty()) {
SCRANNOY = Byte.parseByte(s);
} else {
SCRANNOY = Byte.MIN_VALUE;
}
}

protected final void initSCRCRITIC(String s) {
if (!s.trim().isEmpty()) {
SCRCRITIC = Byte.parseByte(s);
} else {
SCRCRITIC = Byte.MIN_VALUE;
}
}

protected final void initSCRELANY(String s) {
if (!s.trim().isEmpty()) {
SCRELANY = Byte.parseByte(s);
} else {
SCRELANY = Byte.MIN_VALUE;
}
}

protected final void initSCRELHAPPY(String s) {
if (!s.trim().isEmpty()) {
SCRELHAPPY = Byte.parseByte(s);
} else {
SCRELHAPPY = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARAR(String s) {
if (!s.trim().isEmpty()) {
SCRELPARAR = Byte.parseByte(s);
} else {
SCRELPARAR = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARCD(String s) {
if (!s.trim().isEmpty()) {
SCRELPARCD = Byte.parseByte(s);
} else {
SCRELPARCD = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARDS(String s) {
if (!s.trim().isEmpty()) {
SCRELPARDS = Byte.parseByte(s);
} else {
SCRELPARDS = Byte.MIN_VALUE;
}
}

protected final void initSCRELPAREI(String s) {
if (!s.trim().isEmpty()) {
SCRELPAREI = Byte.parseByte(s);
} else {
SCRELPAREI = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARIR(String s) {
if (!s.trim().isEmpty()) {
SCRELPARIR = Byte.parseByte(s);
} else {
SCRELPARIR = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARKS(String s) {
if (!s.trim().isEmpty()) {
SCRELPARKS = Byte.parseByte(s);
} else {
SCRELPARKS = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARRG(String s) {
if (!s.trim().isEmpty()) {
SCRELPARRG = Byte.parseByte(s);
} else {
SCRELPARRG = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARWT(String s) {
if (!s.trim().isEmpty()) {
SCRELPARWT = Byte.parseByte(s);
} else {
SCRELPARWT = Byte.MIN_VALUE;
}
}

protected final void initSCRF1(String s) {
if (!s.trim().isEmpty()) {
SCRF1 = Byte.parseByte(s);
} else {
SCRF1 = Byte.MIN_VALUE;
}
}

protected final void initSCRF2(String s) {
if (!s.trim().isEmpty()) {
SCRF2 = Byte.parseByte(s);
} else {
SCRF2 = Byte.MIN_VALUE;
}
}

protected final void initSCRF3(String s) {
if (!s.trim().isEmpty()) {
SCRF3 = Byte.parseByte(s);
} else {
SCRF3 = Byte.MIN_VALUE;
}
}

protected final void initSCRF4(String s) {
if (!s.trim().isEmpty()) {
SCRF4 = Byte.parseByte(s);
} else {
SCRF4 = Byte.MIN_VALUE;
}
}

protected final void initSCRF5(String s) {
if (!s.trim().isEmpty()) {
SCRF5 = Byte.parseByte(s);
} else {
SCRF5 = Byte.MIN_VALUE;
}
}

protected final void initSCRF6(String s) {
if (!s.trim().isEmpty()) {
SCRF6 = Byte.parseByte(s);
} else {
SCRF6 = Byte.MIN_VALUE;
}
}

protected final void initSCRF97(String s) {
if (!s.trim().isEmpty()) {
SCRF97 = Byte.parseByte(s);
} else {
SCRF97 = Byte.MIN_VALUE;
}
}

protected final void initSCRLETDWN(String s) {
if (!s.trim().isEmpty()) {
SCRLETDWN = Byte.parseByte(s);
} else {
SCRLETDWN = Byte.MIN_VALUE;
}
}

protected final void initSCROPENUP(String s) {
if (!s.trim().isEmpty()) {
SCROPENUP = Byte.parseByte(s);
} else {
SCROPENUP = Byte.MIN_VALUE;
}
}

protected final void initSCRRELY(String s) {
if (!s.trim().isEmpty()) {
SCRRELY = Byte.parseByte(s);
} else {
SCRRELY = Byte.MIN_VALUE;
}
}

protected final void initSCRUNDSTND(String s) {
if (!s.trim().isEmpty()) {
SCRUNDSTND = Byte.parseByte(s);
} else {
SCRUNDSTND = Byte.MIN_VALUE;
}
}

protected final void initSCRX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCRX_CODE = Byte.parseByte(s);
} else {
SCRX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSCSF1(String s) {
if (!s.trim().isEmpty()) {
SCSF1 = Byte.parseByte(s);
} else {
SCSF1 = Byte.MIN_VALUE;
}
}

protected final void initSCSF2A(String s) {
if (!s.trim().isEmpty()) {
SCSF2A = Byte.parseByte(s);
} else {
SCSF2A = Byte.MIN_VALUE;
}
}

protected final void initSCSF2B(String s) {
if (!s.trim().isEmpty()) {
SCSF2B = Byte.parseByte(s);
} else {
SCSF2B = Byte.MIN_VALUE;
}
}

protected final void initSCSF3A(String s) {
if (!s.trim().isEmpty()) {
SCSF3A = Byte.parseByte(s);
} else {
SCSF3A = Byte.MIN_VALUE;
}
}

protected final void initSCSF3B(String s) {
if (!s.trim().isEmpty()) {
SCSF3B = Byte.parseByte(s);
} else {
SCSF3B = Byte.MIN_VALUE;
}
}

protected final void initSCSF4A(String s) {
if (!s.trim().isEmpty()) {
SCSF4A = Byte.parseByte(s);
} else {
SCSF4A = Byte.MIN_VALUE;
}
}

protected final void initSCSF4B(String s) {
if (!s.trim().isEmpty()) {
SCSF4B = Byte.parseByte(s);
} else {
SCSF4B = Byte.MIN_VALUE;
}
}

protected final void initSCSF5(String s) {
if (!s.trim().isEmpty()) {
SCSF5 = Byte.parseByte(s);
} else {
SCSF5 = Byte.MIN_VALUE;
}
}

protected final void initSCSF6A(String s) {
if (!s.trim().isEmpty()) {
SCSF6A = Byte.parseByte(s);
} else {
SCSF6A = Byte.MIN_VALUE;
}
}

protected final void initSCSF6B(String s) {
if (!s.trim().isEmpty()) {
SCSF6B = Byte.parseByte(s);
} else {
SCSF6B = Byte.MIN_VALUE;
}
}

protected final void initSCSF6C(String s) {
if (!s.trim().isEmpty()) {
SCSF6C = Byte.parseByte(s);
} else {
SCSF6C = Byte.MIN_VALUE;
}
}

protected final void initSCSF7(String s) {
if (!s.trim().isEmpty()) {
SCSF7 = Byte.parseByte(s);
} else {
SCSF7 = Byte.MIN_VALUE;
}
}

protected final void initSCSSUP1(String s) {
if (!s.trim().isEmpty()) {
SCSSUP1 = Byte.parseByte(s);
} else {
SCSSUP1 = Byte.MIN_VALUE;
}
}

protected final void initSCSSUPR2R(String s) {
if (!s.trim().isEmpty()) {
SCSSUPR2R = Byte.parseByte(s);
} else {
SCSSUPR2R = Byte.MIN_VALUE;
}
}

protected final void initSCUN1(String s) {
if (!s.trim().isEmpty()) {
SCUN1 = Byte.parseByte(s);
} else {
SCUN1 = Byte.MIN_VALUE;
}
}

protected final void initSCUN2(String s) {
if (!s.trim().isEmpty()) {
SCUN2 = Byte.parseByte(s);
} else {
SCUN2 = Byte.MIN_VALUE;
}
}

protected final void initSCUN3(String s) {
if (!s.trim().isEmpty()) {
SCUN3 = Byte.parseByte(s);
} else {
SCUN3 = Byte.MIN_VALUE;
}
}

protected final void initSCUN97(String s) {
if (!s.trim().isEmpty()) {
SCUN97 = Byte.parseByte(s);
} else {
SCUN97 = Byte.MIN_VALUE;
}
}

protected final void initSCUX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCUX_CODE = Byte.parseByte(s);
} else {
SCUX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUAGE(String s) {
if (!s.trim().isEmpty()) {
SCWHORUAGE = Byte.parseByte(s);
} else {
SCWHORUAGE = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUEDU(String s) {
if (!s.trim().isEmpty()) {
SCWHORUEDU = Byte.parseByte(s);
} else {
SCWHORUEDU = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUFAM(String s) {
if (!s.trim().isEmpty()) {
SCWHORUFAM = Byte.parseByte(s);
} else {
SCWHORUFAM = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUPOL(String s) {
if (!s.trim().isEmpty()) {
SCWHORUPOL = Byte.parseByte(s);
} else {
SCWHORUPOL = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUPRO(String s) {
if (!s.trim().isEmpty()) {
SCWHORUPRO = Byte.parseByte(s);
} else {
SCWHORUPRO = Byte.MIN_VALUE;
}
}

protected final void initSCWHORURAC(String s) {
if (!s.trim().isEmpty()) {
SCWHORURAC = Byte.parseByte(s);
} else {
SCWHORURAC = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUSEX(String s) {
if (!s.trim().isEmpty()) {
SCWHORUSEX = Byte.parseByte(s);
} else {
SCWHORUSEX = Byte.MIN_VALUE;
}
}

protected final void initSE1(String s) {
if (!s.trim().isEmpty()) {
SE1 = Byte.parseByte(s);
} else {
SE1 = Byte.MIN_VALUE;
}
}

protected final void initSE10(String s) {
if (!s.trim().isEmpty()) {
SE10 = Byte.parseByte(s);
} else {
SE10 = Byte.MIN_VALUE;
}
}

protected final void initSE2(String s) {
if (!s.trim().isEmpty()) {
SE2 = Byte.parseByte(s);
} else {
SE2 = Byte.MIN_VALUE;
}
}

protected final void initSE3(String s) {
if (!s.trim().isEmpty()) {
SE3 = Byte.parseByte(s);
} else {
SE3 = Byte.MIN_VALUE;
}
}

protected final void initSE4(String s) {
if (!s.trim().isEmpty()) {
SE4 = Byte.parseByte(s);
} else {
SE4 = Byte.MIN_VALUE;
}
}

protected final void initSE5(String s) {
if (!s.trim().isEmpty()) {
SE5 = Byte.parseByte(s);
} else {
SE5 = Byte.MIN_VALUE;
}
}

protected final void initSE6(String s) {
if (!s.trim().isEmpty()) {
SE6 = Byte.parseByte(s);
} else {
SE6 = Byte.MIN_VALUE;
}
}

protected final void initSE7(String s) {
if (!s.trim().isEmpty()) {
SE7 = Byte.parseByte(s);
} else {
SE7 = Byte.MIN_VALUE;
}
}

protected final void initSE8(String s) {
if (!s.trim().isEmpty()) {
SE8 = Byte.parseByte(s);
} else {
SE8 = Byte.MIN_VALUE;
}
}

protected final void initSE9(String s) {
if (!s.trim().isEmpty()) {
SE9 = Byte.parseByte(s);
} else {
SE9 = Byte.MIN_VALUE;
}
}

protected final void initSEEARNGRS_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_DV = Double.parseDouble(s);
} else {
SEEARNGRS_DV = Double.NaN;
}
}

protected final void initSEEARNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_IF = Byte.parseByte(s);
} else {
SEEARNGRS_IF = Byte.MIN_VALUE;
}
}

protected final void initSEEARNNET_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNNET_DV = Double.parseDouble(s);
} else {
SEEARNNET_DV = Double.NaN;
}
}

protected final void initSEEKID(String s) {
if (!s.trim().isEmpty()) {
SEEKID = Byte.parseByte(s);
} else {
SEEKID = Byte.MIN_VALUE;
}
}

protected final void initSEXUOR(String s) {
if (!s.trim().isEmpty()) {
SEXUOR = Byte.parseByte(s);
} else {
SEXUOR = Byte.MIN_VALUE;
}
}

protected final void initSEX_DV(String s) {
if (!s.trim().isEmpty()) {
SEX_DV = Byte.parseByte(s);
} else {
SEX_DV = Byte.MIN_VALUE;
}
}

protected final void initSF1(String s) {
if (!s.trim().isEmpty()) {
SF1 = Byte.parseByte(s);
} else {
SF1 = Byte.MIN_VALUE;
}
}

protected final void initSF12MCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12MCS_DV = Double.parseDouble(s);
} else {
SF12MCS_DV = Double.NaN;
}
}

protected final void initSF12PCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12PCS_DV = Double.parseDouble(s);
} else {
SF12PCS_DV = Double.NaN;
}
}

protected final void initSIBHIT(String s) {
if (!s.trim().isEmpty()) {
SIBHIT = Byte.parseByte(s);
} else {
SIBHIT = Byte.MIN_VALUE;
}
}

protected final void initSIBLING(String s) {
if (!s.trim().isEmpty()) {
SIBLING = Byte.parseByte(s);
} else {
SIBLING = Byte.MIN_VALUE;
}
}

protected final void initSIBSTEAL(String s) {
if (!s.trim().isEmpty()) {
SIBSTEAL = Byte.parseByte(s);
} else {
SIBSTEAL = Byte.MIN_VALUE;
}
}

protected final void initSIBTEASE(String s) {
if (!s.trim().isEmpty()) {
SIBTEASE = Byte.parseByte(s);
} else {
SIBTEASE = Byte.MIN_VALUE;
}
}

protected final void initSIBVERAB(String s) {
if (!s.trim().isEmpty()) {
SIBVERAB = Byte.parseByte(s);
} else {
SIBVERAB = Byte.MIN_VALUE;
}
}

protected final void initSIGNEDUCKIDS1(String s) {
if (!s.trim().isEmpty()) {
SIGNEDUCKIDS1 = Byte.parseByte(s);
} else {
SIGNEDUCKIDS1 = Byte.MIN_VALUE;
}
}

protected final void initSIGNEDUCKIDS2(String s) {
if (!s.trim().isEmpty()) {
SIGNEDUCKIDS2 = Byte.parseByte(s);
} else {
SIGNEDUCKIDS2 = Byte.MIN_VALUE;
}
}

protected final void initSIGNHEALTHKIDS1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
SIGNHEALTHKIDS1 = false;
} else {
SIGNHEALTHKIDS1 = true;
}
}
}

protected final void initSIGNHEALTHKIDS2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
SIGNHEALTHKIDS2 = false;
} else {
SIGNHEALTHKIDS2 = true;
}
}
}

protected final void initSINGLDV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
SINGLDV = false;
} else {
SINGLDV = true;
}
}
}

protected final void initSLAPKID(String s) {
if (!s.trim().isEmpty()) {
SLAPKID = Byte.parseByte(s);
} else {
SLAPKID = Byte.MIN_VALUE;
}
}

protected final void initSMAGBG(String s) {
if (!s.trim().isEmpty()) {
SMAGBG = Byte.parseByte(s);
} else {
SMAGBG = Byte.MIN_VALUE;
}
}

protected final void initSMARTMOB(String s) {
if (!s.trim().isEmpty()) {
SMARTMOB = Byte.parseByte(s);
} else {
SMARTMOB = Byte.MIN_VALUE;
}
}

protected final void initSMCIGS(String s) {
if (!s.trim().isEmpty()) {
SMCIGS = Byte.parseByte(s);
} else {
SMCIGS = Byte.MIN_VALUE;
}
}

protected final void initSMEVER(String s) {
if (!s.trim().isEmpty()) {
SMEVER = Byte.parseByte(s);
} else {
SMEVER = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH11(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH11 = Byte.parseByte(s);
} else {
SMKMNTH11 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH12(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH12 = Byte.parseByte(s);
} else {
SMKMNTH12 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH13(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH13 = Byte.parseByte(s);
} else {
SMKMNTH13 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH21(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH21 = Byte.parseByte(s);
} else {
SMKMNTH21 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH22(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH22 = Byte.parseByte(s);
} else {
SMKMNTH22 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH23(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH23 = Byte.parseByte(s);
} else {
SMKMNTH23 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH31(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH31 = Byte.parseByte(s);
} else {
SMKMNTH31 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH32(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH32 = Byte.parseByte(s);
} else {
SMKMNTH32 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH33(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH33 = Byte.parseByte(s);
} else {
SMKMNTH33 = Byte.MIN_VALUE;
}
}

protected final void initSMNCIGS(String s) {
if (!s.trim().isEmpty()) {
SMNCIGS = Byte.parseByte(s);
} else {
SMNCIGS = Byte.MIN_VALUE;
}
}

protected final void initSMNOW(String s) {
if (!s.trim().isEmpty()) {
SMNOW = Byte.parseByte(s);
} else {
SMNOW = Byte.MIN_VALUE;
}
}

protected final void initSOCCONT(String s) {
if (!s.trim().isEmpty()) {
SOCCONT = Byte.parseByte(s);
} else {
SOCCONT = Byte.MIN_VALUE;
}
}

protected final void initSOCIALKID(String s) {
if (!s.trim().isEmpty()) {
SOCIALKID = Byte.parseByte(s);
} else {
SOCIALKID = Byte.MIN_VALUE;
}
}

protected final void initSPKDIF(String s) {
if (!s.trim().isEmpty()) {
SPKDIF = Byte.parseByte(s);
} else {
SPKDIF = Byte.MIN_VALUE;
}
}

protected final void initSPORTACT(String s) {
if (!s.trim().isEmpty()) {
SPORTACT = Byte.parseByte(s);
} else {
SPORTACT = Byte.MIN_VALUE;
}
}

protected final void initSPORTOTH_CODE(String s) {
if (!s.trim().isEmpty()) {
SPORTOTH_CODE = Byte.parseByte(s);
} else {
SPORTOTH_CODE = Byte.MIN_VALUE;
}
}

protected final void initSPORTS11(String s) {
if (!s.trim().isEmpty()) {
SPORTS11 = Byte.parseByte(s);
} else {
SPORTS11 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS110(String s) {
if (!s.trim().isEmpty()) {
SPORTS110 = Byte.parseByte(s);
} else {
SPORTS110 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS111(String s) {
if (!s.trim().isEmpty()) {
SPORTS111 = Byte.parseByte(s);
} else {
SPORTS111 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS112(String s) {
if (!s.trim().isEmpty()) {
SPORTS112 = Byte.parseByte(s);
} else {
SPORTS112 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS113(String s) {
if (!s.trim().isEmpty()) {
SPORTS113 = Byte.parseByte(s);
} else {
SPORTS113 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS114(String s) {
if (!s.trim().isEmpty()) {
SPORTS114 = Byte.parseByte(s);
} else {
SPORTS114 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS12(String s) {
if (!s.trim().isEmpty()) {
SPORTS12 = Byte.parseByte(s);
} else {
SPORTS12 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS13(String s) {
if (!s.trim().isEmpty()) {
SPORTS13 = Byte.parseByte(s);
} else {
SPORTS13 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS14(String s) {
if (!s.trim().isEmpty()) {
SPORTS14 = Byte.parseByte(s);
} else {
SPORTS14 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS15(String s) {
if (!s.trim().isEmpty()) {
SPORTS15 = Byte.parseByte(s);
} else {
SPORTS15 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS16(String s) {
if (!s.trim().isEmpty()) {
SPORTS16 = Byte.parseByte(s);
} else {
SPORTS16 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS17(String s) {
if (!s.trim().isEmpty()) {
SPORTS17 = Byte.parseByte(s);
} else {
SPORTS17 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS18(String s) {
if (!s.trim().isEmpty()) {
SPORTS18 = Byte.parseByte(s);
} else {
SPORTS18 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS19(String s) {
if (!s.trim().isEmpty()) {
SPORTS19 = Byte.parseByte(s);
} else {
SPORTS19 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS196(String s) {
if (!s.trim().isEmpty()) {
SPORTS196 = Byte.parseByte(s);
} else {
SPORTS196 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS216(String s) {
if (!s.trim().isEmpty()) {
SPORTS216 = Byte.parseByte(s);
} else {
SPORTS216 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS217(String s) {
if (!s.trim().isEmpty()) {
SPORTS217 = Byte.parseByte(s);
} else {
SPORTS217 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS218(String s) {
if (!s.trim().isEmpty()) {
SPORTS218 = Byte.parseByte(s);
} else {
SPORTS218 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS219(String s) {
if (!s.trim().isEmpty()) {
SPORTS219 = Byte.parseByte(s);
} else {
SPORTS219 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS220(String s) {
if (!s.trim().isEmpty()) {
SPORTS220 = Byte.parseByte(s);
} else {
SPORTS220 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS221(String s) {
if (!s.trim().isEmpty()) {
SPORTS221 = Byte.parseByte(s);
} else {
SPORTS221 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS222(String s) {
if (!s.trim().isEmpty()) {
SPORTS222 = Byte.parseByte(s);
} else {
SPORTS222 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS223(String s) {
if (!s.trim().isEmpty()) {
SPORTS223 = Byte.parseByte(s);
} else {
SPORTS223 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS224(String s) {
if (!s.trim().isEmpty()) {
SPORTS224 = Byte.parseByte(s);
} else {
SPORTS224 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS225(String s) {
if (!s.trim().isEmpty()) {
SPORTS225 = Byte.parseByte(s);
} else {
SPORTS225 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS226(String s) {
if (!s.trim().isEmpty()) {
SPORTS226 = Byte.parseByte(s);
} else {
SPORTS226 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS227(String s) {
if (!s.trim().isEmpty()) {
SPORTS227 = Byte.parseByte(s);
} else {
SPORTS227 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS228(String s) {
if (!s.trim().isEmpty()) {
SPORTS228 = Byte.parseByte(s);
} else {
SPORTS228 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS229(String s) {
if (!s.trim().isEmpty()) {
SPORTS229 = Byte.parseByte(s);
} else {
SPORTS229 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS230(String s) {
if (!s.trim().isEmpty()) {
SPORTS230 = Byte.parseByte(s);
} else {
SPORTS230 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS231(String s) {
if (!s.trim().isEmpty()) {
SPORTS231 = Byte.parseByte(s);
} else {
SPORTS231 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS296(String s) {
if (!s.trim().isEmpty()) {
SPORTS296 = Byte.parseByte(s);
} else {
SPORTS296 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS31(String s) {
if (!s.trim().isEmpty()) {
SPORTS31 = Byte.parseByte(s);
} else {
SPORTS31 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS32(String s) {
if (!s.trim().isEmpty()) {
SPORTS32 = Byte.parseByte(s);
} else {
SPORTS32 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS33(String s) {
if (!s.trim().isEmpty()) {
SPORTS33 = Byte.parseByte(s);
} else {
SPORTS33 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS34(String s) {
if (!s.trim().isEmpty()) {
SPORTS34 = Byte.parseByte(s);
} else {
SPORTS34 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS35(String s) {
if (!s.trim().isEmpty()) {
SPORTS35 = Byte.parseByte(s);
} else {
SPORTS35 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS36(String s) {
if (!s.trim().isEmpty()) {
SPORTS36 = Byte.parseByte(s);
} else {
SPORTS36 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS37(String s) {
if (!s.trim().isEmpty()) {
SPORTS37 = Byte.parseByte(s);
} else {
SPORTS37 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS38(String s) {
if (!s.trim().isEmpty()) {
SPORTS38 = Byte.parseByte(s);
} else {
SPORTS38 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS39(String s) {
if (!s.trim().isEmpty()) {
SPORTS39 = Byte.parseByte(s);
} else {
SPORTS39 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS396(String s) {
if (!s.trim().isEmpty()) {
SPORTS396 = Byte.parseByte(s);
} else {
SPORTS396 = Byte.MIN_VALUE;
}
}

protected final void initSPORTS3FREQ(String s) {
if (!s.trim().isEmpty()) {
SPORTS3FREQ = Byte.parseByte(s);
} else {
SPORTS3FREQ = Byte.MIN_VALUE;
}
}

protected final void initSPORTSFREQ(String s) {
if (!s.trim().isEmpty()) {
SPORTSFREQ = Byte.parseByte(s);
} else {
SPORTSFREQ = Byte.MIN_VALUE;
}
}

protected final void initSPPEN(String s) {
if (!s.trim().isEmpty()) {
SPPEN = Byte.parseByte(s);
} else {
SPPEN = Byte.MIN_VALUE;
}
}

protected final void initSPPID(String s) {
if (!s.trim().isEmpty()) {
SPPID = Integer.parseInt(s);
} else {
SPPID = Integer.MIN_VALUE;
}
}

protected final void initSPPNO(String s) {
if (!s.trim().isEmpty()) {
SPPNO = Byte.parseByte(s);
} else {
SPPNO = Byte.MIN_VALUE;
}
}

protected final void initSTATCM1(String s) {
if (!s.trim().isEmpty()) {
STATCM1 = Byte.parseByte(s);
} else {
STATCM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM2(String s) {
if (!s.trim().isEmpty()) {
STATCM2 = Byte.parseByte(s);
} else {
STATCM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATCY41(String s) {
if (!s.trim().isEmpty()) {
STATCY41 = Short.parseShort(s);
} else {
STATCY41 = Short.MIN_VALUE;
}
}

protected final void initSTATCY42(String s) {
if (!s.trim().isEmpty()) {
STATCY42 = Short.parseShort(s);
} else {
STATCY42 = Short.MIN_VALUE;
}
}

protected final void initSTATENDD1(String s) {
if (!s.trim().isEmpty()) {
STATENDD1 = Byte.parseByte(s);
} else {
STATENDD1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD2(String s) {
if (!s.trim().isEmpty()) {
STATENDD2 = Byte.parseByte(s);
} else {
STATENDD2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD3(String s) {
if (!s.trim().isEmpty()) {
STATENDD3 = Byte.parseByte(s);
} else {
STATENDD3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD4(String s) {
if (!s.trim().isEmpty()) {
STATENDD4 = Byte.parseByte(s);
} else {
STATENDD4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD5(String s) {
if (!s.trim().isEmpty()) {
STATENDD5 = Byte.parseByte(s);
} else {
STATENDD5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD6(String s) {
if (!s.trim().isEmpty()) {
STATENDD6 = Byte.parseByte(s);
} else {
STATENDD6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM1(String s) {
if (!s.trim().isEmpty()) {
STATENDM1 = Byte.parseByte(s);
} else {
STATENDM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM2(String s) {
if (!s.trim().isEmpty()) {
STATENDM2 = Byte.parseByte(s);
} else {
STATENDM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM3(String s) {
if (!s.trim().isEmpty()) {
STATENDM3 = Byte.parseByte(s);
} else {
STATENDM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM4(String s) {
if (!s.trim().isEmpty()) {
STATENDM4 = Byte.parseByte(s);
} else {
STATENDM4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM5(String s) {
if (!s.trim().isEmpty()) {
STATENDM5 = Byte.parseByte(s);
} else {
STATENDM5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM6(String s) {
if (!s.trim().isEmpty()) {
STATENDM6 = Byte.parseByte(s);
} else {
STATENDM6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDY41(String s) {
if (!s.trim().isEmpty()) {
STATENDY41 = Short.parseShort(s);
} else {
STATENDY41 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY42(String s) {
if (!s.trim().isEmpty()) {
STATENDY42 = Short.parseShort(s);
} else {
STATENDY42 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY43(String s) {
if (!s.trim().isEmpty()) {
STATENDY43 = Short.parseShort(s);
} else {
STATENDY43 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY44(String s) {
if (!s.trim().isEmpty()) {
STATENDY44 = Short.parseShort(s);
} else {
STATENDY44 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY45(String s) {
if (!s.trim().isEmpty()) {
STATENDY45 = Short.parseShort(s);
} else {
STATENDY45 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY46(String s) {
if (!s.trim().isEmpty()) {
STATENDY46 = Short.parseShort(s);
} else {
STATENDY46 = Short.MIN_VALUE;
}
}

protected final void initSTAYKID(String s) {
if (!s.trim().isEmpty()) {
STAYKID = Short.parseShort(s);
} else {
STAYKID = Short.MIN_VALUE;
}
}

protected final void initSTAYKIDW(String s) {
if (!s.trim().isEmpty()) {
STAYKIDW = Byte.parseByte(s);
} else {
STAYKIDW = Byte.MIN_VALUE;
}
}

protected final void initSTEALSIB(String s) {
if (!s.trim().isEmpty()) {
STEALSIB = Byte.parseByte(s);
} else {
STEALSIB = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS(String s) {
if (!s.trim().isEmpty()) {
STENDREAS = Byte.parseByte(s);
} else {
STENDREAS = Byte.MIN_VALUE;
}
}

protected final void initSTEPREL(String s) {
if (!s.trim().isEmpty()) {
STEPREL = Byte.parseByte(s);
} else {
STEPREL = Byte.MIN_VALUE;
}
}

protected final void initSTRATA(String s) {
if (!s.trim().isEmpty()) {
STRATA = Short.parseShort(s);
} else {
STRATA = Short.MIN_VALUE;
}
}

protected final void initSUSP(String s) {
if (!s.trim().isEmpty()) {
SUSP = Byte.parseByte(s);
} else {
SUSP = Byte.MIN_VALUE;
}
}

protected final void initTALKMATTER(String s) {
if (!s.trim().isEmpty()) {
TALKMATTER = Byte.parseByte(s);
} else {
TALKMATTER = Byte.MIN_VALUE;
}
}

protected final void initTEASESIB(String s) {
if (!s.trim().isEmpty()) {
TEASESIB = Byte.parseByte(s);
} else {
TEASESIB = Byte.MIN_VALUE;
}
}

protected final void initTELDIF(String s) {
if (!s.trim().isEmpty()) {
TELDIF = Byte.parseByte(s);
} else {
TELDIF = Byte.MIN_VALUE;
}
}

protected final void initTLKF(String s) {
if (!s.trim().isEmpty()) {
TLKF = Byte.parseByte(s);
} else {
TLKF = Byte.MIN_VALUE;
}
}

protected final void initTLKM(String s) {
if (!s.trim().isEmpty()) {
TLKM = Byte.parseByte(s);
} else {
TLKM = Byte.MIN_VALUE;
}
}

protected final void initTMTIME(String s) {
if (!s.trim().isEmpty()) {
TMTIME = Short.parseShort(s);
} else {
TMTIME = Short.MIN_VALUE;
}
}

protected final void initTRAINANY(String s) {
if (!s.trim().isEmpty()) {
TRAINANY = Byte.parseByte(s);
} else {
TRAINANY = Byte.MIN_VALUE;
}
}

protected final void initTRAINDAYS1(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS1 = Short.parseShort(s);
} else {
TRAINDAYS1 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS2(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS2 = Short.parseShort(s);
} else {
TRAINDAYS2 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS3(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS3 = Short.parseShort(s);
} else {
TRAINDAYS3 = Short.MIN_VALUE;
}
}

protected final void initTRAINEND1(String s) {
if (!s.trim().isEmpty()) {
TRAINEND1 = Byte.parseByte(s);
} else {
TRAINEND1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND2(String s) {
if (!s.trim().isEmpty()) {
TRAINEND2 = Byte.parseByte(s);
} else {
TRAINEND2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND3(String s) {
if (!s.trim().isEmpty()) {
TRAINEND3 = Byte.parseByte(s);
} else {
TRAINEND3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS1(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS1 = Byte.parseByte(s);
} else {
TRAINHRS1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS2(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS2 = Byte.parseByte(s);
} else {
TRAINHRS2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS3(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS3 = Byte.parseByte(s);
} else {
TRAINHRS3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINN(String s) {
if (!s.trim().isEmpty()) {
TRAINN = Byte.parseByte(s);
} else {
TRAINN = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP11(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP11 = Byte.parseByte(s);
} else {
TRAINPURP11 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP12(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP12 = Byte.parseByte(s);
} else {
TRAINPURP12 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP13(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP13 = Byte.parseByte(s);
} else {
TRAINPURP13 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP21(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP21 = Byte.parseByte(s);
} else {
TRAINPURP21 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP22(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP22 = Byte.parseByte(s);
} else {
TRAINPURP22 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP23(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP23 = Byte.parseByte(s);
} else {
TRAINPURP23 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP31(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP31 = Byte.parseByte(s);
} else {
TRAINPURP31 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP32(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP32 = Byte.parseByte(s);
} else {
TRAINPURP32 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP33(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP33 = Byte.parseByte(s);
} else {
TRAINPURP33 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP41(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP41 = Byte.parseByte(s);
} else {
TRAINPURP41 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP42(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP42 = Byte.parseByte(s);
} else {
TRAINPURP42 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP43(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP43 = Byte.parseByte(s);
} else {
TRAINPURP43 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP51(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP51 = Byte.parseByte(s);
} else {
TRAINPURP51 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP52(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP52 = Byte.parseByte(s);
} else {
TRAINPURP52 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP53(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP53 = Byte.parseByte(s);
} else {
TRAINPURP53 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP61(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP61 = Byte.parseByte(s);
} else {
TRAINPURP61 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP62(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP62 = Byte.parseByte(s);
} else {
TRAINPURP62 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP63(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP63 = Byte.parseByte(s);
} else {
TRAINPURP63 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP71(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP71 = Byte.parseByte(s);
} else {
TRAINPURP71 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP72(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP72 = Byte.parseByte(s);
} else {
TRAINPURP72 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP73(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP73 = Byte.parseByte(s);
} else {
TRAINPURP73 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL1 = Byte.parseByte(s);
} else {
TRAINQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL2 = Byte.parseByte(s);
} else {
TRAINQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL3 = Byte.parseByte(s);
} else {
TRAINQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRQUAL1 = Byte.parseByte(s);
} else {
TRQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL10(String s) {
if (!s.trim().isEmpty()) {
TRQUAL10 = Byte.parseByte(s);
} else {
TRQUAL10 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL11(String s) {
if (!s.trim().isEmpty()) {
TRQUAL11 = Byte.parseByte(s);
} else {
TRQUAL11 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL13(String s) {
if (!s.trim().isEmpty()) {
TRQUAL13 = Byte.parseByte(s);
} else {
TRQUAL13 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL15(String s) {
if (!s.trim().isEmpty()) {
TRQUAL15 = Byte.parseByte(s);
} else {
TRQUAL15 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL16(String s) {
if (!s.trim().isEmpty()) {
TRQUAL16 = Byte.parseByte(s);
} else {
TRQUAL16 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL17(String s) {
if (!s.trim().isEmpty()) {
TRQUAL17 = Byte.parseByte(s);
} else {
TRQUAL17 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL18(String s) {
if (!s.trim().isEmpty()) {
TRQUAL18 = Byte.parseByte(s);
} else {
TRQUAL18 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL19(String s) {
if (!s.trim().isEmpty()) {
TRQUAL19 = Byte.parseByte(s);
} else {
TRQUAL19 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRQUAL2 = Byte.parseByte(s);
} else {
TRQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL20(String s) {
if (!s.trim().isEmpty()) {
TRQUAL20 = Byte.parseByte(s);
} else {
TRQUAL20 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL21(String s) {
if (!s.trim().isEmpty()) {
TRQUAL21 = Byte.parseByte(s);
} else {
TRQUAL21 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL22(String s) {
if (!s.trim().isEmpty()) {
TRQUAL22 = Byte.parseByte(s);
} else {
TRQUAL22 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL23(String s) {
if (!s.trim().isEmpty()) {
TRQUAL23 = Byte.parseByte(s);
} else {
TRQUAL23 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL24(String s) {
if (!s.trim().isEmpty()) {
TRQUAL24 = Byte.parseByte(s);
} else {
TRQUAL24 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL25(String s) {
if (!s.trim().isEmpty()) {
TRQUAL25 = Byte.parseByte(s);
} else {
TRQUAL25 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL26(String s) {
if (!s.trim().isEmpty()) {
TRQUAL26 = Byte.parseByte(s);
} else {
TRQUAL26 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL27(String s) {
if (!s.trim().isEmpty()) {
TRQUAL27 = Byte.parseByte(s);
} else {
TRQUAL27 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL28(String s) {
if (!s.trim().isEmpty()) {
TRQUAL28 = Byte.parseByte(s);
} else {
TRQUAL28 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL29(String s) {
if (!s.trim().isEmpty()) {
TRQUAL29 = Byte.parseByte(s);
} else {
TRQUAL29 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRQUAL3 = Byte.parseByte(s);
} else {
TRQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL30(String s) {
if (!s.trim().isEmpty()) {
TRQUAL30 = Byte.parseByte(s);
} else {
TRQUAL30 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL31(String s) {
if (!s.trim().isEmpty()) {
TRQUAL31 = Byte.parseByte(s);
} else {
TRQUAL31 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL4(String s) {
if (!s.trim().isEmpty()) {
TRQUAL4 = Byte.parseByte(s);
} else {
TRQUAL4 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL5(String s) {
if (!s.trim().isEmpty()) {
TRQUAL5 = Byte.parseByte(s);
} else {
TRQUAL5 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL6(String s) {
if (!s.trim().isEmpty()) {
TRQUAL6 = Byte.parseByte(s);
} else {
TRQUAL6 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL7(String s) {
if (!s.trim().isEmpty()) {
TRQUAL7 = Byte.parseByte(s);
} else {
TRQUAL7 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL8(String s) {
if (!s.trim().isEmpty()) {
TRQUAL8 = Byte.parseByte(s);
} else {
TRQUAL8 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL9(String s) {
if (!s.trim().isEmpty()) {
TRQUAL9 = Byte.parseByte(s);
} else {
TRQUAL9 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO1(String s) {
if (!s.trim().isEmpty()) {
TRWHO1 = Byte.parseByte(s);
} else {
TRWHO1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO2(String s) {
if (!s.trim().isEmpty()) {
TRWHO2 = Byte.parseByte(s);
} else {
TRWHO2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO3(String s) {
if (!s.trim().isEmpty()) {
TRWHO3 = Byte.parseByte(s);
} else {
TRWHO3 = Byte.MIN_VALUE;
}
}

protected final void initUKBORN(String s) {
if (!s.trim().isEmpty()) {
UKBORN = Byte.parseByte(s);
} else {
UKBORN = Byte.MIN_VALUE;
}
}

protected final void initUNDQUS(String s) {
if (!s.trim().isEmpty()) {
UNDQUS = Byte.parseByte(s);
} else {
UNDQUS = Byte.MIN_VALUE;
}
}

protected final void initUNSAFDV(String s) {
if (!s.trim().isEmpty()) {
UNSAFDV = Byte.parseByte(s);
} else {
UNSAFDV = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE1(String s) {
if (!s.trim().isEmpty()) {
UNSAFE1 = Byte.parseByte(s);
} else {
UNSAFE1 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE10(String s) {
if (!s.trim().isEmpty()) {
UNSAFE10 = Byte.parseByte(s);
} else {
UNSAFE10 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE11(String s) {
if (!s.trim().isEmpty()) {
UNSAFE11 = Byte.parseByte(s);
} else {
UNSAFE11 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE2(String s) {
if (!s.trim().isEmpty()) {
UNSAFE2 = Byte.parseByte(s);
} else {
UNSAFE2 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE3(String s) {
if (!s.trim().isEmpty()) {
UNSAFE3 = Byte.parseByte(s);
} else {
UNSAFE3 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE4(String s) {
if (!s.trim().isEmpty()) {
UNSAFE4 = Byte.parseByte(s);
} else {
UNSAFE4 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE5(String s) {
if (!s.trim().isEmpty()) {
UNSAFE5 = Byte.parseByte(s);
} else {
UNSAFE5 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE6(String s) {
if (!s.trim().isEmpty()) {
UNSAFE6 = Byte.parseByte(s);
} else {
UNSAFE6 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE7(String s) {
if (!s.trim().isEmpty()) {
UNSAFE7 = Byte.parseByte(s);
} else {
UNSAFE7 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE8(String s) {
if (!s.trim().isEmpty()) {
UNSAFE8 = Byte.parseByte(s);
} else {
UNSAFE8 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE9(String s) {
if (!s.trim().isEmpty()) {
UNSAFE9 = Byte.parseByte(s);
} else {
UNSAFE9 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE96(String s) {
if (!s.trim().isEmpty()) {
UNSAFE96 = Byte.parseByte(s);
} else {
UNSAFE96 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE97(String s) {
if (!s.trim().isEmpty()) {
UNSAFE97 = Byte.parseByte(s);
} else {
UNSAFE97 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEO_CODE(String s) {
if (!s.trim().isEmpty()) {
UNSAFEO_CODE = Byte.parseByte(s);
} else {
UNSAFEO_CODE = Byte.MIN_VALUE;
}
}

protected final void initUPSET(String s) {
if (!s.trim().isEmpty()) {
UPSET = Byte.parseByte(s);
} else {
UPSET = Byte.MIN_VALUE;
}
}

protected final void initURBAN_DV(String s) {
if (!s.trim().isEmpty()) {
URBAN_DV = Byte.parseByte(s);
} else {
URBAN_DV = Byte.MIN_VALUE;
}
}

protected final void initUSBREAD(String s) {
if (!s.trim().isEmpty()) {
USBREAD = Byte.parseByte(s);
} else {
USBREAD = Byte.MIN_VALUE;
}
}

protected final void initUSDAIRY(String s) {
if (!s.trim().isEmpty()) {
USDAIRY = Byte.parseByte(s);
} else {
USDAIRY = Byte.MIN_VALUE;
}
}

protected final void initVERABSIB(String s) {
if (!s.trim().isEmpty()) {
VERABSIB = Byte.parseByte(s);
} else {
VERABSIB = Byte.MIN_VALUE;
}
}

protected final void initVOLRECPER(String s) {
if (!s.trim().isEmpty()) {
VOLRECPER = Byte.parseByte(s);
} else {
VOLRECPER = Byte.MIN_VALUE;
}
}

protected final void initVOTE1(String s) {
if (!s.trim().isEmpty()) {
VOTE1 = Short.parseShort(s);
} else {
VOTE1 = Short.MIN_VALUE;
}
}

protected final void initVOTE2(String s) {
if (!s.trim().isEmpty()) {
VOTE2 = Short.parseShort(s);
} else {
VOTE2 = Short.MIN_VALUE;
}
}

protected final void initVOTE3(String s) {
if (!s.trim().isEmpty()) {
VOTE3 = Short.parseShort(s);
} else {
VOTE3 = Short.MIN_VALUE;
}
}

protected final void initVOTE4(String s) {
if (!s.trim().isEmpty()) {
VOTE4 = Short.parseShort(s);
} else {
VOTE4 = Short.MIN_VALUE;
}
}

protected final void initVOTE5(String s) {
if (!s.trim().isEmpty()) {
VOTE5 = Short.parseShort(s);
} else {
VOTE5 = Short.MIN_VALUE;
}
}

protected final void initVOTE6(String s) {
if (!s.trim().isEmpty()) {
VOTE6 = Short.parseShort(s);
} else {
VOTE6 = Short.MIN_VALUE;
}
}

protected final void initVOUCHER(String s) {
if (!s.trim().isEmpty()) {
VOUCHER = Byte.parseByte(s);
} else {
VOUCHER = Byte.MIN_VALUE;
}
}

protected final void initVOUCHERNI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
VOUCHERNI = false;
} else {
VOUCHERNI = true;
}
}
}

protected final void initVREGLINK(String s) {
if (!s.trim().isEmpty()) {
VREGLINK = Byte.parseByte(s);
} else {
VREGLINK = Byte.MIN_VALUE;
}
}

protected final void initVREGUKN(String s) {
if (!s.trim().isEmpty()) {
VREGUKN = Byte.parseByte(s);
} else {
VREGUKN = Byte.MIN_VALUE;
}
}

protected final void initWALKPACE(String s) {
if (!s.trim().isEmpty()) {
WALKPACE = Byte.parseByte(s);
} else {
WALKPACE = Byte.MIN_VALUE;
}
}

protected final void initWEKID(String s) {
if (!s.trim().isEmpty()) {
WEKID = Byte.parseByte(s);
} else {
WEKID = Byte.MIN_VALUE;
}
}

protected final void initWKFRUIT(String s) {
if (!s.trim().isEmpty()) {
WKFRUIT = Byte.parseByte(s);
} else {
WKFRUIT = Byte.MIN_VALUE;
}
}

protected final void initWKPHYS(String s) {
if (!s.trim().isEmpty()) {
WKPHYS = Byte.parseByte(s);
} else {
WKPHYS = Byte.MIN_VALUE;
}
}

protected final void initWKPLSAM(String s) {
if (!s.trim().isEmpty()) {
WKPLSAM = Byte.parseByte(s);
} else {
WKPLSAM = Byte.MIN_VALUE;
}
}

protected final void initWKVEGE(String s) {
if (!s.trim().isEmpty()) {
WKVEGE = Byte.parseByte(s);
} else {
WKVEGE = Byte.MIN_VALUE;
}
}

protected final void initWLK10M(String s) {
if (!s.trim().isEmpty()) {
WLK10M = Byte.parseByte(s);
} else {
WLK10M = Byte.MIN_VALUE;
}
}

protected final void initWLK30MIN(String s) {
if (!s.trim().isEmpty()) {
WLK30MIN = Byte.parseByte(s);
} else {
WLK30MIN = Byte.MIN_VALUE;
}
}

protected final void initWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
WORKTRAV = Byte.parseByte(s);
} else {
WORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initXPMOVE(String s) {
if (!s.trim().isEmpty()) {
XPMOVE = Byte.parseByte(s);
} else {
XPMOVE = Byte.MIN_VALUE;
}
}

protected final void initXPMVMNTH(String s) {
if (!s.trim().isEmpty()) {
XPMVMNTH = Byte.parseByte(s);
} else {
XPMVMNTH = Byte.MIN_VALUE;
}
}

protected final void initXPMVWHN(String s) {
if (!s.trim().isEmpty()) {
XPMVWHN = Byte.parseByte(s);
} else {
XPMVWHN = Byte.MIN_VALUE;
}
}

protected final void initXPMVWHR(String s) {
if (!s.trim().isEmpty()) {
XPMVWHR = Byte.parseByte(s);
} else {
XPMVWHR = Byte.MIN_VALUE;
}
}

protected final void initXPMVYR(String s) {
if (!s.trim().isEmpty()) {
XPMVYR = Short.parseShort(s);
} else {
XPMVYR = Short.MIN_VALUE;
}
}

protected final void initXTRA5MINOSM_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MINOSM_DV = Byte.parseByte(s);
} else {
XTRA5MINOSM_DV = Byte.MIN_VALUE;
}
}

protected final void initXTRA5MIN_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MIN_DV = Byte.parseByte(s);
} else {
XTRA5MIN_DV = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV1(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV1 = Byte.parseByte(s);
} else {
YAJBSRV1 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV2(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV2 = Byte.parseByte(s);
} else {
YAJBSRV2 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV3(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV3 = Byte.parseByte(s);
} else {
YAJBSRV3 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV4(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV4 = Byte.parseByte(s);
} else {
YAJBSRV4 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV5(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV5 = Byte.parseByte(s);
} else {
YAJBSRV5 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV7(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV7 = Byte.parseByte(s);
} else {
YAJBSRV7 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV8(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV8 = Byte.parseByte(s);
} else {
YAJBSRV8 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV96(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV96 = Byte.parseByte(s);
} else {
YAJBSRV96 = Byte.MIN_VALUE;
}
}

protected final void initYANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
YANSSEC5_DV = Byte.parseByte(s);
} else {
YANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initYASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC00_CC = Short.parseShort(s);
} else {
YASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC10_CC = Short.parseShort(s);
} else {
YASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC90_CC = Byte.parseByte(s);
} else {
YASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initYELLKID(String s) {
if (!s.trim().isEmpty()) {
YELLKID = Byte.parseByte(s);
} else {
YELLKID = Byte.MIN_VALUE;
}
}

protected final void initYPNETCHT(String s) {
if (!s.trim().isEmpty()) {
YPNETCHT = Byte.parseByte(s);
} else {
YPNETCHT = Byte.MIN_VALUE;
}
}

protected final void initYPNPAL(String s) {
if (!s.trim().isEmpty()) {
YPNPAL = Byte.parseByte(s);
} else {
YPNPAL = Byte.MIN_VALUE;
}
}

protected final void initYPSOCWEB(String s) {
if (!s.trim().isEmpty()) {
YPSOCWEB = Byte.parseByte(s);
} else {
YPSOCWEB = Byte.MIN_VALUE;
}
}

public byte getADCTS() {
return ADCTS;
}

public byte getADOPTCH01() {
return ADOPTCH01;
}

public byte getADOPTCH02() {
return ADOPTCH02;
}

public byte getADOPTCH03() {
return ADOPTCH03;
}

public byte getADOPTCH04() {
return ADOPTCH04;
}

public byte getADOPTCH05() {
return ADOPTCH05;
}

public byte getADOPTCH06() {
return ADOPTCH06;
}

public boolean getADOPTCH07() {
return ADOPTCH07;
}

public boolean getADOPTCH08() {
return ADOPTCH08;
}

public boolean getADOPTCH09() {
return ADOPTCH09;
}

public boolean getADOPTCH10() {
return ADOPTCH10;
}

public boolean getADOPTCH11() {
return ADOPTCH11;
}

public boolean getADOPTCH12() {
return ADOPTCH12;
}

public boolean getADOPTCH13() {
return ADOPTCH13;
}

public boolean getADOPTCH14() {
return ADOPTCH14;
}

public boolean getADOPTCH15() {
return ADOPTCH15;
}

public boolean getADOPTCH16() {
return ADOPTCH16;
}

public byte getADSTATUS() {
return ADSTATUS;
}

public byte getADVVOUCHER() {
return ADVVOUCHER;
}

public byte getAEDROF1() {
return AEDROF1;
}

public byte getAEDROF2() {
return AEDROF2;
}

public byte getAEDROF3() {
return AEDROF3;
}

protected double AEPUDA1() {
return AEPUDA1;
}

public byte getAEPUDA2() {
return AEPUDA2;
}

public byte getAEPUDA3() {
return AEPUDA3;
}

public byte getAEPUWK1() {
return AEPUWK1;
}

public byte getAEPUWK2() {
return AEPUWK2;
}

public byte getAEPUWK3() {
return AEPUWK3;
}

public byte getAGDV() {
return AGDV;
}

public byte getAGEGR10_DV() {
return AGEGR10_DV;
}

public byte getAGEGR13_DV() {
return AGEGR13_DV;
}

public byte getAGEGR5_DV() {
return AGEGR5_DV;
}

public byte getAGERET() {
return AGERET;
}

public byte getAGLQUIT() {
return AGLQUIT;
}

public byte getAHVWELL() {
return AHVWELL;
}

public byte getAIDEFT() {
return AIDEFT;
}

public short getAIDHU1() {
return AIDHU1;
}

public short getAIDHU2() {
return AIDHU2;
}

public byte getAIDHUA1() {
return AIDHUA1;
}

public byte getAIDHUA10() {
return AIDHUA10;
}

public byte getAIDHUA11() {
return AIDHUA11;
}

public byte getAIDHUA12() {
return AIDHUA12;
}

public byte getAIDHUA13() {
return AIDHUA13;
}

public byte getAIDHUA14() {
return AIDHUA14;
}

public byte getAIDHUA15() {
return AIDHUA15;
}

public byte getAIDHUA16() {
return AIDHUA16;
}

public byte getAIDHUA2() {
return AIDHUA2;
}

public byte getAIDHUA3() {
return AIDHUA3;
}

public byte getAIDHUA4() {
return AIDHUA4;
}

public byte getAIDHUA5() {
return AIDHUA5;
}

public byte getAIDHUA6() {
return AIDHUA6;
}

public byte getAIDHUA7() {
return AIDHUA7;
}

public byte getAIDHUA8() {
return AIDHUA8;
}

public byte getAIDHUA9() {
return AIDHUA9;
}

public byte getALLCH01() {
return ALLCH01;
}

public byte getALLCH02() {
return ALLCH02;
}

public byte getALLCH03() {
return ALLCH03;
}

public byte getALLCH04() {
return ALLCH04;
}

public byte getALLCH05() {
return ALLCH05;
}

public byte getALLCH06() {
return ALLCH06;
}

public byte getALLCH07() {
return ALLCH07;
}

public byte getALLCH08() {
return ALLCH08;
}

public byte getALLCH09() {
return ALLCH09;
}

public byte getALLCH10() {
return ALLCH10;
}

public boolean getALLCH11() {
return ALLCH11;
}

public boolean getALLCH12() {
return ALLCH12;
}

public boolean getALLCH13() {
return ALLCH13;
}

public boolean getALLCH14() {
return ALLCH14;
}

public boolean getALLCH15() {
return ALLCH15;
}

public boolean getALLCH16() {
return ALLCH16;
}

public byte getANYMORE() {
return ANYMORE;
}

public byte getANYMORE2() {
return ANYMORE2;
}

public byte getANYMORE3() {
return ANYMORE3;
}

public byte getANYMORE4() {
return ANYMORE4;
}

public byte getAPVOCIMP() {
return APVOCIMP;
}

public byte getARCFREQ() {
return ARCFREQ;
}

public byte getAREA() {
return AREA;
}

public byte getARGF() {
return ARGF;
}

public byte getARGM() {
return ARGM;
}

public byte getARTS1A1() {
return ARTS1A1;
}

public byte getARTS1A2() {
return ARTS1A2;
}

public byte getARTS1A3() {
return ARTS1A3;
}

public byte getARTS1A4() {
return ARTS1A4;
}

public byte getARTS1A5() {
return ARTS1A5;
}

public byte getARTS1A6() {
return ARTS1A6;
}

public byte getARTS1A7() {
return ARTS1A7;
}

public byte getARTS1A96() {
return ARTS1A96;
}

public byte getARTS1B10() {
return ARTS1B10;
}

public byte getARTS1B11() {
return ARTS1B11;
}

public byte getARTS1B12() {
return ARTS1B12;
}

public byte getARTS1B13() {
return ARTS1B13;
}

public byte getARTS1B14() {
return ARTS1B14;
}

public byte getARTS1B15() {
return ARTS1B15;
}

public byte getARTS1B9() {
return ARTS1B9;
}

public byte getARTS1B96() {
return ARTS1B96;
}

public byte getARTS1FREQ() {
return ARTS1FREQ;
}

public byte getARTS2A1() {
return ARTS2A1;
}

public byte getARTS2A2() {
return ARTS2A2;
}

public byte getARTS2A3() {
return ARTS2A3;
}

public byte getARTS2A4() {
return ARTS2A4;
}

public byte getARTS2A5() {
return ARTS2A5;
}

public byte getARTS2A6() {
return ARTS2A6;
}

public byte getARTS2A7() {
return ARTS2A7;
}

public byte getARTS2A96() {
return ARTS2A96;
}

public byte getARTS2B10() {
return ARTS2B10;
}

public byte getARTS2B11() {
return ARTS2B11;
}

public byte getARTS2B12() {
return ARTS2B12;
}

public byte getARTS2B13() {
return ARTS2B13;
}

public byte getARTS2B14() {
return ARTS2B14;
}

public byte getARTS2B15() {
return ARTS2B15;
}

public byte getARTS2B9() {
return ARTS2B9;
}

public byte getARTS2B96() {
return ARTS2B96;
}

public byte getARTS2FREQ() {
return ARTS2FREQ;
}

public byte getATTACKED1() {
return ATTACKED1;
}

public byte getATTACKED10() {
return ATTACKED10;
}

public byte getATTACKED11() {
return ATTACKED11;
}

public byte getATTACKED2() {
return ATTACKED2;
}

public byte getATTACKED3() {
return ATTACKED3;
}

public byte getATTACKED4() {
return ATTACKED4;
}

public byte getATTACKED5() {
return ATTACKED5;
}

public byte getATTACKED6() {
return ATTACKED6;
}

public byte getATTACKED7() {
return ATTACKED7;
}

public byte getATTACKED8() {
return ATTACKED8;
}

public byte getATTACKED9() {
return ATTACKED9;
}

public byte getATTACKED96() {
return ATTACKED96;
}

public byte getATTACKED97() {
return ATTACKED97;
}

public byte getATTACKEDO_CODE() {
return ATTACKEDO_CODE;
}

public byte getATTACKED_DV() {
return ATTACKED_DV;
}

public byte getAVOIDANCE1() {
return AVOIDANCE1;
}

public byte getAVOIDANCE10() {
return AVOIDANCE10;
}

public byte getAVOIDANCE11() {
return AVOIDANCE11;
}

public byte getAVOIDANCE2() {
return AVOIDANCE2;
}

public byte getAVOIDANCE3() {
return AVOIDANCE3;
}

public byte getAVOIDANCE4() {
return AVOIDANCE4;
}

public byte getAVOIDANCE5() {
return AVOIDANCE5;
}

public byte getAVOIDANCE6() {
return AVOIDANCE6;
}

public byte getAVOIDANCE7() {
return AVOIDANCE7;
}

public byte getAVOIDANCE8() {
return AVOIDANCE8;
}

public byte getAVOIDANCE9() {
return AVOIDANCE9;
}

public byte getAVOIDANCE96() {
return AVOIDANCE96;
}

public byte getAVOIDANCE97() {
return AVOIDANCE97;
}

public byte getAVOIDANCEO_CODE() {
return AVOIDANCEO_CODE;
}

public byte getAVOIDED_DV() {
return AVOIDED_DV;
}

protected double BASNSA() {
return BASNSA;
}

protected double BASRATE() {
return BASRATE;
}

public byte getBASREST() {
return BASREST;
}

public byte getBENCB() {
return BENCB;
}

public byte getBENCTC() {
return BENCTC;
}

public byte getBENDIS1() {
return BENDIS1;
}

public byte getBENDIS10() {
return BENDIS10;
}

public byte getBENDIS11() {
return BENDIS11;
}

public byte getBENDIS12() {
return BENDIS12;
}

public byte getBENDIS2() {
return BENDIS2;
}

public byte getBENDIS3() {
return BENDIS3;
}

public byte getBENDIS4() {
return BENDIS4;
}

public byte getBENDIS5() {
return BENDIS5;
}

public byte getBENDIS6() {
return BENDIS6;
}

public byte getBENDIS7() {
return BENDIS7;
}

public byte getBENDIS8() {
return BENDIS8;
}

public byte getBENDIS9() {
return BENDIS9;
}

public byte getBENDIS96() {
return BENDIS96;
}

public byte getBENDIS97() {
return BENDIS97;
}

public byte getBENESA() {
return BENESA;
}

public byte getBENFAM1() {
return BENFAM1;
}

public byte getBENFAM10() {
return BENFAM10;
}

public byte getBENFAM2() {
return BENFAM2;
}

public byte getBENFAM3() {
return BENFAM3;
}

public byte getBENFAM4() {
return BENFAM4;
}

public byte getBENFAM5() {
return BENFAM5;
}

public byte getBENFAM6() {
return BENFAM6;
}

public byte getBENFAM7() {
return BENFAM7;
}

public byte getBENFAM8() {
return BENFAM8;
}

public byte getBENFAM9() {
return BENFAM9;
}

public byte getBENFAM96() {
return BENFAM96;
}

public byte getBENHOU1() {
return BENHOU1;
}

public byte getBENHOU2() {
return BENHOU2;
}

public byte getBENHOU3() {
return BENHOU3;
}

public byte getBENHOU4() {
return BENHOU4;
}

public byte getBENHOU5() {
return BENHOU5;
}

public byte getBENHOU6() {
return BENHOU6;
}

public byte getBENHOU7() {
return BENHOU7;
}

public byte getBENHOU8() {
return BENHOU8;
}

public byte getBENHOU9() {
return BENHOU9;
}

public byte getBENHOU96() {
return BENHOU96;
}

public byte getBENPEN1() {
return BENPEN1;
}

public byte getBENPEN10() {
return BENPEN10;
}

public byte getBENPEN11() {
return BENPEN11;
}

public byte getBENPEN12() {
return BENPEN12;
}

public byte getBENPEN13() {
return BENPEN13;
}

public byte getBENPEN2() {
return BENPEN2;
}

public byte getBENPEN3() {
return BENPEN3;
}

public byte getBENPEN4() {
return BENPEN4;
}

public byte getBENPEN5() {
return BENPEN5;
}

public byte getBENPEN6() {
return BENPEN6;
}

public byte getBENPEN7() {
return BENPEN7;
}

public byte getBENPEN8() {
return BENPEN8;
}

public byte getBENPEN96() {
return BENPEN96;
}

public byte getBENSTA1() {
return BENSTA1;
}

public byte getBENSTA10() {
return BENSTA10;
}

public byte getBENSTA11() {
return BENSTA11;
}

public byte getBENSTA12() {
return BENSTA12;
}

public byte getBENSTA13() {
return BENSTA13;
}

public byte getBENSTA2() {
return BENSTA2;
}

public byte getBENSTA3() {
return BENSTA3;
}

public byte getBENSTA4() {
return BENSTA4;
}

public byte getBENSTA5() {
return BENSTA5;
}

public byte getBENSTA6() {
return BENSTA6;
}

public byte getBENSTA7() {
return BENSTA7;
}

public byte getBENSTA9() {
return BENSTA9;
}

public byte getBENSTA96() {
return BENSTA96;
}

public byte getBENSTA97() {
return BENSTA97;
}

public byte getBENTAX1() {
return BENTAX1;
}

public byte getBENTAX10() {
return BENTAX10;
}

public byte getBENTAX2() {
return BENTAX2;
}

public byte getBENTAX3() {
return BENTAX3;
}

public byte getBENTAX4() {
return BENTAX4;
}

public byte getBENTAX5() {
return BENTAX5;
}

public byte getBENTAX7() {
return BENTAX7;
}

public byte getBENTAX8() {
return BENTAX8;
}

public byte getBENTAX9() {
return BENTAX9;
}

public byte getBENTAX96() {
return BENTAX96;
}

public byte getBENUNEMP1() {
return BENUNEMP1;
}

public byte getBENUNEMP2() {
return BENUNEMP2;
}

public byte getBENUNEMP3() {
return BENUNEMP3;
}

public byte getBENUNEMP4() {
return BENUNEMP4;
}

public byte getBENUNEMP5() {
return BENUNEMP5;
}

public byte getBENUNEMP6() {
return BENUNEMP6;
}

public byte getBENUNEMP7() {
return BENUNEMP7;
}

public byte getBENUNEMP96() {
return BENUNEMP96;
}

public short getBIRTHY() {
return BIRTHY;
}

public byte getBOSSETHN() {
return BOSSETHN;
}

public byte getBOSSSEX() {
return BOSSSEX;
}

public byte getBTYPE1() {
return BTYPE1;
}

public byte getBTYPE10() {
return BTYPE10;
}

public byte getBTYPE2() {
return BTYPE2;
}

public byte getBTYPE3() {
return BTYPE3;
}

public byte getBTYPE4() {
return BTYPE4;
}

public byte getBTYPE5() {
return BTYPE5;
}

public byte getBTYPE6() {
return BTYPE6;
}

public byte getBTYPE7() {
return BTYPE7;
}

public byte getBTYPE8() {
return BTYPE8;
}

public byte getBTYPE9() {
return BTYPE9;
}

public byte getBTYPE96() {
return BTYPE96;
}

public byte getBUNO_DV() {
return BUNO_DV;
}

public byte getCAIDU1() {
return CAIDU1;
}

public byte getCAIDU2() {
return CAIDU2;
}

public byte getCAIDU3() {
return CAIDU3;
}

public byte getCAIDU4() {
return CAIDU4;
}

public byte getCAIDU5() {
return CAIDU5;
}

public byte getCAIDU6() {
return CAIDU6;
}

public byte getCAIDU7() {
return CAIDU7;
}

public byte getCAIDU8() {
return CAIDU8;
}

public byte getCAIDU96() {
return CAIDU96;
}

public byte getCAIDU97() {
return CAIDU97;
}

public byte getCAPGIFTV() {
return CAPGIFTV;
}

public byte getCASIEND() {
return CASIEND;
}

public byte getCATGIFTV() {
return CATGIFTV;
}

public byte getCATVOUCHER() {
return CATVOUCHER;
}

public byte getCCARE() {
return CCARE;
}

public byte getCCWORK() {
return CCWORK;
}

public byte getCDPREAMBLE() {
return CDPREAMBLE;
}

public short getCH1BY4() {
return CH1BY4;
}

public byte getCHAID1() {
return CHAID1;
}

public byte getCHAID2() {
return CHAID2;
}

public byte getCHAID3() {
return CHAID3;
}

public byte getCHAID4() {
return CHAID4;
}

public byte getCHAID5() {
return CHAID5;
}

public byte getCHAID6() {
return CHAID6;
}

public byte getCHAID7() {
return CHAID7;
}

public byte getCHAID8() {
return CHAID8;
}

public byte getCHAID96() {
return CHAID96;
}

public byte getCHAID97() {
return CHAID97;
}

public byte getCHCON() {
return CHCON;
}

public byte getCHFAR() {
return CHFAR;
}

public byte getCHILDPNO() {
return CHILDPNO;
}

public byte getCHKCOA() {
return CHKCOA;
}

public byte getCHKRESP() {
return CHKRESP;
}

public byte getCHSEE() {
return CHSEE;
}

public int getCINDTIME() {
return CINDTIME;
}

public byte getCITZN1() {
return CITZN1;
}

public byte getCITZN2() {
return CITZN2;
}

public byte getCITZN3() {
return CITZN3;
}

public byte getCJBATT() {
return CJBATT;
}

public byte getCJOB() {
return CJOB;
}

public byte getCLUB() {
return CLUB;
}

public byte getCMCOKIDNO1() {
return CMCOKIDNO1;
}

public byte getCMCOKIDNO2() {
return CMCOKIDNO2;
}

public byte getCMCOKIDNO3() {
return CMCOKIDNO3;
}

public byte getCMCOKIDNO4() {
return CMCOKIDNO4;
}

public byte getCMCOKIDNO5() {
return CMCOKIDNO5;
}

public byte getCMCORD() {
return CMCORD;
}

public byte getCMCORDALL() {
return CMCORDALL;
}

protected double CMCORDAM() {
return CMCORDAM;
}

public byte getCMCORDPER() {
return CMCORDPER;
}

public short getCMCORDRCAM() {
return CMCORDRCAM;
}

public byte getCMCORDRCPR() {
return CMCORDRCPR;
}

public byte getCMCORDREC() {
return CMCORDREC;
}

public byte getCMCORDTM() {
return CMCORDTM;
}

public byte getCMCSAACT() {
return CMCSAACT;
}

public byte getCMCSAALL() {
return CMCSAALL;
}

public short getCMCSAAM() {
return CMCSAAM;
}

public byte getCMCSANIL1() {
return CMCSANIL1;
}

public byte getCMCSANIL2() {
return CMCSANIL2;
}

public byte getCMCSANIL3() {
return CMCSANIL3;
}

public byte getCMCSANIL4() {
return CMCSANIL4;
}

public byte getCMCSANIL5() {
return CMCSANIL5;
}

public byte getCMCSANIL6() {
return CMCSANIL6;
}

public byte getCMCSANIL7() {
return CMCSANIL7;
}

public byte getCMCSANIL8() {
return CMCSANIL8;
}

public byte getCMCSANIL9() {
return CMCSANIL9;
}

public byte getCMCSANIL97() {
return CMCSANIL97;
}

public byte getCMCSAPER() {
return CMCSAPER;
}

public byte getCMCSAPR() {
return CMCSAPR;
}

public byte getCMFLAG() {
return CMFLAG;
}

public byte getCMKNDEVR1() {
return CMKNDEVR1;
}

public byte getCMKNDEVR2() {
return CMKNDEVR2;
}

public byte getCMKNDEVR3() {
return CMKNDEVR3;
}

public byte getCMKNDEVR4() {
return CMKNDEVR4;
}

public byte getCMKNDEVR96() {
return CMKNDEVR96;
}

public byte getCMKNDEVR97() {
return CMKNDEVR97;
}

public byte getCMLSTAT1() {
return CMLSTAT1;
}

public byte getCMLSTAT2() {
return CMLSTAT2;
}

public byte getCMNIL1() {
return CMNIL1;
}

public byte getCMNIL10() {
return CMNIL10;
}

public byte getCMNIL2() {
return CMNIL2;
}

public byte getCMNIL3() {
return CMNIL3;
}

public byte getCMNIL4() {
return CMNIL4;
}

public byte getCMNIL5() {
return CMNIL5;
}

public byte getCMNIL6() {
return CMNIL6;
}

public byte getCMNIL7() {
return CMNIL7;
}

public byte getCMNIL8() {
return CMNIL8;
}

public byte getCMNIL9() {
return CMNIL9;
}

public byte getCMNIL97() {
return CMNIL97;
}

public byte getCMNKY1() {
return CMNKY1;
}

public byte getCMNKY2() {
return CMNKY2;
}

public byte getCMNKY3() {
return CMNKY3;
}

public byte getCMOTHPAY1() {
return CMOTHPAY1;
}

public byte getCMOTHPAY10() {
return CMOTHPAY10;
}

public byte getCMOTHPAY11() {
return CMOTHPAY11;
}

public byte getCMOTHPAY2() {
return CMOTHPAY2;
}

public byte getCMOTHPAY3() {
return CMOTHPAY3;
}

public byte getCMOTHPAY4() {
return CMOTHPAY4;
}

public byte getCMOTHPAY5() {
return CMOTHPAY5;
}

public byte getCMOTHPAY6() {
return CMOTHPAY6;
}

public byte getCMOTHPAY7() {
return CMOTHPAY7;
}

public byte getCMOTHPAY8() {
return CMOTHPAY8;
}

public byte getCMOTHPAY9() {
return CMOTHPAY9;
}

public byte getCMOTHPAY96() {
return CMOTHPAY96;
}

public byte getCMOTHPAY97() {
return CMOTHPAY97;
}

public byte getCMROUTE() {
return CMROUTE;
}

public byte getCMSAMEA() {
return CMSAMEA;
}

public byte getCMSAMEB() {
return CMSAMEB;
}

public byte getCMSAMEC() {
return CMSAMEC;
}

public byte getCMVOL() {
return CMVOL;
}

public byte getCMVOLALL() {
return CMVOLALL;
}

protected double CMVOLAM() {
return CMVOLAM;
}

public byte getCMVOLKIDNO1() {
return CMVOLKIDNO1;
}

public byte getCMVOLKIDNO2() {
return CMVOLKIDNO2;
}

public byte getCMVOLKIDNO3() {
return CMVOLKIDNO3;
}

public byte getCMVOLKIDNO4() {
return CMVOLKIDNO4;
}

public byte getCMVOLKIDNO5() {
return CMVOLKIDNO5;
}

public byte getCMVOLPER() {
return CMVOLPER;
}

public short getCMVOLRCAM() {
return CMVOLRCAM;
}

public byte getCMVOLRCPR() {
return CMVOLRCPR;
}

public byte getCMVOLREC() {
return CMVOLREC;
}

public byte getCMVOLTM() {
return CMVOLTM;
}

public byte getCOH1BM() {
return COH1BM;
}

public short getCOH1BY() {
return COH1BY;
}

public byte getCOH1EM() {
return COH1EM;
}

public short getCOH1EY() {
return COH1EY;
}

public byte getCOH1MR() {
return COH1MR;
}

public byte getCOHAB() {
return COHAB;
}

public byte getCOHABN() {
return COHABN;
}

public boolean getCOHAB_DV() {
return COHAB_DV;
}

public byte getCONSINTRO() {
return CONSINTRO;
}

public byte getCONTFT() {
return CONTFT;
}

public byte getCORDRECPER() {
return CORDRECPER;
}

public byte getCOUNTRY() {
return COUNTRY;
}

public byte getCOWOSEXN() {
return COWOSEXN;
}

public byte getCOWOSEXP() {
return COWOSEXP;
}

public byte getCSACALC() {
return CSACALC;
}

protected double CSACALCAM() {
return CSACALCAM;
}

public byte getCSAKIDNO1() {
return CSAKIDNO1;
}

public byte getCSAKIDNO2() {
return CSAKIDNO2;
}

public byte getCSAKIDNO3() {
return CSAKIDNO3;
}

public byte getCSAKIDNO4() {
return CSAKIDNO4;
}

public byte getCSAKIDNO5() {
return CSAKIDNO5;
}

public byte getCSAPAYTO() {
return CSAPAYTO;
}

public byte getCSARECPER() {
return CSARECPER;
}

public byte getCSTAT() {
return CSTAT;
}

public byte getCTADD1_CODE() {
return CTADD1_CODE;
}

public byte getCTADD2_CODE() {
return CTADD2_CODE;
}

public byte getCTCNTY_CODE() {
return CTCNTY_CODE;
}

public byte getCTCONS() {
return CTCONS;
}

public byte getCTCONSCONF1() {
return CTCONSCONF1;
}

public byte getCTCONSCONF2() {
return CTCONSCONF2;
}

public byte getCTCONSCONF3() {
return CTCONSCONF3;
}

public byte getCTCONSCONF4() {
return CTCONSCONF4;
}

public byte getCTCONSCONF5() {
return CTCONSCONF5;
}

public byte getCTCONSCONF6() {
return CTCONSCONF6;
}

public byte getCTCONSCONF7() {
return CTCONSCONF7;
}

public byte getCTCONSCONF8() {
return CTCONSCONF8;
}

public byte getCTCONSCONF94() {
return CTCONSCONF94;
}

public byte getCTEMAIL_CODE() {
return CTEMAIL_CODE;
}

public byte getCTPCODCODE() {
return CTPCODCODE;
}

public byte getCTREL() {
return CTREL;
}

public byte getCTTEL1_CODE() {
return CTTEL1_CODE;
}

public byte getCTTEL2_CODE() {
return CTTEL2_CODE;
}

public byte getCTTOWN_CODE() {
return CTTOWN_CODE;
}

public byte getCUDDLEKID() {
return CUDDLEKID;
}

public byte getCULTUREA() {
return CULTUREA;
}

public byte getCULTUREB() {
return CULTUREB;
}

public byte getCULTUREC() {
return CULTUREC;
}

public byte getCULTURED() {
return CULTURED;
}

public byte getCULTUREE() {
return CULTUREE;
}

public byte getCULTUREF() {
return CULTUREF;
}

public byte getCULTUREG() {
return CULTUREG;
}

public byte getCURRJOB1() {
return CURRJOB1;
}

public byte getCURRJOB2() {
return CURRJOB2;
}

public byte getCURRJOB3() {
return CURRJOB3;
}

public byte getCURRJOB4() {
return CURRJOB4;
}

public byte getCURRJOB5() {
return CURRJOB5;
}

public byte getCURRJOB6() {
return CURRJOB6;
}

public byte getCURRPART1() {
return CURRPART1;
}

public byte getCURRPART2() {
return CURRPART2;
}

public byte getCURRPART3() {
return CURRPART3;
}

public byte getCURRPART4() {
return CURRPART4;
}

public byte getCURRSTAT1() {
return CURRSTAT1;
}

public byte getCURRSTAT2() {
return CURRSTAT2;
}

public byte getCURRSTAT3() {
return CURRSTAT3;
}

public byte getCURRSTAT4() {
return CURRSTAT4;
}

public byte getCURRSTAT5() {
return CURRSTAT5;
}

public byte getCURRSTAT6() {
return CURRSTAT6;
}

public byte getDAYWLK() {
return DAYWLK;
}

public byte getDCSATM() {
return DCSATM;
}

public byte getDELAY1() {
return DELAY1;
}

public byte getDELAY10() {
return DELAY10;
}

public byte getDELAY2() {
return DELAY2;
}

public byte getDELAY3() {
return DELAY3;
}

public byte getDELAY4() {
return DELAY4;
}

public byte getDELAY5() {
return DELAY5;
}

public byte getDELAY6() {
return DELAY6;
}

public byte getDELAY7() {
return DELAY7;
}

public byte getDELAY8() {
return DELAY8;
}

public byte getDELAY9() {
return DELAY9;
}

public boolean getDEPCHL_DV() {
return DEPCHL_DV;
}

public byte getDETINC1() {
return DETINC1;
}

public byte getDETINC2() {
return DETINC2;
}

public byte getDETINC3() {
return DETINC3;
}

public byte getDETINC4() {
return DETINC4;
}

public byte getDETINC5() {
return DETINC5;
}

public byte getDETINC6() {
return DETINC6;
}

public byte getDINNER() {
return DINNER;
}

public byte getDISDIF1() {
return DISDIF1;
}

public byte getDISDIF10() {
return DISDIF10;
}

public byte getDISDIF11() {
return DISDIF11;
}

public byte getDISDIF12() {
return DISDIF12;
}

public byte getDISDIF2() {
return DISDIF2;
}

public byte getDISDIF3() {
return DISDIF3;
}

public byte getDISDIF4() {
return DISDIF4;
}

public byte getDISDIF5() {
return DISDIF5;
}

public byte getDISDIF6() {
return DISDIF6;
}

public byte getDISDIF7() {
return DISDIF7;
}

public byte getDISDIF8() {
return DISDIF8;
}

public byte getDISDIF9() {
return DISDIF9;
}

public byte getDISDIF96() {
return DISDIF96;
}

public byte getDISEFFECTS1() {
return DISEFFECTS1;
}

public byte getDISEFFECTS2() {
return DISEFFECTS2;
}

public byte getDISEFFECTS3() {
return DISEFFECTS3;
}

public byte getDISEFFECTS4() {
return DISEFFECTS4;
}

public byte getDISEFFECTS5() {
return DISEFFECTS5;
}

public byte getDIVCHK1() {
return DIVCHK1;
}

public byte getDIVCHK2() {
return DIVCHK2;
}

public byte getDIVFIN1() {
return DIVFIN1;
}

public byte getDIVFIN2() {
return DIVFIN2;
}

public short getDOBY_DV() {
return DOBY_DV;
}

public byte getDONEPROXY() {
return DONEPROXY;
}

public byte getDRGMJ() {
return DRGMJ;
}

public byte getDRGOTH() {
return DRGOTH;
}

public byte getDRGSOL() {
return DRGSOL;
}

public byte getDRIVE() {
return DRIVE;
}

public byte getDVAGE() {
return DVAGE;
}

public byte getDVM1() {
return DVM1;
}

public byte getDVM2() {
return DVM2;
}

public short getDVY41() {
return DVY41;
}

public short getDVY42() {
return DVY42;
}

public byte getEATLIVU() {
return EATLIVU;
}

public byte getEDASP() {
return EDASP;
}

public byte getEDLINK() {
return EDLINK;
}

public byte getEDLINKCONF() {
return EDLINKCONF;
}

public byte getEDLINKCONFB() {
return EDLINKCONFB;
}

public boolean getEDLINKKIDCONFSW() {
return EDLINKKIDCONFSW;
}

public byte getEDLINKKIDE() {
return EDLINKKIDE;
}

public byte getEDLINKKIDSWN() {
return EDLINKKIDSWN;
}

public boolean getEDLKKIDCONFE() {
return EDLKKIDCONFE;
}

public short getEDTYPE() {
return EDTYPE;
}

public byte getEDUCATION() {
return EDUCATION;
}

public byte getEDUCISGN() {
return EDUCISGN;
}

public boolean getEDUCKIDSN() {
return EDUCKIDSN;
}

public byte getEDUCLINKB1() {
return EDUCLINKB1;
}

public byte getEDUCLINKB2() {
return EDUCLINKB2;
}

public byte getEDUCLINKB3() {
return EDUCLINKB3;
}

public byte getEDUCRECD() {
return EDUCRECD;
}

public byte getEDUCRSGN() {
return EDUCRSGN;
}

public byte getEDUCSN() {
return EDUCSN;
}

public byte getEMAILENT() {
return EMAILENT;
}

public byte getEMPCHK() {
return EMPCHK;
}

public byte getEMPINTRO() {
return EMPINTRO;
}

public byte getEMPLOY() {
return EMPLOY;
}

public byte getEMPSTENDD() {
return EMPSTENDD;
}

public byte getEMPSTENDM() {
return EMPSTENDM;
}

public short getEMPSTENDY4() {
return EMPSTENDY4;
}

public byte getENDMNTH1() {
return ENDMNTH1;
}

public byte getENDMNTH2() {
return ENDMNTH2;
}

public byte getENDMNTH3() {
return ENDMNTH3;
}

public byte getENGFORM() {
return ENGFORM;
}

public byte getENGLANG() {
return ENGLANG;
}

public byte getENGREAD() {
return ENGREAD;
}

public byte getENGSPK() {
return ENGSPK;
}

public byte getENGTEL() {
return ENGTEL;
}

public short getEPROSH() {
return EPROSH;
}

public byte getETCOOTN() {
return ETCOOTN;
}

public byte getETCOOTP() {
return ETCOOTP;
}

public byte getETCOSAMN() {
return ETCOSAMN;
}

public byte getETCOSAMP() {
return ETCOSAMP;
}

public byte getETCOWHN() {
return ETCOWHN;
}

public byte getETCOWHP() {
return ETCOWHP;
}

public byte getETHCLOSE1() {
return ETHCLOSE1;
}

public byte getETHCLOSE10() {
return ETHCLOSE10;
}

public byte getETHCLOSE11() {
return ETHCLOSE11;
}

public byte getETHCLOSE2A() {
return ETHCLOSE2A;
}

public byte getETHCLOSE2B() {
return ETHCLOSE2B;
}

public byte getETHCLOSE3() {
return ETHCLOSE3;
}

public byte getETHCLOSE4A() {
return ETHCLOSE4A;
}

public byte getETHCLOSE4B() {
return ETHCLOSE4B;
}

public byte getETHCLOSE5() {
return ETHCLOSE5;
}

public byte getETHCLOSE6() {
return ETHCLOSE6;
}

public byte getETHCLOSE7() {
return ETHCLOSE7;
}

public byte getETHCLOSE8() {
return ETHCLOSE8;
}

public byte getETHCLOSE9() {
return ETHCLOSE9;
}

public byte getETHID10() {
return ETHID10;
}

public byte getETHID11() {
return ETHID11;
}

public byte getETHID12() {
return ETHID12;
}

public byte getETHID13() {
return ETHID13;
}

public byte getETHID14() {
return ETHID14;
}

public byte getETHID2() {
return ETHID2;
}

public byte getETHID3() {
return ETHID3;
}

public byte getETHID4A() {
return ETHID4A;
}

public byte getETHID4B() {
return ETHID4B;
}

public byte getETHID5() {
return ETHID5;
}

public byte getETHID6() {
return ETHID6;
}

public byte getETHID7() {
return ETHID7;
}

public byte getETHID8() {
return ETHID8;
}

public byte getETHID9() {
return ETHID9;
}

public byte getETHN_DV() {
return ETHN_DV;
}

public byte getEVENT1() {
return EVENT1;
}

public byte getEVENT1S() {
return EVENT1S;
}

public byte getEVENT2() {
return EVENT2;
}

public byte getEVENT2S() {
return EVENT2S;
}

public byte getEVENT3() {
return EVENT3;
}

public byte getEVENT3S() {
return EVENT3S;
}

public byte getEVENT4() {
return EVENT4;
}

public byte getEVENT4S() {
return EVENT4S;
}

public byte getEXPREAM() {
return EXPREAM;
}

public byte getEXSAME() {
return EXSAME;
}

public byte getEXTNSA() {
return EXTNSA;
}

protected double EXTRATE() {
return EXTRATE;
}

public byte getEXTREST() {
return EXTREST;
}

public byte getFAMILY() {
return FAMILY;
}

public byte getFAMSUP() {
return FAMSUP;
}

public byte getFARKID() {
return FARKID;
}

public byte getFATHER() {
return FATHER;
}

public byte getFENOW() {
return FENOW;
}

public byte getFF_BENTYPE01() {
return FF_BENTYPE01;
}

public byte getFF_BENTYPE02() {
return FF_BENTYPE02;
}

public byte getFF_BENTYPE03() {
return FF_BENTYPE03;
}

public byte getFF_BENTYPE04() {
return FF_BENTYPE04;
}

public byte getFF_BENTYPE05() {
return FF_BENTYPE05;
}

public byte getFF_BENTYPE06() {
return FF_BENTYPE06;
}

public byte getFF_BENTYPE07() {
return FF_BENTYPE07;
}

public byte getFF_BENTYPE08() {
return FF_BENTYPE08;
}

public byte getFF_BENTYPE09() {
return FF_BENTYPE09;
}

public byte getFF_BENTYPE10() {
return FF_BENTYPE10;
}

public byte getFF_BENTYPE11() {
return FF_BENTYPE11;
}

public byte getFF_BENTYPE12() {
return FF_BENTYPE12;
}

public byte getFF_BENTYPE13() {
return FF_BENTYPE13;
}

public byte getFF_BENTYPE14() {
return FF_BENTYPE14;
}

public byte getFF_BENTYPE15() {
return FF_BENTYPE15;
}

public byte getFF_BENTYPE16() {
return FF_BENTYPE16;
}

public byte getFF_BENTYPE17() {
return FF_BENTYPE17;
}

public byte getFF_BENTYPE18() {
return FF_BENTYPE18;
}

public byte getFF_BENTYPE19() {
return FF_BENTYPE19;
}

public byte getFF_BENTYPE20() {
return FF_BENTYPE20;
}

public byte getFF_BENTYPE21() {
return FF_BENTYPE21;
}

public byte getFF_BENTYPE22() {
return FF_BENTYPE22;
}

public byte getFF_BENTYPE23() {
return FF_BENTYPE23;
}

public byte getFF_BENTYPE24() {
return FF_BENTYPE24;
}

public byte getFF_BENTYPE25() {
return FF_BENTYPE25;
}

public byte getFF_BENTYPE26() {
return FF_BENTYPE26;
}

public byte getFF_BENTYPE27() {
return FF_BENTYPE27;
}

public byte getFF_BENTYPE28() {
return FF_BENTYPE28;
}

public byte getFF_BENTYPE29() {
return FF_BENTYPE29;
}

public byte getFF_BENTYPE30() {
return FF_BENTYPE30;
}

public byte getFF_BENTYPE31() {
return FF_BENTYPE31;
}

public byte getFF_BENTYPE32() {
return FF_BENTYPE32;
}

public byte getFF_BENTYPE33() {
return FF_BENTYPE33;
}

public byte getFF_BENTYPE34() {
return FF_BENTYPE34;
}

public byte getFF_BENTYPE35() {
return FF_BENTYPE35;
}

public byte getFF_BENTYPE36() {
return FF_BENTYPE36;
}

public byte getFF_BENTYPE37() {
return FF_BENTYPE37;
}

public byte getFF_BENTYPE38() {
return FF_BENTYPE38;
}

public byte getFF_BENTYPE39() {
return FF_BENTYPE39;
}

public byte getFF_BENTYPE40() {
return FF_BENTYPE40;
}

public byte getFF_BENTYPE41() {
return FF_BENTYPE41;
}

public byte getFF_EMPLW() {
return FF_EMPLW;
}

public byte getFF_EVERINT() {
return FF_EVERINT;
}

public byte getFF_IVINTLANG() {
return FF_IVINTLANG;
}

public byte getFF_IVLOLW() {
return FF_IVLOLW;
}

public byte getFF_JBMNGR() {
return FF_JBMNGR;
}

public byte getFF_JBSEMP() {
return FF_JBSEMP;
}

public byte getFF_JBSIZE() {
return FF_JBSIZE;
}

public byte getFF_JBSTAT() {
return FF_JBSTAT;
}

public byte getFF_OPRLG() {
return FF_OPRLG;
}

public byte getFF_OPRLG0() {
return FF_OPRLG0;
}

public byte getFF_OPRLG0NI() {
return FF_OPRLG0NI;
}

public byte getFF_TEL() {
return FF_TEL;
}

public byte getFF_UKBORN() {
return FF_UKBORN;
}

public short getFF_YR2UK4() {
return FF_YR2UK4;
}

protected double FIBENOTHR_DV() {
return FIBENOTHR_DV;
}

protected double FIBENOTHR_IF() {
return FIBENOTHR_IF;
}

public byte getFIBENOTHR_TC() {
return FIBENOTHR_TC;
}

protected double FIMNGRS_IF() {
return FIMNGRS_IF;
}

public byte getFIMNGRS_TC() {
return FIMNGRS_TC;
}

protected double FIMNINVNET_DV() {
return FIMNINVNET_DV;
}

protected double FIMNLABGRS_IF() {
return FIMNLABGRS_IF;
}

public byte getFIMNLABGRS_TC() {
return FIMNLABGRS_TC;
}

protected double FIMNLABNET_DV() {
return FIMNLABNET_DV;
}

public byte getFIMNLABNET_TC() {
return FIMNLABNET_TC;
}

protected double FIMNMISC_DV() {
return FIMNMISC_DV;
}

protected double FIMNNET_DV() {
return FIMNNET_DV;
}

protected double FIMNPEN_DV() {
return FIMNPEN_DV;
}

protected double FIMNPRBEN_DV() {
return FIMNPRBEN_DV;
}

protected double FIMNSBEN_DV() {
return FIMNSBEN_DV;
}

public byte getFINFUT() {
return FINFUT;
}

public byte getFIYRDB1() {
return FIYRDB1;
}

public byte getFIYRDB2() {
return FIYRDB2;
}

public byte getFIYRDB3() {
return FIYRDB3;
}

public byte getFIYRDB4() {
return FIYRDB4;
}

public byte getFIYRDB5() {
return FIYRDB5;
}

public byte getFIYRDB6() {
return FIYRDB6;
}

public int getFIYRDIA() {
return FIYRDIA;
}

protected double FIYRINVINC_DV() {
return FIYRINVINC_DV;
}

public byte getFIYRINVINC_IF() {
return FIYRINVINC_IF;
}

public byte getFIYRINVINC_TC() {
return FIYRINVINC_TC;
}

public byte getFLAGLINKB1() {
return FLAGLINKB1;
}

public byte getFLAGLINKB2() {
return FLAGLINKB2;
}

public byte getFLAGLINKB3() {
return FLAGLINKB3;
}

public int getFNPID() {
return FNPID;
}

public byte getFNPNO() {
return FNPNO;
}

public int getFNSPID() {
return FNSPID;
}

public byte getFNSPNO() {
return FNSPNO;
}

public byte getFOOD1() {
return FOOD1;
}

public byte getFOOD2() {
return FOOD2;
}

public byte getFOOD3() {
return FOOD3;
}

public byte getFOOD4() {
return FOOD4;
}

public byte getFOOD5() {
return FOOD5;
}

public byte getFOOD6() {
return FOOD6;
}

public byte getFOOD7() {
return FOOD7;
}

public byte getFORMDIF() {
return FORMDIF;
}

public byte getFRDRG() {
return FRDRG;
}

public byte getFROBULLI() {
return FROBULLI;
}

public byte getFROBULLY() {
return FROBULLY;
}

public byte getFRPBULLI() {
return FRPBULLI;
}

public byte getFRPBULLY() {
return FRPBULLY;
}

public byte getFRUVEGE() {
return FRUVEGE;
}

public byte getFT2ENDM1() {
return FT2ENDM1;
}

public byte getFT2ENDM2() {
return FT2ENDM2;
}

public short getFT2ENDY41() {
return FT2ENDY41;
}

public short getFT2ENDY42() {
return FT2ENDY42;
}

public byte getFTEDANY() {
return FTEDANY;
}

public byte getFTEDEND1() {
return FTEDEND1;
}

public byte getFTEDEND2() {
return FTEDEND2;
}

public byte getFTEDMOR1() {
return FTEDMOR1;
}

public byte getFTEDMOR2() {
return FTEDMOR2;
}

public byte getFTEDSTARTM1() {
return FTEDSTARTM1;
}

public byte getFTEDSTARTM2() {
return FTEDSTARTM2;
}

public short getFTEDSTARTY41() {
return FTEDSTARTY41;
}

public short getFTEDSTARTY42() {
return FTEDSTARTY42;
}

public byte getFTENDM() {
return FTENDM;
}

public short getFTENDY4() {
return FTENDY4;
}

public int getFTEXV() {
return FTEXV;
}

public byte getFTEXW() {
return FTEXW;
}

public byte getFTQUALS() {
return FTQUALS;
}

public short getFUTRA() {
return FUTRA;
}

public short getFUTRB() {
return FUTRB;
}

public short getFUTRC() {
return FUTRC;
}

public short getFUTRD() {
return FUTRD;
}

public short getFUTRE() {
return FUTRE;
}

public short getFUTRF() {
return FUTRF;
}

public short getFUTRG() {
return FUTRG;
}

public short getFUTRH() {
return FUTRH;
}

public short getFUTRI() {
return FUTRI;
}

public short getFUTRJ() {
return FUTRJ;
}

public short getFUTRK() {
return FUTRK;
}

public short getFUTRL() {
return FUTRL;
}

public byte getGIVECOA() {
return GIVECOA;
}

public int getGRFPID() {
return GRFPID;
}

public byte getGRFPNO() {
return GRFPNO;
}

public int getGRMPID() {
return GRMPID;
}

public byte getGRMPNO() {
return GRMPNO;
}

public byte getHASEMAIL() {
return HASEMAIL;
}

public byte getHASSTEP() {
return HASSTEP;
}

public byte getHCOND1() {
return HCOND1;
}

public byte getHCOND10() {
return HCOND10;
}

public byte getHCOND11() {
return HCOND11;
}

public byte getHCOND12() {
return HCOND12;
}

public byte getHCOND13() {
return HCOND13;
}

public byte getHCOND14() {
return HCOND14;
}

public byte getHCOND15() {
return HCOND15;
}

public byte getHCOND16() {
return HCOND16;
}

public byte getHCOND17() {
return HCOND17;
}

public byte getHCOND2() {
return HCOND2;
}

public byte getHCOND3() {
return HCOND3;
}

public byte getHCOND4() {
return HCOND4;
}

public byte getHCOND5() {
return HCOND5;
}

public byte getHCOND6() {
return HCOND6;
}

public byte getHCOND7() {
return HCOND7;
}

public byte getHCOND8() {
return HCOND8;
}

public byte getHCOND9() {
return HCOND9;
}

public byte getHCOND96() {
return HCOND96;
}

public byte getHCONDA01() {
return HCONDA01;
}

public byte getHCONDA02() {
return HCONDA02;
}

public byte getHCONDA03() {
return HCONDA03;
}

public byte getHCONDA04() {
return HCONDA04;
}

public byte getHCONDA05() {
return HCONDA05;
}

public byte getHCONDA06() {
return HCONDA06;
}

public byte getHCONDA07() {
return HCONDA07;
}

public byte getHCONDA08() {
return HCONDA08;
}

public byte getHCONDA09() {
return HCONDA09;
}

public byte getHCONDA10() {
return HCONDA10;
}

public byte getHCONDA11() {
return HCONDA11;
}

public byte getHCONDA12() {
return HCONDA12;
}

public byte getHCONDA13() {
return HCONDA13;
}

public byte getHCONDA14() {
return HCONDA14;
}

public byte getHCONDA15() {
return HCONDA15;
}

public byte getHCONDA16() {
return HCONDA16;
}

public byte getHCONDA17() {
return HCONDA17;
}

public byte getHCONDN1() {
return HCONDN1;
}

public byte getHCONDN10() {
return HCONDN10;
}

public byte getHCONDN11() {
return HCONDN11;
}

public byte getHCONDN12() {
return HCONDN12;
}

public byte getHCONDN13() {
return HCONDN13;
}

public byte getHCONDN14() {
return HCONDN14;
}

public byte getHCONDN15() {
return HCONDN15;
}

public byte getHCONDN16() {
return HCONDN16;
}

public byte getHCONDN17() {
return HCONDN17;
}

public byte getHCONDN2() {
return HCONDN2;
}

public byte getHCONDN3() {
return HCONDN3;
}

public byte getHCONDN4() {
return HCONDN4;
}

public byte getHCONDN5() {
return HCONDN5;
}

public byte getHCONDN6() {
return HCONDN6;
}

public byte getHCONDN7() {
return HCONDN7;
}

public byte getHCONDN8() {
return HCONDN8;
}

public byte getHCONDN9() {
return HCONDN9;
}

public byte getHCONDN96() {
return HCONDN96;
}

public byte getHCONDNO1() {
return HCONDNO1;
}

public byte getHCONDNO2() {
return HCONDNO2;
}

public byte getHCONDNO3() {
return HCONDNO3;
}

public byte getHCONDNO4() {
return HCONDNO4;
}

public byte getHCONDNO5() {
return HCONDNO5;
}

public byte getHCONDNO6() {
return HCONDNO6;
}

public byte getHCONDNO7() {
return HCONDNO7;
}

public byte getHCONDNS1() {
return HCONDNS1;
}

public byte getHCONDNS2() {
return HCONDNS2;
}

public byte getHCONDNS3() {
return HCONDNS3;
}

public byte getHCONDNS4() {
return HCONDNS4;
}

public byte getHCONDNS5() {
return HCONDNS5;
}

public byte getHCONDNS6() {
return HCONDNS6;
}

public byte getHCONDNS7() {
return HCONDNS7;
}

public byte getHCONDS01() {
return HCONDS01;
}

public byte getHCONDS02() {
return HCONDS02;
}

public byte getHCONDS03() {
return HCONDS03;
}

public byte getHCONDS04() {
return HCONDS04;
}

public byte getHCONDS05() {
return HCONDS05;
}

public byte getHCONDS08() {
return HCONDS08;
}

public byte getHCONDS09() {
return HCONDS09;
}

public byte getHCONDS10() {
return HCONDS10;
}

public byte getHCONDS11() {
return HCONDS11;
}

public byte getHCONDS12() {
return HCONDS12;
}

public byte getHCONDS13() {
return HCONDS13;
}

public byte getHCONDS14() {
return HCONDS14;
}

public byte getHCONDS15() {
return HCONDS15;
}

public byte getHCONDS16() {
return HCONDS16;
}

public byte getHCONDS17() {
return HCONDS17;
}

public byte getHEALTH() {
return HEALTH;
}

public boolean getHEALTHKIDSN() {
return HEALTHKIDSN;
}

public byte getHEALTHSN() {
return HEALTHSN;
}

public byte getHEDLIK() {
return HEDLIK;
}

public byte getHEDNT() {
return HEDNT;
}

public byte getHEDNTO_CODE() {
return HEDNTO_CODE;
}

public byte getHERFREQ() {
return HERFREQ;
}

public byte getHERITAGE1() {
return HERITAGE1;
}

public byte getHERITAGE2() {
return HERITAGE2;
}

public byte getHERITAGE3() {
return HERITAGE3;
}

public byte getHERITAGE4() {
return HERITAGE4;
}

public byte getHERITAGE5() {
return HERITAGE5;
}

public byte getHERITAGE6() {
return HERITAGE6;
}

public byte getHERITAGE7() {
return HERITAGE7;
}

public byte getHERITAGE8() {
return HERITAGE8;
}

public byte getHERITAGE96() {
return HERITAGE96;
}

public byte getHESACONS() {
return HESACONS;
}

public byte getHGADOPTF() {
return HGADOPTF;
}

public byte getHGADOPTM() {
return HGADOPTM;
}

public byte getHGPART() {
return HGPART;
}

public byte getHHRESP_DV() {
return HHRESP_DV;
}

public byte getHHTYPDV() {
return HHTYPDV;
}

public byte getHITSIB() {
return HITSIB;
}

public byte getHLPHMWK() {
return HLPHMWK;
}

public byte getHLTHISGN() {
return HLTHISGN;
}

public byte getHLTHKIDLINK() {
return HLTHKIDLINK;
}

public byte getHLTHLINK() {
return HLTHLINK;
}

public byte getHLTHLINKB1() {
return HLTHLINKB1;
}

public byte getHLTHLINKB2() {
return HLTHLINKB2;
}

public byte getHLTHLINKB3() {
return HLTHLINKB3;
}

public byte getHLTHRECD() {
return HLTHRECD;
}

public byte getHLTHRSGN() {
return HLTHRSGN;
}

public byte getHMRCLINK() {
return HMRCLINK;
}

public byte getHOSPC1() {
return HOSPC1;
}

public byte getHOSPC2() {
return HOSPC2;
}

public byte getHOSPC3() {
return HOSPC3;
}

public byte getHOSPC4() {
return HOSPC4;
}

public byte getHOSPC5() {
return HOSPC5;
}

public byte getHOSPC6() {
return HOSPC6;
}

public byte getHOSPC7() {
return HOSPC7;
}

public short getHOSPDC1() {
return HOSPDC1;
}

public short getHOSPDC2() {
return HOSPDC2;
}

public short getHOSPDC3() {
return HOSPDC3;
}

public byte getHOSPDC4() {
return HOSPDC4;
}

public byte getHOSPDC5() {
return HOSPDC5;
}

public byte getHOSPDC6() {
return HOSPDC6;
}

public byte getHOSPDC7() {
return HOSPDC7;
}

public byte getHOUSING() {
return HOUSING;
}

public int getHRPID() {
return HRPID;
}

public byte getHRPNO() {
return HRPNO;
}

public byte getIENDDATD() {
return IENDDATD;
}

public byte getIENDDATM() {
return IENDDATM;
}

public byte getIENDDATMM() {
return IENDDATMM;
}

public byte getIENDDATSS() {
return IENDDATSS;
}

public short getIENDDATY() {
return IENDDATY;
}

protected double IND5MUS_LW() {
return IND5MUS_LW;
}

protected double IND5MUS_XW() {
return IND5MUS_XW;
}

protected double INDBD91_LW() {
return INDBD91_LW;
}

protected double INDBDUB_LW() {
return INDBDUB_LW;
}

protected double INDIN01_LW() {
return INDIN01_LW;
}

protected double INDIN91_LW() {
return INDIN91_LW;
}

protected double INDINUB_LW() {
return INDINUB_LW;
}

protected double INDINUB_XW() {
return INDINUB_XW;
}

protected double INDINUS_LW() {
return INDINUS_LW;
}

public byte getINDMODE() {
return INDMODE;
}

protected double INDNS91_LW() {
return INDNS91_LW;
}

protected double INDNSUB_LW() {
return INDNSUB_LW;
}

protected double INDPXUB_LW() {
return INDPXUB_LW;
}

protected double INDPXUB_XW() {
return INDPXUB_XW;
}

protected double INDPXUS_LW() {
return INDPXUS_LW;
}

protected double INDSCUB_LW() {
return INDSCUB_LW;
}

protected double INDSCUB_XW() {
return INDSCUB_XW;
}

protected double INDSCUS_LW() {
return INDSCUS_LW;
}

public byte getINSTOK() {
return INSTOK;
}

public byte getINSTOK2() {
return INSTOK2;
}

public byte getINSTOK3() {
return INSTOK3;
}

public byte getINSTOK4() {
return INSTOK4;
}

public byte getINSULTED1() {
return INSULTED1;
}

public byte getINSULTED10() {
return INSULTED10;
}

public byte getINSULTED11() {
return INSULTED11;
}

public byte getINSULTED2() {
return INSULTED2;
}

public byte getINSULTED3() {
return INSULTED3;
}

public byte getINSULTED4() {
return INSULTED4;
}

public byte getINSULTED5() {
return INSULTED5;
}

public byte getINSULTED6() {
return INSULTED6;
}

public byte getINSULTED7() {
return INSULTED7;
}

public byte getINSULTED8() {
return INSULTED8;
}

public byte getINSULTED9() {
return INSULTED9;
}

public byte getINSULTED96() {
return INSULTED96;
}

public byte getINSULTED97() {
return INSULTED97;
}

public byte getINSULTEDO_CODE() {
return INSULTEDO_CODE;
}

public byte getINSULTED_DV() {
return INSULTED_DV;
}

public byte getINTCONTACT() {
return INTCONTACT;
}

public byte getINTDATD_DV() {
return INTDATD_DV;
}

public byte getINTDATM_DV() {
return INTDATM_DV;
}

public short getINTDATY_DV() {
return INTDATY_DV;
}

public byte getINTSIGNHEALTH() {
return INTSIGNHEALTH;
}

public byte getINVITRO1() {
return INVITRO1;
}

public byte getINVITRO2() {
return INVITRO2;
}

public byte getINVITRO3() {
return INVITRO3;
}

public byte getIOUTCOME() {
return IOUTCOME;
}

public byte getISTRTDATMM() {
return ISTRTDATMM;
}

public byte getISTRTDATSS() {
return ISTRTDATSS;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public short getISYEAR() {
return ISYEAR;
}

public byte getIVAFFCT11() {
return IVAFFCT11;
}

public byte getIVAFFCT12() {
return IVAFFCT12;
}

public byte getIVAFFCT13() {
return IVAFFCT13;
}

public byte getIVAFFCT14() {
return IVAFFCT14;
}

public byte getIVAFFCT15() {
return IVAFFCT15;
}

public byte getIVAFFCT17() {
return IVAFFCT17;
}

public byte getIVAFFCT21() {
return IVAFFCT21;
}

public byte getIVAFFCT22() {
return IVAFFCT22;
}

public byte getIVAFFCT23() {
return IVAFFCT23;
}

public byte getIVAFFCT27() {
return IVAFFCT27;
}

public byte getIVAFFCT30() {
return IVAFFCT30;
}

public byte getIVAFFCT97() {
return IVAFFCT97;
}

public byte getIVCOOP() {
return IVCOOP;
}

public byte getIVINFNCE() {
return IVINFNCE;
}

public byte getIVLIBAL() {
return IVLIBAL;
}

public byte getIVLIENG() {
return IVLIENG;
}

public byte getIVLITRANS() {
return IVLITRANS;
}

public byte getIVLIWHO() {
return IVLIWHO;
}

public byte getJ1BOSS() {
return J1BOSS;
}

public byte getJ1MNGR() {
return J1MNGR;
}

public byte getJ1NONE() {
return J1NONE;
}

public byte getJ1NSSEC5_DV() {
return J1NSSEC5_DV;
}

public byte getJ1SEMP() {
return J1SEMP;
}

public short getJ1SOC00_CC() {
return J1SOC00_CC;
}

public short getJ1SOC10_CC() {
return J1SOC10_CC;
}

public byte getJ1SOC90_CC() {
return J1SOC90_CC;
}

public byte getJ2NSSEC5_DV() {
return J2NSSEC5_DV;
}

public int getJ2PAY() {
return J2PAY;
}

protected double J2PAYNET_DV() {
return J2PAYNET_DV;
}

public short getJ2SOC00_CC() {
return J2SOC00_CC;
}

public short getJ2SOC10_CC() {
return J2SOC10_CC;
}

public short getJ2SOC90_CC() {
return J2SOC90_CC;
}

public byte getJBATT1() {
return JBATT1;
}

public byte getJBATT2() {
return JBATT2;
}

public byte getJBATT3() {
return JBATT3;
}

public byte getJBATT4() {
return JBATT4;
}

public byte getJBATT5() {
return JBATT5;
}

public byte getJBATT6() {
return JBATT6;
}

public byte getJBBGDATD() {
return JBBGDATD;
}

public byte getJBBGDATM() {
return JBBGDATM;
}

public short getJBBGDATY() {
return JBBGDATY;
}

public byte getJBENDD() {
return JBENDD;
}

public byte getJBENDM() {
return JBENDM;
}

public byte getJBENDREAS() {
return JBENDREAS;
}

public short getJBENDY4() {
return JBENDY4;
}

public byte getJBES2000() {
return JBES2000;
}

public byte getJBIINDB_DV() {
return JBIINDB_DV;
}

public byte getJBMNGRCHK() {
return JBMNGRCHK;
}

public byte getJBNSSEC3_DV() {
return JBNSSEC3_DV;
}

public byte getJBNSSEC5_DV() {
return JBNSSEC5_DV;
}

public short getJBNSSEC_DV() {
return JBNSSEC_DV;
}

public byte getJBOFFY() {
return JBOFFY;
}

public short getJBRGSC_DV() {
return JBRGSC_DV;
}

public byte getJBSAMR() {
return JBSAMR;
}

public byte getJBSAT() {
return JBSAT;
}

public byte getJBSECTPUB() {
return JBSECTPUB;
}

public short getJBSEG_DV() {
return JBSEG_DV;
}

public byte getJBSEMPCHK() {
return JBSEMPCHK;
}

public byte getJBSIC07CHK() {
return JBSIC07CHK;
}

public byte getJBSIC07_CC() {
return JBSIC07_CC;
}

public byte getJBSIZECHK() {
return JBSIZECHK;
}

public byte getJBSOC00CHK() {
return JBSOC00CHK;
}

public short getJBSOC00_CC() {
return JBSOC00_CC;
}

public short getJBSOC10_CC() {
return JBSOC10_CC;
}

public byte getJBSOCGR_DV() {
return JBSOCGR_DV;
}

public byte getJBTERM1() {
return JBTERM1;
}

public byte getJBTERM2() {
return JBTERM2;
}

public byte getJLENDM() {
return JLENDM;
}

public byte getJLES2000() {
return JLES2000;
}

public byte getJLIINDB_DV() {
return JLIINDB_DV;
}

public byte getJLNSSEC3_DV() {
return JLNSSEC3_DV;
}

public byte getJLNSSEC5_DV() {
return JLNSSEC5_DV;
}

public short getJLNSSEC_DV() {
return JLNSSEC_DV;
}

public short getJLRGSC_DV() {
return JLRGSC_DV;
}

public short getJLSEG_DV() {
return JLSEG_DV;
}

public byte getJLSIC07_CC() {
return JLSIC07_CC;
}

public short getJLSOC00_CC() {
return JLSOC00_CC;
}

public short getJLSOC10_CC() {
return JLSOC10_CC;
}

public byte getJOBDENY() {
return JOBDENY;
}

public byte getJOBHOURS1() {
return JOBHOURS1;
}

public byte getJOBHOURS2() {
return JOBHOURS2;
}

public byte getJOBHOURS3() {
return JOBHOURS3;
}

public byte getJOBHOURS4() {
return JOBHOURS4;
}

public byte getJOBHOURS5() {
return JOBHOURS5;
}

public byte getJOBHOURS6() {
return JOBHOURS6;
}

public byte getJOBLOOK() {
return JOBLOOK;
}

public byte getJSPART() {
return JSPART;
}

public int getJSPAYU() {
return JSPAYU;
}

public byte getJSPAYW() {
return JSPAYW;
}

public byte getJSPRLS() {
return JSPRLS;
}

public byte getJSPRNI() {
return JSPRNI;
}

public byte getJSPRTX() {
return JSPRTX;
}

public byte getJSPYNI() {
return JSPYNI;
}

public byte getJSPYTX() {
return JSPYTX;
}

public byte getJSTYPEB() {
return JSTYPEB;
}

public byte getJSWORKTRAV() {
return JSWORKTRAV;
}

public short getJUBGN() {
return JUBGN;
}

public short getJULK4X1() {
return JULK4X1;
}

public short getJULK4X2() {
return JULK4X2;
}

public byte getJULK4X3() {
return JULK4X3;
}

public short getJULK4X4() {
return JULK4X4;
}

public short getJULK4X5() {
return JULK4X5;
}

public short getJULK4X6() {
return JULK4X6;
}

public byte getJULK4X96() {
return JULK4X96;
}

public byte getKID2UNI01() {
return KID2UNI01;
}

public byte getKID2UNI02() {
return KID2UNI02;
}

public byte getKID2UNI03() {
return KID2UNI03;
}

public byte getKID2UNI04() {
return KID2UNI04;
}

public byte getKID2UNI05() {
return KID2UNI05;
}

public byte getKID2UNI06() {
return KID2UNI06;
}

public byte getKID2UNI07() {
return KID2UNI07;
}

public byte getKID2UNI08() {
return KID2UNI08;
}

public byte getKID2UNI09() {
return KID2UNI09;
}

public byte getKID2UNI10() {
return KID2UNI10;
}

public byte getKID2UNI11() {
return KID2UNI11;
}

public byte getKID2UNI12() {
return KID2UNI12;
}

public byte getKID2UNI13() {
return KID2UNI13;
}

public byte getKID2UNI14() {
return KID2UNI14;
}

public byte getKID2UNI15() {
return KID2UNI15;
}

public byte getKID2UNI16() {
return KID2UNI16;
}

public byte getKIDSPT() {
return KIDSPT;
}

public byte getLADOPT() {
return LADOPT;
}

public byte getLATE() {
return LATE;
}

public byte getLCHMOR() {
return LCHMOR;
}

public byte getLCHMORN() {
return LCHMORN;
}

public byte getLCHMULTI1() {
return LCHMULTI1;
}

public byte getLCHMULTI2() {
return LCHMULTI2;
}

public byte getLCHMULTI3() {
return LCHMULTI3;
}

public byte getLCOHNPI() {
return LCOHNPI;
}

protected double LENINDINTV() {
return LENINDINTV;
}

public byte getLEVELIMP() {
return LEVELIMP;
}

public byte getLGAPED() {
return LGAPED;
}

public byte getLIBFREQ() {
return LIBFREQ;
}

public byte getLIENG() {
return LIENG;
}

public byte getLIHOW() {
return LIHOW;
}

public byte getLINGUA() {
return LINGUA;
}

public byte getLITRANS() {
return LITRANS;
}

public byte getLIVESP() {
return LIVESP;
}

public boolean getLIVESP_DV() {
return LIVESP_DV;
}

public byte getLIVEWITH() {
return LIVEWITH;
}

public byte getLIWHO() {
return LIWHO;
}

public byte getLMAR1M() {
return LMAR1M;
}

public short getLMAR1Y() {
return LMAR1Y;
}

public byte getLMCBM1() {
return LMCBM1;
}

public byte getLMCBM2() {
return LMCBM2;
}

public byte getLMCBM3() {
return LMCBM3;
}

public byte getLMCBM4() {
return LMCBM4;
}

public short getLMCBY41() {
return LMCBY41;
}

public short getLMCBY42() {
return LMCBY42;
}

public short getLMCBY43() {
return LMCBY43;
}

public short getLMCBY44() {
return LMCBY44;
}

public byte getLMSPM1() {
return LMSPM1;
}

public byte getLMSPM2() {
return LMSPM2;
}

public byte getLMSPM3() {
return LMSPM3;
}

public byte getLMSPM4() {
return LMSPM4;
}

public short getLMSPY41() {
return LMSPY41;
}

public short getLMSPY42() {
return LMSPY42;
}

public short getLMSPY43() {
return LMSPY43;
}

public short getLMSPY44() {
return LMSPY44;
}

public byte getLNADOPT() {
return LNADOPT;
}

public byte getLNPRNT() {
return LNPRNT;
}

public byte getLPRNT() {
return LPRNT;
}

public byte getLVHM() {
return LVHM;
}

public byte getLVREL1() {
return LVREL1;
}

public byte getLVREL10() {
return LVREL10;
}

public byte getLVREL2() {
return LVREL2;
}

public byte getLVREL3() {
return LVREL3;
}

public byte getLVREL4() {
return LVREL4;
}

public byte getLVREL5() {
return LVREL5;
}

public byte getLVREL6() {
return LVREL6;
}

public byte getLVREL7() {
return LVREL7;
}

public byte getLVREL8() {
return LVREL8;
}

public byte getLVREL9() {
return LVREL9;
}

public byte getLVREL96() {
return LVREL96;
}

public byte getLVSCHDO() {
return LVSCHDO;
}

public byte getLWWRONG() {
return LWWRONG;
}

public byte getMAAGE() {
return MAAGE;
}

public byte getMACOB() {
return MACOB;
}

public byte getMACON() {
return MACON;
}

public byte getMAFAR() {
return MAFAR;
}

public byte getMAJU() {
return MAJU;
}

public byte getMALONE() {
return MALONE;
}

public byte getMAMOSTCON() {
return MAMOSTCON;
}

public byte getMANSSEC5_DV() {
return MANSSEC5_DV;
}

public byte getMARSTAT() {
return MARSTAT;
}

public byte getMASEE() {
return MASEE;
}

public short getMASOC00_CC() {
return MASOC00_CC;
}

public short getMASOC10_CC() {
return MASOC10_CC;
}

public byte getMASOC90_CC() {
return MASOC90_CC;
}

public byte getMASTAT_DV() {
return MASTAT_DV;
}

public byte getMATLEAVE() {
return MATLEAVE;
}

public byte getMATLV() {
return MATLV;
}

public byte getMATLVENDD() {
return MATLVENDD;
}

public byte getMATLVENDM() {
return MATLVENDM;
}

public short getMATLVENDY4() {
return MATLVENDY4;
}

public byte getMATLVSTD() {
return MATLVSTD;
}

public byte getMATLVSTM() {
return MATLVSTM;
}

public short getMATLVSTY4() {
return MATLVSTY4;
}

public byte getMAYRUK() {
return MAYRUK;
}

public byte getMEMPLOY() {
return MEMPLOY;
}

public byte getMLA1() {
return MLA1;
}

public byte getMLA2() {
return MLA2;
}

public byte getMLA3() {
return MLA3;
}

public byte getMLA96() {
return MLA96;
}

public byte getMLAGST() {
return MLAGST;
}

public byte getMLAGSTU() {
return MLAGSTU;
}

public byte getMLFUTR() {
return MLFUTR;
}

public byte getMLRNOT1() {
return MLRNOT1;
}

public byte getMLRNOT10() {
return MLRNOT10;
}

public byte getMLRNOT11() {
return MLRNOT11;
}

public byte getMLRNOT12() {
return MLRNOT12;
}

public byte getMLRNOT13() {
return MLRNOT13;
}

public byte getMLRNOT2() {
return MLRNOT2;
}

public byte getMLRNOT3() {
return MLRNOT3;
}

public byte getMLRNOT4() {
return MLRNOT4;
}

public byte getMLRNOT5() {
return MLRNOT5;
}

public byte getMLRNOT6() {
return MLRNOT6;
}

public byte getMLRNOT7() {
return MLRNOT7;
}

public byte getMLRNOT8() {
return MLRNOT8;
}

public byte getMLRNOT9() {
return MLRNOT9;
}

public byte getMLRNOT97() {
return MLRNOT97;
}

public byte getMLSTATCHK() {
return MLSTATCHK;
}

public byte getMLWKFPT() {
return MLWKFPT;
}

public int getMNPID() {
return MNPID;
}

public byte getMNPNO() {
return MNPNO;
}

public int getMNSPID() {
return MNSPID;
}

public byte getMNSPNO() {
return MNSPNO;
}

public byte getMOBCOMP() {
return MOBCOMP;
}

public byte getMOBUSE() {
return MOBUSE;
}

public byte getMONTH() {
return MONTH;
}

public byte getMOVDIR() {
return MOVDIR;
}

public byte getMOVEOTH_CODE() {
return MOVEOTH_CODE;
}

public byte getMOVY11() {
return MOVY11;
}

public byte getMOVY12() {
return MOVY12;
}

public byte getMOVY13() {
return MOVY13;
}

public byte getMOVY14() {
return MOVY14;
}

public byte getMOVY15() {
return MOVY15;
}

public byte getMOVY16() {
return MOVY16;
}

public byte getMPWEB() {
return MPWEB;
}

public byte getMSTATCH1() {
return MSTATCH1;
}

public byte getMSTATCH2() {
return MSTATCH2;
}

public short getMSTATSAM() {
return MSTATSAM;
}

public byte getMSTATSAMN() {
return MSTATSAMN;
}

public byte getMUSFREQ() {
return MUSFREQ;
}

public byte getMVEVER() {
return MVEVER;
}

public byte getMVMNTH() {
return MVMNTH;
}

public short getMVYR() {
return MVYR;
}

public byte getN1619ABS() {
return N1619ABS;
}

public byte getNADOPTCH() {
return NADOPTCH;
}

public byte getNAIDXHH() {
return NAIDXHH;
}

public byte getNATCH01() {
return NATCH01;
}

public byte getNATCH02() {
return NATCH02;
}

public byte getNATCH03() {
return NATCH03;
}

public byte getNATCH04() {
return NATCH04;
}

public byte getNATCH05() {
return NATCH05;
}

public byte getNATCH06() {
return NATCH06;
}

public byte getNATCH07() {
return NATCH07;
}

public byte getNATCH08() {
return NATCH08;
}

public byte getNATCH09() {
return NATCH09;
}

public byte getNATCH10() {
return NATCH10;
}

public byte getNATCH11() {
return NATCH11;
}

public byte getNATCH12() {
return NATCH12;
}

public boolean getNATCH13() {
return NATCH13;
}

public boolean getNATCH14() {
return NATCH14;
}

public boolean getNATCH15() {
return NATCH15;
}

public boolean getNATCH16() {
return NATCH16;
}

public byte getNATID1() {
return NATID1;
}

public byte getNATID2() {
return NATID2;
}

public byte getNATID3() {
return NATID3;
}

public byte getNATID4() {
return NATID4;
}

public byte getNATID5() {
return NATID5;
}

public byte getNATID6() {
return NATID6;
}

public byte getNATID97() {
return NATID97;
}

public byte getNCARS() {
return NCARS;
}

public byte getNCH10() {
return NCH10;
}

public byte getNCH10TO15() {
return NCH10TO15;
}

public byte getNCH14RESP() {
return NCH14RESP;
}

public byte getNCH3RESP() {
return NCH3RESP;
}

public byte getNCH415RESP() {
return NCH415RESP;
}

public byte getNCH5RESP() {
return NCH5RESP;
}

public byte getNCH5TO15() {
return NCH5TO15;
}

public byte getNCH8RESP() {
return NCH8RESP;
}

public byte getNCHILD() {
return NCHILD;
}

public short getNCHILD_DV() {
return NCHILD_DV;
}

public byte getNCHRESP() {
return NCHRESP;
}

public byte getNCHUND18RESP() {
return NCHUND18RESP;
}

public byte getNCHUNDER16() {
return NCHUNDER16;
}

public short getNCIGS() {
return NCIGS;
}

public byte getNCRR1() {
return NCRR1;
}

public byte getNCRR11() {
return NCRR11;
}

public byte getNCRR12() {
return NCRR12;
}

public byte getNCRR3() {
return NCRR3;
}

public byte getNCRR4() {
return NCRR4;
}

public byte getNCRR5() {
return NCRR5;
}

public byte getNCRR6() {
return NCRR6;
}

public byte getNCRR8() {
return NCRR8;
}

public byte getNCRR9() {
return NCRR9;
}

public byte getNCRRM() {
return NCRRM;
}

public short getNCRRY4() {
return NCRRY4;
}

public byte getNDEPCHL_DV() {
return NDEPCHL_DV;
}

public byte getNETPUSE() {
return NETPUSE;
}

public byte getNETUSE() {
return NETUSE;
}

public byte getNEXT() {
return NEXT;
}

public byte getNEXT1() {
return NEXT1;
}

public byte getNEXT2() {
return NEXT2;
}

public byte getNEXT3() {
return NEXT3;
}

public byte getNEXT4() {
return NEXT4;
}

public byte getNEXT5() {
return NEXT5;
}

public byte getNEXT6() {
return NEXT6;
}

public byte getNEXTELSE1() {
return NEXTELSE1;
}

public byte getNEXTELSE2() {
return NEXTELSE2;
}

public byte getNEXTELSE3() {
return NEXTELSE3;
}

public byte getNEXTELSE4() {
return NEXTELSE4;
}

public byte getNEXTELSE5() {
return NEXTELSE5;
}

public byte getNEXTELSE6() {
return NEXTELSE6;
}

public byte getNEXTJOB1() {
return NEXTJOB1;
}

public byte getNEXTJOB2() {
return NEXTJOB2;
}

public byte getNEXTJOB3() {
return NEXTJOB3;
}

public byte getNEXTJOB4() {
return NEXTJOB4;
}

public byte getNEXTJOB5() {
return NEXTJOB5;
}

public byte getNEXTJOB6() {
return NEXTJOB6;
}

public byte getNEXTSTAT1() {
return NEXTSTAT1;
}

public byte getNEXTSTAT2() {
return NEXTSTAT2;
}

public byte getNEXTSTAT3() {
return NEXTSTAT3;
}

public byte getNEXTSTAT4() {
return NEXTSTAT4;
}

public byte getNEXTSTAT5() {
return NEXTSTAT5;
}

public byte getNEXTSTAT6() {
return NEXTSTAT6;
}

public byte getNFH01() {
return NFH01;
}

public byte getNFH02() {
return NFH02;
}

public byte getNFH03() {
return NFH03;
}

public byte getNFH04() {
return NFH04;
}

public byte getNFH05() {
return NFH05;
}

public byte getNFH06() {
return NFH06;
}

public byte getNFH07() {
return NFH07;
}

public byte getNFH08() {
return NFH08;
}

public byte getNFH09() {
return NFH09;
}

public byte getNFH10() {
return NFH10;
}

public byte getNFH11() {
return NFH11;
}

public byte getNFH12() {
return NFH12;
}

public byte getNFH13() {
return NFH13;
}

public byte getNFH14() {
return NFH14;
}

public byte getNFH15() {
return NFH15;
}

public byte getNFH16() {
return NFH16;
}

public byte getNFH17() {
return NFH17;
}

public byte getNFH18() {
return NFH18;
}

public byte getNFH19() {
return NFH19;
}

public byte getNFH20() {
return NFH20;
}

public byte getNFH21() {
return NFH21;
}

public byte getNFH22() {
return NFH22;
}

public byte getNFH23() {
return NFH23;
}

public byte getNFH24() {
return NFH24;
}

public byte getNFH25() {
return NFH25;
}

public byte getNFH26() {
return NFH26;
}

public byte getNFH27() {
return NFH27;
}

public byte getNFH28() {
return NFH28;
}

public byte getNFH29() {
return NFH29;
}

public byte getNFH30() {
return NFH30;
}

public byte getNFH31() {
return NFH31;
}

public byte getNFH32() {
return NFH32;
}

public byte getNFH33() {
return NFH33;
}

public byte getNFH34() {
return NFH34;
}

public byte getNFH35() {
return NFH35;
}

public byte getNFH36() {
return NFH36;
}

public byte getNFH37() {
return NFH37;
}

public byte getNFH38() {
return NFH38;
}

public byte getNFH39() {
return NFH39;
}

public byte getNGRP_DV() {
return NGRP_DV;
}

public byte getNHIQUAL_DV() {
return NHIQUAL_DV;
}

public byte getNIACT() {
return NIACT;
}

public byte getNIREL() {
return NIREL;
}

public byte getNISERPS() {
return NISERPS;
}

public byte getNJOBHIST() {
return NJOBHIST;
}

public byte getNMAR() {
return NMAR;
}

public byte getNMPSP_DV() {
return NMPSP_DV;
}

public byte getNNATCH() {
return NNATCH;
}

public byte getNNEWBORN() {
return NNEWBORN;
}

public byte getNNMPSP_DV() {
return NNMPSP_DV;
}

public byte getNNSIB_DV() {
return NNSIB_DV;
}

public byte getNNSSIB_DV() {
return NNSSIB_DV;
}

public byte getNOTEMPCHK() {
return NOTEMPCHK;
}

public byte getNPENSIONER_DV() {
return NPENSIONER_DV;
}

public byte getNPNS_DV() {
return NPNS_DV;
}

public byte getNPN_DV() {
return NPN_DV;
}

public byte getNQFHIGH_DV() {
return NQFHIGH_DV;
}

public byte getNRELS1() {
return NRELS1;
}

public byte getNRELS2() {
return NRELS2;
}

public byte getNRELS3() {
return NRELS3;
}

public byte getNRELS4() {
return NRELS4;
}

public byte getNRELS5() {
return NRELS5;
}

public byte getNRELS6() {
return NRELS6;
}

public byte getNUNDER16() {
return NUNDER16;
}

public byte getNUNDER16ABS() {
return NUNDER16ABS;
}

public byte getNUNDER20ABS() {
return NUNDER20ABS;
}

public byte getNUNMPSP_DV() {
return NUNMPSP_DV;
}

public byte getNXTENDREAS() {
return NXTENDREAS;
}

public byte getNXTJBENDD() {
return NXTJBENDD;
}

public byte getNXTJBENDM() {
return NXTJBENDM;
}

public short getNXTJBENDY4() {
return NXTJBENDY4;
}

public byte getNXTJBES() {
return NXTJBES;
}

public byte getNXTJBHRS() {
return NXTJBHRS;
}

public byte getNXTST() {
return NXTST;
}

public byte getNXTSTELSE() {
return NXTSTELSE;
}

public byte getNXTSTENDD() {
return NXTSTENDD;
}

public byte getNXTSTENDM() {
return NXTSTENDM;
}

public short getNXTSTENDY4() {
return NXTSTENDY4;
}

public byte getOCIMPA() {
return OCIMPA;
}

public byte getOCIMPB() {
return OCIMPB;
}

public byte getOCIMPE() {
return OCIMPE;
}

public byte getOCIMPF() {
return OCIMPF;
}

public byte getOCIMPI() {
return OCIMPI;
}

public byte getOCIMPK() {
return OCIMPK;
}

public byte getOCIMPL() {
return OCIMPL;
}

public byte getOHCH16() {
return OHCH16;
}

public byte getOLYMACT31() {
return OLYMACT31;
}

public byte getOLYMACT32() {
return OLYMACT32;
}

public byte getOLYMACT33() {
return OLYMACT33;
}

public byte getOLYMACT34() {
return OLYMACT34;
}

public byte getOLYMACT35() {
return OLYMACT35;
}

public byte getOLYMACT36() {
return OLYMACT36;
}

public byte getOLYMACT37() {
return OLYMACT37;
}

public byte getOLYMACT38() {
return OLYMACT38;
}

public byte getOLYMACT396() {
return OLYMACT396;
}

public byte getOLYMACT398() {
return OLYMACT398;
}

public byte getOLYMPAS31() {
return OLYMPAS31;
}

public byte getOLYMPAS32() {
return OLYMPAS32;
}

public byte getOLYMPAS33() {
return OLYMPAS33;
}

public byte getOLYMPAS34() {
return OLYMPAS34;
}

public byte getOLYMPAS35() {
return OLYMPAS35;
}

public byte getOLYMPAS396() {
return OLYMPAS396;
}

public byte getOLYMPAS398() {
return OLYMPAS398;
}

public byte getOPRLG() {
return OPRLG;
}

public byte getOPRLG0() {
return OPRLG0;
}

public byte getOPRLG0NI() {
return OPRLG0NI;
}

public byte getOPRLG1() {
return OPRLG1;
}

public byte getORIGADD() {
return ORIGADD;
}

public byte getOTHCONT() {
return OTHCONT;
}

public byte getOVTNSA() {
return OVTNSA;
}

public byte getOVTPAY() {
return OVTPAY;
}

protected double OVTRATE() {
return OVTRATE;
}

public byte getOVTREST() {
return OVTREST;
}

public byte getPAAGE() {
return PAAGE;
}

public byte getPAAID1() {
return PAAID1;
}

public byte getPAAID2() {
return PAAID2;
}

public byte getPAAID3() {
return PAAID3;
}

public byte getPAAID4() {
return PAAID4;
}

public byte getPAAID5() {
return PAAID5;
}

public byte getPAAID6() {
return PAAID6;
}

public byte getPAAID7() {
return PAAID7;
}

public byte getPAAID8() {
return PAAID8;
}

public byte getPAAID96() {
return PAAID96;
}

public byte getPAAID97() {
return PAAID97;
}

public byte getPACOB() {
return PACOB;
}

public byte getPACON() {
return PACON;
}

public byte getPAFAR() {
return PAFAR;
}

public byte getPAIDU1() {
return PAIDU1;
}

public byte getPAIDU2() {
return PAIDU2;
}

public byte getPAIDU3() {
return PAIDU3;
}

public byte getPAIDU4() {
return PAIDU4;
}

public byte getPAIDU5() {
return PAIDU5;
}

public byte getPAIDU6() {
return PAIDU6;
}

public byte getPAIDU7() {
return PAIDU7;
}

public byte getPAIDU8() {
return PAIDU8;
}

public byte getPAIDU96() {
return PAIDU96;
}

public byte getPAIDU97() {
return PAIDU97;
}

public byte getPAJU() {
return PAJU;
}

public byte getPALONE() {
return PALONE;
}

public byte getPAMOSTCON() {
return PAMOSTCON;
}

public byte getPANSSEC5_DV() {
return PANSSEC5_DV;
}

public byte getPARCHILD() {
return PARCHILD;
}

public byte getPAREVE() {
return PAREVE;
}

public byte getPARMAR() {
return PARMAR;
}

public byte getPARSCH() {
return PARSCH;
}

public byte getPASEE() {
return PASEE;
}

public short getPASOC00_CC() {
return PASOC00_CC;
}

public short getPASOC10_CC() {
return PASOC10_CC;
}

public byte getPASOC90_CC() {
return PASOC90_CC;
}

public byte getPAYGWC() {
return PAYGWC;
}

protected double PAYG_DV() {
return PAYG_DV;
}

public byte getPAYNWC() {
return PAYNWC;
}

public byte getPAYRUK() {
return PAYRUK;
}

public byte getPAYTYP() {
return PAYTYP;
}

public byte getPAYUWC() {
return PAYUWC;
}

protected double PAYU_DV() {
return PAYU_DV;
}

public byte getPBNFT1() {
return PBNFT1;
}

public byte getPBNFT10() {
return PBNFT10;
}

public byte getPBNFT11() {
return PBNFT11;
}

public byte getPBNFT12() {
return PBNFT12;
}

public byte getPBNFT13() {
return PBNFT13;
}

public byte getPBNFT2() {
return PBNFT2;
}

public byte getPBNFT3() {
return PBNFT3;
}

public byte getPBNFT4() {
return PBNFT4;
}

public byte getPBNFT5() {
return PBNFT5;
}

public byte getPBNFT6() {
return PBNFT6;
}

public byte getPBNFT7() {
return PBNFT7;
}

public byte getPBNFT8() {
return PBNFT8;
}

public byte getPBNFT9() {
return PBNFT9;
}

public byte getPBNFT96() {
return PBNFT96;
}

public byte getPENMEX() {
return PENMEX;
}

public byte getPENSIONER_DV() {
return PENSIONER_DV;
}

public int getPID() {
return PID;
}

public byte getPJBPTFT() {
return PJBPTFT;
}

public byte getPJSPTFT() {
return PJSPTFT;
}

public byte getPLIVPAR() {
return PLIVPAR;
}

public short getPLNOWM() {
return PLNOWM;
}

public short getPLNOWY4() {
return PLNOWY4;
}

public int getPN1PID() {
return PN1PID;
}

public byte getPN1PNO() {
return PN1PNO;
}

public byte getPN1SEX() {
return PN1SEX;
}

public int getPN2PID() {
return PN2PID;
}

public byte getPN2PNO() {
return PN2PNO;
}

public byte getPN2SEX() {
return PN2SEX;
}

public int getPNS1PID() {
return PNS1PID;
}

public byte getPNS1PNO() {
return PNS1PNO;
}

public byte getPNS1SEX() {
return PNS1SEX;
}

public int getPNS2PID() {
return PNS2PID;
}

public byte getPNS2PNO() {
return PNS2PNO;
}

public byte getPNS2SEX() {
return PNS2SEX;
}

public byte getPPENSIONER() {
return PPENSIONER;
}

public int getPPID() {
return PPID;
}

public byte getPPPEX() {
return PPPEX;
}

public byte getPPPEXM() {
return PPPEXM;
}

public byte getPPSEX() {
return PPSEX;
}

public byte getPRAISEKID() {
return PRAISEKID;
}

public byte getPREARN() {
return PREARN;
}

public byte getPREARNA() {
return PREARNA;
}

public byte getPREARNW() {
return PREARNW;
}

public byte getPREASON() {
return PREASON;
}

public byte getPREG() {
return PREG;
}

public byte getPREGEND1() {
return PREGEND1;
}

public byte getPREGEND2() {
return PREGEND2;
}

public byte getPREGEND3() {
return PREGEND3;
}

public byte getPREGFERT1() {
return PREGFERT1;
}

public byte getPREGFERT2() {
return PREGFERT2;
}

public byte getPREGFERT3() {
return PREGFERT3;
}

public byte getPREGM1() {
return PREGM1;
}

public byte getPREGM2() {
return PREGM2;
}

public byte getPREGM3() {
return PREGM3;
}

public byte getPREGOUT1() {
return PREGOUT1;
}

public byte getPREGOUT2() {
return PREGOUT2;
}

public byte getPREGOUT3() {
return PREGOUT3;
}

public byte getPREGSMK11() {
return PREGSMK11;
}

public byte getPREGSMK12() {
return PREGSMK12;
}

public byte getPREGSMK13() {
return PREGSMK13;
}

public byte getPREGSMK21() {
return PREGSMK21;
}

public byte getPREGSMK22() {
return PREGSMK22;
}

public byte getPREGSMK23() {
return PREGSMK23;
}

public byte getPREGSMK31() {
return PREGSMK31;
}

public byte getPREGSMK32() {
return PREGSMK32;
}

public byte getPREGSMK33() {
return PREGSMK33;
}

public byte getPREGSMOKE1() {
return PREGSMOKE1;
}

public byte getPREGSMOKE2() {
return PREGSMOKE2;
}

public byte getPREGSMOKE3() {
return PREGSMOKE3;
}

public short getPREGY41() {
return PREGY41;
}

public short getPREGY42() {
return PREGY42;
}

public short getPREGY43() {
return PREGY43;
}

public byte getPREL() {
return PREL;
}

public byte getPRFITB() {
return PRFITB;
}

public byte getPRFITBA() {
return PRFITBA;
}

public byte getPRFITBW() {
return PRFITBW;
}

public byte getPRIDE10() {
return PRIDE10;
}

public byte getPRIDE11() {
return PRIDE11;
}

public byte getPRIDE12() {
return PRIDE12;
}

public byte getPRIDE13() {
return PRIDE13;
}

public byte getPRIDE14() {
return PRIDE14;
}

public byte getPRIDE2() {
return PRIDE2;
}

public byte getPRIDE4A() {
return PRIDE4A;
}

public byte getPRIDE4B() {
return PRIDE4B;
}

public byte getPRIDE5() {
return PRIDE5;
}

public byte getPRIDE6() {
return PRIDE6;
}

public byte getPRIDE7() {
return PRIDE7;
}

public byte getPRIDE8() {
return PRIDE8;
}

public byte getPRIDE9() {
return PRIDE9;
}

public byte getPS1() {
return PS1;
}

public byte getPS10() {
return PS10;
}

public byte getPS11() {
return PS11;
}

public byte getPS12() {
return PS12;
}

public byte getPS13() {
return PS13;
}

public byte getPS14() {
return PS14;
}

public byte getPS15() {
return PS15;
}

public byte getPS16() {
return PS16;
}

public byte getPS17() {
return PS17;
}

public byte getPS18() {
return PS18;
}

public byte getPS19() {
return PS19;
}

public byte getPS2() {
return PS2;
}

public byte getPS20() {
return PS20;
}

public byte getPS21() {
return PS21;
}

public byte getPS22() {
return PS22;
}

public byte getPS23() {
return PS23;
}

public byte getPS24() {
return PS24;
}

public byte getPS25() {
return PS25;
}

public byte getPS26() {
return PS26;
}

public byte getPS27() {
return PS27;
}

public byte getPS28() {
return PS28;
}

public byte getPS29() {
return PS29;
}

public byte getPS3() {
return PS3;
}

public byte getPS30() {
return PS30;
}

public byte getPS31() {
return PS31;
}

public byte getPS32() {
return PS32;
}

public byte getPS4() {
return PS4;
}

public byte getPS5() {
return PS5;
}

public byte getPS6() {
return PS6;
}

public byte getPS7() {
return PS7;
}

public byte getPS8() {
return PS8;
}

public byte getPS9() {
return PS9;
}

public byte getPSDQA_DV() {
return PSDQA_DV;
}

public byte getPSDQB_DV() {
return PSDQB_DV;
}

public byte getPSDQC_DV() {
return PSDQC_DV;
}

public byte getPSNUMCH() {
return PSNUMCH;
}

public int getPSU() {
return PSU;
}

public byte getPYENRL() {
return PYENRL;
}

public byte getQFHIGH() {
return QFHIGH;
}

public boolean getQFHIGHFL_DV() {
return QFHIGHFL_DV;
}

public byte getQFHIGH_DV() {
return QFHIGH_DV;
}

public byte getQFVOC1() {
return QFVOC1;
}

public byte getQFVOC10() {
return QFVOC10;
}

public byte getQFVOC11() {
return QFVOC11;
}

public byte getQFVOC12() {
return QFVOC12;
}

public byte getQFVOC13() {
return QFVOC13;
}

public byte getQFVOC14() {
return QFVOC14;
}

public byte getQFVOC15() {
return QFVOC15;
}

public byte getQFVOC2() {
return QFVOC2;
}

public byte getQFVOC3() {
return QFVOC3;
}

public byte getQFVOC4() {
return QFVOC4;
}

public byte getQFVOC5() {
return QFVOC5;
}

public byte getQFVOC6() {
return QFVOC6;
}

public byte getQFVOC7() {
return QFVOC7;
}

public byte getQFVOC8() {
return QFVOC8;
}

public byte getQFVOC9() {
return QFVOC9;
}

public byte getQFVOC96() {
return QFVOC96;
}

public byte getQUALNEW1() {
return QUALNEW1;
}

public byte getQUALNEW10() {
return QUALNEW10;
}

public byte getQUALNEW11() {
return QUALNEW11;
}

public byte getQUALNEW13() {
return QUALNEW13;
}

public byte getQUALNEW15() {
return QUALNEW15;
}

public byte getQUALNEW16() {
return QUALNEW16;
}

public byte getQUALNEW17() {
return QUALNEW17;
}

public byte getQUALNEW18() {
return QUALNEW18;
}

public byte getQUALNEW19() {
return QUALNEW19;
}

public byte getQUALNEW2() {
return QUALNEW2;
}

public byte getQUALNEW20() {
return QUALNEW20;
}

public byte getQUALNEW21() {
return QUALNEW21;
}

public byte getQUALNEW22() {
return QUALNEW22;
}

public byte getQUALNEW23() {
return QUALNEW23;
}

public byte getQUALNEW24() {
return QUALNEW24;
}

public byte getQUALNEW25() {
return QUALNEW25;
}

public byte getQUALNEW26() {
return QUALNEW26;
}

public byte getQUALNEW27() {
return QUALNEW27;
}

public byte getQUALNEW28() {
return QUALNEW28;
}

public byte getQUALNEW29() {
return QUALNEW29;
}

public byte getQUALNEW3() {
return QUALNEW3;
}

public byte getQUALNEW30() {
return QUALNEW30;
}

public byte getQUALNEW31() {
return QUALNEW31;
}

public byte getQUALNEW4() {
return QUALNEW4;
}

public byte getQUALNEW5() {
return QUALNEW5;
}

public byte getQUALNEW6() {
return QUALNEW6;
}

public byte getQUALNEW7() {
return QUALNEW7;
}

public byte getQUALNEW8() {
return QUALNEW8;
}

public byte getQUALNEW9() {
return QUALNEW9;
}

public byte getQUALOC() {
return QUALOC;
}

public byte getQUARREL() {
return QUARREL;
}

public byte getRACEL() {
return RACEL;
}

public byte getRACELAT() {
return RACELAT;
}

public byte getRACELBT() {
return RACELBT;
}

public byte getRACELMT() {
return RACELMT;
}

public byte getRACELOT_CODE() {
return RACELOT_CODE;
}

public short getRACELO_CODE() {
return RACELO_CODE;
}

public byte getRACELT() {
return RACELT;
}

public byte getRACELWT() {
return RACELWT;
}

public byte getRACEL_DV() {
return RACEL_DV;
}

public byte getREADDIF() {
return READDIF;
}

public byte getREASEND1() {
return REASEND1;
}

public byte getREASEND2() {
return REASEND2;
}

public byte getREASEND3() {
return REASEND3;
}

public byte getREASEND4() {
return REASEND4;
}

public byte getREASEND5() {
return REASEND5;
}

public byte getREASEND6() {
return REASEND6;
}

public byte getRELKID() {
return RELKID;
}

public byte getRELUP() {
return RELUP;
}

public byte getREMAIL_CODE() {
return REMAIL_CODE;
}

public byte getRESATTACKED1_1() {
return RESATTACKED1_1;
}

public byte getRESATTACKED1_10() {
return RESATTACKED1_10;
}

public byte getRESATTACKED1_11() {
return RESATTACKED1_11;
}

public byte getRESATTACKED1_12() {
return RESATTACKED1_12;
}

public byte getRESATTACKED1_2() {
return RESATTACKED1_2;
}

public byte getRESATTACKED1_3() {
return RESATTACKED1_3;
}

public byte getRESATTACKED1_4() {
return RESATTACKED1_4;
}

public byte getRESATTACKED1_5() {
return RESATTACKED1_5;
}

public byte getRESATTACKED1_6() {
return RESATTACKED1_6;
}

public byte getRESATTACKED1_7() {
return RESATTACKED1_7;
}

public byte getRESATTACKED1_8() {
return RESATTACKED1_8;
}

public byte getRESATTACKED1_9() {
return RESATTACKED1_9;
}

public byte getRESATTACKED2_1() {
return RESATTACKED2_1;
}

public byte getRESATTACKED2_10() {
return RESATTACKED2_10;
}

public byte getRESATTACKED2_11() {
return RESATTACKED2_11;
}

public byte getRESATTACKED2_12() {
return RESATTACKED2_12;
}

public byte getRESATTACKED2_2() {
return RESATTACKED2_2;
}

public byte getRESATTACKED2_3() {
return RESATTACKED2_3;
}

public byte getRESATTACKED2_4() {
return RESATTACKED2_4;
}

public byte getRESATTACKED2_5() {
return RESATTACKED2_5;
}

public byte getRESATTACKED2_6() {
return RESATTACKED2_6;
}

public byte getRESATTACKED2_7() {
return RESATTACKED2_7;
}

public byte getRESATTACKED2_8() {
return RESATTACKED2_8;
}

public byte getRESATTACKED2_9() {
return RESATTACKED2_9;
}

public byte getRESATTACKED3_1() {
return RESATTACKED3_1;
}

public byte getRESATTACKED3_10() {
return RESATTACKED3_10;
}

public byte getRESATTACKED3_11() {
return RESATTACKED3_11;
}

public byte getRESATTACKED3_12() {
return RESATTACKED3_12;
}

public byte getRESATTACKED3_2() {
return RESATTACKED3_2;
}

public byte getRESATTACKED3_3() {
return RESATTACKED3_3;
}

public byte getRESATTACKED3_4() {
return RESATTACKED3_4;
}

public byte getRESATTACKED3_5() {
return RESATTACKED3_5;
}

public byte getRESATTACKED3_6() {
return RESATTACKED3_6;
}

public byte getRESATTACKED3_7() {
return RESATTACKED3_7;
}

public byte getRESATTACKED3_8() {
return RESATTACKED3_8;
}

public byte getRESATTACKED3_9() {
return RESATTACKED3_9;
}

public byte getRESATTACKED4_1() {
return RESATTACKED4_1;
}

public byte getRESATTACKED4_10() {
return RESATTACKED4_10;
}

public byte getRESATTACKED4_11() {
return RESATTACKED4_11;
}

public byte getRESATTACKED4_12() {
return RESATTACKED4_12;
}

public byte getRESATTACKED4_2() {
return RESATTACKED4_2;
}

public byte getRESATTACKED4_3() {
return RESATTACKED4_3;
}

public byte getRESATTACKED4_4() {
return RESATTACKED4_4;
}

public byte getRESATTACKED4_5() {
return RESATTACKED4_5;
}

public byte getRESATTACKED4_6() {
return RESATTACKED4_6;
}

public byte getRESATTACKED4_7() {
return RESATTACKED4_7;
}

public byte getRESATTACKED4_8() {
return RESATTACKED4_8;
}

public byte getRESATTACKED4_9() {
return RESATTACKED4_9;
}

public byte getRESATTACKED5_1() {
return RESATTACKED5_1;
}

public byte getRESATTACKED5_10() {
return RESATTACKED5_10;
}

public byte getRESATTACKED5_11() {
return RESATTACKED5_11;
}

public byte getRESATTACKED5_12() {
return RESATTACKED5_12;
}

public byte getRESATTACKED5_2() {
return RESATTACKED5_2;
}

public byte getRESATTACKED5_3() {
return RESATTACKED5_3;
}

public byte getRESATTACKED5_4() {
return RESATTACKED5_4;
}

public byte getRESATTACKED5_5() {
return RESATTACKED5_5;
}

public byte getRESATTACKED5_6() {
return RESATTACKED5_6;
}

public byte getRESATTACKED5_7() {
return RESATTACKED5_7;
}

public byte getRESATTACKED5_8() {
return RESATTACKED5_8;
}

public byte getRESATTACKED5_9() {
return RESATTACKED5_9;
}

public byte getRESATTACKED6_1() {
return RESATTACKED6_1;
}

public byte getRESATTACKED6_10() {
return RESATTACKED6_10;
}

public byte getRESATTACKED6_11() {
return RESATTACKED6_11;
}

public byte getRESATTACKED6_12() {
return RESATTACKED6_12;
}

public byte getRESATTACKED6_2() {
return RESATTACKED6_2;
}

public byte getRESATTACKED6_3() {
return RESATTACKED6_3;
}

public byte getRESATTACKED6_4() {
return RESATTACKED6_4;
}

public byte getRESATTACKED6_5() {
return RESATTACKED6_5;
}

public byte getRESATTACKED6_6() {
return RESATTACKED6_6;
}

public byte getRESATTACKED6_7() {
return RESATTACKED6_7;
}

public byte getRESATTACKED6_8() {
return RESATTACKED6_8;
}

public byte getRESATTACKED6_9() {
return RESATTACKED6_9;
}

public byte getRESATTACKED7_1() {
return RESATTACKED7_1;
}

public byte getRESATTACKED7_10() {
return RESATTACKED7_10;
}

public byte getRESATTACKED7_11() {
return RESATTACKED7_11;
}

public byte getRESATTACKED7_12() {
return RESATTACKED7_12;
}

public byte getRESATTACKED7_2() {
return RESATTACKED7_2;
}

public byte getRESATTACKED7_3() {
return RESATTACKED7_3;
}

public byte getRESATTACKED7_4() {
return RESATTACKED7_4;
}

public byte getRESATTACKED7_5() {
return RESATTACKED7_5;
}

public byte getRESATTACKED7_6() {
return RESATTACKED7_6;
}

public byte getRESATTACKED7_7() {
return RESATTACKED7_7;
}

public byte getRESATTACKED7_8() {
return RESATTACKED7_8;
}

public byte getRESATTACKED7_9() {
return RESATTACKED7_9;
}

public byte getRESATTACKED8_1() {
return RESATTACKED8_1;
}

public byte getRESATTACKED8_10() {
return RESATTACKED8_10;
}

public byte getRESATTACKED8_11() {
return RESATTACKED8_11;
}

public byte getRESATTACKED8_12() {
return RESATTACKED8_12;
}

public byte getRESATTACKED8_2() {
return RESATTACKED8_2;
}

public byte getRESATTACKED8_3() {
return RESATTACKED8_3;
}

public byte getRESATTACKED8_4() {
return RESATTACKED8_4;
}

public byte getRESATTACKED8_5() {
return RESATTACKED8_5;
}

public byte getRESATTACKED8_6() {
return RESATTACKED8_6;
}

public byte getRESATTACKED8_7() {
return RESATTACKED8_7;
}

public byte getRESATTACKED8_8() {
return RESATTACKED8_8;
}

public byte getRESATTACKED8_9() {
return RESATTACKED8_9;
}

public byte getRESATTACKED96_1() {
return RESATTACKED96_1;
}

public byte getRESATTACKED96_10() {
return RESATTACKED96_10;
}

public byte getRESATTACKED96_11() {
return RESATTACKED96_11;
}

public byte getRESATTACKED96_12() {
return RESATTACKED96_12;
}

public byte getRESATTACKED96_2() {
return RESATTACKED96_2;
}

public byte getRESATTACKED96_3() {
return RESATTACKED96_3;
}

public byte getRESATTACKED96_4() {
return RESATTACKED96_4;
}

public byte getRESATTACKED96_5() {
return RESATTACKED96_5;
}

public byte getRESATTACKED96_6() {
return RESATTACKED96_6;
}

public byte getRESATTACKED96_7() {
return RESATTACKED96_7;
}

public byte getRESATTACKED96_8() {
return RESATTACKED96_8;
}

public byte getRESATTACKED96_9() {
return RESATTACKED96_9;
}

public byte getRESATTACKED97_1() {
return RESATTACKED97_1;
}

public byte getRESATTACKED97_10() {
return RESATTACKED97_10;
}

public byte getRESATTACKED97_11() {
return RESATTACKED97_11;
}

public byte getRESATTACKED97_12() {
return RESATTACKED97_12;
}

public byte getRESATTACKED97_2() {
return RESATTACKED97_2;
}

public byte getRESATTACKED97_3() {
return RESATTACKED97_3;
}

public byte getRESATTACKED97_4() {
return RESATTACKED97_4;
}

public byte getRESATTACKED97_5() {
return RESATTACKED97_5;
}

public byte getRESATTACKED97_6() {
return RESATTACKED97_6;
}

public byte getRESATTACKED97_7() {
return RESATTACKED97_7;
}

public byte getRESATTACKED97_8() {
return RESATTACKED97_8;
}

public byte getRESATTACKED97_9() {
return RESATTACKED97_9;
}

public byte getRESATTACKED9_1() {
return RESATTACKED9_1;
}

public byte getRESATTACKED9_10() {
return RESATTACKED9_10;
}

public byte getRESATTACKED9_11() {
return RESATTACKED9_11;
}

public byte getRESATTACKED9_12() {
return RESATTACKED9_12;
}

public byte getRESATTACKED9_2() {
return RESATTACKED9_2;
}

public byte getRESATTACKED9_3() {
return RESATTACKED9_3;
}

public byte getRESATTACKED9_4() {
return RESATTACKED9_4;
}

public byte getRESATTACKED9_5() {
return RESATTACKED9_5;
}

public byte getRESATTACKED9_6() {
return RESATTACKED9_6;
}

public byte getRESATTACKED9_7() {
return RESATTACKED9_7;
}

public byte getRESATTACKED9_8() {
return RESATTACKED9_8;
}

public byte getRESATTACKED9_9() {
return RESATTACKED9_9;
}

public byte getRESAVOID1_1() {
return RESAVOID1_1;
}

public byte getRESAVOID1_10() {
return RESAVOID1_10;
}

public byte getRESAVOID1_11() {
return RESAVOID1_11;
}

public byte getRESAVOID1_12() {
return RESAVOID1_12;
}

public byte getRESAVOID1_2() {
return RESAVOID1_2;
}

public byte getRESAVOID1_3() {
return RESAVOID1_3;
}

public byte getRESAVOID1_4() {
return RESAVOID1_4;
}

public byte getRESAVOID1_5() {
return RESAVOID1_5;
}

public byte getRESAVOID1_6() {
return RESAVOID1_6;
}

public byte getRESAVOID1_7() {
return RESAVOID1_7;
}

public byte getRESAVOID1_8() {
return RESAVOID1_8;
}

public byte getRESAVOID1_9() {
return RESAVOID1_9;
}

public byte getRESAVOID2_1() {
return RESAVOID2_1;
}

public byte getRESAVOID2_10() {
return RESAVOID2_10;
}

public byte getRESAVOID2_11() {
return RESAVOID2_11;
}

public byte getRESAVOID2_12() {
return RESAVOID2_12;
}

public byte getRESAVOID2_2() {
return RESAVOID2_2;
}

public byte getRESAVOID2_3() {
return RESAVOID2_3;
}

public byte getRESAVOID2_4() {
return RESAVOID2_4;
}

public byte getRESAVOID2_5() {
return RESAVOID2_5;
}

public byte getRESAVOID2_6() {
return RESAVOID2_6;
}

public byte getRESAVOID2_7() {
return RESAVOID2_7;
}

public byte getRESAVOID2_8() {
return RESAVOID2_8;
}

public byte getRESAVOID2_9() {
return RESAVOID2_9;
}

public byte getRESAVOID3_1() {
return RESAVOID3_1;
}

public byte getRESAVOID3_10() {
return RESAVOID3_10;
}

public byte getRESAVOID3_11() {
return RESAVOID3_11;
}

public byte getRESAVOID3_12() {
return RESAVOID3_12;
}

public byte getRESAVOID3_2() {
return RESAVOID3_2;
}

public byte getRESAVOID3_3() {
return RESAVOID3_3;
}

public byte getRESAVOID3_4() {
return RESAVOID3_4;
}

public byte getRESAVOID3_5() {
return RESAVOID3_5;
}

public byte getRESAVOID3_6() {
return RESAVOID3_6;
}

public byte getRESAVOID3_7() {
return RESAVOID3_7;
}

public byte getRESAVOID3_8() {
return RESAVOID3_8;
}

public byte getRESAVOID3_9() {
return RESAVOID3_9;
}

public byte getRESAVOID4_1() {
return RESAVOID4_1;
}

public byte getRESAVOID4_10() {
return RESAVOID4_10;
}

public byte getRESAVOID4_11() {
return RESAVOID4_11;
}

public byte getRESAVOID4_12() {
return RESAVOID4_12;
}

public byte getRESAVOID4_2() {
return RESAVOID4_2;
}

public byte getRESAVOID4_3() {
return RESAVOID4_3;
}

public byte getRESAVOID4_4() {
return RESAVOID4_4;
}

public byte getRESAVOID4_5() {
return RESAVOID4_5;
}

public byte getRESAVOID4_6() {
return RESAVOID4_6;
}

public byte getRESAVOID4_7() {
return RESAVOID4_7;
}

public byte getRESAVOID4_8() {
return RESAVOID4_8;
}

public byte getRESAVOID4_9() {
return RESAVOID4_9;
}

public byte getRESAVOID5_1() {
return RESAVOID5_1;
}

public byte getRESAVOID5_10() {
return RESAVOID5_10;
}

public byte getRESAVOID5_11() {
return RESAVOID5_11;
}

public byte getRESAVOID5_12() {
return RESAVOID5_12;
}

public byte getRESAVOID5_2() {
return RESAVOID5_2;
}

public byte getRESAVOID5_3() {
return RESAVOID5_3;
}

public byte getRESAVOID5_4() {
return RESAVOID5_4;
}

public byte getRESAVOID5_5() {
return RESAVOID5_5;
}

public byte getRESAVOID5_6() {
return RESAVOID5_6;
}

public byte getRESAVOID5_7() {
return RESAVOID5_7;
}

public byte getRESAVOID5_8() {
return RESAVOID5_8;
}

public byte getRESAVOID5_9() {
return RESAVOID5_9;
}

public byte getRESAVOID6_1() {
return RESAVOID6_1;
}

public byte getRESAVOID6_10() {
return RESAVOID6_10;
}

public byte getRESAVOID6_11() {
return RESAVOID6_11;
}

public byte getRESAVOID6_12() {
return RESAVOID6_12;
}

public byte getRESAVOID6_2() {
return RESAVOID6_2;
}

public byte getRESAVOID6_3() {
return RESAVOID6_3;
}

public byte getRESAVOID6_4() {
return RESAVOID6_4;
}

public byte getRESAVOID6_5() {
return RESAVOID6_5;
}

public byte getRESAVOID6_6() {
return RESAVOID6_6;
}

public byte getRESAVOID6_7() {
return RESAVOID6_7;
}

public byte getRESAVOID6_8() {
return RESAVOID6_8;
}

public byte getRESAVOID6_9() {
return RESAVOID6_9;
}

public byte getRESAVOID7_1() {
return RESAVOID7_1;
}

public byte getRESAVOID7_10() {
return RESAVOID7_10;
}

public byte getRESAVOID7_11() {
return RESAVOID7_11;
}

public byte getRESAVOID7_12() {
return RESAVOID7_12;
}

public byte getRESAVOID7_2() {
return RESAVOID7_2;
}

public byte getRESAVOID7_3() {
return RESAVOID7_3;
}

public byte getRESAVOID7_4() {
return RESAVOID7_4;
}

public byte getRESAVOID7_5() {
return RESAVOID7_5;
}

public byte getRESAVOID7_6() {
return RESAVOID7_6;
}

public byte getRESAVOID7_7() {
return RESAVOID7_7;
}

public byte getRESAVOID7_8() {
return RESAVOID7_8;
}

public byte getRESAVOID7_9() {
return RESAVOID7_9;
}

public byte getRESAVOID8_1() {
return RESAVOID8_1;
}

public byte getRESAVOID8_10() {
return RESAVOID8_10;
}

public byte getRESAVOID8_11() {
return RESAVOID8_11;
}

public byte getRESAVOID8_12() {
return RESAVOID8_12;
}

public byte getRESAVOID8_2() {
return RESAVOID8_2;
}

public byte getRESAVOID8_3() {
return RESAVOID8_3;
}

public byte getRESAVOID8_4() {
return RESAVOID8_4;
}

public byte getRESAVOID8_5() {
return RESAVOID8_5;
}

public byte getRESAVOID8_6() {
return RESAVOID8_6;
}

public byte getRESAVOID8_7() {
return RESAVOID8_7;
}

public byte getRESAVOID8_8() {
return RESAVOID8_8;
}

public byte getRESAVOID8_9() {
return RESAVOID8_9;
}

public byte getRESAVOID96_1() {
return RESAVOID96_1;
}

public byte getRESAVOID96_10() {
return RESAVOID96_10;
}

public byte getRESAVOID96_11() {
return RESAVOID96_11;
}

public byte getRESAVOID96_12() {
return RESAVOID96_12;
}

public byte getRESAVOID96_2() {
return RESAVOID96_2;
}

public byte getRESAVOID96_3() {
return RESAVOID96_3;
}

public byte getRESAVOID96_4() {
return RESAVOID96_4;
}

public byte getRESAVOID96_5() {
return RESAVOID96_5;
}

public byte getRESAVOID96_6() {
return RESAVOID96_6;
}

public byte getRESAVOID96_7() {
return RESAVOID96_7;
}

public byte getRESAVOID96_8() {
return RESAVOID96_8;
}

public byte getRESAVOID96_9() {
return RESAVOID96_9;
}

public byte getRESAVOID97_1() {
return RESAVOID97_1;
}

public byte getRESAVOID97_10() {
return RESAVOID97_10;
}

public byte getRESAVOID97_11() {
return RESAVOID97_11;
}

public byte getRESAVOID97_12() {
return RESAVOID97_12;
}

public byte getRESAVOID97_2() {
return RESAVOID97_2;
}

public byte getRESAVOID97_3() {
return RESAVOID97_3;
}

public byte getRESAVOID97_4() {
return RESAVOID97_4;
}

public byte getRESAVOID97_5() {
return RESAVOID97_5;
}

public byte getRESAVOID97_6() {
return RESAVOID97_6;
}

public byte getRESAVOID97_7() {
return RESAVOID97_7;
}

public byte getRESAVOID97_8() {
return RESAVOID97_8;
}

public byte getRESAVOID97_9() {
return RESAVOID97_9;
}

public byte getRESAVOID9_1() {
return RESAVOID9_1;
}

public byte getRESAVOID9_10() {
return RESAVOID9_10;
}

public byte getRESAVOID9_11() {
return RESAVOID9_11;
}

public byte getRESAVOID9_12() {
return RESAVOID9_12;
}

public byte getRESAVOID9_2() {
return RESAVOID9_2;
}

public byte getRESAVOID9_3() {
return RESAVOID9_3;
}

public byte getRESAVOID9_4() {
return RESAVOID9_4;
}

public byte getRESAVOID9_5() {
return RESAVOID9_5;
}

public byte getRESAVOID9_6() {
return RESAVOID9_6;
}

public byte getRESAVOID9_7() {
return RESAVOID9_7;
}

public byte getRESAVOID9_8() {
return RESAVOID9_8;
}

public byte getRESAVOID9_9() {
return RESAVOID9_9;
}

public byte getRESINSULTED1_1() {
return RESINSULTED1_1;
}

public byte getRESINSULTED1_10() {
return RESINSULTED1_10;
}

public byte getRESINSULTED1_11() {
return RESINSULTED1_11;
}

public byte getRESINSULTED1_12() {
return RESINSULTED1_12;
}

public byte getRESINSULTED1_2() {
return RESINSULTED1_2;
}

public byte getRESINSULTED1_3() {
return RESINSULTED1_3;
}

public byte getRESINSULTED1_4() {
return RESINSULTED1_4;
}

public byte getRESINSULTED1_5() {
return RESINSULTED1_5;
}

public byte getRESINSULTED1_6() {
return RESINSULTED1_6;
}

public byte getRESINSULTED1_7() {
return RESINSULTED1_7;
}

public byte getRESINSULTED1_8() {
return RESINSULTED1_8;
}

public byte getRESINSULTED1_9() {
return RESINSULTED1_9;
}

public byte getRESINSULTED2_1() {
return RESINSULTED2_1;
}

public byte getRESINSULTED2_10() {
return RESINSULTED2_10;
}

public byte getRESINSULTED2_11() {
return RESINSULTED2_11;
}

public byte getRESINSULTED2_12() {
return RESINSULTED2_12;
}

public byte getRESINSULTED2_2() {
return RESINSULTED2_2;
}

public byte getRESINSULTED2_3() {
return RESINSULTED2_3;
}

public byte getRESINSULTED2_4() {
return RESINSULTED2_4;
}

public byte getRESINSULTED2_5() {
return RESINSULTED2_5;
}

public byte getRESINSULTED2_6() {
return RESINSULTED2_6;
}

public byte getRESINSULTED2_7() {
return RESINSULTED2_7;
}

public byte getRESINSULTED2_8() {
return RESINSULTED2_8;
}

public byte getRESINSULTED2_9() {
return RESINSULTED2_9;
}

public byte getRESINSULTED3_1() {
return RESINSULTED3_1;
}

public byte getRESINSULTED3_10() {
return RESINSULTED3_10;
}

public byte getRESINSULTED3_11() {
return RESINSULTED3_11;
}

public byte getRESINSULTED3_12() {
return RESINSULTED3_12;
}

public byte getRESINSULTED3_2() {
return RESINSULTED3_2;
}

public byte getRESINSULTED3_3() {
return RESINSULTED3_3;
}

public byte getRESINSULTED3_4() {
return RESINSULTED3_4;
}

public byte getRESINSULTED3_5() {
return RESINSULTED3_5;
}

public byte getRESINSULTED3_6() {
return RESINSULTED3_6;
}

public byte getRESINSULTED3_7() {
return RESINSULTED3_7;
}

public byte getRESINSULTED3_8() {
return RESINSULTED3_8;
}

public byte getRESINSULTED3_9() {
return RESINSULTED3_9;
}

public byte getRESINSULTED4_1() {
return RESINSULTED4_1;
}

public byte getRESINSULTED4_10() {
return RESINSULTED4_10;
}

public byte getRESINSULTED4_11() {
return RESINSULTED4_11;
}

public byte getRESINSULTED4_12() {
return RESINSULTED4_12;
}

public byte getRESINSULTED4_2() {
return RESINSULTED4_2;
}

public byte getRESINSULTED4_3() {
return RESINSULTED4_3;
}

public byte getRESINSULTED4_4() {
return RESINSULTED4_4;
}

public byte getRESINSULTED4_5() {
return RESINSULTED4_5;
}

public byte getRESINSULTED4_6() {
return RESINSULTED4_6;
}

public byte getRESINSULTED4_7() {
return RESINSULTED4_7;
}

public byte getRESINSULTED4_8() {
return RESINSULTED4_8;
}

public byte getRESINSULTED4_9() {
return RESINSULTED4_9;
}

public byte getRESINSULTED5_1() {
return RESINSULTED5_1;
}

public byte getRESINSULTED5_10() {
return RESINSULTED5_10;
}

public byte getRESINSULTED5_11() {
return RESINSULTED5_11;
}

public byte getRESINSULTED5_12() {
return RESINSULTED5_12;
}

public byte getRESINSULTED5_2() {
return RESINSULTED5_2;
}

public byte getRESINSULTED5_3() {
return RESINSULTED5_3;
}

public byte getRESINSULTED5_4() {
return RESINSULTED5_4;
}

public byte getRESINSULTED5_5() {
return RESINSULTED5_5;
}

public byte getRESINSULTED5_6() {
return RESINSULTED5_6;
}

public byte getRESINSULTED5_7() {
return RESINSULTED5_7;
}

public byte getRESINSULTED5_8() {
return RESINSULTED5_8;
}

public byte getRESINSULTED5_9() {
return RESINSULTED5_9;
}

public byte getRESINSULTED6_1() {
return RESINSULTED6_1;
}

public byte getRESINSULTED6_10() {
return RESINSULTED6_10;
}

public byte getRESINSULTED6_11() {
return RESINSULTED6_11;
}

public byte getRESINSULTED6_12() {
return RESINSULTED6_12;
}

public byte getRESINSULTED6_2() {
return RESINSULTED6_2;
}

public byte getRESINSULTED6_3() {
return RESINSULTED6_3;
}

public byte getRESINSULTED6_4() {
return RESINSULTED6_4;
}

public byte getRESINSULTED6_5() {
return RESINSULTED6_5;
}

public byte getRESINSULTED6_6() {
return RESINSULTED6_6;
}

public byte getRESINSULTED6_7() {
return RESINSULTED6_7;
}

public byte getRESINSULTED6_8() {
return RESINSULTED6_8;
}

public byte getRESINSULTED6_9() {
return RESINSULTED6_9;
}

public byte getRESINSULTED7_1() {
return RESINSULTED7_1;
}

public byte getRESINSULTED7_10() {
return RESINSULTED7_10;
}

public byte getRESINSULTED7_11() {
return RESINSULTED7_11;
}

public byte getRESINSULTED7_12() {
return RESINSULTED7_12;
}

public byte getRESINSULTED7_2() {
return RESINSULTED7_2;
}

public byte getRESINSULTED7_3() {
return RESINSULTED7_3;
}

public byte getRESINSULTED7_4() {
return RESINSULTED7_4;
}

public byte getRESINSULTED7_5() {
return RESINSULTED7_5;
}

public byte getRESINSULTED7_6() {
return RESINSULTED7_6;
}

public byte getRESINSULTED7_7() {
return RESINSULTED7_7;
}

public byte getRESINSULTED7_8() {
return RESINSULTED7_8;
}

public byte getRESINSULTED7_9() {
return RESINSULTED7_9;
}

public byte getRESINSULTED8_1() {
return RESINSULTED8_1;
}

public byte getRESINSULTED8_10() {
return RESINSULTED8_10;
}

public byte getRESINSULTED8_11() {
return RESINSULTED8_11;
}

public byte getRESINSULTED8_12() {
return RESINSULTED8_12;
}

public byte getRESINSULTED8_2() {
return RESINSULTED8_2;
}

public byte getRESINSULTED8_3() {
return RESINSULTED8_3;
}

public byte getRESINSULTED8_4() {
return RESINSULTED8_4;
}

public byte getRESINSULTED8_5() {
return RESINSULTED8_5;
}

public byte getRESINSULTED8_6() {
return RESINSULTED8_6;
}

public byte getRESINSULTED8_7() {
return RESINSULTED8_7;
}

public byte getRESINSULTED8_8() {
return RESINSULTED8_8;
}

public byte getRESINSULTED8_9() {
return RESINSULTED8_9;
}

public byte getRESINSULTED96_1() {
return RESINSULTED96_1;
}

public byte getRESINSULTED96_10() {
return RESINSULTED96_10;
}

public byte getRESINSULTED96_11() {
return RESINSULTED96_11;
}

public byte getRESINSULTED96_12() {
return RESINSULTED96_12;
}

public byte getRESINSULTED96_2() {
return RESINSULTED96_2;
}

public byte getRESINSULTED96_3() {
return RESINSULTED96_3;
}

public byte getRESINSULTED96_4() {
return RESINSULTED96_4;
}

public byte getRESINSULTED96_5() {
return RESINSULTED96_5;
}

public byte getRESINSULTED96_6() {
return RESINSULTED96_6;
}

public byte getRESINSULTED96_7() {
return RESINSULTED96_7;
}

public byte getRESINSULTED96_8() {
return RESINSULTED96_8;
}

public byte getRESINSULTED96_9() {
return RESINSULTED96_9;
}

public byte getRESINSULTED97_1() {
return RESINSULTED97_1;
}

public byte getRESINSULTED97_10() {
return RESINSULTED97_10;
}

public byte getRESINSULTED97_11() {
return RESINSULTED97_11;
}

public byte getRESINSULTED97_12() {
return RESINSULTED97_12;
}

public byte getRESINSULTED97_2() {
return RESINSULTED97_2;
}

public byte getRESINSULTED97_3() {
return RESINSULTED97_3;
}

public byte getRESINSULTED97_4() {
return RESINSULTED97_4;
}

public byte getRESINSULTED97_5() {
return RESINSULTED97_5;
}

public byte getRESINSULTED97_6() {
return RESINSULTED97_6;
}

public byte getRESINSULTED97_7() {
return RESINSULTED97_7;
}

public byte getRESINSULTED97_8() {
return RESINSULTED97_8;
}

public byte getRESINSULTED97_9() {
return RESINSULTED97_9;
}

public byte getRESINSULTED9_1() {
return RESINSULTED9_1;
}

public byte getRESINSULTED9_10() {
return RESINSULTED9_10;
}

public byte getRESINSULTED9_11() {
return RESINSULTED9_11;
}

public byte getRESINSULTED9_12() {
return RESINSULTED9_12;
}

public byte getRESINSULTED9_2() {
return RESINSULTED9_2;
}

public byte getRESINSULTED9_3() {
return RESINSULTED9_3;
}

public byte getRESINSULTED9_4() {
return RESINSULTED9_4;
}

public byte getRESINSULTED9_5() {
return RESINSULTED9_5;
}

public byte getRESINSULTED9_6() {
return RESINSULTED9_6;
}

public byte getRESINSULTED9_7() {
return RESINSULTED9_7;
}

public byte getRESINSULTED9_8() {
return RESINSULTED9_8;
}

public byte getRESINSULTED9_9() {
return RESINSULTED9_9;
}

public byte getRESJOBDENY1() {
return RESJOBDENY1;
}

public byte getRESJOBDENY2() {
return RESJOBDENY2;
}

public byte getRESJOBDENY3() {
return RESJOBDENY3;
}

public byte getRESJOBDENY4() {
return RESJOBDENY4;
}

public byte getRESJOBDENY5() {
return RESJOBDENY5;
}

public byte getRESJOBDENY6() {
return RESJOBDENY6;
}

public byte getRESJOBDENY7() {
return RESJOBDENY7;
}

public byte getRESJOBDENY8() {
return RESJOBDENY8;
}

public byte getRESJOBDENY9() {
return RESJOBDENY9;
}

public byte getRESJOBDENY96() {
return RESJOBDENY96;
}

public byte getRESJOBDENY97() {
return RESJOBDENY97;
}

public boolean getRESPF16() {
return RESPF16;
}

public boolean getRESPF16_DV() {
return RESPF16_DV;
}

public boolean getRESPM16() {
return RESPM16;
}

public boolean getRESPM16_DV() {
return RESPM16_DV;
}

public byte getRESUNSAFE1_1() {
return RESUNSAFE1_1;
}

public byte getRESUNSAFE1_10() {
return RESUNSAFE1_10;
}

public byte getRESUNSAFE1_11() {
return RESUNSAFE1_11;
}

public byte getRESUNSAFE1_12() {
return RESUNSAFE1_12;
}

public byte getRESUNSAFE1_2() {
return RESUNSAFE1_2;
}

public byte getRESUNSAFE1_3() {
return RESUNSAFE1_3;
}

public byte getRESUNSAFE1_4() {
return RESUNSAFE1_4;
}

public byte getRESUNSAFE1_5() {
return RESUNSAFE1_5;
}

public byte getRESUNSAFE1_6() {
return RESUNSAFE1_6;
}

public byte getRESUNSAFE1_7() {
return RESUNSAFE1_7;
}

public byte getRESUNSAFE1_8() {
return RESUNSAFE1_8;
}

public byte getRESUNSAFE1_9() {
return RESUNSAFE1_9;
}

public byte getRESUNSAFE2_1() {
return RESUNSAFE2_1;
}

public byte getRESUNSAFE2_10() {
return RESUNSAFE2_10;
}

public byte getRESUNSAFE2_11() {
return RESUNSAFE2_11;
}

public byte getRESUNSAFE2_12() {
return RESUNSAFE2_12;
}

public byte getRESUNSAFE2_2() {
return RESUNSAFE2_2;
}

public byte getRESUNSAFE2_3() {
return RESUNSAFE2_3;
}

public byte getRESUNSAFE2_4() {
return RESUNSAFE2_4;
}

public byte getRESUNSAFE2_5() {
return RESUNSAFE2_5;
}

public byte getRESUNSAFE2_6() {
return RESUNSAFE2_6;
}

public byte getRESUNSAFE2_7() {
return RESUNSAFE2_7;
}

public byte getRESUNSAFE2_8() {
return RESUNSAFE2_8;
}

public byte getRESUNSAFE2_9() {
return RESUNSAFE2_9;
}

public byte getRESUNSAFE3_1() {
return RESUNSAFE3_1;
}

public byte getRESUNSAFE3_10() {
return RESUNSAFE3_10;
}

public byte getRESUNSAFE3_11() {
return RESUNSAFE3_11;
}

public byte getRESUNSAFE3_12() {
return RESUNSAFE3_12;
}

public byte getRESUNSAFE3_2() {
return RESUNSAFE3_2;
}

public byte getRESUNSAFE3_3() {
return RESUNSAFE3_3;
}

public byte getRESUNSAFE3_4() {
return RESUNSAFE3_4;
}

public byte getRESUNSAFE3_5() {
return RESUNSAFE3_5;
}

public byte getRESUNSAFE3_6() {
return RESUNSAFE3_6;
}

public byte getRESUNSAFE3_7() {
return RESUNSAFE3_7;
}

public byte getRESUNSAFE3_8() {
return RESUNSAFE3_8;
}

public byte getRESUNSAFE3_9() {
return RESUNSAFE3_9;
}

public byte getRESUNSAFE4_1() {
return RESUNSAFE4_1;
}

public byte getRESUNSAFE4_10() {
return RESUNSAFE4_10;
}

public byte getRESUNSAFE4_11() {
return RESUNSAFE4_11;
}

public byte getRESUNSAFE4_12() {
return RESUNSAFE4_12;
}

public byte getRESUNSAFE4_2() {
return RESUNSAFE4_2;
}

public byte getRESUNSAFE4_3() {
return RESUNSAFE4_3;
}

public byte getRESUNSAFE4_4() {
return RESUNSAFE4_4;
}

public byte getRESUNSAFE4_5() {
return RESUNSAFE4_5;
}

public byte getRESUNSAFE4_6() {
return RESUNSAFE4_6;
}

public byte getRESUNSAFE4_7() {
return RESUNSAFE4_7;
}

public byte getRESUNSAFE4_8() {
return RESUNSAFE4_8;
}

public byte getRESUNSAFE4_9() {
return RESUNSAFE4_9;
}

public byte getRESUNSAFE5_1() {
return RESUNSAFE5_1;
}

public byte getRESUNSAFE5_10() {
return RESUNSAFE5_10;
}

public byte getRESUNSAFE5_11() {
return RESUNSAFE5_11;
}

public byte getRESUNSAFE5_12() {
return RESUNSAFE5_12;
}

public byte getRESUNSAFE5_2() {
return RESUNSAFE5_2;
}

public byte getRESUNSAFE5_3() {
return RESUNSAFE5_3;
}

public byte getRESUNSAFE5_4() {
return RESUNSAFE5_4;
}

public byte getRESUNSAFE5_5() {
return RESUNSAFE5_5;
}

public byte getRESUNSAFE5_6() {
return RESUNSAFE5_6;
}

public byte getRESUNSAFE5_7() {
return RESUNSAFE5_7;
}

public byte getRESUNSAFE5_8() {
return RESUNSAFE5_8;
}

public byte getRESUNSAFE5_9() {
return RESUNSAFE5_9;
}

public byte getRESUNSAFE6_1() {
return RESUNSAFE6_1;
}

public byte getRESUNSAFE6_10() {
return RESUNSAFE6_10;
}

public byte getRESUNSAFE6_11() {
return RESUNSAFE6_11;
}

public byte getRESUNSAFE6_12() {
return RESUNSAFE6_12;
}

public byte getRESUNSAFE6_2() {
return RESUNSAFE6_2;
}

public byte getRESUNSAFE6_3() {
return RESUNSAFE6_3;
}

public byte getRESUNSAFE6_4() {
return RESUNSAFE6_4;
}

public byte getRESUNSAFE6_5() {
return RESUNSAFE6_5;
}

public byte getRESUNSAFE6_6() {
return RESUNSAFE6_6;
}

public byte getRESUNSAFE6_7() {
return RESUNSAFE6_7;
}

public byte getRESUNSAFE6_8() {
return RESUNSAFE6_8;
}

public byte getRESUNSAFE6_9() {
return RESUNSAFE6_9;
}

public byte getRESUNSAFE7_1() {
return RESUNSAFE7_1;
}

public byte getRESUNSAFE7_10() {
return RESUNSAFE7_10;
}

public byte getRESUNSAFE7_11() {
return RESUNSAFE7_11;
}

public byte getRESUNSAFE7_12() {
return RESUNSAFE7_12;
}

public byte getRESUNSAFE7_2() {
return RESUNSAFE7_2;
}

public byte getRESUNSAFE7_3() {
return RESUNSAFE7_3;
}

public byte getRESUNSAFE7_4() {
return RESUNSAFE7_4;
}

public byte getRESUNSAFE7_5() {
return RESUNSAFE7_5;
}

public byte getRESUNSAFE7_6() {
return RESUNSAFE7_6;
}

public byte getRESUNSAFE7_7() {
return RESUNSAFE7_7;
}

public byte getRESUNSAFE7_8() {
return RESUNSAFE7_8;
}

public byte getRESUNSAFE7_9() {
return RESUNSAFE7_9;
}

public byte getRESUNSAFE8_1() {
return RESUNSAFE8_1;
}

public byte getRESUNSAFE8_10() {
return RESUNSAFE8_10;
}

public byte getRESUNSAFE8_11() {
return RESUNSAFE8_11;
}

public byte getRESUNSAFE8_12() {
return RESUNSAFE8_12;
}

public byte getRESUNSAFE8_2() {
return RESUNSAFE8_2;
}

public byte getRESUNSAFE8_3() {
return RESUNSAFE8_3;
}

public byte getRESUNSAFE8_4() {
return RESUNSAFE8_4;
}

public byte getRESUNSAFE8_5() {
return RESUNSAFE8_5;
}

public byte getRESUNSAFE8_6() {
return RESUNSAFE8_6;
}

public byte getRESUNSAFE8_7() {
return RESUNSAFE8_7;
}

public byte getRESUNSAFE8_8() {
return RESUNSAFE8_8;
}

public byte getRESUNSAFE8_9() {
return RESUNSAFE8_9;
}

public byte getRESUNSAFE96_1() {
return RESUNSAFE96_1;
}

public byte getRESUNSAFE96_10() {
return RESUNSAFE96_10;
}

public byte getRESUNSAFE96_11() {
return RESUNSAFE96_11;
}

public byte getRESUNSAFE96_12() {
return RESUNSAFE96_12;
}

public byte getRESUNSAFE96_2() {
return RESUNSAFE96_2;
}

public byte getRESUNSAFE96_3() {
return RESUNSAFE96_3;
}

public byte getRESUNSAFE96_4() {
return RESUNSAFE96_4;
}

public byte getRESUNSAFE96_5() {
return RESUNSAFE96_5;
}

public byte getRESUNSAFE96_6() {
return RESUNSAFE96_6;
}

public byte getRESUNSAFE96_7() {
return RESUNSAFE96_7;
}

public byte getRESUNSAFE96_8() {
return RESUNSAFE96_8;
}

public byte getRESUNSAFE96_9() {
return RESUNSAFE96_9;
}

public byte getRESUNSAFE97_1() {
return RESUNSAFE97_1;
}

public byte getRESUNSAFE97_10() {
return RESUNSAFE97_10;
}

public byte getRESUNSAFE97_11() {
return RESUNSAFE97_11;
}

public byte getRESUNSAFE97_12() {
return RESUNSAFE97_12;
}

public byte getRESUNSAFE97_2() {
return RESUNSAFE97_2;
}

public byte getRESUNSAFE97_3() {
return RESUNSAFE97_3;
}

public byte getRESUNSAFE97_4() {
return RESUNSAFE97_4;
}

public byte getRESUNSAFE97_5() {
return RESUNSAFE97_5;
}

public byte getRESUNSAFE97_6() {
return RESUNSAFE97_6;
}

public byte getRESUNSAFE97_7() {
return RESUNSAFE97_7;
}

public byte getRESUNSAFE97_8() {
return RESUNSAFE97_8;
}

public byte getRESUNSAFE97_9() {
return RESUNSAFE97_9;
}

public byte getRESUNSAFE9_1() {
return RESUNSAFE9_1;
}

public byte getRESUNSAFE9_10() {
return RESUNSAFE9_10;
}

public byte getRESUNSAFE9_11() {
return RESUNSAFE9_11;
}

public byte getRESUNSAFE9_12() {
return RESUNSAFE9_12;
}

public byte getRESUNSAFE9_2() {
return RESUNSAFE9_2;
}

public byte getRESUNSAFE9_3() {
return RESUNSAFE9_3;
}

public byte getRESUNSAFE9_4() {
return RESUNSAFE9_4;
}

public byte getRESUNSAFE9_5() {
return RESUNSAFE9_5;
}

public byte getRESUNSAFE9_6() {
return RESUNSAFE9_6;
}

public byte getRESUNSAFE9_7() {
return RESUNSAFE9_7;
}

public byte getRESUNSAFE9_8() {
return RESUNSAFE9_8;
}

public byte getRESUNSAFE9_9() {
return RESUNSAFE9_9;
}

public byte getRETAMT() {
return RETAMT;
}

public byte getRETCHK() {
return RETCHK;
}

public byte getRETSUF() {
return RETSUF;
}

public byte getRHLAND_CODE() {
return RHLAND_CODE;
}

public byte getRPHMOB_CODE() {
return RPHMOB_CODE;
}

public byte getRPHWRK_CODE() {
return RPHWRK_CODE;
}

public byte getRTCON1() {
return RTCON1;
}

public byte getRTCON2() {
return RTCON2;
}

public byte getRTCON3() {
return RTCON3;
}

public byte getRTCON4() {
return RTCON4;
}

public byte getRTEXPJB() {
return RTEXPJB;
}

public byte getRTFND1() {
return RTFND1;
}

public byte getRTFND10() {
return RTFND10;
}

public byte getRTFND2() {
return RTFND2;
}

public byte getRTFND3() {
return RTFND3;
}

public byte getRTFND4() {
return RTFND4;
}

public byte getRTFND5() {
return RTFND5;
}

public byte getRTFND6() {
return RTFND6;
}

public byte getRTFND7() {
return RTFND7;
}

public byte getRTFND8() {
return RTFND8;
}

public byte getRTFND9() {
return RTFND9;
}

public byte getRTFND96() {
return RTFND96;
}

public byte getRTPRO1() {
return RTPRO1;
}

public byte getRTPRO2() {
return RTPRO2;
}

public byte getRTPRO3() {
return RTPRO3;
}

public byte getRTPRO4() {
return RTPRO4;
}

public byte getRTPRO5() {
return RTPRO5;
}

public byte getRTPRO6() {
return RTPRO6;
}

public byte getRULESKID() {
return RULESKID;
}

public byte getSAMEJOB() {
return SAMEJOB;
}

public short getSAMPST() {
return SAMPST;
}

public byte getSCAC() {
return SCAC;
}

public byte getSCAGE1DRNK() {
return SCAGE1DRNK;
}

public byte getSCALCL7D() {
return SCALCL7D;
}

public byte getSCDASCOH_DV() {
return SCDASCOH_DV;
}

public byte getSCDASSAT_DV() {
return SCDASSAT_DV;
}

public byte getSCEVERDRNK() {
return SCEVERDRNK;
}

public byte getSCFALCDRNK() {
return SCFALCDRNK;
}

public byte getSCFANNOY() {
return SCFANNOY;
}

public byte getSCFCRITIC() {
return SCFCRITIC;
}

public byte getSCFLAG_DV() {
return SCFLAG_DV;
}

public byte getSCFLETDWN() {
return SCFLETDWN;
}

public byte getSCFOPENUP() {
return SCFOPENUP;
}

public byte getSCFRELY() {
return SCFRELY;
}

public byte getSCFRENDANY() {
return SCFRENDANY;
}

public byte getSCFUNDSTND() {
return SCFUNDSTND;
}

public byte getSCHLLOC() {
return SCHLLOC;
}

public byte getSCHOK() {
return SCHOK;
}

public byte getSCHOOLCNTRY1() {
return SCHOOLCNTRY1;
}

public byte getSCHOOLCNTRY2() {
return SCHOOLCNTRY2;
}

public byte getSCHOOLCNTRY3() {
return SCHOOLCNTRY3;
}

public byte getSCHOOLCNTRY4() {
return SCHOOLCNTRY4;
}

public byte getSCHOOLCNTRY5() {
return SCHOOLCNTRY5;
}

public byte getSCLFSAT1() {
return SCLFSAT1;
}

public byte getSCLFSAT2() {
return SCLFSAT2;
}

public byte getSCLFSAT7() {
return SCLFSAT7;
}

public byte getSCLFSATO() {
return SCLFSATO;
}

public byte getSCNALCL7D() {
return SCNALCL7D;
}

protected double SCNALCPINT() {
return SCNALCPINT;
}

protected double SCNALCPOPS() {
return SCNALCPOPS;
}

protected double SCNALCSHOT() {
return SCNALCSHOT;
}

protected double SCNALCWINE() {
return SCNALCWINE;
}

public byte getSCOTVOT1() {
return SCOTVOT1;
}

public byte getSCOTVOT2() {
return SCOTVOT2;
}

public byte getSCOTVOT3() {
return SCOTVOT3;
}

public byte getSCOTVOT4() {
return SCOTVOT4;
}

public byte getSCPANNOY() {
return SCPANNOY;
}

public byte getSCPAROUTINT() {
return SCPAROUTINT;
}

public byte getSCPCRITIC() {
return SCPCRITIC;
}

public byte getSCPLETDWN() {
return SCPLETDWN;
}

public byte getSCPOPENUP() {
return SCPOPENUP;
}

public byte getSCPRELY() {
return SCPRELY;
}

public byte getSCPUNDSTND() {
return SCPUNDSTND;
}

public byte getSCRANNOY() {
return SCRANNOY;
}

public byte getSCRCRITIC() {
return SCRCRITIC;
}

public byte getSCRELANY() {
return SCRELANY;
}

public byte getSCRELHAPPY() {
return SCRELHAPPY;
}

public byte getSCRELPARAR() {
return SCRELPARAR;
}

public byte getSCRELPARCD() {
return SCRELPARCD;
}

public byte getSCRELPARDS() {
return SCRELPARDS;
}

public byte getSCRELPAREI() {
return SCRELPAREI;
}

public byte getSCRELPARIR() {
return SCRELPARIR;
}

public byte getSCRELPARKS() {
return SCRELPARKS;
}

public byte getSCRELPARRG() {
return SCRELPARRG;
}

public byte getSCRELPARWT() {
return SCRELPARWT;
}

public byte getSCRF1() {
return SCRF1;
}

public byte getSCRF2() {
return SCRF2;
}

public byte getSCRF3() {
return SCRF3;
}

public byte getSCRF4() {
return SCRF4;
}

public byte getSCRF5() {
return SCRF5;
}

public byte getSCRF6() {
return SCRF6;
}

public byte getSCRF97() {
return SCRF97;
}

public byte getSCRLETDWN() {
return SCRLETDWN;
}

public byte getSCROPENUP() {
return SCROPENUP;
}

public byte getSCRRELY() {
return SCRRELY;
}

public byte getSCRUNDSTND() {
return SCRUNDSTND;
}

public byte getSCRX_CODE() {
return SCRX_CODE;
}

public byte getSCSF1() {
return SCSF1;
}

public byte getSCSF2A() {
return SCSF2A;
}

public byte getSCSF2B() {
return SCSF2B;
}

public byte getSCSF3A() {
return SCSF3A;
}

public byte getSCSF3B() {
return SCSF3B;
}

public byte getSCSF4A() {
return SCSF4A;
}

public byte getSCSF4B() {
return SCSF4B;
}

public byte getSCSF5() {
return SCSF5;
}

public byte getSCSF6A() {
return SCSF6A;
}

public byte getSCSF6B() {
return SCSF6B;
}

public byte getSCSF6C() {
return SCSF6C;
}

public byte getSCSF7() {
return SCSF7;
}

public byte getSCSSUP1() {
return SCSSUP1;
}

public byte getSCSSUPR2R() {
return SCSSUPR2R;
}

public byte getSCUN1() {
return SCUN1;
}

public byte getSCUN2() {
return SCUN2;
}

public byte getSCUN3() {
return SCUN3;
}

public byte getSCUN97() {
return SCUN97;
}

public byte getSCUX_CODE() {
return SCUX_CODE;
}

public byte getSCWHORUAGE() {
return SCWHORUAGE;
}

public byte getSCWHORUEDU() {
return SCWHORUEDU;
}

public byte getSCWHORUFAM() {
return SCWHORUFAM;
}

public byte getSCWHORUPOL() {
return SCWHORUPOL;
}

public byte getSCWHORUPRO() {
return SCWHORUPRO;
}

public byte getSCWHORURAC() {
return SCWHORURAC;
}

public byte getSCWHORUSEX() {
return SCWHORUSEX;
}

public byte getSE1() {
return SE1;
}

public byte getSE10() {
return SE10;
}

public byte getSE2() {
return SE2;
}

public byte getSE3() {
return SE3;
}

public byte getSE4() {
return SE4;
}

public byte getSE5() {
return SE5;
}

public byte getSE6() {
return SE6;
}

public byte getSE7() {
return SE7;
}

public byte getSE8() {
return SE8;
}

public byte getSE9() {
return SE9;
}

protected double SEEARNGRS_DV() {
return SEEARNGRS_DV;
}

public byte getSEEARNGRS_IF() {
return SEEARNGRS_IF;
}

protected double SEEARNNET_DV() {
return SEEARNNET_DV;
}

public byte getSEEKID() {
return SEEKID;
}

public byte getSEXUOR() {
return SEXUOR;
}

public byte getSEX_DV() {
return SEX_DV;
}

public byte getSF1() {
return SF1;
}

protected double SF12MCS_DV() {
return SF12MCS_DV;
}

protected double SF12PCS_DV() {
return SF12PCS_DV;
}

public byte getSIBHIT() {
return SIBHIT;
}

public byte getSIBLING() {
return SIBLING;
}

public byte getSIBSTEAL() {
return SIBSTEAL;
}

public byte getSIBTEASE() {
return SIBTEASE;
}

public byte getSIBVERAB() {
return SIBVERAB;
}

public byte getSIGNEDUCKIDS1() {
return SIGNEDUCKIDS1;
}

public byte getSIGNEDUCKIDS2() {
return SIGNEDUCKIDS2;
}

public boolean getSIGNHEALTHKIDS1() {
return SIGNHEALTHKIDS1;
}

public boolean getSIGNHEALTHKIDS2() {
return SIGNHEALTHKIDS2;
}

public boolean getSINGLDV() {
return SINGLDV;
}

public byte getSLAPKID() {
return SLAPKID;
}

public byte getSMAGBG() {
return SMAGBG;
}

public byte getSMARTMOB() {
return SMARTMOB;
}

public byte getSMCIGS() {
return SMCIGS;
}

public byte getSMEVER() {
return SMEVER;
}

public byte getSMKMNTH11() {
return SMKMNTH11;
}

public byte getSMKMNTH12() {
return SMKMNTH12;
}

public byte getSMKMNTH13() {
return SMKMNTH13;
}

public byte getSMKMNTH21() {
return SMKMNTH21;
}

public byte getSMKMNTH22() {
return SMKMNTH22;
}

public byte getSMKMNTH23() {
return SMKMNTH23;
}

public byte getSMKMNTH31() {
return SMKMNTH31;
}

public byte getSMKMNTH32() {
return SMKMNTH32;
}

public byte getSMKMNTH33() {
return SMKMNTH33;
}

public byte getSMNCIGS() {
return SMNCIGS;
}

public byte getSMNOW() {
return SMNOW;
}

public byte getSOCCONT() {
return SOCCONT;
}

public byte getSOCIALKID() {
return SOCIALKID;
}

public byte getSPKDIF() {
return SPKDIF;
}

public byte getSPORTACT() {
return SPORTACT;
}

public byte getSPORTOTH_CODE() {
return SPORTOTH_CODE;
}

public byte getSPORTS11() {
return SPORTS11;
}

public byte getSPORTS110() {
return SPORTS110;
}

public byte getSPORTS111() {
return SPORTS111;
}

public byte getSPORTS112() {
return SPORTS112;
}

public byte getSPORTS113() {
return SPORTS113;
}

public byte getSPORTS114() {
return SPORTS114;
}

public byte getSPORTS12() {
return SPORTS12;
}

public byte getSPORTS13() {
return SPORTS13;
}

public byte getSPORTS14() {
return SPORTS14;
}

public byte getSPORTS15() {
return SPORTS15;
}

public byte getSPORTS16() {
return SPORTS16;
}

public byte getSPORTS17() {
return SPORTS17;
}

public byte getSPORTS18() {
return SPORTS18;
}

public byte getSPORTS19() {
return SPORTS19;
}

public byte getSPORTS196() {
return SPORTS196;
}

public byte getSPORTS216() {
return SPORTS216;
}

public byte getSPORTS217() {
return SPORTS217;
}

public byte getSPORTS218() {
return SPORTS218;
}

public byte getSPORTS219() {
return SPORTS219;
}

public byte getSPORTS220() {
return SPORTS220;
}

public byte getSPORTS221() {
return SPORTS221;
}

public byte getSPORTS222() {
return SPORTS222;
}

public byte getSPORTS223() {
return SPORTS223;
}

public byte getSPORTS224() {
return SPORTS224;
}

public byte getSPORTS225() {
return SPORTS225;
}

public byte getSPORTS226() {
return SPORTS226;
}

public byte getSPORTS227() {
return SPORTS227;
}

public byte getSPORTS228() {
return SPORTS228;
}

public byte getSPORTS229() {
return SPORTS229;
}

public byte getSPORTS230() {
return SPORTS230;
}

public byte getSPORTS231() {
return SPORTS231;
}

public byte getSPORTS296() {
return SPORTS296;
}

public byte getSPORTS31() {
return SPORTS31;
}

public byte getSPORTS32() {
return SPORTS32;
}

public byte getSPORTS33() {
return SPORTS33;
}

public byte getSPORTS34() {
return SPORTS34;
}

public byte getSPORTS35() {
return SPORTS35;
}

public byte getSPORTS36() {
return SPORTS36;
}

public byte getSPORTS37() {
return SPORTS37;
}

public byte getSPORTS38() {
return SPORTS38;
}

public byte getSPORTS39() {
return SPORTS39;
}

public byte getSPORTS396() {
return SPORTS396;
}

public byte getSPORTS3FREQ() {
return SPORTS3FREQ;
}

public byte getSPORTSFREQ() {
return SPORTSFREQ;
}

public byte getSPPEN() {
return SPPEN;
}

public int getSPPID() {
return SPPID;
}

public byte getSPPNO() {
return SPPNO;
}

public byte getSTATCM1() {
return STATCM1;
}

public byte getSTATCM2() {
return STATCM2;
}

public short getSTATCY41() {
return STATCY41;
}

public short getSTATCY42() {
return STATCY42;
}

public byte getSTATENDD1() {
return STATENDD1;
}

public byte getSTATENDD2() {
return STATENDD2;
}

public byte getSTATENDD3() {
return STATENDD3;
}

public byte getSTATENDD4() {
return STATENDD4;
}

public byte getSTATENDD5() {
return STATENDD5;
}

public byte getSTATENDD6() {
return STATENDD6;
}

public byte getSTATENDM1() {
return STATENDM1;
}

public byte getSTATENDM2() {
return STATENDM2;
}

public byte getSTATENDM3() {
return STATENDM3;
}

public byte getSTATENDM4() {
return STATENDM4;
}

public byte getSTATENDM5() {
return STATENDM5;
}

public byte getSTATENDM6() {
return STATENDM6;
}

public short getSTATENDY41() {
return STATENDY41;
}

public short getSTATENDY42() {
return STATENDY42;
}

public short getSTATENDY43() {
return STATENDY43;
}

public short getSTATENDY44() {
return STATENDY44;
}

public short getSTATENDY45() {
return STATENDY45;
}

public short getSTATENDY46() {
return STATENDY46;
}

public short getSTAYKID() {
return STAYKID;
}

public byte getSTAYKIDW() {
return STAYKIDW;
}

public byte getSTEALSIB() {
return STEALSIB;
}

public byte getSTENDREAS() {
return STENDREAS;
}

public byte getSTEPREL() {
return STEPREL;
}

public short getSTRATA() {
return STRATA;
}

public byte getSUSP() {
return SUSP;
}

public byte getTALKMATTER() {
return TALKMATTER;
}

public byte getTEASESIB() {
return TEASESIB;
}

public byte getTELDIF() {
return TELDIF;
}

public byte getTLKF() {
return TLKF;
}

public byte getTLKM() {
return TLKM;
}

public short getTMTIME() {
return TMTIME;
}

public byte getTRAINANY() {
return TRAINANY;
}

public short getTRAINDAYS1() {
return TRAINDAYS1;
}

public short getTRAINDAYS2() {
return TRAINDAYS2;
}

public short getTRAINDAYS3() {
return TRAINDAYS3;
}

public byte getTRAINEND1() {
return TRAINEND1;
}

public byte getTRAINEND2() {
return TRAINEND2;
}

public byte getTRAINEND3() {
return TRAINEND3;
}

public byte getTRAINHRS1() {
return TRAINHRS1;
}

public byte getTRAINHRS2() {
return TRAINHRS2;
}

public byte getTRAINHRS3() {
return TRAINHRS3;
}

public byte getTRAINN() {
return TRAINN;
}

public byte getTRAINPURP11() {
return TRAINPURP11;
}

public byte getTRAINPURP12() {
return TRAINPURP12;
}

public byte getTRAINPURP13() {
return TRAINPURP13;
}

public byte getTRAINPURP21() {
return TRAINPURP21;
}

public byte getTRAINPURP22() {
return TRAINPURP22;
}

public byte getTRAINPURP23() {
return TRAINPURP23;
}

public byte getTRAINPURP31() {
return TRAINPURP31;
}

public byte getTRAINPURP32() {
return TRAINPURP32;
}

public byte getTRAINPURP33() {
return TRAINPURP33;
}

public byte getTRAINPURP41() {
return TRAINPURP41;
}

public byte getTRAINPURP42() {
return TRAINPURP42;
}

public byte getTRAINPURP43() {
return TRAINPURP43;
}

public byte getTRAINPURP51() {
return TRAINPURP51;
}

public byte getTRAINPURP52() {
return TRAINPURP52;
}

public byte getTRAINPURP53() {
return TRAINPURP53;
}

public byte getTRAINPURP61() {
return TRAINPURP61;
}

public byte getTRAINPURP62() {
return TRAINPURP62;
}

public byte getTRAINPURP63() {
return TRAINPURP63;
}

public byte getTRAINPURP71() {
return TRAINPURP71;
}

public byte getTRAINPURP72() {
return TRAINPURP72;
}

public byte getTRAINPURP73() {
return TRAINPURP73;
}

public byte getTRAINQUAL1() {
return TRAINQUAL1;
}

public byte getTRAINQUAL2() {
return TRAINQUAL2;
}

public byte getTRAINQUAL3() {
return TRAINQUAL3;
}

public byte getTRQUAL1() {
return TRQUAL1;
}

public byte getTRQUAL10() {
return TRQUAL10;
}

public byte getTRQUAL11() {
return TRQUAL11;
}

public byte getTRQUAL13() {
return TRQUAL13;
}

public byte getTRQUAL15() {
return TRQUAL15;
}

public byte getTRQUAL16() {
return TRQUAL16;
}

public byte getTRQUAL17() {
return TRQUAL17;
}

public byte getTRQUAL18() {
return TRQUAL18;
}

public byte getTRQUAL19() {
return TRQUAL19;
}

public byte getTRQUAL2() {
return TRQUAL2;
}

public byte getTRQUAL20() {
return TRQUAL20;
}

public byte getTRQUAL21() {
return TRQUAL21;
}

public byte getTRQUAL22() {
return TRQUAL22;
}

public byte getTRQUAL23() {
return TRQUAL23;
}

public byte getTRQUAL24() {
return TRQUAL24;
}

public byte getTRQUAL25() {
return TRQUAL25;
}

public byte getTRQUAL26() {
return TRQUAL26;
}

public byte getTRQUAL27() {
return TRQUAL27;
}

public byte getTRQUAL28() {
return TRQUAL28;
}

public byte getTRQUAL29() {
return TRQUAL29;
}

public byte getTRQUAL3() {
return TRQUAL3;
}

public byte getTRQUAL30() {
return TRQUAL30;
}

public byte getTRQUAL31() {
return TRQUAL31;
}

public byte getTRQUAL4() {
return TRQUAL4;
}

public byte getTRQUAL5() {
return TRQUAL5;
}

public byte getTRQUAL6() {
return TRQUAL6;
}

public byte getTRQUAL7() {
return TRQUAL7;
}

public byte getTRQUAL8() {
return TRQUAL8;
}

public byte getTRQUAL9() {
return TRQUAL9;
}

public byte getTRWHO1() {
return TRWHO1;
}

public byte getTRWHO2() {
return TRWHO2;
}

public byte getTRWHO3() {
return TRWHO3;
}

public byte getUKBORN() {
return UKBORN;
}

public byte getUNDQUS() {
return UNDQUS;
}

public byte getUNSAFDV() {
return UNSAFDV;
}

public byte getUNSAFE1() {
return UNSAFE1;
}

public byte getUNSAFE10() {
return UNSAFE10;
}

public byte getUNSAFE11() {
return UNSAFE11;
}

public byte getUNSAFE2() {
return UNSAFE2;
}

public byte getUNSAFE3() {
return UNSAFE3;
}

public byte getUNSAFE4() {
return UNSAFE4;
}

public byte getUNSAFE5() {
return UNSAFE5;
}

public byte getUNSAFE6() {
return UNSAFE6;
}

public byte getUNSAFE7() {
return UNSAFE7;
}

public byte getUNSAFE8() {
return UNSAFE8;
}

public byte getUNSAFE9() {
return UNSAFE9;
}

public byte getUNSAFE96() {
return UNSAFE96;
}

public byte getUNSAFE97() {
return UNSAFE97;
}

public byte getUNSAFEO_CODE() {
return UNSAFEO_CODE;
}

public byte getUPSET() {
return UPSET;
}

public byte getURBAN_DV() {
return URBAN_DV;
}

public byte getUSBREAD() {
return USBREAD;
}

public byte getUSDAIRY() {
return USDAIRY;
}

public byte getVERABSIB() {
return VERABSIB;
}

public byte getVOLRECPER() {
return VOLRECPER;
}

public short getVOTE1() {
return VOTE1;
}

public short getVOTE2() {
return VOTE2;
}

public short getVOTE3() {
return VOTE3;
}

public short getVOTE4() {
return VOTE4;
}

public short getVOTE5() {
return VOTE5;
}

public short getVOTE6() {
return VOTE6;
}

public byte getVOUCHER() {
return VOUCHER;
}

public boolean getVOUCHERNI() {
return VOUCHERNI;
}

public byte getVREGLINK() {
return VREGLINK;
}

public byte getVREGUKN() {
return VREGUKN;
}

public byte getWALKPACE() {
return WALKPACE;
}

public byte getWEKID() {
return WEKID;
}

public byte getWKFRUIT() {
return WKFRUIT;
}

public byte getWKPHYS() {
return WKPHYS;
}

public byte getWKPLSAM() {
return WKPLSAM;
}

public byte getWKVEGE() {
return WKVEGE;
}

public byte getWLK10M() {
return WLK10M;
}

public byte getWLK30MIN() {
return WLK30MIN;
}

public byte getWORKTRAV() {
return WORKTRAV;
}

public byte getXPMOVE() {
return XPMOVE;
}

public byte getXPMVMNTH() {
return XPMVMNTH;
}

public byte getXPMVWHN() {
return XPMVWHN;
}

public byte getXPMVWHR() {
return XPMVWHR;
}

public short getXPMVYR() {
return XPMVYR;
}

public byte getXTRA5MINOSM_DV() {
return XTRA5MINOSM_DV;
}

public byte getXTRA5MIN_DV() {
return XTRA5MIN_DV;
}

public byte getYAJBSRV1() {
return YAJBSRV1;
}

public byte getYAJBSRV2() {
return YAJBSRV2;
}

public byte getYAJBSRV3() {
return YAJBSRV3;
}

public byte getYAJBSRV4() {
return YAJBSRV4;
}

public byte getYAJBSRV5() {
return YAJBSRV5;
}

public byte getYAJBSRV7() {
return YAJBSRV7;
}

public byte getYAJBSRV8() {
return YAJBSRV8;
}

public byte getYAJBSRV96() {
return YAJBSRV96;
}

public byte getYANSSEC5_DV() {
return YANSSEC5_DV;
}

public short getYASOC00_CC() {
return YASOC00_CC;
}

public short getYASOC10_CC() {
return YASOC10_CC;
}

public byte getYASOC90_CC() {
return YASOC90_CC;
}

public byte getYELLKID() {
return YELLKID;
}

public byte getYPNETCHT() {
return YPNETCHT;
}

public byte getYPNPAL() {
return YPNPAL;
}

public byte getYPSOCWEB() {
return YPSOCWEB;
}

public US_Wave23_indresp_Record(String line) {
s = line.split("\t");
initPIDP(s[0]);
initPID(s[1]);
initHIDP(s[2]);
initPNO(s[3]);
initCHILDPNO(s[4]);
initHHORIG(s[5]);
initMEMORIG(s[6]);
initPSU(s[7]);
initSTRATA(s[8]);
initSAMPST(s[9]);
initMONTH(s[10]);
initIVFIO(s[11]);
initIOUTCOME(s[12]);
initSEX(s[13]);
initDVAGE(s[14]);
initBIRTHY(s[15]);
initIENDDATHH(s[16]);
initIENDDATMM(s[17]);
initIENDDATSS(s[18]);
initCINDTIME(s[19]);
initIENDDATY(s[20]);
initIENDDATM(s[21]);
initIENDDATD(s[22]);
initTMTIME(s[23]);
initNCARS(s[24]);
initISYEAR(s[25]);
initADSTATUS(s[26]);
initPLIVPAR(s[27]);
initSIBLING(s[28]);
initPPENSIONER(s[29]);
initNCH14RESP(s[30]);
initNCH3RESP(s[31]);
initNCH5RESP(s[32]);
initNCH8RESP(s[33]);
initNCH415RESP(s[34]);
initNCHRESP(s[35]);
initNCHUND18RESP(s[36]);
initNATCH01(s[37]);
initNATCH02(s[38]);
initNATCH03(s[39]);
initNATCH04(s[40]);
initNATCH05(s[41]);
initNATCH06(s[42]);
initNATCH07(s[43]);
initNATCH08(s[44]);
initNATCH09(s[45]);
initNATCH10(s[46]);
initNATCH11(s[47]);
initNATCH12(s[48]);
initNATCH13(s[49]);
initNATCH14(s[50]);
initNATCH15(s[51]);
initNATCH16(s[52]);
initNNATCH(s[53]);
initNADOPTCH(s[54]);
initADOPTCH01(s[55]);
initADOPTCH02(s[56]);
initADOPTCH03(s[57]);
initADOPTCH04(s[58]);
initADOPTCH05(s[59]);
initADOPTCH06(s[60]);
initADOPTCH07(s[61]);
initADOPTCH08(s[62]);
initADOPTCH09(s[63]);
initADOPTCH10(s[64]);
initADOPTCH11(s[65]);
initADOPTCH12(s[66]);
initADOPTCH13(s[67]);
initADOPTCH14(s[68]);
initADOPTCH15(s[69]);
initADOPTCH16(s[70]);
initNCHUNDER16(s[71]);
initNCH5TO15(s[72]);
initNCH10TO15(s[73]);
initNCH10(s[74]);
initALLCH01(s[75]);
initALLCH02(s[76]);
initALLCH03(s[77]);
initALLCH04(s[78]);
initALLCH05(s[79]);
initALLCH06(s[80]);
initALLCH07(s[81]);
initALLCH08(s[82]);
initALLCH09(s[83]);
initALLCH10(s[84]);
initALLCH11(s[85]);
initALLCH12(s[86]);
initALLCH13(s[87]);
initALLCH14(s[88]);
initALLCH15(s[89]);
initALLCH16(s[90]);
initLENINDINTV(s[91]);
initISTRTDATHH(s[92]);
initISTRTDATMM(s[93]);
initISTRTDATSS(s[94]);
initISTRTDATY(s[95]);
initISTRTDATM(s[96]);
initISTRTDATD(s[97]);
initLIENG(s[98]);
initLITRANS(s[99]);
initLIWHO(s[100]);
initLIHOW(s[101]);
initCHKRESP(s[102]);
initMVEVER(s[103]);
initMVMNTH(s[104]);
initMVYR(s[105]);
initLKMOVE(s[106]);
initXPMOVE(s[107]);
initXPMVWHN(s[108]);
initXPMVMNTH(s[109]);
initXPMVWHR(s[110]);
initJBSTAT(s[111]);
initMLSTATCHK(s[112]);
initMLSTAT(s[113]);
initDRIVE(s[114]);
initCARUSE(s[115]);
initVREGUKN(s[116]);
initVREGLINK(s[117]);
initMOBUSE(s[118]);
initSMARTMOB(s[119]);
initMOBCOMP(s[120]);
initNETPUSE(s[121]);
initXPMVYR(s[122]);
initUKBORN(s[123]);
initPLBORNC(s[124]);
initYR2UK4(s[125]);
initCITZN1(s[126]);
initCITZN2(s[127]);
initCITZN3(s[128]);
initQFHIGH(s[129]);
initQUALOC(s[130]);
initQFVOC1(s[131]);
initQFVOC2(s[132]);
initQFVOC3(s[133]);
initQFVOC4(s[134]);
initQFVOC5(s[135]);
initQFVOC6(s[136]);
initQFVOC7(s[137]);
initQFVOC8(s[138]);
initQFVOC9(s[139]);
initQFVOC10(s[140]);
initQFVOC11(s[141]);
initQFVOC12(s[142]);
initQFVOC13(s[143]);
initQFVOC14(s[144]);
initQFVOC15(s[145]);
initQFVOC96(s[146]);
initSCHOOL(s[147]);
initSCEND(s[148]);
initSCHLLOC(s[149]);
initSCHOK(s[150]);
initFENOW(s[151]);
initFEEND(s[152]);
initJ1NONE(s[153]);
initJ1SEMP(s[154]);
initJ1BOSS(s[155]);
initJ1MNGR(s[156]);
initEDTYPE(s[157]);
initEDASP(s[158]);
initLVSCHDO(s[159]);
initAHVWELL(s[160]);
initHEDLIK(s[161]);
initHEDNT(s[162]);
initLVHM(s[163]);
initOCIMPA(s[164]);
initOCIMPB(s[165]);
initOCIMPE(s[166]);
initOCIMPF(s[167]);
initOCIMPI(s[168]);
initOCIMPK(s[169]);
initOCIMPL(s[170]);
initFUTRA(s[171]);
initFUTRB(s[172]);
initFUTRC(s[173]);
initFUTRD(s[174]);
initFUTRE(s[175]);
initFUTRF(s[176]);
initFUTRG(s[177]);
initFUTRH(s[178]);
initFUTRI(s[179]);
initFUTRJ(s[180]);
initFUTRK(s[181]);
initFUTRL(s[182]);
initPAJU(s[183]);
initMAJU(s[184]);
initPACOB(s[185]);
initPAYRUK(s[186]);
initMACOB(s[187]);
initMAYRUK(s[188]);
initNATID1(s[189]);
initNATID2(s[190]);
initNATID3(s[191]);
initNATID4(s[192]);
initNATID5(s[193]);
initNATID6(s[194]);
initNATID97(s[195]);
initRACEL(s[196]);
initRACELO_CODE(s[197]);
initRACELT(s[198]);
initRACELWT(s[199]);
initRACELMT(s[200]);
initRACELAT(s[201]);
initRACELBT(s[202]);
initRACELOT_CODE(s[203]);
initENGLANG(s[204]);
initENGSPK(s[205]);
initSPKDIF(s[206]);
initENGTEL(s[207]);
initTELDIF(s[208]);
initENGREAD(s[209]);
initREADDIF(s[210]);
initENGFORM(s[211]);
initFORMDIF(s[212]);
initETHID2(s[213]);
initETHID3(s[214]);
initETHID4A(s[215]);
initETHID4B(s[216]);
initETHID5(s[217]);
initETHID6(s[218]);
initETHID7(s[219]);
initETHID8(s[220]);
initETHID9(s[221]);
initETHID10(s[222]);
initETHID11(s[223]);
initETHID12(s[224]);
initETHID13(s[225]);
initETHID14(s[226]);
initETHCLOSE1(s[227]);
initETHCLOSE2A(s[228]);
initETHCLOSE2B(s[229]);
initETHCLOSE3(s[230]);
initETHCLOSE4A(s[231]);
initETHCLOSE4B(s[232]);
initETHCLOSE5(s[233]);
initETHCLOSE6(s[234]);
initETHCLOSE7(s[235]);
initETHCLOSE8(s[236]);
initETHCLOSE9(s[237]);
initETHCLOSE10(s[238]);
initETHCLOSE11(s[239]);
initPRIDE2(s[240]);
initPRIDE4A(s[241]);
initPRIDE4B(s[242]);
initPRIDE6(s[243]);
initPRIDE7(s[244]);
initPRIDE5(s[245]);
initPRIDE8(s[246]);
initPRIDE9(s[247]);
initPRIDE10(s[248]);
initPRIDE11(s[249]);
initPRIDE12(s[250]);
initPRIDE13(s[251]);
initPRIDE14(s[252]);
initFOOD1(s[253]);
initFOOD2(s[254]);
initFOOD3(s[255]);
initFOOD4(s[256]);
initFOOD5(s[257]);
initFOOD6(s[258]);
initFOOD7(s[259]);
initOPRLG(s[260]);
initOPRLG0NI(s[261]);
initNIREL(s[262]);
initNIACT(s[263]);
initOPRLG0(s[264]);
initOPRLG1(s[265]);
initUNSAFE1(s[266]);
initUNSAFE2(s[267]);
initUNSAFE3(s[268]);
initUNSAFE4(s[269]);
initUNSAFE5(s[270]);
initUNSAFE6(s[271]);
initUNSAFE7(s[272]);
initUNSAFE8(s[273]);
initUNSAFE9(s[274]);
initUNSAFE10(s[275]);
initUNSAFE11(s[276]);
initUNSAFE96(s[277]);
initUNSAFE97(s[278]);
initUNSAFEO_CODE(s[279]);
initRESUNSAFE1_1(s[280]);
initRESUNSAFE2_1(s[281]);
initRESUNSAFE3_1(s[282]);
initRESUNSAFE4_1(s[283]);
initRESUNSAFE5_1(s[284]);
initRESUNSAFE6_1(s[285]);
initRESUNSAFE7_1(s[286]);
initRESUNSAFE8_1(s[287]);
initRESUNSAFE9_1(s[288]);
initRESUNSAFE96_1(s[289]);
initRESUNSAFE97_1(s[290]);
initRESUNSAFE1_2(s[291]);
initRESUNSAFE2_2(s[292]);
initRESUNSAFE3_2(s[293]);
initRESUNSAFE4_2(s[294]);
initRESUNSAFE5_2(s[295]);
initRESUNSAFE6_2(s[296]);
initRESUNSAFE7_2(s[297]);
initRESUNSAFE8_2(s[298]);
initRESUNSAFE9_2(s[299]);
initRESUNSAFE96_2(s[300]);
initRESUNSAFE97_2(s[301]);
initRESUNSAFE1_3(s[302]);
initRESUNSAFE2_3(s[303]);
initRESUNSAFE3_3(s[304]);
initRESUNSAFE4_3(s[305]);
initRESUNSAFE5_3(s[306]);
initRESUNSAFE6_3(s[307]);
initRESUNSAFE7_3(s[308]);
initRESUNSAFE8_3(s[309]);
initRESUNSAFE9_3(s[310]);
initRESUNSAFE96_3(s[311]);
initRESUNSAFE97_3(s[312]);
initRESUNSAFE1_4(s[313]);
initRESUNSAFE2_4(s[314]);
initRESUNSAFE3_4(s[315]);
initRESUNSAFE4_4(s[316]);
initRESUNSAFE5_4(s[317]);
initRESUNSAFE6_4(s[318]);
initRESUNSAFE7_4(s[319]);
initRESUNSAFE8_4(s[320]);
initRESUNSAFE9_4(s[321]);
initRESUNSAFE96_4(s[322]);
initRESUNSAFE97_4(s[323]);
initRESUNSAFE1_5(s[324]);
initRESUNSAFE2_5(s[325]);
initRESUNSAFE3_5(s[326]);
initRESUNSAFE4_5(s[327]);
initRESUNSAFE5_5(s[328]);
initRESUNSAFE6_5(s[329]);
initRESUNSAFE7_5(s[330]);
initRESUNSAFE8_5(s[331]);
initRESUNSAFE9_5(s[332]);
initRESUNSAFE96_5(s[333]);
initRESUNSAFE97_5(s[334]);
initRESUNSAFE1_6(s[335]);
initRESUNSAFE2_6(s[336]);
initRESUNSAFE3_6(s[337]);
initRESUNSAFE4_6(s[338]);
initRESUNSAFE5_6(s[339]);
initRESUNSAFE6_6(s[340]);
initRESUNSAFE7_6(s[341]);
initRESUNSAFE8_6(s[342]);
initRESUNSAFE9_6(s[343]);
initRESUNSAFE96_6(s[344]);
initRESUNSAFE97_6(s[345]);
initRESUNSAFE1_7(s[346]);
initRESUNSAFE2_7(s[347]);
initRESUNSAFE3_7(s[348]);
initRESUNSAFE4_7(s[349]);
initRESUNSAFE5_7(s[350]);
initRESUNSAFE6_7(s[351]);
initRESUNSAFE7_7(s[352]);
initRESUNSAFE8_7(s[353]);
initRESUNSAFE9_7(s[354]);
initRESUNSAFE96_7(s[355]);
initRESUNSAFE97_7(s[356]);
initRESUNSAFE1_8(s[357]);
initRESUNSAFE2_8(s[358]);
initRESUNSAFE3_8(s[359]);
initRESUNSAFE4_8(s[360]);
initRESUNSAFE5_8(s[361]);
initRESUNSAFE6_8(s[362]);
initRESUNSAFE7_8(s[363]);
initRESUNSAFE8_8(s[364]);
initRESUNSAFE9_8(s[365]);
initRESUNSAFE96_8(s[366]);
initRESUNSAFE97_8(s[367]);
initRESUNSAFE1_9(s[368]);
initRESUNSAFE2_9(s[369]);
initRESUNSAFE3_9(s[370]);
initRESUNSAFE4_9(s[371]);
initRESUNSAFE5_9(s[372]);
initRESUNSAFE6_9(s[373]);
initRESUNSAFE7_9(s[374]);
initRESUNSAFE8_9(s[375]);
initRESUNSAFE9_9(s[376]);
initRESUNSAFE96_9(s[377]);
initRESUNSAFE97_9(s[378]);
initRESUNSAFE1_10(s[379]);
initRESUNSAFE2_10(s[380]);
initRESUNSAFE3_10(s[381]);
initRESUNSAFE4_10(s[382]);
initRESUNSAFE5_10(s[383]);
initRESUNSAFE6_10(s[384]);
initRESUNSAFE7_10(s[385]);
initRESUNSAFE8_10(s[386]);
initRESUNSAFE9_10(s[387]);
initRESUNSAFE96_10(s[388]);
initRESUNSAFE97_10(s[389]);
initRESUNSAFE1_11(s[390]);
initRESUNSAFE2_11(s[391]);
initRESUNSAFE3_11(s[392]);
initRESUNSAFE4_11(s[393]);
initRESUNSAFE5_11(s[394]);
initRESUNSAFE6_11(s[395]);
initRESUNSAFE7_11(s[396]);
initRESUNSAFE8_11(s[397]);
initRESUNSAFE9_11(s[398]);
initRESUNSAFE96_11(s[399]);
initRESUNSAFE97_11(s[400]);
initRESUNSAFE1_12(s[401]);
initRESUNSAFE2_12(s[402]);
initRESUNSAFE3_12(s[403]);
initRESUNSAFE4_12(s[404]);
initRESUNSAFE5_12(s[405]);
initRESUNSAFE6_12(s[406]);
initRESUNSAFE7_12(s[407]);
initRESUNSAFE8_12(s[408]);
initRESUNSAFE9_12(s[409]);
initRESUNSAFE96_12(s[410]);
initRESUNSAFE97_12(s[411]);
initAVOIDANCE1(s[412]);
initAVOIDANCE2(s[413]);
initAVOIDANCE3(s[414]);
initAVOIDANCE4(s[415]);
initAVOIDANCE5(s[416]);
initAVOIDANCE6(s[417]);
initAVOIDANCE7(s[418]);
initAVOIDANCE8(s[419]);
initAVOIDANCE9(s[420]);
initAVOIDANCE10(s[421]);
initAVOIDANCE11(s[422]);
initAVOIDANCE96(s[423]);
initAVOIDANCE97(s[424]);
initAVOIDANCEO_CODE(s[425]);
initRESAVOID1_1(s[426]);
initRESAVOID2_1(s[427]);
initRESAVOID3_1(s[428]);
initRESAVOID4_1(s[429]);
initRESAVOID5_1(s[430]);
initRESAVOID6_1(s[431]);
initRESAVOID7_1(s[432]);
initRESAVOID8_1(s[433]);
initRESAVOID9_1(s[434]);
initRESAVOID96_1(s[435]);
initRESAVOID97_1(s[436]);
initRESAVOID1_2(s[437]);
initRESAVOID2_2(s[438]);
initRESAVOID3_2(s[439]);
initRESAVOID4_2(s[440]);
initRESAVOID5_2(s[441]);
initRESAVOID6_2(s[442]);
initRESAVOID7_2(s[443]);
initRESAVOID8_2(s[444]);
initRESAVOID9_2(s[445]);
initRESAVOID96_2(s[446]);
initRESAVOID97_2(s[447]);
initRESAVOID1_3(s[448]);
initRESAVOID2_3(s[449]);
initRESAVOID3_3(s[450]);
initRESAVOID4_3(s[451]);
initRESAVOID5_3(s[452]);
initRESAVOID6_3(s[453]);
initRESAVOID7_3(s[454]);
initRESAVOID8_3(s[455]);
initRESAVOID9_3(s[456]);
initRESAVOID96_3(s[457]);
initRESAVOID97_3(s[458]);
initRESAVOID1_4(s[459]);
initRESAVOID2_4(s[460]);
initRESAVOID3_4(s[461]);
initRESAVOID4_4(s[462]);
initRESAVOID5_4(s[463]);
initRESAVOID6_4(s[464]);
initRESAVOID7_4(s[465]);
initRESAVOID8_4(s[466]);
initRESAVOID9_4(s[467]);
initRESAVOID96_4(s[468]);
initRESAVOID97_4(s[469]);
initRESAVOID1_5(s[470]);
initRESAVOID2_5(s[471]);
initRESAVOID3_5(s[472]);
initRESAVOID4_5(s[473]);
initRESAVOID5_5(s[474]);
initRESAVOID6_5(s[475]);
initRESAVOID7_5(s[476]);
initRESAVOID8_5(s[477]);
initRESAVOID9_5(s[478]);
initRESAVOID96_5(s[479]);
initRESAVOID97_5(s[480]);
initRESAVOID1_6(s[481]);
initRESAVOID2_6(s[482]);
initRESAVOID3_6(s[483]);
initRESAVOID4_6(s[484]);
initRESAVOID5_6(s[485]);
initRESAVOID6_6(s[486]);
initRESAVOID7_6(s[487]);
initRESAVOID8_6(s[488]);
initRESAVOID9_6(s[489]);
initRESAVOID96_6(s[490]);
initRESAVOID97_6(s[491]);
initRESAVOID1_7(s[492]);
initRESAVOID2_7(s[493]);
initRESAVOID3_7(s[494]);
initRESAVOID4_7(s[495]);
initRESAVOID5_7(s[496]);
initRESAVOID6_7(s[497]);
initRESAVOID7_7(s[498]);
initRESAVOID8_7(s[499]);
initRESAVOID9_7(s[500]);
initRESAVOID96_7(s[501]);
initRESAVOID97_7(s[502]);
initRESAVOID1_8(s[503]);
initRESAVOID2_8(s[504]);
initRESAVOID3_8(s[505]);
initRESAVOID4_8(s[506]);
initRESAVOID5_8(s[507]);
initRESAVOID6_8(s[508]);
initRESAVOID7_8(s[509]);
initRESAVOID8_8(s[510]);
initRESAVOID9_8(s[511]);
initRESAVOID96_8(s[512]);
initRESAVOID97_8(s[513]);
initRESAVOID1_9(s[514]);
initRESAVOID2_9(s[515]);
initRESAVOID3_9(s[516]);
initRESAVOID4_9(s[517]);
initRESAVOID5_9(s[518]);
initRESAVOID6_9(s[519]);
initRESAVOID7_9(s[520]);
initRESAVOID8_9(s[521]);
initRESAVOID9_9(s[522]);
initRESAVOID96_9(s[523]);
initRESAVOID97_9(s[524]);
initRESAVOID1_10(s[525]);
initRESAVOID2_10(s[526]);
initRESAVOID3_10(s[527]);
initRESAVOID4_10(s[528]);
initRESAVOID5_10(s[529]);
initRESAVOID6_10(s[530]);
initRESAVOID7_10(s[531]);
initRESAVOID8_10(s[532]);
initRESAVOID9_10(s[533]);
initRESAVOID96_10(s[534]);
initRESAVOID97_10(s[535]);
initRESAVOID1_11(s[536]);
initRESAVOID2_11(s[537]);
initRESAVOID3_11(s[538]);
initRESAVOID4_11(s[539]);
initRESAVOID5_11(s[540]);
initRESAVOID6_11(s[541]);
initRESAVOID7_11(s[542]);
initRESAVOID8_11(s[543]);
initRESAVOID9_11(s[544]);
initRESAVOID96_11(s[545]);
initRESAVOID97_11(s[546]);
initRESAVOID1_12(s[547]);
initRESAVOID2_12(s[548]);
initRESAVOID3_12(s[549]);
initRESAVOID4_12(s[550]);
initRESAVOID5_12(s[551]);
initRESAVOID6_12(s[552]);
initRESAVOID7_12(s[553]);
initRESAVOID8_12(s[554]);
initRESAVOID9_12(s[555]);
initRESAVOID96_12(s[556]);
initRESAVOID97_12(s[557]);
initINSULTED1(s[558]);
initINSULTED2(s[559]);
initINSULTED3(s[560]);
initINSULTED4(s[561]);
initINSULTED5(s[562]);
initINSULTED6(s[563]);
initINSULTED7(s[564]);
initINSULTED8(s[565]);
initINSULTED9(s[566]);
initINSULTED10(s[567]);
initINSULTED11(s[568]);
initINSULTED96(s[569]);
initINSULTED97(s[570]);
initINSULTEDO_CODE(s[571]);
initRESINSULTED1_1(s[572]);
initRESINSULTED2_1(s[573]);
initRESINSULTED3_1(s[574]);
initRESINSULTED4_1(s[575]);
initRESINSULTED5_1(s[576]);
initRESINSULTED6_1(s[577]);
initRESINSULTED7_1(s[578]);
initRESINSULTED8_1(s[579]);
initRESINSULTED9_1(s[580]);
initRESINSULTED96_1(s[581]);
initRESINSULTED97_1(s[582]);
initRESINSULTED1_2(s[583]);
initRESINSULTED2_2(s[584]);
initRESINSULTED3_2(s[585]);
initRESINSULTED4_2(s[586]);
initRESINSULTED5_2(s[587]);
initRESINSULTED6_2(s[588]);
initRESINSULTED7_2(s[589]);
initRESINSULTED8_2(s[590]);
initRESINSULTED9_2(s[591]);
initRESINSULTED96_2(s[592]);
initRESINSULTED97_2(s[593]);
initRESINSULTED1_3(s[594]);
initRESINSULTED2_3(s[595]);
initRESINSULTED3_3(s[596]);
initRESINSULTED4_3(s[597]);
initRESINSULTED5_3(s[598]);
initRESINSULTED6_3(s[599]);
initRESINSULTED7_3(s[600]);
initRESINSULTED8_3(s[601]);
initRESINSULTED9_3(s[602]);
initRESINSULTED96_3(s[603]);
initRESINSULTED97_3(s[604]);
initRESINSULTED1_4(s[605]);
initRESINSULTED2_4(s[606]);
initRESINSULTED3_4(s[607]);
initRESINSULTED4_4(s[608]);
initRESINSULTED5_4(s[609]);
initRESINSULTED6_4(s[610]);
initRESINSULTED7_4(s[611]);
initRESINSULTED8_4(s[612]);
initRESINSULTED9_4(s[613]);
initRESINSULTED96_4(s[614]);
initRESINSULTED97_4(s[615]);
initRESINSULTED1_5(s[616]);
initRESINSULTED2_5(s[617]);
initRESINSULTED3_5(s[618]);
initRESINSULTED4_5(s[619]);
initRESINSULTED5_5(s[620]);
initRESINSULTED6_5(s[621]);
initRESINSULTED7_5(s[622]);
initRESINSULTED8_5(s[623]);
initRESINSULTED9_5(s[624]);
initRESINSULTED96_5(s[625]);
initRESINSULTED97_5(s[626]);
initRESINSULTED1_6(s[627]);
initRESINSULTED2_6(s[628]);
initRESINSULTED3_6(s[629]);
initRESINSULTED4_6(s[630]);
initRESINSULTED5_6(s[631]);
initRESINSULTED6_6(s[632]);
initRESINSULTED7_6(s[633]);
initRESINSULTED8_6(s[634]);
initRESINSULTED9_6(s[635]);
initRESINSULTED96_6(s[636]);
initRESINSULTED97_6(s[637]);
initRESINSULTED1_7(s[638]);
initRESINSULTED2_7(s[639]);
initRESINSULTED3_7(s[640]);
initRESINSULTED4_7(s[641]);
initRESINSULTED5_7(s[642]);
initRESINSULTED6_7(s[643]);
initRESINSULTED7_7(s[644]);
initRESINSULTED8_7(s[645]);
initRESINSULTED9_7(s[646]);
initRESINSULTED96_7(s[647]);
initRESINSULTED97_7(s[648]);
initRESINSULTED1_8(s[649]);
initRESINSULTED2_8(s[650]);
initRESINSULTED3_8(s[651]);
initRESINSULTED4_8(s[652]);
initRESINSULTED5_8(s[653]);
initRESINSULTED6_8(s[654]);
initRESINSULTED7_8(s[655]);
initRESINSULTED8_8(s[656]);
initRESINSULTED9_8(s[657]);
initRESINSULTED96_8(s[658]);
initRESINSULTED97_8(s[659]);
initRESINSULTED1_9(s[660]);
initRESINSULTED2_9(s[661]);
initRESINSULTED3_9(s[662]);
initRESINSULTED4_9(s[663]);
initRESINSULTED5_9(s[664]);
initRESINSULTED6_9(s[665]);
initRESINSULTED7_9(s[666]);
initRESINSULTED8_9(s[667]);
initRESINSULTED9_9(s[668]);
initRESINSULTED96_9(s[669]);
initRESINSULTED97_9(s[670]);
initRESINSULTED1_10(s[671]);
initRESINSULTED2_10(s[672]);
initRESINSULTED3_10(s[673]);
initRESINSULTED4_10(s[674]);
initRESINSULTED5_10(s[675]);
initRESINSULTED6_10(s[676]);
initRESINSULTED7_10(s[677]);
initRESINSULTED8_10(s[678]);
initRESINSULTED9_10(s[679]);
initRESINSULTED96_10(s[680]);
initRESINSULTED97_10(s[681]);
initRESINSULTED1_11(s[682]);
initRESINSULTED2_11(s[683]);
initRESINSULTED3_11(s[684]);
initRESINSULTED4_11(s[685]);
initRESINSULTED5_11(s[686]);
initRESINSULTED6_11(s[687]);
initRESINSULTED7_11(s[688]);
initRESINSULTED8_11(s[689]);
initRESINSULTED9_11(s[690]);
initRESINSULTED96_11(s[691]);
initRESINSULTED97_11(s[692]);
initRESINSULTED1_12(s[693]);
initRESINSULTED2_12(s[694]);
initRESINSULTED3_12(s[695]);
initRESINSULTED4_12(s[696]);
initRESINSULTED5_12(s[697]);
initRESINSULTED6_12(s[698]);
initRESINSULTED7_12(s[699]);
initRESINSULTED8_12(s[700]);
initRESINSULTED9_12(s[701]);
initRESINSULTED96_12(s[702]);
initRESINSULTED97_12(s[703]);
initATTACKED1(s[704]);
initATTACKED2(s[705]);
initATTACKED3(s[706]);
initATTACKED4(s[707]);
initATTACKED5(s[708]);
initATTACKED6(s[709]);
initATTACKED7(s[710]);
initATTACKED8(s[711]);
initATTACKED9(s[712]);
initATTACKED10(s[713]);
initATTACKED11(s[714]);
initATTACKED96(s[715]);
initATTACKED97(s[716]);
initATTACKEDO_CODE(s[717]);
initRESATTACKED1_1(s[718]);
initRESATTACKED2_1(s[719]);
initRESATTACKED3_1(s[720]);
initRESATTACKED4_1(s[721]);
initRESATTACKED5_1(s[722]);
initRESATTACKED6_1(s[723]);
initRESATTACKED7_1(s[724]);
initRESATTACKED8_1(s[725]);
initRESATTACKED9_1(s[726]);
initRESATTACKED96_1(s[727]);
initRESATTACKED97_1(s[728]);
initRESATTACKED1_2(s[729]);
initRESATTACKED2_2(s[730]);
initRESATTACKED3_2(s[731]);
initRESATTACKED4_2(s[732]);
initRESATTACKED5_2(s[733]);
initRESATTACKED6_2(s[734]);
initRESATTACKED7_2(s[735]);
initRESATTACKED8_2(s[736]);
initRESATTACKED9_2(s[737]);
initRESATTACKED96_2(s[738]);
initRESATTACKED97_2(s[739]);
initRESATTACKED1_3(s[740]);
initRESATTACKED2_3(s[741]);
initRESATTACKED3_3(s[742]);
initRESATTACKED4_3(s[743]);
initRESATTACKED5_3(s[744]);
initRESATTACKED6_3(s[745]);
initRESATTACKED7_3(s[746]);
initRESATTACKED8_3(s[747]);
initRESATTACKED9_3(s[748]);
initRESATTACKED96_3(s[749]);
initRESATTACKED97_3(s[750]);
initRESATTACKED1_4(s[751]);
initRESATTACKED2_4(s[752]);
initRESATTACKED3_4(s[753]);
initRESATTACKED4_4(s[754]);
initRESATTACKED5_4(s[755]);
initRESATTACKED6_4(s[756]);
initRESATTACKED7_4(s[757]);
initRESATTACKED8_4(s[758]);
initRESATTACKED9_4(s[759]);
initRESATTACKED96_4(s[760]);
initRESATTACKED97_4(s[761]);
initRESATTACKED1_5(s[762]);
initRESATTACKED2_5(s[763]);
initRESATTACKED3_5(s[764]);
initRESATTACKED4_5(s[765]);
initRESATTACKED5_5(s[766]);
initRESATTACKED6_5(s[767]);
initRESATTACKED7_5(s[768]);
initRESATTACKED8_5(s[769]);
initRESATTACKED9_5(s[770]);
initRESATTACKED96_5(s[771]);
initRESATTACKED97_5(s[772]);
initRESATTACKED1_6(s[773]);
initRESATTACKED2_6(s[774]);
initRESATTACKED3_6(s[775]);
initRESATTACKED4_6(s[776]);
initRESATTACKED5_6(s[777]);
initRESATTACKED6_6(s[778]);
initRESATTACKED7_6(s[779]);
initRESATTACKED8_6(s[780]);
initRESATTACKED9_6(s[781]);
initRESATTACKED96_6(s[782]);
initRESATTACKED97_6(s[783]);
initRESATTACKED1_7(s[784]);
initRESATTACKED2_7(s[785]);
initRESATTACKED3_7(s[786]);
initRESATTACKED4_7(s[787]);
initRESATTACKED5_7(s[788]);
initRESATTACKED6_7(s[789]);
initRESATTACKED7_7(s[790]);
initRESATTACKED8_7(s[791]);
initRESATTACKED9_7(s[792]);
initRESATTACKED96_7(s[793]);
initRESATTACKED97_7(s[794]);
initRESATTACKED1_8(s[795]);
initRESATTACKED2_8(s[796]);
initRESATTACKED3_8(s[797]);
initRESATTACKED4_8(s[798]);
initRESATTACKED5_8(s[799]);
initRESATTACKED6_8(s[800]);
initRESATTACKED7_8(s[801]);
initRESATTACKED8_8(s[802]);
initRESATTACKED9_8(s[803]);
initRESATTACKED96_8(s[804]);
initRESATTACKED97_8(s[805]);
initRESATTACKED1_9(s[806]);
initRESATTACKED2_9(s[807]);
initRESATTACKED3_9(s[808]);
initRESATTACKED4_9(s[809]);
initRESATTACKED5_9(s[810]);
initRESATTACKED6_9(s[811]);
initRESATTACKED7_9(s[812]);
initRESATTACKED8_9(s[813]);
initRESATTACKED9_9(s[814]);
initRESATTACKED96_9(s[815]);
initRESATTACKED97_9(s[816]);
initRESATTACKED1_10(s[817]);
initRESATTACKED2_10(s[818]);
initRESATTACKED3_10(s[819]);
initRESATTACKED4_10(s[820]);
initRESATTACKED5_10(s[821]);
initRESATTACKED6_10(s[822]);
initRESATTACKED7_10(s[823]);
initRESATTACKED8_10(s[824]);
initRESATTACKED9_10(s[825]);
initRESATTACKED96_10(s[826]);
initRESATTACKED97_10(s[827]);
initRESATTACKED1_11(s[828]);
initRESATTACKED2_11(s[829]);
initRESATTACKED3_11(s[830]);
initRESATTACKED4_11(s[831]);
initRESATTACKED5_11(s[832]);
initRESATTACKED6_11(s[833]);
initRESATTACKED7_11(s[834]);
initRESATTACKED8_11(s[835]);
initRESATTACKED9_11(s[836]);
initRESATTACKED96_11(s[837]);
initRESATTACKED97_11(s[838]);
initRESATTACKED1_12(s[839]);
initRESATTACKED2_12(s[840]);
initRESATTACKED3_12(s[841]);
initRESATTACKED4_12(s[842]);
initRESATTACKED5_12(s[843]);
initRESATTACKED6_12(s[844]);
initRESATTACKED7_12(s[845]);
initRESATTACKED8_12(s[846]);
initRESATTACKED9_12(s[847]);
initRESATTACKED96_12(s[848]);
initRESATTACKED97_12(s[849]);
initSF1(s[850]);
initHEALTH(s[851]);
initHOSPC1(s[852]);
initHOSPDC1(s[853]);
initHOSPC2(s[854]);
initHOSPDC2(s[855]);
initHOSPC3(s[856]);
initHOSPDC3(s[857]);
initHOSPC4(s[858]);
initHOSPDC4(s[859]);
initHOSPC5(s[860]);
initHOSPDC5(s[861]);
initHOSPC6(s[862]);
initHOSPDC6(s[863]);
initHOSPC7(s[864]);
initHOSPDC7(s[865]);
initDISDIF1(s[866]);
initDISDIF2(s[867]);
initDISDIF3(s[868]);
initDISDIF4(s[869]);
initDISDIF5(s[870]);
initDISDIF6(s[871]);
initDISDIF7(s[872]);
initDISDIF8(s[873]);
initDISDIF9(s[874]);
initDISDIF10(s[875]);
initDISDIF11(s[876]);
initDISDIF12(s[877]);
initDISDIF96(s[878]);
initUSDAIRY(s[879]);
initUSBREAD(s[880]);
initWKFRUIT(s[881]);
initWKVEGE(s[882]);
initFRUVEGE(s[883]);
initWLK10M(s[884]);
initDAYWLK(s[885]);
initWLK30MIN(s[886]);
initWALKPACE(s[887]);
initSMEVER(s[888]);
initSMNOW(s[889]);
initNCIGS(s[890]);
initSMCIGS(s[891]);
initSMNCIGS(s[892]);
initAGLQUIT(s[893]);
initSMAGBG(s[894]);
initHCOND1(s[895]);
initHCOND2(s[896]);
initHCOND3(s[897]);
initHCOND4(s[898]);
initHCOND5(s[899]);
initHCOND6(s[900]);
initHCOND7(s[901]);
initHCOND8(s[902]);
initHCOND9(s[903]);
initHCOND10(s[904]);
initHCOND11(s[905]);
initHCOND12(s[906]);
initHCOND13(s[907]);
initHCOND14(s[908]);
initHCOND15(s[909]);
initHCOND16(s[910]);
initHCOND17(s[911]);
initHCOND96(s[912]);
initHCONDS01(s[913]);
initHCONDS02(s[914]);
initHCONDS03(s[915]);
initHCONDS04(s[916]);
initHCONDS05(s[917]);
initHCONDS08(s[918]);
initHCONDS09(s[919]);
initHCONDS10(s[920]);
initHCONDS11(s[921]);
initHCONDS12(s[922]);
initHCONDS13(s[923]);
initHCONDS14(s[924]);
initHCONDS15(s[925]);
initHCONDS16(s[926]);
initHCONDS17(s[927]);
initHCONDA01(s[928]);
initHCONDA02(s[929]);
initHCONDA03(s[930]);
initHCONDA04(s[931]);
initHCONDA05(s[932]);
initHCONDA06(s[933]);
initHCONDA07(s[934]);
initHCONDA08(s[935]);
initHCONDA09(s[936]);
initHCONDA10(s[937]);
initHCONDA11(s[938]);
initHCONDA12(s[939]);
initHCONDA13(s[940]);
initHCONDA14(s[941]);
initHCONDA15(s[942]);
initHCONDA16(s[943]);
initHCONDA17(s[944]);
initLCHMOR(s[945]);
initLCHMORN(s[946]);
initAIDHH(s[947]);
initAIDHUA1(s[948]);
initAIDHUA2(s[949]);
initAIDHUA3(s[950]);
initAIDHUA4(s[951]);
initAIDHUA5(s[952]);
initAIDHUA6(s[953]);
initAIDHUA7(s[954]);
initAIDHUA8(s[955]);
initAIDHUA9(s[956]);
initAIDHUA10(s[957]);
initAIDHUA11(s[958]);
initAIDHUA12(s[959]);
initAIDHUA13(s[960]);
initAIDHUA14(s[961]);
initAIDHUA15(s[962]);
initAIDHUA16(s[963]);
initAIDXHH(s[964]);
initNAIDXHH(s[965]);
initAIDHU1(s[966]);
initAIDHU2(s[967]);
initAIDHRS(s[968]);
initAIDEFT(s[969]);
initLCOHNPI(s[970]);
initCOH1BM(s[971]);
initCOH1BY(s[972]);
initCOH1MR(s[973]);
initCOH1EM(s[974]);
initCOH1EY(s[975]);
initNMAR(s[976]);
initLMAR1M(s[977]);
initLMAR1Y(s[978]);
initLADOPT(s[979]);
initLNADOPT(s[980]);
initLPRNT(s[981]);
initLNPRNT(s[982]);
initCH1BY4(s[983]);
initADCTS(s[984]);
initMOVY11(s[985]);
initMOVY12(s[986]);
initMOVY13(s[987]);
initMOVY14(s[988]);
initMOVY15(s[989]);
initMOVY16(s[990]);
initFAMILY(s[991]);
initEDUCATION(s[992]);
initMEMPLOY(s[993]);
initHOUSING(s[994]);
initAREA(s[995]);
initMOVEOTH_CODE(s[996]);
initMOVDIR(s[997]);
initPLNOWM(s[998]);
initPLNOWY4(s[999]);
initRELUP(s[1000]);
initMSTATSAM(s[1001]);
initLWWRONG(s[1002]);
initMSTATSAMN(s[1003]);
initMSTATCH1(s[1004]);
initSTATCM1(s[1005]);
initSTATCY41(s[1006]);
initDIVCHK1(s[1007]);
initDIVFIN1(s[1008]);
initDVM1(s[1009]);
initDVY41(s[1010]);
initCMLSTAT1(s[1011]);
initMSTATCH2(s[1012]);
initSTATCM2(s[1013]);
initSTATCY42(s[1014]);
initDIVCHK2(s[1015]);
initDIVFIN2(s[1016]);
initDVM2(s[1017]);
initDVY42(s[1018]);
initCMLSTAT2(s[1019]);
initCOHAB(s[1020]);
initCOHABN(s[1021]);
initLMCBM1(s[1022]);
initLMCBY41(s[1023]);
initCURRPART1(s[1024]);
initLMSPM1(s[1025]);
initLMSPY41(s[1026]);
initLMCBM2(s[1027]);
initLMCBY42(s[1028]);
initCURRPART2(s[1029]);
initLMSPM2(s[1030]);
initLMSPY42(s[1031]);
initLMCBM3(s[1032]);
initLMCBY43(s[1033]);
initCURRPART3(s[1034]);
initLMSPM3(s[1035]);
initLMSPY43(s[1036]);
initLMCBM4(s[1037]);
initLMCBY44(s[1038]);
initCURRPART4(s[1039]);
initLMSPM4(s[1040]);
initLMSPY44(s[1041]);
initFATHER(s[1042]);
initNCHILD(s[1043]);
initPREG(s[1044]);
initPREGM1(s[1045]);
initPREGY41(s[1046]);
initPREGFERT1(s[1047]);
initINVITRO1(s[1048]);
initPREGOUT1(s[1049]);
initPREGEND1(s[1050]);
initENDMNTH1(s[1051]);
initPREGSMOKE1(s[1052]);
initSMKMNTH11(s[1053]);
initSMKMNTH21(s[1054]);
initSMKMNTH31(s[1055]);
initPREGSMK11(s[1056]);
initPREGSMK21(s[1057]);
initPREGSMK31(s[1058]);
initAEDROF1(s[1059]);
initAEPUWK1(s[1060]);
initAEPUDA1(s[1061]);
initLCHMULTI1(s[1062]);
initPREGM2(s[1063]);
initPREGY42(s[1064]);
initPREGFERT2(s[1065]);
initINVITRO2(s[1066]);
initPREGOUT2(s[1067]);
initPREGEND2(s[1068]);
initENDMNTH2(s[1069]);
initPREGSMOKE2(s[1070]);
initSMKMNTH12(s[1071]);
initSMKMNTH22(s[1072]);
initSMKMNTH32(s[1073]);
initPREGSMK12(s[1074]);
initPREGSMK22(s[1075]);
initPREGSMK32(s[1076]);
initAEDROF2(s[1077]);
initAEPUWK2(s[1078]);
initAEPUDA2(s[1079]);
initLCHMULTI2(s[1080]);
initPREGM3(s[1081]);
initPREGY43(s[1082]);
initPREGFERT3(s[1083]);
initINVITRO3(s[1084]);
initPREGOUT3(s[1085]);
initPREGEND3(s[1086]);
initENDMNTH3(s[1087]);
initPREGSMOKE3(s[1088]);
initSMKMNTH13(s[1089]);
initSMKMNTH23(s[1090]);
initSMKMNTH33(s[1091]);
initPREGSMK13(s[1092]);
initPREGSMK23(s[1093]);
initPREGSMK33(s[1094]);
initAEDROF3(s[1095]);
initAEPUWK3(s[1096]);
initAEPUDA3(s[1097]);
initLCHMULTI3(s[1098]);
initNNEWBORN(s[1099]);
initHCONDNO1(s[1100]);
initHCONDNS1(s[1101]);
initHCONDNO2(s[1102]);
initHCONDNS2(s[1103]);
initHCONDNO3(s[1104]);
initHCONDNS3(s[1105]);
initHCONDNO4(s[1106]);
initHCONDNS4(s[1107]);
initHCONDNO5(s[1108]);
initHCONDNS5(s[1109]);
initHCONDNO6(s[1110]);
initHCONDNS6(s[1111]);
initHCONDNO7(s[1112]);
initHCONDNS7(s[1113]);
initHCONDN1(s[1114]);
initHCONDN2(s[1115]);
initHCONDN3(s[1116]);
initHCONDN4(s[1117]);
initHCONDN5(s[1118]);
initHCONDN6(s[1119]);
initHCONDN7(s[1120]);
initHCONDN8(s[1121]);
initHCONDN9(s[1122]);
initHCONDN10(s[1123]);
initHCONDN11(s[1124]);
initHCONDN12(s[1125]);
initHCONDN13(s[1126]);
initHCONDN14(s[1127]);
initHCONDN15(s[1128]);
initHCONDN16(s[1129]);
initHCONDN17(s[1130]);
initHCONDN96(s[1131]);
initCONTFT(s[1132]);
initFTENDM(s[1133]);
initFTENDY4(s[1134]);
initFTEDANY(s[1135]);
initFTQUALS(s[1136]);
initFTEDSTARTM1(s[1137]);
initFTEDSTARTY41(s[1138]);
initFTEDEND1(s[1139]);
initFT2ENDM1(s[1140]);
initFT2ENDY41(s[1141]);
initFTEDMOR1(s[1142]);
initFTEDSTARTM2(s[1143]);
initFTEDSTARTY42(s[1144]);
initFTEDEND2(s[1145]);
initFT2ENDM2(s[1146]);
initFT2ENDY42(s[1147]);
initFTEDMOR2(s[1148]);
initQUALNEW1(s[1149]);
initQUALNEW2(s[1150]);
initQUALNEW3(s[1151]);
initQUALNEW4(s[1152]);
initQUALNEW5(s[1153]);
initQUALNEW6(s[1154]);
initQUALNEW7(s[1155]);
initQUALNEW8(s[1156]);
initQUALNEW9(s[1157]);
initQUALNEW10(s[1158]);
initQUALNEW11(s[1159]);
initQUALNEW13(s[1160]);
initQUALNEW15(s[1161]);
initQUALNEW16(s[1162]);
initQUALNEW17(s[1163]);
initQUALNEW18(s[1164]);
initQUALNEW19(s[1165]);
initQUALNEW20(s[1166]);
initQUALNEW21(s[1167]);
initQUALNEW22(s[1168]);
initQUALNEW23(s[1169]);
initQUALNEW24(s[1170]);
initQUALNEW25(s[1171]);
initQUALNEW26(s[1172]);
initQUALNEW27(s[1173]);
initQUALNEW28(s[1174]);
initQUALNEW29(s[1175]);
initQUALNEW30(s[1176]);
initQUALNEW31(s[1177]);
initTRAINANY(s[1178]);
initTRWHO1(s[1179]);
initTRAINDAYS1(s[1180]);
initTRAINHRS1(s[1181]);
initTRAINEND1(s[1182]);
initTRAINPURP11(s[1183]);
initTRAINPURP21(s[1184]);
initTRAINPURP31(s[1185]);
initTRAINPURP41(s[1186]);
initTRAINPURP51(s[1187]);
initTRAINPURP61(s[1188]);
initTRAINPURP71(s[1189]);
initTRAINQUAL1(s[1190]);
initTRWHO2(s[1191]);
initTRAINDAYS2(s[1192]);
initTRAINHRS2(s[1193]);
initTRAINEND2(s[1194]);
initTRAINPURP12(s[1195]);
initTRAINPURP22(s[1196]);
initTRAINPURP32(s[1197]);
initTRAINPURP42(s[1198]);
initTRAINPURP52(s[1199]);
initTRAINPURP62(s[1200]);
initTRAINPURP72(s[1201]);
initTRAINQUAL2(s[1202]);
initTRWHO3(s[1203]);
initTRAINDAYS3(s[1204]);
initTRAINHRS3(s[1205]);
initTRAINEND3(s[1206]);
initTRAINPURP13(s[1207]);
initTRAINPURP23(s[1208]);
initTRAINPURP33(s[1209]);
initTRAINPURP43(s[1210]);
initTRAINPURP53(s[1211]);
initTRAINPURP63(s[1212]);
initTRAINPURP73(s[1213]);
initTRAINQUAL3(s[1214]);
initTRAINN(s[1215]);
initTRQUAL1(s[1216]);
initTRQUAL2(s[1217]);
initTRQUAL3(s[1218]);
initTRQUAL4(s[1219]);
initTRQUAL5(s[1220]);
initTRQUAL6(s[1221]);
initTRQUAL7(s[1222]);
initTRQUAL8(s[1223]);
initTRQUAL9(s[1224]);
initTRQUAL10(s[1225]);
initTRQUAL11(s[1226]);
initTRQUAL13(s[1227]);
initTRQUAL15(s[1228]);
initTRQUAL16(s[1229]);
initTRQUAL17(s[1230]);
initTRQUAL18(s[1231]);
initTRQUAL19(s[1232]);
initTRQUAL20(s[1233]);
initTRQUAL21(s[1234]);
initTRQUAL22(s[1235]);
initTRQUAL23(s[1236]);
initTRQUAL24(s[1237]);
initTRQUAL25(s[1238]);
initTRQUAL26(s[1239]);
initTRQUAL27(s[1240]);
initTRQUAL28(s[1241]);
initTRQUAL29(s[1242]);
initTRQUAL30(s[1243]);
initTRQUAL31(s[1244]);
initNOTEMPCHK(s[1245]);
initEMPCHK(s[1246]);
initEMPSTENDD(s[1247]);
initEMPSTENDM(s[1248]);
initEMPSTENDY4(s[1249]);
initSTENDREAS(s[1250]);
initNXTST(s[1251]);
initNEXT1(s[1252]);
initNEXTSTAT1(s[1253]);
initNEXTELSE1(s[1254]);
initCURRSTAT1(s[1255]);
initNEXTJOB1(s[1256]);
initCURRJOB1(s[1257]);
initJOBHOURS1(s[1258]);
initREASEND1(s[1259]);
initJBATT1(s[1260]);
initSTATENDD1(s[1261]);
initSTATENDM1(s[1262]);
initSTATENDY41(s[1263]);
initNEXT2(s[1264]);
initNEXTSTAT2(s[1265]);
initNEXTELSE2(s[1266]);
initCURRSTAT2(s[1267]);
initNEXTJOB2(s[1268]);
initCURRJOB2(s[1269]);
initJOBHOURS2(s[1270]);
initREASEND2(s[1271]);
initJBATT2(s[1272]);
initSTATENDD2(s[1273]);
initSTATENDM2(s[1274]);
initSTATENDY42(s[1275]);
initNEXT3(s[1276]);
initNEXTSTAT3(s[1277]);
initNEXTELSE3(s[1278]);
initCURRSTAT3(s[1279]);
initNEXTJOB3(s[1280]);
initCURRJOB3(s[1281]);
initJOBHOURS3(s[1282]);
initREASEND3(s[1283]);
initJBATT3(s[1284]);
initSTATENDD3(s[1285]);
initSTATENDM3(s[1286]);
initSTATENDY43(s[1287]);
initNEXT4(s[1288]);
initNEXTSTAT4(s[1289]);
initNEXTELSE4(s[1290]);
initCURRSTAT4(s[1291]);
initNEXTJOB4(s[1292]);
initCURRJOB4(s[1293]);
initJOBHOURS4(s[1294]);
initREASEND4(s[1295]);
initJBATT4(s[1296]);
initSTATENDD4(s[1297]);
initSTATENDM4(s[1298]);
initSTATENDY44(s[1299]);
initNEXT5(s[1300]);
initNEXTSTAT5(s[1301]);
initNEXTELSE5(s[1302]);
initCURRSTAT5(s[1303]);
initNEXTJOB5(s[1304]);
initCURRJOB5(s[1305]);
initJOBHOURS5(s[1306]);
initREASEND5(s[1307]);
initJBATT5(s[1308]);
initSTATENDD5(s[1309]);
initSTATENDM5(s[1310]);
initSTATENDY45(s[1311]);
initNEXT6(s[1312]);
initNEXTSTAT6(s[1313]);
initNEXTELSE6(s[1314]);
initCURRSTAT6(s[1315]);
initNEXTJOB6(s[1316]);
initCURRJOB6(s[1317]);
initJOBHOURS6(s[1318]);
initREASEND6(s[1319]);
initJBATT6(s[1320]);
initSTATENDD6(s[1321]);
initSTATENDM6(s[1322]);
initSTATENDY46(s[1323]);
initNXTSTELSE(s[1324]);
initCSTAT(s[1325]);
initNXTSTENDD(s[1326]);
initNXTSTENDM(s[1327]);
initNXTSTENDY4(s[1328]);
initJBSAMR(s[1329]);
initWKPLSAM(s[1330]);
initSAMEJOB(s[1331]);
initMATLV(s[1332]);
initMATLVSTD(s[1333]);
initMATLVSTM(s[1334]);
initMATLVSTY4(s[1335]);
initMATLVENDD(s[1336]);
initMATLVENDM(s[1337]);
initMATLVENDY4(s[1338]);
initJBENDD(s[1339]);
initJBENDM(s[1340]);
initJBENDY4(s[1341]);
initJBENDREAS(s[1342]);
initCJOB(s[1343]);
initNXTJBHRS(s[1344]);
initNXTJBES(s[1345]);
initNXTJBENDD(s[1346]);
initNXTJBENDM(s[1347]);
initNXTJBENDY4(s[1348]);
initNXTENDREAS(s[1349]);
initCJBATT(s[1350]);
initNEXT(s[1351]);
initJBHAS(s[1352]);
initJBOFF(s[1353]);
initJBOFFY(s[1354]);
initJBTERM1(s[1355]);
initJBTERM2(s[1356]);
initJBSIC07CHK(s[1357]);
initJBSOC00CHK(s[1358]);
initJBSEMPCHK(s[1359]);
initJBSEMP(s[1360]);
initJBBGDATY(s[1361]);
initJBBGDATM(s[1362]);
initJBBGDATD(s[1363]);
initJBBGD(s[1364]);
initJBBGM(s[1365]);
initJBBGY(s[1366]);
initJBMNGRCHK(s[1367]);
initJBMNGR(s[1368]);
initJBSIZECHK(s[1369]);
initJBSIZE(s[1370]);
initJBSECT(s[1371]);
initJBSECTPUB(s[1372]);
initJBHRS(s[1373]);
initJBOT(s[1374]);
initJBOTPD(s[1375]);
initJBPL(s[1376]);
initPAYGWC(s[1377]);
initPAYNWC(s[1378]);
initPAYUSL(s[1379]);
initPAYU(s[1380]);
initPAYUWC(s[1381]);
initPAYUG(s[1382]);
initPAYTYP(s[1383]);
initOVTPAY(s[1384]);
initEXTNSA(s[1385]);
initEXTRATE(s[1386]);
initEXTREST(s[1387]);
initBASNSA(s[1388]);
initBASRATE(s[1389]);
initBASREST(s[1390]);
initOVTNSA(s[1391]);
initOVTRATE(s[1392]);
initOVTREST(s[1393]);
initJBTTWT(s[1394]);
initWORKTRAV(s[1395]);
initBOSSETHN(s[1396]);
initBOSSSEX(s[1397]);
initETCOSAMN(s[1398]);
initETCOWHN(s[1399]);
initETCOOTN(s[1400]);
initCOWOSEXN(s[1401]);
initETCOSAMP(s[1402]);
initETCOWHP(s[1403]);
initETCOOTP(s[1404]);
initCOWOSEXP(s[1405]);
initJSBOSS(s[1406]);
initJSSIZE(s[1407]);
initJSHRS(s[1408]);
initJSTYPEB(s[1409]);
initJSACCS(s[1410]);
initJSPART(s[1411]);
initJSPRBM(s[1412]);
initJSPRBY4(s[1413]);
initJSPREM(s[1414]);
initJSPREY4(s[1415]);
initJSPRLS(s[1416]);
initJSPRTX(s[1417]);
initJSPRNI(s[1418]);
initJSPAYU(s[1419]);
initJSPAYW(s[1420]);
initJSPYTX(s[1421]);
initJSPYNI(s[1422]);
initJSPL(s[1423]);
initJSTTWT(s[1424]);
initJSTTWTB(s[1425]);
initJSWORKTRAV(s[1426]);
initJBSAT(s[1427]);
initWKPHYS(s[1428]);
initJULK4WK(s[1429]);
initJULKJB(s[1430]);
initJUBGN(s[1431]);
initJULK4X1(s[1432]);
initJULK4X2(s[1433]);
initJULK4X3(s[1434]);
initJULK4X4(s[1435]);
initJULK4X5(s[1436]);
initJULK4X6(s[1437]);
initJULK4X96(s[1438]);
initJBHAD(s[1439]);
initJLENDM(s[1440]);
initJLENDY(s[1441]);
initJLSEMP(s[1442]);
initJLBOSS(s[1443]);
initJLMNGR(s[1444]);
initJLSIZE(s[1445]);
initEPROSH(s[1446]);
initMLFUTR(s[1447]);
initMLRNOT1(s[1448]);
initMLRNOT2(s[1449]);
initMLRNOT3(s[1450]);
initMLRNOT4(s[1451]);
initMLRNOT5(s[1452]);
initMLRNOT6(s[1453]);
initMLRNOT7(s[1454]);
initMLRNOT8(s[1455]);
initMLRNOT9(s[1456]);
initMLRNOT10(s[1457]);
initMLRNOT11(s[1458]);
initMLRNOT12(s[1459]);
initMLRNOT13(s[1460]);
initMLRNOT97(s[1461]);
initMLAGST(s[1462]);
initMLAGSTU(s[1463]);
initMLWKFPT(s[1464]);
initMATLEAVE(s[1465]);
initJ2HAS(s[1466]);
initJ2SEMP(s[1467]);
initJ2HRS(s[1468]);
initJ2PAY(s[1469]);
initLGAPED(s[1470]);
initEMPINTRO(s[1471]);
initNJOBHIST(s[1472]);
initJOBLOOK(s[1473]);
initJOBDENY(s[1474]);
initRESJOBDENY1(s[1475]);
initRESJOBDENY2(s[1476]);
initRESJOBDENY3(s[1477]);
initRESJOBDENY4(s[1478]);
initRESJOBDENY5(s[1479]);
initRESJOBDENY6(s[1480]);
initRESJOBDENY7(s[1481]);
initRESJOBDENY8(s[1482]);
initRESJOBDENY9(s[1483]);
initRESJOBDENY96(s[1484]);
initRESJOBDENY97(s[1485]);
initDISEFFECTS1(s[1486]);
initDISEFFECTS2(s[1487]);
initDISEFFECTS3(s[1488]);
initDISEFFECTS4(s[1489]);
initDISEFFECTS5(s[1490]);
initCCARE(s[1491]);
initCCWORK(s[1492]);
initLVREL1(s[1493]);
initLVREL9(s[1494]);
initLVREL2(s[1495]);
initLVREL10(s[1496]);
initLVREL3(s[1497]);
initLVREL4(s[1498]);
initLVREL5(s[1499]);
initLVREL6(s[1500]);
initLVREL7(s[1501]);
initLVREL8(s[1502]);
initLVREL96(s[1503]);
initMAMOSTCON(s[1504]);
initPAMOSTCON(s[1505]);
initMAAGE(s[1506]);
initPAAGE(s[1507]);
initNRELS1(s[1508]);
initNRELS2(s[1509]);
initNRELS3(s[1510]);
initNRELS4(s[1511]);
initNRELS5(s[1512]);
initNRELS6(s[1513]);
initPARMAR(s[1514]);
initMALONE(s[1515]);
initPALONE(s[1516]);
initOHCH16(s[1517]);
initSEEKID(s[1518]);
initWEKID(s[1519]);
initSTAYKID(s[1520]);
initSTAYKIDW(s[1521]);
initFARKID(s[1522]);
initRELKID(s[1523]);
initMASEE(s[1524]);
initMACON(s[1525]);
initMAFAR(s[1526]);
initPASEE(s[1527]);
initPACON(s[1528]);
initPAFAR(s[1529]);
initPAAID1(s[1530]);
initPAAID2(s[1531]);
initPAAID3(s[1532]);
initPAAID4(s[1533]);
initPAAID5(s[1534]);
initPAAID6(s[1535]);
initPAAID7(s[1536]);
initPAAID8(s[1537]);
initPAAID96(s[1538]);
initPAAID97(s[1539]);
initPAIDU1(s[1540]);
initPAIDU2(s[1541]);
initPAIDU3(s[1542]);
initPAIDU4(s[1543]);
initPAIDU5(s[1544]);
initPAIDU6(s[1545]);
initPAIDU7(s[1546]);
initPAIDU8(s[1547]);
initPAIDU96(s[1548]);
initPAIDU97(s[1549]);
initCHSEE(s[1550]);
initCHCON(s[1551]);
initCHFAR(s[1552]);
initCHAID1(s[1553]);
initCHAID2(s[1554]);
initCHAID3(s[1555]);
initCHAID4(s[1556]);
initCHAID5(s[1557]);
initCHAID6(s[1558]);
initCHAID7(s[1559]);
initCHAID8(s[1560]);
initCHAID96(s[1561]);
initCHAID97(s[1562]);
initCAIDU1(s[1563]);
initCAIDU2(s[1564]);
initCAIDU3(s[1565]);
initCAIDU4(s[1566]);
initCAIDU5(s[1567]);
initCAIDU6(s[1568]);
initCAIDU7(s[1569]);
initCAIDU8(s[1570]);
initCAIDU96(s[1571]);
initCAIDU97(s[1572]);
initKIDSPT(s[1573]);
initFTEXV(s[1574]);
initFTEXW(s[1575]);
initPARCHILD(s[1576]);
initHLPHMWK(s[1577]);
initLEVELIMP(s[1578]);
initAPVOCIMP(s[1579]);
initKID2UNI01(s[1580]);
initKID2UNI02(s[1581]);
initKID2UNI03(s[1582]);
initKID2UNI04(s[1583]);
initKID2UNI05(s[1584]);
initKID2UNI06(s[1585]);
initKID2UNI07(s[1586]);
initKID2UNI08(s[1587]);
initKID2UNI09(s[1588]);
initKID2UNI10(s[1589]);
initKID2UNI11(s[1590]);
initKID2UNI12(s[1591]);
initKID2UNI13(s[1592]);
initKID2UNI14(s[1593]);
initKID2UNI15(s[1594]);
initKID2UNI16(s[1595]);
initSOCIALKID(s[1596]);
initDINNER(s[1597]);
initQUARREL(s[1598]);
initTALKMATTER(s[1599]);
initRULESKID(s[1600]);
initPYENRL(s[1601]);
initPRAISEKID(s[1602]);
initSLAPKID(s[1603]);
initCUDDLEKID(s[1604]);
initYELLKID(s[1605]);
initBTYPE1(s[1606]);
initBTYPE2(s[1607]);
initBTYPE10(s[1608]);
initBTYPE3(s[1609]);
initBTYPE4(s[1610]);
initBTYPE5(s[1611]);
initBTYPE6(s[1612]);
initBTYPE7(s[1613]);
initBTYPE8(s[1614]);
initBTYPE9(s[1615]);
initBTYPE96(s[1616]);
initBENUNEMP1(s[1617]);
initBENUNEMP2(s[1618]);
initBENUNEMP3(s[1619]);
initBENUNEMP4(s[1620]);
initBENUNEMP5(s[1621]);
initBENUNEMP6(s[1622]);
initBENUNEMP7(s[1623]);
initBENUNEMP96(s[1624]);
initBENDIS1(s[1625]);
initBENDIS11(s[1626]);
initBENDIS2(s[1627]);
initBENDIS3(s[1628]);
initBENDIS4(s[1629]);
initBENDIS5(s[1630]);
initBENDIS12(s[1631]);
initBENDIS6(s[1632]);
initBENDIS7(s[1633]);
initBENDIS8(s[1634]);
initBENDIS9(s[1635]);
initBENDIS10(s[1636]);
initBENDIS96(s[1637]);
initBENDIS97(s[1638]);
initBENESA(s[1639]);
initBENPEN1(s[1640]);
initBENPEN2(s[1641]);
initBENPEN3(s[1642]);
initBENPEN4(s[1643]);
initBENPEN5(s[1644]);
initBENPEN6(s[1645]);
initBENPEN7(s[1646]);
initBENPEN8(s[1647]);
initBENPEN10(s[1648]);
initBENPEN11(s[1649]);
initBENPEN12(s[1650]);
initBENPEN13(s[1651]);
initBENPEN96(s[1652]);
initNISERPS(s[1653]);
initBENCB(s[1654]);
initBENCTC(s[1655]);
initBENFAM1(s[1656]);
initBENFAM2(s[1657]);
initBENFAM3(s[1658]);
initBENFAM4(s[1659]);
initBENFAM5(s[1660]);
initBENFAM6(s[1661]);
initBENFAM7(s[1662]);
initBENFAM8(s[1663]);
initBENFAM9(s[1664]);
initBENFAM10(s[1665]);
initBENFAM96(s[1666]);
initBENTAX1(s[1667]);
initBENTAX2(s[1668]);
initBENTAX3(s[1669]);
initBENTAX4(s[1670]);
initBENTAX5(s[1671]);
initBENTAX7(s[1672]);
initBENTAX8(s[1673]);
initBENTAX9(s[1674]);
initBENTAX10(s[1675]);
initBENTAX96(s[1676]);
initBENHOU1(s[1677]);
initBENHOU2(s[1678]);
initBENHOU3(s[1679]);
initBENHOU4(s[1680]);
initBENHOU5(s[1681]);
initBENHOU6(s[1682]);
initBENHOU7(s[1683]);
initBENHOU8(s[1684]);
initBENHOU9(s[1685]);
initBENHOU96(s[1686]);
initBENSTA1(s[1687]);
initBENSTA2(s[1688]);
initBENSTA3(s[1689]);
initBENSTA4(s[1690]);
initBENSTA5(s[1691]);
initBENSTA6(s[1692]);
initBENSTA7(s[1693]);
initBENSTA9(s[1694]);
initBENSTA10(s[1695]);
initBENSTA11(s[1696]);
initBENSTA12(s[1697]);
initBENSTA13(s[1698]);
initBENSTA96(s[1699]);
initBENSTA97(s[1700]);
initNFH01(s[1701]);
initNFH02(s[1702]);
initNFH03(s[1703]);
initNFH04(s[1704]);
initNFH05(s[1705]);
initNFH06(s[1706]);
initNFH07(s[1707]);
initNFH08(s[1708]);
initNFH09(s[1709]);
initNFH10(s[1710]);
initNFH11(s[1711]);
initNFH12(s[1712]);
initNFH13(s[1713]);
initNFH14(s[1714]);
initNFH15(s[1715]);
initNFH16(s[1716]);
initNFH17(s[1717]);
initNFH18(s[1718]);
initNFH19(s[1719]);
initNFH20(s[1720]);
initNFH21(s[1721]);
initNFH22(s[1722]);
initNFH23(s[1723]);
initNFH24(s[1724]);
initNFH25(s[1725]);
initNFH26(s[1726]);
initNFH27(s[1727]);
initNFH28(s[1728]);
initNFH29(s[1729]);
initNFH30(s[1730]);
initNFH31(s[1731]);
initNFH32(s[1732]);
initNFH33(s[1733]);
initNFH34(s[1734]);
initNFH35(s[1735]);
initNFH36(s[1736]);
initNFH37(s[1737]);
initNFH38(s[1738]);
initNFH39(s[1739]);
initFIYRDIA(s[1740]);
initFIYRDB1(s[1741]);
initFIYRDB2(s[1742]);
initFIYRDB3(s[1743]);
initFIYRDB4(s[1744]);
initFIYRDB5(s[1745]);
initFIYRDB6(s[1746]);
initFINNOW(s[1747]);
initFINFUT(s[1748]);
initN1619ABS(s[1749]);
initNUNDER16(s[1750]);
initNUNDER16ABS(s[1751]);
initNUNDER20ABS(s[1752]);
initCMROUTE(s[1753]);
initCMSAMEA(s[1754]);
initCMSAMEB(s[1755]);
initCMSAMEC(s[1756]);
initCMFLAG(s[1757]);
initCSACALC(s[1758]);
initCSAKIDNO1(s[1759]);
initCSAKIDNO2(s[1760]);
initCSAKIDNO3(s[1761]);
initCSAKIDNO4(s[1762]);
initCSAKIDNO5(s[1763]);
initCSAPAYTO(s[1764]);
initCSACALCAM(s[1765]);
initCMCSAPER(s[1766]);
initCMCSAALL(s[1767]);
initCMCSAACT(s[1768]);
initCMCSAAM(s[1769]);
initCMCSAPR(s[1770]);
initCSARECPER(s[1771]);
initDCSATM(s[1772]);
initCMCSANIL1(s[1773]);
initCMCSANIL2(s[1774]);
initCMCSANIL3(s[1775]);
initCMCSANIL4(s[1776]);
initCMCSANIL5(s[1777]);
initCMCSANIL6(s[1778]);
initCMCSANIL7(s[1779]);
initCMCSANIL8(s[1780]);
initCMCSANIL9(s[1781]);
initCMCSANIL97(s[1782]);
initCMCORD(s[1783]);
initCMCOKIDNO1(s[1784]);
initCMCOKIDNO2(s[1785]);
initCMCOKIDNO3(s[1786]);
initCMCOKIDNO4(s[1787]);
initCMCOKIDNO5(s[1788]);
initCMCORDAM(s[1789]);
initCMCORDPER(s[1790]);
initCMCORDALL(s[1791]);
initCMCORDREC(s[1792]);
initCMCORDRCAM(s[1793]);
initCMCORDRCPR(s[1794]);
initCORDRECPER(s[1795]);
initCMCORDTM(s[1796]);
initCMVOL(s[1797]);
initCMVOLKIDNO1(s[1798]);
initCMVOLKIDNO2(s[1799]);
initCMVOLKIDNO3(s[1800]);
initCMVOLKIDNO4(s[1801]);
initCMVOLKIDNO5(s[1802]);
initCMVOLAM(s[1803]);
initCMVOLPER(s[1804]);
initCMVOLALL(s[1805]);
initCMVOLREC(s[1806]);
initCMVOLRCAM(s[1807]);
initCMVOLRCPR(s[1808]);
initVOLRECPER(s[1809]);
initCMVOLTM(s[1810]);
initCMNIL1(s[1811]);
initCMNIL2(s[1812]);
initCMNIL3(s[1813]);
initCMNIL4(s[1814]);
initCMNIL5(s[1815]);
initCMNIL6(s[1816]);
initCMNIL7(s[1817]);
initCMNIL8(s[1818]);
initCMNIL9(s[1819]);
initCMNIL10(s[1820]);
initCMNIL97(s[1821]);
initCMOTHPAY1(s[1822]);
initCMOTHPAY2(s[1823]);
initCMOTHPAY3(s[1824]);
initCMOTHPAY4(s[1825]);
initCMOTHPAY5(s[1826]);
initCMOTHPAY6(s[1827]);
initCMOTHPAY7(s[1828]);
initCMOTHPAY8(s[1829]);
initCMOTHPAY9(s[1830]);
initCMOTHPAY10(s[1831]);
initCMOTHPAY11(s[1832]);
initCMOTHPAY96(s[1833]);
initCMOTHPAY97(s[1834]);
initCMKNDEVR1(s[1835]);
initCMKNDEVR2(s[1836]);
initCMKNDEVR3(s[1837]);
initCMKNDEVR4(s[1838]);
initCMKNDEVR96(s[1839]);
initCMKNDEVR97(s[1840]);
initCMNKY1(s[1841]);
initCMNKY2(s[1842]);
initCMNKY3(s[1843]);
initEXPREAM(s[1844]);
initEXSAME(s[1845]);
initRETCHK(s[1846]);
initAGERET(s[1847]);
initRTPRO1(s[1848]);
initRTPRO2(s[1849]);
initRTPRO3(s[1850]);
initRTPRO4(s[1851]);
initRTPRO5(s[1852]);
initRTPRO6(s[1853]);
initRTCON1(s[1854]);
initRTCON2(s[1855]);
initRTCON3(s[1856]);
initRTCON4(s[1857]);
initPENMEX(s[1858]);
initPPPEX(s[1859]);
initPPPEXM(s[1860]);
initSPPEN(s[1861]);
initRTEXPJB(s[1862]);
initRTFND1(s[1863]);
initRTFND2(s[1864]);
initRTFND3(s[1865]);
initRTFND4(s[1866]);
initRTFND5(s[1867]);
initRTFND6(s[1868]);
initRTFND7(s[1869]);
initRTFND8(s[1870]);
initRTFND9(s[1871]);
initRTFND10(s[1872]);
initRTFND96(s[1873]);
initRETAMT(s[1874]);
initRETSUF(s[1875]);
initVOTE1(s[1876]);
initVOTE2(s[1877]);
initVOTE3(s[1878]);
initVOTE4(s[1879]);
initVOTE5(s[1880]);
initVOTE6(s[1881]);
initOLYMPAS31(s[1882]);
initOLYMPAS32(s[1883]);
initOLYMPAS33(s[1884]);
initOLYMPAS34(s[1885]);
initOLYMPAS35(s[1886]);
initOLYMPAS396(s[1887]);
initOLYMPAS398(s[1888]);
initOLYMACT31(s[1889]);
initOLYMACT32(s[1890]);
initOLYMACT33(s[1891]);
initOLYMACT34(s[1892]);
initOLYMACT35(s[1893]);
initOLYMACT36(s[1894]);
initOLYMACT37(s[1895]);
initOLYMACT38(s[1896]);
initOLYMACT396(s[1897]);
initOLYMACT398(s[1898]);
initARTS1A1(s[1899]);
initARTS1A2(s[1900]);
initARTS1A3(s[1901]);
initARTS1A4(s[1902]);
initARTS1A5(s[1903]);
initARTS1A6(s[1904]);
initARTS1A7(s[1905]);
initARTS1A96(s[1906]);
initARTS1B9(s[1907]);
initARTS1B10(s[1908]);
initARTS1B11(s[1909]);
initARTS1B12(s[1910]);
initARTS1B13(s[1911]);
initARTS1B14(s[1912]);
initARTS1B15(s[1913]);
initARTS1B96(s[1914]);
initARTS1FREQ(s[1915]);
initARTS2A1(s[1916]);
initARTS2A2(s[1917]);
initARTS2A3(s[1918]);
initARTS2A4(s[1919]);
initARTS2A5(s[1920]);
initARTS2A6(s[1921]);
initARTS2A7(s[1922]);
initARTS2A96(s[1923]);
initARTS2B9(s[1924]);
initARTS2B10(s[1925]);
initARTS2B11(s[1926]);
initARTS2B12(s[1927]);
initARTS2B13(s[1928]);
initARTS2B14(s[1929]);
initARTS2B15(s[1930]);
initARTS2B96(s[1931]);
initARTS2FREQ(s[1932]);
initMLA1(s[1933]);
initMLA2(s[1934]);
initMLA3(s[1935]);
initMLA96(s[1936]);
initLIBFREQ(s[1937]);
initARCFREQ(s[1938]);
initMUSFREQ(s[1939]);
initHERITAGE1(s[1940]);
initHERITAGE2(s[1941]);
initHERITAGE3(s[1942]);
initHERITAGE4(s[1943]);
initHERITAGE5(s[1944]);
initHERITAGE6(s[1945]);
initHERITAGE7(s[1946]);
initHERITAGE8(s[1947]);
initHERITAGE96(s[1948]);
initHERFREQ(s[1949]);
initSPORTS11(s[1950]);
initSPORTS12(s[1951]);
initSPORTS13(s[1952]);
initSPORTS14(s[1953]);
initSPORTS15(s[1954]);
initSPORTS16(s[1955]);
initSPORTS17(s[1956]);
initSPORTS18(s[1957]);
initSPORTS19(s[1958]);
initSPORTS110(s[1959]);
initSPORTS111(s[1960]);
initSPORTS112(s[1961]);
initSPORTS113(s[1962]);
initSPORTS114(s[1963]);
initSPORTS196(s[1964]);
initSPORTS216(s[1965]);
initSPORTS217(s[1966]);
initSPORTS218(s[1967]);
initSPORTS219(s[1968]);
initSPORTS220(s[1969]);
initSPORTS221(s[1970]);
initSPORTS222(s[1971]);
initSPORTS223(s[1972]);
initSPORTS224(s[1973]);
initSPORTS225(s[1974]);
initSPORTS226(s[1975]);
initSPORTS227(s[1976]);
initSPORTS228(s[1977]);
initSPORTS229(s[1978]);
initSPORTS230(s[1979]);
initSPORTS231(s[1980]);
initSPORTS296(s[1981]);
initSPORTSFREQ(s[1982]);
initSPORTS31(s[1983]);
initSPORTS32(s[1984]);
initSPORTS33(s[1985]);
initSPORTS34(s[1986]);
initSPORTS35(s[1987]);
initSPORTS36(s[1988]);
initSPORTS37(s[1989]);
initSPORTS38(s[1990]);
initSPORTS39(s[1991]);
initSPORTS396(s[1992]);
initSPORTS3FREQ(s[1993]);
initCLUB(s[1994]);
initSPORTACT(s[1995]);
initCULTUREA(s[1996]);
initCULTUREB(s[1997]);
initCULTUREC(s[1998]);
initCULTURED(s[1999]);
initCULTUREE(s[2000]);
initCULTUREF(s[2001]);
initCULTUREG(s[2002]);
initSCAC(s[2003]);
initSCRF1(s[2004]);
initSCRF2(s[2005]);
initSCRF3(s[2006]);
initSCRF4(s[2007]);
initSCRF5(s[2008]);
initSCRF6(s[2009]);
initSCRF97(s[2010]);
initSCUN1(s[2011]);
initSCUN2(s[2012]);
initSCUN3(s[2013]);
initSCUN97(s[2014]);
initSCSF1(s[2015]);
initSCSF2A(s[2016]);
initSCSF2B(s[2017]);
initSCSF3A(s[2018]);
initSCSF3B(s[2019]);
initSCSF4A(s[2020]);
initSCSF4B(s[2021]);
initSCSF5(s[2022]);
initSCSF6A(s[2023]);
initSCSF6B(s[2024]);
initSCSF6C(s[2025]);
initSCSF7(s[2026]);
initSCGHQA(s[2027]);
initSCGHQB(s[2028]);
initSCGHQC(s[2029]);
initSCGHQD(s[2030]);
initSCGHQE(s[2031]);
initSCGHQF(s[2032]);
initSCGHQG(s[2033]);
initSCGHQH(s[2034]);
initSCGHQI(s[2035]);
initSCGHQJ(s[2036]);
initSCGHQK(s[2037]);
initSCGHQL(s[2038]);
initSCOTVOT1(s[2039]);
initSCOTVOT2(s[2040]);
initSCOTVOT3(s[2041]);
initSCOTVOT4(s[2042]);
initSCLFSAT1(s[2043]);
initSCLFSAT2(s[2044]);
initSCLFSAT7(s[2045]);
initSCLFSATO(s[2046]);
initSE1(s[2047]);
initSE2(s[2048]);
initSE3(s[2049]);
initSE4(s[2050]);
initSE5(s[2051]);
initSE6(s[2052]);
initSE7(s[2053]);
initSE8(s[2054]);
initSE9(s[2055]);
initSE10(s[2056]);
initSCRELPAREI(s[2057]);
initSCRELPARCD(s[2058]);
initSCRELPARWT(s[2059]);
initSCRELPARDS(s[2060]);
initSCRELPARRG(s[2061]);
initSCRELPARAR(s[2062]);
initSCRELPARIR(s[2063]);
initSCRELPARKS(s[2064]);
initSCPAROUTINT(s[2065]);
initSCRELHAPPY(s[2066]);
initYPNPAL(s[2067]);
initYPSOCWEB(s[2068]);
initYPNETCHT(s[2069]);
initSEXUOR(s[2070]);
initEATLIVU(s[2071]);
initFAMSUP(s[2072]);
initUPSET(s[2073]);
initLATE(s[2074]);
initSIBHIT(s[2075]);
initSIBSTEAL(s[2076]);
initSIBVERAB(s[2077]);
initSIBTEASE(s[2078]);
initHITSIB(s[2079]);
initSTEALSIB(s[2080]);
initVERABSIB(s[2081]);
initTEASESIB(s[2082]);
initARGM(s[2083]);
initARGF(s[2084]);
initTLKM(s[2085]);
initTLKF(s[2086]);
initPARSCH(s[2087]);
initPAREVE(s[2088]);
initHASSTEP(s[2089]);
initSTEPREL(s[2090]);
initYAJBSRV1(s[2091]);
initYAJBSRV2(s[2092]);
initYAJBSRV3(s[2093]);
initYAJBSRV4(s[2094]);
initYAJBSRV5(s[2095]);
initYAJBSRV8(s[2096]);
initYAJBSRV7(s[2097]);
initYAJBSRV96(s[2098]);
initFRPBULLI(s[2099]);
initFROBULLI(s[2100]);
initFRPBULLY(s[2101]);
initFROBULLY(s[2102]);
initDRGSOL(s[2103]);
initDRGMJ(s[2104]);
initDRGOTH(s[2105]);
initFRDRG(s[2106]);
initNCRR1(s[2107]);
initNCRRM(s[2108]);
initNCRRY4(s[2109]);
initNCRR3(s[2110]);
initNCRR4(s[2111]);
initNCRR5(s[2112]);
initNCRR6(s[2113]);
initNCRR8(s[2114]);
initNCRR9(s[2115]);
initNCRR11(s[2116]);
initNCRR12(s[2117]);
initCDPREAMBLE(s[2118]);
initSCWHORUPRO(s[2119]);
initSCWHORUEDU(s[2120]);
initSCWHORURAC(s[2121]);
initSCWHORUPOL(s[2122]);
initSCWHORUFAM(s[2123]);
initSCWHORUSEX(s[2124]);
initSCWHORUAGE(s[2125]);
initDELAY1(s[2126]);
initDELAY2(s[2127]);
initDELAY3(s[2128]);
initDELAY4(s[2129]);
initDELAY5(s[2130]);
initDELAY6(s[2131]);
initDELAY7(s[2132]);
initDELAY8(s[2133]);
initDELAY9(s[2134]);
initDELAY10(s[2135]);
initSCEVERDRNK(s[2136]);
initSCAGE1DRNK(s[2137]);
initSCFALCDRNK(s[2138]);
initSCALCL7D(s[2139]);
initSCNALCL7D(s[2140]);
initSCNALCPINT(s[2141]);
initSCNALCSHOT(s[2142]);
initSCNALCWINE(s[2143]);
initSCNALCPOPS(s[2144]);
initSCPUNDSTND(s[2145]);
initSCPRELY(s[2146]);
initSCPOPENUP(s[2147]);
initSCPCRITIC(s[2148]);
initSCPLETDWN(s[2149]);
initSCPANNOY(s[2150]);
initSCRELANY(s[2151]);
initSCRUNDSTND(s[2152]);
initSCRRELY(s[2153]);
initSCROPENUP(s[2154]);
initSCRCRITIC(s[2155]);
initSCRLETDWN(s[2156]);
initSCRANNOY(s[2157]);
initSCFRENDANY(s[2158]);
initSCFUNDSTND(s[2159]);
initSCFRELY(s[2160]);
initSCFOPENUP(s[2161]);
initSCFCRITIC(s[2162]);
initSCFLETDWN(s[2163]);
initSCFANNOY(s[2164]);
initSCSSUP1(s[2165]);
initSCSSUPR2R(s[2166]);
initMPWEB(s[2167]);
initCASIEND(s[2168]);
initCONSINTRO(s[2169]);
initSCHOOLCNTRY1(s[2170]);
initSCHOOLCNTRY2(s[2171]);
initSCHOOLCNTRY3(s[2172]);
initSCHOOLCNTRY4(s[2173]);
initSCHOOLCNTRY5(s[2174]);
initEDLINK(s[2175]);
initEDLINKCONF(s[2176]);
initEDLINKCONFB(s[2177]);
initEDLINKKIDE(s[2178]);
initEDLINKKIDSWN(s[2179]);
initEDLKKIDCONFE(s[2180]);
initEDLINKKIDCONFSW(s[2181]);
initEDUCSN(s[2182]);
initEDUCLINKB1(s[2183]);
initEDUCLINKB2(s[2184]);
initEDUCLINKB3(s[2185]);
initEDUCKIDSN(s[2186]);
initSIGNEDUCKIDS1(s[2187]);
initSIGNEDUCKIDS2(s[2188]);
initHESACONS(s[2189]);
initINSTOK(s[2190]);
initANYMORE(s[2191]);
initINSTOK2(s[2192]);
initANYMORE2(s[2193]);
initINSTOK3(s[2194]);
initANYMORE3(s[2195]);
initINSTOK4(s[2196]);
initANYMORE4(s[2197]);
initHLTHLINK(s[2198]);
initHLTHKIDLINK(s[2199]);
initHEALTHSN(s[2200]);
initHLTHLINKB1(s[2201]);
initHLTHLINKB2(s[2202]);
initHLTHLINKB3(s[2203]);
initFLAGLINKB1(s[2204]);
initFLAGLINKB2(s[2205]);
initFLAGLINKB3(s[2206]);
initINTSIGNHEALTH(s[2207]);
initHEALTHKIDSN(s[2208]);
initSIGNHEALTHKIDS1(s[2209]);
initSIGNHEALTHKIDS2(s[2210]);
initHMRCLINK(s[2211]);
initADVVOUCHER(s[2212]);
initVOUCHER(s[2213]);
initVOUCHERNI(s[2214]);
initCATVOUCHER(s[2215]);
initCATGIFTV(s[2216]);
initCAPGIFTV(s[2217]);
initCHKCOA(s[2218]);
initGIVECOA(s[2219]);
initEDUCRECD(s[2220]);
initEDUCRSGN(s[2221]);
initEDUCISGN(s[2222]);
initHLTHRECD(s[2223]);
initHLTHRSGN(s[2224]);
initHLTHISGN(s[2225]);
initSCRX_CODE(s[2226]);
initSCUX_CODE(s[2227]);
initHEDNTO_CODE(s[2228]);
initEVENT1(s[2229]);
initEVENT1S(s[2230]);
initEVENT2(s[2231]);
initEVENT2S(s[2232]);
initEVENT3(s[2233]);
initEVENT3S(s[2234]);
initEVENT4(s[2235]);
initEVENT4S(s[2236]);
initSPORTOTH_CODE(s[2237]);
initMARSTAT(s[2238]);
initLIVESP(s[2239]);
initLIVEWITH(s[2240]);
initEMPLOY(s[2241]);
initLINGUA(s[2242]);
initPS1(s[2243]);
initPS2(s[2244]);
initPS3(s[2245]);
initPS4(s[2246]);
initPS5(s[2247]);
initPS6(s[2248]);
initPS7(s[2249]);
initPS8(s[2250]);
initPS9(s[2251]);
initPS10(s[2252]);
initPS11(s[2253]);
initPS12(s[2254]);
initPS13(s[2255]);
initPS14(s[2256]);
initPS15(s[2257]);
initPS16(s[2258]);
initPS17(s[2259]);
initPS18(s[2260]);
initPS19(s[2261]);
initPS20(s[2262]);
initPS21(s[2263]);
initPS22(s[2264]);
initPS23(s[2265]);
initPS24(s[2266]);
initPS25(s[2267]);
initPS26(s[2268]);
initPS27(s[2269]);
initPS28(s[2270]);
initPS29(s[2271]);
initPS30(s[2272]);
initPS31(s[2273]);
initPS32(s[2274]);
initPSNUMCH(s[2275]);
initDONEPROXY(s[2276]);
initPREL(s[2277]);
initPREASON(s[2278]);
initPRIPN(s[2279]);
initPJULK4WK(s[2280]);
initPJBPTFT(s[2281]);
initPJSPTFT(s[2282]);
initPREARN(s[2283]);
initPREARNW(s[2284]);
initPREARNA(s[2285]);
initPBNFT1(s[2286]);
initPBNFT2(s[2287]);
initPBNFT13(s[2288]);
initPBNFT3(s[2289]);
initPBNFT4(s[2290]);
initPBNFT5(s[2291]);
initPBNFT6(s[2292]);
initPBNFT7(s[2293]);
initPBNFT8(s[2294]);
initPBNFT9(s[2295]);
initPBNFT10(s[2296]);
initPBNFT11(s[2297]);
initPBNFT12(s[2298]);
initPBNFT96(s[2299]);
initNETUSE(s[2300]);
initPRFITB(s[2301]);
initPRFITBW(s[2302]);
initPRFITBA(s[2303]);
initIVCOOP(s[2304]);
initSUSP(s[2305]);
initUNDQUS(s[2306]);
initIVPRSNT(s[2307]);
initIVINFNCE(s[2308]);
initIVAFFCT11(s[2309]);
initIVAFFCT12(s[2310]);
initIVAFFCT13(s[2311]);
initIVAFFCT14(s[2312]);
initIVAFFCT15(s[2313]);
initIVAFFCT17(s[2314]);
initIVAFFCT21(s[2315]);
initIVAFFCT22(s[2316]);
initIVAFFCT23(s[2317]);
initIVAFFCT27(s[2318]);
initIVAFFCT30(s[2319]);
initIVAFFCT97(s[2320]);
initIVLIENG(s[2321]);
initIVLITRANS(s[2322]);
initIVLIWHO(s[2323]);
initIVLIBAL(s[2324]);
initHGBIOM(s[2325]);
initHGBIOF(s[2326]);
initRESPM16(s[2327]);
initRESPF16(s[2328]);
initHGADOPTM(s[2329]);
initHGADOPTF(s[2330]);
initHGPART(s[2331]);
initINTCONTACT(s[2332]);
initDETINC1(s[2333]);
initDETINC2(s[2334]);
initDETINC3(s[2335]);
initDETINC4(s[2336]);
initDETINC5(s[2337]);
initDETINC6(s[2338]);
initHASEMAIL(s[2339]);
initEMAILENT(s[2340]);
initSOCCONT(s[2341]);
initOTHCONT(s[2342]);
initRHLAND_CODE(s[2343]);
initRPHMOB_CODE(s[2344]);
initRPHWRK_CODE(s[2345]);
initREMAIL_CODE(s[2346]);
initCTCONS(s[2347]);
initCTCONSCONF1(s[2348]);
initCTCONSCONF2(s[2349]);
initCTCONSCONF3(s[2350]);
initCTCONSCONF4(s[2351]);
initCTCONSCONF5(s[2352]);
initCTCONSCONF6(s[2353]);
initCTCONSCONF7(s[2354]);
initCTCONSCONF8(s[2355]);
initCTCONSCONF94(s[2356]);
initCTREL(s[2357]);
initCTADD1_CODE(s[2358]);
initCTADD2_CODE(s[2359]);
initCTTOWN_CODE(s[2360]);
initCTCNTY_CODE(s[2361]);
initCTPCODCODE(s[2362]);
initCTTEL1_CODE(s[2363]);
initCTTEL2_CODE(s[2364]);
initCTEMAIL_CODE(s[2365]);
initORIGADD(s[2366]);
initINDMODE(s[2367]);
initPPSEX(s[2368]);
initFNPID(s[2369]);
initMNPID(s[2370]);
initPN1PID(s[2371]);
initPN1PNO(s[2372]);
initPN1SEX(s[2373]);
initPN2PID(s[2374]);
initPN2PNO(s[2375]);
initPN2SEX(s[2376]);
initPNS1PID(s[2377]);
initPNS1PNO(s[2378]);
initPNS1SEX(s[2379]);
initPNS2PID(s[2380]);
initPNS2PNO(s[2381]);
initPNS2SEX(s[2382]);
initGRFPID(s[2383]);
initGRMPID(s[2384]);
initJ2PAY_IF(s[2385]);
initFIMNGRS_TC(s[2386]);
initFIMNGRS_DV(s[2387]);
initFIMNLABGRS_TC(s[2388]);
initFIMNLABGRS_DV(s[2389]);
initFIMNLABNET_TC(s[2390]);
initFIMNLABNET_DV(s[2391]);
initFIYRINVINC_TC(s[2392]);
initFIYRINVINC_DV(s[2393]);
initFIBENOTHR_TC(s[2394]);
initFIBENOTHR_DV(s[2395]);
initPAYGL(s[2396]);
initPAYNL(s[2397]);
initJSPRF(s[2398]);
initPAYGU_DV(s[2399]);
initPAYG_DV(s[2400]);
initPAYNU_DV(s[2401]);
initPAYN_DV(s[2402]);
initSEEARNGRS_DV(s[2403]);
initSEEARNNET_DV(s[2404]);
initJ2PAY_DV(s[2405]);
initJ2PAYNET_DV(s[2406]);
initFF_EVERINT(s[2407]);
initFF_JBSTAT(s[2408]);
initFF_EMPLW(s[2409]);
initFF_IVLOLW(s[2410]);
initFF_TEL(s[2411]);
initFF_JBSEMP(s[2412]);
initFF_JBMNGR(s[2413]);
initFF_JBSIZE(s[2414]);
initFF_OPRLG(s[2415]);
initFF_OPRLG0(s[2416]);
initFF_OPRLG0NI(s[2417]);
initFF_UKBORN(s[2418]);
initFF_YR2UK4(s[2419]);
initFF_BENTYPE01(s[2420]);
initFF_BENTYPE02(s[2421]);
initFF_BENTYPE03(s[2422]);
initFF_BENTYPE04(s[2423]);
initFF_BENTYPE05(s[2424]);
initFF_BENTYPE06(s[2425]);
initFF_BENTYPE07(s[2426]);
initFF_BENTYPE08(s[2427]);
initFF_BENTYPE09(s[2428]);
initFF_BENTYPE10(s[2429]);
initFF_BENTYPE11(s[2430]);
initFF_BENTYPE12(s[2431]);
initFF_BENTYPE13(s[2432]);
initFF_BENTYPE14(s[2433]);
initFF_BENTYPE15(s[2434]);
initFF_BENTYPE16(s[2435]);
initFF_BENTYPE17(s[2436]);
initFF_BENTYPE18(s[2437]);
initFF_BENTYPE19(s[2438]);
initFF_BENTYPE20(s[2439]);
initFF_BENTYPE21(s[2440]);
initFF_BENTYPE22(s[2441]);
initFF_BENTYPE23(s[2442]);
initFF_BENTYPE24(s[2443]);
initFF_BENTYPE25(s[2444]);
initFF_BENTYPE26(s[2445]);
initFF_BENTYPE27(s[2446]);
initFF_BENTYPE28(s[2447]);
initFF_BENTYPE29(s[2448]);
initFF_BENTYPE30(s[2449]);
initFF_BENTYPE31(s[2450]);
initFF_BENTYPE32(s[2451]);
initFF_BENTYPE33(s[2452]);
initFF_BENTYPE34(s[2453]);
initFF_BENTYPE35(s[2454]);
initFF_BENTYPE36(s[2455]);
initFF_BENTYPE37(s[2456]);
initFF_BENTYPE38(s[2457]);
initFF_BENTYPE39(s[2458]);
initFF_BENTYPE40(s[2459]);
initFF_BENTYPE41(s[2460]);
initFF_IVINTLANG(s[2461]);
initSEX_DV(s[2462]);
initAGDV(s[2463]);
initINTDATD_DV(s[2464]);
initINTDATM_DV(s[2465]);
initINTDATY_DV(s[2466]);
initDOBY_DV(s[2467]);
initPENSIONER_DV(s[2468]);
initNPN_DV(s[2469]);
initNPNS_DV(s[2470]);
initNGRP_DV(s[2471]);
initNNSIB_DV(s[2472]);
initNNSSIB_DV(s[2473]);
initNPENSIONER_DV(s[2474]);
initJBSOCGR_DV(s[2475]);
initSCDASSAT_DV(s[2476]);
initSCDASCOH_DV(s[2477]);
initETHN_DV(s[2478]);
initFIMNMISC_DV(s[2479]);
initFIMNPRBEN_DV(s[2480]);
initFIMNINVNET_DV(s[2481]);
initFIMNPEN_DV(s[2482]);
initFIMNSBEN_DV(s[2483]);
initFIMNNET_DV(s[2484]);
initCOUNTRY(s[2485]);
initGOR_DV(s[2486]);
initURBAN_DV(s[2487]);
initHHRESP_DV(s[2488]);
initXTRA5MIN_DV(s[2489]);
initXTRA5MINOSM_DV(s[2490]);
initAGEGR5_DV(s[2491]);
initAGEGR10_DV(s[2492]);
initAGEGR13_DV(s[2493]);
initLIVESP_DV(s[2494]);
initCOHAB_DV(s[2495]);
initSINGLDV(s[2496]);
initMASTAT_DV(s[2497]);
initHHTYPDV(s[2498]);
initBUNO_DV(s[2499]);
initDEPCHL_DV(s[2500]);
initNCHILD_DV(s[2501]);
initNDEPCHL_DV(s[2502]);
initRESPM16_DV(s[2503]);
initRESPF16_DV(s[2504]);
initRACH16_DV(s[2505]);
initHRPID(s[2506]);
initHRPNO(s[2507]);
initPPID(s[2508]);
initPPNO(s[2509]);
initSPPID(s[2510]);
initSPPNO(s[2511]);
initFNPNO(s[2512]);
initFNSPID(s[2513]);
initFNSPNO(s[2514]);
initMNPNO(s[2515]);
initMNSPID(s[2516]);
initMNSPNO(s[2517]);
initGRFPNO(s[2518]);
initGRMPNO(s[2519]);
initQFHIGH_DV(s[2520]);
initNQFHIGH_DV(s[2521]);
initQFHIGHFL_DV(s[2522]);
initHIQUAL_DV(s[2523]);
initNHIQUAL_DV(s[2524]);
initNNMPSP_DV(s[2525]);
initNMPSP_DV(s[2526]);
initNUNMPSP_DV(s[2527]);
initJBFT_DV(s[2528]);
initJBSOC00_CC(s[2529]);
initJBSOC10_CC(s[2530]);
initJBSIC07_CC(s[2531]);
initJBIINDB_DV(s[2532]);
initJBES2000(s[2533]);
initJBSEG_DV(s[2534]);
initJBRGSC_DV(s[2535]);
initJBNSSEC_DV(s[2536]);
initJBNSSEC8_DV(s[2537]);
initJBNSSEC5_DV(s[2538]);
initJBNSSEC3_DV(s[2539]);
initJBISCO88_CC(s[2540]);
initJLSOC00_CC(s[2541]);
initJLSOC10_CC(s[2542]);
initJLSIC07_CC(s[2543]);
initJLIINDB_DV(s[2544]);
initJLES2000(s[2545]);
initJLSEG_DV(s[2546]);
initJLRGSC_DV(s[2547]);
initJLNSSEC_DV(s[2548]);
initJLNSSEC8_DV(s[2549]);
initJLNSSEC5_DV(s[2550]);
initJLNSSEC3_DV(s[2551]);
initJLISCO88_CC(s[2552]);
initPASOC90_CC(s[2553]);
initPASOC00_CC(s[2554]);
initPASOC10_CC(s[2555]);
initPANSSEC5_DV(s[2556]);
initMASOC90_CC(s[2557]);
initMASOC00_CC(s[2558]);
initMASOC10_CC(s[2559]);
initMANSSEC5_DV(s[2560]);
initJ1SOC90_CC(s[2561]);
initJ1SOC00_CC(s[2562]);
initJ1SOC10_CC(s[2563]);
initJ1NSSEC5_DV(s[2564]);
initJ2SOC90_CC(s[2565]);
initJ2SOC00_CC(s[2566]);
initJ2SOC10_CC(s[2567]);
initJ2NSSEC5_DV(s[2568]);
initYASOC90_CC(s[2569]);
initYASOC00_CC(s[2570]);
initYASOC10_CC(s[2571]);
initYANSSEC5_DV(s[2572]);
initSCGHQ1_DV(s[2573]);
initSCGHQ2_DV(s[2574]);
initSF12PCS_DV(s[2575]);
initSF12MCS_DV(s[2576]);
initPSDQA_DV(s[2577]);
initPSDQB_DV(s[2578]);
initPSDQC_DV(s[2579]);
initSCFLAG_DV(s[2580]);
initATTACKED_DV(s[2581]);
initAVOIDED_DV(s[2582]);
initINSULTED_DV(s[2583]);
initUNSAFDV(s[2584]);
initPAYU_DV(s[2585]);
initPAYGU_IF(s[2586]);
initPAYNU_IF(s[2587]);
initSEEARNGRS_IF(s[2588]);
initFIYRINVINC_IF(s[2589]);
initFIBENOTHR_IF(s[2590]);
initFIMNLABGRS_IF(s[2591]);
initFIMNGRS_IF(s[2592]);
initINDIN91_LW(s[2593]);
initINDIN01_LW(s[2594]);
initINDPXUS_LW(s[2595]);
initINDINUS_LW(s[2596]);
initINDSCUS_LW(s[2597]);
initIND5MUS_LW(s[2598]);
initINDPXUB_LW(s[2599]);
initINDINUB_LW(s[2600]);
initINDSCUB_LW(s[2601]);
initINDNS91_LW(s[2602]);
initINDBD91_LW(s[2603]);
initINDNSUB_LW(s[2604]);
initINDBDUB_LW(s[2605]);
initINDPXUB_XW(s[2606]);
initINDINUB_XW(s[2607]);
initINDSCUB_XW(s[2608]);
initIND5MUS_XW(s[2609]);
initRACEL_DV(s[2610]);
}
}
