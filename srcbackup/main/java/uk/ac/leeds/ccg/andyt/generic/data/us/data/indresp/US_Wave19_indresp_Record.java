/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.us.data.indresp;
public class US_Wave19_indresp_Record extends US_indresp_Record {
protected byte ADOPTCH01;
protected byte ADOPTCH02;
protected byte ADOPTCH03;
protected byte ADOPTCH04;
protected byte ADOPTCH05;
protected byte ADOPTCH06;
protected boolean ADOPTCH07;
protected boolean ADOPTCH08;
protected boolean ADOPTCH09;
protected boolean ADOPTCH10;
protected boolean ADOPTCH11;
protected boolean ADOPTCH12;
protected boolean ADOPTCH13;
protected boolean ADOPTCH14;
protected boolean ADOPTCH15;
protected boolean ADOPTCH16;
protected byte ADRESP17;
protected byte AGEEST;
protected byte AGEGR10_DV;
protected byte AGEGR13_DV;
protected byte AGEGR5_DV;
protected byte AGELH;
protected short AGE_DV;
protected byte AIDEFT;
protected short AIDHU1;
protected short AIDHU2;
protected byte AIDHUA1;
protected byte AIDHUA10;
protected byte AIDHUA11;
protected byte AIDHUA12;
protected byte AIDHUA13;
protected byte AIDHUA14;
protected byte AIDHUA15;
protected byte AIDHUA16;
protected byte AIDHUA2;
protected byte AIDHUA3;
protected byte AIDHUA4;
protected byte AIDHUA5;
protected byte AIDHUA6;
protected byte AIDHUA7;
protected byte AIDHUA8;
protected byte AIDHUA9;
protected byte ALLCH01;
protected byte ALLCH02;
protected byte ALLCH03;
protected byte ALLCH04;
protected byte ALLCH05;
protected byte ALLCH06;
protected byte ALLCH07;
protected byte ALLCH08;
protected byte ALLCH09;
protected byte ALLCH10;
protected boolean ALLCH11;
protected boolean ALLCH12;
protected boolean ALLCH13;
protected boolean ALLCH14;
protected boolean ALLCH15;
protected boolean ALLCH16;
protected byte ATTACKEDW11;
protected byte ATTACKEDW12;
protected byte ATTACKEDW13;
protected byte ATTACKEDW14;
protected byte ATTACKEDW15;
protected byte ATTACKEDW16;
protected byte ATTACKEDW17;
protected byte ATTACKEDW196;
protected byte ATTACKEDW197;
protected byte ATTACKED_DV;
protected byte AVOIDANCEW11;
protected byte AVOIDANCEW12;
protected byte AVOIDANCEW13;
protected byte AVOIDANCEW14;
protected byte AVOIDANCEW15;
protected byte AVOIDANCEW16;
protected byte AVOIDANCEW17;
protected byte AVOIDANCEW196;
protected byte AVOIDANCEW197;
protected byte AVOIDED_DV;
protected double BASNSA;
protected double BASRATE;
protected byte BASREST;
protected byte BENCB;
protected byte BENCTC;
protected byte BENDIS1;
protected byte BENDIS10;
protected byte BENDIS11;
protected byte BENDIS2;
protected byte BENDIS3;
protected byte BENDIS4;
protected byte BENDIS5;
protected byte BENDIS6;
protected byte BENDIS7;
protected byte BENDIS8;
protected byte BENDIS9;
protected byte BENDIS96;
protected int BENEFIT_TM;
protected byte BENFAM1;
protected byte BENFAM2;
protected byte BENFAM3;
protected byte BENFAM4;
protected byte BENFAM5;
protected byte BENFAM96;
protected byte BENHOU1;
protected byte BENHOU2;
protected byte BENHOU3;
protected byte BENHOU4;
protected byte BENHOU96;
protected byte BENPEN1;
protected byte BENPEN2;
protected byte BENPEN3;
protected byte BENPEN4;
protected byte BENPEN5;
protected byte BENPEN6;
protected byte BENPEN7;
protected byte BENPEN8;
protected byte BENPEN96;
protected byte BENSTA1;
protected byte BENSTA2;
protected byte BENSTA3;
protected byte BENSTA4;
protected byte BENSTA5;
protected byte BENSTA6;
protected byte BENSTA7;
protected byte BENSTA8;
protected byte BENSTA96;
protected byte BENTAX1;
protected byte BENTAX2;
protected byte BENTAX3;
protected byte BENTAX4;
protected byte BENTAX5;
protected byte BENTAX96;
protected byte BENUNEMP1;
protected byte BENUNEMP2;
protected byte BENUNEMP96;
protected short BIRTHY;
protected double BMI_DV;
protected byte BRITID;
protected byte BTYPE1;
protected byte BTYPE2;
protected byte BTYPE3;
protected byte BTYPE4;
protected byte BTYPE5;
protected byte BTYPE6;
protected byte BTYPE7;
protected byte BTYPE8;
protected byte BTYPE9;
protected byte BTYPE96;
protected byte BUNO_DV;
protected int CARING_TM;
protected int CARMILES;
protected byte CCARE;
protected byte CCWORK;
protected short CH1BY4;
protected byte CHCON;
protected byte CHFAR;
protected int CHILDCARE_TM;
protected byte CHSEE;
protected byte CITZN1;
protected byte CITZN2;
protected byte CITZN3;
protected boolean COHAB_DV;
protected int CONSENT_TM;
protected byte COUNTRY;
protected byte CTADD1_CODE;
protected byte CTADD2_CODE;
protected byte CTCNTY_CODE;
protected byte CTEMAIL_CODE;
protected byte CTPCODE_CODE;
protected byte CTTEL1_CODE;
protected byte CTTEL2_CODE;
protected byte CTTOWN_CODE;
protected byte CUDDLEKID;
protected int DEMOG_TM;
protected boolean DEPCHL_DV;
protected byte DINNER;
protected int DISCRIMINATION_TM;
protected byte DISDIF1;
protected byte DISDIF10;
protected byte DISDIF11;
protected byte DISDIF12;
protected byte DISDIF2;
protected byte DISDIF3;
protected byte DISDIF4;
protected byte DISDIF5;
protected byte DISDIF6;
protected byte DISDIF7;
protected byte DISDIF8;
protected byte DISDIF9;
protected byte DISDIF96;
protected short DOBY_DV;
protected byte DRIVE;
protected byte DVAGE;
protected byte EDASP;
protected byte EDLINKB;
protected short EDTYPE;
protected byte EED12;
protected boolean EMBOOST;
protected byte EMPLOY;
protected int EMPLOYMENT_TM;
protected int EMPSTAT_TM;
protected byte ENGFORM;
protected byte ENGLANG;
protected byte ENGREAD;
protected byte ENGSPK;
protected byte ENGTEL;
protected byte ENVHABIT1;
protected byte ENVHABIT10;
protected byte ENVHABIT11;
protected byte ENVHABIT2;
protected byte ENVHABIT3;
protected byte ENVHABIT4;
protected byte ENVHABIT5;
protected byte ENVHABIT6;
protected byte ENVHABIT7;
protected byte ENVHABIT8;
protected byte ENVHABIT9;
protected int ENVIRON_TM;
protected byte ETHNIC1;
protected byte ETHNIC10;
protected byte ETHNIC11;
protected byte ETHNIC12;
protected byte ETHNIC13;
protected byte ETHNIC14;
protected byte ETHNIC2;
protected byte ETHNIC3;
protected byte ETHNIC4;
protected byte ETHNIC5;
protected byte ETHNIC6;
protected byte ETHNIC7;
protected byte ETHNIC8;
protected byte ETHNIC9;
protected byte ETHNIC96;
protected int ETHNIC_TM;
protected byte ETHN_DV;
protected byte EXTNSA;
protected double EXTRATE;
protected byte EXTREST;
protected int FAMILY_TM;
protected byte FARKID;
protected byte FEDLIK;
protected byte FEDNT;
protected byte FENOW;
protected int FERTILITY_TM;
protected double FIBENOTHR_DV;
protected double FIBENOTHR_IF;
protected byte FIBENOTHR_TC;
protected double FIMNGRS_IF;
protected byte FIMNGRS_TC;
protected double FIMNINVNET_DV;
protected double FIMNLABGRS_IF;
protected byte FIMNLABGRS_TC;
protected double FIMNLABNET_DV;
protected byte FIMNLABNET_TC;
protected double FIMNMISC_DV;
protected double FIMNNET_DV;
protected double FIMNPEN_DV;
protected double FIMNPRBEN_DV;
protected double FIMNSBEN_DV;
protected int FINANCES_TM;
protected byte FINFUT;
protected int FININT_TM;
protected byte FIYRDB1;
protected byte FIYRDB2;
protected byte FIYRDB3;
protected byte FIYRDB4;
protected byte FIYRDB5;
protected byte FIYRDB6;
protected int FIYRDIA;
protected double FIYRINVINC_DV;
protected byte FIYRINVINC_IF;
protected byte FIYRINVINC_TC;
protected byte FLAGLINK;
protected int FNPID;
protected byte FNPNO;
protected int FNSPID;
protected byte FNSPNO;
protected byte FORMDIF;
protected int FTEXV;
protected byte FTEXW;
protected boolean GPCOMP;
protected int GRFPID;
protected byte GRFPNO;
protected int GRMPID;
protected byte GRMPNO;
protected int HARASSMENT_TM;
protected byte HCOND1;
protected byte HCOND10;
protected byte HCOND11;
protected byte HCOND12;
protected byte HCOND13;
protected byte HCOND14;
protected byte HCOND15;
protected byte HCOND16;
protected byte HCOND17;
protected byte HCOND2;
protected byte HCOND3;
protected byte HCOND4;
protected byte HCOND5;
protected byte HCOND6;
protected byte HCOND7;
protected byte HCOND8;
protected byte HCOND9;
protected byte HCOND96;
protected byte HCONDA01;
protected byte HCONDA02;
protected byte HCONDA03;
protected byte HCONDA04;
protected byte HCONDA05;
protected byte HCONDA06;
protected byte HCONDA07;
protected byte HCONDA08;
protected byte HCONDA09;
protected byte HCONDA10;
protected byte HCONDA11;
protected byte HCONDA12;
protected byte HCONDA13;
protected byte HCONDA14;
protected byte HCONDA15;
protected byte HCONDA16;
protected byte HCONDA17;
protected byte HCONDS01;
protected byte HCONDS02;
protected byte HCONDS03;
protected byte HCONDS04;
protected byte HCONDS05;
protected boolean HCONDS06;
protected boolean HCONDS07;
protected byte HCONDS08;
protected byte HCONDS09;
protected byte HCONDS10;
protected byte HCONDS11;
protected byte HCONDS12;
protected byte HCONDS13;
protected byte HCONDS14;
protected byte HCONDS15;
protected byte HCONDS16;
protected byte HCONDS17;
protected byte HEALTH;
protected byte HEALTHLINK;
protected int HEALTH_TM;
protected byte HGADOPTF;
protected byte HGADOPTM;
protected byte HGPART;
protected int HHGRID_TM;
protected int HHQRE_TM;
protected byte HHRESP_DV;
protected int HHSTTIME_TM;
protected byte HHTYPE_DV;
protected byte HLHT;
protected short HLHTC;
protected byte HLHTF;
protected byte HLHTI;
protected byte HLPHMWK;
protected byte HLWT;
protected byte HLWTE;
protected short HLWTK;
protected byte HLWTL;
protected byte HLWTP;
protected byte HLWTS;
protected short HOWLNG;
protected int HRPID;
protected byte HRPNO;
protected byte IENDDATMM;
protected byte IENDDATSS;
protected byte IMPEVENT1;
protected byte IMPEVENT1S;
protected byte IMPEVENT2;
protected byte IMPEVENT2S;
protected byte IMPEVENT3;
protected byte IMPEVENT3S;
protected byte IMPEVENT4;
protected byte IMPEVENT4S;
protected double IND5MUS_XW;
protected double INDINUS_XW;
protected double INDPXUS_XW;
protected double INDSCUS_XW;
protected int INITIAL_TM;
protected byte INSULTEDW11;
protected byte INSULTEDW12;
protected byte INSULTEDW13;
protected byte INSULTEDW14;
protected byte INSULTEDW15;
protected byte INSULTEDW16;
protected byte INSULTEDW17;
protected byte INSULTEDW196;
protected byte INSULTEDW197;
protected byte INSULTED_DV;
protected byte INTDATD_DV;
protected byte INTDATM_DV;
protected short INTDATY_DV;
protected byte IOUTCOME;
protected byte ISTRTDATMM;
protected byte ISTRTDATSS;
protected short ISTRTDATY;
protected byte IVAFFCT11;
protected byte IVAFFCT12;
protected byte IVAFFCT13;
protected byte IVAFFCT14;
protected byte IVAFFCT15;
protected byte IVAFFCT17;
protected byte IVAFFCT21;
protected byte IVAFFCT22;
protected byte IVAFFCT23;
protected byte IVAFFCT27;
protected byte IVAFFCT30;
protected byte IVAFFCT97;
protected byte IVCOOP;
protected byte IVINFNCE;
protected byte IVINTLANG;
protected byte IVTRANS;
protected byte IVWHOINT;
protected byte J1NSSEC5_DV;
protected short J1SOC00_CC;
protected short J1SOC10_CC;
protected byte J1SOC90_CC;
protected int J2PAY;
protected double J2PAYNET_DV;
protected byte JBES2000;
protected byte JBIINDB_DV;
protected byte JBNSSEC3_DV;
protected byte JBNSSEC5_DV;
protected short JBNSSEC_DV;
protected byte JBOFFY;
protected short JBPEN;
protected short JBPENM;
protected short JBRGSC_DV;
protected byte JBSAT;
protected byte JBSECTPUB;
protected short JBSEG_DV;
protected byte JBSIC07_CC;
protected short JBSOC00_CC;
protected byte JBSOCGR_DV;
protected byte JBTERM1;
protected byte JBTERM2;
protected byte JLENDM;
protected byte JLES2000;
protected byte JLIINDB_DV;
protected byte JLNSSEC3_DV;
protected byte JLNSSEC5_DV;
protected short JLNSSEC_DV;
protected short JLRGSC_DV;
protected short JLSEG_DV;
protected byte JLSIC07_CC;
protected short JLSOC00_CC;
protected byte JOBDENY;
protected byte JOBLOOK;
protected int JOB_TM;
protected byte JSPART;
protected int JSPAYU;
protected byte JSPAYW;
protected byte JSPRLS;
protected byte JSPRNI;
protected byte JSPRTX;
protected byte JSPYNI;
protected byte JSPYTX;
protected byte JSTYPEB;
protected short JSWORKDIS;
protected byte JSWORKTRAV;
protected short JUBGN;
protected short JULK4X1;
protected short JULK4X2;
protected byte JULK4X3;
protected short JULK4X4;
protected short JULK4X5;
protected short JULK4X6;
protected byte JULK4X96;
protected byte K2UCPN1;
protected byte K2UCPN2;
protected byte K2UCPN3;
protected byte K2UCPN4;
protected byte K2UCPN5;
protected byte KID2UNI1;
protected byte KID2UNI2;
protected byte KID2UNI3;
protected byte KID2UNI4;
protected byte KID2UNI5;
protected byte KIDSPT;
protected byte LADOPT;
protected byte LCHMOR;
protected byte LCHMORN;
protected byte LCMARM;
protected short LCMARY4;
protected byte LCMCBM;
protected short LCMCBY4;
protected byte LCMCOH;
protected byte LCMSPM;
protected short LCMSPY4;
protected byte LCOH;
protected boolean LDA;
protected boolean LDAFLAG;
protected double LENINDINTV;
protected byte LEVELIMP;
protected byte LGAPED;
protected byte LINGUA;
protected byte LIVESP;
protected boolean LIVESP_DV;
protected byte LIVEWITH;
protected byte LNADOPT;
protected byte LNCOH;
protected byte LNPRNT;
protected byte LPRNT;
protected byte LVAG14;
protected byte LVAG16;
protected byte LVREL1;
protected byte LVREL2;
protected byte LVREL3;
protected byte LVREL4;
protected byte LVREL5;
protected byte LVREL6;
protected byte LVREL7;
protected byte LVREL8;
protected byte LVREL96;
protected byte MAAGE;
protected byte MABROAD;
protected byte MACOB;
protected byte MACON;
protected byte MAEDQF;
protected byte MAFAR;
protected byte MAID;
protected byte MAINTALIM;
protected byte MAJU;
protected byte MANSSEC5_DV;
protected byte MARSTAT;
protected byte MASEE;
protected short MASOC00_CC;
protected short MASOC10_CC;
protected byte MASOC90_CC;
protected byte MASTAT_DV;
protected byte MAYRUK;
protected short MAYRUK1;
protected byte MGMROB;
protected byte MGPROB;
protected int MIGRATION_TM;
protected byte MINDIRECT;
protected byte MLIVED;
protected byte MLIVEDIST;
protected byte MLIVEDIST5;
protected byte MLIVEDISTF;
protected byte MLSTATCHK;
protected byte MNABROAD;
protected byte MNLIVED;
protected byte MNMOVES;
protected byte MNOTHERC;
protected int MNPID;
protected byte MNPNO;
protected int MNSPID;
protected byte MNSPNO;
protected byte MOBUSE;
protected byte MONTH;
protected byte MOVEAGE;
protected byte MPNO;
protected byte MRETURNED;
protected byte MVEVER;
protected byte MVMNTH;
protected short MVYR;
protected byte NADOPTCH;
protected byte NAIDXHH;
protected byte NATCH01;
protected byte NATCH02;
protected byte NATCH03;
protected byte NATCH04;
protected byte NATCH05;
protected byte NATCH06;
protected byte NATCH07;
protected byte NATCH08;
protected byte NATCH09;
protected byte NATCH10;
protected byte NATCH11;
protected byte NATCH12;
protected boolean NATCH13;
protected boolean NATCH14;
protected boolean NATCH15;
protected boolean NATCH16;
protected byte NATID1;
protected byte NATID2;
protected byte NATID3;
protected byte NATID4;
protected byte NATID5;
protected byte NATID6;
protected byte NATID97;
protected double NBRSNCI_DV;
protected byte NCH10TO15;
protected byte NCH14RESP;
protected byte NCH415RESP;
protected byte NCH5TO15;
protected short NCHILD_DV;
protected byte NCHRESP;
protected byte NCHUND18RESP;
protected byte NCHUNDER16;
protected byte NDEPCHL_DV;
protected byte NETUSE;
protected int NETWORKS_TM;
protected byte NGRP_DV;
protected byte NIACT;
protected byte NIREL;
protected byte NISERPS;
protected byte NMAR;
protected byte NNATCH;
protected byte NNSIB_DV;
protected byte NNSSIB_DV;
protected int NONEMP_TM;
protected byte NPENSIONER_DV;
protected byte NPNS_DV;
protected byte NPN_DV;
protected byte NQFHIGH_DV;
protected byte NRELSW11;
protected byte NRELSW12;
protected byte NRELSW13;
protected byte NRELSW14;
protected byte NRELSW15;
protected byte NRELSW16;
protected int OBSERVE_TM;
protected byte OHCH16;
protected byte OPRLG;
protected byte OPRLG0;
protected byte OPRLG0NI;
protected byte OPRLG1;
protected byte OPRLG2;
protected byte OPRLG3;
protected byte OVTNSA;
protected byte OVTPAY;
protected double OVTRATE;
protected byte OVTREST;
protected byte PAAGE;
protected byte PACOB;
protected byte PACON;
protected byte PAEDQF;
protected byte PAFAR;
protected byte PAID;
protected byte PAJU;
protected byte PANSSEC5_DV;
protected int PARCHILD_TM;
protected byte PARMAR;
protected int PARTNER_TM;
protected byte PASEE;
protected short PASOC00_CC;
protected short PASOC10_CC;
protected byte PASOC90_CC;
protected byte PAYFAM;
protected byte PAYGWC;
protected double PAYG_DV;
protected byte PAYNWC;
protected byte PAYRUK;
protected short PAYRUK1;
protected byte PAYTYP;
protected byte PAYUWC;
protected double PAYU_DV;
protected byte PBNFT1;
protected byte PBNFT10;
protected byte PBNFT11;
protected byte PBNFT12;
protected byte PBNFT2;
protected byte PBNFT3;
protected byte PBNFT4;
protected byte PBNFT5;
protected byte PBNFT6;
protected byte PBNFT7;
protected byte PBNFT8;
protected byte PBNFT9;
protected byte PBNFT96;
protected byte PENSIONER_DV;
protected byte PGMROB;
protected byte PGPROB;
protected int PHONE_TM;
protected byte PJBPTFT;
protected byte PJSPTFT;
protected int PN1PID;
protected byte PN1PNO;
protected byte PN1SEX;
protected int PN2PID;
protected byte PN2PNO;
protected byte PN2SEX;
protected int PNS1PID;
protected byte PNS1PNO;
protected byte PNS1SEX;
protected int PNS2PID;
protected byte PNS2PNO;
protected byte PNS2SEX;
protected int POLITICAL_TM;
protected int PPID;
protected byte PPSEX;
protected byte PRAISEKID;
protected byte PREARN;
protected byte PREARNA;
protected byte PREARNW;
protected byte PREASON;
protected byte PREL;
protected byte PRFITB;
protected byte PRFITBA;
protected byte PRFITBW;
protected byte PRIVPEN;
protected byte PROMODENY;
protected int PROXY_TM;
protected byte PRSEX;
protected int PSU;
protected byte QFHIGH;
protected boolean QFHIGHFL_DV;
protected byte QFHIGH_DV;
protected byte QFVOC1;
protected byte QFVOC10;
protected byte QFVOC11;
protected byte QFVOC12;
protected byte QFVOC13;
protected byte QFVOC14;
protected byte QFVOC15;
protected byte QFVOC2;
protected byte QFVOC3;
protected byte QFVOC4;
protected byte QFVOC5;
protected byte QFVOC6;
protected byte QFVOC7;
protected byte QFVOC8;
protected byte QFVOC9;
protected byte QFVOC96;
protected int QSIGNIN_TM;
protected byte QUALOC;
protected byte QUARREL;
protected byte RACEL;
protected short RACELO_CODE;
protected byte RACEL_DV;
protected byte READDIF;
protected byte REASREF;
protected int RELATIONSHIPS_TM;
protected int RELIGION_TM;
protected byte RELKID;
protected byte REMAIL_CODE;
protected short REMCNTRY1;
protected short REMCNTRY2;
protected short REMCNTRY3;
protected short REMCNTRY4;
protected byte REMIT1;
protected byte REMIT2;
protected byte REMIT3;
protected byte REMIT4;
protected byte REMIT5;
protected short REMITAMT1;
protected int REMITAMT2;
protected short REMITAMT3;
protected int REMITAMT4;
protected byte REMITFREQ1;
protected byte REMITFREQ2;
protected byte REMITFREQ3;
protected byte REMITFREQ4;
protected byte REMITREG1;
protected byte REMITREG2;
protected byte REMITREG3;
protected byte REMITREG4;
protected int REMITTANCE_TM;
protected byte REMITUSUAL1;
protected byte REMITUSUAL2;
protected byte REMITUSUAL3;
protected byte REMITUSUAL4;
protected boolean REMUSAMT1;
protected short REMUSAMT2;
protected short REMUSAMT3;
protected short REMUSAMT4;
protected byte RESATTACKEDW1_1_1;
protected byte RESATTACKEDW1_1_2;
protected byte RESATTACKEDW1_1_3;
protected byte RESATTACKEDW1_1_4;
protected byte RESATTACKEDW1_1_5;
protected byte RESATTACKEDW1_1_6;
protected byte RESATTACKEDW1_1_7;
protected byte RESATTACKEDW1_1_8;
protected byte RESATTACKEDW1_1_9;
protected byte RESATTACKEDW1_1_96;
protected byte RESATTACKEDW1_1_97;
protected byte RESATTACKEDW1_2_1;
protected byte RESATTACKEDW1_2_2;
protected byte RESATTACKEDW1_2_3;
protected byte RESATTACKEDW1_2_4;
protected byte RESATTACKEDW1_2_5;
protected byte RESATTACKEDW1_2_6;
protected byte RESATTACKEDW1_2_7;
protected byte RESATTACKEDW1_2_8;
protected byte RESATTACKEDW1_2_9;
protected byte RESATTACKEDW1_2_96;
protected byte RESATTACKEDW1_2_97;
protected byte RESATTACKEDW1_3_1;
protected byte RESATTACKEDW1_3_2;
protected byte RESATTACKEDW1_3_3;
protected byte RESATTACKEDW1_3_4;
protected byte RESATTACKEDW1_3_5;
protected byte RESATTACKEDW1_3_6;
protected byte RESATTACKEDW1_3_7;
protected byte RESATTACKEDW1_3_8;
protected byte RESATTACKEDW1_3_9;
protected byte RESATTACKEDW1_3_96;
protected byte RESATTACKEDW1_3_97;
protected byte RESATTACKEDW1_4_1;
protected byte RESATTACKEDW1_4_2;
protected byte RESATTACKEDW1_4_3;
protected byte RESATTACKEDW1_4_4;
protected byte RESATTACKEDW1_4_5;
protected byte RESATTACKEDW1_4_6;
protected byte RESATTACKEDW1_4_7;
protected byte RESATTACKEDW1_4_8;
protected byte RESATTACKEDW1_4_9;
protected byte RESATTACKEDW1_4_96;
protected byte RESATTACKEDW1_4_97;
protected byte RESATTACKEDW1_5_1;
protected byte RESATTACKEDW1_5_2;
protected byte RESATTACKEDW1_5_3;
protected byte RESATTACKEDW1_5_4;
protected byte RESATTACKEDW1_5_5;
protected byte RESATTACKEDW1_5_6;
protected byte RESATTACKEDW1_5_7;
protected byte RESATTACKEDW1_5_8;
protected byte RESATTACKEDW1_5_9;
protected byte RESATTACKEDW1_5_96;
protected byte RESATTACKEDW1_5_97;
protected byte RESATTACKEDW1_6_1;
protected byte RESATTACKEDW1_6_2;
protected byte RESATTACKEDW1_6_3;
protected byte RESATTACKEDW1_6_4;
protected byte RESATTACKEDW1_6_5;
protected byte RESATTACKEDW1_6_6;
protected byte RESATTACKEDW1_6_7;
protected byte RESATTACKEDW1_6_8;
protected byte RESATTACKEDW1_6_9;
protected byte RESATTACKEDW1_6_96;
protected byte RESATTACKEDW1_6_97;
protected byte RESATTACKEDW1_7_1;
protected byte RESATTACKEDW1_7_2;
protected byte RESATTACKEDW1_7_3;
protected byte RESATTACKEDW1_7_4;
protected byte RESATTACKEDW1_7_5;
protected byte RESATTACKEDW1_7_6;
protected byte RESATTACKEDW1_7_7;
protected byte RESATTACKEDW1_7_8;
protected byte RESATTACKEDW1_7_9;
protected byte RESATTACKEDW1_7_96;
protected byte RESATTACKEDW1_7_97;
protected byte RESATTACKEDW1_97_1;
protected byte RESATTACKEDW1_97_2;
protected byte RESATTACKEDW1_97_3;
protected byte RESATTACKEDW1_97_4;
protected byte RESATTACKEDW1_97_5;
protected byte RESATTACKEDW1_97_6;
protected byte RESATTACKEDW1_97_7;
protected byte RESATTACKEDW1_97_8;
protected byte RESATTACKEDW1_97_9;
protected byte RESATTACKEDW1_97_96;
protected byte RESATTACKEDW1_97_97;
protected byte RESAVOIDW1_1_1;
protected byte RESAVOIDW1_1_2;
protected byte RESAVOIDW1_1_3;
protected byte RESAVOIDW1_1_4;
protected byte RESAVOIDW1_1_5;
protected byte RESAVOIDW1_1_6;
protected byte RESAVOIDW1_1_7;
protected byte RESAVOIDW1_1_8;
protected byte RESAVOIDW1_1_9;
protected byte RESAVOIDW1_1_96;
protected byte RESAVOIDW1_1_97;
protected byte RESAVOIDW1_2_1;
protected byte RESAVOIDW1_2_2;
protected byte RESAVOIDW1_2_3;
protected byte RESAVOIDW1_2_4;
protected byte RESAVOIDW1_2_5;
protected byte RESAVOIDW1_2_6;
protected byte RESAVOIDW1_2_7;
protected byte RESAVOIDW1_2_8;
protected byte RESAVOIDW1_2_9;
protected byte RESAVOIDW1_2_96;
protected byte RESAVOIDW1_2_97;
protected byte RESAVOIDW1_3_1;
protected byte RESAVOIDW1_3_2;
protected byte RESAVOIDW1_3_3;
protected byte RESAVOIDW1_3_4;
protected byte RESAVOIDW1_3_5;
protected byte RESAVOIDW1_3_6;
protected byte RESAVOIDW1_3_7;
protected byte RESAVOIDW1_3_8;
protected byte RESAVOIDW1_3_9;
protected byte RESAVOIDW1_3_96;
protected byte RESAVOIDW1_3_97;
protected byte RESAVOIDW1_4_1;
protected byte RESAVOIDW1_4_2;
protected byte RESAVOIDW1_4_3;
protected byte RESAVOIDW1_4_4;
protected byte RESAVOIDW1_4_5;
protected byte RESAVOIDW1_4_6;
protected byte RESAVOIDW1_4_7;
protected byte RESAVOIDW1_4_8;
protected byte RESAVOIDW1_4_9;
protected byte RESAVOIDW1_4_96;
protected byte RESAVOIDW1_4_97;
protected byte RESAVOIDW1_5_1;
protected byte RESAVOIDW1_5_2;
protected byte RESAVOIDW1_5_3;
protected byte RESAVOIDW1_5_4;
protected byte RESAVOIDW1_5_5;
protected byte RESAVOIDW1_5_6;
protected byte RESAVOIDW1_5_7;
protected byte RESAVOIDW1_5_8;
protected byte RESAVOIDW1_5_9;
protected byte RESAVOIDW1_5_96;
protected byte RESAVOIDW1_5_97;
protected byte RESAVOIDW1_6_1;
protected byte RESAVOIDW1_6_2;
protected byte RESAVOIDW1_6_3;
protected byte RESAVOIDW1_6_4;
protected byte RESAVOIDW1_6_5;
protected byte RESAVOIDW1_6_6;
protected byte RESAVOIDW1_6_7;
protected byte RESAVOIDW1_6_8;
protected byte RESAVOIDW1_6_9;
protected byte RESAVOIDW1_6_96;
protected byte RESAVOIDW1_6_97;
protected byte RESAVOIDW1_7_1;
protected byte RESAVOIDW1_7_2;
protected byte RESAVOIDW1_7_3;
protected byte RESAVOIDW1_7_4;
protected byte RESAVOIDW1_7_5;
protected byte RESAVOIDW1_7_6;
protected byte RESAVOIDW1_7_7;
protected byte RESAVOIDW1_7_8;
protected byte RESAVOIDW1_7_9;
protected byte RESAVOIDW1_7_96;
protected byte RESAVOIDW1_7_97;
protected byte RESAVOIDW1_97_1;
protected byte RESAVOIDW1_97_2;
protected byte RESAVOIDW1_97_3;
protected byte RESAVOIDW1_97_4;
protected byte RESAVOIDW1_97_5;
protected byte RESAVOIDW1_97_6;
protected byte RESAVOIDW1_97_7;
protected byte RESAVOIDW1_97_8;
protected byte RESAVOIDW1_97_9;
protected byte RESAVOIDW1_97_96;
protected byte RESAVOIDW1_97_97;
protected byte RESINSULTEDW1_1_1;
protected byte RESINSULTEDW1_1_2;
protected byte RESINSULTEDW1_1_3;
protected byte RESINSULTEDW1_1_4;
protected byte RESINSULTEDW1_1_5;
protected byte RESINSULTEDW1_1_6;
protected byte RESINSULTEDW1_1_7;
protected byte RESINSULTEDW1_1_8;
protected byte RESINSULTEDW1_1_9;
protected byte RESINSULTEDW1_1_96;
protected byte RESINSULTEDW1_1_97;
protected byte RESINSULTEDW1_2_1;
protected byte RESINSULTEDW1_2_2;
protected byte RESINSULTEDW1_2_3;
protected byte RESINSULTEDW1_2_4;
protected byte RESINSULTEDW1_2_5;
protected byte RESINSULTEDW1_2_6;
protected byte RESINSULTEDW1_2_7;
protected byte RESINSULTEDW1_2_8;
protected byte RESINSULTEDW1_2_9;
protected byte RESINSULTEDW1_2_96;
protected byte RESINSULTEDW1_2_97;
protected byte RESINSULTEDW1_3_1;
protected byte RESINSULTEDW1_3_2;
protected byte RESINSULTEDW1_3_3;
protected byte RESINSULTEDW1_3_4;
protected byte RESINSULTEDW1_3_5;
protected byte RESINSULTEDW1_3_6;
protected byte RESINSULTEDW1_3_7;
protected byte RESINSULTEDW1_3_8;
protected byte RESINSULTEDW1_3_9;
protected byte RESINSULTEDW1_3_96;
protected byte RESINSULTEDW1_3_97;
protected byte RESINSULTEDW1_4_1;
protected byte RESINSULTEDW1_4_2;
protected byte RESINSULTEDW1_4_3;
protected byte RESINSULTEDW1_4_4;
protected byte RESINSULTEDW1_4_5;
protected byte RESINSULTEDW1_4_6;
protected byte RESINSULTEDW1_4_7;
protected byte RESINSULTEDW1_4_8;
protected byte RESINSULTEDW1_4_9;
protected byte RESINSULTEDW1_4_96;
protected byte RESINSULTEDW1_4_97;
protected byte RESINSULTEDW1_5_1;
protected byte RESINSULTEDW1_5_2;
protected byte RESINSULTEDW1_5_3;
protected byte RESINSULTEDW1_5_4;
protected byte RESINSULTEDW1_5_5;
protected byte RESINSULTEDW1_5_6;
protected byte RESINSULTEDW1_5_7;
protected byte RESINSULTEDW1_5_8;
protected byte RESINSULTEDW1_5_9;
protected byte RESINSULTEDW1_5_96;
protected byte RESINSULTEDW1_5_97;
protected byte RESINSULTEDW1_6_1;
protected byte RESINSULTEDW1_6_2;
protected byte RESINSULTEDW1_6_3;
protected byte RESINSULTEDW1_6_4;
protected byte RESINSULTEDW1_6_5;
protected byte RESINSULTEDW1_6_6;
protected byte RESINSULTEDW1_6_7;
protected byte RESINSULTEDW1_6_8;
protected byte RESINSULTEDW1_6_9;
protected byte RESINSULTEDW1_6_96;
protected byte RESINSULTEDW1_6_97;
protected byte RESINSULTEDW1_7_1;
protected byte RESINSULTEDW1_7_2;
protected byte RESINSULTEDW1_7_3;
protected byte RESINSULTEDW1_7_4;
protected byte RESINSULTEDW1_7_5;
protected byte RESINSULTEDW1_7_6;
protected byte RESINSULTEDW1_7_7;
protected byte RESINSULTEDW1_7_8;
protected byte RESINSULTEDW1_7_9;
protected byte RESINSULTEDW1_7_96;
protected byte RESINSULTEDW1_7_97;
protected byte RESINSULTEDW1_97_1;
protected byte RESINSULTEDW1_97_2;
protected byte RESINSULTEDW1_97_3;
protected byte RESINSULTEDW1_97_4;
protected byte RESINSULTEDW1_97_5;
protected byte RESINSULTEDW1_97_6;
protected byte RESINSULTEDW1_97_7;
protected byte RESINSULTEDW1_97_8;
protected byte RESINSULTEDW1_97_9;
protected byte RESINSULTEDW1_97_96;
protected byte RESINSULTEDW1_97_97;
protected byte RESJOBDENY1;
protected byte RESJOBDENY2;
protected byte RESJOBDENY3;
protected byte RESJOBDENY4;
protected byte RESJOBDENY5;
protected byte RESJOBDENY6;
protected byte RESJOBDENY7;
protected byte RESJOBDENY8;
protected byte RESJOBDENY9;
protected byte RESJOBDENY96;
protected byte RESJOBDENY97;
protected boolean RESPF16;
protected boolean RESPF16_DV;
protected boolean RESPM16;
protected boolean RESPM16_DV;
protected byte RESPROMODENY1;
protected byte RESPROMODENY2;
protected byte RESPROMODENY3;
protected byte RESPROMODENY4;
protected byte RESPROMODENY5;
protected byte RESPROMODENY6;
protected byte RESPROMODENY7;
protected byte RESPROMODENY8;
protected byte RESPROMODENY9;
protected byte RESPROMODENY96;
protected byte RESPROMODENY97;
protected byte RESTRAINDENY1;
protected byte RESTRAINDENY2;
protected byte RESTRAINDENY3;
protected byte RESTRAINDENY4;
protected byte RESTRAINDENY5;
protected byte RESTRAINDENY6;
protected byte RESTRAINDENY7;
protected byte RESTRAINDENY8;
protected byte RESTRAINDENY9;
protected byte RESTRAINDENY96;
protected byte RESTRAINDENY97;
protected byte RESUNSAFEW1_1_1;
protected byte RESUNSAFEW1_1_2;
protected byte RESUNSAFEW1_1_3;
protected byte RESUNSAFEW1_1_4;
protected byte RESUNSAFEW1_1_5;
protected byte RESUNSAFEW1_1_6;
protected byte RESUNSAFEW1_1_7;
protected byte RESUNSAFEW1_1_8;
protected byte RESUNSAFEW1_1_9;
protected byte RESUNSAFEW1_1_96;
protected byte RESUNSAFEW1_1_97;
protected byte RESUNSAFEW1_2_1;
protected byte RESUNSAFEW1_2_2;
protected byte RESUNSAFEW1_2_3;
protected byte RESUNSAFEW1_2_4;
protected byte RESUNSAFEW1_2_5;
protected byte RESUNSAFEW1_2_6;
protected byte RESUNSAFEW1_2_7;
protected byte RESUNSAFEW1_2_8;
protected byte RESUNSAFEW1_2_9;
protected byte RESUNSAFEW1_2_96;
protected byte RESUNSAFEW1_2_97;
protected byte RESUNSAFEW1_3_1;
protected byte RESUNSAFEW1_3_2;
protected byte RESUNSAFEW1_3_3;
protected byte RESUNSAFEW1_3_4;
protected byte RESUNSAFEW1_3_5;
protected byte RESUNSAFEW1_3_6;
protected byte RESUNSAFEW1_3_7;
protected byte RESUNSAFEW1_3_8;
protected byte RESUNSAFEW1_3_9;
protected byte RESUNSAFEW1_3_96;
protected byte RESUNSAFEW1_3_97;
protected byte RESUNSAFEW1_4_1;
protected byte RESUNSAFEW1_4_2;
protected byte RESUNSAFEW1_4_3;
protected byte RESUNSAFEW1_4_4;
protected byte RESUNSAFEW1_4_5;
protected byte RESUNSAFEW1_4_6;
protected byte RESUNSAFEW1_4_7;
protected byte RESUNSAFEW1_4_8;
protected byte RESUNSAFEW1_4_9;
protected byte RESUNSAFEW1_4_96;
protected byte RESUNSAFEW1_4_97;
protected byte RESUNSAFEW1_5_1;
protected byte RESUNSAFEW1_5_2;
protected byte RESUNSAFEW1_5_3;
protected byte RESUNSAFEW1_5_4;
protected byte RESUNSAFEW1_5_5;
protected byte RESUNSAFEW1_5_6;
protected byte RESUNSAFEW1_5_7;
protected byte RESUNSAFEW1_5_8;
protected byte RESUNSAFEW1_5_9;
protected byte RESUNSAFEW1_5_96;
protected byte RESUNSAFEW1_5_97;
protected byte RESUNSAFEW1_6_1;
protected byte RESUNSAFEW1_6_2;
protected byte RESUNSAFEW1_6_3;
protected byte RESUNSAFEW1_6_4;
protected byte RESUNSAFEW1_6_5;
protected byte RESUNSAFEW1_6_6;
protected byte RESUNSAFEW1_6_7;
protected byte RESUNSAFEW1_6_8;
protected byte RESUNSAFEW1_6_9;
protected byte RESUNSAFEW1_6_96;
protected byte RESUNSAFEW1_6_97;
protected byte RESUNSAFEW1_7_1;
protected byte RESUNSAFEW1_7_2;
protected byte RESUNSAFEW1_7_3;
protected byte RESUNSAFEW1_7_4;
protected byte RESUNSAFEW1_7_5;
protected byte RESUNSAFEW1_7_6;
protected byte RESUNSAFEW1_7_7;
protected byte RESUNSAFEW1_7_8;
protected byte RESUNSAFEW1_7_9;
protected byte RESUNSAFEW1_7_96;
protected byte RESUNSAFEW1_7_97;
protected byte RESUNSAFEW1_97_1;
protected byte RESUNSAFEW1_97_2;
protected byte RESUNSAFEW1_97_3;
protected byte RESUNSAFEW1_97_4;
protected byte RESUNSAFEW1_97_5;
protected byte RESUNSAFEW1_97_6;
protected byte RESUNSAFEW1_97_7;
protected byte RESUNSAFEW1_97_8;
protected byte RESUNSAFEW1_97_9;
protected byte RESUNSAFEW1_97_96;
protected byte RESUNSAFEW1_97_97;
protected byte RETDATEM;
protected short RETDATEY;
protected byte RHLAND_CODE;
protected byte RPHMOB_CODE;
protected byte RPHWRK_CODE;
protected byte RULESKID;
protected short SAMPST;
protected byte SAMSCH;
protected byte SCDASCOH_DV;
protected byte SCDASSAT_DV;
protected short SCDOBY4;
protected byte SCENV_BCON;
protected byte SCENV_BRIT;
protected byte SCENV_CCLS;
protected byte SCENV_CFIT;
protected byte SCENV_CHWO;
protected byte SCENV_CRLF;
protected byte SCENV_DSTR;
protected byte SCENV_EXAG;
protected byte SCENV_FTST;
protected byte SCENV_FUTR;
protected byte SCENV_GRN;
protected byte SCENV_PMRE;
protected byte SCFLAG_DV;
protected byte SCHLLOC;
protected byte SCHRS_SLPH;
protected byte SCHRS_SLPM;
protected byte SCLFSAT1;
protected byte SCLFSAT2;
protected byte SCLFSAT7;
protected byte SCLFSATO;
protected byte SCMED_SLP;
protected byte SCMOLWP;
protected byte SCOPECL200;
protected byte SCOPECL30;
protected byte SCOPNGBHA;
protected byte SCOPNGBHB;
protected byte SCOPNGBHC;
protected byte SCOPNGBHD;
protected byte SCOPNGBHE;
protected byte SCOPNGBHF;
protected byte SCOPNGBHG;
protected byte SCOPNGBHH;
protected byte SCPAROUTINT;
protected byte SCRELHAPPY;
protected byte SCRELPARAR;
protected byte SCRELPARCD;
protected byte SCRELPARDS;
protected byte SCRELPAREI;
protected byte SCRELPARIR;
protected byte SCRELPARKS;
protected byte SCRELPARRG;
protected byte SCRELPARWT;
protected byte SCRISKA;
protected byte SCRISKB;
protected byte SCSEX;
protected byte SCSLP_QUAL;
protected byte SCTRUST;
protected byte SCTSLP_30M;
protected byte SCTSLP_CGH;
protected byte SCTSLP_WAK;
protected byte SCTSTAWK;
protected byte SCWEMWBA;
protected byte SCWEMWBB;
protected byte SCWEMWBC;
protected byte SCWEMWBD;
protected byte SCWEMWBE;
protected byte SCWEMWBF;
protected byte SCWEMWBG;
protected int SECJOB_TM;
protected double SEEARNGRS_DV;
protected byte SEEARNGRS_IF;
protected double SEEARNNET_DV;
protected byte SEEKID;
protected int SELFEMP_TM;
protected byte SEX_DV;
protected byte SF1;
protected double SF12MCS_DV;
protected double SF12PCS_DV;
protected byte SF2A;
protected byte SF2B;
protected byte SF3A;
protected byte SF3B;
protected byte SF4A;
protected byte SF4B;
protected byte SF5;
protected byte SF6A;
protected byte SF6B;
protected byte SF6C;
protected byte SF7;
protected boolean SINGLE_DV;
protected byte SLAPKID;
protected byte SMAID;
protected byte SOCIALKID;
protected byte SPAID;
protected byte SPKDIF;
protected int SPPID;
protected byte SPPNO;
protected int STABLE_TM;
protected short STRATA;
protected byte SUSP;
protected byte SWEMWBS_DV;
protected byte TALKMATTER;
protected byte TELDIF;
protected byte TRAINDENY;
protected byte UKBORN;
protected byte UNDQUS;
protected byte UNSAFEW11;
protected byte UNSAFEW12;
protected byte UNSAFEW13;
protected byte UNSAFEW14;
protected byte UNSAFEW15;
protected byte UNSAFEW16;
protected byte UNSAFEW17;
protected byte UNSAFEW196;
protected byte UNSAFEW197;
protected byte UNSAFE_DV;
protected byte URBAN_DV;
protected short VOTE1;
protected short VOTE2;
protected short VOTE3;
protected short VOTE4;
protected short VOTE5;
protected short VOTE6;
protected byte WEKID;
protected byte WLSH1;
protected byte WLSH2;
protected byte WLSH3;
protected byte WLSH4;
protected byte WLSH96;
protected byte WLSHUA;
protected byte WLSHUB;
protected byte WLSHUC;
protected byte WLSHUD;
protected byte WLSHUE;
protected short WORKDIS;
protected byte WORKTRAV;
protected byte XPMOVE;
protected byte XTRA5MIN_DV;
protected byte YELLKID;
protected byte YNLP14;
protected final void initADOPTCH01(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH01 = Byte.parseByte(s);
} else {
ADOPTCH01 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH02(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH02 = Byte.parseByte(s);
} else {
ADOPTCH02 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH03(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH03 = Byte.parseByte(s);
} else {
ADOPTCH03 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH04(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH04 = Byte.parseByte(s);
} else {
ADOPTCH04 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH05(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH05 = Byte.parseByte(s);
} else {
ADOPTCH05 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH06(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH06 = Byte.parseByte(s);
} else {
ADOPTCH06 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH07 = false;
} else {
ADOPTCH07 = true;
}
}
}

protected final void initADOPTCH08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH08 = false;
} else {
ADOPTCH08 = true;
}
}
}

protected final void initADOPTCH09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH09 = false;
} else {
ADOPTCH09 = true;
}
}
}

protected final void initADOPTCH10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH10 = false;
} else {
ADOPTCH10 = true;
}
}
}

protected final void initADOPTCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH11 = false;
} else {
ADOPTCH11 = true;
}
}
}

protected final void initADOPTCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH12 = false;
} else {
ADOPTCH12 = true;
}
}
}

protected final void initADOPTCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH13 = false;
} else {
ADOPTCH13 = true;
}
}
}

protected final void initADOPTCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH14 = false;
} else {
ADOPTCH14 = true;
}
}
}

protected final void initADOPTCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH15 = false;
} else {
ADOPTCH15 = true;
}
}
}

protected final void initADOPTCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH16 = false;
} else {
ADOPTCH16 = true;
}
}
}

protected final void initADRESP17(String s) {
if (!s.trim().isEmpty()) {
ADRESP17 = Byte.parseByte(s);
} else {
ADRESP17 = Byte.MIN_VALUE;
}
}

protected final void initAGEEST(String s) {
if (!s.trim().isEmpty()) {
AGEEST = Byte.parseByte(s);
} else {
AGEEST = Byte.MIN_VALUE;
}
}

protected final void initAGEGR10_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR10_DV = Byte.parseByte(s);
} else {
AGEGR10_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR13_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR13_DV = Byte.parseByte(s);
} else {
AGEGR13_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR5_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR5_DV = Byte.parseByte(s);
} else {
AGEGR5_DV = Byte.MIN_VALUE;
}
}

protected final void initAGELH(String s) {
if (!s.trim().isEmpty()) {
AGELH = Byte.parseByte(s);
} else {
AGELH = Byte.MIN_VALUE;
}
}

protected final void initAGE_DV(String s) {
if (!s.trim().isEmpty()) {
AGE_DV = Short.parseShort(s);
} else {
AGE_DV = Short.MIN_VALUE;
}
}

protected final void initAIDEFT(String s) {
if (!s.trim().isEmpty()) {
AIDEFT = Byte.parseByte(s);
} else {
AIDEFT = Byte.MIN_VALUE;
}
}

protected final void initAIDHU1(String s) {
if (!s.trim().isEmpty()) {
AIDHU1 = Short.parseShort(s);
} else {
AIDHU1 = Short.MIN_VALUE;
}
}

protected final void initAIDHU2(String s) {
if (!s.trim().isEmpty()) {
AIDHU2 = Short.parseShort(s);
} else {
AIDHU2 = Short.MIN_VALUE;
}
}

protected final void initAIDHUA1(String s) {
if (!s.trim().isEmpty()) {
AIDHUA1 = Byte.parseByte(s);
} else {
AIDHUA1 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA10(String s) {
if (!s.trim().isEmpty()) {
AIDHUA10 = Byte.parseByte(s);
} else {
AIDHUA10 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA11(String s) {
if (!s.trim().isEmpty()) {
AIDHUA11 = Byte.parseByte(s);
} else {
AIDHUA11 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA12(String s) {
if (!s.trim().isEmpty()) {
AIDHUA12 = Byte.parseByte(s);
} else {
AIDHUA12 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA13(String s) {
if (!s.trim().isEmpty()) {
AIDHUA13 = Byte.parseByte(s);
} else {
AIDHUA13 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA14(String s) {
if (!s.trim().isEmpty()) {
AIDHUA14 = Byte.parseByte(s);
} else {
AIDHUA14 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA15(String s) {
if (!s.trim().isEmpty()) {
AIDHUA15 = Byte.parseByte(s);
} else {
AIDHUA15 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA16(String s) {
if (!s.trim().isEmpty()) {
AIDHUA16 = Byte.parseByte(s);
} else {
AIDHUA16 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA2(String s) {
if (!s.trim().isEmpty()) {
AIDHUA2 = Byte.parseByte(s);
} else {
AIDHUA2 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA3(String s) {
if (!s.trim().isEmpty()) {
AIDHUA3 = Byte.parseByte(s);
} else {
AIDHUA3 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA4(String s) {
if (!s.trim().isEmpty()) {
AIDHUA4 = Byte.parseByte(s);
} else {
AIDHUA4 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA5(String s) {
if (!s.trim().isEmpty()) {
AIDHUA5 = Byte.parseByte(s);
} else {
AIDHUA5 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA6(String s) {
if (!s.trim().isEmpty()) {
AIDHUA6 = Byte.parseByte(s);
} else {
AIDHUA6 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA7(String s) {
if (!s.trim().isEmpty()) {
AIDHUA7 = Byte.parseByte(s);
} else {
AIDHUA7 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA8(String s) {
if (!s.trim().isEmpty()) {
AIDHUA8 = Byte.parseByte(s);
} else {
AIDHUA8 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA9(String s) {
if (!s.trim().isEmpty()) {
AIDHUA9 = Byte.parseByte(s);
} else {
AIDHUA9 = Byte.MIN_VALUE;
}
}

protected final void initALLCH01(String s) {
if (!s.trim().isEmpty()) {
ALLCH01 = Byte.parseByte(s);
} else {
ALLCH01 = Byte.MIN_VALUE;
}
}

protected final void initALLCH02(String s) {
if (!s.trim().isEmpty()) {
ALLCH02 = Byte.parseByte(s);
} else {
ALLCH02 = Byte.MIN_VALUE;
}
}

protected final void initALLCH03(String s) {
if (!s.trim().isEmpty()) {
ALLCH03 = Byte.parseByte(s);
} else {
ALLCH03 = Byte.MIN_VALUE;
}
}

protected final void initALLCH04(String s) {
if (!s.trim().isEmpty()) {
ALLCH04 = Byte.parseByte(s);
} else {
ALLCH04 = Byte.MIN_VALUE;
}
}

protected final void initALLCH05(String s) {
if (!s.trim().isEmpty()) {
ALLCH05 = Byte.parseByte(s);
} else {
ALLCH05 = Byte.MIN_VALUE;
}
}

protected final void initALLCH06(String s) {
if (!s.trim().isEmpty()) {
ALLCH06 = Byte.parseByte(s);
} else {
ALLCH06 = Byte.MIN_VALUE;
}
}

protected final void initALLCH07(String s) {
if (!s.trim().isEmpty()) {
ALLCH07 = Byte.parseByte(s);
} else {
ALLCH07 = Byte.MIN_VALUE;
}
}

protected final void initALLCH08(String s) {
if (!s.trim().isEmpty()) {
ALLCH08 = Byte.parseByte(s);
} else {
ALLCH08 = Byte.MIN_VALUE;
}
}

protected final void initALLCH09(String s) {
if (!s.trim().isEmpty()) {
ALLCH09 = Byte.parseByte(s);
} else {
ALLCH09 = Byte.MIN_VALUE;
}
}

protected final void initALLCH10(String s) {
if (!s.trim().isEmpty()) {
ALLCH10 = Byte.parseByte(s);
} else {
ALLCH10 = Byte.MIN_VALUE;
}
}

protected final void initALLCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH11 = false;
} else {
ALLCH11 = true;
}
}
}

protected final void initALLCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH12 = false;
} else {
ALLCH12 = true;
}
}
}

protected final void initALLCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH13 = false;
} else {
ALLCH13 = true;
}
}
}

protected final void initALLCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH14 = false;
} else {
ALLCH14 = true;
}
}
}

protected final void initALLCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH15 = false;
} else {
ALLCH15 = true;
}
}
}

protected final void initALLCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH16 = false;
} else {
ALLCH16 = true;
}
}
}

protected final void initATTACKEDW11(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDW11 = Byte.parseByte(s);
} else {
ATTACKEDW11 = Byte.MIN_VALUE;
}
}

protected final void initATTACKEDW12(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDW12 = Byte.parseByte(s);
} else {
ATTACKEDW12 = Byte.MIN_VALUE;
}
}

protected final void initATTACKEDW13(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDW13 = Byte.parseByte(s);
} else {
ATTACKEDW13 = Byte.MIN_VALUE;
}
}

protected final void initATTACKEDW14(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDW14 = Byte.parseByte(s);
} else {
ATTACKEDW14 = Byte.MIN_VALUE;
}
}

protected final void initATTACKEDW15(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDW15 = Byte.parseByte(s);
} else {
ATTACKEDW15 = Byte.MIN_VALUE;
}
}

protected final void initATTACKEDW16(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDW16 = Byte.parseByte(s);
} else {
ATTACKEDW16 = Byte.MIN_VALUE;
}
}

protected final void initATTACKEDW17(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDW17 = Byte.parseByte(s);
} else {
ATTACKEDW17 = Byte.MIN_VALUE;
}
}

protected final void initATTACKEDW196(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDW196 = Byte.parseByte(s);
} else {
ATTACKEDW196 = Byte.MIN_VALUE;
}
}

protected final void initATTACKEDW197(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDW197 = Byte.parseByte(s);
} else {
ATTACKEDW197 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED_DV(String s) {
if (!s.trim().isEmpty()) {
ATTACKED_DV = Byte.parseByte(s);
} else {
ATTACKED_DV = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEW11(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEW11 = Byte.parseByte(s);
} else {
AVOIDANCEW11 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEW12(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEW12 = Byte.parseByte(s);
} else {
AVOIDANCEW12 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEW13(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEW13 = Byte.parseByte(s);
} else {
AVOIDANCEW13 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEW14(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEW14 = Byte.parseByte(s);
} else {
AVOIDANCEW14 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEW15(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEW15 = Byte.parseByte(s);
} else {
AVOIDANCEW15 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEW16(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEW16 = Byte.parseByte(s);
} else {
AVOIDANCEW16 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEW17(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEW17 = Byte.parseByte(s);
} else {
AVOIDANCEW17 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEW196(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEW196 = Byte.parseByte(s);
} else {
AVOIDANCEW196 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEW197(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEW197 = Byte.parseByte(s);
} else {
AVOIDANCEW197 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDED_DV(String s) {
if (!s.trim().isEmpty()) {
AVOIDED_DV = Byte.parseByte(s);
} else {
AVOIDED_DV = Byte.MIN_VALUE;
}
}

protected final void initBASNSA(String s) {
if (!s.trim().isEmpty()) {
BASNSA = Double.parseDouble(s);
} else {
BASNSA = Double.NaN;
}
}

protected final void initBASRATE(String s) {
if (!s.trim().isEmpty()) {
BASRATE = Double.parseDouble(s);
} else {
BASRATE = Double.NaN;
}
}

protected final void initBASREST(String s) {
if (!s.trim().isEmpty()) {
BASREST = Byte.parseByte(s);
} else {
BASREST = Byte.MIN_VALUE;
}
}

protected final void initBENCB(String s) {
if (!s.trim().isEmpty()) {
BENCB = Byte.parseByte(s);
} else {
BENCB = Byte.MIN_VALUE;
}
}

protected final void initBENCTC(String s) {
if (!s.trim().isEmpty()) {
BENCTC = Byte.parseByte(s);
} else {
BENCTC = Byte.MIN_VALUE;
}
}

protected final void initBENDIS1(String s) {
if (!s.trim().isEmpty()) {
BENDIS1 = Byte.parseByte(s);
} else {
BENDIS1 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS10(String s) {
if (!s.trim().isEmpty()) {
BENDIS10 = Byte.parseByte(s);
} else {
BENDIS10 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS11(String s) {
if (!s.trim().isEmpty()) {
BENDIS11 = Byte.parseByte(s);
} else {
BENDIS11 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS2(String s) {
if (!s.trim().isEmpty()) {
BENDIS2 = Byte.parseByte(s);
} else {
BENDIS2 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS3(String s) {
if (!s.trim().isEmpty()) {
BENDIS3 = Byte.parseByte(s);
} else {
BENDIS3 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS4(String s) {
if (!s.trim().isEmpty()) {
BENDIS4 = Byte.parseByte(s);
} else {
BENDIS4 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS5(String s) {
if (!s.trim().isEmpty()) {
BENDIS5 = Byte.parseByte(s);
} else {
BENDIS5 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS6(String s) {
if (!s.trim().isEmpty()) {
BENDIS6 = Byte.parseByte(s);
} else {
BENDIS6 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS7(String s) {
if (!s.trim().isEmpty()) {
BENDIS7 = Byte.parseByte(s);
} else {
BENDIS7 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS8(String s) {
if (!s.trim().isEmpty()) {
BENDIS8 = Byte.parseByte(s);
} else {
BENDIS8 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS9(String s) {
if (!s.trim().isEmpty()) {
BENDIS9 = Byte.parseByte(s);
} else {
BENDIS9 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS96(String s) {
if (!s.trim().isEmpty()) {
BENDIS96 = Byte.parseByte(s);
} else {
BENDIS96 = Byte.MIN_VALUE;
}
}

protected final void initBENEFIT_TM(String s) {
if (!s.trim().isEmpty()) {
BENEFIT_TM = Integer.parseInt(s);
} else {
BENEFIT_TM = Integer.MIN_VALUE;
}
}

protected final void initBENFAM1(String s) {
if (!s.trim().isEmpty()) {
BENFAM1 = Byte.parseByte(s);
} else {
BENFAM1 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM2(String s) {
if (!s.trim().isEmpty()) {
BENFAM2 = Byte.parseByte(s);
} else {
BENFAM2 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM3(String s) {
if (!s.trim().isEmpty()) {
BENFAM3 = Byte.parseByte(s);
} else {
BENFAM3 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM4(String s) {
if (!s.trim().isEmpty()) {
BENFAM4 = Byte.parseByte(s);
} else {
BENFAM4 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM5(String s) {
if (!s.trim().isEmpty()) {
BENFAM5 = Byte.parseByte(s);
} else {
BENFAM5 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM96(String s) {
if (!s.trim().isEmpty()) {
BENFAM96 = Byte.parseByte(s);
} else {
BENFAM96 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU1(String s) {
if (!s.trim().isEmpty()) {
BENHOU1 = Byte.parseByte(s);
} else {
BENHOU1 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU2(String s) {
if (!s.trim().isEmpty()) {
BENHOU2 = Byte.parseByte(s);
} else {
BENHOU2 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU3(String s) {
if (!s.trim().isEmpty()) {
BENHOU3 = Byte.parseByte(s);
} else {
BENHOU3 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU4(String s) {
if (!s.trim().isEmpty()) {
BENHOU4 = Byte.parseByte(s);
} else {
BENHOU4 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU96(String s) {
if (!s.trim().isEmpty()) {
BENHOU96 = Byte.parseByte(s);
} else {
BENHOU96 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN1(String s) {
if (!s.trim().isEmpty()) {
BENPEN1 = Byte.parseByte(s);
} else {
BENPEN1 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN2(String s) {
if (!s.trim().isEmpty()) {
BENPEN2 = Byte.parseByte(s);
} else {
BENPEN2 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN3(String s) {
if (!s.trim().isEmpty()) {
BENPEN3 = Byte.parseByte(s);
} else {
BENPEN3 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN4(String s) {
if (!s.trim().isEmpty()) {
BENPEN4 = Byte.parseByte(s);
} else {
BENPEN4 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN5(String s) {
if (!s.trim().isEmpty()) {
BENPEN5 = Byte.parseByte(s);
} else {
BENPEN5 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN6(String s) {
if (!s.trim().isEmpty()) {
BENPEN6 = Byte.parseByte(s);
} else {
BENPEN6 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN7(String s) {
if (!s.trim().isEmpty()) {
BENPEN7 = Byte.parseByte(s);
} else {
BENPEN7 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN8(String s) {
if (!s.trim().isEmpty()) {
BENPEN8 = Byte.parseByte(s);
} else {
BENPEN8 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN96(String s) {
if (!s.trim().isEmpty()) {
BENPEN96 = Byte.parseByte(s);
} else {
BENPEN96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA1(String s) {
if (!s.trim().isEmpty()) {
BENSTA1 = Byte.parseByte(s);
} else {
BENSTA1 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA2(String s) {
if (!s.trim().isEmpty()) {
BENSTA2 = Byte.parseByte(s);
} else {
BENSTA2 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA3(String s) {
if (!s.trim().isEmpty()) {
BENSTA3 = Byte.parseByte(s);
} else {
BENSTA3 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA4(String s) {
if (!s.trim().isEmpty()) {
BENSTA4 = Byte.parseByte(s);
} else {
BENSTA4 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA5(String s) {
if (!s.trim().isEmpty()) {
BENSTA5 = Byte.parseByte(s);
} else {
BENSTA5 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA6(String s) {
if (!s.trim().isEmpty()) {
BENSTA6 = Byte.parseByte(s);
} else {
BENSTA6 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA7(String s) {
if (!s.trim().isEmpty()) {
BENSTA7 = Byte.parseByte(s);
} else {
BENSTA7 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA8(String s) {
if (!s.trim().isEmpty()) {
BENSTA8 = Byte.parseByte(s);
} else {
BENSTA8 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA96(String s) {
if (!s.trim().isEmpty()) {
BENSTA96 = Byte.parseByte(s);
} else {
BENSTA96 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX1(String s) {
if (!s.trim().isEmpty()) {
BENTAX1 = Byte.parseByte(s);
} else {
BENTAX1 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX2(String s) {
if (!s.trim().isEmpty()) {
BENTAX2 = Byte.parseByte(s);
} else {
BENTAX2 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX3(String s) {
if (!s.trim().isEmpty()) {
BENTAX3 = Byte.parseByte(s);
} else {
BENTAX3 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX4(String s) {
if (!s.trim().isEmpty()) {
BENTAX4 = Byte.parseByte(s);
} else {
BENTAX4 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX5(String s) {
if (!s.trim().isEmpty()) {
BENTAX5 = Byte.parseByte(s);
} else {
BENTAX5 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX96(String s) {
if (!s.trim().isEmpty()) {
BENTAX96 = Byte.parseByte(s);
} else {
BENTAX96 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP1(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP1 = Byte.parseByte(s);
} else {
BENUNEMP1 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP2(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP2 = Byte.parseByte(s);
} else {
BENUNEMP2 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP96(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP96 = Byte.parseByte(s);
} else {
BENUNEMP96 = Byte.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBMI_DV(String s) {
if (!s.trim().isEmpty()) {
BMI_DV = Double.parseDouble(s);
} else {
BMI_DV = Double.NaN;
}
}

protected final void initBRITID(String s) {
if (!s.trim().isEmpty()) {
BRITID = Byte.parseByte(s);
} else {
BRITID = Byte.MIN_VALUE;
}
}

protected final void initBTYPE1(String s) {
if (!s.trim().isEmpty()) {
BTYPE1 = Byte.parseByte(s);
} else {
BTYPE1 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE2(String s) {
if (!s.trim().isEmpty()) {
BTYPE2 = Byte.parseByte(s);
} else {
BTYPE2 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE3(String s) {
if (!s.trim().isEmpty()) {
BTYPE3 = Byte.parseByte(s);
} else {
BTYPE3 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE4(String s) {
if (!s.trim().isEmpty()) {
BTYPE4 = Byte.parseByte(s);
} else {
BTYPE4 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE5(String s) {
if (!s.trim().isEmpty()) {
BTYPE5 = Byte.parseByte(s);
} else {
BTYPE5 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE6(String s) {
if (!s.trim().isEmpty()) {
BTYPE6 = Byte.parseByte(s);
} else {
BTYPE6 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE7(String s) {
if (!s.trim().isEmpty()) {
BTYPE7 = Byte.parseByte(s);
} else {
BTYPE7 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE8(String s) {
if (!s.trim().isEmpty()) {
BTYPE8 = Byte.parseByte(s);
} else {
BTYPE8 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE9(String s) {
if (!s.trim().isEmpty()) {
BTYPE9 = Byte.parseByte(s);
} else {
BTYPE9 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE96(String s) {
if (!s.trim().isEmpty()) {
BTYPE96 = Byte.parseByte(s);
} else {
BTYPE96 = Byte.MIN_VALUE;
}
}

protected final void initBUNO_DV(String s) {
if (!s.trim().isEmpty()) {
BUNO_DV = Byte.parseByte(s);
} else {
BUNO_DV = Byte.MIN_VALUE;
}
}

protected final void initCARING_TM(String s) {
if (!s.trim().isEmpty()) {
CARING_TM = Integer.parseInt(s);
} else {
CARING_TM = Integer.MIN_VALUE;
}
}

protected final void initCARMILES(String s) {
if (!s.trim().isEmpty()) {
CARMILES = Integer.parseInt(s);
} else {
CARMILES = Integer.MIN_VALUE;
}
}

protected final void initCCARE(String s) {
if (!s.trim().isEmpty()) {
CCARE = Byte.parseByte(s);
} else {
CCARE = Byte.MIN_VALUE;
}
}

protected final void initCCWORK(String s) {
if (!s.trim().isEmpty()) {
CCWORK = Byte.parseByte(s);
} else {
CCWORK = Byte.MIN_VALUE;
}
}

protected final void initCH1BY4(String s) {
if (!s.trim().isEmpty()) {
CH1BY4 = Short.parseShort(s);
} else {
CH1BY4 = Short.MIN_VALUE;
}
}

protected final void initCHCON(String s) {
if (!s.trim().isEmpty()) {
CHCON = Byte.parseByte(s);
} else {
CHCON = Byte.MIN_VALUE;
}
}

protected final void initCHFAR(String s) {
if (!s.trim().isEmpty()) {
CHFAR = Byte.parseByte(s);
} else {
CHFAR = Byte.MIN_VALUE;
}
}

protected final void initCHILDCARE_TM(String s) {
if (!s.trim().isEmpty()) {
CHILDCARE_TM = Integer.parseInt(s);
} else {
CHILDCARE_TM = Integer.MIN_VALUE;
}
}

protected final void initCHSEE(String s) {
if (!s.trim().isEmpty()) {
CHSEE = Byte.parseByte(s);
} else {
CHSEE = Byte.MIN_VALUE;
}
}

protected final void initCITZN1(String s) {
if (!s.trim().isEmpty()) {
CITZN1 = Byte.parseByte(s);
} else {
CITZN1 = Byte.MIN_VALUE;
}
}

protected final void initCITZN2(String s) {
if (!s.trim().isEmpty()) {
CITZN2 = Byte.parseByte(s);
} else {
CITZN2 = Byte.MIN_VALUE;
}
}

protected final void initCITZN3(String s) {
if (!s.trim().isEmpty()) {
CITZN3 = Byte.parseByte(s);
} else {
CITZN3 = Byte.MIN_VALUE;
}
}

protected final void initCOHAB_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
COHAB_DV = false;
} else {
COHAB_DV = true;
}
}
}

protected final void initCONSENT_TM(String s) {
if (!s.trim().isEmpty()) {
CONSENT_TM = Integer.parseInt(s);
} else {
CONSENT_TM = Integer.MIN_VALUE;
}
}

protected final void initCOUNTRY(String s) {
if (!s.trim().isEmpty()) {
COUNTRY = Byte.parseByte(s);
} else {
COUNTRY = Byte.MIN_VALUE;
}
}

protected final void initCTADD1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD1_CODE = Byte.parseByte(s);
} else {
CTADD1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTADD2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD2_CODE = Byte.parseByte(s);
} else {
CTADD2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCNTY_CODE(String s) {
if (!s.trim().isEmpty()) {
CTCNTY_CODE = Byte.parseByte(s);
} else {
CTCNTY_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTEMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
CTEMAIL_CODE = Byte.parseByte(s);
} else {
CTEMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTPCODE_CODE(String s) {
if (!s.trim().isEmpty()) {
CTPCODE_CODE = Byte.parseByte(s);
} else {
CTPCODE_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTEL1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL1_CODE = Byte.parseByte(s);
} else {
CTTEL1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTEL2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL2_CODE = Byte.parseByte(s);
} else {
CTTEL2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTOWN_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTOWN_CODE = Byte.parseByte(s);
} else {
CTTOWN_CODE = Byte.MIN_VALUE;
}
}

protected final void initCUDDLEKID(String s) {
if (!s.trim().isEmpty()) {
CUDDLEKID = Byte.parseByte(s);
} else {
CUDDLEKID = Byte.MIN_VALUE;
}
}

protected final void initDEMOG_TM(String s) {
if (!s.trim().isEmpty()) {
DEMOG_TM = Integer.parseInt(s);
} else {
DEMOG_TM = Integer.MIN_VALUE;
}
}

protected final void initDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DEPCHL_DV = false;
} else {
DEPCHL_DV = true;
}
}
}

protected final void initDINNER(String s) {
if (!s.trim().isEmpty()) {
DINNER = Byte.parseByte(s);
} else {
DINNER = Byte.MIN_VALUE;
}
}

protected final void initDISCRIMINATION_TM(String s) {
if (!s.trim().isEmpty()) {
DISCRIMINATION_TM = Integer.parseInt(s);
} else {
DISCRIMINATION_TM = Integer.MIN_VALUE;
}
}

protected final void initDISDIF1(String s) {
if (!s.trim().isEmpty()) {
DISDIF1 = Byte.parseByte(s);
} else {
DISDIF1 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF10(String s) {
if (!s.trim().isEmpty()) {
DISDIF10 = Byte.parseByte(s);
} else {
DISDIF10 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF11(String s) {
if (!s.trim().isEmpty()) {
DISDIF11 = Byte.parseByte(s);
} else {
DISDIF11 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF12(String s) {
if (!s.trim().isEmpty()) {
DISDIF12 = Byte.parseByte(s);
} else {
DISDIF12 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF2(String s) {
if (!s.trim().isEmpty()) {
DISDIF2 = Byte.parseByte(s);
} else {
DISDIF2 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF3(String s) {
if (!s.trim().isEmpty()) {
DISDIF3 = Byte.parseByte(s);
} else {
DISDIF3 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF4(String s) {
if (!s.trim().isEmpty()) {
DISDIF4 = Byte.parseByte(s);
} else {
DISDIF4 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF5(String s) {
if (!s.trim().isEmpty()) {
DISDIF5 = Byte.parseByte(s);
} else {
DISDIF5 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF6(String s) {
if (!s.trim().isEmpty()) {
DISDIF6 = Byte.parseByte(s);
} else {
DISDIF6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF7(String s) {
if (!s.trim().isEmpty()) {
DISDIF7 = Byte.parseByte(s);
} else {
DISDIF7 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF8(String s) {
if (!s.trim().isEmpty()) {
DISDIF8 = Byte.parseByte(s);
} else {
DISDIF8 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF9(String s) {
if (!s.trim().isEmpty()) {
DISDIF9 = Byte.parseByte(s);
} else {
DISDIF9 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF96(String s) {
if (!s.trim().isEmpty()) {
DISDIF96 = Byte.parseByte(s);
} else {
DISDIF96 = Byte.MIN_VALUE;
}
}

protected final void initDOBY_DV(String s) {
if (!s.trim().isEmpty()) {
DOBY_DV = Short.parseShort(s);
} else {
DOBY_DV = Short.MIN_VALUE;
}
}

protected final void initDRIVE(String s) {
if (!s.trim().isEmpty()) {
DRIVE = Byte.parseByte(s);
} else {
DRIVE = Byte.MIN_VALUE;
}
}

protected final void initDVAGE(String s) {
if (!s.trim().isEmpty()) {
DVAGE = Byte.parseByte(s);
} else {
DVAGE = Byte.MIN_VALUE;
}
}

protected final void initEDASP(String s) {
if (!s.trim().isEmpty()) {
EDASP = Byte.parseByte(s);
} else {
EDASP = Byte.MIN_VALUE;
}
}

protected final void initEDLINKB(String s) {
if (!s.trim().isEmpty()) {
EDLINKB = Byte.parseByte(s);
} else {
EDLINKB = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE(String s) {
if (!s.trim().isEmpty()) {
EDTYPE = Short.parseShort(s);
} else {
EDTYPE = Short.MIN_VALUE;
}
}

protected final void initEED12(String s) {
if (!s.trim().isEmpty()) {
EED12 = Byte.parseByte(s);
} else {
EED12 = Byte.MIN_VALUE;
}
}

protected final void initEMBOOST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
EMBOOST = false;
} else {
EMBOOST = true;
}
}
}

protected final void initEMPLOY(String s) {
if (!s.trim().isEmpty()) {
EMPLOY = Byte.parseByte(s);
} else {
EMPLOY = Byte.MIN_VALUE;
}
}

protected final void initEMPLOYMENT_TM(String s) {
if (!s.trim().isEmpty()) {
EMPLOYMENT_TM = Integer.parseInt(s);
} else {
EMPLOYMENT_TM = Integer.MIN_VALUE;
}
}

protected final void initEMPSTAT_TM(String s) {
if (!s.trim().isEmpty()) {
EMPSTAT_TM = Integer.parseInt(s);
} else {
EMPSTAT_TM = Integer.MIN_VALUE;
}
}

protected final void initENGFORM(String s) {
if (!s.trim().isEmpty()) {
ENGFORM = Byte.parseByte(s);
} else {
ENGFORM = Byte.MIN_VALUE;
}
}

protected final void initENGLANG(String s) {
if (!s.trim().isEmpty()) {
ENGLANG = Byte.parseByte(s);
} else {
ENGLANG = Byte.MIN_VALUE;
}
}

protected final void initENGREAD(String s) {
if (!s.trim().isEmpty()) {
ENGREAD = Byte.parseByte(s);
} else {
ENGREAD = Byte.MIN_VALUE;
}
}

protected final void initENGSPK(String s) {
if (!s.trim().isEmpty()) {
ENGSPK = Byte.parseByte(s);
} else {
ENGSPK = Byte.MIN_VALUE;
}
}

protected final void initENGTEL(String s) {
if (!s.trim().isEmpty()) {
ENGTEL = Byte.parseByte(s);
} else {
ENGTEL = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT1(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT1 = Byte.parseByte(s);
} else {
ENVHABIT1 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT10(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT10 = Byte.parseByte(s);
} else {
ENVHABIT10 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT11(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT11 = Byte.parseByte(s);
} else {
ENVHABIT11 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT2(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT2 = Byte.parseByte(s);
} else {
ENVHABIT2 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT3(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT3 = Byte.parseByte(s);
} else {
ENVHABIT3 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT4(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT4 = Byte.parseByte(s);
} else {
ENVHABIT4 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT5(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT5 = Byte.parseByte(s);
} else {
ENVHABIT5 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT6(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT6 = Byte.parseByte(s);
} else {
ENVHABIT6 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT7(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT7 = Byte.parseByte(s);
} else {
ENVHABIT7 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT8(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT8 = Byte.parseByte(s);
} else {
ENVHABIT8 = Byte.MIN_VALUE;
}
}

protected final void initENVHABIT9(String s) {
if (!s.trim().isEmpty()) {
ENVHABIT9 = Byte.parseByte(s);
} else {
ENVHABIT9 = Byte.MIN_VALUE;
}
}

protected final void initENVIRON_TM(String s) {
if (!s.trim().isEmpty()) {
ENVIRON_TM = Integer.parseInt(s);
} else {
ENVIRON_TM = Integer.MIN_VALUE;
}
}

protected final void initETHNIC1(String s) {
if (!s.trim().isEmpty()) {
ETHNIC1 = Byte.parseByte(s);
} else {
ETHNIC1 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC10(String s) {
if (!s.trim().isEmpty()) {
ETHNIC10 = Byte.parseByte(s);
} else {
ETHNIC10 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC11(String s) {
if (!s.trim().isEmpty()) {
ETHNIC11 = Byte.parseByte(s);
} else {
ETHNIC11 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC12(String s) {
if (!s.trim().isEmpty()) {
ETHNIC12 = Byte.parseByte(s);
} else {
ETHNIC12 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC13(String s) {
if (!s.trim().isEmpty()) {
ETHNIC13 = Byte.parseByte(s);
} else {
ETHNIC13 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC14(String s) {
if (!s.trim().isEmpty()) {
ETHNIC14 = Byte.parseByte(s);
} else {
ETHNIC14 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC2(String s) {
if (!s.trim().isEmpty()) {
ETHNIC2 = Byte.parseByte(s);
} else {
ETHNIC2 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC3(String s) {
if (!s.trim().isEmpty()) {
ETHNIC3 = Byte.parseByte(s);
} else {
ETHNIC3 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC4(String s) {
if (!s.trim().isEmpty()) {
ETHNIC4 = Byte.parseByte(s);
} else {
ETHNIC4 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC5(String s) {
if (!s.trim().isEmpty()) {
ETHNIC5 = Byte.parseByte(s);
} else {
ETHNIC5 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC6(String s) {
if (!s.trim().isEmpty()) {
ETHNIC6 = Byte.parseByte(s);
} else {
ETHNIC6 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC7(String s) {
if (!s.trim().isEmpty()) {
ETHNIC7 = Byte.parseByte(s);
} else {
ETHNIC7 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC8(String s) {
if (!s.trim().isEmpty()) {
ETHNIC8 = Byte.parseByte(s);
} else {
ETHNIC8 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC9(String s) {
if (!s.trim().isEmpty()) {
ETHNIC9 = Byte.parseByte(s);
} else {
ETHNIC9 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC96(String s) {
if (!s.trim().isEmpty()) {
ETHNIC96 = Byte.parseByte(s);
} else {
ETHNIC96 = Byte.MIN_VALUE;
}
}

protected final void initETHNIC_TM(String s) {
if (!s.trim().isEmpty()) {
ETHNIC_TM = Integer.parseInt(s);
} else {
ETHNIC_TM = Integer.MIN_VALUE;
}
}

protected final void initETHN_DV(String s) {
if (!s.trim().isEmpty()) {
ETHN_DV = Byte.parseByte(s);
} else {
ETHN_DV = Byte.MIN_VALUE;
}
}

protected final void initEXTNSA(String s) {
if (!s.trim().isEmpty()) {
EXTNSA = Byte.parseByte(s);
} else {
EXTNSA = Byte.MIN_VALUE;
}
}

protected final void initEXTRATE(String s) {
if (!s.trim().isEmpty()) {
EXTRATE = Double.parseDouble(s);
} else {
EXTRATE = Double.NaN;
}
}

protected final void initEXTREST(String s) {
if (!s.trim().isEmpty()) {
EXTREST = Byte.parseByte(s);
} else {
EXTREST = Byte.MIN_VALUE;
}
}

protected final void initFAMILY_TM(String s) {
if (!s.trim().isEmpty()) {
FAMILY_TM = Integer.parseInt(s);
} else {
FAMILY_TM = Integer.MIN_VALUE;
}
}

protected final void initFARKID(String s) {
if (!s.trim().isEmpty()) {
FARKID = Byte.parseByte(s);
} else {
FARKID = Byte.MIN_VALUE;
}
}

protected final void initFEDLIK(String s) {
if (!s.trim().isEmpty()) {
FEDLIK = Byte.parseByte(s);
} else {
FEDLIK = Byte.MIN_VALUE;
}
}

protected final void initFEDNT(String s) {
if (!s.trim().isEmpty()) {
FEDNT = Byte.parseByte(s);
} else {
FEDNT = Byte.MIN_VALUE;
}
}

protected final void initFENOW(String s) {
if (!s.trim().isEmpty()) {
FENOW = Byte.parseByte(s);
} else {
FENOW = Byte.MIN_VALUE;
}
}

protected final void initFERTILITY_TM(String s) {
if (!s.trim().isEmpty()) {
FERTILITY_TM = Integer.parseInt(s);
} else {
FERTILITY_TM = Integer.MIN_VALUE;
}
}

protected final void initFIBENOTHR_DV(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_DV = Double.parseDouble(s);
} else {
FIBENOTHR_DV = Double.NaN;
}
}

protected final void initFIBENOTHR_IF(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_IF = Double.parseDouble(s);
} else {
FIBENOTHR_IF = Double.NaN;
}
}

protected final void initFIBENOTHR_TC(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_TC = Byte.parseByte(s);
} else {
FIBENOTHR_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_IF = Double.parseDouble(s);
} else {
FIMNGRS_IF = Double.NaN;
}
}

protected final void initFIMNGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_TC = Byte.parseByte(s);
} else {
FIMNGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNINVNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNINVNET_DV = Double.parseDouble(s);
} else {
FIMNINVNET_DV = Double.NaN;
}
}

protected final void initFIMNLABGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_IF = Double.parseDouble(s);
} else {
FIMNLABGRS_IF = Double.NaN;
}
}

protected final void initFIMNLABGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_TC = Byte.parseByte(s);
} else {
FIMNLABGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNLABNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_DV = Double.parseDouble(s);
} else {
FIMNLABNET_DV = Double.NaN;
}
}

protected final void initFIMNLABNET_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_TC = Byte.parseByte(s);
} else {
FIMNLABNET_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNMISC_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNMISC_DV = Double.parseDouble(s);
} else {
FIMNMISC_DV = Double.NaN;
}
}

protected final void initFIMNNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNNET_DV = Double.parseDouble(s);
} else {
FIMNNET_DV = Double.NaN;
}
}

protected final void initFIMNPEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPEN_DV = Double.parseDouble(s);
} else {
FIMNPEN_DV = Double.NaN;
}
}

protected final void initFIMNPRBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPRBEN_DV = Double.parseDouble(s);
} else {
FIMNPRBEN_DV = Double.NaN;
}
}

protected final void initFIMNSBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNSBEN_DV = Double.parseDouble(s);
} else {
FIMNSBEN_DV = Double.NaN;
}
}

protected final void initFINANCES_TM(String s) {
if (!s.trim().isEmpty()) {
FINANCES_TM = Integer.parseInt(s);
} else {
FINANCES_TM = Integer.MIN_VALUE;
}
}

protected final void initFINFUT(String s) {
if (!s.trim().isEmpty()) {
FINFUT = Byte.parseByte(s);
} else {
FINFUT = Byte.MIN_VALUE;
}
}

protected final void initFININT_TM(String s) {
if (!s.trim().isEmpty()) {
FININT_TM = Integer.parseInt(s);
} else {
FININT_TM = Integer.MIN_VALUE;
}
}

protected final void initFIYRDB1(String s) {
if (!s.trim().isEmpty()) {
FIYRDB1 = Byte.parseByte(s);
} else {
FIYRDB1 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB2(String s) {
if (!s.trim().isEmpty()) {
FIYRDB2 = Byte.parseByte(s);
} else {
FIYRDB2 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB3(String s) {
if (!s.trim().isEmpty()) {
FIYRDB3 = Byte.parseByte(s);
} else {
FIYRDB3 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB4(String s) {
if (!s.trim().isEmpty()) {
FIYRDB4 = Byte.parseByte(s);
} else {
FIYRDB4 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB5(String s) {
if (!s.trim().isEmpty()) {
FIYRDB5 = Byte.parseByte(s);
} else {
FIYRDB5 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB6(String s) {
if (!s.trim().isEmpty()) {
FIYRDB6 = Byte.parseByte(s);
} else {
FIYRDB6 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDIA(String s) {
if (!s.trim().isEmpty()) {
FIYRDIA = Integer.parseInt(s);
} else {
FIYRDIA = Integer.MIN_VALUE;
}
}

protected final void initFIYRINVINC_DV(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_DV = Double.parseDouble(s);
} else {
FIYRINVINC_DV = Double.NaN;
}
}

protected final void initFIYRINVINC_IF(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_IF = Byte.parseByte(s);
} else {
FIYRINVINC_IF = Byte.MIN_VALUE;
}
}

protected final void initFIYRINVINC_TC(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_TC = Byte.parseByte(s);
} else {
FIYRINVINC_TC = Byte.MIN_VALUE;
}
}

protected final void initFLAGLINK(String s) {
if (!s.trim().isEmpty()) {
FLAGLINK = Byte.parseByte(s);
} else {
FLAGLINK = Byte.MIN_VALUE;
}
}

protected final void initFNPID(String s) {
if (!s.trim().isEmpty()) {
FNPID = Integer.parseInt(s);
} else {
FNPID = Integer.MIN_VALUE;
}
}

protected final void initFNPNO(String s) {
if (!s.trim().isEmpty()) {
FNPNO = Byte.parseByte(s);
} else {
FNPNO = Byte.MIN_VALUE;
}
}

protected final void initFNSPID(String s) {
if (!s.trim().isEmpty()) {
FNSPID = Integer.parseInt(s);
} else {
FNSPID = Integer.MIN_VALUE;
}
}

protected final void initFNSPNO(String s) {
if (!s.trim().isEmpty()) {
FNSPNO = Byte.parseByte(s);
} else {
FNSPNO = Byte.MIN_VALUE;
}
}

protected final void initFORMDIF(String s) {
if (!s.trim().isEmpty()) {
FORMDIF = Byte.parseByte(s);
} else {
FORMDIF = Byte.MIN_VALUE;
}
}

protected final void initFTEXV(String s) {
if (!s.trim().isEmpty()) {
FTEXV = Integer.parseInt(s);
} else {
FTEXV = Integer.MIN_VALUE;
}
}

protected final void initFTEXW(String s) {
if (!s.trim().isEmpty()) {
FTEXW = Byte.parseByte(s);
} else {
FTEXW = Byte.MIN_VALUE;
}
}

protected final void initGPCOMP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
GPCOMP = false;
} else {
GPCOMP = true;
}
}
}

protected final void initGRFPID(String s) {
if (!s.trim().isEmpty()) {
GRFPID = Integer.parseInt(s);
} else {
GRFPID = Integer.MIN_VALUE;
}
}

protected final void initGRFPNO(String s) {
if (!s.trim().isEmpty()) {
GRFPNO = Byte.parseByte(s);
} else {
GRFPNO = Byte.MIN_VALUE;
}
}

protected final void initGRMPID(String s) {
if (!s.trim().isEmpty()) {
GRMPID = Integer.parseInt(s);
} else {
GRMPID = Integer.MIN_VALUE;
}
}

protected final void initGRMPNO(String s) {
if (!s.trim().isEmpty()) {
GRMPNO = Byte.parseByte(s);
} else {
GRMPNO = Byte.MIN_VALUE;
}
}

protected final void initHARASSMENT_TM(String s) {
if (!s.trim().isEmpty()) {
HARASSMENT_TM = Integer.parseInt(s);
} else {
HARASSMENT_TM = Integer.MIN_VALUE;
}
}

protected final void initHCOND1(String s) {
if (!s.trim().isEmpty()) {
HCOND1 = Byte.parseByte(s);
} else {
HCOND1 = Byte.MIN_VALUE;
}
}

protected final void initHCOND10(String s) {
if (!s.trim().isEmpty()) {
HCOND10 = Byte.parseByte(s);
} else {
HCOND10 = Byte.MIN_VALUE;
}
}

protected final void initHCOND11(String s) {
if (!s.trim().isEmpty()) {
HCOND11 = Byte.parseByte(s);
} else {
HCOND11 = Byte.MIN_VALUE;
}
}

protected final void initHCOND12(String s) {
if (!s.trim().isEmpty()) {
HCOND12 = Byte.parseByte(s);
} else {
HCOND12 = Byte.MIN_VALUE;
}
}

protected final void initHCOND13(String s) {
if (!s.trim().isEmpty()) {
HCOND13 = Byte.parseByte(s);
} else {
HCOND13 = Byte.MIN_VALUE;
}
}

protected final void initHCOND14(String s) {
if (!s.trim().isEmpty()) {
HCOND14 = Byte.parseByte(s);
} else {
HCOND14 = Byte.MIN_VALUE;
}
}

protected final void initHCOND15(String s) {
if (!s.trim().isEmpty()) {
HCOND15 = Byte.parseByte(s);
} else {
HCOND15 = Byte.MIN_VALUE;
}
}

protected final void initHCOND16(String s) {
if (!s.trim().isEmpty()) {
HCOND16 = Byte.parseByte(s);
} else {
HCOND16 = Byte.MIN_VALUE;
}
}

protected final void initHCOND17(String s) {
if (!s.trim().isEmpty()) {
HCOND17 = Byte.parseByte(s);
} else {
HCOND17 = Byte.MIN_VALUE;
}
}

protected final void initHCOND2(String s) {
if (!s.trim().isEmpty()) {
HCOND2 = Byte.parseByte(s);
} else {
HCOND2 = Byte.MIN_VALUE;
}
}

protected final void initHCOND3(String s) {
if (!s.trim().isEmpty()) {
HCOND3 = Byte.parseByte(s);
} else {
HCOND3 = Byte.MIN_VALUE;
}
}

protected final void initHCOND4(String s) {
if (!s.trim().isEmpty()) {
HCOND4 = Byte.parseByte(s);
} else {
HCOND4 = Byte.MIN_VALUE;
}
}

protected final void initHCOND5(String s) {
if (!s.trim().isEmpty()) {
HCOND5 = Byte.parseByte(s);
} else {
HCOND5 = Byte.MIN_VALUE;
}
}

protected final void initHCOND6(String s) {
if (!s.trim().isEmpty()) {
HCOND6 = Byte.parseByte(s);
} else {
HCOND6 = Byte.MIN_VALUE;
}
}

protected final void initHCOND7(String s) {
if (!s.trim().isEmpty()) {
HCOND7 = Byte.parseByte(s);
} else {
HCOND7 = Byte.MIN_VALUE;
}
}

protected final void initHCOND8(String s) {
if (!s.trim().isEmpty()) {
HCOND8 = Byte.parseByte(s);
} else {
HCOND8 = Byte.MIN_VALUE;
}
}

protected final void initHCOND9(String s) {
if (!s.trim().isEmpty()) {
HCOND9 = Byte.parseByte(s);
} else {
HCOND9 = Byte.MIN_VALUE;
}
}

protected final void initHCOND96(String s) {
if (!s.trim().isEmpty()) {
HCOND96 = Byte.parseByte(s);
} else {
HCOND96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA01(String s) {
if (!s.trim().isEmpty()) {
HCONDA01 = Byte.parseByte(s);
} else {
HCONDA01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA02(String s) {
if (!s.trim().isEmpty()) {
HCONDA02 = Byte.parseByte(s);
} else {
HCONDA02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA03(String s) {
if (!s.trim().isEmpty()) {
HCONDA03 = Byte.parseByte(s);
} else {
HCONDA03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA04(String s) {
if (!s.trim().isEmpty()) {
HCONDA04 = Byte.parseByte(s);
} else {
HCONDA04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA05(String s) {
if (!s.trim().isEmpty()) {
HCONDA05 = Byte.parseByte(s);
} else {
HCONDA05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA06(String s) {
if (!s.trim().isEmpty()) {
HCONDA06 = Byte.parseByte(s);
} else {
HCONDA06 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA07(String s) {
if (!s.trim().isEmpty()) {
HCONDA07 = Byte.parseByte(s);
} else {
HCONDA07 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA08(String s) {
if (!s.trim().isEmpty()) {
HCONDA08 = Byte.parseByte(s);
} else {
HCONDA08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA09(String s) {
if (!s.trim().isEmpty()) {
HCONDA09 = Byte.parseByte(s);
} else {
HCONDA09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA10(String s) {
if (!s.trim().isEmpty()) {
HCONDA10 = Byte.parseByte(s);
} else {
HCONDA10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA11(String s) {
if (!s.trim().isEmpty()) {
HCONDA11 = Byte.parseByte(s);
} else {
HCONDA11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA12(String s) {
if (!s.trim().isEmpty()) {
HCONDA12 = Byte.parseByte(s);
} else {
HCONDA12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA13(String s) {
if (!s.trim().isEmpty()) {
HCONDA13 = Byte.parseByte(s);
} else {
HCONDA13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA14(String s) {
if (!s.trim().isEmpty()) {
HCONDA14 = Byte.parseByte(s);
} else {
HCONDA14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA15(String s) {
if (!s.trim().isEmpty()) {
HCONDA15 = Byte.parseByte(s);
} else {
HCONDA15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA16(String s) {
if (!s.trim().isEmpty()) {
HCONDA16 = Byte.parseByte(s);
} else {
HCONDA16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA17(String s) {
if (!s.trim().isEmpty()) {
HCONDA17 = Byte.parseByte(s);
} else {
HCONDA17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS01(String s) {
if (!s.trim().isEmpty()) {
HCONDS01 = Byte.parseByte(s);
} else {
HCONDS01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS02(String s) {
if (!s.trim().isEmpty()) {
HCONDS02 = Byte.parseByte(s);
} else {
HCONDS02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS03(String s) {
if (!s.trim().isEmpty()) {
HCONDS03 = Byte.parseByte(s);
} else {
HCONDS03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS04(String s) {
if (!s.trim().isEmpty()) {
HCONDS04 = Byte.parseByte(s);
} else {
HCONDS04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS05(String s) {
if (!s.trim().isEmpty()) {
HCONDS05 = Byte.parseByte(s);
} else {
HCONDS05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS06(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HCONDS06 = false;
} else {
HCONDS06 = true;
}
}
}

protected final void initHCONDS07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HCONDS07 = false;
} else {
HCONDS07 = true;
}
}
}

protected final void initHCONDS08(String s) {
if (!s.trim().isEmpty()) {
HCONDS08 = Byte.parseByte(s);
} else {
HCONDS08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS09(String s) {
if (!s.trim().isEmpty()) {
HCONDS09 = Byte.parseByte(s);
} else {
HCONDS09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS10(String s) {
if (!s.trim().isEmpty()) {
HCONDS10 = Byte.parseByte(s);
} else {
HCONDS10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS11(String s) {
if (!s.trim().isEmpty()) {
HCONDS11 = Byte.parseByte(s);
} else {
HCONDS11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS12(String s) {
if (!s.trim().isEmpty()) {
HCONDS12 = Byte.parseByte(s);
} else {
HCONDS12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS13(String s) {
if (!s.trim().isEmpty()) {
HCONDS13 = Byte.parseByte(s);
} else {
HCONDS13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS14(String s) {
if (!s.trim().isEmpty()) {
HCONDS14 = Byte.parseByte(s);
} else {
HCONDS14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS15(String s) {
if (!s.trim().isEmpty()) {
HCONDS15 = Byte.parseByte(s);
} else {
HCONDS15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS16(String s) {
if (!s.trim().isEmpty()) {
HCONDS16 = Byte.parseByte(s);
} else {
HCONDS16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS17(String s) {
if (!s.trim().isEmpty()) {
HCONDS17 = Byte.parseByte(s);
} else {
HCONDS17 = Byte.MIN_VALUE;
}
}

protected final void initHEALTH(String s) {
if (!s.trim().isEmpty()) {
HEALTH = Byte.parseByte(s);
} else {
HEALTH = Byte.MIN_VALUE;
}
}

protected final void initHEALTHLINK(String s) {
if (!s.trim().isEmpty()) {
HEALTHLINK = Byte.parseByte(s);
} else {
HEALTHLINK = Byte.MIN_VALUE;
}
}

protected final void initHEALTH_TM(String s) {
if (!s.trim().isEmpty()) {
HEALTH_TM = Integer.parseInt(s);
} else {
HEALTH_TM = Integer.MIN_VALUE;
}
}

protected final void initHGADOPTF(String s) {
if (!s.trim().isEmpty()) {
HGADOPTF = Byte.parseByte(s);
} else {
HGADOPTF = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTM(String s) {
if (!s.trim().isEmpty()) {
HGADOPTM = Byte.parseByte(s);
} else {
HGADOPTM = Byte.MIN_VALUE;
}
}

protected final void initHGPART(String s) {
if (!s.trim().isEmpty()) {
HGPART = Byte.parseByte(s);
} else {
HGPART = Byte.MIN_VALUE;
}
}

protected final void initHHGRID_TM(String s) {
if (!s.trim().isEmpty()) {
HHGRID_TM = Integer.parseInt(s);
} else {
HHGRID_TM = Integer.MIN_VALUE;
}
}

protected final void initHHQRE_TM(String s) {
if (!s.trim().isEmpty()) {
HHQRE_TM = Integer.parseInt(s);
} else {
HHQRE_TM = Integer.MIN_VALUE;
}
}

protected final void initHHRESP_DV(String s) {
if (!s.trim().isEmpty()) {
HHRESP_DV = Byte.parseByte(s);
} else {
HHRESP_DV = Byte.MIN_VALUE;
}
}

protected final void initHHSTTIME_TM(String s) {
if (!s.trim().isEmpty()) {
HHSTTIME_TM = Integer.parseInt(s);
} else {
HHSTTIME_TM = Integer.MIN_VALUE;
}
}

protected final void initHHTYPE_DV(String s) {
if (!s.trim().isEmpty()) {
HHTYPE_DV = Byte.parseByte(s);
} else {
HHTYPE_DV = Byte.MIN_VALUE;
}
}

protected final void initHLHT(String s) {
if (!s.trim().isEmpty()) {
HLHT = Byte.parseByte(s);
} else {
HLHT = Byte.MIN_VALUE;
}
}

protected final void initHLHTC(String s) {
if (!s.trim().isEmpty()) {
HLHTC = Short.parseShort(s);
} else {
HLHTC = Short.MIN_VALUE;
}
}

protected final void initHLHTF(String s) {
if (!s.trim().isEmpty()) {
HLHTF = Byte.parseByte(s);
} else {
HLHTF = Byte.MIN_VALUE;
}
}

protected final void initHLHTI(String s) {
if (!s.trim().isEmpty()) {
HLHTI = Byte.parseByte(s);
} else {
HLHTI = Byte.MIN_VALUE;
}
}

protected final void initHLPHMWK(String s) {
if (!s.trim().isEmpty()) {
HLPHMWK = Byte.parseByte(s);
} else {
HLPHMWK = Byte.MIN_VALUE;
}
}

protected final void initHLWT(String s) {
if (!s.trim().isEmpty()) {
HLWT = Byte.parseByte(s);
} else {
HLWT = Byte.MIN_VALUE;
}
}

protected final void initHLWTE(String s) {
if (!s.trim().isEmpty()) {
HLWTE = Byte.parseByte(s);
} else {
HLWTE = Byte.MIN_VALUE;
}
}

protected final void initHLWTK(String s) {
if (!s.trim().isEmpty()) {
HLWTK = Short.parseShort(s);
} else {
HLWTK = Short.MIN_VALUE;
}
}

protected final void initHLWTL(String s) {
if (!s.trim().isEmpty()) {
HLWTL = Byte.parseByte(s);
} else {
HLWTL = Byte.MIN_VALUE;
}
}

protected final void initHLWTP(String s) {
if (!s.trim().isEmpty()) {
HLWTP = Byte.parseByte(s);
} else {
HLWTP = Byte.MIN_VALUE;
}
}

protected final void initHLWTS(String s) {
if (!s.trim().isEmpty()) {
HLWTS = Byte.parseByte(s);
} else {
HLWTS = Byte.MIN_VALUE;
}
}

protected final void initHOWLNG(String s) {
if (!s.trim().isEmpty()) {
HOWLNG = Short.parseShort(s);
} else {
HOWLNG = Short.MIN_VALUE;
}
}

protected final void initHRPID(String s) {
if (!s.trim().isEmpty()) {
HRPID = Integer.parseInt(s);
} else {
HRPID = Integer.MIN_VALUE;
}
}

protected final void initHRPNO(String s) {
if (!s.trim().isEmpty()) {
HRPNO = Byte.parseByte(s);
} else {
HRPNO = Byte.MIN_VALUE;
}
}

protected final void initIENDDATMM(String s) {
if (!s.trim().isEmpty()) {
IENDDATMM = Byte.parseByte(s);
} else {
IENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATSS(String s) {
if (!s.trim().isEmpty()) {
IENDDATSS = Byte.parseByte(s);
} else {
IENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT1(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT1 = Byte.parseByte(s);
} else {
IMPEVENT1 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT1S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT1S = Byte.parseByte(s);
} else {
IMPEVENT1S = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT2(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT2 = Byte.parseByte(s);
} else {
IMPEVENT2 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT2S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT2S = Byte.parseByte(s);
} else {
IMPEVENT2S = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT3(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT3 = Byte.parseByte(s);
} else {
IMPEVENT3 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT3S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT3S = Byte.parseByte(s);
} else {
IMPEVENT3S = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT4(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT4 = Byte.parseByte(s);
} else {
IMPEVENT4 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT4S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT4S = Byte.parseByte(s);
} else {
IMPEVENT4S = Byte.MIN_VALUE;
}
}

protected final void initIND5MUS_XW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_XW = Double.parseDouble(s);
} else {
IND5MUS_XW = Double.NaN;
}
}

protected final void initINDINUS_XW(String s) {
if (!s.trim().isEmpty()) {
INDINUS_XW = Double.parseDouble(s);
} else {
INDINUS_XW = Double.NaN;
}
}

protected final void initINDPXUS_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXUS_XW = Double.parseDouble(s);
} else {
INDPXUS_XW = Double.NaN;
}
}

protected final void initINDSCUS_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCUS_XW = Double.parseDouble(s);
} else {
INDSCUS_XW = Double.NaN;
}
}

protected final void initINITIAL_TM(String s) {
if (!s.trim().isEmpty()) {
INITIAL_TM = Integer.parseInt(s);
} else {
INITIAL_TM = Integer.MIN_VALUE;
}
}

protected final void initINSULTEDW11(String s) {
if (!s.trim().isEmpty()) {
INSULTEDW11 = Byte.parseByte(s);
} else {
INSULTEDW11 = Byte.MIN_VALUE;
}
}

protected final void initINSULTEDW12(String s) {
if (!s.trim().isEmpty()) {
INSULTEDW12 = Byte.parseByte(s);
} else {
INSULTEDW12 = Byte.MIN_VALUE;
}
}

protected final void initINSULTEDW13(String s) {
if (!s.trim().isEmpty()) {
INSULTEDW13 = Byte.parseByte(s);
} else {
INSULTEDW13 = Byte.MIN_VALUE;
}
}

protected final void initINSULTEDW14(String s) {
if (!s.trim().isEmpty()) {
INSULTEDW14 = Byte.parseByte(s);
} else {
INSULTEDW14 = Byte.MIN_VALUE;
}
}

protected final void initINSULTEDW15(String s) {
if (!s.trim().isEmpty()) {
INSULTEDW15 = Byte.parseByte(s);
} else {
INSULTEDW15 = Byte.MIN_VALUE;
}
}

protected final void initINSULTEDW16(String s) {
if (!s.trim().isEmpty()) {
INSULTEDW16 = Byte.parseByte(s);
} else {
INSULTEDW16 = Byte.MIN_VALUE;
}
}

protected final void initINSULTEDW17(String s) {
if (!s.trim().isEmpty()) {
INSULTEDW17 = Byte.parseByte(s);
} else {
INSULTEDW17 = Byte.MIN_VALUE;
}
}

protected final void initINSULTEDW196(String s) {
if (!s.trim().isEmpty()) {
INSULTEDW196 = Byte.parseByte(s);
} else {
INSULTEDW196 = Byte.MIN_VALUE;
}
}

protected final void initINSULTEDW197(String s) {
if (!s.trim().isEmpty()) {
INSULTEDW197 = Byte.parseByte(s);
} else {
INSULTEDW197 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED_DV(String s) {
if (!s.trim().isEmpty()) {
INSULTED_DV = Byte.parseByte(s);
} else {
INSULTED_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATD_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATD_DV = Byte.parseByte(s);
} else {
INTDATD_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATM_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATM_DV = Byte.parseByte(s);
} else {
INTDATM_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATY_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATY_DV = Short.parseShort(s);
} else {
INTDATY_DV = Short.MIN_VALUE;
}
}

protected final void initIOUTCOME(String s) {
if (!s.trim().isEmpty()) {
IOUTCOME = Byte.parseByte(s);
} else {
IOUTCOME = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATMM = Byte.parseByte(s);
} else {
ISTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATSS = Byte.parseByte(s);
} else {
ISTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initIVAFFCT11(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT11 = Byte.parseByte(s);
} else {
IVAFFCT11 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT12(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT12 = Byte.parseByte(s);
} else {
IVAFFCT12 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT13(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT13 = Byte.parseByte(s);
} else {
IVAFFCT13 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT14(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT14 = Byte.parseByte(s);
} else {
IVAFFCT14 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT15(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT15 = Byte.parseByte(s);
} else {
IVAFFCT15 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT17(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT17 = Byte.parseByte(s);
} else {
IVAFFCT17 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT21(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT21 = Byte.parseByte(s);
} else {
IVAFFCT21 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT22(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT22 = Byte.parseByte(s);
} else {
IVAFFCT22 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT23(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT23 = Byte.parseByte(s);
} else {
IVAFFCT23 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT27(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT27 = Byte.parseByte(s);
} else {
IVAFFCT27 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT30(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT30 = Byte.parseByte(s);
} else {
IVAFFCT30 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT97(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT97 = Byte.parseByte(s);
} else {
IVAFFCT97 = Byte.MIN_VALUE;
}
}

protected final void initIVCOOP(String s) {
if (!s.trim().isEmpty()) {
IVCOOP = Byte.parseByte(s);
} else {
IVCOOP = Byte.MIN_VALUE;
}
}

protected final void initIVINFNCE(String s) {
if (!s.trim().isEmpty()) {
IVINFNCE = Byte.parseByte(s);
} else {
IVINFNCE = Byte.MIN_VALUE;
}
}

protected final void initIVINTLANG(String s) {
if (!s.trim().isEmpty()) {
IVINTLANG = Byte.parseByte(s);
} else {
IVINTLANG = Byte.MIN_VALUE;
}
}

protected final void initIVTRANS(String s) {
if (!s.trim().isEmpty()) {
IVTRANS = Byte.parseByte(s);
} else {
IVTRANS = Byte.MIN_VALUE;
}
}

protected final void initIVWHOINT(String s) {
if (!s.trim().isEmpty()) {
IVWHOINT = Byte.parseByte(s);
} else {
IVWHOINT = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC5_DV = Byte.parseByte(s);
} else {
J1NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC00_CC = Short.parseShort(s);
} else {
J1SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC10_CC = Short.parseShort(s);
} else {
J1SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC90_CC = Byte.parseByte(s);
} else {
J1SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJ2PAY(String s) {
if (!s.trim().isEmpty()) {
J2PAY = Integer.parseInt(s);
} else {
J2PAY = Integer.MIN_VALUE;
}
}

protected final void initJ2PAYNET_DV(String s) {
if (!s.trim().isEmpty()) {
J2PAYNET_DV = Double.parseDouble(s);
} else {
J2PAYNET_DV = Double.NaN;
}
}

protected final void initJBES2000(String s) {
if (!s.trim().isEmpty()) {
JBES2000 = Byte.parseByte(s);
} else {
JBES2000 = Byte.MIN_VALUE;
}
}

protected final void initJBIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JBIINDB_DV = Byte.parseByte(s);
} else {
JBIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC3_DV = Byte.parseByte(s);
} else {
JBNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC5_DV = Byte.parseByte(s);
} else {
JBNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC_DV = Short.parseShort(s);
} else {
JBNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJBOFFY(String s) {
if (!s.trim().isEmpty()) {
JBOFFY = Byte.parseByte(s);
} else {
JBOFFY = Byte.MIN_VALUE;
}
}

protected final void initJBPEN(String s) {
if (!s.trim().isEmpty()) {
JBPEN = Short.parseShort(s);
} else {
JBPEN = Short.MIN_VALUE;
}
}

protected final void initJBPENM(String s) {
if (!s.trim().isEmpty()) {
JBPENM = Short.parseShort(s);
} else {
JBPENM = Short.MIN_VALUE;
}
}

protected final void initJBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JBRGSC_DV = Short.parseShort(s);
} else {
JBRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJBSAT(String s) {
if (!s.trim().isEmpty()) {
JBSAT = Byte.parseByte(s);
} else {
JBSAT = Byte.MIN_VALUE;
}
}

protected final void initJBSECTPUB(String s) {
if (!s.trim().isEmpty()) {
JBSECTPUB = Byte.parseByte(s);
} else {
JBSECTPUB = Byte.MIN_VALUE;
}
}

protected final void initJBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JBSEG_DV = Short.parseShort(s);
} else {
JBSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJBSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JBSIC07_CC = Byte.parseByte(s);
} else {
JBSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC00_CC = Short.parseShort(s);
} else {
JBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOCGR_DV(String s) {
if (!s.trim().isEmpty()) {
JBSOCGR_DV = Byte.parseByte(s);
} else {
JBSOCGR_DV = Byte.MIN_VALUE;
}
}

protected final void initJBTERM1(String s) {
if (!s.trim().isEmpty()) {
JBTERM1 = Byte.parseByte(s);
} else {
JBTERM1 = Byte.MIN_VALUE;
}
}

protected final void initJBTERM2(String s) {
if (!s.trim().isEmpty()) {
JBTERM2 = Byte.parseByte(s);
} else {
JBTERM2 = Byte.MIN_VALUE;
}
}

protected final void initJLENDM(String s) {
if (!s.trim().isEmpty()) {
JLENDM = Byte.parseByte(s);
} else {
JLENDM = Byte.MIN_VALUE;
}
}

protected final void initJLES2000(String s) {
if (!s.trim().isEmpty()) {
JLES2000 = Byte.parseByte(s);
} else {
JLES2000 = Byte.MIN_VALUE;
}
}

protected final void initJLIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JLIINDB_DV = Byte.parseByte(s);
} else {
JLIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC3_DV = Byte.parseByte(s);
} else {
JLNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC5_DV = Byte.parseByte(s);
} else {
JLNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC_DV = Short.parseShort(s);
} else {
JLNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JLRGSC_DV = Short.parseShort(s);
} else {
JLRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JLSEG_DV = Short.parseShort(s);
} else {
JLSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJLSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JLSIC07_CC = Byte.parseByte(s);
} else {
JLSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJLSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC00_CC = Short.parseShort(s);
} else {
JLSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJOBDENY(String s) {
if (!s.trim().isEmpty()) {
JOBDENY = Byte.parseByte(s);
} else {
JOBDENY = Byte.MIN_VALUE;
}
}

protected final void initJOBLOOK(String s) {
if (!s.trim().isEmpty()) {
JOBLOOK = Byte.parseByte(s);
} else {
JOBLOOK = Byte.MIN_VALUE;
}
}

protected final void initJOB_TM(String s) {
if (!s.trim().isEmpty()) {
JOB_TM = Integer.parseInt(s);
} else {
JOB_TM = Integer.MIN_VALUE;
}
}

protected final void initJSPART(String s) {
if (!s.trim().isEmpty()) {
JSPART = Byte.parseByte(s);
} else {
JSPART = Byte.MIN_VALUE;
}
}

protected final void initJSPAYU(String s) {
if (!s.trim().isEmpty()) {
JSPAYU = Integer.parseInt(s);
} else {
JSPAYU = Integer.MIN_VALUE;
}
}

protected final void initJSPAYW(String s) {
if (!s.trim().isEmpty()) {
JSPAYW = Byte.parseByte(s);
} else {
JSPAYW = Byte.MIN_VALUE;
}
}

protected final void initJSPRLS(String s) {
if (!s.trim().isEmpty()) {
JSPRLS = Byte.parseByte(s);
} else {
JSPRLS = Byte.MIN_VALUE;
}
}

protected final void initJSPRNI(String s) {
if (!s.trim().isEmpty()) {
JSPRNI = Byte.parseByte(s);
} else {
JSPRNI = Byte.MIN_VALUE;
}
}

protected final void initJSPRTX(String s) {
if (!s.trim().isEmpty()) {
JSPRTX = Byte.parseByte(s);
} else {
JSPRTX = Byte.MIN_VALUE;
}
}

protected final void initJSPYNI(String s) {
if (!s.trim().isEmpty()) {
JSPYNI = Byte.parseByte(s);
} else {
JSPYNI = Byte.MIN_VALUE;
}
}

protected final void initJSPYTX(String s) {
if (!s.trim().isEmpty()) {
JSPYTX = Byte.parseByte(s);
} else {
JSPYTX = Byte.MIN_VALUE;
}
}

protected final void initJSTYPEB(String s) {
if (!s.trim().isEmpty()) {
JSTYPEB = Byte.parseByte(s);
} else {
JSTYPEB = Byte.MIN_VALUE;
}
}

protected final void initJSWORKDIS(String s) {
if (!s.trim().isEmpty()) {
JSWORKDIS = Short.parseShort(s);
} else {
JSWORKDIS = Short.MIN_VALUE;
}
}

protected final void initJSWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
JSWORKTRAV = Byte.parseByte(s);
} else {
JSWORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initJUBGN(String s) {
if (!s.trim().isEmpty()) {
JUBGN = Short.parseShort(s);
} else {
JUBGN = Short.MIN_VALUE;
}
}

protected final void initJULK4X1(String s) {
if (!s.trim().isEmpty()) {
JULK4X1 = Short.parseShort(s);
} else {
JULK4X1 = Short.MIN_VALUE;
}
}

protected final void initJULK4X2(String s) {
if (!s.trim().isEmpty()) {
JULK4X2 = Short.parseShort(s);
} else {
JULK4X2 = Short.MIN_VALUE;
}
}

protected final void initJULK4X3(String s) {
if (!s.trim().isEmpty()) {
JULK4X3 = Byte.parseByte(s);
} else {
JULK4X3 = Byte.MIN_VALUE;
}
}

protected final void initJULK4X4(String s) {
if (!s.trim().isEmpty()) {
JULK4X4 = Short.parseShort(s);
} else {
JULK4X4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X5(String s) {
if (!s.trim().isEmpty()) {
JULK4X5 = Short.parseShort(s);
} else {
JULK4X5 = Short.MIN_VALUE;
}
}

protected final void initJULK4X6(String s) {
if (!s.trim().isEmpty()) {
JULK4X6 = Short.parseShort(s);
} else {
JULK4X6 = Short.MIN_VALUE;
}
}

protected final void initJULK4X96(String s) {
if (!s.trim().isEmpty()) {
JULK4X96 = Byte.parseByte(s);
} else {
JULK4X96 = Byte.MIN_VALUE;
}
}

protected final void initK2UCPN1(String s) {
if (!s.trim().isEmpty()) {
K2UCPN1 = Byte.parseByte(s);
} else {
K2UCPN1 = Byte.MIN_VALUE;
}
}

protected final void initK2UCPN2(String s) {
if (!s.trim().isEmpty()) {
K2UCPN2 = Byte.parseByte(s);
} else {
K2UCPN2 = Byte.MIN_VALUE;
}
}

protected final void initK2UCPN3(String s) {
if (!s.trim().isEmpty()) {
K2UCPN3 = Byte.parseByte(s);
} else {
K2UCPN3 = Byte.MIN_VALUE;
}
}

protected final void initK2UCPN4(String s) {
if (!s.trim().isEmpty()) {
K2UCPN4 = Byte.parseByte(s);
} else {
K2UCPN4 = Byte.MIN_VALUE;
}
}

protected final void initK2UCPN5(String s) {
if (!s.trim().isEmpty()) {
K2UCPN5 = Byte.parseByte(s);
} else {
K2UCPN5 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI1(String s) {
if (!s.trim().isEmpty()) {
KID2UNI1 = Byte.parseByte(s);
} else {
KID2UNI1 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI2(String s) {
if (!s.trim().isEmpty()) {
KID2UNI2 = Byte.parseByte(s);
} else {
KID2UNI2 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI3(String s) {
if (!s.trim().isEmpty()) {
KID2UNI3 = Byte.parseByte(s);
} else {
KID2UNI3 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI4(String s) {
if (!s.trim().isEmpty()) {
KID2UNI4 = Byte.parseByte(s);
} else {
KID2UNI4 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI5(String s) {
if (!s.trim().isEmpty()) {
KID2UNI5 = Byte.parseByte(s);
} else {
KID2UNI5 = Byte.MIN_VALUE;
}
}

protected final void initKIDSPT(String s) {
if (!s.trim().isEmpty()) {
KIDSPT = Byte.parseByte(s);
} else {
KIDSPT = Byte.MIN_VALUE;
}
}

protected final void initLADOPT(String s) {
if (!s.trim().isEmpty()) {
LADOPT = Byte.parseByte(s);
} else {
LADOPT = Byte.MIN_VALUE;
}
}

protected final void initLCHMOR(String s) {
if (!s.trim().isEmpty()) {
LCHMOR = Byte.parseByte(s);
} else {
LCHMOR = Byte.MIN_VALUE;
}
}

protected final void initLCHMORN(String s) {
if (!s.trim().isEmpty()) {
LCHMORN = Byte.parseByte(s);
} else {
LCHMORN = Byte.MIN_VALUE;
}
}

protected final void initLCMARM(String s) {
if (!s.trim().isEmpty()) {
LCMARM = Byte.parseByte(s);
} else {
LCMARM = Byte.MIN_VALUE;
}
}

protected final void initLCMARY4(String s) {
if (!s.trim().isEmpty()) {
LCMARY4 = Short.parseShort(s);
} else {
LCMARY4 = Short.MIN_VALUE;
}
}

protected final void initLCMCBM(String s) {
if (!s.trim().isEmpty()) {
LCMCBM = Byte.parseByte(s);
} else {
LCMCBM = Byte.MIN_VALUE;
}
}

protected final void initLCMCBY4(String s) {
if (!s.trim().isEmpty()) {
LCMCBY4 = Short.parseShort(s);
} else {
LCMCBY4 = Short.MIN_VALUE;
}
}

protected final void initLCMCOH(String s) {
if (!s.trim().isEmpty()) {
LCMCOH = Byte.parseByte(s);
} else {
LCMCOH = Byte.MIN_VALUE;
}
}

protected final void initLCMSPM(String s) {
if (!s.trim().isEmpty()) {
LCMSPM = Byte.parseByte(s);
} else {
LCMSPM = Byte.MIN_VALUE;
}
}

protected final void initLCMSPY4(String s) {
if (!s.trim().isEmpty()) {
LCMSPY4 = Short.parseShort(s);
} else {
LCMSPY4 = Short.MIN_VALUE;
}
}

protected final void initLCOH(String s) {
if (!s.trim().isEmpty()) {
LCOH = Byte.parseByte(s);
} else {
LCOH = Byte.MIN_VALUE;
}
}

protected final void initLDA(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
LDA = false;
} else {
LDA = true;
}
}
}

protected final void initLDAFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
LDAFLAG = false;
} else {
LDAFLAG = true;
}
}
}

protected final void initLENINDINTV(String s) {
if (!s.trim().isEmpty()) {
LENINDINTV = Double.parseDouble(s);
} else {
LENINDINTV = Double.NaN;
}
}

protected final void initLEVELIMP(String s) {
if (!s.trim().isEmpty()) {
LEVELIMP = Byte.parseByte(s);
} else {
LEVELIMP = Byte.MIN_VALUE;
}
}

protected final void initLGAPED(String s) {
if (!s.trim().isEmpty()) {
LGAPED = Byte.parseByte(s);
} else {
LGAPED = Byte.MIN_VALUE;
}
}

protected final void initLINGUA(String s) {
if (!s.trim().isEmpty()) {
LINGUA = Byte.parseByte(s);
} else {
LINGUA = Byte.MIN_VALUE;
}
}

protected final void initLIVESP(String s) {
if (!s.trim().isEmpty()) {
LIVESP = Byte.parseByte(s);
} else {
LIVESP = Byte.MIN_VALUE;
}
}

protected final void initLIVESP_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
LIVESP_DV = false;
} else {
LIVESP_DV = true;
}
}
}

protected final void initLIVEWITH(String s) {
if (!s.trim().isEmpty()) {
LIVEWITH = Byte.parseByte(s);
} else {
LIVEWITH = Byte.MIN_VALUE;
}
}

protected final void initLNADOPT(String s) {
if (!s.trim().isEmpty()) {
LNADOPT = Byte.parseByte(s);
} else {
LNADOPT = Byte.MIN_VALUE;
}
}

protected final void initLNCOH(String s) {
if (!s.trim().isEmpty()) {
LNCOH = Byte.parseByte(s);
} else {
LNCOH = Byte.MIN_VALUE;
}
}

protected final void initLNPRNT(String s) {
if (!s.trim().isEmpty()) {
LNPRNT = Byte.parseByte(s);
} else {
LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initLPRNT(String s) {
if (!s.trim().isEmpty()) {
LPRNT = Byte.parseByte(s);
} else {
LPRNT = Byte.MIN_VALUE;
}
}

protected final void initLVAG14(String s) {
if (!s.trim().isEmpty()) {
LVAG14 = Byte.parseByte(s);
} else {
LVAG14 = Byte.MIN_VALUE;
}
}

protected final void initLVAG16(String s) {
if (!s.trim().isEmpty()) {
LVAG16 = Byte.parseByte(s);
} else {
LVAG16 = Byte.MIN_VALUE;
}
}

protected final void initLVREL1(String s) {
if (!s.trim().isEmpty()) {
LVREL1 = Byte.parseByte(s);
} else {
LVREL1 = Byte.MIN_VALUE;
}
}

protected final void initLVREL2(String s) {
if (!s.trim().isEmpty()) {
LVREL2 = Byte.parseByte(s);
} else {
LVREL2 = Byte.MIN_VALUE;
}
}

protected final void initLVREL3(String s) {
if (!s.trim().isEmpty()) {
LVREL3 = Byte.parseByte(s);
} else {
LVREL3 = Byte.MIN_VALUE;
}
}

protected final void initLVREL4(String s) {
if (!s.trim().isEmpty()) {
LVREL4 = Byte.parseByte(s);
} else {
LVREL4 = Byte.MIN_VALUE;
}
}

protected final void initLVREL5(String s) {
if (!s.trim().isEmpty()) {
LVREL5 = Byte.parseByte(s);
} else {
LVREL5 = Byte.MIN_VALUE;
}
}

protected final void initLVREL6(String s) {
if (!s.trim().isEmpty()) {
LVREL6 = Byte.parseByte(s);
} else {
LVREL6 = Byte.MIN_VALUE;
}
}

protected final void initLVREL7(String s) {
if (!s.trim().isEmpty()) {
LVREL7 = Byte.parseByte(s);
} else {
LVREL7 = Byte.MIN_VALUE;
}
}

protected final void initLVREL8(String s) {
if (!s.trim().isEmpty()) {
LVREL8 = Byte.parseByte(s);
} else {
LVREL8 = Byte.MIN_VALUE;
}
}

protected final void initLVREL96(String s) {
if (!s.trim().isEmpty()) {
LVREL96 = Byte.parseByte(s);
} else {
LVREL96 = Byte.MIN_VALUE;
}
}

protected final void initMAAGE(String s) {
if (!s.trim().isEmpty()) {
MAAGE = Byte.parseByte(s);
} else {
MAAGE = Byte.MIN_VALUE;
}
}

protected final void initMABROAD(String s) {
if (!s.trim().isEmpty()) {
MABROAD = Byte.parseByte(s);
} else {
MABROAD = Byte.MIN_VALUE;
}
}

protected final void initMACOB(String s) {
if (!s.trim().isEmpty()) {
MACOB = Byte.parseByte(s);
} else {
MACOB = Byte.MIN_VALUE;
}
}

protected final void initMACON(String s) {
if (!s.trim().isEmpty()) {
MACON = Byte.parseByte(s);
} else {
MACON = Byte.MIN_VALUE;
}
}

protected final void initMAEDQF(String s) {
if (!s.trim().isEmpty()) {
MAEDQF = Byte.parseByte(s);
} else {
MAEDQF = Byte.MIN_VALUE;
}
}

protected final void initMAFAR(String s) {
if (!s.trim().isEmpty()) {
MAFAR = Byte.parseByte(s);
} else {
MAFAR = Byte.MIN_VALUE;
}
}

protected final void initMAID(String s) {
if (!s.trim().isEmpty()) {
MAID = Byte.parseByte(s);
} else {
MAID = Byte.MIN_VALUE;
}
}

protected final void initMAINTALIM(String s) {
if (!s.trim().isEmpty()) {
MAINTALIM = Byte.parseByte(s);
} else {
MAINTALIM = Byte.MIN_VALUE;
}
}

protected final void initMAJU(String s) {
if (!s.trim().isEmpty()) {
MAJU = Byte.parseByte(s);
} else {
MAJU = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC5_DV = Byte.parseByte(s);
} else {
MANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initMARSTAT(String s) {
if (!s.trim().isEmpty()) {
MARSTAT = Byte.parseByte(s);
} else {
MARSTAT = Byte.MIN_VALUE;
}
}

protected final void initMASEE(String s) {
if (!s.trim().isEmpty()) {
MASEE = Byte.parseByte(s);
} else {
MASEE = Byte.MIN_VALUE;
}
}

protected final void initMASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC00_CC = Short.parseShort(s);
} else {
MASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC10_CC = Short.parseShort(s);
} else {
MASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC90_CC = Byte.parseByte(s);
} else {
MASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMASTAT_DV(String s) {
if (!s.trim().isEmpty()) {
MASTAT_DV = Byte.parseByte(s);
} else {
MASTAT_DV = Byte.MIN_VALUE;
}
}

protected final void initMAYRUK(String s) {
if (!s.trim().isEmpty()) {
MAYRUK = Byte.parseByte(s);
} else {
MAYRUK = Byte.MIN_VALUE;
}
}

protected final void initMAYRUK1(String s) {
if (!s.trim().isEmpty()) {
MAYRUK1 = Short.parseShort(s);
} else {
MAYRUK1 = Short.MIN_VALUE;
}
}

protected final void initMGMROB(String s) {
if (!s.trim().isEmpty()) {
MGMROB = Byte.parseByte(s);
} else {
MGMROB = Byte.MIN_VALUE;
}
}

protected final void initMGPROB(String s) {
if (!s.trim().isEmpty()) {
MGPROB = Byte.parseByte(s);
} else {
MGPROB = Byte.MIN_VALUE;
}
}

protected final void initMIGRATION_TM(String s) {
if (!s.trim().isEmpty()) {
MIGRATION_TM = Integer.parseInt(s);
} else {
MIGRATION_TM = Integer.MIN_VALUE;
}
}

protected final void initMINDIRECT(String s) {
if (!s.trim().isEmpty()) {
MINDIRECT = Byte.parseByte(s);
} else {
MINDIRECT = Byte.MIN_VALUE;
}
}

protected final void initMLIVED(String s) {
if (!s.trim().isEmpty()) {
MLIVED = Byte.parseByte(s);
} else {
MLIVED = Byte.MIN_VALUE;
}
}

protected final void initMLIVEDIST(String s) {
if (!s.trim().isEmpty()) {
MLIVEDIST = Byte.parseByte(s);
} else {
MLIVEDIST = Byte.MIN_VALUE;
}
}

protected final void initMLIVEDIST5(String s) {
if (!s.trim().isEmpty()) {
MLIVEDIST5 = Byte.parseByte(s);
} else {
MLIVEDIST5 = Byte.MIN_VALUE;
}
}

protected final void initMLIVEDISTF(String s) {
if (!s.trim().isEmpty()) {
MLIVEDISTF = Byte.parseByte(s);
} else {
MLIVEDISTF = Byte.MIN_VALUE;
}
}

protected final void initMLSTATCHK(String s) {
if (!s.trim().isEmpty()) {
MLSTATCHK = Byte.parseByte(s);
} else {
MLSTATCHK = Byte.MIN_VALUE;
}
}

protected final void initMNABROAD(String s) {
if (!s.trim().isEmpty()) {
MNABROAD = Byte.parseByte(s);
} else {
MNABROAD = Byte.MIN_VALUE;
}
}

protected final void initMNLIVED(String s) {
if (!s.trim().isEmpty()) {
MNLIVED = Byte.parseByte(s);
} else {
MNLIVED = Byte.MIN_VALUE;
}
}

protected final void initMNMOVES(String s) {
if (!s.trim().isEmpty()) {
MNMOVES = Byte.parseByte(s);
} else {
MNMOVES = Byte.MIN_VALUE;
}
}

protected final void initMNOTHERC(String s) {
if (!s.trim().isEmpty()) {
MNOTHERC = Byte.parseByte(s);
} else {
MNOTHERC = Byte.MIN_VALUE;
}
}

protected final void initMNPID(String s) {
if (!s.trim().isEmpty()) {
MNPID = Integer.parseInt(s);
} else {
MNPID = Integer.MIN_VALUE;
}
}

protected final void initMNPNO(String s) {
if (!s.trim().isEmpty()) {
MNPNO = Byte.parseByte(s);
} else {
MNPNO = Byte.MIN_VALUE;
}
}

protected final void initMNSPID(String s) {
if (!s.trim().isEmpty()) {
MNSPID = Integer.parseInt(s);
} else {
MNSPID = Integer.MIN_VALUE;
}
}

protected final void initMNSPNO(String s) {
if (!s.trim().isEmpty()) {
MNSPNO = Byte.parseByte(s);
} else {
MNSPNO = Byte.MIN_VALUE;
}
}

protected final void initMOBUSE(String s) {
if (!s.trim().isEmpty()) {
MOBUSE = Byte.parseByte(s);
} else {
MOBUSE = Byte.MIN_VALUE;
}
}

protected final void initMONTH(String s) {
if (!s.trim().isEmpty()) {
MONTH = Byte.parseByte(s);
} else {
MONTH = Byte.MIN_VALUE;
}
}

protected final void initMOVEAGE(String s) {
if (!s.trim().isEmpty()) {
MOVEAGE = Byte.parseByte(s);
} else {
MOVEAGE = Byte.MIN_VALUE;
}
}

protected final void initMPNO(String s) {
if (!s.trim().isEmpty()) {
MPNO = Byte.parseByte(s);
} else {
MPNO = Byte.MIN_VALUE;
}
}

protected final void initMRETURNED(String s) {
if (!s.trim().isEmpty()) {
MRETURNED = Byte.parseByte(s);
} else {
MRETURNED = Byte.MIN_VALUE;
}
}

protected final void initMVEVER(String s) {
if (!s.trim().isEmpty()) {
MVEVER = Byte.parseByte(s);
} else {
MVEVER = Byte.MIN_VALUE;
}
}

protected final void initMVMNTH(String s) {
if (!s.trim().isEmpty()) {
MVMNTH = Byte.parseByte(s);
} else {
MVMNTH = Byte.MIN_VALUE;
}
}

protected final void initMVYR(String s) {
if (!s.trim().isEmpty()) {
MVYR = Short.parseShort(s);
} else {
MVYR = Short.MIN_VALUE;
}
}

protected final void initNADOPTCH(String s) {
if (!s.trim().isEmpty()) {
NADOPTCH = Byte.parseByte(s);
} else {
NADOPTCH = Byte.MIN_VALUE;
}
}

protected final void initNAIDXHH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH = Byte.parseByte(s);
} else {
NAIDXHH = Byte.MIN_VALUE;
}
}

protected final void initNATCH01(String s) {
if (!s.trim().isEmpty()) {
NATCH01 = Byte.parseByte(s);
} else {
NATCH01 = Byte.MIN_VALUE;
}
}

protected final void initNATCH02(String s) {
if (!s.trim().isEmpty()) {
NATCH02 = Byte.parseByte(s);
} else {
NATCH02 = Byte.MIN_VALUE;
}
}

protected final void initNATCH03(String s) {
if (!s.trim().isEmpty()) {
NATCH03 = Byte.parseByte(s);
} else {
NATCH03 = Byte.MIN_VALUE;
}
}

protected final void initNATCH04(String s) {
if (!s.trim().isEmpty()) {
NATCH04 = Byte.parseByte(s);
} else {
NATCH04 = Byte.MIN_VALUE;
}
}

protected final void initNATCH05(String s) {
if (!s.trim().isEmpty()) {
NATCH05 = Byte.parseByte(s);
} else {
NATCH05 = Byte.MIN_VALUE;
}
}

protected final void initNATCH06(String s) {
if (!s.trim().isEmpty()) {
NATCH06 = Byte.parseByte(s);
} else {
NATCH06 = Byte.MIN_VALUE;
}
}

protected final void initNATCH07(String s) {
if (!s.trim().isEmpty()) {
NATCH07 = Byte.parseByte(s);
} else {
NATCH07 = Byte.MIN_VALUE;
}
}

protected final void initNATCH08(String s) {
if (!s.trim().isEmpty()) {
NATCH08 = Byte.parseByte(s);
} else {
NATCH08 = Byte.MIN_VALUE;
}
}

protected final void initNATCH09(String s) {
if (!s.trim().isEmpty()) {
NATCH09 = Byte.parseByte(s);
} else {
NATCH09 = Byte.MIN_VALUE;
}
}

protected final void initNATCH10(String s) {
if (!s.trim().isEmpty()) {
NATCH10 = Byte.parseByte(s);
} else {
NATCH10 = Byte.MIN_VALUE;
}
}

protected final void initNATCH11(String s) {
if (!s.trim().isEmpty()) {
NATCH11 = Byte.parseByte(s);
} else {
NATCH11 = Byte.MIN_VALUE;
}
}

protected final void initNATCH12(String s) {
if (!s.trim().isEmpty()) {
NATCH12 = Byte.parseByte(s);
} else {
NATCH12 = Byte.MIN_VALUE;
}
}

protected final void initNATCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH13 = false;
} else {
NATCH13 = true;
}
}
}

protected final void initNATCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH14 = false;
} else {
NATCH14 = true;
}
}
}

protected final void initNATCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH15 = false;
} else {
NATCH15 = true;
}
}
}

protected final void initNATCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH16 = false;
} else {
NATCH16 = true;
}
}
}

protected final void initNATID1(String s) {
if (!s.trim().isEmpty()) {
NATID1 = Byte.parseByte(s);
} else {
NATID1 = Byte.MIN_VALUE;
}
}

protected final void initNATID2(String s) {
if (!s.trim().isEmpty()) {
NATID2 = Byte.parseByte(s);
} else {
NATID2 = Byte.MIN_VALUE;
}
}

protected final void initNATID3(String s) {
if (!s.trim().isEmpty()) {
NATID3 = Byte.parseByte(s);
} else {
NATID3 = Byte.MIN_VALUE;
}
}

protected final void initNATID4(String s) {
if (!s.trim().isEmpty()) {
NATID4 = Byte.parseByte(s);
} else {
NATID4 = Byte.MIN_VALUE;
}
}

protected final void initNATID5(String s) {
if (!s.trim().isEmpty()) {
NATID5 = Byte.parseByte(s);
} else {
NATID5 = Byte.MIN_VALUE;
}
}

protected final void initNATID6(String s) {
if (!s.trim().isEmpty()) {
NATID6 = Byte.parseByte(s);
} else {
NATID6 = Byte.MIN_VALUE;
}
}

protected final void initNATID97(String s) {
if (!s.trim().isEmpty()) {
NATID97 = Byte.parseByte(s);
} else {
NATID97 = Byte.MIN_VALUE;
}
}

protected final void initNBRSNCI_DV(String s) {
if (!s.trim().isEmpty()) {
NBRSNCI_DV = Double.parseDouble(s);
} else {
NBRSNCI_DV = Double.NaN;
}
}

protected final void initNCH10TO15(String s) {
if (!s.trim().isEmpty()) {
NCH10TO15 = Byte.parseByte(s);
} else {
NCH10TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH14RESP(String s) {
if (!s.trim().isEmpty()) {
NCH14RESP = Byte.parseByte(s);
} else {
NCH14RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH415RESP(String s) {
if (!s.trim().isEmpty()) {
NCH415RESP = Byte.parseByte(s);
} else {
NCH415RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5TO15(String s) {
if (!s.trim().isEmpty()) {
NCH5TO15 = Byte.parseByte(s);
} else {
NCH5TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHILD_DV = Short.parseShort(s);
} else {
NCHILD_DV = Short.MIN_VALUE;
}
}

protected final void initNCHRESP(String s) {
if (!s.trim().isEmpty()) {
NCHRESP = Byte.parseByte(s);
} else {
NCHRESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUND18RESP(String s) {
if (!s.trim().isEmpty()) {
NCHUND18RESP = Byte.parseByte(s);
} else {
NCHUND18RESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUNDER16(String s) {
if (!s.trim().isEmpty()) {
NCHUNDER16 = Byte.parseByte(s);
} else {
NCHUNDER16 = Byte.MIN_VALUE;
}
}

protected final void initNDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
NDEPCHL_DV = Byte.parseByte(s);
} else {
NDEPCHL_DV = Byte.MIN_VALUE;
}
}

protected final void initNETUSE(String s) {
if (!s.trim().isEmpty()) {
NETUSE = Byte.parseByte(s);
} else {
NETUSE = Byte.MIN_VALUE;
}
}

protected final void initNETWORKS_TM(String s) {
if (!s.trim().isEmpty()) {
NETWORKS_TM = Integer.parseInt(s);
} else {
NETWORKS_TM = Integer.MIN_VALUE;
}
}

protected final void initNGRP_DV(String s) {
if (!s.trim().isEmpty()) {
NGRP_DV = Byte.parseByte(s);
} else {
NGRP_DV = Byte.MIN_VALUE;
}
}

protected final void initNIACT(String s) {
if (!s.trim().isEmpty()) {
NIACT = Byte.parseByte(s);
} else {
NIACT = Byte.MIN_VALUE;
}
}

protected final void initNIREL(String s) {
if (!s.trim().isEmpty()) {
NIREL = Byte.parseByte(s);
} else {
NIREL = Byte.MIN_VALUE;
}
}

protected final void initNISERPS(String s) {
if (!s.trim().isEmpty()) {
NISERPS = Byte.parseByte(s);
} else {
NISERPS = Byte.MIN_VALUE;
}
}

protected final void initNMAR(String s) {
if (!s.trim().isEmpty()) {
NMAR = Byte.parseByte(s);
} else {
NMAR = Byte.MIN_VALUE;
}
}

protected final void initNNATCH(String s) {
if (!s.trim().isEmpty()) {
NNATCH = Byte.parseByte(s);
} else {
NNATCH = Byte.MIN_VALUE;
}
}

protected final void initNNSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSIB_DV = Byte.parseByte(s);
} else {
NNSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSSIB_DV = Byte.parseByte(s);
} else {
NNSSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNONEMP_TM(String s) {
if (!s.trim().isEmpty()) {
NONEMP_TM = Integer.parseInt(s);
} else {
NONEMP_TM = Integer.MIN_VALUE;
}
}

protected final void initNPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER_DV = Byte.parseByte(s);
} else {
NPENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initNPNS_DV(String s) {
if (!s.trim().isEmpty()) {
NPNS_DV = Byte.parseByte(s);
} else {
NPNS_DV = Byte.MIN_VALUE;
}
}

protected final void initNPN_DV(String s) {
if (!s.trim().isEmpty()) {
NPN_DV = Byte.parseByte(s);
} else {
NPN_DV = Byte.MIN_VALUE;
}
}

protected final void initNQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
NQFHIGH_DV = Byte.parseByte(s);
} else {
NQFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initNRELSW11(String s) {
if (!s.trim().isEmpty()) {
NRELSW11 = Byte.parseByte(s);
} else {
NRELSW11 = Byte.MIN_VALUE;
}
}

protected final void initNRELSW12(String s) {
if (!s.trim().isEmpty()) {
NRELSW12 = Byte.parseByte(s);
} else {
NRELSW12 = Byte.MIN_VALUE;
}
}

protected final void initNRELSW13(String s) {
if (!s.trim().isEmpty()) {
NRELSW13 = Byte.parseByte(s);
} else {
NRELSW13 = Byte.MIN_VALUE;
}
}

protected final void initNRELSW14(String s) {
if (!s.trim().isEmpty()) {
NRELSW14 = Byte.parseByte(s);
} else {
NRELSW14 = Byte.MIN_VALUE;
}
}

protected final void initNRELSW15(String s) {
if (!s.trim().isEmpty()) {
NRELSW15 = Byte.parseByte(s);
} else {
NRELSW15 = Byte.MIN_VALUE;
}
}

protected final void initNRELSW16(String s) {
if (!s.trim().isEmpty()) {
NRELSW16 = Byte.parseByte(s);
} else {
NRELSW16 = Byte.MIN_VALUE;
}
}

protected final void initOBSERVE_TM(String s) {
if (!s.trim().isEmpty()) {
OBSERVE_TM = Integer.parseInt(s);
} else {
OBSERVE_TM = Integer.MIN_VALUE;
}
}

protected final void initOHCH16(String s) {
if (!s.trim().isEmpty()) {
OHCH16 = Byte.parseByte(s);
} else {
OHCH16 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG(String s) {
if (!s.trim().isEmpty()) {
OPRLG = Byte.parseByte(s);
} else {
OPRLG = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0(String s) {
if (!s.trim().isEmpty()) {
OPRLG0 = Byte.parseByte(s);
} else {
OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
OPRLG0NI = Byte.parseByte(s);
} else {
OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initOPRLG1(String s) {
if (!s.trim().isEmpty()) {
OPRLG1 = Byte.parseByte(s);
} else {
OPRLG1 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG2(String s) {
if (!s.trim().isEmpty()) {
OPRLG2 = Byte.parseByte(s);
} else {
OPRLG2 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG3(String s) {
if (!s.trim().isEmpty()) {
OPRLG3 = Byte.parseByte(s);
} else {
OPRLG3 = Byte.MIN_VALUE;
}
}

protected final void initOVTNSA(String s) {
if (!s.trim().isEmpty()) {
OVTNSA = Byte.parseByte(s);
} else {
OVTNSA = Byte.MIN_VALUE;
}
}

protected final void initOVTPAY(String s) {
if (!s.trim().isEmpty()) {
OVTPAY = Byte.parseByte(s);
} else {
OVTPAY = Byte.MIN_VALUE;
}
}

protected final void initOVTRATE(String s) {
if (!s.trim().isEmpty()) {
OVTRATE = Double.parseDouble(s);
} else {
OVTRATE = Double.NaN;
}
}

protected final void initOVTREST(String s) {
if (!s.trim().isEmpty()) {
OVTREST = Byte.parseByte(s);
} else {
OVTREST = Byte.MIN_VALUE;
}
}

protected final void initPAAGE(String s) {
if (!s.trim().isEmpty()) {
PAAGE = Byte.parseByte(s);
} else {
PAAGE = Byte.MIN_VALUE;
}
}

protected final void initPACOB(String s) {
if (!s.trim().isEmpty()) {
PACOB = Byte.parseByte(s);
} else {
PACOB = Byte.MIN_VALUE;
}
}

protected final void initPACON(String s) {
if (!s.trim().isEmpty()) {
PACON = Byte.parseByte(s);
} else {
PACON = Byte.MIN_VALUE;
}
}

protected final void initPAEDQF(String s) {
if (!s.trim().isEmpty()) {
PAEDQF = Byte.parseByte(s);
} else {
PAEDQF = Byte.MIN_VALUE;
}
}

protected final void initPAFAR(String s) {
if (!s.trim().isEmpty()) {
PAFAR = Byte.parseByte(s);
} else {
PAFAR = Byte.MIN_VALUE;
}
}

protected final void initPAID(String s) {
if (!s.trim().isEmpty()) {
PAID = Byte.parseByte(s);
} else {
PAID = Byte.MIN_VALUE;
}
}

protected final void initPAJU(String s) {
if (!s.trim().isEmpty()) {
PAJU = Byte.parseByte(s);
} else {
PAJU = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC5_DV = Byte.parseByte(s);
} else {
PANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initPARCHILD_TM(String s) {
if (!s.trim().isEmpty()) {
PARCHILD_TM = Integer.parseInt(s);
} else {
PARCHILD_TM = Integer.MIN_VALUE;
}
}

protected final void initPARMAR(String s) {
if (!s.trim().isEmpty()) {
PARMAR = Byte.parseByte(s);
} else {
PARMAR = Byte.MIN_VALUE;
}
}

protected final void initPARTNER_TM(String s) {
if (!s.trim().isEmpty()) {
PARTNER_TM = Integer.parseInt(s);
} else {
PARTNER_TM = Integer.MIN_VALUE;
}
}

protected final void initPASEE(String s) {
if (!s.trim().isEmpty()) {
PASEE = Byte.parseByte(s);
} else {
PASEE = Byte.MIN_VALUE;
}
}

protected final void initPASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC00_CC = Short.parseShort(s);
} else {
PASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC10_CC = Short.parseShort(s);
} else {
PASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC90_CC = Byte.parseByte(s);
} else {
PASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPAYFAM(String s) {
if (!s.trim().isEmpty()) {
PAYFAM = Byte.parseByte(s);
} else {
PAYFAM = Byte.MIN_VALUE;
}
}

protected final void initPAYGWC(String s) {
if (!s.trim().isEmpty()) {
PAYGWC = Byte.parseByte(s);
} else {
PAYGWC = Byte.MIN_VALUE;
}
}

protected final void initPAYG_DV(String s) {
if (!s.trim().isEmpty()) {
PAYG_DV = Double.parseDouble(s);
} else {
PAYG_DV = Double.NaN;
}
}

protected final void initPAYNWC(String s) {
if (!s.trim().isEmpty()) {
PAYNWC = Byte.parseByte(s);
} else {
PAYNWC = Byte.MIN_VALUE;
}
}

protected final void initPAYRUK(String s) {
if (!s.trim().isEmpty()) {
PAYRUK = Byte.parseByte(s);
} else {
PAYRUK = Byte.MIN_VALUE;
}
}

protected final void initPAYRUK1(String s) {
if (!s.trim().isEmpty()) {
PAYRUK1 = Short.parseShort(s);
} else {
PAYRUK1 = Short.MIN_VALUE;
}
}

protected final void initPAYTYP(String s) {
if (!s.trim().isEmpty()) {
PAYTYP = Byte.parseByte(s);
} else {
PAYTYP = Byte.MIN_VALUE;
}
}

protected final void initPAYUWC(String s) {
if (!s.trim().isEmpty()) {
PAYUWC = Byte.parseByte(s);
} else {
PAYUWC = Byte.MIN_VALUE;
}
}

protected final void initPAYU_DV(String s) {
if (!s.trim().isEmpty()) {
PAYU_DV = Double.parseDouble(s);
} else {
PAYU_DV = Double.NaN;
}
}

protected final void initPBNFT1(String s) {
if (!s.trim().isEmpty()) {
PBNFT1 = Byte.parseByte(s);
} else {
PBNFT1 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT10(String s) {
if (!s.trim().isEmpty()) {
PBNFT10 = Byte.parseByte(s);
} else {
PBNFT10 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT11(String s) {
if (!s.trim().isEmpty()) {
PBNFT11 = Byte.parseByte(s);
} else {
PBNFT11 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT12(String s) {
if (!s.trim().isEmpty()) {
PBNFT12 = Byte.parseByte(s);
} else {
PBNFT12 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT2(String s) {
if (!s.trim().isEmpty()) {
PBNFT2 = Byte.parseByte(s);
} else {
PBNFT2 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT3(String s) {
if (!s.trim().isEmpty()) {
PBNFT3 = Byte.parseByte(s);
} else {
PBNFT3 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT4(String s) {
if (!s.trim().isEmpty()) {
PBNFT4 = Byte.parseByte(s);
} else {
PBNFT4 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT5(String s) {
if (!s.trim().isEmpty()) {
PBNFT5 = Byte.parseByte(s);
} else {
PBNFT5 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT6(String s) {
if (!s.trim().isEmpty()) {
PBNFT6 = Byte.parseByte(s);
} else {
PBNFT6 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT7(String s) {
if (!s.trim().isEmpty()) {
PBNFT7 = Byte.parseByte(s);
} else {
PBNFT7 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT8(String s) {
if (!s.trim().isEmpty()) {
PBNFT8 = Byte.parseByte(s);
} else {
PBNFT8 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT9(String s) {
if (!s.trim().isEmpty()) {
PBNFT9 = Byte.parseByte(s);
} else {
PBNFT9 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT96(String s) {
if (!s.trim().isEmpty()) {
PBNFT96 = Byte.parseByte(s);
} else {
PBNFT96 = Byte.MIN_VALUE;
}
}

protected final void initPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
PENSIONER_DV = Byte.parseByte(s);
} else {
PENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initPGMROB(String s) {
if (!s.trim().isEmpty()) {
PGMROB = Byte.parseByte(s);
} else {
PGMROB = Byte.MIN_VALUE;
}
}

protected final void initPGPROB(String s) {
if (!s.trim().isEmpty()) {
PGPROB = Byte.parseByte(s);
} else {
PGPROB = Byte.MIN_VALUE;
}
}

protected final void initPHONE_TM(String s) {
if (!s.trim().isEmpty()) {
PHONE_TM = Integer.parseInt(s);
} else {
PHONE_TM = Integer.MIN_VALUE;
}
}

protected final void initPJBPTFT(String s) {
if (!s.trim().isEmpty()) {
PJBPTFT = Byte.parseByte(s);
} else {
PJBPTFT = Byte.MIN_VALUE;
}
}

protected final void initPJSPTFT(String s) {
if (!s.trim().isEmpty()) {
PJSPTFT = Byte.parseByte(s);
} else {
PJSPTFT = Byte.MIN_VALUE;
}
}

protected final void initPN1PID(String s) {
if (!s.trim().isEmpty()) {
PN1PID = Integer.parseInt(s);
} else {
PN1PID = Integer.MIN_VALUE;
}
}

protected final void initPN1PNO(String s) {
if (!s.trim().isEmpty()) {
PN1PNO = Byte.parseByte(s);
} else {
PN1PNO = Byte.MIN_VALUE;
}
}

protected final void initPN1SEX(String s) {
if (!s.trim().isEmpty()) {
PN1SEX = Byte.parseByte(s);
} else {
PN1SEX = Byte.MIN_VALUE;
}
}

protected final void initPN2PID(String s) {
if (!s.trim().isEmpty()) {
PN2PID = Integer.parseInt(s);
} else {
PN2PID = Integer.MIN_VALUE;
}
}

protected final void initPN2PNO(String s) {
if (!s.trim().isEmpty()) {
PN2PNO = Byte.parseByte(s);
} else {
PN2PNO = Byte.MIN_VALUE;
}
}

protected final void initPN2SEX(String s) {
if (!s.trim().isEmpty()) {
PN2SEX = Byte.parseByte(s);
} else {
PN2SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS1PID(String s) {
if (!s.trim().isEmpty()) {
PNS1PID = Integer.parseInt(s);
} else {
PNS1PID = Integer.MIN_VALUE;
}
}

protected final void initPNS1PNO(String s) {
if (!s.trim().isEmpty()) {
PNS1PNO = Byte.parseByte(s);
} else {
PNS1PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS1SEX(String s) {
if (!s.trim().isEmpty()) {
PNS1SEX = Byte.parseByte(s);
} else {
PNS1SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS2PID(String s) {
if (!s.trim().isEmpty()) {
PNS2PID = Integer.parseInt(s);
} else {
PNS2PID = Integer.MIN_VALUE;
}
}

protected final void initPNS2PNO(String s) {
if (!s.trim().isEmpty()) {
PNS2PNO = Byte.parseByte(s);
} else {
PNS2PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS2SEX(String s) {
if (!s.trim().isEmpty()) {
PNS2SEX = Byte.parseByte(s);
} else {
PNS2SEX = Byte.MIN_VALUE;
}
}

protected final void initPOLITICAL_TM(String s) {
if (!s.trim().isEmpty()) {
POLITICAL_TM = Integer.parseInt(s);
} else {
POLITICAL_TM = Integer.MIN_VALUE;
}
}

protected final void initPPID(String s) {
if (!s.trim().isEmpty()) {
PPID = Integer.parseInt(s);
} else {
PPID = Integer.MIN_VALUE;
}
}

protected final void initPPSEX(String s) {
if (!s.trim().isEmpty()) {
PPSEX = Byte.parseByte(s);
} else {
PPSEX = Byte.MIN_VALUE;
}
}

protected final void initPRAISEKID(String s) {
if (!s.trim().isEmpty()) {
PRAISEKID = Byte.parseByte(s);
} else {
PRAISEKID = Byte.MIN_VALUE;
}
}

protected final void initPREARN(String s) {
if (!s.trim().isEmpty()) {
PREARN = Byte.parseByte(s);
} else {
PREARN = Byte.MIN_VALUE;
}
}

protected final void initPREARNA(String s) {
if (!s.trim().isEmpty()) {
PREARNA = Byte.parseByte(s);
} else {
PREARNA = Byte.MIN_VALUE;
}
}

protected final void initPREARNW(String s) {
if (!s.trim().isEmpty()) {
PREARNW = Byte.parseByte(s);
} else {
PREARNW = Byte.MIN_VALUE;
}
}

protected final void initPREASON(String s) {
if (!s.trim().isEmpty()) {
PREASON = Byte.parseByte(s);
} else {
PREASON = Byte.MIN_VALUE;
}
}

protected final void initPREL(String s) {
if (!s.trim().isEmpty()) {
PREL = Byte.parseByte(s);
} else {
PREL = Byte.MIN_VALUE;
}
}

protected final void initPRFITB(String s) {
if (!s.trim().isEmpty()) {
PRFITB = Byte.parseByte(s);
} else {
PRFITB = Byte.MIN_VALUE;
}
}

protected final void initPRFITBA(String s) {
if (!s.trim().isEmpty()) {
PRFITBA = Byte.parseByte(s);
} else {
PRFITBA = Byte.MIN_VALUE;
}
}

protected final void initPRFITBW(String s) {
if (!s.trim().isEmpty()) {
PRFITBW = Byte.parseByte(s);
} else {
PRFITBW = Byte.MIN_VALUE;
}
}

protected final void initPRIVPEN(String s) {
if (!s.trim().isEmpty()) {
PRIVPEN = Byte.parseByte(s);
} else {
PRIVPEN = Byte.MIN_VALUE;
}
}

protected final void initPROMODENY(String s) {
if (!s.trim().isEmpty()) {
PROMODENY = Byte.parseByte(s);
} else {
PROMODENY = Byte.MIN_VALUE;
}
}

protected final void initPROXY_TM(String s) {
if (!s.trim().isEmpty()) {
PROXY_TM = Integer.parseInt(s);
} else {
PROXY_TM = Integer.MIN_VALUE;
}
}

protected final void initPRSEX(String s) {
if (!s.trim().isEmpty()) {
PRSEX = Byte.parseByte(s);
} else {
PRSEX = Byte.MIN_VALUE;
}
}

protected final void initPSU(String s) {
if (!s.trim().isEmpty()) {
PSU = Integer.parseInt(s);
} else {
PSU = Integer.MIN_VALUE;
}
}

protected final void initQFHIGH(String s) {
if (!s.trim().isEmpty()) {
QFHIGH = Byte.parseByte(s);
} else {
QFHIGH = Byte.MIN_VALUE;
}
}

protected final void initQFHIGHFL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
QFHIGHFL_DV = false;
} else {
QFHIGHFL_DV = true;
}
}
}

protected final void initQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
QFHIGH_DV = Byte.parseByte(s);
} else {
QFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initQFVOC1(String s) {
if (!s.trim().isEmpty()) {
QFVOC1 = Byte.parseByte(s);
} else {
QFVOC1 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC10(String s) {
if (!s.trim().isEmpty()) {
QFVOC10 = Byte.parseByte(s);
} else {
QFVOC10 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC11(String s) {
if (!s.trim().isEmpty()) {
QFVOC11 = Byte.parseByte(s);
} else {
QFVOC11 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC12(String s) {
if (!s.trim().isEmpty()) {
QFVOC12 = Byte.parseByte(s);
} else {
QFVOC12 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC13(String s) {
if (!s.trim().isEmpty()) {
QFVOC13 = Byte.parseByte(s);
} else {
QFVOC13 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC14(String s) {
if (!s.trim().isEmpty()) {
QFVOC14 = Byte.parseByte(s);
} else {
QFVOC14 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC15(String s) {
if (!s.trim().isEmpty()) {
QFVOC15 = Byte.parseByte(s);
} else {
QFVOC15 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC2(String s) {
if (!s.trim().isEmpty()) {
QFVOC2 = Byte.parseByte(s);
} else {
QFVOC2 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC3(String s) {
if (!s.trim().isEmpty()) {
QFVOC3 = Byte.parseByte(s);
} else {
QFVOC3 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC4(String s) {
if (!s.trim().isEmpty()) {
QFVOC4 = Byte.parseByte(s);
} else {
QFVOC4 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC5(String s) {
if (!s.trim().isEmpty()) {
QFVOC5 = Byte.parseByte(s);
} else {
QFVOC5 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC6(String s) {
if (!s.trim().isEmpty()) {
QFVOC6 = Byte.parseByte(s);
} else {
QFVOC6 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC7(String s) {
if (!s.trim().isEmpty()) {
QFVOC7 = Byte.parseByte(s);
} else {
QFVOC7 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC8(String s) {
if (!s.trim().isEmpty()) {
QFVOC8 = Byte.parseByte(s);
} else {
QFVOC8 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC9(String s) {
if (!s.trim().isEmpty()) {
QFVOC9 = Byte.parseByte(s);
} else {
QFVOC9 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC96(String s) {
if (!s.trim().isEmpty()) {
QFVOC96 = Byte.parseByte(s);
} else {
QFVOC96 = Byte.MIN_VALUE;
}
}

protected final void initQSIGNIN_TM(String s) {
if (!s.trim().isEmpty()) {
QSIGNIN_TM = Integer.parseInt(s);
} else {
QSIGNIN_TM = Integer.MIN_VALUE;
}
}

protected final void initQUALOC(String s) {
if (!s.trim().isEmpty()) {
QUALOC = Byte.parseByte(s);
} else {
QUALOC = Byte.MIN_VALUE;
}
}

protected final void initQUARREL(String s) {
if (!s.trim().isEmpty()) {
QUARREL = Byte.parseByte(s);
} else {
QUARREL = Byte.MIN_VALUE;
}
}

protected final void initRACEL(String s) {
if (!s.trim().isEmpty()) {
RACEL = Byte.parseByte(s);
} else {
RACEL = Byte.MIN_VALUE;
}
}

protected final void initRACELO_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELO_CODE = Short.parseShort(s);
} else {
RACELO_CODE = Short.MIN_VALUE;
}
}

protected final void initRACEL_DV(String s) {
if (!s.trim().isEmpty()) {
RACEL_DV = Byte.parseByte(s);
} else {
RACEL_DV = Byte.MIN_VALUE;
}
}

protected final void initREADDIF(String s) {
if (!s.trim().isEmpty()) {
READDIF = Byte.parseByte(s);
} else {
READDIF = Byte.MIN_VALUE;
}
}

protected final void initREASREF(String s) {
if (!s.trim().isEmpty()) {
REASREF = Byte.parseByte(s);
} else {
REASREF = Byte.MIN_VALUE;
}
}

protected final void initRELATIONSHIPS_TM(String s) {
if (!s.trim().isEmpty()) {
RELATIONSHIPS_TM = Integer.parseInt(s);
} else {
RELATIONSHIPS_TM = Integer.MIN_VALUE;
}
}

protected final void initRELIGION_TM(String s) {
if (!s.trim().isEmpty()) {
RELIGION_TM = Integer.parseInt(s);
} else {
RELIGION_TM = Integer.MIN_VALUE;
}
}

protected final void initRELKID(String s) {
if (!s.trim().isEmpty()) {
RELKID = Byte.parseByte(s);
} else {
RELKID = Byte.MIN_VALUE;
}
}

protected final void initREMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
REMAIL_CODE = Byte.parseByte(s);
} else {
REMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initREMCNTRY1(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY1 = Short.parseShort(s);
} else {
REMCNTRY1 = Short.MIN_VALUE;
}
}

protected final void initREMCNTRY2(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY2 = Short.parseShort(s);
} else {
REMCNTRY2 = Short.MIN_VALUE;
}
}

protected final void initREMCNTRY3(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY3 = Short.parseShort(s);
} else {
REMCNTRY3 = Short.MIN_VALUE;
}
}

protected final void initREMCNTRY4(String s) {
if (!s.trim().isEmpty()) {
REMCNTRY4 = Short.parseShort(s);
} else {
REMCNTRY4 = Short.MIN_VALUE;
}
}

protected final void initREMIT1(String s) {
if (!s.trim().isEmpty()) {
REMIT1 = Byte.parseByte(s);
} else {
REMIT1 = Byte.MIN_VALUE;
}
}

protected final void initREMIT2(String s) {
if (!s.trim().isEmpty()) {
REMIT2 = Byte.parseByte(s);
} else {
REMIT2 = Byte.MIN_VALUE;
}
}

protected final void initREMIT3(String s) {
if (!s.trim().isEmpty()) {
REMIT3 = Byte.parseByte(s);
} else {
REMIT3 = Byte.MIN_VALUE;
}
}

protected final void initREMIT4(String s) {
if (!s.trim().isEmpty()) {
REMIT4 = Byte.parseByte(s);
} else {
REMIT4 = Byte.MIN_VALUE;
}
}

protected final void initREMIT5(String s) {
if (!s.trim().isEmpty()) {
REMIT5 = Byte.parseByte(s);
} else {
REMIT5 = Byte.MIN_VALUE;
}
}

protected final void initREMITAMT1(String s) {
if (!s.trim().isEmpty()) {
REMITAMT1 = Short.parseShort(s);
} else {
REMITAMT1 = Short.MIN_VALUE;
}
}

protected final void initREMITAMT2(String s) {
if (!s.trim().isEmpty()) {
REMITAMT2 = Integer.parseInt(s);
} else {
REMITAMT2 = Integer.MIN_VALUE;
}
}

protected final void initREMITAMT3(String s) {
if (!s.trim().isEmpty()) {
REMITAMT3 = Short.parseShort(s);
} else {
REMITAMT3 = Short.MIN_VALUE;
}
}

protected final void initREMITAMT4(String s) {
if (!s.trim().isEmpty()) {
REMITAMT4 = Integer.parseInt(s);
} else {
REMITAMT4 = Integer.MIN_VALUE;
}
}

protected final void initREMITFREQ1(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ1 = Byte.parseByte(s);
} else {
REMITFREQ1 = Byte.MIN_VALUE;
}
}

protected final void initREMITFREQ2(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ2 = Byte.parseByte(s);
} else {
REMITFREQ2 = Byte.MIN_VALUE;
}
}

protected final void initREMITFREQ3(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ3 = Byte.parseByte(s);
} else {
REMITFREQ3 = Byte.MIN_VALUE;
}
}

protected final void initREMITFREQ4(String s) {
if (!s.trim().isEmpty()) {
REMITFREQ4 = Byte.parseByte(s);
} else {
REMITFREQ4 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG1(String s) {
if (!s.trim().isEmpty()) {
REMITREG1 = Byte.parseByte(s);
} else {
REMITREG1 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG2(String s) {
if (!s.trim().isEmpty()) {
REMITREG2 = Byte.parseByte(s);
} else {
REMITREG2 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG3(String s) {
if (!s.trim().isEmpty()) {
REMITREG3 = Byte.parseByte(s);
} else {
REMITREG3 = Byte.MIN_VALUE;
}
}

protected final void initREMITREG4(String s) {
if (!s.trim().isEmpty()) {
REMITREG4 = Byte.parseByte(s);
} else {
REMITREG4 = Byte.MIN_VALUE;
}
}

protected final void initREMITTANCE_TM(String s) {
if (!s.trim().isEmpty()) {
REMITTANCE_TM = Integer.parseInt(s);
} else {
REMITTANCE_TM = Integer.MIN_VALUE;
}
}

protected final void initREMITUSUAL1(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL1 = Byte.parseByte(s);
} else {
REMITUSUAL1 = Byte.MIN_VALUE;
}
}

protected final void initREMITUSUAL2(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL2 = Byte.parseByte(s);
} else {
REMITUSUAL2 = Byte.MIN_VALUE;
}
}

protected final void initREMITUSUAL3(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL3 = Byte.parseByte(s);
} else {
REMITUSUAL3 = Byte.MIN_VALUE;
}
}

protected final void initREMITUSUAL4(String s) {
if (!s.trim().isEmpty()) {
REMITUSUAL4 = Byte.parseByte(s);
} else {
REMITUSUAL4 = Byte.MIN_VALUE;
}
}

protected final void initREMUSAMT1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
REMUSAMT1 = false;
} else {
REMUSAMT1 = true;
}
}
}

protected final void initREMUSAMT2(String s) {
if (!s.trim().isEmpty()) {
REMUSAMT2 = Short.parseShort(s);
} else {
REMUSAMT2 = Short.MIN_VALUE;
}
}

protected final void initREMUSAMT3(String s) {
if (!s.trim().isEmpty()) {
REMUSAMT3 = Short.parseShort(s);
} else {
REMUSAMT3 = Short.MIN_VALUE;
}
}

protected final void initREMUSAMT4(String s) {
if (!s.trim().isEmpty()) {
REMUSAMT4 = Short.parseShort(s);
} else {
REMUSAMT4 = Short.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_1_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_1_1 = Byte.parseByte(s);
} else {
RESATTACKEDW1_1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_1_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_1_2 = Byte.parseByte(s);
} else {
RESATTACKEDW1_1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_1_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_1_3 = Byte.parseByte(s);
} else {
RESATTACKEDW1_1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_1_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_1_4 = Byte.parseByte(s);
} else {
RESATTACKEDW1_1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_1_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_1_5 = Byte.parseByte(s);
} else {
RESATTACKEDW1_1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_1_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_1_6 = Byte.parseByte(s);
} else {
RESATTACKEDW1_1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_1_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_1_7 = Byte.parseByte(s);
} else {
RESATTACKEDW1_1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_1_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_1_8 = Byte.parseByte(s);
} else {
RESATTACKEDW1_1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_1_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_1_9 = Byte.parseByte(s);
} else {
RESATTACKEDW1_1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_1_96(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_1_96 = Byte.parseByte(s);
} else {
RESATTACKEDW1_1_96 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_1_97(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_1_97 = Byte.parseByte(s);
} else {
RESATTACKEDW1_1_97 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_2_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_2_1 = Byte.parseByte(s);
} else {
RESATTACKEDW1_2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_2_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_2_2 = Byte.parseByte(s);
} else {
RESATTACKEDW1_2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_2_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_2_3 = Byte.parseByte(s);
} else {
RESATTACKEDW1_2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_2_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_2_4 = Byte.parseByte(s);
} else {
RESATTACKEDW1_2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_2_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_2_5 = Byte.parseByte(s);
} else {
RESATTACKEDW1_2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_2_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_2_6 = Byte.parseByte(s);
} else {
RESATTACKEDW1_2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_2_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_2_7 = Byte.parseByte(s);
} else {
RESATTACKEDW1_2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_2_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_2_8 = Byte.parseByte(s);
} else {
RESATTACKEDW1_2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_2_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_2_9 = Byte.parseByte(s);
} else {
RESATTACKEDW1_2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_2_96(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_2_96 = Byte.parseByte(s);
} else {
RESATTACKEDW1_2_96 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_2_97(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_2_97 = Byte.parseByte(s);
} else {
RESATTACKEDW1_2_97 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_3_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_3_1 = Byte.parseByte(s);
} else {
RESATTACKEDW1_3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_3_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_3_2 = Byte.parseByte(s);
} else {
RESATTACKEDW1_3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_3_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_3_3 = Byte.parseByte(s);
} else {
RESATTACKEDW1_3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_3_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_3_4 = Byte.parseByte(s);
} else {
RESATTACKEDW1_3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_3_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_3_5 = Byte.parseByte(s);
} else {
RESATTACKEDW1_3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_3_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_3_6 = Byte.parseByte(s);
} else {
RESATTACKEDW1_3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_3_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_3_7 = Byte.parseByte(s);
} else {
RESATTACKEDW1_3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_3_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_3_8 = Byte.parseByte(s);
} else {
RESATTACKEDW1_3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_3_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_3_9 = Byte.parseByte(s);
} else {
RESATTACKEDW1_3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_3_96(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_3_96 = Byte.parseByte(s);
} else {
RESATTACKEDW1_3_96 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_3_97(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_3_97 = Byte.parseByte(s);
} else {
RESATTACKEDW1_3_97 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_4_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_4_1 = Byte.parseByte(s);
} else {
RESATTACKEDW1_4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_4_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_4_2 = Byte.parseByte(s);
} else {
RESATTACKEDW1_4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_4_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_4_3 = Byte.parseByte(s);
} else {
RESATTACKEDW1_4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_4_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_4_4 = Byte.parseByte(s);
} else {
RESATTACKEDW1_4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_4_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_4_5 = Byte.parseByte(s);
} else {
RESATTACKEDW1_4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_4_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_4_6 = Byte.parseByte(s);
} else {
RESATTACKEDW1_4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_4_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_4_7 = Byte.parseByte(s);
} else {
RESATTACKEDW1_4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_4_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_4_8 = Byte.parseByte(s);
} else {
RESATTACKEDW1_4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_4_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_4_9 = Byte.parseByte(s);
} else {
RESATTACKEDW1_4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_4_96(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_4_96 = Byte.parseByte(s);
} else {
RESATTACKEDW1_4_96 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_4_97(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_4_97 = Byte.parseByte(s);
} else {
RESATTACKEDW1_4_97 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_5_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_5_1 = Byte.parseByte(s);
} else {
RESATTACKEDW1_5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_5_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_5_2 = Byte.parseByte(s);
} else {
RESATTACKEDW1_5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_5_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_5_3 = Byte.parseByte(s);
} else {
RESATTACKEDW1_5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_5_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_5_4 = Byte.parseByte(s);
} else {
RESATTACKEDW1_5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_5_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_5_5 = Byte.parseByte(s);
} else {
RESATTACKEDW1_5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_5_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_5_6 = Byte.parseByte(s);
} else {
RESATTACKEDW1_5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_5_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_5_7 = Byte.parseByte(s);
} else {
RESATTACKEDW1_5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_5_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_5_8 = Byte.parseByte(s);
} else {
RESATTACKEDW1_5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_5_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_5_9 = Byte.parseByte(s);
} else {
RESATTACKEDW1_5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_5_96(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_5_96 = Byte.parseByte(s);
} else {
RESATTACKEDW1_5_96 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_5_97(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_5_97 = Byte.parseByte(s);
} else {
RESATTACKEDW1_5_97 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_6_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_6_1 = Byte.parseByte(s);
} else {
RESATTACKEDW1_6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_6_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_6_2 = Byte.parseByte(s);
} else {
RESATTACKEDW1_6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_6_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_6_3 = Byte.parseByte(s);
} else {
RESATTACKEDW1_6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_6_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_6_4 = Byte.parseByte(s);
} else {
RESATTACKEDW1_6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_6_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_6_5 = Byte.parseByte(s);
} else {
RESATTACKEDW1_6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_6_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_6_6 = Byte.parseByte(s);
} else {
RESATTACKEDW1_6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_6_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_6_7 = Byte.parseByte(s);
} else {
RESATTACKEDW1_6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_6_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_6_8 = Byte.parseByte(s);
} else {
RESATTACKEDW1_6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_6_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_6_9 = Byte.parseByte(s);
} else {
RESATTACKEDW1_6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_6_96(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_6_96 = Byte.parseByte(s);
} else {
RESATTACKEDW1_6_96 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_6_97(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_6_97 = Byte.parseByte(s);
} else {
RESATTACKEDW1_6_97 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_7_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_7_1 = Byte.parseByte(s);
} else {
RESATTACKEDW1_7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_7_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_7_2 = Byte.parseByte(s);
} else {
RESATTACKEDW1_7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_7_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_7_3 = Byte.parseByte(s);
} else {
RESATTACKEDW1_7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_7_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_7_4 = Byte.parseByte(s);
} else {
RESATTACKEDW1_7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_7_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_7_5 = Byte.parseByte(s);
} else {
RESATTACKEDW1_7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_7_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_7_6 = Byte.parseByte(s);
} else {
RESATTACKEDW1_7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_7_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_7_7 = Byte.parseByte(s);
} else {
RESATTACKEDW1_7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_7_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_7_8 = Byte.parseByte(s);
} else {
RESATTACKEDW1_7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_7_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_7_9 = Byte.parseByte(s);
} else {
RESATTACKEDW1_7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_7_96(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_7_96 = Byte.parseByte(s);
} else {
RESATTACKEDW1_7_96 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_7_97(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_7_97 = Byte.parseByte(s);
} else {
RESATTACKEDW1_7_97 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_97_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_97_1 = Byte.parseByte(s);
} else {
RESATTACKEDW1_97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_97_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_97_2 = Byte.parseByte(s);
} else {
RESATTACKEDW1_97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_97_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_97_3 = Byte.parseByte(s);
} else {
RESATTACKEDW1_97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_97_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_97_4 = Byte.parseByte(s);
} else {
RESATTACKEDW1_97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_97_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_97_5 = Byte.parseByte(s);
} else {
RESATTACKEDW1_97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_97_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_97_6 = Byte.parseByte(s);
} else {
RESATTACKEDW1_97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_97_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_97_7 = Byte.parseByte(s);
} else {
RESATTACKEDW1_97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_97_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_97_8 = Byte.parseByte(s);
} else {
RESATTACKEDW1_97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_97_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_97_9 = Byte.parseByte(s);
} else {
RESATTACKEDW1_97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_97_96(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_97_96 = Byte.parseByte(s);
} else {
RESATTACKEDW1_97_96 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKEDW1_97_97(String s) {
if (!s.trim().isEmpty()) {
RESATTACKEDW1_97_97 = Byte.parseByte(s);
} else {
RESATTACKEDW1_97_97 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_1_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_1_1 = Byte.parseByte(s);
} else {
RESAVOIDW1_1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_1_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_1_2 = Byte.parseByte(s);
} else {
RESAVOIDW1_1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_1_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_1_3 = Byte.parseByte(s);
} else {
RESAVOIDW1_1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_1_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_1_4 = Byte.parseByte(s);
} else {
RESAVOIDW1_1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_1_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_1_5 = Byte.parseByte(s);
} else {
RESAVOIDW1_1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_1_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_1_6 = Byte.parseByte(s);
} else {
RESAVOIDW1_1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_1_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_1_7 = Byte.parseByte(s);
} else {
RESAVOIDW1_1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_1_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_1_8 = Byte.parseByte(s);
} else {
RESAVOIDW1_1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_1_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_1_9 = Byte.parseByte(s);
} else {
RESAVOIDW1_1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_1_96(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_1_96 = Byte.parseByte(s);
} else {
RESAVOIDW1_1_96 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_1_97(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_1_97 = Byte.parseByte(s);
} else {
RESAVOIDW1_1_97 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_2_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_2_1 = Byte.parseByte(s);
} else {
RESAVOIDW1_2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_2_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_2_2 = Byte.parseByte(s);
} else {
RESAVOIDW1_2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_2_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_2_3 = Byte.parseByte(s);
} else {
RESAVOIDW1_2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_2_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_2_4 = Byte.parseByte(s);
} else {
RESAVOIDW1_2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_2_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_2_5 = Byte.parseByte(s);
} else {
RESAVOIDW1_2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_2_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_2_6 = Byte.parseByte(s);
} else {
RESAVOIDW1_2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_2_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_2_7 = Byte.parseByte(s);
} else {
RESAVOIDW1_2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_2_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_2_8 = Byte.parseByte(s);
} else {
RESAVOIDW1_2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_2_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_2_9 = Byte.parseByte(s);
} else {
RESAVOIDW1_2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_2_96(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_2_96 = Byte.parseByte(s);
} else {
RESAVOIDW1_2_96 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_2_97(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_2_97 = Byte.parseByte(s);
} else {
RESAVOIDW1_2_97 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_3_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_3_1 = Byte.parseByte(s);
} else {
RESAVOIDW1_3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_3_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_3_2 = Byte.parseByte(s);
} else {
RESAVOIDW1_3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_3_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_3_3 = Byte.parseByte(s);
} else {
RESAVOIDW1_3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_3_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_3_4 = Byte.parseByte(s);
} else {
RESAVOIDW1_3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_3_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_3_5 = Byte.parseByte(s);
} else {
RESAVOIDW1_3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_3_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_3_6 = Byte.parseByte(s);
} else {
RESAVOIDW1_3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_3_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_3_7 = Byte.parseByte(s);
} else {
RESAVOIDW1_3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_3_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_3_8 = Byte.parseByte(s);
} else {
RESAVOIDW1_3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_3_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_3_9 = Byte.parseByte(s);
} else {
RESAVOIDW1_3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_3_96(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_3_96 = Byte.parseByte(s);
} else {
RESAVOIDW1_3_96 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_3_97(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_3_97 = Byte.parseByte(s);
} else {
RESAVOIDW1_3_97 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_4_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_4_1 = Byte.parseByte(s);
} else {
RESAVOIDW1_4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_4_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_4_2 = Byte.parseByte(s);
} else {
RESAVOIDW1_4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_4_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_4_3 = Byte.parseByte(s);
} else {
RESAVOIDW1_4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_4_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_4_4 = Byte.parseByte(s);
} else {
RESAVOIDW1_4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_4_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_4_5 = Byte.parseByte(s);
} else {
RESAVOIDW1_4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_4_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_4_6 = Byte.parseByte(s);
} else {
RESAVOIDW1_4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_4_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_4_7 = Byte.parseByte(s);
} else {
RESAVOIDW1_4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_4_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_4_8 = Byte.parseByte(s);
} else {
RESAVOIDW1_4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_4_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_4_9 = Byte.parseByte(s);
} else {
RESAVOIDW1_4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_4_96(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_4_96 = Byte.parseByte(s);
} else {
RESAVOIDW1_4_96 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_4_97(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_4_97 = Byte.parseByte(s);
} else {
RESAVOIDW1_4_97 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_5_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_5_1 = Byte.parseByte(s);
} else {
RESAVOIDW1_5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_5_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_5_2 = Byte.parseByte(s);
} else {
RESAVOIDW1_5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_5_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_5_3 = Byte.parseByte(s);
} else {
RESAVOIDW1_5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_5_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_5_4 = Byte.parseByte(s);
} else {
RESAVOIDW1_5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_5_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_5_5 = Byte.parseByte(s);
} else {
RESAVOIDW1_5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_5_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_5_6 = Byte.parseByte(s);
} else {
RESAVOIDW1_5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_5_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_5_7 = Byte.parseByte(s);
} else {
RESAVOIDW1_5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_5_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_5_8 = Byte.parseByte(s);
} else {
RESAVOIDW1_5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_5_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_5_9 = Byte.parseByte(s);
} else {
RESAVOIDW1_5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_5_96(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_5_96 = Byte.parseByte(s);
} else {
RESAVOIDW1_5_96 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_5_97(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_5_97 = Byte.parseByte(s);
} else {
RESAVOIDW1_5_97 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_6_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_6_1 = Byte.parseByte(s);
} else {
RESAVOIDW1_6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_6_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_6_2 = Byte.parseByte(s);
} else {
RESAVOIDW1_6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_6_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_6_3 = Byte.parseByte(s);
} else {
RESAVOIDW1_6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_6_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_6_4 = Byte.parseByte(s);
} else {
RESAVOIDW1_6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_6_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_6_5 = Byte.parseByte(s);
} else {
RESAVOIDW1_6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_6_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_6_6 = Byte.parseByte(s);
} else {
RESAVOIDW1_6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_6_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_6_7 = Byte.parseByte(s);
} else {
RESAVOIDW1_6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_6_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_6_8 = Byte.parseByte(s);
} else {
RESAVOIDW1_6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_6_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_6_9 = Byte.parseByte(s);
} else {
RESAVOIDW1_6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_6_96(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_6_96 = Byte.parseByte(s);
} else {
RESAVOIDW1_6_96 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_6_97(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_6_97 = Byte.parseByte(s);
} else {
RESAVOIDW1_6_97 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_7_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_7_1 = Byte.parseByte(s);
} else {
RESAVOIDW1_7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_7_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_7_2 = Byte.parseByte(s);
} else {
RESAVOIDW1_7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_7_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_7_3 = Byte.parseByte(s);
} else {
RESAVOIDW1_7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_7_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_7_4 = Byte.parseByte(s);
} else {
RESAVOIDW1_7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_7_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_7_5 = Byte.parseByte(s);
} else {
RESAVOIDW1_7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_7_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_7_6 = Byte.parseByte(s);
} else {
RESAVOIDW1_7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_7_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_7_7 = Byte.parseByte(s);
} else {
RESAVOIDW1_7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_7_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_7_8 = Byte.parseByte(s);
} else {
RESAVOIDW1_7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_7_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_7_9 = Byte.parseByte(s);
} else {
RESAVOIDW1_7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_7_96(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_7_96 = Byte.parseByte(s);
} else {
RESAVOIDW1_7_96 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_7_97(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_7_97 = Byte.parseByte(s);
} else {
RESAVOIDW1_7_97 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_97_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_97_1 = Byte.parseByte(s);
} else {
RESAVOIDW1_97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_97_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_97_2 = Byte.parseByte(s);
} else {
RESAVOIDW1_97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_97_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_97_3 = Byte.parseByte(s);
} else {
RESAVOIDW1_97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_97_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_97_4 = Byte.parseByte(s);
} else {
RESAVOIDW1_97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_97_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_97_5 = Byte.parseByte(s);
} else {
RESAVOIDW1_97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_97_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_97_6 = Byte.parseByte(s);
} else {
RESAVOIDW1_97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_97_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_97_7 = Byte.parseByte(s);
} else {
RESAVOIDW1_97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_97_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_97_8 = Byte.parseByte(s);
} else {
RESAVOIDW1_97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_97_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_97_9 = Byte.parseByte(s);
} else {
RESAVOIDW1_97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_97_96(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_97_96 = Byte.parseByte(s);
} else {
RESAVOIDW1_97_96 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOIDW1_97_97(String s) {
if (!s.trim().isEmpty()) {
RESAVOIDW1_97_97 = Byte.parseByte(s);
} else {
RESAVOIDW1_97_97 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_1_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_1_1 = Byte.parseByte(s);
} else {
RESINSULTEDW1_1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_1_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_1_2 = Byte.parseByte(s);
} else {
RESINSULTEDW1_1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_1_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_1_3 = Byte.parseByte(s);
} else {
RESINSULTEDW1_1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_1_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_1_4 = Byte.parseByte(s);
} else {
RESINSULTEDW1_1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_1_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_1_5 = Byte.parseByte(s);
} else {
RESINSULTEDW1_1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_1_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_1_6 = Byte.parseByte(s);
} else {
RESINSULTEDW1_1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_1_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_1_7 = Byte.parseByte(s);
} else {
RESINSULTEDW1_1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_1_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_1_8 = Byte.parseByte(s);
} else {
RESINSULTEDW1_1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_1_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_1_9 = Byte.parseByte(s);
} else {
RESINSULTEDW1_1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_1_96(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_1_96 = Byte.parseByte(s);
} else {
RESINSULTEDW1_1_96 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_1_97(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_1_97 = Byte.parseByte(s);
} else {
RESINSULTEDW1_1_97 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_2_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_2_1 = Byte.parseByte(s);
} else {
RESINSULTEDW1_2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_2_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_2_2 = Byte.parseByte(s);
} else {
RESINSULTEDW1_2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_2_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_2_3 = Byte.parseByte(s);
} else {
RESINSULTEDW1_2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_2_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_2_4 = Byte.parseByte(s);
} else {
RESINSULTEDW1_2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_2_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_2_5 = Byte.parseByte(s);
} else {
RESINSULTEDW1_2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_2_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_2_6 = Byte.parseByte(s);
} else {
RESINSULTEDW1_2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_2_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_2_7 = Byte.parseByte(s);
} else {
RESINSULTEDW1_2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_2_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_2_8 = Byte.parseByte(s);
} else {
RESINSULTEDW1_2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_2_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_2_9 = Byte.parseByte(s);
} else {
RESINSULTEDW1_2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_2_96(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_2_96 = Byte.parseByte(s);
} else {
RESINSULTEDW1_2_96 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_2_97(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_2_97 = Byte.parseByte(s);
} else {
RESINSULTEDW1_2_97 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_3_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_3_1 = Byte.parseByte(s);
} else {
RESINSULTEDW1_3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_3_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_3_2 = Byte.parseByte(s);
} else {
RESINSULTEDW1_3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_3_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_3_3 = Byte.parseByte(s);
} else {
RESINSULTEDW1_3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_3_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_3_4 = Byte.parseByte(s);
} else {
RESINSULTEDW1_3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_3_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_3_5 = Byte.parseByte(s);
} else {
RESINSULTEDW1_3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_3_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_3_6 = Byte.parseByte(s);
} else {
RESINSULTEDW1_3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_3_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_3_7 = Byte.parseByte(s);
} else {
RESINSULTEDW1_3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_3_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_3_8 = Byte.parseByte(s);
} else {
RESINSULTEDW1_3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_3_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_3_9 = Byte.parseByte(s);
} else {
RESINSULTEDW1_3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_3_96(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_3_96 = Byte.parseByte(s);
} else {
RESINSULTEDW1_3_96 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_3_97(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_3_97 = Byte.parseByte(s);
} else {
RESINSULTEDW1_3_97 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_4_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_4_1 = Byte.parseByte(s);
} else {
RESINSULTEDW1_4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_4_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_4_2 = Byte.parseByte(s);
} else {
RESINSULTEDW1_4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_4_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_4_3 = Byte.parseByte(s);
} else {
RESINSULTEDW1_4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_4_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_4_4 = Byte.parseByte(s);
} else {
RESINSULTEDW1_4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_4_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_4_5 = Byte.parseByte(s);
} else {
RESINSULTEDW1_4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_4_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_4_6 = Byte.parseByte(s);
} else {
RESINSULTEDW1_4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_4_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_4_7 = Byte.parseByte(s);
} else {
RESINSULTEDW1_4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_4_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_4_8 = Byte.parseByte(s);
} else {
RESINSULTEDW1_4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_4_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_4_9 = Byte.parseByte(s);
} else {
RESINSULTEDW1_4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_4_96(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_4_96 = Byte.parseByte(s);
} else {
RESINSULTEDW1_4_96 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_4_97(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_4_97 = Byte.parseByte(s);
} else {
RESINSULTEDW1_4_97 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_5_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_5_1 = Byte.parseByte(s);
} else {
RESINSULTEDW1_5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_5_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_5_2 = Byte.parseByte(s);
} else {
RESINSULTEDW1_5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_5_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_5_3 = Byte.parseByte(s);
} else {
RESINSULTEDW1_5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_5_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_5_4 = Byte.parseByte(s);
} else {
RESINSULTEDW1_5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_5_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_5_5 = Byte.parseByte(s);
} else {
RESINSULTEDW1_5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_5_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_5_6 = Byte.parseByte(s);
} else {
RESINSULTEDW1_5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_5_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_5_7 = Byte.parseByte(s);
} else {
RESINSULTEDW1_5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_5_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_5_8 = Byte.parseByte(s);
} else {
RESINSULTEDW1_5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_5_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_5_9 = Byte.parseByte(s);
} else {
RESINSULTEDW1_5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_5_96(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_5_96 = Byte.parseByte(s);
} else {
RESINSULTEDW1_5_96 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_5_97(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_5_97 = Byte.parseByte(s);
} else {
RESINSULTEDW1_5_97 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_6_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_6_1 = Byte.parseByte(s);
} else {
RESINSULTEDW1_6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_6_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_6_2 = Byte.parseByte(s);
} else {
RESINSULTEDW1_6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_6_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_6_3 = Byte.parseByte(s);
} else {
RESINSULTEDW1_6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_6_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_6_4 = Byte.parseByte(s);
} else {
RESINSULTEDW1_6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_6_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_6_5 = Byte.parseByte(s);
} else {
RESINSULTEDW1_6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_6_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_6_6 = Byte.parseByte(s);
} else {
RESINSULTEDW1_6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_6_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_6_7 = Byte.parseByte(s);
} else {
RESINSULTEDW1_6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_6_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_6_8 = Byte.parseByte(s);
} else {
RESINSULTEDW1_6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_6_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_6_9 = Byte.parseByte(s);
} else {
RESINSULTEDW1_6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_6_96(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_6_96 = Byte.parseByte(s);
} else {
RESINSULTEDW1_6_96 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_6_97(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_6_97 = Byte.parseByte(s);
} else {
RESINSULTEDW1_6_97 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_7_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_7_1 = Byte.parseByte(s);
} else {
RESINSULTEDW1_7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_7_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_7_2 = Byte.parseByte(s);
} else {
RESINSULTEDW1_7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_7_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_7_3 = Byte.parseByte(s);
} else {
RESINSULTEDW1_7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_7_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_7_4 = Byte.parseByte(s);
} else {
RESINSULTEDW1_7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_7_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_7_5 = Byte.parseByte(s);
} else {
RESINSULTEDW1_7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_7_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_7_6 = Byte.parseByte(s);
} else {
RESINSULTEDW1_7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_7_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_7_7 = Byte.parseByte(s);
} else {
RESINSULTEDW1_7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_7_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_7_8 = Byte.parseByte(s);
} else {
RESINSULTEDW1_7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_7_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_7_9 = Byte.parseByte(s);
} else {
RESINSULTEDW1_7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_7_96(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_7_96 = Byte.parseByte(s);
} else {
RESINSULTEDW1_7_96 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_7_97(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_7_97 = Byte.parseByte(s);
} else {
RESINSULTEDW1_7_97 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_97_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_97_1 = Byte.parseByte(s);
} else {
RESINSULTEDW1_97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_97_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_97_2 = Byte.parseByte(s);
} else {
RESINSULTEDW1_97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_97_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_97_3 = Byte.parseByte(s);
} else {
RESINSULTEDW1_97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_97_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_97_4 = Byte.parseByte(s);
} else {
RESINSULTEDW1_97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_97_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_97_5 = Byte.parseByte(s);
} else {
RESINSULTEDW1_97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_97_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_97_6 = Byte.parseByte(s);
} else {
RESINSULTEDW1_97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_97_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_97_7 = Byte.parseByte(s);
} else {
RESINSULTEDW1_97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_97_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_97_8 = Byte.parseByte(s);
} else {
RESINSULTEDW1_97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_97_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_97_9 = Byte.parseByte(s);
} else {
RESINSULTEDW1_97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_97_96(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_97_96 = Byte.parseByte(s);
} else {
RESINSULTEDW1_97_96 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTEDW1_97_97(String s) {
if (!s.trim().isEmpty()) {
RESINSULTEDW1_97_97 = Byte.parseByte(s);
} else {
RESINSULTEDW1_97_97 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY1(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY1 = Byte.parseByte(s);
} else {
RESJOBDENY1 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY2(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY2 = Byte.parseByte(s);
} else {
RESJOBDENY2 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY3(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY3 = Byte.parseByte(s);
} else {
RESJOBDENY3 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY4(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY4 = Byte.parseByte(s);
} else {
RESJOBDENY4 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY5(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY5 = Byte.parseByte(s);
} else {
RESJOBDENY5 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY6(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY6 = Byte.parseByte(s);
} else {
RESJOBDENY6 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY7(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY7 = Byte.parseByte(s);
} else {
RESJOBDENY7 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY8(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY8 = Byte.parseByte(s);
} else {
RESJOBDENY8 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY9(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY9 = Byte.parseByte(s);
} else {
RESJOBDENY9 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY96(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY96 = Byte.parseByte(s);
} else {
RESJOBDENY96 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY97(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY97 = Byte.parseByte(s);
} else {
RESJOBDENY97 = Byte.MIN_VALUE;
}
}

protected final void initRESPF16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16 = false;
} else {
RESPF16 = true;
}
}
}

protected final void initRESPF16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16_DV = false;
} else {
RESPF16_DV = true;
}
}
}

protected final void initRESPM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16 = false;
} else {
RESPM16 = true;
}
}
}

protected final void initRESPM16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16_DV = false;
} else {
RESPM16_DV = true;
}
}
}

protected final void initRESPROMODENY1(String s) {
if (!s.trim().isEmpty()) {
RESPROMODENY1 = Byte.parseByte(s);
} else {
RESPROMODENY1 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMODENY2(String s) {
if (!s.trim().isEmpty()) {
RESPROMODENY2 = Byte.parseByte(s);
} else {
RESPROMODENY2 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMODENY3(String s) {
if (!s.trim().isEmpty()) {
RESPROMODENY3 = Byte.parseByte(s);
} else {
RESPROMODENY3 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMODENY4(String s) {
if (!s.trim().isEmpty()) {
RESPROMODENY4 = Byte.parseByte(s);
} else {
RESPROMODENY4 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMODENY5(String s) {
if (!s.trim().isEmpty()) {
RESPROMODENY5 = Byte.parseByte(s);
} else {
RESPROMODENY5 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMODENY6(String s) {
if (!s.trim().isEmpty()) {
RESPROMODENY6 = Byte.parseByte(s);
} else {
RESPROMODENY6 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMODENY7(String s) {
if (!s.trim().isEmpty()) {
RESPROMODENY7 = Byte.parseByte(s);
} else {
RESPROMODENY7 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMODENY8(String s) {
if (!s.trim().isEmpty()) {
RESPROMODENY8 = Byte.parseByte(s);
} else {
RESPROMODENY8 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMODENY9(String s) {
if (!s.trim().isEmpty()) {
RESPROMODENY9 = Byte.parseByte(s);
} else {
RESPROMODENY9 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMODENY96(String s) {
if (!s.trim().isEmpty()) {
RESPROMODENY96 = Byte.parseByte(s);
} else {
RESPROMODENY96 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMODENY97(String s) {
if (!s.trim().isEmpty()) {
RESPROMODENY97 = Byte.parseByte(s);
} else {
RESPROMODENY97 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY1(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY1 = Byte.parseByte(s);
} else {
RESTRAINDENY1 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY2(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY2 = Byte.parseByte(s);
} else {
RESTRAINDENY2 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY3(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY3 = Byte.parseByte(s);
} else {
RESTRAINDENY3 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY4(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY4 = Byte.parseByte(s);
} else {
RESTRAINDENY4 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY5(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY5 = Byte.parseByte(s);
} else {
RESTRAINDENY5 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY6(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY6 = Byte.parseByte(s);
} else {
RESTRAINDENY6 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY7(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY7 = Byte.parseByte(s);
} else {
RESTRAINDENY7 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY8(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY8 = Byte.parseByte(s);
} else {
RESTRAINDENY8 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY9(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY9 = Byte.parseByte(s);
} else {
RESTRAINDENY9 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY96(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY96 = Byte.parseByte(s);
} else {
RESTRAINDENY96 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY97(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY97 = Byte.parseByte(s);
} else {
RESTRAINDENY97 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_1_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_1_1 = Byte.parseByte(s);
} else {
RESUNSAFEW1_1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_1_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_1_2 = Byte.parseByte(s);
} else {
RESUNSAFEW1_1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_1_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_1_3 = Byte.parseByte(s);
} else {
RESUNSAFEW1_1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_1_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_1_4 = Byte.parseByte(s);
} else {
RESUNSAFEW1_1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_1_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_1_5 = Byte.parseByte(s);
} else {
RESUNSAFEW1_1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_1_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_1_6 = Byte.parseByte(s);
} else {
RESUNSAFEW1_1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_1_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_1_7 = Byte.parseByte(s);
} else {
RESUNSAFEW1_1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_1_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_1_8 = Byte.parseByte(s);
} else {
RESUNSAFEW1_1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_1_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_1_9 = Byte.parseByte(s);
} else {
RESUNSAFEW1_1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_1_96(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_1_96 = Byte.parseByte(s);
} else {
RESUNSAFEW1_1_96 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_1_97(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_1_97 = Byte.parseByte(s);
} else {
RESUNSAFEW1_1_97 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_2_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_2_1 = Byte.parseByte(s);
} else {
RESUNSAFEW1_2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_2_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_2_2 = Byte.parseByte(s);
} else {
RESUNSAFEW1_2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_2_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_2_3 = Byte.parseByte(s);
} else {
RESUNSAFEW1_2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_2_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_2_4 = Byte.parseByte(s);
} else {
RESUNSAFEW1_2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_2_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_2_5 = Byte.parseByte(s);
} else {
RESUNSAFEW1_2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_2_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_2_6 = Byte.parseByte(s);
} else {
RESUNSAFEW1_2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_2_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_2_7 = Byte.parseByte(s);
} else {
RESUNSAFEW1_2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_2_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_2_8 = Byte.parseByte(s);
} else {
RESUNSAFEW1_2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_2_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_2_9 = Byte.parseByte(s);
} else {
RESUNSAFEW1_2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_2_96(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_2_96 = Byte.parseByte(s);
} else {
RESUNSAFEW1_2_96 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_2_97(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_2_97 = Byte.parseByte(s);
} else {
RESUNSAFEW1_2_97 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_3_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_3_1 = Byte.parseByte(s);
} else {
RESUNSAFEW1_3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_3_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_3_2 = Byte.parseByte(s);
} else {
RESUNSAFEW1_3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_3_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_3_3 = Byte.parseByte(s);
} else {
RESUNSAFEW1_3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_3_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_3_4 = Byte.parseByte(s);
} else {
RESUNSAFEW1_3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_3_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_3_5 = Byte.parseByte(s);
} else {
RESUNSAFEW1_3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_3_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_3_6 = Byte.parseByte(s);
} else {
RESUNSAFEW1_3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_3_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_3_7 = Byte.parseByte(s);
} else {
RESUNSAFEW1_3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_3_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_3_8 = Byte.parseByte(s);
} else {
RESUNSAFEW1_3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_3_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_3_9 = Byte.parseByte(s);
} else {
RESUNSAFEW1_3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_3_96(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_3_96 = Byte.parseByte(s);
} else {
RESUNSAFEW1_3_96 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_3_97(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_3_97 = Byte.parseByte(s);
} else {
RESUNSAFEW1_3_97 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_4_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_4_1 = Byte.parseByte(s);
} else {
RESUNSAFEW1_4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_4_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_4_2 = Byte.parseByte(s);
} else {
RESUNSAFEW1_4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_4_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_4_3 = Byte.parseByte(s);
} else {
RESUNSAFEW1_4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_4_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_4_4 = Byte.parseByte(s);
} else {
RESUNSAFEW1_4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_4_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_4_5 = Byte.parseByte(s);
} else {
RESUNSAFEW1_4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_4_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_4_6 = Byte.parseByte(s);
} else {
RESUNSAFEW1_4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_4_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_4_7 = Byte.parseByte(s);
} else {
RESUNSAFEW1_4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_4_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_4_8 = Byte.parseByte(s);
} else {
RESUNSAFEW1_4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_4_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_4_9 = Byte.parseByte(s);
} else {
RESUNSAFEW1_4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_4_96(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_4_96 = Byte.parseByte(s);
} else {
RESUNSAFEW1_4_96 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_4_97(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_4_97 = Byte.parseByte(s);
} else {
RESUNSAFEW1_4_97 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_5_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_5_1 = Byte.parseByte(s);
} else {
RESUNSAFEW1_5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_5_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_5_2 = Byte.parseByte(s);
} else {
RESUNSAFEW1_5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_5_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_5_3 = Byte.parseByte(s);
} else {
RESUNSAFEW1_5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_5_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_5_4 = Byte.parseByte(s);
} else {
RESUNSAFEW1_5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_5_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_5_5 = Byte.parseByte(s);
} else {
RESUNSAFEW1_5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_5_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_5_6 = Byte.parseByte(s);
} else {
RESUNSAFEW1_5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_5_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_5_7 = Byte.parseByte(s);
} else {
RESUNSAFEW1_5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_5_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_5_8 = Byte.parseByte(s);
} else {
RESUNSAFEW1_5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_5_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_5_9 = Byte.parseByte(s);
} else {
RESUNSAFEW1_5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_5_96(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_5_96 = Byte.parseByte(s);
} else {
RESUNSAFEW1_5_96 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_5_97(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_5_97 = Byte.parseByte(s);
} else {
RESUNSAFEW1_5_97 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_6_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_6_1 = Byte.parseByte(s);
} else {
RESUNSAFEW1_6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_6_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_6_2 = Byte.parseByte(s);
} else {
RESUNSAFEW1_6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_6_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_6_3 = Byte.parseByte(s);
} else {
RESUNSAFEW1_6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_6_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_6_4 = Byte.parseByte(s);
} else {
RESUNSAFEW1_6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_6_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_6_5 = Byte.parseByte(s);
} else {
RESUNSAFEW1_6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_6_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_6_6 = Byte.parseByte(s);
} else {
RESUNSAFEW1_6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_6_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_6_7 = Byte.parseByte(s);
} else {
RESUNSAFEW1_6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_6_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_6_8 = Byte.parseByte(s);
} else {
RESUNSAFEW1_6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_6_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_6_9 = Byte.parseByte(s);
} else {
RESUNSAFEW1_6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_6_96(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_6_96 = Byte.parseByte(s);
} else {
RESUNSAFEW1_6_96 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_6_97(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_6_97 = Byte.parseByte(s);
} else {
RESUNSAFEW1_6_97 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_7_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_7_1 = Byte.parseByte(s);
} else {
RESUNSAFEW1_7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_7_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_7_2 = Byte.parseByte(s);
} else {
RESUNSAFEW1_7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_7_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_7_3 = Byte.parseByte(s);
} else {
RESUNSAFEW1_7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_7_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_7_4 = Byte.parseByte(s);
} else {
RESUNSAFEW1_7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_7_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_7_5 = Byte.parseByte(s);
} else {
RESUNSAFEW1_7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_7_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_7_6 = Byte.parseByte(s);
} else {
RESUNSAFEW1_7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_7_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_7_7 = Byte.parseByte(s);
} else {
RESUNSAFEW1_7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_7_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_7_8 = Byte.parseByte(s);
} else {
RESUNSAFEW1_7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_7_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_7_9 = Byte.parseByte(s);
} else {
RESUNSAFEW1_7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_7_96(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_7_96 = Byte.parseByte(s);
} else {
RESUNSAFEW1_7_96 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_7_97(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_7_97 = Byte.parseByte(s);
} else {
RESUNSAFEW1_7_97 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_97_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_97_1 = Byte.parseByte(s);
} else {
RESUNSAFEW1_97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_97_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_97_2 = Byte.parseByte(s);
} else {
RESUNSAFEW1_97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_97_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_97_3 = Byte.parseByte(s);
} else {
RESUNSAFEW1_97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_97_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_97_4 = Byte.parseByte(s);
} else {
RESUNSAFEW1_97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_97_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_97_5 = Byte.parseByte(s);
} else {
RESUNSAFEW1_97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_97_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_97_6 = Byte.parseByte(s);
} else {
RESUNSAFEW1_97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_97_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_97_7 = Byte.parseByte(s);
} else {
RESUNSAFEW1_97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_97_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_97_8 = Byte.parseByte(s);
} else {
RESUNSAFEW1_97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_97_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_97_9 = Byte.parseByte(s);
} else {
RESUNSAFEW1_97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_97_96(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_97_96 = Byte.parseByte(s);
} else {
RESUNSAFEW1_97_96 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFEW1_97_97(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFEW1_97_97 = Byte.parseByte(s);
} else {
RESUNSAFEW1_97_97 = Byte.MIN_VALUE;
}
}

protected final void initRETDATEM(String s) {
if (!s.trim().isEmpty()) {
RETDATEM = Byte.parseByte(s);
} else {
RETDATEM = Byte.MIN_VALUE;
}
}

protected final void initRETDATEY(String s) {
if (!s.trim().isEmpty()) {
RETDATEY = Short.parseShort(s);
} else {
RETDATEY = Short.MIN_VALUE;
}
}

protected final void initRHLAND_CODE(String s) {
if (!s.trim().isEmpty()) {
RHLAND_CODE = Byte.parseByte(s);
} else {
RHLAND_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHMOB_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHMOB_CODE = Byte.parseByte(s);
} else {
RPHMOB_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHWRK_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHWRK_CODE = Byte.parseByte(s);
} else {
RPHWRK_CODE = Byte.MIN_VALUE;
}
}

protected final void initRULESKID(String s) {
if (!s.trim().isEmpty()) {
RULESKID = Byte.parseByte(s);
} else {
RULESKID = Byte.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSAMSCH(String s) {
if (!s.trim().isEmpty()) {
SAMSCH = Byte.parseByte(s);
} else {
SAMSCH = Byte.MIN_VALUE;
}
}

protected final void initSCDASCOH_DV(String s) {
if (!s.trim().isEmpty()) {
SCDASCOH_DV = Byte.parseByte(s);
} else {
SCDASCOH_DV = Byte.MIN_VALUE;
}
}

protected final void initSCDASSAT_DV(String s) {
if (!s.trim().isEmpty()) {
SCDASSAT_DV = Byte.parseByte(s);
} else {
SCDASSAT_DV = Byte.MIN_VALUE;
}
}

protected final void initSCDOBY4(String s) {
if (!s.trim().isEmpty()) {
SCDOBY4 = Short.parseShort(s);
} else {
SCDOBY4 = Short.MIN_VALUE;
}
}

protected final void initSCENV_BCON(String s) {
if (!s.trim().isEmpty()) {
SCENV_BCON = Byte.parseByte(s);
} else {
SCENV_BCON = Byte.MIN_VALUE;
}
}

protected final void initSCENV_BRIT(String s) {
if (!s.trim().isEmpty()) {
SCENV_BRIT = Byte.parseByte(s);
} else {
SCENV_BRIT = Byte.MIN_VALUE;
}
}

protected final void initSCENV_CCLS(String s) {
if (!s.trim().isEmpty()) {
SCENV_CCLS = Byte.parseByte(s);
} else {
SCENV_CCLS = Byte.MIN_VALUE;
}
}

protected final void initSCENV_CFIT(String s) {
if (!s.trim().isEmpty()) {
SCENV_CFIT = Byte.parseByte(s);
} else {
SCENV_CFIT = Byte.MIN_VALUE;
}
}

protected final void initSCENV_CHWO(String s) {
if (!s.trim().isEmpty()) {
SCENV_CHWO = Byte.parseByte(s);
} else {
SCENV_CHWO = Byte.MIN_VALUE;
}
}

protected final void initSCENV_CRLF(String s) {
if (!s.trim().isEmpty()) {
SCENV_CRLF = Byte.parseByte(s);
} else {
SCENV_CRLF = Byte.MIN_VALUE;
}
}

protected final void initSCENV_DSTR(String s) {
if (!s.trim().isEmpty()) {
SCENV_DSTR = Byte.parseByte(s);
} else {
SCENV_DSTR = Byte.MIN_VALUE;
}
}

protected final void initSCENV_EXAG(String s) {
if (!s.trim().isEmpty()) {
SCENV_EXAG = Byte.parseByte(s);
} else {
SCENV_EXAG = Byte.MIN_VALUE;
}
}

protected final void initSCENV_FTST(String s) {
if (!s.trim().isEmpty()) {
SCENV_FTST = Byte.parseByte(s);
} else {
SCENV_FTST = Byte.MIN_VALUE;
}
}

protected final void initSCENV_FUTR(String s) {
if (!s.trim().isEmpty()) {
SCENV_FUTR = Byte.parseByte(s);
} else {
SCENV_FUTR = Byte.MIN_VALUE;
}
}

protected final void initSCENV_GRN(String s) {
if (!s.trim().isEmpty()) {
SCENV_GRN = Byte.parseByte(s);
} else {
SCENV_GRN = Byte.MIN_VALUE;
}
}

protected final void initSCENV_PMRE(String s) {
if (!s.trim().isEmpty()) {
SCENV_PMRE = Byte.parseByte(s);
} else {
SCENV_PMRE = Byte.MIN_VALUE;
}
}

protected final void initSCFLAG_DV(String s) {
if (!s.trim().isEmpty()) {
SCFLAG_DV = Byte.parseByte(s);
} else {
SCFLAG_DV = Byte.MIN_VALUE;
}
}

protected final void initSCHLLOC(String s) {
if (!s.trim().isEmpty()) {
SCHLLOC = Byte.parseByte(s);
} else {
SCHLLOC = Byte.MIN_VALUE;
}
}

protected final void initSCHRS_SLPH(String s) {
if (!s.trim().isEmpty()) {
SCHRS_SLPH = Byte.parseByte(s);
} else {
SCHRS_SLPH = Byte.MIN_VALUE;
}
}

protected final void initSCHRS_SLPM(String s) {
if (!s.trim().isEmpty()) {
SCHRS_SLPM = Byte.parseByte(s);
} else {
SCHRS_SLPM = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT1(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT1 = Byte.parseByte(s);
} else {
SCLFSAT1 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT2(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT2 = Byte.parseByte(s);
} else {
SCLFSAT2 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT7(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT7 = Byte.parseByte(s);
} else {
SCLFSAT7 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSATO(String s) {
if (!s.trim().isEmpty()) {
SCLFSATO = Byte.parseByte(s);
} else {
SCLFSATO = Byte.MIN_VALUE;
}
}

protected final void initSCMED_SLP(String s) {
if (!s.trim().isEmpty()) {
SCMED_SLP = Byte.parseByte(s);
} else {
SCMED_SLP = Byte.MIN_VALUE;
}
}

protected final void initSCMOLWP(String s) {
if (!s.trim().isEmpty()) {
SCMOLWP = Byte.parseByte(s);
} else {
SCMOLWP = Byte.MIN_VALUE;
}
}

protected final void initSCOPECL200(String s) {
if (!s.trim().isEmpty()) {
SCOPECL200 = Byte.parseByte(s);
} else {
SCOPECL200 = Byte.MIN_VALUE;
}
}

protected final void initSCOPECL30(String s) {
if (!s.trim().isEmpty()) {
SCOPECL30 = Byte.parseByte(s);
} else {
SCOPECL30 = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHA(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHA = Byte.parseByte(s);
} else {
SCOPNGBHA = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHB(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHB = Byte.parseByte(s);
} else {
SCOPNGBHB = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHC(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHC = Byte.parseByte(s);
} else {
SCOPNGBHC = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHD(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHD = Byte.parseByte(s);
} else {
SCOPNGBHD = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHE(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHE = Byte.parseByte(s);
} else {
SCOPNGBHE = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHF(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHF = Byte.parseByte(s);
} else {
SCOPNGBHF = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHG(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHG = Byte.parseByte(s);
} else {
SCOPNGBHG = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHH(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHH = Byte.parseByte(s);
} else {
SCOPNGBHH = Byte.MIN_VALUE;
}
}

protected final void initSCPAROUTINT(String s) {
if (!s.trim().isEmpty()) {
SCPAROUTINT = Byte.parseByte(s);
} else {
SCPAROUTINT = Byte.MIN_VALUE;
}
}

protected final void initSCRELHAPPY(String s) {
if (!s.trim().isEmpty()) {
SCRELHAPPY = Byte.parseByte(s);
} else {
SCRELHAPPY = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARAR(String s) {
if (!s.trim().isEmpty()) {
SCRELPARAR = Byte.parseByte(s);
} else {
SCRELPARAR = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARCD(String s) {
if (!s.trim().isEmpty()) {
SCRELPARCD = Byte.parseByte(s);
} else {
SCRELPARCD = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARDS(String s) {
if (!s.trim().isEmpty()) {
SCRELPARDS = Byte.parseByte(s);
} else {
SCRELPARDS = Byte.MIN_VALUE;
}
}

protected final void initSCRELPAREI(String s) {
if (!s.trim().isEmpty()) {
SCRELPAREI = Byte.parseByte(s);
} else {
SCRELPAREI = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARIR(String s) {
if (!s.trim().isEmpty()) {
SCRELPARIR = Byte.parseByte(s);
} else {
SCRELPARIR = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARKS(String s) {
if (!s.trim().isEmpty()) {
SCRELPARKS = Byte.parseByte(s);
} else {
SCRELPARKS = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARRG(String s) {
if (!s.trim().isEmpty()) {
SCRELPARRG = Byte.parseByte(s);
} else {
SCRELPARRG = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARWT(String s) {
if (!s.trim().isEmpty()) {
SCRELPARWT = Byte.parseByte(s);
} else {
SCRELPARWT = Byte.MIN_VALUE;
}
}

protected final void initSCRISKA(String s) {
if (!s.trim().isEmpty()) {
SCRISKA = Byte.parseByte(s);
} else {
SCRISKA = Byte.MIN_VALUE;
}
}

protected final void initSCRISKB(String s) {
if (!s.trim().isEmpty()) {
SCRISKB = Byte.parseByte(s);
} else {
SCRISKB = Byte.MIN_VALUE;
}
}

protected final void initSCSEX(String s) {
if (!s.trim().isEmpty()) {
SCSEX = Byte.parseByte(s);
} else {
SCSEX = Byte.MIN_VALUE;
}
}

protected final void initSCSLP_QUAL(String s) {
if (!s.trim().isEmpty()) {
SCSLP_QUAL = Byte.parseByte(s);
} else {
SCSLP_QUAL = Byte.MIN_VALUE;
}
}

protected final void initSCTRUST(String s) {
if (!s.trim().isEmpty()) {
SCTRUST = Byte.parseByte(s);
} else {
SCTRUST = Byte.MIN_VALUE;
}
}

protected final void initSCTSLP_30M(String s) {
if (!s.trim().isEmpty()) {
SCTSLP_30M = Byte.parseByte(s);
} else {
SCTSLP_30M = Byte.MIN_VALUE;
}
}

protected final void initSCTSLP_CGH(String s) {
if (!s.trim().isEmpty()) {
SCTSLP_CGH = Byte.parseByte(s);
} else {
SCTSLP_CGH = Byte.MIN_VALUE;
}
}

protected final void initSCTSLP_WAK(String s) {
if (!s.trim().isEmpty()) {
SCTSLP_WAK = Byte.parseByte(s);
} else {
SCTSLP_WAK = Byte.MIN_VALUE;
}
}

protected final void initSCTSTAWK(String s) {
if (!s.trim().isEmpty()) {
SCTSTAWK = Byte.parseByte(s);
} else {
SCTSTAWK = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBA(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBA = Byte.parseByte(s);
} else {
SCWEMWBA = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBB(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBB = Byte.parseByte(s);
} else {
SCWEMWBB = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBC(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBC = Byte.parseByte(s);
} else {
SCWEMWBC = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBD(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBD = Byte.parseByte(s);
} else {
SCWEMWBD = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBE(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBE = Byte.parseByte(s);
} else {
SCWEMWBE = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBF(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBF = Byte.parseByte(s);
} else {
SCWEMWBF = Byte.MIN_VALUE;
}
}

protected final void initSCWEMWBG(String s) {
if (!s.trim().isEmpty()) {
SCWEMWBG = Byte.parseByte(s);
} else {
SCWEMWBG = Byte.MIN_VALUE;
}
}

protected final void initSECJOB_TM(String s) {
if (!s.trim().isEmpty()) {
SECJOB_TM = Integer.parseInt(s);
} else {
SECJOB_TM = Integer.MIN_VALUE;
}
}

protected final void initSEEARNGRS_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_DV = Double.parseDouble(s);
} else {
SEEARNGRS_DV = Double.NaN;
}
}

protected final void initSEEARNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_IF = Byte.parseByte(s);
} else {
SEEARNGRS_IF = Byte.MIN_VALUE;
}
}

protected final void initSEEARNNET_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNNET_DV = Double.parseDouble(s);
} else {
SEEARNNET_DV = Double.NaN;
}
}

protected final void initSEEKID(String s) {
if (!s.trim().isEmpty()) {
SEEKID = Byte.parseByte(s);
} else {
SEEKID = Byte.MIN_VALUE;
}
}

protected final void initSELFEMP_TM(String s) {
if (!s.trim().isEmpty()) {
SELFEMP_TM = Integer.parseInt(s);
} else {
SELFEMP_TM = Integer.MIN_VALUE;
}
}

protected final void initSEX_DV(String s) {
if (!s.trim().isEmpty()) {
SEX_DV = Byte.parseByte(s);
} else {
SEX_DV = Byte.MIN_VALUE;
}
}

protected final void initSF1(String s) {
if (!s.trim().isEmpty()) {
SF1 = Byte.parseByte(s);
} else {
SF1 = Byte.MIN_VALUE;
}
}

protected final void initSF12MCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12MCS_DV = Double.parseDouble(s);
} else {
SF12MCS_DV = Double.NaN;
}
}

protected final void initSF12PCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12PCS_DV = Double.parseDouble(s);
} else {
SF12PCS_DV = Double.NaN;
}
}

protected final void initSF2A(String s) {
if (!s.trim().isEmpty()) {
SF2A = Byte.parseByte(s);
} else {
SF2A = Byte.MIN_VALUE;
}
}

protected final void initSF2B(String s) {
if (!s.trim().isEmpty()) {
SF2B = Byte.parseByte(s);
} else {
SF2B = Byte.MIN_VALUE;
}
}

protected final void initSF3A(String s) {
if (!s.trim().isEmpty()) {
SF3A = Byte.parseByte(s);
} else {
SF3A = Byte.MIN_VALUE;
}
}

protected final void initSF3B(String s) {
if (!s.trim().isEmpty()) {
SF3B = Byte.parseByte(s);
} else {
SF3B = Byte.MIN_VALUE;
}
}

protected final void initSF4A(String s) {
if (!s.trim().isEmpty()) {
SF4A = Byte.parseByte(s);
} else {
SF4A = Byte.MIN_VALUE;
}
}

protected final void initSF4B(String s) {
if (!s.trim().isEmpty()) {
SF4B = Byte.parseByte(s);
} else {
SF4B = Byte.MIN_VALUE;
}
}

protected final void initSF5(String s) {
if (!s.trim().isEmpty()) {
SF5 = Byte.parseByte(s);
} else {
SF5 = Byte.MIN_VALUE;
}
}

protected final void initSF6A(String s) {
if (!s.trim().isEmpty()) {
SF6A = Byte.parseByte(s);
} else {
SF6A = Byte.MIN_VALUE;
}
}

protected final void initSF6B(String s) {
if (!s.trim().isEmpty()) {
SF6B = Byte.parseByte(s);
} else {
SF6B = Byte.MIN_VALUE;
}
}

protected final void initSF6C(String s) {
if (!s.trim().isEmpty()) {
SF6C = Byte.parseByte(s);
} else {
SF6C = Byte.MIN_VALUE;
}
}

protected final void initSF7(String s) {
if (!s.trim().isEmpty()) {
SF7 = Byte.parseByte(s);
} else {
SF7 = Byte.MIN_VALUE;
}
}

protected final void initSINGLE_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
SINGLE_DV = false;
} else {
SINGLE_DV = true;
}
}
}

protected final void initSLAPKID(String s) {
if (!s.trim().isEmpty()) {
SLAPKID = Byte.parseByte(s);
} else {
SLAPKID = Byte.MIN_VALUE;
}
}

protected final void initSMAID(String s) {
if (!s.trim().isEmpty()) {
SMAID = Byte.parseByte(s);
} else {
SMAID = Byte.MIN_VALUE;
}
}

protected final void initSOCIALKID(String s) {
if (!s.trim().isEmpty()) {
SOCIALKID = Byte.parseByte(s);
} else {
SOCIALKID = Byte.MIN_VALUE;
}
}

protected final void initSPAID(String s) {
if (!s.trim().isEmpty()) {
SPAID = Byte.parseByte(s);
} else {
SPAID = Byte.MIN_VALUE;
}
}

protected final void initSPKDIF(String s) {
if (!s.trim().isEmpty()) {
SPKDIF = Byte.parseByte(s);
} else {
SPKDIF = Byte.MIN_VALUE;
}
}

protected final void initSPPID(String s) {
if (!s.trim().isEmpty()) {
SPPID = Integer.parseInt(s);
} else {
SPPID = Integer.MIN_VALUE;
}
}

protected final void initSPPNO(String s) {
if (!s.trim().isEmpty()) {
SPPNO = Byte.parseByte(s);
} else {
SPPNO = Byte.MIN_VALUE;
}
}

protected final void initSTABLE_TM(String s) {
if (!s.trim().isEmpty()) {
STABLE_TM = Integer.parseInt(s);
} else {
STABLE_TM = Integer.MIN_VALUE;
}
}

protected final void initSTRATA(String s) {
if (!s.trim().isEmpty()) {
STRATA = Short.parseShort(s);
} else {
STRATA = Short.MIN_VALUE;
}
}

protected final void initSUSP(String s) {
if (!s.trim().isEmpty()) {
SUSP = Byte.parseByte(s);
} else {
SUSP = Byte.MIN_VALUE;
}
}

protected final void initSWEMWBS_DV(String s) {
if (!s.trim().isEmpty()) {
SWEMWBS_DV = Byte.parseByte(s);
} else {
SWEMWBS_DV = Byte.MIN_VALUE;
}
}

protected final void initTALKMATTER(String s) {
if (!s.trim().isEmpty()) {
TALKMATTER = Byte.parseByte(s);
} else {
TALKMATTER = Byte.MIN_VALUE;
}
}

protected final void initTELDIF(String s) {
if (!s.trim().isEmpty()) {
TELDIF = Byte.parseByte(s);
} else {
TELDIF = Byte.MIN_VALUE;
}
}

protected final void initTRAINDENY(String s) {
if (!s.trim().isEmpty()) {
TRAINDENY = Byte.parseByte(s);
} else {
TRAINDENY = Byte.MIN_VALUE;
}
}

protected final void initUKBORN(String s) {
if (!s.trim().isEmpty()) {
UKBORN = Byte.parseByte(s);
} else {
UKBORN = Byte.MIN_VALUE;
}
}

protected final void initUNDQUS(String s) {
if (!s.trim().isEmpty()) {
UNDQUS = Byte.parseByte(s);
} else {
UNDQUS = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEW11(String s) {
if (!s.trim().isEmpty()) {
UNSAFEW11 = Byte.parseByte(s);
} else {
UNSAFEW11 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEW12(String s) {
if (!s.trim().isEmpty()) {
UNSAFEW12 = Byte.parseByte(s);
} else {
UNSAFEW12 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEW13(String s) {
if (!s.trim().isEmpty()) {
UNSAFEW13 = Byte.parseByte(s);
} else {
UNSAFEW13 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEW14(String s) {
if (!s.trim().isEmpty()) {
UNSAFEW14 = Byte.parseByte(s);
} else {
UNSAFEW14 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEW15(String s) {
if (!s.trim().isEmpty()) {
UNSAFEW15 = Byte.parseByte(s);
} else {
UNSAFEW15 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEW16(String s) {
if (!s.trim().isEmpty()) {
UNSAFEW16 = Byte.parseByte(s);
} else {
UNSAFEW16 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEW17(String s) {
if (!s.trim().isEmpty()) {
UNSAFEW17 = Byte.parseByte(s);
} else {
UNSAFEW17 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEW196(String s) {
if (!s.trim().isEmpty()) {
UNSAFEW196 = Byte.parseByte(s);
} else {
UNSAFEW196 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEW197(String s) {
if (!s.trim().isEmpty()) {
UNSAFEW197 = Byte.parseByte(s);
} else {
UNSAFEW197 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE_DV(String s) {
if (!s.trim().isEmpty()) {
UNSAFE_DV = Byte.parseByte(s);
} else {
UNSAFE_DV = Byte.MIN_VALUE;
}
}

protected final void initURBAN_DV(String s) {
if (!s.trim().isEmpty()) {
URBAN_DV = Byte.parseByte(s);
} else {
URBAN_DV = Byte.MIN_VALUE;
}
}

protected final void initVOTE1(String s) {
if (!s.trim().isEmpty()) {
VOTE1 = Short.parseShort(s);
} else {
VOTE1 = Short.MIN_VALUE;
}
}

protected final void initVOTE2(String s) {
if (!s.trim().isEmpty()) {
VOTE2 = Short.parseShort(s);
} else {
VOTE2 = Short.MIN_VALUE;
}
}

protected final void initVOTE3(String s) {
if (!s.trim().isEmpty()) {
VOTE3 = Short.parseShort(s);
} else {
VOTE3 = Short.MIN_VALUE;
}
}

protected final void initVOTE4(String s) {
if (!s.trim().isEmpty()) {
VOTE4 = Short.parseShort(s);
} else {
VOTE4 = Short.MIN_VALUE;
}
}

protected final void initVOTE5(String s) {
if (!s.trim().isEmpty()) {
VOTE5 = Short.parseShort(s);
} else {
VOTE5 = Short.MIN_VALUE;
}
}

protected final void initVOTE6(String s) {
if (!s.trim().isEmpty()) {
VOTE6 = Short.parseShort(s);
} else {
VOTE6 = Short.MIN_VALUE;
}
}

protected final void initWEKID(String s) {
if (!s.trim().isEmpty()) {
WEKID = Byte.parseByte(s);
} else {
WEKID = Byte.MIN_VALUE;
}
}

protected final void initWLSH1(String s) {
if (!s.trim().isEmpty()) {
WLSH1 = Byte.parseByte(s);
} else {
WLSH1 = Byte.MIN_VALUE;
}
}

protected final void initWLSH2(String s) {
if (!s.trim().isEmpty()) {
WLSH2 = Byte.parseByte(s);
} else {
WLSH2 = Byte.MIN_VALUE;
}
}

protected final void initWLSH3(String s) {
if (!s.trim().isEmpty()) {
WLSH3 = Byte.parseByte(s);
} else {
WLSH3 = Byte.MIN_VALUE;
}
}

protected final void initWLSH4(String s) {
if (!s.trim().isEmpty()) {
WLSH4 = Byte.parseByte(s);
} else {
WLSH4 = Byte.MIN_VALUE;
}
}

protected final void initWLSH96(String s) {
if (!s.trim().isEmpty()) {
WLSH96 = Byte.parseByte(s);
} else {
WLSH96 = Byte.MIN_VALUE;
}
}

protected final void initWLSHUA(String s) {
if (!s.trim().isEmpty()) {
WLSHUA = Byte.parseByte(s);
} else {
WLSHUA = Byte.MIN_VALUE;
}
}

protected final void initWLSHUB(String s) {
if (!s.trim().isEmpty()) {
WLSHUB = Byte.parseByte(s);
} else {
WLSHUB = Byte.MIN_VALUE;
}
}

protected final void initWLSHUC(String s) {
if (!s.trim().isEmpty()) {
WLSHUC = Byte.parseByte(s);
} else {
WLSHUC = Byte.MIN_VALUE;
}
}

protected final void initWLSHUD(String s) {
if (!s.trim().isEmpty()) {
WLSHUD = Byte.parseByte(s);
} else {
WLSHUD = Byte.MIN_VALUE;
}
}

protected final void initWLSHUE(String s) {
if (!s.trim().isEmpty()) {
WLSHUE = Byte.parseByte(s);
} else {
WLSHUE = Byte.MIN_VALUE;
}
}

protected final void initWORKDIS(String s) {
if (!s.trim().isEmpty()) {
WORKDIS = Short.parseShort(s);
} else {
WORKDIS = Short.MIN_VALUE;
}
}

protected final void initWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
WORKTRAV = Byte.parseByte(s);
} else {
WORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initXPMOVE(String s) {
if (!s.trim().isEmpty()) {
XPMOVE = Byte.parseByte(s);
} else {
XPMOVE = Byte.MIN_VALUE;
}
}

protected final void initXTRA5MIN_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MIN_DV = Byte.parseByte(s);
} else {
XTRA5MIN_DV = Byte.MIN_VALUE;
}
}

protected final void initYELLKID(String s) {
if (!s.trim().isEmpty()) {
YELLKID = Byte.parseByte(s);
} else {
YELLKID = Byte.MIN_VALUE;
}
}

protected final void initYNLP14(String s) {
if (!s.trim().isEmpty()) {
YNLP14 = Byte.parseByte(s);
} else {
YNLP14 = Byte.MIN_VALUE;
}
}

public byte getADOPTCH01() {
return ADOPTCH01;
}

public byte getADOPTCH02() {
return ADOPTCH02;
}

public byte getADOPTCH03() {
return ADOPTCH03;
}

public byte getADOPTCH04() {
return ADOPTCH04;
}

public byte getADOPTCH05() {
return ADOPTCH05;
}

public byte getADOPTCH06() {
return ADOPTCH06;
}

public boolean getADOPTCH07() {
return ADOPTCH07;
}

public boolean getADOPTCH08() {
return ADOPTCH08;
}

public boolean getADOPTCH09() {
return ADOPTCH09;
}

public boolean getADOPTCH10() {
return ADOPTCH10;
}

public boolean getADOPTCH11() {
return ADOPTCH11;
}

public boolean getADOPTCH12() {
return ADOPTCH12;
}

public boolean getADOPTCH13() {
return ADOPTCH13;
}

public boolean getADOPTCH14() {
return ADOPTCH14;
}

public boolean getADOPTCH15() {
return ADOPTCH15;
}

public boolean getADOPTCH16() {
return ADOPTCH16;
}

public byte getADRESP17() {
return ADRESP17;
}

public byte getAGEEST() {
return AGEEST;
}

public byte getAGEGR10_DV() {
return AGEGR10_DV;
}

public byte getAGEGR13_DV() {
return AGEGR13_DV;
}

public byte getAGEGR5_DV() {
return AGEGR5_DV;
}

public byte getAGELH() {
return AGELH;
}

public short getAGE_DV() {
return AGE_DV;
}

public byte getAIDEFT() {
return AIDEFT;
}

public short getAIDHU1() {
return AIDHU1;
}

public short getAIDHU2() {
return AIDHU2;
}

public byte getAIDHUA1() {
return AIDHUA1;
}

public byte getAIDHUA10() {
return AIDHUA10;
}

public byte getAIDHUA11() {
return AIDHUA11;
}

public byte getAIDHUA12() {
return AIDHUA12;
}

public byte getAIDHUA13() {
return AIDHUA13;
}

public byte getAIDHUA14() {
return AIDHUA14;
}

public byte getAIDHUA15() {
return AIDHUA15;
}

public byte getAIDHUA16() {
return AIDHUA16;
}

public byte getAIDHUA2() {
return AIDHUA2;
}

public byte getAIDHUA3() {
return AIDHUA3;
}

public byte getAIDHUA4() {
return AIDHUA4;
}

public byte getAIDHUA5() {
return AIDHUA5;
}

public byte getAIDHUA6() {
return AIDHUA6;
}

public byte getAIDHUA7() {
return AIDHUA7;
}

public byte getAIDHUA8() {
return AIDHUA8;
}

public byte getAIDHUA9() {
return AIDHUA9;
}

public byte getALLCH01() {
return ALLCH01;
}

public byte getALLCH02() {
return ALLCH02;
}

public byte getALLCH03() {
return ALLCH03;
}

public byte getALLCH04() {
return ALLCH04;
}

public byte getALLCH05() {
return ALLCH05;
}

public byte getALLCH06() {
return ALLCH06;
}

public byte getALLCH07() {
return ALLCH07;
}

public byte getALLCH08() {
return ALLCH08;
}

public byte getALLCH09() {
return ALLCH09;
}

public byte getALLCH10() {
return ALLCH10;
}

public boolean getALLCH11() {
return ALLCH11;
}

public boolean getALLCH12() {
return ALLCH12;
}

public boolean getALLCH13() {
return ALLCH13;
}

public boolean getALLCH14() {
return ALLCH14;
}

public boolean getALLCH15() {
return ALLCH15;
}

public boolean getALLCH16() {
return ALLCH16;
}

public byte getATTACKEDW11() {
return ATTACKEDW11;
}

public byte getATTACKEDW12() {
return ATTACKEDW12;
}

public byte getATTACKEDW13() {
return ATTACKEDW13;
}

public byte getATTACKEDW14() {
return ATTACKEDW14;
}

public byte getATTACKEDW15() {
return ATTACKEDW15;
}

public byte getATTACKEDW16() {
return ATTACKEDW16;
}

public byte getATTACKEDW17() {
return ATTACKEDW17;
}

public byte getATTACKEDW196() {
return ATTACKEDW196;
}

public byte getATTACKEDW197() {
return ATTACKEDW197;
}

public byte getATTACKED_DV() {
return ATTACKED_DV;
}

public byte getAVOIDANCEW11() {
return AVOIDANCEW11;
}

public byte getAVOIDANCEW12() {
return AVOIDANCEW12;
}

public byte getAVOIDANCEW13() {
return AVOIDANCEW13;
}

public byte getAVOIDANCEW14() {
return AVOIDANCEW14;
}

public byte getAVOIDANCEW15() {
return AVOIDANCEW15;
}

public byte getAVOIDANCEW16() {
return AVOIDANCEW16;
}

public byte getAVOIDANCEW17() {
return AVOIDANCEW17;
}

public byte getAVOIDANCEW196() {
return AVOIDANCEW196;
}

public byte getAVOIDANCEW197() {
return AVOIDANCEW197;
}

public byte getAVOIDED_DV() {
return AVOIDED_DV;
}

protected double BASNSA() {
return BASNSA;
}

protected double BASRATE() {
return BASRATE;
}

public byte getBASREST() {
return BASREST;
}

public byte getBENCB() {
return BENCB;
}

public byte getBENCTC() {
return BENCTC;
}

public byte getBENDIS1() {
return BENDIS1;
}

public byte getBENDIS10() {
return BENDIS10;
}

public byte getBENDIS11() {
return BENDIS11;
}

public byte getBENDIS2() {
return BENDIS2;
}

public byte getBENDIS3() {
return BENDIS3;
}

public byte getBENDIS4() {
return BENDIS4;
}

public byte getBENDIS5() {
return BENDIS5;
}

public byte getBENDIS6() {
return BENDIS6;
}

public byte getBENDIS7() {
return BENDIS7;
}

public byte getBENDIS8() {
return BENDIS8;
}

public byte getBENDIS9() {
return BENDIS9;
}

public byte getBENDIS96() {
return BENDIS96;
}

public int getBENEFIT_TM() {
return BENEFIT_TM;
}

public byte getBENFAM1() {
return BENFAM1;
}

public byte getBENFAM2() {
return BENFAM2;
}

public byte getBENFAM3() {
return BENFAM3;
}

public byte getBENFAM4() {
return BENFAM4;
}

public byte getBENFAM5() {
return BENFAM5;
}

public byte getBENFAM96() {
return BENFAM96;
}

public byte getBENHOU1() {
return BENHOU1;
}

public byte getBENHOU2() {
return BENHOU2;
}

public byte getBENHOU3() {
return BENHOU3;
}

public byte getBENHOU4() {
return BENHOU4;
}

public byte getBENHOU96() {
return BENHOU96;
}

public byte getBENPEN1() {
return BENPEN1;
}

public byte getBENPEN2() {
return BENPEN2;
}

public byte getBENPEN3() {
return BENPEN3;
}

public byte getBENPEN4() {
return BENPEN4;
}

public byte getBENPEN5() {
return BENPEN5;
}

public byte getBENPEN6() {
return BENPEN6;
}

public byte getBENPEN7() {
return BENPEN7;
}

public byte getBENPEN8() {
return BENPEN8;
}

public byte getBENPEN96() {
return BENPEN96;
}

public byte getBENSTA1() {
return BENSTA1;
}

public byte getBENSTA2() {
return BENSTA2;
}

public byte getBENSTA3() {
return BENSTA3;
}

public byte getBENSTA4() {
return BENSTA4;
}

public byte getBENSTA5() {
return BENSTA5;
}

public byte getBENSTA6() {
return BENSTA6;
}

public byte getBENSTA7() {
return BENSTA7;
}

public byte getBENSTA8() {
return BENSTA8;
}

public byte getBENSTA96() {
return BENSTA96;
}

public byte getBENTAX1() {
return BENTAX1;
}

public byte getBENTAX2() {
return BENTAX2;
}

public byte getBENTAX3() {
return BENTAX3;
}

public byte getBENTAX4() {
return BENTAX4;
}

public byte getBENTAX5() {
return BENTAX5;
}

public byte getBENTAX96() {
return BENTAX96;
}

public byte getBENUNEMP1() {
return BENUNEMP1;
}

public byte getBENUNEMP2() {
return BENUNEMP2;
}

public byte getBENUNEMP96() {
return BENUNEMP96;
}

public short getBIRTHY() {
return BIRTHY;
}

protected double BMI_DV() {
return BMI_DV;
}

public byte getBRITID() {
return BRITID;
}

public byte getBTYPE1() {
return BTYPE1;
}

public byte getBTYPE2() {
return BTYPE2;
}

public byte getBTYPE3() {
return BTYPE3;
}

public byte getBTYPE4() {
return BTYPE4;
}

public byte getBTYPE5() {
return BTYPE5;
}

public byte getBTYPE6() {
return BTYPE6;
}

public byte getBTYPE7() {
return BTYPE7;
}

public byte getBTYPE8() {
return BTYPE8;
}

public byte getBTYPE9() {
return BTYPE9;
}

public byte getBTYPE96() {
return BTYPE96;
}

public byte getBUNO_DV() {
return BUNO_DV;
}

public int getCARING_TM() {
return CARING_TM;
}

public int getCARMILES() {
return CARMILES;
}

public byte getCCARE() {
return CCARE;
}

public byte getCCWORK() {
return CCWORK;
}

public short getCH1BY4() {
return CH1BY4;
}

public byte getCHCON() {
return CHCON;
}

public byte getCHFAR() {
return CHFAR;
}

public int getCHILDCARE_TM() {
return CHILDCARE_TM;
}

public byte getCHSEE() {
return CHSEE;
}

public byte getCITZN1() {
return CITZN1;
}

public byte getCITZN2() {
return CITZN2;
}

public byte getCITZN3() {
return CITZN3;
}

public boolean getCOHAB_DV() {
return COHAB_DV;
}

public int getCONSENT_TM() {
return CONSENT_TM;
}

public byte getCOUNTRY() {
return COUNTRY;
}

public byte getCTADD1_CODE() {
return CTADD1_CODE;
}

public byte getCTADD2_CODE() {
return CTADD2_CODE;
}

public byte getCTCNTY_CODE() {
return CTCNTY_CODE;
}

public byte getCTEMAIL_CODE() {
return CTEMAIL_CODE;
}

public byte getCTPCODE_CODE() {
return CTPCODE_CODE;
}

public byte getCTTEL1_CODE() {
return CTTEL1_CODE;
}

public byte getCTTEL2_CODE() {
return CTTEL2_CODE;
}

public byte getCTTOWN_CODE() {
return CTTOWN_CODE;
}

public byte getCUDDLEKID() {
return CUDDLEKID;
}

public int getDEMOG_TM() {
return DEMOG_TM;
}

public boolean getDEPCHL_DV() {
return DEPCHL_DV;
}

public byte getDINNER() {
return DINNER;
}

public int getDISCRIMINATION_TM() {
return DISCRIMINATION_TM;
}

public byte getDISDIF1() {
return DISDIF1;
}

public byte getDISDIF10() {
return DISDIF10;
}

public byte getDISDIF11() {
return DISDIF11;
}

public byte getDISDIF12() {
return DISDIF12;
}

public byte getDISDIF2() {
return DISDIF2;
}

public byte getDISDIF3() {
return DISDIF3;
}

public byte getDISDIF4() {
return DISDIF4;
}

public byte getDISDIF5() {
return DISDIF5;
}

public byte getDISDIF6() {
return DISDIF6;
}

public byte getDISDIF7() {
return DISDIF7;
}

public byte getDISDIF8() {
return DISDIF8;
}

public byte getDISDIF9() {
return DISDIF9;
}

public byte getDISDIF96() {
return DISDIF96;
}

public short getDOBY_DV() {
return DOBY_DV;
}

public byte getDRIVE() {
return DRIVE;
}

public byte getDVAGE() {
return DVAGE;
}

public byte getEDASP() {
return EDASP;
}

public byte getEDLINKB() {
return EDLINKB;
}

public short getEDTYPE() {
return EDTYPE;
}

public byte getEED12() {
return EED12;
}

public boolean getEMBOOST() {
return EMBOOST;
}

public byte getEMPLOY() {
return EMPLOY;
}

public int getEMPLOYMENT_TM() {
return EMPLOYMENT_TM;
}

public int getEMPSTAT_TM() {
return EMPSTAT_TM;
}

public byte getENGFORM() {
return ENGFORM;
}

public byte getENGLANG() {
return ENGLANG;
}

public byte getENGREAD() {
return ENGREAD;
}

public byte getENGSPK() {
return ENGSPK;
}

public byte getENGTEL() {
return ENGTEL;
}

public byte getENVHABIT1() {
return ENVHABIT1;
}

public byte getENVHABIT10() {
return ENVHABIT10;
}

public byte getENVHABIT11() {
return ENVHABIT11;
}

public byte getENVHABIT2() {
return ENVHABIT2;
}

public byte getENVHABIT3() {
return ENVHABIT3;
}

public byte getENVHABIT4() {
return ENVHABIT4;
}

public byte getENVHABIT5() {
return ENVHABIT5;
}

public byte getENVHABIT6() {
return ENVHABIT6;
}

public byte getENVHABIT7() {
return ENVHABIT7;
}

public byte getENVHABIT8() {
return ENVHABIT8;
}

public byte getENVHABIT9() {
return ENVHABIT9;
}

public int getENVIRON_TM() {
return ENVIRON_TM;
}

public byte getETHNIC1() {
return ETHNIC1;
}

public byte getETHNIC10() {
return ETHNIC10;
}

public byte getETHNIC11() {
return ETHNIC11;
}

public byte getETHNIC12() {
return ETHNIC12;
}

public byte getETHNIC13() {
return ETHNIC13;
}

public byte getETHNIC14() {
return ETHNIC14;
}

public byte getETHNIC2() {
return ETHNIC2;
}

public byte getETHNIC3() {
return ETHNIC3;
}

public byte getETHNIC4() {
return ETHNIC4;
}

public byte getETHNIC5() {
return ETHNIC5;
}

public byte getETHNIC6() {
return ETHNIC6;
}

public byte getETHNIC7() {
return ETHNIC7;
}

public byte getETHNIC8() {
return ETHNIC8;
}

public byte getETHNIC9() {
return ETHNIC9;
}

public byte getETHNIC96() {
return ETHNIC96;
}

public int getETHNIC_TM() {
return ETHNIC_TM;
}

public byte getETHN_DV() {
return ETHN_DV;
}

public byte getEXTNSA() {
return EXTNSA;
}

protected double EXTRATE() {
return EXTRATE;
}

public byte getEXTREST() {
return EXTREST;
}

public int getFAMILY_TM() {
return FAMILY_TM;
}

public byte getFARKID() {
return FARKID;
}

public byte getFEDLIK() {
return FEDLIK;
}

public byte getFEDNT() {
return FEDNT;
}

public byte getFENOW() {
return FENOW;
}

public int getFERTILITY_TM() {
return FERTILITY_TM;
}

protected double FIBENOTHR_DV() {
return FIBENOTHR_DV;
}

protected double FIBENOTHR_IF() {
return FIBENOTHR_IF;
}

public byte getFIBENOTHR_TC() {
return FIBENOTHR_TC;
}

protected double FIMNGRS_IF() {
return FIMNGRS_IF;
}

public byte getFIMNGRS_TC() {
return FIMNGRS_TC;
}

protected double FIMNINVNET_DV() {
return FIMNINVNET_DV;
}

protected double FIMNLABGRS_IF() {
return FIMNLABGRS_IF;
}

public byte getFIMNLABGRS_TC() {
return FIMNLABGRS_TC;
}

protected double FIMNLABNET_DV() {
return FIMNLABNET_DV;
}

public byte getFIMNLABNET_TC() {
return FIMNLABNET_TC;
}

protected double FIMNMISC_DV() {
return FIMNMISC_DV;
}

protected double FIMNNET_DV() {
return FIMNNET_DV;
}

protected double FIMNPEN_DV() {
return FIMNPEN_DV;
}

protected double FIMNPRBEN_DV() {
return FIMNPRBEN_DV;
}

protected double FIMNSBEN_DV() {
return FIMNSBEN_DV;
}

public int getFINANCES_TM() {
return FINANCES_TM;
}

public byte getFINFUT() {
return FINFUT;
}

public int getFININT_TM() {
return FININT_TM;
}

public byte getFIYRDB1() {
return FIYRDB1;
}

public byte getFIYRDB2() {
return FIYRDB2;
}

public byte getFIYRDB3() {
return FIYRDB3;
}

public byte getFIYRDB4() {
return FIYRDB4;
}

public byte getFIYRDB5() {
return FIYRDB5;
}

public byte getFIYRDB6() {
return FIYRDB6;
}

public int getFIYRDIA() {
return FIYRDIA;
}

protected double FIYRINVINC_DV() {
return FIYRINVINC_DV;
}

public byte getFIYRINVINC_IF() {
return FIYRINVINC_IF;
}

public byte getFIYRINVINC_TC() {
return FIYRINVINC_TC;
}

public byte getFLAGLINK() {
return FLAGLINK;
}

public int getFNPID() {
return FNPID;
}

public byte getFNPNO() {
return FNPNO;
}

public int getFNSPID() {
return FNSPID;
}

public byte getFNSPNO() {
return FNSPNO;
}

public byte getFORMDIF() {
return FORMDIF;
}

public int getFTEXV() {
return FTEXV;
}

public byte getFTEXW() {
return FTEXW;
}

public boolean getGPCOMP() {
return GPCOMP;
}

public int getGRFPID() {
return GRFPID;
}

public byte getGRFPNO() {
return GRFPNO;
}

public int getGRMPID() {
return GRMPID;
}

public byte getGRMPNO() {
return GRMPNO;
}

public int getHARASSMENT_TM() {
return HARASSMENT_TM;
}

public byte getHCOND1() {
return HCOND1;
}

public byte getHCOND10() {
return HCOND10;
}

public byte getHCOND11() {
return HCOND11;
}

public byte getHCOND12() {
return HCOND12;
}

public byte getHCOND13() {
return HCOND13;
}

public byte getHCOND14() {
return HCOND14;
}

public byte getHCOND15() {
return HCOND15;
}

public byte getHCOND16() {
return HCOND16;
}

public byte getHCOND17() {
return HCOND17;
}

public byte getHCOND2() {
return HCOND2;
}

public byte getHCOND3() {
return HCOND3;
}

public byte getHCOND4() {
return HCOND4;
}

public byte getHCOND5() {
return HCOND5;
}

public byte getHCOND6() {
return HCOND6;
}

public byte getHCOND7() {
return HCOND7;
}

public byte getHCOND8() {
return HCOND8;
}

public byte getHCOND9() {
return HCOND9;
}

public byte getHCOND96() {
return HCOND96;
}

public byte getHCONDA01() {
return HCONDA01;
}

public byte getHCONDA02() {
return HCONDA02;
}

public byte getHCONDA03() {
return HCONDA03;
}

public byte getHCONDA04() {
return HCONDA04;
}

public byte getHCONDA05() {
return HCONDA05;
}

public byte getHCONDA06() {
return HCONDA06;
}

public byte getHCONDA07() {
return HCONDA07;
}

public byte getHCONDA08() {
return HCONDA08;
}

public byte getHCONDA09() {
return HCONDA09;
}

public byte getHCONDA10() {
return HCONDA10;
}

public byte getHCONDA11() {
return HCONDA11;
}

public byte getHCONDA12() {
return HCONDA12;
}

public byte getHCONDA13() {
return HCONDA13;
}

public byte getHCONDA14() {
return HCONDA14;
}

public byte getHCONDA15() {
return HCONDA15;
}

public byte getHCONDA16() {
return HCONDA16;
}

public byte getHCONDA17() {
return HCONDA17;
}

public byte getHCONDS01() {
return HCONDS01;
}

public byte getHCONDS02() {
return HCONDS02;
}

public byte getHCONDS03() {
return HCONDS03;
}

public byte getHCONDS04() {
return HCONDS04;
}

public byte getHCONDS05() {
return HCONDS05;
}

public boolean getHCONDS06() {
return HCONDS06;
}

public boolean getHCONDS07() {
return HCONDS07;
}

public byte getHCONDS08() {
return HCONDS08;
}

public byte getHCONDS09() {
return HCONDS09;
}

public byte getHCONDS10() {
return HCONDS10;
}

public byte getHCONDS11() {
return HCONDS11;
}

public byte getHCONDS12() {
return HCONDS12;
}

public byte getHCONDS13() {
return HCONDS13;
}

public byte getHCONDS14() {
return HCONDS14;
}

public byte getHCONDS15() {
return HCONDS15;
}

public byte getHCONDS16() {
return HCONDS16;
}

public byte getHCONDS17() {
return HCONDS17;
}

public byte getHEALTH() {
return HEALTH;
}

public byte getHEALTHLINK() {
return HEALTHLINK;
}

public int getHEALTH_TM() {
return HEALTH_TM;
}

public byte getHGADOPTF() {
return HGADOPTF;
}

public byte getHGADOPTM() {
return HGADOPTM;
}

public byte getHGPART() {
return HGPART;
}

public int getHHGRID_TM() {
return HHGRID_TM;
}

public int getHHQRE_TM() {
return HHQRE_TM;
}

public byte getHHRESP_DV() {
return HHRESP_DV;
}

public int getHHSTTIME_TM() {
return HHSTTIME_TM;
}

public byte getHHTYPE_DV() {
return HHTYPE_DV;
}

public byte getHLHT() {
return HLHT;
}

public short getHLHTC() {
return HLHTC;
}

public byte getHLHTF() {
return HLHTF;
}

public byte getHLHTI() {
return HLHTI;
}

public byte getHLPHMWK() {
return HLPHMWK;
}

public byte getHLWT() {
return HLWT;
}

public byte getHLWTE() {
return HLWTE;
}

public short getHLWTK() {
return HLWTK;
}

public byte getHLWTL() {
return HLWTL;
}

public byte getHLWTP() {
return HLWTP;
}

public byte getHLWTS() {
return HLWTS;
}

public short getHOWLNG() {
return HOWLNG;
}

public int getHRPID() {
return HRPID;
}

public byte getHRPNO() {
return HRPNO;
}

public byte getIENDDATMM() {
return IENDDATMM;
}

public byte getIENDDATSS() {
return IENDDATSS;
}

public byte getIMPEVENT1() {
return IMPEVENT1;
}

public byte getIMPEVENT1S() {
return IMPEVENT1S;
}

public byte getIMPEVENT2() {
return IMPEVENT2;
}

public byte getIMPEVENT2S() {
return IMPEVENT2S;
}

public byte getIMPEVENT3() {
return IMPEVENT3;
}

public byte getIMPEVENT3S() {
return IMPEVENT3S;
}

public byte getIMPEVENT4() {
return IMPEVENT4;
}

public byte getIMPEVENT4S() {
return IMPEVENT4S;
}

protected double IND5MUS_XW() {
return IND5MUS_XW;
}

protected double INDINUS_XW() {
return INDINUS_XW;
}

protected double INDPXUS_XW() {
return INDPXUS_XW;
}

protected double INDSCUS_XW() {
return INDSCUS_XW;
}

public int getINITIAL_TM() {
return INITIAL_TM;
}

public byte getINSULTEDW11() {
return INSULTEDW11;
}

public byte getINSULTEDW12() {
return INSULTEDW12;
}

public byte getINSULTEDW13() {
return INSULTEDW13;
}

public byte getINSULTEDW14() {
return INSULTEDW14;
}

public byte getINSULTEDW15() {
return INSULTEDW15;
}

public byte getINSULTEDW16() {
return INSULTEDW16;
}

public byte getINSULTEDW17() {
return INSULTEDW17;
}

public byte getINSULTEDW196() {
return INSULTEDW196;
}

public byte getINSULTEDW197() {
return INSULTEDW197;
}

public byte getINSULTED_DV() {
return INSULTED_DV;
}

public byte getINTDATD_DV() {
return INTDATD_DV;
}

public byte getINTDATM_DV() {
return INTDATM_DV;
}

public short getINTDATY_DV() {
return INTDATY_DV;
}

public byte getIOUTCOME() {
return IOUTCOME;
}

public byte getISTRTDATMM() {
return ISTRTDATMM;
}

public byte getISTRTDATSS() {
return ISTRTDATSS;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public byte getIVAFFCT11() {
return IVAFFCT11;
}

public byte getIVAFFCT12() {
return IVAFFCT12;
}

public byte getIVAFFCT13() {
return IVAFFCT13;
}

public byte getIVAFFCT14() {
return IVAFFCT14;
}

public byte getIVAFFCT15() {
return IVAFFCT15;
}

public byte getIVAFFCT17() {
return IVAFFCT17;
}

public byte getIVAFFCT21() {
return IVAFFCT21;
}

public byte getIVAFFCT22() {
return IVAFFCT22;
}

public byte getIVAFFCT23() {
return IVAFFCT23;
}

public byte getIVAFFCT27() {
return IVAFFCT27;
}

public byte getIVAFFCT30() {
return IVAFFCT30;
}

public byte getIVAFFCT97() {
return IVAFFCT97;
}

public byte getIVCOOP() {
return IVCOOP;
}

public byte getIVINFNCE() {
return IVINFNCE;
}

public byte getIVINTLANG() {
return IVINTLANG;
}

public byte getIVTRANS() {
return IVTRANS;
}

public byte getIVWHOINT() {
return IVWHOINT;
}

public byte getJ1NSSEC5_DV() {
return J1NSSEC5_DV;
}

public short getJ1SOC00_CC() {
return J1SOC00_CC;
}

public short getJ1SOC10_CC() {
return J1SOC10_CC;
}

public byte getJ1SOC90_CC() {
return J1SOC90_CC;
}

public int getJ2PAY() {
return J2PAY;
}

protected double J2PAYNET_DV() {
return J2PAYNET_DV;
}

public byte getJBES2000() {
return JBES2000;
}

public byte getJBIINDB_DV() {
return JBIINDB_DV;
}

public byte getJBNSSEC3_DV() {
return JBNSSEC3_DV;
}

public byte getJBNSSEC5_DV() {
return JBNSSEC5_DV;
}

public short getJBNSSEC_DV() {
return JBNSSEC_DV;
}

public byte getJBOFFY() {
return JBOFFY;
}

public short getJBPEN() {
return JBPEN;
}

public short getJBPENM() {
return JBPENM;
}

public short getJBRGSC_DV() {
return JBRGSC_DV;
}

public byte getJBSAT() {
return JBSAT;
}

public byte getJBSECTPUB() {
return JBSECTPUB;
}

public short getJBSEG_DV() {
return JBSEG_DV;
}

public byte getJBSIC07_CC() {
return JBSIC07_CC;
}

public short getJBSOC00_CC() {
return JBSOC00_CC;
}

public byte getJBSOCGR_DV() {
return JBSOCGR_DV;
}

public byte getJBTERM1() {
return JBTERM1;
}

public byte getJBTERM2() {
return JBTERM2;
}

public byte getJLENDM() {
return JLENDM;
}

public byte getJLES2000() {
return JLES2000;
}

public byte getJLIINDB_DV() {
return JLIINDB_DV;
}

public byte getJLNSSEC3_DV() {
return JLNSSEC3_DV;
}

public byte getJLNSSEC5_DV() {
return JLNSSEC5_DV;
}

public short getJLNSSEC_DV() {
return JLNSSEC_DV;
}

public short getJLRGSC_DV() {
return JLRGSC_DV;
}

public short getJLSEG_DV() {
return JLSEG_DV;
}

public byte getJLSIC07_CC() {
return JLSIC07_CC;
}

public short getJLSOC00_CC() {
return JLSOC00_CC;
}

public byte getJOBDENY() {
return JOBDENY;
}

public byte getJOBLOOK() {
return JOBLOOK;
}

public int getJOB_TM() {
return JOB_TM;
}

public byte getJSPART() {
return JSPART;
}

public int getJSPAYU() {
return JSPAYU;
}

public byte getJSPAYW() {
return JSPAYW;
}

public byte getJSPRLS() {
return JSPRLS;
}

public byte getJSPRNI() {
return JSPRNI;
}

public byte getJSPRTX() {
return JSPRTX;
}

public byte getJSPYNI() {
return JSPYNI;
}

public byte getJSPYTX() {
return JSPYTX;
}

public byte getJSTYPEB() {
return JSTYPEB;
}

public short getJSWORKDIS() {
return JSWORKDIS;
}

public byte getJSWORKTRAV() {
return JSWORKTRAV;
}

public short getJUBGN() {
return JUBGN;
}

public short getJULK4X1() {
return JULK4X1;
}

public short getJULK4X2() {
return JULK4X2;
}

public byte getJULK4X3() {
return JULK4X3;
}

public short getJULK4X4() {
return JULK4X4;
}

public short getJULK4X5() {
return JULK4X5;
}

public short getJULK4X6() {
return JULK4X6;
}

public byte getJULK4X96() {
return JULK4X96;
}

public byte getK2UCPN1() {
return K2UCPN1;
}

public byte getK2UCPN2() {
return K2UCPN2;
}

public byte getK2UCPN3() {
return K2UCPN3;
}

public byte getK2UCPN4() {
return K2UCPN4;
}

public byte getK2UCPN5() {
return K2UCPN5;
}

public byte getKID2UNI1() {
return KID2UNI1;
}

public byte getKID2UNI2() {
return KID2UNI2;
}

public byte getKID2UNI3() {
return KID2UNI3;
}

public byte getKID2UNI4() {
return KID2UNI4;
}

public byte getKID2UNI5() {
return KID2UNI5;
}

public byte getKIDSPT() {
return KIDSPT;
}

public byte getLADOPT() {
return LADOPT;
}

public byte getLCHMOR() {
return LCHMOR;
}

public byte getLCHMORN() {
return LCHMORN;
}

public byte getLCMARM() {
return LCMARM;
}

public short getLCMARY4() {
return LCMARY4;
}

public byte getLCMCBM() {
return LCMCBM;
}

public short getLCMCBY4() {
return LCMCBY4;
}

public byte getLCMCOH() {
return LCMCOH;
}

public byte getLCMSPM() {
return LCMSPM;
}

public short getLCMSPY4() {
return LCMSPY4;
}

public byte getLCOH() {
return LCOH;
}

public boolean getLDA() {
return LDA;
}

public boolean getLDAFLAG() {
return LDAFLAG;
}

protected double LENINDINTV() {
return LENINDINTV;
}

public byte getLEVELIMP() {
return LEVELIMP;
}

public byte getLGAPED() {
return LGAPED;
}

public byte getLINGUA() {
return LINGUA;
}

public byte getLIVESP() {
return LIVESP;
}

public boolean getLIVESP_DV() {
return LIVESP_DV;
}

public byte getLIVEWITH() {
return LIVEWITH;
}

public byte getLNADOPT() {
return LNADOPT;
}

public byte getLNCOH() {
return LNCOH;
}

public byte getLNPRNT() {
return LNPRNT;
}

public byte getLPRNT() {
return LPRNT;
}

public byte getLVAG14() {
return LVAG14;
}

public byte getLVAG16() {
return LVAG16;
}

public byte getLVREL1() {
return LVREL1;
}

public byte getLVREL2() {
return LVREL2;
}

public byte getLVREL3() {
return LVREL3;
}

public byte getLVREL4() {
return LVREL4;
}

public byte getLVREL5() {
return LVREL5;
}

public byte getLVREL6() {
return LVREL6;
}

public byte getLVREL7() {
return LVREL7;
}

public byte getLVREL8() {
return LVREL8;
}

public byte getLVREL96() {
return LVREL96;
}

public byte getMAAGE() {
return MAAGE;
}

public byte getMABROAD() {
return MABROAD;
}

public byte getMACOB() {
return MACOB;
}

public byte getMACON() {
return MACON;
}

public byte getMAEDQF() {
return MAEDQF;
}

public byte getMAFAR() {
return MAFAR;
}

public byte getMAID() {
return MAID;
}

public byte getMAINTALIM() {
return MAINTALIM;
}

public byte getMAJU() {
return MAJU;
}

public byte getMANSSEC5_DV() {
return MANSSEC5_DV;
}

public byte getMARSTAT() {
return MARSTAT;
}

public byte getMASEE() {
return MASEE;
}

public short getMASOC00_CC() {
return MASOC00_CC;
}

public short getMASOC10_CC() {
return MASOC10_CC;
}

public byte getMASOC90_CC() {
return MASOC90_CC;
}

public byte getMASTAT_DV() {
return MASTAT_DV;
}

public byte getMAYRUK() {
return MAYRUK;
}

public short getMAYRUK1() {
return MAYRUK1;
}

public byte getMGMROB() {
return MGMROB;
}

public byte getMGPROB() {
return MGPROB;
}

public int getMIGRATION_TM() {
return MIGRATION_TM;
}

public byte getMINDIRECT() {
return MINDIRECT;
}

public byte getMLIVED() {
return MLIVED;
}

public byte getMLIVEDIST() {
return MLIVEDIST;
}

public byte getMLIVEDIST5() {
return MLIVEDIST5;
}

public byte getMLIVEDISTF() {
return MLIVEDISTF;
}

public byte getMLSTATCHK() {
return MLSTATCHK;
}

public byte getMNABROAD() {
return MNABROAD;
}

public byte getMNLIVED() {
return MNLIVED;
}

public byte getMNMOVES() {
return MNMOVES;
}

public byte getMNOTHERC() {
return MNOTHERC;
}

public int getMNPID() {
return MNPID;
}

public byte getMNPNO() {
return MNPNO;
}

public int getMNSPID() {
return MNSPID;
}

public byte getMNSPNO() {
return MNSPNO;
}

public byte getMOBUSE() {
return MOBUSE;
}

public byte getMONTH() {
return MONTH;
}

public byte getMOVEAGE() {
return MOVEAGE;
}

public byte getMPNO() {
return MPNO;
}

public byte getMRETURNED() {
return MRETURNED;
}

public byte getMVEVER() {
return MVEVER;
}

public byte getMVMNTH() {
return MVMNTH;
}

public short getMVYR() {
return MVYR;
}

public byte getNADOPTCH() {
return NADOPTCH;
}

public byte getNAIDXHH() {
return NAIDXHH;
}

public byte getNATCH01() {
return NATCH01;
}

public byte getNATCH02() {
return NATCH02;
}

public byte getNATCH03() {
return NATCH03;
}

public byte getNATCH04() {
return NATCH04;
}

public byte getNATCH05() {
return NATCH05;
}

public byte getNATCH06() {
return NATCH06;
}

public byte getNATCH07() {
return NATCH07;
}

public byte getNATCH08() {
return NATCH08;
}

public byte getNATCH09() {
return NATCH09;
}

public byte getNATCH10() {
return NATCH10;
}

public byte getNATCH11() {
return NATCH11;
}

public byte getNATCH12() {
return NATCH12;
}

public boolean getNATCH13() {
return NATCH13;
}

public boolean getNATCH14() {
return NATCH14;
}

public boolean getNATCH15() {
return NATCH15;
}

public boolean getNATCH16() {
return NATCH16;
}

public byte getNATID1() {
return NATID1;
}

public byte getNATID2() {
return NATID2;
}

public byte getNATID3() {
return NATID3;
}

public byte getNATID4() {
return NATID4;
}

public byte getNATID5() {
return NATID5;
}

public byte getNATID6() {
return NATID6;
}

public byte getNATID97() {
return NATID97;
}

protected double NBRSNCI_DV() {
return NBRSNCI_DV;
}

public byte getNCH10TO15() {
return NCH10TO15;
}

public byte getNCH14RESP() {
return NCH14RESP;
}

public byte getNCH415RESP() {
return NCH415RESP;
}

public byte getNCH5TO15() {
return NCH5TO15;
}

public short getNCHILD_DV() {
return NCHILD_DV;
}

public byte getNCHRESP() {
return NCHRESP;
}

public byte getNCHUND18RESP() {
return NCHUND18RESP;
}

public byte getNCHUNDER16() {
return NCHUNDER16;
}

public byte getNDEPCHL_DV() {
return NDEPCHL_DV;
}

public byte getNETUSE() {
return NETUSE;
}

public int getNETWORKS_TM() {
return NETWORKS_TM;
}

public byte getNGRP_DV() {
return NGRP_DV;
}

public byte getNIACT() {
return NIACT;
}

public byte getNIREL() {
return NIREL;
}

public byte getNISERPS() {
return NISERPS;
}

public byte getNMAR() {
return NMAR;
}

public byte getNNATCH() {
return NNATCH;
}

public byte getNNSIB_DV() {
return NNSIB_DV;
}

public byte getNNSSIB_DV() {
return NNSSIB_DV;
}

public int getNONEMP_TM() {
return NONEMP_TM;
}

public byte getNPENSIONER_DV() {
return NPENSIONER_DV;
}

public byte getNPNS_DV() {
return NPNS_DV;
}

public byte getNPN_DV() {
return NPN_DV;
}

public byte getNQFHIGH_DV() {
return NQFHIGH_DV;
}

public byte getNRELSW11() {
return NRELSW11;
}

public byte getNRELSW12() {
return NRELSW12;
}

public byte getNRELSW13() {
return NRELSW13;
}

public byte getNRELSW14() {
return NRELSW14;
}

public byte getNRELSW15() {
return NRELSW15;
}

public byte getNRELSW16() {
return NRELSW16;
}

public int getOBSERVE_TM() {
return OBSERVE_TM;
}

public byte getOHCH16() {
return OHCH16;
}

public byte getOPRLG() {
return OPRLG;
}

public byte getOPRLG0() {
return OPRLG0;
}

public byte getOPRLG0NI() {
return OPRLG0NI;
}

public byte getOPRLG1() {
return OPRLG1;
}

public byte getOPRLG2() {
return OPRLG2;
}

public byte getOPRLG3() {
return OPRLG3;
}

public byte getOVTNSA() {
return OVTNSA;
}

public byte getOVTPAY() {
return OVTPAY;
}

protected double OVTRATE() {
return OVTRATE;
}

public byte getOVTREST() {
return OVTREST;
}

public byte getPAAGE() {
return PAAGE;
}

public byte getPACOB() {
return PACOB;
}

public byte getPACON() {
return PACON;
}

public byte getPAEDQF() {
return PAEDQF;
}

public byte getPAFAR() {
return PAFAR;
}

public byte getPAID() {
return PAID;
}

public byte getPAJU() {
return PAJU;
}

public byte getPANSSEC5_DV() {
return PANSSEC5_DV;
}

public int getPARCHILD_TM() {
return PARCHILD_TM;
}

public byte getPARMAR() {
return PARMAR;
}

public int getPARTNER_TM() {
return PARTNER_TM;
}

public byte getPASEE() {
return PASEE;
}

public short getPASOC00_CC() {
return PASOC00_CC;
}

public short getPASOC10_CC() {
return PASOC10_CC;
}

public byte getPASOC90_CC() {
return PASOC90_CC;
}

public byte getPAYFAM() {
return PAYFAM;
}

public byte getPAYGWC() {
return PAYGWC;
}

protected double PAYG_DV() {
return PAYG_DV;
}

public byte getPAYNWC() {
return PAYNWC;
}

public byte getPAYRUK() {
return PAYRUK;
}

public short getPAYRUK1() {
return PAYRUK1;
}

public byte getPAYTYP() {
return PAYTYP;
}

public byte getPAYUWC() {
return PAYUWC;
}

protected double PAYU_DV() {
return PAYU_DV;
}

public byte getPBNFT1() {
return PBNFT1;
}

public byte getPBNFT10() {
return PBNFT10;
}

public byte getPBNFT11() {
return PBNFT11;
}

public byte getPBNFT12() {
return PBNFT12;
}

public byte getPBNFT2() {
return PBNFT2;
}

public byte getPBNFT3() {
return PBNFT3;
}

public byte getPBNFT4() {
return PBNFT4;
}

public byte getPBNFT5() {
return PBNFT5;
}

public byte getPBNFT6() {
return PBNFT6;
}

public byte getPBNFT7() {
return PBNFT7;
}

public byte getPBNFT8() {
return PBNFT8;
}

public byte getPBNFT9() {
return PBNFT9;
}

public byte getPBNFT96() {
return PBNFT96;
}

public byte getPENSIONER_DV() {
return PENSIONER_DV;
}

public byte getPGMROB() {
return PGMROB;
}

public byte getPGPROB() {
return PGPROB;
}

public int getPHONE_TM() {
return PHONE_TM;
}

public byte getPJBPTFT() {
return PJBPTFT;
}

public byte getPJSPTFT() {
return PJSPTFT;
}

public int getPN1PID() {
return PN1PID;
}

public byte getPN1PNO() {
return PN1PNO;
}

public byte getPN1SEX() {
return PN1SEX;
}

public int getPN2PID() {
return PN2PID;
}

public byte getPN2PNO() {
return PN2PNO;
}

public byte getPN2SEX() {
return PN2SEX;
}

public int getPNS1PID() {
return PNS1PID;
}

public byte getPNS1PNO() {
return PNS1PNO;
}

public byte getPNS1SEX() {
return PNS1SEX;
}

public int getPNS2PID() {
return PNS2PID;
}

public byte getPNS2PNO() {
return PNS2PNO;
}

public byte getPNS2SEX() {
return PNS2SEX;
}

public int getPOLITICAL_TM() {
return POLITICAL_TM;
}

public int getPPID() {
return PPID;
}

public byte getPPSEX() {
return PPSEX;
}

public byte getPRAISEKID() {
return PRAISEKID;
}

public byte getPREARN() {
return PREARN;
}

public byte getPREARNA() {
return PREARNA;
}

public byte getPREARNW() {
return PREARNW;
}

public byte getPREASON() {
return PREASON;
}

public byte getPREL() {
return PREL;
}

public byte getPRFITB() {
return PRFITB;
}

public byte getPRFITBA() {
return PRFITBA;
}

public byte getPRFITBW() {
return PRFITBW;
}

public byte getPRIVPEN() {
return PRIVPEN;
}

public byte getPROMODENY() {
return PROMODENY;
}

public int getPROXY_TM() {
return PROXY_TM;
}

public byte getPRSEX() {
return PRSEX;
}

public int getPSU() {
return PSU;
}

public byte getQFHIGH() {
return QFHIGH;
}

public boolean getQFHIGHFL_DV() {
return QFHIGHFL_DV;
}

public byte getQFHIGH_DV() {
return QFHIGH_DV;
}

public byte getQFVOC1() {
return QFVOC1;
}

public byte getQFVOC10() {
return QFVOC10;
}

public byte getQFVOC11() {
return QFVOC11;
}

public byte getQFVOC12() {
return QFVOC12;
}

public byte getQFVOC13() {
return QFVOC13;
}

public byte getQFVOC14() {
return QFVOC14;
}

public byte getQFVOC15() {
return QFVOC15;
}

public byte getQFVOC2() {
return QFVOC2;
}

public byte getQFVOC3() {
return QFVOC3;
}

public byte getQFVOC4() {
return QFVOC4;
}

public byte getQFVOC5() {
return QFVOC5;
}

public byte getQFVOC6() {
return QFVOC6;
}

public byte getQFVOC7() {
return QFVOC7;
}

public byte getQFVOC8() {
return QFVOC8;
}

public byte getQFVOC9() {
return QFVOC9;
}

public byte getQFVOC96() {
return QFVOC96;
}

public int getQSIGNIN_TM() {
return QSIGNIN_TM;
}

public byte getQUALOC() {
return QUALOC;
}

public byte getQUARREL() {
return QUARREL;
}

public byte getRACEL() {
return RACEL;
}

public short getRACELO_CODE() {
return RACELO_CODE;
}

public byte getRACEL_DV() {
return RACEL_DV;
}

public byte getREADDIF() {
return READDIF;
}

public byte getREASREF() {
return REASREF;
}

public int getRELATIONSHIPS_TM() {
return RELATIONSHIPS_TM;
}

public int getRELIGION_TM() {
return RELIGION_TM;
}

public byte getRELKID() {
return RELKID;
}

public byte getREMAIL_CODE() {
return REMAIL_CODE;
}

public short getREMCNTRY1() {
return REMCNTRY1;
}

public short getREMCNTRY2() {
return REMCNTRY2;
}

public short getREMCNTRY3() {
return REMCNTRY3;
}

public short getREMCNTRY4() {
return REMCNTRY4;
}

public byte getREMIT1() {
return REMIT1;
}

public byte getREMIT2() {
return REMIT2;
}

public byte getREMIT3() {
return REMIT3;
}

public byte getREMIT4() {
return REMIT4;
}

public byte getREMIT5() {
return REMIT5;
}

public short getREMITAMT1() {
return REMITAMT1;
}

public int getREMITAMT2() {
return REMITAMT2;
}

public short getREMITAMT3() {
return REMITAMT3;
}

public int getREMITAMT4() {
return REMITAMT4;
}

public byte getREMITFREQ1() {
return REMITFREQ1;
}

public byte getREMITFREQ2() {
return REMITFREQ2;
}

public byte getREMITFREQ3() {
return REMITFREQ3;
}

public byte getREMITFREQ4() {
return REMITFREQ4;
}

public byte getREMITREG1() {
return REMITREG1;
}

public byte getREMITREG2() {
return REMITREG2;
}

public byte getREMITREG3() {
return REMITREG3;
}

public byte getREMITREG4() {
return REMITREG4;
}

public int getREMITTANCE_TM() {
return REMITTANCE_TM;
}

public byte getREMITUSUAL1() {
return REMITUSUAL1;
}

public byte getREMITUSUAL2() {
return REMITUSUAL2;
}

public byte getREMITUSUAL3() {
return REMITUSUAL3;
}

public byte getREMITUSUAL4() {
return REMITUSUAL4;
}

public boolean getREMUSAMT1() {
return REMUSAMT1;
}

public short getREMUSAMT2() {
return REMUSAMT2;
}

public short getREMUSAMT3() {
return REMUSAMT3;
}

public short getREMUSAMT4() {
return REMUSAMT4;
}

public byte getRESATTACKEDW1_1_1() {
return RESATTACKEDW1_1_1;
}

public byte getRESATTACKEDW1_1_2() {
return RESATTACKEDW1_1_2;
}

public byte getRESATTACKEDW1_1_3() {
return RESATTACKEDW1_1_3;
}

public byte getRESATTACKEDW1_1_4() {
return RESATTACKEDW1_1_4;
}

public byte getRESATTACKEDW1_1_5() {
return RESATTACKEDW1_1_5;
}

public byte getRESATTACKEDW1_1_6() {
return RESATTACKEDW1_1_6;
}

public byte getRESATTACKEDW1_1_7() {
return RESATTACKEDW1_1_7;
}

public byte getRESATTACKEDW1_1_8() {
return RESATTACKEDW1_1_8;
}

public byte getRESATTACKEDW1_1_9() {
return RESATTACKEDW1_1_9;
}

public byte getRESATTACKEDW1_1_96() {
return RESATTACKEDW1_1_96;
}

public byte getRESATTACKEDW1_1_97() {
return RESATTACKEDW1_1_97;
}

public byte getRESATTACKEDW1_2_1() {
return RESATTACKEDW1_2_1;
}

public byte getRESATTACKEDW1_2_2() {
return RESATTACKEDW1_2_2;
}

public byte getRESATTACKEDW1_2_3() {
return RESATTACKEDW1_2_3;
}

public byte getRESATTACKEDW1_2_4() {
return RESATTACKEDW1_2_4;
}

public byte getRESATTACKEDW1_2_5() {
return RESATTACKEDW1_2_5;
}

public byte getRESATTACKEDW1_2_6() {
return RESATTACKEDW1_2_6;
}

public byte getRESATTACKEDW1_2_7() {
return RESATTACKEDW1_2_7;
}

public byte getRESATTACKEDW1_2_8() {
return RESATTACKEDW1_2_8;
}

public byte getRESATTACKEDW1_2_9() {
return RESATTACKEDW1_2_9;
}

public byte getRESATTACKEDW1_2_96() {
return RESATTACKEDW1_2_96;
}

public byte getRESATTACKEDW1_2_97() {
return RESATTACKEDW1_2_97;
}

public byte getRESATTACKEDW1_3_1() {
return RESATTACKEDW1_3_1;
}

public byte getRESATTACKEDW1_3_2() {
return RESATTACKEDW1_3_2;
}

public byte getRESATTACKEDW1_3_3() {
return RESATTACKEDW1_3_3;
}

public byte getRESATTACKEDW1_3_4() {
return RESATTACKEDW1_3_4;
}

public byte getRESATTACKEDW1_3_5() {
return RESATTACKEDW1_3_5;
}

public byte getRESATTACKEDW1_3_6() {
return RESATTACKEDW1_3_6;
}

public byte getRESATTACKEDW1_3_7() {
return RESATTACKEDW1_3_7;
}

public byte getRESATTACKEDW1_3_8() {
return RESATTACKEDW1_3_8;
}

public byte getRESATTACKEDW1_3_9() {
return RESATTACKEDW1_3_9;
}

public byte getRESATTACKEDW1_3_96() {
return RESATTACKEDW1_3_96;
}

public byte getRESATTACKEDW1_3_97() {
return RESATTACKEDW1_3_97;
}

public byte getRESATTACKEDW1_4_1() {
return RESATTACKEDW1_4_1;
}

public byte getRESATTACKEDW1_4_2() {
return RESATTACKEDW1_4_2;
}

public byte getRESATTACKEDW1_4_3() {
return RESATTACKEDW1_4_3;
}

public byte getRESATTACKEDW1_4_4() {
return RESATTACKEDW1_4_4;
}

public byte getRESATTACKEDW1_4_5() {
return RESATTACKEDW1_4_5;
}

public byte getRESATTACKEDW1_4_6() {
return RESATTACKEDW1_4_6;
}

public byte getRESATTACKEDW1_4_7() {
return RESATTACKEDW1_4_7;
}

public byte getRESATTACKEDW1_4_8() {
return RESATTACKEDW1_4_8;
}

public byte getRESATTACKEDW1_4_9() {
return RESATTACKEDW1_4_9;
}

public byte getRESATTACKEDW1_4_96() {
return RESATTACKEDW1_4_96;
}

public byte getRESATTACKEDW1_4_97() {
return RESATTACKEDW1_4_97;
}

public byte getRESATTACKEDW1_5_1() {
return RESATTACKEDW1_5_1;
}

public byte getRESATTACKEDW1_5_2() {
return RESATTACKEDW1_5_2;
}

public byte getRESATTACKEDW1_5_3() {
return RESATTACKEDW1_5_3;
}

public byte getRESATTACKEDW1_5_4() {
return RESATTACKEDW1_5_4;
}

public byte getRESATTACKEDW1_5_5() {
return RESATTACKEDW1_5_5;
}

public byte getRESATTACKEDW1_5_6() {
return RESATTACKEDW1_5_6;
}

public byte getRESATTACKEDW1_5_7() {
return RESATTACKEDW1_5_7;
}

public byte getRESATTACKEDW1_5_8() {
return RESATTACKEDW1_5_8;
}

public byte getRESATTACKEDW1_5_9() {
return RESATTACKEDW1_5_9;
}

public byte getRESATTACKEDW1_5_96() {
return RESATTACKEDW1_5_96;
}

public byte getRESATTACKEDW1_5_97() {
return RESATTACKEDW1_5_97;
}

public byte getRESATTACKEDW1_6_1() {
return RESATTACKEDW1_6_1;
}

public byte getRESATTACKEDW1_6_2() {
return RESATTACKEDW1_6_2;
}

public byte getRESATTACKEDW1_6_3() {
return RESATTACKEDW1_6_3;
}

public byte getRESATTACKEDW1_6_4() {
return RESATTACKEDW1_6_4;
}

public byte getRESATTACKEDW1_6_5() {
return RESATTACKEDW1_6_5;
}

public byte getRESATTACKEDW1_6_6() {
return RESATTACKEDW1_6_6;
}

public byte getRESATTACKEDW1_6_7() {
return RESATTACKEDW1_6_7;
}

public byte getRESATTACKEDW1_6_8() {
return RESATTACKEDW1_6_8;
}

public byte getRESATTACKEDW1_6_9() {
return RESATTACKEDW1_6_9;
}

public byte getRESATTACKEDW1_6_96() {
return RESATTACKEDW1_6_96;
}

public byte getRESATTACKEDW1_6_97() {
return RESATTACKEDW1_6_97;
}

public byte getRESATTACKEDW1_7_1() {
return RESATTACKEDW1_7_1;
}

public byte getRESATTACKEDW1_7_2() {
return RESATTACKEDW1_7_2;
}

public byte getRESATTACKEDW1_7_3() {
return RESATTACKEDW1_7_3;
}

public byte getRESATTACKEDW1_7_4() {
return RESATTACKEDW1_7_4;
}

public byte getRESATTACKEDW1_7_5() {
return RESATTACKEDW1_7_5;
}

public byte getRESATTACKEDW1_7_6() {
return RESATTACKEDW1_7_6;
}

public byte getRESATTACKEDW1_7_7() {
return RESATTACKEDW1_7_7;
}

public byte getRESATTACKEDW1_7_8() {
return RESATTACKEDW1_7_8;
}

public byte getRESATTACKEDW1_7_9() {
return RESATTACKEDW1_7_9;
}

public byte getRESATTACKEDW1_7_96() {
return RESATTACKEDW1_7_96;
}

public byte getRESATTACKEDW1_7_97() {
return RESATTACKEDW1_7_97;
}

public byte getRESATTACKEDW1_97_1() {
return RESATTACKEDW1_97_1;
}

public byte getRESATTACKEDW1_97_2() {
return RESATTACKEDW1_97_2;
}

public byte getRESATTACKEDW1_97_3() {
return RESATTACKEDW1_97_3;
}

public byte getRESATTACKEDW1_97_4() {
return RESATTACKEDW1_97_4;
}

public byte getRESATTACKEDW1_97_5() {
return RESATTACKEDW1_97_5;
}

public byte getRESATTACKEDW1_97_6() {
return RESATTACKEDW1_97_6;
}

public byte getRESATTACKEDW1_97_7() {
return RESATTACKEDW1_97_7;
}

public byte getRESATTACKEDW1_97_8() {
return RESATTACKEDW1_97_8;
}

public byte getRESATTACKEDW1_97_9() {
return RESATTACKEDW1_97_9;
}

public byte getRESATTACKEDW1_97_96() {
return RESATTACKEDW1_97_96;
}

public byte getRESATTACKEDW1_97_97() {
return RESATTACKEDW1_97_97;
}

public byte getRESAVOIDW1_1_1() {
return RESAVOIDW1_1_1;
}

public byte getRESAVOIDW1_1_2() {
return RESAVOIDW1_1_2;
}

public byte getRESAVOIDW1_1_3() {
return RESAVOIDW1_1_3;
}

public byte getRESAVOIDW1_1_4() {
return RESAVOIDW1_1_4;
}

public byte getRESAVOIDW1_1_5() {
return RESAVOIDW1_1_5;
}

public byte getRESAVOIDW1_1_6() {
return RESAVOIDW1_1_6;
}

public byte getRESAVOIDW1_1_7() {
return RESAVOIDW1_1_7;
}

public byte getRESAVOIDW1_1_8() {
return RESAVOIDW1_1_8;
}

public byte getRESAVOIDW1_1_9() {
return RESAVOIDW1_1_9;
}

public byte getRESAVOIDW1_1_96() {
return RESAVOIDW1_1_96;
}

public byte getRESAVOIDW1_1_97() {
return RESAVOIDW1_1_97;
}

public byte getRESAVOIDW1_2_1() {
return RESAVOIDW1_2_1;
}

public byte getRESAVOIDW1_2_2() {
return RESAVOIDW1_2_2;
}

public byte getRESAVOIDW1_2_3() {
return RESAVOIDW1_2_3;
}

public byte getRESAVOIDW1_2_4() {
return RESAVOIDW1_2_4;
}

public byte getRESAVOIDW1_2_5() {
return RESAVOIDW1_2_5;
}

public byte getRESAVOIDW1_2_6() {
return RESAVOIDW1_2_6;
}

public byte getRESAVOIDW1_2_7() {
return RESAVOIDW1_2_7;
}

public byte getRESAVOIDW1_2_8() {
return RESAVOIDW1_2_8;
}

public byte getRESAVOIDW1_2_9() {
return RESAVOIDW1_2_9;
}

public byte getRESAVOIDW1_2_96() {
return RESAVOIDW1_2_96;
}

public byte getRESAVOIDW1_2_97() {
return RESAVOIDW1_2_97;
}

public byte getRESAVOIDW1_3_1() {
return RESAVOIDW1_3_1;
}

public byte getRESAVOIDW1_3_2() {
return RESAVOIDW1_3_2;
}

public byte getRESAVOIDW1_3_3() {
return RESAVOIDW1_3_3;
}

public byte getRESAVOIDW1_3_4() {
return RESAVOIDW1_3_4;
}

public byte getRESAVOIDW1_3_5() {
return RESAVOIDW1_3_5;
}

public byte getRESAVOIDW1_3_6() {
return RESAVOIDW1_3_6;
}

public byte getRESAVOIDW1_3_7() {
return RESAVOIDW1_3_7;
}

public byte getRESAVOIDW1_3_8() {
return RESAVOIDW1_3_8;
}

public byte getRESAVOIDW1_3_9() {
return RESAVOIDW1_3_9;
}

public byte getRESAVOIDW1_3_96() {
return RESAVOIDW1_3_96;
}

public byte getRESAVOIDW1_3_97() {
return RESAVOIDW1_3_97;
}

public byte getRESAVOIDW1_4_1() {
return RESAVOIDW1_4_1;
}

public byte getRESAVOIDW1_4_2() {
return RESAVOIDW1_4_2;
}

public byte getRESAVOIDW1_4_3() {
return RESAVOIDW1_4_3;
}

public byte getRESAVOIDW1_4_4() {
return RESAVOIDW1_4_4;
}

public byte getRESAVOIDW1_4_5() {
return RESAVOIDW1_4_5;
}

public byte getRESAVOIDW1_4_6() {
return RESAVOIDW1_4_6;
}

public byte getRESAVOIDW1_4_7() {
return RESAVOIDW1_4_7;
}

public byte getRESAVOIDW1_4_8() {
return RESAVOIDW1_4_8;
}

public byte getRESAVOIDW1_4_9() {
return RESAVOIDW1_4_9;
}

public byte getRESAVOIDW1_4_96() {
return RESAVOIDW1_4_96;
}

public byte getRESAVOIDW1_4_97() {
return RESAVOIDW1_4_97;
}

public byte getRESAVOIDW1_5_1() {
return RESAVOIDW1_5_1;
}

public byte getRESAVOIDW1_5_2() {
return RESAVOIDW1_5_2;
}

public byte getRESAVOIDW1_5_3() {
return RESAVOIDW1_5_3;
}

public byte getRESAVOIDW1_5_4() {
return RESAVOIDW1_5_4;
}

public byte getRESAVOIDW1_5_5() {
return RESAVOIDW1_5_5;
}

public byte getRESAVOIDW1_5_6() {
return RESAVOIDW1_5_6;
}

public byte getRESAVOIDW1_5_7() {
return RESAVOIDW1_5_7;
}

public byte getRESAVOIDW1_5_8() {
return RESAVOIDW1_5_8;
}

public byte getRESAVOIDW1_5_9() {
return RESAVOIDW1_5_9;
}

public byte getRESAVOIDW1_5_96() {
return RESAVOIDW1_5_96;
}

public byte getRESAVOIDW1_5_97() {
return RESAVOIDW1_5_97;
}

public byte getRESAVOIDW1_6_1() {
return RESAVOIDW1_6_1;
}

public byte getRESAVOIDW1_6_2() {
return RESAVOIDW1_6_2;
}

public byte getRESAVOIDW1_6_3() {
return RESAVOIDW1_6_3;
}

public byte getRESAVOIDW1_6_4() {
return RESAVOIDW1_6_4;
}

public byte getRESAVOIDW1_6_5() {
return RESAVOIDW1_6_5;
}

public byte getRESAVOIDW1_6_6() {
return RESAVOIDW1_6_6;
}

public byte getRESAVOIDW1_6_7() {
return RESAVOIDW1_6_7;
}

public byte getRESAVOIDW1_6_8() {
return RESAVOIDW1_6_8;
}

public byte getRESAVOIDW1_6_9() {
return RESAVOIDW1_6_9;
}

public byte getRESAVOIDW1_6_96() {
return RESAVOIDW1_6_96;
}

public byte getRESAVOIDW1_6_97() {
return RESAVOIDW1_6_97;
}

public byte getRESAVOIDW1_7_1() {
return RESAVOIDW1_7_1;
}

public byte getRESAVOIDW1_7_2() {
return RESAVOIDW1_7_2;
}

public byte getRESAVOIDW1_7_3() {
return RESAVOIDW1_7_3;
}

public byte getRESAVOIDW1_7_4() {
return RESAVOIDW1_7_4;
}

public byte getRESAVOIDW1_7_5() {
return RESAVOIDW1_7_5;
}

public byte getRESAVOIDW1_7_6() {
return RESAVOIDW1_7_6;
}

public byte getRESAVOIDW1_7_7() {
return RESAVOIDW1_7_7;
}

public byte getRESAVOIDW1_7_8() {
return RESAVOIDW1_7_8;
}

public byte getRESAVOIDW1_7_9() {
return RESAVOIDW1_7_9;
}

public byte getRESAVOIDW1_7_96() {
return RESAVOIDW1_7_96;
}

public byte getRESAVOIDW1_7_97() {
return RESAVOIDW1_7_97;
}

public byte getRESAVOIDW1_97_1() {
return RESAVOIDW1_97_1;
}

public byte getRESAVOIDW1_97_2() {
return RESAVOIDW1_97_2;
}

public byte getRESAVOIDW1_97_3() {
return RESAVOIDW1_97_3;
}

public byte getRESAVOIDW1_97_4() {
return RESAVOIDW1_97_4;
}

public byte getRESAVOIDW1_97_5() {
return RESAVOIDW1_97_5;
}

public byte getRESAVOIDW1_97_6() {
return RESAVOIDW1_97_6;
}

public byte getRESAVOIDW1_97_7() {
return RESAVOIDW1_97_7;
}

public byte getRESAVOIDW1_97_8() {
return RESAVOIDW1_97_8;
}

public byte getRESAVOIDW1_97_9() {
return RESAVOIDW1_97_9;
}

public byte getRESAVOIDW1_97_96() {
return RESAVOIDW1_97_96;
}

public byte getRESAVOIDW1_97_97() {
return RESAVOIDW1_97_97;
}

public byte getRESINSULTEDW1_1_1() {
return RESINSULTEDW1_1_1;
}

public byte getRESINSULTEDW1_1_2() {
return RESINSULTEDW1_1_2;
}

public byte getRESINSULTEDW1_1_3() {
return RESINSULTEDW1_1_3;
}

public byte getRESINSULTEDW1_1_4() {
return RESINSULTEDW1_1_4;
}

public byte getRESINSULTEDW1_1_5() {
return RESINSULTEDW1_1_5;
}

public byte getRESINSULTEDW1_1_6() {
return RESINSULTEDW1_1_6;
}

public byte getRESINSULTEDW1_1_7() {
return RESINSULTEDW1_1_7;
}

public byte getRESINSULTEDW1_1_8() {
return RESINSULTEDW1_1_8;
}

public byte getRESINSULTEDW1_1_9() {
return RESINSULTEDW1_1_9;
}

public byte getRESINSULTEDW1_1_96() {
return RESINSULTEDW1_1_96;
}

public byte getRESINSULTEDW1_1_97() {
return RESINSULTEDW1_1_97;
}

public byte getRESINSULTEDW1_2_1() {
return RESINSULTEDW1_2_1;
}

public byte getRESINSULTEDW1_2_2() {
return RESINSULTEDW1_2_2;
}

public byte getRESINSULTEDW1_2_3() {
return RESINSULTEDW1_2_3;
}

public byte getRESINSULTEDW1_2_4() {
return RESINSULTEDW1_2_4;
}

public byte getRESINSULTEDW1_2_5() {
return RESINSULTEDW1_2_5;
}

public byte getRESINSULTEDW1_2_6() {
return RESINSULTEDW1_2_6;
}

public byte getRESINSULTEDW1_2_7() {
return RESINSULTEDW1_2_7;
}

public byte getRESINSULTEDW1_2_8() {
return RESINSULTEDW1_2_8;
}

public byte getRESINSULTEDW1_2_9() {
return RESINSULTEDW1_2_9;
}

public byte getRESINSULTEDW1_2_96() {
return RESINSULTEDW1_2_96;
}

public byte getRESINSULTEDW1_2_97() {
return RESINSULTEDW1_2_97;
}

public byte getRESINSULTEDW1_3_1() {
return RESINSULTEDW1_3_1;
}

public byte getRESINSULTEDW1_3_2() {
return RESINSULTEDW1_3_2;
}

public byte getRESINSULTEDW1_3_3() {
return RESINSULTEDW1_3_3;
}

public byte getRESINSULTEDW1_3_4() {
return RESINSULTEDW1_3_4;
}

public byte getRESINSULTEDW1_3_5() {
return RESINSULTEDW1_3_5;
}

public byte getRESINSULTEDW1_3_6() {
return RESINSULTEDW1_3_6;
}

public byte getRESINSULTEDW1_3_7() {
return RESINSULTEDW1_3_7;
}

public byte getRESINSULTEDW1_3_8() {
return RESINSULTEDW1_3_8;
}

public byte getRESINSULTEDW1_3_9() {
return RESINSULTEDW1_3_9;
}

public byte getRESINSULTEDW1_3_96() {
return RESINSULTEDW1_3_96;
}

public byte getRESINSULTEDW1_3_97() {
return RESINSULTEDW1_3_97;
}

public byte getRESINSULTEDW1_4_1() {
return RESINSULTEDW1_4_1;
}

public byte getRESINSULTEDW1_4_2() {
return RESINSULTEDW1_4_2;
}

public byte getRESINSULTEDW1_4_3() {
return RESINSULTEDW1_4_3;
}

public byte getRESINSULTEDW1_4_4() {
return RESINSULTEDW1_4_4;
}

public byte getRESINSULTEDW1_4_5() {
return RESINSULTEDW1_4_5;
}

public byte getRESINSULTEDW1_4_6() {
return RESINSULTEDW1_4_6;
}

public byte getRESINSULTEDW1_4_7() {
return RESINSULTEDW1_4_7;
}

public byte getRESINSULTEDW1_4_8() {
return RESINSULTEDW1_4_8;
}

public byte getRESINSULTEDW1_4_9() {
return RESINSULTEDW1_4_9;
}

public byte getRESINSULTEDW1_4_96() {
return RESINSULTEDW1_4_96;
}

public byte getRESINSULTEDW1_4_97() {
return RESINSULTEDW1_4_97;
}

public byte getRESINSULTEDW1_5_1() {
return RESINSULTEDW1_5_1;
}

public byte getRESINSULTEDW1_5_2() {
return RESINSULTEDW1_5_2;
}

public byte getRESINSULTEDW1_5_3() {
return RESINSULTEDW1_5_3;
}

public byte getRESINSULTEDW1_5_4() {
return RESINSULTEDW1_5_4;
}

public byte getRESINSULTEDW1_5_5() {
return RESINSULTEDW1_5_5;
}

public byte getRESINSULTEDW1_5_6() {
return RESINSULTEDW1_5_6;
}

public byte getRESINSULTEDW1_5_7() {
return RESINSULTEDW1_5_7;
}

public byte getRESINSULTEDW1_5_8() {
return RESINSULTEDW1_5_8;
}

public byte getRESINSULTEDW1_5_9() {
return RESINSULTEDW1_5_9;
}

public byte getRESINSULTEDW1_5_96() {
return RESINSULTEDW1_5_96;
}

public byte getRESINSULTEDW1_5_97() {
return RESINSULTEDW1_5_97;
}

public byte getRESINSULTEDW1_6_1() {
return RESINSULTEDW1_6_1;
}

public byte getRESINSULTEDW1_6_2() {
return RESINSULTEDW1_6_2;
}

public byte getRESINSULTEDW1_6_3() {
return RESINSULTEDW1_6_3;
}

public byte getRESINSULTEDW1_6_4() {
return RESINSULTEDW1_6_4;
}

public byte getRESINSULTEDW1_6_5() {
return RESINSULTEDW1_6_5;
}

public byte getRESINSULTEDW1_6_6() {
return RESINSULTEDW1_6_6;
}

public byte getRESINSULTEDW1_6_7() {
return RESINSULTEDW1_6_7;
}

public byte getRESINSULTEDW1_6_8() {
return RESINSULTEDW1_6_8;
}

public byte getRESINSULTEDW1_6_9() {
return RESINSULTEDW1_6_9;
}

public byte getRESINSULTEDW1_6_96() {
return RESINSULTEDW1_6_96;
}

public byte getRESINSULTEDW1_6_97() {
return RESINSULTEDW1_6_97;
}

public byte getRESINSULTEDW1_7_1() {
return RESINSULTEDW1_7_1;
}

public byte getRESINSULTEDW1_7_2() {
return RESINSULTEDW1_7_2;
}

public byte getRESINSULTEDW1_7_3() {
return RESINSULTEDW1_7_3;
}

public byte getRESINSULTEDW1_7_4() {
return RESINSULTEDW1_7_4;
}

public byte getRESINSULTEDW1_7_5() {
return RESINSULTEDW1_7_5;
}

public byte getRESINSULTEDW1_7_6() {
return RESINSULTEDW1_7_6;
}

public byte getRESINSULTEDW1_7_7() {
return RESINSULTEDW1_7_7;
}

public byte getRESINSULTEDW1_7_8() {
return RESINSULTEDW1_7_8;
}

public byte getRESINSULTEDW1_7_9() {
return RESINSULTEDW1_7_9;
}

public byte getRESINSULTEDW1_7_96() {
return RESINSULTEDW1_7_96;
}

public byte getRESINSULTEDW1_7_97() {
return RESINSULTEDW1_7_97;
}

public byte getRESINSULTEDW1_97_1() {
return RESINSULTEDW1_97_1;
}

public byte getRESINSULTEDW1_97_2() {
return RESINSULTEDW1_97_2;
}

public byte getRESINSULTEDW1_97_3() {
return RESINSULTEDW1_97_3;
}

public byte getRESINSULTEDW1_97_4() {
return RESINSULTEDW1_97_4;
}

public byte getRESINSULTEDW1_97_5() {
return RESINSULTEDW1_97_5;
}

public byte getRESINSULTEDW1_97_6() {
return RESINSULTEDW1_97_6;
}

public byte getRESINSULTEDW1_97_7() {
return RESINSULTEDW1_97_7;
}

public byte getRESINSULTEDW1_97_8() {
return RESINSULTEDW1_97_8;
}

public byte getRESINSULTEDW1_97_9() {
return RESINSULTEDW1_97_9;
}

public byte getRESINSULTEDW1_97_96() {
return RESINSULTEDW1_97_96;
}

public byte getRESINSULTEDW1_97_97() {
return RESINSULTEDW1_97_97;
}

public byte getRESJOBDENY1() {
return RESJOBDENY1;
}

public byte getRESJOBDENY2() {
return RESJOBDENY2;
}

public byte getRESJOBDENY3() {
return RESJOBDENY3;
}

public byte getRESJOBDENY4() {
return RESJOBDENY4;
}

public byte getRESJOBDENY5() {
return RESJOBDENY5;
}

public byte getRESJOBDENY6() {
return RESJOBDENY6;
}

public byte getRESJOBDENY7() {
return RESJOBDENY7;
}

public byte getRESJOBDENY8() {
return RESJOBDENY8;
}

public byte getRESJOBDENY9() {
return RESJOBDENY9;
}

public byte getRESJOBDENY96() {
return RESJOBDENY96;
}

public byte getRESJOBDENY97() {
return RESJOBDENY97;
}

public boolean getRESPF16() {
return RESPF16;
}

public boolean getRESPF16_DV() {
return RESPF16_DV;
}

public boolean getRESPM16() {
return RESPM16;
}

public boolean getRESPM16_DV() {
return RESPM16_DV;
}

public byte getRESPROMODENY1() {
return RESPROMODENY1;
}

public byte getRESPROMODENY2() {
return RESPROMODENY2;
}

public byte getRESPROMODENY3() {
return RESPROMODENY3;
}

public byte getRESPROMODENY4() {
return RESPROMODENY4;
}

public byte getRESPROMODENY5() {
return RESPROMODENY5;
}

public byte getRESPROMODENY6() {
return RESPROMODENY6;
}

public byte getRESPROMODENY7() {
return RESPROMODENY7;
}

public byte getRESPROMODENY8() {
return RESPROMODENY8;
}

public byte getRESPROMODENY9() {
return RESPROMODENY9;
}

public byte getRESPROMODENY96() {
return RESPROMODENY96;
}

public byte getRESPROMODENY97() {
return RESPROMODENY97;
}

public byte getRESTRAINDENY1() {
return RESTRAINDENY1;
}

public byte getRESTRAINDENY2() {
return RESTRAINDENY2;
}

public byte getRESTRAINDENY3() {
return RESTRAINDENY3;
}

public byte getRESTRAINDENY4() {
return RESTRAINDENY4;
}

public byte getRESTRAINDENY5() {
return RESTRAINDENY5;
}

public byte getRESTRAINDENY6() {
return RESTRAINDENY6;
}

public byte getRESTRAINDENY7() {
return RESTRAINDENY7;
}

public byte getRESTRAINDENY8() {
return RESTRAINDENY8;
}

public byte getRESTRAINDENY9() {
return RESTRAINDENY9;
}

public byte getRESTRAINDENY96() {
return RESTRAINDENY96;
}

public byte getRESTRAINDENY97() {
return RESTRAINDENY97;
}

public byte getRESUNSAFEW1_1_1() {
return RESUNSAFEW1_1_1;
}

public byte getRESUNSAFEW1_1_2() {
return RESUNSAFEW1_1_2;
}

public byte getRESUNSAFEW1_1_3() {
return RESUNSAFEW1_1_3;
}

public byte getRESUNSAFEW1_1_4() {
return RESUNSAFEW1_1_4;
}

public byte getRESUNSAFEW1_1_5() {
return RESUNSAFEW1_1_5;
}

public byte getRESUNSAFEW1_1_6() {
return RESUNSAFEW1_1_6;
}

public byte getRESUNSAFEW1_1_7() {
return RESUNSAFEW1_1_7;
}

public byte getRESUNSAFEW1_1_8() {
return RESUNSAFEW1_1_8;
}

public byte getRESUNSAFEW1_1_9() {
return RESUNSAFEW1_1_9;
}

public byte getRESUNSAFEW1_1_96() {
return RESUNSAFEW1_1_96;
}

public byte getRESUNSAFEW1_1_97() {
return RESUNSAFEW1_1_97;
}

public byte getRESUNSAFEW1_2_1() {
return RESUNSAFEW1_2_1;
}

public byte getRESUNSAFEW1_2_2() {
return RESUNSAFEW1_2_2;
}

public byte getRESUNSAFEW1_2_3() {
return RESUNSAFEW1_2_3;
}

public byte getRESUNSAFEW1_2_4() {
return RESUNSAFEW1_2_4;
}

public byte getRESUNSAFEW1_2_5() {
return RESUNSAFEW1_2_5;
}

public byte getRESUNSAFEW1_2_6() {
return RESUNSAFEW1_2_6;
}

public byte getRESUNSAFEW1_2_7() {
return RESUNSAFEW1_2_7;
}

public byte getRESUNSAFEW1_2_8() {
return RESUNSAFEW1_2_8;
}

public byte getRESUNSAFEW1_2_9() {
return RESUNSAFEW1_2_9;
}

public byte getRESUNSAFEW1_2_96() {
return RESUNSAFEW1_2_96;
}

public byte getRESUNSAFEW1_2_97() {
return RESUNSAFEW1_2_97;
}

public byte getRESUNSAFEW1_3_1() {
return RESUNSAFEW1_3_1;
}

public byte getRESUNSAFEW1_3_2() {
return RESUNSAFEW1_3_2;
}

public byte getRESUNSAFEW1_3_3() {
return RESUNSAFEW1_3_3;
}

public byte getRESUNSAFEW1_3_4() {
return RESUNSAFEW1_3_4;
}

public byte getRESUNSAFEW1_3_5() {
return RESUNSAFEW1_3_5;
}

public byte getRESUNSAFEW1_3_6() {
return RESUNSAFEW1_3_6;
}

public byte getRESUNSAFEW1_3_7() {
return RESUNSAFEW1_3_7;
}

public byte getRESUNSAFEW1_3_8() {
return RESUNSAFEW1_3_8;
}

public byte getRESUNSAFEW1_3_9() {
return RESUNSAFEW1_3_9;
}

public byte getRESUNSAFEW1_3_96() {
return RESUNSAFEW1_3_96;
}

public byte getRESUNSAFEW1_3_97() {
return RESUNSAFEW1_3_97;
}

public byte getRESUNSAFEW1_4_1() {
return RESUNSAFEW1_4_1;
}

public byte getRESUNSAFEW1_4_2() {
return RESUNSAFEW1_4_2;
}

public byte getRESUNSAFEW1_4_3() {
return RESUNSAFEW1_4_3;
}

public byte getRESUNSAFEW1_4_4() {
return RESUNSAFEW1_4_4;
}

public byte getRESUNSAFEW1_4_5() {
return RESUNSAFEW1_4_5;
}

public byte getRESUNSAFEW1_4_6() {
return RESUNSAFEW1_4_6;
}

public byte getRESUNSAFEW1_4_7() {
return RESUNSAFEW1_4_7;
}

public byte getRESUNSAFEW1_4_8() {
return RESUNSAFEW1_4_8;
}

public byte getRESUNSAFEW1_4_9() {
return RESUNSAFEW1_4_9;
}

public byte getRESUNSAFEW1_4_96() {
return RESUNSAFEW1_4_96;
}

public byte getRESUNSAFEW1_4_97() {
return RESUNSAFEW1_4_97;
}

public byte getRESUNSAFEW1_5_1() {
return RESUNSAFEW1_5_1;
}

public byte getRESUNSAFEW1_5_2() {
return RESUNSAFEW1_5_2;
}

public byte getRESUNSAFEW1_5_3() {
return RESUNSAFEW1_5_3;
}

public byte getRESUNSAFEW1_5_4() {
return RESUNSAFEW1_5_4;
}

public byte getRESUNSAFEW1_5_5() {
return RESUNSAFEW1_5_5;
}

public byte getRESUNSAFEW1_5_6() {
return RESUNSAFEW1_5_6;
}

public byte getRESUNSAFEW1_5_7() {
return RESUNSAFEW1_5_7;
}

public byte getRESUNSAFEW1_5_8() {
return RESUNSAFEW1_5_8;
}

public byte getRESUNSAFEW1_5_9() {
return RESUNSAFEW1_5_9;
}

public byte getRESUNSAFEW1_5_96() {
return RESUNSAFEW1_5_96;
}

public byte getRESUNSAFEW1_5_97() {
return RESUNSAFEW1_5_97;
}

public byte getRESUNSAFEW1_6_1() {
return RESUNSAFEW1_6_1;
}

public byte getRESUNSAFEW1_6_2() {
return RESUNSAFEW1_6_2;
}

public byte getRESUNSAFEW1_6_3() {
return RESUNSAFEW1_6_3;
}

public byte getRESUNSAFEW1_6_4() {
return RESUNSAFEW1_6_4;
}

public byte getRESUNSAFEW1_6_5() {
return RESUNSAFEW1_6_5;
}

public byte getRESUNSAFEW1_6_6() {
return RESUNSAFEW1_6_6;
}

public byte getRESUNSAFEW1_6_7() {
return RESUNSAFEW1_6_7;
}

public byte getRESUNSAFEW1_6_8() {
return RESUNSAFEW1_6_8;
}

public byte getRESUNSAFEW1_6_9() {
return RESUNSAFEW1_6_9;
}

public byte getRESUNSAFEW1_6_96() {
return RESUNSAFEW1_6_96;
}

public byte getRESUNSAFEW1_6_97() {
return RESUNSAFEW1_6_97;
}

public byte getRESUNSAFEW1_7_1() {
return RESUNSAFEW1_7_1;
}

public byte getRESUNSAFEW1_7_2() {
return RESUNSAFEW1_7_2;
}

public byte getRESUNSAFEW1_7_3() {
return RESUNSAFEW1_7_3;
}

public byte getRESUNSAFEW1_7_4() {
return RESUNSAFEW1_7_4;
}

public byte getRESUNSAFEW1_7_5() {
return RESUNSAFEW1_7_5;
}

public byte getRESUNSAFEW1_7_6() {
return RESUNSAFEW1_7_6;
}

public byte getRESUNSAFEW1_7_7() {
return RESUNSAFEW1_7_7;
}

public byte getRESUNSAFEW1_7_8() {
return RESUNSAFEW1_7_8;
}

public byte getRESUNSAFEW1_7_9() {
return RESUNSAFEW1_7_9;
}

public byte getRESUNSAFEW1_7_96() {
return RESUNSAFEW1_7_96;
}

public byte getRESUNSAFEW1_7_97() {
return RESUNSAFEW1_7_97;
}

public byte getRESUNSAFEW1_97_1() {
return RESUNSAFEW1_97_1;
}

public byte getRESUNSAFEW1_97_2() {
return RESUNSAFEW1_97_2;
}

public byte getRESUNSAFEW1_97_3() {
return RESUNSAFEW1_97_3;
}

public byte getRESUNSAFEW1_97_4() {
return RESUNSAFEW1_97_4;
}

public byte getRESUNSAFEW1_97_5() {
return RESUNSAFEW1_97_5;
}

public byte getRESUNSAFEW1_97_6() {
return RESUNSAFEW1_97_6;
}

public byte getRESUNSAFEW1_97_7() {
return RESUNSAFEW1_97_7;
}

public byte getRESUNSAFEW1_97_8() {
return RESUNSAFEW1_97_8;
}

public byte getRESUNSAFEW1_97_9() {
return RESUNSAFEW1_97_9;
}

public byte getRESUNSAFEW1_97_96() {
return RESUNSAFEW1_97_96;
}

public byte getRESUNSAFEW1_97_97() {
return RESUNSAFEW1_97_97;
}

public byte getRETDATEM() {
return RETDATEM;
}

public short getRETDATEY() {
return RETDATEY;
}

public byte getRHLAND_CODE() {
return RHLAND_CODE;
}

public byte getRPHMOB_CODE() {
return RPHMOB_CODE;
}

public byte getRPHWRK_CODE() {
return RPHWRK_CODE;
}

public byte getRULESKID() {
return RULESKID;
}

public short getSAMPST() {
return SAMPST;
}

public byte getSAMSCH() {
return SAMSCH;
}

public byte getSCDASCOH_DV() {
return SCDASCOH_DV;
}

public byte getSCDASSAT_DV() {
return SCDASSAT_DV;
}

public short getSCDOBY4() {
return SCDOBY4;
}

public byte getSCENV_BCON() {
return SCENV_BCON;
}

public byte getSCENV_BRIT() {
return SCENV_BRIT;
}

public byte getSCENV_CCLS() {
return SCENV_CCLS;
}

public byte getSCENV_CFIT() {
return SCENV_CFIT;
}

public byte getSCENV_CHWO() {
return SCENV_CHWO;
}

public byte getSCENV_CRLF() {
return SCENV_CRLF;
}

public byte getSCENV_DSTR() {
return SCENV_DSTR;
}

public byte getSCENV_EXAG() {
return SCENV_EXAG;
}

public byte getSCENV_FTST() {
return SCENV_FTST;
}

public byte getSCENV_FUTR() {
return SCENV_FUTR;
}

public byte getSCENV_GRN() {
return SCENV_GRN;
}

public byte getSCENV_PMRE() {
return SCENV_PMRE;
}

public byte getSCFLAG_DV() {
return SCFLAG_DV;
}

public byte getSCHLLOC() {
return SCHLLOC;
}

public byte getSCHRS_SLPH() {
return SCHRS_SLPH;
}

public byte getSCHRS_SLPM() {
return SCHRS_SLPM;
}

public byte getSCLFSAT1() {
return SCLFSAT1;
}

public byte getSCLFSAT2() {
return SCLFSAT2;
}

public byte getSCLFSAT7() {
return SCLFSAT7;
}

public byte getSCLFSATO() {
return SCLFSATO;
}

public byte getSCMED_SLP() {
return SCMED_SLP;
}

public byte getSCMOLWP() {
return SCMOLWP;
}

public byte getSCOPECL200() {
return SCOPECL200;
}

public byte getSCOPECL30() {
return SCOPECL30;
}

public byte getSCOPNGBHA() {
return SCOPNGBHA;
}

public byte getSCOPNGBHB() {
return SCOPNGBHB;
}

public byte getSCOPNGBHC() {
return SCOPNGBHC;
}

public byte getSCOPNGBHD() {
return SCOPNGBHD;
}

public byte getSCOPNGBHE() {
return SCOPNGBHE;
}

public byte getSCOPNGBHF() {
return SCOPNGBHF;
}

public byte getSCOPNGBHG() {
return SCOPNGBHG;
}

public byte getSCOPNGBHH() {
return SCOPNGBHH;
}

public byte getSCPAROUTINT() {
return SCPAROUTINT;
}

public byte getSCRELHAPPY() {
return SCRELHAPPY;
}

public byte getSCRELPARAR() {
return SCRELPARAR;
}

public byte getSCRELPARCD() {
return SCRELPARCD;
}

public byte getSCRELPARDS() {
return SCRELPARDS;
}

public byte getSCRELPAREI() {
return SCRELPAREI;
}

public byte getSCRELPARIR() {
return SCRELPARIR;
}

public byte getSCRELPARKS() {
return SCRELPARKS;
}

public byte getSCRELPARRG() {
return SCRELPARRG;
}

public byte getSCRELPARWT() {
return SCRELPARWT;
}

public byte getSCRISKA() {
return SCRISKA;
}

public byte getSCRISKB() {
return SCRISKB;
}

public byte getSCSEX() {
return SCSEX;
}

public byte getSCSLP_QUAL() {
return SCSLP_QUAL;
}

public byte getSCTRUST() {
return SCTRUST;
}

public byte getSCTSLP_30M() {
return SCTSLP_30M;
}

public byte getSCTSLP_CGH() {
return SCTSLP_CGH;
}

public byte getSCTSLP_WAK() {
return SCTSLP_WAK;
}

public byte getSCTSTAWK() {
return SCTSTAWK;
}

public byte getSCWEMWBA() {
return SCWEMWBA;
}

public byte getSCWEMWBB() {
return SCWEMWBB;
}

public byte getSCWEMWBC() {
return SCWEMWBC;
}

public byte getSCWEMWBD() {
return SCWEMWBD;
}

public byte getSCWEMWBE() {
return SCWEMWBE;
}

public byte getSCWEMWBF() {
return SCWEMWBF;
}

public byte getSCWEMWBG() {
return SCWEMWBG;
}

public int getSECJOB_TM() {
return SECJOB_TM;
}

protected double SEEARNGRS_DV() {
return SEEARNGRS_DV;
}

public byte getSEEARNGRS_IF() {
return SEEARNGRS_IF;
}

protected double SEEARNNET_DV() {
return SEEARNNET_DV;
}

public byte getSEEKID() {
return SEEKID;
}

public int getSELFEMP_TM() {
return SELFEMP_TM;
}

public byte getSEX_DV() {
return SEX_DV;
}

public byte getSF1() {
return SF1;
}

protected double SF12MCS_DV() {
return SF12MCS_DV;
}

protected double SF12PCS_DV() {
return SF12PCS_DV;
}

public byte getSF2A() {
return SF2A;
}

public byte getSF2B() {
return SF2B;
}

public byte getSF3A() {
return SF3A;
}

public byte getSF3B() {
return SF3B;
}

public byte getSF4A() {
return SF4A;
}

public byte getSF4B() {
return SF4B;
}

public byte getSF5() {
return SF5;
}

public byte getSF6A() {
return SF6A;
}

public byte getSF6B() {
return SF6B;
}

public byte getSF6C() {
return SF6C;
}

public byte getSF7() {
return SF7;
}

public boolean getSINGLE_DV() {
return SINGLE_DV;
}

public byte getSLAPKID() {
return SLAPKID;
}

public byte getSMAID() {
return SMAID;
}

public byte getSOCIALKID() {
return SOCIALKID;
}

public byte getSPAID() {
return SPAID;
}

public byte getSPKDIF() {
return SPKDIF;
}

public int getSPPID() {
return SPPID;
}

public byte getSPPNO() {
return SPPNO;
}

public int getSTABLE_TM() {
return STABLE_TM;
}

public short getSTRATA() {
return STRATA;
}

public byte getSUSP() {
return SUSP;
}

public byte getSWEMWBS_DV() {
return SWEMWBS_DV;
}

public byte getTALKMATTER() {
return TALKMATTER;
}

public byte getTELDIF() {
return TELDIF;
}

public byte getTRAINDENY() {
return TRAINDENY;
}

public byte getUKBORN() {
return UKBORN;
}

public byte getUNDQUS() {
return UNDQUS;
}

public byte getUNSAFEW11() {
return UNSAFEW11;
}

public byte getUNSAFEW12() {
return UNSAFEW12;
}

public byte getUNSAFEW13() {
return UNSAFEW13;
}

public byte getUNSAFEW14() {
return UNSAFEW14;
}

public byte getUNSAFEW15() {
return UNSAFEW15;
}

public byte getUNSAFEW16() {
return UNSAFEW16;
}

public byte getUNSAFEW17() {
return UNSAFEW17;
}

public byte getUNSAFEW196() {
return UNSAFEW196;
}

public byte getUNSAFEW197() {
return UNSAFEW197;
}

public byte getUNSAFE_DV() {
return UNSAFE_DV;
}

public byte getURBAN_DV() {
return URBAN_DV;
}

public short getVOTE1() {
return VOTE1;
}

public short getVOTE2() {
return VOTE2;
}

public short getVOTE3() {
return VOTE3;
}

public short getVOTE4() {
return VOTE4;
}

public short getVOTE5() {
return VOTE5;
}

public short getVOTE6() {
return VOTE6;
}

public byte getWEKID() {
return WEKID;
}

public byte getWLSH1() {
return WLSH1;
}

public byte getWLSH2() {
return WLSH2;
}

public byte getWLSH3() {
return WLSH3;
}

public byte getWLSH4() {
return WLSH4;
}

public byte getWLSH96() {
return WLSH96;
}

public byte getWLSHUA() {
return WLSHUA;
}

public byte getWLSHUB() {
return WLSHUB;
}

public byte getWLSHUC() {
return WLSHUC;
}

public byte getWLSHUD() {
return WLSHUD;
}

public byte getWLSHUE() {
return WLSHUE;
}

public short getWORKDIS() {
return WORKDIS;
}

public byte getWORKTRAV() {
return WORKTRAV;
}

public byte getXPMOVE() {
return XPMOVE;
}

public byte getXTRA5MIN_DV() {
return XTRA5MIN_DV;
}

public byte getYELLKID() {
return YELLKID;
}

public byte getYNLP14() {
return YNLP14;
}

public US_Wave19_indresp_Record(String line) {
s = line.split("\t");
initPIDP(s[0]);
initHIDP(s[1]);
initPNO(s[2]);
initHHORIG(s[3]);
initMEMORIG(s[4]);
initPSU(s[5]);
initSTRATA(s[6]);
initSAMPST(s[7]);
initMONTH(s[8]);
initIVFIO(s[9]);
initIOUTCOME(s[10]);
initSEX(s[11]);
initDVAGE(s[12]);
initBIRTHY(s[13]);
initISTRTDATD(s[14]);
initISTRTDATM(s[15]);
initISTRTDATY(s[16]);
initMVEVER(s[17]);
initMVMNTH(s[18]);
initMVYR(s[19]);
initLKMOVE(s[20]);
initXPMOVE(s[21]);
initJBSTAT(s[22]);
initMLSTATCHK(s[23]);
initMLSTAT(s[24]);
initUKBORN(s[25]);
initPLBORNC(s[26]);
initYR2UK4(s[27]);
initCITZN1(s[28]);
initCITZN2(s[29]);
initCITZN3(s[30]);
initQFHIGH(s[31]);
initQUALOC(s[32]);
initQFVOC1(s[33]);
initQFVOC2(s[34]);
initQFVOC3(s[35]);
initQFVOC4(s[36]);
initQFVOC5(s[37]);
initQFVOC6(s[38]);
initQFVOC7(s[39]);
initQFVOC8(s[40]);
initQFVOC9(s[41]);
initQFVOC10(s[42]);
initQFVOC11(s[43]);
initQFVOC12(s[44]);
initQFVOC13(s[45]);
initQFVOC14(s[46]);
initQFVOC15(s[47]);
initQFVOC96(s[48]);
initSCHOOL(s[49]);
initSCEND(s[50]);
initSCHLLOC(s[51]);
initFENOW(s[52]);
initFEEND(s[53]);
initEDTYPE(s[54]);
initEDASP(s[55]);
initFEDLIK(s[56]);
initFEDNT(s[57]);
initWLSH1(s[58]);
initWLSH2(s[59]);
initWLSH3(s[60]);
initWLSH4(s[61]);
initWLSH96(s[62]);
initWLSHUA(s[63]);
initWLSHUB(s[64]);
initWLSHUC(s[65]);
initWLSHUD(s[66]);
initWLSHUE(s[67]);
initPAJU(s[68]);
initMAJU(s[69]);
initPACOB(s[70]);
initPAYRUK(s[71]);
initPAYRUK1(s[72]);
initMACOB(s[73]);
initMAYRUK(s[74]);
initMAYRUK1(s[75]);
initPGPROB(s[76]);
initPGMROB(s[77]);
initMGPROB(s[78]);
initMGMROB(s[79]);
initPAEDQF(s[80]);
initMAEDQF(s[81]);
initLVAG16(s[82]);
initAGELH(s[83]);
initLVAG14(s[84]);
initYNLP14(s[85]);
initNATID1(s[86]);
initNATID2(s[87]);
initNATID3(s[88]);
initNATID4(s[89]);
initNATID5(s[90]);
initNATID6(s[91]);
initNATID97(s[92]);
initRACEL(s[93]);
initRACELO_CODE(s[94]);
initPAID(s[95]);
initSPAID(s[96]);
initMAID(s[97]);
initSMAID(s[98]);
initBRITID(s[99]);
initENGLANG(s[100]);
initENGSPK(s[101]);
initSPKDIF(s[102]);
initENGTEL(s[103]);
initTELDIF(s[104]);
initENGREAD(s[105]);
initREADDIF(s[106]);
initENGFORM(s[107]);
initFORMDIF(s[108]);
initOPRLG(s[109]);
initOPRLG0(s[110]);
initOPRLG0NI(s[111]);
initOPRLG1(s[112]);
initNIREL(s[113]);
initNIACT(s[114]);
initOPRLG2(s[115]);
initOPRLG3(s[116]);
initMABROAD(s[117]);
initMNABROAD(s[118]);
initMINDIRECT(s[119]);
initMNOTHERC(s[120]);
initMRETURNED(s[121]);
initMLIVED(s[122]);
initMNLIVED(s[123]);
initMOVEAGE(s[124]);
initMNMOVES(s[125]);
initMLIVEDIST(s[126]);
initMLIVEDIST5(s[127]);
initMLIVEDISTF(s[128]);
initLCMARM(s[129]);
initLCMARY4(s[130]);
initMPNO(s[131]);
initLCMCOH(s[132]);
initLCMCBM(s[133]);
initLCMCBY4(s[134]);
initLCMSPM(s[135]);
initLCMSPY4(s[136]);
initNMAR(s[137]);
initLCOH(s[138]);
initLNCOH(s[139]);
initLADOPT(s[140]);
initLNADOPT(s[141]);
initLPRNT(s[142]);
initLNPRNT(s[143]);
initLCHMOR(s[144]);
initLCHMORN(s[145]);
initSF1(s[146]);
initSF2A(s[147]);
initSF2B(s[148]);
initSF3A(s[149]);
initSF3B(s[150]);
initSF4A(s[151]);
initSF4B(s[152]);
initSF5(s[153]);
initSF6A(s[154]);
initSF6B(s[155]);
initSF6C(s[156]);
initSF7(s[157]);
initHLHT(s[158]);
initHLHTF(s[159]);
initHLHTI(s[160]);
initHLHTC(s[161]);
initHLWT(s[162]);
initHLWTS(s[163]);
initHLWTP(s[164]);
initHLWTK(s[165]);
initHLWTE(s[166]);
initHLWTL(s[167]);
initHEALTH(s[168]);
initDISDIF1(s[169]);
initDISDIF2(s[170]);
initDISDIF3(s[171]);
initDISDIF4(s[172]);
initDISDIF5(s[173]);
initDISDIF6(s[174]);
initDISDIF7(s[175]);
initDISDIF8(s[176]);
initDISDIF9(s[177]);
initDISDIF10(s[178]);
initDISDIF11(s[179]);
initDISDIF12(s[180]);
initDISDIF96(s[181]);
initHCOND1(s[182]);
initHCOND2(s[183]);
initHCOND3(s[184]);
initHCOND4(s[185]);
initHCOND5(s[186]);
initHCOND6(s[187]);
initHCOND7(s[188]);
initHCOND8(s[189]);
initHCOND9(s[190]);
initHCOND10(s[191]);
initHCOND11(s[192]);
initHCOND12(s[193]);
initHCOND13(s[194]);
initHCOND14(s[195]);
initHCOND15(s[196]);
initHCOND16(s[197]);
initHCOND17(s[198]);
initHCOND96(s[199]);
initHCONDS01(s[200]);
initHCONDS02(s[201]);
initHCONDS03(s[202]);
initHCONDS04(s[203]);
initHCONDS05(s[204]);
initHCONDS06(s[205]);
initHCONDS07(s[206]);
initHCONDS08(s[207]);
initHCONDS09(s[208]);
initHCONDS10(s[209]);
initHCONDS11(s[210]);
initHCONDS12(s[211]);
initHCONDS13(s[212]);
initHCONDS14(s[213]);
initHCONDS15(s[214]);
initHCONDS16(s[215]);
initHCONDS17(s[216]);
initHCONDA01(s[217]);
initHCONDA02(s[218]);
initHCONDA03(s[219]);
initHCONDA04(s[220]);
initHCONDA05(s[221]);
initHCONDA06(s[222]);
initHCONDA07(s[223]);
initHCONDA08(s[224]);
initHCONDA09(s[225]);
initHCONDA10(s[226]);
initHCONDA11(s[227]);
initHCONDA12(s[228]);
initHCONDA13(s[229]);
initHCONDA14(s[230]);
initHCONDA15(s[231]);
initHCONDA16(s[232]);
initHCONDA17(s[233]);
initAIDHH(s[234]);
initAIDHUA1(s[235]);
initAIDHUA2(s[236]);
initAIDHUA3(s[237]);
initAIDHUA4(s[238]);
initAIDHUA5(s[239]);
initAIDHUA6(s[240]);
initAIDHUA7(s[241]);
initAIDHUA8(s[242]);
initAIDHUA9(s[243]);
initAIDHUA10(s[244]);
initAIDHUA11(s[245]);
initAIDHUA12(s[246]);
initAIDHUA13(s[247]);
initAIDHUA14(s[248]);
initAIDHUA15(s[249]);
initAIDHUA16(s[250]);
initAIDXHH(s[251]);
initNAIDXHH(s[252]);
initAIDHU1(s[253]);
initAIDHU2(s[254]);
initAIDHRS(s[255]);
initAIDEFT(s[256]);
initLGAPED(s[257]);
initJBHAS(s[258]);
initJBOFF(s[259]);
initJBOFFY(s[260]);
initJBTERM1(s[261]);
initJBTERM2(s[262]);
initJBSEMP(s[263]);
initJBBGD(s[264]);
initJBBGM(s[265]);
initJBBGY(s[266]);
initJBMNGR(s[267]);
initJBSIZE(s[268]);
initJBSECT(s[269]);
initJBSECTPUB(s[270]);
initJBHRS(s[271]);
initJBOT(s[272]);
initJBOTPD(s[273]);
initJBPL(s[274]);
initJBTTWT(s[275]);
initWORKDIS(s[276]);
initWORKTRAV(s[277]);
initPAYGWC(s[278]);
initPAYNWC(s[279]);
initPAYUSL(s[280]);
initPAYU(s[281]);
initPAYUWC(s[282]);
initPAYUG(s[283]);
initPAYTYP(s[284]);
initOVTPAY(s[285]);
initEXTNSA(s[286]);
initEXTRATE(s[287]);
initEXTREST(s[288]);
initBASNSA(s[289]);
initBASRATE(s[290]);
initBASREST(s[291]);
initOVTNSA(s[292]);
initOVTRATE(s[293]);
initOVTREST(s[294]);
initJBPEN(s[295]);
initJBPENM(s[296]);
initJSBOSS(s[297]);
initJSSIZE(s[298]);
initJSHRS(s[299]);
initJSTYPEB(s[300]);
initJSACCS(s[301]);
initJSPART(s[302]);
initJSPRBM(s[303]);
initJSPRBY4(s[304]);
initJSPREM(s[305]);
initJSPREY4(s[306]);
initJSPRLS(s[307]);
initJSPRTX(s[308]);
initJSPRNI(s[309]);
initJSPAYU(s[310]);
initJSPAYW(s[311]);
initJSPYTX(s[312]);
initJSPYNI(s[313]);
initJSPL(s[314]);
initJSTTWT(s[315]);
initJSTTWTB(s[316]);
initJSWORKDIS(s[317]);
initJSWORKTRAV(s[318]);
initJBSAT(s[319]);
initJULK4WK(s[320]);
initJULK4X1(s[321]);
initJULK4X2(s[322]);
initJULK4X3(s[323]);
initJULK4X4(s[324]);
initJULK4X5(s[325]);
initJULK4X6(s[326]);
initJULK4X96(s[327]);
initJULKJB(s[328]);
initJUBGN(s[329]);
initJBHAD(s[330]);
initRETDATEY(s[331]);
initRETDATEM(s[332]);
initJLENDY(s[333]);
initJLENDM(s[334]);
initJLSEMP(s[335]);
initJLBOSS(s[336]);
initJLMNGR(s[337]);
initJLSIZE(s[338]);
initJ2HAS(s[339]);
initJ2SEMP(s[340]);
initJ2HRS(s[341]);
initJ2PAY(s[342]);
initJOBLOOK(s[343]);
initJOBDENY(s[344]);
initRESJOBDENY1(s[345]);
initRESJOBDENY2(s[346]);
initRESJOBDENY3(s[347]);
initRESJOBDENY4(s[348]);
initRESJOBDENY5(s[349]);
initRESJOBDENY6(s[350]);
initRESJOBDENY7(s[351]);
initRESJOBDENY8(s[352]);
initRESJOBDENY9(s[353]);
initRESJOBDENY96(s[354]);
initRESJOBDENY97(s[355]);
initEED12(s[356]);
initPROMODENY(s[357]);
initRESPROMODENY1(s[358]);
initRESPROMODENY2(s[359]);
initRESPROMODENY3(s[360]);
initRESPROMODENY4(s[361]);
initRESPROMODENY5(s[362]);
initRESPROMODENY6(s[363]);
initRESPROMODENY7(s[364]);
initRESPROMODENY8(s[365]);
initRESPROMODENY9(s[366]);
initRESPROMODENY96(s[367]);
initRESPROMODENY97(s[368]);
initTRAINDENY(s[369]);
initRESTRAINDENY1(s[370]);
initRESTRAINDENY2(s[371]);
initRESTRAINDENY3(s[372]);
initRESTRAINDENY4(s[373]);
initRESTRAINDENY5(s[374]);
initRESTRAINDENY6(s[375]);
initRESTRAINDENY7(s[376]);
initRESTRAINDENY8(s[377]);
initRESTRAINDENY9(s[378]);
initRESTRAINDENY96(s[379]);
initRESTRAINDENY97(s[380]);
initCCARE(s[381]);
initCCWORK(s[382]);
initHLPHMWK(s[383]);
initLEVELIMP(s[384]);
initSAMSCH(s[385]);
initSOCIALKID(s[386]);
initDINNER(s[387]);
initQUARREL(s[388]);
initTALKMATTER(s[389]);
initPRAISEKID(s[390]);
initRULESKID(s[391]);
initSLAPKID(s[392]);
initCUDDLEKID(s[393]);
initYELLKID(s[394]);
initLVREL1(s[395]);
initLVREL2(s[396]);
initLVREL3(s[397]);
initLVREL4(s[398]);
initLVREL5(s[399]);
initLVREL6(s[400]);
initLVREL7(s[401]);
initLVREL8(s[402]);
initLVREL96(s[403]);
initMAAGE(s[404]);
initPAAGE(s[405]);
initNRELSW11(s[406]);
initNRELSW12(s[407]);
initNRELSW13(s[408]);
initNRELSW14(s[409]);
initNRELSW15(s[410]);
initNRELSW16(s[411]);
initPARMAR(s[412]);
initOHCH16(s[413]);
initSEEKID(s[414]);
initWEKID(s[415]);
initFARKID(s[416]);
initRELKID(s[417]);
initMASEE(s[418]);
initMACON(s[419]);
initMAFAR(s[420]);
initPASEE(s[421]);
initPACON(s[422]);
initPAFAR(s[423]);
initCHSEE(s[424]);
initCHCON(s[425]);
initCHFAR(s[426]);
initKIDSPT(s[427]);
initFTEXV(s[428]);
initFTEXW(s[429]);
initREMIT1(s[430]);
initREMIT2(s[431]);
initREMIT3(s[432]);
initREMIT4(s[433]);
initREMIT5(s[434]);
initREMITFREQ1(s[435]);
initREMITREG1(s[436]);
initREMITAMT1(s[437]);
initREMCNTRY1(s[438]);
initREMITUSUAL1(s[439]);
initREMUSAMT1(s[440]);
initREMITFREQ2(s[441]);
initREMITREG2(s[442]);
initREMITAMT2(s[443]);
initREMCNTRY2(s[444]);
initREMITUSUAL2(s[445]);
initREMUSAMT2(s[446]);
initREMITFREQ3(s[447]);
initREMITREG3(s[448]);
initREMITAMT3(s[449]);
initREMCNTRY3(s[450]);
initREMITUSUAL3(s[451]);
initREMUSAMT3(s[452]);
initREMITFREQ4(s[453]);
initREMITREG4(s[454]);
initREMITAMT4(s[455]);
initREMCNTRY4(s[456]);
initREMITUSUAL4(s[457]);
initREMUSAMT4(s[458]);
initBTYPE1(s[459]);
initBTYPE2(s[460]);
initBTYPE3(s[461]);
initBTYPE4(s[462]);
initBTYPE5(s[463]);
initBTYPE6(s[464]);
initBTYPE7(s[465]);
initBTYPE8(s[466]);
initBTYPE9(s[467]);
initBTYPE96(s[468]);
initBENUNEMP1(s[469]);
initBENUNEMP2(s[470]);
initBENUNEMP96(s[471]);
initBENDIS1(s[472]);
initBENDIS2(s[473]);
initBENDIS3(s[474]);
initBENDIS4(s[475]);
initBENDIS5(s[476]);
initBENDIS6(s[477]);
initBENDIS7(s[478]);
initBENDIS8(s[479]);
initBENDIS9(s[480]);
initBENDIS10(s[481]);
initBENDIS11(s[482]);
initBENDIS96(s[483]);
initBENPEN1(s[484]);
initBENPEN2(s[485]);
initBENPEN3(s[486]);
initBENPEN4(s[487]);
initBENPEN5(s[488]);
initBENPEN6(s[489]);
initBENPEN7(s[490]);
initBENPEN8(s[491]);
initBENPEN96(s[492]);
initNISERPS(s[493]);
initBENCB(s[494]);
initBENCTC(s[495]);
initBENFAM1(s[496]);
initBENFAM2(s[497]);
initBENFAM3(s[498]);
initBENFAM4(s[499]);
initBENFAM5(s[500]);
initBENFAM96(s[501]);
initBENTAX1(s[502]);
initBENTAX2(s[503]);
initBENTAX3(s[504]);
initBENTAX4(s[505]);
initBENTAX5(s[506]);
initBENTAX96(s[507]);
initBENHOU1(s[508]);
initBENHOU2(s[509]);
initBENHOU3(s[510]);
initBENHOU4(s[511]);
initBENHOU96(s[512]);
initBENSTA1(s[513]);
initBENSTA2(s[514]);
initBENSTA3(s[515]);
initBENSTA4(s[516]);
initBENSTA5(s[517]);
initBENSTA6(s[518]);
initBENSTA7(s[519]);
initBENSTA8(s[520]);
initBENSTA96(s[521]);
initFIYRDIA(s[522]);
initFIYRDB1(s[523]);
initFIYRDB2(s[524]);
initFIYRDB3(s[525]);
initFIYRDB4(s[526]);
initFIYRDB5(s[527]);
initFIYRDB6(s[528]);
initFINNOW(s[529]);
initFINFUT(s[530]);
initVOTE1(s[531]);
initVOTE2(s[532]);
initVOTE3(s[533]);
initVOTE4(s[534]);
initVOTE5(s[535]);
initVOTE6(s[536]);
initUNSAFEW11(s[537]);
initUNSAFEW12(s[538]);
initUNSAFEW13(s[539]);
initUNSAFEW14(s[540]);
initUNSAFEW15(s[541]);
initUNSAFEW16(s[542]);
initUNSAFEW17(s[543]);
initUNSAFEW196(s[544]);
initUNSAFEW197(s[545]);
initRESUNSAFEW1_1_1(s[546]);
initRESUNSAFEW1_1_2(s[547]);
initRESUNSAFEW1_1_3(s[548]);
initRESUNSAFEW1_1_4(s[549]);
initRESUNSAFEW1_1_5(s[550]);
initRESUNSAFEW1_1_6(s[551]);
initRESUNSAFEW1_1_7(s[552]);
initRESUNSAFEW1_1_8(s[553]);
initRESUNSAFEW1_1_9(s[554]);
initRESUNSAFEW1_1_96(s[555]);
initRESUNSAFEW1_1_97(s[556]);
initRESUNSAFEW1_2_1(s[557]);
initRESUNSAFEW1_2_2(s[558]);
initRESUNSAFEW1_2_3(s[559]);
initRESUNSAFEW1_2_4(s[560]);
initRESUNSAFEW1_2_5(s[561]);
initRESUNSAFEW1_2_6(s[562]);
initRESUNSAFEW1_2_7(s[563]);
initRESUNSAFEW1_2_8(s[564]);
initRESUNSAFEW1_2_9(s[565]);
initRESUNSAFEW1_2_96(s[566]);
initRESUNSAFEW1_2_97(s[567]);
initRESUNSAFEW1_3_1(s[568]);
initRESUNSAFEW1_3_2(s[569]);
initRESUNSAFEW1_3_3(s[570]);
initRESUNSAFEW1_3_4(s[571]);
initRESUNSAFEW1_3_5(s[572]);
initRESUNSAFEW1_3_6(s[573]);
initRESUNSAFEW1_3_7(s[574]);
initRESUNSAFEW1_3_8(s[575]);
initRESUNSAFEW1_3_9(s[576]);
initRESUNSAFEW1_3_96(s[577]);
initRESUNSAFEW1_3_97(s[578]);
initRESUNSAFEW1_4_1(s[579]);
initRESUNSAFEW1_4_2(s[580]);
initRESUNSAFEW1_4_3(s[581]);
initRESUNSAFEW1_4_4(s[582]);
initRESUNSAFEW1_4_5(s[583]);
initRESUNSAFEW1_4_6(s[584]);
initRESUNSAFEW1_4_7(s[585]);
initRESUNSAFEW1_4_8(s[586]);
initRESUNSAFEW1_4_9(s[587]);
initRESUNSAFEW1_4_96(s[588]);
initRESUNSAFEW1_4_97(s[589]);
initRESUNSAFEW1_5_1(s[590]);
initRESUNSAFEW1_5_2(s[591]);
initRESUNSAFEW1_5_3(s[592]);
initRESUNSAFEW1_5_4(s[593]);
initRESUNSAFEW1_5_5(s[594]);
initRESUNSAFEW1_5_6(s[595]);
initRESUNSAFEW1_5_7(s[596]);
initRESUNSAFEW1_5_8(s[597]);
initRESUNSAFEW1_5_9(s[598]);
initRESUNSAFEW1_5_96(s[599]);
initRESUNSAFEW1_5_97(s[600]);
initRESUNSAFEW1_6_1(s[601]);
initRESUNSAFEW1_6_2(s[602]);
initRESUNSAFEW1_6_3(s[603]);
initRESUNSAFEW1_6_4(s[604]);
initRESUNSAFEW1_6_5(s[605]);
initRESUNSAFEW1_6_6(s[606]);
initRESUNSAFEW1_6_7(s[607]);
initRESUNSAFEW1_6_8(s[608]);
initRESUNSAFEW1_6_9(s[609]);
initRESUNSAFEW1_6_96(s[610]);
initRESUNSAFEW1_6_97(s[611]);
initRESUNSAFEW1_7_1(s[612]);
initRESUNSAFEW1_7_2(s[613]);
initRESUNSAFEW1_7_3(s[614]);
initRESUNSAFEW1_7_4(s[615]);
initRESUNSAFEW1_7_5(s[616]);
initRESUNSAFEW1_7_6(s[617]);
initRESUNSAFEW1_7_7(s[618]);
initRESUNSAFEW1_7_8(s[619]);
initRESUNSAFEW1_7_9(s[620]);
initRESUNSAFEW1_7_96(s[621]);
initRESUNSAFEW1_7_97(s[622]);
initRESUNSAFEW1_97_1(s[623]);
initRESUNSAFEW1_97_2(s[624]);
initRESUNSAFEW1_97_3(s[625]);
initRESUNSAFEW1_97_4(s[626]);
initRESUNSAFEW1_97_5(s[627]);
initRESUNSAFEW1_97_6(s[628]);
initRESUNSAFEW1_97_7(s[629]);
initRESUNSAFEW1_97_8(s[630]);
initRESUNSAFEW1_97_9(s[631]);
initRESUNSAFEW1_97_96(s[632]);
initRESUNSAFEW1_97_97(s[633]);
initAVOIDANCEW11(s[634]);
initAVOIDANCEW12(s[635]);
initAVOIDANCEW13(s[636]);
initAVOIDANCEW14(s[637]);
initAVOIDANCEW15(s[638]);
initAVOIDANCEW16(s[639]);
initAVOIDANCEW17(s[640]);
initAVOIDANCEW196(s[641]);
initAVOIDANCEW197(s[642]);
initRESAVOIDW1_1_1(s[643]);
initRESAVOIDW1_1_2(s[644]);
initRESAVOIDW1_1_3(s[645]);
initRESAVOIDW1_1_4(s[646]);
initRESAVOIDW1_1_5(s[647]);
initRESAVOIDW1_1_6(s[648]);
initRESAVOIDW1_1_7(s[649]);
initRESAVOIDW1_1_8(s[650]);
initRESAVOIDW1_1_9(s[651]);
initRESAVOIDW1_1_96(s[652]);
initRESAVOIDW1_1_97(s[653]);
initRESAVOIDW1_2_1(s[654]);
initRESAVOIDW1_2_2(s[655]);
initRESAVOIDW1_2_3(s[656]);
initRESAVOIDW1_2_4(s[657]);
initRESAVOIDW1_2_5(s[658]);
initRESAVOIDW1_2_6(s[659]);
initRESAVOIDW1_2_7(s[660]);
initRESAVOIDW1_2_8(s[661]);
initRESAVOIDW1_2_9(s[662]);
initRESAVOIDW1_2_96(s[663]);
initRESAVOIDW1_2_97(s[664]);
initRESAVOIDW1_3_1(s[665]);
initRESAVOIDW1_3_2(s[666]);
initRESAVOIDW1_3_3(s[667]);
initRESAVOIDW1_3_4(s[668]);
initRESAVOIDW1_3_5(s[669]);
initRESAVOIDW1_3_6(s[670]);
initRESAVOIDW1_3_7(s[671]);
initRESAVOIDW1_3_8(s[672]);
initRESAVOIDW1_3_9(s[673]);
initRESAVOIDW1_3_96(s[674]);
initRESAVOIDW1_3_97(s[675]);
initRESAVOIDW1_4_1(s[676]);
initRESAVOIDW1_4_2(s[677]);
initRESAVOIDW1_4_3(s[678]);
initRESAVOIDW1_4_4(s[679]);
initRESAVOIDW1_4_5(s[680]);
initRESAVOIDW1_4_6(s[681]);
initRESAVOIDW1_4_7(s[682]);
initRESAVOIDW1_4_8(s[683]);
initRESAVOIDW1_4_9(s[684]);
initRESAVOIDW1_4_96(s[685]);
initRESAVOIDW1_4_97(s[686]);
initRESAVOIDW1_5_1(s[687]);
initRESAVOIDW1_5_2(s[688]);
initRESAVOIDW1_5_3(s[689]);
initRESAVOIDW1_5_4(s[690]);
initRESAVOIDW1_5_5(s[691]);
initRESAVOIDW1_5_6(s[692]);
initRESAVOIDW1_5_7(s[693]);
initRESAVOIDW1_5_8(s[694]);
initRESAVOIDW1_5_9(s[695]);
initRESAVOIDW1_5_96(s[696]);
initRESAVOIDW1_5_97(s[697]);
initRESAVOIDW1_6_1(s[698]);
initRESAVOIDW1_6_2(s[699]);
initRESAVOIDW1_6_3(s[700]);
initRESAVOIDW1_6_4(s[701]);
initRESAVOIDW1_6_5(s[702]);
initRESAVOIDW1_6_6(s[703]);
initRESAVOIDW1_6_7(s[704]);
initRESAVOIDW1_6_8(s[705]);
initRESAVOIDW1_6_9(s[706]);
initRESAVOIDW1_6_96(s[707]);
initRESAVOIDW1_6_97(s[708]);
initRESAVOIDW1_7_1(s[709]);
initRESAVOIDW1_7_2(s[710]);
initRESAVOIDW1_7_3(s[711]);
initRESAVOIDW1_7_4(s[712]);
initRESAVOIDW1_7_5(s[713]);
initRESAVOIDW1_7_6(s[714]);
initRESAVOIDW1_7_7(s[715]);
initRESAVOIDW1_7_8(s[716]);
initRESAVOIDW1_7_9(s[717]);
initRESAVOIDW1_7_96(s[718]);
initRESAVOIDW1_7_97(s[719]);
initRESAVOIDW1_97_1(s[720]);
initRESAVOIDW1_97_2(s[721]);
initRESAVOIDW1_97_3(s[722]);
initRESAVOIDW1_97_4(s[723]);
initRESAVOIDW1_97_5(s[724]);
initRESAVOIDW1_97_6(s[725]);
initRESAVOIDW1_97_7(s[726]);
initRESAVOIDW1_97_8(s[727]);
initRESAVOIDW1_97_9(s[728]);
initRESAVOIDW1_97_96(s[729]);
initRESAVOIDW1_97_97(s[730]);
initINSULTEDW11(s[731]);
initINSULTEDW12(s[732]);
initINSULTEDW13(s[733]);
initINSULTEDW14(s[734]);
initINSULTEDW15(s[735]);
initINSULTEDW16(s[736]);
initINSULTEDW17(s[737]);
initINSULTEDW196(s[738]);
initINSULTEDW197(s[739]);
initRESINSULTEDW1_1_1(s[740]);
initRESINSULTEDW1_1_2(s[741]);
initRESINSULTEDW1_1_3(s[742]);
initRESINSULTEDW1_1_4(s[743]);
initRESINSULTEDW1_1_5(s[744]);
initRESINSULTEDW1_1_6(s[745]);
initRESINSULTEDW1_1_7(s[746]);
initRESINSULTEDW1_1_8(s[747]);
initRESINSULTEDW1_1_9(s[748]);
initRESINSULTEDW1_1_96(s[749]);
initRESINSULTEDW1_1_97(s[750]);
initRESINSULTEDW1_2_1(s[751]);
initRESINSULTEDW1_2_2(s[752]);
initRESINSULTEDW1_2_3(s[753]);
initRESINSULTEDW1_2_4(s[754]);
initRESINSULTEDW1_2_5(s[755]);
initRESINSULTEDW1_2_6(s[756]);
initRESINSULTEDW1_2_7(s[757]);
initRESINSULTEDW1_2_8(s[758]);
initRESINSULTEDW1_2_9(s[759]);
initRESINSULTEDW1_2_96(s[760]);
initRESINSULTEDW1_2_97(s[761]);
initRESINSULTEDW1_3_1(s[762]);
initRESINSULTEDW1_3_2(s[763]);
initRESINSULTEDW1_3_3(s[764]);
initRESINSULTEDW1_3_4(s[765]);
initRESINSULTEDW1_3_5(s[766]);
initRESINSULTEDW1_3_6(s[767]);
initRESINSULTEDW1_3_7(s[768]);
initRESINSULTEDW1_3_8(s[769]);
initRESINSULTEDW1_3_9(s[770]);
initRESINSULTEDW1_3_96(s[771]);
initRESINSULTEDW1_3_97(s[772]);
initRESINSULTEDW1_4_1(s[773]);
initRESINSULTEDW1_4_2(s[774]);
initRESINSULTEDW1_4_3(s[775]);
initRESINSULTEDW1_4_4(s[776]);
initRESINSULTEDW1_4_5(s[777]);
initRESINSULTEDW1_4_6(s[778]);
initRESINSULTEDW1_4_7(s[779]);
initRESINSULTEDW1_4_8(s[780]);
initRESINSULTEDW1_4_9(s[781]);
initRESINSULTEDW1_4_96(s[782]);
initRESINSULTEDW1_4_97(s[783]);
initRESINSULTEDW1_5_1(s[784]);
initRESINSULTEDW1_5_2(s[785]);
initRESINSULTEDW1_5_3(s[786]);
initRESINSULTEDW1_5_4(s[787]);
initRESINSULTEDW1_5_5(s[788]);
initRESINSULTEDW1_5_6(s[789]);
initRESINSULTEDW1_5_7(s[790]);
initRESINSULTEDW1_5_8(s[791]);
initRESINSULTEDW1_5_9(s[792]);
initRESINSULTEDW1_5_96(s[793]);
initRESINSULTEDW1_5_97(s[794]);
initRESINSULTEDW1_6_1(s[795]);
initRESINSULTEDW1_6_2(s[796]);
initRESINSULTEDW1_6_3(s[797]);
initRESINSULTEDW1_6_4(s[798]);
initRESINSULTEDW1_6_5(s[799]);
initRESINSULTEDW1_6_6(s[800]);
initRESINSULTEDW1_6_7(s[801]);
initRESINSULTEDW1_6_8(s[802]);
initRESINSULTEDW1_6_9(s[803]);
initRESINSULTEDW1_6_96(s[804]);
initRESINSULTEDW1_6_97(s[805]);
initRESINSULTEDW1_7_1(s[806]);
initRESINSULTEDW1_7_2(s[807]);
initRESINSULTEDW1_7_3(s[808]);
initRESINSULTEDW1_7_4(s[809]);
initRESINSULTEDW1_7_5(s[810]);
initRESINSULTEDW1_7_6(s[811]);
initRESINSULTEDW1_7_7(s[812]);
initRESINSULTEDW1_7_8(s[813]);
initRESINSULTEDW1_7_9(s[814]);
initRESINSULTEDW1_7_96(s[815]);
initRESINSULTEDW1_7_97(s[816]);
initRESINSULTEDW1_97_1(s[817]);
initRESINSULTEDW1_97_2(s[818]);
initRESINSULTEDW1_97_3(s[819]);
initRESINSULTEDW1_97_4(s[820]);
initRESINSULTEDW1_97_5(s[821]);
initRESINSULTEDW1_97_6(s[822]);
initRESINSULTEDW1_97_7(s[823]);
initRESINSULTEDW1_97_8(s[824]);
initRESINSULTEDW1_97_9(s[825]);
initRESINSULTEDW1_97_96(s[826]);
initRESINSULTEDW1_97_97(s[827]);
initATTACKEDW11(s[828]);
initATTACKEDW12(s[829]);
initATTACKEDW13(s[830]);
initATTACKEDW14(s[831]);
initATTACKEDW15(s[832]);
initATTACKEDW16(s[833]);
initATTACKEDW17(s[834]);
initATTACKEDW196(s[835]);
initATTACKEDW197(s[836]);
initRESATTACKEDW1_1_1(s[837]);
initRESATTACKEDW1_1_2(s[838]);
initRESATTACKEDW1_1_3(s[839]);
initRESATTACKEDW1_1_4(s[840]);
initRESATTACKEDW1_1_5(s[841]);
initRESATTACKEDW1_1_6(s[842]);
initRESATTACKEDW1_1_7(s[843]);
initRESATTACKEDW1_1_8(s[844]);
initRESATTACKEDW1_1_9(s[845]);
initRESATTACKEDW1_1_96(s[846]);
initRESATTACKEDW1_1_97(s[847]);
initRESATTACKEDW1_2_1(s[848]);
initRESATTACKEDW1_2_2(s[849]);
initRESATTACKEDW1_2_3(s[850]);
initRESATTACKEDW1_2_4(s[851]);
initRESATTACKEDW1_2_5(s[852]);
initRESATTACKEDW1_2_6(s[853]);
initRESATTACKEDW1_2_7(s[854]);
initRESATTACKEDW1_2_8(s[855]);
initRESATTACKEDW1_2_9(s[856]);
initRESATTACKEDW1_2_96(s[857]);
initRESATTACKEDW1_2_97(s[858]);
initRESATTACKEDW1_3_1(s[859]);
initRESATTACKEDW1_3_2(s[860]);
initRESATTACKEDW1_3_3(s[861]);
initRESATTACKEDW1_3_4(s[862]);
initRESATTACKEDW1_3_5(s[863]);
initRESATTACKEDW1_3_6(s[864]);
initRESATTACKEDW1_3_7(s[865]);
initRESATTACKEDW1_3_8(s[866]);
initRESATTACKEDW1_3_9(s[867]);
initRESATTACKEDW1_3_96(s[868]);
initRESATTACKEDW1_3_97(s[869]);
initRESATTACKEDW1_4_1(s[870]);
initRESATTACKEDW1_4_2(s[871]);
initRESATTACKEDW1_4_3(s[872]);
initRESATTACKEDW1_4_4(s[873]);
initRESATTACKEDW1_4_5(s[874]);
initRESATTACKEDW1_4_6(s[875]);
initRESATTACKEDW1_4_7(s[876]);
initRESATTACKEDW1_4_8(s[877]);
initRESATTACKEDW1_4_9(s[878]);
initRESATTACKEDW1_4_96(s[879]);
initRESATTACKEDW1_4_97(s[880]);
initRESATTACKEDW1_5_1(s[881]);
initRESATTACKEDW1_5_2(s[882]);
initRESATTACKEDW1_5_3(s[883]);
initRESATTACKEDW1_5_4(s[884]);
initRESATTACKEDW1_5_5(s[885]);
initRESATTACKEDW1_5_6(s[886]);
initRESATTACKEDW1_5_7(s[887]);
initRESATTACKEDW1_5_8(s[888]);
initRESATTACKEDW1_5_9(s[889]);
initRESATTACKEDW1_5_96(s[890]);
initRESATTACKEDW1_5_97(s[891]);
initRESATTACKEDW1_6_1(s[892]);
initRESATTACKEDW1_6_2(s[893]);
initRESATTACKEDW1_6_3(s[894]);
initRESATTACKEDW1_6_4(s[895]);
initRESATTACKEDW1_6_5(s[896]);
initRESATTACKEDW1_6_6(s[897]);
initRESATTACKEDW1_6_7(s[898]);
initRESATTACKEDW1_6_8(s[899]);
initRESATTACKEDW1_6_9(s[900]);
initRESATTACKEDW1_6_96(s[901]);
initRESATTACKEDW1_6_97(s[902]);
initRESATTACKEDW1_7_1(s[903]);
initRESATTACKEDW1_7_2(s[904]);
initRESATTACKEDW1_7_3(s[905]);
initRESATTACKEDW1_7_4(s[906]);
initRESATTACKEDW1_7_5(s[907]);
initRESATTACKEDW1_7_6(s[908]);
initRESATTACKEDW1_7_7(s[909]);
initRESATTACKEDW1_7_8(s[910]);
initRESATTACKEDW1_7_9(s[911]);
initRESATTACKEDW1_7_96(s[912]);
initRESATTACKEDW1_7_97(s[913]);
initRESATTACKEDW1_97_1(s[914]);
initRESATTACKEDW1_97_2(s[915]);
initRESATTACKEDW1_97_3(s[916]);
initRESATTACKEDW1_97_4(s[917]);
initRESATTACKEDW1_97_5(s[918]);
initRESATTACKEDW1_97_6(s[919]);
initRESATTACKEDW1_97_7(s[920]);
initRESATTACKEDW1_97_8(s[921]);
initRESATTACKEDW1_97_9(s[922]);
initRESATTACKEDW1_97_96(s[923]);
initRESATTACKEDW1_97_97(s[924]);
initENVHABIT1(s[925]);
initENVHABIT2(s[926]);
initENVHABIT3(s[927]);
initENVHABIT4(s[928]);
initENVHABIT5(s[929]);
initENVHABIT6(s[930]);
initENVHABIT7(s[931]);
initENVHABIT8(s[932]);
initENVHABIT9(s[933]);
initENVHABIT10(s[934]);
initENVHABIT11(s[935]);
initDRIVE(s[936]);
initCARMILES(s[937]);
initMOBUSE(s[938]);
initNETUSE(s[939]);
initHOWLNG(s[940]);
initHEALTHLINK(s[941]);
initFLAGLINK(s[942]);
initEDLINKB(s[943]);
initNCH14RESP(s[944]);
initNCH415RESP(s[945]);
initNCHRESP(s[946]);
initNCHUND18RESP(s[947]);
initNATCH01(s[948]);
initNATCH02(s[949]);
initNATCH03(s[950]);
initNATCH04(s[951]);
initNATCH05(s[952]);
initNATCH06(s[953]);
initNATCH07(s[954]);
initNATCH08(s[955]);
initNATCH09(s[956]);
initNATCH10(s[957]);
initNATCH11(s[958]);
initNATCH12(s[959]);
initNATCH13(s[960]);
initNATCH14(s[961]);
initNATCH15(s[962]);
initNATCH16(s[963]);
initNNATCH(s[964]);
initNADOPTCH(s[965]);
initADOPTCH01(s[966]);
initADOPTCH02(s[967]);
initADOPTCH03(s[968]);
initADOPTCH04(s[969]);
initADOPTCH05(s[970]);
initADOPTCH06(s[971]);
initADOPTCH07(s[972]);
initADOPTCH08(s[973]);
initADOPTCH09(s[974]);
initADOPTCH10(s[975]);
initADOPTCH11(s[976]);
initADOPTCH12(s[977]);
initADOPTCH13(s[978]);
initADOPTCH14(s[979]);
initADOPTCH15(s[980]);
initADOPTCH16(s[981]);
initNCHUNDER16(s[982]);
initNCH5TO15(s[983]);
initNCH10TO15(s[984]);
initALLCH01(s[985]);
initALLCH02(s[986]);
initALLCH03(s[987]);
initALLCH04(s[988]);
initALLCH05(s[989]);
initALLCH06(s[990]);
initALLCH07(s[991]);
initALLCH08(s[992]);
initALLCH09(s[993]);
initALLCH10(s[994]);
initALLCH11(s[995]);
initALLCH12(s[996]);
initALLCH13(s[997]);
initALLCH14(s[998]);
initALLCH15(s[999]);
initALLCH16(s[1000]);
initPRIVPEN(s[1001]);
initMAINTALIM(s[1002]);
initPAYFAM(s[1003]);
initLENINDINTV(s[1004]);
initKID2UNI1(s[1005]);
initK2UCPN1(s[1006]);
initKID2UNI2(s[1007]);
initK2UCPN2(s[1008]);
initKID2UNI3(s[1009]);
initK2UCPN3(s[1010]);
initKID2UNI4(s[1011]);
initK2UCPN4(s[1012]);
initKID2UNI5(s[1013]);
initK2UCPN5(s[1014]);
initSCDOBY4(s[1015]);
initSCSEX(s[1016]);
initSCGHQA(s[1017]);
initSCGHQB(s[1018]);
initSCGHQC(s[1019]);
initSCGHQD(s[1020]);
initSCGHQE(s[1021]);
initSCGHQF(s[1022]);
initSCGHQG(s[1023]);
initSCGHQH(s[1024]);
initSCGHQI(s[1025]);
initSCGHQJ(s[1026]);
initSCGHQK(s[1027]);
initSCGHQL(s[1028]);
initSCHRS_SLPH(s[1029]);
initSCHRS_SLPM(s[1030]);
initSCTSLP_30M(s[1031]);
initSCTSLP_WAK(s[1032]);
initSCTSLP_CGH(s[1033]);
initSCMED_SLP(s[1034]);
initSCTSTAWK(s[1035]);
initSCSLP_QUAL(s[1036]);
initSCENV_FTST(s[1037]);
initSCENV_CRLF(s[1038]);
initSCENV_GRN(s[1039]);
initSCENV_CCLS(s[1040]);
initSCENV_PMRE(s[1041]);
initSCENV_DSTR(s[1042]);
initSCENV_EXAG(s[1043]);
initSCENV_BCON(s[1044]);
initSCENV_FUTR(s[1045]);
initSCENV_CFIT(s[1046]);
initSCENV_CHWO(s[1047]);
initSCENV_BRIT(s[1048]);
initSCOPECL30(s[1049]);
initSCOPECL200(s[1050]);
initSCOPNGBHA(s[1051]);
initSCOPNGBHB(s[1052]);
initSCOPNGBHC(s[1053]);
initSCOPNGBHD(s[1054]);
initSCOPNGBHE(s[1055]);
initSCOPNGBHF(s[1056]);
initSCOPNGBHG(s[1057]);
initSCOPNGBHH(s[1058]);
initSCTRUST(s[1059]);
initSCLFSAT1(s[1060]);
initSCLFSAT2(s[1061]);
initSCLFSAT7(s[1062]);
initSCLFSATO(s[1063]);
initSCWEMWBA(s[1064]);
initSCWEMWBB(s[1065]);
initSCWEMWBC(s[1066]);
initSCWEMWBD(s[1067]);
initSCWEMWBE(s[1068]);
initSCWEMWBF(s[1069]);
initSCWEMWBG(s[1070]);
initSCRISKA(s[1071]);
initSCRISKB(s[1072]);
initSCMOLWP(s[1073]);
initSCRELPAREI(s[1074]);
initSCRELPARCD(s[1075]);
initSCRELPARWT(s[1076]);
initSCRELPARDS(s[1077]);
initSCRELPARRG(s[1078]);
initSCRELPARAR(s[1079]);
initSCRELPARIR(s[1080]);
initSCRELPARKS(s[1081]);
initSCPAROUTINT(s[1082]);
initSCRELHAPPY(s[1083]);
initIVPRSNT(s[1084]);
initIVINFNCE(s[1085]);
initIVAFFCT11(s[1086]);
initIVAFFCT12(s[1087]);
initIVAFFCT13(s[1088]);
initIVAFFCT14(s[1089]);
initIVAFFCT15(s[1090]);
initIVAFFCT17(s[1091]);
initIVAFFCT21(s[1092]);
initIVAFFCT22(s[1093]);
initIVAFFCT23(s[1094]);
initIVAFFCT27(s[1095]);
initIVAFFCT30(s[1096]);
initIVAFFCT97(s[1097]);
initIVCOOP(s[1098]);
initSUSP(s[1099]);
initUNDQUS(s[1100]);
initIVTRANS(s[1101]);
initPRSEX(s[1102]);
initPREL(s[1103]);
initPREASON(s[1104]);
initPRIPN(s[1105]);
initCH1BY4(s[1106]);
initPJULK4WK(s[1107]);
initPJBPTFT(s[1108]);
initPJSPTFT(s[1109]);
initPREARN(s[1110]);
initPREARNW(s[1111]);
initPREARNA(s[1112]);
initPBNFT1(s[1113]);
initPBNFT2(s[1114]);
initPBNFT3(s[1115]);
initPBNFT4(s[1116]);
initPBNFT5(s[1117]);
initPBNFT6(s[1118]);
initPBNFT7(s[1119]);
initPBNFT8(s[1120]);
initPBNFT9(s[1121]);
initPBNFT10(s[1122]);
initPBNFT11(s[1123]);
initPBNFT12(s[1124]);
initPBNFT96(s[1125]);
initCARUSE(s[1126]);
initPRFITB(s[1127]);
initPRFITBW(s[1128]);
initPRFITBA(s[1129]);
initEMBOOST(s[1130]);
initGPCOMP(s[1131]);
initLDA(s[1132]);
initAGEEST(s[1133]);
initMARSTAT(s[1134]);
initLIVESP(s[1135]);
initLIVEWITH(s[1136]);
initEMPLOY(s[1137]);
initHGBIOM(s[1138]);
initHGBIOF(s[1139]);
initHGADOPTM(s[1140]);
initHGADOPTF(s[1141]);
initHGPART(s[1142]);
initRESPF16(s[1143]);
initRESPM16(s[1144]);
initADRESP17(s[1145]);
initETHNIC1(s[1146]);
initETHNIC2(s[1147]);
initETHNIC3(s[1148]);
initETHNIC4(s[1149]);
initETHNIC5(s[1150]);
initETHNIC6(s[1151]);
initETHNIC7(s[1152]);
initETHNIC8(s[1153]);
initETHNIC9(s[1154]);
initETHNIC10(s[1155]);
initETHNIC11(s[1156]);
initETHNIC12(s[1157]);
initETHNIC13(s[1158]);
initETHNIC14(s[1159]);
initETHNIC96(s[1160]);
initLINGUA(s[1161]);
initREASREF(s[1162]);
initIVINTLANG(s[1163]);
initIVWHOINT(s[1164]);
initLDAFLAG(s[1165]);
initHHSTTIME_TM(s[1166]);
initQSIGNIN_TM(s[1167]);
initHHGRID_TM(s[1168]);
initRELATIONSHIPS_TM(s[1169]);
initHHQRE_TM(s[1170]);
initPROXY_TM(s[1171]);
initDEMOG_TM(s[1172]);
initINITIAL_TM(s[1173]);
initFAMILY_TM(s[1174]);
initETHNIC_TM(s[1175]);
initRELIGION_TM(s[1176]);
initMIGRATION_TM(s[1177]);
initPARTNER_TM(s[1178]);
initFERTILITY_TM(s[1179]);
initHEALTH_TM(s[1180]);
initCARING_TM(s[1181]);
initEMPSTAT_TM(s[1182]);
initEMPLOYMENT_TM(s[1183]);
initSELFEMP_TM(s[1184]);
initJOB_TM(s[1185]);
initNONEMP_TM(s[1186]);
initSECJOB_TM(s[1187]);
initDISCRIMINATION_TM(s[1188]);
initCHILDCARE_TM(s[1189]);
initPARCHILD_TM(s[1190]);
initNETWORKS_TM(s[1191]);
initREMITTANCE_TM(s[1192]);
initBENEFIT_TM(s[1193]);
initFINANCES_TM(s[1194]);
initPOLITICAL_TM(s[1195]);
initHARASSMENT_TM(s[1196]);
initENVIRON_TM(s[1197]);
initCONSENT_TM(s[1198]);
initPHONE_TM(s[1199]);
initSTABLE_TM(s[1200]);
initFININT_TM(s[1201]);
initOBSERVE_TM(s[1202]);
initIMPEVENT1(s[1203]);
initIMPEVENT1S(s[1204]);
initIMPEVENT2(s[1205]);
initIMPEVENT2S(s[1206]);
initIMPEVENT3(s[1207]);
initIMPEVENT3S(s[1208]);
initIMPEVENT4(s[1209]);
initIMPEVENT4S(s[1210]);
initRHLAND_CODE(s[1211]);
initRPHMOB_CODE(s[1212]);
initRPHWRK_CODE(s[1213]);
initREMAIL_CODE(s[1214]);
initCTADD1_CODE(s[1215]);
initCTADD2_CODE(s[1216]);
initCTTOWN_CODE(s[1217]);
initCTCNTY_CODE(s[1218]);
initCTPCODE_CODE(s[1219]);
initCTTEL1_CODE(s[1220]);
initCTTEL2_CODE(s[1221]);
initCTEMAIL_CODE(s[1222]);
initISTRTDATHH(s[1223]);
initISTRTDATMM(s[1224]);
initISTRTDATSS(s[1225]);
initIENDDATHH(s[1226]);
initIENDDATMM(s[1227]);
initIENDDATSS(s[1228]);
initPPSEX(s[1229]);
initFNPID(s[1230]);
initMNPID(s[1231]);
initPN1PID(s[1232]);
initPN1PNO(s[1233]);
initPN1SEX(s[1234]);
initPN2PID(s[1235]);
initPN2PNO(s[1236]);
initPN2SEX(s[1237]);
initPNS1PID(s[1238]);
initPNS1PNO(s[1239]);
initPNS1SEX(s[1240]);
initPNS2PID(s[1241]);
initPNS2PNO(s[1242]);
initPNS2SEX(s[1243]);
initGRFPID(s[1244]);
initGRMPID(s[1245]);
initJ2PAY_IF(s[1246]);
initFIMNGRS_TC(s[1247]);
initFIMNGRS_DV(s[1248]);
initFIMNLABGRS_TC(s[1249]);
initFIMNLABGRS_DV(s[1250]);
initFIMNLABNET_TC(s[1251]);
initFIMNLABNET_DV(s[1252]);
initFIYRINVINC_TC(s[1253]);
initFIYRINVINC_DV(s[1254]);
initFIBENOTHR_TC(s[1255]);
initFIBENOTHR_DV(s[1256]);
initPAYGL(s[1257]);
initPAYNL(s[1258]);
initJSPRF(s[1259]);
initPAYGU_DV(s[1260]);
initPAYG_DV(s[1261]);
initPAYNU_DV(s[1262]);
initPAYN_DV(s[1263]);
initSEEARNGRS_DV(s[1264]);
initSEEARNNET_DV(s[1265]);
initJ2PAY_DV(s[1266]);
initJ2PAYNET_DV(s[1267]);
initSEX_DV(s[1268]);
initAGE_DV(s[1269]);
initETHN_DV(s[1270]);
initINTDATD_DV(s[1271]);
initINTDATM_DV(s[1272]);
initINTDATY_DV(s[1273]);
initDOBY_DV(s[1274]);
initPENSIONER_DV(s[1275]);
initNPN_DV(s[1276]);
initNPNS_DV(s[1277]);
initNGRP_DV(s[1278]);
initNNSIB_DV(s[1279]);
initNNSSIB_DV(s[1280]);
initNPENSIONER_DV(s[1281]);
initJBSOCGR_DV(s[1282]);
initNBRSNCI_DV(s[1283]);
initSCDASSAT_DV(s[1284]);
initSCDASCOH_DV(s[1285]);
initFIMNMISC_DV(s[1286]);
initFIMNPRBEN_DV(s[1287]);
initFIMNINVNET_DV(s[1288]);
initFIMNPEN_DV(s[1289]);
initFIMNSBEN_DV(s[1290]);
initFIMNNET_DV(s[1291]);
initCOUNTRY(s[1292]);
initGOR_DV(s[1293]);
initURBAN_DV(s[1294]);
initHHRESP_DV(s[1295]);
initXTRA5MIN_DV(s[1296]);
initAGEGR5_DV(s[1297]);
initAGEGR10_DV(s[1298]);
initAGEGR13_DV(s[1299]);
initLIVESP_DV(s[1300]);
initCOHAB_DV(s[1301]);
initSINGLE_DV(s[1302]);
initMASTAT_DV(s[1303]);
initHHTYPE_DV(s[1304]);
initBUNO_DV(s[1305]);
initDEPCHL_DV(s[1306]);
initNCHILD_DV(s[1307]);
initNDEPCHL_DV(s[1308]);
initRESPM16_DV(s[1309]);
initRESPF16_DV(s[1310]);
initRACH16_DV(s[1311]);
initHRPID(s[1312]);
initHRPNO(s[1313]);
initPPID(s[1314]);
initPPNO(s[1315]);
initSPPID(s[1316]);
initSPPNO(s[1317]);
initFNPNO(s[1318]);
initFNSPID(s[1319]);
initFNSPNO(s[1320]);
initMNPNO(s[1321]);
initMNSPID(s[1322]);
initMNSPNO(s[1323]);
initGRFPNO(s[1324]);
initGRMPNO(s[1325]);
initQFHIGH_DV(s[1326]);
initNQFHIGH_DV(s[1327]);
initQFHIGHFL_DV(s[1328]);
initHIQUAL_DV(s[1329]);
initJBFT_DV(s[1330]);
initJBSOC00_CC(s[1331]);
initJBSIC07_CC(s[1332]);
initJBIINDB_DV(s[1333]);
initJBES2000(s[1334]);
initJBSEG_DV(s[1335]);
initJBRGSC_DV(s[1336]);
initJBNSSEC_DV(s[1337]);
initJBNSSEC8_DV(s[1338]);
initJBNSSEC5_DV(s[1339]);
initJBNSSEC3_DV(s[1340]);
initJBISCO88_CC(s[1341]);
initJLSOC00_CC(s[1342]);
initJLSIC07_CC(s[1343]);
initJLIINDB_DV(s[1344]);
initJLES2000(s[1345]);
initJLSEG_DV(s[1346]);
initJLRGSC_DV(s[1347]);
initJLNSSEC_DV(s[1348]);
initJLNSSEC8_DV(s[1349]);
initJLNSSEC5_DV(s[1350]);
initJLNSSEC3_DV(s[1351]);
initJLISCO88_CC(s[1352]);
initPASOC90_CC(s[1353]);
initPASOC00_CC(s[1354]);
initPASOC10_CC(s[1355]);
initPANSSEC5_DV(s[1356]);
initMASOC90_CC(s[1357]);
initMASOC00_CC(s[1358]);
initMASOC10_CC(s[1359]);
initMANSSEC5_DV(s[1360]);
initJ1SOC90_CC(s[1361]);
initJ1SOC00_CC(s[1362]);
initJ1SOC10_CC(s[1363]);
initJ1NSSEC5_DV(s[1364]);
initSCGHQ1_DV(s[1365]);
initSCGHQ2_DV(s[1366]);
initSF12PCS_DV(s[1367]);
initSF12MCS_DV(s[1368]);
initSWEMWBS_DV(s[1369]);
initBMI_DV(s[1370]);
initSCFLAG_DV(s[1371]);
initATTACKED_DV(s[1372]);
initAVOIDED_DV(s[1373]);
initINSULTED_DV(s[1374]);
initUNSAFE_DV(s[1375]);
initPAYU_DV(s[1376]);
initPAYGU_IF(s[1377]);
initPAYNU_IF(s[1378]);
initSEEARNGRS_IF(s[1379]);
initFIYRINVINC_IF(s[1380]);
initFIBENOTHR_IF(s[1381]);
initFIMNLABGRS_IF(s[1382]);
initFIMNGRS_IF(s[1383]);
initINDSCUS_XW(s[1384]);
initINDPXUS_XW(s[1385]);
initINDINUS_XW(s[1386]);
initIND5MUS_XW(s[1387]);
initRACEL_DV(s[1388]);
}
}
