/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.us.data.hhresp;
public class US_Wave1_hhresp_Record extends US_hhresp_Record {
protected double BASEPI;
protected double BHCIND;
protected double BHCINDA;
protected short CD1NEW;
protected byte CD1OWN;
protected short CD1USE;
protected short CD2NEW;
protected byte CD2OWN;
protected short CD2USE;
protected byte CD3NEW;
protected byte CD3OWN;
protected byte CD3USE;
protected short CD4NEW;
protected byte CD4OWN;
protected short CD4USE;
protected byte CD5NEW;
protected byte CD5OWN;
protected byte CD5USE;
protected short CD6NEW;
protected byte CD6OWN;
protected short CD6USE;
protected short CD7NEW;
protected byte CD7OWN;
protected short CD7USE;
protected short CD8NEW;
protected byte CD8OWN;
protected short CD8USE;
protected short CD9NEW;
protected byte CD9OWN;
protected short CD9USE;
protected short CDUSE10;
protected short CDUSE11;
protected byte CDUSE5;
protected byte CDUSE7;
protected double CONTR;
protected double DEDUC;
protected double EQ_MOECD;
protected double FIEQFCA;
protected double FIEQFCB;
protected double FIHHMB;
protected short FIHHMBI;
protected double FIHHMI;
protected short FIHHMII;
protected double FIHHML;
protected short FIHHMLI;
protected short FIHHMNI;
protected double FIHHMNL;
protected double FIHHMP;
protected short FIHHMPI;
protected double FIHHMT;
protected byte FIHHMTI;
protected double FIHHYB;
protected short FIHHYBI;
protected double FIHHYI;
protected short FIHHYII;
protected double FIHHYL;
protected short FIHHYLI;
protected short FIHHYNI;
protected double FIHHYNL;
protected double FIHHYP;
protected short FIHHYPI;
protected double FIHHYR;
protected short FIHHYRI;
protected double FIHHYT;
protected byte FIHHYTI;
protected short FIHMNLI;
protected byte GASUSE;
protected byte GASWAY;
protected double GRPAY;
protected double HCOST;
protected double HDEMP;
protected double HDSE;
protected short HEATYP;
protected short HHAB1Y;
protected short HHAB2Y;
protected double HHB;
protected short HHDC;
protected double HHI;
protected byte HHJND;
protected double HHNETDE;
protected double HHNETDE2;
protected double HHNETI;
protected double HHNYRDE;
protected double HHNYRDE2;
protected double HHP;
protected double HHT;
protected short HHTYPE;
protected double HHWGHT;
protected double HHYNETI;
protected double HHYRB;
protected short HHYRBI;
protected double HHYRI;
protected short HHYRII;
protected double HHYRLG;
protected double HHYRLN;
protected short HHYRLNI;
protected double HHYRP;
protected short HHYRPI;
protected double HHYRT;
protected short HHYRTI;
protected int HID;
protected byte HSBEDS;
protected byte HSFLOOR;
protected short HSOWND_BH;
protected short HSOWR111;
protected short HSOWR1_BH;
protected short HSOWR2_BH;
protected byte HSPRBA;
protected byte HSPRBB;
protected byte HSPRBC;
protected byte HSPRBD;
protected byte HSPRBE;
protected byte HSPRBF;
protected short HSROOM;
protected byte HSROOMS;
protected byte HSSNIP;
protected short HSTYPE;
protected short HSVALI;
protected byte HSVNDR;
protected short HSYR0;
protected short HSYR04_BH;
protected short IVH0;
protected short IVH11;
protected short IVH1_BH;
protected short IVH2_BH;
protected short IVH3_BH;
protected byte IVHC1;
protected byte IVHC2;
protected byte IVHC3;
protected byte LECWAY;
protected double LOCTAX;
protected short MGEXTRA;
protected short MGHAVE;
protected int MGNEW;
protected short MGNEWI;
protected int MGOLD;
protected short MGTYPE_BH;
protected short MGXTY1;
protected short MGXTY1_BH;
protected short MGXTY2;
protected short MGXTY2_BH;
protected short MGXTY3;
protected short MGXTY3_BH;
protected short MGXTY4;
protected short MGXTY4_BH;
protected short MGXTY5_BH;
protected short MGYNOT_BH;
protected short MGYR0;
protected short MGYR04;
protected int MONUM;
protected byte NA75PL;
protected short NCARS_BH;
protected short NCH1618;
protected short NCOUPLE_DV;
protected double NETLAB;
protected byte NHHRSP;
protected double NI;
protected byte NUE;
protected short NWAGE_DV;
protected byte NWED;
protected double OTHLAB;
protected byte PHONE;
protected short REGION;
protected short RENT1;
protected short RENT2;
protected short RENT3;
protected short RENT4;
protected short RENT5;
protected short RENT6;
protected short RENTGI;
protected double RENTGW;
protected short RENTG_BH;
protected short RENTHB_BH;
protected short RENTI;
protected short RENTP11;
protected short RENTP1_BH;
protected short RENTP2_BH;
protected double RENTW;
protected double SPEMP;
protected double SPSE;
protected double TAXCR;
protected double TAXGR;
protected double TAXNET;
protected short TENURE_DV;
protected short XPFOOD;
protected double XPFUEL;
protected double XPGAS;
protected short XPGASL;
protected byte XPGASLW;
protected double XPGASW;
protected short XPHSD1;
protected short XPHSD2;
protected short XPHSDB_BH;
protected short XPHSDF;
protected double XPHSG;
protected short XPHSGI;
protected double XPHSN;
protected short XPHSNI;
protected double XPLEC;
protected short XPLECL;
protected byte XPLECLW;
protected double XPLECW;
protected short XPMG1;
protected short XPMG2;
protected short XPMG3;
protected short XPMG4;
protected short XPMGI;
protected double XPOIL;
protected short XPOILY;
protected short XPOILY_BH;
protected double YRCONTR;
protected double YRDEDUC;
protected double YRNI;
protected double YRTAXCR;
protected double YRTAXGR;
protected double YRTAXNT;
protected final void initBASEPI(String s) {
if (!s.trim().isEmpty()) {
BASEPI = Double.parseDouble(s);
} else {
BASEPI = Double.NaN;
}
}

protected final void initBHCIND(String s) {
if (!s.trim().isEmpty()) {
BHCIND = Double.parseDouble(s);
} else {
BHCIND = Double.NaN;
}
}

protected final void initBHCINDA(String s) {
if (!s.trim().isEmpty()) {
BHCINDA = Double.parseDouble(s);
} else {
BHCINDA = Double.NaN;
}
}

protected final void initCD1NEW(String s) {
if (!s.trim().isEmpty()) {
CD1NEW = Short.parseShort(s);
} else {
CD1NEW = Short.MIN_VALUE;
}
}

protected final void initCD1OWN(String s) {
if (!s.trim().isEmpty()) {
CD1OWN = Byte.parseByte(s);
} else {
CD1OWN = Byte.MIN_VALUE;
}
}

protected final void initCD1USE(String s) {
if (!s.trim().isEmpty()) {
CD1USE = Short.parseShort(s);
} else {
CD1USE = Short.MIN_VALUE;
}
}

protected final void initCD2NEW(String s) {
if (!s.trim().isEmpty()) {
CD2NEW = Short.parseShort(s);
} else {
CD2NEW = Short.MIN_VALUE;
}
}

protected final void initCD2OWN(String s) {
if (!s.trim().isEmpty()) {
CD2OWN = Byte.parseByte(s);
} else {
CD2OWN = Byte.MIN_VALUE;
}
}

protected final void initCD2USE(String s) {
if (!s.trim().isEmpty()) {
CD2USE = Short.parseShort(s);
} else {
CD2USE = Short.MIN_VALUE;
}
}

protected final void initCD3NEW(String s) {
if (!s.trim().isEmpty()) {
CD3NEW = Byte.parseByte(s);
} else {
CD3NEW = Byte.MIN_VALUE;
}
}

protected final void initCD3OWN(String s) {
if (!s.trim().isEmpty()) {
CD3OWN = Byte.parseByte(s);
} else {
CD3OWN = Byte.MIN_VALUE;
}
}

protected final void initCD3USE(String s) {
if (!s.trim().isEmpty()) {
CD3USE = Byte.parseByte(s);
} else {
CD3USE = Byte.MIN_VALUE;
}
}

protected final void initCD4NEW(String s) {
if (!s.trim().isEmpty()) {
CD4NEW = Short.parseShort(s);
} else {
CD4NEW = Short.MIN_VALUE;
}
}

protected final void initCD4OWN(String s) {
if (!s.trim().isEmpty()) {
CD4OWN = Byte.parseByte(s);
} else {
CD4OWN = Byte.MIN_VALUE;
}
}

protected final void initCD4USE(String s) {
if (!s.trim().isEmpty()) {
CD4USE = Short.parseShort(s);
} else {
CD4USE = Short.MIN_VALUE;
}
}

protected final void initCD5NEW(String s) {
if (!s.trim().isEmpty()) {
CD5NEW = Byte.parseByte(s);
} else {
CD5NEW = Byte.MIN_VALUE;
}
}

protected final void initCD5OWN(String s) {
if (!s.trim().isEmpty()) {
CD5OWN = Byte.parseByte(s);
} else {
CD5OWN = Byte.MIN_VALUE;
}
}

protected final void initCD5USE(String s) {
if (!s.trim().isEmpty()) {
CD5USE = Byte.parseByte(s);
} else {
CD5USE = Byte.MIN_VALUE;
}
}

protected final void initCD6NEW(String s) {
if (!s.trim().isEmpty()) {
CD6NEW = Short.parseShort(s);
} else {
CD6NEW = Short.MIN_VALUE;
}
}

protected final void initCD6OWN(String s) {
if (!s.trim().isEmpty()) {
CD6OWN = Byte.parseByte(s);
} else {
CD6OWN = Byte.MIN_VALUE;
}
}

protected final void initCD6USE(String s) {
if (!s.trim().isEmpty()) {
CD6USE = Short.parseShort(s);
} else {
CD6USE = Short.MIN_VALUE;
}
}

protected final void initCD7NEW(String s) {
if (!s.trim().isEmpty()) {
CD7NEW = Short.parseShort(s);
} else {
CD7NEW = Short.MIN_VALUE;
}
}

protected final void initCD7OWN(String s) {
if (!s.trim().isEmpty()) {
CD7OWN = Byte.parseByte(s);
} else {
CD7OWN = Byte.MIN_VALUE;
}
}

protected final void initCD7USE(String s) {
if (!s.trim().isEmpty()) {
CD7USE = Short.parseShort(s);
} else {
CD7USE = Short.MIN_VALUE;
}
}

protected final void initCD8NEW(String s) {
if (!s.trim().isEmpty()) {
CD8NEW = Short.parseShort(s);
} else {
CD8NEW = Short.MIN_VALUE;
}
}

protected final void initCD8OWN(String s) {
if (!s.trim().isEmpty()) {
CD8OWN = Byte.parseByte(s);
} else {
CD8OWN = Byte.MIN_VALUE;
}
}

protected final void initCD8USE(String s) {
if (!s.trim().isEmpty()) {
CD8USE = Short.parseShort(s);
} else {
CD8USE = Short.MIN_VALUE;
}
}

protected final void initCD9NEW(String s) {
if (!s.trim().isEmpty()) {
CD9NEW = Short.parseShort(s);
} else {
CD9NEW = Short.MIN_VALUE;
}
}

protected final void initCD9OWN(String s) {
if (!s.trim().isEmpty()) {
CD9OWN = Byte.parseByte(s);
} else {
CD9OWN = Byte.MIN_VALUE;
}
}

protected final void initCD9USE(String s) {
if (!s.trim().isEmpty()) {
CD9USE = Short.parseShort(s);
} else {
CD9USE = Short.MIN_VALUE;
}
}

protected final void initCDUSE10(String s) {
if (!s.trim().isEmpty()) {
CDUSE10 = Short.parseShort(s);
} else {
CDUSE10 = Short.MIN_VALUE;
}
}

protected final void initCDUSE11(String s) {
if (!s.trim().isEmpty()) {
CDUSE11 = Short.parseShort(s);
} else {
CDUSE11 = Short.MIN_VALUE;
}
}

protected final void initCDUSE5(String s) {
if (!s.trim().isEmpty()) {
CDUSE5 = Byte.parseByte(s);
} else {
CDUSE5 = Byte.MIN_VALUE;
}
}

protected final void initCDUSE7(String s) {
if (!s.trim().isEmpty()) {
CDUSE7 = Byte.parseByte(s);
} else {
CDUSE7 = Byte.MIN_VALUE;
}
}

protected final void initCONTR(String s) {
if (!s.trim().isEmpty()) {
CONTR = Double.parseDouble(s);
} else {
CONTR = Double.NaN;
}
}

protected final void initDEDUC(String s) {
if (!s.trim().isEmpty()) {
DEDUC = Double.parseDouble(s);
} else {
DEDUC = Double.NaN;
}
}

protected final void initEQ_MOECD(String s) {
if (!s.trim().isEmpty()) {
EQ_MOECD = Double.parseDouble(s);
} else {
EQ_MOECD = Double.NaN;
}
}

protected final void initFIEQFCA(String s) {
if (!s.trim().isEmpty()) {
FIEQFCA = Double.parseDouble(s);
} else {
FIEQFCA = Double.NaN;
}
}

protected final void initFIEQFCB(String s) {
if (!s.trim().isEmpty()) {
FIEQFCB = Double.parseDouble(s);
} else {
FIEQFCB = Double.NaN;
}
}

protected final void initFIHHMB(String s) {
if (!s.trim().isEmpty()) {
FIHHMB = Double.parseDouble(s);
} else {
FIHHMB = Double.NaN;
}
}

protected final void initFIHHMBI(String s) {
if (!s.trim().isEmpty()) {
FIHHMBI = Short.parseShort(s);
} else {
FIHHMBI = Short.MIN_VALUE;
}
}

protected final void initFIHHMI(String s) {
if (!s.trim().isEmpty()) {
FIHHMI = Double.parseDouble(s);
} else {
FIHHMI = Double.NaN;
}
}

protected final void initFIHHMII(String s) {
if (!s.trim().isEmpty()) {
FIHHMII = Short.parseShort(s);
} else {
FIHHMII = Short.MIN_VALUE;
}
}

protected final void initFIHHML(String s) {
if (!s.trim().isEmpty()) {
FIHHML = Double.parseDouble(s);
} else {
FIHHML = Double.NaN;
}
}

protected final void initFIHHMLI(String s) {
if (!s.trim().isEmpty()) {
FIHHMLI = Short.parseShort(s);
} else {
FIHHMLI = Short.MIN_VALUE;
}
}

protected final void initFIHHMNI(String s) {
if (!s.trim().isEmpty()) {
FIHHMNI = Short.parseShort(s);
} else {
FIHHMNI = Short.MIN_VALUE;
}
}

protected final void initFIHHMNL(String s) {
if (!s.trim().isEmpty()) {
FIHHMNL = Double.parseDouble(s);
} else {
FIHHMNL = Double.NaN;
}
}

protected final void initFIHHMP(String s) {
if (!s.trim().isEmpty()) {
FIHHMP = Double.parseDouble(s);
} else {
FIHHMP = Double.NaN;
}
}

protected final void initFIHHMPI(String s) {
if (!s.trim().isEmpty()) {
FIHHMPI = Short.parseShort(s);
} else {
FIHHMPI = Short.MIN_VALUE;
}
}

protected final void initFIHHMT(String s) {
if (!s.trim().isEmpty()) {
FIHHMT = Double.parseDouble(s);
} else {
FIHHMT = Double.NaN;
}
}

protected final void initFIHHMTI(String s) {
if (!s.trim().isEmpty()) {
FIHHMTI = Byte.parseByte(s);
} else {
FIHHMTI = Byte.MIN_VALUE;
}
}

protected final void initFIHHYB(String s) {
if (!s.trim().isEmpty()) {
FIHHYB = Double.parseDouble(s);
} else {
FIHHYB = Double.NaN;
}
}

protected final void initFIHHYBI(String s) {
if (!s.trim().isEmpty()) {
FIHHYBI = Short.parseShort(s);
} else {
FIHHYBI = Short.MIN_VALUE;
}
}

protected final void initFIHHYI(String s) {
if (!s.trim().isEmpty()) {
FIHHYI = Double.parseDouble(s);
} else {
FIHHYI = Double.NaN;
}
}

protected final void initFIHHYII(String s) {
if (!s.trim().isEmpty()) {
FIHHYII = Short.parseShort(s);
} else {
FIHHYII = Short.MIN_VALUE;
}
}

protected final void initFIHHYL(String s) {
if (!s.trim().isEmpty()) {
FIHHYL = Double.parseDouble(s);
} else {
FIHHYL = Double.NaN;
}
}

protected final void initFIHHYLI(String s) {
if (!s.trim().isEmpty()) {
FIHHYLI = Short.parseShort(s);
} else {
FIHHYLI = Short.MIN_VALUE;
}
}

protected final void initFIHHYNI(String s) {
if (!s.trim().isEmpty()) {
FIHHYNI = Short.parseShort(s);
} else {
FIHHYNI = Short.MIN_VALUE;
}
}

protected final void initFIHHYNL(String s) {
if (!s.trim().isEmpty()) {
FIHHYNL = Double.parseDouble(s);
} else {
FIHHYNL = Double.NaN;
}
}

protected final void initFIHHYP(String s) {
if (!s.trim().isEmpty()) {
FIHHYP = Double.parseDouble(s);
} else {
FIHHYP = Double.NaN;
}
}

protected final void initFIHHYPI(String s) {
if (!s.trim().isEmpty()) {
FIHHYPI = Short.parseShort(s);
} else {
FIHHYPI = Short.MIN_VALUE;
}
}

protected final void initFIHHYR(String s) {
if (!s.trim().isEmpty()) {
FIHHYR = Double.parseDouble(s);
} else {
FIHHYR = Double.NaN;
}
}

protected final void initFIHHYRI(String s) {
if (!s.trim().isEmpty()) {
FIHHYRI = Short.parseShort(s);
} else {
FIHHYRI = Short.MIN_VALUE;
}
}

protected final void initFIHHYT(String s) {
if (!s.trim().isEmpty()) {
FIHHYT = Double.parseDouble(s);
} else {
FIHHYT = Double.NaN;
}
}

protected final void initFIHHYTI(String s) {
if (!s.trim().isEmpty()) {
FIHHYTI = Byte.parseByte(s);
} else {
FIHHYTI = Byte.MIN_VALUE;
}
}

protected final void initFIHMNLI(String s) {
if (!s.trim().isEmpty()) {
FIHMNLI = Short.parseShort(s);
} else {
FIHMNLI = Short.MIN_VALUE;
}
}

protected final void initGASUSE(String s) {
if (!s.trim().isEmpty()) {
GASUSE = Byte.parseByte(s);
} else {
GASUSE = Byte.MIN_VALUE;
}
}

protected final void initGASWAY(String s) {
if (!s.trim().isEmpty()) {
GASWAY = Byte.parseByte(s);
} else {
GASWAY = Byte.MIN_VALUE;
}
}

protected final void initGRPAY(String s) {
if (!s.trim().isEmpty()) {
GRPAY = Double.parseDouble(s);
} else {
GRPAY = Double.NaN;
}
}

protected final void initHCOST(String s) {
if (!s.trim().isEmpty()) {
HCOST = Double.parseDouble(s);
} else {
HCOST = Double.NaN;
}
}

protected final void initHDEMP(String s) {
if (!s.trim().isEmpty()) {
HDEMP = Double.parseDouble(s);
} else {
HDEMP = Double.NaN;
}
}

protected final void initHDSE(String s) {
if (!s.trim().isEmpty()) {
HDSE = Double.parseDouble(s);
} else {
HDSE = Double.NaN;
}
}

protected final void initHEATYP(String s) {
if (!s.trim().isEmpty()) {
HEATYP = Short.parseShort(s);
} else {
HEATYP = Short.MIN_VALUE;
}
}

protected final void initHHAB1Y(String s) {
if (!s.trim().isEmpty()) {
HHAB1Y = Short.parseShort(s);
} else {
HHAB1Y = Short.MIN_VALUE;
}
}

protected final void initHHAB2Y(String s) {
if (!s.trim().isEmpty()) {
HHAB2Y = Short.parseShort(s);
} else {
HHAB2Y = Short.MIN_VALUE;
}
}

protected final void initHHB(String s) {
if (!s.trim().isEmpty()) {
HHB = Double.parseDouble(s);
} else {
HHB = Double.NaN;
}
}

protected final void initHHDC(String s) {
if (!s.trim().isEmpty()) {
HHDC = Short.parseShort(s);
} else {
HHDC = Short.MIN_VALUE;
}
}

protected final void initHHI(String s) {
if (!s.trim().isEmpty()) {
HHI = Double.parseDouble(s);
} else {
HHI = Double.NaN;
}
}

protected final void initHHJND(String s) {
if (!s.trim().isEmpty()) {
HHJND = Byte.parseByte(s);
} else {
HHJND = Byte.MIN_VALUE;
}
}

protected final void initHHNETDE(String s) {
if (!s.trim().isEmpty()) {
HHNETDE = Double.parseDouble(s);
} else {
HHNETDE = Double.NaN;
}
}

protected final void initHHNETDE2(String s) {
if (!s.trim().isEmpty()) {
HHNETDE2 = Double.parseDouble(s);
} else {
HHNETDE2 = Double.NaN;
}
}

protected final void initHHNETI(String s) {
if (!s.trim().isEmpty()) {
HHNETI = Double.parseDouble(s);
} else {
HHNETI = Double.NaN;
}
}

protected final void initHHNYRDE(String s) {
if (!s.trim().isEmpty()) {
HHNYRDE = Double.parseDouble(s);
} else {
HHNYRDE = Double.NaN;
}
}

protected final void initHHNYRDE2(String s) {
if (!s.trim().isEmpty()) {
HHNYRDE2 = Double.parseDouble(s);
} else {
HHNYRDE2 = Double.NaN;
}
}

protected final void initHHP(String s) {
if (!s.trim().isEmpty()) {
HHP = Double.parseDouble(s);
} else {
HHP = Double.NaN;
}
}

protected final void initHHT(String s) {
if (!s.trim().isEmpty()) {
HHT = Double.parseDouble(s);
} else {
HHT = Double.NaN;
}
}

protected final void initHHTYPE(String s) {
if (!s.trim().isEmpty()) {
HHTYPE = Short.parseShort(s);
} else {
HHTYPE = Short.MIN_VALUE;
}
}

protected final void initHHWGHT(String s) {
if (!s.trim().isEmpty()) {
HHWGHT = Double.parseDouble(s);
} else {
HHWGHT = Double.NaN;
}
}

protected final void initHHYNETI(String s) {
if (!s.trim().isEmpty()) {
HHYNETI = Double.parseDouble(s);
} else {
HHYNETI = Double.NaN;
}
}

protected final void initHHYRB(String s) {
if (!s.trim().isEmpty()) {
HHYRB = Double.parseDouble(s);
} else {
HHYRB = Double.NaN;
}
}

protected final void initHHYRBI(String s) {
if (!s.trim().isEmpty()) {
HHYRBI = Short.parseShort(s);
} else {
HHYRBI = Short.MIN_VALUE;
}
}

protected final void initHHYRI(String s) {
if (!s.trim().isEmpty()) {
HHYRI = Double.parseDouble(s);
} else {
HHYRI = Double.NaN;
}
}

protected final void initHHYRII(String s) {
if (!s.trim().isEmpty()) {
HHYRII = Short.parseShort(s);
} else {
HHYRII = Short.MIN_VALUE;
}
}

protected final void initHHYRLG(String s) {
if (!s.trim().isEmpty()) {
HHYRLG = Double.parseDouble(s);
} else {
HHYRLG = Double.NaN;
}
}

protected final void initHHYRLN(String s) {
if (!s.trim().isEmpty()) {
HHYRLN = Double.parseDouble(s);
} else {
HHYRLN = Double.NaN;
}
}

protected final void initHHYRLNI(String s) {
if (!s.trim().isEmpty()) {
HHYRLNI = Short.parseShort(s);
} else {
HHYRLNI = Short.MIN_VALUE;
}
}

protected final void initHHYRP(String s) {
if (!s.trim().isEmpty()) {
HHYRP = Double.parseDouble(s);
} else {
HHYRP = Double.NaN;
}
}

protected final void initHHYRPI(String s) {
if (!s.trim().isEmpty()) {
HHYRPI = Short.parseShort(s);
} else {
HHYRPI = Short.MIN_VALUE;
}
}

protected final void initHHYRT(String s) {
if (!s.trim().isEmpty()) {
HHYRT = Double.parseDouble(s);
} else {
HHYRT = Double.NaN;
}
}

protected final void initHHYRTI(String s) {
if (!s.trim().isEmpty()) {
HHYRTI = Short.parseShort(s);
} else {
HHYRTI = Short.MIN_VALUE;
}
}

protected final void initHID(String s) {
if (!s.trim().isEmpty()) {
HID = Integer.parseInt(s);
} else {
HID = Integer.MIN_VALUE;
}
}

protected final void initHSBEDS(String s) {
if (!s.trim().isEmpty()) {
HSBEDS = Byte.parseByte(s);
} else {
HSBEDS = Byte.MIN_VALUE;
}
}

protected final void initHSFLOOR(String s) {
if (!s.trim().isEmpty()) {
HSFLOOR = Byte.parseByte(s);
} else {
HSFLOOR = Byte.MIN_VALUE;
}
}

protected final void initHSOWND_BH(String s) {
if (!s.trim().isEmpty()) {
HSOWND_BH = Short.parseShort(s);
} else {
HSOWND_BH = Short.MIN_VALUE;
}
}

protected final void initHSOWR111(String s) {
if (!s.trim().isEmpty()) {
HSOWR111 = Short.parseShort(s);
} else {
HSOWR111 = Short.MIN_VALUE;
}
}

protected final void initHSOWR1_BH(String s) {
if (!s.trim().isEmpty()) {
HSOWR1_BH = Short.parseShort(s);
} else {
HSOWR1_BH = Short.MIN_VALUE;
}
}

protected final void initHSOWR2_BH(String s) {
if (!s.trim().isEmpty()) {
HSOWR2_BH = Short.parseShort(s);
} else {
HSOWR2_BH = Short.MIN_VALUE;
}
}

protected final void initHSPRBA(String s) {
if (!s.trim().isEmpty()) {
HSPRBA = Byte.parseByte(s);
} else {
HSPRBA = Byte.MIN_VALUE;
}
}

protected final void initHSPRBB(String s) {
if (!s.trim().isEmpty()) {
HSPRBB = Byte.parseByte(s);
} else {
HSPRBB = Byte.MIN_VALUE;
}
}

protected final void initHSPRBC(String s) {
if (!s.trim().isEmpty()) {
HSPRBC = Byte.parseByte(s);
} else {
HSPRBC = Byte.MIN_VALUE;
}
}

protected final void initHSPRBD(String s) {
if (!s.trim().isEmpty()) {
HSPRBD = Byte.parseByte(s);
} else {
HSPRBD = Byte.MIN_VALUE;
}
}

protected final void initHSPRBE(String s) {
if (!s.trim().isEmpty()) {
HSPRBE = Byte.parseByte(s);
} else {
HSPRBE = Byte.MIN_VALUE;
}
}

protected final void initHSPRBF(String s) {
if (!s.trim().isEmpty()) {
HSPRBF = Byte.parseByte(s);
} else {
HSPRBF = Byte.MIN_VALUE;
}
}

protected final void initHSROOM(String s) {
if (!s.trim().isEmpty()) {
HSROOM = Short.parseShort(s);
} else {
HSROOM = Short.MIN_VALUE;
}
}

protected final void initHSROOMS(String s) {
if (!s.trim().isEmpty()) {
HSROOMS = Byte.parseByte(s);
} else {
HSROOMS = Byte.MIN_VALUE;
}
}

protected final void initHSSNIP(String s) {
if (!s.trim().isEmpty()) {
HSSNIP = Byte.parseByte(s);
} else {
HSSNIP = Byte.MIN_VALUE;
}
}

protected final void initHSTYPE(String s) {
if (!s.trim().isEmpty()) {
HSTYPE = Short.parseShort(s);
} else {
HSTYPE = Short.MIN_VALUE;
}
}

protected final void initHSVALI(String s) {
if (!s.trim().isEmpty()) {
HSVALI = Short.parseShort(s);
} else {
HSVALI = Short.MIN_VALUE;
}
}

protected final void initHSVNDR(String s) {
if (!s.trim().isEmpty()) {
HSVNDR = Byte.parseByte(s);
} else {
HSVNDR = Byte.MIN_VALUE;
}
}

protected final void initHSYR0(String s) {
if (!s.trim().isEmpty()) {
HSYR0 = Short.parseShort(s);
} else {
HSYR0 = Short.MIN_VALUE;
}
}

protected final void initHSYR04_BH(String s) {
if (!s.trim().isEmpty()) {
HSYR04_BH = Short.parseShort(s);
} else {
HSYR04_BH = Short.MIN_VALUE;
}
}

protected final void initIVH0(String s) {
if (!s.trim().isEmpty()) {
IVH0 = Short.parseShort(s);
} else {
IVH0 = Short.MIN_VALUE;
}
}

protected final void initIVH11(String s) {
if (!s.trim().isEmpty()) {
IVH11 = Short.parseShort(s);
} else {
IVH11 = Short.MIN_VALUE;
}
}

protected final void initIVH1_BH(String s) {
if (!s.trim().isEmpty()) {
IVH1_BH = Short.parseShort(s);
} else {
IVH1_BH = Short.MIN_VALUE;
}
}

protected final void initIVH2_BH(String s) {
if (!s.trim().isEmpty()) {
IVH2_BH = Short.parseShort(s);
} else {
IVH2_BH = Short.MIN_VALUE;
}
}

protected final void initIVH3_BH(String s) {
if (!s.trim().isEmpty()) {
IVH3_BH = Short.parseShort(s);
} else {
IVH3_BH = Short.MIN_VALUE;
}
}

protected final void initIVHC1(String s) {
if (!s.trim().isEmpty()) {
IVHC1 = Byte.parseByte(s);
} else {
IVHC1 = Byte.MIN_VALUE;
}
}

protected final void initIVHC2(String s) {
if (!s.trim().isEmpty()) {
IVHC2 = Byte.parseByte(s);
} else {
IVHC2 = Byte.MIN_VALUE;
}
}

protected final void initIVHC3(String s) {
if (!s.trim().isEmpty()) {
IVHC3 = Byte.parseByte(s);
} else {
IVHC3 = Byte.MIN_VALUE;
}
}

protected final void initLECWAY(String s) {
if (!s.trim().isEmpty()) {
LECWAY = Byte.parseByte(s);
} else {
LECWAY = Byte.MIN_VALUE;
}
}

protected final void initLOCTAX(String s) {
if (!s.trim().isEmpty()) {
LOCTAX = Double.parseDouble(s);
} else {
LOCTAX = Double.NaN;
}
}

protected final void initMGEXTRA(String s) {
if (!s.trim().isEmpty()) {
MGEXTRA = Short.parseShort(s);
} else {
MGEXTRA = Short.MIN_VALUE;
}
}

protected final void initMGHAVE(String s) {
if (!s.trim().isEmpty()) {
MGHAVE = Short.parseShort(s);
} else {
MGHAVE = Short.MIN_VALUE;
}
}

protected final void initMGNEW(String s) {
if (!s.trim().isEmpty()) {
MGNEW = Integer.parseInt(s);
} else {
MGNEW = Integer.MIN_VALUE;
}
}

protected final void initMGNEWI(String s) {
if (!s.trim().isEmpty()) {
MGNEWI = Short.parseShort(s);
} else {
MGNEWI = Short.MIN_VALUE;
}
}

protected final void initMGOLD(String s) {
if (!s.trim().isEmpty()) {
MGOLD = Integer.parseInt(s);
} else {
MGOLD = Integer.MIN_VALUE;
}
}

protected final void initMGTYPE_BH(String s) {
if (!s.trim().isEmpty()) {
MGTYPE_BH = Short.parseShort(s);
} else {
MGTYPE_BH = Short.MIN_VALUE;
}
}

protected final void initMGXTY1(String s) {
if (!s.trim().isEmpty()) {
MGXTY1 = Short.parseShort(s);
} else {
MGXTY1 = Short.MIN_VALUE;
}
}

protected final void initMGXTY1_BH(String s) {
if (!s.trim().isEmpty()) {
MGXTY1_BH = Short.parseShort(s);
} else {
MGXTY1_BH = Short.MIN_VALUE;
}
}

protected final void initMGXTY2(String s) {
if (!s.trim().isEmpty()) {
MGXTY2 = Short.parseShort(s);
} else {
MGXTY2 = Short.MIN_VALUE;
}
}

protected final void initMGXTY2_BH(String s) {
if (!s.trim().isEmpty()) {
MGXTY2_BH = Short.parseShort(s);
} else {
MGXTY2_BH = Short.MIN_VALUE;
}
}

protected final void initMGXTY3(String s) {
if (!s.trim().isEmpty()) {
MGXTY3 = Short.parseShort(s);
} else {
MGXTY3 = Short.MIN_VALUE;
}
}

protected final void initMGXTY3_BH(String s) {
if (!s.trim().isEmpty()) {
MGXTY3_BH = Short.parseShort(s);
} else {
MGXTY3_BH = Short.MIN_VALUE;
}
}

protected final void initMGXTY4(String s) {
if (!s.trim().isEmpty()) {
MGXTY4 = Short.parseShort(s);
} else {
MGXTY4 = Short.MIN_VALUE;
}
}

protected final void initMGXTY4_BH(String s) {
if (!s.trim().isEmpty()) {
MGXTY4_BH = Short.parseShort(s);
} else {
MGXTY4_BH = Short.MIN_VALUE;
}
}

protected final void initMGXTY5_BH(String s) {
if (!s.trim().isEmpty()) {
MGXTY5_BH = Short.parseShort(s);
} else {
MGXTY5_BH = Short.MIN_VALUE;
}
}

protected final void initMGYNOT_BH(String s) {
if (!s.trim().isEmpty()) {
MGYNOT_BH = Short.parseShort(s);
} else {
MGYNOT_BH = Short.MIN_VALUE;
}
}

protected final void initMGYR0(String s) {
if (!s.trim().isEmpty()) {
MGYR0 = Short.parseShort(s);
} else {
MGYR0 = Short.MIN_VALUE;
}
}

protected final void initMGYR04(String s) {
if (!s.trim().isEmpty()) {
MGYR04 = Short.parseShort(s);
} else {
MGYR04 = Short.MIN_VALUE;
}
}

protected final void initMONUM(String s) {
if (!s.trim().isEmpty()) {
MONUM = Integer.parseInt(s);
} else {
MONUM = Integer.MIN_VALUE;
}
}

protected final void initNA75PL(String s) {
if (!s.trim().isEmpty()) {
NA75PL = Byte.parseByte(s);
} else {
NA75PL = Byte.MIN_VALUE;
}
}

protected final void initNCARS_BH(String s) {
if (!s.trim().isEmpty()) {
NCARS_BH = Short.parseShort(s);
} else {
NCARS_BH = Short.MIN_VALUE;
}
}

protected final void initNCH1618(String s) {
if (!s.trim().isEmpty()) {
NCH1618 = Short.parseShort(s);
} else {
NCH1618 = Short.MIN_VALUE;
}
}

protected final void initNCOUPLE_DV(String s) {
if (!s.trim().isEmpty()) {
NCOUPLE_DV = Short.parseShort(s);
} else {
NCOUPLE_DV = Short.MIN_VALUE;
}
}

protected final void initNETLAB(String s) {
if (!s.trim().isEmpty()) {
NETLAB = Double.parseDouble(s);
} else {
NETLAB = Double.NaN;
}
}

protected final void initNHHRSP(String s) {
if (!s.trim().isEmpty()) {
NHHRSP = Byte.parseByte(s);
} else {
NHHRSP = Byte.MIN_VALUE;
}
}

protected final void initNI(String s) {
if (!s.trim().isEmpty()) {
NI = Double.parseDouble(s);
} else {
NI = Double.NaN;
}
}

protected final void initNUE(String s) {
if (!s.trim().isEmpty()) {
NUE = Byte.parseByte(s);
} else {
NUE = Byte.MIN_VALUE;
}
}

protected final void initNWAGE_DV(String s) {
if (!s.trim().isEmpty()) {
NWAGE_DV = Short.parseShort(s);
} else {
NWAGE_DV = Short.MIN_VALUE;
}
}

protected final void initNWED(String s) {
if (!s.trim().isEmpty()) {
NWED = Byte.parseByte(s);
} else {
NWED = Byte.MIN_VALUE;
}
}

protected final void initOTHLAB(String s) {
if (!s.trim().isEmpty()) {
OTHLAB = Double.parseDouble(s);
} else {
OTHLAB = Double.NaN;
}
}

protected final void initPHONE(String s) {
if (!s.trim().isEmpty()) {
PHONE = Byte.parseByte(s);
} else {
PHONE = Byte.MIN_VALUE;
}
}

protected final void initREGION(String s) {
if (!s.trim().isEmpty()) {
REGION = Short.parseShort(s);
} else {
REGION = Short.MIN_VALUE;
}
}

protected final void initRENT1(String s) {
if (!s.trim().isEmpty()) {
RENT1 = Short.parseShort(s);
} else {
RENT1 = Short.MIN_VALUE;
}
}

protected final void initRENT2(String s) {
if (!s.trim().isEmpty()) {
RENT2 = Short.parseShort(s);
} else {
RENT2 = Short.MIN_VALUE;
}
}

protected final void initRENT3(String s) {
if (!s.trim().isEmpty()) {
RENT3 = Short.parseShort(s);
} else {
RENT3 = Short.MIN_VALUE;
}
}

protected final void initRENT4(String s) {
if (!s.trim().isEmpty()) {
RENT4 = Short.parseShort(s);
} else {
RENT4 = Short.MIN_VALUE;
}
}

protected final void initRENT5(String s) {
if (!s.trim().isEmpty()) {
RENT5 = Short.parseShort(s);
} else {
RENT5 = Short.MIN_VALUE;
}
}

protected final void initRENT6(String s) {
if (!s.trim().isEmpty()) {
RENT6 = Short.parseShort(s);
} else {
RENT6 = Short.MIN_VALUE;
}
}

protected final void initRENTGI(String s) {
if (!s.trim().isEmpty()) {
RENTGI = Short.parseShort(s);
} else {
RENTGI = Short.MIN_VALUE;
}
}

protected final void initRENTGW(String s) {
if (!s.trim().isEmpty()) {
RENTGW = Double.parseDouble(s);
} else {
RENTGW = Double.NaN;
}
}

protected final void initRENTG_BH(String s) {
if (!s.trim().isEmpty()) {
RENTG_BH = Short.parseShort(s);
} else {
RENTG_BH = Short.MIN_VALUE;
}
}

protected final void initRENTHB_BH(String s) {
if (!s.trim().isEmpty()) {
RENTHB_BH = Short.parseShort(s);
} else {
RENTHB_BH = Short.MIN_VALUE;
}
}

protected final void initRENTI(String s) {
if (!s.trim().isEmpty()) {
RENTI = Short.parseShort(s);
} else {
RENTI = Short.MIN_VALUE;
}
}

protected final void initRENTP11(String s) {
if (!s.trim().isEmpty()) {
RENTP11 = Short.parseShort(s);
} else {
RENTP11 = Short.MIN_VALUE;
}
}

protected final void initRENTP1_BH(String s) {
if (!s.trim().isEmpty()) {
RENTP1_BH = Short.parseShort(s);
} else {
RENTP1_BH = Short.MIN_VALUE;
}
}

protected final void initRENTP2_BH(String s) {
if (!s.trim().isEmpty()) {
RENTP2_BH = Short.parseShort(s);
} else {
RENTP2_BH = Short.MIN_VALUE;
}
}

protected final void initRENTW(String s) {
if (!s.trim().isEmpty()) {
RENTW = Double.parseDouble(s);
} else {
RENTW = Double.NaN;
}
}

protected final void initSPEMP(String s) {
if (!s.trim().isEmpty()) {
SPEMP = Double.parseDouble(s);
} else {
SPEMP = Double.NaN;
}
}

protected final void initSPSE(String s) {
if (!s.trim().isEmpty()) {
SPSE = Double.parseDouble(s);
} else {
SPSE = Double.NaN;
}
}

protected final void initTAXCR(String s) {
if (!s.trim().isEmpty()) {
TAXCR = Double.parseDouble(s);
} else {
TAXCR = Double.NaN;
}
}

protected final void initTAXGR(String s) {
if (!s.trim().isEmpty()) {
TAXGR = Double.parseDouble(s);
} else {
TAXGR = Double.NaN;
}
}

protected final void initTAXNET(String s) {
if (!s.trim().isEmpty()) {
TAXNET = Double.parseDouble(s);
} else {
TAXNET = Double.NaN;
}
}

protected final void initTENURE_DV(String s) {
if (!s.trim().isEmpty()) {
TENURE_DV = Short.parseShort(s);
} else {
TENURE_DV = Short.MIN_VALUE;
}
}

protected final void initXPFOOD(String s) {
if (!s.trim().isEmpty()) {
XPFOOD = Short.parseShort(s);
} else {
XPFOOD = Short.MIN_VALUE;
}
}

protected final void initXPFUEL(String s) {
if (!s.trim().isEmpty()) {
XPFUEL = Double.parseDouble(s);
} else {
XPFUEL = Double.NaN;
}
}

protected final void initXPGAS(String s) {
if (!s.trim().isEmpty()) {
XPGAS = Double.parseDouble(s);
} else {
XPGAS = Double.NaN;
}
}

protected final void initXPGASL(String s) {
if (!s.trim().isEmpty()) {
XPGASL = Short.parseShort(s);
} else {
XPGASL = Short.MIN_VALUE;
}
}

protected final void initXPGASLW(String s) {
if (!s.trim().isEmpty()) {
XPGASLW = Byte.parseByte(s);
} else {
XPGASLW = Byte.MIN_VALUE;
}
}

protected final void initXPGASW(String s) {
if (!s.trim().isEmpty()) {
XPGASW = Double.parseDouble(s);
} else {
XPGASW = Double.NaN;
}
}

protected final void initXPHSD1(String s) {
if (!s.trim().isEmpty()) {
XPHSD1 = Short.parseShort(s);
} else {
XPHSD1 = Short.MIN_VALUE;
}
}

protected final void initXPHSD2(String s) {
if (!s.trim().isEmpty()) {
XPHSD2 = Short.parseShort(s);
} else {
XPHSD2 = Short.MIN_VALUE;
}
}

protected final void initXPHSDB_BH(String s) {
if (!s.trim().isEmpty()) {
XPHSDB_BH = Short.parseShort(s);
} else {
XPHSDB_BH = Short.MIN_VALUE;
}
}

protected final void initXPHSDF(String s) {
if (!s.trim().isEmpty()) {
XPHSDF = Short.parseShort(s);
} else {
XPHSDF = Short.MIN_VALUE;
}
}

protected final void initXPHSG(String s) {
if (!s.trim().isEmpty()) {
XPHSG = Double.parseDouble(s);
} else {
XPHSG = Double.NaN;
}
}

protected final void initXPHSGI(String s) {
if (!s.trim().isEmpty()) {
XPHSGI = Short.parseShort(s);
} else {
XPHSGI = Short.MIN_VALUE;
}
}

protected final void initXPHSN(String s) {
if (!s.trim().isEmpty()) {
XPHSN = Double.parseDouble(s);
} else {
XPHSN = Double.NaN;
}
}

protected final void initXPHSNI(String s) {
if (!s.trim().isEmpty()) {
XPHSNI = Short.parseShort(s);
} else {
XPHSNI = Short.MIN_VALUE;
}
}

protected final void initXPLEC(String s) {
if (!s.trim().isEmpty()) {
XPLEC = Double.parseDouble(s);
} else {
XPLEC = Double.NaN;
}
}

protected final void initXPLECL(String s) {
if (!s.trim().isEmpty()) {
XPLECL = Short.parseShort(s);
} else {
XPLECL = Short.MIN_VALUE;
}
}

protected final void initXPLECLW(String s) {
if (!s.trim().isEmpty()) {
XPLECLW = Byte.parseByte(s);
} else {
XPLECLW = Byte.MIN_VALUE;
}
}

protected final void initXPLECW(String s) {
if (!s.trim().isEmpty()) {
XPLECW = Double.parseDouble(s);
} else {
XPLECW = Double.NaN;
}
}

protected final void initXPMG1(String s) {
if (!s.trim().isEmpty()) {
XPMG1 = Short.parseShort(s);
} else {
XPMG1 = Short.MIN_VALUE;
}
}

protected final void initXPMG2(String s) {
if (!s.trim().isEmpty()) {
XPMG2 = Short.parseShort(s);
} else {
XPMG2 = Short.MIN_VALUE;
}
}

protected final void initXPMG3(String s) {
if (!s.trim().isEmpty()) {
XPMG3 = Short.parseShort(s);
} else {
XPMG3 = Short.MIN_VALUE;
}
}

protected final void initXPMG4(String s) {
if (!s.trim().isEmpty()) {
XPMG4 = Short.parseShort(s);
} else {
XPMG4 = Short.MIN_VALUE;
}
}

protected final void initXPMGI(String s) {
if (!s.trim().isEmpty()) {
XPMGI = Short.parseShort(s);
} else {
XPMGI = Short.MIN_VALUE;
}
}

protected final void initXPOIL(String s) {
if (!s.trim().isEmpty()) {
XPOIL = Double.parseDouble(s);
} else {
XPOIL = Double.NaN;
}
}

protected final void initXPOILY(String s) {
if (!s.trim().isEmpty()) {
XPOILY = Short.parseShort(s);
} else {
XPOILY = Short.MIN_VALUE;
}
}

protected final void initXPOILY_BH(String s) {
if (!s.trim().isEmpty()) {
XPOILY_BH = Short.parseShort(s);
} else {
XPOILY_BH = Short.MIN_VALUE;
}
}

protected final void initYRCONTR(String s) {
if (!s.trim().isEmpty()) {
YRCONTR = Double.parseDouble(s);
} else {
YRCONTR = Double.NaN;
}
}

protected final void initYRDEDUC(String s) {
if (!s.trim().isEmpty()) {
YRDEDUC = Double.parseDouble(s);
} else {
YRDEDUC = Double.NaN;
}
}

protected final void initYRNI(String s) {
if (!s.trim().isEmpty()) {
YRNI = Double.parseDouble(s);
} else {
YRNI = Double.NaN;
}
}

protected final void initYRTAXCR(String s) {
if (!s.trim().isEmpty()) {
YRTAXCR = Double.parseDouble(s);
} else {
YRTAXCR = Double.NaN;
}
}

protected final void initYRTAXGR(String s) {
if (!s.trim().isEmpty()) {
YRTAXGR = Double.parseDouble(s);
} else {
YRTAXGR = Double.NaN;
}
}

protected final void initYRTAXNT(String s) {
if (!s.trim().isEmpty()) {
YRTAXNT = Double.parseDouble(s);
} else {
YRTAXNT = Double.NaN;
}
}

protected double BASEPI() {
return BASEPI;
}

protected double BHCIND() {
return BHCIND;
}

protected double BHCINDA() {
return BHCINDA;
}

public short getCD1NEW() {
return CD1NEW;
}

public byte getCD1OWN() {
return CD1OWN;
}

public short getCD1USE() {
return CD1USE;
}

public short getCD2NEW() {
return CD2NEW;
}

public byte getCD2OWN() {
return CD2OWN;
}

public short getCD2USE() {
return CD2USE;
}

public byte getCD3NEW() {
return CD3NEW;
}

public byte getCD3OWN() {
return CD3OWN;
}

public byte getCD3USE() {
return CD3USE;
}

public short getCD4NEW() {
return CD4NEW;
}

public byte getCD4OWN() {
return CD4OWN;
}

public short getCD4USE() {
return CD4USE;
}

public byte getCD5NEW() {
return CD5NEW;
}

public byte getCD5OWN() {
return CD5OWN;
}

public byte getCD5USE() {
return CD5USE;
}

public short getCD6NEW() {
return CD6NEW;
}

public byte getCD6OWN() {
return CD6OWN;
}

public short getCD6USE() {
return CD6USE;
}

public short getCD7NEW() {
return CD7NEW;
}

public byte getCD7OWN() {
return CD7OWN;
}

public short getCD7USE() {
return CD7USE;
}

public short getCD8NEW() {
return CD8NEW;
}

public byte getCD8OWN() {
return CD8OWN;
}

public short getCD8USE() {
return CD8USE;
}

public short getCD9NEW() {
return CD9NEW;
}

public byte getCD9OWN() {
return CD9OWN;
}

public short getCD9USE() {
return CD9USE;
}

public short getCDUSE10() {
return CDUSE10;
}

public short getCDUSE11() {
return CDUSE11;
}

public byte getCDUSE5() {
return CDUSE5;
}

public byte getCDUSE7() {
return CDUSE7;
}

protected double CONTR() {
return CONTR;
}

protected double DEDUC() {
return DEDUC;
}

protected double EQ_MOECD() {
return EQ_MOECD;
}

protected double FIEQFCA() {
return FIEQFCA;
}

protected double FIEQFCB() {
return FIEQFCB;
}

protected double FIHHMB() {
return FIHHMB;
}

public short getFIHHMBI() {
return FIHHMBI;
}

protected double FIHHMI() {
return FIHHMI;
}

public short getFIHHMII() {
return FIHHMII;
}

protected double FIHHML() {
return FIHHML;
}

public short getFIHHMLI() {
return FIHHMLI;
}

public short getFIHHMNI() {
return FIHHMNI;
}

protected double FIHHMNL() {
return FIHHMNL;
}

protected double FIHHMP() {
return FIHHMP;
}

public short getFIHHMPI() {
return FIHHMPI;
}

protected double FIHHMT() {
return FIHHMT;
}

public byte getFIHHMTI() {
return FIHHMTI;
}

protected double FIHHYB() {
return FIHHYB;
}

public short getFIHHYBI() {
return FIHHYBI;
}

protected double FIHHYI() {
return FIHHYI;
}

public short getFIHHYII() {
return FIHHYII;
}

protected double FIHHYL() {
return FIHHYL;
}

public short getFIHHYLI() {
return FIHHYLI;
}

public short getFIHHYNI() {
return FIHHYNI;
}

protected double FIHHYNL() {
return FIHHYNL;
}

protected double FIHHYP() {
return FIHHYP;
}

public short getFIHHYPI() {
return FIHHYPI;
}

protected double FIHHYR() {
return FIHHYR;
}

public short getFIHHYRI() {
return FIHHYRI;
}

protected double FIHHYT() {
return FIHHYT;
}

public byte getFIHHYTI() {
return FIHHYTI;
}

public short getFIHMNLI() {
return FIHMNLI;
}

public byte getGASUSE() {
return GASUSE;
}

public byte getGASWAY() {
return GASWAY;
}

protected double GRPAY() {
return GRPAY;
}

protected double HCOST() {
return HCOST;
}

protected double HDEMP() {
return HDEMP;
}

protected double HDSE() {
return HDSE;
}

public short getHEATYP() {
return HEATYP;
}

public short getHHAB1Y() {
return HHAB1Y;
}

public short getHHAB2Y() {
return HHAB2Y;
}

protected double HHB() {
return HHB;
}

public short getHHDC() {
return HHDC;
}

protected double HHI() {
return HHI;
}

public byte getHHJND() {
return HHJND;
}

protected double HHNETDE() {
return HHNETDE;
}

protected double HHNETDE2() {
return HHNETDE2;
}

protected double HHNETI() {
return HHNETI;
}

protected double HHNYRDE() {
return HHNYRDE;
}

protected double HHNYRDE2() {
return HHNYRDE2;
}

protected double HHP() {
return HHP;
}

protected double HHT() {
return HHT;
}

public short getHHTYPE() {
return HHTYPE;
}

protected double HHWGHT() {
return HHWGHT;
}

protected double HHYNETI() {
return HHYNETI;
}

protected double HHYRB() {
return HHYRB;
}

public short getHHYRBI() {
return HHYRBI;
}

protected double HHYRI() {
return HHYRI;
}

public short getHHYRII() {
return HHYRII;
}

protected double HHYRLG() {
return HHYRLG;
}

protected double HHYRLN() {
return HHYRLN;
}

public short getHHYRLNI() {
return HHYRLNI;
}

protected double HHYRP() {
return HHYRP;
}

public short getHHYRPI() {
return HHYRPI;
}

protected double HHYRT() {
return HHYRT;
}

public short getHHYRTI() {
return HHYRTI;
}

public int getHID() {
return HID;
}

public byte getHSBEDS() {
return HSBEDS;
}

public byte getHSFLOOR() {
return HSFLOOR;
}

public short getHSOWND_BH() {
return HSOWND_BH;
}

public short getHSOWR111() {
return HSOWR111;
}

public short getHSOWR1_BH() {
return HSOWR1_BH;
}

public short getHSOWR2_BH() {
return HSOWR2_BH;
}

public byte getHSPRBA() {
return HSPRBA;
}

public byte getHSPRBB() {
return HSPRBB;
}

public byte getHSPRBC() {
return HSPRBC;
}

public byte getHSPRBD() {
return HSPRBD;
}

public byte getHSPRBE() {
return HSPRBE;
}

public byte getHSPRBF() {
return HSPRBF;
}

public short getHSROOM() {
return HSROOM;
}

public byte getHSROOMS() {
return HSROOMS;
}

public byte getHSSNIP() {
return HSSNIP;
}

public short getHSTYPE() {
return HSTYPE;
}

public short getHSVALI() {
return HSVALI;
}

public byte getHSVNDR() {
return HSVNDR;
}

public short getHSYR0() {
return HSYR0;
}

public short getHSYR04_BH() {
return HSYR04_BH;
}

public short getIVH0() {
return IVH0;
}

public short getIVH11() {
return IVH11;
}

public short getIVH1_BH() {
return IVH1_BH;
}

public short getIVH2_BH() {
return IVH2_BH;
}

public short getIVH3_BH() {
return IVH3_BH;
}

public byte getIVHC1() {
return IVHC1;
}

public byte getIVHC2() {
return IVHC2;
}

public byte getIVHC3() {
return IVHC3;
}

public byte getLECWAY() {
return LECWAY;
}

protected double LOCTAX() {
return LOCTAX;
}

public short getMGEXTRA() {
return MGEXTRA;
}

public short getMGHAVE() {
return MGHAVE;
}

public int getMGNEW() {
return MGNEW;
}

public short getMGNEWI() {
return MGNEWI;
}

public int getMGOLD() {
return MGOLD;
}

public short getMGTYPE_BH() {
return MGTYPE_BH;
}

public short getMGXTY1() {
return MGXTY1;
}

public short getMGXTY1_BH() {
return MGXTY1_BH;
}

public short getMGXTY2() {
return MGXTY2;
}

public short getMGXTY2_BH() {
return MGXTY2_BH;
}

public short getMGXTY3() {
return MGXTY3;
}

public short getMGXTY3_BH() {
return MGXTY3_BH;
}

public short getMGXTY4() {
return MGXTY4;
}

public short getMGXTY4_BH() {
return MGXTY4_BH;
}

public short getMGXTY5_BH() {
return MGXTY5_BH;
}

public short getMGYNOT_BH() {
return MGYNOT_BH;
}

public short getMGYR0() {
return MGYR0;
}

public short getMGYR04() {
return MGYR04;
}

public int getMONUM() {
return MONUM;
}

public byte getNA75PL() {
return NA75PL;
}

public short getNCARS_BH() {
return NCARS_BH;
}

public short getNCH1618() {
return NCH1618;
}

public short getNCOUPLE_DV() {
return NCOUPLE_DV;
}

protected double NETLAB() {
return NETLAB;
}

public byte getNHHRSP() {
return NHHRSP;
}

protected double NI() {
return NI;
}

public byte getNUE() {
return NUE;
}

public short getNWAGE_DV() {
return NWAGE_DV;
}

public byte getNWED() {
return NWED;
}

protected double OTHLAB() {
return OTHLAB;
}

public byte getPHONE() {
return PHONE;
}

public short getREGION() {
return REGION;
}

public short getRENT1() {
return RENT1;
}

public short getRENT2() {
return RENT2;
}

public short getRENT3() {
return RENT3;
}

public short getRENT4() {
return RENT4;
}

public short getRENT5() {
return RENT5;
}

public short getRENT6() {
return RENT6;
}

public short getRENTGI() {
return RENTGI;
}

protected double RENTGW() {
return RENTGW;
}

public short getRENTG_BH() {
return RENTG_BH;
}

public short getRENTHB_BH() {
return RENTHB_BH;
}

public short getRENTI() {
return RENTI;
}

public short getRENTP11() {
return RENTP11;
}

public short getRENTP1_BH() {
return RENTP1_BH;
}

public short getRENTP2_BH() {
return RENTP2_BH;
}

protected double RENTW() {
return RENTW;
}

protected double SPEMP() {
return SPEMP;
}

protected double SPSE() {
return SPSE;
}

protected double TAXCR() {
return TAXCR;
}

protected double TAXGR() {
return TAXGR;
}

protected double TAXNET() {
return TAXNET;
}

public short getTENURE_DV() {
return TENURE_DV;
}

public short getXPFOOD() {
return XPFOOD;
}

protected double XPFUEL() {
return XPFUEL;
}

protected double XPGAS() {
return XPGAS;
}

public short getXPGASL() {
return XPGASL;
}

public byte getXPGASLW() {
return XPGASLW;
}

protected double XPGASW() {
return XPGASW;
}

public short getXPHSD1() {
return XPHSD1;
}

public short getXPHSD2() {
return XPHSD2;
}

public short getXPHSDB_BH() {
return XPHSDB_BH;
}

public short getXPHSDF() {
return XPHSDF;
}

protected double XPHSG() {
return XPHSG;
}

public short getXPHSGI() {
return XPHSGI;
}

protected double XPHSN() {
return XPHSN;
}

public short getXPHSNI() {
return XPHSNI;
}

protected double XPLEC() {
return XPLEC;
}

public short getXPLECL() {
return XPLECL;
}

public byte getXPLECLW() {
return XPLECLW;
}

protected double XPLECW() {
return XPLECW;
}

public short getXPMG1() {
return XPMG1;
}

public short getXPMG2() {
return XPMG2;
}

public short getXPMG3() {
return XPMG3;
}

public short getXPMG4() {
return XPMG4;
}

public short getXPMGI() {
return XPMGI;
}

protected double XPOIL() {
return XPOIL;
}

public short getXPOILY() {
return XPOILY;
}

public short getXPOILY_BH() {
return XPOILY_BH;
}

protected double YRCONTR() {
return YRCONTR;
}

protected double YRDEDUC() {
return YRDEDUC;
}

protected double YRNI() {
return YRNI;
}

protected double YRTAXCR() {
return YRTAXCR;
}

protected double YRTAXGR() {
return YRTAXGR;
}

protected double YRTAXNT() {
return YRTAXNT;
}

public US_Wave1_hhresp_Record(String line) {
s = line.split("\t");
initHID(s[0]);
initHIDP(s[1]);
initHHJND(s[2]);
initHHAB1Y(s[3]);
initHHAB2Y(s[4]);
initNHHRSP(s[5]);
initINTDATED(s[6]);
initINTDATEM(s[7]);
initHSROOM(s[8]);
initHSBEDS(s[9]);
initHSOWND_BH(s[10]);
initHSOWR1_BH(s[11]);
initHSOWR2_BH(s[12]);
initMGHAVE(s[13]);
initMGYNOT_BH(s[14]);
initHSSNIP(s[15]);
initHSVNDR(s[16]);
initHSCOST(s[17]);
initMGYR0(s[18]);
initHSYR0(s[19]);
initMGOLD(s[20]);
initMGLIFE(s[21]);
initMGTYPE_BH(s[22]);
initMGEXTRA(s[23]);
initMGNEW(s[24]);
initMGXTY1_BH(s[25]);
initMGXTY2_BH(s[26]);
initMGXTY3_BH(s[27]);
initMGXTY4_BH(s[28]);
initMGXTY5_BH(s[29]);
initXPMG(s[30]);
initXPMG1(s[31]);
initXPMG2(s[32]);
initXPMG3(s[33]);
initXPMG4(s[34]);
initHSVAL(s[35]);
initHSJB(s[36]);
initRENTP1_BH(s[37]);
initRENTP2_BH(s[38]);
initRENTLL(s[39]);
initRENTF(s[40]);
initRENT(s[41]);
initRENTW(s[42]);
initRENT1(s[43]);
initRENT2(s[44]);
initRENT3(s[45]);
initRENT4(s[46]);
initRENT5(s[47]);
initRENT6(s[48]);
initRENTHB_BH(s[49]);
initRENTG_BH(s[50]);
initRENTGW(s[51]);
initXPHSDF(s[52]);
initXPHSD1(s[53]);
initXPHSD2(s[54]);
initXPHSDB_BH(s[55]);
initHSPRBA(s[56]);
initHSPRBB(s[57]);
initHSPRBC(s[58]);
initHSPRBD(s[59]);
initHSPRBE(s[60]);
initHSPRBF(s[61]);
initCD1USE(s[62]);
initCD1OWN(s[63]);
initCD1NEW(s[64]);
initCD2USE(s[65]);
initCD2OWN(s[66]);
initCD2NEW(s[67]);
initCD3USE(s[68]);
initCD3OWN(s[69]);
initCD3NEW(s[70]);
initCD4USE(s[71]);
initCD4OWN(s[72]);
initCD4NEW(s[73]);
initCD5USE(s[74]);
initCD5OWN(s[75]);
initCD5NEW(s[76]);
initCD6USE(s[77]);
initCD6OWN(s[78]);
initCD6NEW(s[79]);
initCD7USE(s[80]);
initCD7OWN(s[81]);
initCD7NEW(s[82]);
initCD8USE(s[83]);
initCD8OWN(s[84]);
initCD8NEW(s[85]);
initCD9USE(s[86]);
initCD9OWN(s[87]);
initCD9NEW(s[88]);
initHEATCH(s[89]);
initHEATYP(s[90]);
initXPOILY_BH(s[91]);
initGASUSE(s[92]);
initGASWAY(s[93]);
initXPGASL(s[94]);
initXPGASW(s[95]);
initXPGASLW(s[96]);
initLECWAY(s[97]);
initXPLECL(s[98]);
initXPLECW(s[99]);
initXPLECLW(s[100]);
initXPFOOD(s[101]);
initNCARS_BH(s[102]);
initIVH1_BH(s[103]);
initIVH2_BH(s[104]);
initIVH3_BH(s[105]);
initIVHC1(s[106]);
initIVHC2(s[107]);
initIVHC3(s[108]);
initHHDC(s[109]);
initHHWGHT(s[110]);
initHSTYPE(s[111]);
initHSFLOOR(s[112]);
initHHSIZE(s[113]);
initHHTYPE(s[114]);
initREGION(s[115]);
initNCH02_DV(s[116]);
initNCH34_DV(s[117]);
initNCH511_DV(s[118]);
initNCH1215_DV(s[119]);
initNCH1618(s[120]);
initNKIDS_DV(s[121]);
initNWED(s[122]);
initNPENS_DV(s[123]);
initNA75PL(s[124]);
initAGECHY_DV(s[125]);
initNCOUPLE_DV(s[126]);
initNONEPAR_DV(s[127]);
initNEMP_DV(s[128]);
initNUE(s[129]);
initNWAGE_DV(s[130]);
initTENURE_DV(s[131]);
initXPHSN(s[132]);
initXPHSG(s[133]);
initXPOIL(s[134]);
initXPGAS(s[135]);
initXPLEC(s[136]);
initXPFUEL(s[137]);
initPHONE(s[138]);
initFIEQFCB(s[139]);
initFIEQFCA(s[140]);
initFIHHYR(s[141]);
initFIHHMNGRS_DV(s[142]);
initFIHHYL(s[143]);
initFIHHML(s[144]);
initFIHHMNL(s[145]);
initFIHHMP(s[146]);
initFIHHMB(s[147]);
initFIHHMT(s[148]);
initFIHHMI(s[149]);
initFIHHYNL(s[150]);
initFIHHYP(s[151]);
initFIHHYB(s[152]);
initFIHHYT(s[153]);
initFIHHYI(s[154]);
initMGNEWI(s[155]);
initXPMGI(s[156]);
initHSVALI(s[157]);
initRENTI(s[158]);
initRENTGI(s[159]);
initXPHSNI(s[160]);
initXPHSGI(s[161]);
initFIHHMNI(s[162]);
initFIHHMLI(s[163]);
initFIHMNLI(s[164]);
initFIHHMPI(s[165]);
initFIHHMBI(s[166]);
initFIHHMTI(s[167]);
initFIHHMII(s[168]);
initFIHHYRI(s[169]);
initFIHHYLI(s[170]);
initFIHHYNI(s[171]);
initFIHHYPI(s[172]);
initFIHHYBI(s[173]);
initFIHHYTI(s[174]);
initFIHHYII(s[175]);
initMGYR04(s[176]);
initHSYR04_BH(s[177]);
initGOR_DV(s[178]);
initLOCTAX(s[179]);
initHDEMP(s[180]);
initSPEMP(s[181]);
initHDSE(s[182]);
initSPSE(s[183]);
initOTHLAB(s[184]);
initDEDUC(s[185]);
initNETLAB(s[186]);
initNI(s[187]);
initCONTR(s[188]);
initTAXNET(s[189]);
initTAXGR(s[190]);
initTAXCR(s[191]);
initGRPAY(s[192]);
initHCOST(s[193]);
initHHI(s[194]);
initHHB(s[195]);
initHHP(s[196]);
initHHT(s[197]);
initHHNETI(s[198]);
initHHNETDE(s[199]);
initBHCIND(s[200]);
initMONUM(s[201]);
initHHNETDE2(s[202]);
initEQ_MOECD(s[203]);
initHHYRLN(s[204]);
initYRNI(s[205]);
initYRCONTR(s[206]);
initHHYRLG(s[207]);
initYRTAXNT(s[208]);
initYRTAXGR(s[209]);
initYRTAXCR(s[210]);
initYRDEDUC(s[211]);
initHHYRI(s[212]);
initHHYRB(s[213]);
initHHYRP(s[214]);
initHHYRT(s[215]);
initHHYNETI(s[216]);
initHHNYRDE(s[217]);
initBHCINDA(s[218]);
initBASEPI(s[219]);
initHHYRPI(s[220]);
initHHYRBI(s[221]);
initHHYRTI(s[222]);
initHHYRII(s[223]);
initHHYRLNI(s[224]);
initHHNYRDE2(s[225]);
initIVH0(s[226]);
initIVH1(s[227]);
initIVH2(s[228]);
initIVH3(s[229]);
initIVH4(s[230]);
initIVH5(s[231]);
initIVH6(s[232]);
initIVH7(s[233]);
initIVH8(s[234]);
initIVH9(s[235]);
initIVH10(s[236]);
initIVH11(s[237]);
initRENTP0(s[238]);
initRENTP1(s[239]);
initRENTP2(s[240]);
initRENTP3(s[241]);
initRENTP4(s[242]);
initRENTP5(s[243]);
initRENTP6(s[244]);
initRENTP7(s[245]);
initRENTP8(s[246]);
initRENTP9(s[247]);
initRENTP10(s[248]);
initRENTP11(s[249]);
initHSOWR10(s[250]);
initHSOWR11(s[251]);
initHSOWR12(s[252]);
initHSOWR13(s[253]);
initHSOWR14(s[254]);
initHSOWR15(s[255]);
initHSOWR16(s[256]);
initHSOWR17(s[257]);
initHSOWR18(s[258]);
initHSOWR19(s[259]);
initHSOWR110(s[260]);
initHSOWR111(s[261]);
initHSYR04(s[262]);
initHSYRBUY(s[263]);
initXPHSDB(s[264]);
initXPOILY(s[265]);
initHSROOMS(s[266]);
initMGXTY1(s[267]);
initMGXTY2(s[268]);
initMGXTY3(s[269]);
initMGXTY4(s[270]);
initCDUSE1(s[271]);
initCDUSE2(s[272]);
initCDUSE5(s[273]);
initCDUSE6(s[274]);
initCDUSE7(s[275]);
initCDUSE8(s[276]);
initCDUSE9(s[277]);
initCDUSE10(s[278]);
initCDUSE11(s[279]);
initCDUSE96(s[280]);
}
}
