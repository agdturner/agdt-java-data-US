/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.us.data.indresp;
public class US_Wave24_indresp_Record extends US_indresp_Record {
protected byte ADCTS;
protected byte AEDROF1;
protected byte AEDROF2;
protected byte AEDROF3;
protected byte AEDROF4;
protected byte AEDROF5;
protected double AEPUDA1;
protected byte AEPUDA2;
protected byte AEPUDA3;
protected byte AEPUDA4;
protected byte AEPUDA5;
protected byte AEPUWK1;
protected byte AEPUWK2;
protected byte AEPUWK3;
protected byte AEPUWK4;
protected byte AEPUWK5;
protected byte AGE2UKC;
protected byte AGEGR10_DV;
protected byte AGEGR13_DV;
protected byte AGEGR5_DV;
protected byte AGELH;
protected byte AGERET;
protected short AGE_DV;
protected byte AHVWELL;
protected byte AIDEFT;
protected short AIDHU1;
protected short AIDHU2;
protected byte AIDHUA1;
protected byte AIDHUA10;
protected byte AIDHUA11;
protected byte AIDHUA12;
protected byte AIDHUA13;
protected byte AIDHUA14;
protected byte AIDHUA15;
protected byte AIDHUA16;
protected byte AIDHUA2;
protected byte AIDHUA3;
protected byte AIDHUA4;
protected byte AIDHUA5;
protected byte AIDHUA6;
protected byte AIDHUA7;
protected byte AIDHUA8;
protected byte AIDHUA9;
protected byte ALLLANG1;
protected byte ALLLANG10;
protected byte ALLLANG11;
protected byte ALLLANG12;
protected byte ALLLANG13;
protected byte ALLLANG14;
protected byte ALLLANG15;
protected byte ALLLANG16;
protected byte ALLLANG17;
protected byte ALLLANG18;
protected byte ALLLANG19;
protected byte ALLLANG2;
protected byte ALLLANG20;
protected byte ALLLANG3;
protected byte ALLLANG4;
protected byte ALLLANG5;
protected byte ALLLANG6;
protected byte ALLLANG7;
protected byte ALLLANG8;
protected byte ALLLANG9;
protected byte ALLLANG97;
protected byte AREA;
protected double BASNSA;
protected double BASRATE;
protected byte BASREST;
protected byte BENBASE1;
protected byte BENBASE2;
protected byte BENBASE3;
protected byte BENBASE4;
protected byte BENBASE96;
protected byte BENCTC;
protected byte BENDIS1;
protected byte BENDIS10;
protected byte BENDIS12;
protected byte BENDIS2;
protected byte BENDIS3;
protected byte BENDIS4;
protected byte BENDIS5;
protected byte BENDIS7;
protected byte BENDIS8;
protected byte BENDIS96;
protected byte BENDIS97;
protected byte BENESA;
protected byte BENPEN1;
protected byte BENPEN2;
protected byte BENPEN3;
protected byte BENPEN4;
protected byte BENPEN5;
protected byte BENPEN6;
protected byte BENPEN7;
protected byte BENPEN8;
protected byte BENPEN96;
protected byte BENSTA2;
protected byte BENSTA3;
protected byte BENSTA4;
protected byte BENSTA5;
protected byte BENSTA6;
protected byte BENSTA7;
protected byte BENSTA96;
protected byte BENSTA97;
protected short BIRTHY;
protected byte BRITID;
protected byte BUNO_DV;
protected byte CARBUY1;
protected byte CARBUY10;
protected byte CARBUY11;
protected byte CARBUY12;
protected byte CARBUY2;
protected byte CARBUY3;
protected byte CARBUY4;
protected byte CARBUY5;
protected byte CARBUY6;
protected byte CARBUY7;
protected byte CARBUY8;
protected byte CARBUY9;
protected byte CARBUY97;
protected byte CARSRV1;
protected byte CARSRV2;
protected byte CARSRV3;
protected int CASIINTNO;
protected byte CCARE;
protected byte CCWORK;
protected short CH1BY4;
protected short CHARAM;
protected byte CHARFREQ;
protected byte CHARGV;
protected byte CHILDPNO;
protected byte CHKRESP1;
protected byte CHKRESP2;
protected byte CHKRESP3;
protected byte CHKRESP4;
protected byte CITZN1;
protected byte CITZN2;
protected byte CITZN3;
protected byte CITZNWHEN;
protected short CITZNYEAR;
protected byte CIVICDUTY;
protected byte CJBATT;
protected byte CJOB;
protected short CLOSENUM;
protected byte CMLSTAT1;
protected byte CMLSTAT2;
protected byte CMLSTAT3;
protected byte CMLSTAT4;
protected byte CNTRYQUAL;
protected byte COH1BM;
protected short COH1BY;
protected byte COH1EM;
protected short COH1EY;
protected byte COH1MR;
protected byte COHAB;
protected byte COHABN;
protected boolean COHAB_DV;
protected byte COLBENS1;
protected byte COLBENS2;
protected byte COLBENS3;
protected byte COLBENS4;
protected byte CONTFT;
protected byte COUNTRY;
protected byte CRDARK;
protected byte CRWORA;
protected byte CRWORB;
protected byte CSTAT;
protected byte CTADD1_CODE;
protected byte CTADD2_CODE;
protected byte CTCNTY_CODE;
protected byte CTCONS;
protected byte CTCONSCONF1;
protected byte CTCONSCONF2;
protected byte CTCONSCONF3;
protected byte CTCONSCONF4;
protected byte CTCONSCONF5;
protected byte CTCONSCONF6;
protected byte CTCONSCONF7;
protected byte CTCONSCONF8;
protected byte CTCONSCONF94;
protected byte CTEMAIL_CODE;
protected byte CTPCODE_CODE;
protected byte CTREL;
protected byte CTTEL1_CODE;
protected byte CTTEL2_CODE;
protected byte CTTOWN_CODE;
protected byte CURRJOB1;
protected byte CURRJOB2;
protected byte CURRJOB3;
protected byte CURRJOB4;
protected byte CURRJOB5;
protected byte CURRJOB6;
protected byte CURRJOB7;
protected byte CURRPART1;
protected byte CURRPART2;
protected byte CURRPART3;
protected byte CURRPART4;
protected byte CURRPART5;
protected byte CURRSTAT1;
protected byte CURRSTAT2;
protected byte CURRSTAT3;
protected byte CURRSTAT4;
protected byte CURRSTAT5;
protected byte CURRSTAT6;
protected byte CURRSTAT7;
protected short DCDOBY;
protected byte DCSEX;
protected byte DEMORIENT;
protected boolean DEPCHL_DV;
protected byte DEPENTH1;
protected byte DEPENTH2;
protected byte DEPENTH3;
protected byte DEPENTH4;
protected byte DEPENTH5;
protected byte DEPENTH6;
protected byte DETINC1;
protected byte DETINC2;
protected byte DETINC3;
protected byte DETINC4;
protected byte DETINC5;
protected byte DETINC6;
protected byte DISDIF1;
protected byte DISDIF10;
protected byte DISDIF11;
protected byte DISDIF12;
protected byte DISDIF2;
protected byte DISDIF3;
protected byte DISDIF4;
protected byte DISDIF5;
protected byte DISDIF6;
protected byte DISDIF7;
protected byte DISDIF8;
protected byte DISDIF9;
protected byte DISDIF96;
protected byte DIVCHK1;
protected byte DIVCHK2;
protected byte DIVCHK3;
protected byte DIVCHK4;
protected byte DIVFIN1;
protected byte DIVFIN2;
protected byte DIVFIN3;
protected byte DIVFIN4;
protected byte DKLM;
protected short DOBY_DV;
protected byte DONEPROXY;
protected byte DRGMJ;
protected byte DRGOTH;
protected byte DRGSOL;
protected byte DRIVE;
protected byte DRNK4W;
protected byte DV2UK16;
protected byte DVAGE;
protected byte DVAGE2UK;
protected byte DVM1;
protected byte DVM2;
protected byte DVM3;
protected byte DVM4;
protected short DVY41;
protected short DVY42;
protected byte DVY43;
protected byte DVY44;
protected byte EATLIVU;
protected byte EDASP;
protected byte EDLINK;
protected short EDTYPE;
protected byte EDUCATION;
protected byte EDUCISGN_TNS;
protected byte EDUCLINKB1;
protected byte EDUCLINKB2;
protected byte EDUCLINKB3;
protected byte EDUCRECD_TNS;
protected byte EDUCRSGN_TNS;
protected byte EDUCSN;
protected byte EMPCHK;
protected byte EMPLOY;
protected byte EMPSTENDD;
protected byte EMPSTENDM;
protected short EMPSTENDY4;
protected byte ENDMNTH1;
protected byte ENDMNTH2;
protected byte ENDMNTH3;
protected byte ENDMNTH4;
protected byte ENDMNTH5;
protected byte ENGFORM;
protected byte ENGLANG;
protected byte ENGREAD;
protected byte ENGSPK;
protected byte ENGTEL;
protected byte ENGUK;
protected short EPROSH;
protected byte ETHN_DV;
protected byte EVRALC;
protected byte EXTNSA;
protected double EXTRATE;
protected byte EXTREST;
protected byte FAMILY;
protected byte FAMSUP;
protected byte FATHER;
protected byte FBENTYPE01;
protected byte FBENTYPE02;
protected byte FBENTYPE03;
protected byte FBENTYPE04;
protected byte FBENTYPE05;
protected byte FBENTYPE06;
protected byte FBENTYPE07;
protected byte FBENTYPE08;
protected byte FBENTYPE09;
protected byte FBENTYPE10;
protected byte FBENTYPE11;
protected byte FBENTYPE12;
protected byte FBENTYPE13;
protected byte FBENTYPE14;
protected byte FBENTYPE15;
protected byte FBENTYPE16;
protected byte FBENTYPE17;
protected byte FBENTYPE18;
protected byte FBENTYPE19;
protected byte FBENTYPE20;
protected byte FBENTYPE21;
protected byte FBENTYPE22;
protected byte FBENTYPE23;
protected byte FBENTYPE24;
protected byte FBENTYPE25;
protected byte FBENTYPE26;
protected byte FBENTYPE27;
protected byte FBENTYPE28;
protected byte FBENTYPE29;
protected byte FBENTYPE30;
protected byte FBENTYPE31;
protected byte FBENTYPE32;
protected byte FBENTYPE33;
protected byte FBENTYPE34;
protected byte FBENTYPE35;
protected byte FBENTYPE36;
protected byte FBENTYPE37;
protected byte FBENTYPE38;
protected byte FBENTYPE39;
protected byte FBENTYPE40;
protected byte FBENTYPE41;
protected byte FEMPLW;
protected byte FENOW;
protected double FIBENOTHR_DV;
protected double FIBENOTHR_IF;
protected byte FIBENOTHR_TC;
protected double FIMNGRS_IF;
protected byte FIMNGRS_TC;
protected double FIMNINVNET_DV;
protected double FIMNLABGRS_IF;
protected byte FIMNLABGRS_TC;
protected double FIMNLABNET_DV;
protected byte FIMNLABNET_TC;
protected double FIMNMISC_DV;
protected double FIMNNET_DV;
protected double FIMNPEN_DV;
protected double FIMNPRBEN_DV;
protected double FIMNSBEN_DV;
protected byte FINFUT;
protected byte FIVEALCDR;
protected byte FIVINTLANG;
protected byte FIVLOLW;
protected byte FIYRDB1;
protected byte FIYRDB2;
protected byte FIYRDB3;
protected byte FIYRDB4;
protected byte FIYRDB5;
protected byte FIYRDB6;
protected int FIYRDIA;
protected double FIYRINVINC_DV;
protected byte FIYRINVINC_IF;
protected byte FIYRINVINC_TC;
protected byte FJBMNGR;
protected byte FJBSEMP;
protected byte FJBSIZE;
protected byte FJBSTAT;
protected byte FLAGLINKB1;
protected byte FLAGLINKB2;
protected byte FLAGLINKB3;
protected int FNPID;
protected byte FNPNO;
protected int FNSPID;
protected byte FNSPNO;
protected byte FOPRLG;
protected byte FOPRLG0;
protected byte FOPRLG0NI;
protected byte FORMDIF;
protected byte FRDRG;
protected byte FT2ENDM1;
protected byte FT2ENDM2;
protected byte FT2ENDM3;
protected short FT2ENDY41;
protected short FT2ENDY42;
protected short FT2ENDY43;
protected byte FTEDANY;
protected byte FTEDEND1;
protected byte FTEDEND2;
protected byte FTEDEND3;
protected byte FTEDMOR1;
protected byte FTEDMOR2;
protected byte FTEDMOR3;
protected byte FTEDSTARTM1;
protected byte FTEDSTARTM2;
protected byte FTEDSTARTM3;
protected short FTEDSTARTY41;
protected short FTEDSTARTY42;
protected short FTEDSTARTY43;
protected byte FTENDM;
protected short FTENDY4;
protected byte FTQUALS;
protected byte FUKBORN;
protected short FYR2UK4;
protected int GRFPID;
protected byte GRFPNO;
protected int GRMPID;
protected byte GRMPNO;
protected byte GRPBFTS;
protected byte HASEMAIL;
protected byte HASEMAIL2;
protected byte HCOND1;
protected byte HCOND10;
protected byte HCOND11;
protected byte HCOND12;
protected byte HCOND13;
protected byte HCOND14;
protected byte HCOND15;
protected byte HCOND16;
protected byte HCOND17;
protected byte HCOND18;
protected byte HCOND2;
protected byte HCOND3;
protected byte HCOND4;
protected byte HCOND5;
protected byte HCOND6;
protected byte HCOND7;
protected byte HCOND8;
protected byte HCOND9;
protected byte HCOND96;
protected byte HCONDA01;
protected byte HCONDA02;
protected byte HCONDA03;
protected byte HCONDA04;
protected byte HCONDA05;
protected byte HCONDA06;
protected byte HCONDA07;
protected byte HCONDA08;
protected byte HCONDA09;
protected byte HCONDA10;
protected byte HCONDA11;
protected byte HCONDA12;
protected byte HCONDA13;
protected byte HCONDA14;
protected byte HCONDA15;
protected byte HCONDA16;
protected byte HCONDA17;
protected byte HCONDN1;
protected byte HCONDN10;
protected byte HCONDN11;
protected byte HCONDN12;
protected byte HCONDN13;
protected byte HCONDN14;
protected byte HCONDN15;
protected byte HCONDN16;
protected byte HCONDN17;
protected byte HCONDN18;
protected byte HCONDN2;
protected byte HCONDN3;
protected byte HCONDN4;
protected byte HCONDN5;
protected byte HCONDN6;
protected byte HCONDN7;
protected byte HCONDN8;
protected byte HCONDN9;
protected byte HCONDN96;
protected byte HCONDNO1;
protected byte HCONDNO2;
protected byte HCONDNO3;
protected byte HCONDNO4;
protected byte HCONDNO5;
protected byte HCONDNO6;
protected byte HCONDNO7;
protected byte HCONDNO8;
protected byte HCONDNO_CODE;
protected byte HCONDNS1;
protected byte HCONDNS2;
protected byte HCONDNS3;
protected byte HCONDNS4;
protected byte HCONDNS5;
protected byte HCONDNS6;
protected byte HCONDNS7;
protected byte HCONDNS8;
protected byte HCONDO_CODE;
protected byte HCONDS01;
protected byte HCONDS02;
protected byte HCONDS03;
protected byte HCONDS04;
protected byte HCONDS05;
protected byte HCONDS08;
protected byte HCONDS09;
protected byte HCONDS10;
protected byte HCONDS11;
protected byte HCONDS12;
protected byte HCONDS13;
protected byte HCONDS14;
protected byte HCONDS15;
protected byte HCONDS16;
protected byte HCONDS17;
protected byte HEALTH;
protected byte HEALTHSN;
protected byte HEDLIK;
protected byte HEDNT;
protected byte HEDNTO_CODE;
protected byte HGADOPTF;
protected byte HGADOPTM;
protected byte HGPART;
protected byte HHRESP_DV;
protected byte HHTYPE_DV;
protected byte HIGHEDUK;
protected byte HLTHISGN_TNS;
protected byte HLTHLINK;
protected byte HLTHLINKB1;
protected byte HLTHLINKB2;
protected byte HLTHLINKB3;
protected byte HLTHRECD_TNS;
protected byte HLTHRSGN_TNS;
protected byte HOSPC1;
protected byte HOSPC2;
protected byte HOSPC3;
protected byte HOSPC4;
protected byte HOSPC5;
protected byte HOSPC6;
protected byte HOSPC7;
protected byte HOSPC8;
protected short HOSPDC1;
protected short HOSPDC2;
protected short HOSPDC3;
protected byte HOSPDC4;
protected byte HOSPDC5;
protected byte HOSPDC6;
protected byte HOSPDC7;
protected byte HOSPDC8;
protected byte HOUSING;
protected short HOWLNG;
protected int HRPID;
protected byte HRPNO;
protected byte HUBOSS;
protected short HUBUYS;
protected byte HUCAR;
protected byte HUDIY;
protected short HUFRYS;
protected short HUIRON;
protected short HUMOPS;
protected byte HUPOTS;
protected short HUSITS;
protected byte IENDDATD;
protected byte IENDDATM;
protected byte IENDDATMM;
protected byte IENDDATSS;
protected short IENDDATY;
protected double IND5MUS_LW;
protected double IND5MUS_XW;
protected double INDBD91_LW;
protected double INDBDUB_LW;
protected byte INDEFLV;
protected double INDIN01_LW;
protected double INDIN91_LW;
protected double INDINUB_LW;
protected double INDINUB_XW;
protected double INDINUI_XW;
protected double INDINUS_LW;
protected byte INDMODE;
protected double INDNS91_LW;
protected double INDNSUB_LW;
protected double INDPXUB_LW;
protected double INDPXUB_XW;
protected double INDPXUI_XW;
protected double INDPXUS_LW;
protected double INDSCUB_LW;
protected double INDSCUB_XW;
protected double INDSCUI_XW;
protected double INDSCUS_LW;
protected byte INTDATD_DV;
protected byte INTDATM_DV;
protected short INTDATY_DV;
protected byte INTENDUKC;
protected byte INTSIGNHEALTH;
protected byte INVITRO1;
protected byte INVITRO2;
protected byte INVITRO3;
protected byte INVITRO4;
protected byte INVITRO5;
protected byte IOUTCOME;
protected boolean IPROXY;
protected byte ISCED11_DV;
protected byte ISTRTDATMM;
protected byte ISTRTDATSS;
protected short ISTRTDATY;
protected byte IVAFFCT11;
protected byte IVAFFCT12;
protected byte IVAFFCT13;
protected byte IVAFFCT14;
protected byte IVAFFCT15;
protected byte IVAFFCT17;
protected byte IVAFFCT21;
protected byte IVAFFCT22;
protected byte IVAFFCT23;
protected byte IVAFFCT27;
protected byte IVAFFCT30;
protected byte IVAFFCT97;
protected byte IVCOOP;
protected byte IVINFNCE;
protected byte IVLIBAL;
protected byte IVLIENG;
protected byte IVLITRANS;
protected byte IVLIWHO;
protected byte J1BOSS;
protected byte J1COJOB;
protected byte J1MNGR;
protected byte J1NONE;
protected byte J1NSSEC5_DV;
protected byte J1SEMP;
protected short J1SOC00_CC;
protected short J1SOC10_CC;
protected byte J1SOC90_CC;
protected byte J1UKJOB;
protected short J1UKSOC00_CC;
protected short J1UKSOC10_CC;
protected byte J1UKSOC90_CC;
protected byte J2NSSEC5_DV;
protected int J2PAY;
protected double J2PAYNET_DV;
protected short J2SOC00_CC;
protected short J2SOC10_CC;
protected short J2SOC90_CC;
protected byte JBATT1;
protected byte JBATT2;
protected byte JBATT3;
protected byte JBATT4;
protected byte JBATT5;
protected byte JBATT6;
protected byte JBATT7;
protected byte JBBGDATD;
protected byte JBBGDATM;
protected short JBBGDATY;
protected byte JBENDD;
protected byte JBENDM;
protected byte JBENDREAS;
protected short JBENDY4;
protected byte JBES2000;
protected byte JBFLEX1;
protected byte JBFLEX2;
protected byte JBFLEX3;
protected byte JBFLEX4;
protected byte JBFLEX5;
protected byte JBFLEX6;
protected byte JBFLEX7;
protected byte JBFLEX8;
protected byte JBFLEX96;
protected byte JBFXINF;
protected byte JBFXUSE1;
protected byte JBFXUSE2;
protected byte JBFXUSE3;
protected byte JBFXUSE4;
protected byte JBFXUSE5;
protected byte JBFXUSE6;
protected byte JBFXUSE7;
protected byte JBFXUSE8;
protected byte JBFXUSE96;
protected byte JBIINDB_DV;
protected byte JBLKCHA;
protected byte JBLKCHB;
protected byte JBLKCHC;
protected byte JBLKCHD;
protected byte JBLKCHE;
protected byte JBMNGRCHK;
protected byte JBNSSEC3_DV;
protected byte JBNSSEC5_DV;
protected short JBNSSEC_DV;
protected byte JBOFFY;
protected short JBONUS;
protected short JBPEN;
protected short JBPENM;
protected short JBPENY4;
protected byte JBPERFP;
protected short JBRGSC_DV;
protected short JBRISE;
protected byte JBSAMR;
protected byte JBSAT;
protected byte JBSEC;
protected byte JBSECTPUB;
protected short JBSEG_DV;
protected byte JBSEMPCHK;
protected byte JBSIC07CHK;
protected byte JBSIC07_CC;
protected byte JBSIZECHK;
protected byte JBSOC00CHK;
protected short JBSOC00_CC;
protected short JBSOC10_CC;
protected byte JBSOCGR_DV;
protected byte JBTERM1;
protected byte JBTERM2;
protected byte JBXPCHA;
protected byte JBXPCHB;
protected byte JBXPCHC;
protected byte JBXPCHD;
protected byte JBXPCHE;
protected short JLCBSOC00_CC;
protected short JLCBSOC10_CC;
protected byte JLCBSOC90_CC;
protected byte JLENDM;
protected byte JLES2000;
protected byte JLIINDB_DV;
protected byte JLNSSEC3_DV;
protected byte JLNSSEC5_DV;
protected short JLNSSEC_DV;
protected short JLRGSC_DV;
protected short JLSEG_DV;
protected byte JLSIC07_CC;
protected short JLSOC00_CC;
protected short JLSOC10_CC;
protected byte JOBHOURS1;
protected byte JOBHOURS2;
protected byte JOBHOURS3;
protected byte JOBHOURS4;
protected byte JOBHOURS5;
protected byte JOBHOURS6;
protected byte JOBHOURS7;
protected int JSOWNAMT;
protected byte JSOWNOTH;
protected byte JSOWNSUM;
protected short JSOWOTAM;
protected byte JSPART;
protected int JSPAYU;
protected byte JSPAYW;
protected byte JSPRLS;
protected byte JSPRNI;
protected byte JSPRTX;
protected byte JSPYNI;
protected byte JSPYTX;
protected byte JSTYPEB;
protected byte JSWORKAC;
protected byte JSWORKTRAV;
protected short JUBGN;
protected short JULK4X1;
protected short JULK4X2;
protected byte JULK4X3;
protected short JULK4X4;
protected short JULK4X5;
protected short JULK4X6;
protected byte JULK4X96;
protected byte JWBS1_DV;
protected byte JWBS2_DV;
protected byte KIDLANG;
protected byte LADOPT;
protected byte LATE;
protected byte LCHMOR;
protected byte LCHMORN;
protected byte LCHMULTI1;
protected byte LCHMULTI2;
protected byte LCHMULTI3;
protected byte LCHMULTI4;
protected byte LCHMULTI5;
protected byte LCMARM;
protected short LCMARY4;
protected byte LCMCBM;
protected short LCMCBY4;
protected byte LCMCOH;
protected byte LCMSPM;
protected short LCMSPY4;
protected byte LCOH;
protected byte LCOHNPI;
protected byte LIENG;
protected byte LIHOW;
protected byte LINGUA;
protected byte LITRANS;
protected byte LIVESP;
protected boolean LIVESP_DV;
protected byte LIVEWITH;
protected byte LIWHO;
protected byte LKMVCNTRY;
protected byte LLKNBRD;
protected byte LMAR1M;
protected short LMAR1Y;
protected byte LMCBM1;
protected byte LMCBM2;
protected byte LMCBM3;
protected byte LMCBM4;
protected byte LMCBM5;
protected short LMCBY41;
protected short LMCBY42;
protected short LMCBY43;
protected short LMCBY44;
protected short LMCBY45;
protected byte LMSPM1;
protected byte LMSPM2;
protected byte LMSPM3;
protected byte LMSPM4;
protected byte LMSPM5;
protected short LMSPY41;
protected short LMSPY42;
protected short LMSPY43;
protected short LMSPY44;
protected short LMSPY45;
protected byte LNADOPT;
protected byte LNCOH;
protected byte LNPRNT;
protected byte LOCSERAP;
protected byte LOCSERAS;
protected byte LOCSERB;
protected byte LOCSERC;
protected byte LOCSERD;
protected byte LOCSERE;
protected byte LPRNT;
protected byte LVAG14;
protected byte LVAG16;
protected byte LVHM;
protected byte LVSCHDO;
protected byte LWWRONG;
protected byte MABROAD;
protected short MABROADC1;
protected short MABROADC2;
protected short MABROADC3;
protected short MABROADC4;
protected short MABROADC5;
protected byte MACOB;
protected byte MACURR;
protected byte MAEDQF;
protected short MAJ1UKSOC00_CC;
protected short MAJ1UKSOC10_CC;
protected byte MAJ1UKSOC90_CC;
protected byte MAJCB;
protected short MAJLCBSOC00_CC;
protected short MAJLCBSOC10_CC;
protected byte MAJLCBSOC90_CC;
protected byte MAJU;
protected byte MAJUK;
protected byte MAJUKEVR;
protected byte MANSSEC5_DV;
protected byte MARSTAT;
protected short MASOC00_CC;
protected short MASOC10_CC;
protected byte MASOC90_CC;
protected byte MASTAT_DV;
protected byte MATLEAVE;
protected byte MATLV;
protected byte MATLVENDD;
protected byte MATLVENDM;
protected short MATLVENDY4;
protected byte MATLVSTD;
protected byte MATLVSTM;
protected short MATLVSTY4;
protected byte MAYRUK;
protected short MAYRUK1;
protected byte MEMPLOY;
protected byte MGMROB;
protected byte MGPROB;
protected byte MINDIRECT;
protected short MINDIRECTC1;
protected short MINDIRECTC2;
protected short MINDIRECTC3;
protected short MINDIRECTC4;
protected short MINDIRECTC5;
protected byte MINTENT;
protected byte MINTWHEN;
protected byte MLAGST;
protected byte MLAGSTU;
protected byte MLFUTR;
protected byte MLIVED;
protected short MLIVEDC1;
protected short MLIVEDC2;
protected short MLIVEDC3;
protected short MLIVEDC4;
protected short MLIVEDC5;
protected byte MLIVEDIST;
protected byte MLIVEDIST5;
protected byte MLIVEDISTF;
protected byte MLRNOT1;
protected byte MLRNOT10;
protected byte MLRNOT11;
protected byte MLRNOT12;
protected byte MLRNOT13;
protected byte MLRNOT2;
protected byte MLRNOT3;
protected byte MLRNOT4;
protected byte MLRNOT5;
protected byte MLRNOT6;
protected byte MLRNOT7;
protected byte MLRNOT8;
protected byte MLRNOT9;
protected byte MLRNOT97;
protected byte MLSTATCHK;
protected byte MLWKFPT;
protected byte MNABROAD;
protected byte MNLIVED;
protected byte MNMOVES;
protected byte MNOTHERC;
protected int MNPID;
protected byte MNPNO;
protected int MNSPID;
protected byte MNSPNO;
protected byte MOBCOMP;
protected byte MOBUSE;
protected byte MONTH;
protected byte MOVDIR;
protected byte MOVEOTH_CODE;
protected byte MOVY11;
protected byte MOVY12;
protected byte MOVY13;
protected byte MOVY14;
protected byte MOVY15;
protected byte MOVY16;
protected byte MPLIKE;
protected byte MPNO;
protected byte MPWEB;
protected byte MREASON1;
protected byte MREASON2;
protected byte MREASON3;
protected byte MREASON4;
protected byte MREASON5;
protected byte MREASON6;
protected byte MREASON7;
protected byte MREASON97;
protected byte MREASONO_CODE;
protected byte MRETURNED;
protected byte MSTATCH1;
protected byte MSTATCH2;
protected byte MSTATCH3;
protected byte MSTATCH4;
protected short MSTATSAM;
protected byte MSTATSAMN;
protected byte MVEVER;
protected byte MVMNTH;
protected short MVYR;
protected byte NADOPTCH;
protected byte NAIDXHH;
protected byte NATID1;
protected byte NATID2;
protected byte NATID3;
protected byte NATID4;
protected byte NATID5;
protected byte NATID6;
protected byte NATID97;
protected byte NBRCOH1;
protected byte NBRCOH2;
protected byte NBRCOH3;
protected byte NBRCOH4;
protected byte NBRCOHDK_DV;
protected byte NBRCOH_DV;
protected double NBRSNCI_DV;
protected byte NCH10;
protected byte NCH10TO15;
protected byte NCH14RESP;
protected byte NCH3RESP;
protected byte NCH415RESP;
protected byte NCH5RESP;
protected byte NCH5TO15;
protected byte NCH8RESP;
protected byte NCHILD;
protected short NCHILD_DV;
protected byte NCHRESP;
protected byte NCHUNDER16;
protected short NCIGS;
protected byte NCRR1;
protected byte NCRR11;
protected byte NCRR12;
protected byte NCRR13;
protected byte NCRR14;
protected byte NCRR15;
protected byte NCRR16;
protected byte NCRR3;
protected byte NCRR4;
protected byte NCRR5;
protected byte NCRR6;
protected byte NCRR8;
protected byte NCRR9;
protected byte NCRRM;
protected short NCRRY4;
protected byte NDEPCHL_DV;
protected short NETAG_1;
protected short NETAG_2;
protected short NETAG_3;
protected byte NETCHT;
protected byte NETDO10_1;
protected byte NETDO10_2;
protected byte NETDO10_3;
protected byte NETDO1_1;
protected byte NETDO1_2;
protected byte NETDO1_3;
protected byte NETDO2_1;
protected byte NETDO2_2;
protected byte NETDO2_3;
protected byte NETDO3_1;
protected byte NETDO3_2;
protected byte NETDO3_3;
protected byte NETDO4_1;
protected byte NETDO4_2;
protected byte NETDO4_3;
protected byte NETDO5_1;
protected byte NETDO5_2;
protected byte NETDO5_3;
protected byte NETDO6_1;
protected byte NETDO6_2;
protected byte NETDO6_3;
protected byte NETDO7_1;
protected byte NETDO7_2;
protected byte NETDO7_3;
protected byte NETDO8_1;
protected byte NETDO8_2;
protected byte NETDO8_3;
protected byte NETDO96_1;
protected byte NETDO96_2;
protected byte NETDO96_3;
protected byte NETDO97_1;
protected byte NETDO97_2;
protected byte NETDO97_3;
protected byte NETDO9_1;
protected byte NETDO9_2;
protected byte NETDO9_3;
protected byte NETETAT_1;
protected byte NETETAT_2;
protected byte NETETAT_3;
protected byte NETETBT_1;
protected byte NETETBT_2;
protected byte NETETBT_3;
protected byte NETETMT_1;
protected byte NETETMT_2;
protected byte NETETMT_3;
protected byte NETETT_1;
protected byte NETETT_2;
protected byte NETETT_3;
protected byte NETETWT_1;
protected byte NETETWT_2;
protected byte NETETWT_3;
protected byte NETET_1;
protected byte NETET_2;
protected byte NETET_3;
protected byte NETJB_1;
protected byte NETJB_2;
protected byte NETJB_3;
protected byte NETKN_1;
protected byte NETKN_2;
protected byte NETKN_3;
protected byte NETLV_1;
protected byte NETLV_2;
protected byte NETLV_3;
protected byte NETM2;
protected byte NETM2O_CODE;
protected byte NETMET_1;
protected byte NETMET_2;
protected byte NETMET_3;
protected short NETPH_1;
protected short NETPH_2;
protected short NETPH_3;
protected byte NETPUSE;
protected byte NETRL_1;
protected byte NETRL_2;
protected byte NETRL_3;
protected short NETSX_1;
protected short NETSX_2;
protected short NETSX_3;
protected byte NETTALK10_1;
protected byte NETTALK10_2;
protected byte NETTALK10_3;
protected byte NETTALK11_1;
protected byte NETTALK11_2;
protected byte NETTALK11_3;
protected byte NETTALK12_1;
protected byte NETTALK12_2;
protected byte NETTALK12_3;
protected byte NETTALK13_1;
protected byte NETTALK13_2;
protected byte NETTALK13_3;
protected byte NETTALK1_1;
protected byte NETTALK1_2;
protected byte NETTALK1_3;
protected byte NETTALK2_1;
protected byte NETTALK2_2;
protected byte NETTALK2_3;
protected byte NETTALK3_1;
protected byte NETTALK3_2;
protected byte NETTALK3_3;
protected byte NETTALK4_1;
protected byte NETTALK4_2;
protected byte NETTALK4_3;
protected byte NETTALK5_1;
protected byte NETTALK5_2;
protected byte NETTALK5_3;
protected byte NETTALK6_1;
protected byte NETTALK6_2;
protected byte NETTALK6_3;
protected byte NETTALK7_1;
protected byte NETTALK7_2;
protected byte NETTALK7_3;
protected byte NETTALK8_1;
protected byte NETTALK8_2;
protected byte NETTALK8_3;
protected byte NETTALK96_1;
protected byte NETTALK96_2;
protected byte NETTALK96_3;
protected byte NETTALK97_1;
protected byte NETTALK97_2;
protected byte NETTALK97_3;
protected byte NETTALK9_1;
protected byte NETTALK9_2;
protected byte NETTALK9_3;
protected byte NETUSE;
protected byte NETWEB_1;
protected byte NETWEB_2;
protected byte NETWEB_3;
protected short NETWR_1;
protected short NETWR_2;
protected short NETWR_3;
protected byte NEWSMAIN;
protected byte NEWSOURCE1;
protected byte NEWSOURCE10;
protected byte NEWSOURCE11;
protected byte NEWSOURCE12;
protected byte NEWSOURCE2;
protected byte NEWSOURCE3;
protected byte NEWSOURCE4;
protected byte NEWSOURCE5;
protected byte NEWSOURCE6;
protected byte NEWSOURCE7;
protected byte NEWSOURCE8;
protected byte NEWSOURCE9;
protected byte NEWSOURCE96;
protected byte NEXTELSE1;
protected byte NEXTELSE2;
protected byte NEXTELSE3;
protected byte NEXTELSE4;
protected byte NEXTELSE5;
protected byte NEXTELSE6;
protected byte NEXTELSE7;
protected byte NEXTJOB1;
protected byte NEXTJOB2;
protected byte NEXTJOB3;
protected byte NEXTJOB4;
protected byte NEXTJOB5;
protected byte NEXTJOB6;
protected byte NEXTJOB7;
protected byte NEXTSTAT1;
protected byte NEXTSTAT2;
protected byte NEXTSTAT3;
protected byte NEXTSTAT4;
protected byte NEXTSTAT5;
protected byte NEXTSTAT6;
protected byte NEXTSTAT7;
protected byte NFH01;
protected byte NFH02;
protected byte NFH03;
protected byte NFH04;
protected byte NFH05;
protected byte NFH06;
protected byte NFH07;
protected byte NFH08;
protected byte NFH09;
protected byte NFH10;
protected byte NFH11;
protected byte NFH12;
protected byte NFH13;
protected byte NFH14;
protected byte NFH15;
protected byte NFH16;
protected byte NFH18;
protected byte NFH19;
protected byte NFH20;
protected byte NFH21;
protected byte NFH22;
protected byte NFH23;
protected byte NFH24;
protected byte NFH25;
protected byte NFH26;
protected byte NFH27;
protected byte NFH28;
protected byte NFH29;
protected byte NFH30;
protected byte NFH31;
protected byte NFH32;
protected byte NFH33;
protected byte NFH34;
protected byte NFH35;
protected byte NFH36;
protected byte NFH37;
protected byte NFH38;
protected byte NFH39;
protected byte NFH40;
protected byte NFH41;
protected byte NGRP_DV;
protected byte NHIQUAL_DV;
protected byte NIACT;
protected byte NICLBNS1;
protected byte NICLBNS2;
protected byte NICLBNS3;
protected byte NICLBNS4;
protected byte NIREL;
protected byte NISERPS;
protected byte NMAR;
protected byte NMPSP_DV;
protected byte NNATCH;
protected byte NNEWBORN;
protected byte NNMPSP_DV;
protected byte NNSIB_DV;
protected byte NNSSIB_DV;
protected byte NOTEMPCHK;
protected byte NPENSIONER_DV;
protected byte NPNS_DV;
protected byte NPN_DV;
protected byte NQFHIGH_DV;
protected byte NUNMPSP_DV;
protected byte NXTENDREAS;
protected byte NXTJBENDD;
protected byte NXTJBENDM;
protected short NXTJBENDY4;
protected byte NXTJBES;
protected byte NXTJBHRS;
protected byte NXTST;
protected byte NXTSTELSE;
protected byte NXTSTENDD;
protected byte NXTSTENDM;
protected short NXTSTENDY4;
protected byte OPRLG;
protected byte OPRLG0;
protected byte OPRLG0NI;
protected byte OPRLG1;
protected byte OPSERV1;
protected byte OPSERV10;
protected byte OPSERV2;
protected byte OPSERV3;
protected byte OPSERV4;
protected byte OPSERV5;
protected byte OPSERV6;
protected byte OPSERV7;
protected byte OPSERV8;
protected byte OPSERV9;
protected byte ORG;
protected byte ORGA1;
protected byte ORGA10;
protected byte ORGA11;
protected byte ORGA12;
protected byte ORGA13;
protected byte ORGA14;
protected byte ORGA15;
protected byte ORGA16;
protected byte ORGA2;
protected byte ORGA3;
protected byte ORGA4;
protected byte ORGA5;
protected byte ORGA6;
protected byte ORGA7;
protected byte ORGA8;
protected byte ORGA9;
protected byte ORGA96;
protected byte ORGAT1;
protected byte ORGAT10;
protected byte ORGAT11;
protected byte ORGAT12;
protected byte ORGAT13;
protected byte ORGAT14;
protected byte ORGAT15;
protected byte ORGAT16;
protected byte ORGAT2;
protected byte ORGAT3;
protected byte ORGAT4;
protected byte ORGAT5;
protected byte ORGAT6;
protected byte ORGAT7;
protected byte ORGAT8;
protected byte ORGAT9;
protected byte ORGAT96;
protected byte ORGM1;
protected byte ORGM10;
protected byte ORGM11;
protected byte ORGM12;
protected byte ORGM13;
protected byte ORGM14;
protected byte ORGM15;
protected byte ORGM16;
protected byte ORGM2;
protected byte ORGM3;
protected byte ORGM4;
protected byte ORGM5;
protected byte ORGM6;
protected byte ORGM7;
protected byte ORGM8;
protected byte ORGM9;
protected byte ORGM96;
protected byte ORGMT1;
protected byte ORGMT10;
protected byte ORGMT11;
protected byte ORGMT12;
protected byte ORGMT13;
protected byte ORGMT14;
protected byte ORGMT15;
protected byte ORGMT16;
protected byte ORGMT2;
protected byte ORGMT3;
protected byte ORGMT4;
protected byte ORGMT5;
protected byte ORGMT6;
protected byte ORGMT7;
protected byte ORGMT8;
protected byte ORGMT9;
protected byte ORGMT96;
protected byte ORIGADD;
protected byte OTHBEN1;
protected byte OTHBEN2;
protected byte OTHBEN3;
protected byte OTHBEN4;
protected byte OTHBEN5;
protected byte OTHBEN6;
protected byte OTHBEN7;
protected byte OTHBEN8;
protected byte OTHBEN9;
protected byte OTHBEN96;
protected byte OTHBEN97;
protected byte OTHCONT;
protected byte OVTNSA;
protected byte OVTPAY;
protected double OVTRATE;
protected byte OVTREST;
protected byte PACOB;
protected byte PACURR;
protected byte PAEDQF;
protected short PAJ1UKSOC00_CC;
protected short PAJ1UKSOC10_CC;
protected byte PAJ1UKSOC90_CC;
protected byte PAJCB;
protected short PAJLCBSOC00_CC;
protected short PAJLCBSOC10_CC;
protected byte PAJLCBSOC90_CC;
protected byte PAJU;
protected byte PAJUK;
protected byte PAJUKEVR;
protected byte PANSSEC5_DV;
protected short PAPERM2;
protected short PASOC00_CC;
protected short PASOC10_CC;
protected byte PASOC90_CC;
protected byte PAYGWC;
protected double PAYG_DV;
protected byte PAYNWC;
protected byte PAYRUK;
protected short PAYRUK1;
protected byte PAYTYP;
protected byte PAYUWC;
protected double PAYU_DV;
protected short PBIRTHY;
protected byte PBNFT1;
protected byte PBNFT10;
protected byte PBNFT11;
protected byte PBNFT12;
protected byte PBNFT13;
protected byte PBNFT2;
protected byte PBNFT3;
protected byte PBNFT4;
protected byte PBNFT5;
protected byte PBNFT6;
protected byte PBNFT7;
protected byte PBNFT8;
protected byte PBNFT9;
protected byte PBNFT96;
protected byte PDVAGE;
protected byte PENMCN;
protected byte PENMEX;
protected double PENMPY;
protected byte PENMTP;
protected byte PENSIONER_DV;
protected byte PENSPB;
protected byte PERBFTS;
protected byte PERPOLINF;
protected byte PGMROB;
protected byte PGPROB;
protected int PID;
protected byte PJBPTFT;
protected byte PJSPTFT;
protected byte PLIENG;
protected byte PLITRANS;
protected short PLNOWM;
protected short PLNOWY4;
protected int PN1PID;
protected byte PN1PNO;
protected byte PN1SEX;
protected int PN2PID;
protected byte PN2PNO;
protected byte PN2SEX;
protected byte PNCARS;
protected int PNS1PID;
protected byte PNS1PNO;
protected byte PNS1SEX;
protected int PNS2PID;
protected byte PNS2PNO;
protected byte PNS2SEX;
protected byte POLCOST;
protected byte POLEFF1;
protected byte POLEFF2;
protected byte POLEFF3;
protected byte POLEFF4;
protected byte PPEN;
protected byte PPENT;
protected int PPID;
protected byte PPPEX;
protected byte PPPEXM;
protected int PPRAM;
protected byte PPRAMPC;
protected byte PPREG;
protected byte PPSEX;
protected short PPYRS;
protected byte PREARN;
protected byte PREARNA;
protected byte PREARNW;
protected byte PREASON;
protected byte PREG;
protected byte PREGEND1;
protected byte PREGEND2;
protected byte PREGEND3;
protected byte PREGEND4;
protected byte PREGEND5;
protected byte PREGFERT1;
protected byte PREGFERT2;
protected byte PREGFERT3;
protected byte PREGFERT4;
protected byte PREGFERT5;
protected byte PREGM1;
protected byte PREGM2;
protected byte PREGM3;
protected byte PREGM4;
protected byte PREGM5;
protected byte PREGOUT1;
protected byte PREGOUT2;
protected byte PREGOUT3;
protected byte PREGOUT4;
protected byte PREGOUT5;
protected byte PREGSMK11;
protected byte PREGSMK12;
protected byte PREGSMK13;
protected byte PREGSMK14;
protected byte PREGSMK15;
protected byte PREGSMK21;
protected byte PREGSMK22;
protected byte PREGSMK23;
protected byte PREGSMK24;
protected byte PREGSMK25;
protected byte PREGSMK31;
protected byte PREGSMK32;
protected byte PREGSMK33;
protected byte PREGSMK34;
protected byte PREGSMK35;
protected byte PREGSMOKE1;
protected byte PREGSMOKE2;
protected byte PREGSMOKE3;
protected byte PREGSMOKE4;
protected byte PREGSMOKE5;
protected short PREGY41;
protected short PREGY42;
protected short PREGY43;
protected short PREGY44;
protected byte PREGY45;
protected byte PREL;
protected byte PRFITB;
protected byte PRFITBA;
protected byte PRFITBW;
protected byte PS1;
protected byte PS10;
protected byte PS11;
protected byte PS12;
protected byte PS13;
protected byte PS14;
protected byte PS15;
protected byte PS16;
protected byte PS17;
protected byte PS18;
protected byte PS19;
protected byte PS2;
protected byte PS20;
protected byte PS21;
protected byte PS22;
protected byte PS23;
protected byte PS24;
protected byte PS25;
protected byte PS26;
protected byte PS27;
protected byte PS28;
protected byte PS29;
protected byte PS3;
protected byte PS30;
protected byte PS31;
protected byte PS32;
protected byte PS4;
protected byte PS5;
protected byte PS6;
protected byte PS7;
protected byte PS8;
protected byte PS9;
protected byte PSDQA_DV;
protected byte PSDQB_DV;
protected byte PSDQC_DV;
protected byte PSNUMCH;
protected int PSU;
protected byte PVTPAY;
protected byte QFCTRY;
protected byte QFHIGH;
protected boolean QFHIGHFL_DV;
protected byte QFHIGHOTH;
protected byte QFHIGH_DV;
protected byte QFVOC1;
protected byte QFVOC10;
protected byte QFVOC11;
protected byte QFVOC12;
protected byte QFVOC13;
protected byte QFVOC14;
protected byte QFVOC15;
protected byte QFVOC2;
protected byte QFVOC3;
protected byte QFVOC4;
protected byte QFVOC5;
protected byte QFVOC6;
protected byte QFVOC7;
protected byte QFVOC8;
protected byte QFVOC9;
protected byte QFVOC96;
protected byte QFVOCNONUK;
protected byte QFVOCUK;
protected byte QUALNEW1;
protected byte QUALNEW10;
protected byte QUALNEW11;
protected byte QUALNEW13;
protected byte QUALNEW15;
protected byte QUALNEW16;
protected byte QUALNEW17;
protected byte QUALNEW18;
protected byte QUALNEW19;
protected byte QUALNEW2;
protected byte QUALNEW20;
protected byte QUALNEW21;
protected byte QUALNEW22;
protected byte QUALNEW23;
protected byte QUALNEW24;
protected byte QUALNEW25;
protected byte QUALNEW26;
protected byte QUALNEW27;
protected byte QUALNEW28;
protected byte QUALNEW29;
protected byte QUALNEW3;
protected byte QUALNEW30;
protected byte QUALNEW31;
protected byte QUALNEW4;
protected byte QUALNEW5;
protected byte QUALNEW6;
protected byte QUALNEW7;
protected byte QUALNEW8;
protected byte QUALNEW9;
protected byte QUALOC;
protected byte QUARTER;
protected byte RACEL;
protected byte RACELAT;
protected byte RACELBT;
protected byte RACELMT;
protected byte RACELOT_CODE;
protected short RACELO_CODE;
protected byte RACELT;
protected byte RACELWT;
protected byte RACEL_DV;
protected byte READDIF;
protected byte REASEND1;
protected byte REASEND2;
protected byte REASEND3;
protected byte REASEND4;
protected byte REASEND5;
protected byte REASEND6;
protected byte REASEND7;
protected byte RELUP;
protected byte REMAIL_CODE;
protected boolean RESPF16;
protected boolean RESPF16_DV;
protected boolean RESPM16;
protected boolean RESPM16_DV;
protected byte RETAMT;
protected byte RETCHK;
protected byte RETSUF;
protected byte RHLAND_CODE;
protected byte RPHMOB_CODE;
protected byte RPHWRK_CODE;
protected byte RTCON1;
protected byte RTCON2;
protected byte RTCON3;
protected byte RTCON4;
protected byte RTEXPJB;
protected byte RTFND1;
protected byte RTFND10;
protected byte RTFND2;
protected byte RTFND3;
protected byte RTFND4;
protected byte RTFND5;
protected byte RTFND6;
protected byte RTFND7;
protected byte RTFND8;
protected byte RTFND9;
protected byte RTFND96;
protected byte RTPRO1;
protected byte RTPRO2;
protected byte RTPRO3;
protected byte RTPRO4;
protected byte RTPRO5;
protected byte RTPRO6;
protected byte S2CTCONS;
protected byte S2CTREL;
protected byte SAMEJOB;
protected short SAMPST;
protected byte SATTRANSY1;
protected byte SATTRANSY10;
protected byte SATTRANSY2;
protected byte SATTRANSY3;
protected byte SATTRANSY4;
protected byte SATTRANSY5;
protected byte SATTRANSY6;
protected byte SATTRANSY7;
protected byte SATTRANSY8;
protected byte SATTRANSY9;
protected byte SATTRANSY97;
protected short SAVE;
protected int SAVED;
protected byte SAVLT;
protected byte SAVREG;
protected byte SCAC;
protected byte SCFLAG_DV;
protected byte SCHLLOC;
protected byte SCHLLOCENG;
protected byte SCHOK;
protected byte SCHOOLCNTRY1;
protected byte SCHOOLCNTRY2;
protected byte SCHOOLCNTRY3;
protected byte SCHOOLCNTRY4;
protected byte SCHOOLCNTRY5;
protected byte SCLFSAT1;
protected byte SCLFSAT2;
protected byte SCLFSAT7;
protected byte SCLFSATO;
protected byte SCOPNGBHA;
protected byte SCOPNGBHB;
protected byte SCOPNGBHC;
protected byte SCOPNGBHD;
protected byte SCOPNGBHE;
protected byte SCOPNGBHF;
protected byte SCOPNGBHG;
protected byte SCOPNGBHH;
protected byte SCOTVOT1;
protected byte SCOTVOT2;
protected byte SCOTVOT3;
protected byte SCOTVOT4;
protected byte SCRF1;
protected byte SCRF2;
protected byte SCRF3;
protected byte SCRF4;
protected byte SCRF5;
protected byte SCRF6;
protected byte SCRF97;
protected byte SCRX_CODE;
protected byte SCSF1;
protected byte SCSF2A;
protected byte SCSF2B;
protected byte SCSF3A;
protected byte SCSF3B;
protected byte SCSF4A;
protected byte SCSF4B;
protected byte SCSF5;
protected byte SCSF6A;
protected byte SCSF6B;
protected byte SCSF6C;
protected byte SCSF7;
protected byte SCUN1;
protected byte SCUN2;
protected byte SCUN3;
protected byte SCUN97;
protected byte SCUX_CODE;
protected double SEEARNGRS_DV;
protected byte SEEARNGRS_IF;
protected double SEEARNNET_DV;
protected byte SERVACC;
protected byte SERVACCY1;
protected byte SERVACCY10;
protected byte SERVACCY11;
protected byte SERVACCY12;
protected byte SERVACCY13;
protected byte SERVACCY14;
protected byte SERVACCY15;
protected byte SERVACCY2;
protected byte SERVACCY3;
protected byte SERVACCY4;
protected byte SERVACCY5;
protected byte SERVACCY6;
protected byte SERVACCY7;
protected byte SERVACCY8;
protected byte SERVACCY9;
protected byte SERVACCY97;
protected byte SERVUSE1;
protected byte SERVUSE10;
protected byte SERVUSE2;
protected byte SERVUSE3;
protected byte SERVUSE4;
protected byte SERVUSE5;
protected byte SERVUSE6;
protected byte SERVUSE7;
protected byte SERVUSE8;
protected byte SERVUSE9;
protected byte SERVUSE96;
protected byte SEX_DV;
protected byte SF1;
protected double SF12MCS_DV;
protected double SF12PCS_DV;
protected byte SIMAGE;
protected byte SIMAREA;
protected byte SIMEDUC;
protected byte SIMFAM;
protected byte SIMINC;
protected byte SIMJOB;
protected byte SIMRACE;
protected boolean SINGLE_DV;
protected byte SMARTMOB;
protected byte SMKMNTH11;
protected byte SMKMNTH12;
protected byte SMKMNTH13;
protected byte SMKMNTH14;
protected byte SMKMNTH15;
protected byte SMKMNTH21;
protected byte SMKMNTH22;
protected byte SMKMNTH23;
protected byte SMKMNTH24;
protected byte SMKMNTH25;
protected byte SMKMNTH31;
protected byte SMKMNTH32;
protected byte SMKMNTH33;
protected byte SMKMNTH34;
protected byte SMKMNTH35;
protected short SMOKER;
protected byte SOCCONT;
protected byte SOCWEB;
protected byte SPKDIF;
protected byte SPPEN;
protected int SPPID;
protected byte SPPNO;
protected byte SRVYNOT1;
protected byte SRVYNOT10;
protected byte SRVYNOT2;
protected byte SRVYNOT3;
protected byte SRVYNOT4;
protected byte SRVYNOT5;
protected byte SRVYNOT6;
protected byte SRVYNOT7;
protected byte SRVYNOT8;
protected byte SRVYNOT9;
protected byte STATCM1;
protected byte STATCM2;
protected byte STATCM3;
protected byte STATCM4;
protected short STATCY41;
protected short STATCY42;
protected short STATCY43;
protected short STATCY44;
protected byte STATENDD1;
protected byte STATENDD2;
protected byte STATENDD3;
protected byte STATENDD4;
protected byte STATENDD5;
protected byte STATENDD6;
protected byte STATENDD7;
protected byte STATENDM1;
protected byte STATENDM2;
protected byte STATENDM3;
protected byte STATENDM4;
protected byte STATENDM5;
protected byte STATENDM6;
protected byte STATENDM7;
protected short STATENDY41;
protected short STATENDY42;
protected short STATENDY43;
protected short STATENDY44;
protected short STATENDY45;
protected short STATENDY46;
protected short STATENDY47;
protected byte STENDREAS;
protected short STRATA;
protected byte SUSP;
protected byte TELDIF;
protected byte TRAINANY;
protected short TRAINDAYS1;
protected short TRAINDAYS2;
protected short TRAINDAYS3;
protected byte TRAINEND1;
protected byte TRAINEND2;
protected byte TRAINEND3;
protected byte TRAINHRS1;
protected byte TRAINHRS2;
protected byte TRAINHRS3;
protected byte TRAINN;
protected byte TRAINPURP11;
protected byte TRAINPURP12;
protected byte TRAINPURP13;
protected byte TRAINPURP21;
protected byte TRAINPURP22;
protected byte TRAINPURP23;
protected byte TRAINPURP31;
protected byte TRAINPURP32;
protected byte TRAINPURP33;
protected byte TRAINPURP41;
protected byte TRAINPURP42;
protected byte TRAINPURP43;
protected byte TRAINPURP51;
protected byte TRAINPURP52;
protected byte TRAINPURP53;
protected byte TRAINPURP61;
protected byte TRAINPURP62;
protected byte TRAINPURP63;
protected byte TRAINPURP71;
protected byte TRAINPURP72;
protected byte TRAINPURP73;
protected byte TRAINQUAL1;
protected byte TRAINQUAL2;
protected byte TRAINQUAL3;
protected byte TRBIKEFQ;
protected byte TRBUSFQ;
protected byte TRCARFQ;
protected byte TRQUAL1;
protected byte TRQUAL10;
protected byte TRQUAL11;
protected byte TRQUAL13;
protected byte TRQUAL15;
protected byte TRQUAL16;
protected byte TRQUAL17;
protected byte TRQUAL18;
protected byte TRQUAL19;
protected byte TRQUAL2;
protected byte TRQUAL20;
protected byte TRQUAL21;
protected byte TRQUAL22;
protected byte TRQUAL23;
protected byte TRQUAL24;
protected byte TRQUAL25;
protected byte TRQUAL26;
protected byte TRQUAL27;
protected byte TRQUAL28;
protected byte TRQUAL29;
protected byte TRQUAL3;
protected byte TRQUAL30;
protected byte TRQUAL31;
protected byte TRQUAL4;
protected byte TRQUAL5;
protected byte TRQUAL6;
protected byte TRQUAL7;
protected byte TRQUAL8;
protected byte TRQUAL9;
protected byte TRTRNFQ;
protected byte TRWHO1;
protected byte TRWHO2;
protected byte TRWHO3;
protected short TUIN1;
protected short TUJBPL;
protected double TVHOURS;
protected byte TVM2;
protected byte TWKCAR;
protected byte TWKDIFF1;
protected byte TWKDIFF2;
protected byte TWKDIFF3;
protected byte TWKDIFF4;
protected byte TWKDIFF5;
protected byte TWKDIFF6;
protected byte TWKDIFF7;
protected byte TWKDIFF8;
protected byte TWKDIFF97;
protected byte TWKDIFFM;
protected byte UKBORN;
protected byte UNDQUS;
protected byte UPSET;
protected byte URBAN_DV;
protected byte USUALLANG;
protected byte VISFRNDS;
protected byte VISFRNDSY1;
protected byte VISFRNDSY10;
protected byte VISFRNDSY11;
protected byte VISFRNDSY12;
protected byte VISFRNDSY13;
protected byte VISFRNDSY14;
protected byte VISFRNDSY2;
protected byte VISFRNDSY3;
protected byte VISFRNDSY4;
protected byte VISFRNDSY5;
protected byte VISFRNDSY6;
protected byte VISFRNDSY7;
protected byte VISFRNDSY8;
protected byte VISFRNDSY9;
protected byte VISFRNDSY97;
protected byte VOLFREQ;
protected short VOLHRS;
protected byte VOLUN;
protected short VOTE1;
protected short VOTE2;
protected short VOTE3;
protected short VOTE4;
protected short VOTE5;
protected short VOTE6;
protected byte VOTEINTENT;
protected byte VOTENORM;
protected byte WHORUAGE;
protected byte WHORUEDU;
protected byte WHORUFAM;
protected byte WHORUPOL;
protected byte WHORUPRO;
protected byte WHORURAC;
protected byte WHORUSEX;
protected byte WKAUT1;
protected byte WKAUT2;
protected byte WKAUT3;
protected byte WKAUT4;
protected byte WKAUT5;
protected byte WKENDS;
protected byte WKPLSAM;
protected short WKTIME;
protected short WORKDIS;
protected byte WORKTRAV;
protected byte XPMOVE;
protected byte XPMVCNTRY;
protected byte XPMVMNTH;
protected byte XPMVWHN;
protected byte XPMVWHR;
protected short XPMVYR;
protected byte XTRA5MINOSM_DV;
protected byte XTRA5MIN_DV;
protected byte YAFUTA;
protected byte YAFUTB;
protected byte YAJBSRV1;
protected byte YAJBSRV2;
protected byte YAJBSRV3;
protected byte YAJBSRV4;
protected byte YAJBSRV5;
protected byte YAJBSRV7;
protected byte YAJBSRV8;
protected byte YAJBSRV96;
protected byte YANSSEC5_DV;
protected short YASOC00_CC;
protected short YASOC10_CC;
protected byte YASOC90_CC;
protected byte YNLP14;
protected byte YNOTBIKE1;
protected byte YNOTBIKE2;
protected byte YNOTBIKE3;
protected byte YNOTBIKE96;
protected byte YPAMAR;
protected byte YPAPAR;
protected byte YPESTA;
protected byte YPESTB;
protected byte YPESTC;
protected byte YPESTE;
protected byte YPESTF;
protected byte YPESTI;
protected byte YPESTJ;
protected byte YPESTK;
protected final void initADCTS(String s) {
if (!s.trim().isEmpty()) {
ADCTS = Byte.parseByte(s);
} else {
ADCTS = Byte.MIN_VALUE;
}
}

protected final void initAEDROF1(String s) {
if (!s.trim().isEmpty()) {
AEDROF1 = Byte.parseByte(s);
} else {
AEDROF1 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF2(String s) {
if (!s.trim().isEmpty()) {
AEDROF2 = Byte.parseByte(s);
} else {
AEDROF2 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF3(String s) {
if (!s.trim().isEmpty()) {
AEDROF3 = Byte.parseByte(s);
} else {
AEDROF3 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF4(String s) {
if (!s.trim().isEmpty()) {
AEDROF4 = Byte.parseByte(s);
} else {
AEDROF4 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF5(String s) {
if (!s.trim().isEmpty()) {
AEDROF5 = Byte.parseByte(s);
} else {
AEDROF5 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA1(String s) {
if (!s.trim().isEmpty()) {
AEPUDA1 = Double.parseDouble(s);
} else {
AEPUDA1 = Double.NaN;
}
}

protected final void initAEPUDA2(String s) {
if (!s.trim().isEmpty()) {
AEPUDA2 = Byte.parseByte(s);
} else {
AEPUDA2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA3(String s) {
if (!s.trim().isEmpty()) {
AEPUDA3 = Byte.parseByte(s);
} else {
AEPUDA3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA4(String s) {
if (!s.trim().isEmpty()) {
AEPUDA4 = Byte.parseByte(s);
} else {
AEPUDA4 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA5(String s) {
if (!s.trim().isEmpty()) {
AEPUDA5 = Byte.parseByte(s);
} else {
AEPUDA5 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK1(String s) {
if (!s.trim().isEmpty()) {
AEPUWK1 = Byte.parseByte(s);
} else {
AEPUWK1 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK2(String s) {
if (!s.trim().isEmpty()) {
AEPUWK2 = Byte.parseByte(s);
} else {
AEPUWK2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK3(String s) {
if (!s.trim().isEmpty()) {
AEPUWK3 = Byte.parseByte(s);
} else {
AEPUWK3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK4(String s) {
if (!s.trim().isEmpty()) {
AEPUWK4 = Byte.parseByte(s);
} else {
AEPUWK4 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK5(String s) {
if (!s.trim().isEmpty()) {
AEPUWK5 = Byte.parseByte(s);
} else {
AEPUWK5 = Byte.MIN_VALUE;
}
}

protected final void initAGE2UKC(String s) {
if (!s.trim().isEmpty()) {
AGE2UKC = Byte.parseByte(s);
} else {
AGE2UKC = Byte.MIN_VALUE;
}
}

protected final void initAGEGR10_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR10_DV = Byte.parseByte(s);
} else {
AGEGR10_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR13_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR13_DV = Byte.parseByte(s);
} else {
AGEGR13_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR5_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR5_DV = Byte.parseByte(s);
} else {
AGEGR5_DV = Byte.MIN_VALUE;
}
}

protected final void initAGELH(String s) {
if (!s.trim().isEmpty()) {
AGELH = Byte.parseByte(s);
} else {
AGELH = Byte.MIN_VALUE;
}
}

protected final void initAGERET(String s) {
if (!s.trim().isEmpty()) {
AGERET = Byte.parseByte(s);
} else {
AGERET = Byte.MIN_VALUE;
}
}

protected final void initAGE_DV(String s) {
if (!s.trim().isEmpty()) {
AGE_DV = Short.parseShort(s);
} else {
AGE_DV = Short.MIN_VALUE;
}
}

protected final void initAHVWELL(String s) {
if (!s.trim().isEmpty()) {
AHVWELL = Byte.parseByte(s);
} else {
AHVWELL = Byte.MIN_VALUE;
}
}

protected final void initAIDEFT(String s) {
if (!s.trim().isEmpty()) {
AIDEFT = Byte.parseByte(s);
} else {
AIDEFT = Byte.MIN_VALUE;
}
}

protected final void initAIDHU1(String s) {
if (!s.trim().isEmpty()) {
AIDHU1 = Short.parseShort(s);
} else {
AIDHU1 = Short.MIN_VALUE;
}
}

protected final void initAIDHU2(String s) {
if (!s.trim().isEmpty()) {
AIDHU2 = Short.parseShort(s);
} else {
AIDHU2 = Short.MIN_VALUE;
}
}

protected final void initAIDHUA1(String s) {
if (!s.trim().isEmpty()) {
AIDHUA1 = Byte.parseByte(s);
} else {
AIDHUA1 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA10(String s) {
if (!s.trim().isEmpty()) {
AIDHUA10 = Byte.parseByte(s);
} else {
AIDHUA10 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA11(String s) {
if (!s.trim().isEmpty()) {
AIDHUA11 = Byte.parseByte(s);
} else {
AIDHUA11 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA12(String s) {
if (!s.trim().isEmpty()) {
AIDHUA12 = Byte.parseByte(s);
} else {
AIDHUA12 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA13(String s) {
if (!s.trim().isEmpty()) {
AIDHUA13 = Byte.parseByte(s);
} else {
AIDHUA13 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA14(String s) {
if (!s.trim().isEmpty()) {
AIDHUA14 = Byte.parseByte(s);
} else {
AIDHUA14 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA15(String s) {
if (!s.trim().isEmpty()) {
AIDHUA15 = Byte.parseByte(s);
} else {
AIDHUA15 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA16(String s) {
if (!s.trim().isEmpty()) {
AIDHUA16 = Byte.parseByte(s);
} else {
AIDHUA16 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA2(String s) {
if (!s.trim().isEmpty()) {
AIDHUA2 = Byte.parseByte(s);
} else {
AIDHUA2 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA3(String s) {
if (!s.trim().isEmpty()) {
AIDHUA3 = Byte.parseByte(s);
} else {
AIDHUA3 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA4(String s) {
if (!s.trim().isEmpty()) {
AIDHUA4 = Byte.parseByte(s);
} else {
AIDHUA4 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA5(String s) {
if (!s.trim().isEmpty()) {
AIDHUA5 = Byte.parseByte(s);
} else {
AIDHUA5 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA6(String s) {
if (!s.trim().isEmpty()) {
AIDHUA6 = Byte.parseByte(s);
} else {
AIDHUA6 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA7(String s) {
if (!s.trim().isEmpty()) {
AIDHUA7 = Byte.parseByte(s);
} else {
AIDHUA7 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA8(String s) {
if (!s.trim().isEmpty()) {
AIDHUA8 = Byte.parseByte(s);
} else {
AIDHUA8 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA9(String s) {
if (!s.trim().isEmpty()) {
AIDHUA9 = Byte.parseByte(s);
} else {
AIDHUA9 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG1(String s) {
if (!s.trim().isEmpty()) {
ALLLANG1 = Byte.parseByte(s);
} else {
ALLLANG1 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG10(String s) {
if (!s.trim().isEmpty()) {
ALLLANG10 = Byte.parseByte(s);
} else {
ALLLANG10 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG11(String s) {
if (!s.trim().isEmpty()) {
ALLLANG11 = Byte.parseByte(s);
} else {
ALLLANG11 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG12(String s) {
if (!s.trim().isEmpty()) {
ALLLANG12 = Byte.parseByte(s);
} else {
ALLLANG12 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG13(String s) {
if (!s.trim().isEmpty()) {
ALLLANG13 = Byte.parseByte(s);
} else {
ALLLANG13 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG14(String s) {
if (!s.trim().isEmpty()) {
ALLLANG14 = Byte.parseByte(s);
} else {
ALLLANG14 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG15(String s) {
if (!s.trim().isEmpty()) {
ALLLANG15 = Byte.parseByte(s);
} else {
ALLLANG15 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG16(String s) {
if (!s.trim().isEmpty()) {
ALLLANG16 = Byte.parseByte(s);
} else {
ALLLANG16 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG17(String s) {
if (!s.trim().isEmpty()) {
ALLLANG17 = Byte.parseByte(s);
} else {
ALLLANG17 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG18(String s) {
if (!s.trim().isEmpty()) {
ALLLANG18 = Byte.parseByte(s);
} else {
ALLLANG18 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG19(String s) {
if (!s.trim().isEmpty()) {
ALLLANG19 = Byte.parseByte(s);
} else {
ALLLANG19 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG2(String s) {
if (!s.trim().isEmpty()) {
ALLLANG2 = Byte.parseByte(s);
} else {
ALLLANG2 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG20(String s) {
if (!s.trim().isEmpty()) {
ALLLANG20 = Byte.parseByte(s);
} else {
ALLLANG20 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG3(String s) {
if (!s.trim().isEmpty()) {
ALLLANG3 = Byte.parseByte(s);
} else {
ALLLANG3 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG4(String s) {
if (!s.trim().isEmpty()) {
ALLLANG4 = Byte.parseByte(s);
} else {
ALLLANG4 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG5(String s) {
if (!s.trim().isEmpty()) {
ALLLANG5 = Byte.parseByte(s);
} else {
ALLLANG5 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG6(String s) {
if (!s.trim().isEmpty()) {
ALLLANG6 = Byte.parseByte(s);
} else {
ALLLANG6 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG7(String s) {
if (!s.trim().isEmpty()) {
ALLLANG7 = Byte.parseByte(s);
} else {
ALLLANG7 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG8(String s) {
if (!s.trim().isEmpty()) {
ALLLANG8 = Byte.parseByte(s);
} else {
ALLLANG8 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG9(String s) {
if (!s.trim().isEmpty()) {
ALLLANG9 = Byte.parseByte(s);
} else {
ALLLANG9 = Byte.MIN_VALUE;
}
}

protected final void initALLLANG97(String s) {
if (!s.trim().isEmpty()) {
ALLLANG97 = Byte.parseByte(s);
} else {
ALLLANG97 = Byte.MIN_VALUE;
}
}

protected final void initAREA(String s) {
if (!s.trim().isEmpty()) {
AREA = Byte.parseByte(s);
} else {
AREA = Byte.MIN_VALUE;
}
}

protected final void initBASNSA(String s) {
if (!s.trim().isEmpty()) {
BASNSA = Double.parseDouble(s);
} else {
BASNSA = Double.NaN;
}
}

protected final void initBASRATE(String s) {
if (!s.trim().isEmpty()) {
BASRATE = Double.parseDouble(s);
} else {
BASRATE = Double.NaN;
}
}

protected final void initBASREST(String s) {
if (!s.trim().isEmpty()) {
BASREST = Byte.parseByte(s);
} else {
BASREST = Byte.MIN_VALUE;
}
}

protected final void initBENBASE1(String s) {
if (!s.trim().isEmpty()) {
BENBASE1 = Byte.parseByte(s);
} else {
BENBASE1 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE2(String s) {
if (!s.trim().isEmpty()) {
BENBASE2 = Byte.parseByte(s);
} else {
BENBASE2 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE3(String s) {
if (!s.trim().isEmpty()) {
BENBASE3 = Byte.parseByte(s);
} else {
BENBASE3 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE4(String s) {
if (!s.trim().isEmpty()) {
BENBASE4 = Byte.parseByte(s);
} else {
BENBASE4 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE96(String s) {
if (!s.trim().isEmpty()) {
BENBASE96 = Byte.parseByte(s);
} else {
BENBASE96 = Byte.MIN_VALUE;
}
}

protected final void initBENCTC(String s) {
if (!s.trim().isEmpty()) {
BENCTC = Byte.parseByte(s);
} else {
BENCTC = Byte.MIN_VALUE;
}
}

protected final void initBENDIS1(String s) {
if (!s.trim().isEmpty()) {
BENDIS1 = Byte.parseByte(s);
} else {
BENDIS1 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS10(String s) {
if (!s.trim().isEmpty()) {
BENDIS10 = Byte.parseByte(s);
} else {
BENDIS10 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS12(String s) {
if (!s.trim().isEmpty()) {
BENDIS12 = Byte.parseByte(s);
} else {
BENDIS12 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS2(String s) {
if (!s.trim().isEmpty()) {
BENDIS2 = Byte.parseByte(s);
} else {
BENDIS2 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS3(String s) {
if (!s.trim().isEmpty()) {
BENDIS3 = Byte.parseByte(s);
} else {
BENDIS3 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS4(String s) {
if (!s.trim().isEmpty()) {
BENDIS4 = Byte.parseByte(s);
} else {
BENDIS4 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS5(String s) {
if (!s.trim().isEmpty()) {
BENDIS5 = Byte.parseByte(s);
} else {
BENDIS5 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS7(String s) {
if (!s.trim().isEmpty()) {
BENDIS7 = Byte.parseByte(s);
} else {
BENDIS7 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS8(String s) {
if (!s.trim().isEmpty()) {
BENDIS8 = Byte.parseByte(s);
} else {
BENDIS8 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS96(String s) {
if (!s.trim().isEmpty()) {
BENDIS96 = Byte.parseByte(s);
} else {
BENDIS96 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS97(String s) {
if (!s.trim().isEmpty()) {
BENDIS97 = Byte.parseByte(s);
} else {
BENDIS97 = Byte.MIN_VALUE;
}
}

protected final void initBENESA(String s) {
if (!s.trim().isEmpty()) {
BENESA = Byte.parseByte(s);
} else {
BENESA = Byte.MIN_VALUE;
}
}

protected final void initBENPEN1(String s) {
if (!s.trim().isEmpty()) {
BENPEN1 = Byte.parseByte(s);
} else {
BENPEN1 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN2(String s) {
if (!s.trim().isEmpty()) {
BENPEN2 = Byte.parseByte(s);
} else {
BENPEN2 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN3(String s) {
if (!s.trim().isEmpty()) {
BENPEN3 = Byte.parseByte(s);
} else {
BENPEN3 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN4(String s) {
if (!s.trim().isEmpty()) {
BENPEN4 = Byte.parseByte(s);
} else {
BENPEN4 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN5(String s) {
if (!s.trim().isEmpty()) {
BENPEN5 = Byte.parseByte(s);
} else {
BENPEN5 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN6(String s) {
if (!s.trim().isEmpty()) {
BENPEN6 = Byte.parseByte(s);
} else {
BENPEN6 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN7(String s) {
if (!s.trim().isEmpty()) {
BENPEN7 = Byte.parseByte(s);
} else {
BENPEN7 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN8(String s) {
if (!s.trim().isEmpty()) {
BENPEN8 = Byte.parseByte(s);
} else {
BENPEN8 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN96(String s) {
if (!s.trim().isEmpty()) {
BENPEN96 = Byte.parseByte(s);
} else {
BENPEN96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA2(String s) {
if (!s.trim().isEmpty()) {
BENSTA2 = Byte.parseByte(s);
} else {
BENSTA2 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA3(String s) {
if (!s.trim().isEmpty()) {
BENSTA3 = Byte.parseByte(s);
} else {
BENSTA3 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA4(String s) {
if (!s.trim().isEmpty()) {
BENSTA4 = Byte.parseByte(s);
} else {
BENSTA4 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA5(String s) {
if (!s.trim().isEmpty()) {
BENSTA5 = Byte.parseByte(s);
} else {
BENSTA5 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA6(String s) {
if (!s.trim().isEmpty()) {
BENSTA6 = Byte.parseByte(s);
} else {
BENSTA6 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA7(String s) {
if (!s.trim().isEmpty()) {
BENSTA7 = Byte.parseByte(s);
} else {
BENSTA7 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA96(String s) {
if (!s.trim().isEmpty()) {
BENSTA96 = Byte.parseByte(s);
} else {
BENSTA96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA97(String s) {
if (!s.trim().isEmpty()) {
BENSTA97 = Byte.parseByte(s);
} else {
BENSTA97 = Byte.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBRITID(String s) {
if (!s.trim().isEmpty()) {
BRITID = Byte.parseByte(s);
} else {
BRITID = Byte.MIN_VALUE;
}
}

protected final void initBUNO_DV(String s) {
if (!s.trim().isEmpty()) {
BUNO_DV = Byte.parseByte(s);
} else {
BUNO_DV = Byte.MIN_VALUE;
}
}

protected final void initCARBUY1(String s) {
if (!s.trim().isEmpty()) {
CARBUY1 = Byte.parseByte(s);
} else {
CARBUY1 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY10(String s) {
if (!s.trim().isEmpty()) {
CARBUY10 = Byte.parseByte(s);
} else {
CARBUY10 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY11(String s) {
if (!s.trim().isEmpty()) {
CARBUY11 = Byte.parseByte(s);
} else {
CARBUY11 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY12(String s) {
if (!s.trim().isEmpty()) {
CARBUY12 = Byte.parseByte(s);
} else {
CARBUY12 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY2(String s) {
if (!s.trim().isEmpty()) {
CARBUY2 = Byte.parseByte(s);
} else {
CARBUY2 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY3(String s) {
if (!s.trim().isEmpty()) {
CARBUY3 = Byte.parseByte(s);
} else {
CARBUY3 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY4(String s) {
if (!s.trim().isEmpty()) {
CARBUY4 = Byte.parseByte(s);
} else {
CARBUY4 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY5(String s) {
if (!s.trim().isEmpty()) {
CARBUY5 = Byte.parseByte(s);
} else {
CARBUY5 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY6(String s) {
if (!s.trim().isEmpty()) {
CARBUY6 = Byte.parseByte(s);
} else {
CARBUY6 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY7(String s) {
if (!s.trim().isEmpty()) {
CARBUY7 = Byte.parseByte(s);
} else {
CARBUY7 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY8(String s) {
if (!s.trim().isEmpty()) {
CARBUY8 = Byte.parseByte(s);
} else {
CARBUY8 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY9(String s) {
if (!s.trim().isEmpty()) {
CARBUY9 = Byte.parseByte(s);
} else {
CARBUY9 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY97(String s) {
if (!s.trim().isEmpty()) {
CARBUY97 = Byte.parseByte(s);
} else {
CARBUY97 = Byte.MIN_VALUE;
}
}

protected final void initCARSRV1(String s) {
if (!s.trim().isEmpty()) {
CARSRV1 = Byte.parseByte(s);
} else {
CARSRV1 = Byte.MIN_VALUE;
}
}

protected final void initCARSRV2(String s) {
if (!s.trim().isEmpty()) {
CARSRV2 = Byte.parseByte(s);
} else {
CARSRV2 = Byte.MIN_VALUE;
}
}

protected final void initCARSRV3(String s) {
if (!s.trim().isEmpty()) {
CARSRV3 = Byte.parseByte(s);
} else {
CARSRV3 = Byte.MIN_VALUE;
}
}

protected final void initCASIINTNO(String s) {
if (!s.trim().isEmpty()) {
CASIINTNO = Integer.parseInt(s);
} else {
CASIINTNO = Integer.MIN_VALUE;
}
}

protected final void initCCARE(String s) {
if (!s.trim().isEmpty()) {
CCARE = Byte.parseByte(s);
} else {
CCARE = Byte.MIN_VALUE;
}
}

protected final void initCCWORK(String s) {
if (!s.trim().isEmpty()) {
CCWORK = Byte.parseByte(s);
} else {
CCWORK = Byte.MIN_VALUE;
}
}

protected final void initCH1BY4(String s) {
if (!s.trim().isEmpty()) {
CH1BY4 = Short.parseShort(s);
} else {
CH1BY4 = Short.MIN_VALUE;
}
}

protected final void initCHARAM(String s) {
if (!s.trim().isEmpty()) {
CHARAM = Short.parseShort(s);
} else {
CHARAM = Short.MIN_VALUE;
}
}

protected final void initCHARFREQ(String s) {
if (!s.trim().isEmpty()) {
CHARFREQ = Byte.parseByte(s);
} else {
CHARFREQ = Byte.MIN_VALUE;
}
}

protected final void initCHARGV(String s) {
if (!s.trim().isEmpty()) {
CHARGV = Byte.parseByte(s);
} else {
CHARGV = Byte.MIN_VALUE;
}
}

protected final void initCHILDPNO(String s) {
if (!s.trim().isEmpty()) {
CHILDPNO = Byte.parseByte(s);
} else {
CHILDPNO = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP1(String s) {
if (!s.trim().isEmpty()) {
CHKRESP1 = Byte.parseByte(s);
} else {
CHKRESP1 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP2(String s) {
if (!s.trim().isEmpty()) {
CHKRESP2 = Byte.parseByte(s);
} else {
CHKRESP2 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP3(String s) {
if (!s.trim().isEmpty()) {
CHKRESP3 = Byte.parseByte(s);
} else {
CHKRESP3 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP4(String s) {
if (!s.trim().isEmpty()) {
CHKRESP4 = Byte.parseByte(s);
} else {
CHKRESP4 = Byte.MIN_VALUE;
}
}

protected final void initCITZN1(String s) {
if (!s.trim().isEmpty()) {
CITZN1 = Byte.parseByte(s);
} else {
CITZN1 = Byte.MIN_VALUE;
}
}

protected final void initCITZN2(String s) {
if (!s.trim().isEmpty()) {
CITZN2 = Byte.parseByte(s);
} else {
CITZN2 = Byte.MIN_VALUE;
}
}

protected final void initCITZN3(String s) {
if (!s.trim().isEmpty()) {
CITZN3 = Byte.parseByte(s);
} else {
CITZN3 = Byte.MIN_VALUE;
}
}

protected final void initCITZNWHEN(String s) {
if (!s.trim().isEmpty()) {
CITZNWHEN = Byte.parseByte(s);
} else {
CITZNWHEN = Byte.MIN_VALUE;
}
}

protected final void initCITZNYEAR(String s) {
if (!s.trim().isEmpty()) {
CITZNYEAR = Short.parseShort(s);
} else {
CITZNYEAR = Short.MIN_VALUE;
}
}

protected final void initCIVICDUTY(String s) {
if (!s.trim().isEmpty()) {
CIVICDUTY = Byte.parseByte(s);
} else {
CIVICDUTY = Byte.MIN_VALUE;
}
}

protected final void initCJBATT(String s) {
if (!s.trim().isEmpty()) {
CJBATT = Byte.parseByte(s);
} else {
CJBATT = Byte.MIN_VALUE;
}
}

protected final void initCJOB(String s) {
if (!s.trim().isEmpty()) {
CJOB = Byte.parseByte(s);
} else {
CJOB = Byte.MIN_VALUE;
}
}

protected final void initCLOSENUM(String s) {
if (!s.trim().isEmpty()) {
CLOSENUM = Short.parseShort(s);
} else {
CLOSENUM = Short.MIN_VALUE;
}
}

protected final void initCMLSTAT1(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT1 = Byte.parseByte(s);
} else {
CMLSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT2(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT2 = Byte.parseByte(s);
} else {
CMLSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT3(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT3 = Byte.parseByte(s);
} else {
CMLSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT4(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT4 = Byte.parseByte(s);
} else {
CMLSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initCNTRYQUAL(String s) {
if (!s.trim().isEmpty()) {
CNTRYQUAL = Byte.parseByte(s);
} else {
CNTRYQUAL = Byte.MIN_VALUE;
}
}

protected final void initCOH1BM(String s) {
if (!s.trim().isEmpty()) {
COH1BM = Byte.parseByte(s);
} else {
COH1BM = Byte.MIN_VALUE;
}
}

protected final void initCOH1BY(String s) {
if (!s.trim().isEmpty()) {
COH1BY = Short.parseShort(s);
} else {
COH1BY = Short.MIN_VALUE;
}
}

protected final void initCOH1EM(String s) {
if (!s.trim().isEmpty()) {
COH1EM = Byte.parseByte(s);
} else {
COH1EM = Byte.MIN_VALUE;
}
}

protected final void initCOH1EY(String s) {
if (!s.trim().isEmpty()) {
COH1EY = Short.parseShort(s);
} else {
COH1EY = Short.MIN_VALUE;
}
}

protected final void initCOH1MR(String s) {
if (!s.trim().isEmpty()) {
COH1MR = Byte.parseByte(s);
} else {
COH1MR = Byte.MIN_VALUE;
}
}

protected final void initCOHAB(String s) {
if (!s.trim().isEmpty()) {
COHAB = Byte.parseByte(s);
} else {
COHAB = Byte.MIN_VALUE;
}
}

protected final void initCOHABN(String s) {
if (!s.trim().isEmpty()) {
COHABN = Byte.parseByte(s);
} else {
COHABN = Byte.MIN_VALUE;
}
}

protected final void initCOHAB_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
COHAB_DV = false;
} else {
COHAB_DV = true;
}
}
}

protected final void initCOLBENS1(String s) {
if (!s.trim().isEmpty()) {
COLBENS1 = Byte.parseByte(s);
} else {
COLBENS1 = Byte.MIN_VALUE;
}
}

protected final void initCOLBENS2(String s) {
if (!s.trim().isEmpty()) {
COLBENS2 = Byte.parseByte(s);
} else {
COLBENS2 = Byte.MIN_VALUE;
}
}

protected final void initCOLBENS3(String s) {
if (!s.trim().isEmpty()) {
COLBENS3 = Byte.parseByte(s);
} else {
COLBENS3 = Byte.MIN_VALUE;
}
}

protected final void initCOLBENS4(String s) {
if (!s.trim().isEmpty()) {
COLBENS4 = Byte.parseByte(s);
} else {
COLBENS4 = Byte.MIN_VALUE;
}
}

protected final void initCONTFT(String s) {
if (!s.trim().isEmpty()) {
CONTFT = Byte.parseByte(s);
} else {
CONTFT = Byte.MIN_VALUE;
}
}

protected final void initCOUNTRY(String s) {
if (!s.trim().isEmpty()) {
COUNTRY = Byte.parseByte(s);
} else {
COUNTRY = Byte.MIN_VALUE;
}
}

protected final void initCRDARK(String s) {
if (!s.trim().isEmpty()) {
CRDARK = Byte.parseByte(s);
} else {
CRDARK = Byte.MIN_VALUE;
}
}

protected final void initCRWORA(String s) {
if (!s.trim().isEmpty()) {
CRWORA = Byte.parseByte(s);
} else {
CRWORA = Byte.MIN_VALUE;
}
}

protected final void initCRWORB(String s) {
if (!s.trim().isEmpty()) {
CRWORB = Byte.parseByte(s);
} else {
CRWORB = Byte.MIN_VALUE;
}
}

protected final void initCSTAT(String s) {
if (!s.trim().isEmpty()) {
CSTAT = Byte.parseByte(s);
} else {
CSTAT = Byte.MIN_VALUE;
}
}

protected final void initCTADD1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD1_CODE = Byte.parseByte(s);
} else {
CTADD1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTADD2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD2_CODE = Byte.parseByte(s);
} else {
CTADD2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCNTY_CODE(String s) {
if (!s.trim().isEmpty()) {
CTCNTY_CODE = Byte.parseByte(s);
} else {
CTCNTY_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCONS(String s) {
if (!s.trim().isEmpty()) {
CTCONS = Byte.parseByte(s);
} else {
CTCONS = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF1(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF1 = Byte.parseByte(s);
} else {
CTCONSCONF1 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF2(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF2 = Byte.parseByte(s);
} else {
CTCONSCONF2 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF3(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF3 = Byte.parseByte(s);
} else {
CTCONSCONF3 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF4(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF4 = Byte.parseByte(s);
} else {
CTCONSCONF4 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF5(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF5 = Byte.parseByte(s);
} else {
CTCONSCONF5 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF6(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF6 = Byte.parseByte(s);
} else {
CTCONSCONF6 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF7(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF7 = Byte.parseByte(s);
} else {
CTCONSCONF7 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF8(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF8 = Byte.parseByte(s);
} else {
CTCONSCONF8 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF94(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF94 = Byte.parseByte(s);
} else {
CTCONSCONF94 = Byte.MIN_VALUE;
}
}

protected final void initCTEMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
CTEMAIL_CODE = Byte.parseByte(s);
} else {
CTEMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTPCODE_CODE(String s) {
if (!s.trim().isEmpty()) {
CTPCODE_CODE = Byte.parseByte(s);
} else {
CTPCODE_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTREL(String s) {
if (!s.trim().isEmpty()) {
CTREL = Byte.parseByte(s);
} else {
CTREL = Byte.MIN_VALUE;
}
}

protected final void initCTTEL1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL1_CODE = Byte.parseByte(s);
} else {
CTTEL1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTEL2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL2_CODE = Byte.parseByte(s);
} else {
CTTEL2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTOWN_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTOWN_CODE = Byte.parseByte(s);
} else {
CTTOWN_CODE = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB1(String s) {
if (!s.trim().isEmpty()) {
CURRJOB1 = Byte.parseByte(s);
} else {
CURRJOB1 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB2(String s) {
if (!s.trim().isEmpty()) {
CURRJOB2 = Byte.parseByte(s);
} else {
CURRJOB2 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB3(String s) {
if (!s.trim().isEmpty()) {
CURRJOB3 = Byte.parseByte(s);
} else {
CURRJOB3 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB4(String s) {
if (!s.trim().isEmpty()) {
CURRJOB4 = Byte.parseByte(s);
} else {
CURRJOB4 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB5(String s) {
if (!s.trim().isEmpty()) {
CURRJOB5 = Byte.parseByte(s);
} else {
CURRJOB5 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB6(String s) {
if (!s.trim().isEmpty()) {
CURRJOB6 = Byte.parseByte(s);
} else {
CURRJOB6 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB7(String s) {
if (!s.trim().isEmpty()) {
CURRJOB7 = Byte.parseByte(s);
} else {
CURRJOB7 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART1(String s) {
if (!s.trim().isEmpty()) {
CURRPART1 = Byte.parseByte(s);
} else {
CURRPART1 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART2(String s) {
if (!s.trim().isEmpty()) {
CURRPART2 = Byte.parseByte(s);
} else {
CURRPART2 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART3(String s) {
if (!s.trim().isEmpty()) {
CURRPART3 = Byte.parseByte(s);
} else {
CURRPART3 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART4(String s) {
if (!s.trim().isEmpty()) {
CURRPART4 = Byte.parseByte(s);
} else {
CURRPART4 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART5(String s) {
if (!s.trim().isEmpty()) {
CURRPART5 = Byte.parseByte(s);
} else {
CURRPART5 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT1(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT1 = Byte.parseByte(s);
} else {
CURRSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT2(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT2 = Byte.parseByte(s);
} else {
CURRSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT3(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT3 = Byte.parseByte(s);
} else {
CURRSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT4(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT4 = Byte.parseByte(s);
} else {
CURRSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT5(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT5 = Byte.parseByte(s);
} else {
CURRSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT6(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT6 = Byte.parseByte(s);
} else {
CURRSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT7(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT7 = Byte.parseByte(s);
} else {
CURRSTAT7 = Byte.MIN_VALUE;
}
}

protected final void initDCDOBY(String s) {
if (!s.trim().isEmpty()) {
DCDOBY = Short.parseShort(s);
} else {
DCDOBY = Short.MIN_VALUE;
}
}

protected final void initDCSEX(String s) {
if (!s.trim().isEmpty()) {
DCSEX = Byte.parseByte(s);
} else {
DCSEX = Byte.MIN_VALUE;
}
}

protected final void initDEMORIENT(String s) {
if (!s.trim().isEmpty()) {
DEMORIENT = Byte.parseByte(s);
} else {
DEMORIENT = Byte.MIN_VALUE;
}
}

protected final void initDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DEPCHL_DV = false;
} else {
DEPCHL_DV = true;
}
}
}

protected final void initDEPENTH1(String s) {
if (!s.trim().isEmpty()) {
DEPENTH1 = Byte.parseByte(s);
} else {
DEPENTH1 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH2(String s) {
if (!s.trim().isEmpty()) {
DEPENTH2 = Byte.parseByte(s);
} else {
DEPENTH2 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH3(String s) {
if (!s.trim().isEmpty()) {
DEPENTH3 = Byte.parseByte(s);
} else {
DEPENTH3 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH4(String s) {
if (!s.trim().isEmpty()) {
DEPENTH4 = Byte.parseByte(s);
} else {
DEPENTH4 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH5(String s) {
if (!s.trim().isEmpty()) {
DEPENTH5 = Byte.parseByte(s);
} else {
DEPENTH5 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH6(String s) {
if (!s.trim().isEmpty()) {
DEPENTH6 = Byte.parseByte(s);
} else {
DEPENTH6 = Byte.MIN_VALUE;
}
}

protected final void initDETINC1(String s) {
if (!s.trim().isEmpty()) {
DETINC1 = Byte.parseByte(s);
} else {
DETINC1 = Byte.MIN_VALUE;
}
}

protected final void initDETINC2(String s) {
if (!s.trim().isEmpty()) {
DETINC2 = Byte.parseByte(s);
} else {
DETINC2 = Byte.MIN_VALUE;
}
}

protected final void initDETINC3(String s) {
if (!s.trim().isEmpty()) {
DETINC3 = Byte.parseByte(s);
} else {
DETINC3 = Byte.MIN_VALUE;
}
}

protected final void initDETINC4(String s) {
if (!s.trim().isEmpty()) {
DETINC4 = Byte.parseByte(s);
} else {
DETINC4 = Byte.MIN_VALUE;
}
}

protected final void initDETINC5(String s) {
if (!s.trim().isEmpty()) {
DETINC5 = Byte.parseByte(s);
} else {
DETINC5 = Byte.MIN_VALUE;
}
}

protected final void initDETINC6(String s) {
if (!s.trim().isEmpty()) {
DETINC6 = Byte.parseByte(s);
} else {
DETINC6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF1(String s) {
if (!s.trim().isEmpty()) {
DISDIF1 = Byte.parseByte(s);
} else {
DISDIF1 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF10(String s) {
if (!s.trim().isEmpty()) {
DISDIF10 = Byte.parseByte(s);
} else {
DISDIF10 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF11(String s) {
if (!s.trim().isEmpty()) {
DISDIF11 = Byte.parseByte(s);
} else {
DISDIF11 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF12(String s) {
if (!s.trim().isEmpty()) {
DISDIF12 = Byte.parseByte(s);
} else {
DISDIF12 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF2(String s) {
if (!s.trim().isEmpty()) {
DISDIF2 = Byte.parseByte(s);
} else {
DISDIF2 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF3(String s) {
if (!s.trim().isEmpty()) {
DISDIF3 = Byte.parseByte(s);
} else {
DISDIF3 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF4(String s) {
if (!s.trim().isEmpty()) {
DISDIF4 = Byte.parseByte(s);
} else {
DISDIF4 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF5(String s) {
if (!s.trim().isEmpty()) {
DISDIF5 = Byte.parseByte(s);
} else {
DISDIF5 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF6(String s) {
if (!s.trim().isEmpty()) {
DISDIF6 = Byte.parseByte(s);
} else {
DISDIF6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF7(String s) {
if (!s.trim().isEmpty()) {
DISDIF7 = Byte.parseByte(s);
} else {
DISDIF7 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF8(String s) {
if (!s.trim().isEmpty()) {
DISDIF8 = Byte.parseByte(s);
} else {
DISDIF8 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF9(String s) {
if (!s.trim().isEmpty()) {
DISDIF9 = Byte.parseByte(s);
} else {
DISDIF9 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF96(String s) {
if (!s.trim().isEmpty()) {
DISDIF96 = Byte.parseByte(s);
} else {
DISDIF96 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK1(String s) {
if (!s.trim().isEmpty()) {
DIVCHK1 = Byte.parseByte(s);
} else {
DIVCHK1 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK2(String s) {
if (!s.trim().isEmpty()) {
DIVCHK2 = Byte.parseByte(s);
} else {
DIVCHK2 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK3(String s) {
if (!s.trim().isEmpty()) {
DIVCHK3 = Byte.parseByte(s);
} else {
DIVCHK3 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK4(String s) {
if (!s.trim().isEmpty()) {
DIVCHK4 = Byte.parseByte(s);
} else {
DIVCHK4 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN1(String s) {
if (!s.trim().isEmpty()) {
DIVFIN1 = Byte.parseByte(s);
} else {
DIVFIN1 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN2(String s) {
if (!s.trim().isEmpty()) {
DIVFIN2 = Byte.parseByte(s);
} else {
DIVFIN2 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN3(String s) {
if (!s.trim().isEmpty()) {
DIVFIN3 = Byte.parseByte(s);
} else {
DIVFIN3 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN4(String s) {
if (!s.trim().isEmpty()) {
DIVFIN4 = Byte.parseByte(s);
} else {
DIVFIN4 = Byte.MIN_VALUE;
}
}

protected final void initDKLM(String s) {
if (!s.trim().isEmpty()) {
DKLM = Byte.parseByte(s);
} else {
DKLM = Byte.MIN_VALUE;
}
}

protected final void initDOBY_DV(String s) {
if (!s.trim().isEmpty()) {
DOBY_DV = Short.parseShort(s);
} else {
DOBY_DV = Short.MIN_VALUE;
}
}

protected final void initDONEPROXY(String s) {
if (!s.trim().isEmpty()) {
DONEPROXY = Byte.parseByte(s);
} else {
DONEPROXY = Byte.MIN_VALUE;
}
}

protected final void initDRGMJ(String s) {
if (!s.trim().isEmpty()) {
DRGMJ = Byte.parseByte(s);
} else {
DRGMJ = Byte.MIN_VALUE;
}
}

protected final void initDRGOTH(String s) {
if (!s.trim().isEmpty()) {
DRGOTH = Byte.parseByte(s);
} else {
DRGOTH = Byte.MIN_VALUE;
}
}

protected final void initDRGSOL(String s) {
if (!s.trim().isEmpty()) {
DRGSOL = Byte.parseByte(s);
} else {
DRGSOL = Byte.MIN_VALUE;
}
}

protected final void initDRIVE(String s) {
if (!s.trim().isEmpty()) {
DRIVE = Byte.parseByte(s);
} else {
DRIVE = Byte.MIN_VALUE;
}
}

protected final void initDRNK4W(String s) {
if (!s.trim().isEmpty()) {
DRNK4W = Byte.parseByte(s);
} else {
DRNK4W = Byte.MIN_VALUE;
}
}

protected final void initDV2UK16(String s) {
if (!s.trim().isEmpty()) {
DV2UK16 = Byte.parseByte(s);
} else {
DV2UK16 = Byte.MIN_VALUE;
}
}

protected final void initDVAGE(String s) {
if (!s.trim().isEmpty()) {
DVAGE = Byte.parseByte(s);
} else {
DVAGE = Byte.MIN_VALUE;
}
}

protected final void initDVAGE2UK(String s) {
if (!s.trim().isEmpty()) {
DVAGE2UK = Byte.parseByte(s);
} else {
DVAGE2UK = Byte.MIN_VALUE;
}
}

protected final void initDVM1(String s) {
if (!s.trim().isEmpty()) {
DVM1 = Byte.parseByte(s);
} else {
DVM1 = Byte.MIN_VALUE;
}
}

protected final void initDVM2(String s) {
if (!s.trim().isEmpty()) {
DVM2 = Byte.parseByte(s);
} else {
DVM2 = Byte.MIN_VALUE;
}
}

protected final void initDVM3(String s) {
if (!s.trim().isEmpty()) {
DVM3 = Byte.parseByte(s);
} else {
DVM3 = Byte.MIN_VALUE;
}
}

protected final void initDVM4(String s) {
if (!s.trim().isEmpty()) {
DVM4 = Byte.parseByte(s);
} else {
DVM4 = Byte.MIN_VALUE;
}
}

protected final void initDVY41(String s) {
if (!s.trim().isEmpty()) {
DVY41 = Short.parseShort(s);
} else {
DVY41 = Short.MIN_VALUE;
}
}

protected final void initDVY42(String s) {
if (!s.trim().isEmpty()) {
DVY42 = Short.parseShort(s);
} else {
DVY42 = Short.MIN_VALUE;
}
}

protected final void initDVY43(String s) {
if (!s.trim().isEmpty()) {
DVY43 = Byte.parseByte(s);
} else {
DVY43 = Byte.MIN_VALUE;
}
}

protected final void initDVY44(String s) {
if (!s.trim().isEmpty()) {
DVY44 = Byte.parseByte(s);
} else {
DVY44 = Byte.MIN_VALUE;
}
}

protected final void initEATLIVU(String s) {
if (!s.trim().isEmpty()) {
EATLIVU = Byte.parseByte(s);
} else {
EATLIVU = Byte.MIN_VALUE;
}
}

protected final void initEDASP(String s) {
if (!s.trim().isEmpty()) {
EDASP = Byte.parseByte(s);
} else {
EDASP = Byte.MIN_VALUE;
}
}

protected final void initEDLINK(String s) {
if (!s.trim().isEmpty()) {
EDLINK = Byte.parseByte(s);
} else {
EDLINK = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE(String s) {
if (!s.trim().isEmpty()) {
EDTYPE = Short.parseShort(s);
} else {
EDTYPE = Short.MIN_VALUE;
}
}

protected final void initEDUCATION(String s) {
if (!s.trim().isEmpty()) {
EDUCATION = Byte.parseByte(s);
} else {
EDUCATION = Byte.MIN_VALUE;
}
}

protected final void initEDUCISGN_TNS(String s) {
if (!s.trim().isEmpty()) {
EDUCISGN_TNS = Byte.parseByte(s);
} else {
EDUCISGN_TNS = Byte.MIN_VALUE;
}
}

protected final void initEDUCLINKB1(String s) {
if (!s.trim().isEmpty()) {
EDUCLINKB1 = Byte.parseByte(s);
} else {
EDUCLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initEDUCLINKB2(String s) {
if (!s.trim().isEmpty()) {
EDUCLINKB2 = Byte.parseByte(s);
} else {
EDUCLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initEDUCLINKB3(String s) {
if (!s.trim().isEmpty()) {
EDUCLINKB3 = Byte.parseByte(s);
} else {
EDUCLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initEDUCRECD_TNS(String s) {
if (!s.trim().isEmpty()) {
EDUCRECD_TNS = Byte.parseByte(s);
} else {
EDUCRECD_TNS = Byte.MIN_VALUE;
}
}

protected final void initEDUCRSGN_TNS(String s) {
if (!s.trim().isEmpty()) {
EDUCRSGN_TNS = Byte.parseByte(s);
} else {
EDUCRSGN_TNS = Byte.MIN_VALUE;
}
}

protected final void initEDUCSN(String s) {
if (!s.trim().isEmpty()) {
EDUCSN = Byte.parseByte(s);
} else {
EDUCSN = Byte.MIN_VALUE;
}
}

protected final void initEMPCHK(String s) {
if (!s.trim().isEmpty()) {
EMPCHK = Byte.parseByte(s);
} else {
EMPCHK = Byte.MIN_VALUE;
}
}

protected final void initEMPLOY(String s) {
if (!s.trim().isEmpty()) {
EMPLOY = Byte.parseByte(s);
} else {
EMPLOY = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDD(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDD = Byte.parseByte(s);
} else {
EMPSTENDD = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDM(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDM = Byte.parseByte(s);
} else {
EMPSTENDM = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDY4(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDY4 = Short.parseShort(s);
} else {
EMPSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initENDMNTH1(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH1 = Byte.parseByte(s);
} else {
ENDMNTH1 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH2(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH2 = Byte.parseByte(s);
} else {
ENDMNTH2 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH3(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH3 = Byte.parseByte(s);
} else {
ENDMNTH3 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH4(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH4 = Byte.parseByte(s);
} else {
ENDMNTH4 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH5(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH5 = Byte.parseByte(s);
} else {
ENDMNTH5 = Byte.MIN_VALUE;
}
}

protected final void initENGFORM(String s) {
if (!s.trim().isEmpty()) {
ENGFORM = Byte.parseByte(s);
} else {
ENGFORM = Byte.MIN_VALUE;
}
}

protected final void initENGLANG(String s) {
if (!s.trim().isEmpty()) {
ENGLANG = Byte.parseByte(s);
} else {
ENGLANG = Byte.MIN_VALUE;
}
}

protected final void initENGREAD(String s) {
if (!s.trim().isEmpty()) {
ENGREAD = Byte.parseByte(s);
} else {
ENGREAD = Byte.MIN_VALUE;
}
}

protected final void initENGSPK(String s) {
if (!s.trim().isEmpty()) {
ENGSPK = Byte.parseByte(s);
} else {
ENGSPK = Byte.MIN_VALUE;
}
}

protected final void initENGTEL(String s) {
if (!s.trim().isEmpty()) {
ENGTEL = Byte.parseByte(s);
} else {
ENGTEL = Byte.MIN_VALUE;
}
}

protected final void initENGUK(String s) {
if (!s.trim().isEmpty()) {
ENGUK = Byte.parseByte(s);
} else {
ENGUK = Byte.MIN_VALUE;
}
}

protected final void initEPROSH(String s) {
if (!s.trim().isEmpty()) {
EPROSH = Short.parseShort(s);
} else {
EPROSH = Short.MIN_VALUE;
}
}

protected final void initETHN_DV(String s) {
if (!s.trim().isEmpty()) {
ETHN_DV = Byte.parseByte(s);
} else {
ETHN_DV = Byte.MIN_VALUE;
}
}

protected final void initEVRALC(String s) {
if (!s.trim().isEmpty()) {
EVRALC = Byte.parseByte(s);
} else {
EVRALC = Byte.MIN_VALUE;
}
}

protected final void initEXTNSA(String s) {
if (!s.trim().isEmpty()) {
EXTNSA = Byte.parseByte(s);
} else {
EXTNSA = Byte.MIN_VALUE;
}
}

protected final void initEXTRATE(String s) {
if (!s.trim().isEmpty()) {
EXTRATE = Double.parseDouble(s);
} else {
EXTRATE = Double.NaN;
}
}

protected final void initEXTREST(String s) {
if (!s.trim().isEmpty()) {
EXTREST = Byte.parseByte(s);
} else {
EXTREST = Byte.MIN_VALUE;
}
}

protected final void initFAMILY(String s) {
if (!s.trim().isEmpty()) {
FAMILY = Byte.parseByte(s);
} else {
FAMILY = Byte.MIN_VALUE;
}
}

protected final void initFAMSUP(String s) {
if (!s.trim().isEmpty()) {
FAMSUP = Byte.parseByte(s);
} else {
FAMSUP = Byte.MIN_VALUE;
}
}

protected final void initFATHER(String s) {
if (!s.trim().isEmpty()) {
FATHER = Byte.parseByte(s);
} else {
FATHER = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE01(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE01 = Byte.parseByte(s);
} else {
FBENTYPE01 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE02(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE02 = Byte.parseByte(s);
} else {
FBENTYPE02 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE03(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE03 = Byte.parseByte(s);
} else {
FBENTYPE03 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE04(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE04 = Byte.parseByte(s);
} else {
FBENTYPE04 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE05(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE05 = Byte.parseByte(s);
} else {
FBENTYPE05 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE06(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE06 = Byte.parseByte(s);
} else {
FBENTYPE06 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE07(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE07 = Byte.parseByte(s);
} else {
FBENTYPE07 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE08(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE08 = Byte.parseByte(s);
} else {
FBENTYPE08 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE09(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE09 = Byte.parseByte(s);
} else {
FBENTYPE09 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE10(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE10 = Byte.parseByte(s);
} else {
FBENTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE11(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE11 = Byte.parseByte(s);
} else {
FBENTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE12(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE12 = Byte.parseByte(s);
} else {
FBENTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE13(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE13 = Byte.parseByte(s);
} else {
FBENTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE14(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE14 = Byte.parseByte(s);
} else {
FBENTYPE14 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE15(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE15 = Byte.parseByte(s);
} else {
FBENTYPE15 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE16(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE16 = Byte.parseByte(s);
} else {
FBENTYPE16 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE17(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE17 = Byte.parseByte(s);
} else {
FBENTYPE17 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE18(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE18 = Byte.parseByte(s);
} else {
FBENTYPE18 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE19(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE19 = Byte.parseByte(s);
} else {
FBENTYPE19 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE20(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE20 = Byte.parseByte(s);
} else {
FBENTYPE20 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE21(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE21 = Byte.parseByte(s);
} else {
FBENTYPE21 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE22(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE22 = Byte.parseByte(s);
} else {
FBENTYPE22 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE23(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE23 = Byte.parseByte(s);
} else {
FBENTYPE23 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE24(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE24 = Byte.parseByte(s);
} else {
FBENTYPE24 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE25(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE25 = Byte.parseByte(s);
} else {
FBENTYPE25 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE26(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE26 = Byte.parseByte(s);
} else {
FBENTYPE26 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE27(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE27 = Byte.parseByte(s);
} else {
FBENTYPE27 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE28(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE28 = Byte.parseByte(s);
} else {
FBENTYPE28 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE29(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE29 = Byte.parseByte(s);
} else {
FBENTYPE29 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE30(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE30 = Byte.parseByte(s);
} else {
FBENTYPE30 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE31(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE31 = Byte.parseByte(s);
} else {
FBENTYPE31 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE32(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE32 = Byte.parseByte(s);
} else {
FBENTYPE32 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE33(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE33 = Byte.parseByte(s);
} else {
FBENTYPE33 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE34(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE34 = Byte.parseByte(s);
} else {
FBENTYPE34 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE35(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE35 = Byte.parseByte(s);
} else {
FBENTYPE35 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE36(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE36 = Byte.parseByte(s);
} else {
FBENTYPE36 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE37(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE37 = Byte.parseByte(s);
} else {
FBENTYPE37 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE38(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE38 = Byte.parseByte(s);
} else {
FBENTYPE38 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE39(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE39 = Byte.parseByte(s);
} else {
FBENTYPE39 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE40(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE40 = Byte.parseByte(s);
} else {
FBENTYPE40 = Byte.MIN_VALUE;
}
}

protected final void initFBENTYPE41(String s) {
if (!s.trim().isEmpty()) {
FBENTYPE41 = Byte.parseByte(s);
} else {
FBENTYPE41 = Byte.MIN_VALUE;
}
}

protected final void initFEMPLW(String s) {
if (!s.trim().isEmpty()) {
FEMPLW = Byte.parseByte(s);
} else {
FEMPLW = Byte.MIN_VALUE;
}
}

protected final void initFENOW(String s) {
if (!s.trim().isEmpty()) {
FENOW = Byte.parseByte(s);
} else {
FENOW = Byte.MIN_VALUE;
}
}

protected final void initFIBENOTHR_DV(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_DV = Double.parseDouble(s);
} else {
FIBENOTHR_DV = Double.NaN;
}
}

protected final void initFIBENOTHR_IF(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_IF = Double.parseDouble(s);
} else {
FIBENOTHR_IF = Double.NaN;
}
}

protected final void initFIBENOTHR_TC(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_TC = Byte.parseByte(s);
} else {
FIBENOTHR_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_IF = Double.parseDouble(s);
} else {
FIMNGRS_IF = Double.NaN;
}
}

protected final void initFIMNGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_TC = Byte.parseByte(s);
} else {
FIMNGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNINVNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNINVNET_DV = Double.parseDouble(s);
} else {
FIMNINVNET_DV = Double.NaN;
}
}

protected final void initFIMNLABGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_IF = Double.parseDouble(s);
} else {
FIMNLABGRS_IF = Double.NaN;
}
}

protected final void initFIMNLABGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_TC = Byte.parseByte(s);
} else {
FIMNLABGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNLABNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_DV = Double.parseDouble(s);
} else {
FIMNLABNET_DV = Double.NaN;
}
}

protected final void initFIMNLABNET_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_TC = Byte.parseByte(s);
} else {
FIMNLABNET_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNMISC_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNMISC_DV = Double.parseDouble(s);
} else {
FIMNMISC_DV = Double.NaN;
}
}

protected final void initFIMNNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNNET_DV = Double.parseDouble(s);
} else {
FIMNNET_DV = Double.NaN;
}
}

protected final void initFIMNPEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPEN_DV = Double.parseDouble(s);
} else {
FIMNPEN_DV = Double.NaN;
}
}

protected final void initFIMNPRBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPRBEN_DV = Double.parseDouble(s);
} else {
FIMNPRBEN_DV = Double.NaN;
}
}

protected final void initFIMNSBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNSBEN_DV = Double.parseDouble(s);
} else {
FIMNSBEN_DV = Double.NaN;
}
}

protected final void initFINFUT(String s) {
if (!s.trim().isEmpty()) {
FINFUT = Byte.parseByte(s);
} else {
FINFUT = Byte.MIN_VALUE;
}
}

protected final void initFIVEALCDR(String s) {
if (!s.trim().isEmpty()) {
FIVEALCDR = Byte.parseByte(s);
} else {
FIVEALCDR = Byte.MIN_VALUE;
}
}

protected final void initFIVINTLANG(String s) {
if (!s.trim().isEmpty()) {
FIVINTLANG = Byte.parseByte(s);
} else {
FIVINTLANG = Byte.MIN_VALUE;
}
}

protected final void initFIVLOLW(String s) {
if (!s.trim().isEmpty()) {
FIVLOLW = Byte.parseByte(s);
} else {
FIVLOLW = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB1(String s) {
if (!s.trim().isEmpty()) {
FIYRDB1 = Byte.parseByte(s);
} else {
FIYRDB1 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB2(String s) {
if (!s.trim().isEmpty()) {
FIYRDB2 = Byte.parseByte(s);
} else {
FIYRDB2 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB3(String s) {
if (!s.trim().isEmpty()) {
FIYRDB3 = Byte.parseByte(s);
} else {
FIYRDB3 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB4(String s) {
if (!s.trim().isEmpty()) {
FIYRDB4 = Byte.parseByte(s);
} else {
FIYRDB4 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB5(String s) {
if (!s.trim().isEmpty()) {
FIYRDB5 = Byte.parseByte(s);
} else {
FIYRDB5 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB6(String s) {
if (!s.trim().isEmpty()) {
FIYRDB6 = Byte.parseByte(s);
} else {
FIYRDB6 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDIA(String s) {
if (!s.trim().isEmpty()) {
FIYRDIA = Integer.parseInt(s);
} else {
FIYRDIA = Integer.MIN_VALUE;
}
}

protected final void initFIYRINVINC_DV(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_DV = Double.parseDouble(s);
} else {
FIYRINVINC_DV = Double.NaN;
}
}

protected final void initFIYRINVINC_IF(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_IF = Byte.parseByte(s);
} else {
FIYRINVINC_IF = Byte.MIN_VALUE;
}
}

protected final void initFIYRINVINC_TC(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_TC = Byte.parseByte(s);
} else {
FIYRINVINC_TC = Byte.MIN_VALUE;
}
}

protected final void initFJBMNGR(String s) {
if (!s.trim().isEmpty()) {
FJBMNGR = Byte.parseByte(s);
} else {
FJBMNGR = Byte.MIN_VALUE;
}
}

protected final void initFJBSEMP(String s) {
if (!s.trim().isEmpty()) {
FJBSEMP = Byte.parseByte(s);
} else {
FJBSEMP = Byte.MIN_VALUE;
}
}

protected final void initFJBSIZE(String s) {
if (!s.trim().isEmpty()) {
FJBSIZE = Byte.parseByte(s);
} else {
FJBSIZE = Byte.MIN_VALUE;
}
}

protected final void initFJBSTAT(String s) {
if (!s.trim().isEmpty()) {
FJBSTAT = Byte.parseByte(s);
} else {
FJBSTAT = Byte.MIN_VALUE;
}
}

protected final void initFLAGLINKB1(String s) {
if (!s.trim().isEmpty()) {
FLAGLINKB1 = Byte.parseByte(s);
} else {
FLAGLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initFLAGLINKB2(String s) {
if (!s.trim().isEmpty()) {
FLAGLINKB2 = Byte.parseByte(s);
} else {
FLAGLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initFLAGLINKB3(String s) {
if (!s.trim().isEmpty()) {
FLAGLINKB3 = Byte.parseByte(s);
} else {
FLAGLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initFNPID(String s) {
if (!s.trim().isEmpty()) {
FNPID = Integer.parseInt(s);
} else {
FNPID = Integer.MIN_VALUE;
}
}

protected final void initFNPNO(String s) {
if (!s.trim().isEmpty()) {
FNPNO = Byte.parseByte(s);
} else {
FNPNO = Byte.MIN_VALUE;
}
}

protected final void initFNSPID(String s) {
if (!s.trim().isEmpty()) {
FNSPID = Integer.parseInt(s);
} else {
FNSPID = Integer.MIN_VALUE;
}
}

protected final void initFNSPNO(String s) {
if (!s.trim().isEmpty()) {
FNSPNO = Byte.parseByte(s);
} else {
FNSPNO = Byte.MIN_VALUE;
}
}

protected final void initFOPRLG(String s) {
if (!s.trim().isEmpty()) {
FOPRLG = Byte.parseByte(s);
} else {
FOPRLG = Byte.MIN_VALUE;
}
}

protected final void initFOPRLG0(String s) {
if (!s.trim().isEmpty()) {
FOPRLG0 = Byte.parseByte(s);
} else {
FOPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initFOPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
FOPRLG0NI = Byte.parseByte(s);
} else {
FOPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initFORMDIF(String s) {
if (!s.trim().isEmpty()) {
FORMDIF = Byte.parseByte(s);
} else {
FORMDIF = Byte.MIN_VALUE;
}
}

protected final void initFRDRG(String s) {
if (!s.trim().isEmpty()) {
FRDRG = Byte.parseByte(s);
} else {
FRDRG = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM1(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM1 = Byte.parseByte(s);
} else {
FT2ENDM1 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM2(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM2 = Byte.parseByte(s);
} else {
FT2ENDM2 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM3(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM3 = Byte.parseByte(s);
} else {
FT2ENDM3 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDY41(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY41 = Short.parseShort(s);
} else {
FT2ENDY41 = Short.MIN_VALUE;
}
}

protected final void initFT2ENDY42(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY42 = Short.parseShort(s);
} else {
FT2ENDY42 = Short.MIN_VALUE;
}
}

protected final void initFT2ENDY43(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY43 = Short.parseShort(s);
} else {
FT2ENDY43 = Short.MIN_VALUE;
}
}

protected final void initFTEDANY(String s) {
if (!s.trim().isEmpty()) {
FTEDANY = Byte.parseByte(s);
} else {
FTEDANY = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND1(String s) {
if (!s.trim().isEmpty()) {
FTEDEND1 = Byte.parseByte(s);
} else {
FTEDEND1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND2(String s) {
if (!s.trim().isEmpty()) {
FTEDEND2 = Byte.parseByte(s);
} else {
FTEDEND2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND3(String s) {
if (!s.trim().isEmpty()) {
FTEDEND3 = Byte.parseByte(s);
} else {
FTEDEND3 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR1(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR1 = Byte.parseByte(s);
} else {
FTEDMOR1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR2(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR2 = Byte.parseByte(s);
} else {
FTEDMOR2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR3(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR3 = Byte.parseByte(s);
} else {
FTEDMOR3 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM1(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM1 = Byte.parseByte(s);
} else {
FTEDSTARTM1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM2(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM2 = Byte.parseByte(s);
} else {
FTEDSTARTM2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM3(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM3 = Byte.parseByte(s);
} else {
FTEDSTARTM3 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTY41(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY41 = Short.parseShort(s);
} else {
FTEDSTARTY41 = Short.MIN_VALUE;
}
}

protected final void initFTEDSTARTY42(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY42 = Short.parseShort(s);
} else {
FTEDSTARTY42 = Short.MIN_VALUE;
}
}

protected final void initFTEDSTARTY43(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY43 = Short.parseShort(s);
} else {
FTEDSTARTY43 = Short.MIN_VALUE;
}
}

protected final void initFTENDM(String s) {
if (!s.trim().isEmpty()) {
FTENDM = Byte.parseByte(s);
} else {
FTENDM = Byte.MIN_VALUE;
}
}

protected final void initFTENDY4(String s) {
if (!s.trim().isEmpty()) {
FTENDY4 = Short.parseShort(s);
} else {
FTENDY4 = Short.MIN_VALUE;
}
}

protected final void initFTQUALS(String s) {
if (!s.trim().isEmpty()) {
FTQUALS = Byte.parseByte(s);
} else {
FTQUALS = Byte.MIN_VALUE;
}
}

protected final void initFUKBORN(String s) {
if (!s.trim().isEmpty()) {
FUKBORN = Byte.parseByte(s);
} else {
FUKBORN = Byte.MIN_VALUE;
}
}

protected final void initFYR2UK4(String s) {
if (!s.trim().isEmpty()) {
FYR2UK4 = Short.parseShort(s);
} else {
FYR2UK4 = Short.MIN_VALUE;
}
}

protected final void initGRFPID(String s) {
if (!s.trim().isEmpty()) {
GRFPID = Integer.parseInt(s);
} else {
GRFPID = Integer.MIN_VALUE;
}
}

protected final void initGRFPNO(String s) {
if (!s.trim().isEmpty()) {
GRFPNO = Byte.parseByte(s);
} else {
GRFPNO = Byte.MIN_VALUE;
}
}

protected final void initGRMPID(String s) {
if (!s.trim().isEmpty()) {
GRMPID = Integer.parseInt(s);
} else {
GRMPID = Integer.MIN_VALUE;
}
}

protected final void initGRMPNO(String s) {
if (!s.trim().isEmpty()) {
GRMPNO = Byte.parseByte(s);
} else {
GRMPNO = Byte.MIN_VALUE;
}
}

protected final void initGRPBFTS(String s) {
if (!s.trim().isEmpty()) {
GRPBFTS = Byte.parseByte(s);
} else {
GRPBFTS = Byte.MIN_VALUE;
}
}

protected final void initHASEMAIL(String s) {
if (!s.trim().isEmpty()) {
HASEMAIL = Byte.parseByte(s);
} else {
HASEMAIL = Byte.MIN_VALUE;
}
}

protected final void initHASEMAIL2(String s) {
if (!s.trim().isEmpty()) {
HASEMAIL2 = Byte.parseByte(s);
} else {
HASEMAIL2 = Byte.MIN_VALUE;
}
}

protected final void initHCOND1(String s) {
if (!s.trim().isEmpty()) {
HCOND1 = Byte.parseByte(s);
} else {
HCOND1 = Byte.MIN_VALUE;
}
}

protected final void initHCOND10(String s) {
if (!s.trim().isEmpty()) {
HCOND10 = Byte.parseByte(s);
} else {
HCOND10 = Byte.MIN_VALUE;
}
}

protected final void initHCOND11(String s) {
if (!s.trim().isEmpty()) {
HCOND11 = Byte.parseByte(s);
} else {
HCOND11 = Byte.MIN_VALUE;
}
}

protected final void initHCOND12(String s) {
if (!s.trim().isEmpty()) {
HCOND12 = Byte.parseByte(s);
} else {
HCOND12 = Byte.MIN_VALUE;
}
}

protected final void initHCOND13(String s) {
if (!s.trim().isEmpty()) {
HCOND13 = Byte.parseByte(s);
} else {
HCOND13 = Byte.MIN_VALUE;
}
}

protected final void initHCOND14(String s) {
if (!s.trim().isEmpty()) {
HCOND14 = Byte.parseByte(s);
} else {
HCOND14 = Byte.MIN_VALUE;
}
}

protected final void initHCOND15(String s) {
if (!s.trim().isEmpty()) {
HCOND15 = Byte.parseByte(s);
} else {
HCOND15 = Byte.MIN_VALUE;
}
}

protected final void initHCOND16(String s) {
if (!s.trim().isEmpty()) {
HCOND16 = Byte.parseByte(s);
} else {
HCOND16 = Byte.MIN_VALUE;
}
}

protected final void initHCOND17(String s) {
if (!s.trim().isEmpty()) {
HCOND17 = Byte.parseByte(s);
} else {
HCOND17 = Byte.MIN_VALUE;
}
}

protected final void initHCOND18(String s) {
if (!s.trim().isEmpty()) {
HCOND18 = Byte.parseByte(s);
} else {
HCOND18 = Byte.MIN_VALUE;
}
}

protected final void initHCOND2(String s) {
if (!s.trim().isEmpty()) {
HCOND2 = Byte.parseByte(s);
} else {
HCOND2 = Byte.MIN_VALUE;
}
}

protected final void initHCOND3(String s) {
if (!s.trim().isEmpty()) {
HCOND3 = Byte.parseByte(s);
} else {
HCOND3 = Byte.MIN_VALUE;
}
}

protected final void initHCOND4(String s) {
if (!s.trim().isEmpty()) {
HCOND4 = Byte.parseByte(s);
} else {
HCOND4 = Byte.MIN_VALUE;
}
}

protected final void initHCOND5(String s) {
if (!s.trim().isEmpty()) {
HCOND5 = Byte.parseByte(s);
} else {
HCOND5 = Byte.MIN_VALUE;
}
}

protected final void initHCOND6(String s) {
if (!s.trim().isEmpty()) {
HCOND6 = Byte.parseByte(s);
} else {
HCOND6 = Byte.MIN_VALUE;
}
}

protected final void initHCOND7(String s) {
if (!s.trim().isEmpty()) {
HCOND7 = Byte.parseByte(s);
} else {
HCOND7 = Byte.MIN_VALUE;
}
}

protected final void initHCOND8(String s) {
if (!s.trim().isEmpty()) {
HCOND8 = Byte.parseByte(s);
} else {
HCOND8 = Byte.MIN_VALUE;
}
}

protected final void initHCOND9(String s) {
if (!s.trim().isEmpty()) {
HCOND9 = Byte.parseByte(s);
} else {
HCOND9 = Byte.MIN_VALUE;
}
}

protected final void initHCOND96(String s) {
if (!s.trim().isEmpty()) {
HCOND96 = Byte.parseByte(s);
} else {
HCOND96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA01(String s) {
if (!s.trim().isEmpty()) {
HCONDA01 = Byte.parseByte(s);
} else {
HCONDA01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA02(String s) {
if (!s.trim().isEmpty()) {
HCONDA02 = Byte.parseByte(s);
} else {
HCONDA02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA03(String s) {
if (!s.trim().isEmpty()) {
HCONDA03 = Byte.parseByte(s);
} else {
HCONDA03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA04(String s) {
if (!s.trim().isEmpty()) {
HCONDA04 = Byte.parseByte(s);
} else {
HCONDA04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA05(String s) {
if (!s.trim().isEmpty()) {
HCONDA05 = Byte.parseByte(s);
} else {
HCONDA05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA06(String s) {
if (!s.trim().isEmpty()) {
HCONDA06 = Byte.parseByte(s);
} else {
HCONDA06 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA07(String s) {
if (!s.trim().isEmpty()) {
HCONDA07 = Byte.parseByte(s);
} else {
HCONDA07 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA08(String s) {
if (!s.trim().isEmpty()) {
HCONDA08 = Byte.parseByte(s);
} else {
HCONDA08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA09(String s) {
if (!s.trim().isEmpty()) {
HCONDA09 = Byte.parseByte(s);
} else {
HCONDA09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA10(String s) {
if (!s.trim().isEmpty()) {
HCONDA10 = Byte.parseByte(s);
} else {
HCONDA10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA11(String s) {
if (!s.trim().isEmpty()) {
HCONDA11 = Byte.parseByte(s);
} else {
HCONDA11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA12(String s) {
if (!s.trim().isEmpty()) {
HCONDA12 = Byte.parseByte(s);
} else {
HCONDA12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA13(String s) {
if (!s.trim().isEmpty()) {
HCONDA13 = Byte.parseByte(s);
} else {
HCONDA13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA14(String s) {
if (!s.trim().isEmpty()) {
HCONDA14 = Byte.parseByte(s);
} else {
HCONDA14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA15(String s) {
if (!s.trim().isEmpty()) {
HCONDA15 = Byte.parseByte(s);
} else {
HCONDA15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA16(String s) {
if (!s.trim().isEmpty()) {
HCONDA16 = Byte.parseByte(s);
} else {
HCONDA16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA17(String s) {
if (!s.trim().isEmpty()) {
HCONDA17 = Byte.parseByte(s);
} else {
HCONDA17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN1(String s) {
if (!s.trim().isEmpty()) {
HCONDN1 = Byte.parseByte(s);
} else {
HCONDN1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN10(String s) {
if (!s.trim().isEmpty()) {
HCONDN10 = Byte.parseByte(s);
} else {
HCONDN10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN11(String s) {
if (!s.trim().isEmpty()) {
HCONDN11 = Byte.parseByte(s);
} else {
HCONDN11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN12(String s) {
if (!s.trim().isEmpty()) {
HCONDN12 = Byte.parseByte(s);
} else {
HCONDN12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN13(String s) {
if (!s.trim().isEmpty()) {
HCONDN13 = Byte.parseByte(s);
} else {
HCONDN13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN14(String s) {
if (!s.trim().isEmpty()) {
HCONDN14 = Byte.parseByte(s);
} else {
HCONDN14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN15(String s) {
if (!s.trim().isEmpty()) {
HCONDN15 = Byte.parseByte(s);
} else {
HCONDN15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN16(String s) {
if (!s.trim().isEmpty()) {
HCONDN16 = Byte.parseByte(s);
} else {
HCONDN16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN17(String s) {
if (!s.trim().isEmpty()) {
HCONDN17 = Byte.parseByte(s);
} else {
HCONDN17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN18(String s) {
if (!s.trim().isEmpty()) {
HCONDN18 = Byte.parseByte(s);
} else {
HCONDN18 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN2(String s) {
if (!s.trim().isEmpty()) {
HCONDN2 = Byte.parseByte(s);
} else {
HCONDN2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN3(String s) {
if (!s.trim().isEmpty()) {
HCONDN3 = Byte.parseByte(s);
} else {
HCONDN3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN4(String s) {
if (!s.trim().isEmpty()) {
HCONDN4 = Byte.parseByte(s);
} else {
HCONDN4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN5(String s) {
if (!s.trim().isEmpty()) {
HCONDN5 = Byte.parseByte(s);
} else {
HCONDN5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN6(String s) {
if (!s.trim().isEmpty()) {
HCONDN6 = Byte.parseByte(s);
} else {
HCONDN6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN7(String s) {
if (!s.trim().isEmpty()) {
HCONDN7 = Byte.parseByte(s);
} else {
HCONDN7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN8(String s) {
if (!s.trim().isEmpty()) {
HCONDN8 = Byte.parseByte(s);
} else {
HCONDN8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN9(String s) {
if (!s.trim().isEmpty()) {
HCONDN9 = Byte.parseByte(s);
} else {
HCONDN9 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN96(String s) {
if (!s.trim().isEmpty()) {
HCONDN96 = Byte.parseByte(s);
} else {
HCONDN96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO1(String s) {
if (!s.trim().isEmpty()) {
HCONDNO1 = Byte.parseByte(s);
} else {
HCONDNO1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO2(String s) {
if (!s.trim().isEmpty()) {
HCONDNO2 = Byte.parseByte(s);
} else {
HCONDNO2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO3(String s) {
if (!s.trim().isEmpty()) {
HCONDNO3 = Byte.parseByte(s);
} else {
HCONDNO3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO4(String s) {
if (!s.trim().isEmpty()) {
HCONDNO4 = Byte.parseByte(s);
} else {
HCONDNO4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO5(String s) {
if (!s.trim().isEmpty()) {
HCONDNO5 = Byte.parseByte(s);
} else {
HCONDNO5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO6(String s) {
if (!s.trim().isEmpty()) {
HCONDNO6 = Byte.parseByte(s);
} else {
HCONDNO6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO7(String s) {
if (!s.trim().isEmpty()) {
HCONDNO7 = Byte.parseByte(s);
} else {
HCONDNO7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO8(String s) {
if (!s.trim().isEmpty()) {
HCONDNO8 = Byte.parseByte(s);
} else {
HCONDNO8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO_CODE(String s) {
if (!s.trim().isEmpty()) {
HCONDNO_CODE = Byte.parseByte(s);
} else {
HCONDNO_CODE = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS1(String s) {
if (!s.trim().isEmpty()) {
HCONDNS1 = Byte.parseByte(s);
} else {
HCONDNS1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS2(String s) {
if (!s.trim().isEmpty()) {
HCONDNS2 = Byte.parseByte(s);
} else {
HCONDNS2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS3(String s) {
if (!s.trim().isEmpty()) {
HCONDNS3 = Byte.parseByte(s);
} else {
HCONDNS3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS4(String s) {
if (!s.trim().isEmpty()) {
HCONDNS4 = Byte.parseByte(s);
} else {
HCONDNS4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS5(String s) {
if (!s.trim().isEmpty()) {
HCONDNS5 = Byte.parseByte(s);
} else {
HCONDNS5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS6(String s) {
if (!s.trim().isEmpty()) {
HCONDNS6 = Byte.parseByte(s);
} else {
HCONDNS6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS7(String s) {
if (!s.trim().isEmpty()) {
HCONDNS7 = Byte.parseByte(s);
} else {
HCONDNS7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS8(String s) {
if (!s.trim().isEmpty()) {
HCONDNS8 = Byte.parseByte(s);
} else {
HCONDNS8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDO_CODE(String s) {
if (!s.trim().isEmpty()) {
HCONDO_CODE = Byte.parseByte(s);
} else {
HCONDO_CODE = Byte.MIN_VALUE;
}
}

protected final void initHCONDS01(String s) {
if (!s.trim().isEmpty()) {
HCONDS01 = Byte.parseByte(s);
} else {
HCONDS01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS02(String s) {
if (!s.trim().isEmpty()) {
HCONDS02 = Byte.parseByte(s);
} else {
HCONDS02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS03(String s) {
if (!s.trim().isEmpty()) {
HCONDS03 = Byte.parseByte(s);
} else {
HCONDS03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS04(String s) {
if (!s.trim().isEmpty()) {
HCONDS04 = Byte.parseByte(s);
} else {
HCONDS04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS05(String s) {
if (!s.trim().isEmpty()) {
HCONDS05 = Byte.parseByte(s);
} else {
HCONDS05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS08(String s) {
if (!s.trim().isEmpty()) {
HCONDS08 = Byte.parseByte(s);
} else {
HCONDS08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS09(String s) {
if (!s.trim().isEmpty()) {
HCONDS09 = Byte.parseByte(s);
} else {
HCONDS09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS10(String s) {
if (!s.trim().isEmpty()) {
HCONDS10 = Byte.parseByte(s);
} else {
HCONDS10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS11(String s) {
if (!s.trim().isEmpty()) {
HCONDS11 = Byte.parseByte(s);
} else {
HCONDS11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS12(String s) {
if (!s.trim().isEmpty()) {
HCONDS12 = Byte.parseByte(s);
} else {
HCONDS12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS13(String s) {
if (!s.trim().isEmpty()) {
HCONDS13 = Byte.parseByte(s);
} else {
HCONDS13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS14(String s) {
if (!s.trim().isEmpty()) {
HCONDS14 = Byte.parseByte(s);
} else {
HCONDS14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS15(String s) {
if (!s.trim().isEmpty()) {
HCONDS15 = Byte.parseByte(s);
} else {
HCONDS15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS16(String s) {
if (!s.trim().isEmpty()) {
HCONDS16 = Byte.parseByte(s);
} else {
HCONDS16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS17(String s) {
if (!s.trim().isEmpty()) {
HCONDS17 = Byte.parseByte(s);
} else {
HCONDS17 = Byte.MIN_VALUE;
}
}

protected final void initHEALTH(String s) {
if (!s.trim().isEmpty()) {
HEALTH = Byte.parseByte(s);
} else {
HEALTH = Byte.MIN_VALUE;
}
}

protected final void initHEALTHSN(String s) {
if (!s.trim().isEmpty()) {
HEALTHSN = Byte.parseByte(s);
} else {
HEALTHSN = Byte.MIN_VALUE;
}
}

protected final void initHEDLIK(String s) {
if (!s.trim().isEmpty()) {
HEDLIK = Byte.parseByte(s);
} else {
HEDLIK = Byte.MIN_VALUE;
}
}

protected final void initHEDNT(String s) {
if (!s.trim().isEmpty()) {
HEDNT = Byte.parseByte(s);
} else {
HEDNT = Byte.MIN_VALUE;
}
}

protected final void initHEDNTO_CODE(String s) {
if (!s.trim().isEmpty()) {
HEDNTO_CODE = Byte.parseByte(s);
} else {
HEDNTO_CODE = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTF(String s) {
if (!s.trim().isEmpty()) {
HGADOPTF = Byte.parseByte(s);
} else {
HGADOPTF = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTM(String s) {
if (!s.trim().isEmpty()) {
HGADOPTM = Byte.parseByte(s);
} else {
HGADOPTM = Byte.MIN_VALUE;
}
}

protected final void initHGPART(String s) {
if (!s.trim().isEmpty()) {
HGPART = Byte.parseByte(s);
} else {
HGPART = Byte.MIN_VALUE;
}
}

protected final void initHHRESP_DV(String s) {
if (!s.trim().isEmpty()) {
HHRESP_DV = Byte.parseByte(s);
} else {
HHRESP_DV = Byte.MIN_VALUE;
}
}

protected final void initHHTYPE_DV(String s) {
if (!s.trim().isEmpty()) {
HHTYPE_DV = Byte.parseByte(s);
} else {
HHTYPE_DV = Byte.MIN_VALUE;
}
}

protected final void initHIGHEDUK(String s) {
if (!s.trim().isEmpty()) {
HIGHEDUK = Byte.parseByte(s);
} else {
HIGHEDUK = Byte.MIN_VALUE;
}
}

protected final void initHLTHISGN_TNS(String s) {
if (!s.trim().isEmpty()) {
HLTHISGN_TNS = Byte.parseByte(s);
} else {
HLTHISGN_TNS = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINK(String s) {
if (!s.trim().isEmpty()) {
HLTHLINK = Byte.parseByte(s);
} else {
HLTHLINK = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINKB1(String s) {
if (!s.trim().isEmpty()) {
HLTHLINKB1 = Byte.parseByte(s);
} else {
HLTHLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINKB2(String s) {
if (!s.trim().isEmpty()) {
HLTHLINKB2 = Byte.parseByte(s);
} else {
HLTHLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initHLTHLINKB3(String s) {
if (!s.trim().isEmpty()) {
HLTHLINKB3 = Byte.parseByte(s);
} else {
HLTHLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initHLTHRECD_TNS(String s) {
if (!s.trim().isEmpty()) {
HLTHRECD_TNS = Byte.parseByte(s);
} else {
HLTHRECD_TNS = Byte.MIN_VALUE;
}
}

protected final void initHLTHRSGN_TNS(String s) {
if (!s.trim().isEmpty()) {
HLTHRSGN_TNS = Byte.parseByte(s);
} else {
HLTHRSGN_TNS = Byte.MIN_VALUE;
}
}

protected final void initHOSPC1(String s) {
if (!s.trim().isEmpty()) {
HOSPC1 = Byte.parseByte(s);
} else {
HOSPC1 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC2(String s) {
if (!s.trim().isEmpty()) {
HOSPC2 = Byte.parseByte(s);
} else {
HOSPC2 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC3(String s) {
if (!s.trim().isEmpty()) {
HOSPC3 = Byte.parseByte(s);
} else {
HOSPC3 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC4(String s) {
if (!s.trim().isEmpty()) {
HOSPC4 = Byte.parseByte(s);
} else {
HOSPC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC5(String s) {
if (!s.trim().isEmpty()) {
HOSPC5 = Byte.parseByte(s);
} else {
HOSPC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC6(String s) {
if (!s.trim().isEmpty()) {
HOSPC6 = Byte.parseByte(s);
} else {
HOSPC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC7(String s) {
if (!s.trim().isEmpty()) {
HOSPC7 = Byte.parseByte(s);
} else {
HOSPC7 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC8(String s) {
if (!s.trim().isEmpty()) {
HOSPC8 = Byte.parseByte(s);
} else {
HOSPC8 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC1(String s) {
if (!s.trim().isEmpty()) {
HOSPDC1 = Short.parseShort(s);
} else {
HOSPDC1 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC2(String s) {
if (!s.trim().isEmpty()) {
HOSPDC2 = Short.parseShort(s);
} else {
HOSPDC2 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC3(String s) {
if (!s.trim().isEmpty()) {
HOSPDC3 = Short.parseShort(s);
} else {
HOSPDC3 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC4(String s) {
if (!s.trim().isEmpty()) {
HOSPDC4 = Byte.parseByte(s);
} else {
HOSPDC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC5(String s) {
if (!s.trim().isEmpty()) {
HOSPDC5 = Byte.parseByte(s);
} else {
HOSPDC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC6(String s) {
if (!s.trim().isEmpty()) {
HOSPDC6 = Byte.parseByte(s);
} else {
HOSPDC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC7(String s) {
if (!s.trim().isEmpty()) {
HOSPDC7 = Byte.parseByte(s);
} else {
HOSPDC7 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC8(String s) {
if (!s.trim().isEmpty()) {
HOSPDC8 = Byte.parseByte(s);
} else {
HOSPDC8 = Byte.MIN_VALUE;
}
}

protected final void initHOUSING(String s) {
if (!s.trim().isEmpty()) {
HOUSING = Byte.parseByte(s);
} else {
HOUSING = Byte.MIN_VALUE;
}
}

protected final void initHOWLNG(String s) {
if (!s.trim().isEmpty()) {
HOWLNG = Short.parseShort(s);
} else {
HOWLNG = Short.MIN_VALUE;
}
}

protected final void initHRPID(String s) {
if (!s.trim().isEmpty()) {
HRPID = Integer.parseInt(s);
} else {
HRPID = Integer.MIN_VALUE;
}
}

protected final void initHRPNO(String s) {
if (!s.trim().isEmpty()) {
HRPNO = Byte.parseByte(s);
} else {
HRPNO = Byte.MIN_VALUE;
}
}

protected final void initHUBOSS(String s) {
if (!s.trim().isEmpty()) {
HUBOSS = Byte.parseByte(s);
} else {
HUBOSS = Byte.MIN_VALUE;
}
}

protected final void initHUBUYS(String s) {
if (!s.trim().isEmpty()) {
HUBUYS = Short.parseShort(s);
} else {
HUBUYS = Short.MIN_VALUE;
}
}

protected final void initHUCAR(String s) {
if (!s.trim().isEmpty()) {
HUCAR = Byte.parseByte(s);
} else {
HUCAR = Byte.MIN_VALUE;
}
}

protected final void initHUDIY(String s) {
if (!s.trim().isEmpty()) {
HUDIY = Byte.parseByte(s);
} else {
HUDIY = Byte.MIN_VALUE;
}
}

protected final void initHUFRYS(String s) {
if (!s.trim().isEmpty()) {
HUFRYS = Short.parseShort(s);
} else {
HUFRYS = Short.MIN_VALUE;
}
}

protected final void initHUIRON(String s) {
if (!s.trim().isEmpty()) {
HUIRON = Short.parseShort(s);
} else {
HUIRON = Short.MIN_VALUE;
}
}

protected final void initHUMOPS(String s) {
if (!s.trim().isEmpty()) {
HUMOPS = Short.parseShort(s);
} else {
HUMOPS = Short.MIN_VALUE;
}
}

protected final void initHUPOTS(String s) {
if (!s.trim().isEmpty()) {
HUPOTS = Byte.parseByte(s);
} else {
HUPOTS = Byte.MIN_VALUE;
}
}

protected final void initHUSITS(String s) {
if (!s.trim().isEmpty()) {
HUSITS = Short.parseShort(s);
} else {
HUSITS = Short.MIN_VALUE;
}
}

protected final void initIENDDATD(String s) {
if (!s.trim().isEmpty()) {
IENDDATD = Byte.parseByte(s);
} else {
IENDDATD = Byte.MIN_VALUE;
}
}

protected final void initIENDDATM(String s) {
if (!s.trim().isEmpty()) {
IENDDATM = Byte.parseByte(s);
} else {
IENDDATM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATMM(String s) {
if (!s.trim().isEmpty()) {
IENDDATMM = Byte.parseByte(s);
} else {
IENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATSS(String s) {
if (!s.trim().isEmpty()) {
IENDDATSS = Byte.parseByte(s);
} else {
IENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initIENDDATY(String s) {
if (!s.trim().isEmpty()) {
IENDDATY = Short.parseShort(s);
} else {
IENDDATY = Short.MIN_VALUE;
}
}

protected final void initIND5MUS_LW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_LW = Double.parseDouble(s);
} else {
IND5MUS_LW = Double.NaN;
}
}

protected final void initIND5MUS_XW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_XW = Double.parseDouble(s);
} else {
IND5MUS_XW = Double.NaN;
}
}

protected final void initINDBD91_LW(String s) {
if (!s.trim().isEmpty()) {
INDBD91_LW = Double.parseDouble(s);
} else {
INDBD91_LW = Double.NaN;
}
}

protected final void initINDBDUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDBDUB_LW = Double.parseDouble(s);
} else {
INDBDUB_LW = Double.NaN;
}
}

protected final void initINDEFLV(String s) {
if (!s.trim().isEmpty()) {
INDEFLV = Byte.parseByte(s);
} else {
INDEFLV = Byte.MIN_VALUE;
}
}

protected final void initINDIN01_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN01_LW = Double.parseDouble(s);
} else {
INDIN01_LW = Double.NaN;
}
}

protected final void initINDIN91_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN91_LW = Double.parseDouble(s);
} else {
INDIN91_LW = Double.NaN;
}
}

protected final void initINDINUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_LW = Double.parseDouble(s);
} else {
INDINUB_LW = Double.NaN;
}
}

protected final void initINDINUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_XW = Double.parseDouble(s);
} else {
INDINUB_XW = Double.NaN;
}
}

protected final void initINDINUI_XW(String s) {
if (!s.trim().isEmpty()) {
INDINUI_XW = Double.parseDouble(s);
} else {
INDINUI_XW = Double.NaN;
}
}

protected final void initINDINUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUS_LW = Double.parseDouble(s);
} else {
INDINUS_LW = Double.NaN;
}
}

protected final void initINDMODE(String s) {
if (!s.trim().isEmpty()) {
INDMODE = Byte.parseByte(s);
} else {
INDMODE = Byte.MIN_VALUE;
}
}

protected final void initINDNS91_LW(String s) {
if (!s.trim().isEmpty()) {
INDNS91_LW = Double.parseDouble(s);
} else {
INDNS91_LW = Double.NaN;
}
}

protected final void initINDNSUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDNSUB_LW = Double.parseDouble(s);
} else {
INDNSUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_LW = Double.parseDouble(s);
} else {
INDPXUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_XW = Double.parseDouble(s);
} else {
INDPXUB_XW = Double.NaN;
}
}

protected final void initINDPXUI_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXUI_XW = Double.parseDouble(s);
} else {
INDPXUI_XW = Double.NaN;
}
}

protected final void initINDPXUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUS_LW = Double.parseDouble(s);
} else {
INDPXUS_LW = Double.NaN;
}
}

protected final void initINDSCUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_LW = Double.parseDouble(s);
} else {
INDSCUB_LW = Double.NaN;
}
}

protected final void initINDSCUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_XW = Double.parseDouble(s);
} else {
INDSCUB_XW = Double.NaN;
}
}

protected final void initINDSCUI_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCUI_XW = Double.parseDouble(s);
} else {
INDSCUI_XW = Double.NaN;
}
}

protected final void initINDSCUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUS_LW = Double.parseDouble(s);
} else {
INDSCUS_LW = Double.NaN;
}
}

protected final void initINTDATD_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATD_DV = Byte.parseByte(s);
} else {
INTDATD_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATM_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATM_DV = Byte.parseByte(s);
} else {
INTDATM_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATY_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATY_DV = Short.parseShort(s);
} else {
INTDATY_DV = Short.MIN_VALUE;
}
}

protected final void initINTENDUKC(String s) {
if (!s.trim().isEmpty()) {
INTENDUKC = Byte.parseByte(s);
} else {
INTENDUKC = Byte.MIN_VALUE;
}
}

protected final void initINTSIGNHEALTH(String s) {
if (!s.trim().isEmpty()) {
INTSIGNHEALTH = Byte.parseByte(s);
} else {
INTSIGNHEALTH = Byte.MIN_VALUE;
}
}

protected final void initINVITRO1(String s) {
if (!s.trim().isEmpty()) {
INVITRO1 = Byte.parseByte(s);
} else {
INVITRO1 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO2(String s) {
if (!s.trim().isEmpty()) {
INVITRO2 = Byte.parseByte(s);
} else {
INVITRO2 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO3(String s) {
if (!s.trim().isEmpty()) {
INVITRO3 = Byte.parseByte(s);
} else {
INVITRO3 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO4(String s) {
if (!s.trim().isEmpty()) {
INVITRO4 = Byte.parseByte(s);
} else {
INVITRO4 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO5(String s) {
if (!s.trim().isEmpty()) {
INVITRO5 = Byte.parseByte(s);
} else {
INVITRO5 = Byte.MIN_VALUE;
}
}

protected final void initIOUTCOME(String s) {
if (!s.trim().isEmpty()) {
IOUTCOME = Byte.parseByte(s);
} else {
IOUTCOME = Byte.MIN_VALUE;
}
}

protected final void initIPROXY(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IPROXY = false;
} else {
IPROXY = true;
}
}
}

protected final void initISCED11_DV(String s) {
if (!s.trim().isEmpty()) {
ISCED11_DV = Byte.parseByte(s);
} else {
ISCED11_DV = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATMM = Byte.parseByte(s);
} else {
ISTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATSS = Byte.parseByte(s);
} else {
ISTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initIVAFFCT11(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT11 = Byte.parseByte(s);
} else {
IVAFFCT11 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT12(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT12 = Byte.parseByte(s);
} else {
IVAFFCT12 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT13(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT13 = Byte.parseByte(s);
} else {
IVAFFCT13 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT14(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT14 = Byte.parseByte(s);
} else {
IVAFFCT14 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT15(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT15 = Byte.parseByte(s);
} else {
IVAFFCT15 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT17(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT17 = Byte.parseByte(s);
} else {
IVAFFCT17 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT21(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT21 = Byte.parseByte(s);
} else {
IVAFFCT21 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT22(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT22 = Byte.parseByte(s);
} else {
IVAFFCT22 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT23(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT23 = Byte.parseByte(s);
} else {
IVAFFCT23 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT27(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT27 = Byte.parseByte(s);
} else {
IVAFFCT27 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT30(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT30 = Byte.parseByte(s);
} else {
IVAFFCT30 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT97(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT97 = Byte.parseByte(s);
} else {
IVAFFCT97 = Byte.MIN_VALUE;
}
}

protected final void initIVCOOP(String s) {
if (!s.trim().isEmpty()) {
IVCOOP = Byte.parseByte(s);
} else {
IVCOOP = Byte.MIN_VALUE;
}
}

protected final void initIVINFNCE(String s) {
if (!s.trim().isEmpty()) {
IVINFNCE = Byte.parseByte(s);
} else {
IVINFNCE = Byte.MIN_VALUE;
}
}

protected final void initIVLIBAL(String s) {
if (!s.trim().isEmpty()) {
IVLIBAL = Byte.parseByte(s);
} else {
IVLIBAL = Byte.MIN_VALUE;
}
}

protected final void initIVLIENG(String s) {
if (!s.trim().isEmpty()) {
IVLIENG = Byte.parseByte(s);
} else {
IVLIENG = Byte.MIN_VALUE;
}
}

protected final void initIVLITRANS(String s) {
if (!s.trim().isEmpty()) {
IVLITRANS = Byte.parseByte(s);
} else {
IVLITRANS = Byte.MIN_VALUE;
}
}

protected final void initIVLIWHO(String s) {
if (!s.trim().isEmpty()) {
IVLIWHO = Byte.parseByte(s);
} else {
IVLIWHO = Byte.MIN_VALUE;
}
}

protected final void initJ1BOSS(String s) {
if (!s.trim().isEmpty()) {
J1BOSS = Byte.parseByte(s);
} else {
J1BOSS = Byte.MIN_VALUE;
}
}

protected final void initJ1COJOB(String s) {
if (!s.trim().isEmpty()) {
J1COJOB = Byte.parseByte(s);
} else {
J1COJOB = Byte.MIN_VALUE;
}
}

protected final void initJ1MNGR(String s) {
if (!s.trim().isEmpty()) {
J1MNGR = Byte.parseByte(s);
} else {
J1MNGR = Byte.MIN_VALUE;
}
}

protected final void initJ1NONE(String s) {
if (!s.trim().isEmpty()) {
J1NONE = Byte.parseByte(s);
} else {
J1NONE = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC5_DV = Byte.parseByte(s);
} else {
J1NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1SEMP(String s) {
if (!s.trim().isEmpty()) {
J1SEMP = Byte.parseByte(s);
} else {
J1SEMP = Byte.MIN_VALUE;
}
}

protected final void initJ1SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC00_CC = Short.parseShort(s);
} else {
J1SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC10_CC = Short.parseShort(s);
} else {
J1SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC90_CC = Byte.parseByte(s);
} else {
J1SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJ1UKJOB(String s) {
if (!s.trim().isEmpty()) {
J1UKJOB = Byte.parseByte(s);
} else {
J1UKJOB = Byte.MIN_VALUE;
}
}

protected final void initJ1UKSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J1UKSOC00_CC = Short.parseShort(s);
} else {
J1UKSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ1UKSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J1UKSOC10_CC = Short.parseShort(s);
} else {
J1UKSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ1UKSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J1UKSOC90_CC = Byte.parseByte(s);
} else {
J1UKSOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJ2NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J2NSSEC5_DV = Byte.parseByte(s);
} else {
J2NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ2PAY(String s) {
if (!s.trim().isEmpty()) {
J2PAY = Integer.parseInt(s);
} else {
J2PAY = Integer.MIN_VALUE;
}
}

protected final void initJ2PAYNET_DV(String s) {
if (!s.trim().isEmpty()) {
J2PAYNET_DV = Double.parseDouble(s);
} else {
J2PAYNET_DV = Double.NaN;
}
}

protected final void initJ2SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC00_CC = Short.parseShort(s);
} else {
J2SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC10_CC = Short.parseShort(s);
} else {
J2SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC90_CC = Short.parseShort(s);
} else {
J2SOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBATT1(String s) {
if (!s.trim().isEmpty()) {
JBATT1 = Byte.parseByte(s);
} else {
JBATT1 = Byte.MIN_VALUE;
}
}

protected final void initJBATT2(String s) {
if (!s.trim().isEmpty()) {
JBATT2 = Byte.parseByte(s);
} else {
JBATT2 = Byte.MIN_VALUE;
}
}

protected final void initJBATT3(String s) {
if (!s.trim().isEmpty()) {
JBATT3 = Byte.parseByte(s);
} else {
JBATT3 = Byte.MIN_VALUE;
}
}

protected final void initJBATT4(String s) {
if (!s.trim().isEmpty()) {
JBATT4 = Byte.parseByte(s);
} else {
JBATT4 = Byte.MIN_VALUE;
}
}

protected final void initJBATT5(String s) {
if (!s.trim().isEmpty()) {
JBATT5 = Byte.parseByte(s);
} else {
JBATT5 = Byte.MIN_VALUE;
}
}

protected final void initJBATT6(String s) {
if (!s.trim().isEmpty()) {
JBATT6 = Byte.parseByte(s);
} else {
JBATT6 = Byte.MIN_VALUE;
}
}

protected final void initJBATT7(String s) {
if (!s.trim().isEmpty()) {
JBATT7 = Byte.parseByte(s);
} else {
JBATT7 = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATD(String s) {
if (!s.trim().isEmpty()) {
JBBGDATD = Byte.parseByte(s);
} else {
JBBGDATD = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATM(String s) {
if (!s.trim().isEmpty()) {
JBBGDATM = Byte.parseByte(s);
} else {
JBBGDATM = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATY(String s) {
if (!s.trim().isEmpty()) {
JBBGDATY = Short.parseShort(s);
} else {
JBBGDATY = Short.MIN_VALUE;
}
}

protected final void initJBENDD(String s) {
if (!s.trim().isEmpty()) {
JBENDD = Byte.parseByte(s);
} else {
JBENDD = Byte.MIN_VALUE;
}
}

protected final void initJBENDM(String s) {
if (!s.trim().isEmpty()) {
JBENDM = Byte.parseByte(s);
} else {
JBENDM = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS = Byte.parseByte(s);
} else {
JBENDREAS = Byte.MIN_VALUE;
}
}

protected final void initJBENDY4(String s) {
if (!s.trim().isEmpty()) {
JBENDY4 = Short.parseShort(s);
} else {
JBENDY4 = Short.MIN_VALUE;
}
}

protected final void initJBES2000(String s) {
if (!s.trim().isEmpty()) {
JBES2000 = Byte.parseByte(s);
} else {
JBES2000 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX1(String s) {
if (!s.trim().isEmpty()) {
JBFLEX1 = Byte.parseByte(s);
} else {
JBFLEX1 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX2(String s) {
if (!s.trim().isEmpty()) {
JBFLEX2 = Byte.parseByte(s);
} else {
JBFLEX2 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX3(String s) {
if (!s.trim().isEmpty()) {
JBFLEX3 = Byte.parseByte(s);
} else {
JBFLEX3 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX4(String s) {
if (!s.trim().isEmpty()) {
JBFLEX4 = Byte.parseByte(s);
} else {
JBFLEX4 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX5(String s) {
if (!s.trim().isEmpty()) {
JBFLEX5 = Byte.parseByte(s);
} else {
JBFLEX5 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX6(String s) {
if (!s.trim().isEmpty()) {
JBFLEX6 = Byte.parseByte(s);
} else {
JBFLEX6 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX7(String s) {
if (!s.trim().isEmpty()) {
JBFLEX7 = Byte.parseByte(s);
} else {
JBFLEX7 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX8(String s) {
if (!s.trim().isEmpty()) {
JBFLEX8 = Byte.parseByte(s);
} else {
JBFLEX8 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX96(String s) {
if (!s.trim().isEmpty()) {
JBFLEX96 = Byte.parseByte(s);
} else {
JBFLEX96 = Byte.MIN_VALUE;
}
}

protected final void initJBFXINF(String s) {
if (!s.trim().isEmpty()) {
JBFXINF = Byte.parseByte(s);
} else {
JBFXINF = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE1(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE1 = Byte.parseByte(s);
} else {
JBFXUSE1 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE2(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE2 = Byte.parseByte(s);
} else {
JBFXUSE2 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE3(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE3 = Byte.parseByte(s);
} else {
JBFXUSE3 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE4(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE4 = Byte.parseByte(s);
} else {
JBFXUSE4 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE5(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE5 = Byte.parseByte(s);
} else {
JBFXUSE5 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE6(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE6 = Byte.parseByte(s);
} else {
JBFXUSE6 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE7(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE7 = Byte.parseByte(s);
} else {
JBFXUSE7 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE8(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE8 = Byte.parseByte(s);
} else {
JBFXUSE8 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE96(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE96 = Byte.parseByte(s);
} else {
JBFXUSE96 = Byte.MIN_VALUE;
}
}

protected final void initJBIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JBIINDB_DV = Byte.parseByte(s);
} else {
JBIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHA(String s) {
if (!s.trim().isEmpty()) {
JBLKCHA = Byte.parseByte(s);
} else {
JBLKCHA = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHB(String s) {
if (!s.trim().isEmpty()) {
JBLKCHB = Byte.parseByte(s);
} else {
JBLKCHB = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHC(String s) {
if (!s.trim().isEmpty()) {
JBLKCHC = Byte.parseByte(s);
} else {
JBLKCHC = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHD(String s) {
if (!s.trim().isEmpty()) {
JBLKCHD = Byte.parseByte(s);
} else {
JBLKCHD = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHE(String s) {
if (!s.trim().isEmpty()) {
JBLKCHE = Byte.parseByte(s);
} else {
JBLKCHE = Byte.MIN_VALUE;
}
}

protected final void initJBMNGRCHK(String s) {
if (!s.trim().isEmpty()) {
JBMNGRCHK = Byte.parseByte(s);
} else {
JBMNGRCHK = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC3_DV = Byte.parseByte(s);
} else {
JBNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC5_DV = Byte.parseByte(s);
} else {
JBNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC_DV = Short.parseShort(s);
} else {
JBNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJBOFFY(String s) {
if (!s.trim().isEmpty()) {
JBOFFY = Byte.parseByte(s);
} else {
JBOFFY = Byte.MIN_VALUE;
}
}

protected final void initJBONUS(String s) {
if (!s.trim().isEmpty()) {
JBONUS = Short.parseShort(s);
} else {
JBONUS = Short.MIN_VALUE;
}
}

protected final void initJBPEN(String s) {
if (!s.trim().isEmpty()) {
JBPEN = Short.parseShort(s);
} else {
JBPEN = Short.MIN_VALUE;
}
}

protected final void initJBPENM(String s) {
if (!s.trim().isEmpty()) {
JBPENM = Short.parseShort(s);
} else {
JBPENM = Short.MIN_VALUE;
}
}

protected final void initJBPENY4(String s) {
if (!s.trim().isEmpty()) {
JBPENY4 = Short.parseShort(s);
} else {
JBPENY4 = Short.MIN_VALUE;
}
}

protected final void initJBPERFP(String s) {
if (!s.trim().isEmpty()) {
JBPERFP = Byte.parseByte(s);
} else {
JBPERFP = Byte.MIN_VALUE;
}
}

protected final void initJBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JBRGSC_DV = Short.parseShort(s);
} else {
JBRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJBRISE(String s) {
if (!s.trim().isEmpty()) {
JBRISE = Short.parseShort(s);
} else {
JBRISE = Short.MIN_VALUE;
}
}

protected final void initJBSAMR(String s) {
if (!s.trim().isEmpty()) {
JBSAMR = Byte.parseByte(s);
} else {
JBSAMR = Byte.MIN_VALUE;
}
}

protected final void initJBSAT(String s) {
if (!s.trim().isEmpty()) {
JBSAT = Byte.parseByte(s);
} else {
JBSAT = Byte.MIN_VALUE;
}
}

protected final void initJBSEC(String s) {
if (!s.trim().isEmpty()) {
JBSEC = Byte.parseByte(s);
} else {
JBSEC = Byte.MIN_VALUE;
}
}

protected final void initJBSECTPUB(String s) {
if (!s.trim().isEmpty()) {
JBSECTPUB = Byte.parseByte(s);
} else {
JBSECTPUB = Byte.MIN_VALUE;
}
}

protected final void initJBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JBSEG_DV = Short.parseShort(s);
} else {
JBSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJBSEMPCHK(String s) {
if (!s.trim().isEmpty()) {
JBSEMPCHK = Byte.parseByte(s);
} else {
JBSEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07CHK(String s) {
if (!s.trim().isEmpty()) {
JBSIC07CHK = Byte.parseByte(s);
} else {
JBSIC07CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JBSIC07_CC = Byte.parseByte(s);
} else {
JBSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJBSIZECHK(String s) {
if (!s.trim().isEmpty()) {
JBSIZECHK = Byte.parseByte(s);
} else {
JBSIZECHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00CHK(String s) {
if (!s.trim().isEmpty()) {
JBSOC00CHK = Byte.parseByte(s);
} else {
JBSOC00CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC00_CC = Short.parseShort(s);
} else {
JBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC10_CC = Short.parseShort(s);
} else {
JBSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOCGR_DV(String s) {
if (!s.trim().isEmpty()) {
JBSOCGR_DV = Byte.parseByte(s);
} else {
JBSOCGR_DV = Byte.MIN_VALUE;
}
}

protected final void initJBTERM1(String s) {
if (!s.trim().isEmpty()) {
JBTERM1 = Byte.parseByte(s);
} else {
JBTERM1 = Byte.MIN_VALUE;
}
}

protected final void initJBTERM2(String s) {
if (!s.trim().isEmpty()) {
JBTERM2 = Byte.parseByte(s);
} else {
JBTERM2 = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHA(String s) {
if (!s.trim().isEmpty()) {
JBXPCHA = Byte.parseByte(s);
} else {
JBXPCHA = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHB(String s) {
if (!s.trim().isEmpty()) {
JBXPCHB = Byte.parseByte(s);
} else {
JBXPCHB = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHC(String s) {
if (!s.trim().isEmpty()) {
JBXPCHC = Byte.parseByte(s);
} else {
JBXPCHC = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHD(String s) {
if (!s.trim().isEmpty()) {
JBXPCHD = Byte.parseByte(s);
} else {
JBXPCHD = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHE(String s) {
if (!s.trim().isEmpty()) {
JBXPCHE = Byte.parseByte(s);
} else {
JBXPCHE = Byte.MIN_VALUE;
}
}

protected final void initJLCBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JLCBSOC00_CC = Short.parseShort(s);
} else {
JLCBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJLCBSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JLCBSOC10_CC = Short.parseShort(s);
} else {
JLCBSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJLCBSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JLCBSOC90_CC = Byte.parseByte(s);
} else {
JLCBSOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJLENDM(String s) {
if (!s.trim().isEmpty()) {
JLENDM = Byte.parseByte(s);
} else {
JLENDM = Byte.MIN_VALUE;
}
}

protected final void initJLES2000(String s) {
if (!s.trim().isEmpty()) {
JLES2000 = Byte.parseByte(s);
} else {
JLES2000 = Byte.MIN_VALUE;
}
}

protected final void initJLIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JLIINDB_DV = Byte.parseByte(s);
} else {
JLIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC3_DV = Byte.parseByte(s);
} else {
JLNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC5_DV = Byte.parseByte(s);
} else {
JLNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC_DV = Short.parseShort(s);
} else {
JLNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JLRGSC_DV = Short.parseShort(s);
} else {
JLRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JLSEG_DV = Short.parseShort(s);
} else {
JLSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJLSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JLSIC07_CC = Byte.parseByte(s);
} else {
JLSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJLSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC00_CC = Short.parseShort(s);
} else {
JLSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJLSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC10_CC = Short.parseShort(s);
} else {
JLSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJOBHOURS1(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS1 = Byte.parseByte(s);
} else {
JOBHOURS1 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS2(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS2 = Byte.parseByte(s);
} else {
JOBHOURS2 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS3(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS3 = Byte.parseByte(s);
} else {
JOBHOURS3 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS4(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS4 = Byte.parseByte(s);
} else {
JOBHOURS4 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS5(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS5 = Byte.parseByte(s);
} else {
JOBHOURS5 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS6(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS6 = Byte.parseByte(s);
} else {
JOBHOURS6 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS7(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS7 = Byte.parseByte(s);
} else {
JOBHOURS7 = Byte.MIN_VALUE;
}
}

protected final void initJSOWNAMT(String s) {
if (!s.trim().isEmpty()) {
JSOWNAMT = Integer.parseInt(s);
} else {
JSOWNAMT = Integer.MIN_VALUE;
}
}

protected final void initJSOWNOTH(String s) {
if (!s.trim().isEmpty()) {
JSOWNOTH = Byte.parseByte(s);
} else {
JSOWNOTH = Byte.MIN_VALUE;
}
}

protected final void initJSOWNSUM(String s) {
if (!s.trim().isEmpty()) {
JSOWNSUM = Byte.parseByte(s);
} else {
JSOWNSUM = Byte.MIN_VALUE;
}
}

protected final void initJSOWOTAM(String s) {
if (!s.trim().isEmpty()) {
JSOWOTAM = Short.parseShort(s);
} else {
JSOWOTAM = Short.MIN_VALUE;
}
}

protected final void initJSPART(String s) {
if (!s.trim().isEmpty()) {
JSPART = Byte.parseByte(s);
} else {
JSPART = Byte.MIN_VALUE;
}
}

protected final void initJSPAYU(String s) {
if (!s.trim().isEmpty()) {
JSPAYU = Integer.parseInt(s);
} else {
JSPAYU = Integer.MIN_VALUE;
}
}

protected final void initJSPAYW(String s) {
if (!s.trim().isEmpty()) {
JSPAYW = Byte.parseByte(s);
} else {
JSPAYW = Byte.MIN_VALUE;
}
}

protected final void initJSPRLS(String s) {
if (!s.trim().isEmpty()) {
JSPRLS = Byte.parseByte(s);
} else {
JSPRLS = Byte.MIN_VALUE;
}
}

protected final void initJSPRNI(String s) {
if (!s.trim().isEmpty()) {
JSPRNI = Byte.parseByte(s);
} else {
JSPRNI = Byte.MIN_VALUE;
}
}

protected final void initJSPRTX(String s) {
if (!s.trim().isEmpty()) {
JSPRTX = Byte.parseByte(s);
} else {
JSPRTX = Byte.MIN_VALUE;
}
}

protected final void initJSPYNI(String s) {
if (!s.trim().isEmpty()) {
JSPYNI = Byte.parseByte(s);
} else {
JSPYNI = Byte.MIN_VALUE;
}
}

protected final void initJSPYTX(String s) {
if (!s.trim().isEmpty()) {
JSPYTX = Byte.parseByte(s);
} else {
JSPYTX = Byte.MIN_VALUE;
}
}

protected final void initJSTYPEB(String s) {
if (!s.trim().isEmpty()) {
JSTYPEB = Byte.parseByte(s);
} else {
JSTYPEB = Byte.MIN_VALUE;
}
}

protected final void initJSWORKAC(String s) {
if (!s.trim().isEmpty()) {
JSWORKAC = Byte.parseByte(s);
} else {
JSWORKAC = Byte.MIN_VALUE;
}
}

protected final void initJSWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
JSWORKTRAV = Byte.parseByte(s);
} else {
JSWORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initJUBGN(String s) {
if (!s.trim().isEmpty()) {
JUBGN = Short.parseShort(s);
} else {
JUBGN = Short.MIN_VALUE;
}
}

protected final void initJULK4X1(String s) {
if (!s.trim().isEmpty()) {
JULK4X1 = Short.parseShort(s);
} else {
JULK4X1 = Short.MIN_VALUE;
}
}

protected final void initJULK4X2(String s) {
if (!s.trim().isEmpty()) {
JULK4X2 = Short.parseShort(s);
} else {
JULK4X2 = Short.MIN_VALUE;
}
}

protected final void initJULK4X3(String s) {
if (!s.trim().isEmpty()) {
JULK4X3 = Byte.parseByte(s);
} else {
JULK4X3 = Byte.MIN_VALUE;
}
}

protected final void initJULK4X4(String s) {
if (!s.trim().isEmpty()) {
JULK4X4 = Short.parseShort(s);
} else {
JULK4X4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X5(String s) {
if (!s.trim().isEmpty()) {
JULK4X5 = Short.parseShort(s);
} else {
JULK4X5 = Short.MIN_VALUE;
}
}

protected final void initJULK4X6(String s) {
if (!s.trim().isEmpty()) {
JULK4X6 = Short.parseShort(s);
} else {
JULK4X6 = Short.MIN_VALUE;
}
}

protected final void initJULK4X96(String s) {
if (!s.trim().isEmpty()) {
JULK4X96 = Byte.parseByte(s);
} else {
JULK4X96 = Byte.MIN_VALUE;
}
}

protected final void initJWBS1_DV(String s) {
if (!s.trim().isEmpty()) {
JWBS1_DV = Byte.parseByte(s);
} else {
JWBS1_DV = Byte.MIN_VALUE;
}
}

protected final void initJWBS2_DV(String s) {
if (!s.trim().isEmpty()) {
JWBS2_DV = Byte.parseByte(s);
} else {
JWBS2_DV = Byte.MIN_VALUE;
}
}

protected final void initKIDLANG(String s) {
if (!s.trim().isEmpty()) {
KIDLANG = Byte.parseByte(s);
} else {
KIDLANG = Byte.MIN_VALUE;
}
}

protected final void initLADOPT(String s) {
if (!s.trim().isEmpty()) {
LADOPT = Byte.parseByte(s);
} else {
LADOPT = Byte.MIN_VALUE;
}
}

protected final void initLATE(String s) {
if (!s.trim().isEmpty()) {
LATE = Byte.parseByte(s);
} else {
LATE = Byte.MIN_VALUE;
}
}

protected final void initLCHMOR(String s) {
if (!s.trim().isEmpty()) {
LCHMOR = Byte.parseByte(s);
} else {
LCHMOR = Byte.MIN_VALUE;
}
}

protected final void initLCHMORN(String s) {
if (!s.trim().isEmpty()) {
LCHMORN = Byte.parseByte(s);
} else {
LCHMORN = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI1(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI1 = Byte.parseByte(s);
} else {
LCHMULTI1 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI2(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI2 = Byte.parseByte(s);
} else {
LCHMULTI2 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI3(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI3 = Byte.parseByte(s);
} else {
LCHMULTI3 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI4(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI4 = Byte.parseByte(s);
} else {
LCHMULTI4 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI5(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI5 = Byte.parseByte(s);
} else {
LCHMULTI5 = Byte.MIN_VALUE;
}
}

protected final void initLCMARM(String s) {
if (!s.trim().isEmpty()) {
LCMARM = Byte.parseByte(s);
} else {
LCMARM = Byte.MIN_VALUE;
}
}

protected final void initLCMARY4(String s) {
if (!s.trim().isEmpty()) {
LCMARY4 = Short.parseShort(s);
} else {
LCMARY4 = Short.MIN_VALUE;
}
}

protected final void initLCMCBM(String s) {
if (!s.trim().isEmpty()) {
LCMCBM = Byte.parseByte(s);
} else {
LCMCBM = Byte.MIN_VALUE;
}
}

protected final void initLCMCBY4(String s) {
if (!s.trim().isEmpty()) {
LCMCBY4 = Short.parseShort(s);
} else {
LCMCBY4 = Short.MIN_VALUE;
}
}

protected final void initLCMCOH(String s) {
if (!s.trim().isEmpty()) {
LCMCOH = Byte.parseByte(s);
} else {
LCMCOH = Byte.MIN_VALUE;
}
}

protected final void initLCMSPM(String s) {
if (!s.trim().isEmpty()) {
LCMSPM = Byte.parseByte(s);
} else {
LCMSPM = Byte.MIN_VALUE;
}
}

protected final void initLCMSPY4(String s) {
if (!s.trim().isEmpty()) {
LCMSPY4 = Short.parseShort(s);
} else {
LCMSPY4 = Short.MIN_VALUE;
}
}

protected final void initLCOH(String s) {
if (!s.trim().isEmpty()) {
LCOH = Byte.parseByte(s);
} else {
LCOH = Byte.MIN_VALUE;
}
}

protected final void initLCOHNPI(String s) {
if (!s.trim().isEmpty()) {
LCOHNPI = Byte.parseByte(s);
} else {
LCOHNPI = Byte.MIN_VALUE;
}
}

protected final void initLIENG(String s) {
if (!s.trim().isEmpty()) {
LIENG = Byte.parseByte(s);
} else {
LIENG = Byte.MIN_VALUE;
}
}

protected final void initLIHOW(String s) {
if (!s.trim().isEmpty()) {
LIHOW = Byte.parseByte(s);
} else {
LIHOW = Byte.MIN_VALUE;
}
}

protected final void initLINGUA(String s) {
if (!s.trim().isEmpty()) {
LINGUA = Byte.parseByte(s);
} else {
LINGUA = Byte.MIN_VALUE;
}
}

protected final void initLITRANS(String s) {
if (!s.trim().isEmpty()) {
LITRANS = Byte.parseByte(s);
} else {
LITRANS = Byte.MIN_VALUE;
}
}

protected final void initLIVESP(String s) {
if (!s.trim().isEmpty()) {
LIVESP = Byte.parseByte(s);
} else {
LIVESP = Byte.MIN_VALUE;
}
}

protected final void initLIVESP_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
LIVESP_DV = false;
} else {
LIVESP_DV = true;
}
}
}

protected final void initLIVEWITH(String s) {
if (!s.trim().isEmpty()) {
LIVEWITH = Byte.parseByte(s);
} else {
LIVEWITH = Byte.MIN_VALUE;
}
}

protected final void initLIWHO(String s) {
if (!s.trim().isEmpty()) {
LIWHO = Byte.parseByte(s);
} else {
LIWHO = Byte.MIN_VALUE;
}
}

protected final void initLKMVCNTRY(String s) {
if (!s.trim().isEmpty()) {
LKMVCNTRY = Byte.parseByte(s);
} else {
LKMVCNTRY = Byte.MIN_VALUE;
}
}

protected final void initLLKNBRD(String s) {
if (!s.trim().isEmpty()) {
LLKNBRD = Byte.parseByte(s);
} else {
LLKNBRD = Byte.MIN_VALUE;
}
}

protected final void initLMAR1M(String s) {
if (!s.trim().isEmpty()) {
LMAR1M = Byte.parseByte(s);
} else {
LMAR1M = Byte.MIN_VALUE;
}
}

protected final void initLMAR1Y(String s) {
if (!s.trim().isEmpty()) {
LMAR1Y = Short.parseShort(s);
} else {
LMAR1Y = Short.MIN_VALUE;
}
}

protected final void initLMCBM1(String s) {
if (!s.trim().isEmpty()) {
LMCBM1 = Byte.parseByte(s);
} else {
LMCBM1 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM2(String s) {
if (!s.trim().isEmpty()) {
LMCBM2 = Byte.parseByte(s);
} else {
LMCBM2 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM3(String s) {
if (!s.trim().isEmpty()) {
LMCBM3 = Byte.parseByte(s);
} else {
LMCBM3 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM4(String s) {
if (!s.trim().isEmpty()) {
LMCBM4 = Byte.parseByte(s);
} else {
LMCBM4 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM5(String s) {
if (!s.trim().isEmpty()) {
LMCBM5 = Byte.parseByte(s);
} else {
LMCBM5 = Byte.MIN_VALUE;
}
}

protected final void initLMCBY41(String s) {
if (!s.trim().isEmpty()) {
LMCBY41 = Short.parseShort(s);
} else {
LMCBY41 = Short.MIN_VALUE;
}
}

protected final void initLMCBY42(String s) {
if (!s.trim().isEmpty()) {
LMCBY42 = Short.parseShort(s);
} else {
LMCBY42 = Short.MIN_VALUE;
}
}

protected final void initLMCBY43(String s) {
if (!s.trim().isEmpty()) {
LMCBY43 = Short.parseShort(s);
} else {
LMCBY43 = Short.MIN_VALUE;
}
}

protected final void initLMCBY44(String s) {
if (!s.trim().isEmpty()) {
LMCBY44 = Short.parseShort(s);
} else {
LMCBY44 = Short.MIN_VALUE;
}
}

protected final void initLMCBY45(String s) {
if (!s.trim().isEmpty()) {
LMCBY45 = Short.parseShort(s);
} else {
LMCBY45 = Short.MIN_VALUE;
}
}

protected final void initLMSPM1(String s) {
if (!s.trim().isEmpty()) {
LMSPM1 = Byte.parseByte(s);
} else {
LMSPM1 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM2(String s) {
if (!s.trim().isEmpty()) {
LMSPM2 = Byte.parseByte(s);
} else {
LMSPM2 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM3(String s) {
if (!s.trim().isEmpty()) {
LMSPM3 = Byte.parseByte(s);
} else {
LMSPM3 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM4(String s) {
if (!s.trim().isEmpty()) {
LMSPM4 = Byte.parseByte(s);
} else {
LMSPM4 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM5(String s) {
if (!s.trim().isEmpty()) {
LMSPM5 = Byte.parseByte(s);
} else {
LMSPM5 = Byte.MIN_VALUE;
}
}

protected final void initLMSPY41(String s) {
if (!s.trim().isEmpty()) {
LMSPY41 = Short.parseShort(s);
} else {
LMSPY41 = Short.MIN_VALUE;
}
}

protected final void initLMSPY42(String s) {
if (!s.trim().isEmpty()) {
LMSPY42 = Short.parseShort(s);
} else {
LMSPY42 = Short.MIN_VALUE;
}
}

protected final void initLMSPY43(String s) {
if (!s.trim().isEmpty()) {
LMSPY43 = Short.parseShort(s);
} else {
LMSPY43 = Short.MIN_VALUE;
}
}

protected final void initLMSPY44(String s) {
if (!s.trim().isEmpty()) {
LMSPY44 = Short.parseShort(s);
} else {
LMSPY44 = Short.MIN_VALUE;
}
}

protected final void initLMSPY45(String s) {
if (!s.trim().isEmpty()) {
LMSPY45 = Short.parseShort(s);
} else {
LMSPY45 = Short.MIN_VALUE;
}
}

protected final void initLNADOPT(String s) {
if (!s.trim().isEmpty()) {
LNADOPT = Byte.parseByte(s);
} else {
LNADOPT = Byte.MIN_VALUE;
}
}

protected final void initLNCOH(String s) {
if (!s.trim().isEmpty()) {
LNCOH = Byte.parseByte(s);
} else {
LNCOH = Byte.MIN_VALUE;
}
}

protected final void initLNPRNT(String s) {
if (!s.trim().isEmpty()) {
LNPRNT = Byte.parseByte(s);
} else {
LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initLOCSERAP(String s) {
if (!s.trim().isEmpty()) {
LOCSERAP = Byte.parseByte(s);
} else {
LOCSERAP = Byte.MIN_VALUE;
}
}

protected final void initLOCSERAS(String s) {
if (!s.trim().isEmpty()) {
LOCSERAS = Byte.parseByte(s);
} else {
LOCSERAS = Byte.MIN_VALUE;
}
}

protected final void initLOCSERB(String s) {
if (!s.trim().isEmpty()) {
LOCSERB = Byte.parseByte(s);
} else {
LOCSERB = Byte.MIN_VALUE;
}
}

protected final void initLOCSERC(String s) {
if (!s.trim().isEmpty()) {
LOCSERC = Byte.parseByte(s);
} else {
LOCSERC = Byte.MIN_VALUE;
}
}

protected final void initLOCSERD(String s) {
if (!s.trim().isEmpty()) {
LOCSERD = Byte.parseByte(s);
} else {
LOCSERD = Byte.MIN_VALUE;
}
}

protected final void initLOCSERE(String s) {
if (!s.trim().isEmpty()) {
LOCSERE = Byte.parseByte(s);
} else {
LOCSERE = Byte.MIN_VALUE;
}
}

protected final void initLPRNT(String s) {
if (!s.trim().isEmpty()) {
LPRNT = Byte.parseByte(s);
} else {
LPRNT = Byte.MIN_VALUE;
}
}

protected final void initLVAG14(String s) {
if (!s.trim().isEmpty()) {
LVAG14 = Byte.parseByte(s);
} else {
LVAG14 = Byte.MIN_VALUE;
}
}

protected final void initLVAG16(String s) {
if (!s.trim().isEmpty()) {
LVAG16 = Byte.parseByte(s);
} else {
LVAG16 = Byte.MIN_VALUE;
}
}

protected final void initLVHM(String s) {
if (!s.trim().isEmpty()) {
LVHM = Byte.parseByte(s);
} else {
LVHM = Byte.MIN_VALUE;
}
}

protected final void initLVSCHDO(String s) {
if (!s.trim().isEmpty()) {
LVSCHDO = Byte.parseByte(s);
} else {
LVSCHDO = Byte.MIN_VALUE;
}
}

protected final void initLWWRONG(String s) {
if (!s.trim().isEmpty()) {
LWWRONG = Byte.parseByte(s);
} else {
LWWRONG = Byte.MIN_VALUE;
}
}

protected final void initMABROAD(String s) {
if (!s.trim().isEmpty()) {
MABROAD = Byte.parseByte(s);
} else {
MABROAD = Byte.MIN_VALUE;
}
}

protected final void initMABROADC1(String s) {
if (!s.trim().isEmpty()) {
MABROADC1 = Short.parseShort(s);
} else {
MABROADC1 = Short.MIN_VALUE;
}
}

protected final void initMABROADC2(String s) {
if (!s.trim().isEmpty()) {
MABROADC2 = Short.parseShort(s);
} else {
MABROADC2 = Short.MIN_VALUE;
}
}

protected final void initMABROADC3(String s) {
if (!s.trim().isEmpty()) {
MABROADC3 = Short.parseShort(s);
} else {
MABROADC3 = Short.MIN_VALUE;
}
}

protected final void initMABROADC4(String s) {
if (!s.trim().isEmpty()) {
MABROADC4 = Short.parseShort(s);
} else {
MABROADC4 = Short.MIN_VALUE;
}
}

protected final void initMABROADC5(String s) {
if (!s.trim().isEmpty()) {
MABROADC5 = Short.parseShort(s);
} else {
MABROADC5 = Short.MIN_VALUE;
}
}

protected final void initMACOB(String s) {
if (!s.trim().isEmpty()) {
MACOB = Byte.parseByte(s);
} else {
MACOB = Byte.MIN_VALUE;
}
}

protected final void initMACURR(String s) {
if (!s.trim().isEmpty()) {
MACURR = Byte.parseByte(s);
} else {
MACURR = Byte.MIN_VALUE;
}
}

protected final void initMAEDQF(String s) {
if (!s.trim().isEmpty()) {
MAEDQF = Byte.parseByte(s);
} else {
MAEDQF = Byte.MIN_VALUE;
}
}

protected final void initMAJ1UKSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
MAJ1UKSOC00_CC = Short.parseShort(s);
} else {
MAJ1UKSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initMAJ1UKSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
MAJ1UKSOC10_CC = Short.parseShort(s);
} else {
MAJ1UKSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initMAJ1UKSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MAJ1UKSOC90_CC = Byte.parseByte(s);
} else {
MAJ1UKSOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMAJCB(String s) {
if (!s.trim().isEmpty()) {
MAJCB = Byte.parseByte(s);
} else {
MAJCB = Byte.MIN_VALUE;
}
}

protected final void initMAJLCBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
MAJLCBSOC00_CC = Short.parseShort(s);
} else {
MAJLCBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initMAJLCBSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
MAJLCBSOC10_CC = Short.parseShort(s);
} else {
MAJLCBSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initMAJLCBSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MAJLCBSOC90_CC = Byte.parseByte(s);
} else {
MAJLCBSOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMAJU(String s) {
if (!s.trim().isEmpty()) {
MAJU = Byte.parseByte(s);
} else {
MAJU = Byte.MIN_VALUE;
}
}

protected final void initMAJUK(String s) {
if (!s.trim().isEmpty()) {
MAJUK = Byte.parseByte(s);
} else {
MAJUK = Byte.MIN_VALUE;
}
}

protected final void initMAJUKEVR(String s) {
if (!s.trim().isEmpty()) {
MAJUKEVR = Byte.parseByte(s);
} else {
MAJUKEVR = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC5_DV = Byte.parseByte(s);
} else {
MANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initMARSTAT(String s) {
if (!s.trim().isEmpty()) {
MARSTAT = Byte.parseByte(s);
} else {
MARSTAT = Byte.MIN_VALUE;
}
}

protected final void initMASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC00_CC = Short.parseShort(s);
} else {
MASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC10_CC = Short.parseShort(s);
} else {
MASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC90_CC = Byte.parseByte(s);
} else {
MASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMASTAT_DV(String s) {
if (!s.trim().isEmpty()) {
MASTAT_DV = Byte.parseByte(s);
} else {
MASTAT_DV = Byte.MIN_VALUE;
}
}

protected final void initMATLEAVE(String s) {
if (!s.trim().isEmpty()) {
MATLEAVE = Byte.parseByte(s);
} else {
MATLEAVE = Byte.MIN_VALUE;
}
}

protected final void initMATLV(String s) {
if (!s.trim().isEmpty()) {
MATLV = Byte.parseByte(s);
} else {
MATLV = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDD(String s) {
if (!s.trim().isEmpty()) {
MATLVENDD = Byte.parseByte(s);
} else {
MATLVENDD = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDM(String s) {
if (!s.trim().isEmpty()) {
MATLVENDM = Byte.parseByte(s);
} else {
MATLVENDM = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDY4(String s) {
if (!s.trim().isEmpty()) {
MATLVENDY4 = Short.parseShort(s);
} else {
MATLVENDY4 = Short.MIN_VALUE;
}
}

protected final void initMATLVSTD(String s) {
if (!s.trim().isEmpty()) {
MATLVSTD = Byte.parseByte(s);
} else {
MATLVSTD = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTM(String s) {
if (!s.trim().isEmpty()) {
MATLVSTM = Byte.parseByte(s);
} else {
MATLVSTM = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTY4(String s) {
if (!s.trim().isEmpty()) {
MATLVSTY4 = Short.parseShort(s);
} else {
MATLVSTY4 = Short.MIN_VALUE;
}
}

protected final void initMAYRUK(String s) {
if (!s.trim().isEmpty()) {
MAYRUK = Byte.parseByte(s);
} else {
MAYRUK = Byte.MIN_VALUE;
}
}

protected final void initMAYRUK1(String s) {
if (!s.trim().isEmpty()) {
MAYRUK1 = Short.parseShort(s);
} else {
MAYRUK1 = Short.MIN_VALUE;
}
}

protected final void initMEMPLOY(String s) {
if (!s.trim().isEmpty()) {
MEMPLOY = Byte.parseByte(s);
} else {
MEMPLOY = Byte.MIN_VALUE;
}
}

protected final void initMGMROB(String s) {
if (!s.trim().isEmpty()) {
MGMROB = Byte.parseByte(s);
} else {
MGMROB = Byte.MIN_VALUE;
}
}

protected final void initMGPROB(String s) {
if (!s.trim().isEmpty()) {
MGPROB = Byte.parseByte(s);
} else {
MGPROB = Byte.MIN_VALUE;
}
}

protected final void initMINDIRECT(String s) {
if (!s.trim().isEmpty()) {
MINDIRECT = Byte.parseByte(s);
} else {
MINDIRECT = Byte.MIN_VALUE;
}
}

protected final void initMINDIRECTC1(String s) {
if (!s.trim().isEmpty()) {
MINDIRECTC1 = Short.parseShort(s);
} else {
MINDIRECTC1 = Short.MIN_VALUE;
}
}

protected final void initMINDIRECTC2(String s) {
if (!s.trim().isEmpty()) {
MINDIRECTC2 = Short.parseShort(s);
} else {
MINDIRECTC2 = Short.MIN_VALUE;
}
}

protected final void initMINDIRECTC3(String s) {
if (!s.trim().isEmpty()) {
MINDIRECTC3 = Short.parseShort(s);
} else {
MINDIRECTC3 = Short.MIN_VALUE;
}
}

protected final void initMINDIRECTC4(String s) {
if (!s.trim().isEmpty()) {
MINDIRECTC4 = Short.parseShort(s);
} else {
MINDIRECTC4 = Short.MIN_VALUE;
}
}

protected final void initMINDIRECTC5(String s) {
if (!s.trim().isEmpty()) {
MINDIRECTC5 = Short.parseShort(s);
} else {
MINDIRECTC5 = Short.MIN_VALUE;
}
}

protected final void initMINTENT(String s) {
if (!s.trim().isEmpty()) {
MINTENT = Byte.parseByte(s);
} else {
MINTENT = Byte.MIN_VALUE;
}
}

protected final void initMINTWHEN(String s) {
if (!s.trim().isEmpty()) {
MINTWHEN = Byte.parseByte(s);
} else {
MINTWHEN = Byte.MIN_VALUE;
}
}

protected final void initMLAGST(String s) {
if (!s.trim().isEmpty()) {
MLAGST = Byte.parseByte(s);
} else {
MLAGST = Byte.MIN_VALUE;
}
}

protected final void initMLAGSTU(String s) {
if (!s.trim().isEmpty()) {
MLAGSTU = Byte.parseByte(s);
} else {
MLAGSTU = Byte.MIN_VALUE;
}
}

protected final void initMLFUTR(String s) {
if (!s.trim().isEmpty()) {
MLFUTR = Byte.parseByte(s);
} else {
MLFUTR = Byte.MIN_VALUE;
}
}

protected final void initMLIVED(String s) {
if (!s.trim().isEmpty()) {
MLIVED = Byte.parseByte(s);
} else {
MLIVED = Byte.MIN_VALUE;
}
}

protected final void initMLIVEDC1(String s) {
if (!s.trim().isEmpty()) {
MLIVEDC1 = Short.parseShort(s);
} else {
MLIVEDC1 = Short.MIN_VALUE;
}
}

protected final void initMLIVEDC2(String s) {
if (!s.trim().isEmpty()) {
MLIVEDC2 = Short.parseShort(s);
} else {
MLIVEDC2 = Short.MIN_VALUE;
}
}

protected final void initMLIVEDC3(String s) {
if (!s.trim().isEmpty()) {
MLIVEDC3 = Short.parseShort(s);
} else {
MLIVEDC3 = Short.MIN_VALUE;
}
}

protected final void initMLIVEDC4(String s) {
if (!s.trim().isEmpty()) {
MLIVEDC4 = Short.parseShort(s);
} else {
MLIVEDC4 = Short.MIN_VALUE;
}
}

protected final void initMLIVEDC5(String s) {
if (!s.trim().isEmpty()) {
MLIVEDC5 = Short.parseShort(s);
} else {
MLIVEDC5 = Short.MIN_VALUE;
}
}

protected final void initMLIVEDIST(String s) {
if (!s.trim().isEmpty()) {
MLIVEDIST = Byte.parseByte(s);
} else {
MLIVEDIST = Byte.MIN_VALUE;
}
}

protected final void initMLIVEDIST5(String s) {
if (!s.trim().isEmpty()) {
MLIVEDIST5 = Byte.parseByte(s);
} else {
MLIVEDIST5 = Byte.MIN_VALUE;
}
}

protected final void initMLIVEDISTF(String s) {
if (!s.trim().isEmpty()) {
MLIVEDISTF = Byte.parseByte(s);
} else {
MLIVEDISTF = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT1(String s) {
if (!s.trim().isEmpty()) {
MLRNOT1 = Byte.parseByte(s);
} else {
MLRNOT1 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT10(String s) {
if (!s.trim().isEmpty()) {
MLRNOT10 = Byte.parseByte(s);
} else {
MLRNOT10 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT11(String s) {
if (!s.trim().isEmpty()) {
MLRNOT11 = Byte.parseByte(s);
} else {
MLRNOT11 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT12(String s) {
if (!s.trim().isEmpty()) {
MLRNOT12 = Byte.parseByte(s);
} else {
MLRNOT12 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT13(String s) {
if (!s.trim().isEmpty()) {
MLRNOT13 = Byte.parseByte(s);
} else {
MLRNOT13 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT2(String s) {
if (!s.trim().isEmpty()) {
MLRNOT2 = Byte.parseByte(s);
} else {
MLRNOT2 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT3(String s) {
if (!s.trim().isEmpty()) {
MLRNOT3 = Byte.parseByte(s);
} else {
MLRNOT3 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT4(String s) {
if (!s.trim().isEmpty()) {
MLRNOT4 = Byte.parseByte(s);
} else {
MLRNOT4 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT5(String s) {
if (!s.trim().isEmpty()) {
MLRNOT5 = Byte.parseByte(s);
} else {
MLRNOT5 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT6(String s) {
if (!s.trim().isEmpty()) {
MLRNOT6 = Byte.parseByte(s);
} else {
MLRNOT6 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT7(String s) {
if (!s.trim().isEmpty()) {
MLRNOT7 = Byte.parseByte(s);
} else {
MLRNOT7 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT8(String s) {
if (!s.trim().isEmpty()) {
MLRNOT8 = Byte.parseByte(s);
} else {
MLRNOT8 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT9(String s) {
if (!s.trim().isEmpty()) {
MLRNOT9 = Byte.parseByte(s);
} else {
MLRNOT9 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT97(String s) {
if (!s.trim().isEmpty()) {
MLRNOT97 = Byte.parseByte(s);
} else {
MLRNOT97 = Byte.MIN_VALUE;
}
}

protected final void initMLSTATCHK(String s) {
if (!s.trim().isEmpty()) {
MLSTATCHK = Byte.parseByte(s);
} else {
MLSTATCHK = Byte.MIN_VALUE;
}
}

protected final void initMLWKFPT(String s) {
if (!s.trim().isEmpty()) {
MLWKFPT = Byte.parseByte(s);
} else {
MLWKFPT = Byte.MIN_VALUE;
}
}

protected final void initMNABROAD(String s) {
if (!s.trim().isEmpty()) {
MNABROAD = Byte.parseByte(s);
} else {
MNABROAD = Byte.MIN_VALUE;
}
}

protected final void initMNLIVED(String s) {
if (!s.trim().isEmpty()) {
MNLIVED = Byte.parseByte(s);
} else {
MNLIVED = Byte.MIN_VALUE;
}
}

protected final void initMNMOVES(String s) {
if (!s.trim().isEmpty()) {
MNMOVES = Byte.parseByte(s);
} else {
MNMOVES = Byte.MIN_VALUE;
}
}

protected final void initMNOTHERC(String s) {
if (!s.trim().isEmpty()) {
MNOTHERC = Byte.parseByte(s);
} else {
MNOTHERC = Byte.MIN_VALUE;
}
}

protected final void initMNPID(String s) {
if (!s.trim().isEmpty()) {
MNPID = Integer.parseInt(s);
} else {
MNPID = Integer.MIN_VALUE;
}
}

protected final void initMNPNO(String s) {
if (!s.trim().isEmpty()) {
MNPNO = Byte.parseByte(s);
} else {
MNPNO = Byte.MIN_VALUE;
}
}

protected final void initMNSPID(String s) {
if (!s.trim().isEmpty()) {
MNSPID = Integer.parseInt(s);
} else {
MNSPID = Integer.MIN_VALUE;
}
}

protected final void initMNSPNO(String s) {
if (!s.trim().isEmpty()) {
MNSPNO = Byte.parseByte(s);
} else {
MNSPNO = Byte.MIN_VALUE;
}
}

protected final void initMOBCOMP(String s) {
if (!s.trim().isEmpty()) {
MOBCOMP = Byte.parseByte(s);
} else {
MOBCOMP = Byte.MIN_VALUE;
}
}

protected final void initMOBUSE(String s) {
if (!s.trim().isEmpty()) {
MOBUSE = Byte.parseByte(s);
} else {
MOBUSE = Byte.MIN_VALUE;
}
}

protected final void initMONTH(String s) {
if (!s.trim().isEmpty()) {
MONTH = Byte.parseByte(s);
} else {
MONTH = Byte.MIN_VALUE;
}
}

protected final void initMOVDIR(String s) {
if (!s.trim().isEmpty()) {
MOVDIR = Byte.parseByte(s);
} else {
MOVDIR = Byte.MIN_VALUE;
}
}

protected final void initMOVEOTH_CODE(String s) {
if (!s.trim().isEmpty()) {
MOVEOTH_CODE = Byte.parseByte(s);
} else {
MOVEOTH_CODE = Byte.MIN_VALUE;
}
}

protected final void initMOVY11(String s) {
if (!s.trim().isEmpty()) {
MOVY11 = Byte.parseByte(s);
} else {
MOVY11 = Byte.MIN_VALUE;
}
}

protected final void initMOVY12(String s) {
if (!s.trim().isEmpty()) {
MOVY12 = Byte.parseByte(s);
} else {
MOVY12 = Byte.MIN_VALUE;
}
}

protected final void initMOVY13(String s) {
if (!s.trim().isEmpty()) {
MOVY13 = Byte.parseByte(s);
} else {
MOVY13 = Byte.MIN_VALUE;
}
}

protected final void initMOVY14(String s) {
if (!s.trim().isEmpty()) {
MOVY14 = Byte.parseByte(s);
} else {
MOVY14 = Byte.MIN_VALUE;
}
}

protected final void initMOVY15(String s) {
if (!s.trim().isEmpty()) {
MOVY15 = Byte.parseByte(s);
} else {
MOVY15 = Byte.MIN_VALUE;
}
}

protected final void initMOVY16(String s) {
if (!s.trim().isEmpty()) {
MOVY16 = Byte.parseByte(s);
} else {
MOVY16 = Byte.MIN_VALUE;
}
}

protected final void initMPLIKE(String s) {
if (!s.trim().isEmpty()) {
MPLIKE = Byte.parseByte(s);
} else {
MPLIKE = Byte.MIN_VALUE;
}
}

protected final void initMPNO(String s) {
if (!s.trim().isEmpty()) {
MPNO = Byte.parseByte(s);
} else {
MPNO = Byte.MIN_VALUE;
}
}

protected final void initMPWEB(String s) {
if (!s.trim().isEmpty()) {
MPWEB = Byte.parseByte(s);
} else {
MPWEB = Byte.MIN_VALUE;
}
}

protected final void initMREASON1(String s) {
if (!s.trim().isEmpty()) {
MREASON1 = Byte.parseByte(s);
} else {
MREASON1 = Byte.MIN_VALUE;
}
}

protected final void initMREASON2(String s) {
if (!s.trim().isEmpty()) {
MREASON2 = Byte.parseByte(s);
} else {
MREASON2 = Byte.MIN_VALUE;
}
}

protected final void initMREASON3(String s) {
if (!s.trim().isEmpty()) {
MREASON3 = Byte.parseByte(s);
} else {
MREASON3 = Byte.MIN_VALUE;
}
}

protected final void initMREASON4(String s) {
if (!s.trim().isEmpty()) {
MREASON4 = Byte.parseByte(s);
} else {
MREASON4 = Byte.MIN_VALUE;
}
}

protected final void initMREASON5(String s) {
if (!s.trim().isEmpty()) {
MREASON5 = Byte.parseByte(s);
} else {
MREASON5 = Byte.MIN_VALUE;
}
}

protected final void initMREASON6(String s) {
if (!s.trim().isEmpty()) {
MREASON6 = Byte.parseByte(s);
} else {
MREASON6 = Byte.MIN_VALUE;
}
}

protected final void initMREASON7(String s) {
if (!s.trim().isEmpty()) {
MREASON7 = Byte.parseByte(s);
} else {
MREASON7 = Byte.MIN_VALUE;
}
}

protected final void initMREASON97(String s) {
if (!s.trim().isEmpty()) {
MREASON97 = Byte.parseByte(s);
} else {
MREASON97 = Byte.MIN_VALUE;
}
}

protected final void initMREASONO_CODE(String s) {
if (!s.trim().isEmpty()) {
MREASONO_CODE = Byte.parseByte(s);
} else {
MREASONO_CODE = Byte.MIN_VALUE;
}
}

protected final void initMRETURNED(String s) {
if (!s.trim().isEmpty()) {
MRETURNED = Byte.parseByte(s);
} else {
MRETURNED = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH1(String s) {
if (!s.trim().isEmpty()) {
MSTATCH1 = Byte.parseByte(s);
} else {
MSTATCH1 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH2(String s) {
if (!s.trim().isEmpty()) {
MSTATCH2 = Byte.parseByte(s);
} else {
MSTATCH2 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH3(String s) {
if (!s.trim().isEmpty()) {
MSTATCH3 = Byte.parseByte(s);
} else {
MSTATCH3 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH4(String s) {
if (!s.trim().isEmpty()) {
MSTATCH4 = Byte.parseByte(s);
} else {
MSTATCH4 = Byte.MIN_VALUE;
}
}

protected final void initMSTATSAM(String s) {
if (!s.trim().isEmpty()) {
MSTATSAM = Short.parseShort(s);
} else {
MSTATSAM = Short.MIN_VALUE;
}
}

protected final void initMSTATSAMN(String s) {
if (!s.trim().isEmpty()) {
MSTATSAMN = Byte.parseByte(s);
} else {
MSTATSAMN = Byte.MIN_VALUE;
}
}

protected final void initMVEVER(String s) {
if (!s.trim().isEmpty()) {
MVEVER = Byte.parseByte(s);
} else {
MVEVER = Byte.MIN_VALUE;
}
}

protected final void initMVMNTH(String s) {
if (!s.trim().isEmpty()) {
MVMNTH = Byte.parseByte(s);
} else {
MVMNTH = Byte.MIN_VALUE;
}
}

protected final void initMVYR(String s) {
if (!s.trim().isEmpty()) {
MVYR = Short.parseShort(s);
} else {
MVYR = Short.MIN_VALUE;
}
}

protected final void initNADOPTCH(String s) {
if (!s.trim().isEmpty()) {
NADOPTCH = Byte.parseByte(s);
} else {
NADOPTCH = Byte.MIN_VALUE;
}
}

protected final void initNAIDXHH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH = Byte.parseByte(s);
} else {
NAIDXHH = Byte.MIN_VALUE;
}
}

protected final void initNATID1(String s) {
if (!s.trim().isEmpty()) {
NATID1 = Byte.parseByte(s);
} else {
NATID1 = Byte.MIN_VALUE;
}
}

protected final void initNATID2(String s) {
if (!s.trim().isEmpty()) {
NATID2 = Byte.parseByte(s);
} else {
NATID2 = Byte.MIN_VALUE;
}
}

protected final void initNATID3(String s) {
if (!s.trim().isEmpty()) {
NATID3 = Byte.parseByte(s);
} else {
NATID3 = Byte.MIN_VALUE;
}
}

protected final void initNATID4(String s) {
if (!s.trim().isEmpty()) {
NATID4 = Byte.parseByte(s);
} else {
NATID4 = Byte.MIN_VALUE;
}
}

protected final void initNATID5(String s) {
if (!s.trim().isEmpty()) {
NATID5 = Byte.parseByte(s);
} else {
NATID5 = Byte.MIN_VALUE;
}
}

protected final void initNATID6(String s) {
if (!s.trim().isEmpty()) {
NATID6 = Byte.parseByte(s);
} else {
NATID6 = Byte.MIN_VALUE;
}
}

protected final void initNATID97(String s) {
if (!s.trim().isEmpty()) {
NATID97 = Byte.parseByte(s);
} else {
NATID97 = Byte.MIN_VALUE;
}
}

protected final void initNBRCOH1(String s) {
if (!s.trim().isEmpty()) {
NBRCOH1 = Byte.parseByte(s);
} else {
NBRCOH1 = Byte.MIN_VALUE;
}
}

protected final void initNBRCOH2(String s) {
if (!s.trim().isEmpty()) {
NBRCOH2 = Byte.parseByte(s);
} else {
NBRCOH2 = Byte.MIN_VALUE;
}
}

protected final void initNBRCOH3(String s) {
if (!s.trim().isEmpty()) {
NBRCOH3 = Byte.parseByte(s);
} else {
NBRCOH3 = Byte.MIN_VALUE;
}
}

protected final void initNBRCOH4(String s) {
if (!s.trim().isEmpty()) {
NBRCOH4 = Byte.parseByte(s);
} else {
NBRCOH4 = Byte.MIN_VALUE;
}
}

protected final void initNBRCOHDK_DV(String s) {
if (!s.trim().isEmpty()) {
NBRCOHDK_DV = Byte.parseByte(s);
} else {
NBRCOHDK_DV = Byte.MIN_VALUE;
}
}

protected final void initNBRCOH_DV(String s) {
if (!s.trim().isEmpty()) {
NBRCOH_DV = Byte.parseByte(s);
} else {
NBRCOH_DV = Byte.MIN_VALUE;
}
}

protected final void initNBRSNCI_DV(String s) {
if (!s.trim().isEmpty()) {
NBRSNCI_DV = Double.parseDouble(s);
} else {
NBRSNCI_DV = Double.NaN;
}
}

protected final void initNCH10(String s) {
if (!s.trim().isEmpty()) {
NCH10 = Byte.parseByte(s);
} else {
NCH10 = Byte.MIN_VALUE;
}
}

protected final void initNCH10TO15(String s) {
if (!s.trim().isEmpty()) {
NCH10TO15 = Byte.parseByte(s);
} else {
NCH10TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH14RESP(String s) {
if (!s.trim().isEmpty()) {
NCH14RESP = Byte.parseByte(s);
} else {
NCH14RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH3RESP(String s) {
if (!s.trim().isEmpty()) {
NCH3RESP = Byte.parseByte(s);
} else {
NCH3RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH415RESP(String s) {
if (!s.trim().isEmpty()) {
NCH415RESP = Byte.parseByte(s);
} else {
NCH415RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5RESP(String s) {
if (!s.trim().isEmpty()) {
NCH5RESP = Byte.parseByte(s);
} else {
NCH5RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5TO15(String s) {
if (!s.trim().isEmpty()) {
NCH5TO15 = Byte.parseByte(s);
} else {
NCH5TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH8RESP(String s) {
if (!s.trim().isEmpty()) {
NCH8RESP = Byte.parseByte(s);
} else {
NCH8RESP = Byte.MIN_VALUE;
}
}

protected final void initNCHILD(String s) {
if (!s.trim().isEmpty()) {
NCHILD = Byte.parseByte(s);
} else {
NCHILD = Byte.MIN_VALUE;
}
}

protected final void initNCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHILD_DV = Short.parseShort(s);
} else {
NCHILD_DV = Short.MIN_VALUE;
}
}

protected final void initNCHRESP(String s) {
if (!s.trim().isEmpty()) {
NCHRESP = Byte.parseByte(s);
} else {
NCHRESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUNDER16(String s) {
if (!s.trim().isEmpty()) {
NCHUNDER16 = Byte.parseByte(s);
} else {
NCHUNDER16 = Byte.MIN_VALUE;
}
}

protected final void initNCIGS(String s) {
if (!s.trim().isEmpty()) {
NCIGS = Short.parseShort(s);
} else {
NCIGS = Short.MIN_VALUE;
}
}

protected final void initNCRR1(String s) {
if (!s.trim().isEmpty()) {
NCRR1 = Byte.parseByte(s);
} else {
NCRR1 = Byte.MIN_VALUE;
}
}

protected final void initNCRR11(String s) {
if (!s.trim().isEmpty()) {
NCRR11 = Byte.parseByte(s);
} else {
NCRR11 = Byte.MIN_VALUE;
}
}

protected final void initNCRR12(String s) {
if (!s.trim().isEmpty()) {
NCRR12 = Byte.parseByte(s);
} else {
NCRR12 = Byte.MIN_VALUE;
}
}

protected final void initNCRR13(String s) {
if (!s.trim().isEmpty()) {
NCRR13 = Byte.parseByte(s);
} else {
NCRR13 = Byte.MIN_VALUE;
}
}

protected final void initNCRR14(String s) {
if (!s.trim().isEmpty()) {
NCRR14 = Byte.parseByte(s);
} else {
NCRR14 = Byte.MIN_VALUE;
}
}

protected final void initNCRR15(String s) {
if (!s.trim().isEmpty()) {
NCRR15 = Byte.parseByte(s);
} else {
NCRR15 = Byte.MIN_VALUE;
}
}

protected final void initNCRR16(String s) {
if (!s.trim().isEmpty()) {
NCRR16 = Byte.parseByte(s);
} else {
NCRR16 = Byte.MIN_VALUE;
}
}

protected final void initNCRR3(String s) {
if (!s.trim().isEmpty()) {
NCRR3 = Byte.parseByte(s);
} else {
NCRR3 = Byte.MIN_VALUE;
}
}

protected final void initNCRR4(String s) {
if (!s.trim().isEmpty()) {
NCRR4 = Byte.parseByte(s);
} else {
NCRR4 = Byte.MIN_VALUE;
}
}

protected final void initNCRR5(String s) {
if (!s.trim().isEmpty()) {
NCRR5 = Byte.parseByte(s);
} else {
NCRR5 = Byte.MIN_VALUE;
}
}

protected final void initNCRR6(String s) {
if (!s.trim().isEmpty()) {
NCRR6 = Byte.parseByte(s);
} else {
NCRR6 = Byte.MIN_VALUE;
}
}

protected final void initNCRR8(String s) {
if (!s.trim().isEmpty()) {
NCRR8 = Byte.parseByte(s);
} else {
NCRR8 = Byte.MIN_VALUE;
}
}

protected final void initNCRR9(String s) {
if (!s.trim().isEmpty()) {
NCRR9 = Byte.parseByte(s);
} else {
NCRR9 = Byte.MIN_VALUE;
}
}

protected final void initNCRRM(String s) {
if (!s.trim().isEmpty()) {
NCRRM = Byte.parseByte(s);
} else {
NCRRM = Byte.MIN_VALUE;
}
}

protected final void initNCRRY4(String s) {
if (!s.trim().isEmpty()) {
NCRRY4 = Short.parseShort(s);
} else {
NCRRY4 = Short.MIN_VALUE;
}
}

protected final void initNDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
NDEPCHL_DV = Byte.parseByte(s);
} else {
NDEPCHL_DV = Byte.MIN_VALUE;
}
}

protected final void initNETAG_1(String s) {
if (!s.trim().isEmpty()) {
NETAG_1 = Short.parseShort(s);
} else {
NETAG_1 = Short.MIN_VALUE;
}
}

protected final void initNETAG_2(String s) {
if (!s.trim().isEmpty()) {
NETAG_2 = Short.parseShort(s);
} else {
NETAG_2 = Short.MIN_VALUE;
}
}

protected final void initNETAG_3(String s) {
if (!s.trim().isEmpty()) {
NETAG_3 = Short.parseShort(s);
} else {
NETAG_3 = Short.MIN_VALUE;
}
}

protected final void initNETCHT(String s) {
if (!s.trim().isEmpty()) {
NETCHT = Byte.parseByte(s);
} else {
NETCHT = Byte.MIN_VALUE;
}
}

protected final void initNETDO10_1(String s) {
if (!s.trim().isEmpty()) {
NETDO10_1 = Byte.parseByte(s);
} else {
NETDO10_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO10_2(String s) {
if (!s.trim().isEmpty()) {
NETDO10_2 = Byte.parseByte(s);
} else {
NETDO10_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO10_3(String s) {
if (!s.trim().isEmpty()) {
NETDO10_3 = Byte.parseByte(s);
} else {
NETDO10_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO1_1(String s) {
if (!s.trim().isEmpty()) {
NETDO1_1 = Byte.parseByte(s);
} else {
NETDO1_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO1_2(String s) {
if (!s.trim().isEmpty()) {
NETDO1_2 = Byte.parseByte(s);
} else {
NETDO1_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO1_3(String s) {
if (!s.trim().isEmpty()) {
NETDO1_3 = Byte.parseByte(s);
} else {
NETDO1_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO2_1(String s) {
if (!s.trim().isEmpty()) {
NETDO2_1 = Byte.parseByte(s);
} else {
NETDO2_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO2_2(String s) {
if (!s.trim().isEmpty()) {
NETDO2_2 = Byte.parseByte(s);
} else {
NETDO2_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO2_3(String s) {
if (!s.trim().isEmpty()) {
NETDO2_3 = Byte.parseByte(s);
} else {
NETDO2_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO3_1(String s) {
if (!s.trim().isEmpty()) {
NETDO3_1 = Byte.parseByte(s);
} else {
NETDO3_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO3_2(String s) {
if (!s.trim().isEmpty()) {
NETDO3_2 = Byte.parseByte(s);
} else {
NETDO3_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO3_3(String s) {
if (!s.trim().isEmpty()) {
NETDO3_3 = Byte.parseByte(s);
} else {
NETDO3_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO4_1(String s) {
if (!s.trim().isEmpty()) {
NETDO4_1 = Byte.parseByte(s);
} else {
NETDO4_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO4_2(String s) {
if (!s.trim().isEmpty()) {
NETDO4_2 = Byte.parseByte(s);
} else {
NETDO4_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO4_3(String s) {
if (!s.trim().isEmpty()) {
NETDO4_3 = Byte.parseByte(s);
} else {
NETDO4_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO5_1(String s) {
if (!s.trim().isEmpty()) {
NETDO5_1 = Byte.parseByte(s);
} else {
NETDO5_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO5_2(String s) {
if (!s.trim().isEmpty()) {
NETDO5_2 = Byte.parseByte(s);
} else {
NETDO5_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO5_3(String s) {
if (!s.trim().isEmpty()) {
NETDO5_3 = Byte.parseByte(s);
} else {
NETDO5_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO6_1(String s) {
if (!s.trim().isEmpty()) {
NETDO6_1 = Byte.parseByte(s);
} else {
NETDO6_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO6_2(String s) {
if (!s.trim().isEmpty()) {
NETDO6_2 = Byte.parseByte(s);
} else {
NETDO6_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO6_3(String s) {
if (!s.trim().isEmpty()) {
NETDO6_3 = Byte.parseByte(s);
} else {
NETDO6_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO7_1(String s) {
if (!s.trim().isEmpty()) {
NETDO7_1 = Byte.parseByte(s);
} else {
NETDO7_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO7_2(String s) {
if (!s.trim().isEmpty()) {
NETDO7_2 = Byte.parseByte(s);
} else {
NETDO7_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO7_3(String s) {
if (!s.trim().isEmpty()) {
NETDO7_3 = Byte.parseByte(s);
} else {
NETDO7_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO8_1(String s) {
if (!s.trim().isEmpty()) {
NETDO8_1 = Byte.parseByte(s);
} else {
NETDO8_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO8_2(String s) {
if (!s.trim().isEmpty()) {
NETDO8_2 = Byte.parseByte(s);
} else {
NETDO8_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO8_3(String s) {
if (!s.trim().isEmpty()) {
NETDO8_3 = Byte.parseByte(s);
} else {
NETDO8_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO96_1(String s) {
if (!s.trim().isEmpty()) {
NETDO96_1 = Byte.parseByte(s);
} else {
NETDO96_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO96_2(String s) {
if (!s.trim().isEmpty()) {
NETDO96_2 = Byte.parseByte(s);
} else {
NETDO96_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO96_3(String s) {
if (!s.trim().isEmpty()) {
NETDO96_3 = Byte.parseByte(s);
} else {
NETDO96_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO97_1(String s) {
if (!s.trim().isEmpty()) {
NETDO97_1 = Byte.parseByte(s);
} else {
NETDO97_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO97_2(String s) {
if (!s.trim().isEmpty()) {
NETDO97_2 = Byte.parseByte(s);
} else {
NETDO97_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO97_3(String s) {
if (!s.trim().isEmpty()) {
NETDO97_3 = Byte.parseByte(s);
} else {
NETDO97_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO9_1(String s) {
if (!s.trim().isEmpty()) {
NETDO9_1 = Byte.parseByte(s);
} else {
NETDO9_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO9_2(String s) {
if (!s.trim().isEmpty()) {
NETDO9_2 = Byte.parseByte(s);
} else {
NETDO9_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO9_3(String s) {
if (!s.trim().isEmpty()) {
NETDO9_3 = Byte.parseByte(s);
} else {
NETDO9_3 = Byte.MIN_VALUE;
}
}

protected final void initNETETAT_1(String s) {
if (!s.trim().isEmpty()) {
NETETAT_1 = Byte.parseByte(s);
} else {
NETETAT_1 = Byte.MIN_VALUE;
}
}

protected final void initNETETAT_2(String s) {
if (!s.trim().isEmpty()) {
NETETAT_2 = Byte.parseByte(s);
} else {
NETETAT_2 = Byte.MIN_VALUE;
}
}

protected final void initNETETAT_3(String s) {
if (!s.trim().isEmpty()) {
NETETAT_3 = Byte.parseByte(s);
} else {
NETETAT_3 = Byte.MIN_VALUE;
}
}

protected final void initNETETBT_1(String s) {
if (!s.trim().isEmpty()) {
NETETBT_1 = Byte.parseByte(s);
} else {
NETETBT_1 = Byte.MIN_VALUE;
}
}

protected final void initNETETBT_2(String s) {
if (!s.trim().isEmpty()) {
NETETBT_2 = Byte.parseByte(s);
} else {
NETETBT_2 = Byte.MIN_VALUE;
}
}

protected final void initNETETBT_3(String s) {
if (!s.trim().isEmpty()) {
NETETBT_3 = Byte.parseByte(s);
} else {
NETETBT_3 = Byte.MIN_VALUE;
}
}

protected final void initNETETMT_1(String s) {
if (!s.trim().isEmpty()) {
NETETMT_1 = Byte.parseByte(s);
} else {
NETETMT_1 = Byte.MIN_VALUE;
}
}

protected final void initNETETMT_2(String s) {
if (!s.trim().isEmpty()) {
NETETMT_2 = Byte.parseByte(s);
} else {
NETETMT_2 = Byte.MIN_VALUE;
}
}

protected final void initNETETMT_3(String s) {
if (!s.trim().isEmpty()) {
NETETMT_3 = Byte.parseByte(s);
} else {
NETETMT_3 = Byte.MIN_VALUE;
}
}

protected final void initNETETT_1(String s) {
if (!s.trim().isEmpty()) {
NETETT_1 = Byte.parseByte(s);
} else {
NETETT_1 = Byte.MIN_VALUE;
}
}

protected final void initNETETT_2(String s) {
if (!s.trim().isEmpty()) {
NETETT_2 = Byte.parseByte(s);
} else {
NETETT_2 = Byte.MIN_VALUE;
}
}

protected final void initNETETT_3(String s) {
if (!s.trim().isEmpty()) {
NETETT_3 = Byte.parseByte(s);
} else {
NETETT_3 = Byte.MIN_VALUE;
}
}

protected final void initNETETWT_1(String s) {
if (!s.trim().isEmpty()) {
NETETWT_1 = Byte.parseByte(s);
} else {
NETETWT_1 = Byte.MIN_VALUE;
}
}

protected final void initNETETWT_2(String s) {
if (!s.trim().isEmpty()) {
NETETWT_2 = Byte.parseByte(s);
} else {
NETETWT_2 = Byte.MIN_VALUE;
}
}

protected final void initNETETWT_3(String s) {
if (!s.trim().isEmpty()) {
NETETWT_3 = Byte.parseByte(s);
} else {
NETETWT_3 = Byte.MIN_VALUE;
}
}

protected final void initNETET_1(String s) {
if (!s.trim().isEmpty()) {
NETET_1 = Byte.parseByte(s);
} else {
NETET_1 = Byte.MIN_VALUE;
}
}

protected final void initNETET_2(String s) {
if (!s.trim().isEmpty()) {
NETET_2 = Byte.parseByte(s);
} else {
NETET_2 = Byte.MIN_VALUE;
}
}

protected final void initNETET_3(String s) {
if (!s.trim().isEmpty()) {
NETET_3 = Byte.parseByte(s);
} else {
NETET_3 = Byte.MIN_VALUE;
}
}

protected final void initNETJB_1(String s) {
if (!s.trim().isEmpty()) {
NETJB_1 = Byte.parseByte(s);
} else {
NETJB_1 = Byte.MIN_VALUE;
}
}

protected final void initNETJB_2(String s) {
if (!s.trim().isEmpty()) {
NETJB_2 = Byte.parseByte(s);
} else {
NETJB_2 = Byte.MIN_VALUE;
}
}

protected final void initNETJB_3(String s) {
if (!s.trim().isEmpty()) {
NETJB_3 = Byte.parseByte(s);
} else {
NETJB_3 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_1(String s) {
if (!s.trim().isEmpty()) {
NETKN_1 = Byte.parseByte(s);
} else {
NETKN_1 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_2(String s) {
if (!s.trim().isEmpty()) {
NETKN_2 = Byte.parseByte(s);
} else {
NETKN_2 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_3(String s) {
if (!s.trim().isEmpty()) {
NETKN_3 = Byte.parseByte(s);
} else {
NETKN_3 = Byte.MIN_VALUE;
}
}

protected final void initNETLV_1(String s) {
if (!s.trim().isEmpty()) {
NETLV_1 = Byte.parseByte(s);
} else {
NETLV_1 = Byte.MIN_VALUE;
}
}

protected final void initNETLV_2(String s) {
if (!s.trim().isEmpty()) {
NETLV_2 = Byte.parseByte(s);
} else {
NETLV_2 = Byte.MIN_VALUE;
}
}

protected final void initNETLV_3(String s) {
if (!s.trim().isEmpty()) {
NETLV_3 = Byte.parseByte(s);
} else {
NETLV_3 = Byte.MIN_VALUE;
}
}

protected final void initNETM2(String s) {
if (!s.trim().isEmpty()) {
NETM2 = Byte.parseByte(s);
} else {
NETM2 = Byte.MIN_VALUE;
}
}

protected final void initNETM2O_CODE(String s) {
if (!s.trim().isEmpty()) {
NETM2O_CODE = Byte.parseByte(s);
} else {
NETM2O_CODE = Byte.MIN_VALUE;
}
}

protected final void initNETMET_1(String s) {
if (!s.trim().isEmpty()) {
NETMET_1 = Byte.parseByte(s);
} else {
NETMET_1 = Byte.MIN_VALUE;
}
}

protected final void initNETMET_2(String s) {
if (!s.trim().isEmpty()) {
NETMET_2 = Byte.parseByte(s);
} else {
NETMET_2 = Byte.MIN_VALUE;
}
}

protected final void initNETMET_3(String s) {
if (!s.trim().isEmpty()) {
NETMET_3 = Byte.parseByte(s);
} else {
NETMET_3 = Byte.MIN_VALUE;
}
}

protected final void initNETPH_1(String s) {
if (!s.trim().isEmpty()) {
NETPH_1 = Short.parseShort(s);
} else {
NETPH_1 = Short.MIN_VALUE;
}
}

protected final void initNETPH_2(String s) {
if (!s.trim().isEmpty()) {
NETPH_2 = Short.parseShort(s);
} else {
NETPH_2 = Short.MIN_VALUE;
}
}

protected final void initNETPH_3(String s) {
if (!s.trim().isEmpty()) {
NETPH_3 = Short.parseShort(s);
} else {
NETPH_3 = Short.MIN_VALUE;
}
}

protected final void initNETPUSE(String s) {
if (!s.trim().isEmpty()) {
NETPUSE = Byte.parseByte(s);
} else {
NETPUSE = Byte.MIN_VALUE;
}
}

protected final void initNETRL_1(String s) {
if (!s.trim().isEmpty()) {
NETRL_1 = Byte.parseByte(s);
} else {
NETRL_1 = Byte.MIN_VALUE;
}
}

protected final void initNETRL_2(String s) {
if (!s.trim().isEmpty()) {
NETRL_2 = Byte.parseByte(s);
} else {
NETRL_2 = Byte.MIN_VALUE;
}
}

protected final void initNETRL_3(String s) {
if (!s.trim().isEmpty()) {
NETRL_3 = Byte.parseByte(s);
} else {
NETRL_3 = Byte.MIN_VALUE;
}
}

protected final void initNETSX_1(String s) {
if (!s.trim().isEmpty()) {
NETSX_1 = Short.parseShort(s);
} else {
NETSX_1 = Short.MIN_VALUE;
}
}

protected final void initNETSX_2(String s) {
if (!s.trim().isEmpty()) {
NETSX_2 = Short.parseShort(s);
} else {
NETSX_2 = Short.MIN_VALUE;
}
}

protected final void initNETSX_3(String s) {
if (!s.trim().isEmpty()) {
NETSX_3 = Short.parseShort(s);
} else {
NETSX_3 = Short.MIN_VALUE;
}
}

protected final void initNETTALK10_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK10_1 = Byte.parseByte(s);
} else {
NETTALK10_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK10_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK10_2 = Byte.parseByte(s);
} else {
NETTALK10_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK10_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK10_3 = Byte.parseByte(s);
} else {
NETTALK10_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK11_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK11_1 = Byte.parseByte(s);
} else {
NETTALK11_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK11_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK11_2 = Byte.parseByte(s);
} else {
NETTALK11_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK11_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK11_3 = Byte.parseByte(s);
} else {
NETTALK11_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK12_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK12_1 = Byte.parseByte(s);
} else {
NETTALK12_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK12_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK12_2 = Byte.parseByte(s);
} else {
NETTALK12_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK12_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK12_3 = Byte.parseByte(s);
} else {
NETTALK12_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK13_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK13_1 = Byte.parseByte(s);
} else {
NETTALK13_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK13_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK13_2 = Byte.parseByte(s);
} else {
NETTALK13_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK13_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK13_3 = Byte.parseByte(s);
} else {
NETTALK13_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK1_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK1_1 = Byte.parseByte(s);
} else {
NETTALK1_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK1_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK1_2 = Byte.parseByte(s);
} else {
NETTALK1_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK1_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK1_3 = Byte.parseByte(s);
} else {
NETTALK1_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK2_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK2_1 = Byte.parseByte(s);
} else {
NETTALK2_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK2_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK2_2 = Byte.parseByte(s);
} else {
NETTALK2_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK2_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK2_3 = Byte.parseByte(s);
} else {
NETTALK2_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK3_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK3_1 = Byte.parseByte(s);
} else {
NETTALK3_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK3_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK3_2 = Byte.parseByte(s);
} else {
NETTALK3_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK3_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK3_3 = Byte.parseByte(s);
} else {
NETTALK3_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK4_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK4_1 = Byte.parseByte(s);
} else {
NETTALK4_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK4_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK4_2 = Byte.parseByte(s);
} else {
NETTALK4_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK4_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK4_3 = Byte.parseByte(s);
} else {
NETTALK4_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK5_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK5_1 = Byte.parseByte(s);
} else {
NETTALK5_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK5_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK5_2 = Byte.parseByte(s);
} else {
NETTALK5_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK5_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK5_3 = Byte.parseByte(s);
} else {
NETTALK5_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK6_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK6_1 = Byte.parseByte(s);
} else {
NETTALK6_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK6_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK6_2 = Byte.parseByte(s);
} else {
NETTALK6_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK6_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK6_3 = Byte.parseByte(s);
} else {
NETTALK6_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK7_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK7_1 = Byte.parseByte(s);
} else {
NETTALK7_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK7_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK7_2 = Byte.parseByte(s);
} else {
NETTALK7_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK7_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK7_3 = Byte.parseByte(s);
} else {
NETTALK7_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK8_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK8_1 = Byte.parseByte(s);
} else {
NETTALK8_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK8_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK8_2 = Byte.parseByte(s);
} else {
NETTALK8_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK8_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK8_3 = Byte.parseByte(s);
} else {
NETTALK8_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK96_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK96_1 = Byte.parseByte(s);
} else {
NETTALK96_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK96_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK96_2 = Byte.parseByte(s);
} else {
NETTALK96_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK96_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK96_3 = Byte.parseByte(s);
} else {
NETTALK96_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK97_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK97_1 = Byte.parseByte(s);
} else {
NETTALK97_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK97_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK97_2 = Byte.parseByte(s);
} else {
NETTALK97_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK97_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK97_3 = Byte.parseByte(s);
} else {
NETTALK97_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK9_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK9_1 = Byte.parseByte(s);
} else {
NETTALK9_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK9_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK9_2 = Byte.parseByte(s);
} else {
NETTALK9_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK9_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK9_3 = Byte.parseByte(s);
} else {
NETTALK9_3 = Byte.MIN_VALUE;
}
}

protected final void initNETUSE(String s) {
if (!s.trim().isEmpty()) {
NETUSE = Byte.parseByte(s);
} else {
NETUSE = Byte.MIN_VALUE;
}
}

protected final void initNETWEB_1(String s) {
if (!s.trim().isEmpty()) {
NETWEB_1 = Byte.parseByte(s);
} else {
NETWEB_1 = Byte.MIN_VALUE;
}
}

protected final void initNETWEB_2(String s) {
if (!s.trim().isEmpty()) {
NETWEB_2 = Byte.parseByte(s);
} else {
NETWEB_2 = Byte.MIN_VALUE;
}
}

protected final void initNETWEB_3(String s) {
if (!s.trim().isEmpty()) {
NETWEB_3 = Byte.parseByte(s);
} else {
NETWEB_3 = Byte.MIN_VALUE;
}
}

protected final void initNETWR_1(String s) {
if (!s.trim().isEmpty()) {
NETWR_1 = Short.parseShort(s);
} else {
NETWR_1 = Short.MIN_VALUE;
}
}

protected final void initNETWR_2(String s) {
if (!s.trim().isEmpty()) {
NETWR_2 = Short.parseShort(s);
} else {
NETWR_2 = Short.MIN_VALUE;
}
}

protected final void initNETWR_3(String s) {
if (!s.trim().isEmpty()) {
NETWR_3 = Short.parseShort(s);
} else {
NETWR_3 = Short.MIN_VALUE;
}
}

protected final void initNEWSMAIN(String s) {
if (!s.trim().isEmpty()) {
NEWSMAIN = Byte.parseByte(s);
} else {
NEWSMAIN = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE1(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE1 = Byte.parseByte(s);
} else {
NEWSOURCE1 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE10(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE10 = Byte.parseByte(s);
} else {
NEWSOURCE10 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE11(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE11 = Byte.parseByte(s);
} else {
NEWSOURCE11 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE12(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE12 = Byte.parseByte(s);
} else {
NEWSOURCE12 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE2(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE2 = Byte.parseByte(s);
} else {
NEWSOURCE2 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE3(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE3 = Byte.parseByte(s);
} else {
NEWSOURCE3 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE4(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE4 = Byte.parseByte(s);
} else {
NEWSOURCE4 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE5(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE5 = Byte.parseByte(s);
} else {
NEWSOURCE5 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE6(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE6 = Byte.parseByte(s);
} else {
NEWSOURCE6 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE7(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE7 = Byte.parseByte(s);
} else {
NEWSOURCE7 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE8(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE8 = Byte.parseByte(s);
} else {
NEWSOURCE8 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE9(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE9 = Byte.parseByte(s);
} else {
NEWSOURCE9 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE96(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE96 = Byte.parseByte(s);
} else {
NEWSOURCE96 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE1(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE1 = Byte.parseByte(s);
} else {
NEXTELSE1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE2(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE2 = Byte.parseByte(s);
} else {
NEXTELSE2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE3(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE3 = Byte.parseByte(s);
} else {
NEXTELSE3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE4(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE4 = Byte.parseByte(s);
} else {
NEXTELSE4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE5(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE5 = Byte.parseByte(s);
} else {
NEXTELSE5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE6(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE6 = Byte.parseByte(s);
} else {
NEXTELSE6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE7(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE7 = Byte.parseByte(s);
} else {
NEXTELSE7 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB1(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB1 = Byte.parseByte(s);
} else {
NEXTJOB1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB2(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB2 = Byte.parseByte(s);
} else {
NEXTJOB2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB3(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB3 = Byte.parseByte(s);
} else {
NEXTJOB3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB4(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB4 = Byte.parseByte(s);
} else {
NEXTJOB4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB5(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB5 = Byte.parseByte(s);
} else {
NEXTJOB5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB6(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB6 = Byte.parseByte(s);
} else {
NEXTJOB6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB7(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB7 = Byte.parseByte(s);
} else {
NEXTJOB7 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT1(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT1 = Byte.parseByte(s);
} else {
NEXTSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT2(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT2 = Byte.parseByte(s);
} else {
NEXTSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT3(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT3 = Byte.parseByte(s);
} else {
NEXTSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT4(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT4 = Byte.parseByte(s);
} else {
NEXTSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT5(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT5 = Byte.parseByte(s);
} else {
NEXTSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT6(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT6 = Byte.parseByte(s);
} else {
NEXTSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT7(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT7 = Byte.parseByte(s);
} else {
NEXTSTAT7 = Byte.MIN_VALUE;
}
}

protected final void initNFH01(String s) {
if (!s.trim().isEmpty()) {
NFH01 = Byte.parseByte(s);
} else {
NFH01 = Byte.MIN_VALUE;
}
}

protected final void initNFH02(String s) {
if (!s.trim().isEmpty()) {
NFH02 = Byte.parseByte(s);
} else {
NFH02 = Byte.MIN_VALUE;
}
}

protected final void initNFH03(String s) {
if (!s.trim().isEmpty()) {
NFH03 = Byte.parseByte(s);
} else {
NFH03 = Byte.MIN_VALUE;
}
}

protected final void initNFH04(String s) {
if (!s.trim().isEmpty()) {
NFH04 = Byte.parseByte(s);
} else {
NFH04 = Byte.MIN_VALUE;
}
}

protected final void initNFH05(String s) {
if (!s.trim().isEmpty()) {
NFH05 = Byte.parseByte(s);
} else {
NFH05 = Byte.MIN_VALUE;
}
}

protected final void initNFH06(String s) {
if (!s.trim().isEmpty()) {
NFH06 = Byte.parseByte(s);
} else {
NFH06 = Byte.MIN_VALUE;
}
}

protected final void initNFH07(String s) {
if (!s.trim().isEmpty()) {
NFH07 = Byte.parseByte(s);
} else {
NFH07 = Byte.MIN_VALUE;
}
}

protected final void initNFH08(String s) {
if (!s.trim().isEmpty()) {
NFH08 = Byte.parseByte(s);
} else {
NFH08 = Byte.MIN_VALUE;
}
}

protected final void initNFH09(String s) {
if (!s.trim().isEmpty()) {
NFH09 = Byte.parseByte(s);
} else {
NFH09 = Byte.MIN_VALUE;
}
}

protected final void initNFH10(String s) {
if (!s.trim().isEmpty()) {
NFH10 = Byte.parseByte(s);
} else {
NFH10 = Byte.MIN_VALUE;
}
}

protected final void initNFH11(String s) {
if (!s.trim().isEmpty()) {
NFH11 = Byte.parseByte(s);
} else {
NFH11 = Byte.MIN_VALUE;
}
}

protected final void initNFH12(String s) {
if (!s.trim().isEmpty()) {
NFH12 = Byte.parseByte(s);
} else {
NFH12 = Byte.MIN_VALUE;
}
}

protected final void initNFH13(String s) {
if (!s.trim().isEmpty()) {
NFH13 = Byte.parseByte(s);
} else {
NFH13 = Byte.MIN_VALUE;
}
}

protected final void initNFH14(String s) {
if (!s.trim().isEmpty()) {
NFH14 = Byte.parseByte(s);
} else {
NFH14 = Byte.MIN_VALUE;
}
}

protected final void initNFH15(String s) {
if (!s.trim().isEmpty()) {
NFH15 = Byte.parseByte(s);
} else {
NFH15 = Byte.MIN_VALUE;
}
}

protected final void initNFH16(String s) {
if (!s.trim().isEmpty()) {
NFH16 = Byte.parseByte(s);
} else {
NFH16 = Byte.MIN_VALUE;
}
}

protected final void initNFH18(String s) {
if (!s.trim().isEmpty()) {
NFH18 = Byte.parseByte(s);
} else {
NFH18 = Byte.MIN_VALUE;
}
}

protected final void initNFH19(String s) {
if (!s.trim().isEmpty()) {
NFH19 = Byte.parseByte(s);
} else {
NFH19 = Byte.MIN_VALUE;
}
}

protected final void initNFH20(String s) {
if (!s.trim().isEmpty()) {
NFH20 = Byte.parseByte(s);
} else {
NFH20 = Byte.MIN_VALUE;
}
}

protected final void initNFH21(String s) {
if (!s.trim().isEmpty()) {
NFH21 = Byte.parseByte(s);
} else {
NFH21 = Byte.MIN_VALUE;
}
}

protected final void initNFH22(String s) {
if (!s.trim().isEmpty()) {
NFH22 = Byte.parseByte(s);
} else {
NFH22 = Byte.MIN_VALUE;
}
}

protected final void initNFH23(String s) {
if (!s.trim().isEmpty()) {
NFH23 = Byte.parseByte(s);
} else {
NFH23 = Byte.MIN_VALUE;
}
}

protected final void initNFH24(String s) {
if (!s.trim().isEmpty()) {
NFH24 = Byte.parseByte(s);
} else {
NFH24 = Byte.MIN_VALUE;
}
}

protected final void initNFH25(String s) {
if (!s.trim().isEmpty()) {
NFH25 = Byte.parseByte(s);
} else {
NFH25 = Byte.MIN_VALUE;
}
}

protected final void initNFH26(String s) {
if (!s.trim().isEmpty()) {
NFH26 = Byte.parseByte(s);
} else {
NFH26 = Byte.MIN_VALUE;
}
}

protected final void initNFH27(String s) {
if (!s.trim().isEmpty()) {
NFH27 = Byte.parseByte(s);
} else {
NFH27 = Byte.MIN_VALUE;
}
}

protected final void initNFH28(String s) {
if (!s.trim().isEmpty()) {
NFH28 = Byte.parseByte(s);
} else {
NFH28 = Byte.MIN_VALUE;
}
}

protected final void initNFH29(String s) {
if (!s.trim().isEmpty()) {
NFH29 = Byte.parseByte(s);
} else {
NFH29 = Byte.MIN_VALUE;
}
}

protected final void initNFH30(String s) {
if (!s.trim().isEmpty()) {
NFH30 = Byte.parseByte(s);
} else {
NFH30 = Byte.MIN_VALUE;
}
}

protected final void initNFH31(String s) {
if (!s.trim().isEmpty()) {
NFH31 = Byte.parseByte(s);
} else {
NFH31 = Byte.MIN_VALUE;
}
}

protected final void initNFH32(String s) {
if (!s.trim().isEmpty()) {
NFH32 = Byte.parseByte(s);
} else {
NFH32 = Byte.MIN_VALUE;
}
}

protected final void initNFH33(String s) {
if (!s.trim().isEmpty()) {
NFH33 = Byte.parseByte(s);
} else {
NFH33 = Byte.MIN_VALUE;
}
}

protected final void initNFH34(String s) {
if (!s.trim().isEmpty()) {
NFH34 = Byte.parseByte(s);
} else {
NFH34 = Byte.MIN_VALUE;
}
}

protected final void initNFH35(String s) {
if (!s.trim().isEmpty()) {
NFH35 = Byte.parseByte(s);
} else {
NFH35 = Byte.MIN_VALUE;
}
}

protected final void initNFH36(String s) {
if (!s.trim().isEmpty()) {
NFH36 = Byte.parseByte(s);
} else {
NFH36 = Byte.MIN_VALUE;
}
}

protected final void initNFH37(String s) {
if (!s.trim().isEmpty()) {
NFH37 = Byte.parseByte(s);
} else {
NFH37 = Byte.MIN_VALUE;
}
}

protected final void initNFH38(String s) {
if (!s.trim().isEmpty()) {
NFH38 = Byte.parseByte(s);
} else {
NFH38 = Byte.MIN_VALUE;
}
}

protected final void initNFH39(String s) {
if (!s.trim().isEmpty()) {
NFH39 = Byte.parseByte(s);
} else {
NFH39 = Byte.MIN_VALUE;
}
}

protected final void initNFH40(String s) {
if (!s.trim().isEmpty()) {
NFH40 = Byte.parseByte(s);
} else {
NFH40 = Byte.MIN_VALUE;
}
}

protected final void initNFH41(String s) {
if (!s.trim().isEmpty()) {
NFH41 = Byte.parseByte(s);
} else {
NFH41 = Byte.MIN_VALUE;
}
}

protected final void initNGRP_DV(String s) {
if (!s.trim().isEmpty()) {
NGRP_DV = Byte.parseByte(s);
} else {
NGRP_DV = Byte.MIN_VALUE;
}
}

protected final void initNHIQUAL_DV(String s) {
if (!s.trim().isEmpty()) {
NHIQUAL_DV = Byte.parseByte(s);
} else {
NHIQUAL_DV = Byte.MIN_VALUE;
}
}

protected final void initNIACT(String s) {
if (!s.trim().isEmpty()) {
NIACT = Byte.parseByte(s);
} else {
NIACT = Byte.MIN_VALUE;
}
}

protected final void initNICLBNS1(String s) {
if (!s.trim().isEmpty()) {
NICLBNS1 = Byte.parseByte(s);
} else {
NICLBNS1 = Byte.MIN_VALUE;
}
}

protected final void initNICLBNS2(String s) {
if (!s.trim().isEmpty()) {
NICLBNS2 = Byte.parseByte(s);
} else {
NICLBNS2 = Byte.MIN_VALUE;
}
}

protected final void initNICLBNS3(String s) {
if (!s.trim().isEmpty()) {
NICLBNS3 = Byte.parseByte(s);
} else {
NICLBNS3 = Byte.MIN_VALUE;
}
}

protected final void initNICLBNS4(String s) {
if (!s.trim().isEmpty()) {
NICLBNS4 = Byte.parseByte(s);
} else {
NICLBNS4 = Byte.MIN_VALUE;
}
}

protected final void initNIREL(String s) {
if (!s.trim().isEmpty()) {
NIREL = Byte.parseByte(s);
} else {
NIREL = Byte.MIN_VALUE;
}
}

protected final void initNISERPS(String s) {
if (!s.trim().isEmpty()) {
NISERPS = Byte.parseByte(s);
} else {
NISERPS = Byte.MIN_VALUE;
}
}

protected final void initNMAR(String s) {
if (!s.trim().isEmpty()) {
NMAR = Byte.parseByte(s);
} else {
NMAR = Byte.MIN_VALUE;
}
}

protected final void initNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NMPSP_DV = Byte.parseByte(s);
} else {
NMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNATCH(String s) {
if (!s.trim().isEmpty()) {
NNATCH = Byte.parseByte(s);
} else {
NNATCH = Byte.MIN_VALUE;
}
}

protected final void initNNEWBORN(String s) {
if (!s.trim().isEmpty()) {
NNEWBORN = Byte.parseByte(s);
} else {
NNEWBORN = Byte.MIN_VALUE;
}
}

protected final void initNNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NNMPSP_DV = Byte.parseByte(s);
} else {
NNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSIB_DV = Byte.parseByte(s);
} else {
NNSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSSIB_DV = Byte.parseByte(s);
} else {
NNSSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNOTEMPCHK(String s) {
if (!s.trim().isEmpty()) {
NOTEMPCHK = Byte.parseByte(s);
} else {
NOTEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initNPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER_DV = Byte.parseByte(s);
} else {
NPENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initNPNS_DV(String s) {
if (!s.trim().isEmpty()) {
NPNS_DV = Byte.parseByte(s);
} else {
NPNS_DV = Byte.MIN_VALUE;
}
}

protected final void initNPN_DV(String s) {
if (!s.trim().isEmpty()) {
NPN_DV = Byte.parseByte(s);
} else {
NPN_DV = Byte.MIN_VALUE;
}
}

protected final void initNQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
NQFHIGH_DV = Byte.parseByte(s);
} else {
NQFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initNUNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NUNMPSP_DV = Byte.parseByte(s);
} else {
NUNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS = Byte.parseByte(s);
} else {
NXTENDREAS = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDD(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDD = Byte.parseByte(s);
} else {
NXTJBENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDM(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDM = Byte.parseByte(s);
} else {
NXTJBENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDY4 = Short.parseShort(s);
} else {
NXTJBENDY4 = Short.MIN_VALUE;
}
}

protected final void initNXTJBES(String s) {
if (!s.trim().isEmpty()) {
NXTJBES = Byte.parseByte(s);
} else {
NXTJBES = Byte.MIN_VALUE;
}
}

protected final void initNXTJBHRS(String s) {
if (!s.trim().isEmpty()) {
NXTJBHRS = Byte.parseByte(s);
} else {
NXTJBHRS = Byte.MIN_VALUE;
}
}

protected final void initNXTST(String s) {
if (!s.trim().isEmpty()) {
NXTST = Byte.parseByte(s);
} else {
NXTST = Byte.MIN_VALUE;
}
}

protected final void initNXTSTELSE(String s) {
if (!s.trim().isEmpty()) {
NXTSTELSE = Byte.parseByte(s);
} else {
NXTSTELSE = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDD(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDD = Byte.parseByte(s);
} else {
NXTSTENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDM(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDM = Byte.parseByte(s);
} else {
NXTSTENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDY4 = Short.parseShort(s);
} else {
NXTSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initOPRLG(String s) {
if (!s.trim().isEmpty()) {
OPRLG = Byte.parseByte(s);
} else {
OPRLG = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0(String s) {
if (!s.trim().isEmpty()) {
OPRLG0 = Byte.parseByte(s);
} else {
OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
OPRLG0NI = Byte.parseByte(s);
} else {
OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initOPRLG1(String s) {
if (!s.trim().isEmpty()) {
OPRLG1 = Byte.parseByte(s);
} else {
OPRLG1 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV1(String s) {
if (!s.trim().isEmpty()) {
OPSERV1 = Byte.parseByte(s);
} else {
OPSERV1 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV10(String s) {
if (!s.trim().isEmpty()) {
OPSERV10 = Byte.parseByte(s);
} else {
OPSERV10 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV2(String s) {
if (!s.trim().isEmpty()) {
OPSERV2 = Byte.parseByte(s);
} else {
OPSERV2 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV3(String s) {
if (!s.trim().isEmpty()) {
OPSERV3 = Byte.parseByte(s);
} else {
OPSERV3 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV4(String s) {
if (!s.trim().isEmpty()) {
OPSERV4 = Byte.parseByte(s);
} else {
OPSERV4 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV5(String s) {
if (!s.trim().isEmpty()) {
OPSERV5 = Byte.parseByte(s);
} else {
OPSERV5 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV6(String s) {
if (!s.trim().isEmpty()) {
OPSERV6 = Byte.parseByte(s);
} else {
OPSERV6 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV7(String s) {
if (!s.trim().isEmpty()) {
OPSERV7 = Byte.parseByte(s);
} else {
OPSERV7 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV8(String s) {
if (!s.trim().isEmpty()) {
OPSERV8 = Byte.parseByte(s);
} else {
OPSERV8 = Byte.MIN_VALUE;
}
}

protected final void initOPSERV9(String s) {
if (!s.trim().isEmpty()) {
OPSERV9 = Byte.parseByte(s);
} else {
OPSERV9 = Byte.MIN_VALUE;
}
}

protected final void initORG(String s) {
if (!s.trim().isEmpty()) {
ORG = Byte.parseByte(s);
} else {
ORG = Byte.MIN_VALUE;
}
}

protected final void initORGA1(String s) {
if (!s.trim().isEmpty()) {
ORGA1 = Byte.parseByte(s);
} else {
ORGA1 = Byte.MIN_VALUE;
}
}

protected final void initORGA10(String s) {
if (!s.trim().isEmpty()) {
ORGA10 = Byte.parseByte(s);
} else {
ORGA10 = Byte.MIN_VALUE;
}
}

protected final void initORGA11(String s) {
if (!s.trim().isEmpty()) {
ORGA11 = Byte.parseByte(s);
} else {
ORGA11 = Byte.MIN_VALUE;
}
}

protected final void initORGA12(String s) {
if (!s.trim().isEmpty()) {
ORGA12 = Byte.parseByte(s);
} else {
ORGA12 = Byte.MIN_VALUE;
}
}

protected final void initORGA13(String s) {
if (!s.trim().isEmpty()) {
ORGA13 = Byte.parseByte(s);
} else {
ORGA13 = Byte.MIN_VALUE;
}
}

protected final void initORGA14(String s) {
if (!s.trim().isEmpty()) {
ORGA14 = Byte.parseByte(s);
} else {
ORGA14 = Byte.MIN_VALUE;
}
}

protected final void initORGA15(String s) {
if (!s.trim().isEmpty()) {
ORGA15 = Byte.parseByte(s);
} else {
ORGA15 = Byte.MIN_VALUE;
}
}

protected final void initORGA16(String s) {
if (!s.trim().isEmpty()) {
ORGA16 = Byte.parseByte(s);
} else {
ORGA16 = Byte.MIN_VALUE;
}
}

protected final void initORGA2(String s) {
if (!s.trim().isEmpty()) {
ORGA2 = Byte.parseByte(s);
} else {
ORGA2 = Byte.MIN_VALUE;
}
}

protected final void initORGA3(String s) {
if (!s.trim().isEmpty()) {
ORGA3 = Byte.parseByte(s);
} else {
ORGA3 = Byte.MIN_VALUE;
}
}

protected final void initORGA4(String s) {
if (!s.trim().isEmpty()) {
ORGA4 = Byte.parseByte(s);
} else {
ORGA4 = Byte.MIN_VALUE;
}
}

protected final void initORGA5(String s) {
if (!s.trim().isEmpty()) {
ORGA5 = Byte.parseByte(s);
} else {
ORGA5 = Byte.MIN_VALUE;
}
}

protected final void initORGA6(String s) {
if (!s.trim().isEmpty()) {
ORGA6 = Byte.parseByte(s);
} else {
ORGA6 = Byte.MIN_VALUE;
}
}

protected final void initORGA7(String s) {
if (!s.trim().isEmpty()) {
ORGA7 = Byte.parseByte(s);
} else {
ORGA7 = Byte.MIN_VALUE;
}
}

protected final void initORGA8(String s) {
if (!s.trim().isEmpty()) {
ORGA8 = Byte.parseByte(s);
} else {
ORGA8 = Byte.MIN_VALUE;
}
}

protected final void initORGA9(String s) {
if (!s.trim().isEmpty()) {
ORGA9 = Byte.parseByte(s);
} else {
ORGA9 = Byte.MIN_VALUE;
}
}

protected final void initORGA96(String s) {
if (!s.trim().isEmpty()) {
ORGA96 = Byte.parseByte(s);
} else {
ORGA96 = Byte.MIN_VALUE;
}
}

protected final void initORGAT1(String s) {
if (!s.trim().isEmpty()) {
ORGAT1 = Byte.parseByte(s);
} else {
ORGAT1 = Byte.MIN_VALUE;
}
}

protected final void initORGAT10(String s) {
if (!s.trim().isEmpty()) {
ORGAT10 = Byte.parseByte(s);
} else {
ORGAT10 = Byte.MIN_VALUE;
}
}

protected final void initORGAT11(String s) {
if (!s.trim().isEmpty()) {
ORGAT11 = Byte.parseByte(s);
} else {
ORGAT11 = Byte.MIN_VALUE;
}
}

protected final void initORGAT12(String s) {
if (!s.trim().isEmpty()) {
ORGAT12 = Byte.parseByte(s);
} else {
ORGAT12 = Byte.MIN_VALUE;
}
}

protected final void initORGAT13(String s) {
if (!s.trim().isEmpty()) {
ORGAT13 = Byte.parseByte(s);
} else {
ORGAT13 = Byte.MIN_VALUE;
}
}

protected final void initORGAT14(String s) {
if (!s.trim().isEmpty()) {
ORGAT14 = Byte.parseByte(s);
} else {
ORGAT14 = Byte.MIN_VALUE;
}
}

protected final void initORGAT15(String s) {
if (!s.trim().isEmpty()) {
ORGAT15 = Byte.parseByte(s);
} else {
ORGAT15 = Byte.MIN_VALUE;
}
}

protected final void initORGAT16(String s) {
if (!s.trim().isEmpty()) {
ORGAT16 = Byte.parseByte(s);
} else {
ORGAT16 = Byte.MIN_VALUE;
}
}

protected final void initORGAT2(String s) {
if (!s.trim().isEmpty()) {
ORGAT2 = Byte.parseByte(s);
} else {
ORGAT2 = Byte.MIN_VALUE;
}
}

protected final void initORGAT3(String s) {
if (!s.trim().isEmpty()) {
ORGAT3 = Byte.parseByte(s);
} else {
ORGAT3 = Byte.MIN_VALUE;
}
}

protected final void initORGAT4(String s) {
if (!s.trim().isEmpty()) {
ORGAT4 = Byte.parseByte(s);
} else {
ORGAT4 = Byte.MIN_VALUE;
}
}

protected final void initORGAT5(String s) {
if (!s.trim().isEmpty()) {
ORGAT5 = Byte.parseByte(s);
} else {
ORGAT5 = Byte.MIN_VALUE;
}
}

protected final void initORGAT6(String s) {
if (!s.trim().isEmpty()) {
ORGAT6 = Byte.parseByte(s);
} else {
ORGAT6 = Byte.MIN_VALUE;
}
}

protected final void initORGAT7(String s) {
if (!s.trim().isEmpty()) {
ORGAT7 = Byte.parseByte(s);
} else {
ORGAT7 = Byte.MIN_VALUE;
}
}

protected final void initORGAT8(String s) {
if (!s.trim().isEmpty()) {
ORGAT8 = Byte.parseByte(s);
} else {
ORGAT8 = Byte.MIN_VALUE;
}
}

protected final void initORGAT9(String s) {
if (!s.trim().isEmpty()) {
ORGAT9 = Byte.parseByte(s);
} else {
ORGAT9 = Byte.MIN_VALUE;
}
}

protected final void initORGAT96(String s) {
if (!s.trim().isEmpty()) {
ORGAT96 = Byte.parseByte(s);
} else {
ORGAT96 = Byte.MIN_VALUE;
}
}

protected final void initORGM1(String s) {
if (!s.trim().isEmpty()) {
ORGM1 = Byte.parseByte(s);
} else {
ORGM1 = Byte.MIN_VALUE;
}
}

protected final void initORGM10(String s) {
if (!s.trim().isEmpty()) {
ORGM10 = Byte.parseByte(s);
} else {
ORGM10 = Byte.MIN_VALUE;
}
}

protected final void initORGM11(String s) {
if (!s.trim().isEmpty()) {
ORGM11 = Byte.parseByte(s);
} else {
ORGM11 = Byte.MIN_VALUE;
}
}

protected final void initORGM12(String s) {
if (!s.trim().isEmpty()) {
ORGM12 = Byte.parseByte(s);
} else {
ORGM12 = Byte.MIN_VALUE;
}
}

protected final void initORGM13(String s) {
if (!s.trim().isEmpty()) {
ORGM13 = Byte.parseByte(s);
} else {
ORGM13 = Byte.MIN_VALUE;
}
}

protected final void initORGM14(String s) {
if (!s.trim().isEmpty()) {
ORGM14 = Byte.parseByte(s);
} else {
ORGM14 = Byte.MIN_VALUE;
}
}

protected final void initORGM15(String s) {
if (!s.trim().isEmpty()) {
ORGM15 = Byte.parseByte(s);
} else {
ORGM15 = Byte.MIN_VALUE;
}
}

protected final void initORGM16(String s) {
if (!s.trim().isEmpty()) {
ORGM16 = Byte.parseByte(s);
} else {
ORGM16 = Byte.MIN_VALUE;
}
}

protected final void initORGM2(String s) {
if (!s.trim().isEmpty()) {
ORGM2 = Byte.parseByte(s);
} else {
ORGM2 = Byte.MIN_VALUE;
}
}

protected final void initORGM3(String s) {
if (!s.trim().isEmpty()) {
ORGM3 = Byte.parseByte(s);
} else {
ORGM3 = Byte.MIN_VALUE;
}
}

protected final void initORGM4(String s) {
if (!s.trim().isEmpty()) {
ORGM4 = Byte.parseByte(s);
} else {
ORGM4 = Byte.MIN_VALUE;
}
}

protected final void initORGM5(String s) {
if (!s.trim().isEmpty()) {
ORGM5 = Byte.parseByte(s);
} else {
ORGM5 = Byte.MIN_VALUE;
}
}

protected final void initORGM6(String s) {
if (!s.trim().isEmpty()) {
ORGM6 = Byte.parseByte(s);
} else {
ORGM6 = Byte.MIN_VALUE;
}
}

protected final void initORGM7(String s) {
if (!s.trim().isEmpty()) {
ORGM7 = Byte.parseByte(s);
} else {
ORGM7 = Byte.MIN_VALUE;
}
}

protected final void initORGM8(String s) {
if (!s.trim().isEmpty()) {
ORGM8 = Byte.parseByte(s);
} else {
ORGM8 = Byte.MIN_VALUE;
}
}

protected final void initORGM9(String s) {
if (!s.trim().isEmpty()) {
ORGM9 = Byte.parseByte(s);
} else {
ORGM9 = Byte.MIN_VALUE;
}
}

protected final void initORGM96(String s) {
if (!s.trim().isEmpty()) {
ORGM96 = Byte.parseByte(s);
} else {
ORGM96 = Byte.MIN_VALUE;
}
}

protected final void initORGMT1(String s) {
if (!s.trim().isEmpty()) {
ORGMT1 = Byte.parseByte(s);
} else {
ORGMT1 = Byte.MIN_VALUE;
}
}

protected final void initORGMT10(String s) {
if (!s.trim().isEmpty()) {
ORGMT10 = Byte.parseByte(s);
} else {
ORGMT10 = Byte.MIN_VALUE;
}
}

protected final void initORGMT11(String s) {
if (!s.trim().isEmpty()) {
ORGMT11 = Byte.parseByte(s);
} else {
ORGMT11 = Byte.MIN_VALUE;
}
}

protected final void initORGMT12(String s) {
if (!s.trim().isEmpty()) {
ORGMT12 = Byte.parseByte(s);
} else {
ORGMT12 = Byte.MIN_VALUE;
}
}

protected final void initORGMT13(String s) {
if (!s.trim().isEmpty()) {
ORGMT13 = Byte.parseByte(s);
} else {
ORGMT13 = Byte.MIN_VALUE;
}
}

protected final void initORGMT14(String s) {
if (!s.trim().isEmpty()) {
ORGMT14 = Byte.parseByte(s);
} else {
ORGMT14 = Byte.MIN_VALUE;
}
}

protected final void initORGMT15(String s) {
if (!s.trim().isEmpty()) {
ORGMT15 = Byte.parseByte(s);
} else {
ORGMT15 = Byte.MIN_VALUE;
}
}

protected final void initORGMT16(String s) {
if (!s.trim().isEmpty()) {
ORGMT16 = Byte.parseByte(s);
} else {
ORGMT16 = Byte.MIN_VALUE;
}
}

protected final void initORGMT2(String s) {
if (!s.trim().isEmpty()) {
ORGMT2 = Byte.parseByte(s);
} else {
ORGMT2 = Byte.MIN_VALUE;
}
}

protected final void initORGMT3(String s) {
if (!s.trim().isEmpty()) {
ORGMT3 = Byte.parseByte(s);
} else {
ORGMT3 = Byte.MIN_VALUE;
}
}

protected final void initORGMT4(String s) {
if (!s.trim().isEmpty()) {
ORGMT4 = Byte.parseByte(s);
} else {
ORGMT4 = Byte.MIN_VALUE;
}
}

protected final void initORGMT5(String s) {
if (!s.trim().isEmpty()) {
ORGMT5 = Byte.parseByte(s);
} else {
ORGMT5 = Byte.MIN_VALUE;
}
}

protected final void initORGMT6(String s) {
if (!s.trim().isEmpty()) {
ORGMT6 = Byte.parseByte(s);
} else {
ORGMT6 = Byte.MIN_VALUE;
}
}

protected final void initORGMT7(String s) {
if (!s.trim().isEmpty()) {
ORGMT7 = Byte.parseByte(s);
} else {
ORGMT7 = Byte.MIN_VALUE;
}
}

protected final void initORGMT8(String s) {
if (!s.trim().isEmpty()) {
ORGMT8 = Byte.parseByte(s);
} else {
ORGMT8 = Byte.MIN_VALUE;
}
}

protected final void initORGMT9(String s) {
if (!s.trim().isEmpty()) {
ORGMT9 = Byte.parseByte(s);
} else {
ORGMT9 = Byte.MIN_VALUE;
}
}

protected final void initORGMT96(String s) {
if (!s.trim().isEmpty()) {
ORGMT96 = Byte.parseByte(s);
} else {
ORGMT96 = Byte.MIN_VALUE;
}
}

protected final void initORIGADD(String s) {
if (!s.trim().isEmpty()) {
ORIGADD = Byte.parseByte(s);
} else {
ORIGADD = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN1(String s) {
if (!s.trim().isEmpty()) {
OTHBEN1 = Byte.parseByte(s);
} else {
OTHBEN1 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN2(String s) {
if (!s.trim().isEmpty()) {
OTHBEN2 = Byte.parseByte(s);
} else {
OTHBEN2 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN3(String s) {
if (!s.trim().isEmpty()) {
OTHBEN3 = Byte.parseByte(s);
} else {
OTHBEN3 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN4(String s) {
if (!s.trim().isEmpty()) {
OTHBEN4 = Byte.parseByte(s);
} else {
OTHBEN4 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN5(String s) {
if (!s.trim().isEmpty()) {
OTHBEN5 = Byte.parseByte(s);
} else {
OTHBEN5 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN6(String s) {
if (!s.trim().isEmpty()) {
OTHBEN6 = Byte.parseByte(s);
} else {
OTHBEN6 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN7(String s) {
if (!s.trim().isEmpty()) {
OTHBEN7 = Byte.parseByte(s);
} else {
OTHBEN7 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN8(String s) {
if (!s.trim().isEmpty()) {
OTHBEN8 = Byte.parseByte(s);
} else {
OTHBEN8 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN9(String s) {
if (!s.trim().isEmpty()) {
OTHBEN9 = Byte.parseByte(s);
} else {
OTHBEN9 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN96(String s) {
if (!s.trim().isEmpty()) {
OTHBEN96 = Byte.parseByte(s);
} else {
OTHBEN96 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN97(String s) {
if (!s.trim().isEmpty()) {
OTHBEN97 = Byte.parseByte(s);
} else {
OTHBEN97 = Byte.MIN_VALUE;
}
}

protected final void initOTHCONT(String s) {
if (!s.trim().isEmpty()) {
OTHCONT = Byte.parseByte(s);
} else {
OTHCONT = Byte.MIN_VALUE;
}
}

protected final void initOVTNSA(String s) {
if (!s.trim().isEmpty()) {
OVTNSA = Byte.parseByte(s);
} else {
OVTNSA = Byte.MIN_VALUE;
}
}

protected final void initOVTPAY(String s) {
if (!s.trim().isEmpty()) {
OVTPAY = Byte.parseByte(s);
} else {
OVTPAY = Byte.MIN_VALUE;
}
}

protected final void initOVTRATE(String s) {
if (!s.trim().isEmpty()) {
OVTRATE = Double.parseDouble(s);
} else {
OVTRATE = Double.NaN;
}
}

protected final void initOVTREST(String s) {
if (!s.trim().isEmpty()) {
OVTREST = Byte.parseByte(s);
} else {
OVTREST = Byte.MIN_VALUE;
}
}

protected final void initPACOB(String s) {
if (!s.trim().isEmpty()) {
PACOB = Byte.parseByte(s);
} else {
PACOB = Byte.MIN_VALUE;
}
}

protected final void initPACURR(String s) {
if (!s.trim().isEmpty()) {
PACURR = Byte.parseByte(s);
} else {
PACURR = Byte.MIN_VALUE;
}
}

protected final void initPAEDQF(String s) {
if (!s.trim().isEmpty()) {
PAEDQF = Byte.parseByte(s);
} else {
PAEDQF = Byte.MIN_VALUE;
}
}

protected final void initPAJ1UKSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
PAJ1UKSOC00_CC = Short.parseShort(s);
} else {
PAJ1UKSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initPAJ1UKSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
PAJ1UKSOC10_CC = Short.parseShort(s);
} else {
PAJ1UKSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initPAJ1UKSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PAJ1UKSOC90_CC = Byte.parseByte(s);
} else {
PAJ1UKSOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPAJCB(String s) {
if (!s.trim().isEmpty()) {
PAJCB = Byte.parseByte(s);
} else {
PAJCB = Byte.MIN_VALUE;
}
}

protected final void initPAJLCBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
PAJLCBSOC00_CC = Short.parseShort(s);
} else {
PAJLCBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initPAJLCBSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
PAJLCBSOC10_CC = Short.parseShort(s);
} else {
PAJLCBSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initPAJLCBSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PAJLCBSOC90_CC = Byte.parseByte(s);
} else {
PAJLCBSOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPAJU(String s) {
if (!s.trim().isEmpty()) {
PAJU = Byte.parseByte(s);
} else {
PAJU = Byte.MIN_VALUE;
}
}

protected final void initPAJUK(String s) {
if (!s.trim().isEmpty()) {
PAJUK = Byte.parseByte(s);
} else {
PAJUK = Byte.MIN_VALUE;
}
}

protected final void initPAJUKEVR(String s) {
if (!s.trim().isEmpty()) {
PAJUKEVR = Byte.parseByte(s);
} else {
PAJUKEVR = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC5_DV = Byte.parseByte(s);
} else {
PANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initPAPERM2(String s) {
if (!s.trim().isEmpty()) {
PAPERM2 = Short.parseShort(s);
} else {
PAPERM2 = Short.MIN_VALUE;
}
}

protected final void initPASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC00_CC = Short.parseShort(s);
} else {
PASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC10_CC = Short.parseShort(s);
} else {
PASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC90_CC = Byte.parseByte(s);
} else {
PASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPAYGWC(String s) {
if (!s.trim().isEmpty()) {
PAYGWC = Byte.parseByte(s);
} else {
PAYGWC = Byte.MIN_VALUE;
}
}

protected final void initPAYG_DV(String s) {
if (!s.trim().isEmpty()) {
PAYG_DV = Double.parseDouble(s);
} else {
PAYG_DV = Double.NaN;
}
}

protected final void initPAYNWC(String s) {
if (!s.trim().isEmpty()) {
PAYNWC = Byte.parseByte(s);
} else {
PAYNWC = Byte.MIN_VALUE;
}
}

protected final void initPAYRUK(String s) {
if (!s.trim().isEmpty()) {
PAYRUK = Byte.parseByte(s);
} else {
PAYRUK = Byte.MIN_VALUE;
}
}

protected final void initPAYRUK1(String s) {
if (!s.trim().isEmpty()) {
PAYRUK1 = Short.parseShort(s);
} else {
PAYRUK1 = Short.MIN_VALUE;
}
}

protected final void initPAYTYP(String s) {
if (!s.trim().isEmpty()) {
PAYTYP = Byte.parseByte(s);
} else {
PAYTYP = Byte.MIN_VALUE;
}
}

protected final void initPAYUWC(String s) {
if (!s.trim().isEmpty()) {
PAYUWC = Byte.parseByte(s);
} else {
PAYUWC = Byte.MIN_VALUE;
}
}

protected final void initPAYU_DV(String s) {
if (!s.trim().isEmpty()) {
PAYU_DV = Double.parseDouble(s);
} else {
PAYU_DV = Double.NaN;
}
}

protected final void initPBIRTHY(String s) {
if (!s.trim().isEmpty()) {
PBIRTHY = Short.parseShort(s);
} else {
PBIRTHY = Short.MIN_VALUE;
}
}

protected final void initPBNFT1(String s) {
if (!s.trim().isEmpty()) {
PBNFT1 = Byte.parseByte(s);
} else {
PBNFT1 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT10(String s) {
if (!s.trim().isEmpty()) {
PBNFT10 = Byte.parseByte(s);
} else {
PBNFT10 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT11(String s) {
if (!s.trim().isEmpty()) {
PBNFT11 = Byte.parseByte(s);
} else {
PBNFT11 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT12(String s) {
if (!s.trim().isEmpty()) {
PBNFT12 = Byte.parseByte(s);
} else {
PBNFT12 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT13(String s) {
if (!s.trim().isEmpty()) {
PBNFT13 = Byte.parseByte(s);
} else {
PBNFT13 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT2(String s) {
if (!s.trim().isEmpty()) {
PBNFT2 = Byte.parseByte(s);
} else {
PBNFT2 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT3(String s) {
if (!s.trim().isEmpty()) {
PBNFT3 = Byte.parseByte(s);
} else {
PBNFT3 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT4(String s) {
if (!s.trim().isEmpty()) {
PBNFT4 = Byte.parseByte(s);
} else {
PBNFT4 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT5(String s) {
if (!s.trim().isEmpty()) {
PBNFT5 = Byte.parseByte(s);
} else {
PBNFT5 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT6(String s) {
if (!s.trim().isEmpty()) {
PBNFT6 = Byte.parseByte(s);
} else {
PBNFT6 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT7(String s) {
if (!s.trim().isEmpty()) {
PBNFT7 = Byte.parseByte(s);
} else {
PBNFT7 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT8(String s) {
if (!s.trim().isEmpty()) {
PBNFT8 = Byte.parseByte(s);
} else {
PBNFT8 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT9(String s) {
if (!s.trim().isEmpty()) {
PBNFT9 = Byte.parseByte(s);
} else {
PBNFT9 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT96(String s) {
if (!s.trim().isEmpty()) {
PBNFT96 = Byte.parseByte(s);
} else {
PBNFT96 = Byte.MIN_VALUE;
}
}

protected final void initPDVAGE(String s) {
if (!s.trim().isEmpty()) {
PDVAGE = Byte.parseByte(s);
} else {
PDVAGE = Byte.MIN_VALUE;
}
}

protected final void initPENMCN(String s) {
if (!s.trim().isEmpty()) {
PENMCN = Byte.parseByte(s);
} else {
PENMCN = Byte.MIN_VALUE;
}
}

protected final void initPENMEX(String s) {
if (!s.trim().isEmpty()) {
PENMEX = Byte.parseByte(s);
} else {
PENMEX = Byte.MIN_VALUE;
}
}

protected final void initPENMPY(String s) {
if (!s.trim().isEmpty()) {
PENMPY = Double.parseDouble(s);
} else {
PENMPY = Double.NaN;
}
}

protected final void initPENMTP(String s) {
if (!s.trim().isEmpty()) {
PENMTP = Byte.parseByte(s);
} else {
PENMTP = Byte.MIN_VALUE;
}
}

protected final void initPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
PENSIONER_DV = Byte.parseByte(s);
} else {
PENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initPENSPB(String s) {
if (!s.trim().isEmpty()) {
PENSPB = Byte.parseByte(s);
} else {
PENSPB = Byte.MIN_VALUE;
}
}

protected final void initPERBFTS(String s) {
if (!s.trim().isEmpty()) {
PERBFTS = Byte.parseByte(s);
} else {
PERBFTS = Byte.MIN_VALUE;
}
}

protected final void initPERPOLINF(String s) {
if (!s.trim().isEmpty()) {
PERPOLINF = Byte.parseByte(s);
} else {
PERPOLINF = Byte.MIN_VALUE;
}
}

protected final void initPGMROB(String s) {
if (!s.trim().isEmpty()) {
PGMROB = Byte.parseByte(s);
} else {
PGMROB = Byte.MIN_VALUE;
}
}

protected final void initPGPROB(String s) {
if (!s.trim().isEmpty()) {
PGPROB = Byte.parseByte(s);
} else {
PGPROB = Byte.MIN_VALUE;
}
}

protected final void initPID(String s) {
if (!s.trim().isEmpty()) {
PID = Integer.parseInt(s);
} else {
PID = Integer.MIN_VALUE;
}
}

protected final void initPJBPTFT(String s) {
if (!s.trim().isEmpty()) {
PJBPTFT = Byte.parseByte(s);
} else {
PJBPTFT = Byte.MIN_VALUE;
}
}

protected final void initPJSPTFT(String s) {
if (!s.trim().isEmpty()) {
PJSPTFT = Byte.parseByte(s);
} else {
PJSPTFT = Byte.MIN_VALUE;
}
}

protected final void initPLIENG(String s) {
if (!s.trim().isEmpty()) {
PLIENG = Byte.parseByte(s);
} else {
PLIENG = Byte.MIN_VALUE;
}
}

protected final void initPLITRANS(String s) {
if (!s.trim().isEmpty()) {
PLITRANS = Byte.parseByte(s);
} else {
PLITRANS = Byte.MIN_VALUE;
}
}

protected final void initPLNOWM(String s) {
if (!s.trim().isEmpty()) {
PLNOWM = Short.parseShort(s);
} else {
PLNOWM = Short.MIN_VALUE;
}
}

protected final void initPLNOWY4(String s) {
if (!s.trim().isEmpty()) {
PLNOWY4 = Short.parseShort(s);
} else {
PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initPN1PID(String s) {
if (!s.trim().isEmpty()) {
PN1PID = Integer.parseInt(s);
} else {
PN1PID = Integer.MIN_VALUE;
}
}

protected final void initPN1PNO(String s) {
if (!s.trim().isEmpty()) {
PN1PNO = Byte.parseByte(s);
} else {
PN1PNO = Byte.MIN_VALUE;
}
}

protected final void initPN1SEX(String s) {
if (!s.trim().isEmpty()) {
PN1SEX = Byte.parseByte(s);
} else {
PN1SEX = Byte.MIN_VALUE;
}
}

protected final void initPN2PID(String s) {
if (!s.trim().isEmpty()) {
PN2PID = Integer.parseInt(s);
} else {
PN2PID = Integer.MIN_VALUE;
}
}

protected final void initPN2PNO(String s) {
if (!s.trim().isEmpty()) {
PN2PNO = Byte.parseByte(s);
} else {
PN2PNO = Byte.MIN_VALUE;
}
}

protected final void initPN2SEX(String s) {
if (!s.trim().isEmpty()) {
PN2SEX = Byte.parseByte(s);
} else {
PN2SEX = Byte.MIN_VALUE;
}
}

protected final void initPNCARS(String s) {
if (!s.trim().isEmpty()) {
PNCARS = Byte.parseByte(s);
} else {
PNCARS = Byte.MIN_VALUE;
}
}

protected final void initPNS1PID(String s) {
if (!s.trim().isEmpty()) {
PNS1PID = Integer.parseInt(s);
} else {
PNS1PID = Integer.MIN_VALUE;
}
}

protected final void initPNS1PNO(String s) {
if (!s.trim().isEmpty()) {
PNS1PNO = Byte.parseByte(s);
} else {
PNS1PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS1SEX(String s) {
if (!s.trim().isEmpty()) {
PNS1SEX = Byte.parseByte(s);
} else {
PNS1SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS2PID(String s) {
if (!s.trim().isEmpty()) {
PNS2PID = Integer.parseInt(s);
} else {
PNS2PID = Integer.MIN_VALUE;
}
}

protected final void initPNS2PNO(String s) {
if (!s.trim().isEmpty()) {
PNS2PNO = Byte.parseByte(s);
} else {
PNS2PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS2SEX(String s) {
if (!s.trim().isEmpty()) {
PNS2SEX = Byte.parseByte(s);
} else {
PNS2SEX = Byte.MIN_VALUE;
}
}

protected final void initPOLCOST(String s) {
if (!s.trim().isEmpty()) {
POLCOST = Byte.parseByte(s);
} else {
POLCOST = Byte.MIN_VALUE;
}
}

protected final void initPOLEFF1(String s) {
if (!s.trim().isEmpty()) {
POLEFF1 = Byte.parseByte(s);
} else {
POLEFF1 = Byte.MIN_VALUE;
}
}

protected final void initPOLEFF2(String s) {
if (!s.trim().isEmpty()) {
POLEFF2 = Byte.parseByte(s);
} else {
POLEFF2 = Byte.MIN_VALUE;
}
}

protected final void initPOLEFF3(String s) {
if (!s.trim().isEmpty()) {
POLEFF3 = Byte.parseByte(s);
} else {
POLEFF3 = Byte.MIN_VALUE;
}
}

protected final void initPOLEFF4(String s) {
if (!s.trim().isEmpty()) {
POLEFF4 = Byte.parseByte(s);
} else {
POLEFF4 = Byte.MIN_VALUE;
}
}

protected final void initPPEN(String s) {
if (!s.trim().isEmpty()) {
PPEN = Byte.parseByte(s);
} else {
PPEN = Byte.MIN_VALUE;
}
}

protected final void initPPENT(String s) {
if (!s.trim().isEmpty()) {
PPENT = Byte.parseByte(s);
} else {
PPENT = Byte.MIN_VALUE;
}
}

protected final void initPPID(String s) {
if (!s.trim().isEmpty()) {
PPID = Integer.parseInt(s);
} else {
PPID = Integer.MIN_VALUE;
}
}

protected final void initPPPEX(String s) {
if (!s.trim().isEmpty()) {
PPPEX = Byte.parseByte(s);
} else {
PPPEX = Byte.MIN_VALUE;
}
}

protected final void initPPPEXM(String s) {
if (!s.trim().isEmpty()) {
PPPEXM = Byte.parseByte(s);
} else {
PPPEXM = Byte.MIN_VALUE;
}
}

protected final void initPPRAM(String s) {
if (!s.trim().isEmpty()) {
PPRAM = Integer.parseInt(s);
} else {
PPRAM = Integer.MIN_VALUE;
}
}

protected final void initPPRAMPC(String s) {
if (!s.trim().isEmpty()) {
PPRAMPC = Byte.parseByte(s);
} else {
PPRAMPC = Byte.MIN_VALUE;
}
}

protected final void initPPREG(String s) {
if (!s.trim().isEmpty()) {
PPREG = Byte.parseByte(s);
} else {
PPREG = Byte.MIN_VALUE;
}
}

protected final void initPPSEX(String s) {
if (!s.trim().isEmpty()) {
PPSEX = Byte.parseByte(s);
} else {
PPSEX = Byte.MIN_VALUE;
}
}

protected final void initPPYRS(String s) {
if (!s.trim().isEmpty()) {
PPYRS = Short.parseShort(s);
} else {
PPYRS = Short.MIN_VALUE;
}
}

protected final void initPREARN(String s) {
if (!s.trim().isEmpty()) {
PREARN = Byte.parseByte(s);
} else {
PREARN = Byte.MIN_VALUE;
}
}

protected final void initPREARNA(String s) {
if (!s.trim().isEmpty()) {
PREARNA = Byte.parseByte(s);
} else {
PREARNA = Byte.MIN_VALUE;
}
}

protected final void initPREARNW(String s) {
if (!s.trim().isEmpty()) {
PREARNW = Byte.parseByte(s);
} else {
PREARNW = Byte.MIN_VALUE;
}
}

protected final void initPREASON(String s) {
if (!s.trim().isEmpty()) {
PREASON = Byte.parseByte(s);
} else {
PREASON = Byte.MIN_VALUE;
}
}

protected final void initPREG(String s) {
if (!s.trim().isEmpty()) {
PREG = Byte.parseByte(s);
} else {
PREG = Byte.MIN_VALUE;
}
}

protected final void initPREGEND1(String s) {
if (!s.trim().isEmpty()) {
PREGEND1 = Byte.parseByte(s);
} else {
PREGEND1 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND2(String s) {
if (!s.trim().isEmpty()) {
PREGEND2 = Byte.parseByte(s);
} else {
PREGEND2 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND3(String s) {
if (!s.trim().isEmpty()) {
PREGEND3 = Byte.parseByte(s);
} else {
PREGEND3 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND4(String s) {
if (!s.trim().isEmpty()) {
PREGEND4 = Byte.parseByte(s);
} else {
PREGEND4 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND5(String s) {
if (!s.trim().isEmpty()) {
PREGEND5 = Byte.parseByte(s);
} else {
PREGEND5 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT1(String s) {
if (!s.trim().isEmpty()) {
PREGFERT1 = Byte.parseByte(s);
} else {
PREGFERT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT2(String s) {
if (!s.trim().isEmpty()) {
PREGFERT2 = Byte.parseByte(s);
} else {
PREGFERT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT3(String s) {
if (!s.trim().isEmpty()) {
PREGFERT3 = Byte.parseByte(s);
} else {
PREGFERT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT4(String s) {
if (!s.trim().isEmpty()) {
PREGFERT4 = Byte.parseByte(s);
} else {
PREGFERT4 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT5(String s) {
if (!s.trim().isEmpty()) {
PREGFERT5 = Byte.parseByte(s);
} else {
PREGFERT5 = Byte.MIN_VALUE;
}
}

protected final void initPREGM1(String s) {
if (!s.trim().isEmpty()) {
PREGM1 = Byte.parseByte(s);
} else {
PREGM1 = Byte.MIN_VALUE;
}
}

protected final void initPREGM2(String s) {
if (!s.trim().isEmpty()) {
PREGM2 = Byte.parseByte(s);
} else {
PREGM2 = Byte.MIN_VALUE;
}
}

protected final void initPREGM3(String s) {
if (!s.trim().isEmpty()) {
PREGM3 = Byte.parseByte(s);
} else {
PREGM3 = Byte.MIN_VALUE;
}
}

protected final void initPREGM4(String s) {
if (!s.trim().isEmpty()) {
PREGM4 = Byte.parseByte(s);
} else {
PREGM4 = Byte.MIN_VALUE;
}
}

protected final void initPREGM5(String s) {
if (!s.trim().isEmpty()) {
PREGM5 = Byte.parseByte(s);
} else {
PREGM5 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT1(String s) {
if (!s.trim().isEmpty()) {
PREGOUT1 = Byte.parseByte(s);
} else {
PREGOUT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT2(String s) {
if (!s.trim().isEmpty()) {
PREGOUT2 = Byte.parseByte(s);
} else {
PREGOUT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT3(String s) {
if (!s.trim().isEmpty()) {
PREGOUT3 = Byte.parseByte(s);
} else {
PREGOUT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT4(String s) {
if (!s.trim().isEmpty()) {
PREGOUT4 = Byte.parseByte(s);
} else {
PREGOUT4 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT5(String s) {
if (!s.trim().isEmpty()) {
PREGOUT5 = Byte.parseByte(s);
} else {
PREGOUT5 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK11(String s) {
if (!s.trim().isEmpty()) {
PREGSMK11 = Byte.parseByte(s);
} else {
PREGSMK11 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK12(String s) {
if (!s.trim().isEmpty()) {
PREGSMK12 = Byte.parseByte(s);
} else {
PREGSMK12 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK13(String s) {
if (!s.trim().isEmpty()) {
PREGSMK13 = Byte.parseByte(s);
} else {
PREGSMK13 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK14(String s) {
if (!s.trim().isEmpty()) {
PREGSMK14 = Byte.parseByte(s);
} else {
PREGSMK14 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK15(String s) {
if (!s.trim().isEmpty()) {
PREGSMK15 = Byte.parseByte(s);
} else {
PREGSMK15 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK21(String s) {
if (!s.trim().isEmpty()) {
PREGSMK21 = Byte.parseByte(s);
} else {
PREGSMK21 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK22(String s) {
if (!s.trim().isEmpty()) {
PREGSMK22 = Byte.parseByte(s);
} else {
PREGSMK22 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK23(String s) {
if (!s.trim().isEmpty()) {
PREGSMK23 = Byte.parseByte(s);
} else {
PREGSMK23 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK24(String s) {
if (!s.trim().isEmpty()) {
PREGSMK24 = Byte.parseByte(s);
} else {
PREGSMK24 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK25(String s) {
if (!s.trim().isEmpty()) {
PREGSMK25 = Byte.parseByte(s);
} else {
PREGSMK25 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK31(String s) {
if (!s.trim().isEmpty()) {
PREGSMK31 = Byte.parseByte(s);
} else {
PREGSMK31 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK32(String s) {
if (!s.trim().isEmpty()) {
PREGSMK32 = Byte.parseByte(s);
} else {
PREGSMK32 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK33(String s) {
if (!s.trim().isEmpty()) {
PREGSMK33 = Byte.parseByte(s);
} else {
PREGSMK33 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK34(String s) {
if (!s.trim().isEmpty()) {
PREGSMK34 = Byte.parseByte(s);
} else {
PREGSMK34 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK35(String s) {
if (!s.trim().isEmpty()) {
PREGSMK35 = Byte.parseByte(s);
} else {
PREGSMK35 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE1(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE1 = Byte.parseByte(s);
} else {
PREGSMOKE1 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE2(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE2 = Byte.parseByte(s);
} else {
PREGSMOKE2 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE3(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE3 = Byte.parseByte(s);
} else {
PREGSMOKE3 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE4(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE4 = Byte.parseByte(s);
} else {
PREGSMOKE4 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE5(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE5 = Byte.parseByte(s);
} else {
PREGSMOKE5 = Byte.MIN_VALUE;
}
}

protected final void initPREGY41(String s) {
if (!s.trim().isEmpty()) {
PREGY41 = Short.parseShort(s);
} else {
PREGY41 = Short.MIN_VALUE;
}
}

protected final void initPREGY42(String s) {
if (!s.trim().isEmpty()) {
PREGY42 = Short.parseShort(s);
} else {
PREGY42 = Short.MIN_VALUE;
}
}

protected final void initPREGY43(String s) {
if (!s.trim().isEmpty()) {
PREGY43 = Short.parseShort(s);
} else {
PREGY43 = Short.MIN_VALUE;
}
}

protected final void initPREGY44(String s) {
if (!s.trim().isEmpty()) {
PREGY44 = Short.parseShort(s);
} else {
PREGY44 = Short.MIN_VALUE;
}
}

protected final void initPREGY45(String s) {
if (!s.trim().isEmpty()) {
PREGY45 = Byte.parseByte(s);
} else {
PREGY45 = Byte.MIN_VALUE;
}
}

protected final void initPREL(String s) {
if (!s.trim().isEmpty()) {
PREL = Byte.parseByte(s);
} else {
PREL = Byte.MIN_VALUE;
}
}

protected final void initPRFITB(String s) {
if (!s.trim().isEmpty()) {
PRFITB = Byte.parseByte(s);
} else {
PRFITB = Byte.MIN_VALUE;
}
}

protected final void initPRFITBA(String s) {
if (!s.trim().isEmpty()) {
PRFITBA = Byte.parseByte(s);
} else {
PRFITBA = Byte.MIN_VALUE;
}
}

protected final void initPRFITBW(String s) {
if (!s.trim().isEmpty()) {
PRFITBW = Byte.parseByte(s);
} else {
PRFITBW = Byte.MIN_VALUE;
}
}

protected final void initPS1(String s) {
if (!s.trim().isEmpty()) {
PS1 = Byte.parseByte(s);
} else {
PS1 = Byte.MIN_VALUE;
}
}

protected final void initPS10(String s) {
if (!s.trim().isEmpty()) {
PS10 = Byte.parseByte(s);
} else {
PS10 = Byte.MIN_VALUE;
}
}

protected final void initPS11(String s) {
if (!s.trim().isEmpty()) {
PS11 = Byte.parseByte(s);
} else {
PS11 = Byte.MIN_VALUE;
}
}

protected final void initPS12(String s) {
if (!s.trim().isEmpty()) {
PS12 = Byte.parseByte(s);
} else {
PS12 = Byte.MIN_VALUE;
}
}

protected final void initPS13(String s) {
if (!s.trim().isEmpty()) {
PS13 = Byte.parseByte(s);
} else {
PS13 = Byte.MIN_VALUE;
}
}

protected final void initPS14(String s) {
if (!s.trim().isEmpty()) {
PS14 = Byte.parseByte(s);
} else {
PS14 = Byte.MIN_VALUE;
}
}

protected final void initPS15(String s) {
if (!s.trim().isEmpty()) {
PS15 = Byte.parseByte(s);
} else {
PS15 = Byte.MIN_VALUE;
}
}

protected final void initPS16(String s) {
if (!s.trim().isEmpty()) {
PS16 = Byte.parseByte(s);
} else {
PS16 = Byte.MIN_VALUE;
}
}

protected final void initPS17(String s) {
if (!s.trim().isEmpty()) {
PS17 = Byte.parseByte(s);
} else {
PS17 = Byte.MIN_VALUE;
}
}

protected final void initPS18(String s) {
if (!s.trim().isEmpty()) {
PS18 = Byte.parseByte(s);
} else {
PS18 = Byte.MIN_VALUE;
}
}

protected final void initPS19(String s) {
if (!s.trim().isEmpty()) {
PS19 = Byte.parseByte(s);
} else {
PS19 = Byte.MIN_VALUE;
}
}

protected final void initPS2(String s) {
if (!s.trim().isEmpty()) {
PS2 = Byte.parseByte(s);
} else {
PS2 = Byte.MIN_VALUE;
}
}

protected final void initPS20(String s) {
if (!s.trim().isEmpty()) {
PS20 = Byte.parseByte(s);
} else {
PS20 = Byte.MIN_VALUE;
}
}

protected final void initPS21(String s) {
if (!s.trim().isEmpty()) {
PS21 = Byte.parseByte(s);
} else {
PS21 = Byte.MIN_VALUE;
}
}

protected final void initPS22(String s) {
if (!s.trim().isEmpty()) {
PS22 = Byte.parseByte(s);
} else {
PS22 = Byte.MIN_VALUE;
}
}

protected final void initPS23(String s) {
if (!s.trim().isEmpty()) {
PS23 = Byte.parseByte(s);
} else {
PS23 = Byte.MIN_VALUE;
}
}

protected final void initPS24(String s) {
if (!s.trim().isEmpty()) {
PS24 = Byte.parseByte(s);
} else {
PS24 = Byte.MIN_VALUE;
}
}

protected final void initPS25(String s) {
if (!s.trim().isEmpty()) {
PS25 = Byte.parseByte(s);
} else {
PS25 = Byte.MIN_VALUE;
}
}

protected final void initPS26(String s) {
if (!s.trim().isEmpty()) {
PS26 = Byte.parseByte(s);
} else {
PS26 = Byte.MIN_VALUE;
}
}

protected final void initPS27(String s) {
if (!s.trim().isEmpty()) {
PS27 = Byte.parseByte(s);
} else {
PS27 = Byte.MIN_VALUE;
}
}

protected final void initPS28(String s) {
if (!s.trim().isEmpty()) {
PS28 = Byte.parseByte(s);
} else {
PS28 = Byte.MIN_VALUE;
}
}

protected final void initPS29(String s) {
if (!s.trim().isEmpty()) {
PS29 = Byte.parseByte(s);
} else {
PS29 = Byte.MIN_VALUE;
}
}

protected final void initPS3(String s) {
if (!s.trim().isEmpty()) {
PS3 = Byte.parseByte(s);
} else {
PS3 = Byte.MIN_VALUE;
}
}

protected final void initPS30(String s) {
if (!s.trim().isEmpty()) {
PS30 = Byte.parseByte(s);
} else {
PS30 = Byte.MIN_VALUE;
}
}

protected final void initPS31(String s) {
if (!s.trim().isEmpty()) {
PS31 = Byte.parseByte(s);
} else {
PS31 = Byte.MIN_VALUE;
}
}

protected final void initPS32(String s) {
if (!s.trim().isEmpty()) {
PS32 = Byte.parseByte(s);
} else {
PS32 = Byte.MIN_VALUE;
}
}

protected final void initPS4(String s) {
if (!s.trim().isEmpty()) {
PS4 = Byte.parseByte(s);
} else {
PS4 = Byte.MIN_VALUE;
}
}

protected final void initPS5(String s) {
if (!s.trim().isEmpty()) {
PS5 = Byte.parseByte(s);
} else {
PS5 = Byte.MIN_VALUE;
}
}

protected final void initPS6(String s) {
if (!s.trim().isEmpty()) {
PS6 = Byte.parseByte(s);
} else {
PS6 = Byte.MIN_VALUE;
}
}

protected final void initPS7(String s) {
if (!s.trim().isEmpty()) {
PS7 = Byte.parseByte(s);
} else {
PS7 = Byte.MIN_VALUE;
}
}

protected final void initPS8(String s) {
if (!s.trim().isEmpty()) {
PS8 = Byte.parseByte(s);
} else {
PS8 = Byte.MIN_VALUE;
}
}

protected final void initPS9(String s) {
if (!s.trim().isEmpty()) {
PS9 = Byte.parseByte(s);
} else {
PS9 = Byte.MIN_VALUE;
}
}

protected final void initPSDQA_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQA_DV = Byte.parseByte(s);
} else {
PSDQA_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQB_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQB_DV = Byte.parseByte(s);
} else {
PSDQB_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQC_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQC_DV = Byte.parseByte(s);
} else {
PSDQC_DV = Byte.MIN_VALUE;
}
}

protected final void initPSNUMCH(String s) {
if (!s.trim().isEmpty()) {
PSNUMCH = Byte.parseByte(s);
} else {
PSNUMCH = Byte.MIN_VALUE;
}
}

protected final void initPSU(String s) {
if (!s.trim().isEmpty()) {
PSU = Integer.parseInt(s);
} else {
PSU = Integer.MIN_VALUE;
}
}

protected final void initPVTPAY(String s) {
if (!s.trim().isEmpty()) {
PVTPAY = Byte.parseByte(s);
} else {
PVTPAY = Byte.MIN_VALUE;
}
}

protected final void initQFCTRY(String s) {
if (!s.trim().isEmpty()) {
QFCTRY = Byte.parseByte(s);
} else {
QFCTRY = Byte.MIN_VALUE;
}
}

protected final void initQFHIGH(String s) {
if (!s.trim().isEmpty()) {
QFHIGH = Byte.parseByte(s);
} else {
QFHIGH = Byte.MIN_VALUE;
}
}

protected final void initQFHIGHFL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
QFHIGHFL_DV = false;
} else {
QFHIGHFL_DV = true;
}
}
}

protected final void initQFHIGHOTH(String s) {
if (!s.trim().isEmpty()) {
QFHIGHOTH = Byte.parseByte(s);
} else {
QFHIGHOTH = Byte.MIN_VALUE;
}
}

protected final void initQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
QFHIGH_DV = Byte.parseByte(s);
} else {
QFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initQFVOC1(String s) {
if (!s.trim().isEmpty()) {
QFVOC1 = Byte.parseByte(s);
} else {
QFVOC1 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC10(String s) {
if (!s.trim().isEmpty()) {
QFVOC10 = Byte.parseByte(s);
} else {
QFVOC10 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC11(String s) {
if (!s.trim().isEmpty()) {
QFVOC11 = Byte.parseByte(s);
} else {
QFVOC11 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC12(String s) {
if (!s.trim().isEmpty()) {
QFVOC12 = Byte.parseByte(s);
} else {
QFVOC12 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC13(String s) {
if (!s.trim().isEmpty()) {
QFVOC13 = Byte.parseByte(s);
} else {
QFVOC13 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC14(String s) {
if (!s.trim().isEmpty()) {
QFVOC14 = Byte.parseByte(s);
} else {
QFVOC14 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC15(String s) {
if (!s.trim().isEmpty()) {
QFVOC15 = Byte.parseByte(s);
} else {
QFVOC15 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC2(String s) {
if (!s.trim().isEmpty()) {
QFVOC2 = Byte.parseByte(s);
} else {
QFVOC2 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC3(String s) {
if (!s.trim().isEmpty()) {
QFVOC3 = Byte.parseByte(s);
} else {
QFVOC3 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC4(String s) {
if (!s.trim().isEmpty()) {
QFVOC4 = Byte.parseByte(s);
} else {
QFVOC4 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC5(String s) {
if (!s.trim().isEmpty()) {
QFVOC5 = Byte.parseByte(s);
} else {
QFVOC5 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC6(String s) {
if (!s.trim().isEmpty()) {
QFVOC6 = Byte.parseByte(s);
} else {
QFVOC6 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC7(String s) {
if (!s.trim().isEmpty()) {
QFVOC7 = Byte.parseByte(s);
} else {
QFVOC7 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC8(String s) {
if (!s.trim().isEmpty()) {
QFVOC8 = Byte.parseByte(s);
} else {
QFVOC8 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC9(String s) {
if (!s.trim().isEmpty()) {
QFVOC9 = Byte.parseByte(s);
} else {
QFVOC9 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC96(String s) {
if (!s.trim().isEmpty()) {
QFVOC96 = Byte.parseByte(s);
} else {
QFVOC96 = Byte.MIN_VALUE;
}
}

protected final void initQFVOCNONUK(String s) {
if (!s.trim().isEmpty()) {
QFVOCNONUK = Byte.parseByte(s);
} else {
QFVOCNONUK = Byte.MIN_VALUE;
}
}

protected final void initQFVOCUK(String s) {
if (!s.trim().isEmpty()) {
QFVOCUK = Byte.parseByte(s);
} else {
QFVOCUK = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW1(String s) {
if (!s.trim().isEmpty()) {
QUALNEW1 = Byte.parseByte(s);
} else {
QUALNEW1 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW10(String s) {
if (!s.trim().isEmpty()) {
QUALNEW10 = Byte.parseByte(s);
} else {
QUALNEW10 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW11(String s) {
if (!s.trim().isEmpty()) {
QUALNEW11 = Byte.parseByte(s);
} else {
QUALNEW11 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW13(String s) {
if (!s.trim().isEmpty()) {
QUALNEW13 = Byte.parseByte(s);
} else {
QUALNEW13 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW15(String s) {
if (!s.trim().isEmpty()) {
QUALNEW15 = Byte.parseByte(s);
} else {
QUALNEW15 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW16(String s) {
if (!s.trim().isEmpty()) {
QUALNEW16 = Byte.parseByte(s);
} else {
QUALNEW16 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW17(String s) {
if (!s.trim().isEmpty()) {
QUALNEW17 = Byte.parseByte(s);
} else {
QUALNEW17 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW18(String s) {
if (!s.trim().isEmpty()) {
QUALNEW18 = Byte.parseByte(s);
} else {
QUALNEW18 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW19(String s) {
if (!s.trim().isEmpty()) {
QUALNEW19 = Byte.parseByte(s);
} else {
QUALNEW19 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW2(String s) {
if (!s.trim().isEmpty()) {
QUALNEW2 = Byte.parseByte(s);
} else {
QUALNEW2 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW20(String s) {
if (!s.trim().isEmpty()) {
QUALNEW20 = Byte.parseByte(s);
} else {
QUALNEW20 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW21(String s) {
if (!s.trim().isEmpty()) {
QUALNEW21 = Byte.parseByte(s);
} else {
QUALNEW21 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW22(String s) {
if (!s.trim().isEmpty()) {
QUALNEW22 = Byte.parseByte(s);
} else {
QUALNEW22 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW23(String s) {
if (!s.trim().isEmpty()) {
QUALNEW23 = Byte.parseByte(s);
} else {
QUALNEW23 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW24(String s) {
if (!s.trim().isEmpty()) {
QUALNEW24 = Byte.parseByte(s);
} else {
QUALNEW24 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW25(String s) {
if (!s.trim().isEmpty()) {
QUALNEW25 = Byte.parseByte(s);
} else {
QUALNEW25 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW26(String s) {
if (!s.trim().isEmpty()) {
QUALNEW26 = Byte.parseByte(s);
} else {
QUALNEW26 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW27(String s) {
if (!s.trim().isEmpty()) {
QUALNEW27 = Byte.parseByte(s);
} else {
QUALNEW27 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW28(String s) {
if (!s.trim().isEmpty()) {
QUALNEW28 = Byte.parseByte(s);
} else {
QUALNEW28 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW29(String s) {
if (!s.trim().isEmpty()) {
QUALNEW29 = Byte.parseByte(s);
} else {
QUALNEW29 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW3(String s) {
if (!s.trim().isEmpty()) {
QUALNEW3 = Byte.parseByte(s);
} else {
QUALNEW3 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW30(String s) {
if (!s.trim().isEmpty()) {
QUALNEW30 = Byte.parseByte(s);
} else {
QUALNEW30 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW31(String s) {
if (!s.trim().isEmpty()) {
QUALNEW31 = Byte.parseByte(s);
} else {
QUALNEW31 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW4(String s) {
if (!s.trim().isEmpty()) {
QUALNEW4 = Byte.parseByte(s);
} else {
QUALNEW4 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW5(String s) {
if (!s.trim().isEmpty()) {
QUALNEW5 = Byte.parseByte(s);
} else {
QUALNEW5 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW6(String s) {
if (!s.trim().isEmpty()) {
QUALNEW6 = Byte.parseByte(s);
} else {
QUALNEW6 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW7(String s) {
if (!s.trim().isEmpty()) {
QUALNEW7 = Byte.parseByte(s);
} else {
QUALNEW7 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW8(String s) {
if (!s.trim().isEmpty()) {
QUALNEW8 = Byte.parseByte(s);
} else {
QUALNEW8 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW9(String s) {
if (!s.trim().isEmpty()) {
QUALNEW9 = Byte.parseByte(s);
} else {
QUALNEW9 = Byte.MIN_VALUE;
}
}

protected final void initQUALOC(String s) {
if (!s.trim().isEmpty()) {
QUALOC = Byte.parseByte(s);
} else {
QUALOC = Byte.MIN_VALUE;
}
}

protected final void initQUARTER(String s) {
if (!s.trim().isEmpty()) {
QUARTER = Byte.parseByte(s);
} else {
QUARTER = Byte.MIN_VALUE;
}
}

protected final void initRACEL(String s) {
if (!s.trim().isEmpty()) {
RACEL = Byte.parseByte(s);
} else {
RACEL = Byte.MIN_VALUE;
}
}

protected final void initRACELAT(String s) {
if (!s.trim().isEmpty()) {
RACELAT = Byte.parseByte(s);
} else {
RACELAT = Byte.MIN_VALUE;
}
}

protected final void initRACELBT(String s) {
if (!s.trim().isEmpty()) {
RACELBT = Byte.parseByte(s);
} else {
RACELBT = Byte.MIN_VALUE;
}
}

protected final void initRACELMT(String s) {
if (!s.trim().isEmpty()) {
RACELMT = Byte.parseByte(s);
} else {
RACELMT = Byte.MIN_VALUE;
}
}

protected final void initRACELOT_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELOT_CODE = Byte.parseByte(s);
} else {
RACELOT_CODE = Byte.MIN_VALUE;
}
}

protected final void initRACELO_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELO_CODE = Short.parseShort(s);
} else {
RACELO_CODE = Short.MIN_VALUE;
}
}

protected final void initRACELT(String s) {
if (!s.trim().isEmpty()) {
RACELT = Byte.parseByte(s);
} else {
RACELT = Byte.MIN_VALUE;
}
}

protected final void initRACELWT(String s) {
if (!s.trim().isEmpty()) {
RACELWT = Byte.parseByte(s);
} else {
RACELWT = Byte.MIN_VALUE;
}
}

protected final void initRACEL_DV(String s) {
if (!s.trim().isEmpty()) {
RACEL_DV = Byte.parseByte(s);
} else {
RACEL_DV = Byte.MIN_VALUE;
}
}

protected final void initREADDIF(String s) {
if (!s.trim().isEmpty()) {
READDIF = Byte.parseByte(s);
} else {
READDIF = Byte.MIN_VALUE;
}
}

protected final void initREASEND1(String s) {
if (!s.trim().isEmpty()) {
REASEND1 = Byte.parseByte(s);
} else {
REASEND1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2(String s) {
if (!s.trim().isEmpty()) {
REASEND2 = Byte.parseByte(s);
} else {
REASEND2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3(String s) {
if (!s.trim().isEmpty()) {
REASEND3 = Byte.parseByte(s);
} else {
REASEND3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4(String s) {
if (!s.trim().isEmpty()) {
REASEND4 = Byte.parseByte(s);
} else {
REASEND4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5(String s) {
if (!s.trim().isEmpty()) {
REASEND5 = Byte.parseByte(s);
} else {
REASEND5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6(String s) {
if (!s.trim().isEmpty()) {
REASEND6 = Byte.parseByte(s);
} else {
REASEND6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7(String s) {
if (!s.trim().isEmpty()) {
REASEND7 = Byte.parseByte(s);
} else {
REASEND7 = Byte.MIN_VALUE;
}
}

protected final void initRELUP(String s) {
if (!s.trim().isEmpty()) {
RELUP = Byte.parseByte(s);
} else {
RELUP = Byte.MIN_VALUE;
}
}

protected final void initREMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
REMAIL_CODE = Byte.parseByte(s);
} else {
REMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initRESPF16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
RESPF16 = false;
} else {
RESPF16 = true;
}
}
}

protected final void initRESPF16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16_DV = false;
} else {
RESPF16_DV = true;
}
}
}

protected final void initRESPM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
RESPM16 = false;
} else {
RESPM16 = true;
}
}
}

protected final void initRESPM16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16_DV = false;
} else {
RESPM16_DV = true;
}
}
}

protected final void initRETAMT(String s) {
if (!s.trim().isEmpty()) {
RETAMT = Byte.parseByte(s);
} else {
RETAMT = Byte.MIN_VALUE;
}
}

protected final void initRETCHK(String s) {
if (!s.trim().isEmpty()) {
RETCHK = Byte.parseByte(s);
} else {
RETCHK = Byte.MIN_VALUE;
}
}

protected final void initRETSUF(String s) {
if (!s.trim().isEmpty()) {
RETSUF = Byte.parseByte(s);
} else {
RETSUF = Byte.MIN_VALUE;
}
}

protected final void initRHLAND_CODE(String s) {
if (!s.trim().isEmpty()) {
RHLAND_CODE = Byte.parseByte(s);
} else {
RHLAND_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHMOB_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHMOB_CODE = Byte.parseByte(s);
} else {
RPHMOB_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHWRK_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHWRK_CODE = Byte.parseByte(s);
} else {
RPHWRK_CODE = Byte.MIN_VALUE;
}
}

protected final void initRTCON1(String s) {
if (!s.trim().isEmpty()) {
RTCON1 = Byte.parseByte(s);
} else {
RTCON1 = Byte.MIN_VALUE;
}
}

protected final void initRTCON2(String s) {
if (!s.trim().isEmpty()) {
RTCON2 = Byte.parseByte(s);
} else {
RTCON2 = Byte.MIN_VALUE;
}
}

protected final void initRTCON3(String s) {
if (!s.trim().isEmpty()) {
RTCON3 = Byte.parseByte(s);
} else {
RTCON3 = Byte.MIN_VALUE;
}
}

protected final void initRTCON4(String s) {
if (!s.trim().isEmpty()) {
RTCON4 = Byte.parseByte(s);
} else {
RTCON4 = Byte.MIN_VALUE;
}
}

protected final void initRTEXPJB(String s) {
if (!s.trim().isEmpty()) {
RTEXPJB = Byte.parseByte(s);
} else {
RTEXPJB = Byte.MIN_VALUE;
}
}

protected final void initRTFND1(String s) {
if (!s.trim().isEmpty()) {
RTFND1 = Byte.parseByte(s);
} else {
RTFND1 = Byte.MIN_VALUE;
}
}

protected final void initRTFND10(String s) {
if (!s.trim().isEmpty()) {
RTFND10 = Byte.parseByte(s);
} else {
RTFND10 = Byte.MIN_VALUE;
}
}

protected final void initRTFND2(String s) {
if (!s.trim().isEmpty()) {
RTFND2 = Byte.parseByte(s);
} else {
RTFND2 = Byte.MIN_VALUE;
}
}

protected final void initRTFND3(String s) {
if (!s.trim().isEmpty()) {
RTFND3 = Byte.parseByte(s);
} else {
RTFND3 = Byte.MIN_VALUE;
}
}

protected final void initRTFND4(String s) {
if (!s.trim().isEmpty()) {
RTFND4 = Byte.parseByte(s);
} else {
RTFND4 = Byte.MIN_VALUE;
}
}

protected final void initRTFND5(String s) {
if (!s.trim().isEmpty()) {
RTFND5 = Byte.parseByte(s);
} else {
RTFND5 = Byte.MIN_VALUE;
}
}

protected final void initRTFND6(String s) {
if (!s.trim().isEmpty()) {
RTFND6 = Byte.parseByte(s);
} else {
RTFND6 = Byte.MIN_VALUE;
}
}

protected final void initRTFND7(String s) {
if (!s.trim().isEmpty()) {
RTFND7 = Byte.parseByte(s);
} else {
RTFND7 = Byte.MIN_VALUE;
}
}

protected final void initRTFND8(String s) {
if (!s.trim().isEmpty()) {
RTFND8 = Byte.parseByte(s);
} else {
RTFND8 = Byte.MIN_VALUE;
}
}

protected final void initRTFND9(String s) {
if (!s.trim().isEmpty()) {
RTFND9 = Byte.parseByte(s);
} else {
RTFND9 = Byte.MIN_VALUE;
}
}

protected final void initRTFND96(String s) {
if (!s.trim().isEmpty()) {
RTFND96 = Byte.parseByte(s);
} else {
RTFND96 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO1(String s) {
if (!s.trim().isEmpty()) {
RTPRO1 = Byte.parseByte(s);
} else {
RTPRO1 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO2(String s) {
if (!s.trim().isEmpty()) {
RTPRO2 = Byte.parseByte(s);
} else {
RTPRO2 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO3(String s) {
if (!s.trim().isEmpty()) {
RTPRO3 = Byte.parseByte(s);
} else {
RTPRO3 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO4(String s) {
if (!s.trim().isEmpty()) {
RTPRO4 = Byte.parseByte(s);
} else {
RTPRO4 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO5(String s) {
if (!s.trim().isEmpty()) {
RTPRO5 = Byte.parseByte(s);
} else {
RTPRO5 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO6(String s) {
if (!s.trim().isEmpty()) {
RTPRO6 = Byte.parseByte(s);
} else {
RTPRO6 = Byte.MIN_VALUE;
}
}

protected final void initS2CTCONS(String s) {
if (!s.trim().isEmpty()) {
S2CTCONS = Byte.parseByte(s);
} else {
S2CTCONS = Byte.MIN_VALUE;
}
}

protected final void initS2CTREL(String s) {
if (!s.trim().isEmpty()) {
S2CTREL = Byte.parseByte(s);
} else {
S2CTREL = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB = Byte.parseByte(s);
} else {
SAMEJOB = Byte.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSATTRANSY1(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY1 = Byte.parseByte(s);
} else {
SATTRANSY1 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY10(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY10 = Byte.parseByte(s);
} else {
SATTRANSY10 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY2(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY2 = Byte.parseByte(s);
} else {
SATTRANSY2 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY3(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY3 = Byte.parseByte(s);
} else {
SATTRANSY3 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY4(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY4 = Byte.parseByte(s);
} else {
SATTRANSY4 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY5(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY5 = Byte.parseByte(s);
} else {
SATTRANSY5 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY6(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY6 = Byte.parseByte(s);
} else {
SATTRANSY6 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY7(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY7 = Byte.parseByte(s);
} else {
SATTRANSY7 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY8(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY8 = Byte.parseByte(s);
} else {
SATTRANSY8 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY9(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY9 = Byte.parseByte(s);
} else {
SATTRANSY9 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY97(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY97 = Byte.parseByte(s);
} else {
SATTRANSY97 = Byte.MIN_VALUE;
}
}

protected final void initSAVE(String s) {
if (!s.trim().isEmpty()) {
SAVE = Short.parseShort(s);
} else {
SAVE = Short.MIN_VALUE;
}
}

protected final void initSAVED(String s) {
if (!s.trim().isEmpty()) {
SAVED = Integer.parseInt(s);
} else {
SAVED = Integer.MIN_VALUE;
}
}

protected final void initSAVLT(String s) {
if (!s.trim().isEmpty()) {
SAVLT = Byte.parseByte(s);
} else {
SAVLT = Byte.MIN_VALUE;
}
}

protected final void initSAVREG(String s) {
if (!s.trim().isEmpty()) {
SAVREG = Byte.parseByte(s);
} else {
SAVREG = Byte.MIN_VALUE;
}
}

protected final void initSCAC(String s) {
if (!s.trim().isEmpty()) {
SCAC = Byte.parseByte(s);
} else {
SCAC = Byte.MIN_VALUE;
}
}

protected final void initSCFLAG_DV(String s) {
if (!s.trim().isEmpty()) {
SCFLAG_DV = Byte.parseByte(s);
} else {
SCFLAG_DV = Byte.MIN_VALUE;
}
}

protected final void initSCHLLOC(String s) {
if (!s.trim().isEmpty()) {
SCHLLOC = Byte.parseByte(s);
} else {
SCHLLOC = Byte.MIN_VALUE;
}
}

protected final void initSCHLLOCENG(String s) {
if (!s.trim().isEmpty()) {
SCHLLOCENG = Byte.parseByte(s);
} else {
SCHLLOCENG = Byte.MIN_VALUE;
}
}

protected final void initSCHOK(String s) {
if (!s.trim().isEmpty()) {
SCHOK = Byte.parseByte(s);
} else {
SCHOK = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY1(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY1 = Byte.parseByte(s);
} else {
SCHOOLCNTRY1 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY2(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY2 = Byte.parseByte(s);
} else {
SCHOOLCNTRY2 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY3(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY3 = Byte.parseByte(s);
} else {
SCHOOLCNTRY3 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY4(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY4 = Byte.parseByte(s);
} else {
SCHOOLCNTRY4 = Byte.MIN_VALUE;
}
}

protected final void initSCHOOLCNTRY5(String s) {
if (!s.trim().isEmpty()) {
SCHOOLCNTRY5 = Byte.parseByte(s);
} else {
SCHOOLCNTRY5 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT1(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT1 = Byte.parseByte(s);
} else {
SCLFSAT1 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT2(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT2 = Byte.parseByte(s);
} else {
SCLFSAT2 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT7(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT7 = Byte.parseByte(s);
} else {
SCLFSAT7 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSATO(String s) {
if (!s.trim().isEmpty()) {
SCLFSATO = Byte.parseByte(s);
} else {
SCLFSATO = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHA(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHA = Byte.parseByte(s);
} else {
SCOPNGBHA = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHB(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHB = Byte.parseByte(s);
} else {
SCOPNGBHB = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHC(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHC = Byte.parseByte(s);
} else {
SCOPNGBHC = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHD(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHD = Byte.parseByte(s);
} else {
SCOPNGBHD = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHE(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHE = Byte.parseByte(s);
} else {
SCOPNGBHE = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHF(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHF = Byte.parseByte(s);
} else {
SCOPNGBHF = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHG(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHG = Byte.parseByte(s);
} else {
SCOPNGBHG = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHH(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHH = Byte.parseByte(s);
} else {
SCOPNGBHH = Byte.MIN_VALUE;
}
}

protected final void initSCOTVOT1(String s) {
if (!s.trim().isEmpty()) {
SCOTVOT1 = Byte.parseByte(s);
} else {
SCOTVOT1 = Byte.MIN_VALUE;
}
}

protected final void initSCOTVOT2(String s) {
if (!s.trim().isEmpty()) {
SCOTVOT2 = Byte.parseByte(s);
} else {
SCOTVOT2 = Byte.MIN_VALUE;
}
}

protected final void initSCOTVOT3(String s) {
if (!s.trim().isEmpty()) {
SCOTVOT3 = Byte.parseByte(s);
} else {
SCOTVOT3 = Byte.MIN_VALUE;
}
}

protected final void initSCOTVOT4(String s) {
if (!s.trim().isEmpty()) {
SCOTVOT4 = Byte.parseByte(s);
} else {
SCOTVOT4 = Byte.MIN_VALUE;
}
}

protected final void initSCRF1(String s) {
if (!s.trim().isEmpty()) {
SCRF1 = Byte.parseByte(s);
} else {
SCRF1 = Byte.MIN_VALUE;
}
}

protected final void initSCRF2(String s) {
if (!s.trim().isEmpty()) {
SCRF2 = Byte.parseByte(s);
} else {
SCRF2 = Byte.MIN_VALUE;
}
}

protected final void initSCRF3(String s) {
if (!s.trim().isEmpty()) {
SCRF3 = Byte.parseByte(s);
} else {
SCRF3 = Byte.MIN_VALUE;
}
}

protected final void initSCRF4(String s) {
if (!s.trim().isEmpty()) {
SCRF4 = Byte.parseByte(s);
} else {
SCRF4 = Byte.MIN_VALUE;
}
}

protected final void initSCRF5(String s) {
if (!s.trim().isEmpty()) {
SCRF5 = Byte.parseByte(s);
} else {
SCRF5 = Byte.MIN_VALUE;
}
}

protected final void initSCRF6(String s) {
if (!s.trim().isEmpty()) {
SCRF6 = Byte.parseByte(s);
} else {
SCRF6 = Byte.MIN_VALUE;
}
}

protected final void initSCRF97(String s) {
if (!s.trim().isEmpty()) {
SCRF97 = Byte.parseByte(s);
} else {
SCRF97 = Byte.MIN_VALUE;
}
}

protected final void initSCRX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCRX_CODE = Byte.parseByte(s);
} else {
SCRX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSCSF1(String s) {
if (!s.trim().isEmpty()) {
SCSF1 = Byte.parseByte(s);
} else {
SCSF1 = Byte.MIN_VALUE;
}
}

protected final void initSCSF2A(String s) {
if (!s.trim().isEmpty()) {
SCSF2A = Byte.parseByte(s);
} else {
SCSF2A = Byte.MIN_VALUE;
}
}

protected final void initSCSF2B(String s) {
if (!s.trim().isEmpty()) {
SCSF2B = Byte.parseByte(s);
} else {
SCSF2B = Byte.MIN_VALUE;
}
}

protected final void initSCSF3A(String s) {
if (!s.trim().isEmpty()) {
SCSF3A = Byte.parseByte(s);
} else {
SCSF3A = Byte.MIN_VALUE;
}
}

protected final void initSCSF3B(String s) {
if (!s.trim().isEmpty()) {
SCSF3B = Byte.parseByte(s);
} else {
SCSF3B = Byte.MIN_VALUE;
}
}

protected final void initSCSF4A(String s) {
if (!s.trim().isEmpty()) {
SCSF4A = Byte.parseByte(s);
} else {
SCSF4A = Byte.MIN_VALUE;
}
}

protected final void initSCSF4B(String s) {
if (!s.trim().isEmpty()) {
SCSF4B = Byte.parseByte(s);
} else {
SCSF4B = Byte.MIN_VALUE;
}
}

protected final void initSCSF5(String s) {
if (!s.trim().isEmpty()) {
SCSF5 = Byte.parseByte(s);
} else {
SCSF5 = Byte.MIN_VALUE;
}
}

protected final void initSCSF6A(String s) {
if (!s.trim().isEmpty()) {
SCSF6A = Byte.parseByte(s);
} else {
SCSF6A = Byte.MIN_VALUE;
}
}

protected final void initSCSF6B(String s) {
if (!s.trim().isEmpty()) {
SCSF6B = Byte.parseByte(s);
} else {
SCSF6B = Byte.MIN_VALUE;
}
}

protected final void initSCSF6C(String s) {
if (!s.trim().isEmpty()) {
SCSF6C = Byte.parseByte(s);
} else {
SCSF6C = Byte.MIN_VALUE;
}
}

protected final void initSCSF7(String s) {
if (!s.trim().isEmpty()) {
SCSF7 = Byte.parseByte(s);
} else {
SCSF7 = Byte.MIN_VALUE;
}
}

protected final void initSCUN1(String s) {
if (!s.trim().isEmpty()) {
SCUN1 = Byte.parseByte(s);
} else {
SCUN1 = Byte.MIN_VALUE;
}
}

protected final void initSCUN2(String s) {
if (!s.trim().isEmpty()) {
SCUN2 = Byte.parseByte(s);
} else {
SCUN2 = Byte.MIN_VALUE;
}
}

protected final void initSCUN3(String s) {
if (!s.trim().isEmpty()) {
SCUN3 = Byte.parseByte(s);
} else {
SCUN3 = Byte.MIN_VALUE;
}
}

protected final void initSCUN97(String s) {
if (!s.trim().isEmpty()) {
SCUN97 = Byte.parseByte(s);
} else {
SCUN97 = Byte.MIN_VALUE;
}
}

protected final void initSCUX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCUX_CODE = Byte.parseByte(s);
} else {
SCUX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSEEARNGRS_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_DV = Double.parseDouble(s);
} else {
SEEARNGRS_DV = Double.NaN;
}
}

protected final void initSEEARNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_IF = Byte.parseByte(s);
} else {
SEEARNGRS_IF = Byte.MIN_VALUE;
}
}

protected final void initSEEARNNET_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNNET_DV = Double.parseDouble(s);
} else {
SEEARNNET_DV = Double.NaN;
}
}

protected final void initSERVACC(String s) {
if (!s.trim().isEmpty()) {
SERVACC = Byte.parseByte(s);
} else {
SERVACC = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY1(String s) {
if (!s.trim().isEmpty()) {
SERVACCY1 = Byte.parseByte(s);
} else {
SERVACCY1 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY10(String s) {
if (!s.trim().isEmpty()) {
SERVACCY10 = Byte.parseByte(s);
} else {
SERVACCY10 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY11(String s) {
if (!s.trim().isEmpty()) {
SERVACCY11 = Byte.parseByte(s);
} else {
SERVACCY11 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY12(String s) {
if (!s.trim().isEmpty()) {
SERVACCY12 = Byte.parseByte(s);
} else {
SERVACCY12 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY13(String s) {
if (!s.trim().isEmpty()) {
SERVACCY13 = Byte.parseByte(s);
} else {
SERVACCY13 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY14(String s) {
if (!s.trim().isEmpty()) {
SERVACCY14 = Byte.parseByte(s);
} else {
SERVACCY14 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY15(String s) {
if (!s.trim().isEmpty()) {
SERVACCY15 = Byte.parseByte(s);
} else {
SERVACCY15 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY2(String s) {
if (!s.trim().isEmpty()) {
SERVACCY2 = Byte.parseByte(s);
} else {
SERVACCY2 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY3(String s) {
if (!s.trim().isEmpty()) {
SERVACCY3 = Byte.parseByte(s);
} else {
SERVACCY3 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY4(String s) {
if (!s.trim().isEmpty()) {
SERVACCY4 = Byte.parseByte(s);
} else {
SERVACCY4 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY5(String s) {
if (!s.trim().isEmpty()) {
SERVACCY5 = Byte.parseByte(s);
} else {
SERVACCY5 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY6(String s) {
if (!s.trim().isEmpty()) {
SERVACCY6 = Byte.parseByte(s);
} else {
SERVACCY6 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY7(String s) {
if (!s.trim().isEmpty()) {
SERVACCY7 = Byte.parseByte(s);
} else {
SERVACCY7 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY8(String s) {
if (!s.trim().isEmpty()) {
SERVACCY8 = Byte.parseByte(s);
} else {
SERVACCY8 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY9(String s) {
if (!s.trim().isEmpty()) {
SERVACCY9 = Byte.parseByte(s);
} else {
SERVACCY9 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY97(String s) {
if (!s.trim().isEmpty()) {
SERVACCY97 = Byte.parseByte(s);
} else {
SERVACCY97 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE1(String s) {
if (!s.trim().isEmpty()) {
SERVUSE1 = Byte.parseByte(s);
} else {
SERVUSE1 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE10(String s) {
if (!s.trim().isEmpty()) {
SERVUSE10 = Byte.parseByte(s);
} else {
SERVUSE10 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE2(String s) {
if (!s.trim().isEmpty()) {
SERVUSE2 = Byte.parseByte(s);
} else {
SERVUSE2 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE3(String s) {
if (!s.trim().isEmpty()) {
SERVUSE3 = Byte.parseByte(s);
} else {
SERVUSE3 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE4(String s) {
if (!s.trim().isEmpty()) {
SERVUSE4 = Byte.parseByte(s);
} else {
SERVUSE4 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE5(String s) {
if (!s.trim().isEmpty()) {
SERVUSE5 = Byte.parseByte(s);
} else {
SERVUSE5 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE6(String s) {
if (!s.trim().isEmpty()) {
SERVUSE6 = Byte.parseByte(s);
} else {
SERVUSE6 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE7(String s) {
if (!s.trim().isEmpty()) {
SERVUSE7 = Byte.parseByte(s);
} else {
SERVUSE7 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE8(String s) {
if (!s.trim().isEmpty()) {
SERVUSE8 = Byte.parseByte(s);
} else {
SERVUSE8 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE9(String s) {
if (!s.trim().isEmpty()) {
SERVUSE9 = Byte.parseByte(s);
} else {
SERVUSE9 = Byte.MIN_VALUE;
}
}

protected final void initSERVUSE96(String s) {
if (!s.trim().isEmpty()) {
SERVUSE96 = Byte.parseByte(s);
} else {
SERVUSE96 = Byte.MIN_VALUE;
}
}

protected final void initSEX_DV(String s) {
if (!s.trim().isEmpty()) {
SEX_DV = Byte.parseByte(s);
} else {
SEX_DV = Byte.MIN_VALUE;
}
}

protected final void initSF1(String s) {
if (!s.trim().isEmpty()) {
SF1 = Byte.parseByte(s);
} else {
SF1 = Byte.MIN_VALUE;
}
}

protected final void initSF12MCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12MCS_DV = Double.parseDouble(s);
} else {
SF12MCS_DV = Double.NaN;
}
}

protected final void initSF12PCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12PCS_DV = Double.parseDouble(s);
} else {
SF12PCS_DV = Double.NaN;
}
}

protected final void initSIMAGE(String s) {
if (!s.trim().isEmpty()) {
SIMAGE = Byte.parseByte(s);
} else {
SIMAGE = Byte.MIN_VALUE;
}
}

protected final void initSIMAREA(String s) {
if (!s.trim().isEmpty()) {
SIMAREA = Byte.parseByte(s);
} else {
SIMAREA = Byte.MIN_VALUE;
}
}

protected final void initSIMEDUC(String s) {
if (!s.trim().isEmpty()) {
SIMEDUC = Byte.parseByte(s);
} else {
SIMEDUC = Byte.MIN_VALUE;
}
}

protected final void initSIMFAM(String s) {
if (!s.trim().isEmpty()) {
SIMFAM = Byte.parseByte(s);
} else {
SIMFAM = Byte.MIN_VALUE;
}
}

protected final void initSIMINC(String s) {
if (!s.trim().isEmpty()) {
SIMINC = Byte.parseByte(s);
} else {
SIMINC = Byte.MIN_VALUE;
}
}

protected final void initSIMJOB(String s) {
if (!s.trim().isEmpty()) {
SIMJOB = Byte.parseByte(s);
} else {
SIMJOB = Byte.MIN_VALUE;
}
}

protected final void initSIMRACE(String s) {
if (!s.trim().isEmpty()) {
SIMRACE = Byte.parseByte(s);
} else {
SIMRACE = Byte.MIN_VALUE;
}
}

protected final void initSINGLE_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
SINGLE_DV = false;
} else {
SINGLE_DV = true;
}
}
}

protected final void initSMARTMOB(String s) {
if (!s.trim().isEmpty()) {
SMARTMOB = Byte.parseByte(s);
} else {
SMARTMOB = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH11(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH11 = Byte.parseByte(s);
} else {
SMKMNTH11 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH12(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH12 = Byte.parseByte(s);
} else {
SMKMNTH12 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH13(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH13 = Byte.parseByte(s);
} else {
SMKMNTH13 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH14(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH14 = Byte.parseByte(s);
} else {
SMKMNTH14 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH15(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH15 = Byte.parseByte(s);
} else {
SMKMNTH15 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH21(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH21 = Byte.parseByte(s);
} else {
SMKMNTH21 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH22(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH22 = Byte.parseByte(s);
} else {
SMKMNTH22 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH23(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH23 = Byte.parseByte(s);
} else {
SMKMNTH23 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH24(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH24 = Byte.parseByte(s);
} else {
SMKMNTH24 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH25(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH25 = Byte.parseByte(s);
} else {
SMKMNTH25 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH31(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH31 = Byte.parseByte(s);
} else {
SMKMNTH31 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH32(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH32 = Byte.parseByte(s);
} else {
SMKMNTH32 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH33(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH33 = Byte.parseByte(s);
} else {
SMKMNTH33 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH34(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH34 = Byte.parseByte(s);
} else {
SMKMNTH34 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH35(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH35 = Byte.parseByte(s);
} else {
SMKMNTH35 = Byte.MIN_VALUE;
}
}

protected final void initSMOKER(String s) {
if (!s.trim().isEmpty()) {
SMOKER = Short.parseShort(s);
} else {
SMOKER = Short.MIN_VALUE;
}
}

protected final void initSOCCONT(String s) {
if (!s.trim().isEmpty()) {
SOCCONT = Byte.parseByte(s);
} else {
SOCCONT = Byte.MIN_VALUE;
}
}

protected final void initSOCWEB(String s) {
if (!s.trim().isEmpty()) {
SOCWEB = Byte.parseByte(s);
} else {
SOCWEB = Byte.MIN_VALUE;
}
}

protected final void initSPKDIF(String s) {
if (!s.trim().isEmpty()) {
SPKDIF = Byte.parseByte(s);
} else {
SPKDIF = Byte.MIN_VALUE;
}
}

protected final void initSPPEN(String s) {
if (!s.trim().isEmpty()) {
SPPEN = Byte.parseByte(s);
} else {
SPPEN = Byte.MIN_VALUE;
}
}

protected final void initSPPID(String s) {
if (!s.trim().isEmpty()) {
SPPID = Integer.parseInt(s);
} else {
SPPID = Integer.MIN_VALUE;
}
}

protected final void initSPPNO(String s) {
if (!s.trim().isEmpty()) {
SPPNO = Byte.parseByte(s);
} else {
SPPNO = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT1(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT1 = Byte.parseByte(s);
} else {
SRVYNOT1 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT10(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT10 = Byte.parseByte(s);
} else {
SRVYNOT10 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT2(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT2 = Byte.parseByte(s);
} else {
SRVYNOT2 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT3(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT3 = Byte.parseByte(s);
} else {
SRVYNOT3 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT4(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT4 = Byte.parseByte(s);
} else {
SRVYNOT4 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT5(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT5 = Byte.parseByte(s);
} else {
SRVYNOT5 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT6(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT6 = Byte.parseByte(s);
} else {
SRVYNOT6 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT7(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT7 = Byte.parseByte(s);
} else {
SRVYNOT7 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT8(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT8 = Byte.parseByte(s);
} else {
SRVYNOT8 = Byte.MIN_VALUE;
}
}

protected final void initSRVYNOT9(String s) {
if (!s.trim().isEmpty()) {
SRVYNOT9 = Byte.parseByte(s);
} else {
SRVYNOT9 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM1(String s) {
if (!s.trim().isEmpty()) {
STATCM1 = Byte.parseByte(s);
} else {
STATCM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM2(String s) {
if (!s.trim().isEmpty()) {
STATCM2 = Byte.parseByte(s);
} else {
STATCM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM3(String s) {
if (!s.trim().isEmpty()) {
STATCM3 = Byte.parseByte(s);
} else {
STATCM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM4(String s) {
if (!s.trim().isEmpty()) {
STATCM4 = Byte.parseByte(s);
} else {
STATCM4 = Byte.MIN_VALUE;
}
}

protected final void initSTATCY41(String s) {
if (!s.trim().isEmpty()) {
STATCY41 = Short.parseShort(s);
} else {
STATCY41 = Short.MIN_VALUE;
}
}

protected final void initSTATCY42(String s) {
if (!s.trim().isEmpty()) {
STATCY42 = Short.parseShort(s);
} else {
STATCY42 = Short.MIN_VALUE;
}
}

protected final void initSTATCY43(String s) {
if (!s.trim().isEmpty()) {
STATCY43 = Short.parseShort(s);
} else {
STATCY43 = Short.MIN_VALUE;
}
}

protected final void initSTATCY44(String s) {
if (!s.trim().isEmpty()) {
STATCY44 = Short.parseShort(s);
} else {
STATCY44 = Short.MIN_VALUE;
}
}

protected final void initSTATENDD1(String s) {
if (!s.trim().isEmpty()) {
STATENDD1 = Byte.parseByte(s);
} else {
STATENDD1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD2(String s) {
if (!s.trim().isEmpty()) {
STATENDD2 = Byte.parseByte(s);
} else {
STATENDD2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD3(String s) {
if (!s.trim().isEmpty()) {
STATENDD3 = Byte.parseByte(s);
} else {
STATENDD3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD4(String s) {
if (!s.trim().isEmpty()) {
STATENDD4 = Byte.parseByte(s);
} else {
STATENDD4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD5(String s) {
if (!s.trim().isEmpty()) {
STATENDD5 = Byte.parseByte(s);
} else {
STATENDD5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD6(String s) {
if (!s.trim().isEmpty()) {
STATENDD6 = Byte.parseByte(s);
} else {
STATENDD6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD7(String s) {
if (!s.trim().isEmpty()) {
STATENDD7 = Byte.parseByte(s);
} else {
STATENDD7 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM1(String s) {
if (!s.trim().isEmpty()) {
STATENDM1 = Byte.parseByte(s);
} else {
STATENDM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM2(String s) {
if (!s.trim().isEmpty()) {
STATENDM2 = Byte.parseByte(s);
} else {
STATENDM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM3(String s) {
if (!s.trim().isEmpty()) {
STATENDM3 = Byte.parseByte(s);
} else {
STATENDM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM4(String s) {
if (!s.trim().isEmpty()) {
STATENDM4 = Byte.parseByte(s);
} else {
STATENDM4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM5(String s) {
if (!s.trim().isEmpty()) {
STATENDM5 = Byte.parseByte(s);
} else {
STATENDM5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM6(String s) {
if (!s.trim().isEmpty()) {
STATENDM6 = Byte.parseByte(s);
} else {
STATENDM6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM7(String s) {
if (!s.trim().isEmpty()) {
STATENDM7 = Byte.parseByte(s);
} else {
STATENDM7 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDY41(String s) {
if (!s.trim().isEmpty()) {
STATENDY41 = Short.parseShort(s);
} else {
STATENDY41 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY42(String s) {
if (!s.trim().isEmpty()) {
STATENDY42 = Short.parseShort(s);
} else {
STATENDY42 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY43(String s) {
if (!s.trim().isEmpty()) {
STATENDY43 = Short.parseShort(s);
} else {
STATENDY43 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY44(String s) {
if (!s.trim().isEmpty()) {
STATENDY44 = Short.parseShort(s);
} else {
STATENDY44 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY45(String s) {
if (!s.trim().isEmpty()) {
STATENDY45 = Short.parseShort(s);
} else {
STATENDY45 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY46(String s) {
if (!s.trim().isEmpty()) {
STATENDY46 = Short.parseShort(s);
} else {
STATENDY46 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY47(String s) {
if (!s.trim().isEmpty()) {
STATENDY47 = Short.parseShort(s);
} else {
STATENDY47 = Short.MIN_VALUE;
}
}

protected final void initSTENDREAS(String s) {
if (!s.trim().isEmpty()) {
STENDREAS = Byte.parseByte(s);
} else {
STENDREAS = Byte.MIN_VALUE;
}
}

protected final void initSTRATA(String s) {
if (!s.trim().isEmpty()) {
STRATA = Short.parseShort(s);
} else {
STRATA = Short.MIN_VALUE;
}
}

protected final void initSUSP(String s) {
if (!s.trim().isEmpty()) {
SUSP = Byte.parseByte(s);
} else {
SUSP = Byte.MIN_VALUE;
}
}

protected final void initTELDIF(String s) {
if (!s.trim().isEmpty()) {
TELDIF = Byte.parseByte(s);
} else {
TELDIF = Byte.MIN_VALUE;
}
}

protected final void initTRAINANY(String s) {
if (!s.trim().isEmpty()) {
TRAINANY = Byte.parseByte(s);
} else {
TRAINANY = Byte.MIN_VALUE;
}
}

protected final void initTRAINDAYS1(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS1 = Short.parseShort(s);
} else {
TRAINDAYS1 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS2(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS2 = Short.parseShort(s);
} else {
TRAINDAYS2 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS3(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS3 = Short.parseShort(s);
} else {
TRAINDAYS3 = Short.MIN_VALUE;
}
}

protected final void initTRAINEND1(String s) {
if (!s.trim().isEmpty()) {
TRAINEND1 = Byte.parseByte(s);
} else {
TRAINEND1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND2(String s) {
if (!s.trim().isEmpty()) {
TRAINEND2 = Byte.parseByte(s);
} else {
TRAINEND2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND3(String s) {
if (!s.trim().isEmpty()) {
TRAINEND3 = Byte.parseByte(s);
} else {
TRAINEND3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS1(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS1 = Byte.parseByte(s);
} else {
TRAINHRS1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS2(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS2 = Byte.parseByte(s);
} else {
TRAINHRS2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS3(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS3 = Byte.parseByte(s);
} else {
TRAINHRS3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINN(String s) {
if (!s.trim().isEmpty()) {
TRAINN = Byte.parseByte(s);
} else {
TRAINN = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP11(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP11 = Byte.parseByte(s);
} else {
TRAINPURP11 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP12(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP12 = Byte.parseByte(s);
} else {
TRAINPURP12 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP13(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP13 = Byte.parseByte(s);
} else {
TRAINPURP13 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP21(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP21 = Byte.parseByte(s);
} else {
TRAINPURP21 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP22(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP22 = Byte.parseByte(s);
} else {
TRAINPURP22 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP23(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP23 = Byte.parseByte(s);
} else {
TRAINPURP23 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP31(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP31 = Byte.parseByte(s);
} else {
TRAINPURP31 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP32(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP32 = Byte.parseByte(s);
} else {
TRAINPURP32 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP33(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP33 = Byte.parseByte(s);
} else {
TRAINPURP33 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP41(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP41 = Byte.parseByte(s);
} else {
TRAINPURP41 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP42(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP42 = Byte.parseByte(s);
} else {
TRAINPURP42 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP43(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP43 = Byte.parseByte(s);
} else {
TRAINPURP43 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP51(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP51 = Byte.parseByte(s);
} else {
TRAINPURP51 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP52(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP52 = Byte.parseByte(s);
} else {
TRAINPURP52 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP53(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP53 = Byte.parseByte(s);
} else {
TRAINPURP53 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP61(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP61 = Byte.parseByte(s);
} else {
TRAINPURP61 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP62(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP62 = Byte.parseByte(s);
} else {
TRAINPURP62 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP63(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP63 = Byte.parseByte(s);
} else {
TRAINPURP63 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP71(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP71 = Byte.parseByte(s);
} else {
TRAINPURP71 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP72(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP72 = Byte.parseByte(s);
} else {
TRAINPURP72 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP73(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP73 = Byte.parseByte(s);
} else {
TRAINPURP73 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL1 = Byte.parseByte(s);
} else {
TRAINQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL2 = Byte.parseByte(s);
} else {
TRAINQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL3 = Byte.parseByte(s);
} else {
TRAINQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRBIKEFQ(String s) {
if (!s.trim().isEmpty()) {
TRBIKEFQ = Byte.parseByte(s);
} else {
TRBIKEFQ = Byte.MIN_VALUE;
}
}

protected final void initTRBUSFQ(String s) {
if (!s.trim().isEmpty()) {
TRBUSFQ = Byte.parseByte(s);
} else {
TRBUSFQ = Byte.MIN_VALUE;
}
}

protected final void initTRCARFQ(String s) {
if (!s.trim().isEmpty()) {
TRCARFQ = Byte.parseByte(s);
} else {
TRCARFQ = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRQUAL1 = Byte.parseByte(s);
} else {
TRQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL10(String s) {
if (!s.trim().isEmpty()) {
TRQUAL10 = Byte.parseByte(s);
} else {
TRQUAL10 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL11(String s) {
if (!s.trim().isEmpty()) {
TRQUAL11 = Byte.parseByte(s);
} else {
TRQUAL11 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL13(String s) {
if (!s.trim().isEmpty()) {
TRQUAL13 = Byte.parseByte(s);
} else {
TRQUAL13 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL15(String s) {
if (!s.trim().isEmpty()) {
TRQUAL15 = Byte.parseByte(s);
} else {
TRQUAL15 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL16(String s) {
if (!s.trim().isEmpty()) {
TRQUAL16 = Byte.parseByte(s);
} else {
TRQUAL16 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL17(String s) {
if (!s.trim().isEmpty()) {
TRQUAL17 = Byte.parseByte(s);
} else {
TRQUAL17 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL18(String s) {
if (!s.trim().isEmpty()) {
TRQUAL18 = Byte.parseByte(s);
} else {
TRQUAL18 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL19(String s) {
if (!s.trim().isEmpty()) {
TRQUAL19 = Byte.parseByte(s);
} else {
TRQUAL19 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRQUAL2 = Byte.parseByte(s);
} else {
TRQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL20(String s) {
if (!s.trim().isEmpty()) {
TRQUAL20 = Byte.parseByte(s);
} else {
TRQUAL20 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL21(String s) {
if (!s.trim().isEmpty()) {
TRQUAL21 = Byte.parseByte(s);
} else {
TRQUAL21 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL22(String s) {
if (!s.trim().isEmpty()) {
TRQUAL22 = Byte.parseByte(s);
} else {
TRQUAL22 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL23(String s) {
if (!s.trim().isEmpty()) {
TRQUAL23 = Byte.parseByte(s);
} else {
TRQUAL23 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL24(String s) {
if (!s.trim().isEmpty()) {
TRQUAL24 = Byte.parseByte(s);
} else {
TRQUAL24 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL25(String s) {
if (!s.trim().isEmpty()) {
TRQUAL25 = Byte.parseByte(s);
} else {
TRQUAL25 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL26(String s) {
if (!s.trim().isEmpty()) {
TRQUAL26 = Byte.parseByte(s);
} else {
TRQUAL26 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL27(String s) {
if (!s.trim().isEmpty()) {
TRQUAL27 = Byte.parseByte(s);
} else {
TRQUAL27 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL28(String s) {
if (!s.trim().isEmpty()) {
TRQUAL28 = Byte.parseByte(s);
} else {
TRQUAL28 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL29(String s) {
if (!s.trim().isEmpty()) {
TRQUAL29 = Byte.parseByte(s);
} else {
TRQUAL29 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRQUAL3 = Byte.parseByte(s);
} else {
TRQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL30(String s) {
if (!s.trim().isEmpty()) {
TRQUAL30 = Byte.parseByte(s);
} else {
TRQUAL30 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL31(String s) {
if (!s.trim().isEmpty()) {
TRQUAL31 = Byte.parseByte(s);
} else {
TRQUAL31 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL4(String s) {
if (!s.trim().isEmpty()) {
TRQUAL4 = Byte.parseByte(s);
} else {
TRQUAL4 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL5(String s) {
if (!s.trim().isEmpty()) {
TRQUAL5 = Byte.parseByte(s);
} else {
TRQUAL5 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL6(String s) {
if (!s.trim().isEmpty()) {
TRQUAL6 = Byte.parseByte(s);
} else {
TRQUAL6 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL7(String s) {
if (!s.trim().isEmpty()) {
TRQUAL7 = Byte.parseByte(s);
} else {
TRQUAL7 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL8(String s) {
if (!s.trim().isEmpty()) {
TRQUAL8 = Byte.parseByte(s);
} else {
TRQUAL8 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL9(String s) {
if (!s.trim().isEmpty()) {
TRQUAL9 = Byte.parseByte(s);
} else {
TRQUAL9 = Byte.MIN_VALUE;
}
}

protected final void initTRTRNFQ(String s) {
if (!s.trim().isEmpty()) {
TRTRNFQ = Byte.parseByte(s);
} else {
TRTRNFQ = Byte.MIN_VALUE;
}
}

protected final void initTRWHO1(String s) {
if (!s.trim().isEmpty()) {
TRWHO1 = Byte.parseByte(s);
} else {
TRWHO1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO2(String s) {
if (!s.trim().isEmpty()) {
TRWHO2 = Byte.parseByte(s);
} else {
TRWHO2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO3(String s) {
if (!s.trim().isEmpty()) {
TRWHO3 = Byte.parseByte(s);
} else {
TRWHO3 = Byte.MIN_VALUE;
}
}

protected final void initTUIN1(String s) {
if (!s.trim().isEmpty()) {
TUIN1 = Short.parseShort(s);
} else {
TUIN1 = Short.MIN_VALUE;
}
}

protected final void initTUJBPL(String s) {
if (!s.trim().isEmpty()) {
TUJBPL = Short.parseShort(s);
} else {
TUJBPL = Short.MIN_VALUE;
}
}

protected final void initTVHOURS(String s) {
if (!s.trim().isEmpty()) {
TVHOURS = Double.parseDouble(s);
} else {
TVHOURS = Double.NaN;
}
}

protected final void initTVM2(String s) {
if (!s.trim().isEmpty()) {
TVM2 = Byte.parseByte(s);
} else {
TVM2 = Byte.MIN_VALUE;
}
}

protected final void initTWKCAR(String s) {
if (!s.trim().isEmpty()) {
TWKCAR = Byte.parseByte(s);
} else {
TWKCAR = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF1(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF1 = Byte.parseByte(s);
} else {
TWKDIFF1 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF2(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF2 = Byte.parseByte(s);
} else {
TWKDIFF2 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF3(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF3 = Byte.parseByte(s);
} else {
TWKDIFF3 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF4(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF4 = Byte.parseByte(s);
} else {
TWKDIFF4 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF5(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF5 = Byte.parseByte(s);
} else {
TWKDIFF5 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF6(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF6 = Byte.parseByte(s);
} else {
TWKDIFF6 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF7(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF7 = Byte.parseByte(s);
} else {
TWKDIFF7 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF8(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF8 = Byte.parseByte(s);
} else {
TWKDIFF8 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF97(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF97 = Byte.parseByte(s);
} else {
TWKDIFF97 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFFM(String s) {
if (!s.trim().isEmpty()) {
TWKDIFFM = Byte.parseByte(s);
} else {
TWKDIFFM = Byte.MIN_VALUE;
}
}

protected final void initUKBORN(String s) {
if (!s.trim().isEmpty()) {
UKBORN = Byte.parseByte(s);
} else {
UKBORN = Byte.MIN_VALUE;
}
}

protected final void initUNDQUS(String s) {
if (!s.trim().isEmpty()) {
UNDQUS = Byte.parseByte(s);
} else {
UNDQUS = Byte.MIN_VALUE;
}
}

protected final void initUPSET(String s) {
if (!s.trim().isEmpty()) {
UPSET = Byte.parseByte(s);
} else {
UPSET = Byte.MIN_VALUE;
}
}

protected final void initURBAN_DV(String s) {
if (!s.trim().isEmpty()) {
URBAN_DV = Byte.parseByte(s);
} else {
URBAN_DV = Byte.MIN_VALUE;
}
}

protected final void initUSUALLANG(String s) {
if (!s.trim().isEmpty()) {
USUALLANG = Byte.parseByte(s);
} else {
USUALLANG = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDS(String s) {
if (!s.trim().isEmpty()) {
VISFRNDS = Byte.parseByte(s);
} else {
VISFRNDS = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY1(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY1 = Byte.parseByte(s);
} else {
VISFRNDSY1 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY10(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY10 = Byte.parseByte(s);
} else {
VISFRNDSY10 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY11(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY11 = Byte.parseByte(s);
} else {
VISFRNDSY11 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY12(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY12 = Byte.parseByte(s);
} else {
VISFRNDSY12 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY13(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY13 = Byte.parseByte(s);
} else {
VISFRNDSY13 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY14(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY14 = Byte.parseByte(s);
} else {
VISFRNDSY14 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY2(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY2 = Byte.parseByte(s);
} else {
VISFRNDSY2 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY3(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY3 = Byte.parseByte(s);
} else {
VISFRNDSY3 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY4(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY4 = Byte.parseByte(s);
} else {
VISFRNDSY4 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY5(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY5 = Byte.parseByte(s);
} else {
VISFRNDSY5 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY6(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY6 = Byte.parseByte(s);
} else {
VISFRNDSY6 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY7(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY7 = Byte.parseByte(s);
} else {
VISFRNDSY7 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY8(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY8 = Byte.parseByte(s);
} else {
VISFRNDSY8 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY9(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY9 = Byte.parseByte(s);
} else {
VISFRNDSY9 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY97(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY97 = Byte.parseByte(s);
} else {
VISFRNDSY97 = Byte.MIN_VALUE;
}
}

protected final void initVOLFREQ(String s) {
if (!s.trim().isEmpty()) {
VOLFREQ = Byte.parseByte(s);
} else {
VOLFREQ = Byte.MIN_VALUE;
}
}

protected final void initVOLHRS(String s) {
if (!s.trim().isEmpty()) {
VOLHRS = Short.parseShort(s);
} else {
VOLHRS = Short.MIN_VALUE;
}
}

protected final void initVOLUN(String s) {
if (!s.trim().isEmpty()) {
VOLUN = Byte.parseByte(s);
} else {
VOLUN = Byte.MIN_VALUE;
}
}

protected final void initVOTE1(String s) {
if (!s.trim().isEmpty()) {
VOTE1 = Short.parseShort(s);
} else {
VOTE1 = Short.MIN_VALUE;
}
}

protected final void initVOTE2(String s) {
if (!s.trim().isEmpty()) {
VOTE2 = Short.parseShort(s);
} else {
VOTE2 = Short.MIN_VALUE;
}
}

protected final void initVOTE3(String s) {
if (!s.trim().isEmpty()) {
VOTE3 = Short.parseShort(s);
} else {
VOTE3 = Short.MIN_VALUE;
}
}

protected final void initVOTE4(String s) {
if (!s.trim().isEmpty()) {
VOTE4 = Short.parseShort(s);
} else {
VOTE4 = Short.MIN_VALUE;
}
}

protected final void initVOTE5(String s) {
if (!s.trim().isEmpty()) {
VOTE5 = Short.parseShort(s);
} else {
VOTE5 = Short.MIN_VALUE;
}
}

protected final void initVOTE6(String s) {
if (!s.trim().isEmpty()) {
VOTE6 = Short.parseShort(s);
} else {
VOTE6 = Short.MIN_VALUE;
}
}

protected final void initVOTEINTENT(String s) {
if (!s.trim().isEmpty()) {
VOTEINTENT = Byte.parseByte(s);
} else {
VOTEINTENT = Byte.MIN_VALUE;
}
}

protected final void initVOTENORM(String s) {
if (!s.trim().isEmpty()) {
VOTENORM = Byte.parseByte(s);
} else {
VOTENORM = Byte.MIN_VALUE;
}
}

protected final void initWHORUAGE(String s) {
if (!s.trim().isEmpty()) {
WHORUAGE = Byte.parseByte(s);
} else {
WHORUAGE = Byte.MIN_VALUE;
}
}

protected final void initWHORUEDU(String s) {
if (!s.trim().isEmpty()) {
WHORUEDU = Byte.parseByte(s);
} else {
WHORUEDU = Byte.MIN_VALUE;
}
}

protected final void initWHORUFAM(String s) {
if (!s.trim().isEmpty()) {
WHORUFAM = Byte.parseByte(s);
} else {
WHORUFAM = Byte.MIN_VALUE;
}
}

protected final void initWHORUPOL(String s) {
if (!s.trim().isEmpty()) {
WHORUPOL = Byte.parseByte(s);
} else {
WHORUPOL = Byte.MIN_VALUE;
}
}

protected final void initWHORUPRO(String s) {
if (!s.trim().isEmpty()) {
WHORUPRO = Byte.parseByte(s);
} else {
WHORUPRO = Byte.MIN_VALUE;
}
}

protected final void initWHORURAC(String s) {
if (!s.trim().isEmpty()) {
WHORURAC = Byte.parseByte(s);
} else {
WHORURAC = Byte.MIN_VALUE;
}
}

protected final void initWHORUSEX(String s) {
if (!s.trim().isEmpty()) {
WHORUSEX = Byte.parseByte(s);
} else {
WHORUSEX = Byte.MIN_VALUE;
}
}

protected final void initWKAUT1(String s) {
if (!s.trim().isEmpty()) {
WKAUT1 = Byte.parseByte(s);
} else {
WKAUT1 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT2(String s) {
if (!s.trim().isEmpty()) {
WKAUT2 = Byte.parseByte(s);
} else {
WKAUT2 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT3(String s) {
if (!s.trim().isEmpty()) {
WKAUT3 = Byte.parseByte(s);
} else {
WKAUT3 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT4(String s) {
if (!s.trim().isEmpty()) {
WKAUT4 = Byte.parseByte(s);
} else {
WKAUT4 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT5(String s) {
if (!s.trim().isEmpty()) {
WKAUT5 = Byte.parseByte(s);
} else {
WKAUT5 = Byte.MIN_VALUE;
}
}

protected final void initWKENDS(String s) {
if (!s.trim().isEmpty()) {
WKENDS = Byte.parseByte(s);
} else {
WKENDS = Byte.MIN_VALUE;
}
}

protected final void initWKPLSAM(String s) {
if (!s.trim().isEmpty()) {
WKPLSAM = Byte.parseByte(s);
} else {
WKPLSAM = Byte.MIN_VALUE;
}
}

protected final void initWKTIME(String s) {
if (!s.trim().isEmpty()) {
WKTIME = Short.parseShort(s);
} else {
WKTIME = Short.MIN_VALUE;
}
}

protected final void initWORKDIS(String s) {
if (!s.trim().isEmpty()) {
WORKDIS = Short.parseShort(s);
} else {
WORKDIS = Short.MIN_VALUE;
}
}

protected final void initWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
WORKTRAV = Byte.parseByte(s);
} else {
WORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initXPMOVE(String s) {
if (!s.trim().isEmpty()) {
XPMOVE = Byte.parseByte(s);
} else {
XPMOVE = Byte.MIN_VALUE;
}
}

protected final void initXPMVCNTRY(String s) {
if (!s.trim().isEmpty()) {
XPMVCNTRY = Byte.parseByte(s);
} else {
XPMVCNTRY = Byte.MIN_VALUE;
}
}

protected final void initXPMVMNTH(String s) {
if (!s.trim().isEmpty()) {
XPMVMNTH = Byte.parseByte(s);
} else {
XPMVMNTH = Byte.MIN_VALUE;
}
}

protected final void initXPMVWHN(String s) {
if (!s.trim().isEmpty()) {
XPMVWHN = Byte.parseByte(s);
} else {
XPMVWHN = Byte.MIN_VALUE;
}
}

protected final void initXPMVWHR(String s) {
if (!s.trim().isEmpty()) {
XPMVWHR = Byte.parseByte(s);
} else {
XPMVWHR = Byte.MIN_VALUE;
}
}

protected final void initXPMVYR(String s) {
if (!s.trim().isEmpty()) {
XPMVYR = Short.parseShort(s);
} else {
XPMVYR = Short.MIN_VALUE;
}
}

protected final void initXTRA5MINOSM_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MINOSM_DV = Byte.parseByte(s);
} else {
XTRA5MINOSM_DV = Byte.MIN_VALUE;
}
}

protected final void initXTRA5MIN_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MIN_DV = Byte.parseByte(s);
} else {
XTRA5MIN_DV = Byte.MIN_VALUE;
}
}

protected final void initYAFUTA(String s) {
if (!s.trim().isEmpty()) {
YAFUTA = Byte.parseByte(s);
} else {
YAFUTA = Byte.MIN_VALUE;
}
}

protected final void initYAFUTB(String s) {
if (!s.trim().isEmpty()) {
YAFUTB = Byte.parseByte(s);
} else {
YAFUTB = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV1(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV1 = Byte.parseByte(s);
} else {
YAJBSRV1 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV2(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV2 = Byte.parseByte(s);
} else {
YAJBSRV2 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV3(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV3 = Byte.parseByte(s);
} else {
YAJBSRV3 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV4(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV4 = Byte.parseByte(s);
} else {
YAJBSRV4 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV5(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV5 = Byte.parseByte(s);
} else {
YAJBSRV5 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV7(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV7 = Byte.parseByte(s);
} else {
YAJBSRV7 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV8(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV8 = Byte.parseByte(s);
} else {
YAJBSRV8 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV96(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV96 = Byte.parseByte(s);
} else {
YAJBSRV96 = Byte.MIN_VALUE;
}
}

protected final void initYANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
YANSSEC5_DV = Byte.parseByte(s);
} else {
YANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initYASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC00_CC = Short.parseShort(s);
} else {
YASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC10_CC = Short.parseShort(s);
} else {
YASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC90_CC = Byte.parseByte(s);
} else {
YASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initYNLP14(String s) {
if (!s.trim().isEmpty()) {
YNLP14 = Byte.parseByte(s);
} else {
YNLP14 = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE1(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE1 = Byte.parseByte(s);
} else {
YNOTBIKE1 = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE2(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE2 = Byte.parseByte(s);
} else {
YNOTBIKE2 = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE3(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE3 = Byte.parseByte(s);
} else {
YNOTBIKE3 = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE96(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE96 = Byte.parseByte(s);
} else {
YNOTBIKE96 = Byte.MIN_VALUE;
}
}

protected final void initYPAMAR(String s) {
if (!s.trim().isEmpty()) {
YPAMAR = Byte.parseByte(s);
} else {
YPAMAR = Byte.MIN_VALUE;
}
}

protected final void initYPAPAR(String s) {
if (!s.trim().isEmpty()) {
YPAPAR = Byte.parseByte(s);
} else {
YPAPAR = Byte.MIN_VALUE;
}
}

protected final void initYPESTA(String s) {
if (!s.trim().isEmpty()) {
YPESTA = Byte.parseByte(s);
} else {
YPESTA = Byte.MIN_VALUE;
}
}

protected final void initYPESTB(String s) {
if (!s.trim().isEmpty()) {
YPESTB = Byte.parseByte(s);
} else {
YPESTB = Byte.MIN_VALUE;
}
}

protected final void initYPESTC(String s) {
if (!s.trim().isEmpty()) {
YPESTC = Byte.parseByte(s);
} else {
YPESTC = Byte.MIN_VALUE;
}
}

protected final void initYPESTE(String s) {
if (!s.trim().isEmpty()) {
YPESTE = Byte.parseByte(s);
} else {
YPESTE = Byte.MIN_VALUE;
}
}

protected final void initYPESTF(String s) {
if (!s.trim().isEmpty()) {
YPESTF = Byte.parseByte(s);
} else {
YPESTF = Byte.MIN_VALUE;
}
}

protected final void initYPESTI(String s) {
if (!s.trim().isEmpty()) {
YPESTI = Byte.parseByte(s);
} else {
YPESTI = Byte.MIN_VALUE;
}
}

protected final void initYPESTJ(String s) {
if (!s.trim().isEmpty()) {
YPESTJ = Byte.parseByte(s);
} else {
YPESTJ = Byte.MIN_VALUE;
}
}

protected final void initYPESTK(String s) {
if (!s.trim().isEmpty()) {
YPESTK = Byte.parseByte(s);
} else {
YPESTK = Byte.MIN_VALUE;
}
}

public byte getADCTS() {
return ADCTS;
}

public byte getAEDROF1() {
return AEDROF1;
}

public byte getAEDROF2() {
return AEDROF2;
}

public byte getAEDROF3() {
return AEDROF3;
}

public byte getAEDROF4() {
return AEDROF4;
}

public byte getAEDROF5() {
return AEDROF5;
}

protected double AEPUDA1() {
return AEPUDA1;
}

public byte getAEPUDA2() {
return AEPUDA2;
}

public byte getAEPUDA3() {
return AEPUDA3;
}

public byte getAEPUDA4() {
return AEPUDA4;
}

public byte getAEPUDA5() {
return AEPUDA5;
}

public byte getAEPUWK1() {
return AEPUWK1;
}

public byte getAEPUWK2() {
return AEPUWK2;
}

public byte getAEPUWK3() {
return AEPUWK3;
}

public byte getAEPUWK4() {
return AEPUWK4;
}

public byte getAEPUWK5() {
return AEPUWK5;
}

public byte getAGE2UKC() {
return AGE2UKC;
}

public byte getAGEGR10_DV() {
return AGEGR10_DV;
}

public byte getAGEGR13_DV() {
return AGEGR13_DV;
}

public byte getAGEGR5_DV() {
return AGEGR5_DV;
}

public byte getAGELH() {
return AGELH;
}

public byte getAGERET() {
return AGERET;
}

public short getAGE_DV() {
return AGE_DV;
}

public byte getAHVWELL() {
return AHVWELL;
}

public byte getAIDEFT() {
return AIDEFT;
}

public short getAIDHU1() {
return AIDHU1;
}

public short getAIDHU2() {
return AIDHU2;
}

public byte getAIDHUA1() {
return AIDHUA1;
}

public byte getAIDHUA10() {
return AIDHUA10;
}

public byte getAIDHUA11() {
return AIDHUA11;
}

public byte getAIDHUA12() {
return AIDHUA12;
}

public byte getAIDHUA13() {
return AIDHUA13;
}

public byte getAIDHUA14() {
return AIDHUA14;
}

public byte getAIDHUA15() {
return AIDHUA15;
}

public byte getAIDHUA16() {
return AIDHUA16;
}

public byte getAIDHUA2() {
return AIDHUA2;
}

public byte getAIDHUA3() {
return AIDHUA3;
}

public byte getAIDHUA4() {
return AIDHUA4;
}

public byte getAIDHUA5() {
return AIDHUA5;
}

public byte getAIDHUA6() {
return AIDHUA6;
}

public byte getAIDHUA7() {
return AIDHUA7;
}

public byte getAIDHUA8() {
return AIDHUA8;
}

public byte getAIDHUA9() {
return AIDHUA9;
}

public byte getALLLANG1() {
return ALLLANG1;
}

public byte getALLLANG10() {
return ALLLANG10;
}

public byte getALLLANG11() {
return ALLLANG11;
}

public byte getALLLANG12() {
return ALLLANG12;
}

public byte getALLLANG13() {
return ALLLANG13;
}

public byte getALLLANG14() {
return ALLLANG14;
}

public byte getALLLANG15() {
return ALLLANG15;
}

public byte getALLLANG16() {
return ALLLANG16;
}

public byte getALLLANG17() {
return ALLLANG17;
}

public byte getALLLANG18() {
return ALLLANG18;
}

public byte getALLLANG19() {
return ALLLANG19;
}

public byte getALLLANG2() {
return ALLLANG2;
}

public byte getALLLANG20() {
return ALLLANG20;
}

public byte getALLLANG3() {
return ALLLANG3;
}

public byte getALLLANG4() {
return ALLLANG4;
}

public byte getALLLANG5() {
return ALLLANG5;
}

public byte getALLLANG6() {
return ALLLANG6;
}

public byte getALLLANG7() {
return ALLLANG7;
}

public byte getALLLANG8() {
return ALLLANG8;
}

public byte getALLLANG9() {
return ALLLANG9;
}

public byte getALLLANG97() {
return ALLLANG97;
}

public byte getAREA() {
return AREA;
}

protected double BASNSA() {
return BASNSA;
}

protected double BASRATE() {
return BASRATE;
}

public byte getBASREST() {
return BASREST;
}

public byte getBENBASE1() {
return BENBASE1;
}

public byte getBENBASE2() {
return BENBASE2;
}

public byte getBENBASE3() {
return BENBASE3;
}

public byte getBENBASE4() {
return BENBASE4;
}

public byte getBENBASE96() {
return BENBASE96;
}

public byte getBENCTC() {
return BENCTC;
}

public byte getBENDIS1() {
return BENDIS1;
}

public byte getBENDIS10() {
return BENDIS10;
}

public byte getBENDIS12() {
return BENDIS12;
}

public byte getBENDIS2() {
return BENDIS2;
}

public byte getBENDIS3() {
return BENDIS3;
}

public byte getBENDIS4() {
return BENDIS4;
}

public byte getBENDIS5() {
return BENDIS5;
}

public byte getBENDIS7() {
return BENDIS7;
}

public byte getBENDIS8() {
return BENDIS8;
}

public byte getBENDIS96() {
return BENDIS96;
}

public byte getBENDIS97() {
return BENDIS97;
}

public byte getBENESA() {
return BENESA;
}

public byte getBENPEN1() {
return BENPEN1;
}

public byte getBENPEN2() {
return BENPEN2;
}

public byte getBENPEN3() {
return BENPEN3;
}

public byte getBENPEN4() {
return BENPEN4;
}

public byte getBENPEN5() {
return BENPEN5;
}

public byte getBENPEN6() {
return BENPEN6;
}

public byte getBENPEN7() {
return BENPEN7;
}

public byte getBENPEN8() {
return BENPEN8;
}

public byte getBENPEN96() {
return BENPEN96;
}

public byte getBENSTA2() {
return BENSTA2;
}

public byte getBENSTA3() {
return BENSTA3;
}

public byte getBENSTA4() {
return BENSTA4;
}

public byte getBENSTA5() {
return BENSTA5;
}

public byte getBENSTA6() {
return BENSTA6;
}

public byte getBENSTA7() {
return BENSTA7;
}

public byte getBENSTA96() {
return BENSTA96;
}

public byte getBENSTA97() {
return BENSTA97;
}

public short getBIRTHY() {
return BIRTHY;
}

public byte getBRITID() {
return BRITID;
}

public byte getBUNO_DV() {
return BUNO_DV;
}

public byte getCARBUY1() {
return CARBUY1;
}

public byte getCARBUY10() {
return CARBUY10;
}

public byte getCARBUY11() {
return CARBUY11;
}

public byte getCARBUY12() {
return CARBUY12;
}

public byte getCARBUY2() {
return CARBUY2;
}

public byte getCARBUY3() {
return CARBUY3;
}

public byte getCARBUY4() {
return CARBUY4;
}

public byte getCARBUY5() {
return CARBUY5;
}

public byte getCARBUY6() {
return CARBUY6;
}

public byte getCARBUY7() {
return CARBUY7;
}

public byte getCARBUY8() {
return CARBUY8;
}

public byte getCARBUY9() {
return CARBUY9;
}

public byte getCARBUY97() {
return CARBUY97;
}

public byte getCARSRV1() {
return CARSRV1;
}

public byte getCARSRV2() {
return CARSRV2;
}

public byte getCARSRV3() {
return CARSRV3;
}

public int getCASIINTNO() {
return CASIINTNO;
}

public byte getCCARE() {
return CCARE;
}

public byte getCCWORK() {
return CCWORK;
}

public short getCH1BY4() {
return CH1BY4;
}

public short getCHARAM() {
return CHARAM;
}

public byte getCHARFREQ() {
return CHARFREQ;
}

public byte getCHARGV() {
return CHARGV;
}

public byte getCHILDPNO() {
return CHILDPNO;
}

public byte getCHKRESP1() {
return CHKRESP1;
}

public byte getCHKRESP2() {
return CHKRESP2;
}

public byte getCHKRESP3() {
return CHKRESP3;
}

public byte getCHKRESP4() {
return CHKRESP4;
}

public byte getCITZN1() {
return CITZN1;
}

public byte getCITZN2() {
return CITZN2;
}

public byte getCITZN3() {
return CITZN3;
}

public byte getCITZNWHEN() {
return CITZNWHEN;
}

public short getCITZNYEAR() {
return CITZNYEAR;
}

public byte getCIVICDUTY() {
return CIVICDUTY;
}

public byte getCJBATT() {
return CJBATT;
}

public byte getCJOB() {
return CJOB;
}

public short getCLOSENUM() {
return CLOSENUM;
}

public byte getCMLSTAT1() {
return CMLSTAT1;
}

public byte getCMLSTAT2() {
return CMLSTAT2;
}

public byte getCMLSTAT3() {
return CMLSTAT3;
}

public byte getCMLSTAT4() {
return CMLSTAT4;
}

public byte getCNTRYQUAL() {
return CNTRYQUAL;
}

public byte getCOH1BM() {
return COH1BM;
}

public short getCOH1BY() {
return COH1BY;
}

public byte getCOH1EM() {
return COH1EM;
}

public short getCOH1EY() {
return COH1EY;
}

public byte getCOH1MR() {
return COH1MR;
}

public byte getCOHAB() {
return COHAB;
}

public byte getCOHABN() {
return COHABN;
}

public boolean getCOHAB_DV() {
return COHAB_DV;
}

public byte getCOLBENS1() {
return COLBENS1;
}

public byte getCOLBENS2() {
return COLBENS2;
}

public byte getCOLBENS3() {
return COLBENS3;
}

public byte getCOLBENS4() {
return COLBENS4;
}

public byte getCONTFT() {
return CONTFT;
}

public byte getCOUNTRY() {
return COUNTRY;
}

public byte getCRDARK() {
return CRDARK;
}

public byte getCRWORA() {
return CRWORA;
}

public byte getCRWORB() {
return CRWORB;
}

public byte getCSTAT() {
return CSTAT;
}

public byte getCTADD1_CODE() {
return CTADD1_CODE;
}

public byte getCTADD2_CODE() {
return CTADD2_CODE;
}

public byte getCTCNTY_CODE() {
return CTCNTY_CODE;
}

public byte getCTCONS() {
return CTCONS;
}

public byte getCTCONSCONF1() {
return CTCONSCONF1;
}

public byte getCTCONSCONF2() {
return CTCONSCONF2;
}

public byte getCTCONSCONF3() {
return CTCONSCONF3;
}

public byte getCTCONSCONF4() {
return CTCONSCONF4;
}

public byte getCTCONSCONF5() {
return CTCONSCONF5;
}

public byte getCTCONSCONF6() {
return CTCONSCONF6;
}

public byte getCTCONSCONF7() {
return CTCONSCONF7;
}

public byte getCTCONSCONF8() {
return CTCONSCONF8;
}

public byte getCTCONSCONF94() {
return CTCONSCONF94;
}

public byte getCTEMAIL_CODE() {
return CTEMAIL_CODE;
}

public byte getCTPCODE_CODE() {
return CTPCODE_CODE;
}

public byte getCTREL() {
return CTREL;
}

public byte getCTTEL1_CODE() {
return CTTEL1_CODE;
}

public byte getCTTEL2_CODE() {
return CTTEL2_CODE;
}

public byte getCTTOWN_CODE() {
return CTTOWN_CODE;
}

public byte getCURRJOB1() {
return CURRJOB1;
}

public byte getCURRJOB2() {
return CURRJOB2;
}

public byte getCURRJOB3() {
return CURRJOB3;
}

public byte getCURRJOB4() {
return CURRJOB4;
}

public byte getCURRJOB5() {
return CURRJOB5;
}

public byte getCURRJOB6() {
return CURRJOB6;
}

public byte getCURRJOB7() {
return CURRJOB7;
}

public byte getCURRPART1() {
return CURRPART1;
}

public byte getCURRPART2() {
return CURRPART2;
}

public byte getCURRPART3() {
return CURRPART3;
}

public byte getCURRPART4() {
return CURRPART4;
}

public byte getCURRPART5() {
return CURRPART5;
}

public byte getCURRSTAT1() {
return CURRSTAT1;
}

public byte getCURRSTAT2() {
return CURRSTAT2;
}

public byte getCURRSTAT3() {
return CURRSTAT3;
}

public byte getCURRSTAT4() {
return CURRSTAT4;
}

public byte getCURRSTAT5() {
return CURRSTAT5;
}

public byte getCURRSTAT6() {
return CURRSTAT6;
}

public byte getCURRSTAT7() {
return CURRSTAT7;
}

public short getDCDOBY() {
return DCDOBY;
}

public byte getDCSEX() {
return DCSEX;
}

public byte getDEMORIENT() {
return DEMORIENT;
}

public boolean getDEPCHL_DV() {
return DEPCHL_DV;
}

public byte getDEPENTH1() {
return DEPENTH1;
}

public byte getDEPENTH2() {
return DEPENTH2;
}

public byte getDEPENTH3() {
return DEPENTH3;
}

public byte getDEPENTH4() {
return DEPENTH4;
}

public byte getDEPENTH5() {
return DEPENTH5;
}

public byte getDEPENTH6() {
return DEPENTH6;
}

public byte getDETINC1() {
return DETINC1;
}

public byte getDETINC2() {
return DETINC2;
}

public byte getDETINC3() {
return DETINC3;
}

public byte getDETINC4() {
return DETINC4;
}

public byte getDETINC5() {
return DETINC5;
}

public byte getDETINC6() {
return DETINC6;
}

public byte getDISDIF1() {
return DISDIF1;
}

public byte getDISDIF10() {
return DISDIF10;
}

public byte getDISDIF11() {
return DISDIF11;
}

public byte getDISDIF12() {
return DISDIF12;
}

public byte getDISDIF2() {
return DISDIF2;
}

public byte getDISDIF3() {
return DISDIF3;
}

public byte getDISDIF4() {
return DISDIF4;
}

public byte getDISDIF5() {
return DISDIF5;
}

public byte getDISDIF6() {
return DISDIF6;
}

public byte getDISDIF7() {
return DISDIF7;
}

public byte getDISDIF8() {
return DISDIF8;
}

public byte getDISDIF9() {
return DISDIF9;
}

public byte getDISDIF96() {
return DISDIF96;
}

public byte getDIVCHK1() {
return DIVCHK1;
}

public byte getDIVCHK2() {
return DIVCHK2;
}

public byte getDIVCHK3() {
return DIVCHK3;
}

public byte getDIVCHK4() {
return DIVCHK4;
}

public byte getDIVFIN1() {
return DIVFIN1;
}

public byte getDIVFIN2() {
return DIVFIN2;
}

public byte getDIVFIN3() {
return DIVFIN3;
}

public byte getDIVFIN4() {
return DIVFIN4;
}

public byte getDKLM() {
return DKLM;
}

public short getDOBY_DV() {
return DOBY_DV;
}

public byte getDONEPROXY() {
return DONEPROXY;
}

public byte getDRGMJ() {
return DRGMJ;
}

public byte getDRGOTH() {
return DRGOTH;
}

public byte getDRGSOL() {
return DRGSOL;
}

public byte getDRIVE() {
return DRIVE;
}

public byte getDRNK4W() {
return DRNK4W;
}

public byte getDV2UK16() {
return DV2UK16;
}

public byte getDVAGE() {
return DVAGE;
}

public byte getDVAGE2UK() {
return DVAGE2UK;
}

public byte getDVM1() {
return DVM1;
}

public byte getDVM2() {
return DVM2;
}

public byte getDVM3() {
return DVM3;
}

public byte getDVM4() {
return DVM4;
}

public short getDVY41() {
return DVY41;
}

public short getDVY42() {
return DVY42;
}

public byte getDVY43() {
return DVY43;
}

public byte getDVY44() {
return DVY44;
}

public byte getEATLIVU() {
return EATLIVU;
}

public byte getEDASP() {
return EDASP;
}

public byte getEDLINK() {
return EDLINK;
}

public short getEDTYPE() {
return EDTYPE;
}

public byte getEDUCATION() {
return EDUCATION;
}

public byte getEDUCISGN_TNS() {
return EDUCISGN_TNS;
}

public byte getEDUCLINKB1() {
return EDUCLINKB1;
}

public byte getEDUCLINKB2() {
return EDUCLINKB2;
}

public byte getEDUCLINKB3() {
return EDUCLINKB3;
}

public byte getEDUCRECD_TNS() {
return EDUCRECD_TNS;
}

public byte getEDUCRSGN_TNS() {
return EDUCRSGN_TNS;
}

public byte getEDUCSN() {
return EDUCSN;
}

public byte getEMPCHK() {
return EMPCHK;
}

public byte getEMPLOY() {
return EMPLOY;
}

public byte getEMPSTENDD() {
return EMPSTENDD;
}

public byte getEMPSTENDM() {
return EMPSTENDM;
}

public short getEMPSTENDY4() {
return EMPSTENDY4;
}

public byte getENDMNTH1() {
return ENDMNTH1;
}

public byte getENDMNTH2() {
return ENDMNTH2;
}

public byte getENDMNTH3() {
return ENDMNTH3;
}

public byte getENDMNTH4() {
return ENDMNTH4;
}

public byte getENDMNTH5() {
return ENDMNTH5;
}

public byte getENGFORM() {
return ENGFORM;
}

public byte getENGLANG() {
return ENGLANG;
}

public byte getENGREAD() {
return ENGREAD;
}

public byte getENGSPK() {
return ENGSPK;
}

public byte getENGTEL() {
return ENGTEL;
}

public byte getENGUK() {
return ENGUK;
}

public short getEPROSH() {
return EPROSH;
}

public byte getETHN_DV() {
return ETHN_DV;
}

public byte getEVRALC() {
return EVRALC;
}

public byte getEXTNSA() {
return EXTNSA;
}

protected double EXTRATE() {
return EXTRATE;
}

public byte getEXTREST() {
return EXTREST;
}

public byte getFAMILY() {
return FAMILY;
}

public byte getFAMSUP() {
return FAMSUP;
}

public byte getFATHER() {
return FATHER;
}

public byte getFBENTYPE01() {
return FBENTYPE01;
}

public byte getFBENTYPE02() {
return FBENTYPE02;
}

public byte getFBENTYPE03() {
return FBENTYPE03;
}

public byte getFBENTYPE04() {
return FBENTYPE04;
}

public byte getFBENTYPE05() {
return FBENTYPE05;
}

public byte getFBENTYPE06() {
return FBENTYPE06;
}

public byte getFBENTYPE07() {
return FBENTYPE07;
}

public byte getFBENTYPE08() {
return FBENTYPE08;
}

public byte getFBENTYPE09() {
return FBENTYPE09;
}

public byte getFBENTYPE10() {
return FBENTYPE10;
}

public byte getFBENTYPE11() {
return FBENTYPE11;
}

public byte getFBENTYPE12() {
return FBENTYPE12;
}

public byte getFBENTYPE13() {
return FBENTYPE13;
}

public byte getFBENTYPE14() {
return FBENTYPE14;
}

public byte getFBENTYPE15() {
return FBENTYPE15;
}

public byte getFBENTYPE16() {
return FBENTYPE16;
}

public byte getFBENTYPE17() {
return FBENTYPE17;
}

public byte getFBENTYPE18() {
return FBENTYPE18;
}

public byte getFBENTYPE19() {
return FBENTYPE19;
}

public byte getFBENTYPE20() {
return FBENTYPE20;
}

public byte getFBENTYPE21() {
return FBENTYPE21;
}

public byte getFBENTYPE22() {
return FBENTYPE22;
}

public byte getFBENTYPE23() {
return FBENTYPE23;
}

public byte getFBENTYPE24() {
return FBENTYPE24;
}

public byte getFBENTYPE25() {
return FBENTYPE25;
}

public byte getFBENTYPE26() {
return FBENTYPE26;
}

public byte getFBENTYPE27() {
return FBENTYPE27;
}

public byte getFBENTYPE28() {
return FBENTYPE28;
}

public byte getFBENTYPE29() {
return FBENTYPE29;
}

public byte getFBENTYPE30() {
return FBENTYPE30;
}

public byte getFBENTYPE31() {
return FBENTYPE31;
}

public byte getFBENTYPE32() {
return FBENTYPE32;
}

public byte getFBENTYPE33() {
return FBENTYPE33;
}

public byte getFBENTYPE34() {
return FBENTYPE34;
}

public byte getFBENTYPE35() {
return FBENTYPE35;
}

public byte getFBENTYPE36() {
return FBENTYPE36;
}

public byte getFBENTYPE37() {
return FBENTYPE37;
}

public byte getFBENTYPE38() {
return FBENTYPE38;
}

public byte getFBENTYPE39() {
return FBENTYPE39;
}

public byte getFBENTYPE40() {
return FBENTYPE40;
}

public byte getFBENTYPE41() {
return FBENTYPE41;
}

public byte getFEMPLW() {
return FEMPLW;
}

public byte getFENOW() {
return FENOW;
}

protected double FIBENOTHR_DV() {
return FIBENOTHR_DV;
}

protected double FIBENOTHR_IF() {
return FIBENOTHR_IF;
}

public byte getFIBENOTHR_TC() {
return FIBENOTHR_TC;
}

protected double FIMNGRS_IF() {
return FIMNGRS_IF;
}

public byte getFIMNGRS_TC() {
return FIMNGRS_TC;
}

protected double FIMNINVNET_DV() {
return FIMNINVNET_DV;
}

protected double FIMNLABGRS_IF() {
return FIMNLABGRS_IF;
}

public byte getFIMNLABGRS_TC() {
return FIMNLABGRS_TC;
}

protected double FIMNLABNET_DV() {
return FIMNLABNET_DV;
}

public byte getFIMNLABNET_TC() {
return FIMNLABNET_TC;
}

protected double FIMNMISC_DV() {
return FIMNMISC_DV;
}

protected double FIMNNET_DV() {
return FIMNNET_DV;
}

protected double FIMNPEN_DV() {
return FIMNPEN_DV;
}

protected double FIMNPRBEN_DV() {
return FIMNPRBEN_DV;
}

protected double FIMNSBEN_DV() {
return FIMNSBEN_DV;
}

public byte getFINFUT() {
return FINFUT;
}

public byte getFIVEALCDR() {
return FIVEALCDR;
}

public byte getFIVINTLANG() {
return FIVINTLANG;
}

public byte getFIVLOLW() {
return FIVLOLW;
}

public byte getFIYRDB1() {
return FIYRDB1;
}

public byte getFIYRDB2() {
return FIYRDB2;
}

public byte getFIYRDB3() {
return FIYRDB3;
}

public byte getFIYRDB4() {
return FIYRDB4;
}

public byte getFIYRDB5() {
return FIYRDB5;
}

public byte getFIYRDB6() {
return FIYRDB6;
}

public int getFIYRDIA() {
return FIYRDIA;
}

protected double FIYRINVINC_DV() {
return FIYRINVINC_DV;
}

public byte getFIYRINVINC_IF() {
return FIYRINVINC_IF;
}

public byte getFIYRINVINC_TC() {
return FIYRINVINC_TC;
}

public byte getFJBMNGR() {
return FJBMNGR;
}

public byte getFJBSEMP() {
return FJBSEMP;
}

public byte getFJBSIZE() {
return FJBSIZE;
}

public byte getFJBSTAT() {
return FJBSTAT;
}

public byte getFLAGLINKB1() {
return FLAGLINKB1;
}

public byte getFLAGLINKB2() {
return FLAGLINKB2;
}

public byte getFLAGLINKB3() {
return FLAGLINKB3;
}

public int getFNPID() {
return FNPID;
}

public byte getFNPNO() {
return FNPNO;
}

public int getFNSPID() {
return FNSPID;
}

public byte getFNSPNO() {
return FNSPNO;
}

public byte getFOPRLG() {
return FOPRLG;
}

public byte getFOPRLG0() {
return FOPRLG0;
}

public byte getFOPRLG0NI() {
return FOPRLG0NI;
}

public byte getFORMDIF() {
return FORMDIF;
}

public byte getFRDRG() {
return FRDRG;
}

public byte getFT2ENDM1() {
return FT2ENDM1;
}

public byte getFT2ENDM2() {
return FT2ENDM2;
}

public byte getFT2ENDM3() {
return FT2ENDM3;
}

public short getFT2ENDY41() {
return FT2ENDY41;
}

public short getFT2ENDY42() {
return FT2ENDY42;
}

public short getFT2ENDY43() {
return FT2ENDY43;
}

public byte getFTEDANY() {
return FTEDANY;
}

public byte getFTEDEND1() {
return FTEDEND1;
}

public byte getFTEDEND2() {
return FTEDEND2;
}

public byte getFTEDEND3() {
return FTEDEND3;
}

public byte getFTEDMOR1() {
return FTEDMOR1;
}

public byte getFTEDMOR2() {
return FTEDMOR2;
}

public byte getFTEDMOR3() {
return FTEDMOR3;
}

public byte getFTEDSTARTM1() {
return FTEDSTARTM1;
}

public byte getFTEDSTARTM2() {
return FTEDSTARTM2;
}

public byte getFTEDSTARTM3() {
return FTEDSTARTM3;
}

public short getFTEDSTARTY41() {
return FTEDSTARTY41;
}

public short getFTEDSTARTY42() {
return FTEDSTARTY42;
}

public short getFTEDSTARTY43() {
return FTEDSTARTY43;
}

public byte getFTENDM() {
return FTENDM;
}

public short getFTENDY4() {
return FTENDY4;
}

public byte getFTQUALS() {
return FTQUALS;
}

public byte getFUKBORN() {
return FUKBORN;
}

public short getFYR2UK4() {
return FYR2UK4;
}

public int getGRFPID() {
return GRFPID;
}

public byte getGRFPNO() {
return GRFPNO;
}

public int getGRMPID() {
return GRMPID;
}

public byte getGRMPNO() {
return GRMPNO;
}

public byte getGRPBFTS() {
return GRPBFTS;
}

public byte getHASEMAIL() {
return HASEMAIL;
}

public byte getHASEMAIL2() {
return HASEMAIL2;
}

public byte getHCOND1() {
return HCOND1;
}

public byte getHCOND10() {
return HCOND10;
}

public byte getHCOND11() {
return HCOND11;
}

public byte getHCOND12() {
return HCOND12;
}

public byte getHCOND13() {
return HCOND13;
}

public byte getHCOND14() {
return HCOND14;
}

public byte getHCOND15() {
return HCOND15;
}

public byte getHCOND16() {
return HCOND16;
}

public byte getHCOND17() {
return HCOND17;
}

public byte getHCOND18() {
return HCOND18;
}

public byte getHCOND2() {
return HCOND2;
}

public byte getHCOND3() {
return HCOND3;
}

public byte getHCOND4() {
return HCOND4;
}

public byte getHCOND5() {
return HCOND5;
}

public byte getHCOND6() {
return HCOND6;
}

public byte getHCOND7() {
return HCOND7;
}

public byte getHCOND8() {
return HCOND8;
}

public byte getHCOND9() {
return HCOND9;
}

public byte getHCOND96() {
return HCOND96;
}

public byte getHCONDA01() {
return HCONDA01;
}

public byte getHCONDA02() {
return HCONDA02;
}

public byte getHCONDA03() {
return HCONDA03;
}

public byte getHCONDA04() {
return HCONDA04;
}

public byte getHCONDA05() {
return HCONDA05;
}

public byte getHCONDA06() {
return HCONDA06;
}

public byte getHCONDA07() {
return HCONDA07;
}

public byte getHCONDA08() {
return HCONDA08;
}

public byte getHCONDA09() {
return HCONDA09;
}

public byte getHCONDA10() {
return HCONDA10;
}

public byte getHCONDA11() {
return HCONDA11;
}

public byte getHCONDA12() {
return HCONDA12;
}

public byte getHCONDA13() {
return HCONDA13;
}

public byte getHCONDA14() {
return HCONDA14;
}

public byte getHCONDA15() {
return HCONDA15;
}

public byte getHCONDA16() {
return HCONDA16;
}

public byte getHCONDA17() {
return HCONDA17;
}

public byte getHCONDN1() {
return HCONDN1;
}

public byte getHCONDN10() {
return HCONDN10;
}

public byte getHCONDN11() {
return HCONDN11;
}

public byte getHCONDN12() {
return HCONDN12;
}

public byte getHCONDN13() {
return HCONDN13;
}

public byte getHCONDN14() {
return HCONDN14;
}

public byte getHCONDN15() {
return HCONDN15;
}

public byte getHCONDN16() {
return HCONDN16;
}

public byte getHCONDN17() {
return HCONDN17;
}

public byte getHCONDN18() {
return HCONDN18;
}

public byte getHCONDN2() {
return HCONDN2;
}

public byte getHCONDN3() {
return HCONDN3;
}

public byte getHCONDN4() {
return HCONDN4;
}

public byte getHCONDN5() {
return HCONDN5;
}

public byte getHCONDN6() {
return HCONDN6;
}

public byte getHCONDN7() {
return HCONDN7;
}

public byte getHCONDN8() {
return HCONDN8;
}

public byte getHCONDN9() {
return HCONDN9;
}

public byte getHCONDN96() {
return HCONDN96;
}

public byte getHCONDNO1() {
return HCONDNO1;
}

public byte getHCONDNO2() {
return HCONDNO2;
}

public byte getHCONDNO3() {
return HCONDNO3;
}

public byte getHCONDNO4() {
return HCONDNO4;
}

public byte getHCONDNO5() {
return HCONDNO5;
}

public byte getHCONDNO6() {
return HCONDNO6;
}

public byte getHCONDNO7() {
return HCONDNO7;
}

public byte getHCONDNO8() {
return HCONDNO8;
}

public byte getHCONDNO_CODE() {
return HCONDNO_CODE;
}

public byte getHCONDNS1() {
return HCONDNS1;
}

public byte getHCONDNS2() {
return HCONDNS2;
}

public byte getHCONDNS3() {
return HCONDNS3;
}

public byte getHCONDNS4() {
return HCONDNS4;
}

public byte getHCONDNS5() {
return HCONDNS5;
}

public byte getHCONDNS6() {
return HCONDNS6;
}

public byte getHCONDNS7() {
return HCONDNS7;
}

public byte getHCONDNS8() {
return HCONDNS8;
}

public byte getHCONDO_CODE() {
return HCONDO_CODE;
}

public byte getHCONDS01() {
return HCONDS01;
}

public byte getHCONDS02() {
return HCONDS02;
}

public byte getHCONDS03() {
return HCONDS03;
}

public byte getHCONDS04() {
return HCONDS04;
}

public byte getHCONDS05() {
return HCONDS05;
}

public byte getHCONDS08() {
return HCONDS08;
}

public byte getHCONDS09() {
return HCONDS09;
}

public byte getHCONDS10() {
return HCONDS10;
}

public byte getHCONDS11() {
return HCONDS11;
}

public byte getHCONDS12() {
return HCONDS12;
}

public byte getHCONDS13() {
return HCONDS13;
}

public byte getHCONDS14() {
return HCONDS14;
}

public byte getHCONDS15() {
return HCONDS15;
}

public byte getHCONDS16() {
return HCONDS16;
}

public byte getHCONDS17() {
return HCONDS17;
}

public byte getHEALTH() {
return HEALTH;
}

public byte getHEALTHSN() {
return HEALTHSN;
}

public byte getHEDLIK() {
return HEDLIK;
}

public byte getHEDNT() {
return HEDNT;
}

public byte getHEDNTO_CODE() {
return HEDNTO_CODE;
}

public byte getHGADOPTF() {
return HGADOPTF;
}

public byte getHGADOPTM() {
return HGADOPTM;
}

public byte getHGPART() {
return HGPART;
}

public byte getHHRESP_DV() {
return HHRESP_DV;
}

public byte getHHTYPE_DV() {
return HHTYPE_DV;
}

public byte getHIGHEDUK() {
return HIGHEDUK;
}

public byte getHLTHISGN_TNS() {
return HLTHISGN_TNS;
}

public byte getHLTHLINK() {
return HLTHLINK;
}

public byte getHLTHLINKB1() {
return HLTHLINKB1;
}

public byte getHLTHLINKB2() {
return HLTHLINKB2;
}

public byte getHLTHLINKB3() {
return HLTHLINKB3;
}

public byte getHLTHRECD_TNS() {
return HLTHRECD_TNS;
}

public byte getHLTHRSGN_TNS() {
return HLTHRSGN_TNS;
}

public byte getHOSPC1() {
return HOSPC1;
}

public byte getHOSPC2() {
return HOSPC2;
}

public byte getHOSPC3() {
return HOSPC3;
}

public byte getHOSPC4() {
return HOSPC4;
}

public byte getHOSPC5() {
return HOSPC5;
}

public byte getHOSPC6() {
return HOSPC6;
}

public byte getHOSPC7() {
return HOSPC7;
}

public byte getHOSPC8() {
return HOSPC8;
}

public short getHOSPDC1() {
return HOSPDC1;
}

public short getHOSPDC2() {
return HOSPDC2;
}

public short getHOSPDC3() {
return HOSPDC3;
}

public byte getHOSPDC4() {
return HOSPDC4;
}

public byte getHOSPDC5() {
return HOSPDC5;
}

public byte getHOSPDC6() {
return HOSPDC6;
}

public byte getHOSPDC7() {
return HOSPDC7;
}

public byte getHOSPDC8() {
return HOSPDC8;
}

public byte getHOUSING() {
return HOUSING;
}

public short getHOWLNG() {
return HOWLNG;
}

public int getHRPID() {
return HRPID;
}

public byte getHRPNO() {
return HRPNO;
}

public byte getHUBOSS() {
return HUBOSS;
}

public short getHUBUYS() {
return HUBUYS;
}

public byte getHUCAR() {
return HUCAR;
}

public byte getHUDIY() {
return HUDIY;
}

public short getHUFRYS() {
return HUFRYS;
}

public short getHUIRON() {
return HUIRON;
}

public short getHUMOPS() {
return HUMOPS;
}

public byte getHUPOTS() {
return HUPOTS;
}

public short getHUSITS() {
return HUSITS;
}

public byte getIENDDATD() {
return IENDDATD;
}

public byte getIENDDATM() {
return IENDDATM;
}

public byte getIENDDATMM() {
return IENDDATMM;
}

public byte getIENDDATSS() {
return IENDDATSS;
}

public short getIENDDATY() {
return IENDDATY;
}

protected double IND5MUS_LW() {
return IND5MUS_LW;
}

protected double IND5MUS_XW() {
return IND5MUS_XW;
}

protected double INDBD91_LW() {
return INDBD91_LW;
}

protected double INDBDUB_LW() {
return INDBDUB_LW;
}

public byte getINDEFLV() {
return INDEFLV;
}

protected double INDIN01_LW() {
return INDIN01_LW;
}

protected double INDIN91_LW() {
return INDIN91_LW;
}

protected double INDINUB_LW() {
return INDINUB_LW;
}

protected double INDINUB_XW() {
return INDINUB_XW;
}

protected double INDINUI_XW() {
return INDINUI_XW;
}

protected double INDINUS_LW() {
return INDINUS_LW;
}

public byte getINDMODE() {
return INDMODE;
}

protected double INDNS91_LW() {
return INDNS91_LW;
}

protected double INDNSUB_LW() {
return INDNSUB_LW;
}

protected double INDPXUB_LW() {
return INDPXUB_LW;
}

protected double INDPXUB_XW() {
return INDPXUB_XW;
}

protected double INDPXUI_XW() {
return INDPXUI_XW;
}

protected double INDPXUS_LW() {
return INDPXUS_LW;
}

protected double INDSCUB_LW() {
return INDSCUB_LW;
}

protected double INDSCUB_XW() {
return INDSCUB_XW;
}

protected double INDSCUI_XW() {
return INDSCUI_XW;
}

protected double INDSCUS_LW() {
return INDSCUS_LW;
}

public byte getINTDATD_DV() {
return INTDATD_DV;
}

public byte getINTDATM_DV() {
return INTDATM_DV;
}

public short getINTDATY_DV() {
return INTDATY_DV;
}

public byte getINTENDUKC() {
return INTENDUKC;
}

public byte getINTSIGNHEALTH() {
return INTSIGNHEALTH;
}

public byte getINVITRO1() {
return INVITRO1;
}

public byte getINVITRO2() {
return INVITRO2;
}

public byte getINVITRO3() {
return INVITRO3;
}

public byte getINVITRO4() {
return INVITRO4;
}

public byte getINVITRO5() {
return INVITRO5;
}

public byte getIOUTCOME() {
return IOUTCOME;
}

public boolean getIPROXY() {
return IPROXY;
}

public byte getISCED11_DV() {
return ISCED11_DV;
}

public byte getISTRTDATMM() {
return ISTRTDATMM;
}

public byte getISTRTDATSS() {
return ISTRTDATSS;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public byte getIVAFFCT11() {
return IVAFFCT11;
}

public byte getIVAFFCT12() {
return IVAFFCT12;
}

public byte getIVAFFCT13() {
return IVAFFCT13;
}

public byte getIVAFFCT14() {
return IVAFFCT14;
}

public byte getIVAFFCT15() {
return IVAFFCT15;
}

public byte getIVAFFCT17() {
return IVAFFCT17;
}

public byte getIVAFFCT21() {
return IVAFFCT21;
}

public byte getIVAFFCT22() {
return IVAFFCT22;
}

public byte getIVAFFCT23() {
return IVAFFCT23;
}

public byte getIVAFFCT27() {
return IVAFFCT27;
}

public byte getIVAFFCT30() {
return IVAFFCT30;
}

public byte getIVAFFCT97() {
return IVAFFCT97;
}

public byte getIVCOOP() {
return IVCOOP;
}

public byte getIVINFNCE() {
return IVINFNCE;
}

public byte getIVLIBAL() {
return IVLIBAL;
}

public byte getIVLIENG() {
return IVLIENG;
}

public byte getIVLITRANS() {
return IVLITRANS;
}

public byte getIVLIWHO() {
return IVLIWHO;
}

public byte getJ1BOSS() {
return J1BOSS;
}

public byte getJ1COJOB() {
return J1COJOB;
}

public byte getJ1MNGR() {
return J1MNGR;
}

public byte getJ1NONE() {
return J1NONE;
}

public byte getJ1NSSEC5_DV() {
return J1NSSEC5_DV;
}

public byte getJ1SEMP() {
return J1SEMP;
}

public short getJ1SOC00_CC() {
return J1SOC00_CC;
}

public short getJ1SOC10_CC() {
return J1SOC10_CC;
}

public byte getJ1SOC90_CC() {
return J1SOC90_CC;
}

public byte getJ1UKJOB() {
return J1UKJOB;
}

public short getJ1UKSOC00_CC() {
return J1UKSOC00_CC;
}

public short getJ1UKSOC10_CC() {
return J1UKSOC10_CC;
}

public byte getJ1UKSOC90_CC() {
return J1UKSOC90_CC;
}

public byte getJ2NSSEC5_DV() {
return J2NSSEC5_DV;
}

public int getJ2PAY() {
return J2PAY;
}

protected double J2PAYNET_DV() {
return J2PAYNET_DV;
}

public short getJ2SOC00_CC() {
return J2SOC00_CC;
}

public short getJ2SOC10_CC() {
return J2SOC10_CC;
}

public short getJ2SOC90_CC() {
return J2SOC90_CC;
}

public byte getJBATT1() {
return JBATT1;
}

public byte getJBATT2() {
return JBATT2;
}

public byte getJBATT3() {
return JBATT3;
}

public byte getJBATT4() {
return JBATT4;
}

public byte getJBATT5() {
return JBATT5;
}

public byte getJBATT6() {
return JBATT6;
}

public byte getJBATT7() {
return JBATT7;
}

public byte getJBBGDATD() {
return JBBGDATD;
}

public byte getJBBGDATM() {
return JBBGDATM;
}

public short getJBBGDATY() {
return JBBGDATY;
}

public byte getJBENDD() {
return JBENDD;
}

public byte getJBENDM() {
return JBENDM;
}

public byte getJBENDREAS() {
return JBENDREAS;
}

public short getJBENDY4() {
return JBENDY4;
}

public byte getJBES2000() {
return JBES2000;
}

public byte getJBFLEX1() {
return JBFLEX1;
}

public byte getJBFLEX2() {
return JBFLEX2;
}

public byte getJBFLEX3() {
return JBFLEX3;
}

public byte getJBFLEX4() {
return JBFLEX4;
}

public byte getJBFLEX5() {
return JBFLEX5;
}

public byte getJBFLEX6() {
return JBFLEX6;
}

public byte getJBFLEX7() {
return JBFLEX7;
}

public byte getJBFLEX8() {
return JBFLEX8;
}

public byte getJBFLEX96() {
return JBFLEX96;
}

public byte getJBFXINF() {
return JBFXINF;
}

public byte getJBFXUSE1() {
return JBFXUSE1;
}

public byte getJBFXUSE2() {
return JBFXUSE2;
}

public byte getJBFXUSE3() {
return JBFXUSE3;
}

public byte getJBFXUSE4() {
return JBFXUSE4;
}

public byte getJBFXUSE5() {
return JBFXUSE5;
}

public byte getJBFXUSE6() {
return JBFXUSE6;
}

public byte getJBFXUSE7() {
return JBFXUSE7;
}

public byte getJBFXUSE8() {
return JBFXUSE8;
}

public byte getJBFXUSE96() {
return JBFXUSE96;
}

public byte getJBIINDB_DV() {
return JBIINDB_DV;
}

public byte getJBLKCHA() {
return JBLKCHA;
}

public byte getJBLKCHB() {
return JBLKCHB;
}

public byte getJBLKCHC() {
return JBLKCHC;
}

public byte getJBLKCHD() {
return JBLKCHD;
}

public byte getJBLKCHE() {
return JBLKCHE;
}

public byte getJBMNGRCHK() {
return JBMNGRCHK;
}

public byte getJBNSSEC3_DV() {
return JBNSSEC3_DV;
}

public byte getJBNSSEC5_DV() {
return JBNSSEC5_DV;
}

public short getJBNSSEC_DV() {
return JBNSSEC_DV;
}

public byte getJBOFFY() {
return JBOFFY;
}

public short getJBONUS() {
return JBONUS;
}

public short getJBPEN() {
return JBPEN;
}

public short getJBPENM() {
return JBPENM;
}

public short getJBPENY4() {
return JBPENY4;
}

public byte getJBPERFP() {
return JBPERFP;
}

public short getJBRGSC_DV() {
return JBRGSC_DV;
}

public short getJBRISE() {
return JBRISE;
}

public byte getJBSAMR() {
return JBSAMR;
}

public byte getJBSAT() {
return JBSAT;
}

public byte getJBSEC() {
return JBSEC;
}

public byte getJBSECTPUB() {
return JBSECTPUB;
}

public short getJBSEG_DV() {
return JBSEG_DV;
}

public byte getJBSEMPCHK() {
return JBSEMPCHK;
}

public byte getJBSIC07CHK() {
return JBSIC07CHK;
}

public byte getJBSIC07_CC() {
return JBSIC07_CC;
}

public byte getJBSIZECHK() {
return JBSIZECHK;
}

public byte getJBSOC00CHK() {
return JBSOC00CHK;
}

public short getJBSOC00_CC() {
return JBSOC00_CC;
}

public short getJBSOC10_CC() {
return JBSOC10_CC;
}

public byte getJBSOCGR_DV() {
return JBSOCGR_DV;
}

public byte getJBTERM1() {
return JBTERM1;
}

public byte getJBTERM2() {
return JBTERM2;
}

public byte getJBXPCHA() {
return JBXPCHA;
}

public byte getJBXPCHB() {
return JBXPCHB;
}

public byte getJBXPCHC() {
return JBXPCHC;
}

public byte getJBXPCHD() {
return JBXPCHD;
}

public byte getJBXPCHE() {
return JBXPCHE;
}

public short getJLCBSOC00_CC() {
return JLCBSOC00_CC;
}

public short getJLCBSOC10_CC() {
return JLCBSOC10_CC;
}

public byte getJLCBSOC90_CC() {
return JLCBSOC90_CC;
}

public byte getJLENDM() {
return JLENDM;
}

public byte getJLES2000() {
return JLES2000;
}

public byte getJLIINDB_DV() {
return JLIINDB_DV;
}

public byte getJLNSSEC3_DV() {
return JLNSSEC3_DV;
}

public byte getJLNSSEC5_DV() {
return JLNSSEC5_DV;
}

public short getJLNSSEC_DV() {
return JLNSSEC_DV;
}

public short getJLRGSC_DV() {
return JLRGSC_DV;
}

public short getJLSEG_DV() {
return JLSEG_DV;
}

public byte getJLSIC07_CC() {
return JLSIC07_CC;
}

public short getJLSOC00_CC() {
return JLSOC00_CC;
}

public short getJLSOC10_CC() {
return JLSOC10_CC;
}

public byte getJOBHOURS1() {
return JOBHOURS1;
}

public byte getJOBHOURS2() {
return JOBHOURS2;
}

public byte getJOBHOURS3() {
return JOBHOURS3;
}

public byte getJOBHOURS4() {
return JOBHOURS4;
}

public byte getJOBHOURS5() {
return JOBHOURS5;
}

public byte getJOBHOURS6() {
return JOBHOURS6;
}

public byte getJOBHOURS7() {
return JOBHOURS7;
}

public int getJSOWNAMT() {
return JSOWNAMT;
}

public byte getJSOWNOTH() {
return JSOWNOTH;
}

public byte getJSOWNSUM() {
return JSOWNSUM;
}

public short getJSOWOTAM() {
return JSOWOTAM;
}

public byte getJSPART() {
return JSPART;
}

public int getJSPAYU() {
return JSPAYU;
}

public byte getJSPAYW() {
return JSPAYW;
}

public byte getJSPRLS() {
return JSPRLS;
}

public byte getJSPRNI() {
return JSPRNI;
}

public byte getJSPRTX() {
return JSPRTX;
}

public byte getJSPYNI() {
return JSPYNI;
}

public byte getJSPYTX() {
return JSPYTX;
}

public byte getJSTYPEB() {
return JSTYPEB;
}

public byte getJSWORKAC() {
return JSWORKAC;
}

public byte getJSWORKTRAV() {
return JSWORKTRAV;
}

public short getJUBGN() {
return JUBGN;
}

public short getJULK4X1() {
return JULK4X1;
}

public short getJULK4X2() {
return JULK4X2;
}

public byte getJULK4X3() {
return JULK4X3;
}

public short getJULK4X4() {
return JULK4X4;
}

public short getJULK4X5() {
return JULK4X5;
}

public short getJULK4X6() {
return JULK4X6;
}

public byte getJULK4X96() {
return JULK4X96;
}

public byte getJWBS1_DV() {
return JWBS1_DV;
}

public byte getJWBS2_DV() {
return JWBS2_DV;
}

public byte getKIDLANG() {
return KIDLANG;
}

public byte getLADOPT() {
return LADOPT;
}

public byte getLATE() {
return LATE;
}

public byte getLCHMOR() {
return LCHMOR;
}

public byte getLCHMORN() {
return LCHMORN;
}

public byte getLCHMULTI1() {
return LCHMULTI1;
}

public byte getLCHMULTI2() {
return LCHMULTI2;
}

public byte getLCHMULTI3() {
return LCHMULTI3;
}

public byte getLCHMULTI4() {
return LCHMULTI4;
}

public byte getLCHMULTI5() {
return LCHMULTI5;
}

public byte getLCMARM() {
return LCMARM;
}

public short getLCMARY4() {
return LCMARY4;
}

public byte getLCMCBM() {
return LCMCBM;
}

public short getLCMCBY4() {
return LCMCBY4;
}

public byte getLCMCOH() {
return LCMCOH;
}

public byte getLCMSPM() {
return LCMSPM;
}

public short getLCMSPY4() {
return LCMSPY4;
}

public byte getLCOH() {
return LCOH;
}

public byte getLCOHNPI() {
return LCOHNPI;
}

public byte getLIENG() {
return LIENG;
}

public byte getLIHOW() {
return LIHOW;
}

public byte getLINGUA() {
return LINGUA;
}

public byte getLITRANS() {
return LITRANS;
}

public byte getLIVESP() {
return LIVESP;
}

public boolean getLIVESP_DV() {
return LIVESP_DV;
}

public byte getLIVEWITH() {
return LIVEWITH;
}

public byte getLIWHO() {
return LIWHO;
}

public byte getLKMVCNTRY() {
return LKMVCNTRY;
}

public byte getLLKNBRD() {
return LLKNBRD;
}

public byte getLMAR1M() {
return LMAR1M;
}

public short getLMAR1Y() {
return LMAR1Y;
}

public byte getLMCBM1() {
return LMCBM1;
}

public byte getLMCBM2() {
return LMCBM2;
}

public byte getLMCBM3() {
return LMCBM3;
}

public byte getLMCBM4() {
return LMCBM4;
}

public byte getLMCBM5() {
return LMCBM5;
}

public short getLMCBY41() {
return LMCBY41;
}

public short getLMCBY42() {
return LMCBY42;
}

public short getLMCBY43() {
return LMCBY43;
}

public short getLMCBY44() {
return LMCBY44;
}

public short getLMCBY45() {
return LMCBY45;
}

public byte getLMSPM1() {
return LMSPM1;
}

public byte getLMSPM2() {
return LMSPM2;
}

public byte getLMSPM3() {
return LMSPM3;
}

public byte getLMSPM4() {
return LMSPM4;
}

public byte getLMSPM5() {
return LMSPM5;
}

public short getLMSPY41() {
return LMSPY41;
}

public short getLMSPY42() {
return LMSPY42;
}

public short getLMSPY43() {
return LMSPY43;
}

public short getLMSPY44() {
return LMSPY44;
}

public short getLMSPY45() {
return LMSPY45;
}

public byte getLNADOPT() {
return LNADOPT;
}

public byte getLNCOH() {
return LNCOH;
}

public byte getLNPRNT() {
return LNPRNT;
}

public byte getLOCSERAP() {
return LOCSERAP;
}

public byte getLOCSERAS() {
return LOCSERAS;
}

public byte getLOCSERB() {
return LOCSERB;
}

public byte getLOCSERC() {
return LOCSERC;
}

public byte getLOCSERD() {
return LOCSERD;
}

public byte getLOCSERE() {
return LOCSERE;
}

public byte getLPRNT() {
return LPRNT;
}

public byte getLVAG14() {
return LVAG14;
}

public byte getLVAG16() {
return LVAG16;
}

public byte getLVHM() {
return LVHM;
}

public byte getLVSCHDO() {
return LVSCHDO;
}

public byte getLWWRONG() {
return LWWRONG;
}

public byte getMABROAD() {
return MABROAD;
}

public short getMABROADC1() {
return MABROADC1;
}

public short getMABROADC2() {
return MABROADC2;
}

public short getMABROADC3() {
return MABROADC3;
}

public short getMABROADC4() {
return MABROADC4;
}

public short getMABROADC5() {
return MABROADC5;
}

public byte getMACOB() {
return MACOB;
}

public byte getMACURR() {
return MACURR;
}

public byte getMAEDQF() {
return MAEDQF;
}

public short getMAJ1UKSOC00_CC() {
return MAJ1UKSOC00_CC;
}

public short getMAJ1UKSOC10_CC() {
return MAJ1UKSOC10_CC;
}

public byte getMAJ1UKSOC90_CC() {
return MAJ1UKSOC90_CC;
}

public byte getMAJCB() {
return MAJCB;
}

public short getMAJLCBSOC00_CC() {
return MAJLCBSOC00_CC;
}

public short getMAJLCBSOC10_CC() {
return MAJLCBSOC10_CC;
}

public byte getMAJLCBSOC90_CC() {
return MAJLCBSOC90_CC;
}

public byte getMAJU() {
return MAJU;
}

public byte getMAJUK() {
return MAJUK;
}

public byte getMAJUKEVR() {
return MAJUKEVR;
}

public byte getMANSSEC5_DV() {
return MANSSEC5_DV;
}

public byte getMARSTAT() {
return MARSTAT;
}

public short getMASOC00_CC() {
return MASOC00_CC;
}

public short getMASOC10_CC() {
return MASOC10_CC;
}

public byte getMASOC90_CC() {
return MASOC90_CC;
}

public byte getMASTAT_DV() {
return MASTAT_DV;
}

public byte getMATLEAVE() {
return MATLEAVE;
}

public byte getMATLV() {
return MATLV;
}

public byte getMATLVENDD() {
return MATLVENDD;
}

public byte getMATLVENDM() {
return MATLVENDM;
}

public short getMATLVENDY4() {
return MATLVENDY4;
}

public byte getMATLVSTD() {
return MATLVSTD;
}

public byte getMATLVSTM() {
return MATLVSTM;
}

public short getMATLVSTY4() {
return MATLVSTY4;
}

public byte getMAYRUK() {
return MAYRUK;
}

public short getMAYRUK1() {
return MAYRUK1;
}

public byte getMEMPLOY() {
return MEMPLOY;
}

public byte getMGMROB() {
return MGMROB;
}

public byte getMGPROB() {
return MGPROB;
}

public byte getMINDIRECT() {
return MINDIRECT;
}

public short getMINDIRECTC1() {
return MINDIRECTC1;
}

public short getMINDIRECTC2() {
return MINDIRECTC2;
}

public short getMINDIRECTC3() {
return MINDIRECTC3;
}

public short getMINDIRECTC4() {
return MINDIRECTC4;
}

public short getMINDIRECTC5() {
return MINDIRECTC5;
}

public byte getMINTENT() {
return MINTENT;
}

public byte getMINTWHEN() {
return MINTWHEN;
}

public byte getMLAGST() {
return MLAGST;
}

public byte getMLAGSTU() {
return MLAGSTU;
}

public byte getMLFUTR() {
return MLFUTR;
}

public byte getMLIVED() {
return MLIVED;
}

public short getMLIVEDC1() {
return MLIVEDC1;
}

public short getMLIVEDC2() {
return MLIVEDC2;
}

public short getMLIVEDC3() {
return MLIVEDC3;
}

public short getMLIVEDC4() {
return MLIVEDC4;
}

public short getMLIVEDC5() {
return MLIVEDC5;
}

public byte getMLIVEDIST() {
return MLIVEDIST;
}

public byte getMLIVEDIST5() {
return MLIVEDIST5;
}

public byte getMLIVEDISTF() {
return MLIVEDISTF;
}

public byte getMLRNOT1() {
return MLRNOT1;
}

public byte getMLRNOT10() {
return MLRNOT10;
}

public byte getMLRNOT11() {
return MLRNOT11;
}

public byte getMLRNOT12() {
return MLRNOT12;
}

public byte getMLRNOT13() {
return MLRNOT13;
}

public byte getMLRNOT2() {
return MLRNOT2;
}

public byte getMLRNOT3() {
return MLRNOT3;
}

public byte getMLRNOT4() {
return MLRNOT4;
}

public byte getMLRNOT5() {
return MLRNOT5;
}

public byte getMLRNOT6() {
return MLRNOT6;
}

public byte getMLRNOT7() {
return MLRNOT7;
}

public byte getMLRNOT8() {
return MLRNOT8;
}

public byte getMLRNOT9() {
return MLRNOT9;
}

public byte getMLRNOT97() {
return MLRNOT97;
}

public byte getMLSTATCHK() {
return MLSTATCHK;
}

public byte getMLWKFPT() {
return MLWKFPT;
}

public byte getMNABROAD() {
return MNABROAD;
}

public byte getMNLIVED() {
return MNLIVED;
}

public byte getMNMOVES() {
return MNMOVES;
}

public byte getMNOTHERC() {
return MNOTHERC;
}

public int getMNPID() {
return MNPID;
}

public byte getMNPNO() {
return MNPNO;
}

public int getMNSPID() {
return MNSPID;
}

public byte getMNSPNO() {
return MNSPNO;
}

public byte getMOBCOMP() {
return MOBCOMP;
}

public byte getMOBUSE() {
return MOBUSE;
}

public byte getMONTH() {
return MONTH;
}

public byte getMOVDIR() {
return MOVDIR;
}

public byte getMOVEOTH_CODE() {
return MOVEOTH_CODE;
}

public byte getMOVY11() {
return MOVY11;
}

public byte getMOVY12() {
return MOVY12;
}

public byte getMOVY13() {
return MOVY13;
}

public byte getMOVY14() {
return MOVY14;
}

public byte getMOVY15() {
return MOVY15;
}

public byte getMOVY16() {
return MOVY16;
}

public byte getMPLIKE() {
return MPLIKE;
}

public byte getMPNO() {
return MPNO;
}

public byte getMPWEB() {
return MPWEB;
}

public byte getMREASON1() {
return MREASON1;
}

public byte getMREASON2() {
return MREASON2;
}

public byte getMREASON3() {
return MREASON3;
}

public byte getMREASON4() {
return MREASON4;
}

public byte getMREASON5() {
return MREASON5;
}

public byte getMREASON6() {
return MREASON6;
}

public byte getMREASON7() {
return MREASON7;
}

public byte getMREASON97() {
return MREASON97;
}

public byte getMREASONO_CODE() {
return MREASONO_CODE;
}

public byte getMRETURNED() {
return MRETURNED;
}

public byte getMSTATCH1() {
return MSTATCH1;
}

public byte getMSTATCH2() {
return MSTATCH2;
}

public byte getMSTATCH3() {
return MSTATCH3;
}

public byte getMSTATCH4() {
return MSTATCH4;
}

public short getMSTATSAM() {
return MSTATSAM;
}

public byte getMSTATSAMN() {
return MSTATSAMN;
}

public byte getMVEVER() {
return MVEVER;
}

public byte getMVMNTH() {
return MVMNTH;
}

public short getMVYR() {
return MVYR;
}

public byte getNADOPTCH() {
return NADOPTCH;
}

public byte getNAIDXHH() {
return NAIDXHH;
}

public byte getNATID1() {
return NATID1;
}

public byte getNATID2() {
return NATID2;
}

public byte getNATID3() {
return NATID3;
}

public byte getNATID4() {
return NATID4;
}

public byte getNATID5() {
return NATID5;
}

public byte getNATID6() {
return NATID6;
}

public byte getNATID97() {
return NATID97;
}

public byte getNBRCOH1() {
return NBRCOH1;
}

public byte getNBRCOH2() {
return NBRCOH2;
}

public byte getNBRCOH3() {
return NBRCOH3;
}

public byte getNBRCOH4() {
return NBRCOH4;
}

public byte getNBRCOHDK_DV() {
return NBRCOHDK_DV;
}

public byte getNBRCOH_DV() {
return NBRCOH_DV;
}

protected double NBRSNCI_DV() {
return NBRSNCI_DV;
}

public byte getNCH10() {
return NCH10;
}

public byte getNCH10TO15() {
return NCH10TO15;
}

public byte getNCH14RESP() {
return NCH14RESP;
}

public byte getNCH3RESP() {
return NCH3RESP;
}

public byte getNCH415RESP() {
return NCH415RESP;
}

public byte getNCH5RESP() {
return NCH5RESP;
}

public byte getNCH5TO15() {
return NCH5TO15;
}

public byte getNCH8RESP() {
return NCH8RESP;
}

public byte getNCHILD() {
return NCHILD;
}

public short getNCHILD_DV() {
return NCHILD_DV;
}

public byte getNCHRESP() {
return NCHRESP;
}

public byte getNCHUNDER16() {
return NCHUNDER16;
}

public short getNCIGS() {
return NCIGS;
}

public byte getNCRR1() {
return NCRR1;
}

public byte getNCRR11() {
return NCRR11;
}

public byte getNCRR12() {
return NCRR12;
}

public byte getNCRR13() {
return NCRR13;
}

public byte getNCRR14() {
return NCRR14;
}

public byte getNCRR15() {
return NCRR15;
}

public byte getNCRR16() {
return NCRR16;
}

public byte getNCRR3() {
return NCRR3;
}

public byte getNCRR4() {
return NCRR4;
}

public byte getNCRR5() {
return NCRR5;
}

public byte getNCRR6() {
return NCRR6;
}

public byte getNCRR8() {
return NCRR8;
}

public byte getNCRR9() {
return NCRR9;
}

public byte getNCRRM() {
return NCRRM;
}

public short getNCRRY4() {
return NCRRY4;
}

public byte getNDEPCHL_DV() {
return NDEPCHL_DV;
}

public short getNETAG_1() {
return NETAG_1;
}

public short getNETAG_2() {
return NETAG_2;
}

public short getNETAG_3() {
return NETAG_3;
}

public byte getNETCHT() {
return NETCHT;
}

public byte getNETDO10_1() {
return NETDO10_1;
}

public byte getNETDO10_2() {
return NETDO10_2;
}

public byte getNETDO10_3() {
return NETDO10_3;
}

public byte getNETDO1_1() {
return NETDO1_1;
}

public byte getNETDO1_2() {
return NETDO1_2;
}

public byte getNETDO1_3() {
return NETDO1_3;
}

public byte getNETDO2_1() {
return NETDO2_1;
}

public byte getNETDO2_2() {
return NETDO2_2;
}

public byte getNETDO2_3() {
return NETDO2_3;
}

public byte getNETDO3_1() {
return NETDO3_1;
}

public byte getNETDO3_2() {
return NETDO3_2;
}

public byte getNETDO3_3() {
return NETDO3_3;
}

public byte getNETDO4_1() {
return NETDO4_1;
}

public byte getNETDO4_2() {
return NETDO4_2;
}

public byte getNETDO4_3() {
return NETDO4_3;
}

public byte getNETDO5_1() {
return NETDO5_1;
}

public byte getNETDO5_2() {
return NETDO5_2;
}

public byte getNETDO5_3() {
return NETDO5_3;
}

public byte getNETDO6_1() {
return NETDO6_1;
}

public byte getNETDO6_2() {
return NETDO6_2;
}

public byte getNETDO6_3() {
return NETDO6_3;
}

public byte getNETDO7_1() {
return NETDO7_1;
}

public byte getNETDO7_2() {
return NETDO7_2;
}

public byte getNETDO7_3() {
return NETDO7_3;
}

public byte getNETDO8_1() {
return NETDO8_1;
}

public byte getNETDO8_2() {
return NETDO8_2;
}

public byte getNETDO8_3() {
return NETDO8_3;
}

public byte getNETDO96_1() {
return NETDO96_1;
}

public byte getNETDO96_2() {
return NETDO96_2;
}

public byte getNETDO96_3() {
return NETDO96_3;
}

public byte getNETDO97_1() {
return NETDO97_1;
}

public byte getNETDO97_2() {
return NETDO97_2;
}

public byte getNETDO97_3() {
return NETDO97_3;
}

public byte getNETDO9_1() {
return NETDO9_1;
}

public byte getNETDO9_2() {
return NETDO9_2;
}

public byte getNETDO9_3() {
return NETDO9_3;
}

public byte getNETETAT_1() {
return NETETAT_1;
}

public byte getNETETAT_2() {
return NETETAT_2;
}

public byte getNETETAT_3() {
return NETETAT_3;
}

public byte getNETETBT_1() {
return NETETBT_1;
}

public byte getNETETBT_2() {
return NETETBT_2;
}

public byte getNETETBT_3() {
return NETETBT_3;
}

public byte getNETETMT_1() {
return NETETMT_1;
}

public byte getNETETMT_2() {
return NETETMT_2;
}

public byte getNETETMT_3() {
return NETETMT_3;
}

public byte getNETETT_1() {
return NETETT_1;
}

public byte getNETETT_2() {
return NETETT_2;
}

public byte getNETETT_3() {
return NETETT_3;
}

public byte getNETETWT_1() {
return NETETWT_1;
}

public byte getNETETWT_2() {
return NETETWT_2;
}

public byte getNETETWT_3() {
return NETETWT_3;
}

public byte getNETET_1() {
return NETET_1;
}

public byte getNETET_2() {
return NETET_2;
}

public byte getNETET_3() {
return NETET_3;
}

public byte getNETJB_1() {
return NETJB_1;
}

public byte getNETJB_2() {
return NETJB_2;
}

public byte getNETJB_3() {
return NETJB_3;
}

public byte getNETKN_1() {
return NETKN_1;
}

public byte getNETKN_2() {
return NETKN_2;
}

public byte getNETKN_3() {
return NETKN_3;
}

public byte getNETLV_1() {
return NETLV_1;
}

public byte getNETLV_2() {
return NETLV_2;
}

public byte getNETLV_3() {
return NETLV_3;
}

public byte getNETM2() {
return NETM2;
}

public byte getNETM2O_CODE() {
return NETM2O_CODE;
}

public byte getNETMET_1() {
return NETMET_1;
}

public byte getNETMET_2() {
return NETMET_2;
}

public byte getNETMET_3() {
return NETMET_3;
}

public short getNETPH_1() {
return NETPH_1;
}

public short getNETPH_2() {
return NETPH_2;
}

public short getNETPH_3() {
return NETPH_3;
}

public byte getNETPUSE() {
return NETPUSE;
}

public byte getNETRL_1() {
return NETRL_1;
}

public byte getNETRL_2() {
return NETRL_2;
}

public byte getNETRL_3() {
return NETRL_3;
}

public short getNETSX_1() {
return NETSX_1;
}

public short getNETSX_2() {
return NETSX_2;
}

public short getNETSX_3() {
return NETSX_3;
}

public byte getNETTALK10_1() {
return NETTALK10_1;
}

public byte getNETTALK10_2() {
return NETTALK10_2;
}

public byte getNETTALK10_3() {
return NETTALK10_3;
}

public byte getNETTALK11_1() {
return NETTALK11_1;
}

public byte getNETTALK11_2() {
return NETTALK11_2;
}

public byte getNETTALK11_3() {
return NETTALK11_3;
}

public byte getNETTALK12_1() {
return NETTALK12_1;
}

public byte getNETTALK12_2() {
return NETTALK12_2;
}

public byte getNETTALK12_3() {
return NETTALK12_3;
}

public byte getNETTALK13_1() {
return NETTALK13_1;
}

public byte getNETTALK13_2() {
return NETTALK13_2;
}

public byte getNETTALK13_3() {
return NETTALK13_3;
}

public byte getNETTALK1_1() {
return NETTALK1_1;
}

public byte getNETTALK1_2() {
return NETTALK1_2;
}

public byte getNETTALK1_3() {
return NETTALK1_3;
}

public byte getNETTALK2_1() {
return NETTALK2_1;
}

public byte getNETTALK2_2() {
return NETTALK2_2;
}

public byte getNETTALK2_3() {
return NETTALK2_3;
}

public byte getNETTALK3_1() {
return NETTALK3_1;
}

public byte getNETTALK3_2() {
return NETTALK3_2;
}

public byte getNETTALK3_3() {
return NETTALK3_3;
}

public byte getNETTALK4_1() {
return NETTALK4_1;
}

public byte getNETTALK4_2() {
return NETTALK4_2;
}

public byte getNETTALK4_3() {
return NETTALK4_3;
}

public byte getNETTALK5_1() {
return NETTALK5_1;
}

public byte getNETTALK5_2() {
return NETTALK5_2;
}

public byte getNETTALK5_3() {
return NETTALK5_3;
}

public byte getNETTALK6_1() {
return NETTALK6_1;
}

public byte getNETTALK6_2() {
return NETTALK6_2;
}

public byte getNETTALK6_3() {
return NETTALK6_3;
}

public byte getNETTALK7_1() {
return NETTALK7_1;
}

public byte getNETTALK7_2() {
return NETTALK7_2;
}

public byte getNETTALK7_3() {
return NETTALK7_3;
}

public byte getNETTALK8_1() {
return NETTALK8_1;
}

public byte getNETTALK8_2() {
return NETTALK8_2;
}

public byte getNETTALK8_3() {
return NETTALK8_3;
}

public byte getNETTALK96_1() {
return NETTALK96_1;
}

public byte getNETTALK96_2() {
return NETTALK96_2;
}

public byte getNETTALK96_3() {
return NETTALK96_3;
}

public byte getNETTALK97_1() {
return NETTALK97_1;
}

public byte getNETTALK97_2() {
return NETTALK97_2;
}

public byte getNETTALK97_3() {
return NETTALK97_3;
}

public byte getNETTALK9_1() {
return NETTALK9_1;
}

public byte getNETTALK9_2() {
return NETTALK9_2;
}

public byte getNETTALK9_3() {
return NETTALK9_3;
}

public byte getNETUSE() {
return NETUSE;
}

public byte getNETWEB_1() {
return NETWEB_1;
}

public byte getNETWEB_2() {
return NETWEB_2;
}

public byte getNETWEB_3() {
return NETWEB_3;
}

public short getNETWR_1() {
return NETWR_1;
}

public short getNETWR_2() {
return NETWR_2;
}

public short getNETWR_3() {
return NETWR_3;
}

public byte getNEWSMAIN() {
return NEWSMAIN;
}

public byte getNEWSOURCE1() {
return NEWSOURCE1;
}

public byte getNEWSOURCE10() {
return NEWSOURCE10;
}

public byte getNEWSOURCE11() {
return NEWSOURCE11;
}

public byte getNEWSOURCE12() {
return NEWSOURCE12;
}

public byte getNEWSOURCE2() {
return NEWSOURCE2;
}

public byte getNEWSOURCE3() {
return NEWSOURCE3;
}

public byte getNEWSOURCE4() {
return NEWSOURCE4;
}

public byte getNEWSOURCE5() {
return NEWSOURCE5;
}

public byte getNEWSOURCE6() {
return NEWSOURCE6;
}

public byte getNEWSOURCE7() {
return NEWSOURCE7;
}

public byte getNEWSOURCE8() {
return NEWSOURCE8;
}

public byte getNEWSOURCE9() {
return NEWSOURCE9;
}

public byte getNEWSOURCE96() {
return NEWSOURCE96;
}

public byte getNEXTELSE1() {
return NEXTELSE1;
}

public byte getNEXTELSE2() {
return NEXTELSE2;
}

public byte getNEXTELSE3() {
return NEXTELSE3;
}

public byte getNEXTELSE4() {
return NEXTELSE4;
}

public byte getNEXTELSE5() {
return NEXTELSE5;
}

public byte getNEXTELSE6() {
return NEXTELSE6;
}

public byte getNEXTELSE7() {
return NEXTELSE7;
}

public byte getNEXTJOB1() {
return NEXTJOB1;
}

public byte getNEXTJOB2() {
return NEXTJOB2;
}

public byte getNEXTJOB3() {
return NEXTJOB3;
}

public byte getNEXTJOB4() {
return NEXTJOB4;
}

public byte getNEXTJOB5() {
return NEXTJOB5;
}

public byte getNEXTJOB6() {
return NEXTJOB6;
}

public byte getNEXTJOB7() {
return NEXTJOB7;
}

public byte getNEXTSTAT1() {
return NEXTSTAT1;
}

public byte getNEXTSTAT2() {
return NEXTSTAT2;
}

public byte getNEXTSTAT3() {
return NEXTSTAT3;
}

public byte getNEXTSTAT4() {
return NEXTSTAT4;
}

public byte getNEXTSTAT5() {
return NEXTSTAT5;
}

public byte getNEXTSTAT6() {
return NEXTSTAT6;
}

public byte getNEXTSTAT7() {
return NEXTSTAT7;
}

public byte getNFH01() {
return NFH01;
}

public byte getNFH02() {
return NFH02;
}

public byte getNFH03() {
return NFH03;
}

public byte getNFH04() {
return NFH04;
}

public byte getNFH05() {
return NFH05;
}

public byte getNFH06() {
return NFH06;
}

public byte getNFH07() {
return NFH07;
}

public byte getNFH08() {
return NFH08;
}

public byte getNFH09() {
return NFH09;
}

public byte getNFH10() {
return NFH10;
}

public byte getNFH11() {
return NFH11;
}

public byte getNFH12() {
return NFH12;
}

public byte getNFH13() {
return NFH13;
}

public byte getNFH14() {
return NFH14;
}

public byte getNFH15() {
return NFH15;
}

public byte getNFH16() {
return NFH16;
}

public byte getNFH18() {
return NFH18;
}

public byte getNFH19() {
return NFH19;
}

public byte getNFH20() {
return NFH20;
}

public byte getNFH21() {
return NFH21;
}

public byte getNFH22() {
return NFH22;
}

public byte getNFH23() {
return NFH23;
}

public byte getNFH24() {
return NFH24;
}

public byte getNFH25() {
return NFH25;
}

public byte getNFH26() {
return NFH26;
}

public byte getNFH27() {
return NFH27;
}

public byte getNFH28() {
return NFH28;
}

public byte getNFH29() {
return NFH29;
}

public byte getNFH30() {
return NFH30;
}

public byte getNFH31() {
return NFH31;
}

public byte getNFH32() {
return NFH32;
}

public byte getNFH33() {
return NFH33;
}

public byte getNFH34() {
return NFH34;
}

public byte getNFH35() {
return NFH35;
}

public byte getNFH36() {
return NFH36;
}

public byte getNFH37() {
return NFH37;
}

public byte getNFH38() {
return NFH38;
}

public byte getNFH39() {
return NFH39;
}

public byte getNFH40() {
return NFH40;
}

public byte getNFH41() {
return NFH41;
}

public byte getNGRP_DV() {
return NGRP_DV;
}

public byte getNHIQUAL_DV() {
return NHIQUAL_DV;
}

public byte getNIACT() {
return NIACT;
}

public byte getNICLBNS1() {
return NICLBNS1;
}

public byte getNICLBNS2() {
return NICLBNS2;
}

public byte getNICLBNS3() {
return NICLBNS3;
}

public byte getNICLBNS4() {
return NICLBNS4;
}

public byte getNIREL() {
return NIREL;
}

public byte getNISERPS() {
return NISERPS;
}

public byte getNMAR() {
return NMAR;
}

public byte getNMPSP_DV() {
return NMPSP_DV;
}

public byte getNNATCH() {
return NNATCH;
}

public byte getNNEWBORN() {
return NNEWBORN;
}

public byte getNNMPSP_DV() {
return NNMPSP_DV;
}

public byte getNNSIB_DV() {
return NNSIB_DV;
}

public byte getNNSSIB_DV() {
return NNSSIB_DV;
}

public byte getNOTEMPCHK() {
return NOTEMPCHK;
}

public byte getNPENSIONER_DV() {
return NPENSIONER_DV;
}

public byte getNPNS_DV() {
return NPNS_DV;
}

public byte getNPN_DV() {
return NPN_DV;
}

public byte getNQFHIGH_DV() {
return NQFHIGH_DV;
}

public byte getNUNMPSP_DV() {
return NUNMPSP_DV;
}

public byte getNXTENDREAS() {
return NXTENDREAS;
}

public byte getNXTJBENDD() {
return NXTJBENDD;
}

public byte getNXTJBENDM() {
return NXTJBENDM;
}

public short getNXTJBENDY4() {
return NXTJBENDY4;
}

public byte getNXTJBES() {
return NXTJBES;
}

public byte getNXTJBHRS() {
return NXTJBHRS;
}

public byte getNXTST() {
return NXTST;
}

public byte getNXTSTELSE() {
return NXTSTELSE;
}

public byte getNXTSTENDD() {
return NXTSTENDD;
}

public byte getNXTSTENDM() {
return NXTSTENDM;
}

public short getNXTSTENDY4() {
return NXTSTENDY4;
}

public byte getOPRLG() {
return OPRLG;
}

public byte getOPRLG0() {
return OPRLG0;
}

public byte getOPRLG0NI() {
return OPRLG0NI;
}

public byte getOPRLG1() {
return OPRLG1;
}

public byte getOPSERV1() {
return OPSERV1;
}

public byte getOPSERV10() {
return OPSERV10;
}

public byte getOPSERV2() {
return OPSERV2;
}

public byte getOPSERV3() {
return OPSERV3;
}

public byte getOPSERV4() {
return OPSERV4;
}

public byte getOPSERV5() {
return OPSERV5;
}

public byte getOPSERV6() {
return OPSERV6;
}

public byte getOPSERV7() {
return OPSERV7;
}

public byte getOPSERV8() {
return OPSERV8;
}

public byte getOPSERV9() {
return OPSERV9;
}

public byte getORG() {
return ORG;
}

public byte getORGA1() {
return ORGA1;
}

public byte getORGA10() {
return ORGA10;
}

public byte getORGA11() {
return ORGA11;
}

public byte getORGA12() {
return ORGA12;
}

public byte getORGA13() {
return ORGA13;
}

public byte getORGA14() {
return ORGA14;
}

public byte getORGA15() {
return ORGA15;
}

public byte getORGA16() {
return ORGA16;
}

public byte getORGA2() {
return ORGA2;
}

public byte getORGA3() {
return ORGA3;
}

public byte getORGA4() {
return ORGA4;
}

public byte getORGA5() {
return ORGA5;
}

public byte getORGA6() {
return ORGA6;
}

public byte getORGA7() {
return ORGA7;
}

public byte getORGA8() {
return ORGA8;
}

public byte getORGA9() {
return ORGA9;
}

public byte getORGA96() {
return ORGA96;
}

public byte getORGAT1() {
return ORGAT1;
}

public byte getORGAT10() {
return ORGAT10;
}

public byte getORGAT11() {
return ORGAT11;
}

public byte getORGAT12() {
return ORGAT12;
}

public byte getORGAT13() {
return ORGAT13;
}

public byte getORGAT14() {
return ORGAT14;
}

public byte getORGAT15() {
return ORGAT15;
}

public byte getORGAT16() {
return ORGAT16;
}

public byte getORGAT2() {
return ORGAT2;
}

public byte getORGAT3() {
return ORGAT3;
}

public byte getORGAT4() {
return ORGAT4;
}

public byte getORGAT5() {
return ORGAT5;
}

public byte getORGAT6() {
return ORGAT6;
}

public byte getORGAT7() {
return ORGAT7;
}

public byte getORGAT8() {
return ORGAT8;
}

public byte getORGAT9() {
return ORGAT9;
}

public byte getORGAT96() {
return ORGAT96;
}

public byte getORGM1() {
return ORGM1;
}

public byte getORGM10() {
return ORGM10;
}

public byte getORGM11() {
return ORGM11;
}

public byte getORGM12() {
return ORGM12;
}

public byte getORGM13() {
return ORGM13;
}

public byte getORGM14() {
return ORGM14;
}

public byte getORGM15() {
return ORGM15;
}

public byte getORGM16() {
return ORGM16;
}

public byte getORGM2() {
return ORGM2;
}

public byte getORGM3() {
return ORGM3;
}

public byte getORGM4() {
return ORGM4;
}

public byte getORGM5() {
return ORGM5;
}

public byte getORGM6() {
return ORGM6;
}

public byte getORGM7() {
return ORGM7;
}

public byte getORGM8() {
return ORGM8;
}

public byte getORGM9() {
return ORGM9;
}

public byte getORGM96() {
return ORGM96;
}

public byte getORGMT1() {
return ORGMT1;
}

public byte getORGMT10() {
return ORGMT10;
}

public byte getORGMT11() {
return ORGMT11;
}

public byte getORGMT12() {
return ORGMT12;
}

public byte getORGMT13() {
return ORGMT13;
}

public byte getORGMT14() {
return ORGMT14;
}

public byte getORGMT15() {
return ORGMT15;
}

public byte getORGMT16() {
return ORGMT16;
}

public byte getORGMT2() {
return ORGMT2;
}

public byte getORGMT3() {
return ORGMT3;
}

public byte getORGMT4() {
return ORGMT4;
}

public byte getORGMT5() {
return ORGMT5;
}

public byte getORGMT6() {
return ORGMT6;
}

public byte getORGMT7() {
return ORGMT7;
}

public byte getORGMT8() {
return ORGMT8;
}

public byte getORGMT9() {
return ORGMT9;
}

public byte getORGMT96() {
return ORGMT96;
}

public byte getORIGADD() {
return ORIGADD;
}

public byte getOTHBEN1() {
return OTHBEN1;
}

public byte getOTHBEN2() {
return OTHBEN2;
}

public byte getOTHBEN3() {
return OTHBEN3;
}

public byte getOTHBEN4() {
return OTHBEN4;
}

public byte getOTHBEN5() {
return OTHBEN5;
}

public byte getOTHBEN6() {
return OTHBEN6;
}

public byte getOTHBEN7() {
return OTHBEN7;
}

public byte getOTHBEN8() {
return OTHBEN8;
}

public byte getOTHBEN9() {
return OTHBEN9;
}

public byte getOTHBEN96() {
return OTHBEN96;
}

public byte getOTHBEN97() {
return OTHBEN97;
}

public byte getOTHCONT() {
return OTHCONT;
}

public byte getOVTNSA() {
return OVTNSA;
}

public byte getOVTPAY() {
return OVTPAY;
}

protected double OVTRATE() {
return OVTRATE;
}

public byte getOVTREST() {
return OVTREST;
}

public byte getPACOB() {
return PACOB;
}

public byte getPACURR() {
return PACURR;
}

public byte getPAEDQF() {
return PAEDQF;
}

public short getPAJ1UKSOC00_CC() {
return PAJ1UKSOC00_CC;
}

public short getPAJ1UKSOC10_CC() {
return PAJ1UKSOC10_CC;
}

public byte getPAJ1UKSOC90_CC() {
return PAJ1UKSOC90_CC;
}

public byte getPAJCB() {
return PAJCB;
}

public short getPAJLCBSOC00_CC() {
return PAJLCBSOC00_CC;
}

public short getPAJLCBSOC10_CC() {
return PAJLCBSOC10_CC;
}

public byte getPAJLCBSOC90_CC() {
return PAJLCBSOC90_CC;
}

public byte getPAJU() {
return PAJU;
}

public byte getPAJUK() {
return PAJUK;
}

public byte getPAJUKEVR() {
return PAJUKEVR;
}

public byte getPANSSEC5_DV() {
return PANSSEC5_DV;
}

public short getPAPERM2() {
return PAPERM2;
}

public short getPASOC00_CC() {
return PASOC00_CC;
}

public short getPASOC10_CC() {
return PASOC10_CC;
}

public byte getPASOC90_CC() {
return PASOC90_CC;
}

public byte getPAYGWC() {
return PAYGWC;
}

protected double PAYG_DV() {
return PAYG_DV;
}

public byte getPAYNWC() {
return PAYNWC;
}

public byte getPAYRUK() {
return PAYRUK;
}

public short getPAYRUK1() {
return PAYRUK1;
}

public byte getPAYTYP() {
return PAYTYP;
}

public byte getPAYUWC() {
return PAYUWC;
}

protected double PAYU_DV() {
return PAYU_DV;
}

public short getPBIRTHY() {
return PBIRTHY;
}

public byte getPBNFT1() {
return PBNFT1;
}

public byte getPBNFT10() {
return PBNFT10;
}

public byte getPBNFT11() {
return PBNFT11;
}

public byte getPBNFT12() {
return PBNFT12;
}

public byte getPBNFT13() {
return PBNFT13;
}

public byte getPBNFT2() {
return PBNFT2;
}

public byte getPBNFT3() {
return PBNFT3;
}

public byte getPBNFT4() {
return PBNFT4;
}

public byte getPBNFT5() {
return PBNFT5;
}

public byte getPBNFT6() {
return PBNFT6;
}

public byte getPBNFT7() {
return PBNFT7;
}

public byte getPBNFT8() {
return PBNFT8;
}

public byte getPBNFT9() {
return PBNFT9;
}

public byte getPBNFT96() {
return PBNFT96;
}

public byte getPDVAGE() {
return PDVAGE;
}

public byte getPENMCN() {
return PENMCN;
}

public byte getPENMEX() {
return PENMEX;
}

protected double PENMPY() {
return PENMPY;
}

public byte getPENMTP() {
return PENMTP;
}

public byte getPENSIONER_DV() {
return PENSIONER_DV;
}

public byte getPENSPB() {
return PENSPB;
}

public byte getPERBFTS() {
return PERBFTS;
}

public byte getPERPOLINF() {
return PERPOLINF;
}

public byte getPGMROB() {
return PGMROB;
}

public byte getPGPROB() {
return PGPROB;
}

public int getPID() {
return PID;
}

public byte getPJBPTFT() {
return PJBPTFT;
}

public byte getPJSPTFT() {
return PJSPTFT;
}

public byte getPLIENG() {
return PLIENG;
}

public byte getPLITRANS() {
return PLITRANS;
}

public short getPLNOWM() {
return PLNOWM;
}

public short getPLNOWY4() {
return PLNOWY4;
}

public int getPN1PID() {
return PN1PID;
}

public byte getPN1PNO() {
return PN1PNO;
}

public byte getPN1SEX() {
return PN1SEX;
}

public int getPN2PID() {
return PN2PID;
}

public byte getPN2PNO() {
return PN2PNO;
}

public byte getPN2SEX() {
return PN2SEX;
}

public byte getPNCARS() {
return PNCARS;
}

public int getPNS1PID() {
return PNS1PID;
}

public byte getPNS1PNO() {
return PNS1PNO;
}

public byte getPNS1SEX() {
return PNS1SEX;
}

public int getPNS2PID() {
return PNS2PID;
}

public byte getPNS2PNO() {
return PNS2PNO;
}

public byte getPNS2SEX() {
return PNS2SEX;
}

public byte getPOLCOST() {
return POLCOST;
}

public byte getPOLEFF1() {
return POLEFF1;
}

public byte getPOLEFF2() {
return POLEFF2;
}

public byte getPOLEFF3() {
return POLEFF3;
}

public byte getPOLEFF4() {
return POLEFF4;
}

public byte getPPEN() {
return PPEN;
}

public byte getPPENT() {
return PPENT;
}

public int getPPID() {
return PPID;
}

public byte getPPPEX() {
return PPPEX;
}

public byte getPPPEXM() {
return PPPEXM;
}

public int getPPRAM() {
return PPRAM;
}

public byte getPPRAMPC() {
return PPRAMPC;
}

public byte getPPREG() {
return PPREG;
}

public byte getPPSEX() {
return PPSEX;
}

public short getPPYRS() {
return PPYRS;
}

public byte getPREARN() {
return PREARN;
}

public byte getPREARNA() {
return PREARNA;
}

public byte getPREARNW() {
return PREARNW;
}

public byte getPREASON() {
return PREASON;
}

public byte getPREG() {
return PREG;
}

public byte getPREGEND1() {
return PREGEND1;
}

public byte getPREGEND2() {
return PREGEND2;
}

public byte getPREGEND3() {
return PREGEND3;
}

public byte getPREGEND4() {
return PREGEND4;
}

public byte getPREGEND5() {
return PREGEND5;
}

public byte getPREGFERT1() {
return PREGFERT1;
}

public byte getPREGFERT2() {
return PREGFERT2;
}

public byte getPREGFERT3() {
return PREGFERT3;
}

public byte getPREGFERT4() {
return PREGFERT4;
}

public byte getPREGFERT5() {
return PREGFERT5;
}

public byte getPREGM1() {
return PREGM1;
}

public byte getPREGM2() {
return PREGM2;
}

public byte getPREGM3() {
return PREGM3;
}

public byte getPREGM4() {
return PREGM4;
}

public byte getPREGM5() {
return PREGM5;
}

public byte getPREGOUT1() {
return PREGOUT1;
}

public byte getPREGOUT2() {
return PREGOUT2;
}

public byte getPREGOUT3() {
return PREGOUT3;
}

public byte getPREGOUT4() {
return PREGOUT4;
}

public byte getPREGOUT5() {
return PREGOUT5;
}

public byte getPREGSMK11() {
return PREGSMK11;
}

public byte getPREGSMK12() {
return PREGSMK12;
}

public byte getPREGSMK13() {
return PREGSMK13;
}

public byte getPREGSMK14() {
return PREGSMK14;
}

public byte getPREGSMK15() {
return PREGSMK15;
}

public byte getPREGSMK21() {
return PREGSMK21;
}

public byte getPREGSMK22() {
return PREGSMK22;
}

public byte getPREGSMK23() {
return PREGSMK23;
}

public byte getPREGSMK24() {
return PREGSMK24;
}

public byte getPREGSMK25() {
return PREGSMK25;
}

public byte getPREGSMK31() {
return PREGSMK31;
}

public byte getPREGSMK32() {
return PREGSMK32;
}

public byte getPREGSMK33() {
return PREGSMK33;
}

public byte getPREGSMK34() {
return PREGSMK34;
}

public byte getPREGSMK35() {
return PREGSMK35;
}

public byte getPREGSMOKE1() {
return PREGSMOKE1;
}

public byte getPREGSMOKE2() {
return PREGSMOKE2;
}

public byte getPREGSMOKE3() {
return PREGSMOKE3;
}

public byte getPREGSMOKE4() {
return PREGSMOKE4;
}

public byte getPREGSMOKE5() {
return PREGSMOKE5;
}

public short getPREGY41() {
return PREGY41;
}

public short getPREGY42() {
return PREGY42;
}

public short getPREGY43() {
return PREGY43;
}

public short getPREGY44() {
return PREGY44;
}

public byte getPREGY45() {
return PREGY45;
}

public byte getPREL() {
return PREL;
}

public byte getPRFITB() {
return PRFITB;
}

public byte getPRFITBA() {
return PRFITBA;
}

public byte getPRFITBW() {
return PRFITBW;
}

public byte getPS1() {
return PS1;
}

public byte getPS10() {
return PS10;
}

public byte getPS11() {
return PS11;
}

public byte getPS12() {
return PS12;
}

public byte getPS13() {
return PS13;
}

public byte getPS14() {
return PS14;
}

public byte getPS15() {
return PS15;
}

public byte getPS16() {
return PS16;
}

public byte getPS17() {
return PS17;
}

public byte getPS18() {
return PS18;
}

public byte getPS19() {
return PS19;
}

public byte getPS2() {
return PS2;
}

public byte getPS20() {
return PS20;
}

public byte getPS21() {
return PS21;
}

public byte getPS22() {
return PS22;
}

public byte getPS23() {
return PS23;
}

public byte getPS24() {
return PS24;
}

public byte getPS25() {
return PS25;
}

public byte getPS26() {
return PS26;
}

public byte getPS27() {
return PS27;
}

public byte getPS28() {
return PS28;
}

public byte getPS29() {
return PS29;
}

public byte getPS3() {
return PS3;
}

public byte getPS30() {
return PS30;
}

public byte getPS31() {
return PS31;
}

public byte getPS32() {
return PS32;
}

public byte getPS4() {
return PS4;
}

public byte getPS5() {
return PS5;
}

public byte getPS6() {
return PS6;
}

public byte getPS7() {
return PS7;
}

public byte getPS8() {
return PS8;
}

public byte getPS9() {
return PS9;
}

public byte getPSDQA_DV() {
return PSDQA_DV;
}

public byte getPSDQB_DV() {
return PSDQB_DV;
}

public byte getPSDQC_DV() {
return PSDQC_DV;
}

public byte getPSNUMCH() {
return PSNUMCH;
}

public int getPSU() {
return PSU;
}

public byte getPVTPAY() {
return PVTPAY;
}

public byte getQFCTRY() {
return QFCTRY;
}

public byte getQFHIGH() {
return QFHIGH;
}

public boolean getQFHIGHFL_DV() {
return QFHIGHFL_DV;
}

public byte getQFHIGHOTH() {
return QFHIGHOTH;
}

public byte getQFHIGH_DV() {
return QFHIGH_DV;
}

public byte getQFVOC1() {
return QFVOC1;
}

public byte getQFVOC10() {
return QFVOC10;
}

public byte getQFVOC11() {
return QFVOC11;
}

public byte getQFVOC12() {
return QFVOC12;
}

public byte getQFVOC13() {
return QFVOC13;
}

public byte getQFVOC14() {
return QFVOC14;
}

public byte getQFVOC15() {
return QFVOC15;
}

public byte getQFVOC2() {
return QFVOC2;
}

public byte getQFVOC3() {
return QFVOC3;
}

public byte getQFVOC4() {
return QFVOC4;
}

public byte getQFVOC5() {
return QFVOC5;
}

public byte getQFVOC6() {
return QFVOC6;
}

public byte getQFVOC7() {
return QFVOC7;
}

public byte getQFVOC8() {
return QFVOC8;
}

public byte getQFVOC9() {
return QFVOC9;
}

public byte getQFVOC96() {
return QFVOC96;
}

public byte getQFVOCNONUK() {
return QFVOCNONUK;
}

public byte getQFVOCUK() {
return QFVOCUK;
}

public byte getQUALNEW1() {
return QUALNEW1;
}

public byte getQUALNEW10() {
return QUALNEW10;
}

public byte getQUALNEW11() {
return QUALNEW11;
}

public byte getQUALNEW13() {
return QUALNEW13;
}

public byte getQUALNEW15() {
return QUALNEW15;
}

public byte getQUALNEW16() {
return QUALNEW16;
}

public byte getQUALNEW17() {
return QUALNEW17;
}

public byte getQUALNEW18() {
return QUALNEW18;
}

public byte getQUALNEW19() {
return QUALNEW19;
}

public byte getQUALNEW2() {
return QUALNEW2;
}

public byte getQUALNEW20() {
return QUALNEW20;
}

public byte getQUALNEW21() {
return QUALNEW21;
}

public byte getQUALNEW22() {
return QUALNEW22;
}

public byte getQUALNEW23() {
return QUALNEW23;
}

public byte getQUALNEW24() {
return QUALNEW24;
}

public byte getQUALNEW25() {
return QUALNEW25;
}

public byte getQUALNEW26() {
return QUALNEW26;
}

public byte getQUALNEW27() {
return QUALNEW27;
}

public byte getQUALNEW28() {
return QUALNEW28;
}

public byte getQUALNEW29() {
return QUALNEW29;
}

public byte getQUALNEW3() {
return QUALNEW3;
}

public byte getQUALNEW30() {
return QUALNEW30;
}

public byte getQUALNEW31() {
return QUALNEW31;
}

public byte getQUALNEW4() {
return QUALNEW4;
}

public byte getQUALNEW5() {
return QUALNEW5;
}

public byte getQUALNEW6() {
return QUALNEW6;
}

public byte getQUALNEW7() {
return QUALNEW7;
}

public byte getQUALNEW8() {
return QUALNEW8;
}

public byte getQUALNEW9() {
return QUALNEW9;
}

public byte getQUALOC() {
return QUALOC;
}

public byte getQUARTER() {
return QUARTER;
}

public byte getRACEL() {
return RACEL;
}

public byte getRACELAT() {
return RACELAT;
}

public byte getRACELBT() {
return RACELBT;
}

public byte getRACELMT() {
return RACELMT;
}

public byte getRACELOT_CODE() {
return RACELOT_CODE;
}

public short getRACELO_CODE() {
return RACELO_CODE;
}

public byte getRACELT() {
return RACELT;
}

public byte getRACELWT() {
return RACELWT;
}

public byte getRACEL_DV() {
return RACEL_DV;
}

public byte getREADDIF() {
return READDIF;
}

public byte getREASEND1() {
return REASEND1;
}

public byte getREASEND2() {
return REASEND2;
}

public byte getREASEND3() {
return REASEND3;
}

public byte getREASEND4() {
return REASEND4;
}

public byte getREASEND5() {
return REASEND5;
}

public byte getREASEND6() {
return REASEND6;
}

public byte getREASEND7() {
return REASEND7;
}

public byte getRELUP() {
return RELUP;
}

public byte getREMAIL_CODE() {
return REMAIL_CODE;
}

public boolean getRESPF16() {
return RESPF16;
}

public boolean getRESPF16_DV() {
return RESPF16_DV;
}

public boolean getRESPM16() {
return RESPM16;
}

public boolean getRESPM16_DV() {
return RESPM16_DV;
}

public byte getRETAMT() {
return RETAMT;
}

public byte getRETCHK() {
return RETCHK;
}

public byte getRETSUF() {
return RETSUF;
}

public byte getRHLAND_CODE() {
return RHLAND_CODE;
}

public byte getRPHMOB_CODE() {
return RPHMOB_CODE;
}

public byte getRPHWRK_CODE() {
return RPHWRK_CODE;
}

public byte getRTCON1() {
return RTCON1;
}

public byte getRTCON2() {
return RTCON2;
}

public byte getRTCON3() {
return RTCON3;
}

public byte getRTCON4() {
return RTCON4;
}

public byte getRTEXPJB() {
return RTEXPJB;
}

public byte getRTFND1() {
return RTFND1;
}

public byte getRTFND10() {
return RTFND10;
}

public byte getRTFND2() {
return RTFND2;
}

public byte getRTFND3() {
return RTFND3;
}

public byte getRTFND4() {
return RTFND4;
}

public byte getRTFND5() {
return RTFND5;
}

public byte getRTFND6() {
return RTFND6;
}

public byte getRTFND7() {
return RTFND7;
}

public byte getRTFND8() {
return RTFND8;
}

public byte getRTFND9() {
return RTFND9;
}

public byte getRTFND96() {
return RTFND96;
}

public byte getRTPRO1() {
return RTPRO1;
}

public byte getRTPRO2() {
return RTPRO2;
}

public byte getRTPRO3() {
return RTPRO3;
}

public byte getRTPRO4() {
return RTPRO4;
}

public byte getRTPRO5() {
return RTPRO5;
}

public byte getRTPRO6() {
return RTPRO6;
}

public byte getS2CTCONS() {
return S2CTCONS;
}

public byte getS2CTREL() {
return S2CTREL;
}

public byte getSAMEJOB() {
return SAMEJOB;
}

public short getSAMPST() {
return SAMPST;
}

public byte getSATTRANSY1() {
return SATTRANSY1;
}

public byte getSATTRANSY10() {
return SATTRANSY10;
}

public byte getSATTRANSY2() {
return SATTRANSY2;
}

public byte getSATTRANSY3() {
return SATTRANSY3;
}

public byte getSATTRANSY4() {
return SATTRANSY4;
}

public byte getSATTRANSY5() {
return SATTRANSY5;
}

public byte getSATTRANSY6() {
return SATTRANSY6;
}

public byte getSATTRANSY7() {
return SATTRANSY7;
}

public byte getSATTRANSY8() {
return SATTRANSY8;
}

public byte getSATTRANSY9() {
return SATTRANSY9;
}

public byte getSATTRANSY97() {
return SATTRANSY97;
}

public short getSAVE() {
return SAVE;
}

public int getSAVED() {
return SAVED;
}

public byte getSAVLT() {
return SAVLT;
}

public byte getSAVREG() {
return SAVREG;
}

public byte getSCAC() {
return SCAC;
}

public byte getSCFLAG_DV() {
return SCFLAG_DV;
}

public byte getSCHLLOC() {
return SCHLLOC;
}

public byte getSCHLLOCENG() {
return SCHLLOCENG;
}

public byte getSCHOK() {
return SCHOK;
}

public byte getSCHOOLCNTRY1() {
return SCHOOLCNTRY1;
}

public byte getSCHOOLCNTRY2() {
return SCHOOLCNTRY2;
}

public byte getSCHOOLCNTRY3() {
return SCHOOLCNTRY3;
}

public byte getSCHOOLCNTRY4() {
return SCHOOLCNTRY4;
}

public byte getSCHOOLCNTRY5() {
return SCHOOLCNTRY5;
}

public byte getSCLFSAT1() {
return SCLFSAT1;
}

public byte getSCLFSAT2() {
return SCLFSAT2;
}

public byte getSCLFSAT7() {
return SCLFSAT7;
}

public byte getSCLFSATO() {
return SCLFSATO;
}

public byte getSCOPNGBHA() {
return SCOPNGBHA;
}

public byte getSCOPNGBHB() {
return SCOPNGBHB;
}

public byte getSCOPNGBHC() {
return SCOPNGBHC;
}

public byte getSCOPNGBHD() {
return SCOPNGBHD;
}

public byte getSCOPNGBHE() {
return SCOPNGBHE;
}

public byte getSCOPNGBHF() {
return SCOPNGBHF;
}

public byte getSCOPNGBHG() {
return SCOPNGBHG;
}

public byte getSCOPNGBHH() {
return SCOPNGBHH;
}

public byte getSCOTVOT1() {
return SCOTVOT1;
}

public byte getSCOTVOT2() {
return SCOTVOT2;
}

public byte getSCOTVOT3() {
return SCOTVOT3;
}

public byte getSCOTVOT4() {
return SCOTVOT4;
}

public byte getSCRF1() {
return SCRF1;
}

public byte getSCRF2() {
return SCRF2;
}

public byte getSCRF3() {
return SCRF3;
}

public byte getSCRF4() {
return SCRF4;
}

public byte getSCRF5() {
return SCRF5;
}

public byte getSCRF6() {
return SCRF6;
}

public byte getSCRF97() {
return SCRF97;
}

public byte getSCRX_CODE() {
return SCRX_CODE;
}

public byte getSCSF1() {
return SCSF1;
}

public byte getSCSF2A() {
return SCSF2A;
}

public byte getSCSF2B() {
return SCSF2B;
}

public byte getSCSF3A() {
return SCSF3A;
}

public byte getSCSF3B() {
return SCSF3B;
}

public byte getSCSF4A() {
return SCSF4A;
}

public byte getSCSF4B() {
return SCSF4B;
}

public byte getSCSF5() {
return SCSF5;
}

public byte getSCSF6A() {
return SCSF6A;
}

public byte getSCSF6B() {
return SCSF6B;
}

public byte getSCSF6C() {
return SCSF6C;
}

public byte getSCSF7() {
return SCSF7;
}

public byte getSCUN1() {
return SCUN1;
}

public byte getSCUN2() {
return SCUN2;
}

public byte getSCUN3() {
return SCUN3;
}

public byte getSCUN97() {
return SCUN97;
}

public byte getSCUX_CODE() {
return SCUX_CODE;
}

protected double SEEARNGRS_DV() {
return SEEARNGRS_DV;
}

public byte getSEEARNGRS_IF() {
return SEEARNGRS_IF;
}

protected double SEEARNNET_DV() {
return SEEARNNET_DV;
}

public byte getSERVACC() {
return SERVACC;
}

public byte getSERVACCY1() {
return SERVACCY1;
}

public byte getSERVACCY10() {
return SERVACCY10;
}

public byte getSERVACCY11() {
return SERVACCY11;
}

public byte getSERVACCY12() {
return SERVACCY12;
}

public byte getSERVACCY13() {
return SERVACCY13;
}

public byte getSERVACCY14() {
return SERVACCY14;
}

public byte getSERVACCY15() {
return SERVACCY15;
}

public byte getSERVACCY2() {
return SERVACCY2;
}

public byte getSERVACCY3() {
return SERVACCY3;
}

public byte getSERVACCY4() {
return SERVACCY4;
}

public byte getSERVACCY5() {
return SERVACCY5;
}

public byte getSERVACCY6() {
return SERVACCY6;
}

public byte getSERVACCY7() {
return SERVACCY7;
}

public byte getSERVACCY8() {
return SERVACCY8;
}

public byte getSERVACCY9() {
return SERVACCY9;
}

public byte getSERVACCY97() {
return SERVACCY97;
}

public byte getSERVUSE1() {
return SERVUSE1;
}

public byte getSERVUSE10() {
return SERVUSE10;
}

public byte getSERVUSE2() {
return SERVUSE2;
}

public byte getSERVUSE3() {
return SERVUSE3;
}

public byte getSERVUSE4() {
return SERVUSE4;
}

public byte getSERVUSE5() {
return SERVUSE5;
}

public byte getSERVUSE6() {
return SERVUSE6;
}

public byte getSERVUSE7() {
return SERVUSE7;
}

public byte getSERVUSE8() {
return SERVUSE8;
}

public byte getSERVUSE9() {
return SERVUSE9;
}

public byte getSERVUSE96() {
return SERVUSE96;
}

public byte getSEX_DV() {
return SEX_DV;
}

public byte getSF1() {
return SF1;
}

protected double SF12MCS_DV() {
return SF12MCS_DV;
}

protected double SF12PCS_DV() {
return SF12PCS_DV;
}

public byte getSIMAGE() {
return SIMAGE;
}

public byte getSIMAREA() {
return SIMAREA;
}

public byte getSIMEDUC() {
return SIMEDUC;
}

public byte getSIMFAM() {
return SIMFAM;
}

public byte getSIMINC() {
return SIMINC;
}

public byte getSIMJOB() {
return SIMJOB;
}

public byte getSIMRACE() {
return SIMRACE;
}

public boolean getSINGLE_DV() {
return SINGLE_DV;
}

public byte getSMARTMOB() {
return SMARTMOB;
}

public byte getSMKMNTH11() {
return SMKMNTH11;
}

public byte getSMKMNTH12() {
return SMKMNTH12;
}

public byte getSMKMNTH13() {
return SMKMNTH13;
}

public byte getSMKMNTH14() {
return SMKMNTH14;
}

public byte getSMKMNTH15() {
return SMKMNTH15;
}

public byte getSMKMNTH21() {
return SMKMNTH21;
}

public byte getSMKMNTH22() {
return SMKMNTH22;
}

public byte getSMKMNTH23() {
return SMKMNTH23;
}

public byte getSMKMNTH24() {
return SMKMNTH24;
}

public byte getSMKMNTH25() {
return SMKMNTH25;
}

public byte getSMKMNTH31() {
return SMKMNTH31;
}

public byte getSMKMNTH32() {
return SMKMNTH32;
}

public byte getSMKMNTH33() {
return SMKMNTH33;
}

public byte getSMKMNTH34() {
return SMKMNTH34;
}

public byte getSMKMNTH35() {
return SMKMNTH35;
}

public short getSMOKER() {
return SMOKER;
}

public byte getSOCCONT() {
return SOCCONT;
}

public byte getSOCWEB() {
return SOCWEB;
}

public byte getSPKDIF() {
return SPKDIF;
}

public byte getSPPEN() {
return SPPEN;
}

public int getSPPID() {
return SPPID;
}

public byte getSPPNO() {
return SPPNO;
}

public byte getSRVYNOT1() {
return SRVYNOT1;
}

public byte getSRVYNOT10() {
return SRVYNOT10;
}

public byte getSRVYNOT2() {
return SRVYNOT2;
}

public byte getSRVYNOT3() {
return SRVYNOT3;
}

public byte getSRVYNOT4() {
return SRVYNOT4;
}

public byte getSRVYNOT5() {
return SRVYNOT5;
}

public byte getSRVYNOT6() {
return SRVYNOT6;
}

public byte getSRVYNOT7() {
return SRVYNOT7;
}

public byte getSRVYNOT8() {
return SRVYNOT8;
}

public byte getSRVYNOT9() {
return SRVYNOT9;
}

public byte getSTATCM1() {
return STATCM1;
}

public byte getSTATCM2() {
return STATCM2;
}

public byte getSTATCM3() {
return STATCM3;
}

public byte getSTATCM4() {
return STATCM4;
}

public short getSTATCY41() {
return STATCY41;
}

public short getSTATCY42() {
return STATCY42;
}

public short getSTATCY43() {
return STATCY43;
}

public short getSTATCY44() {
return STATCY44;
}

public byte getSTATENDD1() {
return STATENDD1;
}

public byte getSTATENDD2() {
return STATENDD2;
}

public byte getSTATENDD3() {
return STATENDD3;
}

public byte getSTATENDD4() {
return STATENDD4;
}

public byte getSTATENDD5() {
return STATENDD5;
}

public byte getSTATENDD6() {
return STATENDD6;
}

public byte getSTATENDD7() {
return STATENDD7;
}

public byte getSTATENDM1() {
return STATENDM1;
}

public byte getSTATENDM2() {
return STATENDM2;
}

public byte getSTATENDM3() {
return STATENDM3;
}

public byte getSTATENDM4() {
return STATENDM4;
}

public byte getSTATENDM5() {
return STATENDM5;
}

public byte getSTATENDM6() {
return STATENDM6;
}

public byte getSTATENDM7() {
return STATENDM7;
}

public short getSTATENDY41() {
return STATENDY41;
}

public short getSTATENDY42() {
return STATENDY42;
}

public short getSTATENDY43() {
return STATENDY43;
}

public short getSTATENDY44() {
return STATENDY44;
}

public short getSTATENDY45() {
return STATENDY45;
}

public short getSTATENDY46() {
return STATENDY46;
}

public short getSTATENDY47() {
return STATENDY47;
}

public byte getSTENDREAS() {
return STENDREAS;
}

public short getSTRATA() {
return STRATA;
}

public byte getSUSP() {
return SUSP;
}

public byte getTELDIF() {
return TELDIF;
}

public byte getTRAINANY() {
return TRAINANY;
}

public short getTRAINDAYS1() {
return TRAINDAYS1;
}

public short getTRAINDAYS2() {
return TRAINDAYS2;
}

public short getTRAINDAYS3() {
return TRAINDAYS3;
}

public byte getTRAINEND1() {
return TRAINEND1;
}

public byte getTRAINEND2() {
return TRAINEND2;
}

public byte getTRAINEND3() {
return TRAINEND3;
}

public byte getTRAINHRS1() {
return TRAINHRS1;
}

public byte getTRAINHRS2() {
return TRAINHRS2;
}

public byte getTRAINHRS3() {
return TRAINHRS3;
}

public byte getTRAINN() {
return TRAINN;
}

public byte getTRAINPURP11() {
return TRAINPURP11;
}

public byte getTRAINPURP12() {
return TRAINPURP12;
}

public byte getTRAINPURP13() {
return TRAINPURP13;
}

public byte getTRAINPURP21() {
return TRAINPURP21;
}

public byte getTRAINPURP22() {
return TRAINPURP22;
}

public byte getTRAINPURP23() {
return TRAINPURP23;
}

public byte getTRAINPURP31() {
return TRAINPURP31;
}

public byte getTRAINPURP32() {
return TRAINPURP32;
}

public byte getTRAINPURP33() {
return TRAINPURP33;
}

public byte getTRAINPURP41() {
return TRAINPURP41;
}

public byte getTRAINPURP42() {
return TRAINPURP42;
}

public byte getTRAINPURP43() {
return TRAINPURP43;
}

public byte getTRAINPURP51() {
return TRAINPURP51;
}

public byte getTRAINPURP52() {
return TRAINPURP52;
}

public byte getTRAINPURP53() {
return TRAINPURP53;
}

public byte getTRAINPURP61() {
return TRAINPURP61;
}

public byte getTRAINPURP62() {
return TRAINPURP62;
}

public byte getTRAINPURP63() {
return TRAINPURP63;
}

public byte getTRAINPURP71() {
return TRAINPURP71;
}

public byte getTRAINPURP72() {
return TRAINPURP72;
}

public byte getTRAINPURP73() {
return TRAINPURP73;
}

public byte getTRAINQUAL1() {
return TRAINQUAL1;
}

public byte getTRAINQUAL2() {
return TRAINQUAL2;
}

public byte getTRAINQUAL3() {
return TRAINQUAL3;
}

public byte getTRBIKEFQ() {
return TRBIKEFQ;
}

public byte getTRBUSFQ() {
return TRBUSFQ;
}

public byte getTRCARFQ() {
return TRCARFQ;
}

public byte getTRQUAL1() {
return TRQUAL1;
}

public byte getTRQUAL10() {
return TRQUAL10;
}

public byte getTRQUAL11() {
return TRQUAL11;
}

public byte getTRQUAL13() {
return TRQUAL13;
}

public byte getTRQUAL15() {
return TRQUAL15;
}

public byte getTRQUAL16() {
return TRQUAL16;
}

public byte getTRQUAL17() {
return TRQUAL17;
}

public byte getTRQUAL18() {
return TRQUAL18;
}

public byte getTRQUAL19() {
return TRQUAL19;
}

public byte getTRQUAL2() {
return TRQUAL2;
}

public byte getTRQUAL20() {
return TRQUAL20;
}

public byte getTRQUAL21() {
return TRQUAL21;
}

public byte getTRQUAL22() {
return TRQUAL22;
}

public byte getTRQUAL23() {
return TRQUAL23;
}

public byte getTRQUAL24() {
return TRQUAL24;
}

public byte getTRQUAL25() {
return TRQUAL25;
}

public byte getTRQUAL26() {
return TRQUAL26;
}

public byte getTRQUAL27() {
return TRQUAL27;
}

public byte getTRQUAL28() {
return TRQUAL28;
}

public byte getTRQUAL29() {
return TRQUAL29;
}

public byte getTRQUAL3() {
return TRQUAL3;
}

public byte getTRQUAL30() {
return TRQUAL30;
}

public byte getTRQUAL31() {
return TRQUAL31;
}

public byte getTRQUAL4() {
return TRQUAL4;
}

public byte getTRQUAL5() {
return TRQUAL5;
}

public byte getTRQUAL6() {
return TRQUAL6;
}

public byte getTRQUAL7() {
return TRQUAL7;
}

public byte getTRQUAL8() {
return TRQUAL8;
}

public byte getTRQUAL9() {
return TRQUAL9;
}

public byte getTRTRNFQ() {
return TRTRNFQ;
}

public byte getTRWHO1() {
return TRWHO1;
}

public byte getTRWHO2() {
return TRWHO2;
}

public byte getTRWHO3() {
return TRWHO3;
}

public short getTUIN1() {
return TUIN1;
}

public short getTUJBPL() {
return TUJBPL;
}

protected double TVHOURS() {
return TVHOURS;
}

public byte getTVM2() {
return TVM2;
}

public byte getTWKCAR() {
return TWKCAR;
}

public byte getTWKDIFF1() {
return TWKDIFF1;
}

public byte getTWKDIFF2() {
return TWKDIFF2;
}

public byte getTWKDIFF3() {
return TWKDIFF3;
}

public byte getTWKDIFF4() {
return TWKDIFF4;
}

public byte getTWKDIFF5() {
return TWKDIFF5;
}

public byte getTWKDIFF6() {
return TWKDIFF6;
}

public byte getTWKDIFF7() {
return TWKDIFF7;
}

public byte getTWKDIFF8() {
return TWKDIFF8;
}

public byte getTWKDIFF97() {
return TWKDIFF97;
}

public byte getTWKDIFFM() {
return TWKDIFFM;
}

public byte getUKBORN() {
return UKBORN;
}

public byte getUNDQUS() {
return UNDQUS;
}

public byte getUPSET() {
return UPSET;
}

public byte getURBAN_DV() {
return URBAN_DV;
}

public byte getUSUALLANG() {
return USUALLANG;
}

public byte getVISFRNDS() {
return VISFRNDS;
}

public byte getVISFRNDSY1() {
return VISFRNDSY1;
}

public byte getVISFRNDSY10() {
return VISFRNDSY10;
}

public byte getVISFRNDSY11() {
return VISFRNDSY11;
}

public byte getVISFRNDSY12() {
return VISFRNDSY12;
}

public byte getVISFRNDSY13() {
return VISFRNDSY13;
}

public byte getVISFRNDSY14() {
return VISFRNDSY14;
}

public byte getVISFRNDSY2() {
return VISFRNDSY2;
}

public byte getVISFRNDSY3() {
return VISFRNDSY3;
}

public byte getVISFRNDSY4() {
return VISFRNDSY4;
}

public byte getVISFRNDSY5() {
return VISFRNDSY5;
}

public byte getVISFRNDSY6() {
return VISFRNDSY6;
}

public byte getVISFRNDSY7() {
return VISFRNDSY7;
}

public byte getVISFRNDSY8() {
return VISFRNDSY8;
}

public byte getVISFRNDSY9() {
return VISFRNDSY9;
}

public byte getVISFRNDSY97() {
return VISFRNDSY97;
}

public byte getVOLFREQ() {
return VOLFREQ;
}

public short getVOLHRS() {
return VOLHRS;
}

public byte getVOLUN() {
return VOLUN;
}

public short getVOTE1() {
return VOTE1;
}

public short getVOTE2() {
return VOTE2;
}

public short getVOTE3() {
return VOTE3;
}

public short getVOTE4() {
return VOTE4;
}

public short getVOTE5() {
return VOTE5;
}

public short getVOTE6() {
return VOTE6;
}

public byte getVOTEINTENT() {
return VOTEINTENT;
}

public byte getVOTENORM() {
return VOTENORM;
}

public byte getWHORUAGE() {
return WHORUAGE;
}

public byte getWHORUEDU() {
return WHORUEDU;
}

public byte getWHORUFAM() {
return WHORUFAM;
}

public byte getWHORUPOL() {
return WHORUPOL;
}

public byte getWHORUPRO() {
return WHORUPRO;
}

public byte getWHORURAC() {
return WHORURAC;
}

public byte getWHORUSEX() {
return WHORUSEX;
}

public byte getWKAUT1() {
return WKAUT1;
}

public byte getWKAUT2() {
return WKAUT2;
}

public byte getWKAUT3() {
return WKAUT3;
}

public byte getWKAUT4() {
return WKAUT4;
}

public byte getWKAUT5() {
return WKAUT5;
}

public byte getWKENDS() {
return WKENDS;
}

public byte getWKPLSAM() {
return WKPLSAM;
}

public short getWKTIME() {
return WKTIME;
}

public short getWORKDIS() {
return WORKDIS;
}

public byte getWORKTRAV() {
return WORKTRAV;
}

public byte getXPMOVE() {
return XPMOVE;
}

public byte getXPMVCNTRY() {
return XPMVCNTRY;
}

public byte getXPMVMNTH() {
return XPMVMNTH;
}

public byte getXPMVWHN() {
return XPMVWHN;
}

public byte getXPMVWHR() {
return XPMVWHR;
}

public short getXPMVYR() {
return XPMVYR;
}

public byte getXTRA5MINOSM_DV() {
return XTRA5MINOSM_DV;
}

public byte getXTRA5MIN_DV() {
return XTRA5MIN_DV;
}

public byte getYAFUTA() {
return YAFUTA;
}

public byte getYAFUTB() {
return YAFUTB;
}

public byte getYAJBSRV1() {
return YAJBSRV1;
}

public byte getYAJBSRV2() {
return YAJBSRV2;
}

public byte getYAJBSRV3() {
return YAJBSRV3;
}

public byte getYAJBSRV4() {
return YAJBSRV4;
}

public byte getYAJBSRV5() {
return YAJBSRV5;
}

public byte getYAJBSRV7() {
return YAJBSRV7;
}

public byte getYAJBSRV8() {
return YAJBSRV8;
}

public byte getYAJBSRV96() {
return YAJBSRV96;
}

public byte getYANSSEC5_DV() {
return YANSSEC5_DV;
}

public short getYASOC00_CC() {
return YASOC00_CC;
}

public short getYASOC10_CC() {
return YASOC10_CC;
}

public byte getYASOC90_CC() {
return YASOC90_CC;
}

public byte getYNLP14() {
return YNLP14;
}

public byte getYNOTBIKE1() {
return YNOTBIKE1;
}

public byte getYNOTBIKE2() {
return YNOTBIKE2;
}

public byte getYNOTBIKE3() {
return YNOTBIKE3;
}

public byte getYNOTBIKE96() {
return YNOTBIKE96;
}

public byte getYPAMAR() {
return YPAMAR;
}

public byte getYPAPAR() {
return YPAPAR;
}

public byte getYPESTA() {
return YPESTA;
}

public byte getYPESTB() {
return YPESTB;
}

public byte getYPESTC() {
return YPESTC;
}

public byte getYPESTE() {
return YPESTE;
}

public byte getYPESTF() {
return YPESTF;
}

public byte getYPESTI() {
return YPESTI;
}

public byte getYPESTJ() {
return YPESTJ;
}

public byte getYPESTK() {
return YPESTK;
}

public US_Wave24_indresp_Record(String line) {
s = line.split("\t");
initPIDP(s[0]);
initPID(s[1]);
initHIDP(s[2]);
initPNO(s[3]);
initCHILDPNO(s[4]);
initHHORIG(s[5]);
initMEMORIG(s[6]);
initPSU(s[7]);
initSTRATA(s[8]);
initSAMPST(s[9]);
initMONTH(s[10]);
initQUARTER(s[11]);
initIVFIO(s[12]);
initIOUTCOME(s[13]);
initSEX(s[14]);
initDVAGE(s[15]);
initBIRTHY(s[16]);
initNCHUNDER16(s[17]);
initNCH5TO15(s[18]);
initNCH10TO15(s[19]);
initNCH10(s[20]);
initNCHRESP(s[21]);
initNCH14RESP(s[22]);
initNCH415RESP(s[23]);
initNCH3RESP(s[24]);
initNCH5RESP(s[25]);
initNCH8RESP(s[26]);
initNADOPTCH(s[27]);
initNNATCH(s[28]);
initISTRTDATHH(s[29]);
initISTRTDATMM(s[30]);
initISTRTDATSS(s[31]);
initISTRTDATY(s[32]);
initISTRTDATM(s[33]);
initISTRTDATD(s[34]);
initLIENG(s[35]);
initLITRANS(s[36]);
initLIWHO(s[37]);
initLIHOW(s[38]);
initCHKRESP1(s[39]);
initCHKRESP2(s[40]);
initCHKRESP3(s[41]);
initCHKRESP4(s[42]);
initDCDOBY(s[43]);
initDCSEX(s[44]);
initPBIRTHY(s[45]);
initPDVAGE(s[46]);
initMVEVER(s[47]);
initMVMNTH(s[48]);
initMVYR(s[49]);
initLKMOVE(s[50]);
initXPMOVE(s[51]);
initXPMVWHN(s[52]);
initXPMVMNTH(s[53]);
initXPMVYR(s[54]);
initXPMVWHR(s[55]);
initJBSTAT(s[56]);
initMLSTATCHK(s[57]);
initMLSTAT(s[58]);
initDRIVE(s[59]);
initCARUSE(s[60]);
initMOBUSE(s[61]);
initSMARTMOB(s[62]);
initMOBCOMP(s[63]);
initNETPUSE(s[64]);
initUKBORN(s[65]);
initPLBORNC(s[66]);
initYR2UK4(s[67]);
initCITZN1(s[68]);
initCITZN2(s[69]);
initCITZN3(s[70]);
initQFHIGH(s[71]);
initQUALOC(s[72]);
initQFVOC1(s[73]);
initQFVOC2(s[74]);
initQFVOC3(s[75]);
initQFVOC4(s[76]);
initQFVOC5(s[77]);
initQFVOC6(s[78]);
initQFVOC7(s[79]);
initQFVOC8(s[80]);
initQFVOC9(s[81]);
initQFVOC10(s[82]);
initQFVOC11(s[83]);
initQFVOC12(s[84]);
initQFVOC13(s[85]);
initQFVOC14(s[86]);
initQFVOC15(s[87]);
initQFVOC96(s[88]);
initSCHOOL(s[89]);
initSCEND(s[90]);
initSCHLLOC(s[91]);
initSCHLLOCENG(s[92]);
initSCHOK(s[93]);
initFENOW(s[94]);
initFEEND(s[95]);
initJ1NONE(s[96]);
initJ1SEMP(s[97]);
initJ1BOSS(s[98]);
initJ1MNGR(s[99]);
initEDTYPE(s[100]);
initEDASP(s[101]);
initLVSCHDO(s[102]);
initAHVWELL(s[103]);
initHEDLIK(s[104]);
initHEDNT(s[105]);
initYPAMAR(s[106]);
initYPAPAR(s[107]);
initLVHM(s[108]);
initPAJU(s[109]);
initMAJU(s[110]);
initPACOB(s[111]);
initPAYRUK(s[112]);
initMACOB(s[113]);
initMAYRUK(s[114]);
initNATID1(s[115]);
initNATID2(s[116]);
initNATID3(s[117]);
initNATID4(s[118]);
initNATID5(s[119]);
initNATID6(s[120]);
initNATID97(s[121]);
initRACEL(s[122]);
initRACELO_CODE(s[123]);
initRACELT(s[124]);
initRACELWT(s[125]);
initRACELMT(s[126]);
initRACELAT(s[127]);
initRACELBT(s[128]);
initRACELOT_CODE(s[129]);
initOPRLG(s[130]);
initOPRLG0NI(s[131]);
initNIREL(s[132]);
initNIACT(s[133]);
initOPRLG0(s[134]);
initOPRLG1(s[135]);
initLLKNBRD(s[136]);
initLOCSERAP(s[137]);
initLOCSERAS(s[138]);
initLOCSERB(s[139]);
initLOCSERD(s[140]);
initLOCSERE(s[141]);
initSERVACC(s[142]);
initSERVACCY1(s[143]);
initSERVACCY2(s[144]);
initSERVACCY3(s[145]);
initSERVACCY4(s[146]);
initSERVACCY5(s[147]);
initSERVACCY6(s[148]);
initSERVACCY7(s[149]);
initSERVACCY8(s[150]);
initSERVACCY9(s[151]);
initSERVACCY10(s[152]);
initSERVACCY11(s[153]);
initSERVACCY12(s[154]);
initSERVACCY13(s[155]);
initSERVACCY14(s[156]);
initSERVACCY15(s[157]);
initSERVACCY97(s[158]);
initLOCSERC(s[159]);
initSATTRANSY1(s[160]);
initSATTRANSY2(s[161]);
initSATTRANSY3(s[162]);
initSATTRANSY4(s[163]);
initSATTRANSY5(s[164]);
initSATTRANSY6(s[165]);
initSATTRANSY7(s[166]);
initSATTRANSY8(s[167]);
initSATTRANSY9(s[168]);
initSATTRANSY10(s[169]);
initSATTRANSY97(s[170]);
initNBRCOH1(s[171]);
initNBRCOH2(s[172]);
initNBRCOH3(s[173]);
initNBRCOH4(s[174]);
initCRWORA(s[175]);
initCRWORB(s[176]);
initCRDARK(s[177]);
initSERVUSE1(s[178]);
initSERVUSE2(s[179]);
initSERVUSE3(s[180]);
initSERVUSE4(s[181]);
initSERVUSE5(s[182]);
initSERVUSE6(s[183]);
initSERVUSE7(s[184]);
initSERVUSE8(s[185]);
initSERVUSE9(s[186]);
initSERVUSE10(s[187]);
initSERVUSE96(s[188]);
initOPSERV1(s[189]);
initSRVYNOT1(s[190]);
initOPSERV2(s[191]);
initSRVYNOT2(s[192]);
initOPSERV3(s[193]);
initSRVYNOT3(s[194]);
initOPSERV4(s[195]);
initSRVYNOT4(s[196]);
initOPSERV5(s[197]);
initSRVYNOT5(s[198]);
initOPSERV6(s[199]);
initSRVYNOT6(s[200]);
initOPSERV7(s[201]);
initSRVYNOT7(s[202]);
initOPSERV8(s[203]);
initSRVYNOT8(s[204]);
initOPSERV9(s[205]);
initSRVYNOT9(s[206]);
initOPSERV10(s[207]);
initSRVYNOT10(s[208]);
initSIMAGE(s[209]);
initSIMRACE(s[210]);
initSIMEDUC(s[211]);
initSIMJOB(s[212]);
initSIMINC(s[213]);
initSIMAREA(s[214]);
initSIMFAM(s[215]);
initCLOSENUM(s[216]);
initSOCWEB(s[217]);
initNETCHT(s[218]);
initVISFRNDS(s[219]);
initVISFRNDSY1(s[220]);
initVISFRNDSY2(s[221]);
initVISFRNDSY3(s[222]);
initVISFRNDSY4(s[223]);
initVISFRNDSY5(s[224]);
initVISFRNDSY6(s[225]);
initVISFRNDSY7(s[226]);
initVISFRNDSY8(s[227]);
initVISFRNDSY9(s[228]);
initVISFRNDSY10(s[229]);
initVISFRNDSY11(s[230]);
initVISFRNDSY12(s[231]);
initVISFRNDSY13(s[232]);
initVISFRNDSY14(s[233]);
initVISFRNDSY97(s[234]);
initNETSX_1(s[235]);
initNETWR_1(s[236]);
initNETRL_1(s[237]);
initNETAG_1(s[238]);
initNETKN_1(s[239]);
initNETPH_1(s[240]);
initNETLV_1(s[241]);
initNETJB_1(s[242]);
initNETET_1(s[243]);
initNETETT_1(s[244]);
initNETETWT_1(s[245]);
initNETETMT_1(s[246]);
initNETETAT_1(s[247]);
initNETETBT_1(s[248]);
initNETMET_1(s[249]);
initNETWEB_1(s[250]);
initNETTALK1_1(s[251]);
initNETTALK2_1(s[252]);
initNETTALK3_1(s[253]);
initNETTALK4_1(s[254]);
initNETTALK5_1(s[255]);
initNETTALK6_1(s[256]);
initNETTALK7_1(s[257]);
initNETTALK8_1(s[258]);
initNETTALK9_1(s[259]);
initNETTALK10_1(s[260]);
initNETTALK11_1(s[261]);
initNETTALK12_1(s[262]);
initNETTALK13_1(s[263]);
initNETTALK97_1(s[264]);
initNETTALK96_1(s[265]);
initNETDO1_1(s[266]);
initNETDO2_1(s[267]);
initNETDO3_1(s[268]);
initNETDO4_1(s[269]);
initNETDO5_1(s[270]);
initNETDO6_1(s[271]);
initNETDO7_1(s[272]);
initNETDO8_1(s[273]);
initNETDO9_1(s[274]);
initNETDO10_1(s[275]);
initNETDO97_1(s[276]);
initNETDO96_1(s[277]);
initNETSX_2(s[278]);
initNETWR_2(s[279]);
initNETRL_2(s[280]);
initNETAG_2(s[281]);
initNETKN_2(s[282]);
initNETPH_2(s[283]);
initNETLV_2(s[284]);
initNETJB_2(s[285]);
initNETET_2(s[286]);
initNETETT_2(s[287]);
initNETETWT_2(s[288]);
initNETETMT_2(s[289]);
initNETETAT_2(s[290]);
initNETETBT_2(s[291]);
initNETMET_2(s[292]);
initNETWEB_2(s[293]);
initNETTALK1_2(s[294]);
initNETTALK2_2(s[295]);
initNETTALK3_2(s[296]);
initNETTALK4_2(s[297]);
initNETTALK5_2(s[298]);
initNETTALK6_2(s[299]);
initNETTALK7_2(s[300]);
initNETTALK8_2(s[301]);
initNETTALK9_2(s[302]);
initNETTALK10_2(s[303]);
initNETTALK11_2(s[304]);
initNETTALK12_2(s[305]);
initNETTALK13_2(s[306]);
initNETTALK97_2(s[307]);
initNETTALK96_2(s[308]);
initNETDO1_2(s[309]);
initNETDO2_2(s[310]);
initNETDO3_2(s[311]);
initNETDO4_2(s[312]);
initNETDO5_2(s[313]);
initNETDO6_2(s[314]);
initNETDO7_2(s[315]);
initNETDO8_2(s[316]);
initNETDO9_2(s[317]);
initNETDO10_2(s[318]);
initNETDO97_2(s[319]);
initNETDO96_2(s[320]);
initNETSX_3(s[321]);
initNETWR_3(s[322]);
initNETRL_3(s[323]);
initNETAG_3(s[324]);
initNETKN_3(s[325]);
initNETPH_3(s[326]);
initNETLV_3(s[327]);
initNETJB_3(s[328]);
initNETET_3(s[329]);
initNETETT_3(s[330]);
initNETETWT_3(s[331]);
initNETETMT_3(s[332]);
initNETETAT_3(s[333]);
initNETETBT_3(s[334]);
initNETMET_3(s[335]);
initNETWEB_3(s[336]);
initNETTALK1_3(s[337]);
initNETTALK2_3(s[338]);
initNETTALK3_3(s[339]);
initNETTALK4_3(s[340]);
initNETTALK5_3(s[341]);
initNETTALK6_3(s[342]);
initNETTALK7_3(s[343]);
initNETTALK8_3(s[344]);
initNETTALK9_3(s[345]);
initNETTALK10_3(s[346]);
initNETTALK11_3(s[347]);
initNETTALK12_3(s[348]);
initNETTALK13_3(s[349]);
initNETTALK97_3(s[350]);
initNETTALK96_3(s[351]);
initNETDO1_3(s[352]);
initNETDO2_3(s[353]);
initNETDO3_3(s[354]);
initNETDO4_3(s[355]);
initNETDO5_3(s[356]);
initNETDO6_3(s[357]);
initNETDO7_3(s[358]);
initNETDO8_3(s[359]);
initNETDO9_3(s[360]);
initNETDO10_3(s[361]);
initNETDO97_3(s[362]);
initNETDO96_3(s[363]);
initORG(s[364]);
initORGM1(s[365]);
initORGM2(s[366]);
initORGM3(s[367]);
initORGM4(s[368]);
initORGM5(s[369]);
initORGM6(s[370]);
initORGM7(s[371]);
initORGM8(s[372]);
initORGM9(s[373]);
initORGM10(s[374]);
initORGM11(s[375]);
initORGM12(s[376]);
initORGM13(s[377]);
initORGM14(s[378]);
initORGM15(s[379]);
initORGM16(s[380]);
initORGM96(s[381]);
initORGA1(s[382]);
initORGA2(s[383]);
initORGA3(s[384]);
initORGA4(s[385]);
initORGA5(s[386]);
initORGA6(s[387]);
initORGA7(s[388]);
initORGA8(s[389]);
initORGA9(s[390]);
initORGA10(s[391]);
initORGA11(s[392]);
initORGA12(s[393]);
initORGA13(s[394]);
initORGA14(s[395]);
initORGA15(s[396]);
initORGA16(s[397]);
initORGA96(s[398]);
initORGMT1(s[399]);
initORGMT2(s[400]);
initORGMT3(s[401]);
initORGMT4(s[402]);
initORGMT5(s[403]);
initORGMT6(s[404]);
initORGMT7(s[405]);
initORGMT8(s[406]);
initORGMT9(s[407]);
initORGMT10(s[408]);
initORGMT11(s[409]);
initORGMT12(s[410]);
initORGMT13(s[411]);
initORGMT14(s[412]);
initORGMT15(s[413]);
initORGMT16(s[414]);
initORGMT96(s[415]);
initORGAT1(s[416]);
initORGAT2(s[417]);
initORGAT3(s[418]);
initORGAT4(s[419]);
initORGAT5(s[420]);
initORGAT6(s[421]);
initORGAT7(s[422]);
initORGAT8(s[423]);
initORGAT9(s[424]);
initORGAT10(s[425]);
initORGAT11(s[426]);
initORGAT12(s[427]);
initORGAT13(s[428]);
initORGAT14(s[429]);
initORGAT15(s[430]);
initORGAT16(s[431]);
initORGAT96(s[432]);
initHEALTH(s[433]);
initHOSPC1(s[434]);
initHOSPDC1(s[435]);
initHOSPC2(s[436]);
initHOSPDC2(s[437]);
initHOSPC3(s[438]);
initHOSPDC3(s[439]);
initHOSPC4(s[440]);
initHOSPDC4(s[441]);
initHOSPC5(s[442]);
initHOSPDC5(s[443]);
initHOSPC6(s[444]);
initHOSPDC6(s[445]);
initHOSPC7(s[446]);
initHOSPDC7(s[447]);
initHOSPC8(s[448]);
initHOSPDC8(s[449]);
initDISDIF1(s[450]);
initDISDIF2(s[451]);
initDISDIF3(s[452]);
initDISDIF4(s[453]);
initDISDIF5(s[454]);
initDISDIF6(s[455]);
initDISDIF7(s[456]);
initDISDIF8(s[457]);
initDISDIF9(s[458]);
initDISDIF10(s[459]);
initDISDIF11(s[460]);
initDISDIF12(s[461]);
initDISDIF96(s[462]);
initHCOND1(s[463]);
initHCOND2(s[464]);
initHCOND3(s[465]);
initHCOND4(s[466]);
initHCOND5(s[467]);
initHCOND6(s[468]);
initHCOND7(s[469]);
initHCOND8(s[470]);
initHCOND9(s[471]);
initHCOND10(s[472]);
initHCOND11(s[473]);
initHCOND12(s[474]);
initHCOND13(s[475]);
initHCOND14(s[476]);
initHCOND15(s[477]);
initHCOND16(s[478]);
initHCOND17(s[479]);
initHCOND18(s[480]);
initHCOND96(s[481]);
initHCONDS01(s[482]);
initHCONDS02(s[483]);
initHCONDS03(s[484]);
initHCONDS04(s[485]);
initHCONDS05(s[486]);
initHCONDS08(s[487]);
initHCONDS09(s[488]);
initHCONDS10(s[489]);
initHCONDS11(s[490]);
initHCONDS12(s[491]);
initHCONDS13(s[492]);
initHCONDS14(s[493]);
initHCONDS15(s[494]);
initHCONDS16(s[495]);
initHCONDS17(s[496]);
initHCONDA01(s[497]);
initHCONDA02(s[498]);
initHCONDA03(s[499]);
initHCONDA04(s[500]);
initHCONDA05(s[501]);
initHCONDA06(s[502]);
initHCONDA07(s[503]);
initHCONDA08(s[504]);
initHCONDA09(s[505]);
initHCONDA10(s[506]);
initHCONDA11(s[507]);
initHCONDA12(s[508]);
initHCONDA13(s[509]);
initHCONDA14(s[510]);
initHCONDA15(s[511]);
initHCONDA16(s[512]);
initHCONDA17(s[513]);
initSMOKER(s[514]);
initNCIGS(s[515]);
initAIDHH(s[516]);
initAIDHUA1(s[517]);
initAIDHUA2(s[518]);
initAIDHUA3(s[519]);
initAIDHUA4(s[520]);
initAIDHUA5(s[521]);
initAIDHUA6(s[522]);
initAIDHUA7(s[523]);
initAIDHUA8(s[524]);
initAIDHUA9(s[525]);
initAIDHUA10(s[526]);
initAIDHUA11(s[527]);
initAIDHUA12(s[528]);
initAIDHUA13(s[529]);
initAIDHUA14(s[530]);
initAIDHUA15(s[531]);
initAIDHUA16(s[532]);
initAIDXHH(s[533]);
initNAIDXHH(s[534]);
initAIDHU1(s[535]);
initAIDHU2(s[536]);
initAIDHRS(s[537]);
initAIDEFT(s[538]);
initLCOHNPI(s[539]);
initCOH1BM(s[540]);
initCOH1BY(s[541]);
initCOH1MR(s[542]);
initCOH1EM(s[543]);
initCOH1EY(s[544]);
initNMAR(s[545]);
initLMAR1M(s[546]);
initLMAR1Y(s[547]);
initLADOPT(s[548]);
initLNADOPT(s[549]);
initLPRNT(s[550]);
initLNPRNT(s[551]);
initCH1BY4(s[552]);
initADCTS(s[553]);
initMOVY11(s[554]);
initMOVY12(s[555]);
initMOVY13(s[556]);
initMOVY14(s[557]);
initMOVY15(s[558]);
initMOVY16(s[559]);
initFAMILY(s[560]);
initEDUCATION(s[561]);
initMEMPLOY(s[562]);
initHOUSING(s[563]);
initAREA(s[564]);
initMOVEOTH_CODE(s[565]);
initMOVDIR(s[566]);
initPLNOWM(s[567]);
initPLNOWY4(s[568]);
initRELUP(s[569]);
initMSTATSAM(s[570]);
initLWWRONG(s[571]);
initMSTATSAMN(s[572]);
initMSTATCH1(s[573]);
initSTATCM1(s[574]);
initSTATCY41(s[575]);
initDIVCHK1(s[576]);
initDIVFIN1(s[577]);
initDVM1(s[578]);
initDVY41(s[579]);
initCMLSTAT1(s[580]);
initMSTATCH2(s[581]);
initSTATCM2(s[582]);
initSTATCY42(s[583]);
initDIVCHK2(s[584]);
initDIVFIN2(s[585]);
initDVM2(s[586]);
initDVY42(s[587]);
initCMLSTAT2(s[588]);
initMSTATCH3(s[589]);
initSTATCM3(s[590]);
initSTATCY43(s[591]);
initDIVCHK3(s[592]);
initDIVFIN3(s[593]);
initDVM3(s[594]);
initDVY43(s[595]);
initCMLSTAT3(s[596]);
initMSTATCH4(s[597]);
initSTATCM4(s[598]);
initSTATCY44(s[599]);
initDIVCHK4(s[600]);
initDIVFIN4(s[601]);
initDVM4(s[602]);
initDVY44(s[603]);
initCMLSTAT4(s[604]);
initCOHAB(s[605]);
initCOHABN(s[606]);
initLMCBM1(s[607]);
initLMCBY41(s[608]);
initCURRPART1(s[609]);
initLMSPM1(s[610]);
initLMSPY41(s[611]);
initLMCBM2(s[612]);
initLMCBY42(s[613]);
initCURRPART2(s[614]);
initLMSPM2(s[615]);
initLMSPY42(s[616]);
initLMCBM3(s[617]);
initLMCBY43(s[618]);
initCURRPART3(s[619]);
initLMSPM3(s[620]);
initLMSPY43(s[621]);
initLMCBM4(s[622]);
initLMCBY44(s[623]);
initCURRPART4(s[624]);
initLMSPM4(s[625]);
initLMSPY44(s[626]);
initLMCBM5(s[627]);
initLMCBY45(s[628]);
initCURRPART5(s[629]);
initLMSPM5(s[630]);
initLMSPY45(s[631]);
initFATHER(s[632]);
initNCHILD(s[633]);
initPREG(s[634]);
initPREGM1(s[635]);
initPREGY41(s[636]);
initPREGFERT1(s[637]);
initINVITRO1(s[638]);
initPREGOUT1(s[639]);
initPREGEND1(s[640]);
initENDMNTH1(s[641]);
initPREGSMOKE1(s[642]);
initSMKMNTH11(s[643]);
initSMKMNTH21(s[644]);
initSMKMNTH31(s[645]);
initPREGSMK11(s[646]);
initPREGSMK21(s[647]);
initPREGSMK31(s[648]);
initAEDROF1(s[649]);
initAEPUWK1(s[650]);
initAEPUDA1(s[651]);
initLCHMULTI1(s[652]);
initPREGM2(s[653]);
initPREGY42(s[654]);
initPREGFERT2(s[655]);
initINVITRO2(s[656]);
initPREGOUT2(s[657]);
initPREGEND2(s[658]);
initENDMNTH2(s[659]);
initPREGSMOKE2(s[660]);
initSMKMNTH12(s[661]);
initSMKMNTH22(s[662]);
initSMKMNTH32(s[663]);
initPREGSMK12(s[664]);
initPREGSMK22(s[665]);
initPREGSMK32(s[666]);
initAEDROF2(s[667]);
initAEPUWK2(s[668]);
initAEPUDA2(s[669]);
initLCHMULTI2(s[670]);
initPREGM3(s[671]);
initPREGY43(s[672]);
initPREGFERT3(s[673]);
initINVITRO3(s[674]);
initPREGOUT3(s[675]);
initPREGEND3(s[676]);
initENDMNTH3(s[677]);
initPREGSMOKE3(s[678]);
initSMKMNTH13(s[679]);
initSMKMNTH23(s[680]);
initSMKMNTH33(s[681]);
initPREGSMK13(s[682]);
initPREGSMK23(s[683]);
initPREGSMK33(s[684]);
initAEDROF3(s[685]);
initAEPUWK3(s[686]);
initAEPUDA3(s[687]);
initLCHMULTI3(s[688]);
initPREGM4(s[689]);
initPREGY44(s[690]);
initPREGFERT4(s[691]);
initINVITRO4(s[692]);
initPREGOUT4(s[693]);
initPREGEND4(s[694]);
initENDMNTH4(s[695]);
initPREGSMOKE4(s[696]);
initSMKMNTH14(s[697]);
initSMKMNTH24(s[698]);
initSMKMNTH34(s[699]);
initPREGSMK14(s[700]);
initPREGSMK24(s[701]);
initPREGSMK34(s[702]);
initAEDROF4(s[703]);
initAEPUWK4(s[704]);
initAEPUDA4(s[705]);
initLCHMULTI4(s[706]);
initPREGM5(s[707]);
initPREGY45(s[708]);
initPREGFERT5(s[709]);
initINVITRO5(s[710]);
initPREGOUT5(s[711]);
initPREGEND5(s[712]);
initENDMNTH5(s[713]);
initPREGSMOKE5(s[714]);
initSMKMNTH15(s[715]);
initSMKMNTH25(s[716]);
initSMKMNTH35(s[717]);
initPREGSMK15(s[718]);
initPREGSMK25(s[719]);
initPREGSMK35(s[720]);
initAEDROF5(s[721]);
initAEPUWK5(s[722]);
initAEPUDA5(s[723]);
initLCHMULTI5(s[724]);
initNNEWBORN(s[725]);
initHCONDNO1(s[726]);
initHCONDNS1(s[727]);
initHCONDNO2(s[728]);
initHCONDNS2(s[729]);
initHCONDNO3(s[730]);
initHCONDNS3(s[731]);
initHCONDNO4(s[732]);
initHCONDNS4(s[733]);
initHCONDNO5(s[734]);
initHCONDNS5(s[735]);
initHCONDNO6(s[736]);
initHCONDNS6(s[737]);
initHCONDNO7(s[738]);
initHCONDNS7(s[739]);
initHCONDNO8(s[740]);
initHCONDNS8(s[741]);
initHCONDN1(s[742]);
initHCONDN2(s[743]);
initHCONDN3(s[744]);
initHCONDN4(s[745]);
initHCONDN5(s[746]);
initHCONDN6(s[747]);
initHCONDN7(s[748]);
initHCONDN8(s[749]);
initHCONDN9(s[750]);
initHCONDN10(s[751]);
initHCONDN11(s[752]);
initHCONDN12(s[753]);
initHCONDN13(s[754]);
initHCONDN14(s[755]);
initHCONDN15(s[756]);
initHCONDN16(s[757]);
initHCONDN17(s[758]);
initHCONDN18(s[759]);
initHCONDN96(s[760]);
initHCONDO_CODE(s[761]);
initHCONDNO_CODE(s[762]);
initCONTFT(s[763]);
initFTENDM(s[764]);
initFTENDY4(s[765]);
initFTEDANY(s[766]);
initFTQUALS(s[767]);
initFTEDSTARTM1(s[768]);
initFTEDSTARTY41(s[769]);
initFTEDEND1(s[770]);
initFT2ENDM1(s[771]);
initFT2ENDY41(s[772]);
initFTEDMOR1(s[773]);
initFTEDSTARTM2(s[774]);
initFTEDSTARTY42(s[775]);
initFTEDEND2(s[776]);
initFT2ENDM2(s[777]);
initFT2ENDY42(s[778]);
initFTEDMOR2(s[779]);
initFTEDSTARTM3(s[780]);
initFTEDSTARTY43(s[781]);
initFTEDEND3(s[782]);
initFT2ENDM3(s[783]);
initFT2ENDY43(s[784]);
initFTEDMOR3(s[785]);
initQUALNEW1(s[786]);
initQUALNEW2(s[787]);
initQUALNEW3(s[788]);
initQUALNEW4(s[789]);
initQUALNEW5(s[790]);
initQUALNEW6(s[791]);
initQUALNEW7(s[792]);
initQUALNEW8(s[793]);
initQUALNEW9(s[794]);
initQUALNEW10(s[795]);
initQUALNEW11(s[796]);
initQUALNEW13(s[797]);
initQUALNEW15(s[798]);
initQUALNEW16(s[799]);
initQUALNEW17(s[800]);
initQUALNEW18(s[801]);
initQUALNEW19(s[802]);
initQUALNEW20(s[803]);
initQUALNEW21(s[804]);
initQUALNEW22(s[805]);
initQUALNEW23(s[806]);
initQUALNEW24(s[807]);
initQUALNEW25(s[808]);
initQUALNEW26(s[809]);
initQUALNEW27(s[810]);
initQUALNEW28(s[811]);
initQUALNEW29(s[812]);
initQUALNEW30(s[813]);
initQUALNEW31(s[814]);
initTRAINANY(s[815]);
initTRWHO1(s[816]);
initTRAINDAYS1(s[817]);
initTRAINHRS1(s[818]);
initTRAINEND1(s[819]);
initTRAINPURP11(s[820]);
initTRAINPURP21(s[821]);
initTRAINPURP31(s[822]);
initTRAINPURP41(s[823]);
initTRAINPURP51(s[824]);
initTRAINPURP61(s[825]);
initTRAINPURP71(s[826]);
initTRAINQUAL1(s[827]);
initTRWHO2(s[828]);
initTRAINDAYS2(s[829]);
initTRAINHRS2(s[830]);
initTRAINEND2(s[831]);
initTRAINPURP12(s[832]);
initTRAINPURP22(s[833]);
initTRAINPURP32(s[834]);
initTRAINPURP42(s[835]);
initTRAINPURP52(s[836]);
initTRAINPURP62(s[837]);
initTRAINPURP72(s[838]);
initTRAINQUAL2(s[839]);
initTRWHO3(s[840]);
initTRAINDAYS3(s[841]);
initTRAINHRS3(s[842]);
initTRAINEND3(s[843]);
initTRAINPURP13(s[844]);
initTRAINPURP23(s[845]);
initTRAINPURP33(s[846]);
initTRAINPURP43(s[847]);
initTRAINPURP53(s[848]);
initTRAINPURP63(s[849]);
initTRAINPURP73(s[850]);
initTRAINQUAL3(s[851]);
initTRAINN(s[852]);
initTRQUAL1(s[853]);
initTRQUAL2(s[854]);
initTRQUAL3(s[855]);
initTRQUAL4(s[856]);
initTRQUAL5(s[857]);
initTRQUAL6(s[858]);
initTRQUAL7(s[859]);
initTRQUAL8(s[860]);
initTRQUAL9(s[861]);
initTRQUAL10(s[862]);
initTRQUAL11(s[863]);
initTRQUAL13(s[864]);
initTRQUAL15(s[865]);
initTRQUAL16(s[866]);
initTRQUAL17(s[867]);
initTRQUAL18(s[868]);
initTRQUAL19(s[869]);
initTRQUAL20(s[870]);
initTRQUAL21(s[871]);
initTRQUAL22(s[872]);
initTRQUAL23(s[873]);
initTRQUAL24(s[874]);
initTRQUAL25(s[875]);
initTRQUAL26(s[876]);
initTRQUAL27(s[877]);
initTRQUAL28(s[878]);
initTRQUAL29(s[879]);
initTRQUAL30(s[880]);
initTRQUAL31(s[881]);
initNOTEMPCHK(s[882]);
initEMPCHK(s[883]);
initEMPSTENDD(s[884]);
initEMPSTENDM(s[885]);
initEMPSTENDY4(s[886]);
initSTENDREAS(s[887]);
initNXTST(s[888]);
initNEXTSTAT1(s[889]);
initNEXTELSE1(s[890]);
initCURRSTAT1(s[891]);
initNEXTJOB1(s[892]);
initCURRJOB1(s[893]);
initJOBHOURS1(s[894]);
initREASEND1(s[895]);
initJBATT1(s[896]);
initSTATENDD1(s[897]);
initSTATENDM1(s[898]);
initSTATENDY41(s[899]);
initNEXTSTAT2(s[900]);
initNEXTELSE2(s[901]);
initCURRSTAT2(s[902]);
initNEXTJOB2(s[903]);
initCURRJOB2(s[904]);
initJOBHOURS2(s[905]);
initREASEND2(s[906]);
initJBATT2(s[907]);
initSTATENDD2(s[908]);
initSTATENDM2(s[909]);
initSTATENDY42(s[910]);
initNEXTSTAT3(s[911]);
initNEXTELSE3(s[912]);
initCURRSTAT3(s[913]);
initNEXTJOB3(s[914]);
initCURRJOB3(s[915]);
initJOBHOURS3(s[916]);
initREASEND3(s[917]);
initJBATT3(s[918]);
initSTATENDD3(s[919]);
initSTATENDM3(s[920]);
initSTATENDY43(s[921]);
initNEXTSTAT4(s[922]);
initNEXTELSE4(s[923]);
initCURRSTAT4(s[924]);
initNEXTJOB4(s[925]);
initCURRJOB4(s[926]);
initJOBHOURS4(s[927]);
initREASEND4(s[928]);
initJBATT4(s[929]);
initSTATENDD4(s[930]);
initSTATENDM4(s[931]);
initSTATENDY44(s[932]);
initNEXTSTAT5(s[933]);
initNEXTELSE5(s[934]);
initCURRSTAT5(s[935]);
initNEXTJOB5(s[936]);
initCURRJOB5(s[937]);
initJOBHOURS5(s[938]);
initREASEND5(s[939]);
initJBATT5(s[940]);
initSTATENDD5(s[941]);
initSTATENDM5(s[942]);
initSTATENDY45(s[943]);
initNEXTSTAT6(s[944]);
initNEXTELSE6(s[945]);
initCURRSTAT6(s[946]);
initNEXTJOB6(s[947]);
initCURRJOB6(s[948]);
initJOBHOURS6(s[949]);
initREASEND6(s[950]);
initJBATT6(s[951]);
initSTATENDD6(s[952]);
initSTATENDM6(s[953]);
initSTATENDY46(s[954]);
initNEXTSTAT7(s[955]);
initNEXTELSE7(s[956]);
initCURRSTAT7(s[957]);
initNEXTJOB7(s[958]);
initCURRJOB7(s[959]);
initJOBHOURS7(s[960]);
initREASEND7(s[961]);
initJBATT7(s[962]);
initSTATENDD7(s[963]);
initSTATENDM7(s[964]);
initSTATENDY47(s[965]);
initNXTSTELSE(s[966]);
initCSTAT(s[967]);
initNXTSTENDD(s[968]);
initNXTSTENDM(s[969]);
initNXTSTENDY4(s[970]);
initJBSAMR(s[971]);
initWKPLSAM(s[972]);
initSAMEJOB(s[973]);
initMATLV(s[974]);
initMATLVSTD(s[975]);
initMATLVSTM(s[976]);
initMATLVSTY4(s[977]);
initMATLVENDD(s[978]);
initMATLVENDM(s[979]);
initMATLVENDY4(s[980]);
initJBENDD(s[981]);
initJBENDM(s[982]);
initJBENDY4(s[983]);
initJBENDREAS(s[984]);
initCJOB(s[985]);
initNXTJBHRS(s[986]);
initNXTJBES(s[987]);
initNXTJBENDD(s[988]);
initNXTJBENDM(s[989]);
initNXTJBENDY4(s[990]);
initNXTENDREAS(s[991]);
initCJBATT(s[992]);
initJBHAS(s[993]);
initJBOFF(s[994]);
initJBOFFY(s[995]);
initJBTERM1(s[996]);
initJBTERM2(s[997]);
initJBSIC07CHK(s[998]);
initJBSOC00CHK(s[999]);
initJBSEMPCHK(s[1000]);
initJBSEMP(s[1001]);
initJBBGD(s[1002]);
initJBBGM(s[1003]);
initJBBGY(s[1004]);
initJBMNGRCHK(s[1005]);
initJBMNGR(s[1006]);
initJBSIZECHK(s[1007]);
initJBSIZE(s[1008]);
initJBSECT(s[1009]);
initJBSECTPUB(s[1010]);
initJBHRS(s[1011]);
initJBOT(s[1012]);
initJBOTPD(s[1013]);
initJBPL(s[1014]);
initPAYGWC(s[1015]);
initPAYNWC(s[1016]);
initPAYUSL(s[1017]);
initPAYU(s[1018]);
initPAYUWC(s[1019]);
initPAYUG(s[1020]);
initPAYTYP(s[1021]);
initOVTPAY(s[1022]);
initEXTNSA(s[1023]);
initEXTRATE(s[1024]);
initEXTREST(s[1025]);
initBASNSA(s[1026]);
initBASRATE(s[1027]);
initBASREST(s[1028]);
initOVTNSA(s[1029]);
initOVTRATE(s[1030]);
initOVTREST(s[1031]);
initJBTTWT(s[1032]);
initWORKTRAV(s[1033]);
initJSBOSS(s[1034]);
initJSSIZE(s[1035]);
initJSHRS(s[1036]);
initJSTYPEB(s[1037]);
initJSACCS(s[1038]);
initJSPART(s[1039]);
initJSPRBM(s[1040]);
initJSPRBY4(s[1041]);
initJSPREM(s[1042]);
initJSPREY4(s[1043]);
initJSPRLS(s[1044]);
initJSPRTX(s[1045]);
initJSPRNI(s[1046]);
initJSWORKAC(s[1047]);
initJSOWNSUM(s[1048]);
initJSOWNAMT(s[1049]);
initJSOWNOTH(s[1050]);
initJSOWOTAM(s[1051]);
initJSPAYU(s[1052]);
initJSPAYW(s[1053]);
initJSPYTX(s[1054]);
initJSPYNI(s[1055]);
initJSPL(s[1056]);
initJSTTWT(s[1057]);
initJSTTWTB(s[1058]);
initJSWORKTRAV(s[1059]);
initWORKDIS(s[1060]);
initTWKDIFF1(s[1061]);
initTWKDIFF2(s[1062]);
initTWKDIFF3(s[1063]);
initTWKDIFF4(s[1064]);
initTWKDIFF5(s[1065]);
initTWKDIFF6(s[1066]);
initTWKDIFF7(s[1067]);
initTWKDIFF8(s[1068]);
initTWKDIFF97(s[1069]);
initTWKDIFFM(s[1070]);
initTWKCAR(s[1071]);
initJBSAT(s[1072]);
initJBPERFP(s[1073]);
initJBONUS(s[1074]);
initJBRISE(s[1075]);
initTUJBPL(s[1076]);
initTUIN1(s[1077]);
initJBPEN(s[1078]);
initJBPENM(s[1079]);
initJBPENY4(s[1080]);
initPENMCN(s[1081]);
initPENMPY(s[1082]);
initPENMTP(s[1083]);
initPENSPB(s[1084]);
initWKTIME(s[1085]);
initWKENDS(s[1086]);
initJBFLEX1(s[1087]);
initJBFLEX2(s[1088]);
initJBFLEX3(s[1089]);
initJBFLEX4(s[1090]);
initJBFLEX5(s[1091]);
initJBFLEX6(s[1092]);
initJBFLEX7(s[1093]);
initJBFLEX8(s[1094]);
initJBFLEX96(s[1095]);
initJBFXUSE1(s[1096]);
initJBFXUSE2(s[1097]);
initJBFXUSE3(s[1098]);
initJBFXUSE4(s[1099]);
initJBFXUSE5(s[1100]);
initJBFXUSE6(s[1101]);
initJBFXUSE7(s[1102]);
initJBFXUSE8(s[1103]);
initJBFXUSE96(s[1104]);
initJBFXINF(s[1105]);
initWKAUT1(s[1106]);
initWKAUT2(s[1107]);
initWKAUT3(s[1108]);
initWKAUT4(s[1109]);
initWKAUT5(s[1110]);
initDEPENTH1(s[1111]);
initDEPENTH2(s[1112]);
initDEPENTH3(s[1113]);
initDEPENTH4(s[1114]);
initDEPENTH5(s[1115]);
initDEPENTH6(s[1116]);
initJBLKCHA(s[1117]);
initJBXPCHA(s[1118]);
initJBLKCHB(s[1119]);
initJBXPCHB(s[1120]);
initJBLKCHC(s[1121]);
initJBXPCHC(s[1122]);
initJBLKCHD(s[1123]);
initJBXPCHD(s[1124]);
initJBLKCHE(s[1125]);
initJBXPCHE(s[1126]);
initJBSEC(s[1127]);
initJULK4WK(s[1128]);
initJULKJB(s[1129]);
initJUBGN(s[1130]);
initJULK4X1(s[1131]);
initJULK4X2(s[1132]);
initJULK4X3(s[1133]);
initJULK4X4(s[1134]);
initJULK4X5(s[1135]);
initJULK4X6(s[1136]);
initJULK4X96(s[1137]);
initJBHAD(s[1138]);
initJLENDM(s[1139]);
initJLENDY(s[1140]);
initJLSEMP(s[1141]);
initJLBOSS(s[1142]);
initJLMNGR(s[1143]);
initJLSIZE(s[1144]);
initEPROSH(s[1145]);
initMATLEAVE(s[1146]);
initMLFUTR(s[1147]);
initMLRNOT1(s[1148]);
initMLRNOT2(s[1149]);
initMLRNOT3(s[1150]);
initMLRNOT4(s[1151]);
initMLRNOT5(s[1152]);
initMLRNOT6(s[1153]);
initMLRNOT7(s[1154]);
initMLRNOT8(s[1155]);
initMLRNOT9(s[1156]);
initMLRNOT10(s[1157]);
initMLRNOT11(s[1158]);
initMLRNOT12(s[1159]);
initMLRNOT13(s[1160]);
initMLRNOT97(s[1161]);
initMLAGST(s[1162]);
initMLAGSTU(s[1163]);
initMLWKFPT(s[1164]);
initJ2HAS(s[1165]);
initJ2SEMP(s[1166]);
initJ2HRS(s[1167]);
initJ2PAY(s[1168]);
initVOLUN(s[1169]);
initVOLFREQ(s[1170]);
initVOLHRS(s[1171]);
initCHARGV(s[1172]);
initCHARFREQ(s[1173]);
initCHARAM(s[1174]);
initTRCARFQ(s[1175]);
initTRBUSFQ(s[1176]);
initTRTRNFQ(s[1177]);
initTRBIKEFQ(s[1178]);
initYNOTBIKE1(s[1179]);
initYNOTBIKE2(s[1180]);
initYNOTBIKE3(s[1181]);
initYNOTBIKE96(s[1182]);
initCARSRV1(s[1183]);
initCARSRV2(s[1184]);
initCARSRV3(s[1185]);
initPNCARS(s[1186]);
initHUCAR(s[1187]);
initCARBUY1(s[1188]);
initCARBUY2(s[1189]);
initCARBUY3(s[1190]);
initCARBUY4(s[1191]);
initCARBUY5(s[1192]);
initCARBUY6(s[1193]);
initCARBUY7(s[1194]);
initCARBUY8(s[1195]);
initCARBUY9(s[1196]);
initCARBUY10(s[1197]);
initCARBUY11(s[1198]);
initCARBUY12(s[1199]);
initCARBUY97(s[1200]);
initCCARE(s[1201]);
initCCWORK(s[1202]);
initBENBASE1(s[1203]);
initBENBASE2(s[1204]);
initBENBASE3(s[1205]);
initBENBASE4(s[1206]);
initBENBASE96(s[1207]);
initBENCTC(s[1208]);
initBENPEN1(s[1209]);
initBENPEN2(s[1210]);
initBENPEN3(s[1211]);
initBENPEN4(s[1212]);
initBENPEN5(s[1213]);
initBENPEN6(s[1214]);
initBENPEN7(s[1215]);
initBENPEN8(s[1216]);
initBENPEN96(s[1217]);
initNISERPS(s[1218]);
initBENDIS1(s[1219]);
initBENDIS2(s[1220]);
initBENDIS3(s[1221]);
initBENDIS4(s[1222]);
initBENDIS5(s[1223]);
initBENDIS12(s[1224]);
initBENDIS7(s[1225]);
initBENDIS8(s[1226]);
initBENDIS10(s[1227]);
initBENDIS97(s[1228]);
initBENDIS96(s[1229]);
initBENESA(s[1230]);
initOTHBEN1(s[1231]);
initOTHBEN2(s[1232]);
initOTHBEN3(s[1233]);
initOTHBEN4(s[1234]);
initOTHBEN5(s[1235]);
initOTHBEN6(s[1236]);
initOTHBEN7(s[1237]);
initOTHBEN8(s[1238]);
initOTHBEN9(s[1239]);
initOTHBEN97(s[1240]);
initOTHBEN96(s[1241]);
initBENSTA2(s[1242]);
initBENSTA3(s[1243]);
initBENSTA4(s[1244]);
initBENSTA5(s[1245]);
initBENSTA6(s[1246]);
initBENSTA7(s[1247]);
initBENSTA97(s[1248]);
initBENSTA96(s[1249]);
initNFH01(s[1250]);
initNFH02(s[1251]);
initNFH03(s[1252]);
initNFH04(s[1253]);
initNFH05(s[1254]);
initNFH06(s[1255]);
initNFH07(s[1256]);
initNFH08(s[1257]);
initNFH09(s[1258]);
initNFH10(s[1259]);
initNFH11(s[1260]);
initNFH12(s[1261]);
initNFH13(s[1262]);
initNFH14(s[1263]);
initNFH15(s[1264]);
initNFH16(s[1265]);
initNFH18(s[1266]);
initNFH19(s[1267]);
initNFH20(s[1268]);
initNFH21(s[1269]);
initNFH22(s[1270]);
initNFH23(s[1271]);
initNFH24(s[1272]);
initNFH25(s[1273]);
initNFH26(s[1274]);
initNFH27(s[1275]);
initNFH28(s[1276]);
initNFH29(s[1277]);
initNFH30(s[1278]);
initNFH31(s[1279]);
initNFH32(s[1280]);
initNFH33(s[1281]);
initNFH34(s[1282]);
initNFH35(s[1283]);
initNFH36(s[1284]);
initNFH37(s[1285]);
initNFH38(s[1286]);
initNFH39(s[1287]);
initNFH40(s[1288]);
initNFH41(s[1289]);
initFIYRDIA(s[1290]);
initFIYRDB1(s[1291]);
initFIYRDB2(s[1292]);
initFIYRDB3(s[1293]);
initFIYRDB5(s[1294]);
initFIYRDB4(s[1295]);
initFIYRDB6(s[1296]);
initFINNOW(s[1297]);
initFINFUT(s[1298]);
initSAVE(s[1299]);
initSAVED(s[1300]);
initSAVREG(s[1301]);
initSAVLT(s[1302]);
initPPEN(s[1303]);
initPPENT(s[1304]);
initPPYRS(s[1305]);
initPPREG(s[1306]);
initPPRAM(s[1307]);
initPPRAMPC(s[1308]);
initRETCHK(s[1309]);
initAGERET(s[1310]);
initRTPRO1(s[1311]);
initRTPRO2(s[1312]);
initRTPRO3(s[1313]);
initRTPRO4(s[1314]);
initRTPRO5(s[1315]);
initRTPRO6(s[1316]);
initRTCON1(s[1317]);
initRTCON2(s[1318]);
initRTCON3(s[1319]);
initRTCON4(s[1320]);
initPENMEX(s[1321]);
initPPPEX(s[1322]);
initPPPEXM(s[1323]);
initSPPEN(s[1324]);
initRTEXPJB(s[1325]);
initRTFND1(s[1326]);
initRTFND2(s[1327]);
initRTFND3(s[1328]);
initRTFND4(s[1329]);
initRTFND5(s[1330]);
initRTFND6(s[1331]);
initRTFND7(s[1332]);
initRTFND8(s[1333]);
initRTFND9(s[1334]);
initRTFND10(s[1335]);
initRTFND96(s[1336]);
initRETAMT(s[1337]);
initRETSUF(s[1338]);
initHUBUYS(s[1339]);
initHUFRYS(s[1340]);
initHUMOPS(s[1341]);
initHUIRON(s[1342]);
initHUPOTS(s[1343]);
initHUDIY(s[1344]);
initHUSITS(s[1345]);
initHUBOSS(s[1346]);
initHOWLNG(s[1347]);
initVOTE1(s[1348]);
initVOTE2(s[1349]);
initVOTE3(s[1350]);
initVOTE4(s[1351]);
initVOTE5(s[1352]);
initVOTE6(s[1353]);
initPERPOLINF(s[1354]);
initCOLBENS1(s[1355]);
initCOLBENS2(s[1356]);
initCOLBENS3(s[1357]);
initCOLBENS4(s[1358]);
initNICLBNS1(s[1359]);
initNICLBNS2(s[1360]);
initNICLBNS3(s[1361]);
initNICLBNS4(s[1362]);
initCIVICDUTY(s[1363]);
initPOLCOST(s[1364]);
initVOTENORM(s[1365]);
initPERBFTS(s[1366]);
initGRPBFTS(s[1367]);
initVOTEINTENT(s[1368]);
initDEMORIENT(s[1369]);
initPOLEFF1(s[1370]);
initPOLEFF2(s[1371]);
initPOLEFF3(s[1372]);
initPOLEFF4(s[1373]);
initNEWSOURCE1(s[1374]);
initNEWSOURCE2(s[1375]);
initNEWSOURCE3(s[1376]);
initNEWSOURCE4(s[1377]);
initNEWSOURCE5(s[1378]);
initNEWSOURCE6(s[1379]);
initNEWSOURCE7(s[1380]);
initNEWSOURCE8(s[1381]);
initNEWSOURCE9(s[1382]);
initNEWSOURCE10(s[1383]);
initNEWSOURCE11(s[1384]);
initNEWSOURCE12(s[1385]);
initNEWSOURCE96(s[1386]);
initNEWSMAIN(s[1387]);
initPAPERM2(s[1388]);
initTVM2(s[1389]);
initNETM2(s[1390]);
initTVHOURS(s[1391]);
initSCAC(s[1392]);
initSCRF1(s[1393]);
initSCRF2(s[1394]);
initSCRF3(s[1395]);
initSCRF4(s[1396]);
initSCRF5(s[1397]);
initSCRF6(s[1398]);
initSCRF97(s[1399]);
initSCUN1(s[1400]);
initSCUN2(s[1401]);
initSCUN3(s[1402]);
initSCUN97(s[1403]);
initSCSF1(s[1404]);
initSCSF2A(s[1405]);
initSCSF2B(s[1406]);
initSCSF3A(s[1407]);
initSCSF3B(s[1408]);
initSCSF4A(s[1409]);
initSCSF4B(s[1410]);
initSCSF5(s[1411]);
initSCSF6A(s[1412]);
initSCSF6B(s[1413]);
initSCSF6C(s[1414]);
initSCSF7(s[1415]);
initSCGHQA(s[1416]);
initSCGHQB(s[1417]);
initSCGHQC(s[1418]);
initSCGHQD(s[1419]);
initSCGHQE(s[1420]);
initSCGHQF(s[1421]);
initSCGHQG(s[1422]);
initSCGHQH(s[1423]);
initSCGHQI(s[1424]);
initSCGHQJ(s[1425]);
initSCGHQK(s[1426]);
initSCGHQL(s[1427]);
initSCOTVOT1(s[1428]);
initSCOTVOT2(s[1429]);
initSCOTVOT3(s[1430]);
initSCOTVOT4(s[1431]);
initSCOPNGBHA(s[1432]);
initSCOPNGBHB(s[1433]);
initSCOPNGBHC(s[1434]);
initSCOPNGBHD(s[1435]);
initSCOPNGBHE(s[1436]);
initSCOPNGBHF(s[1437]);
initSCOPNGBHG(s[1438]);
initSCOPNGBHH(s[1439]);
initSCLFSAT1(s[1440]);
initSCLFSAT2(s[1441]);
initSCLFSAT7(s[1442]);
initSCLFSATO(s[1443]);
initBRITID(s[1444]);
initWHORUPRO(s[1445]);
initWHORUEDU(s[1446]);
initWHORURAC(s[1447]);
initWHORUPOL(s[1448]);
initWHORUFAM(s[1449]);
initWHORUSEX(s[1450]);
initWHORUAGE(s[1451]);
initEATLIVU(s[1452]);
initFAMSUP(s[1453]);
initUPSET(s[1454]);
initLATE(s[1455]);
initYPESTA(s[1456]);
initYPESTI(s[1457]);
initYPESTB(s[1458]);
initYPESTJ(s[1459]);
initYPESTC(s[1460]);
initYPESTK(s[1461]);
initYPESTE(s[1462]);
initYPESTF(s[1463]);
initYAJBSRV1(s[1464]);
initYAJBSRV2(s[1465]);
initYAJBSRV3(s[1466]);
initYAJBSRV4(s[1467]);
initYAJBSRV5(s[1468]);
initYAJBSRV8(s[1469]);
initYAJBSRV7(s[1470]);
initYAJBSRV96(s[1471]);
initEVRALC(s[1472]);
initDKLM(s[1473]);
initFIVEALCDR(s[1474]);
initDRNK4W(s[1475]);
initDRGSOL(s[1476]);
initDRGMJ(s[1477]);
initDRGOTH(s[1478]);
initFRDRG(s[1479]);
initNCRR1(s[1480]);
initNCRRM(s[1481]);
initNCRRY4(s[1482]);
initNCRR3(s[1483]);
initNCRR4(s[1484]);
initNCRR5(s[1485]);
initNCRR6(s[1486]);
initNCRR8(s[1487]);
initNCRR9(s[1488]);
initNCRR11(s[1489]);
initNCRR12(s[1490]);
initMPLIKE(s[1491]);
initMPWEB(s[1492]);
initCASIINTNO(s[1493]);
initSCHOOLCNTRY1(s[1494]);
initSCHOOLCNTRY2(s[1495]);
initSCHOOLCNTRY3(s[1496]);
initSCHOOLCNTRY4(s[1497]);
initSCHOOLCNTRY5(s[1498]);
initEDLINK(s[1499]);
initEDUCSN(s[1500]);
initEDUCLINKB1(s[1501]);
initEDUCLINKB2(s[1502]);
initEDUCLINKB3(s[1503]);
initHLTHLINK(s[1504]);
initHEALTHSN(s[1505]);
initHLTHLINKB1(s[1506]);
initHLTHLINKB2(s[1507]);
initHLTHLINKB3(s[1508]);
initFLAGLINKB1(s[1509]);
initFLAGLINKB2(s[1510]);
initFLAGLINKB3(s[1511]);
initINTSIGNHEALTH(s[1512]);
initIENDDATY(s[1513]);
initIENDDATM(s[1514]);
initIENDDATD(s[1515]);
initIENDDATHH(s[1516]);
initIENDDATMM(s[1517]);
initIENDDATSS(s[1518]);
initEDUCRECD_TNS(s[1519]);
initEDUCRSGN_TNS(s[1520]);
initEDUCISGN_TNS(s[1521]);
initHLTHRECD_TNS(s[1522]);
initHLTHRSGN_TNS(s[1523]);
initHLTHISGN_TNS(s[1524]);
initMARSTAT(s[1525]);
initLIVESP(s[1526]);
initLIVEWITH(s[1527]);
initEMPLOY(s[1528]);
initLINGUA(s[1529]);
initNETM2O_CODE(s[1530]);
initYAFUTA(s[1531]);
initYAFUTB(s[1532]);
initPS1(s[1533]);
initPS2(s[1534]);
initPS3(s[1535]);
initPS4(s[1536]);
initPS5(s[1537]);
initPS6(s[1538]);
initPS7(s[1539]);
initPS8(s[1540]);
initPS9(s[1541]);
initPS10(s[1542]);
initPS11(s[1543]);
initPS12(s[1544]);
initPS13(s[1545]);
initPS14(s[1546]);
initPS15(s[1547]);
initPS16(s[1548]);
initPS17(s[1549]);
initPS18(s[1550]);
initPS19(s[1551]);
initPS20(s[1552]);
initPS21(s[1553]);
initPS22(s[1554]);
initPS23(s[1555]);
initPS24(s[1556]);
initPS25(s[1557]);
initPS26(s[1558]);
initPS27(s[1559]);
initPS28(s[1560]);
initPS29(s[1561]);
initPS30(s[1562]);
initPS31(s[1563]);
initPS32(s[1564]);
initPSNUMCH(s[1565]);
initDONEPROXY(s[1566]);
initIPROXY(s[1567]);
initPLIENG(s[1568]);
initPLITRANS(s[1569]);
initPREL(s[1570]);
initPREASON(s[1571]);
initPRIPN(s[1572]);
initSF1(s[1573]);
initPJULK4WK(s[1574]);
initPJBPTFT(s[1575]);
initPJSPTFT(s[1576]);
initPREARN(s[1577]);
initPREARNW(s[1578]);
initPREARNA(s[1579]);
initPBNFT1(s[1580]);
initPBNFT2(s[1581]);
initPBNFT13(s[1582]);
initPBNFT3(s[1583]);
initPBNFT4(s[1584]);
initPBNFT5(s[1585]);
initPBNFT6(s[1586]);
initPBNFT7(s[1587]);
initPBNFT8(s[1588]);
initPBNFT9(s[1589]);
initPBNFT10(s[1590]);
initPBNFT11(s[1591]);
initPBNFT12(s[1592]);
initPBNFT96(s[1593]);
initNETUSE(s[1594]);
initPRFITB(s[1595]);
initPRFITBW(s[1596]);
initPRFITBA(s[1597]);
initIVCOOP(s[1598]);
initSUSP(s[1599]);
initUNDQUS(s[1600]);
initIVPRSNT(s[1601]);
initIVINFNCE(s[1602]);
initIVAFFCT11(s[1603]);
initIVAFFCT12(s[1604]);
initIVAFFCT13(s[1605]);
initIVAFFCT14(s[1606]);
initIVAFFCT15(s[1607]);
initIVAFFCT17(s[1608]);
initIVAFFCT21(s[1609]);
initIVAFFCT22(s[1610]);
initIVAFFCT23(s[1611]);
initIVAFFCT27(s[1612]);
initIVAFFCT30(s[1613]);
initIVAFFCT97(s[1614]);
initIVLIENG(s[1615]);
initIVLITRANS(s[1616]);
initIVLIWHO(s[1617]);
initIVLIBAL(s[1618]);
initHGPART(s[1619]);
initHGBIOM(s[1620]);
initHGBIOF(s[1621]);
initHGADOPTM(s[1622]);
initHGADOPTF(s[1623]);
initRESPM16(s[1624]);
initRESPF16(s[1625]);
initDETINC1(s[1626]);
initDETINC2(s[1627]);
initDETINC3(s[1628]);
initDETINC4(s[1629]);
initDETINC5(s[1630]);
initDETINC6(s[1631]);
initHASEMAIL(s[1632]);
initSOCCONT(s[1633]);
initOTHCONT(s[1634]);
initRHLAND_CODE(s[1635]);
initRPHMOB_CODE(s[1636]);
initRPHWRK_CODE(s[1637]);
initREMAIL_CODE(s[1638]);
initCTCONS(s[1639]);
initCTCONSCONF1(s[1640]);
initCTCONSCONF2(s[1641]);
initCTCONSCONF3(s[1642]);
initCTCONSCONF4(s[1643]);
initCTCONSCONF5(s[1644]);
initCTCONSCONF6(s[1645]);
initCTCONSCONF7(s[1646]);
initCTCONSCONF8(s[1647]);
initCTCONSCONF94(s[1648]);
initCTREL(s[1649]);
initCTADD1_CODE(s[1650]);
initCTADD2_CODE(s[1651]);
initCTTOWN_CODE(s[1652]);
initCTCNTY_CODE(s[1653]);
initCTPCODE_CODE(s[1654]);
initCTTEL1_CODE(s[1655]);
initCTTEL2_CODE(s[1656]);
initCTEMAIL_CODE(s[1657]);
initORIGADD(s[1658]);
initINDMODE(s[1659]);
initDVAGE2UK(s[1660]);
initAGE2UKC(s[1661]);
initDV2UK16(s[1662]);
initLKMVCNTRY(s[1663]);
initXPMVCNTRY(s[1664]);
initINDEFLV(s[1665]);
initINTENDUKC(s[1666]);
initCITZNWHEN(s[1667]);
initCITZNYEAR(s[1668]);
initHIGHEDUK(s[1669]);
initQFHIGHOTH(s[1670]);
initCNTRYQUAL(s[1671]);
initQFVOCUK(s[1672]);
initQFVOCNONUK(s[1673]);
initPAYRUK1(s[1674]);
initPACURR(s[1675]);
initMAYRUK1(s[1676]);
initMACURR(s[1677]);
initPGPROB(s[1678]);
initPGMROB(s[1679]);
initMGPROB(s[1680]);
initMGMROB(s[1681]);
initPAEDQF(s[1682]);
initMAEDQF(s[1683]);
initPAJUK(s[1684]);
initPAJUKEVR(s[1685]);
initPAJCB(s[1686]);
initMAJUK(s[1687]);
initMAJUKEVR(s[1688]);
initMAJCB(s[1689]);
initLVAG16(s[1690]);
initAGELH(s[1691]);
initLVAG14(s[1692]);
initYNLP14(s[1693]);
initKIDLANG(s[1694]);
initENGLANG(s[1695]);
initENGUK(s[1696]);
initENGSPK(s[1697]);
initSPKDIF(s[1698]);
initENGTEL(s[1699]);
initTELDIF(s[1700]);
initENGREAD(s[1701]);
initREADDIF(s[1702]);
initENGFORM(s[1703]);
initFORMDIF(s[1704]);
initALLLANG1(s[1705]);
initALLLANG2(s[1706]);
initALLLANG3(s[1707]);
initALLLANG4(s[1708]);
initALLLANG5(s[1709]);
initALLLANG6(s[1710]);
initALLLANG7(s[1711]);
initALLLANG8(s[1712]);
initALLLANG9(s[1713]);
initALLLANG10(s[1714]);
initALLLANG11(s[1715]);
initALLLANG12(s[1716]);
initALLLANG13(s[1717]);
initALLLANG14(s[1718]);
initALLLANG15(s[1719]);
initALLLANG16(s[1720]);
initALLLANG17(s[1721]);
initALLLANG18(s[1722]);
initALLLANG19(s[1723]);
initALLLANG20(s[1724]);
initALLLANG97(s[1725]);
initUSUALLANG(s[1726]);
initMABROADC1(s[1727]);
initMABROAD(s[1728]);
initMABROADC2(s[1729]);
initMABROADC3(s[1730]);
initMABROADC4(s[1731]);
initMABROADC5(s[1732]);
initMNABROAD(s[1733]);
initMINDIRECT(s[1734]);
initMNOTHERC(s[1735]);
initMINDIRECTC1(s[1736]);
initMINDIRECTC2(s[1737]);
initMINDIRECTC3(s[1738]);
initMINDIRECTC4(s[1739]);
initMINDIRECTC5(s[1740]);
initMREASON1(s[1741]);
initMREASON2(s[1742]);
initMREASON3(s[1743]);
initMREASON4(s[1744]);
initMREASON5(s[1745]);
initMREASON6(s[1746]);
initMREASON7(s[1747]);
initMREASON97(s[1748]);
initMRETURNED(s[1749]);
initMLIVED(s[1750]);
initMNLIVED(s[1751]);
initMLIVEDC1(s[1752]);
initMLIVEDC2(s[1753]);
initMLIVEDC3(s[1754]);
initMLIVEDC4(s[1755]);
initMLIVEDC5(s[1756]);
initMNMOVES(s[1757]);
initMLIVEDIST(s[1758]);
initMLIVEDIST5(s[1759]);
initMLIVEDISTF(s[1760]);
initMINTENT(s[1761]);
initMINTWHEN(s[1762]);
initLCMARM(s[1763]);
initLCMARY4(s[1764]);
initMPNO(s[1765]);
initLCMCOH(s[1766]);
initLCMCBM(s[1767]);
initLCMCBY4(s[1768]);
initLCMSPM(s[1769]);
initLCMSPY4(s[1770]);
initLCOH(s[1771]);
initLNCOH(s[1772]);
initLCHMOR(s[1773]);
initLCHMORN(s[1774]);
initJ1UKJOB(s[1775]);
initJ1COJOB(s[1776]);
initJBBGDATY(s[1777]);
initJBBGDATM(s[1778]);
initJBBGDATD(s[1779]);
initPVTPAY(s[1780]);
initNCRR13(s[1781]);
initNCRR14(s[1782]);
initNCRR15(s[1783]);
initNCRR16(s[1784]);
initQFCTRY(s[1785]);
initHASEMAIL2(s[1786]);
initS2CTCONS(s[1787]);
initS2CTREL(s[1788]);
initHEDNTO_CODE(s[1789]);
initMREASONO_CODE(s[1790]);
initSCRX_CODE(s[1791]);
initSCUX_CODE(s[1792]);
initPPSEX(s[1793]);
initFNPID(s[1794]);
initMNPID(s[1795]);
initPN1PID(s[1796]);
initPN1PNO(s[1797]);
initPN1SEX(s[1798]);
initPN2PID(s[1799]);
initPN2PNO(s[1800]);
initPN2SEX(s[1801]);
initPNS1PID(s[1802]);
initPNS1PNO(s[1803]);
initPNS1SEX(s[1804]);
initPNS2PID(s[1805]);
initPNS2PNO(s[1806]);
initPNS2SEX(s[1807]);
initGRFPID(s[1808]);
initGRMPID(s[1809]);
initPAJLCBSOC90_CC(s[1810]);
initPAJLCBSOC00_CC(s[1811]);
initPAJLCBSOC10_CC(s[1812]);
initMAJLCBSOC90_CC(s[1813]);
initMAJLCBSOC00_CC(s[1814]);
initMAJLCBSOC10_CC(s[1815]);
initJ2PAY_IF(s[1816]);
initFIMNGRS_TC(s[1817]);
initFIMNGRS_DV(s[1818]);
initFIMNLABGRS_TC(s[1819]);
initFIMNLABGRS_DV(s[1820]);
initFIMNLABNET_TC(s[1821]);
initFIMNLABNET_DV(s[1822]);
initFIYRINVINC_TC(s[1823]);
initFIYRINVINC_DV(s[1824]);
initFIBENOTHR_TC(s[1825]);
initFIBENOTHR_DV(s[1826]);
initPAYGL(s[1827]);
initPAYNL(s[1828]);
initJSPRF(s[1829]);
initPAYGU_DV(s[1830]);
initPAYG_DV(s[1831]);
initPAYNU_DV(s[1832]);
initPAYN_DV(s[1833]);
initSEEARNGRS_DV(s[1834]);
initSEEARNNET_DV(s[1835]);
initJ2PAY_DV(s[1836]);
initJ2PAYNET_DV(s[1837]);
initFIVLOLW(s[1838]);
initFJBSEMP(s[1839]);
initFJBMNGR(s[1840]);
initFJBSIZE(s[1841]);
initFOPRLG(s[1842]);
initFOPRLG0(s[1843]);
initFOPRLG0NI(s[1844]);
initFUKBORN(s[1845]);
initFYR2UK4(s[1846]);
initFJBSTAT(s[1847]);
initFEMPLW(s[1848]);
initFBENTYPE01(s[1849]);
initFBENTYPE02(s[1850]);
initFBENTYPE03(s[1851]);
initFBENTYPE04(s[1852]);
initFBENTYPE05(s[1853]);
initFBENTYPE06(s[1854]);
initFBENTYPE07(s[1855]);
initFBENTYPE08(s[1856]);
initFBENTYPE09(s[1857]);
initFBENTYPE10(s[1858]);
initFBENTYPE11(s[1859]);
initFBENTYPE12(s[1860]);
initFBENTYPE13(s[1861]);
initFBENTYPE14(s[1862]);
initFBENTYPE15(s[1863]);
initFBENTYPE16(s[1864]);
initFBENTYPE17(s[1865]);
initFBENTYPE18(s[1866]);
initFBENTYPE19(s[1867]);
initFBENTYPE20(s[1868]);
initFBENTYPE21(s[1869]);
initFBENTYPE22(s[1870]);
initFBENTYPE23(s[1871]);
initFBENTYPE24(s[1872]);
initFBENTYPE25(s[1873]);
initFBENTYPE26(s[1874]);
initFBENTYPE27(s[1875]);
initFBENTYPE28(s[1876]);
initFBENTYPE29(s[1877]);
initFBENTYPE30(s[1878]);
initFBENTYPE31(s[1879]);
initFBENTYPE32(s[1880]);
initFBENTYPE33(s[1881]);
initFBENTYPE34(s[1882]);
initFBENTYPE35(s[1883]);
initFBENTYPE36(s[1884]);
initFBENTYPE37(s[1885]);
initFBENTYPE38(s[1886]);
initFBENTYPE39(s[1887]);
initFBENTYPE40(s[1888]);
initFBENTYPE41(s[1889]);
initFIVINTLANG(s[1890]);
initSEX_DV(s[1891]);
initAGE_DV(s[1892]);
initINTDATD_DV(s[1893]);
initINTDATM_DV(s[1894]);
initINTDATY_DV(s[1895]);
initDOBY_DV(s[1896]);
initPENSIONER_DV(s[1897]);
initNPN_DV(s[1898]);
initNPNS_DV(s[1899]);
initNGRP_DV(s[1900]);
initNNSIB_DV(s[1901]);
initNNSSIB_DV(s[1902]);
initNPENSIONER_DV(s[1903]);
initJBSOCGR_DV(s[1904]);
initNBRSNCI_DV(s[1905]);
initNBRCOH_DV(s[1906]);
initNBRCOHDK_DV(s[1907]);
initETHN_DV(s[1908]);
initFIMNMISC_DV(s[1909]);
initFIMNPRBEN_DV(s[1910]);
initFIMNINVNET_DV(s[1911]);
initFIMNPEN_DV(s[1912]);
initFIMNSBEN_DV(s[1913]);
initFIMNNET_DV(s[1914]);
initCOUNTRY(s[1915]);
initGOR_DV(s[1916]);
initURBAN_DV(s[1917]);
initHHRESP_DV(s[1918]);
initXTRA5MIN_DV(s[1919]);
initXTRA5MINOSM_DV(s[1920]);
initAGEGR5_DV(s[1921]);
initAGEGR10_DV(s[1922]);
initAGEGR13_DV(s[1923]);
initLIVESP_DV(s[1924]);
initCOHAB_DV(s[1925]);
initSINGLE_DV(s[1926]);
initMASTAT_DV(s[1927]);
initHHTYPE_DV(s[1928]);
initBUNO_DV(s[1929]);
initDEPCHL_DV(s[1930]);
initNCHILD_DV(s[1931]);
initNDEPCHL_DV(s[1932]);
initRESPM16_DV(s[1933]);
initRESPF16_DV(s[1934]);
initRACH16_DV(s[1935]);
initHRPID(s[1936]);
initHRPNO(s[1937]);
initPPID(s[1938]);
initPPNO(s[1939]);
initSPPID(s[1940]);
initSPPNO(s[1941]);
initFNPNO(s[1942]);
initFNSPID(s[1943]);
initFNSPNO(s[1944]);
initMNPNO(s[1945]);
initMNSPID(s[1946]);
initMNSPNO(s[1947]);
initGRFPNO(s[1948]);
initGRMPNO(s[1949]);
initQFHIGH_DV(s[1950]);
initNQFHIGH_DV(s[1951]);
initQFHIGHFL_DV(s[1952]);
initHIQUAL_DV(s[1953]);
initNHIQUAL_DV(s[1954]);
initISCED11_DV(s[1955]);
initNNMPSP_DV(s[1956]);
initNMPSP_DV(s[1957]);
initNUNMPSP_DV(s[1958]);
initJBFT_DV(s[1959]);
initJBSOC00_CC(s[1960]);
initJBSOC10_CC(s[1961]);
initJBSIC07_CC(s[1962]);
initJBIINDB_DV(s[1963]);
initJBES2000(s[1964]);
initJBSEG_DV(s[1965]);
initJBRGSC_DV(s[1966]);
initJBNSSEC_DV(s[1967]);
initJBNSSEC8_DV(s[1968]);
initJBNSSEC5_DV(s[1969]);
initJBNSSEC3_DV(s[1970]);
initJBISCO88_CC(s[1971]);
initJLSOC00_CC(s[1972]);
initJLSOC10_CC(s[1973]);
initJLSIC07_CC(s[1974]);
initJLIINDB_DV(s[1975]);
initJLES2000(s[1976]);
initJLSEG_DV(s[1977]);
initJLRGSC_DV(s[1978]);
initJLNSSEC_DV(s[1979]);
initJLNSSEC8_DV(s[1980]);
initJLNSSEC5_DV(s[1981]);
initJLNSSEC3_DV(s[1982]);
initJLISCO88_CC(s[1983]);
initJLCBSOC90_CC(s[1984]);
initJLCBSOC00_CC(s[1985]);
initJLCBSOC10_CC(s[1986]);
initJ1UKSOC90_CC(s[1987]);
initJ1UKSOC00_CC(s[1988]);
initJ1UKSOC10_CC(s[1989]);
initPASOC90_CC(s[1990]);
initPASOC00_CC(s[1991]);
initPASOC10_CC(s[1992]);
initPANSSEC5_DV(s[1993]);
initPAJ1UKSOC90_CC(s[1994]);
initPAJ1UKSOC00_CC(s[1995]);
initPAJ1UKSOC10_CC(s[1996]);
initMASOC90_CC(s[1997]);
initMASOC00_CC(s[1998]);
initMASOC10_CC(s[1999]);
initMANSSEC5_DV(s[2000]);
initMAJ1UKSOC90_CC(s[2001]);
initMAJ1UKSOC00_CC(s[2002]);
initMAJ1UKSOC10_CC(s[2003]);
initJ1SOC90_CC(s[2004]);
initJ1SOC00_CC(s[2005]);
initJ1SOC10_CC(s[2006]);
initJ1NSSEC5_DV(s[2007]);
initJ2SOC90_CC(s[2008]);
initJ2SOC00_CC(s[2009]);
initJ2SOC10_CC(s[2010]);
initJ2NSSEC5_DV(s[2011]);
initYASOC90_CC(s[2012]);
initYASOC00_CC(s[2013]);
initYASOC10_CC(s[2014]);
initYANSSEC5_DV(s[2015]);
initSCGHQ1_DV(s[2016]);
initSCGHQ2_DV(s[2017]);
initSF12PCS_DV(s[2018]);
initSF12MCS_DV(s[2019]);
initJWBS1_DV(s[2020]);
initJWBS2_DV(s[2021]);
initPSDQA_DV(s[2022]);
initPSDQB_DV(s[2023]);
initPSDQC_DV(s[2024]);
initSCFLAG_DV(s[2025]);
initPAYU_DV(s[2026]);
initPAYGU_IF(s[2027]);
initPAYNU_IF(s[2028]);
initSEEARNGRS_IF(s[2029]);
initFIYRINVINC_IF(s[2030]);
initFIBENOTHR_IF(s[2031]);
initFIMNLABGRS_IF(s[2032]);
initFIMNGRS_IF(s[2033]);
initINDIN91_LW(s[2034]);
initINDIN01_LW(s[2035]);
initINDPXUS_LW(s[2036]);
initINDINUS_LW(s[2037]);
initINDSCUS_LW(s[2038]);
initIND5MUS_LW(s[2039]);
initINDPXUB_LW(s[2040]);
initINDINUB_LW(s[2041]);
initINDSCUB_LW(s[2042]);
initINDNS91_LW(s[2043]);
initINDBD91_LW(s[2044]);
initINDNSUB_LW(s[2045]);
initINDBDUB_LW(s[2046]);
initINDPXUB_XW(s[2047]);
initINDINUB_XW(s[2048]);
initINDSCUB_XW(s[2049]);
initINDPXUI_XW(s[2050]);
initINDINUI_XW(s[2051]);
initINDSCUI_XW(s[2052]);
initIND5MUS_XW(s[2053]);
initRACEL_DV(s[2054]);
}
}
