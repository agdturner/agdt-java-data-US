/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.us.data.hhresp;
public class US_Wave23_hhresp_Record extends US_hhresp_Record {
protected byte ADDRCHCK;
protected int CARVAL;
protected short CDUSE10;
protected short CDUSE11;
protected short CDUSE12;
protected byte CDUSE13;
protected short CDUSE3;
protected short CDUSE4;
protected byte CDUSE5;
protected byte CDUSE7;
protected byte CORDET1;
protected byte CORDET10;
protected byte CORDET11;
protected byte CORDET12;
protected byte CORDET13;
protected byte CORDET14;
protected byte CORDET15;
protected byte CORDET16;
protected byte CORDET2;
protected byte CORDET3;
protected byte CORDET4;
protected byte CORDET5;
protected byte CORDET6;
protected byte CORDET7;
protected byte CORDET8;
protected byte CORDET9;
protected byte CORDET96;
protected byte CORESWHO1;
protected byte CORESWHO10;
protected byte CORESWHO11;
protected byte CORESWHO12;
protected byte CORESWHO13;
protected byte CORESWHO14;
protected byte CORESWHO15;
protected byte CORESWHO16;
protected byte CORESWHO2;
protected byte CORESWHO3;
protected byte CORESWHO4;
protected byte CORESWHO5;
protected byte CORESWHO6;
protected byte CORESWHO7;
protected byte CORESWHO8;
protected byte CORESWHO9;
protected byte CORESWHO96;
protected byte COUNTRY;
protected byte DUELPAY;
protected byte ELECPAY;
protected byte FF_HSBEDS;
protected byte FF_HSOWND;
protected byte FF_HSROOMS;
protected byte FF_TEL;
protected double FIHHMNGRS1_DV;
protected double FIHHMNGRS_IF;
protected byte FIHHMNGRS_TC;
protected double FIHHMNINV_DV;
protected double FIHHMNLABGRS_DV;
protected byte FIHHMNLABGRS_TC;
protected double FIHHMNLABNET_DV;
protected double FIHHMNMISC_DV;
protected double FIHHMNNET1_DV;
protected double FIHHMNPEN_DV;
protected double FIHHMNPRBEN_DV;
protected double FIHHMNSBEN_DV;
protected byte FIHHNEGSEI_IF;
protected byte FUELDUEL;
protected byte FUELHAVE1;
protected byte FUELHAVE2;
protected byte FUELHAVE3;
protected byte FUELHAVE4;
protected byte FUELHAVE96;
protected byte GASPAY;
protected double HBADJUST_DV;
protected byte HGENDDATD;
protected byte HGENDDATHH;
protected byte HGENDDATM;
protected byte HGENDDATMM;
protected byte HGENDDATSS;
protected short HGENDDATY;
protected double HHDENUB_XW;
protected boolean HHGRIDCOMPLETE;
protected byte HHINTLANG;
protected byte HHLANG;
protected byte HHOLDMODEDV;
protected byte HHORIG;
protected byte HHQEND;
protected byte HHRESP_DV;
protected byte HHTYPDV;
protected byte HIENDDATD;
protected byte HIENDDATHH;
protected byte HIENDDATM;
protected byte HIENDDATMM;
protected byte HIENDDATSS;
protected short HIENDDATY;
protected byte HISTRTDATD;
protected byte HISTRTDATHH;
protected byte HISTRTDATM;
protected byte HISTRTDATMM;
protected byte HISTRTDATSS;
protected short HISTRTDATY;
protected double HOUSCOST1_DV;
protected double HOUSCOST2_DV;
protected int HRPID;
protected byte HRPNO;
protected byte HSBEDS;
protected short HSCTAX;
protected byte HSOWND;
protected byte HSOWNDCHK;
protected short HSOWR111;
protected short HSOWR112;
protected byte HSOWR113;
protected byte HSOWR114;
protected byte HSOWR115;
protected byte HSOWR116;
protected byte HSROOMCHK;
protected byte HSROOMS;
protected int HSTOTMG;
protected double IEQMOECD_DV;
protected short INTDATEY;
protected int INTNUM;
protected short IVFHO;
protected short IVH0;
protected short IVH11;
protected short IVH12;
protected byte IVH13;
protected byte IVH14;
protected byte IVH15;
protected byte IVH16;
protected byte IVLHENG;
protected byte IVLHTRANS;
protected byte LHENG;
protected byte LHTRANS;
protected short MGEXTRA;
protected int MGNEW;
protected int MGOLD;
protected byte MGTYPE;
protected short MGXTY1;
protected short MGXTY2;
protected short MGXTY3;
protected short MGXTY4;
protected byte MGXTY5;
protected byte MGXTY6;
protected byte MGXTY97;
protected byte MGYNOT;
protected byte MONTH;
protected byte MORES;
protected byte NADOECD_DV;
protected byte NCARS;
protected byte NCHOECD_DV;
protected byte NCOUPLDV;
protected byte NPENSIONER;
protected byte NPENSIONER_DV;
protected byte NUDV;
protected byte NUMCIVIL;
protected byte NUMMPART;
protected byte NWAGDV;
protected byte ORIGADD;
protected short OUTCOME;
protected byte PCBROAD;
protected byte PCHAS;
protected short PCNET;
protected int PSU;
protected byte RELCONF11;
protected byte RELCONF110;
protected byte RELCONF111;
protected byte RELCONF112;
protected byte RELCONF113;
protected byte RELCONF114;
protected byte RELCONF115;
protected byte RELCONF12;
protected byte RELCONF13;
protected byte RELCONF14;
protected byte RELCONF15;
protected byte RELCONF16;
protected byte RELCONF17;
protected byte RELCONF18;
protected byte RELCONF19;
protected byte RELCONF216;
protected byte RELCONF217;
protected byte RELCONF218;
protected byte RELCONF219;
protected byte RELCONF220;
protected byte RELCONF221;
protected byte RELCONF222;
protected byte RELCONF223;
protected byte RELCONF224;
protected byte RELCONF225;
protected byte RELCONF226;
protected byte RELCONF227;
protected byte RELCONF228;
protected byte RELCONF229;
protected byte RELCONF230;
protected short RENTG;
protected double RENTGRS_DV;
protected byte RENTGRS_IF;
protected byte RENTHB;
protected byte RENTINC1;
protected byte RENTINC2;
protected byte RENTINC3;
protected byte RENTINC96;
protected short RENTP11;
protected short RENTP12;
protected byte RENTP13;
protected byte RENTP14;
protected byte RENTP15;
protected byte RENTP16;
protected byte RENTWC;
protected double RENT_DV;
protected short STRATA;
protected byte TENURDV;
protected byte URBAN_DV;
protected short XPALTOB_G3;
protected short XPDUELY;
protected short XPELECY;
protected short XPFDOUT_G3;
protected short XPFOOD1_G3;
protected short XPGASY;
protected byte XPHSDBA;
protected byte XPHSDCT;
protected double XPMGINT_DV;
protected double XPMG_DV;
protected byte XPMG_IF;
protected short XPOILY;
protected short XPSFLY;
protected final void initADDRCHCK(String s) {
if (!s.trim().isEmpty()) {
ADDRCHCK = Byte.parseByte(s);
} else {
ADDRCHCK = Byte.MIN_VALUE;
}
}

protected final void initCARVAL(String s) {
if (!s.trim().isEmpty()) {
CARVAL = Integer.parseInt(s);
} else {
CARVAL = Integer.MIN_VALUE;
}
}

protected final void initCDUSE10(String s) {
if (!s.trim().isEmpty()) {
CDUSE10 = Short.parseShort(s);
} else {
CDUSE10 = Short.MIN_VALUE;
}
}

protected final void initCDUSE11(String s) {
if (!s.trim().isEmpty()) {
CDUSE11 = Short.parseShort(s);
} else {
CDUSE11 = Short.MIN_VALUE;
}
}

protected final void initCDUSE12(String s) {
if (!s.trim().isEmpty()) {
CDUSE12 = Short.parseShort(s);
} else {
CDUSE12 = Short.MIN_VALUE;
}
}

protected final void initCDUSE13(String s) {
if (!s.trim().isEmpty()) {
CDUSE13 = Byte.parseByte(s);
} else {
CDUSE13 = Byte.MIN_VALUE;
}
}

protected final void initCDUSE3(String s) {
if (!s.trim().isEmpty()) {
CDUSE3 = Short.parseShort(s);
} else {
CDUSE3 = Short.MIN_VALUE;
}
}

protected final void initCDUSE4(String s) {
if (!s.trim().isEmpty()) {
CDUSE4 = Short.parseShort(s);
} else {
CDUSE4 = Short.MIN_VALUE;
}
}

protected final void initCDUSE5(String s) {
if (!s.trim().isEmpty()) {
CDUSE5 = Byte.parseByte(s);
} else {
CDUSE5 = Byte.MIN_VALUE;
}
}

protected final void initCDUSE7(String s) {
if (!s.trim().isEmpty()) {
CDUSE7 = Byte.parseByte(s);
} else {
CDUSE7 = Byte.MIN_VALUE;
}
}

protected final void initCORDET1(String s) {
if (!s.trim().isEmpty()) {
CORDET1 = Byte.parseByte(s);
} else {
CORDET1 = Byte.MIN_VALUE;
}
}

protected final void initCORDET10(String s) {
if (!s.trim().isEmpty()) {
CORDET10 = Byte.parseByte(s);
} else {
CORDET10 = Byte.MIN_VALUE;
}
}

protected final void initCORDET11(String s) {
if (!s.trim().isEmpty()) {
CORDET11 = Byte.parseByte(s);
} else {
CORDET11 = Byte.MIN_VALUE;
}
}

protected final void initCORDET12(String s) {
if (!s.trim().isEmpty()) {
CORDET12 = Byte.parseByte(s);
} else {
CORDET12 = Byte.MIN_VALUE;
}
}

protected final void initCORDET13(String s) {
if (!s.trim().isEmpty()) {
CORDET13 = Byte.parseByte(s);
} else {
CORDET13 = Byte.MIN_VALUE;
}
}

protected final void initCORDET14(String s) {
if (!s.trim().isEmpty()) {
CORDET14 = Byte.parseByte(s);
} else {
CORDET14 = Byte.MIN_VALUE;
}
}

protected final void initCORDET15(String s) {
if (!s.trim().isEmpty()) {
CORDET15 = Byte.parseByte(s);
} else {
CORDET15 = Byte.MIN_VALUE;
}
}

protected final void initCORDET16(String s) {
if (!s.trim().isEmpty()) {
CORDET16 = Byte.parseByte(s);
} else {
CORDET16 = Byte.MIN_VALUE;
}
}

protected final void initCORDET2(String s) {
if (!s.trim().isEmpty()) {
CORDET2 = Byte.parseByte(s);
} else {
CORDET2 = Byte.MIN_VALUE;
}
}

protected final void initCORDET3(String s) {
if (!s.trim().isEmpty()) {
CORDET3 = Byte.parseByte(s);
} else {
CORDET3 = Byte.MIN_VALUE;
}
}

protected final void initCORDET4(String s) {
if (!s.trim().isEmpty()) {
CORDET4 = Byte.parseByte(s);
} else {
CORDET4 = Byte.MIN_VALUE;
}
}

protected final void initCORDET5(String s) {
if (!s.trim().isEmpty()) {
CORDET5 = Byte.parseByte(s);
} else {
CORDET5 = Byte.MIN_VALUE;
}
}

protected final void initCORDET6(String s) {
if (!s.trim().isEmpty()) {
CORDET6 = Byte.parseByte(s);
} else {
CORDET6 = Byte.MIN_VALUE;
}
}

protected final void initCORDET7(String s) {
if (!s.trim().isEmpty()) {
CORDET7 = Byte.parseByte(s);
} else {
CORDET7 = Byte.MIN_VALUE;
}
}

protected final void initCORDET8(String s) {
if (!s.trim().isEmpty()) {
CORDET8 = Byte.parseByte(s);
} else {
CORDET8 = Byte.MIN_VALUE;
}
}

protected final void initCORDET9(String s) {
if (!s.trim().isEmpty()) {
CORDET9 = Byte.parseByte(s);
} else {
CORDET9 = Byte.MIN_VALUE;
}
}

protected final void initCORDET96(String s) {
if (!s.trim().isEmpty()) {
CORDET96 = Byte.parseByte(s);
} else {
CORDET96 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO1(String s) {
if (!s.trim().isEmpty()) {
CORESWHO1 = Byte.parseByte(s);
} else {
CORESWHO1 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO10(String s) {
if (!s.trim().isEmpty()) {
CORESWHO10 = Byte.parseByte(s);
} else {
CORESWHO10 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO11(String s) {
if (!s.trim().isEmpty()) {
CORESWHO11 = Byte.parseByte(s);
} else {
CORESWHO11 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO12(String s) {
if (!s.trim().isEmpty()) {
CORESWHO12 = Byte.parseByte(s);
} else {
CORESWHO12 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO13(String s) {
if (!s.trim().isEmpty()) {
CORESWHO13 = Byte.parseByte(s);
} else {
CORESWHO13 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO14(String s) {
if (!s.trim().isEmpty()) {
CORESWHO14 = Byte.parseByte(s);
} else {
CORESWHO14 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO15(String s) {
if (!s.trim().isEmpty()) {
CORESWHO15 = Byte.parseByte(s);
} else {
CORESWHO15 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO16(String s) {
if (!s.trim().isEmpty()) {
CORESWHO16 = Byte.parseByte(s);
} else {
CORESWHO16 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO2(String s) {
if (!s.trim().isEmpty()) {
CORESWHO2 = Byte.parseByte(s);
} else {
CORESWHO2 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO3(String s) {
if (!s.trim().isEmpty()) {
CORESWHO3 = Byte.parseByte(s);
} else {
CORESWHO3 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO4(String s) {
if (!s.trim().isEmpty()) {
CORESWHO4 = Byte.parseByte(s);
} else {
CORESWHO4 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO5(String s) {
if (!s.trim().isEmpty()) {
CORESWHO5 = Byte.parseByte(s);
} else {
CORESWHO5 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO6(String s) {
if (!s.trim().isEmpty()) {
CORESWHO6 = Byte.parseByte(s);
} else {
CORESWHO6 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO7(String s) {
if (!s.trim().isEmpty()) {
CORESWHO7 = Byte.parseByte(s);
} else {
CORESWHO7 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO8(String s) {
if (!s.trim().isEmpty()) {
CORESWHO8 = Byte.parseByte(s);
} else {
CORESWHO8 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO9(String s) {
if (!s.trim().isEmpty()) {
CORESWHO9 = Byte.parseByte(s);
} else {
CORESWHO9 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO96(String s) {
if (!s.trim().isEmpty()) {
CORESWHO96 = Byte.parseByte(s);
} else {
CORESWHO96 = Byte.MIN_VALUE;
}
}

protected final void initCOUNTRY(String s) {
if (!s.trim().isEmpty()) {
COUNTRY = Byte.parseByte(s);
} else {
COUNTRY = Byte.MIN_VALUE;
}
}

protected final void initDUELPAY(String s) {
if (!s.trim().isEmpty()) {
DUELPAY = Byte.parseByte(s);
} else {
DUELPAY = Byte.MIN_VALUE;
}
}

protected final void initELECPAY(String s) {
if (!s.trim().isEmpty()) {
ELECPAY = Byte.parseByte(s);
} else {
ELECPAY = Byte.MIN_VALUE;
}
}

protected final void initFF_HSBEDS(String s) {
if (!s.trim().isEmpty()) {
FF_HSBEDS = Byte.parseByte(s);
} else {
FF_HSBEDS = Byte.MIN_VALUE;
}
}

protected final void initFF_HSOWND(String s) {
if (!s.trim().isEmpty()) {
FF_HSOWND = Byte.parseByte(s);
} else {
FF_HSOWND = Byte.MIN_VALUE;
}
}

protected final void initFF_HSROOMS(String s) {
if (!s.trim().isEmpty()) {
FF_HSROOMS = Byte.parseByte(s);
} else {
FF_HSROOMS = Byte.MIN_VALUE;
}
}

protected final void initFF_TEL(String s) {
if (!s.trim().isEmpty()) {
FF_TEL = Byte.parseByte(s);
} else {
FF_TEL = Byte.MIN_VALUE;
}
}

protected final void initFIHHMNGRS1_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNGRS1_DV = Double.parseDouble(s);
} else {
FIHHMNGRS1_DV = Double.NaN;
}
}

protected final void initFIHHMNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIHHMNGRS_IF = Double.parseDouble(s);
} else {
FIHHMNGRS_IF = Double.NaN;
}
}

protected final void initFIHHMNGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIHHMNGRS_TC = Byte.parseByte(s);
} else {
FIHHMNGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIHHMNINV_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNINV_DV = Double.parseDouble(s);
} else {
FIHHMNINV_DV = Double.NaN;
}
}

protected final void initFIHHMNLABGRS_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNLABGRS_DV = Double.parseDouble(s);
} else {
FIHHMNLABGRS_DV = Double.NaN;
}
}

protected final void initFIHHMNLABGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIHHMNLABGRS_TC = Byte.parseByte(s);
} else {
FIHHMNLABGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIHHMNLABNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNLABNET_DV = Double.parseDouble(s);
} else {
FIHHMNLABNET_DV = Double.NaN;
}
}

protected final void initFIHHMNMISC_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNMISC_DV = Double.parseDouble(s);
} else {
FIHHMNMISC_DV = Double.NaN;
}
}

protected final void initFIHHMNNET1_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNNET1_DV = Double.parseDouble(s);
} else {
FIHHMNNET1_DV = Double.NaN;
}
}

protected final void initFIHHMNPEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNPEN_DV = Double.parseDouble(s);
} else {
FIHHMNPEN_DV = Double.NaN;
}
}

protected final void initFIHHMNPRBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNPRBEN_DV = Double.parseDouble(s);
} else {
FIHHMNPRBEN_DV = Double.NaN;
}
}

protected final void initFIHHMNSBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNSBEN_DV = Double.parseDouble(s);
} else {
FIHHMNSBEN_DV = Double.NaN;
}
}

protected final void initFIHHNEGSEI_IF(String s) {
if (!s.trim().isEmpty()) {
FIHHNEGSEI_IF = Byte.parseByte(s);
} else {
FIHHNEGSEI_IF = Byte.MIN_VALUE;
}
}

protected final void initFUELDUEL(String s) {
if (!s.trim().isEmpty()) {
FUELDUEL = Byte.parseByte(s);
} else {
FUELDUEL = Byte.MIN_VALUE;
}
}

protected final void initFUELHAVE1(String s) {
if (!s.trim().isEmpty()) {
FUELHAVE1 = Byte.parseByte(s);
} else {
FUELHAVE1 = Byte.MIN_VALUE;
}
}

protected final void initFUELHAVE2(String s) {
if (!s.trim().isEmpty()) {
FUELHAVE2 = Byte.parseByte(s);
} else {
FUELHAVE2 = Byte.MIN_VALUE;
}
}

protected final void initFUELHAVE3(String s) {
if (!s.trim().isEmpty()) {
FUELHAVE3 = Byte.parseByte(s);
} else {
FUELHAVE3 = Byte.MIN_VALUE;
}
}

protected final void initFUELHAVE4(String s) {
if (!s.trim().isEmpty()) {
FUELHAVE4 = Byte.parseByte(s);
} else {
FUELHAVE4 = Byte.MIN_VALUE;
}
}

protected final void initFUELHAVE96(String s) {
if (!s.trim().isEmpty()) {
FUELHAVE96 = Byte.parseByte(s);
} else {
FUELHAVE96 = Byte.MIN_VALUE;
}
}

protected final void initGASPAY(String s) {
if (!s.trim().isEmpty()) {
GASPAY = Byte.parseByte(s);
} else {
GASPAY = Byte.MIN_VALUE;
}
}

protected final void initHBADJUST_DV(String s) {
if (!s.trim().isEmpty()) {
HBADJUST_DV = Double.parseDouble(s);
} else {
HBADJUST_DV = Double.NaN;
}
}

protected final void initHGENDDATD(String s) {
if (!s.trim().isEmpty()) {
HGENDDATD = Byte.parseByte(s);
} else {
HGENDDATD = Byte.MIN_VALUE;
}
}

protected final void initHGENDDATHH(String s) {
if (!s.trim().isEmpty()) {
HGENDDATHH = Byte.parseByte(s);
} else {
HGENDDATHH = Byte.MIN_VALUE;
}
}

protected final void initHGENDDATM(String s) {
if (!s.trim().isEmpty()) {
HGENDDATM = Byte.parseByte(s);
} else {
HGENDDATM = Byte.MIN_VALUE;
}
}

protected final void initHGENDDATMM(String s) {
if (!s.trim().isEmpty()) {
HGENDDATMM = Byte.parseByte(s);
} else {
HGENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initHGENDDATSS(String s) {
if (!s.trim().isEmpty()) {
HGENDDATSS = Byte.parseByte(s);
} else {
HGENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initHGENDDATY(String s) {
if (!s.trim().isEmpty()) {
HGENDDATY = Short.parseShort(s);
} else {
HGENDDATY = Short.MIN_VALUE;
}
}

protected final void initHHDENUB_XW(String s) {
if (!s.trim().isEmpty()) {
HHDENUB_XW = Double.parseDouble(s);
} else {
HHDENUB_XW = Double.NaN;
}
}

protected final void initHHGRIDCOMPLETE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
HHGRIDCOMPLETE = false;
} else {
HHGRIDCOMPLETE = true;
}
}
}

protected final void initHHINTLANG(String s) {
if (!s.trim().isEmpty()) {
HHINTLANG = Byte.parseByte(s);
} else {
HHINTLANG = Byte.MIN_VALUE;
}
}

protected final void initHHLANG(String s) {
if (!s.trim().isEmpty()) {
HHLANG = Byte.parseByte(s);
} else {
HHLANG = Byte.MIN_VALUE;
}
}

protected final void initHHOLDMODEDV(String s) {
if (!s.trim().isEmpty()) {
HHOLDMODEDV = Byte.parseByte(s);
} else {
HHOLDMODEDV = Byte.MIN_VALUE;
}
}

protected final void initHHORIG(String s) {
if (!s.trim().isEmpty()) {
HHORIG = Byte.parseByte(s);
} else {
HHORIG = Byte.MIN_VALUE;
}
}

protected final void initHHQEND(String s) {
if (!s.trim().isEmpty()) {
HHQEND = Byte.parseByte(s);
} else {
HHQEND = Byte.MIN_VALUE;
}
}

protected final void initHHRESP_DV(String s) {
if (!s.trim().isEmpty()) {
HHRESP_DV = Byte.parseByte(s);
} else {
HHRESP_DV = Byte.MIN_VALUE;
}
}

protected final void initHHTYPDV(String s) {
if (!s.trim().isEmpty()) {
HHTYPDV = Byte.parseByte(s);
} else {
HHTYPDV = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATD(String s) {
if (!s.trim().isEmpty()) {
HIENDDATD = Byte.parseByte(s);
} else {
HIENDDATD = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATHH(String s) {
if (!s.trim().isEmpty()) {
HIENDDATHH = Byte.parseByte(s);
} else {
HIENDDATHH = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATM(String s) {
if (!s.trim().isEmpty()) {
HIENDDATM = Byte.parseByte(s);
} else {
HIENDDATM = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATMM(String s) {
if (!s.trim().isEmpty()) {
HIENDDATMM = Byte.parseByte(s);
} else {
HIENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATSS(String s) {
if (!s.trim().isEmpty()) {
HIENDDATSS = Byte.parseByte(s);
} else {
HIENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATY(String s) {
if (!s.trim().isEmpty()) {
HIENDDATY = Short.parseShort(s);
} else {
HIENDDATY = Short.MIN_VALUE;
}
}

protected final void initHISTRTDATD(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATD = Byte.parseByte(s);
} else {
HISTRTDATD = Byte.MIN_VALUE;
}
}

protected final void initHISTRTDATHH(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATHH = Byte.parseByte(s);
} else {
HISTRTDATHH = Byte.MIN_VALUE;
}
}

protected final void initHISTRTDATM(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATM = Byte.parseByte(s);
} else {
HISTRTDATM = Byte.MIN_VALUE;
}
}

protected final void initHISTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATMM = Byte.parseByte(s);
} else {
HISTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initHISTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATSS = Byte.parseByte(s);
} else {
HISTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initHISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATY = Short.parseShort(s);
} else {
HISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initHOUSCOST1_DV(String s) {
if (!s.trim().isEmpty()) {
HOUSCOST1_DV = Double.parseDouble(s);
} else {
HOUSCOST1_DV = Double.NaN;
}
}

protected final void initHOUSCOST2_DV(String s) {
if (!s.trim().isEmpty()) {
HOUSCOST2_DV = Double.parseDouble(s);
} else {
HOUSCOST2_DV = Double.NaN;
}
}

protected final void initHRPID(String s) {
if (!s.trim().isEmpty()) {
HRPID = Integer.parseInt(s);
} else {
HRPID = Integer.MIN_VALUE;
}
}

protected final void initHRPNO(String s) {
if (!s.trim().isEmpty()) {
HRPNO = Byte.parseByte(s);
} else {
HRPNO = Byte.MIN_VALUE;
}
}

protected final void initHSBEDS(String s) {
if (!s.trim().isEmpty()) {
HSBEDS = Byte.parseByte(s);
} else {
HSBEDS = Byte.MIN_VALUE;
}
}

protected final void initHSCTAX(String s) {
if (!s.trim().isEmpty()) {
HSCTAX = Short.parseShort(s);
} else {
HSCTAX = Short.MIN_VALUE;
}
}

protected final void initHSOWND(String s) {
if (!s.trim().isEmpty()) {
HSOWND = Byte.parseByte(s);
} else {
HSOWND = Byte.MIN_VALUE;
}
}

protected final void initHSOWNDCHK(String s) {
if (!s.trim().isEmpty()) {
HSOWNDCHK = Byte.parseByte(s);
} else {
HSOWNDCHK = Byte.MIN_VALUE;
}
}

protected final void initHSOWR111(String s) {
if (!s.trim().isEmpty()) {
HSOWR111 = Short.parseShort(s);
} else {
HSOWR111 = Short.MIN_VALUE;
}
}

protected final void initHSOWR112(String s) {
if (!s.trim().isEmpty()) {
HSOWR112 = Short.parseShort(s);
} else {
HSOWR112 = Short.MIN_VALUE;
}
}

protected final void initHSOWR113(String s) {
if (!s.trim().isEmpty()) {
HSOWR113 = Byte.parseByte(s);
} else {
HSOWR113 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR114(String s) {
if (!s.trim().isEmpty()) {
HSOWR114 = Byte.parseByte(s);
} else {
HSOWR114 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR115(String s) {
if (!s.trim().isEmpty()) {
HSOWR115 = Byte.parseByte(s);
} else {
HSOWR115 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR116(String s) {
if (!s.trim().isEmpty()) {
HSOWR116 = Byte.parseByte(s);
} else {
HSOWR116 = Byte.MIN_VALUE;
}
}

protected final void initHSROOMCHK(String s) {
if (!s.trim().isEmpty()) {
HSROOMCHK = Byte.parseByte(s);
} else {
HSROOMCHK = Byte.MIN_VALUE;
}
}

protected final void initHSROOMS(String s) {
if (!s.trim().isEmpty()) {
HSROOMS = Byte.parseByte(s);
} else {
HSROOMS = Byte.MIN_VALUE;
}
}

protected final void initHSTOTMG(String s) {
if (!s.trim().isEmpty()) {
HSTOTMG = Integer.parseInt(s);
} else {
HSTOTMG = Integer.MIN_VALUE;
}
}

protected final void initIEQMOECD_DV(String s) {
if (!s.trim().isEmpty()) {
IEQMOECD_DV = Double.parseDouble(s);
} else {
IEQMOECD_DV = Double.NaN;
}
}

protected final void initINTDATEY(String s) {
if (!s.trim().isEmpty()) {
INTDATEY = Short.parseShort(s);
} else {
INTDATEY = Short.MIN_VALUE;
}
}

protected final void initINTNUM(String s) {
if (!s.trim().isEmpty()) {
INTNUM = Integer.parseInt(s);
} else {
INTNUM = Integer.MIN_VALUE;
}
}

protected final void initIVFHO(String s) {
if (!s.trim().isEmpty()) {
IVFHO = Short.parseShort(s);
} else {
IVFHO = Short.MIN_VALUE;
}
}

protected final void initIVH0(String s) {
if (!s.trim().isEmpty()) {
IVH0 = Short.parseShort(s);
} else {
IVH0 = Short.MIN_VALUE;
}
}

protected final void initIVH11(String s) {
if (!s.trim().isEmpty()) {
IVH11 = Short.parseShort(s);
} else {
IVH11 = Short.MIN_VALUE;
}
}

protected final void initIVH12(String s) {
if (!s.trim().isEmpty()) {
IVH12 = Short.parseShort(s);
} else {
IVH12 = Short.MIN_VALUE;
}
}

protected final void initIVH13(String s) {
if (!s.trim().isEmpty()) {
IVH13 = Byte.parseByte(s);
} else {
IVH13 = Byte.MIN_VALUE;
}
}

protected final void initIVH14(String s) {
if (!s.trim().isEmpty()) {
IVH14 = Byte.parseByte(s);
} else {
IVH14 = Byte.MIN_VALUE;
}
}

protected final void initIVH15(String s) {
if (!s.trim().isEmpty()) {
IVH15 = Byte.parseByte(s);
} else {
IVH15 = Byte.MIN_VALUE;
}
}

protected final void initIVH16(String s) {
if (!s.trim().isEmpty()) {
IVH16 = Byte.parseByte(s);
} else {
IVH16 = Byte.MIN_VALUE;
}
}

protected final void initIVLHENG(String s) {
if (!s.trim().isEmpty()) {
IVLHENG = Byte.parseByte(s);
} else {
IVLHENG = Byte.MIN_VALUE;
}
}

protected final void initIVLHTRANS(String s) {
if (!s.trim().isEmpty()) {
IVLHTRANS = Byte.parseByte(s);
} else {
IVLHTRANS = Byte.MIN_VALUE;
}
}

protected final void initLHENG(String s) {
if (!s.trim().isEmpty()) {
LHENG = Byte.parseByte(s);
} else {
LHENG = Byte.MIN_VALUE;
}
}

protected final void initLHTRANS(String s) {
if (!s.trim().isEmpty()) {
LHTRANS = Byte.parseByte(s);
} else {
LHTRANS = Byte.MIN_VALUE;
}
}

protected final void initMGEXTRA(String s) {
if (!s.trim().isEmpty()) {
MGEXTRA = Short.parseShort(s);
} else {
MGEXTRA = Short.MIN_VALUE;
}
}

protected final void initMGNEW(String s) {
if (!s.trim().isEmpty()) {
MGNEW = Integer.parseInt(s);
} else {
MGNEW = Integer.MIN_VALUE;
}
}

protected final void initMGOLD(String s) {
if (!s.trim().isEmpty()) {
MGOLD = Integer.parseInt(s);
} else {
MGOLD = Integer.MIN_VALUE;
}
}

protected final void initMGTYPE(String s) {
if (!s.trim().isEmpty()) {
MGTYPE = Byte.parseByte(s);
} else {
MGTYPE = Byte.MIN_VALUE;
}
}

protected final void initMGXTY1(String s) {
if (!s.trim().isEmpty()) {
MGXTY1 = Short.parseShort(s);
} else {
MGXTY1 = Short.MIN_VALUE;
}
}

protected final void initMGXTY2(String s) {
if (!s.trim().isEmpty()) {
MGXTY2 = Short.parseShort(s);
} else {
MGXTY2 = Short.MIN_VALUE;
}
}

protected final void initMGXTY3(String s) {
if (!s.trim().isEmpty()) {
MGXTY3 = Short.parseShort(s);
} else {
MGXTY3 = Short.MIN_VALUE;
}
}

protected final void initMGXTY4(String s) {
if (!s.trim().isEmpty()) {
MGXTY4 = Short.parseShort(s);
} else {
MGXTY4 = Short.MIN_VALUE;
}
}

protected final void initMGXTY5(String s) {
if (!s.trim().isEmpty()) {
MGXTY5 = Byte.parseByte(s);
} else {
MGXTY5 = Byte.MIN_VALUE;
}
}

protected final void initMGXTY6(String s) {
if (!s.trim().isEmpty()) {
MGXTY6 = Byte.parseByte(s);
} else {
MGXTY6 = Byte.MIN_VALUE;
}
}

protected final void initMGXTY97(String s) {
if (!s.trim().isEmpty()) {
MGXTY97 = Byte.parseByte(s);
} else {
MGXTY97 = Byte.MIN_VALUE;
}
}

protected final void initMGYNOT(String s) {
if (!s.trim().isEmpty()) {
MGYNOT = Byte.parseByte(s);
} else {
MGYNOT = Byte.MIN_VALUE;
}
}

protected final void initMONTH(String s) {
if (!s.trim().isEmpty()) {
MONTH = Byte.parseByte(s);
} else {
MONTH = Byte.MIN_VALUE;
}
}

protected final void initMORES(String s) {
if (!s.trim().isEmpty()) {
MORES = Byte.parseByte(s);
} else {
MORES = Byte.MIN_VALUE;
}
}

protected final void initNADOECD_DV(String s) {
if (!s.trim().isEmpty()) {
NADOECD_DV = Byte.parseByte(s);
} else {
NADOECD_DV = Byte.MIN_VALUE;
}
}

protected final void initNCARS(String s) {
if (!s.trim().isEmpty()) {
NCARS = Byte.parseByte(s);
} else {
NCARS = Byte.MIN_VALUE;
}
}

protected final void initNCHOECD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHOECD_DV = Byte.parseByte(s);
} else {
NCHOECD_DV = Byte.MIN_VALUE;
}
}

protected final void initNCOUPLDV(String s) {
if (!s.trim().isEmpty()) {
NCOUPLDV = Byte.parseByte(s);
} else {
NCOUPLDV = Byte.MIN_VALUE;
}
}

protected final void initNPENSIONER(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER = Byte.parseByte(s);
} else {
NPENSIONER = Byte.MIN_VALUE;
}
}

protected final void initNPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER_DV = Byte.parseByte(s);
} else {
NPENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initNUDV(String s) {
if (!s.trim().isEmpty()) {
NUDV = Byte.parseByte(s);
} else {
NUDV = Byte.MIN_VALUE;
}
}

protected final void initNUMCIVIL(String s) {
if (!s.trim().isEmpty()) {
NUMCIVIL = Byte.parseByte(s);
} else {
NUMCIVIL = Byte.MIN_VALUE;
}
}

protected final void initNUMMPART(String s) {
if (!s.trim().isEmpty()) {
NUMMPART = Byte.parseByte(s);
} else {
NUMMPART = Byte.MIN_VALUE;
}
}

protected final void initNWAGDV(String s) {
if (!s.trim().isEmpty()) {
NWAGDV = Byte.parseByte(s);
} else {
NWAGDV = Byte.MIN_VALUE;
}
}

protected final void initORIGADD(String s) {
if (!s.trim().isEmpty()) {
ORIGADD = Byte.parseByte(s);
} else {
ORIGADD = Byte.MIN_VALUE;
}
}

protected final void initOUTCOME(String s) {
if (!s.trim().isEmpty()) {
OUTCOME = Short.parseShort(s);
} else {
OUTCOME = Short.MIN_VALUE;
}
}

protected final void initPCBROAD(String s) {
if (!s.trim().isEmpty()) {
PCBROAD = Byte.parseByte(s);
} else {
PCBROAD = Byte.MIN_VALUE;
}
}

protected final void initPCHAS(String s) {
if (!s.trim().isEmpty()) {
PCHAS = Byte.parseByte(s);
} else {
PCHAS = Byte.MIN_VALUE;
}
}

protected final void initPCNET(String s) {
if (!s.trim().isEmpty()) {
PCNET = Short.parseShort(s);
} else {
PCNET = Short.MIN_VALUE;
}
}

protected final void initPSU(String s) {
if (!s.trim().isEmpty()) {
PSU = Integer.parseInt(s);
} else {
PSU = Integer.MIN_VALUE;
}
}

protected final void initRELCONF11(String s) {
if (!s.trim().isEmpty()) {
RELCONF11 = Byte.parseByte(s);
} else {
RELCONF11 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF110(String s) {
if (!s.trim().isEmpty()) {
RELCONF110 = Byte.parseByte(s);
} else {
RELCONF110 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF111(String s) {
if (!s.trim().isEmpty()) {
RELCONF111 = Byte.parseByte(s);
} else {
RELCONF111 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF112(String s) {
if (!s.trim().isEmpty()) {
RELCONF112 = Byte.parseByte(s);
} else {
RELCONF112 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF113(String s) {
if (!s.trim().isEmpty()) {
RELCONF113 = Byte.parseByte(s);
} else {
RELCONF113 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF114(String s) {
if (!s.trim().isEmpty()) {
RELCONF114 = Byte.parseByte(s);
} else {
RELCONF114 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF115(String s) {
if (!s.trim().isEmpty()) {
RELCONF115 = Byte.parseByte(s);
} else {
RELCONF115 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF12(String s) {
if (!s.trim().isEmpty()) {
RELCONF12 = Byte.parseByte(s);
} else {
RELCONF12 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF13(String s) {
if (!s.trim().isEmpty()) {
RELCONF13 = Byte.parseByte(s);
} else {
RELCONF13 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF14(String s) {
if (!s.trim().isEmpty()) {
RELCONF14 = Byte.parseByte(s);
} else {
RELCONF14 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF15(String s) {
if (!s.trim().isEmpty()) {
RELCONF15 = Byte.parseByte(s);
} else {
RELCONF15 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF16(String s) {
if (!s.trim().isEmpty()) {
RELCONF16 = Byte.parseByte(s);
} else {
RELCONF16 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF17(String s) {
if (!s.trim().isEmpty()) {
RELCONF17 = Byte.parseByte(s);
} else {
RELCONF17 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF18(String s) {
if (!s.trim().isEmpty()) {
RELCONF18 = Byte.parseByte(s);
} else {
RELCONF18 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF19(String s) {
if (!s.trim().isEmpty()) {
RELCONF19 = Byte.parseByte(s);
} else {
RELCONF19 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF216(String s) {
if (!s.trim().isEmpty()) {
RELCONF216 = Byte.parseByte(s);
} else {
RELCONF216 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF217(String s) {
if (!s.trim().isEmpty()) {
RELCONF217 = Byte.parseByte(s);
} else {
RELCONF217 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF218(String s) {
if (!s.trim().isEmpty()) {
RELCONF218 = Byte.parseByte(s);
} else {
RELCONF218 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF219(String s) {
if (!s.trim().isEmpty()) {
RELCONF219 = Byte.parseByte(s);
} else {
RELCONF219 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF220(String s) {
if (!s.trim().isEmpty()) {
RELCONF220 = Byte.parseByte(s);
} else {
RELCONF220 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF221(String s) {
if (!s.trim().isEmpty()) {
RELCONF221 = Byte.parseByte(s);
} else {
RELCONF221 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF222(String s) {
if (!s.trim().isEmpty()) {
RELCONF222 = Byte.parseByte(s);
} else {
RELCONF222 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF223(String s) {
if (!s.trim().isEmpty()) {
RELCONF223 = Byte.parseByte(s);
} else {
RELCONF223 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF224(String s) {
if (!s.trim().isEmpty()) {
RELCONF224 = Byte.parseByte(s);
} else {
RELCONF224 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF225(String s) {
if (!s.trim().isEmpty()) {
RELCONF225 = Byte.parseByte(s);
} else {
RELCONF225 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF226(String s) {
if (!s.trim().isEmpty()) {
RELCONF226 = Byte.parseByte(s);
} else {
RELCONF226 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF227(String s) {
if (!s.trim().isEmpty()) {
RELCONF227 = Byte.parseByte(s);
} else {
RELCONF227 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF228(String s) {
if (!s.trim().isEmpty()) {
RELCONF228 = Byte.parseByte(s);
} else {
RELCONF228 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF229(String s) {
if (!s.trim().isEmpty()) {
RELCONF229 = Byte.parseByte(s);
} else {
RELCONF229 = Byte.MIN_VALUE;
}
}

protected final void initRELCONF230(String s) {
if (!s.trim().isEmpty()) {
RELCONF230 = Byte.parseByte(s);
} else {
RELCONF230 = Byte.MIN_VALUE;
}
}

protected final void initRENTG(String s) {
if (!s.trim().isEmpty()) {
RENTG = Short.parseShort(s);
} else {
RENTG = Short.MIN_VALUE;
}
}

protected final void initRENTGRS_DV(String s) {
if (!s.trim().isEmpty()) {
RENTGRS_DV = Double.parseDouble(s);
} else {
RENTGRS_DV = Double.NaN;
}
}

protected final void initRENTGRS_IF(String s) {
if (!s.trim().isEmpty()) {
RENTGRS_IF = Byte.parseByte(s);
} else {
RENTGRS_IF = Byte.MIN_VALUE;
}
}

protected final void initRENTHB(String s) {
if (!s.trim().isEmpty()) {
RENTHB = Byte.parseByte(s);
} else {
RENTHB = Byte.MIN_VALUE;
}
}

protected final void initRENTINC1(String s) {
if (!s.trim().isEmpty()) {
RENTINC1 = Byte.parseByte(s);
} else {
RENTINC1 = Byte.MIN_VALUE;
}
}

protected final void initRENTINC2(String s) {
if (!s.trim().isEmpty()) {
RENTINC2 = Byte.parseByte(s);
} else {
RENTINC2 = Byte.MIN_VALUE;
}
}

protected final void initRENTINC3(String s) {
if (!s.trim().isEmpty()) {
RENTINC3 = Byte.parseByte(s);
} else {
RENTINC3 = Byte.MIN_VALUE;
}
}

protected final void initRENTINC96(String s) {
if (!s.trim().isEmpty()) {
RENTINC96 = Byte.parseByte(s);
} else {
RENTINC96 = Byte.MIN_VALUE;
}
}

protected final void initRENTP11(String s) {
if (!s.trim().isEmpty()) {
RENTP11 = Short.parseShort(s);
} else {
RENTP11 = Short.MIN_VALUE;
}
}

protected final void initRENTP12(String s) {
if (!s.trim().isEmpty()) {
RENTP12 = Short.parseShort(s);
} else {
RENTP12 = Short.MIN_VALUE;
}
}

protected final void initRENTP13(String s) {
if (!s.trim().isEmpty()) {
RENTP13 = Byte.parseByte(s);
} else {
RENTP13 = Byte.MIN_VALUE;
}
}

protected final void initRENTP14(String s) {
if (!s.trim().isEmpty()) {
RENTP14 = Byte.parseByte(s);
} else {
RENTP14 = Byte.MIN_VALUE;
}
}

protected final void initRENTP15(String s) {
if (!s.trim().isEmpty()) {
RENTP15 = Byte.parseByte(s);
} else {
RENTP15 = Byte.MIN_VALUE;
}
}

protected final void initRENTP16(String s) {
if (!s.trim().isEmpty()) {
RENTP16 = Byte.parseByte(s);
} else {
RENTP16 = Byte.MIN_VALUE;
}
}

protected final void initRENTWC(String s) {
if (!s.trim().isEmpty()) {
RENTWC = Byte.parseByte(s);
} else {
RENTWC = Byte.MIN_VALUE;
}
}

protected final void initRENT_DV(String s) {
if (!s.trim().isEmpty()) {
RENT_DV = Double.parseDouble(s);
} else {
RENT_DV = Double.NaN;
}
}

protected final void initSTRATA(String s) {
if (!s.trim().isEmpty()) {
STRATA = Short.parseShort(s);
} else {
STRATA = Short.MIN_VALUE;
}
}

protected final void initTENURDV(String s) {
if (!s.trim().isEmpty()) {
TENURDV = Byte.parseByte(s);
} else {
TENURDV = Byte.MIN_VALUE;
}
}

protected final void initURBAN_DV(String s) {
if (!s.trim().isEmpty()) {
URBAN_DV = Byte.parseByte(s);
} else {
URBAN_DV = Byte.MIN_VALUE;
}
}

protected final void initXPALTOB_G3(String s) {
if (!s.trim().isEmpty()) {
XPALTOB_G3 = Short.parseShort(s);
} else {
XPALTOB_G3 = Short.MIN_VALUE;
}
}

protected final void initXPDUELY(String s) {
if (!s.trim().isEmpty()) {
XPDUELY = Short.parseShort(s);
} else {
XPDUELY = Short.MIN_VALUE;
}
}

protected final void initXPELECY(String s) {
if (!s.trim().isEmpty()) {
XPELECY = Short.parseShort(s);
} else {
XPELECY = Short.MIN_VALUE;
}
}

protected final void initXPFDOUT_G3(String s) {
if (!s.trim().isEmpty()) {
XPFDOUT_G3 = Short.parseShort(s);
} else {
XPFDOUT_G3 = Short.MIN_VALUE;
}
}

protected final void initXPFOOD1_G3(String s) {
if (!s.trim().isEmpty()) {
XPFOOD1_G3 = Short.parseShort(s);
} else {
XPFOOD1_G3 = Short.MIN_VALUE;
}
}

protected final void initXPGASY(String s) {
if (!s.trim().isEmpty()) {
XPGASY = Short.parseShort(s);
} else {
XPGASY = Short.MIN_VALUE;
}
}

protected final void initXPHSDBA(String s) {
if (!s.trim().isEmpty()) {
XPHSDBA = Byte.parseByte(s);
} else {
XPHSDBA = Byte.MIN_VALUE;
}
}

protected final void initXPHSDCT(String s) {
if (!s.trim().isEmpty()) {
XPHSDCT = Byte.parseByte(s);
} else {
XPHSDCT = Byte.MIN_VALUE;
}
}

protected final void initXPMGINT_DV(String s) {
if (!s.trim().isEmpty()) {
XPMGINT_DV = Double.parseDouble(s);
} else {
XPMGINT_DV = Double.NaN;
}
}

protected final void initXPMG_DV(String s) {
if (!s.trim().isEmpty()) {
XPMG_DV = Double.parseDouble(s);
} else {
XPMG_DV = Double.NaN;
}
}

protected final void initXPMG_IF(String s) {
if (!s.trim().isEmpty()) {
XPMG_IF = Byte.parseByte(s);
} else {
XPMG_IF = Byte.MIN_VALUE;
}
}

protected final void initXPOILY(String s) {
if (!s.trim().isEmpty()) {
XPOILY = Short.parseShort(s);
} else {
XPOILY = Short.MIN_VALUE;
}
}

protected final void initXPSFLY(String s) {
if (!s.trim().isEmpty()) {
XPSFLY = Short.parseShort(s);
} else {
XPSFLY = Short.MIN_VALUE;
}
}

public byte getADDRCHCK() {
return ADDRCHCK;
}

public int getCARVAL() {
return CARVAL;
}

public short getCDUSE10() {
return CDUSE10;
}

public short getCDUSE11() {
return CDUSE11;
}

public short getCDUSE12() {
return CDUSE12;
}

public byte getCDUSE13() {
return CDUSE13;
}

public short getCDUSE3() {
return CDUSE3;
}

public short getCDUSE4() {
return CDUSE4;
}

public byte getCDUSE5() {
return CDUSE5;
}

public byte getCDUSE7() {
return CDUSE7;
}

public byte getCORDET1() {
return CORDET1;
}

public byte getCORDET10() {
return CORDET10;
}

public byte getCORDET11() {
return CORDET11;
}

public byte getCORDET12() {
return CORDET12;
}

public byte getCORDET13() {
return CORDET13;
}

public byte getCORDET14() {
return CORDET14;
}

public byte getCORDET15() {
return CORDET15;
}

public byte getCORDET16() {
return CORDET16;
}

public byte getCORDET2() {
return CORDET2;
}

public byte getCORDET3() {
return CORDET3;
}

public byte getCORDET4() {
return CORDET4;
}

public byte getCORDET5() {
return CORDET5;
}

public byte getCORDET6() {
return CORDET6;
}

public byte getCORDET7() {
return CORDET7;
}

public byte getCORDET8() {
return CORDET8;
}

public byte getCORDET9() {
return CORDET9;
}

public byte getCORDET96() {
return CORDET96;
}

public byte getCORESWHO1() {
return CORESWHO1;
}

public byte getCORESWHO10() {
return CORESWHO10;
}

public byte getCORESWHO11() {
return CORESWHO11;
}

public byte getCORESWHO12() {
return CORESWHO12;
}

public byte getCORESWHO13() {
return CORESWHO13;
}

public byte getCORESWHO14() {
return CORESWHO14;
}

public byte getCORESWHO15() {
return CORESWHO15;
}

public byte getCORESWHO16() {
return CORESWHO16;
}

public byte getCORESWHO2() {
return CORESWHO2;
}

public byte getCORESWHO3() {
return CORESWHO3;
}

public byte getCORESWHO4() {
return CORESWHO4;
}

public byte getCORESWHO5() {
return CORESWHO5;
}

public byte getCORESWHO6() {
return CORESWHO6;
}

public byte getCORESWHO7() {
return CORESWHO7;
}

public byte getCORESWHO8() {
return CORESWHO8;
}

public byte getCORESWHO9() {
return CORESWHO9;
}

public byte getCORESWHO96() {
return CORESWHO96;
}

public byte getCOUNTRY() {
return COUNTRY;
}

public byte getDUELPAY() {
return DUELPAY;
}

public byte getELECPAY() {
return ELECPAY;
}

public byte getFF_HSBEDS() {
return FF_HSBEDS;
}

public byte getFF_HSOWND() {
return FF_HSOWND;
}

public byte getFF_HSROOMS() {
return FF_HSROOMS;
}

public byte getFF_TEL() {
return FF_TEL;
}

protected double FIHHMNGRS1_DV() {
return FIHHMNGRS1_DV;
}

protected double FIHHMNGRS_IF() {
return FIHHMNGRS_IF;
}

public byte getFIHHMNGRS_TC() {
return FIHHMNGRS_TC;
}

protected double FIHHMNINV_DV() {
return FIHHMNINV_DV;
}

protected double FIHHMNLABGRS_DV() {
return FIHHMNLABGRS_DV;
}

public byte getFIHHMNLABGRS_TC() {
return FIHHMNLABGRS_TC;
}

protected double FIHHMNLABNET_DV() {
return FIHHMNLABNET_DV;
}

protected double FIHHMNMISC_DV() {
return FIHHMNMISC_DV;
}

protected double FIHHMNNET1_DV() {
return FIHHMNNET1_DV;
}

protected double FIHHMNPEN_DV() {
return FIHHMNPEN_DV;
}

protected double FIHHMNPRBEN_DV() {
return FIHHMNPRBEN_DV;
}

protected double FIHHMNSBEN_DV() {
return FIHHMNSBEN_DV;
}

public byte getFIHHNEGSEI_IF() {
return FIHHNEGSEI_IF;
}

public byte getFUELDUEL() {
return FUELDUEL;
}

public byte getFUELHAVE1() {
return FUELHAVE1;
}

public byte getFUELHAVE2() {
return FUELHAVE2;
}

public byte getFUELHAVE3() {
return FUELHAVE3;
}

public byte getFUELHAVE4() {
return FUELHAVE4;
}

public byte getFUELHAVE96() {
return FUELHAVE96;
}

public byte getGASPAY() {
return GASPAY;
}

protected double HBADJUST_DV() {
return HBADJUST_DV;
}

public byte getHGENDDATD() {
return HGENDDATD;
}

public byte getHGENDDATHH() {
return HGENDDATHH;
}

public byte getHGENDDATM() {
return HGENDDATM;
}

public byte getHGENDDATMM() {
return HGENDDATMM;
}

public byte getHGENDDATSS() {
return HGENDDATSS;
}

public short getHGENDDATY() {
return HGENDDATY;
}

protected double HHDENUB_XW() {
return HHDENUB_XW;
}

public boolean getHHGRIDCOMPLETE() {
return HHGRIDCOMPLETE;
}

public byte getHHINTLANG() {
return HHINTLANG;
}

public byte getHHLANG() {
return HHLANG;
}

public byte getHHOLDMODEDV() {
return HHOLDMODEDV;
}

public byte getHHORIG() {
return HHORIG;
}

public byte getHHQEND() {
return HHQEND;
}

public byte getHHRESP_DV() {
return HHRESP_DV;
}

public byte getHHTYPDV() {
return HHTYPDV;
}

public byte getHIENDDATD() {
return HIENDDATD;
}

public byte getHIENDDATHH() {
return HIENDDATHH;
}

public byte getHIENDDATM() {
return HIENDDATM;
}

public byte getHIENDDATMM() {
return HIENDDATMM;
}

public byte getHIENDDATSS() {
return HIENDDATSS;
}

public short getHIENDDATY() {
return HIENDDATY;
}

public byte getHISTRTDATD() {
return HISTRTDATD;
}

public byte getHISTRTDATHH() {
return HISTRTDATHH;
}

public byte getHISTRTDATM() {
return HISTRTDATM;
}

public byte getHISTRTDATMM() {
return HISTRTDATMM;
}

public byte getHISTRTDATSS() {
return HISTRTDATSS;
}

public short getHISTRTDATY() {
return HISTRTDATY;
}

protected double HOUSCOST1_DV() {
return HOUSCOST1_DV;
}

protected double HOUSCOST2_DV() {
return HOUSCOST2_DV;
}

public int getHRPID() {
return HRPID;
}

public byte getHRPNO() {
return HRPNO;
}

public byte getHSBEDS() {
return HSBEDS;
}

public short getHSCTAX() {
return HSCTAX;
}

public byte getHSOWND() {
return HSOWND;
}

public byte getHSOWNDCHK() {
return HSOWNDCHK;
}

public short getHSOWR111() {
return HSOWR111;
}

public short getHSOWR112() {
return HSOWR112;
}

public byte getHSOWR113() {
return HSOWR113;
}

public byte getHSOWR114() {
return HSOWR114;
}

public byte getHSOWR115() {
return HSOWR115;
}

public byte getHSOWR116() {
return HSOWR116;
}

public byte getHSROOMCHK() {
return HSROOMCHK;
}

public byte getHSROOMS() {
return HSROOMS;
}

public int getHSTOTMG() {
return HSTOTMG;
}

protected double IEQMOECD_DV() {
return IEQMOECD_DV;
}

public short getINTDATEY() {
return INTDATEY;
}

public int getINTNUM() {
return INTNUM;
}

public short getIVFHO() {
return IVFHO;
}

public short getIVH0() {
return IVH0;
}

public short getIVH11() {
return IVH11;
}

public short getIVH12() {
return IVH12;
}

public byte getIVH13() {
return IVH13;
}

public byte getIVH14() {
return IVH14;
}

public byte getIVH15() {
return IVH15;
}

public byte getIVH16() {
return IVH16;
}

public byte getIVLHENG() {
return IVLHENG;
}

public byte getIVLHTRANS() {
return IVLHTRANS;
}

public byte getLHENG() {
return LHENG;
}

public byte getLHTRANS() {
return LHTRANS;
}

public short getMGEXTRA() {
return MGEXTRA;
}

public int getMGNEW() {
return MGNEW;
}

public int getMGOLD() {
return MGOLD;
}

public byte getMGTYPE() {
return MGTYPE;
}

public short getMGXTY1() {
return MGXTY1;
}

public short getMGXTY2() {
return MGXTY2;
}

public short getMGXTY3() {
return MGXTY3;
}

public short getMGXTY4() {
return MGXTY4;
}

public byte getMGXTY5() {
return MGXTY5;
}

public byte getMGXTY6() {
return MGXTY6;
}

public byte getMGXTY97() {
return MGXTY97;
}

public byte getMGYNOT() {
return MGYNOT;
}

public byte getMONTH() {
return MONTH;
}

public byte getMORES() {
return MORES;
}

public byte getNADOECD_DV() {
return NADOECD_DV;
}

public byte getNCARS() {
return NCARS;
}

public byte getNCHOECD_DV() {
return NCHOECD_DV;
}

public byte getNCOUPLDV() {
return NCOUPLDV;
}

public byte getNPENSIONER() {
return NPENSIONER;
}

public byte getNPENSIONER_DV() {
return NPENSIONER_DV;
}

public byte getNUDV() {
return NUDV;
}

public byte getNUMCIVIL() {
return NUMCIVIL;
}

public byte getNUMMPART() {
return NUMMPART;
}

public byte getNWAGDV() {
return NWAGDV;
}

public byte getORIGADD() {
return ORIGADD;
}

public short getOUTCOME() {
return OUTCOME;
}

public byte getPCBROAD() {
return PCBROAD;
}

public byte getPCHAS() {
return PCHAS;
}

public short getPCNET() {
return PCNET;
}

public int getPSU() {
return PSU;
}

public byte getRELCONF11() {
return RELCONF11;
}

public byte getRELCONF110() {
return RELCONF110;
}

public byte getRELCONF111() {
return RELCONF111;
}

public byte getRELCONF112() {
return RELCONF112;
}

public byte getRELCONF113() {
return RELCONF113;
}

public byte getRELCONF114() {
return RELCONF114;
}

public byte getRELCONF115() {
return RELCONF115;
}

public byte getRELCONF12() {
return RELCONF12;
}

public byte getRELCONF13() {
return RELCONF13;
}

public byte getRELCONF14() {
return RELCONF14;
}

public byte getRELCONF15() {
return RELCONF15;
}

public byte getRELCONF16() {
return RELCONF16;
}

public byte getRELCONF17() {
return RELCONF17;
}

public byte getRELCONF18() {
return RELCONF18;
}

public byte getRELCONF19() {
return RELCONF19;
}

public byte getRELCONF216() {
return RELCONF216;
}

public byte getRELCONF217() {
return RELCONF217;
}

public byte getRELCONF218() {
return RELCONF218;
}

public byte getRELCONF219() {
return RELCONF219;
}

public byte getRELCONF220() {
return RELCONF220;
}

public byte getRELCONF221() {
return RELCONF221;
}

public byte getRELCONF222() {
return RELCONF222;
}

public byte getRELCONF223() {
return RELCONF223;
}

public byte getRELCONF224() {
return RELCONF224;
}

public byte getRELCONF225() {
return RELCONF225;
}

public byte getRELCONF226() {
return RELCONF226;
}

public byte getRELCONF227() {
return RELCONF227;
}

public byte getRELCONF228() {
return RELCONF228;
}

public byte getRELCONF229() {
return RELCONF229;
}

public byte getRELCONF230() {
return RELCONF230;
}

public short getRENTG() {
return RENTG;
}

protected double RENTGRS_DV() {
return RENTGRS_DV;
}

public byte getRENTGRS_IF() {
return RENTGRS_IF;
}

public byte getRENTHB() {
return RENTHB;
}

public byte getRENTINC1() {
return RENTINC1;
}

public byte getRENTINC2() {
return RENTINC2;
}

public byte getRENTINC3() {
return RENTINC3;
}

public byte getRENTINC96() {
return RENTINC96;
}

public short getRENTP11() {
return RENTP11;
}

public short getRENTP12() {
return RENTP12;
}

public byte getRENTP13() {
return RENTP13;
}

public byte getRENTP14() {
return RENTP14;
}

public byte getRENTP15() {
return RENTP15;
}

public byte getRENTP16() {
return RENTP16;
}

public byte getRENTWC() {
return RENTWC;
}

protected double RENT_DV() {
return RENT_DV;
}

public short getSTRATA() {
return STRATA;
}

public byte getTENURDV() {
return TENURDV;
}

public byte getURBAN_DV() {
return URBAN_DV;
}

public short getXPALTOB_G3() {
return XPALTOB_G3;
}

public short getXPDUELY() {
return XPDUELY;
}

public short getXPELECY() {
return XPELECY;
}

public short getXPFDOUT_G3() {
return XPFDOUT_G3;
}

public short getXPFOOD1_G3() {
return XPFOOD1_G3;
}

public short getXPGASY() {
return XPGASY;
}

public byte getXPHSDBA() {
return XPHSDBA;
}

public byte getXPHSDCT() {
return XPHSDCT;
}

protected double XPMGINT_DV() {
return XPMGINT_DV;
}

protected double XPMG_DV() {
return XPMG_DV;
}

public byte getXPMG_IF() {
return XPMG_IF;
}

public short getXPOILY() {
return XPOILY;
}

public short getXPSFLY() {
return XPSFLY;
}

public US_Wave23_hhresp_Record(String line) {
s = line.split("\t");
initHIDP(s[0]);
initINTNUM(s[1]);
initHHORIG(s[2]);
initPSU(s[3]);
initSTRATA(s[4]);
initMONTH(s[5]);
initIVFHO(s[6]);
initHGENDDATHH(s[7]);
initHGENDDATMM(s[8]);
initHGENDDATSS(s[9]);
initHGENDDATY(s[10]);
initHGENDDATM(s[11]);
initHGENDDATD(s[12]);
initHHLANG(s[13]);
initHHGRIDCOMPLETE(s[14]);
initHHSIZE(s[15]);
initNUMMPART(s[16]);
initNUMCIVIL(s[17]);
initADDRCHCK(s[18]);
initCORESWHO1(s[19]);
initCORESWHO2(s[20]);
initCORESWHO3(s[21]);
initCORESWHO4(s[22]);
initCORESWHO5(s[23]);
initCORESWHO6(s[24]);
initCORESWHO7(s[25]);
initCORESWHO8(s[26]);
initCORESWHO9(s[27]);
initCORESWHO10(s[28]);
initCORESWHO11(s[29]);
initCORESWHO12(s[30]);
initCORESWHO13(s[31]);
initCORESWHO14(s[32]);
initCORESWHO15(s[33]);
initCORESWHO16(s[34]);
initCORESWHO96(s[35]);
initMORES(s[36]);
initCORDET1(s[37]);
initCORDET2(s[38]);
initCORDET3(s[39]);
initCORDET4(s[40]);
initCORDET5(s[41]);
initCORDET6(s[42]);
initCORDET7(s[43]);
initCORDET8(s[44]);
initCORDET9(s[45]);
initCORDET10(s[46]);
initCORDET11(s[47]);
initCORDET12(s[48]);
initCORDET13(s[49]);
initCORDET14(s[50]);
initCORDET15(s[51]);
initCORDET16(s[52]);
initCORDET96(s[53]);
initRELCONF11(s[54]);
initRELCONF12(s[55]);
initRELCONF13(s[56]);
initRELCONF14(s[57]);
initRELCONF15(s[58]);
initRELCONF16(s[59]);
initRELCONF17(s[60]);
initRELCONF18(s[61]);
initRELCONF19(s[62]);
initRELCONF110(s[63]);
initRELCONF111(s[64]);
initRELCONF112(s[65]);
initRELCONF113(s[66]);
initRELCONF114(s[67]);
initRELCONF115(s[68]);
initRELCONF216(s[69]);
initRELCONF217(s[70]);
initRELCONF218(s[71]);
initRELCONF219(s[72]);
initRELCONF220(s[73]);
initRELCONF221(s[74]);
initRELCONF222(s[75]);
initRELCONF223(s[76]);
initRELCONF224(s[77]);
initRELCONF225(s[78]);
initRELCONF226(s[79]);
initRELCONF227(s[80]);
initRELCONF228(s[81]);
initRELCONF229(s[82]);
initRELCONF230(s[83]);
initNPENSIONER(s[84]);
initORIGADD(s[85]);
initIVH0(s[86]);
initIVH1(s[87]);
initIVH2(s[88]);
initIVH3(s[89]);
initIVH4(s[90]);
initIVH5(s[91]);
initIVH6(s[92]);
initIVH7(s[93]);
initIVH8(s[94]);
initIVH9(s[95]);
initIVH10(s[96]);
initIVH11(s[97]);
initIVH12(s[98]);
initIVH13(s[99]);
initIVH14(s[100]);
initIVH15(s[101]);
initIVH16(s[102]);
initHISTRTDATHH(s[103]);
initHISTRTDATMM(s[104]);
initHISTRTDATSS(s[105]);
initHISTRTDATY(s[106]);
initHISTRTDATM(s[107]);
initHISTRTDATD(s[108]);
initLHENG(s[109]);
initLHTRANS(s[110]);
initIVLHENG(s[111]);
initIVLHTRANS(s[112]);
initHHQEND(s[113]);
initHIENDDATHH(s[114]);
initHIENDDATMM(s[115]);
initHIENDDATSS(s[116]);
initHIENDDATY(s[117]);
initHIENDDATM(s[118]);
initHIENDDATD(s[119]);
initHSROOMCHK(s[120]);
initHSBEDS(s[121]);
initHSROOMS(s[122]);
initHSOWNDCHK(s[123]);
initHSOWND(s[124]);
initHSOWR10(s[125]);
initHSOWR11(s[126]);
initHSOWR12(s[127]);
initHSOWR13(s[128]);
initHSOWR14(s[129]);
initHSOWR15(s[130]);
initHSOWR16(s[131]);
initHSOWR17(s[132]);
initHSOWR18(s[133]);
initHSOWR19(s[134]);
initHSOWR110(s[135]);
initHSOWR111(s[136]);
initHSOWR112(s[137]);
initHSOWR113(s[138]);
initHSOWR114(s[139]);
initHSOWR115(s[140]);
initHSOWR116(s[141]);
initHSVAL(s[142]);
initMGYNOT(s[143]);
initHSYRBUY(s[144]);
initHSCOST(s[145]);
initHSYR04(s[146]);
initMGOLD(s[147]);
initMGLIFE(s[148]);
initMGTYPE(s[149]);
initMGEXTRA(s[150]);
initMGNEW(s[151]);
initMGXTY1(s[152]);
initMGXTY2(s[153]);
initMGXTY3(s[154]);
initMGXTY4(s[155]);
initMGXTY5(s[156]);
initMGXTY6(s[157]);
initMGXTY97(s[158]);
initHSTOTMG(s[159]);
initXPMG(s[160]);
initHSJB(s[161]);
initRENTP0(s[162]);
initRENTP1(s[163]);
initRENTP2(s[164]);
initRENTP3(s[165]);
initRENTP4(s[166]);
initRENTP5(s[167]);
initRENTP6(s[168]);
initRENTP7(s[169]);
initRENTP8(s[170]);
initRENTP9(s[171]);
initRENTP10(s[172]);
initRENTP11(s[173]);
initRENTP12(s[174]);
initRENTP13(s[175]);
initRENTP14(s[176]);
initRENTP15(s[177]);
initRENTP16(s[178]);
initRENTLL(s[179]);
initRENTF(s[180]);
initRENT(s[181]);
initRENTWC(s[182]);
initRENTINC1(s[183]);
initRENTINC2(s[184]);
initRENTINC3(s[185]);
initRENTINC96(s[186]);
initRENTHB(s[187]);
initRENTG(s[188]);
initFUELHAVE1(s[189]);
initFUELHAVE2(s[190]);
initFUELHAVE3(s[191]);
initFUELHAVE4(s[192]);
initFUELHAVE96(s[193]);
initFUELDUEL(s[194]);
initXPDUELY(s[195]);
initDUELPAY(s[196]);
initXPELECY(s[197]);
initELECPAY(s[198]);
initXPGASY(s[199]);
initGASPAY(s[200]);
initXPOILY(s[201]);
initXPSFLY(s[202]);
initHEATCH(s[203]);
initHSCTAX(s[204]);
initXPHSDB(s[205]);
initXPHSDCT(s[206]);
initXPHSDBA(s[207]);
initCDUSE1(s[208]);
initCDUSE2(s[209]);
initCDUSE3(s[210]);
initCDUSE4(s[211]);
initCDUSE5(s[212]);
initCDUSE6(s[213]);
initCDUSE7(s[214]);
initCDUSE8(s[215]);
initCDUSE9(s[216]);
initCDUSE10(s[217]);
initCDUSE11(s[218]);
initCDUSE12(s[219]);
initCDUSE13(s[220]);
initCDUSE96(s[221]);
initPCHAS(s[222]);
initPCNET(s[223]);
initPCBROAD(s[224]);
initXPFOOD1_G3(s[225]);
initXPFDOUT_G3(s[226]);
initXPALTOB_G3(s[227]);
initNCARS(s[228]);
initCARVAL(s[229]);
initOUTCOME(s[230]);
initINTDATEY(s[231]);
initINTDATEM(s[232]);
initINTDATED(s[233]);
initHHINTLANG(s[234]);
initHHOLDMODEDV(s[235]);
initFIHHMNGRS_DV(s[236]);
initFIHHMNGRS_TC(s[237]);
initFIHHMNLABGRS_DV(s[238]);
initFIHHMNLABGRS_TC(s[239]);
initRENTGRS_IF(s[240]);
initXPMG_IF(s[241]);
initFF_TEL(s[242]);
initFF_HSBEDS(s[243]);
initFF_HSROOMS(s[244]);
initFF_HSOWND(s[245]);
initNPENSIONER_DV(s[246]);
initFIHHMNNET1_DV(s[247]);
initFIHHMNLABNET_DV(s[248]);
initFIHHMNMISC_DV(s[249]);
initFIHHMNPRBEN_DV(s[250]);
initFIHHMNINV_DV(s[251]);
initFIHHMNPEN_DV(s[252]);
initFIHHMNSBEN_DV(s[253]);
initRENT_DV(s[254]);
initRENTGRS_DV(s[255]);
initHBADJUST_DV(s[256]);
initXPMG_DV(s[257]);
initXPMGINT_DV(s[258]);
initHOUSCOST1_DV(s[259]);
initHOUSCOST2_DV(s[260]);
initFIHHMNGRS1_DV(s[261]);
initCOUNTRY(s[262]);
initGOR_DV(s[263]);
initURBAN_DV(s[264]);
initHHRESP_DV(s[265]);
initHHTYPDV(s[266]);
initHRPID(s[267]);
initHRPNO(s[268]);
initNCOUPLDV(s[269]);
initNONEPAR_DV(s[270]);
initNKIDS_DV(s[271]);
initNCH02_DV(s[272]);
initNCH34_DV(s[273]);
initNCH511_DV(s[274]);
initNCH1215_DV(s[275]);
initAGECHY_DV(s[276]);
initNPENS_DV(s[277]);
initNEMP_DV(s[278]);
initNUDV(s[279]);
initNWAGDV(s[280]);
initNCHOECD_DV(s[281]);
initNADOECD_DV(s[282]);
initIEQMOECD_DV(s[283]);
initTENURDV(s[284]);
initFIHHNEGSEI_IF(s[285]);
initFIHHMNGRS_IF(s[286]);
initHHDENUB_XW(s[287]);
}
}
