/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.us.data.indresp;
public class US_Wave21_indresp_Record extends US_indresp_Record {
protected byte ADCTS;
protected byte ADOPTCH01;
protected byte ADOPTCH02;
protected byte ADOPTCH03;
protected byte ADOPTCH04;
protected byte ADOPTCH05;
protected byte ADOPTCH06;
protected boolean ADOPTCH07;
protected boolean ADOPTCH08;
protected boolean ADOPTCH09;
protected boolean ADOPTCH10;
protected boolean ADOPTCH11;
protected boolean ADOPTCH12;
protected boolean ADOPTCH13;
protected boolean ADOPTCH14;
protected boolean ADOPTCH15;
protected boolean ADOPTCH16;
protected byte ADSTATUS;
protected byte AEDROF1;
protected byte AEDROF2;
protected byte AEDROF3;
protected double AEPUDA1;
protected byte AEPUDA2;
protected byte AEPUDA3;
protected byte AEPUWK1;
protected byte AEPUWK2;
protected byte AEPUWK3;
protected byte AGEGR10_DV;
protected byte AGEGR13_DV;
protected byte AGEGR5_DV;
protected byte AGERET;
protected short AGE_DV;
protected byte AHVWELL;
protected byte AIDEFT;
protected short AIDHU1;
protected short AIDHU2;
protected byte AIDHUA1;
protected byte AIDHUA10;
protected byte AIDHUA11;
protected byte AIDHUA12;
protected byte AIDHUA13;
protected byte AIDHUA14;
protected byte AIDHUA15;
protected byte AIDHUA16;
protected byte AIDHUA2;
protected byte AIDHUA3;
protected byte AIDHUA4;
protected byte AIDHUA5;
protected byte AIDHUA6;
protected byte AIDHUA7;
protected byte AIDHUA8;
protected byte AIDHUA9;
protected byte ALLCH01;
protected byte ALLCH02;
protected byte ALLCH03;
protected byte ALLCH04;
protected byte ALLCH05;
protected byte ALLCH06;
protected byte ALLCH07;
protected byte ALLCH08;
protected byte ALLCH09;
protected byte ALLCH10;
protected boolean ALLCH11;
protected boolean ALLCH12;
protected boolean ALLCH13;
protected boolean ALLCH14;
protected boolean ALLCH15;
protected boolean ALLCH16;
protected byte APVOCIMP;
protected byte AREA;
protected byte ARGF;
protected byte ARGM;
protected byte ATTACKED1;
protected byte ATTACKED10;
protected byte ATTACKED11;
protected byte ATTACKED2;
protected byte ATTACKED3;
protected byte ATTACKED4;
protected byte ATTACKED5;
protected byte ATTACKED6;
protected byte ATTACKED7;
protected byte ATTACKED8;
protected byte ATTACKED9;
protected byte ATTACKED96;
protected byte ATTACKED97;
protected byte ATTACKEDO_CODE;
protected byte ATTACKED_DV;
protected byte AVOIDANCE1;
protected byte AVOIDANCE10;
protected byte AVOIDANCE11;
protected byte AVOIDANCE2;
protected byte AVOIDANCE3;
protected byte AVOIDANCE4;
protected byte AVOIDANCE5;
protected byte AVOIDANCE6;
protected byte AVOIDANCE7;
protected byte AVOIDANCE8;
protected byte AVOIDANCE9;
protected byte AVOIDANCE96;
protected byte AVOIDANCE97;
protected byte AVOIDANCEO_CODE;
protected byte AVOIDED_DV;
protected double BASNSA;
protected double BASRATE;
protected byte BASREST;
protected byte BENCB;
protected byte BENCTC;
protected byte BENDIS1;
protected byte BENDIS10;
protected byte BENDIS12;
protected byte BENDIS13;
protected byte BENDIS14;
protected byte BENDIS15;
protected byte BENDIS16;
protected byte BENDIS2;
protected byte BENDIS3;
protected byte BENDIS4;
protected byte BENDIS5;
protected byte BENDIS6;
protected byte BENDIS7;
protected byte BENDIS8;
protected byte BENDIS9;
protected byte BENDIS96;
protected byte BENDIS97;
protected byte BENFAM1;
protected byte BENFAM10;
protected byte BENFAM2;
protected byte BENFAM3;
protected byte BENFAM4;
protected byte BENFAM5;
protected byte BENFAM6;
protected byte BENFAM7;
protected byte BENFAM8;
protected byte BENFAM9;
protected byte BENFAM96;
protected byte BENHOU1;
protected byte BENHOU2;
protected byte BENHOU3;
protected byte BENHOU4;
protected byte BENHOU5;
protected byte BENHOU6;
protected byte BENHOU7;
protected byte BENHOU8;
protected byte BENHOU9;
protected byte BENHOU96;
protected byte BENPEN1;
protected byte BENPEN10;
protected byte BENPEN11;
protected byte BENPEN12;
protected byte BENPEN13;
protected byte BENPEN2;
protected byte BENPEN3;
protected byte BENPEN4;
protected byte BENPEN5;
protected byte BENPEN6;
protected byte BENPEN7;
protected byte BENPEN8;
protected byte BENPEN9;
protected byte BENPEN96;
protected byte BENSTA1;
protected byte BENSTA10;
protected byte BENSTA11;
protected byte BENSTA12;
protected byte BENSTA13;
protected byte BENSTA2;
protected byte BENSTA3;
protected byte BENSTA4;
protected byte BENSTA5;
protected byte BENSTA6;
protected byte BENSTA7;
protected byte BENSTA9;
protected byte BENSTA96;
protected byte BENSTA97;
protected byte BENTAX1;
protected byte BENTAX10;
protected byte BENTAX2;
protected byte BENTAX3;
protected byte BENTAX4;
protected byte BENTAX5;
protected byte BENTAX6;
protected byte BENTAX7;
protected byte BENTAX8;
protected byte BENTAX9;
protected byte BENTAX96;
protected byte BENUNEMP1;
protected byte BENUNEMP2;
protected byte BENUNEMP3;
protected byte BENUNEMP4;
protected byte BENUNEMP5;
protected byte BENUNEMP6;
protected byte BENUNEMP7;
protected byte BENUNEMP96;
protected byte BIG5A_DV;
protected byte BIG5DV;
protected byte BIG5E_DV;
protected byte BIG5N_DV;
protected byte BIG5O_DV;
protected short BIRTHY;
protected byte BRITID;
protected byte BTYPE1;
protected byte BTYPE10;
protected byte BTYPE11;
protected byte BTYPE12;
protected byte BTYPE13;
protected byte BTYPE14;
protected byte BTYPE2;
protected byte BTYPE3;
protected byte BTYPE4;
protected byte BTYPE5;
protected byte BTYPE6;
protected byte BTYPE7;
protected byte BTYPE8;
protected byte BTYPE9;
protected byte BTYPE96;
protected byte BUNO_DV;
protected byte CAIDU1;
protected byte CAIDU2;
protected byte CAIDU3;
protected byte CAIDU4;
protected byte CAIDU5;
protected byte CAIDU6;
protected byte CAIDU7;
protected byte CAIDU8;
protected byte CAIDU96;
protected byte CAIDU97;
protected byte CASIEND;
protected byte CCARE;
protected byte CCWORK;
protected byte CGIVNA1_DV;
protected byte CGIVNS1_DV;
protected byte CGIVS71_DV;
protected byte CGIVVF1_DV;
protected byte CGIVWRD1_DV;
protected byte CGIVWRI1_DV;
protected byte CGNA_DV;
protected byte CGNS1A_DV;
protected byte CGNS1B_DV;
protected short CGNS1SC10_DV;
protected byte CGNS1SC6_DV;
protected byte CGNS2A_DV;
protected byte CGNS2B_DV;
protected short CGNS2SC10_DV;
protected byte CGNS2SC6_DV;
protected byte CGS7CA_DV;
protected byte CGS7CS_DV;
protected byte CGS7N_DV;
protected byte CGSRMEM2_DV;
protected byte CGSRMEM_DV;
protected byte CGVFDV;
protected byte CGVFW_DV;
protected byte CGWRD_DV;
protected byte CGWRI1_DV;
protected byte CGWRI2_DV;
protected byte CGWRI3_DV;
protected byte CGWRI4_DV;
protected byte CGWRI_DV;
protected short CH1BY4;
protected byte CHAID1;
protected byte CHAID2;
protected byte CHAID3;
protected byte CHAID4;
protected byte CHAID5;
protected byte CHAID6;
protected byte CHAID7;
protected byte CHAID8;
protected byte CHAID96;
protected byte CHAID97;
protected byte CHCON;
protected byte CHFAR;
protected byte CHILDPNO;
protected byte CHKRESP;
protected byte CHSEE;
protected int CINDTIME;
protected byte CITZN1;
protected byte CITZN2;
protected byte CITZN3;
protected byte CIVICDUTY;
protected byte CJBATT;
protected byte CJOB;
protected byte CLANGAB;
protected short CLOSENUM;
protected byte CMCORD;
protected byte CMCORDALL;
protected double CMCORDAM;
protected byte CMCORDPER;
protected short CMCORDRCAM;
protected byte CMCORDRCPR;
protected byte CMCORDREC;
protected byte CMCORDTM;
protected byte CMCSAACT;
protected byte CMCSAALL;
protected short CMCSAAM;
protected byte CMCSANIL1;
protected byte CMCSANIL2;
protected byte CMCSANIL3;
protected byte CMCSANIL4;
protected byte CMCSANIL5;
protected byte CMCSANIL97;
protected byte CMCSAPER;
protected byte CMCSAPR;
protected byte CMKNDEVR1;
protected byte CMKNDEVR2;
protected byte CMKNDEVR3;
protected byte CMKNDEVR4;
protected byte CMKNDEVR96;
protected byte CMKNDEVR97;
protected byte CMLSTAT1;
protected byte CMLSTAT2;
protected byte CMNIL1;
protected byte CMNIL2;
protected byte CMNIL3;
protected byte CMNIL4;
protected byte CMNIL5;
protected byte CMNIL6;
protected byte CMNIL7;
protected byte CMNIL8;
protected byte CMNIL9;
protected byte CMNIL97;
protected byte CMOTHPAY1;
protected byte CMOTHPAY10;
protected byte CMOTHPAY11;
protected byte CMOTHPAY2;
protected byte CMOTHPAY3;
protected byte CMOTHPAY4;
protected byte CMOTHPAY5;
protected byte CMOTHPAY6;
protected byte CMOTHPAY7;
protected byte CMOTHPAY8;
protected byte CMOTHPAY9;
protected byte CMOTHPAY96;
protected byte CMOTHPAY97;
protected byte CMROUTE;
protected byte CMSAMEA;
protected byte CMSAMEB;
protected byte CMSAMEC;
protected byte CMVOL;
protected byte CMVOLALL;
protected double CMVOLAM;
protected byte CMVOLPER;
protected short CMVOLRCAM;
protected byte CMVOLRCPR;
protected byte CMVOLREC;
protected byte CMVOLTM;
protected byte COGDIST;
protected byte COGEND;
protected byte COH1BM;
protected short COH1BY;
protected byte COH1EM;
protected short COH1EY;
protected byte COH1MR;
protected byte COHAB;
protected byte COHABN;
protected boolean COHAB_DV;
protected byte COLBENS1;
protected byte COLBENS2;
protected byte COLBENS3;
protected byte COLBENS4;
protected byte COMIMMLS11;
protected byte COMIMMLS110;
protected byte COMIMMLS12;
protected byte COMIMMLS13;
protected byte COMIMMLS14;
protected byte COMIMMLS15;
protected byte COMIMMLS16;
protected byte COMIMMLS17;
protected byte COMIMMLS18;
protected byte COMIMMLS19;
protected byte COMIMMLS196;
protected byte COMIMMLS21;
protected byte COMIMMLS210;
protected byte COMIMMLS22;
protected byte COMIMMLS23;
protected byte COMIMMLS24;
protected byte COMIMMLS25;
protected byte COMIMMLS26;
protected byte COMIMMLS27;
protected byte COMIMMLS28;
protected byte COMIMMLS29;
protected byte COMIMMLS296;
protected byte COMIMMLS31;
protected byte COMIMMLS310;
protected byte COMIMMLS32;
protected byte COMIMMLS33;
protected byte COMIMMLS34;
protected byte COMIMMLS35;
protected byte COMIMMLS36;
protected byte COMIMMLS37;
protected byte COMIMMLS38;
protected byte COMIMMLS39;
protected byte COMIMMLS396;
protected byte COMIMMLS41;
protected byte COMIMMLS410;
protected byte COMIMMLS42;
protected byte COMIMMLS43;
protected byte COMIMMLS44;
protected byte COMIMMLS45;
protected byte COMIMMLS46;
protected byte COMIMMLS47;
protected byte COMIMMLS48;
protected byte COMIMMLS49;
protected byte COMIMMLS496;
protected byte CONTFT;
protected byte CORDRECPER;
protected byte COUNTRY;
protected byte CRDARK;
protected byte CRWORA;
protected byte CRWORB;
protected byte CSACALC;
protected double CSACALCAM;
protected byte CSAPAYTO;
protected byte CSARECPER;
protected byte CSTAT;
protected byte CTADD1_CODE;
protected byte CTADD2_CODE;
protected byte CTCNTY_CODE;
protected byte CTEMAIL_CODE;
protected byte CTPCODE_CODE;
protected byte CTTEL1_CODE;
protected byte CTTEL2_CODE;
protected byte CTTOWN_CODE;
protected byte CUDDLEKID;
protected byte CURRJOB1;
protected byte CURRJOB2;
protected byte CURRJOB3;
protected byte CURRJOB4;
protected byte CURRJOB5;
protected byte CURRJOB6;
protected byte CURRJOB7;
protected byte CURRJOB8;
protected byte CURRJOB9;
protected byte CURRPART1;
protected byte CURRPART2;
protected byte CURRPART3;
protected byte CURRSTAT1;
protected byte CURRSTAT2;
protected byte CURRSTAT3;
protected byte CURRSTAT4;
protected byte CURRSTAT5;
protected byte CURRSTAT6;
protected byte CURRSTAT7;
protected byte CURRSTAT8;
protected boolean CURRSTAT9;
protected byte DCSATM;
protected byte DELAYLS11;
protected byte DELAYLS110;
protected byte DELAYLS12;
protected byte DELAYLS13;
protected byte DELAYLS14;
protected byte DELAYLS15;
protected byte DELAYLS16;
protected byte DELAYLS17;
protected byte DELAYLS18;
protected byte DELAYLS19;
protected byte DELAYLS196;
protected byte DELAYLS21;
protected byte DELAYLS210;
protected byte DELAYLS22;
protected byte DELAYLS23;
protected byte DELAYLS24;
protected byte DELAYLS25;
protected byte DELAYLS26;
protected byte DELAYLS27;
protected byte DELAYLS28;
protected byte DELAYLS29;
protected byte DELAYLS296;
protected byte DELAYLS31;
protected byte DELAYLS310;
protected byte DELAYLS32;
protected byte DELAYLS33;
protected byte DELAYLS34;
protected byte DELAYLS35;
protected byte DELAYLS36;
protected byte DELAYLS37;
protected byte DELAYLS38;
protected byte DELAYLS39;
protected byte DELAYLS396;
protected byte DELAYLS41;
protected byte DELAYLS410;
protected byte DELAYLS42;
protected byte DELAYLS43;
protected byte DELAYLS44;
protected byte DELAYLS45;
protected byte DELAYLS46;
protected byte DELAYLS47;
protected byte DELAYLS48;
protected byte DELAYLS49;
protected byte DELAYLS496;
protected byte DELAYSTOP1;
protected byte DELAYSTOP2;
protected byte DELAYSTOP3;
protected byte DELAYSTOP4;
protected byte DELAYSTOP5;
protected byte DELAYSTOP6;
protected byte DELAYSTOP7;
protected byte DELAYSTOP8;
protected byte DELAYSTOP97;
protected byte DEMORIENT;
protected boolean DEPCHL_DV;
protected byte DINNER;
protected byte DISDIF1;
protected byte DISDIF10;
protected byte DISDIF11;
protected byte DISDIF12;
protected byte DISDIF2;
protected byte DISDIF3;
protected byte DISDIF4;
protected byte DISDIF5;
protected byte DISDIF6;
protected byte DISDIF7;
protected byte DISDIF8;
protected byte DISDIF9;
protected byte DISDIF96;
protected byte DISEFFECTS1;
protected byte DISEFFECTS2;
protected byte DISEFFECTS3;
protected byte DISEFFECTS4;
protected byte DISEFFECTS5;
protected byte DIVCHK1;
protected byte DIVCHK2;
protected byte DIVFIN1;
protected byte DIVFIN2;
protected byte DKLM;
protected byte DMEMCONT11;
protected byte DMEMCONT12;
protected byte DMEMCONT13;
protected byte DMEMCONT21;
protected byte DMEMCONT210;
protected byte DMEMCONT211;
protected byte DMEMCONT212;
protected byte DMEMCONT213;
protected byte DMEMCONT214;
protected byte DMEMCONT215;
protected byte DMEMCONT216;
protected byte DMEMCONT22;
protected byte DMEMCONT23;
protected byte DMEMCONT24;
protected byte DMEMCONT25;
protected byte DMEMCONT26;
protected byte DMEMCONT27;
protected byte DMEMCONT28;
protected byte DMEMCONT29;
protected byte DMEMCONT3;
protected short DOBY_DV;
protected byte DRGMJ;
protected byte DRGOTH;
protected byte DRGSOL;
protected byte DRIVE;
protected byte DRNK4W;
protected byte DVAGE;
protected byte DVM1;
protected byte DVM2;
protected short DVY41;
protected short DVY42;
protected byte EATLIVU;
protected byte EDASP;
protected short EDTYPE;
protected byte EDUCATION;
protected byte EED12;
protected byte EMPCHK;
protected byte EMPLOY;
protected byte EMPSTENDD;
protected byte EMPSTENDM;
protected short EMPSTENDY4;
protected byte ENDMNTH1;
protected byte ENDMNTH2;
protected byte ENDMNTH3;
protected short EPROSH;
protected byte ETHN_DV;
protected byte EVRALC;
protected byte EVRSMO;
protected byte EXPREAM;
protected byte EXSAME;
protected byte EXTNSA;
protected double EXTRATE;
protected byte EXTREST;
protected byte FAMILY;
protected byte FAMSUP;
protected byte FARKID;
protected byte FATHER;
protected byte FEDLIK;
protected byte FEDNT;
protected byte FEDNTO_CODE;
protected byte FENOW;
protected byte FFBRFEDLW;
protected byte FF_BENTYPE01;
protected byte FF_BENTYPE02;
protected byte FF_BENTYPE03;
protected byte FF_BENTYPE04;
protected byte FF_BENTYPE05;
protected byte FF_BENTYPE06;
protected byte FF_BENTYPE07;
protected byte FF_BENTYPE08;
protected byte FF_BENTYPE09;
protected byte FF_BENTYPE10;
protected byte FF_BENTYPE11;
protected byte FF_BENTYPE12;
protected byte FF_BENTYPE13;
protected byte FF_BENTYPE14;
protected byte FF_BENTYPE15;
protected byte FF_BENTYPE16;
protected byte FF_BENTYPE17;
protected byte FF_BENTYPE18;
protected byte FF_BENTYPE19;
protected byte FF_BENTYPE20;
protected byte FF_BENTYPE21;
protected byte FF_BENTYPE22;
protected byte FF_BENTYPE23;
protected byte FF_BENTYPE24;
protected byte FF_BENTYPE25;
protected byte FF_BENTYPE26;
protected byte FF_BENTYPE27;
protected byte FF_BENTYPE28;
protected byte FF_BENTYPE29;
protected byte FF_BENTYPE30;
protected byte FF_BENTYPE31;
protected byte FF_BENTYPE32;
protected byte FF_BENTYPE33;
protected byte FF_BENTYPE34;
protected byte FF_BENTYPE35;
protected byte FF_BENTYPE36;
protected byte FF_BENTYPE37;
protected byte FF_BENTYPE38;
protected byte FF_BENTYPE39;
protected byte FF_EMPLW;
protected byte FF_EVERINT;
protected byte FF_IVINTLANG;
protected byte FF_IVLOLW;
protected byte FF_JBMNGR;
protected byte FF_JBSEMP;
protected byte FF_JBSIZE;
protected byte FF_JBSTAT;
protected byte FF_OPRLG;
protected byte FF_OPRLG0;
protected byte FF_OPRLG0NI;
protected byte FF_TEL;
protected byte FF_UKBORN;
protected short FF_YR2UK4;
protected double FIBENOTHR_DV;
protected double FIBENOTHR_IF;
protected byte FIBENOTHR_TC;
protected double FIMNGRS_IF;
protected byte FIMNGRS_TC;
protected double FIMNINVNET_DV;
protected double FIMNLABGRS_IF;
protected byte FIMNLABGRS_TC;
protected double FIMNLABNET_DV;
protected byte FIMNLABNET_TC;
protected double FIMNMISDV;
protected double FIMNNET_DV;
protected double FIMNPEN_DV;
protected double FIMNPRBEN_DV;
protected double FIMNSBEN_DV;
protected byte FINFUT;
protected byte FIVEALCDR;
protected byte FIYRDB1;
protected byte FIYRDB2;
protected byte FIYRDB3;
protected byte FIYRDB4;
protected byte FIYRDB5;
protected byte FIYRDB6;
protected int FIYRDIA;
protected double FIYRINVINDV;
protected byte FIYRINVINIF;
protected boolean FIYRINVINTC;
protected int FNPID;
protected byte FNPNO;
protected int FNSPID;
protected byte FNSPNO;
protected byte FRDRG;
protected byte FROBULLI;
protected byte FROBULLY;
protected byte FRPBULLI;
protected byte FRPBULLY;
protected byte FT2ENDM1;
protected byte FT2ENDM2;
protected byte FT2ENDM3;
protected byte FT2ENDM4;
protected short FT2ENDY41;
protected short FT2ENDY42;
protected short FT2ENDY43;
protected short FT2ENDY44;
protected byte FTEDANY;
protected byte FTEDEND1;
protected byte FTEDEND2;
protected byte FTEDEND3;
protected byte FTEDEND4;
protected byte FTEDMOR1;
protected byte FTEDMOR2;
protected byte FTEDMOR3;
protected byte FTEDMOR4;
protected byte FTEDSTARTM1;
protected byte FTEDSTARTM2;
protected byte FTEDSTARTM3;
protected byte FTEDSTARTM4;
protected short FTEDSTARTY41;
protected short FTEDSTARTY42;
protected short FTEDSTARTY43;
protected short FTEDSTARTY44;
protected byte FTENDM;
protected short FTENDY4;
protected int FTEXV;
protected byte FTEXW;
protected byte FTQUALS;
protected short FUTRA;
protected short FUTRB;
protected short FUTRC;
protected short FUTRD;
protected short FUTRE;
protected short FUTRF;
protected short FUTRG;
protected short FUTRH;
protected short FUTRI;
protected short FUTRJ;
protected short FUTRK;
protected short FUTRL;
protected byte FUTUREINT;
protected int GRFPID;
protected byte GRFPNO;
protected int GRMPID;
protected byte GRMPNO;
protected byte GRPBFTS;
protected byte HASSTEP;
protected byte HCOND1;
protected byte HCOND10;
protected byte HCOND11;
protected byte HCOND12;
protected byte HCOND13;
protected byte HCOND14;
protected byte HCOND15;
protected byte HCOND16;
protected byte HCOND17;
protected byte HCOND2;
protected byte HCOND3;
protected byte HCOND4;
protected byte HCOND5;
protected byte HCOND6;
protected byte HCOND7;
protected byte HCOND8;
protected byte HCOND9;
protected byte HCOND96;
protected byte HCONDA01;
protected byte HCONDA02;
protected byte HCONDA03;
protected byte HCONDA04;
protected byte HCONDA05;
protected byte HCONDA06;
protected byte HCONDA07;
protected byte HCONDA08;
protected byte HCONDA09;
protected byte HCONDA10;
protected byte HCONDA11;
protected byte HCONDA12;
protected byte HCONDA13;
protected byte HCONDA14;
protected byte HCONDA15;
protected byte HCONDA16;
protected byte HCONDA17;
protected byte HCONDE6;
protected byte HCONDE7;
protected byte HCONDE96;
protected byte HCONDEA6;
protected byte HCONDEA7;
protected byte HCONDN1;
protected byte HCONDN10;
protected byte HCONDN11;
protected byte HCONDN12;
protected byte HCONDN13;
protected byte HCONDN14;
protected byte HCONDN15;
protected byte HCONDN16;
protected byte HCONDN17;
protected byte HCONDN2;
protected byte HCONDN3;
protected byte HCONDN4;
protected byte HCONDN5;
protected byte HCONDN6;
protected byte HCONDN7;
protected byte HCONDN8;
protected byte HCONDN9;
protected byte HCONDN96;
protected byte HCONDNO1;
protected byte HCONDNO2;
protected byte HCONDNO3;
protected byte HCONDNO4;
protected byte HCONDNO5;
protected byte HCONDNO6;
protected byte HCONDNO7;
protected byte HCONDNO8;
protected byte HCONDNS1;
protected byte HCONDNS2;
protected byte HCONDNS3;
protected byte HCONDNS4;
protected byte HCONDNS5;
protected byte HCONDNS6;
protected byte HCONDNS7;
protected byte HCONDNS8;
protected byte HCONDS01;
protected byte HCONDS02;
protected byte HCONDS03;
protected byte HCONDS04;
protected byte HCONDS05;
protected byte HCONDS08;
protected byte HCONDS09;
protected byte HCONDS10;
protected byte HCONDS11;
protected byte HCONDS12;
protected byte HCONDS13;
protected byte HCONDS14;
protected byte HCONDS15;
protected byte HCONDS16;
protected byte HCONDS17;
protected byte HEALTH;
protected byte HEARCOMPUTER;
protected byte HGADOPTF;
protected byte HGADOPTM;
protected byte HGPART;
protected byte HHRESP_DV;
protected byte HHTYPE_DV;
protected byte HITSIB;
protected byte HLPHMWK;
protected byte HOOD15;
protected byte HOSPC1;
protected byte HOSPC2;
protected byte HOSPC3;
protected byte HOSPC4;
protected byte HOSPC5;
protected byte HOSPC6;
protected byte HOSPC7;
protected byte HOSPC8;
protected short HOSPDC1;
protected short HOSPDC2;
protected short HOSPDC3;
protected byte HOSPDC4;
protected byte HOSPDC5;
protected byte HOSPDC6;
protected byte HOSPDC7;
protected byte HOSPDC8;
protected byte HOUSING;
protected int HRPID;
protected byte HRPNO;
protected byte IENDDATMM;
protected byte IENDDATSS;
protected byte IMMSTOP1;
protected byte IMMSTOP2;
protected byte IMMSTOP3;
protected byte IMMSTOP4;
protected byte IMMSTOP5;
protected byte IMMSTOP6;
protected byte IMMSTOP7;
protected byte IMMSTOP8;
protected byte IMMSTOP97;
protected double IND5MUS_LW;
protected double IND5MUS_XW;
protected double INDBD91_LW;
protected double INDBDUB_LW;
protected double INDIN01_LW;
protected double INDIN91_LW;
protected double INDINUB_LW;
protected double INDINUB_XW;
protected double INDINUS_LW;
protected byte INDMODE;
protected double INDNS91_LW;
protected double INDNSUB_LW;
protected double INDPXUB_LW;
protected double INDPXUB_XW;
protected double INDPXUS_LW;
protected double INDSCUB_LW;
protected double INDSCUB_XW;
protected double INDSCUS_LW;
protected byte INSULTED1;
protected byte INSULTED10;
protected byte INSULTED11;
protected byte INSULTED2;
protected byte INSULTED3;
protected byte INSULTED4;
protected byte INSULTED5;
protected byte INSULTED6;
protected byte INSULTED7;
protected byte INSULTED8;
protected byte INSULTED9;
protected byte INSULTED96;
protected byte INSULTED97;
protected byte INSULTEDO_CODE;
protected byte INSULTED_DV;
protected byte INTDATD_DV;
protected byte INTDATM_DV;
protected short INTDATY_DV;
protected byte INTIMMLS11;
protected byte INTIMMLS110;
protected byte INTIMMLS12;
protected byte INTIMMLS13;
protected byte INTIMMLS14;
protected byte INTIMMLS15;
protected byte INTIMMLS16;
protected byte INTIMMLS17;
protected byte INTIMMLS18;
protected byte INTIMMLS19;
protected byte INTIMMLS196;
protected byte INTIMMLS21;
protected byte INTIMMLS210;
protected byte INTIMMLS22;
protected byte INTIMMLS23;
protected byte INTIMMLS24;
protected byte INTIMMLS25;
protected byte INTIMMLS26;
protected byte INTIMMLS27;
protected byte INTIMMLS28;
protected byte INTIMMLS29;
protected byte INTIMMLS296;
protected byte INTIMMLS31;
protected byte INTIMMLS310;
protected byte INTIMMLS32;
protected byte INTIMMLS33;
protected byte INTIMMLS34;
protected byte INTIMMLS35;
protected byte INTIMMLS36;
protected byte INTIMMLS37;
protected byte INTIMMLS38;
protected byte INTIMMLS39;
protected byte INTIMMLS396;
protected byte INTIMMLS41;
protected byte INTIMMLS410;
protected byte INTIMMLS42;
protected byte INTIMMLS43;
protected byte INTIMMLS44;
protected byte INTIMMLS45;
protected byte INTIMMLS46;
protected byte INTIMMLS47;
protected byte INTIMMLS48;
protected byte INTIMMLS49;
protected byte INTIMMLS496;
protected byte INVITRO1;
protected byte INVITRO2;
protected byte INVITRO3;
protected byte IOUTCOME;
protected byte ISTRTDATMM;
protected byte ISTRTDATSS;
protected short ISTRTDATY;
protected short ISYEAR;
protected byte IVAFFCT11;
protected byte IVAFFCT12;
protected byte IVAFFCT13;
protected byte IVAFFCT14;
protected byte IVAFFCT15;
protected byte IVAFFCT17;
protected byte IVAFFCT21;
protected byte IVAFFCT22;
protected byte IVAFFCT23;
protected byte IVAFFCT27;
protected byte IVAFFCT30;
protected byte IVAFFCT97;
protected byte IVCOOP;
protected byte IVINFNCE;
protected byte IVLIBAL;
protected byte IVLIENG;
protected byte IVLITRANS;
protected byte IVLIWHO;
protected byte J1BOSS;
protected byte J1MNGR;
protected byte J1NONE;
protected byte J1NSSEC5_DV;
protected byte J1SEMP;
protected short J1SOC00_CC;
protected short J1SOC10_CC;
protected byte J1SOC90_CC;
protected byte J2NSSEC5_DV;
protected int J2PAY;
protected double J2PAYNET_DV;
protected short J2SOC00_CC;
protected short J2SOC10_CC;
protected short J2SOC90_CC;
protected byte JBATT1;
protected byte JBATT2;
protected byte JBATT3;
protected byte JBATT4;
protected byte JBATT5;
protected byte JBATT6;
protected byte JBATT7;
protected byte JBATT8;
protected byte JBATT9;
protected byte JBBGDATD;
protected byte JBBGDATM;
protected short JBBGDATY;
protected byte JBENDD;
protected byte JBENDM;
protected byte JBENDREAS;
protected short JBENDY4;
protected byte JBES2000;
protected byte JBIINDB_DV;
protected byte JBMNGRCHK;
protected byte JBNSSEC3_DV;
protected byte JBNSSEC5_DV;
protected byte JBNSSEDV;
protected byte JBOFFY;
protected byte JBRGSDV;
protected byte JBSAMR;
protected byte JBSAT;
protected byte JBSECTPUB;
protected short JBSEG_DV;
protected byte JBSEMPCHK;
protected byte JBSIC07CHK;
protected byte JBSIC07_CC;
protected byte JBSIZECHK;
protected byte JBSOC00CHK;
protected short JBSOC00_CC;
protected short JBSOC10_CC;
protected byte JBSOCGR_DV;
protected byte JBTERM1;
protected byte JBTERM2;
protected byte JLENDM;
protected byte JLES2000;
protected byte JLIINDB_DV;
protected byte JLNSSEC3_DV;
protected byte JLNSSEC5_DV;
protected byte JLNSSEDV;
protected byte JLRGSDV;
protected short JLSEG_DV;
protected byte JLSIC07_CC;
protected short JLSOC00_CC;
protected short JLSOC10_CC;
protected byte JOBDENY;
protected byte JOBHOURS1;
protected byte JOBHOURS2;
protected byte JOBHOURS3;
protected byte JOBHOURS4;
protected byte JOBHOURS5;
protected byte JOBHOURS6;
protected byte JOBHOURS7;
protected byte JOBHOURS8;
protected byte JOBHOURS9;
protected byte JOBLOOK;
protected byte JSPART;
protected int JSPAYU;
protected byte JSPAYW;
protected byte JSPRLS;
protected byte JSPRNI;
protected byte JSPRTX;
protected byte JSPYNI;
protected byte JSPYTX;
protected byte JSTYPEB;
protected byte JSWORKTRAV;
protected short JUBGN;
protected short JULK4X1;
protected short JULK4X2;
protected byte JULK4X3;
protected short JULK4X4;
protected short JULK4X5;
protected short JULK4X6;
protected byte JULK4X96;
protected byte KID2UNI01;
protected byte KID2UNI02;
protected byte KID2UNI03;
protected byte KID2UNI04;
protected byte KID2UNI05;
protected byte KID2UNI06;
protected byte KID2UNI07;
protected byte KID2UNI08;
protected byte KID2UNI09;
protected byte KID2UNI10;
protected byte KID2UNI11;
protected byte KID2UNI12;
protected byte KID2UNI13;
protected byte KID2UNI14;
protected byte KID2UNI15;
protected byte KID2UNI16;
protected byte KIDSPT;
protected byte LADOPT;
protected byte LATE;
protected byte LCHMULTI1;
protected byte LCHMULTI2;
protected byte LCHMULTI3;
protected byte LCOHNPI;
protected double LENINDINTV;
protected byte LEVELIMP;
protected byte LICENG;
protected byte LICTRANS;
protected byte LICWHO;
protected byte LIENG;
protected byte LIHOW;
protected byte LINGUA;
protected byte LITRANS;
protected byte LIVESP;
protected boolean LIVESP_DV;
protected byte LIVEWITH;
protected byte LIWHO;
protected byte LLKNBRD;
protected byte LMAR1M;
protected short LMAR1Y;
protected byte LMCBM1;
protected byte LMCBM2;
protected byte LMCBM3;
protected short LMCBY41;
protected short LMCBY42;
protected short LMCBY43;
protected byte LMSPM1;
protected byte LMSPM2;
protected byte LMSPM3;
protected short LMSPY41;
protected short LMSPY42;
protected short LMSPY43;
protected byte LNADOPT;
protected byte LNPRNT;
protected byte LOCSERAP;
protected byte LOCSERAS;
protected byte LOCSERB;
protected byte LOCSERC;
protected byte LOCSERD;
protected byte LOCSERE;
protected byte LPRNT;
protected byte LVHM;
protected byte LVMTHP;
protected byte LVREL1;
protected byte LVREL10;
protected byte LVREL2;
protected byte LVREL3;
protected byte LVREL4;
protected byte LVREL5;
protected byte LVREL6;
protected byte LVREL7;
protected byte LVREL8;
protected byte LVREL9;
protected byte LVREL96;
protected byte LVSCDO;
protected byte LVWHY;
protected short LVYRP;
protected byte LWWRONG;
protected byte MAAGE;
protected byte MACOB;
protected byte MACON;
protected byte MAFAR;
protected byte MAJU;
protected byte MALONE;
protected byte MAMOSTCON;
protected byte MANSSEC5_DV;
protected byte MARSTAT;
protected byte MASEE;
protected short MASOC00_CC;
protected short MASOC10_CC;
protected byte MASOC90_CC;
protected byte MASTAT_DV;
protected byte MATLEAVE;
protected byte MATLV;
protected byte MATLVENDD;
protected byte MATLVENDM;
protected short MATLVENDY4;
protected byte MATLVSTD;
protected byte MATLVSTM;
protected short MATLVSTY4;
protected byte MAYRUK;
protected byte MEMAID;
protected byte MEMCONT11;
protected byte MEMCONT12;
protected byte MEMCONT13;
protected byte MEMCONT21;
protected byte MEMCONT210;
protected byte MEMCONT211;
protected byte MEMCONT212;
protected byte MEMCONT213;
protected byte MEMCONT214;
protected byte MEMCONT215;
protected byte MEMCONT216;
protected byte MEMCONT22;
protected byte MEMCONT23;
protected byte MEMCONT24;
protected byte MEMCONT25;
protected byte MEMCONT26;
protected byte MEMCONT27;
protected byte MEMCONT28;
protected byte MEMCONT29;
protected byte MEMCONT3;
protected byte MEMPER;
protected byte MEMPLOY;
protected byte MEMPROB1;
protected byte MEMPROB2;
protected byte MEMPROB3;
protected byte MEMPROB4;
protected byte MIGCNTRY;
protected byte MIGPLNS;
protected byte MLAGST;
protected byte MLAGSTU;
protected byte MLFUTR;
protected byte MLRNOT1;
protected byte MLRNOT10;
protected byte MLRNOT11;
protected byte MLRNOT12;
protected byte MLRNOT13;
protected byte MLRNOT2;
protected byte MLRNOT3;
protected byte MLRNOT4;
protected byte MLRNOT5;
protected byte MLRNOT6;
protected byte MLRNOT7;
protected byte MLRNOT8;
protected byte MLRNOT9;
protected byte MLRNOT97;
protected byte MLSTATCHK;
protected byte MLWKFPT;
protected int MNPID;
protected byte MNPNO;
protected int MNSPID;
protected byte MNSPNO;
protected byte MOBUSE;
protected byte MONTH;
protected byte MOVDIR;
protected byte MOVEOTH_CODE;
protected byte MOVY11;
protected byte MOVY12;
protected byte MOVY13;
protected byte MOVY14;
protected byte MOVY15;
protected byte MOVY16;
protected byte MSTATCH1;
protected byte MSTATCH2;
protected short MSTATSAM;
protected byte MSTATSAMN;
protected byte MVEVER;
protected byte MVMNTH;
protected short MVYR;
protected byte NACAR;
protected byte NACONT11;
protected byte NACONT12;
protected byte NACONT13;
protected byte NACONT21;
protected byte NACONT210;
protected byte NACONT211;
protected byte NACONT212;
protected byte NACONT213;
protected byte NACONT214;
protected byte NACONT215;
protected byte NACONT216;
protected byte NACONT22;
protected byte NACONT23;
protected byte NACONT24;
protected byte NACONT25;
protected byte NACONT26;
protected byte NACONT27;
protected byte NACONT28;
protected byte NACONT29;
protected byte NACONT3;
protected byte NADISEASE;
protected byte NADOPTCH;
protected byte NADRINK;
protected byte NAIDXHH;
protected byte NAINTEREST;
protected byte NALOTTERY;
protected byte NASOFA;
protected byte NASTOP1;
protected byte NASTOP2;
protected byte NASTOP3;
protected byte NASTOP4;
protected byte NASTOP5;
protected byte NASTOP6;
protected byte NASTOP7;
protected byte NASTOP8;
protected byte NASTOP97;
protected byte NATCH01;
protected byte NATCH02;
protected byte NATCH03;
protected byte NATCH04;
protected byte NATCH05;
protected byte NATCH06;
protected byte NATCH07;
protected byte NATCH08;
protected byte NATCH09;
protected byte NATCH10;
protected byte NATCH11;
protected byte NATCH12;
protected boolean NATCH13;
protected boolean NATCH14;
protected boolean NATCH15;
protected boolean NATCH16;
protected byte NATID1;
protected byte NATID2;
protected byte NATID3;
protected byte NATID4;
protected byte NATID5;
protected byte NATID6;
protected byte NATID97;
protected byte NBRCOH1;
protected byte NBRCOH2;
protected byte NBRCOH3;
protected byte NBRCOH4;
protected byte NBRCOHDK_DV;
protected byte NBRCOH_DV;
protected double NBRSNCI_DV;
protected byte NCH10;
protected byte NCH10TO15;
protected byte NCH14RESP;
protected byte NCH3RESP;
protected byte NCH415RESP;
protected byte NCH5RESP;
protected byte NCH5TO15;
protected byte NCH8RESP;
protected byte NCHILD;
protected short NCHILD_DV;
protected byte NCHRESP;
protected byte NCHUND18RESP;
protected byte NCHUNDER16;
protected byte NCRR1;
protected byte NCRR11;
protected byte NCRR12;
protected byte NCRR3;
protected byte NCRR4;
protected byte NCRR5;
protected byte NCRR6;
protected byte NCRR8;
protected byte NCRR9;
protected byte NCRRM;
protected short NCRRY4;
protected byte NDEPCHL_DV;
protected short NETAG_1;
protected short NETAG_2;
protected short NETAG_3;
protected byte NETCHT;
protected byte NETDO10_1;
protected byte NETDO10_2;
protected byte NETDO10_3;
protected byte NETDO1_1;
protected byte NETDO1_2;
protected byte NETDO1_3;
protected byte NETDO2_1;
protected byte NETDO2_2;
protected byte NETDO2_3;
protected byte NETDO3_1;
protected byte NETDO3_2;
protected byte NETDO3_3;
protected byte NETDO4_1;
protected byte NETDO4_2;
protected byte NETDO4_3;
protected byte NETDO5_1;
protected byte NETDO5_2;
protected byte NETDO5_3;
protected byte NETDO6_1;
protected byte NETDO6_2;
protected byte NETDO6_3;
protected byte NETDO7_1;
protected byte NETDO7_2;
protected byte NETDO7_3;
protected byte NETDO8_1;
protected byte NETDO8_2;
protected byte NETDO8_3;
protected byte NETDO96_1;
protected byte NETDO96_2;
protected byte NETDO96_3;
protected byte NETDO97_1;
protected byte NETDO97_2;
protected byte NETDO97_3;
protected byte NETDO9_1;
protected byte NETDO9_2;
protected byte NETDO9_3;
protected byte NETET_1;
protected byte NETET_2;
protected byte NETET_3;
protected byte NETJB_1;
protected byte NETJB_2;
protected byte NETJB_3;
protected byte NETKN_1;
protected byte NETKN_2;
protected byte NETKN_3;
protected byte NETLV_1;
protected byte NETLV_2;
protected byte NETLV_3;
protected byte NETM2;
protected byte NETM2O_CODE;
protected byte NETMET_1;
protected byte NETMET_2;
protected byte NETMET_3;
protected short NETPH_1;
protected short NETPH_2;
protected short NETPH_3;
protected byte NETPUSE;
protected byte NETRL_1;
protected byte NETRL_2;
protected byte NETRL_3;
protected short NETSX_1;
protected short NETSX_2;
protected short NETSX_3;
protected byte NETTALK10_1;
protected byte NETTALK10_2;
protected byte NETTALK10_3;
protected byte NETTALK11_1;
protected byte NETTALK11_2;
protected byte NETTALK11_3;
protected byte NETTALK12_1;
protected byte NETTALK12_2;
protected byte NETTALK12_3;
protected byte NETTALK13_1;
protected byte NETTALK13_2;
protected byte NETTALK13_3;
protected byte NETTALK1_1;
protected byte NETTALK1_2;
protected byte NETTALK1_3;
protected byte NETTALK2_1;
protected byte NETTALK2_2;
protected byte NETTALK2_3;
protected byte NETTALK3_1;
protected byte NETTALK3_2;
protected byte NETTALK3_3;
protected byte NETTALK4_1;
protected byte NETTALK4_2;
protected byte NETTALK4_3;
protected byte NETTALK5_1;
protected byte NETTALK5_2;
protected byte NETTALK5_3;
protected byte NETTALK6_1;
protected byte NETTALK6_2;
protected byte NETTALK6_3;
protected byte NETTALK7_1;
protected byte NETTALK7_2;
protected byte NETTALK7_3;
protected byte NETTALK8_1;
protected byte NETTALK8_2;
protected byte NETTALK8_3;
protected byte NETTALK96_1;
protected byte NETTALK96_2;
protected byte NETTALK96_3;
protected byte NETTALK97_1;
protected byte NETTALK97_2;
protected byte NETTALK97_3;
protected byte NETTALK9_1;
protected byte NETTALK9_2;
protected byte NETTALK9_3;
protected byte NETUSE;
protected byte NETWEB_1;
protected byte NETWEB_2;
protected byte NETWEB_3;
protected short NETWR_1;
protected short NETWR_2;
protected short NETWR_3;
protected byte NEWSMAIN;
protected byte NEWSOURCE1;
protected byte NEWSOURCE10;
protected byte NEWSOURCE11;
protected byte NEWSOURCE12;
protected byte NEWSOURCE2;
protected byte NEWSOURCE3;
protected byte NEWSOURCE4;
protected byte NEWSOURCE5;
protected byte NEWSOURCE6;
protected byte NEWSOURCE7;
protected byte NEWSOURCE8;
protected byte NEWSOURCE9;
protected byte NEWSOURCE96;
protected byte NEXT1;
protected byte NEXT2;
protected byte NEXT3;
protected byte NEXT4;
protected byte NEXT5;
protected byte NEXT6;
protected byte NEXT7;
protected byte NEXT8;
protected byte NEXT9;
protected byte NEXTELSE1;
protected byte NEXTELSE2;
protected byte NEXTELSE3;
protected byte NEXTELSE4;
protected byte NEXTELSE5;
protected byte NEXTELSE6;
protected byte NEXTELSE7;
protected byte NEXTELSE8;
protected boolean NEXTELSE9;
protected byte NEXTJOB1;
protected byte NEXTJOB2;
protected byte NEXTJOB3;
protected byte NEXTJOB4;
protected byte NEXTJOB5;
protected byte NEXTJOB6;
protected byte NEXTJOB7;
protected byte NEXTJOB8;
protected byte NEXTJOB9;
protected byte NEXTSTAT1;
protected byte NEXTSTAT2;
protected byte NEXTSTAT3;
protected byte NEXTSTAT4;
protected byte NEXTSTAT5;
protected byte NEXTSTAT6;
protected byte NEXTSTAT7;
protected byte NEXTSTAT8;
protected byte NEXTSTAT9;
protected byte NFH01;
protected byte NFH02;
protected byte NFH03;
protected byte NFH04;
protected byte NFH05;
protected byte NFH06;
protected byte NFH07;
protected byte NFH08;
protected byte NFH09;
protected byte NFH10;
protected byte NFH11;
protected byte NFH12;
protected byte NFH13;
protected byte NFH14;
protected byte NFH15;
protected byte NFH16;
protected byte NFH17;
protected byte NFH18;
protected byte NFH19;
protected byte NFH20;
protected byte NFH21;
protected byte NFH22;
protected byte NFH23;
protected byte NFH24;
protected byte NFH25;
protected byte NFH26;
protected byte NFH27;
protected byte NFH28;
protected byte NFH29;
protected byte NFH30;
protected byte NFH31;
protected byte NFH32;
protected byte NFH33;
protected byte NFH34;
protected byte NFH35;
protected byte NFH36;
protected byte NFH37;
protected byte NFH38;
protected byte NFH39;
protected byte NGRP_DV;
protected byte NHIQUAL_DV;
protected byte NIACT;
protected byte NICLBNS1;
protected byte NICLBNS2;
protected byte NICLBNS3;
protected byte NICLBNS4;
protected byte NIREL;
protected byte NISERPS;
protected byte NMAR;
protected byte NMPSP_DV;
protected byte NNATCH;
protected byte NNEWBORN;
protected byte NNMPSP_DV;
protected byte NNSIB_DV;
protected byte NNSSIB_DV;
protected byte NOTEMPCHK;
protected byte NPENSIONER_DV;
protected byte NPNS_DV;
protected byte NPN_DV;
protected byte NQFHIGH_DV;
protected byte NRELS1;
protected byte NRELS2;
protected byte NRELS3;
protected byte NRELS4;
protected byte NRELS5;
protected byte NRELS6;
protected byte NS200PRE;
protected byte NS201G1;
protected byte NS202H1;
protected byte NS203I1;
protected byte NS204A1;
protected byte NS205B1;
protected byte NS206C1;
protected byte NS207D1;
protected byte NS208E1;
protected byte NS209F1;
protected byte NS210J1;
protected byte NS211K1;
protected byte NS212L1;
protected byte NS213M1;
protected byte NS214N1;
protected byte NS215O1;
protected byte NS216C;
protected byte NS221G2;
protected byte NS222H2;
protected byte NS223I2;
protected byte NS224A2;
protected byte NS225B2;
protected byte NS226C;
protected byte NS226C2;
protected byte NS227D2;
protected byte NS228E2;
protected byte NS229F2;
protected byte NS230J2;
protected byte NS231K2;
protected byte NS232L2;
protected byte NS233M2;
protected byte NS234N2;
protected byte NS235O2;
protected byte NS240;
protected byte NS241;
protected byte NS242;
protected byte NSCONT11;
protected byte NSCONT12;
protected byte NSCONT13;
protected byte NSCONT21;
protected byte NSCONT210;
protected byte NSCONT211;
protected byte NSCONT212;
protected byte NSCONT213;
protected byte NSCONT214;
protected byte NSCONT215;
protected byte NSCONT216;
protected byte NSCONT22;
protected byte NSCONT23;
protected byte NSCONT24;
protected byte NSCONT25;
protected byte NSCONT26;
protected byte NSCONT27;
protected byte NSCONT28;
protected byte NSCONT29;
protected byte NSCONT3;
protected byte NSRAN;
protected byte NSSTOP1;
protected byte NSSTOP2;
protected byte NSSTOP3;
protected byte NSSTOP4;
protected byte NSSTOP5;
protected byte NSSTOP6;
protected byte NSSTOP7;
protected byte NSSTOP8;
protected byte NSSTOP97;
protected byte NUABPRE;
protected byte NUNMPSP_DV;
protected byte NXTJBENDD;
protected byte NXTJBENDM;
protected short NXTJBENDY4;
protected byte NXTJBES;
protected byte NXTJBHRS;
protected byte NXTST;
protected byte NXTSTELSE;
protected byte NXTSTENDD;
protected byte NXTSTENDM;
protected short NXTSTENDY4;
protected byte OCIMPA;
protected byte OCIMPB;
protected byte OCIMPE;
protected byte OCIMPF;
protected byte OCIMPI;
protected byte OCIMPK;
protected byte OCIMPL;
protected byte OHCH16;
protected byte OPRLG;
protected byte OPRLG0;
protected byte OPRLG0NI;
protected byte OPRLG1;
protected byte ORG;
protected byte ORGA1;
protected byte ORGA10;
protected byte ORGA11;
protected byte ORGA12;
protected byte ORGA13;
protected byte ORGA14;
protected byte ORGA15;
protected byte ORGA16;
protected byte ORGA2;
protected byte ORGA3;
protected byte ORGA4;
protected byte ORGA5;
protected byte ORGA6;
protected byte ORGA7;
protected byte ORGA8;
protected byte ORGA9;
protected byte ORGA96;
protected byte ORGAT1;
protected byte ORGAT10;
protected byte ORGAT11;
protected byte ORGAT12;
protected byte ORGAT13;
protected byte ORGAT14;
protected byte ORGAT15;
protected byte ORGAT16;
protected byte ORGAT2;
protected byte ORGAT3;
protected byte ORGAT4;
protected byte ORGAT5;
protected byte ORGAT6;
protected byte ORGAT7;
protected byte ORGAT8;
protected byte ORGAT9;
protected byte ORGAT96;
protected byte ORGM1;
protected byte ORGM10;
protected byte ORGM11;
protected byte ORGM12;
protected byte ORGM13;
protected byte ORGM14;
protected byte ORGM15;
protected byte ORGM16;
protected byte ORGM2;
protected byte ORGM3;
protected byte ORGM4;
protected byte ORGM5;
protected byte ORGM6;
protected byte ORGM7;
protected byte ORGM8;
protected byte ORGM9;
protected byte ORGM96;
protected byte ORGMT1;
protected byte ORGMT10;
protected byte ORGMT11;
protected byte ORGMT12;
protected byte ORGMT13;
protected byte ORGMT14;
protected byte ORGMT15;
protected byte ORGMT16;
protected byte ORGMT2;
protected byte ORGMT3;
protected byte ORGMT4;
protected byte ORGMT5;
protected byte ORGMT6;
protected byte ORGMT7;
protected byte ORGMT8;
protected byte ORGMT9;
protected byte ORGMT96;
protected byte ORIGADD;
protected byte OVTNSA;
protected byte OVTPAY;
protected double OVTRATE;
protected byte OVTREST;
protected byte PAAGE;
protected byte PAAID1;
protected byte PAAID2;
protected byte PAAID3;
protected byte PAAID4;
protected byte PAAID5;
protected byte PAAID6;
protected byte PAAID7;
protected byte PAAID8;
protected byte PAAID96;
protected byte PAAID97;
protected byte PACOB;
protected byte PACON;
protected byte PAFAR;
protected byte PAIDU1;
protected byte PAIDU2;
protected byte PAIDU3;
protected byte PAIDU4;
protected byte PAIDU5;
protected byte PAIDU6;
protected byte PAIDU7;
protected byte PAIDU8;
protected byte PAIDU96;
protected byte PAIDU97;
protected byte PAJU;
protected byte PALONE;
protected byte PAMOSTCON;
protected byte PANSSEC5_DV;
protected short PAPERM2;
protected byte PARCHILD;
protected byte PAREVE;
protected byte PARMAR;
protected byte PARSCH;
protected byte PASEE;
protected short PASOC00_CC;
protected short PASOC10_CC;
protected byte PASOC90_CC;
protected byte PAYGWC;
protected double PAYG_DV;
protected byte PAYNWC;
protected byte PAYRUK;
protected byte PAYTYP;
protected byte PAYUWC;
protected double PAYU_DV;
protected byte PBNFT1;
protected byte PBNFT10;
protected byte PBNFT11;
protected byte PBNFT12;
protected byte PBNFT2;
protected byte PBNFT3;
protected byte PBNFT4;
protected byte PBNFT5;
protected byte PBNFT6;
protected byte PBNFT7;
protected byte PBNFT8;
protected byte PBNFT9;
protected byte PBNFT96;
protected byte PENMEX;
protected byte PENSIONER_DV;
protected byte PERBFTS;
protected byte PERPOLINF;
protected int PID;
protected byte PJBPTFT;
protected byte PJSPTFT;
protected byte PLIVPAR;
protected short PLNOWM;
protected short PLNOWY4;
protected int PN1PID;
protected byte PN1PNO;
protected byte PN1SEX;
protected int PN2PID;
protected byte PN2PNO;
protected byte PN2SEX;
protected int PNS1PID;
protected byte PNS1PNO;
protected byte PNS1SEX;
protected int PNS2PID;
protected byte PNS2PNO;
protected byte PNS2SEX;
protected byte POLCOST;
protected byte POLEFF1;
protected byte POLEFF2;
protected byte POLEFF3;
protected byte POLEFF4;
protected int PPID;
protected byte PPPEX;
protected byte PPPEXM;
protected byte PPSEX;
protected byte PRAISEKID;
protected byte PREARN;
protected byte PREARNA;
protected byte PREARNW;
protected byte PREASON;
protected byte PRECOG;
protected byte PREG;
protected byte PREGEND1;
protected byte PREGEND2;
protected byte PREGEND3;
protected byte PREGFERT1;
protected byte PREGFERT2;
protected byte PREGFERT3;
protected byte PREGM1;
protected byte PREGM2;
protected byte PREGM3;
protected byte PREGOUT1;
protected byte PREGOUT2;
protected byte PREGOUT3;
protected byte PREGSMK11;
protected byte PREGSMK12;
protected byte PREGSMK13;
protected byte PREGSMK21;
protected byte PREGSMK22;
protected byte PREGSMK23;
protected byte PREGSMK31;
protected byte PREGSMK32;
protected byte PREGSMK33;
protected byte PREGSMOKE1;
protected byte PREGSMOKE2;
protected byte PREGSMOKE3;
protected short PREGY41;
protected short PREGY42;
protected short PREGY43;
protected byte PREL;
protected byte PRFITB;
protected byte PRFITBA;
protected byte PRFITBW;
protected byte PROMODENY;
protected byte PS1;
protected byte PS10;
protected byte PS11;
protected byte PS12;
protected byte PS13;
protected byte PS14;
protected byte PS15;
protected byte PS16;
protected byte PS17;
protected byte PS18;
protected byte PS19;
protected byte PS2;
protected byte PS20;
protected byte PS21;
protected byte PS22;
protected byte PS23;
protected byte PS24;
protected byte PS25;
protected byte PS26;
protected byte PS27;
protected byte PS28;
protected byte PS29;
protected byte PS3;
protected byte PS30;
protected byte PS31;
protected byte PS32;
protected byte PS4;
protected byte PS5;
protected byte PS6;
protected byte PS7;
protected byte PS8;
protected byte PS9;
protected byte PSDQA_DV;
protected byte PSDQB_DV;
protected byte PSDQDV;
protected byte PSIBLINGS;
protected byte PSNUMCH;
protected int PSU;
protected byte PYENRL;
protected byte QFHIGH;
protected boolean QFHIGHFL_DV;
protected byte QFHIGH_DV;
protected byte QFVOC1;
protected byte QFVOC10;
protected byte QFVOC11;
protected byte QFVOC12;
protected byte QFVOC13;
protected byte QFVOC14;
protected byte QFVOC15;
protected byte QFVOC2;
protected byte QFVOC3;
protected byte QFVOC4;
protected byte QFVOC5;
protected byte QFVOC6;
protected byte QFVOC7;
protected byte QFVOC8;
protected byte QFVOC9;
protected byte QFVOC96;
protected byte QUALNEW1;
protected byte QUALNEW10;
protected byte QUALNEW11;
protected byte QUALNEW13;
protected byte QUALNEW15;
protected byte QUALNEW16;
protected byte QUALNEW17;
protected byte QUALNEW18;
protected byte QUALNEW19;
protected byte QUALNEW2;
protected byte QUALNEW20;
protected byte QUALNEW21;
protected byte QUALNEW22;
protected byte QUALNEW23;
protected byte QUALNEW24;
protected byte QUALNEW25;
protected byte QUALNEW26;
protected byte QUALNEW27;
protected byte QUALNEW28;
protected byte QUALNEW29;
protected byte QUALNEW3;
protected byte QUALNEW30;
protected byte QUALNEW31;
protected byte QUALNEW4;
protected byte QUALNEW5;
protected byte QUALNEW6;
protected byte QUALNEW7;
protected byte QUALNEW8;
protected byte QUALNEW9;
protected byte QUALOC;
protected byte QUARREL;
protected byte RACEL;
protected byte RACELAT;
protected byte RACELBT;
protected byte RACELMT;
protected byte RACELOT_CODE;
protected short RACELO_CODE;
protected byte RACELT;
protected byte RACELWT;
protected byte RACEL_DV;
protected byte READTEST;
protected byte REASEND1;
protected byte REASEND2;
protected byte REASEND3;
protected byte REASEND4;
protected byte REASEND5;
protected byte REASEND6;
protected byte REASEND7;
protected boolean REASEND8;
protected byte REASEND9;
protected byte RELKID;
protected byte RELUP;
protected byte REMAIL_CODE;
protected byte RESATTACKED1_1;
protected byte RESATTACKED1_10;
protected byte RESATTACKED1_11;
protected byte RESATTACKED1_12;
protected byte RESATTACKED1_2;
protected byte RESATTACKED1_3;
protected byte RESATTACKED1_4;
protected byte RESATTACKED1_5;
protected byte RESATTACKED1_6;
protected byte RESATTACKED1_7;
protected byte RESATTACKED1_8;
protected byte RESATTACKED1_9;
protected byte RESATTACKED2_1;
protected byte RESATTACKED2_10;
protected byte RESATTACKED2_11;
protected byte RESATTACKED2_12;
protected byte RESATTACKED2_2;
protected byte RESATTACKED2_3;
protected byte RESATTACKED2_4;
protected byte RESATTACKED2_5;
protected byte RESATTACKED2_6;
protected byte RESATTACKED2_7;
protected byte RESATTACKED2_8;
protected byte RESATTACKED2_9;
protected byte RESATTACKED3_1;
protected byte RESATTACKED3_10;
protected byte RESATTACKED3_11;
protected byte RESATTACKED3_12;
protected byte RESATTACKED3_2;
protected byte RESATTACKED3_3;
protected byte RESATTACKED3_4;
protected byte RESATTACKED3_5;
protected byte RESATTACKED3_6;
protected byte RESATTACKED3_7;
protected byte RESATTACKED3_8;
protected byte RESATTACKED3_9;
protected byte RESATTACKED4_1;
protected byte RESATTACKED4_10;
protected byte RESATTACKED4_11;
protected byte RESATTACKED4_12;
protected byte RESATTACKED4_2;
protected byte RESATTACKED4_3;
protected byte RESATTACKED4_4;
protected byte RESATTACKED4_5;
protected byte RESATTACKED4_6;
protected byte RESATTACKED4_7;
protected byte RESATTACKED4_8;
protected byte RESATTACKED4_9;
protected byte RESATTACKED5_1;
protected byte RESATTACKED5_10;
protected byte RESATTACKED5_11;
protected byte RESATTACKED5_12;
protected byte RESATTACKED5_2;
protected byte RESATTACKED5_3;
protected byte RESATTACKED5_4;
protected byte RESATTACKED5_5;
protected byte RESATTACKED5_6;
protected byte RESATTACKED5_7;
protected byte RESATTACKED5_8;
protected byte RESATTACKED5_9;
protected byte RESATTACKED6_1;
protected byte RESATTACKED6_10;
protected byte RESATTACKED6_11;
protected byte RESATTACKED6_12;
protected byte RESATTACKED6_2;
protected byte RESATTACKED6_3;
protected byte RESATTACKED6_4;
protected byte RESATTACKED6_5;
protected byte RESATTACKED6_6;
protected byte RESATTACKED6_7;
protected byte RESATTACKED6_8;
protected byte RESATTACKED6_9;
protected byte RESATTACKED7_1;
protected byte RESATTACKED7_10;
protected byte RESATTACKED7_11;
protected byte RESATTACKED7_12;
protected byte RESATTACKED7_2;
protected byte RESATTACKED7_3;
protected byte RESATTACKED7_4;
protected byte RESATTACKED7_5;
protected byte RESATTACKED7_6;
protected byte RESATTACKED7_7;
protected byte RESATTACKED7_8;
protected byte RESATTACKED7_9;
protected byte RESATTACKED8_1;
protected byte RESATTACKED8_10;
protected byte RESATTACKED8_11;
protected byte RESATTACKED8_12;
protected byte RESATTACKED8_2;
protected byte RESATTACKED8_3;
protected byte RESATTACKED8_4;
protected byte RESATTACKED8_5;
protected byte RESATTACKED8_6;
protected byte RESATTACKED8_7;
protected byte RESATTACKED8_8;
protected byte RESATTACKED8_9;
protected byte RESATTACKED96_1;
protected byte RESATTACKED96_10;
protected byte RESATTACKED96_11;
protected byte RESATTACKED96_12;
protected byte RESATTACKED96_2;
protected byte RESATTACKED96_3;
protected byte RESATTACKED96_4;
protected byte RESATTACKED96_5;
protected byte RESATTACKED96_6;
protected byte RESATTACKED96_7;
protected byte RESATTACKED96_8;
protected byte RESATTACKED96_9;
protected byte RESATTACKED97_1;
protected byte RESATTACKED97_10;
protected byte RESATTACKED97_11;
protected byte RESATTACKED97_12;
protected byte RESATTACKED97_2;
protected byte RESATTACKED97_3;
protected byte RESATTACKED97_4;
protected byte RESATTACKED97_5;
protected byte RESATTACKED97_6;
protected byte RESATTACKED97_7;
protected byte RESATTACKED97_8;
protected byte RESATTACKED97_9;
protected byte RESATTACKED9_1;
protected byte RESATTACKED9_10;
protected byte RESATTACKED9_11;
protected byte RESATTACKED9_12;
protected byte RESATTACKED9_2;
protected byte RESATTACKED9_3;
protected byte RESATTACKED9_4;
protected byte RESATTACKED9_5;
protected byte RESATTACKED9_6;
protected byte RESATTACKED9_7;
protected byte RESATTACKED9_8;
protected byte RESATTACKED9_9;
protected byte RESAVOID1_1;
protected byte RESAVOID1_10;
protected byte RESAVOID1_11;
protected byte RESAVOID1_12;
protected byte RESAVOID1_2;
protected byte RESAVOID1_3;
protected byte RESAVOID1_4;
protected byte RESAVOID1_5;
protected byte RESAVOID1_6;
protected byte RESAVOID1_7;
protected byte RESAVOID1_8;
protected byte RESAVOID1_9;
protected byte RESAVOID2_1;
protected byte RESAVOID2_10;
protected byte RESAVOID2_11;
protected byte RESAVOID2_12;
protected byte RESAVOID2_2;
protected byte RESAVOID2_3;
protected byte RESAVOID2_4;
protected byte RESAVOID2_5;
protected byte RESAVOID2_6;
protected byte RESAVOID2_7;
protected byte RESAVOID2_8;
protected byte RESAVOID2_9;
protected byte RESAVOID3_1;
protected byte RESAVOID3_10;
protected byte RESAVOID3_11;
protected byte RESAVOID3_12;
protected byte RESAVOID3_2;
protected byte RESAVOID3_3;
protected byte RESAVOID3_4;
protected byte RESAVOID3_5;
protected byte RESAVOID3_6;
protected byte RESAVOID3_7;
protected byte RESAVOID3_8;
protected byte RESAVOID3_9;
protected byte RESAVOID4_1;
protected byte RESAVOID4_10;
protected byte RESAVOID4_11;
protected byte RESAVOID4_12;
protected byte RESAVOID4_2;
protected byte RESAVOID4_3;
protected byte RESAVOID4_4;
protected byte RESAVOID4_5;
protected byte RESAVOID4_6;
protected byte RESAVOID4_7;
protected byte RESAVOID4_8;
protected byte RESAVOID4_9;
protected byte RESAVOID5_1;
protected byte RESAVOID5_10;
protected byte RESAVOID5_11;
protected byte RESAVOID5_12;
protected byte RESAVOID5_2;
protected byte RESAVOID5_3;
protected byte RESAVOID5_4;
protected byte RESAVOID5_5;
protected byte RESAVOID5_6;
protected byte RESAVOID5_7;
protected byte RESAVOID5_8;
protected byte RESAVOID5_9;
protected byte RESAVOID6_1;
protected byte RESAVOID6_10;
protected byte RESAVOID6_11;
protected byte RESAVOID6_12;
protected byte RESAVOID6_2;
protected byte RESAVOID6_3;
protected byte RESAVOID6_4;
protected byte RESAVOID6_5;
protected byte RESAVOID6_6;
protected byte RESAVOID6_7;
protected byte RESAVOID6_8;
protected byte RESAVOID6_9;
protected byte RESAVOID7_1;
protected byte RESAVOID7_10;
protected byte RESAVOID7_11;
protected byte RESAVOID7_12;
protected byte RESAVOID7_2;
protected byte RESAVOID7_3;
protected byte RESAVOID7_4;
protected byte RESAVOID7_5;
protected byte RESAVOID7_6;
protected byte RESAVOID7_7;
protected byte RESAVOID7_8;
protected byte RESAVOID7_9;
protected byte RESAVOID8_1;
protected byte RESAVOID8_10;
protected byte RESAVOID8_11;
protected byte RESAVOID8_12;
protected byte RESAVOID8_2;
protected byte RESAVOID8_3;
protected byte RESAVOID8_4;
protected byte RESAVOID8_5;
protected byte RESAVOID8_6;
protected byte RESAVOID8_7;
protected byte RESAVOID8_8;
protected byte RESAVOID8_9;
protected byte RESAVOID96_1;
protected byte RESAVOID96_10;
protected byte RESAVOID96_11;
protected byte RESAVOID96_12;
protected byte RESAVOID96_2;
protected byte RESAVOID96_3;
protected byte RESAVOID96_4;
protected byte RESAVOID96_5;
protected byte RESAVOID96_6;
protected byte RESAVOID96_7;
protected byte RESAVOID96_8;
protected byte RESAVOID96_9;
protected byte RESAVOID97_1;
protected byte RESAVOID97_10;
protected byte RESAVOID97_11;
protected byte RESAVOID97_12;
protected byte RESAVOID97_2;
protected byte RESAVOID97_3;
protected byte RESAVOID97_4;
protected byte RESAVOID97_5;
protected byte RESAVOID97_6;
protected byte RESAVOID97_7;
protected byte RESAVOID97_8;
protected byte RESAVOID97_9;
protected byte RESAVOID9_1;
protected byte RESAVOID9_10;
protected byte RESAVOID9_11;
protected byte RESAVOID9_12;
protected byte RESAVOID9_2;
protected byte RESAVOID9_3;
protected byte RESAVOID9_4;
protected byte RESAVOID9_5;
protected byte RESAVOID9_6;
protected byte RESAVOID9_7;
protected byte RESAVOID9_8;
protected byte RESAVOID9_9;
protected byte RESINSULTED1_1;
protected byte RESINSULTED1_10;
protected byte RESINSULTED1_11;
protected byte RESINSULTED1_12;
protected byte RESINSULTED1_2;
protected byte RESINSULTED1_3;
protected byte RESINSULTED1_4;
protected byte RESINSULTED1_5;
protected byte RESINSULTED1_6;
protected byte RESINSULTED1_7;
protected byte RESINSULTED1_8;
protected byte RESINSULTED1_9;
protected byte RESINSULTED2_1;
protected byte RESINSULTED2_10;
protected byte RESINSULTED2_11;
protected byte RESINSULTED2_12;
protected byte RESINSULTED2_2;
protected byte RESINSULTED2_3;
protected byte RESINSULTED2_4;
protected byte RESINSULTED2_5;
protected byte RESINSULTED2_6;
protected byte RESINSULTED2_7;
protected byte RESINSULTED2_8;
protected byte RESINSULTED2_9;
protected byte RESINSULTED3_1;
protected byte RESINSULTED3_10;
protected byte RESINSULTED3_11;
protected byte RESINSULTED3_12;
protected byte RESINSULTED3_2;
protected byte RESINSULTED3_3;
protected byte RESINSULTED3_4;
protected byte RESINSULTED3_5;
protected byte RESINSULTED3_6;
protected byte RESINSULTED3_7;
protected byte RESINSULTED3_8;
protected byte RESINSULTED3_9;
protected byte RESINSULTED4_1;
protected byte RESINSULTED4_10;
protected byte RESINSULTED4_11;
protected byte RESINSULTED4_12;
protected byte RESINSULTED4_2;
protected byte RESINSULTED4_3;
protected byte RESINSULTED4_4;
protected byte RESINSULTED4_5;
protected byte RESINSULTED4_6;
protected byte RESINSULTED4_7;
protected byte RESINSULTED4_8;
protected byte RESINSULTED4_9;
protected byte RESINSULTED5_1;
protected byte RESINSULTED5_10;
protected byte RESINSULTED5_11;
protected byte RESINSULTED5_12;
protected byte RESINSULTED5_2;
protected byte RESINSULTED5_3;
protected byte RESINSULTED5_4;
protected byte RESINSULTED5_5;
protected byte RESINSULTED5_6;
protected byte RESINSULTED5_7;
protected byte RESINSULTED5_8;
protected byte RESINSULTED5_9;
protected byte RESINSULTED6_1;
protected byte RESINSULTED6_10;
protected byte RESINSULTED6_11;
protected byte RESINSULTED6_12;
protected byte RESINSULTED6_2;
protected byte RESINSULTED6_3;
protected byte RESINSULTED6_4;
protected byte RESINSULTED6_5;
protected byte RESINSULTED6_6;
protected byte RESINSULTED6_7;
protected byte RESINSULTED6_8;
protected byte RESINSULTED6_9;
protected byte RESINSULTED7_1;
protected byte RESINSULTED7_10;
protected byte RESINSULTED7_11;
protected byte RESINSULTED7_12;
protected byte RESINSULTED7_2;
protected byte RESINSULTED7_3;
protected byte RESINSULTED7_4;
protected byte RESINSULTED7_5;
protected byte RESINSULTED7_6;
protected byte RESINSULTED7_7;
protected byte RESINSULTED7_8;
protected byte RESINSULTED7_9;
protected byte RESINSULTED8_1;
protected byte RESINSULTED8_10;
protected byte RESINSULTED8_11;
protected byte RESINSULTED8_12;
protected byte RESINSULTED8_2;
protected byte RESINSULTED8_3;
protected byte RESINSULTED8_4;
protected byte RESINSULTED8_5;
protected byte RESINSULTED8_6;
protected byte RESINSULTED8_7;
protected byte RESINSULTED8_8;
protected byte RESINSULTED8_9;
protected byte RESINSULTED96_1;
protected byte RESINSULTED96_10;
protected byte RESINSULTED96_11;
protected byte RESINSULTED96_12;
protected byte RESINSULTED96_2;
protected byte RESINSULTED96_3;
protected byte RESINSULTED96_4;
protected byte RESINSULTED96_5;
protected byte RESINSULTED96_6;
protected byte RESINSULTED96_7;
protected byte RESINSULTED96_8;
protected byte RESINSULTED96_9;
protected byte RESINSULTED97_1;
protected byte RESINSULTED97_10;
protected byte RESINSULTED97_11;
protected byte RESINSULTED97_12;
protected byte RESINSULTED97_2;
protected byte RESINSULTED97_3;
protected byte RESINSULTED97_4;
protected byte RESINSULTED97_5;
protected byte RESINSULTED97_6;
protected byte RESINSULTED97_7;
protected byte RESINSULTED97_8;
protected byte RESINSULTED97_9;
protected byte RESINSULTED9_1;
protected byte RESINSULTED9_10;
protected byte RESINSULTED9_11;
protected byte RESINSULTED9_12;
protected byte RESINSULTED9_2;
protected byte RESINSULTED9_3;
protected byte RESINSULTED9_4;
protected byte RESINSULTED9_5;
protected byte RESINSULTED9_6;
protected byte RESINSULTED9_7;
protected byte RESINSULTED9_8;
protected byte RESINSULTED9_9;
protected byte RESJOBDENY1;
protected byte RESJOBDENY2;
protected byte RESJOBDENY3;
protected byte RESJOBDENY4;
protected byte RESJOBDENY5;
protected byte RESJOBDENY6;
protected byte RESJOBDENY7;
protected byte RESJOBDENY8;
protected byte RESJOBDENY9;
protected byte RESJOBDENY96;
protected byte RESJOBDENY97;
protected boolean RESPF16;
protected boolean RESPF16_DV;
protected boolean RESPM16;
protected boolean RESPM16_DV;
protected byte RESPROMDENY1;
protected byte RESPROMDENY2;
protected byte RESPROMDENY3;
protected byte RESPROMDENY4;
protected byte RESPROMDENY5;
protected byte RESPROMDENY6;
protected byte RESPROMDENY7;
protected byte RESPROMDENY8;
protected byte RESPROMDENY9;
protected byte RESPROMDENY96;
protected byte RESPROMDENY97;
protected byte RESTRAINDENY1;
protected byte RESTRAINDENY2;
protected byte RESTRAINDENY3;
protected byte RESTRAINDENY4;
protected byte RESTRAINDENY5;
protected byte RESTRAINDENY6;
protected byte RESTRAINDENY7;
protected byte RESTRAINDENY8;
protected byte RESTRAINDENY9;
protected byte RESTRAINDENY96;
protected byte RESTRAINDENY97;
protected byte RESUNSAFE1_1;
protected byte RESUNSAFE1_10;
protected byte RESUNSAFE1_11;
protected byte RESUNSAFE1_12;
protected byte RESUNSAFE1_2;
protected byte RESUNSAFE1_3;
protected byte RESUNSAFE1_4;
protected byte RESUNSAFE1_5;
protected byte RESUNSAFE1_6;
protected byte RESUNSAFE1_7;
protected byte RESUNSAFE1_8;
protected byte RESUNSAFE1_9;
protected byte RESUNSAFE2_1;
protected byte RESUNSAFE2_10;
protected byte RESUNSAFE2_11;
protected byte RESUNSAFE2_12;
protected byte RESUNSAFE2_2;
protected byte RESUNSAFE2_3;
protected byte RESUNSAFE2_4;
protected byte RESUNSAFE2_5;
protected byte RESUNSAFE2_6;
protected byte RESUNSAFE2_7;
protected byte RESUNSAFE2_8;
protected byte RESUNSAFE2_9;
protected byte RESUNSAFE3_1;
protected byte RESUNSAFE3_10;
protected byte RESUNSAFE3_11;
protected byte RESUNSAFE3_12;
protected byte RESUNSAFE3_2;
protected byte RESUNSAFE3_3;
protected byte RESUNSAFE3_4;
protected byte RESUNSAFE3_5;
protected byte RESUNSAFE3_6;
protected byte RESUNSAFE3_7;
protected byte RESUNSAFE3_8;
protected byte RESUNSAFE3_9;
protected byte RESUNSAFE4_1;
protected byte RESUNSAFE4_10;
protected byte RESUNSAFE4_11;
protected byte RESUNSAFE4_12;
protected byte RESUNSAFE4_2;
protected byte RESUNSAFE4_3;
protected byte RESUNSAFE4_4;
protected byte RESUNSAFE4_5;
protected byte RESUNSAFE4_6;
protected byte RESUNSAFE4_7;
protected byte RESUNSAFE4_8;
protected byte RESUNSAFE4_9;
protected byte RESUNSAFE5_1;
protected byte RESUNSAFE5_10;
protected byte RESUNSAFE5_11;
protected byte RESUNSAFE5_12;
protected byte RESUNSAFE5_2;
protected byte RESUNSAFE5_3;
protected byte RESUNSAFE5_4;
protected byte RESUNSAFE5_5;
protected byte RESUNSAFE5_6;
protected byte RESUNSAFE5_7;
protected byte RESUNSAFE5_8;
protected byte RESUNSAFE5_9;
protected byte RESUNSAFE6_1;
protected byte RESUNSAFE6_10;
protected byte RESUNSAFE6_11;
protected byte RESUNSAFE6_12;
protected byte RESUNSAFE6_2;
protected byte RESUNSAFE6_3;
protected byte RESUNSAFE6_4;
protected byte RESUNSAFE6_5;
protected byte RESUNSAFE6_6;
protected byte RESUNSAFE6_7;
protected byte RESUNSAFE6_8;
protected byte RESUNSAFE6_9;
protected byte RESUNSAFE7_1;
protected byte RESUNSAFE7_10;
protected byte RESUNSAFE7_11;
protected byte RESUNSAFE7_12;
protected byte RESUNSAFE7_2;
protected byte RESUNSAFE7_3;
protected byte RESUNSAFE7_4;
protected byte RESUNSAFE7_5;
protected byte RESUNSAFE7_6;
protected byte RESUNSAFE7_7;
protected byte RESUNSAFE7_8;
protected byte RESUNSAFE7_9;
protected byte RESUNSAFE8_1;
protected byte RESUNSAFE8_10;
protected byte RESUNSAFE8_11;
protected byte RESUNSAFE8_12;
protected byte RESUNSAFE8_2;
protected byte RESUNSAFE8_3;
protected byte RESUNSAFE8_4;
protected byte RESUNSAFE8_5;
protected byte RESUNSAFE8_6;
protected byte RESUNSAFE8_7;
protected byte RESUNSAFE8_8;
protected byte RESUNSAFE8_9;
protected byte RESUNSAFE96_1;
protected byte RESUNSAFE96_10;
protected byte RESUNSAFE96_11;
protected byte RESUNSAFE96_12;
protected byte RESUNSAFE96_2;
protected byte RESUNSAFE96_3;
protected byte RESUNSAFE96_4;
protected byte RESUNSAFE96_5;
protected byte RESUNSAFE96_6;
protected byte RESUNSAFE96_7;
protected byte RESUNSAFE96_8;
protected byte RESUNSAFE96_9;
protected byte RESUNSAFE97_1;
protected byte RESUNSAFE97_10;
protected byte RESUNSAFE97_11;
protected byte RESUNSAFE97_12;
protected byte RESUNSAFE97_2;
protected byte RESUNSAFE97_3;
protected byte RESUNSAFE97_4;
protected byte RESUNSAFE97_5;
protected byte RESUNSAFE97_6;
protected byte RESUNSAFE97_7;
protected byte RESUNSAFE97_8;
protected byte RESUNSAFE97_9;
protected byte RESUNSAFE9_1;
protected byte RESUNSAFE9_10;
protected byte RESUNSAFE9_11;
protected byte RESUNSAFE9_12;
protected byte RESUNSAFE9_2;
protected byte RESUNSAFE9_3;
protected byte RESUNSAFE9_4;
protected byte RESUNSAFE9_5;
protected byte RESUNSAFE9_6;
protected byte RESUNSAFE9_7;
protected byte RESUNSAFE9_8;
protected byte RESUNSAFE9_9;
protected byte RETAMT;
protected byte RETCHK;
protected byte RETSUF;
protected byte RHLAND_CODE;
protected byte RPHMOB_CODE;
protected byte RPHWRK_CODE;
protected byte RTCON1;
protected byte RTCON2;
protected byte RTCON3;
protected byte RTCON4;
protected byte RTEXPJB;
protected byte RTFND1;
protected byte RTFND10;
protected byte RTFND2;
protected byte RTFND3;
protected byte RTFND4;
protected byte RTFND5;
protected byte RTFND6;
protected byte RTFND7;
protected byte RTFND8;
protected byte RTFND9;
protected byte RTFND96;
protected byte RTPRO1;
protected byte RTPRO2;
protected byte RTPRO3;
protected byte RTPRO4;
protected byte RTPRO5;
protected byte RTPRO6;
protected byte RULESKID;
protected byte SAMEJOB;
protected short SAMPST;
protected byte SATTRANSY1;
protected byte SATTRANSY10;
protected byte SATTRANSY2;
protected byte SATTRANSY3;
protected byte SATTRANSY4;
protected byte SATTRANSY5;
protected byte SATTRANSY6;
protected byte SATTRANSY7;
protected byte SATTRANSY8;
protected byte SATTRANSY9;
protected byte SATTRANSY97;
protected byte SCAC;
protected byte SCDASSAT_DV;
protected byte SCFLAG_DV;
protected byte SCHLLOC;
protected byte SCHOK;
protected byte SCLFSAT1;
protected byte SCLFSAT2;
protected byte SCLFSAT7;
protected byte SCLFSATO;
protected byte SCOPNGBHA;
protected byte SCOPNGBHB;
protected byte SCOPNGBHC;
protected byte SCOPNGBHD;
protected byte SCOPNGBHE;
protected byte SCOPNGBHF;
protected byte SCOPNGBHG;
protected byte SCOPNGBHH;
protected byte SCPAROUTINTW3;
protected byte SCPTRT5A1;
protected byte SCPTRT5A2;
protected byte SCPTRT5A3;
protected byte SCPTRT5C1;
protected byte SCPTRT5C2;
protected byte SCPTRT5C3;
protected byte SCPTRT5E1;
protected byte SCPTRT5E2;
protected byte SCPTRT5E3;
protected byte SCPTRT5N1;
protected byte SCPTRT5N2;
protected byte SCPTRT5N3;
protected byte SCPTRT5O1;
protected byte SCPTRT5O2;
protected byte SCPTRT5O3;
protected byte SCRELHAPPY;
protected byte SCRELPARAR;
protected byte SCRELPARCD;
protected byte SCRELPARDS;
protected byte SCRELPAREI;
protected byte SCRELPARIR;
protected byte SCRELPARKS;
protected byte SCRELPARRG;
protected byte SCRELPARWT;
protected byte SCRF1;
protected byte SCRF2;
protected byte SCRF3;
protected byte SCRF4;
protected byte SCRF5;
protected byte SCRF6;
protected byte SCRF97;
protected byte SCRX_CODE;
protected byte SCSF1;
protected byte SCSF2A;
protected byte SCSF2B;
protected byte SCSF3A;
protected byte SCSF3B;
protected byte SCSF4A;
protected byte SCSF4B;
protected byte SCSF5;
protected byte SCSF6A;
protected byte SCSF6B;
protected byte SCSF6C;
protected byte SCSF7;
protected byte SCUN1;
protected byte SCUN2;
protected byte SCUN3;
protected byte SCUN97;
protected byte SCUX_CODE;
protected double SEEARNGRS_DV;
protected byte SEEARNGRS_IF;
protected double SEEARNNET_DV;
protected byte SEEKID;
protected byte SERVACC;
protected byte SERVACCY1;
protected byte SERVACCY10;
protected byte SERVACCY11;
protected byte SERVACCY12;
protected byte SERVACCY13;
protected byte SERVACCY14;
protected byte SERVACCY15;
protected byte SERVACCY2;
protected byte SERVACCY3;
protected byte SERVACCY4;
protected byte SERVACCY5;
protected byte SERVACCY6;
protected byte SERVACCY7;
protected byte SERVACCY8;
protected byte SERVACCY9;
protected byte SERVACCY97;
protected byte SEVENSPAP;
protected byte SEXUOR;
protected byte SEX_DV;
protected byte SF1;
protected double SF12MCS_DV;
protected double SF12PCS_DV;
protected byte SIBHIT;
protected byte SIBSTEAL;
protected byte SIBTEASE;
protected byte SIBVERAB;
protected byte SIMAGE;
protected byte SIMAREA;
protected byte SIMEDUC;
protected byte SIMFAM;
protected byte SIMINC;
protected byte SIMJOB;
protected byte SIMRACE;
protected boolean SINGLE_DV;
protected byte SLAPKID;
protected byte SMKMNTH11;
protected byte SMKMNTH12;
protected byte SMKMNTH13;
protected byte SMKMNTH21;
protected byte SMKMNTH22;
protected byte SMKMNTH23;
protected byte SMKMNTH31;
protected byte SMKMNTH32;
protected byte SMKMNTH33;
protected byte SMOFRQ;
protected byte SOCIALKID;
protected byte SOCWEB;
protected byte SPPEN;
protected int SPPID;
protected byte SPPNO;
protected byte STATCM1;
protected byte STATCM2;
protected short STATCY41;
protected short STATCY42;
protected byte STATENDD1;
protected byte STATENDD2;
protected byte STATENDD3;
protected byte STATENDD4;
protected byte STATENDD5;
protected byte STATENDD6;
protected byte STATENDD7;
protected byte STATENDD8;
protected byte STATENDD9;
protected byte STATENDM1;
protected byte STATENDM2;
protected byte STATENDM3;
protected byte STATENDM4;
protected byte STATENDM5;
protected byte STATENDM6;
protected byte STATENDM7;
protected byte STATENDM8;
protected byte STATENDM9;
protected short STATENDY41;
protected short STATENDY42;
protected short STATENDY43;
protected short STATENDY44;
protected short STATENDY45;
protected short STATENDY46;
protected short STATENDY47;
protected short STATENDY48;
protected short STATENDY49;
protected byte STEALSIB;
protected byte STENDREAS;
protected byte STEPREL;
protected short STRATA;
protected byte SUB7STOP1;
protected byte SUB7STOP2;
protected byte SUB7STOP3;
protected byte SUB7STOP4;
protected byte SUB7STOP5;
protected byte SUB7STOP6;
protected byte SUB7STOP7;
protected byte SUB7STOP8;
protected byte SUB7STOP97;
protected byte SUB7_1;
protected byte SUB7_2;
protected byte SUB7_3;
protected byte SUB7_4;
protected byte SUB7_5;
protected byte SUBCONT11;
protected byte SUBCONT12;
protected byte SUBCONT13;
protected byte SUBCONT21;
protected byte SUBCONT210;
protected byte SUBCONT211;
protected byte SUBCONT212;
protected byte SUBCONT213;
protected byte SUBCONT214;
protected byte SUBCONT215;
protected byte SUBCONT216;
protected byte SUBCONT22;
protected byte SUBCONT23;
protected byte SUBCONT24;
protected byte SUBCONT25;
protected byte SUBCONT26;
protected byte SUBCONT27;
protected byte SUBCONT28;
protected byte SUBCONT29;
protected byte SUBCONT3;
protected byte SUSP;
protected byte TALKMATTER;
protected byte TEASESIB;
protected byte TLKF;
protected byte TLKM;
protected byte TRAINANY;
protected short TRAINDAYS1;
protected short TRAINDAYS2;
protected short TRAINDAYS3;
protected byte TRAINDENY;
protected byte TRAINEND1;
protected byte TRAINEND2;
protected byte TRAINEND3;
protected byte TRAINHRS1;
protected byte TRAINHRS2;
protected byte TRAINHRS3;
protected byte TRAINN;
protected byte TRAINPURP11;
protected byte TRAINPURP12;
protected byte TRAINPURP13;
protected byte TRAINPURP21;
protected byte TRAINPURP22;
protected byte TRAINPURP23;
protected byte TRAINPURP31;
protected byte TRAINPURP32;
protected byte TRAINPURP33;
protected byte TRAINPURP41;
protected byte TRAINPURP42;
protected byte TRAINPURP43;
protected byte TRAINPURP51;
protected byte TRAINPURP52;
protected byte TRAINPURP53;
protected byte TRAINPURP61;
protected byte TRAINPURP62;
protected byte TRAINPURP63;
protected byte TRAINPURP71;
protected byte TRAINPURP72;
protected byte TRAINPURP73;
protected byte TRAINQUAL1;
protected byte TRAINQUAL2;
protected byte TRAINQUAL3;
protected byte TRQUAL1;
protected byte TRQUAL10;
protected byte TRQUAL11;
protected byte TRQUAL13;
protected byte TRQUAL15;
protected byte TRQUAL16;
protected byte TRQUAL17;
protected byte TRQUAL18;
protected byte TRQUAL19;
protected byte TRQUAL2;
protected byte TRQUAL20;
protected byte TRQUAL21;
protected byte TRQUAL22;
protected byte TRQUAL23;
protected byte TRQUAL24;
protected byte TRQUAL25;
protected byte TRQUAL26;
protected byte TRQUAL27;
protected byte TRQUAL28;
protected byte TRQUAL29;
protected byte TRQUAL3;
protected byte TRQUAL30;
protected byte TRQUAL31;
protected byte TRQUAL4;
protected byte TRQUAL5;
protected byte TRQUAL6;
protected byte TRQUAL7;
protected byte TRQUAL8;
protected byte TRQUAL9;
protected byte TRWHO1;
protected byte TRWHO2;
protected byte TRWHO3;
protected double TVHOURS;
protected byte TVM2;
protected byte UKBORN;
protected byte UNDQUS;
protected byte UNSAFE1;
protected byte UNSAFE10;
protected byte UNSAFE11;
protected byte UNSAFE2;
protected byte UNSAFE3;
protected byte UNSAFE4;
protected byte UNSAFE5;
protected byte UNSAFE6;
protected byte UNSAFE7;
protected byte UNSAFE8;
protected byte UNSAFE9;
protected byte UNSAFE96;
protected byte UNSAFE97;
protected byte UNSAFEO_CODE;
protected byte UNSAFE_DV;
protected byte UPSET;
protected byte URBAN_DV;
protected byte VERABSIB;
protected byte VFCONT11;
protected byte VFCONT12;
protected byte VFCONT13;
protected byte VFCONT21;
protected byte VFCONT210;
protected byte VFCONT211;
protected byte VFCONT212;
protected byte VFCONT213;
protected byte VFCONT214;
protected byte VFCONT215;
protected byte VFCONT216;
protected byte VFCONT22;
protected byte VFCONT23;
protected byte VFCONT24;
protected byte VFCONT25;
protected byte VFCONT26;
protected byte VFCONT27;
protected byte VFCONT28;
protected byte VFCONT29;
protected byte VFCONT3;
protected byte VFCT;
protected byte VFPRE;
protected byte VFSTOP1;
protected byte VFSTOP2;
protected byte VFSTOP3;
protected byte VFSTOP4;
protected byte VFSTOP5;
protected byte VFSTOP6;
protected byte VFSTOP7;
protected byte VFSTOP8;
protected byte VFSTOP97;
protected byte VFTCTW;
protected byte VISFAM;
protected byte VISFAMY1;
protected byte VISFAMY10;
protected byte VISFAMY11;
protected byte VISFAMY12;
protected byte VISFAMY13;
protected byte VISFAMY14;
protected byte VISFAMY15;
protected byte VISFAMY2;
protected byte VISFAMY3;
protected byte VISFAMY4;
protected byte VISFAMY5;
protected byte VISFAMY6;
protected byte VISFAMY7;
protected byte VISFAMY8;
protected byte VISFAMY9;
protected byte VISFAMY97;
protected byte VISFRNDS;
protected byte VISFRNDSY1;
protected byte VISFRNDSY10;
protected byte VISFRNDSY11;
protected byte VISFRNDSY12;
protected byte VISFRNDSY13;
protected byte VISFRNDSY14;
protected byte VISFRNDSY2;
protected byte VISFRNDSY3;
protected byte VISFRNDSY4;
protected byte VISFRNDSY5;
protected byte VISFRNDSY6;
protected byte VISFRNDSY7;
protected byte VISFRNDSY8;
protected byte VISFRNDSY9;
protected byte VISFRNDSY97;
protected byte VOLRECPER;
protected short VOTE1;
protected short VOTE2;
protected short VOTE3;
protected short VOTE4;
protected short VOTE5;
protected short VOTE6;
protected byte VOTEINTENT;
protected byte VOTENORM;
protected byte WEKID;
protected byte WHORUAGE;
protected byte WHORUEDU;
protected byte WHORUFAM;
protected byte WHORUPOL;
protected byte WHORUPRO;
protected byte WHORURAC;
protected byte WHORUSEX;
protected byte WKPLSAM;
protected byte WORDS1;
protected byte WORDS2;
protected byte WORDS3;
protected byte WORDS4;
protected byte WORKTRAV;
protected byte WRCOMPPRE;
protected byte WRDRCL;
protected byte WRDRECPRE;
protected byte WRINTPRE;
protected byte XPMOVE;
protected byte XTRA5MINOSM_DV;
protected byte XTRA5MIN_DV;
protected byte YAJBSRV1;
protected byte YAJBSRV2;
protected byte YAJBSRV3;
protected byte YAJBSRV4;
protected byte YAJBSRV5;
protected byte YAJBSRV6;
protected byte YAJBSRV7;
protected byte YAJBSRV96;
protected byte YANSSEC5_DV;
protected short YASOC00_CC;
protected short YASOC10_CC;
protected byte YASOC90_CC;
protected byte YELLKID;
protected final void initADCTS(String s) {
if (!s.trim().isEmpty()) {
ADCTS = Byte.parseByte(s);
} else {
ADCTS = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH01(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH01 = Byte.parseByte(s);
} else {
ADOPTCH01 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH02(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH02 = Byte.parseByte(s);
} else {
ADOPTCH02 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH03(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH03 = Byte.parseByte(s);
} else {
ADOPTCH03 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH04(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH04 = Byte.parseByte(s);
} else {
ADOPTCH04 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH05(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH05 = Byte.parseByte(s);
} else {
ADOPTCH05 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH06(String s) {
if (!s.trim().isEmpty()) {
ADOPTCH06 = Byte.parseByte(s);
} else {
ADOPTCH06 = Byte.MIN_VALUE;
}
}

protected final void initADOPTCH07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH07 = false;
} else {
ADOPTCH07 = true;
}
}
}

protected final void initADOPTCH08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH08 = false;
} else {
ADOPTCH08 = true;
}
}
}

protected final void initADOPTCH09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH09 = false;
} else {
ADOPTCH09 = true;
}
}
}

protected final void initADOPTCH10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH10 = false;
} else {
ADOPTCH10 = true;
}
}
}

protected final void initADOPTCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH11 = false;
} else {
ADOPTCH11 = true;
}
}
}

protected final void initADOPTCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH12 = false;
} else {
ADOPTCH12 = true;
}
}
}

protected final void initADOPTCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH13 = false;
} else {
ADOPTCH13 = true;
}
}
}

protected final void initADOPTCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH14 = false;
} else {
ADOPTCH14 = true;
}
}
}

protected final void initADOPTCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH15 = false;
} else {
ADOPTCH15 = true;
}
}
}

protected final void initADOPTCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ADOPTCH16 = false;
} else {
ADOPTCH16 = true;
}
}
}

protected final void initADSTATUS(String s) {
if (!s.trim().isEmpty()) {
ADSTATUS = Byte.parseByte(s);
} else {
ADSTATUS = Byte.MIN_VALUE;
}
}

protected final void initAEDROF1(String s) {
if (!s.trim().isEmpty()) {
AEDROF1 = Byte.parseByte(s);
} else {
AEDROF1 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF2(String s) {
if (!s.trim().isEmpty()) {
AEDROF2 = Byte.parseByte(s);
} else {
AEDROF2 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF3(String s) {
if (!s.trim().isEmpty()) {
AEDROF3 = Byte.parseByte(s);
} else {
AEDROF3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA1(String s) {
if (!s.trim().isEmpty()) {
AEPUDA1 = Double.parseDouble(s);
} else {
AEPUDA1 = Double.NaN;
}
}

protected final void initAEPUDA2(String s) {
if (!s.trim().isEmpty()) {
AEPUDA2 = Byte.parseByte(s);
} else {
AEPUDA2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA3(String s) {
if (!s.trim().isEmpty()) {
AEPUDA3 = Byte.parseByte(s);
} else {
AEPUDA3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK1(String s) {
if (!s.trim().isEmpty()) {
AEPUWK1 = Byte.parseByte(s);
} else {
AEPUWK1 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK2(String s) {
if (!s.trim().isEmpty()) {
AEPUWK2 = Byte.parseByte(s);
} else {
AEPUWK2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK3(String s) {
if (!s.trim().isEmpty()) {
AEPUWK3 = Byte.parseByte(s);
} else {
AEPUWK3 = Byte.MIN_VALUE;
}
}

protected final void initAGEGR10_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR10_DV = Byte.parseByte(s);
} else {
AGEGR10_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR13_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR13_DV = Byte.parseByte(s);
} else {
AGEGR13_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR5_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR5_DV = Byte.parseByte(s);
} else {
AGEGR5_DV = Byte.MIN_VALUE;
}
}

protected final void initAGERET(String s) {
if (!s.trim().isEmpty()) {
AGERET = Byte.parseByte(s);
} else {
AGERET = Byte.MIN_VALUE;
}
}

protected final void initAGE_DV(String s) {
if (!s.trim().isEmpty()) {
AGE_DV = Short.parseShort(s);
} else {
AGE_DV = Short.MIN_VALUE;
}
}

protected final void initAHVWELL(String s) {
if (!s.trim().isEmpty()) {
AHVWELL = Byte.parseByte(s);
} else {
AHVWELL = Byte.MIN_VALUE;
}
}

protected final void initAIDEFT(String s) {
if (!s.trim().isEmpty()) {
AIDEFT = Byte.parseByte(s);
} else {
AIDEFT = Byte.MIN_VALUE;
}
}

protected final void initAIDHU1(String s) {
if (!s.trim().isEmpty()) {
AIDHU1 = Short.parseShort(s);
} else {
AIDHU1 = Short.MIN_VALUE;
}
}

protected final void initAIDHU2(String s) {
if (!s.trim().isEmpty()) {
AIDHU2 = Short.parseShort(s);
} else {
AIDHU2 = Short.MIN_VALUE;
}
}

protected final void initAIDHUA1(String s) {
if (!s.trim().isEmpty()) {
AIDHUA1 = Byte.parseByte(s);
} else {
AIDHUA1 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA10(String s) {
if (!s.trim().isEmpty()) {
AIDHUA10 = Byte.parseByte(s);
} else {
AIDHUA10 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA11(String s) {
if (!s.trim().isEmpty()) {
AIDHUA11 = Byte.parseByte(s);
} else {
AIDHUA11 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA12(String s) {
if (!s.trim().isEmpty()) {
AIDHUA12 = Byte.parseByte(s);
} else {
AIDHUA12 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA13(String s) {
if (!s.trim().isEmpty()) {
AIDHUA13 = Byte.parseByte(s);
} else {
AIDHUA13 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA14(String s) {
if (!s.trim().isEmpty()) {
AIDHUA14 = Byte.parseByte(s);
} else {
AIDHUA14 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA15(String s) {
if (!s.trim().isEmpty()) {
AIDHUA15 = Byte.parseByte(s);
} else {
AIDHUA15 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA16(String s) {
if (!s.trim().isEmpty()) {
AIDHUA16 = Byte.parseByte(s);
} else {
AIDHUA16 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA2(String s) {
if (!s.trim().isEmpty()) {
AIDHUA2 = Byte.parseByte(s);
} else {
AIDHUA2 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA3(String s) {
if (!s.trim().isEmpty()) {
AIDHUA3 = Byte.parseByte(s);
} else {
AIDHUA3 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA4(String s) {
if (!s.trim().isEmpty()) {
AIDHUA4 = Byte.parseByte(s);
} else {
AIDHUA4 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA5(String s) {
if (!s.trim().isEmpty()) {
AIDHUA5 = Byte.parseByte(s);
} else {
AIDHUA5 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA6(String s) {
if (!s.trim().isEmpty()) {
AIDHUA6 = Byte.parseByte(s);
} else {
AIDHUA6 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA7(String s) {
if (!s.trim().isEmpty()) {
AIDHUA7 = Byte.parseByte(s);
} else {
AIDHUA7 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA8(String s) {
if (!s.trim().isEmpty()) {
AIDHUA8 = Byte.parseByte(s);
} else {
AIDHUA8 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA9(String s) {
if (!s.trim().isEmpty()) {
AIDHUA9 = Byte.parseByte(s);
} else {
AIDHUA9 = Byte.MIN_VALUE;
}
}

protected final void initALLCH01(String s) {
if (!s.trim().isEmpty()) {
ALLCH01 = Byte.parseByte(s);
} else {
ALLCH01 = Byte.MIN_VALUE;
}
}

protected final void initALLCH02(String s) {
if (!s.trim().isEmpty()) {
ALLCH02 = Byte.parseByte(s);
} else {
ALLCH02 = Byte.MIN_VALUE;
}
}

protected final void initALLCH03(String s) {
if (!s.trim().isEmpty()) {
ALLCH03 = Byte.parseByte(s);
} else {
ALLCH03 = Byte.MIN_VALUE;
}
}

protected final void initALLCH04(String s) {
if (!s.trim().isEmpty()) {
ALLCH04 = Byte.parseByte(s);
} else {
ALLCH04 = Byte.MIN_VALUE;
}
}

protected final void initALLCH05(String s) {
if (!s.trim().isEmpty()) {
ALLCH05 = Byte.parseByte(s);
} else {
ALLCH05 = Byte.MIN_VALUE;
}
}

protected final void initALLCH06(String s) {
if (!s.trim().isEmpty()) {
ALLCH06 = Byte.parseByte(s);
} else {
ALLCH06 = Byte.MIN_VALUE;
}
}

protected final void initALLCH07(String s) {
if (!s.trim().isEmpty()) {
ALLCH07 = Byte.parseByte(s);
} else {
ALLCH07 = Byte.MIN_VALUE;
}
}

protected final void initALLCH08(String s) {
if (!s.trim().isEmpty()) {
ALLCH08 = Byte.parseByte(s);
} else {
ALLCH08 = Byte.MIN_VALUE;
}
}

protected final void initALLCH09(String s) {
if (!s.trim().isEmpty()) {
ALLCH09 = Byte.parseByte(s);
} else {
ALLCH09 = Byte.MIN_VALUE;
}
}

protected final void initALLCH10(String s) {
if (!s.trim().isEmpty()) {
ALLCH10 = Byte.parseByte(s);
} else {
ALLCH10 = Byte.MIN_VALUE;
}
}

protected final void initALLCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH11 = false;
} else {
ALLCH11 = true;
}
}
}

protected final void initALLCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH12 = false;
} else {
ALLCH12 = true;
}
}
}

protected final void initALLCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH13 = false;
} else {
ALLCH13 = true;
}
}
}

protected final void initALLCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH14 = false;
} else {
ALLCH14 = true;
}
}
}

protected final void initALLCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH15 = false;
} else {
ALLCH15 = true;
}
}
}

protected final void initALLCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
ALLCH16 = false;
} else {
ALLCH16 = true;
}
}
}

protected final void initAPVOCIMP(String s) {
if (!s.trim().isEmpty()) {
APVOCIMP = Byte.parseByte(s);
} else {
APVOCIMP = Byte.MIN_VALUE;
}
}

protected final void initAREA(String s) {
if (!s.trim().isEmpty()) {
AREA = Byte.parseByte(s);
} else {
AREA = Byte.MIN_VALUE;
}
}

protected final void initARGF(String s) {
if (!s.trim().isEmpty()) {
ARGF = Byte.parseByte(s);
} else {
ARGF = Byte.MIN_VALUE;
}
}

protected final void initARGM(String s) {
if (!s.trim().isEmpty()) {
ARGM = Byte.parseByte(s);
} else {
ARGM = Byte.MIN_VALUE;
}
}

protected final void initATTACKED1(String s) {
if (!s.trim().isEmpty()) {
ATTACKED1 = Byte.parseByte(s);
} else {
ATTACKED1 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED10(String s) {
if (!s.trim().isEmpty()) {
ATTACKED10 = Byte.parseByte(s);
} else {
ATTACKED10 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED11(String s) {
if (!s.trim().isEmpty()) {
ATTACKED11 = Byte.parseByte(s);
} else {
ATTACKED11 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED2(String s) {
if (!s.trim().isEmpty()) {
ATTACKED2 = Byte.parseByte(s);
} else {
ATTACKED2 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED3(String s) {
if (!s.trim().isEmpty()) {
ATTACKED3 = Byte.parseByte(s);
} else {
ATTACKED3 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED4(String s) {
if (!s.trim().isEmpty()) {
ATTACKED4 = Byte.parseByte(s);
} else {
ATTACKED4 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED5(String s) {
if (!s.trim().isEmpty()) {
ATTACKED5 = Byte.parseByte(s);
} else {
ATTACKED5 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED6(String s) {
if (!s.trim().isEmpty()) {
ATTACKED6 = Byte.parseByte(s);
} else {
ATTACKED6 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED7(String s) {
if (!s.trim().isEmpty()) {
ATTACKED7 = Byte.parseByte(s);
} else {
ATTACKED7 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED8(String s) {
if (!s.trim().isEmpty()) {
ATTACKED8 = Byte.parseByte(s);
} else {
ATTACKED8 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED9(String s) {
if (!s.trim().isEmpty()) {
ATTACKED9 = Byte.parseByte(s);
} else {
ATTACKED9 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED96(String s) {
if (!s.trim().isEmpty()) {
ATTACKED96 = Byte.parseByte(s);
} else {
ATTACKED96 = Byte.MIN_VALUE;
}
}

protected final void initATTACKED97(String s) {
if (!s.trim().isEmpty()) {
ATTACKED97 = Byte.parseByte(s);
} else {
ATTACKED97 = Byte.MIN_VALUE;
}
}

protected final void initATTACKEDO_CODE(String s) {
if (!s.trim().isEmpty()) {
ATTACKEDO_CODE = Byte.parseByte(s);
} else {
ATTACKEDO_CODE = Byte.MIN_VALUE;
}
}

protected final void initATTACKED_DV(String s) {
if (!s.trim().isEmpty()) {
ATTACKED_DV = Byte.parseByte(s);
} else {
ATTACKED_DV = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE1(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE1 = Byte.parseByte(s);
} else {
AVOIDANCE1 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE10(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE10 = Byte.parseByte(s);
} else {
AVOIDANCE10 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE11(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE11 = Byte.parseByte(s);
} else {
AVOIDANCE11 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE2(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE2 = Byte.parseByte(s);
} else {
AVOIDANCE2 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE3(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE3 = Byte.parseByte(s);
} else {
AVOIDANCE3 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE4(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE4 = Byte.parseByte(s);
} else {
AVOIDANCE4 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE5(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE5 = Byte.parseByte(s);
} else {
AVOIDANCE5 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE6(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE6 = Byte.parseByte(s);
} else {
AVOIDANCE6 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE7(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE7 = Byte.parseByte(s);
} else {
AVOIDANCE7 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE8(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE8 = Byte.parseByte(s);
} else {
AVOIDANCE8 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE9(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE9 = Byte.parseByte(s);
} else {
AVOIDANCE9 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE96(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE96 = Byte.parseByte(s);
} else {
AVOIDANCE96 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCE97(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCE97 = Byte.parseByte(s);
} else {
AVOIDANCE97 = Byte.MIN_VALUE;
}
}

protected final void initAVOIDANCEO_CODE(String s) {
if (!s.trim().isEmpty()) {
AVOIDANCEO_CODE = Byte.parseByte(s);
} else {
AVOIDANCEO_CODE = Byte.MIN_VALUE;
}
}

protected final void initAVOIDED_DV(String s) {
if (!s.trim().isEmpty()) {
AVOIDED_DV = Byte.parseByte(s);
} else {
AVOIDED_DV = Byte.MIN_VALUE;
}
}

protected final void initBASNSA(String s) {
if (!s.trim().isEmpty()) {
BASNSA = Double.parseDouble(s);
} else {
BASNSA = Double.NaN;
}
}

protected final void initBASRATE(String s) {
if (!s.trim().isEmpty()) {
BASRATE = Double.parseDouble(s);
} else {
BASRATE = Double.NaN;
}
}

protected final void initBASREST(String s) {
if (!s.trim().isEmpty()) {
BASREST = Byte.parseByte(s);
} else {
BASREST = Byte.MIN_VALUE;
}
}

protected final void initBENCB(String s) {
if (!s.trim().isEmpty()) {
BENCB = Byte.parseByte(s);
} else {
BENCB = Byte.MIN_VALUE;
}
}

protected final void initBENCTC(String s) {
if (!s.trim().isEmpty()) {
BENCTC = Byte.parseByte(s);
} else {
BENCTC = Byte.MIN_VALUE;
}
}

protected final void initBENDIS1(String s) {
if (!s.trim().isEmpty()) {
BENDIS1 = Byte.parseByte(s);
} else {
BENDIS1 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS10(String s) {
if (!s.trim().isEmpty()) {
BENDIS10 = Byte.parseByte(s);
} else {
BENDIS10 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS12(String s) {
if (!s.trim().isEmpty()) {
BENDIS12 = Byte.parseByte(s);
} else {
BENDIS12 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS13(String s) {
if (!s.trim().isEmpty()) {
BENDIS13 = Byte.parseByte(s);
} else {
BENDIS13 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS14(String s) {
if (!s.trim().isEmpty()) {
BENDIS14 = Byte.parseByte(s);
} else {
BENDIS14 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS15(String s) {
if (!s.trim().isEmpty()) {
BENDIS15 = Byte.parseByte(s);
} else {
BENDIS15 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS16(String s) {
if (!s.trim().isEmpty()) {
BENDIS16 = Byte.parseByte(s);
} else {
BENDIS16 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS2(String s) {
if (!s.trim().isEmpty()) {
BENDIS2 = Byte.parseByte(s);
} else {
BENDIS2 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS3(String s) {
if (!s.trim().isEmpty()) {
BENDIS3 = Byte.parseByte(s);
} else {
BENDIS3 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS4(String s) {
if (!s.trim().isEmpty()) {
BENDIS4 = Byte.parseByte(s);
} else {
BENDIS4 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS5(String s) {
if (!s.trim().isEmpty()) {
BENDIS5 = Byte.parseByte(s);
} else {
BENDIS5 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS6(String s) {
if (!s.trim().isEmpty()) {
BENDIS6 = Byte.parseByte(s);
} else {
BENDIS6 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS7(String s) {
if (!s.trim().isEmpty()) {
BENDIS7 = Byte.parseByte(s);
} else {
BENDIS7 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS8(String s) {
if (!s.trim().isEmpty()) {
BENDIS8 = Byte.parseByte(s);
} else {
BENDIS8 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS9(String s) {
if (!s.trim().isEmpty()) {
BENDIS9 = Byte.parseByte(s);
} else {
BENDIS9 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS96(String s) {
if (!s.trim().isEmpty()) {
BENDIS96 = Byte.parseByte(s);
} else {
BENDIS96 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS97(String s) {
if (!s.trim().isEmpty()) {
BENDIS97 = Byte.parseByte(s);
} else {
BENDIS97 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM1(String s) {
if (!s.trim().isEmpty()) {
BENFAM1 = Byte.parseByte(s);
} else {
BENFAM1 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM10(String s) {
if (!s.trim().isEmpty()) {
BENFAM10 = Byte.parseByte(s);
} else {
BENFAM10 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM2(String s) {
if (!s.trim().isEmpty()) {
BENFAM2 = Byte.parseByte(s);
} else {
BENFAM2 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM3(String s) {
if (!s.trim().isEmpty()) {
BENFAM3 = Byte.parseByte(s);
} else {
BENFAM3 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM4(String s) {
if (!s.trim().isEmpty()) {
BENFAM4 = Byte.parseByte(s);
} else {
BENFAM4 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM5(String s) {
if (!s.trim().isEmpty()) {
BENFAM5 = Byte.parseByte(s);
} else {
BENFAM5 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM6(String s) {
if (!s.trim().isEmpty()) {
BENFAM6 = Byte.parseByte(s);
} else {
BENFAM6 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM7(String s) {
if (!s.trim().isEmpty()) {
BENFAM7 = Byte.parseByte(s);
} else {
BENFAM7 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM8(String s) {
if (!s.trim().isEmpty()) {
BENFAM8 = Byte.parseByte(s);
} else {
BENFAM8 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM9(String s) {
if (!s.trim().isEmpty()) {
BENFAM9 = Byte.parseByte(s);
} else {
BENFAM9 = Byte.MIN_VALUE;
}
}

protected final void initBENFAM96(String s) {
if (!s.trim().isEmpty()) {
BENFAM96 = Byte.parseByte(s);
} else {
BENFAM96 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU1(String s) {
if (!s.trim().isEmpty()) {
BENHOU1 = Byte.parseByte(s);
} else {
BENHOU1 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU2(String s) {
if (!s.trim().isEmpty()) {
BENHOU2 = Byte.parseByte(s);
} else {
BENHOU2 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU3(String s) {
if (!s.trim().isEmpty()) {
BENHOU3 = Byte.parseByte(s);
} else {
BENHOU3 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU4(String s) {
if (!s.trim().isEmpty()) {
BENHOU4 = Byte.parseByte(s);
} else {
BENHOU4 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU5(String s) {
if (!s.trim().isEmpty()) {
BENHOU5 = Byte.parseByte(s);
} else {
BENHOU5 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU6(String s) {
if (!s.trim().isEmpty()) {
BENHOU6 = Byte.parseByte(s);
} else {
BENHOU6 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU7(String s) {
if (!s.trim().isEmpty()) {
BENHOU7 = Byte.parseByte(s);
} else {
BENHOU7 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU8(String s) {
if (!s.trim().isEmpty()) {
BENHOU8 = Byte.parseByte(s);
} else {
BENHOU8 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU9(String s) {
if (!s.trim().isEmpty()) {
BENHOU9 = Byte.parseByte(s);
} else {
BENHOU9 = Byte.MIN_VALUE;
}
}

protected final void initBENHOU96(String s) {
if (!s.trim().isEmpty()) {
BENHOU96 = Byte.parseByte(s);
} else {
BENHOU96 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN1(String s) {
if (!s.trim().isEmpty()) {
BENPEN1 = Byte.parseByte(s);
} else {
BENPEN1 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN10(String s) {
if (!s.trim().isEmpty()) {
BENPEN10 = Byte.parseByte(s);
} else {
BENPEN10 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN11(String s) {
if (!s.trim().isEmpty()) {
BENPEN11 = Byte.parseByte(s);
} else {
BENPEN11 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN12(String s) {
if (!s.trim().isEmpty()) {
BENPEN12 = Byte.parseByte(s);
} else {
BENPEN12 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN13(String s) {
if (!s.trim().isEmpty()) {
BENPEN13 = Byte.parseByte(s);
} else {
BENPEN13 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN2(String s) {
if (!s.trim().isEmpty()) {
BENPEN2 = Byte.parseByte(s);
} else {
BENPEN2 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN3(String s) {
if (!s.trim().isEmpty()) {
BENPEN3 = Byte.parseByte(s);
} else {
BENPEN3 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN4(String s) {
if (!s.trim().isEmpty()) {
BENPEN4 = Byte.parseByte(s);
} else {
BENPEN4 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN5(String s) {
if (!s.trim().isEmpty()) {
BENPEN5 = Byte.parseByte(s);
} else {
BENPEN5 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN6(String s) {
if (!s.trim().isEmpty()) {
BENPEN6 = Byte.parseByte(s);
} else {
BENPEN6 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN7(String s) {
if (!s.trim().isEmpty()) {
BENPEN7 = Byte.parseByte(s);
} else {
BENPEN7 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN8(String s) {
if (!s.trim().isEmpty()) {
BENPEN8 = Byte.parseByte(s);
} else {
BENPEN8 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN9(String s) {
if (!s.trim().isEmpty()) {
BENPEN9 = Byte.parseByte(s);
} else {
BENPEN9 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN96(String s) {
if (!s.trim().isEmpty()) {
BENPEN96 = Byte.parseByte(s);
} else {
BENPEN96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA1(String s) {
if (!s.trim().isEmpty()) {
BENSTA1 = Byte.parseByte(s);
} else {
BENSTA1 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA10(String s) {
if (!s.trim().isEmpty()) {
BENSTA10 = Byte.parseByte(s);
} else {
BENSTA10 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA11(String s) {
if (!s.trim().isEmpty()) {
BENSTA11 = Byte.parseByte(s);
} else {
BENSTA11 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA12(String s) {
if (!s.trim().isEmpty()) {
BENSTA12 = Byte.parseByte(s);
} else {
BENSTA12 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA13(String s) {
if (!s.trim().isEmpty()) {
BENSTA13 = Byte.parseByte(s);
} else {
BENSTA13 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA2(String s) {
if (!s.trim().isEmpty()) {
BENSTA2 = Byte.parseByte(s);
} else {
BENSTA2 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA3(String s) {
if (!s.trim().isEmpty()) {
BENSTA3 = Byte.parseByte(s);
} else {
BENSTA3 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA4(String s) {
if (!s.trim().isEmpty()) {
BENSTA4 = Byte.parseByte(s);
} else {
BENSTA4 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA5(String s) {
if (!s.trim().isEmpty()) {
BENSTA5 = Byte.parseByte(s);
} else {
BENSTA5 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA6(String s) {
if (!s.trim().isEmpty()) {
BENSTA6 = Byte.parseByte(s);
} else {
BENSTA6 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA7(String s) {
if (!s.trim().isEmpty()) {
BENSTA7 = Byte.parseByte(s);
} else {
BENSTA7 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA9(String s) {
if (!s.trim().isEmpty()) {
BENSTA9 = Byte.parseByte(s);
} else {
BENSTA9 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA96(String s) {
if (!s.trim().isEmpty()) {
BENSTA96 = Byte.parseByte(s);
} else {
BENSTA96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA97(String s) {
if (!s.trim().isEmpty()) {
BENSTA97 = Byte.parseByte(s);
} else {
BENSTA97 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX1(String s) {
if (!s.trim().isEmpty()) {
BENTAX1 = Byte.parseByte(s);
} else {
BENTAX1 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX10(String s) {
if (!s.trim().isEmpty()) {
BENTAX10 = Byte.parseByte(s);
} else {
BENTAX10 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX2(String s) {
if (!s.trim().isEmpty()) {
BENTAX2 = Byte.parseByte(s);
} else {
BENTAX2 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX3(String s) {
if (!s.trim().isEmpty()) {
BENTAX3 = Byte.parseByte(s);
} else {
BENTAX3 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX4(String s) {
if (!s.trim().isEmpty()) {
BENTAX4 = Byte.parseByte(s);
} else {
BENTAX4 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX5(String s) {
if (!s.trim().isEmpty()) {
BENTAX5 = Byte.parseByte(s);
} else {
BENTAX5 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX6(String s) {
if (!s.trim().isEmpty()) {
BENTAX6 = Byte.parseByte(s);
} else {
BENTAX6 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX7(String s) {
if (!s.trim().isEmpty()) {
BENTAX7 = Byte.parseByte(s);
} else {
BENTAX7 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX8(String s) {
if (!s.trim().isEmpty()) {
BENTAX8 = Byte.parseByte(s);
} else {
BENTAX8 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX9(String s) {
if (!s.trim().isEmpty()) {
BENTAX9 = Byte.parseByte(s);
} else {
BENTAX9 = Byte.MIN_VALUE;
}
}

protected final void initBENTAX96(String s) {
if (!s.trim().isEmpty()) {
BENTAX96 = Byte.parseByte(s);
} else {
BENTAX96 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP1(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP1 = Byte.parseByte(s);
} else {
BENUNEMP1 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP2(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP2 = Byte.parseByte(s);
} else {
BENUNEMP2 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP3(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP3 = Byte.parseByte(s);
} else {
BENUNEMP3 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP4(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP4 = Byte.parseByte(s);
} else {
BENUNEMP4 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP5(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP5 = Byte.parseByte(s);
} else {
BENUNEMP5 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP6(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP6 = Byte.parseByte(s);
} else {
BENUNEMP6 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP7(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP7 = Byte.parseByte(s);
} else {
BENUNEMP7 = Byte.MIN_VALUE;
}
}

protected final void initBENUNEMP96(String s) {
if (!s.trim().isEmpty()) {
BENUNEMP96 = Byte.parseByte(s);
} else {
BENUNEMP96 = Byte.MIN_VALUE;
}
}

protected final void initBIG5A_DV(String s) {
if (!s.trim().isEmpty()) {
BIG5A_DV = Byte.parseByte(s);
} else {
BIG5A_DV = Byte.MIN_VALUE;
}
}

protected final void initBIG5DV(String s) {
if (!s.trim().isEmpty()) {
BIG5DV = Byte.parseByte(s);
} else {
BIG5DV = Byte.MIN_VALUE;
}
}

protected final void initBIG5E_DV(String s) {
if (!s.trim().isEmpty()) {
BIG5E_DV = Byte.parseByte(s);
} else {
BIG5E_DV = Byte.MIN_VALUE;
}
}

protected final void initBIG5N_DV(String s) {
if (!s.trim().isEmpty()) {
BIG5N_DV = Byte.parseByte(s);
} else {
BIG5N_DV = Byte.MIN_VALUE;
}
}

protected final void initBIG5O_DV(String s) {
if (!s.trim().isEmpty()) {
BIG5O_DV = Byte.parseByte(s);
} else {
BIG5O_DV = Byte.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBRITID(String s) {
if (!s.trim().isEmpty()) {
BRITID = Byte.parseByte(s);
} else {
BRITID = Byte.MIN_VALUE;
}
}

protected final void initBTYPE1(String s) {
if (!s.trim().isEmpty()) {
BTYPE1 = Byte.parseByte(s);
} else {
BTYPE1 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE10(String s) {
if (!s.trim().isEmpty()) {
BTYPE10 = Byte.parseByte(s);
} else {
BTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE11(String s) {
if (!s.trim().isEmpty()) {
BTYPE11 = Byte.parseByte(s);
} else {
BTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE12(String s) {
if (!s.trim().isEmpty()) {
BTYPE12 = Byte.parseByte(s);
} else {
BTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE13(String s) {
if (!s.trim().isEmpty()) {
BTYPE13 = Byte.parseByte(s);
} else {
BTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE14(String s) {
if (!s.trim().isEmpty()) {
BTYPE14 = Byte.parseByte(s);
} else {
BTYPE14 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE2(String s) {
if (!s.trim().isEmpty()) {
BTYPE2 = Byte.parseByte(s);
} else {
BTYPE2 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE3(String s) {
if (!s.trim().isEmpty()) {
BTYPE3 = Byte.parseByte(s);
} else {
BTYPE3 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE4(String s) {
if (!s.trim().isEmpty()) {
BTYPE4 = Byte.parseByte(s);
} else {
BTYPE4 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE5(String s) {
if (!s.trim().isEmpty()) {
BTYPE5 = Byte.parseByte(s);
} else {
BTYPE5 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE6(String s) {
if (!s.trim().isEmpty()) {
BTYPE6 = Byte.parseByte(s);
} else {
BTYPE6 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE7(String s) {
if (!s.trim().isEmpty()) {
BTYPE7 = Byte.parseByte(s);
} else {
BTYPE7 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE8(String s) {
if (!s.trim().isEmpty()) {
BTYPE8 = Byte.parseByte(s);
} else {
BTYPE8 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE9(String s) {
if (!s.trim().isEmpty()) {
BTYPE9 = Byte.parseByte(s);
} else {
BTYPE9 = Byte.MIN_VALUE;
}
}

protected final void initBTYPE96(String s) {
if (!s.trim().isEmpty()) {
BTYPE96 = Byte.parseByte(s);
} else {
BTYPE96 = Byte.MIN_VALUE;
}
}

protected final void initBUNO_DV(String s) {
if (!s.trim().isEmpty()) {
BUNO_DV = Byte.parseByte(s);
} else {
BUNO_DV = Byte.MIN_VALUE;
}
}

protected final void initCAIDU1(String s) {
if (!s.trim().isEmpty()) {
CAIDU1 = Byte.parseByte(s);
} else {
CAIDU1 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU2(String s) {
if (!s.trim().isEmpty()) {
CAIDU2 = Byte.parseByte(s);
} else {
CAIDU2 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU3(String s) {
if (!s.trim().isEmpty()) {
CAIDU3 = Byte.parseByte(s);
} else {
CAIDU3 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU4(String s) {
if (!s.trim().isEmpty()) {
CAIDU4 = Byte.parseByte(s);
} else {
CAIDU4 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU5(String s) {
if (!s.trim().isEmpty()) {
CAIDU5 = Byte.parseByte(s);
} else {
CAIDU5 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU6(String s) {
if (!s.trim().isEmpty()) {
CAIDU6 = Byte.parseByte(s);
} else {
CAIDU6 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU7(String s) {
if (!s.trim().isEmpty()) {
CAIDU7 = Byte.parseByte(s);
} else {
CAIDU7 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU8(String s) {
if (!s.trim().isEmpty()) {
CAIDU8 = Byte.parseByte(s);
} else {
CAIDU8 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU96(String s) {
if (!s.trim().isEmpty()) {
CAIDU96 = Byte.parseByte(s);
} else {
CAIDU96 = Byte.MIN_VALUE;
}
}

protected final void initCAIDU97(String s) {
if (!s.trim().isEmpty()) {
CAIDU97 = Byte.parseByte(s);
} else {
CAIDU97 = Byte.MIN_VALUE;
}
}

protected final void initCASIEND(String s) {
if (!s.trim().isEmpty()) {
CASIEND = Byte.parseByte(s);
} else {
CASIEND = Byte.MIN_VALUE;
}
}

protected final void initCCARE(String s) {
if (!s.trim().isEmpty()) {
CCARE = Byte.parseByte(s);
} else {
CCARE = Byte.MIN_VALUE;
}
}

protected final void initCCWORK(String s) {
if (!s.trim().isEmpty()) {
CCWORK = Byte.parseByte(s);
} else {
CCWORK = Byte.MIN_VALUE;
}
}

protected final void initCGIVNA1_DV(String s) {
if (!s.trim().isEmpty()) {
CGIVNA1_DV = Byte.parseByte(s);
} else {
CGIVNA1_DV = Byte.MIN_VALUE;
}
}

protected final void initCGIVNS1_DV(String s) {
if (!s.trim().isEmpty()) {
CGIVNS1_DV = Byte.parseByte(s);
} else {
CGIVNS1_DV = Byte.MIN_VALUE;
}
}

protected final void initCGIVS71_DV(String s) {
if (!s.trim().isEmpty()) {
CGIVS71_DV = Byte.parseByte(s);
} else {
CGIVS71_DV = Byte.MIN_VALUE;
}
}

protected final void initCGIVVF1_DV(String s) {
if (!s.trim().isEmpty()) {
CGIVVF1_DV = Byte.parseByte(s);
} else {
CGIVVF1_DV = Byte.MIN_VALUE;
}
}

protected final void initCGIVWRD1_DV(String s) {
if (!s.trim().isEmpty()) {
CGIVWRD1_DV = Byte.parseByte(s);
} else {
CGIVWRD1_DV = Byte.MIN_VALUE;
}
}

protected final void initCGIVWRI1_DV(String s) {
if (!s.trim().isEmpty()) {
CGIVWRI1_DV = Byte.parseByte(s);
} else {
CGIVWRI1_DV = Byte.MIN_VALUE;
}
}

protected final void initCGNA_DV(String s) {
if (!s.trim().isEmpty()) {
CGNA_DV = Byte.parseByte(s);
} else {
CGNA_DV = Byte.MIN_VALUE;
}
}

protected final void initCGNS1A_DV(String s) {
if (!s.trim().isEmpty()) {
CGNS1A_DV = Byte.parseByte(s);
} else {
CGNS1A_DV = Byte.MIN_VALUE;
}
}

protected final void initCGNS1B_DV(String s) {
if (!s.trim().isEmpty()) {
CGNS1B_DV = Byte.parseByte(s);
} else {
CGNS1B_DV = Byte.MIN_VALUE;
}
}

protected final void initCGNS1SC10_DV(String s) {
if (!s.trim().isEmpty()) {
CGNS1SC10_DV = Short.parseShort(s);
} else {
CGNS1SC10_DV = Short.MIN_VALUE;
}
}

protected final void initCGNS1SC6_DV(String s) {
if (!s.trim().isEmpty()) {
CGNS1SC6_DV = Byte.parseByte(s);
} else {
CGNS1SC6_DV = Byte.MIN_VALUE;
}
}

protected final void initCGNS2A_DV(String s) {
if (!s.trim().isEmpty()) {
CGNS2A_DV = Byte.parseByte(s);
} else {
CGNS2A_DV = Byte.MIN_VALUE;
}
}

protected final void initCGNS2B_DV(String s) {
if (!s.trim().isEmpty()) {
CGNS2B_DV = Byte.parseByte(s);
} else {
CGNS2B_DV = Byte.MIN_VALUE;
}
}

protected final void initCGNS2SC10_DV(String s) {
if (!s.trim().isEmpty()) {
CGNS2SC10_DV = Short.parseShort(s);
} else {
CGNS2SC10_DV = Short.MIN_VALUE;
}
}

protected final void initCGNS2SC6_DV(String s) {
if (!s.trim().isEmpty()) {
CGNS2SC6_DV = Byte.parseByte(s);
} else {
CGNS2SC6_DV = Byte.MIN_VALUE;
}
}

protected final void initCGS7CA_DV(String s) {
if (!s.trim().isEmpty()) {
CGS7CA_DV = Byte.parseByte(s);
} else {
CGS7CA_DV = Byte.MIN_VALUE;
}
}

protected final void initCGS7CS_DV(String s) {
if (!s.trim().isEmpty()) {
CGS7CS_DV = Byte.parseByte(s);
} else {
CGS7CS_DV = Byte.MIN_VALUE;
}
}

protected final void initCGS7N_DV(String s) {
if (!s.trim().isEmpty()) {
CGS7N_DV = Byte.parseByte(s);
} else {
CGS7N_DV = Byte.MIN_VALUE;
}
}

protected final void initCGSRMEM2_DV(String s) {
if (!s.trim().isEmpty()) {
CGSRMEM2_DV = Byte.parseByte(s);
} else {
CGSRMEM2_DV = Byte.MIN_VALUE;
}
}

protected final void initCGSRMEM_DV(String s) {
if (!s.trim().isEmpty()) {
CGSRMEM_DV = Byte.parseByte(s);
} else {
CGSRMEM_DV = Byte.MIN_VALUE;
}
}

protected final void initCGVFDV(String s) {
if (!s.trim().isEmpty()) {
CGVFDV = Byte.parseByte(s);
} else {
CGVFDV = Byte.MIN_VALUE;
}
}

protected final void initCGVFW_DV(String s) {
if (!s.trim().isEmpty()) {
CGVFW_DV = Byte.parseByte(s);
} else {
CGVFW_DV = Byte.MIN_VALUE;
}
}

protected final void initCGWRD_DV(String s) {
if (!s.trim().isEmpty()) {
CGWRD_DV = Byte.parseByte(s);
} else {
CGWRD_DV = Byte.MIN_VALUE;
}
}

protected final void initCGWRI1_DV(String s) {
if (!s.trim().isEmpty()) {
CGWRI1_DV = Byte.parseByte(s);
} else {
CGWRI1_DV = Byte.MIN_VALUE;
}
}

protected final void initCGWRI2_DV(String s) {
if (!s.trim().isEmpty()) {
CGWRI2_DV = Byte.parseByte(s);
} else {
CGWRI2_DV = Byte.MIN_VALUE;
}
}

protected final void initCGWRI3_DV(String s) {
if (!s.trim().isEmpty()) {
CGWRI3_DV = Byte.parseByte(s);
} else {
CGWRI3_DV = Byte.MIN_VALUE;
}
}

protected final void initCGWRI4_DV(String s) {
if (!s.trim().isEmpty()) {
CGWRI4_DV = Byte.parseByte(s);
} else {
CGWRI4_DV = Byte.MIN_VALUE;
}
}

protected final void initCGWRI_DV(String s) {
if (!s.trim().isEmpty()) {
CGWRI_DV = Byte.parseByte(s);
} else {
CGWRI_DV = Byte.MIN_VALUE;
}
}

protected final void initCH1BY4(String s) {
if (!s.trim().isEmpty()) {
CH1BY4 = Short.parseShort(s);
} else {
CH1BY4 = Short.MIN_VALUE;
}
}

protected final void initCHAID1(String s) {
if (!s.trim().isEmpty()) {
CHAID1 = Byte.parseByte(s);
} else {
CHAID1 = Byte.MIN_VALUE;
}
}

protected final void initCHAID2(String s) {
if (!s.trim().isEmpty()) {
CHAID2 = Byte.parseByte(s);
} else {
CHAID2 = Byte.MIN_VALUE;
}
}

protected final void initCHAID3(String s) {
if (!s.trim().isEmpty()) {
CHAID3 = Byte.parseByte(s);
} else {
CHAID3 = Byte.MIN_VALUE;
}
}

protected final void initCHAID4(String s) {
if (!s.trim().isEmpty()) {
CHAID4 = Byte.parseByte(s);
} else {
CHAID4 = Byte.MIN_VALUE;
}
}

protected final void initCHAID5(String s) {
if (!s.trim().isEmpty()) {
CHAID5 = Byte.parseByte(s);
} else {
CHAID5 = Byte.MIN_VALUE;
}
}

protected final void initCHAID6(String s) {
if (!s.trim().isEmpty()) {
CHAID6 = Byte.parseByte(s);
} else {
CHAID6 = Byte.MIN_VALUE;
}
}

protected final void initCHAID7(String s) {
if (!s.trim().isEmpty()) {
CHAID7 = Byte.parseByte(s);
} else {
CHAID7 = Byte.MIN_VALUE;
}
}

protected final void initCHAID8(String s) {
if (!s.trim().isEmpty()) {
CHAID8 = Byte.parseByte(s);
} else {
CHAID8 = Byte.MIN_VALUE;
}
}

protected final void initCHAID96(String s) {
if (!s.trim().isEmpty()) {
CHAID96 = Byte.parseByte(s);
} else {
CHAID96 = Byte.MIN_VALUE;
}
}

protected final void initCHAID97(String s) {
if (!s.trim().isEmpty()) {
CHAID97 = Byte.parseByte(s);
} else {
CHAID97 = Byte.MIN_VALUE;
}
}

protected final void initCHCON(String s) {
if (!s.trim().isEmpty()) {
CHCON = Byte.parseByte(s);
} else {
CHCON = Byte.MIN_VALUE;
}
}

protected final void initCHFAR(String s) {
if (!s.trim().isEmpty()) {
CHFAR = Byte.parseByte(s);
} else {
CHFAR = Byte.MIN_VALUE;
}
}

protected final void initCHILDPNO(String s) {
if (!s.trim().isEmpty()) {
CHILDPNO = Byte.parseByte(s);
} else {
CHILDPNO = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP(String s) {
if (!s.trim().isEmpty()) {
CHKRESP = Byte.parseByte(s);
} else {
CHKRESP = Byte.MIN_VALUE;
}
}

protected final void initCHSEE(String s) {
if (!s.trim().isEmpty()) {
CHSEE = Byte.parseByte(s);
} else {
CHSEE = Byte.MIN_VALUE;
}
}

protected final void initCINDTIME(String s) {
if (!s.trim().isEmpty()) {
CINDTIME = Integer.parseInt(s);
} else {
CINDTIME = Integer.MIN_VALUE;
}
}

protected final void initCITZN1(String s) {
if (!s.trim().isEmpty()) {
CITZN1 = Byte.parseByte(s);
} else {
CITZN1 = Byte.MIN_VALUE;
}
}

protected final void initCITZN2(String s) {
if (!s.trim().isEmpty()) {
CITZN2 = Byte.parseByte(s);
} else {
CITZN2 = Byte.MIN_VALUE;
}
}

protected final void initCITZN3(String s) {
if (!s.trim().isEmpty()) {
CITZN3 = Byte.parseByte(s);
} else {
CITZN3 = Byte.MIN_VALUE;
}
}

protected final void initCIVICDUTY(String s) {
if (!s.trim().isEmpty()) {
CIVICDUTY = Byte.parseByte(s);
} else {
CIVICDUTY = Byte.MIN_VALUE;
}
}

protected final void initCJBATT(String s) {
if (!s.trim().isEmpty()) {
CJBATT = Byte.parseByte(s);
} else {
CJBATT = Byte.MIN_VALUE;
}
}

protected final void initCJOB(String s) {
if (!s.trim().isEmpty()) {
CJOB = Byte.parseByte(s);
} else {
CJOB = Byte.MIN_VALUE;
}
}

protected final void initCLANGAB(String s) {
if (!s.trim().isEmpty()) {
CLANGAB = Byte.parseByte(s);
} else {
CLANGAB = Byte.MIN_VALUE;
}
}

protected final void initCLOSENUM(String s) {
if (!s.trim().isEmpty()) {
CLOSENUM = Short.parseShort(s);
} else {
CLOSENUM = Short.MIN_VALUE;
}
}

protected final void initCMCORD(String s) {
if (!s.trim().isEmpty()) {
CMCORD = Byte.parseByte(s);
} else {
CMCORD = Byte.MIN_VALUE;
}
}

protected final void initCMCORDALL(String s) {
if (!s.trim().isEmpty()) {
CMCORDALL = Byte.parseByte(s);
} else {
CMCORDALL = Byte.MIN_VALUE;
}
}

protected final void initCMCORDAM(String s) {
if (!s.trim().isEmpty()) {
CMCORDAM = Double.parseDouble(s);
} else {
CMCORDAM = Double.NaN;
}
}

protected final void initCMCORDPER(String s) {
if (!s.trim().isEmpty()) {
CMCORDPER = Byte.parseByte(s);
} else {
CMCORDPER = Byte.MIN_VALUE;
}
}

protected final void initCMCORDRCAM(String s) {
if (!s.trim().isEmpty()) {
CMCORDRCAM = Short.parseShort(s);
} else {
CMCORDRCAM = Short.MIN_VALUE;
}
}

protected final void initCMCORDRCPR(String s) {
if (!s.trim().isEmpty()) {
CMCORDRCPR = Byte.parseByte(s);
} else {
CMCORDRCPR = Byte.MIN_VALUE;
}
}

protected final void initCMCORDREC(String s) {
if (!s.trim().isEmpty()) {
CMCORDREC = Byte.parseByte(s);
} else {
CMCORDREC = Byte.MIN_VALUE;
}
}

protected final void initCMCORDTM(String s) {
if (!s.trim().isEmpty()) {
CMCORDTM = Byte.parseByte(s);
} else {
CMCORDTM = Byte.MIN_VALUE;
}
}

protected final void initCMCSAACT(String s) {
if (!s.trim().isEmpty()) {
CMCSAACT = Byte.parseByte(s);
} else {
CMCSAACT = Byte.MIN_VALUE;
}
}

protected final void initCMCSAALL(String s) {
if (!s.trim().isEmpty()) {
CMCSAALL = Byte.parseByte(s);
} else {
CMCSAALL = Byte.MIN_VALUE;
}
}

protected final void initCMCSAAM(String s) {
if (!s.trim().isEmpty()) {
CMCSAAM = Short.parseShort(s);
} else {
CMCSAAM = Short.MIN_VALUE;
}
}

protected final void initCMCSANIL1(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL1 = Byte.parseByte(s);
} else {
CMCSANIL1 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL2(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL2 = Byte.parseByte(s);
} else {
CMCSANIL2 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL3(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL3 = Byte.parseByte(s);
} else {
CMCSANIL3 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL4(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL4 = Byte.parseByte(s);
} else {
CMCSANIL4 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL5(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL5 = Byte.parseByte(s);
} else {
CMCSANIL5 = Byte.MIN_VALUE;
}
}

protected final void initCMCSANIL97(String s) {
if (!s.trim().isEmpty()) {
CMCSANIL97 = Byte.parseByte(s);
} else {
CMCSANIL97 = Byte.MIN_VALUE;
}
}

protected final void initCMCSAPER(String s) {
if (!s.trim().isEmpty()) {
CMCSAPER = Byte.parseByte(s);
} else {
CMCSAPER = Byte.MIN_VALUE;
}
}

protected final void initCMCSAPR(String s) {
if (!s.trim().isEmpty()) {
CMCSAPR = Byte.parseByte(s);
} else {
CMCSAPR = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR1(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR1 = Byte.parseByte(s);
} else {
CMKNDEVR1 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR2(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR2 = Byte.parseByte(s);
} else {
CMKNDEVR2 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR3(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR3 = Byte.parseByte(s);
} else {
CMKNDEVR3 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR4(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR4 = Byte.parseByte(s);
} else {
CMKNDEVR4 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR96(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR96 = Byte.parseByte(s);
} else {
CMKNDEVR96 = Byte.MIN_VALUE;
}
}

protected final void initCMKNDEVR97(String s) {
if (!s.trim().isEmpty()) {
CMKNDEVR97 = Byte.parseByte(s);
} else {
CMKNDEVR97 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT1(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT1 = Byte.parseByte(s);
} else {
CMLSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT2(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT2 = Byte.parseByte(s);
} else {
CMLSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL1(String s) {
if (!s.trim().isEmpty()) {
CMNIL1 = Byte.parseByte(s);
} else {
CMNIL1 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL2(String s) {
if (!s.trim().isEmpty()) {
CMNIL2 = Byte.parseByte(s);
} else {
CMNIL2 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL3(String s) {
if (!s.trim().isEmpty()) {
CMNIL3 = Byte.parseByte(s);
} else {
CMNIL3 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL4(String s) {
if (!s.trim().isEmpty()) {
CMNIL4 = Byte.parseByte(s);
} else {
CMNIL4 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL5(String s) {
if (!s.trim().isEmpty()) {
CMNIL5 = Byte.parseByte(s);
} else {
CMNIL5 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL6(String s) {
if (!s.trim().isEmpty()) {
CMNIL6 = Byte.parseByte(s);
} else {
CMNIL6 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL7(String s) {
if (!s.trim().isEmpty()) {
CMNIL7 = Byte.parseByte(s);
} else {
CMNIL7 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL8(String s) {
if (!s.trim().isEmpty()) {
CMNIL8 = Byte.parseByte(s);
} else {
CMNIL8 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL9(String s) {
if (!s.trim().isEmpty()) {
CMNIL9 = Byte.parseByte(s);
} else {
CMNIL9 = Byte.MIN_VALUE;
}
}

protected final void initCMNIL97(String s) {
if (!s.trim().isEmpty()) {
CMNIL97 = Byte.parseByte(s);
} else {
CMNIL97 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY1(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY1 = Byte.parseByte(s);
} else {
CMOTHPAY1 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY10(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY10 = Byte.parseByte(s);
} else {
CMOTHPAY10 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY11(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY11 = Byte.parseByte(s);
} else {
CMOTHPAY11 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY2(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY2 = Byte.parseByte(s);
} else {
CMOTHPAY2 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY3(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY3 = Byte.parseByte(s);
} else {
CMOTHPAY3 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY4(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY4 = Byte.parseByte(s);
} else {
CMOTHPAY4 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY5(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY5 = Byte.parseByte(s);
} else {
CMOTHPAY5 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY6(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY6 = Byte.parseByte(s);
} else {
CMOTHPAY6 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY7(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY7 = Byte.parseByte(s);
} else {
CMOTHPAY7 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY8(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY8 = Byte.parseByte(s);
} else {
CMOTHPAY8 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY9(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY9 = Byte.parseByte(s);
} else {
CMOTHPAY9 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY96(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY96 = Byte.parseByte(s);
} else {
CMOTHPAY96 = Byte.MIN_VALUE;
}
}

protected final void initCMOTHPAY97(String s) {
if (!s.trim().isEmpty()) {
CMOTHPAY97 = Byte.parseByte(s);
} else {
CMOTHPAY97 = Byte.MIN_VALUE;
}
}

protected final void initCMROUTE(String s) {
if (!s.trim().isEmpty()) {
CMROUTE = Byte.parseByte(s);
} else {
CMROUTE = Byte.MIN_VALUE;
}
}

protected final void initCMSAMEA(String s) {
if (!s.trim().isEmpty()) {
CMSAMEA = Byte.parseByte(s);
} else {
CMSAMEA = Byte.MIN_VALUE;
}
}

protected final void initCMSAMEB(String s) {
if (!s.trim().isEmpty()) {
CMSAMEB = Byte.parseByte(s);
} else {
CMSAMEB = Byte.MIN_VALUE;
}
}

protected final void initCMSAMEC(String s) {
if (!s.trim().isEmpty()) {
CMSAMEC = Byte.parseByte(s);
} else {
CMSAMEC = Byte.MIN_VALUE;
}
}

protected final void initCMVOL(String s) {
if (!s.trim().isEmpty()) {
CMVOL = Byte.parseByte(s);
} else {
CMVOL = Byte.MIN_VALUE;
}
}

protected final void initCMVOLALL(String s) {
if (!s.trim().isEmpty()) {
CMVOLALL = Byte.parseByte(s);
} else {
CMVOLALL = Byte.MIN_VALUE;
}
}

protected final void initCMVOLAM(String s) {
if (!s.trim().isEmpty()) {
CMVOLAM = Double.parseDouble(s);
} else {
CMVOLAM = Double.NaN;
}
}

protected final void initCMVOLPER(String s) {
if (!s.trim().isEmpty()) {
CMVOLPER = Byte.parseByte(s);
} else {
CMVOLPER = Byte.MIN_VALUE;
}
}

protected final void initCMVOLRCAM(String s) {
if (!s.trim().isEmpty()) {
CMVOLRCAM = Short.parseShort(s);
} else {
CMVOLRCAM = Short.MIN_VALUE;
}
}

protected final void initCMVOLRCPR(String s) {
if (!s.trim().isEmpty()) {
CMVOLRCPR = Byte.parseByte(s);
} else {
CMVOLRCPR = Byte.MIN_VALUE;
}
}

protected final void initCMVOLREC(String s) {
if (!s.trim().isEmpty()) {
CMVOLREC = Byte.parseByte(s);
} else {
CMVOLREC = Byte.MIN_VALUE;
}
}

protected final void initCMVOLTM(String s) {
if (!s.trim().isEmpty()) {
CMVOLTM = Byte.parseByte(s);
} else {
CMVOLTM = Byte.MIN_VALUE;
}
}

protected final void initCOGDIST(String s) {
if (!s.trim().isEmpty()) {
COGDIST = Byte.parseByte(s);
} else {
COGDIST = Byte.MIN_VALUE;
}
}

protected final void initCOGEND(String s) {
if (!s.trim().isEmpty()) {
COGEND = Byte.parseByte(s);
} else {
COGEND = Byte.MIN_VALUE;
}
}

protected final void initCOH1BM(String s) {
if (!s.trim().isEmpty()) {
COH1BM = Byte.parseByte(s);
} else {
COH1BM = Byte.MIN_VALUE;
}
}

protected final void initCOH1BY(String s) {
if (!s.trim().isEmpty()) {
COH1BY = Short.parseShort(s);
} else {
COH1BY = Short.MIN_VALUE;
}
}

protected final void initCOH1EM(String s) {
if (!s.trim().isEmpty()) {
COH1EM = Byte.parseByte(s);
} else {
COH1EM = Byte.MIN_VALUE;
}
}

protected final void initCOH1EY(String s) {
if (!s.trim().isEmpty()) {
COH1EY = Short.parseShort(s);
} else {
COH1EY = Short.MIN_VALUE;
}
}

protected final void initCOH1MR(String s) {
if (!s.trim().isEmpty()) {
COH1MR = Byte.parseByte(s);
} else {
COH1MR = Byte.MIN_VALUE;
}
}

protected final void initCOHAB(String s) {
if (!s.trim().isEmpty()) {
COHAB = Byte.parseByte(s);
} else {
COHAB = Byte.MIN_VALUE;
}
}

protected final void initCOHABN(String s) {
if (!s.trim().isEmpty()) {
COHABN = Byte.parseByte(s);
} else {
COHABN = Byte.MIN_VALUE;
}
}

protected final void initCOHAB_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
COHAB_DV = false;
} else {
COHAB_DV = true;
}
}
}

protected final void initCOLBENS1(String s) {
if (!s.trim().isEmpty()) {
COLBENS1 = Byte.parseByte(s);
} else {
COLBENS1 = Byte.MIN_VALUE;
}
}

protected final void initCOLBENS2(String s) {
if (!s.trim().isEmpty()) {
COLBENS2 = Byte.parseByte(s);
} else {
COLBENS2 = Byte.MIN_VALUE;
}
}

protected final void initCOLBENS3(String s) {
if (!s.trim().isEmpty()) {
COLBENS3 = Byte.parseByte(s);
} else {
COLBENS3 = Byte.MIN_VALUE;
}
}

protected final void initCOLBENS4(String s) {
if (!s.trim().isEmpty()) {
COLBENS4 = Byte.parseByte(s);
} else {
COLBENS4 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS11(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS11 = Byte.parseByte(s);
} else {
COMIMMLS11 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS110(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS110 = Byte.parseByte(s);
} else {
COMIMMLS110 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS12(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS12 = Byte.parseByte(s);
} else {
COMIMMLS12 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS13(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS13 = Byte.parseByte(s);
} else {
COMIMMLS13 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS14(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS14 = Byte.parseByte(s);
} else {
COMIMMLS14 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS15(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS15 = Byte.parseByte(s);
} else {
COMIMMLS15 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS16(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS16 = Byte.parseByte(s);
} else {
COMIMMLS16 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS17(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS17 = Byte.parseByte(s);
} else {
COMIMMLS17 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS18(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS18 = Byte.parseByte(s);
} else {
COMIMMLS18 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS19(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS19 = Byte.parseByte(s);
} else {
COMIMMLS19 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS196(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS196 = Byte.parseByte(s);
} else {
COMIMMLS196 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS21(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS21 = Byte.parseByte(s);
} else {
COMIMMLS21 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS210(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS210 = Byte.parseByte(s);
} else {
COMIMMLS210 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS22(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS22 = Byte.parseByte(s);
} else {
COMIMMLS22 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS23(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS23 = Byte.parseByte(s);
} else {
COMIMMLS23 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS24(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS24 = Byte.parseByte(s);
} else {
COMIMMLS24 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS25(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS25 = Byte.parseByte(s);
} else {
COMIMMLS25 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS26(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS26 = Byte.parseByte(s);
} else {
COMIMMLS26 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS27(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS27 = Byte.parseByte(s);
} else {
COMIMMLS27 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS28(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS28 = Byte.parseByte(s);
} else {
COMIMMLS28 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS29(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS29 = Byte.parseByte(s);
} else {
COMIMMLS29 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS296(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS296 = Byte.parseByte(s);
} else {
COMIMMLS296 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS31(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS31 = Byte.parseByte(s);
} else {
COMIMMLS31 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS310(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS310 = Byte.parseByte(s);
} else {
COMIMMLS310 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS32(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS32 = Byte.parseByte(s);
} else {
COMIMMLS32 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS33(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS33 = Byte.parseByte(s);
} else {
COMIMMLS33 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS34(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS34 = Byte.parseByte(s);
} else {
COMIMMLS34 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS35(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS35 = Byte.parseByte(s);
} else {
COMIMMLS35 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS36(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS36 = Byte.parseByte(s);
} else {
COMIMMLS36 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS37(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS37 = Byte.parseByte(s);
} else {
COMIMMLS37 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS38(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS38 = Byte.parseByte(s);
} else {
COMIMMLS38 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS39(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS39 = Byte.parseByte(s);
} else {
COMIMMLS39 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS396(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS396 = Byte.parseByte(s);
} else {
COMIMMLS396 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS41(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS41 = Byte.parseByte(s);
} else {
COMIMMLS41 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS410(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS410 = Byte.parseByte(s);
} else {
COMIMMLS410 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS42(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS42 = Byte.parseByte(s);
} else {
COMIMMLS42 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS43(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS43 = Byte.parseByte(s);
} else {
COMIMMLS43 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS44(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS44 = Byte.parseByte(s);
} else {
COMIMMLS44 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS45(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS45 = Byte.parseByte(s);
} else {
COMIMMLS45 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS46(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS46 = Byte.parseByte(s);
} else {
COMIMMLS46 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS47(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS47 = Byte.parseByte(s);
} else {
COMIMMLS47 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS48(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS48 = Byte.parseByte(s);
} else {
COMIMMLS48 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS49(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS49 = Byte.parseByte(s);
} else {
COMIMMLS49 = Byte.MIN_VALUE;
}
}

protected final void initCOMIMMLS496(String s) {
if (!s.trim().isEmpty()) {
COMIMMLS496 = Byte.parseByte(s);
} else {
COMIMMLS496 = Byte.MIN_VALUE;
}
}

protected final void initCONTFT(String s) {
if (!s.trim().isEmpty()) {
CONTFT = Byte.parseByte(s);
} else {
CONTFT = Byte.MIN_VALUE;
}
}

protected final void initCORDRECPER(String s) {
if (!s.trim().isEmpty()) {
CORDRECPER = Byte.parseByte(s);
} else {
CORDRECPER = Byte.MIN_VALUE;
}
}

protected final void initCOUNTRY(String s) {
if (!s.trim().isEmpty()) {
COUNTRY = Byte.parseByte(s);
} else {
COUNTRY = Byte.MIN_VALUE;
}
}

protected final void initCRDARK(String s) {
if (!s.trim().isEmpty()) {
CRDARK = Byte.parseByte(s);
} else {
CRDARK = Byte.MIN_VALUE;
}
}

protected final void initCRWORA(String s) {
if (!s.trim().isEmpty()) {
CRWORA = Byte.parseByte(s);
} else {
CRWORA = Byte.MIN_VALUE;
}
}

protected final void initCRWORB(String s) {
if (!s.trim().isEmpty()) {
CRWORB = Byte.parseByte(s);
} else {
CRWORB = Byte.MIN_VALUE;
}
}

protected final void initCSACALC(String s) {
if (!s.trim().isEmpty()) {
CSACALC = Byte.parseByte(s);
} else {
CSACALC = Byte.MIN_VALUE;
}
}

protected final void initCSACALCAM(String s) {
if (!s.trim().isEmpty()) {
CSACALCAM = Double.parseDouble(s);
} else {
CSACALCAM = Double.NaN;
}
}

protected final void initCSAPAYTO(String s) {
if (!s.trim().isEmpty()) {
CSAPAYTO = Byte.parseByte(s);
} else {
CSAPAYTO = Byte.MIN_VALUE;
}
}

protected final void initCSARECPER(String s) {
if (!s.trim().isEmpty()) {
CSARECPER = Byte.parseByte(s);
} else {
CSARECPER = Byte.MIN_VALUE;
}
}

protected final void initCSTAT(String s) {
if (!s.trim().isEmpty()) {
CSTAT = Byte.parseByte(s);
} else {
CSTAT = Byte.MIN_VALUE;
}
}

protected final void initCTADD1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD1_CODE = Byte.parseByte(s);
} else {
CTADD1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTADD2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD2_CODE = Byte.parseByte(s);
} else {
CTADD2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCNTY_CODE(String s) {
if (!s.trim().isEmpty()) {
CTCNTY_CODE = Byte.parseByte(s);
} else {
CTCNTY_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTEMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
CTEMAIL_CODE = Byte.parseByte(s);
} else {
CTEMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTPCODE_CODE(String s) {
if (!s.trim().isEmpty()) {
CTPCODE_CODE = Byte.parseByte(s);
} else {
CTPCODE_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTEL1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL1_CODE = Byte.parseByte(s);
} else {
CTTEL1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTEL2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL2_CODE = Byte.parseByte(s);
} else {
CTTEL2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTOWN_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTOWN_CODE = Byte.parseByte(s);
} else {
CTTOWN_CODE = Byte.MIN_VALUE;
}
}

protected final void initCUDDLEKID(String s) {
if (!s.trim().isEmpty()) {
CUDDLEKID = Byte.parseByte(s);
} else {
CUDDLEKID = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB1(String s) {
if (!s.trim().isEmpty()) {
CURRJOB1 = Byte.parseByte(s);
} else {
CURRJOB1 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB2(String s) {
if (!s.trim().isEmpty()) {
CURRJOB2 = Byte.parseByte(s);
} else {
CURRJOB2 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB3(String s) {
if (!s.trim().isEmpty()) {
CURRJOB3 = Byte.parseByte(s);
} else {
CURRJOB3 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB4(String s) {
if (!s.trim().isEmpty()) {
CURRJOB4 = Byte.parseByte(s);
} else {
CURRJOB4 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB5(String s) {
if (!s.trim().isEmpty()) {
CURRJOB5 = Byte.parseByte(s);
} else {
CURRJOB5 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB6(String s) {
if (!s.trim().isEmpty()) {
CURRJOB6 = Byte.parseByte(s);
} else {
CURRJOB6 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB7(String s) {
if (!s.trim().isEmpty()) {
CURRJOB7 = Byte.parseByte(s);
} else {
CURRJOB7 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB8(String s) {
if (!s.trim().isEmpty()) {
CURRJOB8 = Byte.parseByte(s);
} else {
CURRJOB8 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB9(String s) {
if (!s.trim().isEmpty()) {
CURRJOB9 = Byte.parseByte(s);
} else {
CURRJOB9 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART1(String s) {
if (!s.trim().isEmpty()) {
CURRPART1 = Byte.parseByte(s);
} else {
CURRPART1 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART2(String s) {
if (!s.trim().isEmpty()) {
CURRPART2 = Byte.parseByte(s);
} else {
CURRPART2 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART3(String s) {
if (!s.trim().isEmpty()) {
CURRPART3 = Byte.parseByte(s);
} else {
CURRPART3 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT1(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT1 = Byte.parseByte(s);
} else {
CURRSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT2(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT2 = Byte.parseByte(s);
} else {
CURRSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT3(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT3 = Byte.parseByte(s);
} else {
CURRSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT4(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT4 = Byte.parseByte(s);
} else {
CURRSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT5(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT5 = Byte.parseByte(s);
} else {
CURRSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT6(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT6 = Byte.parseByte(s);
} else {
CURRSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT7(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT7 = Byte.parseByte(s);
} else {
CURRSTAT7 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT8(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT8 = Byte.parseByte(s);
} else {
CURRSTAT8 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CURRSTAT9 = false;
} else {
CURRSTAT9 = true;
}
}
}

protected final void initDCSATM(String s) {
if (!s.trim().isEmpty()) {
DCSATM = Byte.parseByte(s);
} else {
DCSATM = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS11(String s) {
if (!s.trim().isEmpty()) {
DELAYLS11 = Byte.parseByte(s);
} else {
DELAYLS11 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS110(String s) {
if (!s.trim().isEmpty()) {
DELAYLS110 = Byte.parseByte(s);
} else {
DELAYLS110 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS12(String s) {
if (!s.trim().isEmpty()) {
DELAYLS12 = Byte.parseByte(s);
} else {
DELAYLS12 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS13(String s) {
if (!s.trim().isEmpty()) {
DELAYLS13 = Byte.parseByte(s);
} else {
DELAYLS13 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS14(String s) {
if (!s.trim().isEmpty()) {
DELAYLS14 = Byte.parseByte(s);
} else {
DELAYLS14 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS15(String s) {
if (!s.trim().isEmpty()) {
DELAYLS15 = Byte.parseByte(s);
} else {
DELAYLS15 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS16(String s) {
if (!s.trim().isEmpty()) {
DELAYLS16 = Byte.parseByte(s);
} else {
DELAYLS16 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS17(String s) {
if (!s.trim().isEmpty()) {
DELAYLS17 = Byte.parseByte(s);
} else {
DELAYLS17 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS18(String s) {
if (!s.trim().isEmpty()) {
DELAYLS18 = Byte.parseByte(s);
} else {
DELAYLS18 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS19(String s) {
if (!s.trim().isEmpty()) {
DELAYLS19 = Byte.parseByte(s);
} else {
DELAYLS19 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS196(String s) {
if (!s.trim().isEmpty()) {
DELAYLS196 = Byte.parseByte(s);
} else {
DELAYLS196 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS21(String s) {
if (!s.trim().isEmpty()) {
DELAYLS21 = Byte.parseByte(s);
} else {
DELAYLS21 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS210(String s) {
if (!s.trim().isEmpty()) {
DELAYLS210 = Byte.parseByte(s);
} else {
DELAYLS210 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS22(String s) {
if (!s.trim().isEmpty()) {
DELAYLS22 = Byte.parseByte(s);
} else {
DELAYLS22 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS23(String s) {
if (!s.trim().isEmpty()) {
DELAYLS23 = Byte.parseByte(s);
} else {
DELAYLS23 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS24(String s) {
if (!s.trim().isEmpty()) {
DELAYLS24 = Byte.parseByte(s);
} else {
DELAYLS24 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS25(String s) {
if (!s.trim().isEmpty()) {
DELAYLS25 = Byte.parseByte(s);
} else {
DELAYLS25 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS26(String s) {
if (!s.trim().isEmpty()) {
DELAYLS26 = Byte.parseByte(s);
} else {
DELAYLS26 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS27(String s) {
if (!s.trim().isEmpty()) {
DELAYLS27 = Byte.parseByte(s);
} else {
DELAYLS27 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS28(String s) {
if (!s.trim().isEmpty()) {
DELAYLS28 = Byte.parseByte(s);
} else {
DELAYLS28 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS29(String s) {
if (!s.trim().isEmpty()) {
DELAYLS29 = Byte.parseByte(s);
} else {
DELAYLS29 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS296(String s) {
if (!s.trim().isEmpty()) {
DELAYLS296 = Byte.parseByte(s);
} else {
DELAYLS296 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS31(String s) {
if (!s.trim().isEmpty()) {
DELAYLS31 = Byte.parseByte(s);
} else {
DELAYLS31 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS310(String s) {
if (!s.trim().isEmpty()) {
DELAYLS310 = Byte.parseByte(s);
} else {
DELAYLS310 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS32(String s) {
if (!s.trim().isEmpty()) {
DELAYLS32 = Byte.parseByte(s);
} else {
DELAYLS32 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS33(String s) {
if (!s.trim().isEmpty()) {
DELAYLS33 = Byte.parseByte(s);
} else {
DELAYLS33 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS34(String s) {
if (!s.trim().isEmpty()) {
DELAYLS34 = Byte.parseByte(s);
} else {
DELAYLS34 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS35(String s) {
if (!s.trim().isEmpty()) {
DELAYLS35 = Byte.parseByte(s);
} else {
DELAYLS35 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS36(String s) {
if (!s.trim().isEmpty()) {
DELAYLS36 = Byte.parseByte(s);
} else {
DELAYLS36 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS37(String s) {
if (!s.trim().isEmpty()) {
DELAYLS37 = Byte.parseByte(s);
} else {
DELAYLS37 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS38(String s) {
if (!s.trim().isEmpty()) {
DELAYLS38 = Byte.parseByte(s);
} else {
DELAYLS38 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS39(String s) {
if (!s.trim().isEmpty()) {
DELAYLS39 = Byte.parseByte(s);
} else {
DELAYLS39 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS396(String s) {
if (!s.trim().isEmpty()) {
DELAYLS396 = Byte.parseByte(s);
} else {
DELAYLS396 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS41(String s) {
if (!s.trim().isEmpty()) {
DELAYLS41 = Byte.parseByte(s);
} else {
DELAYLS41 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS410(String s) {
if (!s.trim().isEmpty()) {
DELAYLS410 = Byte.parseByte(s);
} else {
DELAYLS410 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS42(String s) {
if (!s.trim().isEmpty()) {
DELAYLS42 = Byte.parseByte(s);
} else {
DELAYLS42 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS43(String s) {
if (!s.trim().isEmpty()) {
DELAYLS43 = Byte.parseByte(s);
} else {
DELAYLS43 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS44(String s) {
if (!s.trim().isEmpty()) {
DELAYLS44 = Byte.parseByte(s);
} else {
DELAYLS44 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS45(String s) {
if (!s.trim().isEmpty()) {
DELAYLS45 = Byte.parseByte(s);
} else {
DELAYLS45 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS46(String s) {
if (!s.trim().isEmpty()) {
DELAYLS46 = Byte.parseByte(s);
} else {
DELAYLS46 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS47(String s) {
if (!s.trim().isEmpty()) {
DELAYLS47 = Byte.parseByte(s);
} else {
DELAYLS47 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS48(String s) {
if (!s.trim().isEmpty()) {
DELAYLS48 = Byte.parseByte(s);
} else {
DELAYLS48 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS49(String s) {
if (!s.trim().isEmpty()) {
DELAYLS49 = Byte.parseByte(s);
} else {
DELAYLS49 = Byte.MIN_VALUE;
}
}

protected final void initDELAYLS496(String s) {
if (!s.trim().isEmpty()) {
DELAYLS496 = Byte.parseByte(s);
} else {
DELAYLS496 = Byte.MIN_VALUE;
}
}

protected final void initDELAYSTOP1(String s) {
if (!s.trim().isEmpty()) {
DELAYSTOP1 = Byte.parseByte(s);
} else {
DELAYSTOP1 = Byte.MIN_VALUE;
}
}

protected final void initDELAYSTOP2(String s) {
if (!s.trim().isEmpty()) {
DELAYSTOP2 = Byte.parseByte(s);
} else {
DELAYSTOP2 = Byte.MIN_VALUE;
}
}

protected final void initDELAYSTOP3(String s) {
if (!s.trim().isEmpty()) {
DELAYSTOP3 = Byte.parseByte(s);
} else {
DELAYSTOP3 = Byte.MIN_VALUE;
}
}

protected final void initDELAYSTOP4(String s) {
if (!s.trim().isEmpty()) {
DELAYSTOP4 = Byte.parseByte(s);
} else {
DELAYSTOP4 = Byte.MIN_VALUE;
}
}

protected final void initDELAYSTOP5(String s) {
if (!s.trim().isEmpty()) {
DELAYSTOP5 = Byte.parseByte(s);
} else {
DELAYSTOP5 = Byte.MIN_VALUE;
}
}

protected final void initDELAYSTOP6(String s) {
if (!s.trim().isEmpty()) {
DELAYSTOP6 = Byte.parseByte(s);
} else {
DELAYSTOP6 = Byte.MIN_VALUE;
}
}

protected final void initDELAYSTOP7(String s) {
if (!s.trim().isEmpty()) {
DELAYSTOP7 = Byte.parseByte(s);
} else {
DELAYSTOP7 = Byte.MIN_VALUE;
}
}

protected final void initDELAYSTOP8(String s) {
if (!s.trim().isEmpty()) {
DELAYSTOP8 = Byte.parseByte(s);
} else {
DELAYSTOP8 = Byte.MIN_VALUE;
}
}

protected final void initDELAYSTOP97(String s) {
if (!s.trim().isEmpty()) {
DELAYSTOP97 = Byte.parseByte(s);
} else {
DELAYSTOP97 = Byte.MIN_VALUE;
}
}

protected final void initDEMORIENT(String s) {
if (!s.trim().isEmpty()) {
DEMORIENT = Byte.parseByte(s);
} else {
DEMORIENT = Byte.MIN_VALUE;
}
}

protected final void initDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DEPCHL_DV = false;
} else {
DEPCHL_DV = true;
}
}
}

protected final void initDINNER(String s) {
if (!s.trim().isEmpty()) {
DINNER = Byte.parseByte(s);
} else {
DINNER = Byte.MIN_VALUE;
}
}

protected final void initDISDIF1(String s) {
if (!s.trim().isEmpty()) {
DISDIF1 = Byte.parseByte(s);
} else {
DISDIF1 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF10(String s) {
if (!s.trim().isEmpty()) {
DISDIF10 = Byte.parseByte(s);
} else {
DISDIF10 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF11(String s) {
if (!s.trim().isEmpty()) {
DISDIF11 = Byte.parseByte(s);
} else {
DISDIF11 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF12(String s) {
if (!s.trim().isEmpty()) {
DISDIF12 = Byte.parseByte(s);
} else {
DISDIF12 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF2(String s) {
if (!s.trim().isEmpty()) {
DISDIF2 = Byte.parseByte(s);
} else {
DISDIF2 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF3(String s) {
if (!s.trim().isEmpty()) {
DISDIF3 = Byte.parseByte(s);
} else {
DISDIF3 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF4(String s) {
if (!s.trim().isEmpty()) {
DISDIF4 = Byte.parseByte(s);
} else {
DISDIF4 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF5(String s) {
if (!s.trim().isEmpty()) {
DISDIF5 = Byte.parseByte(s);
} else {
DISDIF5 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF6(String s) {
if (!s.trim().isEmpty()) {
DISDIF6 = Byte.parseByte(s);
} else {
DISDIF6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF7(String s) {
if (!s.trim().isEmpty()) {
DISDIF7 = Byte.parseByte(s);
} else {
DISDIF7 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF8(String s) {
if (!s.trim().isEmpty()) {
DISDIF8 = Byte.parseByte(s);
} else {
DISDIF8 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF9(String s) {
if (!s.trim().isEmpty()) {
DISDIF9 = Byte.parseByte(s);
} else {
DISDIF9 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF96(String s) {
if (!s.trim().isEmpty()) {
DISDIF96 = Byte.parseByte(s);
} else {
DISDIF96 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS1(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS1 = Byte.parseByte(s);
} else {
DISEFFECTS1 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS2(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS2 = Byte.parseByte(s);
} else {
DISEFFECTS2 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS3(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS3 = Byte.parseByte(s);
} else {
DISEFFECTS3 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS4(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS4 = Byte.parseByte(s);
} else {
DISEFFECTS4 = Byte.MIN_VALUE;
}
}

protected final void initDISEFFECTS5(String s) {
if (!s.trim().isEmpty()) {
DISEFFECTS5 = Byte.parseByte(s);
} else {
DISEFFECTS5 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK1(String s) {
if (!s.trim().isEmpty()) {
DIVCHK1 = Byte.parseByte(s);
} else {
DIVCHK1 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK2(String s) {
if (!s.trim().isEmpty()) {
DIVCHK2 = Byte.parseByte(s);
} else {
DIVCHK2 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN1(String s) {
if (!s.trim().isEmpty()) {
DIVFIN1 = Byte.parseByte(s);
} else {
DIVFIN1 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN2(String s) {
if (!s.trim().isEmpty()) {
DIVFIN2 = Byte.parseByte(s);
} else {
DIVFIN2 = Byte.MIN_VALUE;
}
}

protected final void initDKLM(String s) {
if (!s.trim().isEmpty()) {
DKLM = Byte.parseByte(s);
} else {
DKLM = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT11(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT11 = Byte.parseByte(s);
} else {
DMEMCONT11 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT12(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT12 = Byte.parseByte(s);
} else {
DMEMCONT12 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT13(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT13 = Byte.parseByte(s);
} else {
DMEMCONT13 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT21(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT21 = Byte.parseByte(s);
} else {
DMEMCONT21 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT210(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT210 = Byte.parseByte(s);
} else {
DMEMCONT210 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT211(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT211 = Byte.parseByte(s);
} else {
DMEMCONT211 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT212(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT212 = Byte.parseByte(s);
} else {
DMEMCONT212 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT213(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT213 = Byte.parseByte(s);
} else {
DMEMCONT213 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT214(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT214 = Byte.parseByte(s);
} else {
DMEMCONT214 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT215(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT215 = Byte.parseByte(s);
} else {
DMEMCONT215 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT216(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT216 = Byte.parseByte(s);
} else {
DMEMCONT216 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT22(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT22 = Byte.parseByte(s);
} else {
DMEMCONT22 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT23(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT23 = Byte.parseByte(s);
} else {
DMEMCONT23 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT24(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT24 = Byte.parseByte(s);
} else {
DMEMCONT24 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT25(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT25 = Byte.parseByte(s);
} else {
DMEMCONT25 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT26(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT26 = Byte.parseByte(s);
} else {
DMEMCONT26 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT27(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT27 = Byte.parseByte(s);
} else {
DMEMCONT27 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT28(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT28 = Byte.parseByte(s);
} else {
DMEMCONT28 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT29(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT29 = Byte.parseByte(s);
} else {
DMEMCONT29 = Byte.MIN_VALUE;
}
}

protected final void initDMEMCONT3(String s) {
if (!s.trim().isEmpty()) {
DMEMCONT3 = Byte.parseByte(s);
} else {
DMEMCONT3 = Byte.MIN_VALUE;
}
}

protected final void initDOBY_DV(String s) {
if (!s.trim().isEmpty()) {
DOBY_DV = Short.parseShort(s);
} else {
DOBY_DV = Short.MIN_VALUE;
}
}

protected final void initDRGMJ(String s) {
if (!s.trim().isEmpty()) {
DRGMJ = Byte.parseByte(s);
} else {
DRGMJ = Byte.MIN_VALUE;
}
}

protected final void initDRGOTH(String s) {
if (!s.trim().isEmpty()) {
DRGOTH = Byte.parseByte(s);
} else {
DRGOTH = Byte.MIN_VALUE;
}
}

protected final void initDRGSOL(String s) {
if (!s.trim().isEmpty()) {
DRGSOL = Byte.parseByte(s);
} else {
DRGSOL = Byte.MIN_VALUE;
}
}

protected final void initDRIVE(String s) {
if (!s.trim().isEmpty()) {
DRIVE = Byte.parseByte(s);
} else {
DRIVE = Byte.MIN_VALUE;
}
}

protected final void initDRNK4W(String s) {
if (!s.trim().isEmpty()) {
DRNK4W = Byte.parseByte(s);
} else {
DRNK4W = Byte.MIN_VALUE;
}
}

protected final void initDVAGE(String s) {
if (!s.trim().isEmpty()) {
DVAGE = Byte.parseByte(s);
} else {
DVAGE = Byte.MIN_VALUE;
}
}

protected final void initDVM1(String s) {
if (!s.trim().isEmpty()) {
DVM1 = Byte.parseByte(s);
} else {
DVM1 = Byte.MIN_VALUE;
}
}

protected final void initDVM2(String s) {
if (!s.trim().isEmpty()) {
DVM2 = Byte.parseByte(s);
} else {
DVM2 = Byte.MIN_VALUE;
}
}

protected final void initDVY41(String s) {
if (!s.trim().isEmpty()) {
DVY41 = Short.parseShort(s);
} else {
DVY41 = Short.MIN_VALUE;
}
}

protected final void initDVY42(String s) {
if (!s.trim().isEmpty()) {
DVY42 = Short.parseShort(s);
} else {
DVY42 = Short.MIN_VALUE;
}
}

protected final void initEATLIVU(String s) {
if (!s.trim().isEmpty()) {
EATLIVU = Byte.parseByte(s);
} else {
EATLIVU = Byte.MIN_VALUE;
}
}

protected final void initEDASP(String s) {
if (!s.trim().isEmpty()) {
EDASP = Byte.parseByte(s);
} else {
EDASP = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE(String s) {
if (!s.trim().isEmpty()) {
EDTYPE = Short.parseShort(s);
} else {
EDTYPE = Short.MIN_VALUE;
}
}

protected final void initEDUCATION(String s) {
if (!s.trim().isEmpty()) {
EDUCATION = Byte.parseByte(s);
} else {
EDUCATION = Byte.MIN_VALUE;
}
}

protected final void initEED12(String s) {
if (!s.trim().isEmpty()) {
EED12 = Byte.parseByte(s);
} else {
EED12 = Byte.MIN_VALUE;
}
}

protected final void initEMPCHK(String s) {
if (!s.trim().isEmpty()) {
EMPCHK = Byte.parseByte(s);
} else {
EMPCHK = Byte.MIN_VALUE;
}
}

protected final void initEMPLOY(String s) {
if (!s.trim().isEmpty()) {
EMPLOY = Byte.parseByte(s);
} else {
EMPLOY = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDD(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDD = Byte.parseByte(s);
} else {
EMPSTENDD = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDM(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDM = Byte.parseByte(s);
} else {
EMPSTENDM = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDY4(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDY4 = Short.parseShort(s);
} else {
EMPSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initENDMNTH1(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH1 = Byte.parseByte(s);
} else {
ENDMNTH1 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH2(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH2 = Byte.parseByte(s);
} else {
ENDMNTH2 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH3(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH3 = Byte.parseByte(s);
} else {
ENDMNTH3 = Byte.MIN_VALUE;
}
}

protected final void initEPROSH(String s) {
if (!s.trim().isEmpty()) {
EPROSH = Short.parseShort(s);
} else {
EPROSH = Short.MIN_VALUE;
}
}

protected final void initETHN_DV(String s) {
if (!s.trim().isEmpty()) {
ETHN_DV = Byte.parseByte(s);
} else {
ETHN_DV = Byte.MIN_VALUE;
}
}

protected final void initEVRALC(String s) {
if (!s.trim().isEmpty()) {
EVRALC = Byte.parseByte(s);
} else {
EVRALC = Byte.MIN_VALUE;
}
}

protected final void initEVRSMO(String s) {
if (!s.trim().isEmpty()) {
EVRSMO = Byte.parseByte(s);
} else {
EVRSMO = Byte.MIN_VALUE;
}
}

protected final void initEXPREAM(String s) {
if (!s.trim().isEmpty()) {
EXPREAM = Byte.parseByte(s);
} else {
EXPREAM = Byte.MIN_VALUE;
}
}

protected final void initEXSAME(String s) {
if (!s.trim().isEmpty()) {
EXSAME = Byte.parseByte(s);
} else {
EXSAME = Byte.MIN_VALUE;
}
}

protected final void initEXTNSA(String s) {
if (!s.trim().isEmpty()) {
EXTNSA = Byte.parseByte(s);
} else {
EXTNSA = Byte.MIN_VALUE;
}
}

protected final void initEXTRATE(String s) {
if (!s.trim().isEmpty()) {
EXTRATE = Double.parseDouble(s);
} else {
EXTRATE = Double.NaN;
}
}

protected final void initEXTREST(String s) {
if (!s.trim().isEmpty()) {
EXTREST = Byte.parseByte(s);
} else {
EXTREST = Byte.MIN_VALUE;
}
}

protected final void initFAMILY(String s) {
if (!s.trim().isEmpty()) {
FAMILY = Byte.parseByte(s);
} else {
FAMILY = Byte.MIN_VALUE;
}
}

protected final void initFAMSUP(String s) {
if (!s.trim().isEmpty()) {
FAMSUP = Byte.parseByte(s);
} else {
FAMSUP = Byte.MIN_VALUE;
}
}

protected final void initFARKID(String s) {
if (!s.trim().isEmpty()) {
FARKID = Byte.parseByte(s);
} else {
FARKID = Byte.MIN_VALUE;
}
}

protected final void initFATHER(String s) {
if (!s.trim().isEmpty()) {
FATHER = Byte.parseByte(s);
} else {
FATHER = Byte.MIN_VALUE;
}
}

protected final void initFEDLIK(String s) {
if (!s.trim().isEmpty()) {
FEDLIK = Byte.parseByte(s);
} else {
FEDLIK = Byte.MIN_VALUE;
}
}

protected final void initFEDNT(String s) {
if (!s.trim().isEmpty()) {
FEDNT = Byte.parseByte(s);
} else {
FEDNT = Byte.MIN_VALUE;
}
}

protected final void initFEDNTO_CODE(String s) {
if (!s.trim().isEmpty()) {
FEDNTO_CODE = Byte.parseByte(s);
} else {
FEDNTO_CODE = Byte.MIN_VALUE;
}
}

protected final void initFENOW(String s) {
if (!s.trim().isEmpty()) {
FENOW = Byte.parseByte(s);
} else {
FENOW = Byte.MIN_VALUE;
}
}

protected final void initFFBRFEDLW(String s) {
if (!s.trim().isEmpty()) {
FFBRFEDLW = Byte.parseByte(s);
} else {
FFBRFEDLW = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE01(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE01 = Byte.parseByte(s);
} else {
FF_BENTYPE01 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE02(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE02 = Byte.parseByte(s);
} else {
FF_BENTYPE02 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE03(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE03 = Byte.parseByte(s);
} else {
FF_BENTYPE03 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE04(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE04 = Byte.parseByte(s);
} else {
FF_BENTYPE04 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE05(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE05 = Byte.parseByte(s);
} else {
FF_BENTYPE05 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE06(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE06 = Byte.parseByte(s);
} else {
FF_BENTYPE06 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE07(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE07 = Byte.parseByte(s);
} else {
FF_BENTYPE07 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE08(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE08 = Byte.parseByte(s);
} else {
FF_BENTYPE08 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE09(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE09 = Byte.parseByte(s);
} else {
FF_BENTYPE09 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE10(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE10 = Byte.parseByte(s);
} else {
FF_BENTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE11(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE11 = Byte.parseByte(s);
} else {
FF_BENTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE12(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE12 = Byte.parseByte(s);
} else {
FF_BENTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE13(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE13 = Byte.parseByte(s);
} else {
FF_BENTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE14(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE14 = Byte.parseByte(s);
} else {
FF_BENTYPE14 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE15(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE15 = Byte.parseByte(s);
} else {
FF_BENTYPE15 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE16(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE16 = Byte.parseByte(s);
} else {
FF_BENTYPE16 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE17(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE17 = Byte.parseByte(s);
} else {
FF_BENTYPE17 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE18(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE18 = Byte.parseByte(s);
} else {
FF_BENTYPE18 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE19(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE19 = Byte.parseByte(s);
} else {
FF_BENTYPE19 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE20(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE20 = Byte.parseByte(s);
} else {
FF_BENTYPE20 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE21(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE21 = Byte.parseByte(s);
} else {
FF_BENTYPE21 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE22(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE22 = Byte.parseByte(s);
} else {
FF_BENTYPE22 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE23(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE23 = Byte.parseByte(s);
} else {
FF_BENTYPE23 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE24(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE24 = Byte.parseByte(s);
} else {
FF_BENTYPE24 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE25(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE25 = Byte.parseByte(s);
} else {
FF_BENTYPE25 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE26(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE26 = Byte.parseByte(s);
} else {
FF_BENTYPE26 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE27(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE27 = Byte.parseByte(s);
} else {
FF_BENTYPE27 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE28(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE28 = Byte.parseByte(s);
} else {
FF_BENTYPE28 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE29(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE29 = Byte.parseByte(s);
} else {
FF_BENTYPE29 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE30(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE30 = Byte.parseByte(s);
} else {
FF_BENTYPE30 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE31(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE31 = Byte.parseByte(s);
} else {
FF_BENTYPE31 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE32(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE32 = Byte.parseByte(s);
} else {
FF_BENTYPE32 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE33(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE33 = Byte.parseByte(s);
} else {
FF_BENTYPE33 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE34(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE34 = Byte.parseByte(s);
} else {
FF_BENTYPE34 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE35(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE35 = Byte.parseByte(s);
} else {
FF_BENTYPE35 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE36(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE36 = Byte.parseByte(s);
} else {
FF_BENTYPE36 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE37(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE37 = Byte.parseByte(s);
} else {
FF_BENTYPE37 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE38(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE38 = Byte.parseByte(s);
} else {
FF_BENTYPE38 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE39(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE39 = Byte.parseByte(s);
} else {
FF_BENTYPE39 = Byte.MIN_VALUE;
}
}

protected final void initFF_EMPLW(String s) {
if (!s.trim().isEmpty()) {
FF_EMPLW = Byte.parseByte(s);
} else {
FF_EMPLW = Byte.MIN_VALUE;
}
}

protected final void initFF_EVERINT(String s) {
if (!s.trim().isEmpty()) {
FF_EVERINT = Byte.parseByte(s);
} else {
FF_EVERINT = Byte.MIN_VALUE;
}
}

protected final void initFF_IVINTLANG(String s) {
if (!s.trim().isEmpty()) {
FF_IVINTLANG = Byte.parseByte(s);
} else {
FF_IVINTLANG = Byte.MIN_VALUE;
}
}

protected final void initFF_IVLOLW(String s) {
if (!s.trim().isEmpty()) {
FF_IVLOLW = Byte.parseByte(s);
} else {
FF_IVLOLW = Byte.MIN_VALUE;
}
}

protected final void initFF_JBMNGR(String s) {
if (!s.trim().isEmpty()) {
FF_JBMNGR = Byte.parseByte(s);
} else {
FF_JBMNGR = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSEMP(String s) {
if (!s.trim().isEmpty()) {
FF_JBSEMP = Byte.parseByte(s);
} else {
FF_JBSEMP = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSIZE(String s) {
if (!s.trim().isEmpty()) {
FF_JBSIZE = Byte.parseByte(s);
} else {
FF_JBSIZE = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSTAT(String s) {
if (!s.trim().isEmpty()) {
FF_JBSTAT = Byte.parseByte(s);
} else {
FF_JBSTAT = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG = Byte.parseByte(s);
} else {
FF_OPRLG = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0 = Byte.parseByte(s);
} else {
FF_OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0NI = Byte.parseByte(s);
} else {
FF_OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initFF_TEL(String s) {
if (!s.trim().isEmpty()) {
FF_TEL = Byte.parseByte(s);
} else {
FF_TEL = Byte.MIN_VALUE;
}
}

protected final void initFF_UKBORN(String s) {
if (!s.trim().isEmpty()) {
FF_UKBORN = Byte.parseByte(s);
} else {
FF_UKBORN = Byte.MIN_VALUE;
}
}

protected final void initFF_YR2UK4(String s) {
if (!s.trim().isEmpty()) {
FF_YR2UK4 = Short.parseShort(s);
} else {
FF_YR2UK4 = Short.MIN_VALUE;
}
}

protected final void initFIBENOTHR_DV(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_DV = Double.parseDouble(s);
} else {
FIBENOTHR_DV = Double.NaN;
}
}

protected final void initFIBENOTHR_IF(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_IF = Double.parseDouble(s);
} else {
FIBENOTHR_IF = Double.NaN;
}
}

protected final void initFIBENOTHR_TC(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_TC = Byte.parseByte(s);
} else {
FIBENOTHR_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_IF = Double.parseDouble(s);
} else {
FIMNGRS_IF = Double.NaN;
}
}

protected final void initFIMNGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_TC = Byte.parseByte(s);
} else {
FIMNGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNINVNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNINVNET_DV = Double.parseDouble(s);
} else {
FIMNINVNET_DV = Double.NaN;
}
}

protected final void initFIMNLABGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_IF = Double.parseDouble(s);
} else {
FIMNLABGRS_IF = Double.NaN;
}
}

protected final void initFIMNLABGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_TC = Byte.parseByte(s);
} else {
FIMNLABGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNLABNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_DV = Double.parseDouble(s);
} else {
FIMNLABNET_DV = Double.NaN;
}
}

protected final void initFIMNLABNET_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_TC = Byte.parseByte(s);
} else {
FIMNLABNET_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNMISDV(String s) {
if (!s.trim().isEmpty()) {
FIMNMISDV = Double.parseDouble(s);
} else {
FIMNMISDV = Double.NaN;
}
}

protected final void initFIMNNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNNET_DV = Double.parseDouble(s);
} else {
FIMNNET_DV = Double.NaN;
}
}

protected final void initFIMNPEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPEN_DV = Double.parseDouble(s);
} else {
FIMNPEN_DV = Double.NaN;
}
}

protected final void initFIMNPRBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPRBEN_DV = Double.parseDouble(s);
} else {
FIMNPRBEN_DV = Double.NaN;
}
}

protected final void initFIMNSBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNSBEN_DV = Double.parseDouble(s);
} else {
FIMNSBEN_DV = Double.NaN;
}
}

protected final void initFINFUT(String s) {
if (!s.trim().isEmpty()) {
FINFUT = Byte.parseByte(s);
} else {
FINFUT = Byte.MIN_VALUE;
}
}

protected final void initFIVEALCDR(String s) {
if (!s.trim().isEmpty()) {
FIVEALCDR = Byte.parseByte(s);
} else {
FIVEALCDR = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB1(String s) {
if (!s.trim().isEmpty()) {
FIYRDB1 = Byte.parseByte(s);
} else {
FIYRDB1 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB2(String s) {
if (!s.trim().isEmpty()) {
FIYRDB2 = Byte.parseByte(s);
} else {
FIYRDB2 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB3(String s) {
if (!s.trim().isEmpty()) {
FIYRDB3 = Byte.parseByte(s);
} else {
FIYRDB3 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB4(String s) {
if (!s.trim().isEmpty()) {
FIYRDB4 = Byte.parseByte(s);
} else {
FIYRDB4 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB5(String s) {
if (!s.trim().isEmpty()) {
FIYRDB5 = Byte.parseByte(s);
} else {
FIYRDB5 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB6(String s) {
if (!s.trim().isEmpty()) {
FIYRDB6 = Byte.parseByte(s);
} else {
FIYRDB6 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDIA(String s) {
if (!s.trim().isEmpty()) {
FIYRDIA = Integer.parseInt(s);
} else {
FIYRDIA = Integer.MIN_VALUE;
}
}

protected final void initFIYRINVINDV(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINDV = Double.parseDouble(s);
} else {
FIYRINVINDV = Double.NaN;
}
}

protected final void initFIYRINVINIF(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINIF = Byte.parseByte(s);
} else {
FIYRINVINIF = Byte.MIN_VALUE;
}
}

protected final void initFIYRINVINTC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRINVINTC = false;
} else {
FIYRINVINTC = true;
}
}
}

protected final void initFNPID(String s) {
if (!s.trim().isEmpty()) {
FNPID = Integer.parseInt(s);
} else {
FNPID = Integer.MIN_VALUE;
}
}

protected final void initFNPNO(String s) {
if (!s.trim().isEmpty()) {
FNPNO = Byte.parseByte(s);
} else {
FNPNO = Byte.MIN_VALUE;
}
}

protected final void initFNSPID(String s) {
if (!s.trim().isEmpty()) {
FNSPID = Integer.parseInt(s);
} else {
FNSPID = Integer.MIN_VALUE;
}
}

protected final void initFNSPNO(String s) {
if (!s.trim().isEmpty()) {
FNSPNO = Byte.parseByte(s);
} else {
FNSPNO = Byte.MIN_VALUE;
}
}

protected final void initFRDRG(String s) {
if (!s.trim().isEmpty()) {
FRDRG = Byte.parseByte(s);
} else {
FRDRG = Byte.MIN_VALUE;
}
}

protected final void initFROBULLI(String s) {
if (!s.trim().isEmpty()) {
FROBULLI = Byte.parseByte(s);
} else {
FROBULLI = Byte.MIN_VALUE;
}
}

protected final void initFROBULLY(String s) {
if (!s.trim().isEmpty()) {
FROBULLY = Byte.parseByte(s);
} else {
FROBULLY = Byte.MIN_VALUE;
}
}

protected final void initFRPBULLI(String s) {
if (!s.trim().isEmpty()) {
FRPBULLI = Byte.parseByte(s);
} else {
FRPBULLI = Byte.MIN_VALUE;
}
}

protected final void initFRPBULLY(String s) {
if (!s.trim().isEmpty()) {
FRPBULLY = Byte.parseByte(s);
} else {
FRPBULLY = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM1(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM1 = Byte.parseByte(s);
} else {
FT2ENDM1 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM2(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM2 = Byte.parseByte(s);
} else {
FT2ENDM2 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM3(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM3 = Byte.parseByte(s);
} else {
FT2ENDM3 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM4(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM4 = Byte.parseByte(s);
} else {
FT2ENDM4 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDY41(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY41 = Short.parseShort(s);
} else {
FT2ENDY41 = Short.MIN_VALUE;
}
}

protected final void initFT2ENDY42(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY42 = Short.parseShort(s);
} else {
FT2ENDY42 = Short.MIN_VALUE;
}
}

protected final void initFT2ENDY43(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY43 = Short.parseShort(s);
} else {
FT2ENDY43 = Short.MIN_VALUE;
}
}

protected final void initFT2ENDY44(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY44 = Short.parseShort(s);
} else {
FT2ENDY44 = Short.MIN_VALUE;
}
}

protected final void initFTEDANY(String s) {
if (!s.trim().isEmpty()) {
FTEDANY = Byte.parseByte(s);
} else {
FTEDANY = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND1(String s) {
if (!s.trim().isEmpty()) {
FTEDEND1 = Byte.parseByte(s);
} else {
FTEDEND1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND2(String s) {
if (!s.trim().isEmpty()) {
FTEDEND2 = Byte.parseByte(s);
} else {
FTEDEND2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND3(String s) {
if (!s.trim().isEmpty()) {
FTEDEND3 = Byte.parseByte(s);
} else {
FTEDEND3 = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND4(String s) {
if (!s.trim().isEmpty()) {
FTEDEND4 = Byte.parseByte(s);
} else {
FTEDEND4 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR1(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR1 = Byte.parseByte(s);
} else {
FTEDMOR1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR2(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR2 = Byte.parseByte(s);
} else {
FTEDMOR2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR3(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR3 = Byte.parseByte(s);
} else {
FTEDMOR3 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR4(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR4 = Byte.parseByte(s);
} else {
FTEDMOR4 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM1(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM1 = Byte.parseByte(s);
} else {
FTEDSTARTM1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM2(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM2 = Byte.parseByte(s);
} else {
FTEDSTARTM2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM3(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM3 = Byte.parseByte(s);
} else {
FTEDSTARTM3 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM4(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM4 = Byte.parseByte(s);
} else {
FTEDSTARTM4 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTY41(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY41 = Short.parseShort(s);
} else {
FTEDSTARTY41 = Short.MIN_VALUE;
}
}

protected final void initFTEDSTARTY42(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY42 = Short.parseShort(s);
} else {
FTEDSTARTY42 = Short.MIN_VALUE;
}
}

protected final void initFTEDSTARTY43(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY43 = Short.parseShort(s);
} else {
FTEDSTARTY43 = Short.MIN_VALUE;
}
}

protected final void initFTEDSTARTY44(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY44 = Short.parseShort(s);
} else {
FTEDSTARTY44 = Short.MIN_VALUE;
}
}

protected final void initFTENDM(String s) {
if (!s.trim().isEmpty()) {
FTENDM = Byte.parseByte(s);
} else {
FTENDM = Byte.MIN_VALUE;
}
}

protected final void initFTENDY4(String s) {
if (!s.trim().isEmpty()) {
FTENDY4 = Short.parseShort(s);
} else {
FTENDY4 = Short.MIN_VALUE;
}
}

protected final void initFTEXV(String s) {
if (!s.trim().isEmpty()) {
FTEXV = Integer.parseInt(s);
} else {
FTEXV = Integer.MIN_VALUE;
}
}

protected final void initFTEXW(String s) {
if (!s.trim().isEmpty()) {
FTEXW = Byte.parseByte(s);
} else {
FTEXW = Byte.MIN_VALUE;
}
}

protected final void initFTQUALS(String s) {
if (!s.trim().isEmpty()) {
FTQUALS = Byte.parseByte(s);
} else {
FTQUALS = Byte.MIN_VALUE;
}
}

protected final void initFUTRA(String s) {
if (!s.trim().isEmpty()) {
FUTRA = Short.parseShort(s);
} else {
FUTRA = Short.MIN_VALUE;
}
}

protected final void initFUTRB(String s) {
if (!s.trim().isEmpty()) {
FUTRB = Short.parseShort(s);
} else {
FUTRB = Short.MIN_VALUE;
}
}

protected final void initFUTRC(String s) {
if (!s.trim().isEmpty()) {
FUTRC = Short.parseShort(s);
} else {
FUTRC = Short.MIN_VALUE;
}
}

protected final void initFUTRD(String s) {
if (!s.trim().isEmpty()) {
FUTRD = Short.parseShort(s);
} else {
FUTRD = Short.MIN_VALUE;
}
}

protected final void initFUTRE(String s) {
if (!s.trim().isEmpty()) {
FUTRE = Short.parseShort(s);
} else {
FUTRE = Short.MIN_VALUE;
}
}

protected final void initFUTRF(String s) {
if (!s.trim().isEmpty()) {
FUTRF = Short.parseShort(s);
} else {
FUTRF = Short.MIN_VALUE;
}
}

protected final void initFUTRG(String s) {
if (!s.trim().isEmpty()) {
FUTRG = Short.parseShort(s);
} else {
FUTRG = Short.MIN_VALUE;
}
}

protected final void initFUTRH(String s) {
if (!s.trim().isEmpty()) {
FUTRH = Short.parseShort(s);
} else {
FUTRH = Short.MIN_VALUE;
}
}

protected final void initFUTRI(String s) {
if (!s.trim().isEmpty()) {
FUTRI = Short.parseShort(s);
} else {
FUTRI = Short.MIN_VALUE;
}
}

protected final void initFUTRJ(String s) {
if (!s.trim().isEmpty()) {
FUTRJ = Short.parseShort(s);
} else {
FUTRJ = Short.MIN_VALUE;
}
}

protected final void initFUTRK(String s) {
if (!s.trim().isEmpty()) {
FUTRK = Short.parseShort(s);
} else {
FUTRK = Short.MIN_VALUE;
}
}

protected final void initFUTRL(String s) {
if (!s.trim().isEmpty()) {
FUTRL = Short.parseShort(s);
} else {
FUTRL = Short.MIN_VALUE;
}
}

protected final void initFUTUREINT(String s) {
if (!s.trim().isEmpty()) {
FUTUREINT = Byte.parseByte(s);
} else {
FUTUREINT = Byte.MIN_VALUE;
}
}

protected final void initGRFPID(String s) {
if (!s.trim().isEmpty()) {
GRFPID = Integer.parseInt(s);
} else {
GRFPID = Integer.MIN_VALUE;
}
}

protected final void initGRFPNO(String s) {
if (!s.trim().isEmpty()) {
GRFPNO = Byte.parseByte(s);
} else {
GRFPNO = Byte.MIN_VALUE;
}
}

protected final void initGRMPID(String s) {
if (!s.trim().isEmpty()) {
GRMPID = Integer.parseInt(s);
} else {
GRMPID = Integer.MIN_VALUE;
}
}

protected final void initGRMPNO(String s) {
if (!s.trim().isEmpty()) {
GRMPNO = Byte.parseByte(s);
} else {
GRMPNO = Byte.MIN_VALUE;
}
}

protected final void initGRPBFTS(String s) {
if (!s.trim().isEmpty()) {
GRPBFTS = Byte.parseByte(s);
} else {
GRPBFTS = Byte.MIN_VALUE;
}
}

protected final void initHASSTEP(String s) {
if (!s.trim().isEmpty()) {
HASSTEP = Byte.parseByte(s);
} else {
HASSTEP = Byte.MIN_VALUE;
}
}

protected final void initHCOND1(String s) {
if (!s.trim().isEmpty()) {
HCOND1 = Byte.parseByte(s);
} else {
HCOND1 = Byte.MIN_VALUE;
}
}

protected final void initHCOND10(String s) {
if (!s.trim().isEmpty()) {
HCOND10 = Byte.parseByte(s);
} else {
HCOND10 = Byte.MIN_VALUE;
}
}

protected final void initHCOND11(String s) {
if (!s.trim().isEmpty()) {
HCOND11 = Byte.parseByte(s);
} else {
HCOND11 = Byte.MIN_VALUE;
}
}

protected final void initHCOND12(String s) {
if (!s.trim().isEmpty()) {
HCOND12 = Byte.parseByte(s);
} else {
HCOND12 = Byte.MIN_VALUE;
}
}

protected final void initHCOND13(String s) {
if (!s.trim().isEmpty()) {
HCOND13 = Byte.parseByte(s);
} else {
HCOND13 = Byte.MIN_VALUE;
}
}

protected final void initHCOND14(String s) {
if (!s.trim().isEmpty()) {
HCOND14 = Byte.parseByte(s);
} else {
HCOND14 = Byte.MIN_VALUE;
}
}

protected final void initHCOND15(String s) {
if (!s.trim().isEmpty()) {
HCOND15 = Byte.parseByte(s);
} else {
HCOND15 = Byte.MIN_VALUE;
}
}

protected final void initHCOND16(String s) {
if (!s.trim().isEmpty()) {
HCOND16 = Byte.parseByte(s);
} else {
HCOND16 = Byte.MIN_VALUE;
}
}

protected final void initHCOND17(String s) {
if (!s.trim().isEmpty()) {
HCOND17 = Byte.parseByte(s);
} else {
HCOND17 = Byte.MIN_VALUE;
}
}

protected final void initHCOND2(String s) {
if (!s.trim().isEmpty()) {
HCOND2 = Byte.parseByte(s);
} else {
HCOND2 = Byte.MIN_VALUE;
}
}

protected final void initHCOND3(String s) {
if (!s.trim().isEmpty()) {
HCOND3 = Byte.parseByte(s);
} else {
HCOND3 = Byte.MIN_VALUE;
}
}

protected final void initHCOND4(String s) {
if (!s.trim().isEmpty()) {
HCOND4 = Byte.parseByte(s);
} else {
HCOND4 = Byte.MIN_VALUE;
}
}

protected final void initHCOND5(String s) {
if (!s.trim().isEmpty()) {
HCOND5 = Byte.parseByte(s);
} else {
HCOND5 = Byte.MIN_VALUE;
}
}

protected final void initHCOND6(String s) {
if (!s.trim().isEmpty()) {
HCOND6 = Byte.parseByte(s);
} else {
HCOND6 = Byte.MIN_VALUE;
}
}

protected final void initHCOND7(String s) {
if (!s.trim().isEmpty()) {
HCOND7 = Byte.parseByte(s);
} else {
HCOND7 = Byte.MIN_VALUE;
}
}

protected final void initHCOND8(String s) {
if (!s.trim().isEmpty()) {
HCOND8 = Byte.parseByte(s);
} else {
HCOND8 = Byte.MIN_VALUE;
}
}

protected final void initHCOND9(String s) {
if (!s.trim().isEmpty()) {
HCOND9 = Byte.parseByte(s);
} else {
HCOND9 = Byte.MIN_VALUE;
}
}

protected final void initHCOND96(String s) {
if (!s.trim().isEmpty()) {
HCOND96 = Byte.parseByte(s);
} else {
HCOND96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA01(String s) {
if (!s.trim().isEmpty()) {
HCONDA01 = Byte.parseByte(s);
} else {
HCONDA01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA02(String s) {
if (!s.trim().isEmpty()) {
HCONDA02 = Byte.parseByte(s);
} else {
HCONDA02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA03(String s) {
if (!s.trim().isEmpty()) {
HCONDA03 = Byte.parseByte(s);
} else {
HCONDA03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA04(String s) {
if (!s.trim().isEmpty()) {
HCONDA04 = Byte.parseByte(s);
} else {
HCONDA04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA05(String s) {
if (!s.trim().isEmpty()) {
HCONDA05 = Byte.parseByte(s);
} else {
HCONDA05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA06(String s) {
if (!s.trim().isEmpty()) {
HCONDA06 = Byte.parseByte(s);
} else {
HCONDA06 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA07(String s) {
if (!s.trim().isEmpty()) {
HCONDA07 = Byte.parseByte(s);
} else {
HCONDA07 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA08(String s) {
if (!s.trim().isEmpty()) {
HCONDA08 = Byte.parseByte(s);
} else {
HCONDA08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA09(String s) {
if (!s.trim().isEmpty()) {
HCONDA09 = Byte.parseByte(s);
} else {
HCONDA09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA10(String s) {
if (!s.trim().isEmpty()) {
HCONDA10 = Byte.parseByte(s);
} else {
HCONDA10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA11(String s) {
if (!s.trim().isEmpty()) {
HCONDA11 = Byte.parseByte(s);
} else {
HCONDA11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA12(String s) {
if (!s.trim().isEmpty()) {
HCONDA12 = Byte.parseByte(s);
} else {
HCONDA12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA13(String s) {
if (!s.trim().isEmpty()) {
HCONDA13 = Byte.parseByte(s);
} else {
HCONDA13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA14(String s) {
if (!s.trim().isEmpty()) {
HCONDA14 = Byte.parseByte(s);
} else {
HCONDA14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA15(String s) {
if (!s.trim().isEmpty()) {
HCONDA15 = Byte.parseByte(s);
} else {
HCONDA15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA16(String s) {
if (!s.trim().isEmpty()) {
HCONDA16 = Byte.parseByte(s);
} else {
HCONDA16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA17(String s) {
if (!s.trim().isEmpty()) {
HCONDA17 = Byte.parseByte(s);
} else {
HCONDA17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDE6(String s) {
if (!s.trim().isEmpty()) {
HCONDE6 = Byte.parseByte(s);
} else {
HCONDE6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDE7(String s) {
if (!s.trim().isEmpty()) {
HCONDE7 = Byte.parseByte(s);
} else {
HCONDE7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDE96(String s) {
if (!s.trim().isEmpty()) {
HCONDE96 = Byte.parseByte(s);
} else {
HCONDE96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDEA6(String s) {
if (!s.trim().isEmpty()) {
HCONDEA6 = Byte.parseByte(s);
} else {
HCONDEA6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDEA7(String s) {
if (!s.trim().isEmpty()) {
HCONDEA7 = Byte.parseByte(s);
} else {
HCONDEA7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN1(String s) {
if (!s.trim().isEmpty()) {
HCONDN1 = Byte.parseByte(s);
} else {
HCONDN1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN10(String s) {
if (!s.trim().isEmpty()) {
HCONDN10 = Byte.parseByte(s);
} else {
HCONDN10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN11(String s) {
if (!s.trim().isEmpty()) {
HCONDN11 = Byte.parseByte(s);
} else {
HCONDN11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN12(String s) {
if (!s.trim().isEmpty()) {
HCONDN12 = Byte.parseByte(s);
} else {
HCONDN12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN13(String s) {
if (!s.trim().isEmpty()) {
HCONDN13 = Byte.parseByte(s);
} else {
HCONDN13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN14(String s) {
if (!s.trim().isEmpty()) {
HCONDN14 = Byte.parseByte(s);
} else {
HCONDN14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN15(String s) {
if (!s.trim().isEmpty()) {
HCONDN15 = Byte.parseByte(s);
} else {
HCONDN15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN16(String s) {
if (!s.trim().isEmpty()) {
HCONDN16 = Byte.parseByte(s);
} else {
HCONDN16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN17(String s) {
if (!s.trim().isEmpty()) {
HCONDN17 = Byte.parseByte(s);
} else {
HCONDN17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN2(String s) {
if (!s.trim().isEmpty()) {
HCONDN2 = Byte.parseByte(s);
} else {
HCONDN2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN3(String s) {
if (!s.trim().isEmpty()) {
HCONDN3 = Byte.parseByte(s);
} else {
HCONDN3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN4(String s) {
if (!s.trim().isEmpty()) {
HCONDN4 = Byte.parseByte(s);
} else {
HCONDN4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN5(String s) {
if (!s.trim().isEmpty()) {
HCONDN5 = Byte.parseByte(s);
} else {
HCONDN5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN6(String s) {
if (!s.trim().isEmpty()) {
HCONDN6 = Byte.parseByte(s);
} else {
HCONDN6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN7(String s) {
if (!s.trim().isEmpty()) {
HCONDN7 = Byte.parseByte(s);
} else {
HCONDN7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN8(String s) {
if (!s.trim().isEmpty()) {
HCONDN8 = Byte.parseByte(s);
} else {
HCONDN8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN9(String s) {
if (!s.trim().isEmpty()) {
HCONDN9 = Byte.parseByte(s);
} else {
HCONDN9 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN96(String s) {
if (!s.trim().isEmpty()) {
HCONDN96 = Byte.parseByte(s);
} else {
HCONDN96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO1(String s) {
if (!s.trim().isEmpty()) {
HCONDNO1 = Byte.parseByte(s);
} else {
HCONDNO1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO2(String s) {
if (!s.trim().isEmpty()) {
HCONDNO2 = Byte.parseByte(s);
} else {
HCONDNO2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO3(String s) {
if (!s.trim().isEmpty()) {
HCONDNO3 = Byte.parseByte(s);
} else {
HCONDNO3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO4(String s) {
if (!s.trim().isEmpty()) {
HCONDNO4 = Byte.parseByte(s);
} else {
HCONDNO4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO5(String s) {
if (!s.trim().isEmpty()) {
HCONDNO5 = Byte.parseByte(s);
} else {
HCONDNO5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO6(String s) {
if (!s.trim().isEmpty()) {
HCONDNO6 = Byte.parseByte(s);
} else {
HCONDNO6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO7(String s) {
if (!s.trim().isEmpty()) {
HCONDNO7 = Byte.parseByte(s);
} else {
HCONDNO7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO8(String s) {
if (!s.trim().isEmpty()) {
HCONDNO8 = Byte.parseByte(s);
} else {
HCONDNO8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS1(String s) {
if (!s.trim().isEmpty()) {
HCONDNS1 = Byte.parseByte(s);
} else {
HCONDNS1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS2(String s) {
if (!s.trim().isEmpty()) {
HCONDNS2 = Byte.parseByte(s);
} else {
HCONDNS2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS3(String s) {
if (!s.trim().isEmpty()) {
HCONDNS3 = Byte.parseByte(s);
} else {
HCONDNS3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS4(String s) {
if (!s.trim().isEmpty()) {
HCONDNS4 = Byte.parseByte(s);
} else {
HCONDNS4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS5(String s) {
if (!s.trim().isEmpty()) {
HCONDNS5 = Byte.parseByte(s);
} else {
HCONDNS5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS6(String s) {
if (!s.trim().isEmpty()) {
HCONDNS6 = Byte.parseByte(s);
} else {
HCONDNS6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS7(String s) {
if (!s.trim().isEmpty()) {
HCONDNS7 = Byte.parseByte(s);
} else {
HCONDNS7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS8(String s) {
if (!s.trim().isEmpty()) {
HCONDNS8 = Byte.parseByte(s);
} else {
HCONDNS8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS01(String s) {
if (!s.trim().isEmpty()) {
HCONDS01 = Byte.parseByte(s);
} else {
HCONDS01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS02(String s) {
if (!s.trim().isEmpty()) {
HCONDS02 = Byte.parseByte(s);
} else {
HCONDS02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS03(String s) {
if (!s.trim().isEmpty()) {
HCONDS03 = Byte.parseByte(s);
} else {
HCONDS03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS04(String s) {
if (!s.trim().isEmpty()) {
HCONDS04 = Byte.parseByte(s);
} else {
HCONDS04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS05(String s) {
if (!s.trim().isEmpty()) {
HCONDS05 = Byte.parseByte(s);
} else {
HCONDS05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS08(String s) {
if (!s.trim().isEmpty()) {
HCONDS08 = Byte.parseByte(s);
} else {
HCONDS08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS09(String s) {
if (!s.trim().isEmpty()) {
HCONDS09 = Byte.parseByte(s);
} else {
HCONDS09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS10(String s) {
if (!s.trim().isEmpty()) {
HCONDS10 = Byte.parseByte(s);
} else {
HCONDS10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS11(String s) {
if (!s.trim().isEmpty()) {
HCONDS11 = Byte.parseByte(s);
} else {
HCONDS11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS12(String s) {
if (!s.trim().isEmpty()) {
HCONDS12 = Byte.parseByte(s);
} else {
HCONDS12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS13(String s) {
if (!s.trim().isEmpty()) {
HCONDS13 = Byte.parseByte(s);
} else {
HCONDS13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS14(String s) {
if (!s.trim().isEmpty()) {
HCONDS14 = Byte.parseByte(s);
} else {
HCONDS14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS15(String s) {
if (!s.trim().isEmpty()) {
HCONDS15 = Byte.parseByte(s);
} else {
HCONDS15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS16(String s) {
if (!s.trim().isEmpty()) {
HCONDS16 = Byte.parseByte(s);
} else {
HCONDS16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS17(String s) {
if (!s.trim().isEmpty()) {
HCONDS17 = Byte.parseByte(s);
} else {
HCONDS17 = Byte.MIN_VALUE;
}
}

protected final void initHEALTH(String s) {
if (!s.trim().isEmpty()) {
HEALTH = Byte.parseByte(s);
} else {
HEALTH = Byte.MIN_VALUE;
}
}

protected final void initHEARCOMPUTER(String s) {
if (!s.trim().isEmpty()) {
HEARCOMPUTER = Byte.parseByte(s);
} else {
HEARCOMPUTER = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTF(String s) {
if (!s.trim().isEmpty()) {
HGADOPTF = Byte.parseByte(s);
} else {
HGADOPTF = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTM(String s) {
if (!s.trim().isEmpty()) {
HGADOPTM = Byte.parseByte(s);
} else {
HGADOPTM = Byte.MIN_VALUE;
}
}

protected final void initHGPART(String s) {
if (!s.trim().isEmpty()) {
HGPART = Byte.parseByte(s);
} else {
HGPART = Byte.MIN_VALUE;
}
}

protected final void initHHRESP_DV(String s) {
if (!s.trim().isEmpty()) {
HHRESP_DV = Byte.parseByte(s);
} else {
HHRESP_DV = Byte.MIN_VALUE;
}
}

protected final void initHHTYPE_DV(String s) {
if (!s.trim().isEmpty()) {
HHTYPE_DV = Byte.parseByte(s);
} else {
HHTYPE_DV = Byte.MIN_VALUE;
}
}

protected final void initHITSIB(String s) {
if (!s.trim().isEmpty()) {
HITSIB = Byte.parseByte(s);
} else {
HITSIB = Byte.MIN_VALUE;
}
}

protected final void initHLPHMWK(String s) {
if (!s.trim().isEmpty()) {
HLPHMWK = Byte.parseByte(s);
} else {
HLPHMWK = Byte.MIN_VALUE;
}
}

protected final void initHOOD15(String s) {
if (!s.trim().isEmpty()) {
HOOD15 = Byte.parseByte(s);
} else {
HOOD15 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC1(String s) {
if (!s.trim().isEmpty()) {
HOSPC1 = Byte.parseByte(s);
} else {
HOSPC1 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC2(String s) {
if (!s.trim().isEmpty()) {
HOSPC2 = Byte.parseByte(s);
} else {
HOSPC2 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC3(String s) {
if (!s.trim().isEmpty()) {
HOSPC3 = Byte.parseByte(s);
} else {
HOSPC3 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC4(String s) {
if (!s.trim().isEmpty()) {
HOSPC4 = Byte.parseByte(s);
} else {
HOSPC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC5(String s) {
if (!s.trim().isEmpty()) {
HOSPC5 = Byte.parseByte(s);
} else {
HOSPC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC6(String s) {
if (!s.trim().isEmpty()) {
HOSPC6 = Byte.parseByte(s);
} else {
HOSPC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC7(String s) {
if (!s.trim().isEmpty()) {
HOSPC7 = Byte.parseByte(s);
} else {
HOSPC7 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC8(String s) {
if (!s.trim().isEmpty()) {
HOSPC8 = Byte.parseByte(s);
} else {
HOSPC8 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC1(String s) {
if (!s.trim().isEmpty()) {
HOSPDC1 = Short.parseShort(s);
} else {
HOSPDC1 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC2(String s) {
if (!s.trim().isEmpty()) {
HOSPDC2 = Short.parseShort(s);
} else {
HOSPDC2 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC3(String s) {
if (!s.trim().isEmpty()) {
HOSPDC3 = Short.parseShort(s);
} else {
HOSPDC3 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC4(String s) {
if (!s.trim().isEmpty()) {
HOSPDC4 = Byte.parseByte(s);
} else {
HOSPDC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC5(String s) {
if (!s.trim().isEmpty()) {
HOSPDC5 = Byte.parseByte(s);
} else {
HOSPDC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC6(String s) {
if (!s.trim().isEmpty()) {
HOSPDC6 = Byte.parseByte(s);
} else {
HOSPDC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC7(String s) {
if (!s.trim().isEmpty()) {
HOSPDC7 = Byte.parseByte(s);
} else {
HOSPDC7 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC8(String s) {
if (!s.trim().isEmpty()) {
HOSPDC8 = Byte.parseByte(s);
} else {
HOSPDC8 = Byte.MIN_VALUE;
}
}

protected final void initHOUSING(String s) {
if (!s.trim().isEmpty()) {
HOUSING = Byte.parseByte(s);
} else {
HOUSING = Byte.MIN_VALUE;
}
}

protected final void initHRPID(String s) {
if (!s.trim().isEmpty()) {
HRPID = Integer.parseInt(s);
} else {
HRPID = Integer.MIN_VALUE;
}
}

protected final void initHRPNO(String s) {
if (!s.trim().isEmpty()) {
HRPNO = Byte.parseByte(s);
} else {
HRPNO = Byte.MIN_VALUE;
}
}

protected final void initIENDDATMM(String s) {
if (!s.trim().isEmpty()) {
IENDDATMM = Byte.parseByte(s);
} else {
IENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATSS(String s) {
if (!s.trim().isEmpty()) {
IENDDATSS = Byte.parseByte(s);
} else {
IENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initIMMSTOP1(String s) {
if (!s.trim().isEmpty()) {
IMMSTOP1 = Byte.parseByte(s);
} else {
IMMSTOP1 = Byte.MIN_VALUE;
}
}

protected final void initIMMSTOP2(String s) {
if (!s.trim().isEmpty()) {
IMMSTOP2 = Byte.parseByte(s);
} else {
IMMSTOP2 = Byte.MIN_VALUE;
}
}

protected final void initIMMSTOP3(String s) {
if (!s.trim().isEmpty()) {
IMMSTOP3 = Byte.parseByte(s);
} else {
IMMSTOP3 = Byte.MIN_VALUE;
}
}

protected final void initIMMSTOP4(String s) {
if (!s.trim().isEmpty()) {
IMMSTOP4 = Byte.parseByte(s);
} else {
IMMSTOP4 = Byte.MIN_VALUE;
}
}

protected final void initIMMSTOP5(String s) {
if (!s.trim().isEmpty()) {
IMMSTOP5 = Byte.parseByte(s);
} else {
IMMSTOP5 = Byte.MIN_VALUE;
}
}

protected final void initIMMSTOP6(String s) {
if (!s.trim().isEmpty()) {
IMMSTOP6 = Byte.parseByte(s);
} else {
IMMSTOP6 = Byte.MIN_VALUE;
}
}

protected final void initIMMSTOP7(String s) {
if (!s.trim().isEmpty()) {
IMMSTOP7 = Byte.parseByte(s);
} else {
IMMSTOP7 = Byte.MIN_VALUE;
}
}

protected final void initIMMSTOP8(String s) {
if (!s.trim().isEmpty()) {
IMMSTOP8 = Byte.parseByte(s);
} else {
IMMSTOP8 = Byte.MIN_VALUE;
}
}

protected final void initIMMSTOP97(String s) {
if (!s.trim().isEmpty()) {
IMMSTOP97 = Byte.parseByte(s);
} else {
IMMSTOP97 = Byte.MIN_VALUE;
}
}

protected final void initIND5MUS_LW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_LW = Double.parseDouble(s);
} else {
IND5MUS_LW = Double.NaN;
}
}

protected final void initIND5MUS_XW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_XW = Double.parseDouble(s);
} else {
IND5MUS_XW = Double.NaN;
}
}

protected final void initINDBD91_LW(String s) {
if (!s.trim().isEmpty()) {
INDBD91_LW = Double.parseDouble(s);
} else {
INDBD91_LW = Double.NaN;
}
}

protected final void initINDBDUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDBDUB_LW = Double.parseDouble(s);
} else {
INDBDUB_LW = Double.NaN;
}
}

protected final void initINDIN01_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN01_LW = Double.parseDouble(s);
} else {
INDIN01_LW = Double.NaN;
}
}

protected final void initINDIN91_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN91_LW = Double.parseDouble(s);
} else {
INDIN91_LW = Double.NaN;
}
}

protected final void initINDINUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_LW = Double.parseDouble(s);
} else {
INDINUB_LW = Double.NaN;
}
}

protected final void initINDINUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_XW = Double.parseDouble(s);
} else {
INDINUB_XW = Double.NaN;
}
}

protected final void initINDINUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUS_LW = Double.parseDouble(s);
} else {
INDINUS_LW = Double.NaN;
}
}

protected final void initINDMODE(String s) {
if (!s.trim().isEmpty()) {
INDMODE = Byte.parseByte(s);
} else {
INDMODE = Byte.MIN_VALUE;
}
}

protected final void initINDNS91_LW(String s) {
if (!s.trim().isEmpty()) {
INDNS91_LW = Double.parseDouble(s);
} else {
INDNS91_LW = Double.NaN;
}
}

protected final void initINDNSUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDNSUB_LW = Double.parseDouble(s);
} else {
INDNSUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_LW = Double.parseDouble(s);
} else {
INDPXUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_XW = Double.parseDouble(s);
} else {
INDPXUB_XW = Double.NaN;
}
}

protected final void initINDPXUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUS_LW = Double.parseDouble(s);
} else {
INDPXUS_LW = Double.NaN;
}
}

protected final void initINDSCUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_LW = Double.parseDouble(s);
} else {
INDSCUB_LW = Double.NaN;
}
}

protected final void initINDSCUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_XW = Double.parseDouble(s);
} else {
INDSCUB_XW = Double.NaN;
}
}

protected final void initINDSCUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUS_LW = Double.parseDouble(s);
} else {
INDSCUS_LW = Double.NaN;
}
}

protected final void initINSULTED1(String s) {
if (!s.trim().isEmpty()) {
INSULTED1 = Byte.parseByte(s);
} else {
INSULTED1 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED10(String s) {
if (!s.trim().isEmpty()) {
INSULTED10 = Byte.parseByte(s);
} else {
INSULTED10 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED11(String s) {
if (!s.trim().isEmpty()) {
INSULTED11 = Byte.parseByte(s);
} else {
INSULTED11 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED2(String s) {
if (!s.trim().isEmpty()) {
INSULTED2 = Byte.parseByte(s);
} else {
INSULTED2 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED3(String s) {
if (!s.trim().isEmpty()) {
INSULTED3 = Byte.parseByte(s);
} else {
INSULTED3 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED4(String s) {
if (!s.trim().isEmpty()) {
INSULTED4 = Byte.parseByte(s);
} else {
INSULTED4 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED5(String s) {
if (!s.trim().isEmpty()) {
INSULTED5 = Byte.parseByte(s);
} else {
INSULTED5 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED6(String s) {
if (!s.trim().isEmpty()) {
INSULTED6 = Byte.parseByte(s);
} else {
INSULTED6 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED7(String s) {
if (!s.trim().isEmpty()) {
INSULTED7 = Byte.parseByte(s);
} else {
INSULTED7 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED8(String s) {
if (!s.trim().isEmpty()) {
INSULTED8 = Byte.parseByte(s);
} else {
INSULTED8 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED9(String s) {
if (!s.trim().isEmpty()) {
INSULTED9 = Byte.parseByte(s);
} else {
INSULTED9 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED96(String s) {
if (!s.trim().isEmpty()) {
INSULTED96 = Byte.parseByte(s);
} else {
INSULTED96 = Byte.MIN_VALUE;
}
}

protected final void initINSULTED97(String s) {
if (!s.trim().isEmpty()) {
INSULTED97 = Byte.parseByte(s);
} else {
INSULTED97 = Byte.MIN_VALUE;
}
}

protected final void initINSULTEDO_CODE(String s) {
if (!s.trim().isEmpty()) {
INSULTEDO_CODE = Byte.parseByte(s);
} else {
INSULTEDO_CODE = Byte.MIN_VALUE;
}
}

protected final void initINSULTED_DV(String s) {
if (!s.trim().isEmpty()) {
INSULTED_DV = Byte.parseByte(s);
} else {
INSULTED_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATD_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATD_DV = Byte.parseByte(s);
} else {
INTDATD_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATM_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATM_DV = Byte.parseByte(s);
} else {
INTDATM_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATY_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATY_DV = Short.parseShort(s);
} else {
INTDATY_DV = Short.MIN_VALUE;
}
}

protected final void initINTIMMLS11(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS11 = Byte.parseByte(s);
} else {
INTIMMLS11 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS110(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS110 = Byte.parseByte(s);
} else {
INTIMMLS110 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS12(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS12 = Byte.parseByte(s);
} else {
INTIMMLS12 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS13(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS13 = Byte.parseByte(s);
} else {
INTIMMLS13 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS14(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS14 = Byte.parseByte(s);
} else {
INTIMMLS14 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS15(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS15 = Byte.parseByte(s);
} else {
INTIMMLS15 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS16(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS16 = Byte.parseByte(s);
} else {
INTIMMLS16 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS17(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS17 = Byte.parseByte(s);
} else {
INTIMMLS17 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS18(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS18 = Byte.parseByte(s);
} else {
INTIMMLS18 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS19(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS19 = Byte.parseByte(s);
} else {
INTIMMLS19 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS196(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS196 = Byte.parseByte(s);
} else {
INTIMMLS196 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS21(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS21 = Byte.parseByte(s);
} else {
INTIMMLS21 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS210(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS210 = Byte.parseByte(s);
} else {
INTIMMLS210 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS22(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS22 = Byte.parseByte(s);
} else {
INTIMMLS22 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS23(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS23 = Byte.parseByte(s);
} else {
INTIMMLS23 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS24(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS24 = Byte.parseByte(s);
} else {
INTIMMLS24 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS25(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS25 = Byte.parseByte(s);
} else {
INTIMMLS25 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS26(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS26 = Byte.parseByte(s);
} else {
INTIMMLS26 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS27(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS27 = Byte.parseByte(s);
} else {
INTIMMLS27 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS28(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS28 = Byte.parseByte(s);
} else {
INTIMMLS28 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS29(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS29 = Byte.parseByte(s);
} else {
INTIMMLS29 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS296(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS296 = Byte.parseByte(s);
} else {
INTIMMLS296 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS31(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS31 = Byte.parseByte(s);
} else {
INTIMMLS31 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS310(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS310 = Byte.parseByte(s);
} else {
INTIMMLS310 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS32(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS32 = Byte.parseByte(s);
} else {
INTIMMLS32 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS33(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS33 = Byte.parseByte(s);
} else {
INTIMMLS33 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS34(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS34 = Byte.parseByte(s);
} else {
INTIMMLS34 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS35(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS35 = Byte.parseByte(s);
} else {
INTIMMLS35 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS36(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS36 = Byte.parseByte(s);
} else {
INTIMMLS36 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS37(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS37 = Byte.parseByte(s);
} else {
INTIMMLS37 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS38(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS38 = Byte.parseByte(s);
} else {
INTIMMLS38 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS39(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS39 = Byte.parseByte(s);
} else {
INTIMMLS39 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS396(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS396 = Byte.parseByte(s);
} else {
INTIMMLS396 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS41(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS41 = Byte.parseByte(s);
} else {
INTIMMLS41 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS410(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS410 = Byte.parseByte(s);
} else {
INTIMMLS410 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS42(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS42 = Byte.parseByte(s);
} else {
INTIMMLS42 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS43(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS43 = Byte.parseByte(s);
} else {
INTIMMLS43 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS44(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS44 = Byte.parseByte(s);
} else {
INTIMMLS44 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS45(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS45 = Byte.parseByte(s);
} else {
INTIMMLS45 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS46(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS46 = Byte.parseByte(s);
} else {
INTIMMLS46 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS47(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS47 = Byte.parseByte(s);
} else {
INTIMMLS47 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS48(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS48 = Byte.parseByte(s);
} else {
INTIMMLS48 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS49(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS49 = Byte.parseByte(s);
} else {
INTIMMLS49 = Byte.MIN_VALUE;
}
}

protected final void initINTIMMLS496(String s) {
if (!s.trim().isEmpty()) {
INTIMMLS496 = Byte.parseByte(s);
} else {
INTIMMLS496 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO1(String s) {
if (!s.trim().isEmpty()) {
INVITRO1 = Byte.parseByte(s);
} else {
INVITRO1 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO2(String s) {
if (!s.trim().isEmpty()) {
INVITRO2 = Byte.parseByte(s);
} else {
INVITRO2 = Byte.MIN_VALUE;
}
}

protected final void initINVITRO3(String s) {
if (!s.trim().isEmpty()) {
INVITRO3 = Byte.parseByte(s);
} else {
INVITRO3 = Byte.MIN_VALUE;
}
}

protected final void initIOUTCOME(String s) {
if (!s.trim().isEmpty()) {
IOUTCOME = Byte.parseByte(s);
} else {
IOUTCOME = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATMM = Byte.parseByte(s);
} else {
ISTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATSS = Byte.parseByte(s);
} else {
ISTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initISYEAR(String s) {
if (!s.trim().isEmpty()) {
ISYEAR = Short.parseShort(s);
} else {
ISYEAR = Short.MIN_VALUE;
}
}

protected final void initIVAFFCT11(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT11 = Byte.parseByte(s);
} else {
IVAFFCT11 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT12(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT12 = Byte.parseByte(s);
} else {
IVAFFCT12 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT13(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT13 = Byte.parseByte(s);
} else {
IVAFFCT13 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT14(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT14 = Byte.parseByte(s);
} else {
IVAFFCT14 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT15(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT15 = Byte.parseByte(s);
} else {
IVAFFCT15 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT17(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT17 = Byte.parseByte(s);
} else {
IVAFFCT17 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT21(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT21 = Byte.parseByte(s);
} else {
IVAFFCT21 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT22(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT22 = Byte.parseByte(s);
} else {
IVAFFCT22 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT23(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT23 = Byte.parseByte(s);
} else {
IVAFFCT23 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT27(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT27 = Byte.parseByte(s);
} else {
IVAFFCT27 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT30(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT30 = Byte.parseByte(s);
} else {
IVAFFCT30 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT97(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT97 = Byte.parseByte(s);
} else {
IVAFFCT97 = Byte.MIN_VALUE;
}
}

protected final void initIVCOOP(String s) {
if (!s.trim().isEmpty()) {
IVCOOP = Byte.parseByte(s);
} else {
IVCOOP = Byte.MIN_VALUE;
}
}

protected final void initIVINFNCE(String s) {
if (!s.trim().isEmpty()) {
IVINFNCE = Byte.parseByte(s);
} else {
IVINFNCE = Byte.MIN_VALUE;
}
}

protected final void initIVLIBAL(String s) {
if (!s.trim().isEmpty()) {
IVLIBAL = Byte.parseByte(s);
} else {
IVLIBAL = Byte.MIN_VALUE;
}
}

protected final void initIVLIENG(String s) {
if (!s.trim().isEmpty()) {
IVLIENG = Byte.parseByte(s);
} else {
IVLIENG = Byte.MIN_VALUE;
}
}

protected final void initIVLITRANS(String s) {
if (!s.trim().isEmpty()) {
IVLITRANS = Byte.parseByte(s);
} else {
IVLITRANS = Byte.MIN_VALUE;
}
}

protected final void initIVLIWHO(String s) {
if (!s.trim().isEmpty()) {
IVLIWHO = Byte.parseByte(s);
} else {
IVLIWHO = Byte.MIN_VALUE;
}
}

protected final void initJ1BOSS(String s) {
if (!s.trim().isEmpty()) {
J1BOSS = Byte.parseByte(s);
} else {
J1BOSS = Byte.MIN_VALUE;
}
}

protected final void initJ1MNGR(String s) {
if (!s.trim().isEmpty()) {
J1MNGR = Byte.parseByte(s);
} else {
J1MNGR = Byte.MIN_VALUE;
}
}

protected final void initJ1NONE(String s) {
if (!s.trim().isEmpty()) {
J1NONE = Byte.parseByte(s);
} else {
J1NONE = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC5_DV = Byte.parseByte(s);
} else {
J1NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1SEMP(String s) {
if (!s.trim().isEmpty()) {
J1SEMP = Byte.parseByte(s);
} else {
J1SEMP = Byte.MIN_VALUE;
}
}

protected final void initJ1SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC00_CC = Short.parseShort(s);
} else {
J1SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC10_CC = Short.parseShort(s);
} else {
J1SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC90_CC = Byte.parseByte(s);
} else {
J1SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJ2NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J2NSSEC5_DV = Byte.parseByte(s);
} else {
J2NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ2PAY(String s) {
if (!s.trim().isEmpty()) {
J2PAY = Integer.parseInt(s);
} else {
J2PAY = Integer.MIN_VALUE;
}
}

protected final void initJ2PAYNET_DV(String s) {
if (!s.trim().isEmpty()) {
J2PAYNET_DV = Double.parseDouble(s);
} else {
J2PAYNET_DV = Double.NaN;
}
}

protected final void initJ2SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC00_CC = Short.parseShort(s);
} else {
J2SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC10_CC = Short.parseShort(s);
} else {
J2SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC90_CC = Short.parseShort(s);
} else {
J2SOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBATT1(String s) {
if (!s.trim().isEmpty()) {
JBATT1 = Byte.parseByte(s);
} else {
JBATT1 = Byte.MIN_VALUE;
}
}

protected final void initJBATT2(String s) {
if (!s.trim().isEmpty()) {
JBATT2 = Byte.parseByte(s);
} else {
JBATT2 = Byte.MIN_VALUE;
}
}

protected final void initJBATT3(String s) {
if (!s.trim().isEmpty()) {
JBATT3 = Byte.parseByte(s);
} else {
JBATT3 = Byte.MIN_VALUE;
}
}

protected final void initJBATT4(String s) {
if (!s.trim().isEmpty()) {
JBATT4 = Byte.parseByte(s);
} else {
JBATT4 = Byte.MIN_VALUE;
}
}

protected final void initJBATT5(String s) {
if (!s.trim().isEmpty()) {
JBATT5 = Byte.parseByte(s);
} else {
JBATT5 = Byte.MIN_VALUE;
}
}

protected final void initJBATT6(String s) {
if (!s.trim().isEmpty()) {
JBATT6 = Byte.parseByte(s);
} else {
JBATT6 = Byte.MIN_VALUE;
}
}

protected final void initJBATT7(String s) {
if (!s.trim().isEmpty()) {
JBATT7 = Byte.parseByte(s);
} else {
JBATT7 = Byte.MIN_VALUE;
}
}

protected final void initJBATT8(String s) {
if (!s.trim().isEmpty()) {
JBATT8 = Byte.parseByte(s);
} else {
JBATT8 = Byte.MIN_VALUE;
}
}

protected final void initJBATT9(String s) {
if (!s.trim().isEmpty()) {
JBATT9 = Byte.parseByte(s);
} else {
JBATT9 = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATD(String s) {
if (!s.trim().isEmpty()) {
JBBGDATD = Byte.parseByte(s);
} else {
JBBGDATD = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATM(String s) {
if (!s.trim().isEmpty()) {
JBBGDATM = Byte.parseByte(s);
} else {
JBBGDATM = Byte.MIN_VALUE;
}
}

protected final void initJBBGDATY(String s) {
if (!s.trim().isEmpty()) {
JBBGDATY = Short.parseShort(s);
} else {
JBBGDATY = Short.MIN_VALUE;
}
}

protected final void initJBENDD(String s) {
if (!s.trim().isEmpty()) {
JBENDD = Byte.parseByte(s);
} else {
JBENDD = Byte.MIN_VALUE;
}
}

protected final void initJBENDM(String s) {
if (!s.trim().isEmpty()) {
JBENDM = Byte.parseByte(s);
} else {
JBENDM = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS = Byte.parseByte(s);
} else {
JBENDREAS = Byte.MIN_VALUE;
}
}

protected final void initJBENDY4(String s) {
if (!s.trim().isEmpty()) {
JBENDY4 = Short.parseShort(s);
} else {
JBENDY4 = Short.MIN_VALUE;
}
}

protected final void initJBES2000(String s) {
if (!s.trim().isEmpty()) {
JBES2000 = Byte.parseByte(s);
} else {
JBES2000 = Byte.MIN_VALUE;
}
}

protected final void initJBIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JBIINDB_DV = Byte.parseByte(s);
} else {
JBIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJBMNGRCHK(String s) {
if (!s.trim().isEmpty()) {
JBMNGRCHK = Byte.parseByte(s);
} else {
JBMNGRCHK = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC3_DV = Byte.parseByte(s);
} else {
JBNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC5_DV = Byte.parseByte(s);
} else {
JBNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEDV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEDV = Byte.parseByte(s);
} else {
JBNSSEDV = Byte.MIN_VALUE;
}
}

protected final void initJBOFFY(String s) {
if (!s.trim().isEmpty()) {
JBOFFY = Byte.parseByte(s);
} else {
JBOFFY = Byte.MIN_VALUE;
}
}

protected final void initJBRGSDV(String s) {
if (!s.trim().isEmpty()) {
JBRGSDV = Byte.parseByte(s);
} else {
JBRGSDV = Byte.MIN_VALUE;
}
}

protected final void initJBSAMR(String s) {
if (!s.trim().isEmpty()) {
JBSAMR = Byte.parseByte(s);
} else {
JBSAMR = Byte.MIN_VALUE;
}
}

protected final void initJBSAT(String s) {
if (!s.trim().isEmpty()) {
JBSAT = Byte.parseByte(s);
} else {
JBSAT = Byte.MIN_VALUE;
}
}

protected final void initJBSECTPUB(String s) {
if (!s.trim().isEmpty()) {
JBSECTPUB = Byte.parseByte(s);
} else {
JBSECTPUB = Byte.MIN_VALUE;
}
}

protected final void initJBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JBSEG_DV = Short.parseShort(s);
} else {
JBSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJBSEMPCHK(String s) {
if (!s.trim().isEmpty()) {
JBSEMPCHK = Byte.parseByte(s);
} else {
JBSEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07CHK(String s) {
if (!s.trim().isEmpty()) {
JBSIC07CHK = Byte.parseByte(s);
} else {
JBSIC07CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JBSIC07_CC = Byte.parseByte(s);
} else {
JBSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJBSIZECHK(String s) {
if (!s.trim().isEmpty()) {
JBSIZECHK = Byte.parseByte(s);
} else {
JBSIZECHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00CHK(String s) {
if (!s.trim().isEmpty()) {
JBSOC00CHK = Byte.parseByte(s);
} else {
JBSOC00CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC00_CC = Short.parseShort(s);
} else {
JBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC10_CC = Short.parseShort(s);
} else {
JBSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOCGR_DV(String s) {
if (!s.trim().isEmpty()) {
JBSOCGR_DV = Byte.parseByte(s);
} else {
JBSOCGR_DV = Byte.MIN_VALUE;
}
}

protected final void initJBTERM1(String s) {
if (!s.trim().isEmpty()) {
JBTERM1 = Byte.parseByte(s);
} else {
JBTERM1 = Byte.MIN_VALUE;
}
}

protected final void initJBTERM2(String s) {
if (!s.trim().isEmpty()) {
JBTERM2 = Byte.parseByte(s);
} else {
JBTERM2 = Byte.MIN_VALUE;
}
}

protected final void initJLENDM(String s) {
if (!s.trim().isEmpty()) {
JLENDM = Byte.parseByte(s);
} else {
JLENDM = Byte.MIN_VALUE;
}
}

protected final void initJLES2000(String s) {
if (!s.trim().isEmpty()) {
JLES2000 = Byte.parseByte(s);
} else {
JLES2000 = Byte.MIN_VALUE;
}
}

protected final void initJLIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JLIINDB_DV = Byte.parseByte(s);
} else {
JLIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC3_DV = Byte.parseByte(s);
} else {
JLNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC5_DV = Byte.parseByte(s);
} else {
JLNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEDV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEDV = Byte.parseByte(s);
} else {
JLNSSEDV = Byte.MIN_VALUE;
}
}

protected final void initJLRGSDV(String s) {
if (!s.trim().isEmpty()) {
JLRGSDV = Byte.parseByte(s);
} else {
JLRGSDV = Byte.MIN_VALUE;
}
}

protected final void initJLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JLSEG_DV = Short.parseShort(s);
} else {
JLSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJLSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JLSIC07_CC = Byte.parseByte(s);
} else {
JLSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJLSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC00_CC = Short.parseShort(s);
} else {
JLSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJLSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC10_CC = Short.parseShort(s);
} else {
JLSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJOBDENY(String s) {
if (!s.trim().isEmpty()) {
JOBDENY = Byte.parseByte(s);
} else {
JOBDENY = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS1(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS1 = Byte.parseByte(s);
} else {
JOBHOURS1 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS2(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS2 = Byte.parseByte(s);
} else {
JOBHOURS2 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS3(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS3 = Byte.parseByte(s);
} else {
JOBHOURS3 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS4(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS4 = Byte.parseByte(s);
} else {
JOBHOURS4 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS5(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS5 = Byte.parseByte(s);
} else {
JOBHOURS5 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS6(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS6 = Byte.parseByte(s);
} else {
JOBHOURS6 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS7(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS7 = Byte.parseByte(s);
} else {
JOBHOURS7 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS8(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS8 = Byte.parseByte(s);
} else {
JOBHOURS8 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS9(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS9 = Byte.parseByte(s);
} else {
JOBHOURS9 = Byte.MIN_VALUE;
}
}

protected final void initJOBLOOK(String s) {
if (!s.trim().isEmpty()) {
JOBLOOK = Byte.parseByte(s);
} else {
JOBLOOK = Byte.MIN_VALUE;
}
}

protected final void initJSPART(String s) {
if (!s.trim().isEmpty()) {
JSPART = Byte.parseByte(s);
} else {
JSPART = Byte.MIN_VALUE;
}
}

protected final void initJSPAYU(String s) {
if (!s.trim().isEmpty()) {
JSPAYU = Integer.parseInt(s);
} else {
JSPAYU = Integer.MIN_VALUE;
}
}

protected final void initJSPAYW(String s) {
if (!s.trim().isEmpty()) {
JSPAYW = Byte.parseByte(s);
} else {
JSPAYW = Byte.MIN_VALUE;
}
}

protected final void initJSPRLS(String s) {
if (!s.trim().isEmpty()) {
JSPRLS = Byte.parseByte(s);
} else {
JSPRLS = Byte.MIN_VALUE;
}
}

protected final void initJSPRNI(String s) {
if (!s.trim().isEmpty()) {
JSPRNI = Byte.parseByte(s);
} else {
JSPRNI = Byte.MIN_VALUE;
}
}

protected final void initJSPRTX(String s) {
if (!s.trim().isEmpty()) {
JSPRTX = Byte.parseByte(s);
} else {
JSPRTX = Byte.MIN_VALUE;
}
}

protected final void initJSPYNI(String s) {
if (!s.trim().isEmpty()) {
JSPYNI = Byte.parseByte(s);
} else {
JSPYNI = Byte.MIN_VALUE;
}
}

protected final void initJSPYTX(String s) {
if (!s.trim().isEmpty()) {
JSPYTX = Byte.parseByte(s);
} else {
JSPYTX = Byte.MIN_VALUE;
}
}

protected final void initJSTYPEB(String s) {
if (!s.trim().isEmpty()) {
JSTYPEB = Byte.parseByte(s);
} else {
JSTYPEB = Byte.MIN_VALUE;
}
}

protected final void initJSWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
JSWORKTRAV = Byte.parseByte(s);
} else {
JSWORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initJUBGN(String s) {
if (!s.trim().isEmpty()) {
JUBGN = Short.parseShort(s);
} else {
JUBGN = Short.MIN_VALUE;
}
}

protected final void initJULK4X1(String s) {
if (!s.trim().isEmpty()) {
JULK4X1 = Short.parseShort(s);
} else {
JULK4X1 = Short.MIN_VALUE;
}
}

protected final void initJULK4X2(String s) {
if (!s.trim().isEmpty()) {
JULK4X2 = Short.parseShort(s);
} else {
JULK4X2 = Short.MIN_VALUE;
}
}

protected final void initJULK4X3(String s) {
if (!s.trim().isEmpty()) {
JULK4X3 = Byte.parseByte(s);
} else {
JULK4X3 = Byte.MIN_VALUE;
}
}

protected final void initJULK4X4(String s) {
if (!s.trim().isEmpty()) {
JULK4X4 = Short.parseShort(s);
} else {
JULK4X4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X5(String s) {
if (!s.trim().isEmpty()) {
JULK4X5 = Short.parseShort(s);
} else {
JULK4X5 = Short.MIN_VALUE;
}
}

protected final void initJULK4X6(String s) {
if (!s.trim().isEmpty()) {
JULK4X6 = Short.parseShort(s);
} else {
JULK4X6 = Short.MIN_VALUE;
}
}

protected final void initJULK4X96(String s) {
if (!s.trim().isEmpty()) {
JULK4X96 = Byte.parseByte(s);
} else {
JULK4X96 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI01(String s) {
if (!s.trim().isEmpty()) {
KID2UNI01 = Byte.parseByte(s);
} else {
KID2UNI01 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI02(String s) {
if (!s.trim().isEmpty()) {
KID2UNI02 = Byte.parseByte(s);
} else {
KID2UNI02 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI03(String s) {
if (!s.trim().isEmpty()) {
KID2UNI03 = Byte.parseByte(s);
} else {
KID2UNI03 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI04(String s) {
if (!s.trim().isEmpty()) {
KID2UNI04 = Byte.parseByte(s);
} else {
KID2UNI04 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI05(String s) {
if (!s.trim().isEmpty()) {
KID2UNI05 = Byte.parseByte(s);
} else {
KID2UNI05 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI06(String s) {
if (!s.trim().isEmpty()) {
KID2UNI06 = Byte.parseByte(s);
} else {
KID2UNI06 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI07(String s) {
if (!s.trim().isEmpty()) {
KID2UNI07 = Byte.parseByte(s);
} else {
KID2UNI07 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI08(String s) {
if (!s.trim().isEmpty()) {
KID2UNI08 = Byte.parseByte(s);
} else {
KID2UNI08 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI09(String s) {
if (!s.trim().isEmpty()) {
KID2UNI09 = Byte.parseByte(s);
} else {
KID2UNI09 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI10(String s) {
if (!s.trim().isEmpty()) {
KID2UNI10 = Byte.parseByte(s);
} else {
KID2UNI10 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI11(String s) {
if (!s.trim().isEmpty()) {
KID2UNI11 = Byte.parseByte(s);
} else {
KID2UNI11 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI12(String s) {
if (!s.trim().isEmpty()) {
KID2UNI12 = Byte.parseByte(s);
} else {
KID2UNI12 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI13(String s) {
if (!s.trim().isEmpty()) {
KID2UNI13 = Byte.parseByte(s);
} else {
KID2UNI13 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI14(String s) {
if (!s.trim().isEmpty()) {
KID2UNI14 = Byte.parseByte(s);
} else {
KID2UNI14 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI15(String s) {
if (!s.trim().isEmpty()) {
KID2UNI15 = Byte.parseByte(s);
} else {
KID2UNI15 = Byte.MIN_VALUE;
}
}

protected final void initKID2UNI16(String s) {
if (!s.trim().isEmpty()) {
KID2UNI16 = Byte.parseByte(s);
} else {
KID2UNI16 = Byte.MIN_VALUE;
}
}

protected final void initKIDSPT(String s) {
if (!s.trim().isEmpty()) {
KIDSPT = Byte.parseByte(s);
} else {
KIDSPT = Byte.MIN_VALUE;
}
}

protected final void initLADOPT(String s) {
if (!s.trim().isEmpty()) {
LADOPT = Byte.parseByte(s);
} else {
LADOPT = Byte.MIN_VALUE;
}
}

protected final void initLATE(String s) {
if (!s.trim().isEmpty()) {
LATE = Byte.parseByte(s);
} else {
LATE = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI1(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI1 = Byte.parseByte(s);
} else {
LCHMULTI1 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI2(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI2 = Byte.parseByte(s);
} else {
LCHMULTI2 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI3(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI3 = Byte.parseByte(s);
} else {
LCHMULTI3 = Byte.MIN_VALUE;
}
}

protected final void initLCOHNPI(String s) {
if (!s.trim().isEmpty()) {
LCOHNPI = Byte.parseByte(s);
} else {
LCOHNPI = Byte.MIN_VALUE;
}
}

protected final void initLENINDINTV(String s) {
if (!s.trim().isEmpty()) {
LENINDINTV = Double.parseDouble(s);
} else {
LENINDINTV = Double.NaN;
}
}

protected final void initLEVELIMP(String s) {
if (!s.trim().isEmpty()) {
LEVELIMP = Byte.parseByte(s);
} else {
LEVELIMP = Byte.MIN_VALUE;
}
}

protected final void initLICENG(String s) {
if (!s.trim().isEmpty()) {
LICENG = Byte.parseByte(s);
} else {
LICENG = Byte.MIN_VALUE;
}
}

protected final void initLICTRANS(String s) {
if (!s.trim().isEmpty()) {
LICTRANS = Byte.parseByte(s);
} else {
LICTRANS = Byte.MIN_VALUE;
}
}

protected final void initLICWHO(String s) {
if (!s.trim().isEmpty()) {
LICWHO = Byte.parseByte(s);
} else {
LICWHO = Byte.MIN_VALUE;
}
}

protected final void initLIENG(String s) {
if (!s.trim().isEmpty()) {
LIENG = Byte.parseByte(s);
} else {
LIENG = Byte.MIN_VALUE;
}
}

protected final void initLIHOW(String s) {
if (!s.trim().isEmpty()) {
LIHOW = Byte.parseByte(s);
} else {
LIHOW = Byte.MIN_VALUE;
}
}

protected final void initLINGUA(String s) {
if (!s.trim().isEmpty()) {
LINGUA = Byte.parseByte(s);
} else {
LINGUA = Byte.MIN_VALUE;
}
}

protected final void initLITRANS(String s) {
if (!s.trim().isEmpty()) {
LITRANS = Byte.parseByte(s);
} else {
LITRANS = Byte.MIN_VALUE;
}
}

protected final void initLIVESP(String s) {
if (!s.trim().isEmpty()) {
LIVESP = Byte.parseByte(s);
} else {
LIVESP = Byte.MIN_VALUE;
}
}

protected final void initLIVESP_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
LIVESP_DV = false;
} else {
LIVESP_DV = true;
}
}
}

protected final void initLIVEWITH(String s) {
if (!s.trim().isEmpty()) {
LIVEWITH = Byte.parseByte(s);
} else {
LIVEWITH = Byte.MIN_VALUE;
}
}

protected final void initLIWHO(String s) {
if (!s.trim().isEmpty()) {
LIWHO = Byte.parseByte(s);
} else {
LIWHO = Byte.MIN_VALUE;
}
}

protected final void initLLKNBRD(String s) {
if (!s.trim().isEmpty()) {
LLKNBRD = Byte.parseByte(s);
} else {
LLKNBRD = Byte.MIN_VALUE;
}
}

protected final void initLMAR1M(String s) {
if (!s.trim().isEmpty()) {
LMAR1M = Byte.parseByte(s);
} else {
LMAR1M = Byte.MIN_VALUE;
}
}

protected final void initLMAR1Y(String s) {
if (!s.trim().isEmpty()) {
LMAR1Y = Short.parseShort(s);
} else {
LMAR1Y = Short.MIN_VALUE;
}
}

protected final void initLMCBM1(String s) {
if (!s.trim().isEmpty()) {
LMCBM1 = Byte.parseByte(s);
} else {
LMCBM1 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM2(String s) {
if (!s.trim().isEmpty()) {
LMCBM2 = Byte.parseByte(s);
} else {
LMCBM2 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM3(String s) {
if (!s.trim().isEmpty()) {
LMCBM3 = Byte.parseByte(s);
} else {
LMCBM3 = Byte.MIN_VALUE;
}
}

protected final void initLMCBY41(String s) {
if (!s.trim().isEmpty()) {
LMCBY41 = Short.parseShort(s);
} else {
LMCBY41 = Short.MIN_VALUE;
}
}

protected final void initLMCBY42(String s) {
if (!s.trim().isEmpty()) {
LMCBY42 = Short.parseShort(s);
} else {
LMCBY42 = Short.MIN_VALUE;
}
}

protected final void initLMCBY43(String s) {
if (!s.trim().isEmpty()) {
LMCBY43 = Short.parseShort(s);
} else {
LMCBY43 = Short.MIN_VALUE;
}
}

protected final void initLMSPM1(String s) {
if (!s.trim().isEmpty()) {
LMSPM1 = Byte.parseByte(s);
} else {
LMSPM1 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM2(String s) {
if (!s.trim().isEmpty()) {
LMSPM2 = Byte.parseByte(s);
} else {
LMSPM2 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM3(String s) {
if (!s.trim().isEmpty()) {
LMSPM3 = Byte.parseByte(s);
} else {
LMSPM3 = Byte.MIN_VALUE;
}
}

protected final void initLMSPY41(String s) {
if (!s.trim().isEmpty()) {
LMSPY41 = Short.parseShort(s);
} else {
LMSPY41 = Short.MIN_VALUE;
}
}

protected final void initLMSPY42(String s) {
if (!s.trim().isEmpty()) {
LMSPY42 = Short.parseShort(s);
} else {
LMSPY42 = Short.MIN_VALUE;
}
}

protected final void initLMSPY43(String s) {
if (!s.trim().isEmpty()) {
LMSPY43 = Short.parseShort(s);
} else {
LMSPY43 = Short.MIN_VALUE;
}
}

protected final void initLNADOPT(String s) {
if (!s.trim().isEmpty()) {
LNADOPT = Byte.parseByte(s);
} else {
LNADOPT = Byte.MIN_VALUE;
}
}

protected final void initLNPRNT(String s) {
if (!s.trim().isEmpty()) {
LNPRNT = Byte.parseByte(s);
} else {
LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initLOCSERAP(String s) {
if (!s.trim().isEmpty()) {
LOCSERAP = Byte.parseByte(s);
} else {
LOCSERAP = Byte.MIN_VALUE;
}
}

protected final void initLOCSERAS(String s) {
if (!s.trim().isEmpty()) {
LOCSERAS = Byte.parseByte(s);
} else {
LOCSERAS = Byte.MIN_VALUE;
}
}

protected final void initLOCSERB(String s) {
if (!s.trim().isEmpty()) {
LOCSERB = Byte.parseByte(s);
} else {
LOCSERB = Byte.MIN_VALUE;
}
}

protected final void initLOCSERC(String s) {
if (!s.trim().isEmpty()) {
LOCSERC = Byte.parseByte(s);
} else {
LOCSERC = Byte.MIN_VALUE;
}
}

protected final void initLOCSERD(String s) {
if (!s.trim().isEmpty()) {
LOCSERD = Byte.parseByte(s);
} else {
LOCSERD = Byte.MIN_VALUE;
}
}

protected final void initLOCSERE(String s) {
if (!s.trim().isEmpty()) {
LOCSERE = Byte.parseByte(s);
} else {
LOCSERE = Byte.MIN_VALUE;
}
}

protected final void initLPRNT(String s) {
if (!s.trim().isEmpty()) {
LPRNT = Byte.parseByte(s);
} else {
LPRNT = Byte.MIN_VALUE;
}
}

protected final void initLVHM(String s) {
if (!s.trim().isEmpty()) {
LVHM = Byte.parseByte(s);
} else {
LVHM = Byte.MIN_VALUE;
}
}

protected final void initLVMTHP(String s) {
if (!s.trim().isEmpty()) {
LVMTHP = Byte.parseByte(s);
} else {
LVMTHP = Byte.MIN_VALUE;
}
}

protected final void initLVREL1(String s) {
if (!s.trim().isEmpty()) {
LVREL1 = Byte.parseByte(s);
} else {
LVREL1 = Byte.MIN_VALUE;
}
}

protected final void initLVREL10(String s) {
if (!s.trim().isEmpty()) {
LVREL10 = Byte.parseByte(s);
} else {
LVREL10 = Byte.MIN_VALUE;
}
}

protected final void initLVREL2(String s) {
if (!s.trim().isEmpty()) {
LVREL2 = Byte.parseByte(s);
} else {
LVREL2 = Byte.MIN_VALUE;
}
}

protected final void initLVREL3(String s) {
if (!s.trim().isEmpty()) {
LVREL3 = Byte.parseByte(s);
} else {
LVREL3 = Byte.MIN_VALUE;
}
}

protected final void initLVREL4(String s) {
if (!s.trim().isEmpty()) {
LVREL4 = Byte.parseByte(s);
} else {
LVREL4 = Byte.MIN_VALUE;
}
}

protected final void initLVREL5(String s) {
if (!s.trim().isEmpty()) {
LVREL5 = Byte.parseByte(s);
} else {
LVREL5 = Byte.MIN_VALUE;
}
}

protected final void initLVREL6(String s) {
if (!s.trim().isEmpty()) {
LVREL6 = Byte.parseByte(s);
} else {
LVREL6 = Byte.MIN_VALUE;
}
}

protected final void initLVREL7(String s) {
if (!s.trim().isEmpty()) {
LVREL7 = Byte.parseByte(s);
} else {
LVREL7 = Byte.MIN_VALUE;
}
}

protected final void initLVREL8(String s) {
if (!s.trim().isEmpty()) {
LVREL8 = Byte.parseByte(s);
} else {
LVREL8 = Byte.MIN_VALUE;
}
}

protected final void initLVREL9(String s) {
if (!s.trim().isEmpty()) {
LVREL9 = Byte.parseByte(s);
} else {
LVREL9 = Byte.MIN_VALUE;
}
}

protected final void initLVREL96(String s) {
if (!s.trim().isEmpty()) {
LVREL96 = Byte.parseByte(s);
} else {
LVREL96 = Byte.MIN_VALUE;
}
}

protected final void initLVSCDO(String s) {
if (!s.trim().isEmpty()) {
LVSCDO = Byte.parseByte(s);
} else {
LVSCDO = Byte.MIN_VALUE;
}
}

protected final void initLVWHY(String s) {
if (!s.trim().isEmpty()) {
LVWHY = Byte.parseByte(s);
} else {
LVWHY = Byte.MIN_VALUE;
}
}

protected final void initLVYRP(String s) {
if (!s.trim().isEmpty()) {
LVYRP = Short.parseShort(s);
} else {
LVYRP = Short.MIN_VALUE;
}
}

protected final void initLWWRONG(String s) {
if (!s.trim().isEmpty()) {
LWWRONG = Byte.parseByte(s);
} else {
LWWRONG = Byte.MIN_VALUE;
}
}

protected final void initMAAGE(String s) {
if (!s.trim().isEmpty()) {
MAAGE = Byte.parseByte(s);
} else {
MAAGE = Byte.MIN_VALUE;
}
}

protected final void initMACOB(String s) {
if (!s.trim().isEmpty()) {
MACOB = Byte.parseByte(s);
} else {
MACOB = Byte.MIN_VALUE;
}
}

protected final void initMACON(String s) {
if (!s.trim().isEmpty()) {
MACON = Byte.parseByte(s);
} else {
MACON = Byte.MIN_VALUE;
}
}

protected final void initMAFAR(String s) {
if (!s.trim().isEmpty()) {
MAFAR = Byte.parseByte(s);
} else {
MAFAR = Byte.MIN_VALUE;
}
}

protected final void initMAJU(String s) {
if (!s.trim().isEmpty()) {
MAJU = Byte.parseByte(s);
} else {
MAJU = Byte.MIN_VALUE;
}
}

protected final void initMALONE(String s) {
if (!s.trim().isEmpty()) {
MALONE = Byte.parseByte(s);
} else {
MALONE = Byte.MIN_VALUE;
}
}

protected final void initMAMOSTCON(String s) {
if (!s.trim().isEmpty()) {
MAMOSTCON = Byte.parseByte(s);
} else {
MAMOSTCON = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC5_DV = Byte.parseByte(s);
} else {
MANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initMARSTAT(String s) {
if (!s.trim().isEmpty()) {
MARSTAT = Byte.parseByte(s);
} else {
MARSTAT = Byte.MIN_VALUE;
}
}

protected final void initMASEE(String s) {
if (!s.trim().isEmpty()) {
MASEE = Byte.parseByte(s);
} else {
MASEE = Byte.MIN_VALUE;
}
}

protected final void initMASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC00_CC = Short.parseShort(s);
} else {
MASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC10_CC = Short.parseShort(s);
} else {
MASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC90_CC = Byte.parseByte(s);
} else {
MASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMASTAT_DV(String s) {
if (!s.trim().isEmpty()) {
MASTAT_DV = Byte.parseByte(s);
} else {
MASTAT_DV = Byte.MIN_VALUE;
}
}

protected final void initMATLEAVE(String s) {
if (!s.trim().isEmpty()) {
MATLEAVE = Byte.parseByte(s);
} else {
MATLEAVE = Byte.MIN_VALUE;
}
}

protected final void initMATLV(String s) {
if (!s.trim().isEmpty()) {
MATLV = Byte.parseByte(s);
} else {
MATLV = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDD(String s) {
if (!s.trim().isEmpty()) {
MATLVENDD = Byte.parseByte(s);
} else {
MATLVENDD = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDM(String s) {
if (!s.trim().isEmpty()) {
MATLVENDM = Byte.parseByte(s);
} else {
MATLVENDM = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDY4(String s) {
if (!s.trim().isEmpty()) {
MATLVENDY4 = Short.parseShort(s);
} else {
MATLVENDY4 = Short.MIN_VALUE;
}
}

protected final void initMATLVSTD(String s) {
if (!s.trim().isEmpty()) {
MATLVSTD = Byte.parseByte(s);
} else {
MATLVSTD = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTM(String s) {
if (!s.trim().isEmpty()) {
MATLVSTM = Byte.parseByte(s);
} else {
MATLVSTM = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTY4(String s) {
if (!s.trim().isEmpty()) {
MATLVSTY4 = Short.parseShort(s);
} else {
MATLVSTY4 = Short.MIN_VALUE;
}
}

protected final void initMAYRUK(String s) {
if (!s.trim().isEmpty()) {
MAYRUK = Byte.parseByte(s);
} else {
MAYRUK = Byte.MIN_VALUE;
}
}

protected final void initMEMAID(String s) {
if (!s.trim().isEmpty()) {
MEMAID = Byte.parseByte(s);
} else {
MEMAID = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT11(String s) {
if (!s.trim().isEmpty()) {
MEMCONT11 = Byte.parseByte(s);
} else {
MEMCONT11 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT12(String s) {
if (!s.trim().isEmpty()) {
MEMCONT12 = Byte.parseByte(s);
} else {
MEMCONT12 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT13(String s) {
if (!s.trim().isEmpty()) {
MEMCONT13 = Byte.parseByte(s);
} else {
MEMCONT13 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT21(String s) {
if (!s.trim().isEmpty()) {
MEMCONT21 = Byte.parseByte(s);
} else {
MEMCONT21 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT210(String s) {
if (!s.trim().isEmpty()) {
MEMCONT210 = Byte.parseByte(s);
} else {
MEMCONT210 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT211(String s) {
if (!s.trim().isEmpty()) {
MEMCONT211 = Byte.parseByte(s);
} else {
MEMCONT211 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT212(String s) {
if (!s.trim().isEmpty()) {
MEMCONT212 = Byte.parseByte(s);
} else {
MEMCONT212 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT213(String s) {
if (!s.trim().isEmpty()) {
MEMCONT213 = Byte.parseByte(s);
} else {
MEMCONT213 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT214(String s) {
if (!s.trim().isEmpty()) {
MEMCONT214 = Byte.parseByte(s);
} else {
MEMCONT214 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT215(String s) {
if (!s.trim().isEmpty()) {
MEMCONT215 = Byte.parseByte(s);
} else {
MEMCONT215 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT216(String s) {
if (!s.trim().isEmpty()) {
MEMCONT216 = Byte.parseByte(s);
} else {
MEMCONT216 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT22(String s) {
if (!s.trim().isEmpty()) {
MEMCONT22 = Byte.parseByte(s);
} else {
MEMCONT22 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT23(String s) {
if (!s.trim().isEmpty()) {
MEMCONT23 = Byte.parseByte(s);
} else {
MEMCONT23 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT24(String s) {
if (!s.trim().isEmpty()) {
MEMCONT24 = Byte.parseByte(s);
} else {
MEMCONT24 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT25(String s) {
if (!s.trim().isEmpty()) {
MEMCONT25 = Byte.parseByte(s);
} else {
MEMCONT25 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT26(String s) {
if (!s.trim().isEmpty()) {
MEMCONT26 = Byte.parseByte(s);
} else {
MEMCONT26 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT27(String s) {
if (!s.trim().isEmpty()) {
MEMCONT27 = Byte.parseByte(s);
} else {
MEMCONT27 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT28(String s) {
if (!s.trim().isEmpty()) {
MEMCONT28 = Byte.parseByte(s);
} else {
MEMCONT28 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT29(String s) {
if (!s.trim().isEmpty()) {
MEMCONT29 = Byte.parseByte(s);
} else {
MEMCONT29 = Byte.MIN_VALUE;
}
}

protected final void initMEMCONT3(String s) {
if (!s.trim().isEmpty()) {
MEMCONT3 = Byte.parseByte(s);
} else {
MEMCONT3 = Byte.MIN_VALUE;
}
}

protected final void initMEMPER(String s) {
if (!s.trim().isEmpty()) {
MEMPER = Byte.parseByte(s);
} else {
MEMPER = Byte.MIN_VALUE;
}
}

protected final void initMEMPLOY(String s) {
if (!s.trim().isEmpty()) {
MEMPLOY = Byte.parseByte(s);
} else {
MEMPLOY = Byte.MIN_VALUE;
}
}

protected final void initMEMPROB1(String s) {
if (!s.trim().isEmpty()) {
MEMPROB1 = Byte.parseByte(s);
} else {
MEMPROB1 = Byte.MIN_VALUE;
}
}

protected final void initMEMPROB2(String s) {
if (!s.trim().isEmpty()) {
MEMPROB2 = Byte.parseByte(s);
} else {
MEMPROB2 = Byte.MIN_VALUE;
}
}

protected final void initMEMPROB3(String s) {
if (!s.trim().isEmpty()) {
MEMPROB3 = Byte.parseByte(s);
} else {
MEMPROB3 = Byte.MIN_VALUE;
}
}

protected final void initMEMPROB4(String s) {
if (!s.trim().isEmpty()) {
MEMPROB4 = Byte.parseByte(s);
} else {
MEMPROB4 = Byte.MIN_VALUE;
}
}

protected final void initMIGCNTRY(String s) {
if (!s.trim().isEmpty()) {
MIGCNTRY = Byte.parseByte(s);
} else {
MIGCNTRY = Byte.MIN_VALUE;
}
}

protected final void initMIGPLNS(String s) {
if (!s.trim().isEmpty()) {
MIGPLNS = Byte.parseByte(s);
} else {
MIGPLNS = Byte.MIN_VALUE;
}
}

protected final void initMLAGST(String s) {
if (!s.trim().isEmpty()) {
MLAGST = Byte.parseByte(s);
} else {
MLAGST = Byte.MIN_VALUE;
}
}

protected final void initMLAGSTU(String s) {
if (!s.trim().isEmpty()) {
MLAGSTU = Byte.parseByte(s);
} else {
MLAGSTU = Byte.MIN_VALUE;
}
}

protected final void initMLFUTR(String s) {
if (!s.trim().isEmpty()) {
MLFUTR = Byte.parseByte(s);
} else {
MLFUTR = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT1(String s) {
if (!s.trim().isEmpty()) {
MLRNOT1 = Byte.parseByte(s);
} else {
MLRNOT1 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT10(String s) {
if (!s.trim().isEmpty()) {
MLRNOT10 = Byte.parseByte(s);
} else {
MLRNOT10 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT11(String s) {
if (!s.trim().isEmpty()) {
MLRNOT11 = Byte.parseByte(s);
} else {
MLRNOT11 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT12(String s) {
if (!s.trim().isEmpty()) {
MLRNOT12 = Byte.parseByte(s);
} else {
MLRNOT12 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT13(String s) {
if (!s.trim().isEmpty()) {
MLRNOT13 = Byte.parseByte(s);
} else {
MLRNOT13 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT2(String s) {
if (!s.trim().isEmpty()) {
MLRNOT2 = Byte.parseByte(s);
} else {
MLRNOT2 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT3(String s) {
if (!s.trim().isEmpty()) {
MLRNOT3 = Byte.parseByte(s);
} else {
MLRNOT3 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT4(String s) {
if (!s.trim().isEmpty()) {
MLRNOT4 = Byte.parseByte(s);
} else {
MLRNOT4 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT5(String s) {
if (!s.trim().isEmpty()) {
MLRNOT5 = Byte.parseByte(s);
} else {
MLRNOT5 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT6(String s) {
if (!s.trim().isEmpty()) {
MLRNOT6 = Byte.parseByte(s);
} else {
MLRNOT6 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT7(String s) {
if (!s.trim().isEmpty()) {
MLRNOT7 = Byte.parseByte(s);
} else {
MLRNOT7 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT8(String s) {
if (!s.trim().isEmpty()) {
MLRNOT8 = Byte.parseByte(s);
} else {
MLRNOT8 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT9(String s) {
if (!s.trim().isEmpty()) {
MLRNOT9 = Byte.parseByte(s);
} else {
MLRNOT9 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT97(String s) {
if (!s.trim().isEmpty()) {
MLRNOT97 = Byte.parseByte(s);
} else {
MLRNOT97 = Byte.MIN_VALUE;
}
}

protected final void initMLSTATCHK(String s) {
if (!s.trim().isEmpty()) {
MLSTATCHK = Byte.parseByte(s);
} else {
MLSTATCHK = Byte.MIN_VALUE;
}
}

protected final void initMLWKFPT(String s) {
if (!s.trim().isEmpty()) {
MLWKFPT = Byte.parseByte(s);
} else {
MLWKFPT = Byte.MIN_VALUE;
}
}

protected final void initMNPID(String s) {
if (!s.trim().isEmpty()) {
MNPID = Integer.parseInt(s);
} else {
MNPID = Integer.MIN_VALUE;
}
}

protected final void initMNPNO(String s) {
if (!s.trim().isEmpty()) {
MNPNO = Byte.parseByte(s);
} else {
MNPNO = Byte.MIN_VALUE;
}
}

protected final void initMNSPID(String s) {
if (!s.trim().isEmpty()) {
MNSPID = Integer.parseInt(s);
} else {
MNSPID = Integer.MIN_VALUE;
}
}

protected final void initMNSPNO(String s) {
if (!s.trim().isEmpty()) {
MNSPNO = Byte.parseByte(s);
} else {
MNSPNO = Byte.MIN_VALUE;
}
}

protected final void initMOBUSE(String s) {
if (!s.trim().isEmpty()) {
MOBUSE = Byte.parseByte(s);
} else {
MOBUSE = Byte.MIN_VALUE;
}
}

protected final void initMONTH(String s) {
if (!s.trim().isEmpty()) {
MONTH = Byte.parseByte(s);
} else {
MONTH = Byte.MIN_VALUE;
}
}

protected final void initMOVDIR(String s) {
if (!s.trim().isEmpty()) {
MOVDIR = Byte.parseByte(s);
} else {
MOVDIR = Byte.MIN_VALUE;
}
}

protected final void initMOVEOTH_CODE(String s) {
if (!s.trim().isEmpty()) {
MOVEOTH_CODE = Byte.parseByte(s);
} else {
MOVEOTH_CODE = Byte.MIN_VALUE;
}
}

protected final void initMOVY11(String s) {
if (!s.trim().isEmpty()) {
MOVY11 = Byte.parseByte(s);
} else {
MOVY11 = Byte.MIN_VALUE;
}
}

protected final void initMOVY12(String s) {
if (!s.trim().isEmpty()) {
MOVY12 = Byte.parseByte(s);
} else {
MOVY12 = Byte.MIN_VALUE;
}
}

protected final void initMOVY13(String s) {
if (!s.trim().isEmpty()) {
MOVY13 = Byte.parseByte(s);
} else {
MOVY13 = Byte.MIN_VALUE;
}
}

protected final void initMOVY14(String s) {
if (!s.trim().isEmpty()) {
MOVY14 = Byte.parseByte(s);
} else {
MOVY14 = Byte.MIN_VALUE;
}
}

protected final void initMOVY15(String s) {
if (!s.trim().isEmpty()) {
MOVY15 = Byte.parseByte(s);
} else {
MOVY15 = Byte.MIN_VALUE;
}
}

protected final void initMOVY16(String s) {
if (!s.trim().isEmpty()) {
MOVY16 = Byte.parseByte(s);
} else {
MOVY16 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH1(String s) {
if (!s.trim().isEmpty()) {
MSTATCH1 = Byte.parseByte(s);
} else {
MSTATCH1 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH2(String s) {
if (!s.trim().isEmpty()) {
MSTATCH2 = Byte.parseByte(s);
} else {
MSTATCH2 = Byte.MIN_VALUE;
}
}

protected final void initMSTATSAM(String s) {
if (!s.trim().isEmpty()) {
MSTATSAM = Short.parseShort(s);
} else {
MSTATSAM = Short.MIN_VALUE;
}
}

protected final void initMSTATSAMN(String s) {
if (!s.trim().isEmpty()) {
MSTATSAMN = Byte.parseByte(s);
} else {
MSTATSAMN = Byte.MIN_VALUE;
}
}

protected final void initMVEVER(String s) {
if (!s.trim().isEmpty()) {
MVEVER = Byte.parseByte(s);
} else {
MVEVER = Byte.MIN_VALUE;
}
}

protected final void initMVMNTH(String s) {
if (!s.trim().isEmpty()) {
MVMNTH = Byte.parseByte(s);
} else {
MVMNTH = Byte.MIN_VALUE;
}
}

protected final void initMVYR(String s) {
if (!s.trim().isEmpty()) {
MVYR = Short.parseShort(s);
} else {
MVYR = Short.MIN_VALUE;
}
}

protected final void initNACAR(String s) {
if (!s.trim().isEmpty()) {
NACAR = Byte.parseByte(s);
} else {
NACAR = Byte.MIN_VALUE;
}
}

protected final void initNACONT11(String s) {
if (!s.trim().isEmpty()) {
NACONT11 = Byte.parseByte(s);
} else {
NACONT11 = Byte.MIN_VALUE;
}
}

protected final void initNACONT12(String s) {
if (!s.trim().isEmpty()) {
NACONT12 = Byte.parseByte(s);
} else {
NACONT12 = Byte.MIN_VALUE;
}
}

protected final void initNACONT13(String s) {
if (!s.trim().isEmpty()) {
NACONT13 = Byte.parseByte(s);
} else {
NACONT13 = Byte.MIN_VALUE;
}
}

protected final void initNACONT21(String s) {
if (!s.trim().isEmpty()) {
NACONT21 = Byte.parseByte(s);
} else {
NACONT21 = Byte.MIN_VALUE;
}
}

protected final void initNACONT210(String s) {
if (!s.trim().isEmpty()) {
NACONT210 = Byte.parseByte(s);
} else {
NACONT210 = Byte.MIN_VALUE;
}
}

protected final void initNACONT211(String s) {
if (!s.trim().isEmpty()) {
NACONT211 = Byte.parseByte(s);
} else {
NACONT211 = Byte.MIN_VALUE;
}
}

protected final void initNACONT212(String s) {
if (!s.trim().isEmpty()) {
NACONT212 = Byte.parseByte(s);
} else {
NACONT212 = Byte.MIN_VALUE;
}
}

protected final void initNACONT213(String s) {
if (!s.trim().isEmpty()) {
NACONT213 = Byte.parseByte(s);
} else {
NACONT213 = Byte.MIN_VALUE;
}
}

protected final void initNACONT214(String s) {
if (!s.trim().isEmpty()) {
NACONT214 = Byte.parseByte(s);
} else {
NACONT214 = Byte.MIN_VALUE;
}
}

protected final void initNACONT215(String s) {
if (!s.trim().isEmpty()) {
NACONT215 = Byte.parseByte(s);
} else {
NACONT215 = Byte.MIN_VALUE;
}
}

protected final void initNACONT216(String s) {
if (!s.trim().isEmpty()) {
NACONT216 = Byte.parseByte(s);
} else {
NACONT216 = Byte.MIN_VALUE;
}
}

protected final void initNACONT22(String s) {
if (!s.trim().isEmpty()) {
NACONT22 = Byte.parseByte(s);
} else {
NACONT22 = Byte.MIN_VALUE;
}
}

protected final void initNACONT23(String s) {
if (!s.trim().isEmpty()) {
NACONT23 = Byte.parseByte(s);
} else {
NACONT23 = Byte.MIN_VALUE;
}
}

protected final void initNACONT24(String s) {
if (!s.trim().isEmpty()) {
NACONT24 = Byte.parseByte(s);
} else {
NACONT24 = Byte.MIN_VALUE;
}
}

protected final void initNACONT25(String s) {
if (!s.trim().isEmpty()) {
NACONT25 = Byte.parseByte(s);
} else {
NACONT25 = Byte.MIN_VALUE;
}
}

protected final void initNACONT26(String s) {
if (!s.trim().isEmpty()) {
NACONT26 = Byte.parseByte(s);
} else {
NACONT26 = Byte.MIN_VALUE;
}
}

protected final void initNACONT27(String s) {
if (!s.trim().isEmpty()) {
NACONT27 = Byte.parseByte(s);
} else {
NACONT27 = Byte.MIN_VALUE;
}
}

protected final void initNACONT28(String s) {
if (!s.trim().isEmpty()) {
NACONT28 = Byte.parseByte(s);
} else {
NACONT28 = Byte.MIN_VALUE;
}
}

protected final void initNACONT29(String s) {
if (!s.trim().isEmpty()) {
NACONT29 = Byte.parseByte(s);
} else {
NACONT29 = Byte.MIN_VALUE;
}
}

protected final void initNACONT3(String s) {
if (!s.trim().isEmpty()) {
NACONT3 = Byte.parseByte(s);
} else {
NACONT3 = Byte.MIN_VALUE;
}
}

protected final void initNADISEASE(String s) {
if (!s.trim().isEmpty()) {
NADISEASE = Byte.parseByte(s);
} else {
NADISEASE = Byte.MIN_VALUE;
}
}

protected final void initNADOPTCH(String s) {
if (!s.trim().isEmpty()) {
NADOPTCH = Byte.parseByte(s);
} else {
NADOPTCH = Byte.MIN_VALUE;
}
}

protected final void initNADRINK(String s) {
if (!s.trim().isEmpty()) {
NADRINK = Byte.parseByte(s);
} else {
NADRINK = Byte.MIN_VALUE;
}
}

protected final void initNAIDXHH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH = Byte.parseByte(s);
} else {
NAIDXHH = Byte.MIN_VALUE;
}
}

protected final void initNAINTEREST(String s) {
if (!s.trim().isEmpty()) {
NAINTEREST = Byte.parseByte(s);
} else {
NAINTEREST = Byte.MIN_VALUE;
}
}

protected final void initNALOTTERY(String s) {
if (!s.trim().isEmpty()) {
NALOTTERY = Byte.parseByte(s);
} else {
NALOTTERY = Byte.MIN_VALUE;
}
}

protected final void initNASOFA(String s) {
if (!s.trim().isEmpty()) {
NASOFA = Byte.parseByte(s);
} else {
NASOFA = Byte.MIN_VALUE;
}
}

protected final void initNASTOP1(String s) {
if (!s.trim().isEmpty()) {
NASTOP1 = Byte.parseByte(s);
} else {
NASTOP1 = Byte.MIN_VALUE;
}
}

protected final void initNASTOP2(String s) {
if (!s.trim().isEmpty()) {
NASTOP2 = Byte.parseByte(s);
} else {
NASTOP2 = Byte.MIN_VALUE;
}
}

protected final void initNASTOP3(String s) {
if (!s.trim().isEmpty()) {
NASTOP3 = Byte.parseByte(s);
} else {
NASTOP3 = Byte.MIN_VALUE;
}
}

protected final void initNASTOP4(String s) {
if (!s.trim().isEmpty()) {
NASTOP4 = Byte.parseByte(s);
} else {
NASTOP4 = Byte.MIN_VALUE;
}
}

protected final void initNASTOP5(String s) {
if (!s.trim().isEmpty()) {
NASTOP5 = Byte.parseByte(s);
} else {
NASTOP5 = Byte.MIN_VALUE;
}
}

protected final void initNASTOP6(String s) {
if (!s.trim().isEmpty()) {
NASTOP6 = Byte.parseByte(s);
} else {
NASTOP6 = Byte.MIN_VALUE;
}
}

protected final void initNASTOP7(String s) {
if (!s.trim().isEmpty()) {
NASTOP7 = Byte.parseByte(s);
} else {
NASTOP7 = Byte.MIN_VALUE;
}
}

protected final void initNASTOP8(String s) {
if (!s.trim().isEmpty()) {
NASTOP8 = Byte.parseByte(s);
} else {
NASTOP8 = Byte.MIN_VALUE;
}
}

protected final void initNASTOP97(String s) {
if (!s.trim().isEmpty()) {
NASTOP97 = Byte.parseByte(s);
} else {
NASTOP97 = Byte.MIN_VALUE;
}
}

protected final void initNATCH01(String s) {
if (!s.trim().isEmpty()) {
NATCH01 = Byte.parseByte(s);
} else {
NATCH01 = Byte.MIN_VALUE;
}
}

protected final void initNATCH02(String s) {
if (!s.trim().isEmpty()) {
NATCH02 = Byte.parseByte(s);
} else {
NATCH02 = Byte.MIN_VALUE;
}
}

protected final void initNATCH03(String s) {
if (!s.trim().isEmpty()) {
NATCH03 = Byte.parseByte(s);
} else {
NATCH03 = Byte.MIN_VALUE;
}
}

protected final void initNATCH04(String s) {
if (!s.trim().isEmpty()) {
NATCH04 = Byte.parseByte(s);
} else {
NATCH04 = Byte.MIN_VALUE;
}
}

protected final void initNATCH05(String s) {
if (!s.trim().isEmpty()) {
NATCH05 = Byte.parseByte(s);
} else {
NATCH05 = Byte.MIN_VALUE;
}
}

protected final void initNATCH06(String s) {
if (!s.trim().isEmpty()) {
NATCH06 = Byte.parseByte(s);
} else {
NATCH06 = Byte.MIN_VALUE;
}
}

protected final void initNATCH07(String s) {
if (!s.trim().isEmpty()) {
NATCH07 = Byte.parseByte(s);
} else {
NATCH07 = Byte.MIN_VALUE;
}
}

protected final void initNATCH08(String s) {
if (!s.trim().isEmpty()) {
NATCH08 = Byte.parseByte(s);
} else {
NATCH08 = Byte.MIN_VALUE;
}
}

protected final void initNATCH09(String s) {
if (!s.trim().isEmpty()) {
NATCH09 = Byte.parseByte(s);
} else {
NATCH09 = Byte.MIN_VALUE;
}
}

protected final void initNATCH10(String s) {
if (!s.trim().isEmpty()) {
NATCH10 = Byte.parseByte(s);
} else {
NATCH10 = Byte.MIN_VALUE;
}
}

protected final void initNATCH11(String s) {
if (!s.trim().isEmpty()) {
NATCH11 = Byte.parseByte(s);
} else {
NATCH11 = Byte.MIN_VALUE;
}
}

protected final void initNATCH12(String s) {
if (!s.trim().isEmpty()) {
NATCH12 = Byte.parseByte(s);
} else {
NATCH12 = Byte.MIN_VALUE;
}
}

protected final void initNATCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH13 = false;
} else {
NATCH13 = true;
}
}
}

protected final void initNATCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH14 = false;
} else {
NATCH14 = true;
}
}
}

protected final void initNATCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH15 = false;
} else {
NATCH15 = true;
}
}
}

protected final void initNATCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
NATCH16 = false;
} else {
NATCH16 = true;
}
}
}

protected final void initNATID1(String s) {
if (!s.trim().isEmpty()) {
NATID1 = Byte.parseByte(s);
} else {
NATID1 = Byte.MIN_VALUE;
}
}

protected final void initNATID2(String s) {
if (!s.trim().isEmpty()) {
NATID2 = Byte.parseByte(s);
} else {
NATID2 = Byte.MIN_VALUE;
}
}

protected final void initNATID3(String s) {
if (!s.trim().isEmpty()) {
NATID3 = Byte.parseByte(s);
} else {
NATID3 = Byte.MIN_VALUE;
}
}

protected final void initNATID4(String s) {
if (!s.trim().isEmpty()) {
NATID4 = Byte.parseByte(s);
} else {
NATID4 = Byte.MIN_VALUE;
}
}

protected final void initNATID5(String s) {
if (!s.trim().isEmpty()) {
NATID5 = Byte.parseByte(s);
} else {
NATID5 = Byte.MIN_VALUE;
}
}

protected final void initNATID6(String s) {
if (!s.trim().isEmpty()) {
NATID6 = Byte.parseByte(s);
} else {
NATID6 = Byte.MIN_VALUE;
}
}

protected final void initNATID97(String s) {
if (!s.trim().isEmpty()) {
NATID97 = Byte.parseByte(s);
} else {
NATID97 = Byte.MIN_VALUE;
}
}

protected final void initNBRCOH1(String s) {
if (!s.trim().isEmpty()) {
NBRCOH1 = Byte.parseByte(s);
} else {
NBRCOH1 = Byte.MIN_VALUE;
}
}

protected final void initNBRCOH2(String s) {
if (!s.trim().isEmpty()) {
NBRCOH2 = Byte.parseByte(s);
} else {
NBRCOH2 = Byte.MIN_VALUE;
}
}

protected final void initNBRCOH3(String s) {
if (!s.trim().isEmpty()) {
NBRCOH3 = Byte.parseByte(s);
} else {
NBRCOH3 = Byte.MIN_VALUE;
}
}

protected final void initNBRCOH4(String s) {
if (!s.trim().isEmpty()) {
NBRCOH4 = Byte.parseByte(s);
} else {
NBRCOH4 = Byte.MIN_VALUE;
}
}

protected final void initNBRCOHDK_DV(String s) {
if (!s.trim().isEmpty()) {
NBRCOHDK_DV = Byte.parseByte(s);
} else {
NBRCOHDK_DV = Byte.MIN_VALUE;
}
}

protected final void initNBRCOH_DV(String s) {
if (!s.trim().isEmpty()) {
NBRCOH_DV = Byte.parseByte(s);
} else {
NBRCOH_DV = Byte.MIN_VALUE;
}
}

protected final void initNBRSNCI_DV(String s) {
if (!s.trim().isEmpty()) {
NBRSNCI_DV = Double.parseDouble(s);
} else {
NBRSNCI_DV = Double.NaN;
}
}

protected final void initNCH10(String s) {
if (!s.trim().isEmpty()) {
NCH10 = Byte.parseByte(s);
} else {
NCH10 = Byte.MIN_VALUE;
}
}

protected final void initNCH10TO15(String s) {
if (!s.trim().isEmpty()) {
NCH10TO15 = Byte.parseByte(s);
} else {
NCH10TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH14RESP(String s) {
if (!s.trim().isEmpty()) {
NCH14RESP = Byte.parseByte(s);
} else {
NCH14RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH3RESP(String s) {
if (!s.trim().isEmpty()) {
NCH3RESP = Byte.parseByte(s);
} else {
NCH3RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH415RESP(String s) {
if (!s.trim().isEmpty()) {
NCH415RESP = Byte.parseByte(s);
} else {
NCH415RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5RESP(String s) {
if (!s.trim().isEmpty()) {
NCH5RESP = Byte.parseByte(s);
} else {
NCH5RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5TO15(String s) {
if (!s.trim().isEmpty()) {
NCH5TO15 = Byte.parseByte(s);
} else {
NCH5TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH8RESP(String s) {
if (!s.trim().isEmpty()) {
NCH8RESP = Byte.parseByte(s);
} else {
NCH8RESP = Byte.MIN_VALUE;
}
}

protected final void initNCHILD(String s) {
if (!s.trim().isEmpty()) {
NCHILD = Byte.parseByte(s);
} else {
NCHILD = Byte.MIN_VALUE;
}
}

protected final void initNCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHILD_DV = Short.parseShort(s);
} else {
NCHILD_DV = Short.MIN_VALUE;
}
}

protected final void initNCHRESP(String s) {
if (!s.trim().isEmpty()) {
NCHRESP = Byte.parseByte(s);
} else {
NCHRESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUND18RESP(String s) {
if (!s.trim().isEmpty()) {
NCHUND18RESP = Byte.parseByte(s);
} else {
NCHUND18RESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUNDER16(String s) {
if (!s.trim().isEmpty()) {
NCHUNDER16 = Byte.parseByte(s);
} else {
NCHUNDER16 = Byte.MIN_VALUE;
}
}

protected final void initNCRR1(String s) {
if (!s.trim().isEmpty()) {
NCRR1 = Byte.parseByte(s);
} else {
NCRR1 = Byte.MIN_VALUE;
}
}

protected final void initNCRR11(String s) {
if (!s.trim().isEmpty()) {
NCRR11 = Byte.parseByte(s);
} else {
NCRR11 = Byte.MIN_VALUE;
}
}

protected final void initNCRR12(String s) {
if (!s.trim().isEmpty()) {
NCRR12 = Byte.parseByte(s);
} else {
NCRR12 = Byte.MIN_VALUE;
}
}

protected final void initNCRR3(String s) {
if (!s.trim().isEmpty()) {
NCRR3 = Byte.parseByte(s);
} else {
NCRR3 = Byte.MIN_VALUE;
}
}

protected final void initNCRR4(String s) {
if (!s.trim().isEmpty()) {
NCRR4 = Byte.parseByte(s);
} else {
NCRR4 = Byte.MIN_VALUE;
}
}

protected final void initNCRR5(String s) {
if (!s.trim().isEmpty()) {
NCRR5 = Byte.parseByte(s);
} else {
NCRR5 = Byte.MIN_VALUE;
}
}

protected final void initNCRR6(String s) {
if (!s.trim().isEmpty()) {
NCRR6 = Byte.parseByte(s);
} else {
NCRR6 = Byte.MIN_VALUE;
}
}

protected final void initNCRR8(String s) {
if (!s.trim().isEmpty()) {
NCRR8 = Byte.parseByte(s);
} else {
NCRR8 = Byte.MIN_VALUE;
}
}

protected final void initNCRR9(String s) {
if (!s.trim().isEmpty()) {
NCRR9 = Byte.parseByte(s);
} else {
NCRR9 = Byte.MIN_VALUE;
}
}

protected final void initNCRRM(String s) {
if (!s.trim().isEmpty()) {
NCRRM = Byte.parseByte(s);
} else {
NCRRM = Byte.MIN_VALUE;
}
}

protected final void initNCRRY4(String s) {
if (!s.trim().isEmpty()) {
NCRRY4 = Short.parseShort(s);
} else {
NCRRY4 = Short.MIN_VALUE;
}
}

protected final void initNDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
NDEPCHL_DV = Byte.parseByte(s);
} else {
NDEPCHL_DV = Byte.MIN_VALUE;
}
}

protected final void initNETAG_1(String s) {
if (!s.trim().isEmpty()) {
NETAG_1 = Short.parseShort(s);
} else {
NETAG_1 = Short.MIN_VALUE;
}
}

protected final void initNETAG_2(String s) {
if (!s.trim().isEmpty()) {
NETAG_2 = Short.parseShort(s);
} else {
NETAG_2 = Short.MIN_VALUE;
}
}

protected final void initNETAG_3(String s) {
if (!s.trim().isEmpty()) {
NETAG_3 = Short.parseShort(s);
} else {
NETAG_3 = Short.MIN_VALUE;
}
}

protected final void initNETCHT(String s) {
if (!s.trim().isEmpty()) {
NETCHT = Byte.parseByte(s);
} else {
NETCHT = Byte.MIN_VALUE;
}
}

protected final void initNETDO10_1(String s) {
if (!s.trim().isEmpty()) {
NETDO10_1 = Byte.parseByte(s);
} else {
NETDO10_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO10_2(String s) {
if (!s.trim().isEmpty()) {
NETDO10_2 = Byte.parseByte(s);
} else {
NETDO10_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO10_3(String s) {
if (!s.trim().isEmpty()) {
NETDO10_3 = Byte.parseByte(s);
} else {
NETDO10_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO1_1(String s) {
if (!s.trim().isEmpty()) {
NETDO1_1 = Byte.parseByte(s);
} else {
NETDO1_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO1_2(String s) {
if (!s.trim().isEmpty()) {
NETDO1_2 = Byte.parseByte(s);
} else {
NETDO1_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO1_3(String s) {
if (!s.trim().isEmpty()) {
NETDO1_3 = Byte.parseByte(s);
} else {
NETDO1_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO2_1(String s) {
if (!s.trim().isEmpty()) {
NETDO2_1 = Byte.parseByte(s);
} else {
NETDO2_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO2_2(String s) {
if (!s.trim().isEmpty()) {
NETDO2_2 = Byte.parseByte(s);
} else {
NETDO2_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO2_3(String s) {
if (!s.trim().isEmpty()) {
NETDO2_3 = Byte.parseByte(s);
} else {
NETDO2_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO3_1(String s) {
if (!s.trim().isEmpty()) {
NETDO3_1 = Byte.parseByte(s);
} else {
NETDO3_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO3_2(String s) {
if (!s.trim().isEmpty()) {
NETDO3_2 = Byte.parseByte(s);
} else {
NETDO3_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO3_3(String s) {
if (!s.trim().isEmpty()) {
NETDO3_3 = Byte.parseByte(s);
} else {
NETDO3_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO4_1(String s) {
if (!s.trim().isEmpty()) {
NETDO4_1 = Byte.parseByte(s);
} else {
NETDO4_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO4_2(String s) {
if (!s.trim().isEmpty()) {
NETDO4_2 = Byte.parseByte(s);
} else {
NETDO4_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO4_3(String s) {
if (!s.trim().isEmpty()) {
NETDO4_3 = Byte.parseByte(s);
} else {
NETDO4_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO5_1(String s) {
if (!s.trim().isEmpty()) {
NETDO5_1 = Byte.parseByte(s);
} else {
NETDO5_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO5_2(String s) {
if (!s.trim().isEmpty()) {
NETDO5_2 = Byte.parseByte(s);
} else {
NETDO5_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO5_3(String s) {
if (!s.trim().isEmpty()) {
NETDO5_3 = Byte.parseByte(s);
} else {
NETDO5_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO6_1(String s) {
if (!s.trim().isEmpty()) {
NETDO6_1 = Byte.parseByte(s);
} else {
NETDO6_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO6_2(String s) {
if (!s.trim().isEmpty()) {
NETDO6_2 = Byte.parseByte(s);
} else {
NETDO6_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO6_3(String s) {
if (!s.trim().isEmpty()) {
NETDO6_3 = Byte.parseByte(s);
} else {
NETDO6_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO7_1(String s) {
if (!s.trim().isEmpty()) {
NETDO7_1 = Byte.parseByte(s);
} else {
NETDO7_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO7_2(String s) {
if (!s.trim().isEmpty()) {
NETDO7_2 = Byte.parseByte(s);
} else {
NETDO7_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO7_3(String s) {
if (!s.trim().isEmpty()) {
NETDO7_3 = Byte.parseByte(s);
} else {
NETDO7_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO8_1(String s) {
if (!s.trim().isEmpty()) {
NETDO8_1 = Byte.parseByte(s);
} else {
NETDO8_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO8_2(String s) {
if (!s.trim().isEmpty()) {
NETDO8_2 = Byte.parseByte(s);
} else {
NETDO8_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO8_3(String s) {
if (!s.trim().isEmpty()) {
NETDO8_3 = Byte.parseByte(s);
} else {
NETDO8_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO96_1(String s) {
if (!s.trim().isEmpty()) {
NETDO96_1 = Byte.parseByte(s);
} else {
NETDO96_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO96_2(String s) {
if (!s.trim().isEmpty()) {
NETDO96_2 = Byte.parseByte(s);
} else {
NETDO96_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO96_3(String s) {
if (!s.trim().isEmpty()) {
NETDO96_3 = Byte.parseByte(s);
} else {
NETDO96_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO97_1(String s) {
if (!s.trim().isEmpty()) {
NETDO97_1 = Byte.parseByte(s);
} else {
NETDO97_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO97_2(String s) {
if (!s.trim().isEmpty()) {
NETDO97_2 = Byte.parseByte(s);
} else {
NETDO97_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO97_3(String s) {
if (!s.trim().isEmpty()) {
NETDO97_3 = Byte.parseByte(s);
} else {
NETDO97_3 = Byte.MIN_VALUE;
}
}

protected final void initNETDO9_1(String s) {
if (!s.trim().isEmpty()) {
NETDO9_1 = Byte.parseByte(s);
} else {
NETDO9_1 = Byte.MIN_VALUE;
}
}

protected final void initNETDO9_2(String s) {
if (!s.trim().isEmpty()) {
NETDO9_2 = Byte.parseByte(s);
} else {
NETDO9_2 = Byte.MIN_VALUE;
}
}

protected final void initNETDO9_3(String s) {
if (!s.trim().isEmpty()) {
NETDO9_3 = Byte.parseByte(s);
} else {
NETDO9_3 = Byte.MIN_VALUE;
}
}

protected final void initNETET_1(String s) {
if (!s.trim().isEmpty()) {
NETET_1 = Byte.parseByte(s);
} else {
NETET_1 = Byte.MIN_VALUE;
}
}

protected final void initNETET_2(String s) {
if (!s.trim().isEmpty()) {
NETET_2 = Byte.parseByte(s);
} else {
NETET_2 = Byte.MIN_VALUE;
}
}

protected final void initNETET_3(String s) {
if (!s.trim().isEmpty()) {
NETET_3 = Byte.parseByte(s);
} else {
NETET_3 = Byte.MIN_VALUE;
}
}

protected final void initNETJB_1(String s) {
if (!s.trim().isEmpty()) {
NETJB_1 = Byte.parseByte(s);
} else {
NETJB_1 = Byte.MIN_VALUE;
}
}

protected final void initNETJB_2(String s) {
if (!s.trim().isEmpty()) {
NETJB_2 = Byte.parseByte(s);
} else {
NETJB_2 = Byte.MIN_VALUE;
}
}

protected final void initNETJB_3(String s) {
if (!s.trim().isEmpty()) {
NETJB_3 = Byte.parseByte(s);
} else {
NETJB_3 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_1(String s) {
if (!s.trim().isEmpty()) {
NETKN_1 = Byte.parseByte(s);
} else {
NETKN_1 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_2(String s) {
if (!s.trim().isEmpty()) {
NETKN_2 = Byte.parseByte(s);
} else {
NETKN_2 = Byte.MIN_VALUE;
}
}

protected final void initNETKN_3(String s) {
if (!s.trim().isEmpty()) {
NETKN_3 = Byte.parseByte(s);
} else {
NETKN_3 = Byte.MIN_VALUE;
}
}

protected final void initNETLV_1(String s) {
if (!s.trim().isEmpty()) {
NETLV_1 = Byte.parseByte(s);
} else {
NETLV_1 = Byte.MIN_VALUE;
}
}

protected final void initNETLV_2(String s) {
if (!s.trim().isEmpty()) {
NETLV_2 = Byte.parseByte(s);
} else {
NETLV_2 = Byte.MIN_VALUE;
}
}

protected final void initNETLV_3(String s) {
if (!s.trim().isEmpty()) {
NETLV_3 = Byte.parseByte(s);
} else {
NETLV_3 = Byte.MIN_VALUE;
}
}

protected final void initNETM2(String s) {
if (!s.trim().isEmpty()) {
NETM2 = Byte.parseByte(s);
} else {
NETM2 = Byte.MIN_VALUE;
}
}

protected final void initNETM2O_CODE(String s) {
if (!s.trim().isEmpty()) {
NETM2O_CODE = Byte.parseByte(s);
} else {
NETM2O_CODE = Byte.MIN_VALUE;
}
}

protected final void initNETMET_1(String s) {
if (!s.trim().isEmpty()) {
NETMET_1 = Byte.parseByte(s);
} else {
NETMET_1 = Byte.MIN_VALUE;
}
}

protected final void initNETMET_2(String s) {
if (!s.trim().isEmpty()) {
NETMET_2 = Byte.parseByte(s);
} else {
NETMET_2 = Byte.MIN_VALUE;
}
}

protected final void initNETMET_3(String s) {
if (!s.trim().isEmpty()) {
NETMET_3 = Byte.parseByte(s);
} else {
NETMET_3 = Byte.MIN_VALUE;
}
}

protected final void initNETPH_1(String s) {
if (!s.trim().isEmpty()) {
NETPH_1 = Short.parseShort(s);
} else {
NETPH_1 = Short.MIN_VALUE;
}
}

protected final void initNETPH_2(String s) {
if (!s.trim().isEmpty()) {
NETPH_2 = Short.parseShort(s);
} else {
NETPH_2 = Short.MIN_VALUE;
}
}

protected final void initNETPH_3(String s) {
if (!s.trim().isEmpty()) {
NETPH_3 = Short.parseShort(s);
} else {
NETPH_3 = Short.MIN_VALUE;
}
}

protected final void initNETPUSE(String s) {
if (!s.trim().isEmpty()) {
NETPUSE = Byte.parseByte(s);
} else {
NETPUSE = Byte.MIN_VALUE;
}
}

protected final void initNETRL_1(String s) {
if (!s.trim().isEmpty()) {
NETRL_1 = Byte.parseByte(s);
} else {
NETRL_1 = Byte.MIN_VALUE;
}
}

protected final void initNETRL_2(String s) {
if (!s.trim().isEmpty()) {
NETRL_2 = Byte.parseByte(s);
} else {
NETRL_2 = Byte.MIN_VALUE;
}
}

protected final void initNETRL_3(String s) {
if (!s.trim().isEmpty()) {
NETRL_3 = Byte.parseByte(s);
} else {
NETRL_3 = Byte.MIN_VALUE;
}
}

protected final void initNETSX_1(String s) {
if (!s.trim().isEmpty()) {
NETSX_1 = Short.parseShort(s);
} else {
NETSX_1 = Short.MIN_VALUE;
}
}

protected final void initNETSX_2(String s) {
if (!s.trim().isEmpty()) {
NETSX_2 = Short.parseShort(s);
} else {
NETSX_2 = Short.MIN_VALUE;
}
}

protected final void initNETSX_3(String s) {
if (!s.trim().isEmpty()) {
NETSX_3 = Short.parseShort(s);
} else {
NETSX_3 = Short.MIN_VALUE;
}
}

protected final void initNETTALK10_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK10_1 = Byte.parseByte(s);
} else {
NETTALK10_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK10_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK10_2 = Byte.parseByte(s);
} else {
NETTALK10_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK10_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK10_3 = Byte.parseByte(s);
} else {
NETTALK10_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK11_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK11_1 = Byte.parseByte(s);
} else {
NETTALK11_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK11_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK11_2 = Byte.parseByte(s);
} else {
NETTALK11_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK11_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK11_3 = Byte.parseByte(s);
} else {
NETTALK11_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK12_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK12_1 = Byte.parseByte(s);
} else {
NETTALK12_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK12_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK12_2 = Byte.parseByte(s);
} else {
NETTALK12_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK12_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK12_3 = Byte.parseByte(s);
} else {
NETTALK12_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK13_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK13_1 = Byte.parseByte(s);
} else {
NETTALK13_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK13_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK13_2 = Byte.parseByte(s);
} else {
NETTALK13_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK13_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK13_3 = Byte.parseByte(s);
} else {
NETTALK13_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK1_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK1_1 = Byte.parseByte(s);
} else {
NETTALK1_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK1_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK1_2 = Byte.parseByte(s);
} else {
NETTALK1_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK1_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK1_3 = Byte.parseByte(s);
} else {
NETTALK1_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK2_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK2_1 = Byte.parseByte(s);
} else {
NETTALK2_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK2_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK2_2 = Byte.parseByte(s);
} else {
NETTALK2_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK2_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK2_3 = Byte.parseByte(s);
} else {
NETTALK2_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK3_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK3_1 = Byte.parseByte(s);
} else {
NETTALK3_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK3_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK3_2 = Byte.parseByte(s);
} else {
NETTALK3_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK3_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK3_3 = Byte.parseByte(s);
} else {
NETTALK3_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK4_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK4_1 = Byte.parseByte(s);
} else {
NETTALK4_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK4_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK4_2 = Byte.parseByte(s);
} else {
NETTALK4_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK4_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK4_3 = Byte.parseByte(s);
} else {
NETTALK4_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK5_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK5_1 = Byte.parseByte(s);
} else {
NETTALK5_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK5_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK5_2 = Byte.parseByte(s);
} else {
NETTALK5_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK5_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK5_3 = Byte.parseByte(s);
} else {
NETTALK5_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK6_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK6_1 = Byte.parseByte(s);
} else {
NETTALK6_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK6_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK6_2 = Byte.parseByte(s);
} else {
NETTALK6_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK6_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK6_3 = Byte.parseByte(s);
} else {
NETTALK6_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK7_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK7_1 = Byte.parseByte(s);
} else {
NETTALK7_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK7_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK7_2 = Byte.parseByte(s);
} else {
NETTALK7_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK7_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK7_3 = Byte.parseByte(s);
} else {
NETTALK7_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK8_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK8_1 = Byte.parseByte(s);
} else {
NETTALK8_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK8_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK8_2 = Byte.parseByte(s);
} else {
NETTALK8_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK8_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK8_3 = Byte.parseByte(s);
} else {
NETTALK8_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK96_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK96_1 = Byte.parseByte(s);
} else {
NETTALK96_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK96_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK96_2 = Byte.parseByte(s);
} else {
NETTALK96_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK96_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK96_3 = Byte.parseByte(s);
} else {
NETTALK96_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK97_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK97_1 = Byte.parseByte(s);
} else {
NETTALK97_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK97_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK97_2 = Byte.parseByte(s);
} else {
NETTALK97_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK97_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK97_3 = Byte.parseByte(s);
} else {
NETTALK97_3 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK9_1(String s) {
if (!s.trim().isEmpty()) {
NETTALK9_1 = Byte.parseByte(s);
} else {
NETTALK9_1 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK9_2(String s) {
if (!s.trim().isEmpty()) {
NETTALK9_2 = Byte.parseByte(s);
} else {
NETTALK9_2 = Byte.MIN_VALUE;
}
}

protected final void initNETTALK9_3(String s) {
if (!s.trim().isEmpty()) {
NETTALK9_3 = Byte.parseByte(s);
} else {
NETTALK9_3 = Byte.MIN_VALUE;
}
}

protected final void initNETUSE(String s) {
if (!s.trim().isEmpty()) {
NETUSE = Byte.parseByte(s);
} else {
NETUSE = Byte.MIN_VALUE;
}
}

protected final void initNETWEB_1(String s) {
if (!s.trim().isEmpty()) {
NETWEB_1 = Byte.parseByte(s);
} else {
NETWEB_1 = Byte.MIN_VALUE;
}
}

protected final void initNETWEB_2(String s) {
if (!s.trim().isEmpty()) {
NETWEB_2 = Byte.parseByte(s);
} else {
NETWEB_2 = Byte.MIN_VALUE;
}
}

protected final void initNETWEB_3(String s) {
if (!s.trim().isEmpty()) {
NETWEB_3 = Byte.parseByte(s);
} else {
NETWEB_3 = Byte.MIN_VALUE;
}
}

protected final void initNETWR_1(String s) {
if (!s.trim().isEmpty()) {
NETWR_1 = Short.parseShort(s);
} else {
NETWR_1 = Short.MIN_VALUE;
}
}

protected final void initNETWR_2(String s) {
if (!s.trim().isEmpty()) {
NETWR_2 = Short.parseShort(s);
} else {
NETWR_2 = Short.MIN_VALUE;
}
}

protected final void initNETWR_3(String s) {
if (!s.trim().isEmpty()) {
NETWR_3 = Short.parseShort(s);
} else {
NETWR_3 = Short.MIN_VALUE;
}
}

protected final void initNEWSMAIN(String s) {
if (!s.trim().isEmpty()) {
NEWSMAIN = Byte.parseByte(s);
} else {
NEWSMAIN = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE1(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE1 = Byte.parseByte(s);
} else {
NEWSOURCE1 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE10(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE10 = Byte.parseByte(s);
} else {
NEWSOURCE10 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE11(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE11 = Byte.parseByte(s);
} else {
NEWSOURCE11 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE12(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE12 = Byte.parseByte(s);
} else {
NEWSOURCE12 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE2(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE2 = Byte.parseByte(s);
} else {
NEWSOURCE2 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE3(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE3 = Byte.parseByte(s);
} else {
NEWSOURCE3 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE4(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE4 = Byte.parseByte(s);
} else {
NEWSOURCE4 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE5(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE5 = Byte.parseByte(s);
} else {
NEWSOURCE5 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE6(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE6 = Byte.parseByte(s);
} else {
NEWSOURCE6 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE7(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE7 = Byte.parseByte(s);
} else {
NEWSOURCE7 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE8(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE8 = Byte.parseByte(s);
} else {
NEWSOURCE8 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE9(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE9 = Byte.parseByte(s);
} else {
NEWSOURCE9 = Byte.MIN_VALUE;
}
}

protected final void initNEWSOURCE96(String s) {
if (!s.trim().isEmpty()) {
NEWSOURCE96 = Byte.parseByte(s);
} else {
NEWSOURCE96 = Byte.MIN_VALUE;
}
}

protected final void initNEXT1(String s) {
if (!s.trim().isEmpty()) {
NEXT1 = Byte.parseByte(s);
} else {
NEXT1 = Byte.MIN_VALUE;
}
}

protected final void initNEXT2(String s) {
if (!s.trim().isEmpty()) {
NEXT2 = Byte.parseByte(s);
} else {
NEXT2 = Byte.MIN_VALUE;
}
}

protected final void initNEXT3(String s) {
if (!s.trim().isEmpty()) {
NEXT3 = Byte.parseByte(s);
} else {
NEXT3 = Byte.MIN_VALUE;
}
}

protected final void initNEXT4(String s) {
if (!s.trim().isEmpty()) {
NEXT4 = Byte.parseByte(s);
} else {
NEXT4 = Byte.MIN_VALUE;
}
}

protected final void initNEXT5(String s) {
if (!s.trim().isEmpty()) {
NEXT5 = Byte.parseByte(s);
} else {
NEXT5 = Byte.MIN_VALUE;
}
}

protected final void initNEXT6(String s) {
if (!s.trim().isEmpty()) {
NEXT6 = Byte.parseByte(s);
} else {
NEXT6 = Byte.MIN_VALUE;
}
}

protected final void initNEXT7(String s) {
if (!s.trim().isEmpty()) {
NEXT7 = Byte.parseByte(s);
} else {
NEXT7 = Byte.MIN_VALUE;
}
}

protected final void initNEXT8(String s) {
if (!s.trim().isEmpty()) {
NEXT8 = Byte.parseByte(s);
} else {
NEXT8 = Byte.MIN_VALUE;
}
}

protected final void initNEXT9(String s) {
if (!s.trim().isEmpty()) {
NEXT9 = Byte.parseByte(s);
} else {
NEXT9 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE1(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE1 = Byte.parseByte(s);
} else {
NEXTELSE1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE2(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE2 = Byte.parseByte(s);
} else {
NEXTELSE2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE3(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE3 = Byte.parseByte(s);
} else {
NEXTELSE3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE4(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE4 = Byte.parseByte(s);
} else {
NEXTELSE4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE5(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE5 = Byte.parseByte(s);
} else {
NEXTELSE5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE6(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE6 = Byte.parseByte(s);
} else {
NEXTELSE6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE7(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE7 = Byte.parseByte(s);
} else {
NEXTELSE7 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE8(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE8 = Byte.parseByte(s);
} else {
NEXTELSE8 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
NEXTELSE9 = false;
} else {
NEXTELSE9 = true;
}
}
}

protected final void initNEXTJOB1(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB1 = Byte.parseByte(s);
} else {
NEXTJOB1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB2(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB2 = Byte.parseByte(s);
} else {
NEXTJOB2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB3(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB3 = Byte.parseByte(s);
} else {
NEXTJOB3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB4(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB4 = Byte.parseByte(s);
} else {
NEXTJOB4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB5(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB5 = Byte.parseByte(s);
} else {
NEXTJOB5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB6(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB6 = Byte.parseByte(s);
} else {
NEXTJOB6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB7(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB7 = Byte.parseByte(s);
} else {
NEXTJOB7 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB8(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB8 = Byte.parseByte(s);
} else {
NEXTJOB8 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB9(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB9 = Byte.parseByte(s);
} else {
NEXTJOB9 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT1(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT1 = Byte.parseByte(s);
} else {
NEXTSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT2(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT2 = Byte.parseByte(s);
} else {
NEXTSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT3(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT3 = Byte.parseByte(s);
} else {
NEXTSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT4(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT4 = Byte.parseByte(s);
} else {
NEXTSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT5(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT5 = Byte.parseByte(s);
} else {
NEXTSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT6(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT6 = Byte.parseByte(s);
} else {
NEXTSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT7(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT7 = Byte.parseByte(s);
} else {
NEXTSTAT7 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT8(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT8 = Byte.parseByte(s);
} else {
NEXTSTAT8 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT9(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT9 = Byte.parseByte(s);
} else {
NEXTSTAT9 = Byte.MIN_VALUE;
}
}

protected final void initNFH01(String s) {
if (!s.trim().isEmpty()) {
NFH01 = Byte.parseByte(s);
} else {
NFH01 = Byte.MIN_VALUE;
}
}

protected final void initNFH02(String s) {
if (!s.trim().isEmpty()) {
NFH02 = Byte.parseByte(s);
} else {
NFH02 = Byte.MIN_VALUE;
}
}

protected final void initNFH03(String s) {
if (!s.trim().isEmpty()) {
NFH03 = Byte.parseByte(s);
} else {
NFH03 = Byte.MIN_VALUE;
}
}

protected final void initNFH04(String s) {
if (!s.trim().isEmpty()) {
NFH04 = Byte.parseByte(s);
} else {
NFH04 = Byte.MIN_VALUE;
}
}

protected final void initNFH05(String s) {
if (!s.trim().isEmpty()) {
NFH05 = Byte.parseByte(s);
} else {
NFH05 = Byte.MIN_VALUE;
}
}

protected final void initNFH06(String s) {
if (!s.trim().isEmpty()) {
NFH06 = Byte.parseByte(s);
} else {
NFH06 = Byte.MIN_VALUE;
}
}

protected final void initNFH07(String s) {
if (!s.trim().isEmpty()) {
NFH07 = Byte.parseByte(s);
} else {
NFH07 = Byte.MIN_VALUE;
}
}

protected final void initNFH08(String s) {
if (!s.trim().isEmpty()) {
NFH08 = Byte.parseByte(s);
} else {
NFH08 = Byte.MIN_VALUE;
}
}

protected final void initNFH09(String s) {
if (!s.trim().isEmpty()) {
NFH09 = Byte.parseByte(s);
} else {
NFH09 = Byte.MIN_VALUE;
}
}

protected final void initNFH10(String s) {
if (!s.trim().isEmpty()) {
NFH10 = Byte.parseByte(s);
} else {
NFH10 = Byte.MIN_VALUE;
}
}

protected final void initNFH11(String s) {
if (!s.trim().isEmpty()) {
NFH11 = Byte.parseByte(s);
} else {
NFH11 = Byte.MIN_VALUE;
}
}

protected final void initNFH12(String s) {
if (!s.trim().isEmpty()) {
NFH12 = Byte.parseByte(s);
} else {
NFH12 = Byte.MIN_VALUE;
}
}

protected final void initNFH13(String s) {
if (!s.trim().isEmpty()) {
NFH13 = Byte.parseByte(s);
} else {
NFH13 = Byte.MIN_VALUE;
}
}

protected final void initNFH14(String s) {
if (!s.trim().isEmpty()) {
NFH14 = Byte.parseByte(s);
} else {
NFH14 = Byte.MIN_VALUE;
}
}

protected final void initNFH15(String s) {
if (!s.trim().isEmpty()) {
NFH15 = Byte.parseByte(s);
} else {
NFH15 = Byte.MIN_VALUE;
}
}

protected final void initNFH16(String s) {
if (!s.trim().isEmpty()) {
NFH16 = Byte.parseByte(s);
} else {
NFH16 = Byte.MIN_VALUE;
}
}

protected final void initNFH17(String s) {
if (!s.trim().isEmpty()) {
NFH17 = Byte.parseByte(s);
} else {
NFH17 = Byte.MIN_VALUE;
}
}

protected final void initNFH18(String s) {
if (!s.trim().isEmpty()) {
NFH18 = Byte.parseByte(s);
} else {
NFH18 = Byte.MIN_VALUE;
}
}

protected final void initNFH19(String s) {
if (!s.trim().isEmpty()) {
NFH19 = Byte.parseByte(s);
} else {
NFH19 = Byte.MIN_VALUE;
}
}

protected final void initNFH20(String s) {
if (!s.trim().isEmpty()) {
NFH20 = Byte.parseByte(s);
} else {
NFH20 = Byte.MIN_VALUE;
}
}

protected final void initNFH21(String s) {
if (!s.trim().isEmpty()) {
NFH21 = Byte.parseByte(s);
} else {
NFH21 = Byte.MIN_VALUE;
}
}

protected final void initNFH22(String s) {
if (!s.trim().isEmpty()) {
NFH22 = Byte.parseByte(s);
} else {
NFH22 = Byte.MIN_VALUE;
}
}

protected final void initNFH23(String s) {
if (!s.trim().isEmpty()) {
NFH23 = Byte.parseByte(s);
} else {
NFH23 = Byte.MIN_VALUE;
}
}

protected final void initNFH24(String s) {
if (!s.trim().isEmpty()) {
NFH24 = Byte.parseByte(s);
} else {
NFH24 = Byte.MIN_VALUE;
}
}

protected final void initNFH25(String s) {
if (!s.trim().isEmpty()) {
NFH25 = Byte.parseByte(s);
} else {
NFH25 = Byte.MIN_VALUE;
}
}

protected final void initNFH26(String s) {
if (!s.trim().isEmpty()) {
NFH26 = Byte.parseByte(s);
} else {
NFH26 = Byte.MIN_VALUE;
}
}

protected final void initNFH27(String s) {
if (!s.trim().isEmpty()) {
NFH27 = Byte.parseByte(s);
} else {
NFH27 = Byte.MIN_VALUE;
}
}

protected final void initNFH28(String s) {
if (!s.trim().isEmpty()) {
NFH28 = Byte.parseByte(s);
} else {
NFH28 = Byte.MIN_VALUE;
}
}

protected final void initNFH29(String s) {
if (!s.trim().isEmpty()) {
NFH29 = Byte.parseByte(s);
} else {
NFH29 = Byte.MIN_VALUE;
}
}

protected final void initNFH30(String s) {
if (!s.trim().isEmpty()) {
NFH30 = Byte.parseByte(s);
} else {
NFH30 = Byte.MIN_VALUE;
}
}

protected final void initNFH31(String s) {
if (!s.trim().isEmpty()) {
NFH31 = Byte.parseByte(s);
} else {
NFH31 = Byte.MIN_VALUE;
}
}

protected final void initNFH32(String s) {
if (!s.trim().isEmpty()) {
NFH32 = Byte.parseByte(s);
} else {
NFH32 = Byte.MIN_VALUE;
}
}

protected final void initNFH33(String s) {
if (!s.trim().isEmpty()) {
NFH33 = Byte.parseByte(s);
} else {
NFH33 = Byte.MIN_VALUE;
}
}

protected final void initNFH34(String s) {
if (!s.trim().isEmpty()) {
NFH34 = Byte.parseByte(s);
} else {
NFH34 = Byte.MIN_VALUE;
}
}

protected final void initNFH35(String s) {
if (!s.trim().isEmpty()) {
NFH35 = Byte.parseByte(s);
} else {
NFH35 = Byte.MIN_VALUE;
}
}

protected final void initNFH36(String s) {
if (!s.trim().isEmpty()) {
NFH36 = Byte.parseByte(s);
} else {
NFH36 = Byte.MIN_VALUE;
}
}

protected final void initNFH37(String s) {
if (!s.trim().isEmpty()) {
NFH37 = Byte.parseByte(s);
} else {
NFH37 = Byte.MIN_VALUE;
}
}

protected final void initNFH38(String s) {
if (!s.trim().isEmpty()) {
NFH38 = Byte.parseByte(s);
} else {
NFH38 = Byte.MIN_VALUE;
}
}

protected final void initNFH39(String s) {
if (!s.trim().isEmpty()) {
NFH39 = Byte.parseByte(s);
} else {
NFH39 = Byte.MIN_VALUE;
}
}

protected final void initNGRP_DV(String s) {
if (!s.trim().isEmpty()) {
NGRP_DV = Byte.parseByte(s);
} else {
NGRP_DV = Byte.MIN_VALUE;
}
}

protected final void initNHIQUAL_DV(String s) {
if (!s.trim().isEmpty()) {
NHIQUAL_DV = Byte.parseByte(s);
} else {
NHIQUAL_DV = Byte.MIN_VALUE;
}
}

protected final void initNIACT(String s) {
if (!s.trim().isEmpty()) {
NIACT = Byte.parseByte(s);
} else {
NIACT = Byte.MIN_VALUE;
}
}

protected final void initNICLBNS1(String s) {
if (!s.trim().isEmpty()) {
NICLBNS1 = Byte.parseByte(s);
} else {
NICLBNS1 = Byte.MIN_VALUE;
}
}

protected final void initNICLBNS2(String s) {
if (!s.trim().isEmpty()) {
NICLBNS2 = Byte.parseByte(s);
} else {
NICLBNS2 = Byte.MIN_VALUE;
}
}

protected final void initNICLBNS3(String s) {
if (!s.trim().isEmpty()) {
NICLBNS3 = Byte.parseByte(s);
} else {
NICLBNS3 = Byte.MIN_VALUE;
}
}

protected final void initNICLBNS4(String s) {
if (!s.trim().isEmpty()) {
NICLBNS4 = Byte.parseByte(s);
} else {
NICLBNS4 = Byte.MIN_VALUE;
}
}

protected final void initNIREL(String s) {
if (!s.trim().isEmpty()) {
NIREL = Byte.parseByte(s);
} else {
NIREL = Byte.MIN_VALUE;
}
}

protected final void initNISERPS(String s) {
if (!s.trim().isEmpty()) {
NISERPS = Byte.parseByte(s);
} else {
NISERPS = Byte.MIN_VALUE;
}
}

protected final void initNMAR(String s) {
if (!s.trim().isEmpty()) {
NMAR = Byte.parseByte(s);
} else {
NMAR = Byte.MIN_VALUE;
}
}

protected final void initNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NMPSP_DV = Byte.parseByte(s);
} else {
NMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNATCH(String s) {
if (!s.trim().isEmpty()) {
NNATCH = Byte.parseByte(s);
} else {
NNATCH = Byte.MIN_VALUE;
}
}

protected final void initNNEWBORN(String s) {
if (!s.trim().isEmpty()) {
NNEWBORN = Byte.parseByte(s);
} else {
NNEWBORN = Byte.MIN_VALUE;
}
}

protected final void initNNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NNMPSP_DV = Byte.parseByte(s);
} else {
NNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSIB_DV = Byte.parseByte(s);
} else {
NNSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSSIB_DV = Byte.parseByte(s);
} else {
NNSSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNOTEMPCHK(String s) {
if (!s.trim().isEmpty()) {
NOTEMPCHK = Byte.parseByte(s);
} else {
NOTEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initNPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER_DV = Byte.parseByte(s);
} else {
NPENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initNPNS_DV(String s) {
if (!s.trim().isEmpty()) {
NPNS_DV = Byte.parseByte(s);
} else {
NPNS_DV = Byte.MIN_VALUE;
}
}

protected final void initNPN_DV(String s) {
if (!s.trim().isEmpty()) {
NPN_DV = Byte.parseByte(s);
} else {
NPN_DV = Byte.MIN_VALUE;
}
}

protected final void initNQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
NQFHIGH_DV = Byte.parseByte(s);
} else {
NQFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initNRELS1(String s) {
if (!s.trim().isEmpty()) {
NRELS1 = Byte.parseByte(s);
} else {
NRELS1 = Byte.MIN_VALUE;
}
}

protected final void initNRELS2(String s) {
if (!s.trim().isEmpty()) {
NRELS2 = Byte.parseByte(s);
} else {
NRELS2 = Byte.MIN_VALUE;
}
}

protected final void initNRELS3(String s) {
if (!s.trim().isEmpty()) {
NRELS3 = Byte.parseByte(s);
} else {
NRELS3 = Byte.MIN_VALUE;
}
}

protected final void initNRELS4(String s) {
if (!s.trim().isEmpty()) {
NRELS4 = Byte.parseByte(s);
} else {
NRELS4 = Byte.MIN_VALUE;
}
}

protected final void initNRELS5(String s) {
if (!s.trim().isEmpty()) {
NRELS5 = Byte.parseByte(s);
} else {
NRELS5 = Byte.MIN_VALUE;
}
}

protected final void initNRELS6(String s) {
if (!s.trim().isEmpty()) {
NRELS6 = Byte.parseByte(s);
} else {
NRELS6 = Byte.MIN_VALUE;
}
}

protected final void initNS200PRE(String s) {
if (!s.trim().isEmpty()) {
NS200PRE = Byte.parseByte(s);
} else {
NS200PRE = Byte.MIN_VALUE;
}
}

protected final void initNS201G1(String s) {
if (!s.trim().isEmpty()) {
NS201G1 = Byte.parseByte(s);
} else {
NS201G1 = Byte.MIN_VALUE;
}
}

protected final void initNS202H1(String s) {
if (!s.trim().isEmpty()) {
NS202H1 = Byte.parseByte(s);
} else {
NS202H1 = Byte.MIN_VALUE;
}
}

protected final void initNS203I1(String s) {
if (!s.trim().isEmpty()) {
NS203I1 = Byte.parseByte(s);
} else {
NS203I1 = Byte.MIN_VALUE;
}
}

protected final void initNS204A1(String s) {
if (!s.trim().isEmpty()) {
NS204A1 = Byte.parseByte(s);
} else {
NS204A1 = Byte.MIN_VALUE;
}
}

protected final void initNS205B1(String s) {
if (!s.trim().isEmpty()) {
NS205B1 = Byte.parseByte(s);
} else {
NS205B1 = Byte.MIN_VALUE;
}
}

protected final void initNS206C1(String s) {
if (!s.trim().isEmpty()) {
NS206C1 = Byte.parseByte(s);
} else {
NS206C1 = Byte.MIN_VALUE;
}
}

protected final void initNS207D1(String s) {
if (!s.trim().isEmpty()) {
NS207D1 = Byte.parseByte(s);
} else {
NS207D1 = Byte.MIN_VALUE;
}
}

protected final void initNS208E1(String s) {
if (!s.trim().isEmpty()) {
NS208E1 = Byte.parseByte(s);
} else {
NS208E1 = Byte.MIN_VALUE;
}
}

protected final void initNS209F1(String s) {
if (!s.trim().isEmpty()) {
NS209F1 = Byte.parseByte(s);
} else {
NS209F1 = Byte.MIN_VALUE;
}
}

protected final void initNS210J1(String s) {
if (!s.trim().isEmpty()) {
NS210J1 = Byte.parseByte(s);
} else {
NS210J1 = Byte.MIN_VALUE;
}
}

protected final void initNS211K1(String s) {
if (!s.trim().isEmpty()) {
NS211K1 = Byte.parseByte(s);
} else {
NS211K1 = Byte.MIN_VALUE;
}
}

protected final void initNS212L1(String s) {
if (!s.trim().isEmpty()) {
NS212L1 = Byte.parseByte(s);
} else {
NS212L1 = Byte.MIN_VALUE;
}
}

protected final void initNS213M1(String s) {
if (!s.trim().isEmpty()) {
NS213M1 = Byte.parseByte(s);
} else {
NS213M1 = Byte.MIN_VALUE;
}
}

protected final void initNS214N1(String s) {
if (!s.trim().isEmpty()) {
NS214N1 = Byte.parseByte(s);
} else {
NS214N1 = Byte.MIN_VALUE;
}
}

protected final void initNS215O1(String s) {
if (!s.trim().isEmpty()) {
NS215O1 = Byte.parseByte(s);
} else {
NS215O1 = Byte.MIN_VALUE;
}
}

protected final void initNS216C(String s) {
if (!s.trim().isEmpty()) {
NS216C = Byte.parseByte(s);
} else {
NS216C = Byte.MIN_VALUE;
}
}

protected final void initNS221G2(String s) {
if (!s.trim().isEmpty()) {
NS221G2 = Byte.parseByte(s);
} else {
NS221G2 = Byte.MIN_VALUE;
}
}

protected final void initNS222H2(String s) {
if (!s.trim().isEmpty()) {
NS222H2 = Byte.parseByte(s);
} else {
NS222H2 = Byte.MIN_VALUE;
}
}

protected final void initNS223I2(String s) {
if (!s.trim().isEmpty()) {
NS223I2 = Byte.parseByte(s);
} else {
NS223I2 = Byte.MIN_VALUE;
}
}

protected final void initNS224A2(String s) {
if (!s.trim().isEmpty()) {
NS224A2 = Byte.parseByte(s);
} else {
NS224A2 = Byte.MIN_VALUE;
}
}

protected final void initNS225B2(String s) {
if (!s.trim().isEmpty()) {
NS225B2 = Byte.parseByte(s);
} else {
NS225B2 = Byte.MIN_VALUE;
}
}

protected final void initNS226C(String s) {
if (!s.trim().isEmpty()) {
NS226C = Byte.parseByte(s);
} else {
NS226C = Byte.MIN_VALUE;
}
}

protected final void initNS226C2(String s) {
if (!s.trim().isEmpty()) {
NS226C2 = Byte.parseByte(s);
} else {
NS226C2 = Byte.MIN_VALUE;
}
}

protected final void initNS227D2(String s) {
if (!s.trim().isEmpty()) {
NS227D2 = Byte.parseByte(s);
} else {
NS227D2 = Byte.MIN_VALUE;
}
}

protected final void initNS228E2(String s) {
if (!s.trim().isEmpty()) {
NS228E2 = Byte.parseByte(s);
} else {
NS228E2 = Byte.MIN_VALUE;
}
}

protected final void initNS229F2(String s) {
if (!s.trim().isEmpty()) {
NS229F2 = Byte.parseByte(s);
} else {
NS229F2 = Byte.MIN_VALUE;
}
}

protected final void initNS230J2(String s) {
if (!s.trim().isEmpty()) {
NS230J2 = Byte.parseByte(s);
} else {
NS230J2 = Byte.MIN_VALUE;
}
}

protected final void initNS231K2(String s) {
if (!s.trim().isEmpty()) {
NS231K2 = Byte.parseByte(s);
} else {
NS231K2 = Byte.MIN_VALUE;
}
}

protected final void initNS232L2(String s) {
if (!s.trim().isEmpty()) {
NS232L2 = Byte.parseByte(s);
} else {
NS232L2 = Byte.MIN_VALUE;
}
}

protected final void initNS233M2(String s) {
if (!s.trim().isEmpty()) {
NS233M2 = Byte.parseByte(s);
} else {
NS233M2 = Byte.MIN_VALUE;
}
}

protected final void initNS234N2(String s) {
if (!s.trim().isEmpty()) {
NS234N2 = Byte.parseByte(s);
} else {
NS234N2 = Byte.MIN_VALUE;
}
}

protected final void initNS235O2(String s) {
if (!s.trim().isEmpty()) {
NS235O2 = Byte.parseByte(s);
} else {
NS235O2 = Byte.MIN_VALUE;
}
}

protected final void initNS240(String s) {
if (!s.trim().isEmpty()) {
NS240 = Byte.parseByte(s);
} else {
NS240 = Byte.MIN_VALUE;
}
}

protected final void initNS241(String s) {
if (!s.trim().isEmpty()) {
NS241 = Byte.parseByte(s);
} else {
NS241 = Byte.MIN_VALUE;
}
}

protected final void initNS242(String s) {
if (!s.trim().isEmpty()) {
NS242 = Byte.parseByte(s);
} else {
NS242 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT11(String s) {
if (!s.trim().isEmpty()) {
NSCONT11 = Byte.parseByte(s);
} else {
NSCONT11 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT12(String s) {
if (!s.trim().isEmpty()) {
NSCONT12 = Byte.parseByte(s);
} else {
NSCONT12 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT13(String s) {
if (!s.trim().isEmpty()) {
NSCONT13 = Byte.parseByte(s);
} else {
NSCONT13 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT21(String s) {
if (!s.trim().isEmpty()) {
NSCONT21 = Byte.parseByte(s);
} else {
NSCONT21 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT210(String s) {
if (!s.trim().isEmpty()) {
NSCONT210 = Byte.parseByte(s);
} else {
NSCONT210 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT211(String s) {
if (!s.trim().isEmpty()) {
NSCONT211 = Byte.parseByte(s);
} else {
NSCONT211 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT212(String s) {
if (!s.trim().isEmpty()) {
NSCONT212 = Byte.parseByte(s);
} else {
NSCONT212 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT213(String s) {
if (!s.trim().isEmpty()) {
NSCONT213 = Byte.parseByte(s);
} else {
NSCONT213 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT214(String s) {
if (!s.trim().isEmpty()) {
NSCONT214 = Byte.parseByte(s);
} else {
NSCONT214 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT215(String s) {
if (!s.trim().isEmpty()) {
NSCONT215 = Byte.parseByte(s);
} else {
NSCONT215 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT216(String s) {
if (!s.trim().isEmpty()) {
NSCONT216 = Byte.parseByte(s);
} else {
NSCONT216 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT22(String s) {
if (!s.trim().isEmpty()) {
NSCONT22 = Byte.parseByte(s);
} else {
NSCONT22 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT23(String s) {
if (!s.trim().isEmpty()) {
NSCONT23 = Byte.parseByte(s);
} else {
NSCONT23 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT24(String s) {
if (!s.trim().isEmpty()) {
NSCONT24 = Byte.parseByte(s);
} else {
NSCONT24 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT25(String s) {
if (!s.trim().isEmpty()) {
NSCONT25 = Byte.parseByte(s);
} else {
NSCONT25 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT26(String s) {
if (!s.trim().isEmpty()) {
NSCONT26 = Byte.parseByte(s);
} else {
NSCONT26 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT27(String s) {
if (!s.trim().isEmpty()) {
NSCONT27 = Byte.parseByte(s);
} else {
NSCONT27 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT28(String s) {
if (!s.trim().isEmpty()) {
NSCONT28 = Byte.parseByte(s);
} else {
NSCONT28 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT29(String s) {
if (!s.trim().isEmpty()) {
NSCONT29 = Byte.parseByte(s);
} else {
NSCONT29 = Byte.MIN_VALUE;
}
}

protected final void initNSCONT3(String s) {
if (!s.trim().isEmpty()) {
NSCONT3 = Byte.parseByte(s);
} else {
NSCONT3 = Byte.MIN_VALUE;
}
}

protected final void initNSRAN(String s) {
if (!s.trim().isEmpty()) {
NSRAN = Byte.parseByte(s);
} else {
NSRAN = Byte.MIN_VALUE;
}
}

protected final void initNSSTOP1(String s) {
if (!s.trim().isEmpty()) {
NSSTOP1 = Byte.parseByte(s);
} else {
NSSTOP1 = Byte.MIN_VALUE;
}
}

protected final void initNSSTOP2(String s) {
if (!s.trim().isEmpty()) {
NSSTOP2 = Byte.parseByte(s);
} else {
NSSTOP2 = Byte.MIN_VALUE;
}
}

protected final void initNSSTOP3(String s) {
if (!s.trim().isEmpty()) {
NSSTOP3 = Byte.parseByte(s);
} else {
NSSTOP3 = Byte.MIN_VALUE;
}
}

protected final void initNSSTOP4(String s) {
if (!s.trim().isEmpty()) {
NSSTOP4 = Byte.parseByte(s);
} else {
NSSTOP4 = Byte.MIN_VALUE;
}
}

protected final void initNSSTOP5(String s) {
if (!s.trim().isEmpty()) {
NSSTOP5 = Byte.parseByte(s);
} else {
NSSTOP5 = Byte.MIN_VALUE;
}
}

protected final void initNSSTOP6(String s) {
if (!s.trim().isEmpty()) {
NSSTOP6 = Byte.parseByte(s);
} else {
NSSTOP6 = Byte.MIN_VALUE;
}
}

protected final void initNSSTOP7(String s) {
if (!s.trim().isEmpty()) {
NSSTOP7 = Byte.parseByte(s);
} else {
NSSTOP7 = Byte.MIN_VALUE;
}
}

protected final void initNSSTOP8(String s) {
if (!s.trim().isEmpty()) {
NSSTOP8 = Byte.parseByte(s);
} else {
NSSTOP8 = Byte.MIN_VALUE;
}
}

protected final void initNSSTOP97(String s) {
if (!s.trim().isEmpty()) {
NSSTOP97 = Byte.parseByte(s);
} else {
NSSTOP97 = Byte.MIN_VALUE;
}
}

protected final void initNUABPRE(String s) {
if (!s.trim().isEmpty()) {
NUABPRE = Byte.parseByte(s);
} else {
NUABPRE = Byte.MIN_VALUE;
}
}

protected final void initNUNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NUNMPSP_DV = Byte.parseByte(s);
} else {
NUNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDD(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDD = Byte.parseByte(s);
} else {
NXTJBENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDM(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDM = Byte.parseByte(s);
} else {
NXTJBENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDY4 = Short.parseShort(s);
} else {
NXTJBENDY4 = Short.MIN_VALUE;
}
}

protected final void initNXTJBES(String s) {
if (!s.trim().isEmpty()) {
NXTJBES = Byte.parseByte(s);
} else {
NXTJBES = Byte.MIN_VALUE;
}
}

protected final void initNXTJBHRS(String s) {
if (!s.trim().isEmpty()) {
NXTJBHRS = Byte.parseByte(s);
} else {
NXTJBHRS = Byte.MIN_VALUE;
}
}

protected final void initNXTST(String s) {
if (!s.trim().isEmpty()) {
NXTST = Byte.parseByte(s);
} else {
NXTST = Byte.MIN_VALUE;
}
}

protected final void initNXTSTELSE(String s) {
if (!s.trim().isEmpty()) {
NXTSTELSE = Byte.parseByte(s);
} else {
NXTSTELSE = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDD(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDD = Byte.parseByte(s);
} else {
NXTSTENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDM(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDM = Byte.parseByte(s);
} else {
NXTSTENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDY4 = Short.parseShort(s);
} else {
NXTSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initOCIMPA(String s) {
if (!s.trim().isEmpty()) {
OCIMPA = Byte.parseByte(s);
} else {
OCIMPA = Byte.MIN_VALUE;
}
}

protected final void initOCIMPB(String s) {
if (!s.trim().isEmpty()) {
OCIMPB = Byte.parseByte(s);
} else {
OCIMPB = Byte.MIN_VALUE;
}
}

protected final void initOCIMPE(String s) {
if (!s.trim().isEmpty()) {
OCIMPE = Byte.parseByte(s);
} else {
OCIMPE = Byte.MIN_VALUE;
}
}

protected final void initOCIMPF(String s) {
if (!s.trim().isEmpty()) {
OCIMPF = Byte.parseByte(s);
} else {
OCIMPF = Byte.MIN_VALUE;
}
}

protected final void initOCIMPI(String s) {
if (!s.trim().isEmpty()) {
OCIMPI = Byte.parseByte(s);
} else {
OCIMPI = Byte.MIN_VALUE;
}
}

protected final void initOCIMPK(String s) {
if (!s.trim().isEmpty()) {
OCIMPK = Byte.parseByte(s);
} else {
OCIMPK = Byte.MIN_VALUE;
}
}

protected final void initOCIMPL(String s) {
if (!s.trim().isEmpty()) {
OCIMPL = Byte.parseByte(s);
} else {
OCIMPL = Byte.MIN_VALUE;
}
}

protected final void initOHCH16(String s) {
if (!s.trim().isEmpty()) {
OHCH16 = Byte.parseByte(s);
} else {
OHCH16 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG(String s) {
if (!s.trim().isEmpty()) {
OPRLG = Byte.parseByte(s);
} else {
OPRLG = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0(String s) {
if (!s.trim().isEmpty()) {
OPRLG0 = Byte.parseByte(s);
} else {
OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
OPRLG0NI = Byte.parseByte(s);
} else {
OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initOPRLG1(String s) {
if (!s.trim().isEmpty()) {
OPRLG1 = Byte.parseByte(s);
} else {
OPRLG1 = Byte.MIN_VALUE;
}
}

protected final void initORG(String s) {
if (!s.trim().isEmpty()) {
ORG = Byte.parseByte(s);
} else {
ORG = Byte.MIN_VALUE;
}
}

protected final void initORGA1(String s) {
if (!s.trim().isEmpty()) {
ORGA1 = Byte.parseByte(s);
} else {
ORGA1 = Byte.MIN_VALUE;
}
}

protected final void initORGA10(String s) {
if (!s.trim().isEmpty()) {
ORGA10 = Byte.parseByte(s);
} else {
ORGA10 = Byte.MIN_VALUE;
}
}

protected final void initORGA11(String s) {
if (!s.trim().isEmpty()) {
ORGA11 = Byte.parseByte(s);
} else {
ORGA11 = Byte.MIN_VALUE;
}
}

protected final void initORGA12(String s) {
if (!s.trim().isEmpty()) {
ORGA12 = Byte.parseByte(s);
} else {
ORGA12 = Byte.MIN_VALUE;
}
}

protected final void initORGA13(String s) {
if (!s.trim().isEmpty()) {
ORGA13 = Byte.parseByte(s);
} else {
ORGA13 = Byte.MIN_VALUE;
}
}

protected final void initORGA14(String s) {
if (!s.trim().isEmpty()) {
ORGA14 = Byte.parseByte(s);
} else {
ORGA14 = Byte.MIN_VALUE;
}
}

protected final void initORGA15(String s) {
if (!s.trim().isEmpty()) {
ORGA15 = Byte.parseByte(s);
} else {
ORGA15 = Byte.MIN_VALUE;
}
}

protected final void initORGA16(String s) {
if (!s.trim().isEmpty()) {
ORGA16 = Byte.parseByte(s);
} else {
ORGA16 = Byte.MIN_VALUE;
}
}

protected final void initORGA2(String s) {
if (!s.trim().isEmpty()) {
ORGA2 = Byte.parseByte(s);
} else {
ORGA2 = Byte.MIN_VALUE;
}
}

protected final void initORGA3(String s) {
if (!s.trim().isEmpty()) {
ORGA3 = Byte.parseByte(s);
} else {
ORGA3 = Byte.MIN_VALUE;
}
}

protected final void initORGA4(String s) {
if (!s.trim().isEmpty()) {
ORGA4 = Byte.parseByte(s);
} else {
ORGA4 = Byte.MIN_VALUE;
}
}

protected final void initORGA5(String s) {
if (!s.trim().isEmpty()) {
ORGA5 = Byte.parseByte(s);
} else {
ORGA5 = Byte.MIN_VALUE;
}
}

protected final void initORGA6(String s) {
if (!s.trim().isEmpty()) {
ORGA6 = Byte.parseByte(s);
} else {
ORGA6 = Byte.MIN_VALUE;
}
}

protected final void initORGA7(String s) {
if (!s.trim().isEmpty()) {
ORGA7 = Byte.parseByte(s);
} else {
ORGA7 = Byte.MIN_VALUE;
}
}

protected final void initORGA8(String s) {
if (!s.trim().isEmpty()) {
ORGA8 = Byte.parseByte(s);
} else {
ORGA8 = Byte.MIN_VALUE;
}
}

protected final void initORGA9(String s) {
if (!s.trim().isEmpty()) {
ORGA9 = Byte.parseByte(s);
} else {
ORGA9 = Byte.MIN_VALUE;
}
}

protected final void initORGA96(String s) {
if (!s.trim().isEmpty()) {
ORGA96 = Byte.parseByte(s);
} else {
ORGA96 = Byte.MIN_VALUE;
}
}

protected final void initORGAT1(String s) {
if (!s.trim().isEmpty()) {
ORGAT1 = Byte.parseByte(s);
} else {
ORGAT1 = Byte.MIN_VALUE;
}
}

protected final void initORGAT10(String s) {
if (!s.trim().isEmpty()) {
ORGAT10 = Byte.parseByte(s);
} else {
ORGAT10 = Byte.MIN_VALUE;
}
}

protected final void initORGAT11(String s) {
if (!s.trim().isEmpty()) {
ORGAT11 = Byte.parseByte(s);
} else {
ORGAT11 = Byte.MIN_VALUE;
}
}

protected final void initORGAT12(String s) {
if (!s.trim().isEmpty()) {
ORGAT12 = Byte.parseByte(s);
} else {
ORGAT12 = Byte.MIN_VALUE;
}
}

protected final void initORGAT13(String s) {
if (!s.trim().isEmpty()) {
ORGAT13 = Byte.parseByte(s);
} else {
ORGAT13 = Byte.MIN_VALUE;
}
}

protected final void initORGAT14(String s) {
if (!s.trim().isEmpty()) {
ORGAT14 = Byte.parseByte(s);
} else {
ORGAT14 = Byte.MIN_VALUE;
}
}

protected final void initORGAT15(String s) {
if (!s.trim().isEmpty()) {
ORGAT15 = Byte.parseByte(s);
} else {
ORGAT15 = Byte.MIN_VALUE;
}
}

protected final void initORGAT16(String s) {
if (!s.trim().isEmpty()) {
ORGAT16 = Byte.parseByte(s);
} else {
ORGAT16 = Byte.MIN_VALUE;
}
}

protected final void initORGAT2(String s) {
if (!s.trim().isEmpty()) {
ORGAT2 = Byte.parseByte(s);
} else {
ORGAT2 = Byte.MIN_VALUE;
}
}

protected final void initORGAT3(String s) {
if (!s.trim().isEmpty()) {
ORGAT3 = Byte.parseByte(s);
} else {
ORGAT3 = Byte.MIN_VALUE;
}
}

protected final void initORGAT4(String s) {
if (!s.trim().isEmpty()) {
ORGAT4 = Byte.parseByte(s);
} else {
ORGAT4 = Byte.MIN_VALUE;
}
}

protected final void initORGAT5(String s) {
if (!s.trim().isEmpty()) {
ORGAT5 = Byte.parseByte(s);
} else {
ORGAT5 = Byte.MIN_VALUE;
}
}

protected final void initORGAT6(String s) {
if (!s.trim().isEmpty()) {
ORGAT6 = Byte.parseByte(s);
} else {
ORGAT6 = Byte.MIN_VALUE;
}
}

protected final void initORGAT7(String s) {
if (!s.trim().isEmpty()) {
ORGAT7 = Byte.parseByte(s);
} else {
ORGAT7 = Byte.MIN_VALUE;
}
}

protected final void initORGAT8(String s) {
if (!s.trim().isEmpty()) {
ORGAT8 = Byte.parseByte(s);
} else {
ORGAT8 = Byte.MIN_VALUE;
}
}

protected final void initORGAT9(String s) {
if (!s.trim().isEmpty()) {
ORGAT9 = Byte.parseByte(s);
} else {
ORGAT9 = Byte.MIN_VALUE;
}
}

protected final void initORGAT96(String s) {
if (!s.trim().isEmpty()) {
ORGAT96 = Byte.parseByte(s);
} else {
ORGAT96 = Byte.MIN_VALUE;
}
}

protected final void initORGM1(String s) {
if (!s.trim().isEmpty()) {
ORGM1 = Byte.parseByte(s);
} else {
ORGM1 = Byte.MIN_VALUE;
}
}

protected final void initORGM10(String s) {
if (!s.trim().isEmpty()) {
ORGM10 = Byte.parseByte(s);
} else {
ORGM10 = Byte.MIN_VALUE;
}
}

protected final void initORGM11(String s) {
if (!s.trim().isEmpty()) {
ORGM11 = Byte.parseByte(s);
} else {
ORGM11 = Byte.MIN_VALUE;
}
}

protected final void initORGM12(String s) {
if (!s.trim().isEmpty()) {
ORGM12 = Byte.parseByte(s);
} else {
ORGM12 = Byte.MIN_VALUE;
}
}

protected final void initORGM13(String s) {
if (!s.trim().isEmpty()) {
ORGM13 = Byte.parseByte(s);
} else {
ORGM13 = Byte.MIN_VALUE;
}
}

protected final void initORGM14(String s) {
if (!s.trim().isEmpty()) {
ORGM14 = Byte.parseByte(s);
} else {
ORGM14 = Byte.MIN_VALUE;
}
}

protected final void initORGM15(String s) {
if (!s.trim().isEmpty()) {
ORGM15 = Byte.parseByte(s);
} else {
ORGM15 = Byte.MIN_VALUE;
}
}

protected final void initORGM16(String s) {
if (!s.trim().isEmpty()) {
ORGM16 = Byte.parseByte(s);
} else {
ORGM16 = Byte.MIN_VALUE;
}
}

protected final void initORGM2(String s) {
if (!s.trim().isEmpty()) {
ORGM2 = Byte.parseByte(s);
} else {
ORGM2 = Byte.MIN_VALUE;
}
}

protected final void initORGM3(String s) {
if (!s.trim().isEmpty()) {
ORGM3 = Byte.parseByte(s);
} else {
ORGM3 = Byte.MIN_VALUE;
}
}

protected final void initORGM4(String s) {
if (!s.trim().isEmpty()) {
ORGM4 = Byte.parseByte(s);
} else {
ORGM4 = Byte.MIN_VALUE;
}
}

protected final void initORGM5(String s) {
if (!s.trim().isEmpty()) {
ORGM5 = Byte.parseByte(s);
} else {
ORGM5 = Byte.MIN_VALUE;
}
}

protected final void initORGM6(String s) {
if (!s.trim().isEmpty()) {
ORGM6 = Byte.parseByte(s);
} else {
ORGM6 = Byte.MIN_VALUE;
}
}

protected final void initORGM7(String s) {
if (!s.trim().isEmpty()) {
ORGM7 = Byte.parseByte(s);
} else {
ORGM7 = Byte.MIN_VALUE;
}
}

protected final void initORGM8(String s) {
if (!s.trim().isEmpty()) {
ORGM8 = Byte.parseByte(s);
} else {
ORGM8 = Byte.MIN_VALUE;
}
}

protected final void initORGM9(String s) {
if (!s.trim().isEmpty()) {
ORGM9 = Byte.parseByte(s);
} else {
ORGM9 = Byte.MIN_VALUE;
}
}

protected final void initORGM96(String s) {
if (!s.trim().isEmpty()) {
ORGM96 = Byte.parseByte(s);
} else {
ORGM96 = Byte.MIN_VALUE;
}
}

protected final void initORGMT1(String s) {
if (!s.trim().isEmpty()) {
ORGMT1 = Byte.parseByte(s);
} else {
ORGMT1 = Byte.MIN_VALUE;
}
}

protected final void initORGMT10(String s) {
if (!s.trim().isEmpty()) {
ORGMT10 = Byte.parseByte(s);
} else {
ORGMT10 = Byte.MIN_VALUE;
}
}

protected final void initORGMT11(String s) {
if (!s.trim().isEmpty()) {
ORGMT11 = Byte.parseByte(s);
} else {
ORGMT11 = Byte.MIN_VALUE;
}
}

protected final void initORGMT12(String s) {
if (!s.trim().isEmpty()) {
ORGMT12 = Byte.parseByte(s);
} else {
ORGMT12 = Byte.MIN_VALUE;
}
}

protected final void initORGMT13(String s) {
if (!s.trim().isEmpty()) {
ORGMT13 = Byte.parseByte(s);
} else {
ORGMT13 = Byte.MIN_VALUE;
}
}

protected final void initORGMT14(String s) {
if (!s.trim().isEmpty()) {
ORGMT14 = Byte.parseByte(s);
} else {
ORGMT14 = Byte.MIN_VALUE;
}
}

protected final void initORGMT15(String s) {
if (!s.trim().isEmpty()) {
ORGMT15 = Byte.parseByte(s);
} else {
ORGMT15 = Byte.MIN_VALUE;
}
}

protected final void initORGMT16(String s) {
if (!s.trim().isEmpty()) {
ORGMT16 = Byte.parseByte(s);
} else {
ORGMT16 = Byte.MIN_VALUE;
}
}

protected final void initORGMT2(String s) {
if (!s.trim().isEmpty()) {
ORGMT2 = Byte.parseByte(s);
} else {
ORGMT2 = Byte.MIN_VALUE;
}
}

protected final void initORGMT3(String s) {
if (!s.trim().isEmpty()) {
ORGMT3 = Byte.parseByte(s);
} else {
ORGMT3 = Byte.MIN_VALUE;
}
}

protected final void initORGMT4(String s) {
if (!s.trim().isEmpty()) {
ORGMT4 = Byte.parseByte(s);
} else {
ORGMT4 = Byte.MIN_VALUE;
}
}

protected final void initORGMT5(String s) {
if (!s.trim().isEmpty()) {
ORGMT5 = Byte.parseByte(s);
} else {
ORGMT5 = Byte.MIN_VALUE;
}
}

protected final void initORGMT6(String s) {
if (!s.trim().isEmpty()) {
ORGMT6 = Byte.parseByte(s);
} else {
ORGMT6 = Byte.MIN_VALUE;
}
}

protected final void initORGMT7(String s) {
if (!s.trim().isEmpty()) {
ORGMT7 = Byte.parseByte(s);
} else {
ORGMT7 = Byte.MIN_VALUE;
}
}

protected final void initORGMT8(String s) {
if (!s.trim().isEmpty()) {
ORGMT8 = Byte.parseByte(s);
} else {
ORGMT8 = Byte.MIN_VALUE;
}
}

protected final void initORGMT9(String s) {
if (!s.trim().isEmpty()) {
ORGMT9 = Byte.parseByte(s);
} else {
ORGMT9 = Byte.MIN_VALUE;
}
}

protected final void initORGMT96(String s) {
if (!s.trim().isEmpty()) {
ORGMT96 = Byte.parseByte(s);
} else {
ORGMT96 = Byte.MIN_VALUE;
}
}

protected final void initORIGADD(String s) {
if (!s.trim().isEmpty()) {
ORIGADD = Byte.parseByte(s);
} else {
ORIGADD = Byte.MIN_VALUE;
}
}

protected final void initOVTNSA(String s) {
if (!s.trim().isEmpty()) {
OVTNSA = Byte.parseByte(s);
} else {
OVTNSA = Byte.MIN_VALUE;
}
}

protected final void initOVTPAY(String s) {
if (!s.trim().isEmpty()) {
OVTPAY = Byte.parseByte(s);
} else {
OVTPAY = Byte.MIN_VALUE;
}
}

protected final void initOVTRATE(String s) {
if (!s.trim().isEmpty()) {
OVTRATE = Double.parseDouble(s);
} else {
OVTRATE = Double.NaN;
}
}

protected final void initOVTREST(String s) {
if (!s.trim().isEmpty()) {
OVTREST = Byte.parseByte(s);
} else {
OVTREST = Byte.MIN_VALUE;
}
}

protected final void initPAAGE(String s) {
if (!s.trim().isEmpty()) {
PAAGE = Byte.parseByte(s);
} else {
PAAGE = Byte.MIN_VALUE;
}
}

protected final void initPAAID1(String s) {
if (!s.trim().isEmpty()) {
PAAID1 = Byte.parseByte(s);
} else {
PAAID1 = Byte.MIN_VALUE;
}
}

protected final void initPAAID2(String s) {
if (!s.trim().isEmpty()) {
PAAID2 = Byte.parseByte(s);
} else {
PAAID2 = Byte.MIN_VALUE;
}
}

protected final void initPAAID3(String s) {
if (!s.trim().isEmpty()) {
PAAID3 = Byte.parseByte(s);
} else {
PAAID3 = Byte.MIN_VALUE;
}
}

protected final void initPAAID4(String s) {
if (!s.trim().isEmpty()) {
PAAID4 = Byte.parseByte(s);
} else {
PAAID4 = Byte.MIN_VALUE;
}
}

protected final void initPAAID5(String s) {
if (!s.trim().isEmpty()) {
PAAID5 = Byte.parseByte(s);
} else {
PAAID5 = Byte.MIN_VALUE;
}
}

protected final void initPAAID6(String s) {
if (!s.trim().isEmpty()) {
PAAID6 = Byte.parseByte(s);
} else {
PAAID6 = Byte.MIN_VALUE;
}
}

protected final void initPAAID7(String s) {
if (!s.trim().isEmpty()) {
PAAID7 = Byte.parseByte(s);
} else {
PAAID7 = Byte.MIN_VALUE;
}
}

protected final void initPAAID8(String s) {
if (!s.trim().isEmpty()) {
PAAID8 = Byte.parseByte(s);
} else {
PAAID8 = Byte.MIN_VALUE;
}
}

protected final void initPAAID96(String s) {
if (!s.trim().isEmpty()) {
PAAID96 = Byte.parseByte(s);
} else {
PAAID96 = Byte.MIN_VALUE;
}
}

protected final void initPAAID97(String s) {
if (!s.trim().isEmpty()) {
PAAID97 = Byte.parseByte(s);
} else {
PAAID97 = Byte.MIN_VALUE;
}
}

protected final void initPACOB(String s) {
if (!s.trim().isEmpty()) {
PACOB = Byte.parseByte(s);
} else {
PACOB = Byte.MIN_VALUE;
}
}

protected final void initPACON(String s) {
if (!s.trim().isEmpty()) {
PACON = Byte.parseByte(s);
} else {
PACON = Byte.MIN_VALUE;
}
}

protected final void initPAFAR(String s) {
if (!s.trim().isEmpty()) {
PAFAR = Byte.parseByte(s);
} else {
PAFAR = Byte.MIN_VALUE;
}
}

protected final void initPAIDU1(String s) {
if (!s.trim().isEmpty()) {
PAIDU1 = Byte.parseByte(s);
} else {
PAIDU1 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU2(String s) {
if (!s.trim().isEmpty()) {
PAIDU2 = Byte.parseByte(s);
} else {
PAIDU2 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU3(String s) {
if (!s.trim().isEmpty()) {
PAIDU3 = Byte.parseByte(s);
} else {
PAIDU3 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU4(String s) {
if (!s.trim().isEmpty()) {
PAIDU4 = Byte.parseByte(s);
} else {
PAIDU4 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU5(String s) {
if (!s.trim().isEmpty()) {
PAIDU5 = Byte.parseByte(s);
} else {
PAIDU5 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU6(String s) {
if (!s.trim().isEmpty()) {
PAIDU6 = Byte.parseByte(s);
} else {
PAIDU6 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU7(String s) {
if (!s.trim().isEmpty()) {
PAIDU7 = Byte.parseByte(s);
} else {
PAIDU7 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU8(String s) {
if (!s.trim().isEmpty()) {
PAIDU8 = Byte.parseByte(s);
} else {
PAIDU8 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU96(String s) {
if (!s.trim().isEmpty()) {
PAIDU96 = Byte.parseByte(s);
} else {
PAIDU96 = Byte.MIN_VALUE;
}
}

protected final void initPAIDU97(String s) {
if (!s.trim().isEmpty()) {
PAIDU97 = Byte.parseByte(s);
} else {
PAIDU97 = Byte.MIN_VALUE;
}
}

protected final void initPAJU(String s) {
if (!s.trim().isEmpty()) {
PAJU = Byte.parseByte(s);
} else {
PAJU = Byte.MIN_VALUE;
}
}

protected final void initPALONE(String s) {
if (!s.trim().isEmpty()) {
PALONE = Byte.parseByte(s);
} else {
PALONE = Byte.MIN_VALUE;
}
}

protected final void initPAMOSTCON(String s) {
if (!s.trim().isEmpty()) {
PAMOSTCON = Byte.parseByte(s);
} else {
PAMOSTCON = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC5_DV = Byte.parseByte(s);
} else {
PANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initPAPERM2(String s) {
if (!s.trim().isEmpty()) {
PAPERM2 = Short.parseShort(s);
} else {
PAPERM2 = Short.MIN_VALUE;
}
}

protected final void initPARCHILD(String s) {
if (!s.trim().isEmpty()) {
PARCHILD = Byte.parseByte(s);
} else {
PARCHILD = Byte.MIN_VALUE;
}
}

protected final void initPAREVE(String s) {
if (!s.trim().isEmpty()) {
PAREVE = Byte.parseByte(s);
} else {
PAREVE = Byte.MIN_VALUE;
}
}

protected final void initPARMAR(String s) {
if (!s.trim().isEmpty()) {
PARMAR = Byte.parseByte(s);
} else {
PARMAR = Byte.MIN_VALUE;
}
}

protected final void initPARSCH(String s) {
if (!s.trim().isEmpty()) {
PARSCH = Byte.parseByte(s);
} else {
PARSCH = Byte.MIN_VALUE;
}
}

protected final void initPASEE(String s) {
if (!s.trim().isEmpty()) {
PASEE = Byte.parseByte(s);
} else {
PASEE = Byte.MIN_VALUE;
}
}

protected final void initPASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC00_CC = Short.parseShort(s);
} else {
PASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC10_CC = Short.parseShort(s);
} else {
PASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC90_CC = Byte.parseByte(s);
} else {
PASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPAYGWC(String s) {
if (!s.trim().isEmpty()) {
PAYGWC = Byte.parseByte(s);
} else {
PAYGWC = Byte.MIN_VALUE;
}
}

protected final void initPAYG_DV(String s) {
if (!s.trim().isEmpty()) {
PAYG_DV = Double.parseDouble(s);
} else {
PAYG_DV = Double.NaN;
}
}

protected final void initPAYNWC(String s) {
if (!s.trim().isEmpty()) {
PAYNWC = Byte.parseByte(s);
} else {
PAYNWC = Byte.MIN_VALUE;
}
}

protected final void initPAYRUK(String s) {
if (!s.trim().isEmpty()) {
PAYRUK = Byte.parseByte(s);
} else {
PAYRUK = Byte.MIN_VALUE;
}
}

protected final void initPAYTYP(String s) {
if (!s.trim().isEmpty()) {
PAYTYP = Byte.parseByte(s);
} else {
PAYTYP = Byte.MIN_VALUE;
}
}

protected final void initPAYUWC(String s) {
if (!s.trim().isEmpty()) {
PAYUWC = Byte.parseByte(s);
} else {
PAYUWC = Byte.MIN_VALUE;
}
}

protected final void initPAYU_DV(String s) {
if (!s.trim().isEmpty()) {
PAYU_DV = Double.parseDouble(s);
} else {
PAYU_DV = Double.NaN;
}
}

protected final void initPBNFT1(String s) {
if (!s.trim().isEmpty()) {
PBNFT1 = Byte.parseByte(s);
} else {
PBNFT1 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT10(String s) {
if (!s.trim().isEmpty()) {
PBNFT10 = Byte.parseByte(s);
} else {
PBNFT10 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT11(String s) {
if (!s.trim().isEmpty()) {
PBNFT11 = Byte.parseByte(s);
} else {
PBNFT11 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT12(String s) {
if (!s.trim().isEmpty()) {
PBNFT12 = Byte.parseByte(s);
} else {
PBNFT12 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT2(String s) {
if (!s.trim().isEmpty()) {
PBNFT2 = Byte.parseByte(s);
} else {
PBNFT2 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT3(String s) {
if (!s.trim().isEmpty()) {
PBNFT3 = Byte.parseByte(s);
} else {
PBNFT3 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT4(String s) {
if (!s.trim().isEmpty()) {
PBNFT4 = Byte.parseByte(s);
} else {
PBNFT4 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT5(String s) {
if (!s.trim().isEmpty()) {
PBNFT5 = Byte.parseByte(s);
} else {
PBNFT5 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT6(String s) {
if (!s.trim().isEmpty()) {
PBNFT6 = Byte.parseByte(s);
} else {
PBNFT6 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT7(String s) {
if (!s.trim().isEmpty()) {
PBNFT7 = Byte.parseByte(s);
} else {
PBNFT7 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT8(String s) {
if (!s.trim().isEmpty()) {
PBNFT8 = Byte.parseByte(s);
} else {
PBNFT8 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT9(String s) {
if (!s.trim().isEmpty()) {
PBNFT9 = Byte.parseByte(s);
} else {
PBNFT9 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT96(String s) {
if (!s.trim().isEmpty()) {
PBNFT96 = Byte.parseByte(s);
} else {
PBNFT96 = Byte.MIN_VALUE;
}
}

protected final void initPENMEX(String s) {
if (!s.trim().isEmpty()) {
PENMEX = Byte.parseByte(s);
} else {
PENMEX = Byte.MIN_VALUE;
}
}

protected final void initPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
PENSIONER_DV = Byte.parseByte(s);
} else {
PENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initPERBFTS(String s) {
if (!s.trim().isEmpty()) {
PERBFTS = Byte.parseByte(s);
} else {
PERBFTS = Byte.MIN_VALUE;
}
}

protected final void initPERPOLINF(String s) {
if (!s.trim().isEmpty()) {
PERPOLINF = Byte.parseByte(s);
} else {
PERPOLINF = Byte.MIN_VALUE;
}
}

protected final void initPID(String s) {
if (!s.trim().isEmpty()) {
PID = Integer.parseInt(s);
} else {
PID = Integer.MIN_VALUE;
}
}

protected final void initPJBPTFT(String s) {
if (!s.trim().isEmpty()) {
PJBPTFT = Byte.parseByte(s);
} else {
PJBPTFT = Byte.MIN_VALUE;
}
}

protected final void initPJSPTFT(String s) {
if (!s.trim().isEmpty()) {
PJSPTFT = Byte.parseByte(s);
} else {
PJSPTFT = Byte.MIN_VALUE;
}
}

protected final void initPLIVPAR(String s) {
if (!s.trim().isEmpty()) {
PLIVPAR = Byte.parseByte(s);
} else {
PLIVPAR = Byte.MIN_VALUE;
}
}

protected final void initPLNOWM(String s) {
if (!s.trim().isEmpty()) {
PLNOWM = Short.parseShort(s);
} else {
PLNOWM = Short.MIN_VALUE;
}
}

protected final void initPLNOWY4(String s) {
if (!s.trim().isEmpty()) {
PLNOWY4 = Short.parseShort(s);
} else {
PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initPN1PID(String s) {
if (!s.trim().isEmpty()) {
PN1PID = Integer.parseInt(s);
} else {
PN1PID = Integer.MIN_VALUE;
}
}

protected final void initPN1PNO(String s) {
if (!s.trim().isEmpty()) {
PN1PNO = Byte.parseByte(s);
} else {
PN1PNO = Byte.MIN_VALUE;
}
}

protected final void initPN1SEX(String s) {
if (!s.trim().isEmpty()) {
PN1SEX = Byte.parseByte(s);
} else {
PN1SEX = Byte.MIN_VALUE;
}
}

protected final void initPN2PID(String s) {
if (!s.trim().isEmpty()) {
PN2PID = Integer.parseInt(s);
} else {
PN2PID = Integer.MIN_VALUE;
}
}

protected final void initPN2PNO(String s) {
if (!s.trim().isEmpty()) {
PN2PNO = Byte.parseByte(s);
} else {
PN2PNO = Byte.MIN_VALUE;
}
}

protected final void initPN2SEX(String s) {
if (!s.trim().isEmpty()) {
PN2SEX = Byte.parseByte(s);
} else {
PN2SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS1PID(String s) {
if (!s.trim().isEmpty()) {
PNS1PID = Integer.parseInt(s);
} else {
PNS1PID = Integer.MIN_VALUE;
}
}

protected final void initPNS1PNO(String s) {
if (!s.trim().isEmpty()) {
PNS1PNO = Byte.parseByte(s);
} else {
PNS1PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS1SEX(String s) {
if (!s.trim().isEmpty()) {
PNS1SEX = Byte.parseByte(s);
} else {
PNS1SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS2PID(String s) {
if (!s.trim().isEmpty()) {
PNS2PID = Integer.parseInt(s);
} else {
PNS2PID = Integer.MIN_VALUE;
}
}

protected final void initPNS2PNO(String s) {
if (!s.trim().isEmpty()) {
PNS2PNO = Byte.parseByte(s);
} else {
PNS2PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS2SEX(String s) {
if (!s.trim().isEmpty()) {
PNS2SEX = Byte.parseByte(s);
} else {
PNS2SEX = Byte.MIN_VALUE;
}
}

protected final void initPOLCOST(String s) {
if (!s.trim().isEmpty()) {
POLCOST = Byte.parseByte(s);
} else {
POLCOST = Byte.MIN_VALUE;
}
}

protected final void initPOLEFF1(String s) {
if (!s.trim().isEmpty()) {
POLEFF1 = Byte.parseByte(s);
} else {
POLEFF1 = Byte.MIN_VALUE;
}
}

protected final void initPOLEFF2(String s) {
if (!s.trim().isEmpty()) {
POLEFF2 = Byte.parseByte(s);
} else {
POLEFF2 = Byte.MIN_VALUE;
}
}

protected final void initPOLEFF3(String s) {
if (!s.trim().isEmpty()) {
POLEFF3 = Byte.parseByte(s);
} else {
POLEFF3 = Byte.MIN_VALUE;
}
}

protected final void initPOLEFF4(String s) {
if (!s.trim().isEmpty()) {
POLEFF4 = Byte.parseByte(s);
} else {
POLEFF4 = Byte.MIN_VALUE;
}
}

protected final void initPPID(String s) {
if (!s.trim().isEmpty()) {
PPID = Integer.parseInt(s);
} else {
PPID = Integer.MIN_VALUE;
}
}

protected final void initPPPEX(String s) {
if (!s.trim().isEmpty()) {
PPPEX = Byte.parseByte(s);
} else {
PPPEX = Byte.MIN_VALUE;
}
}

protected final void initPPPEXM(String s) {
if (!s.trim().isEmpty()) {
PPPEXM = Byte.parseByte(s);
} else {
PPPEXM = Byte.MIN_VALUE;
}
}

protected final void initPPSEX(String s) {
if (!s.trim().isEmpty()) {
PPSEX = Byte.parseByte(s);
} else {
PPSEX = Byte.MIN_VALUE;
}
}

protected final void initPRAISEKID(String s) {
if (!s.trim().isEmpty()) {
PRAISEKID = Byte.parseByte(s);
} else {
PRAISEKID = Byte.MIN_VALUE;
}
}

protected final void initPREARN(String s) {
if (!s.trim().isEmpty()) {
PREARN = Byte.parseByte(s);
} else {
PREARN = Byte.MIN_VALUE;
}
}

protected final void initPREARNA(String s) {
if (!s.trim().isEmpty()) {
PREARNA = Byte.parseByte(s);
} else {
PREARNA = Byte.MIN_VALUE;
}
}

protected final void initPREARNW(String s) {
if (!s.trim().isEmpty()) {
PREARNW = Byte.parseByte(s);
} else {
PREARNW = Byte.MIN_VALUE;
}
}

protected final void initPREASON(String s) {
if (!s.trim().isEmpty()) {
PREASON = Byte.parseByte(s);
} else {
PREASON = Byte.MIN_VALUE;
}
}

protected final void initPRECOG(String s) {
if (!s.trim().isEmpty()) {
PRECOG = Byte.parseByte(s);
} else {
PRECOG = Byte.MIN_VALUE;
}
}

protected final void initPREG(String s) {
if (!s.trim().isEmpty()) {
PREG = Byte.parseByte(s);
} else {
PREG = Byte.MIN_VALUE;
}
}

protected final void initPREGEND1(String s) {
if (!s.trim().isEmpty()) {
PREGEND1 = Byte.parseByte(s);
} else {
PREGEND1 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND2(String s) {
if (!s.trim().isEmpty()) {
PREGEND2 = Byte.parseByte(s);
} else {
PREGEND2 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND3(String s) {
if (!s.trim().isEmpty()) {
PREGEND3 = Byte.parseByte(s);
} else {
PREGEND3 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT1(String s) {
if (!s.trim().isEmpty()) {
PREGFERT1 = Byte.parseByte(s);
} else {
PREGFERT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT2(String s) {
if (!s.trim().isEmpty()) {
PREGFERT2 = Byte.parseByte(s);
} else {
PREGFERT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT3(String s) {
if (!s.trim().isEmpty()) {
PREGFERT3 = Byte.parseByte(s);
} else {
PREGFERT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGM1(String s) {
if (!s.trim().isEmpty()) {
PREGM1 = Byte.parseByte(s);
} else {
PREGM1 = Byte.MIN_VALUE;
}
}

protected final void initPREGM2(String s) {
if (!s.trim().isEmpty()) {
PREGM2 = Byte.parseByte(s);
} else {
PREGM2 = Byte.MIN_VALUE;
}
}

protected final void initPREGM3(String s) {
if (!s.trim().isEmpty()) {
PREGM3 = Byte.parseByte(s);
} else {
PREGM3 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT1(String s) {
if (!s.trim().isEmpty()) {
PREGOUT1 = Byte.parseByte(s);
} else {
PREGOUT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT2(String s) {
if (!s.trim().isEmpty()) {
PREGOUT2 = Byte.parseByte(s);
} else {
PREGOUT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT3(String s) {
if (!s.trim().isEmpty()) {
PREGOUT3 = Byte.parseByte(s);
} else {
PREGOUT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK11(String s) {
if (!s.trim().isEmpty()) {
PREGSMK11 = Byte.parseByte(s);
} else {
PREGSMK11 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK12(String s) {
if (!s.trim().isEmpty()) {
PREGSMK12 = Byte.parseByte(s);
} else {
PREGSMK12 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK13(String s) {
if (!s.trim().isEmpty()) {
PREGSMK13 = Byte.parseByte(s);
} else {
PREGSMK13 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK21(String s) {
if (!s.trim().isEmpty()) {
PREGSMK21 = Byte.parseByte(s);
} else {
PREGSMK21 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK22(String s) {
if (!s.trim().isEmpty()) {
PREGSMK22 = Byte.parseByte(s);
} else {
PREGSMK22 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK23(String s) {
if (!s.trim().isEmpty()) {
PREGSMK23 = Byte.parseByte(s);
} else {
PREGSMK23 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK31(String s) {
if (!s.trim().isEmpty()) {
PREGSMK31 = Byte.parseByte(s);
} else {
PREGSMK31 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK32(String s) {
if (!s.trim().isEmpty()) {
PREGSMK32 = Byte.parseByte(s);
} else {
PREGSMK32 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK33(String s) {
if (!s.trim().isEmpty()) {
PREGSMK33 = Byte.parseByte(s);
} else {
PREGSMK33 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE1(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE1 = Byte.parseByte(s);
} else {
PREGSMOKE1 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE2(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE2 = Byte.parseByte(s);
} else {
PREGSMOKE2 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE3(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE3 = Byte.parseByte(s);
} else {
PREGSMOKE3 = Byte.MIN_VALUE;
}
}

protected final void initPREGY41(String s) {
if (!s.trim().isEmpty()) {
PREGY41 = Short.parseShort(s);
} else {
PREGY41 = Short.MIN_VALUE;
}
}

protected final void initPREGY42(String s) {
if (!s.trim().isEmpty()) {
PREGY42 = Short.parseShort(s);
} else {
PREGY42 = Short.MIN_VALUE;
}
}

protected final void initPREGY43(String s) {
if (!s.trim().isEmpty()) {
PREGY43 = Short.parseShort(s);
} else {
PREGY43 = Short.MIN_VALUE;
}
}

protected final void initPREL(String s) {
if (!s.trim().isEmpty()) {
PREL = Byte.parseByte(s);
} else {
PREL = Byte.MIN_VALUE;
}
}

protected final void initPRFITB(String s) {
if (!s.trim().isEmpty()) {
PRFITB = Byte.parseByte(s);
} else {
PRFITB = Byte.MIN_VALUE;
}
}

protected final void initPRFITBA(String s) {
if (!s.trim().isEmpty()) {
PRFITBA = Byte.parseByte(s);
} else {
PRFITBA = Byte.MIN_VALUE;
}
}

protected final void initPRFITBW(String s) {
if (!s.trim().isEmpty()) {
PRFITBW = Byte.parseByte(s);
} else {
PRFITBW = Byte.MIN_VALUE;
}
}

protected final void initPROMODENY(String s) {
if (!s.trim().isEmpty()) {
PROMODENY = Byte.parseByte(s);
} else {
PROMODENY = Byte.MIN_VALUE;
}
}

protected final void initPS1(String s) {
if (!s.trim().isEmpty()) {
PS1 = Byte.parseByte(s);
} else {
PS1 = Byte.MIN_VALUE;
}
}

protected final void initPS10(String s) {
if (!s.trim().isEmpty()) {
PS10 = Byte.parseByte(s);
} else {
PS10 = Byte.MIN_VALUE;
}
}

protected final void initPS11(String s) {
if (!s.trim().isEmpty()) {
PS11 = Byte.parseByte(s);
} else {
PS11 = Byte.MIN_VALUE;
}
}

protected final void initPS12(String s) {
if (!s.trim().isEmpty()) {
PS12 = Byte.parseByte(s);
} else {
PS12 = Byte.MIN_VALUE;
}
}

protected final void initPS13(String s) {
if (!s.trim().isEmpty()) {
PS13 = Byte.parseByte(s);
} else {
PS13 = Byte.MIN_VALUE;
}
}

protected final void initPS14(String s) {
if (!s.trim().isEmpty()) {
PS14 = Byte.parseByte(s);
} else {
PS14 = Byte.MIN_VALUE;
}
}

protected final void initPS15(String s) {
if (!s.trim().isEmpty()) {
PS15 = Byte.parseByte(s);
} else {
PS15 = Byte.MIN_VALUE;
}
}

protected final void initPS16(String s) {
if (!s.trim().isEmpty()) {
PS16 = Byte.parseByte(s);
} else {
PS16 = Byte.MIN_VALUE;
}
}

protected final void initPS17(String s) {
if (!s.trim().isEmpty()) {
PS17 = Byte.parseByte(s);
} else {
PS17 = Byte.MIN_VALUE;
}
}

protected final void initPS18(String s) {
if (!s.trim().isEmpty()) {
PS18 = Byte.parseByte(s);
} else {
PS18 = Byte.MIN_VALUE;
}
}

protected final void initPS19(String s) {
if (!s.trim().isEmpty()) {
PS19 = Byte.parseByte(s);
} else {
PS19 = Byte.MIN_VALUE;
}
}

protected final void initPS2(String s) {
if (!s.trim().isEmpty()) {
PS2 = Byte.parseByte(s);
} else {
PS2 = Byte.MIN_VALUE;
}
}

protected final void initPS20(String s) {
if (!s.trim().isEmpty()) {
PS20 = Byte.parseByte(s);
} else {
PS20 = Byte.MIN_VALUE;
}
}

protected final void initPS21(String s) {
if (!s.trim().isEmpty()) {
PS21 = Byte.parseByte(s);
} else {
PS21 = Byte.MIN_VALUE;
}
}

protected final void initPS22(String s) {
if (!s.trim().isEmpty()) {
PS22 = Byte.parseByte(s);
} else {
PS22 = Byte.MIN_VALUE;
}
}

protected final void initPS23(String s) {
if (!s.trim().isEmpty()) {
PS23 = Byte.parseByte(s);
} else {
PS23 = Byte.MIN_VALUE;
}
}

protected final void initPS24(String s) {
if (!s.trim().isEmpty()) {
PS24 = Byte.parseByte(s);
} else {
PS24 = Byte.MIN_VALUE;
}
}

protected final void initPS25(String s) {
if (!s.trim().isEmpty()) {
PS25 = Byte.parseByte(s);
} else {
PS25 = Byte.MIN_VALUE;
}
}

protected final void initPS26(String s) {
if (!s.trim().isEmpty()) {
PS26 = Byte.parseByte(s);
} else {
PS26 = Byte.MIN_VALUE;
}
}

protected final void initPS27(String s) {
if (!s.trim().isEmpty()) {
PS27 = Byte.parseByte(s);
} else {
PS27 = Byte.MIN_VALUE;
}
}

protected final void initPS28(String s) {
if (!s.trim().isEmpty()) {
PS28 = Byte.parseByte(s);
} else {
PS28 = Byte.MIN_VALUE;
}
}

protected final void initPS29(String s) {
if (!s.trim().isEmpty()) {
PS29 = Byte.parseByte(s);
} else {
PS29 = Byte.MIN_VALUE;
}
}

protected final void initPS3(String s) {
if (!s.trim().isEmpty()) {
PS3 = Byte.parseByte(s);
} else {
PS3 = Byte.MIN_VALUE;
}
}

protected final void initPS30(String s) {
if (!s.trim().isEmpty()) {
PS30 = Byte.parseByte(s);
} else {
PS30 = Byte.MIN_VALUE;
}
}

protected final void initPS31(String s) {
if (!s.trim().isEmpty()) {
PS31 = Byte.parseByte(s);
} else {
PS31 = Byte.MIN_VALUE;
}
}

protected final void initPS32(String s) {
if (!s.trim().isEmpty()) {
PS32 = Byte.parseByte(s);
} else {
PS32 = Byte.MIN_VALUE;
}
}

protected final void initPS4(String s) {
if (!s.trim().isEmpty()) {
PS4 = Byte.parseByte(s);
} else {
PS4 = Byte.MIN_VALUE;
}
}

protected final void initPS5(String s) {
if (!s.trim().isEmpty()) {
PS5 = Byte.parseByte(s);
} else {
PS5 = Byte.MIN_VALUE;
}
}

protected final void initPS6(String s) {
if (!s.trim().isEmpty()) {
PS6 = Byte.parseByte(s);
} else {
PS6 = Byte.MIN_VALUE;
}
}

protected final void initPS7(String s) {
if (!s.trim().isEmpty()) {
PS7 = Byte.parseByte(s);
} else {
PS7 = Byte.MIN_VALUE;
}
}

protected final void initPS8(String s) {
if (!s.trim().isEmpty()) {
PS8 = Byte.parseByte(s);
} else {
PS8 = Byte.MIN_VALUE;
}
}

protected final void initPS9(String s) {
if (!s.trim().isEmpty()) {
PS9 = Byte.parseByte(s);
} else {
PS9 = Byte.MIN_VALUE;
}
}

protected final void initPSDQA_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQA_DV = Byte.parseByte(s);
} else {
PSDQA_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQB_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQB_DV = Byte.parseByte(s);
} else {
PSDQB_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQDV(String s) {
if (!s.trim().isEmpty()) {
PSDQDV = Byte.parseByte(s);
} else {
PSDQDV = Byte.MIN_VALUE;
}
}

protected final void initPSIBLINGS(String s) {
if (!s.trim().isEmpty()) {
PSIBLINGS = Byte.parseByte(s);
} else {
PSIBLINGS = Byte.MIN_VALUE;
}
}

protected final void initPSNUMCH(String s) {
if (!s.trim().isEmpty()) {
PSNUMCH = Byte.parseByte(s);
} else {
PSNUMCH = Byte.MIN_VALUE;
}
}

protected final void initPSU(String s) {
if (!s.trim().isEmpty()) {
PSU = Integer.parseInt(s);
} else {
PSU = Integer.MIN_VALUE;
}
}

protected final void initPYENRL(String s) {
if (!s.trim().isEmpty()) {
PYENRL = Byte.parseByte(s);
} else {
PYENRL = Byte.MIN_VALUE;
}
}

protected final void initQFHIGH(String s) {
if (!s.trim().isEmpty()) {
QFHIGH = Byte.parseByte(s);
} else {
QFHIGH = Byte.MIN_VALUE;
}
}

protected final void initQFHIGHFL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
QFHIGHFL_DV = false;
} else {
QFHIGHFL_DV = true;
}
}
}

protected final void initQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
QFHIGH_DV = Byte.parseByte(s);
} else {
QFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initQFVOC1(String s) {
if (!s.trim().isEmpty()) {
QFVOC1 = Byte.parseByte(s);
} else {
QFVOC1 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC10(String s) {
if (!s.trim().isEmpty()) {
QFVOC10 = Byte.parseByte(s);
} else {
QFVOC10 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC11(String s) {
if (!s.trim().isEmpty()) {
QFVOC11 = Byte.parseByte(s);
} else {
QFVOC11 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC12(String s) {
if (!s.trim().isEmpty()) {
QFVOC12 = Byte.parseByte(s);
} else {
QFVOC12 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC13(String s) {
if (!s.trim().isEmpty()) {
QFVOC13 = Byte.parseByte(s);
} else {
QFVOC13 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC14(String s) {
if (!s.trim().isEmpty()) {
QFVOC14 = Byte.parseByte(s);
} else {
QFVOC14 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC15(String s) {
if (!s.trim().isEmpty()) {
QFVOC15 = Byte.parseByte(s);
} else {
QFVOC15 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC2(String s) {
if (!s.trim().isEmpty()) {
QFVOC2 = Byte.parseByte(s);
} else {
QFVOC2 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC3(String s) {
if (!s.trim().isEmpty()) {
QFVOC3 = Byte.parseByte(s);
} else {
QFVOC3 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC4(String s) {
if (!s.trim().isEmpty()) {
QFVOC4 = Byte.parseByte(s);
} else {
QFVOC4 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC5(String s) {
if (!s.trim().isEmpty()) {
QFVOC5 = Byte.parseByte(s);
} else {
QFVOC5 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC6(String s) {
if (!s.trim().isEmpty()) {
QFVOC6 = Byte.parseByte(s);
} else {
QFVOC6 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC7(String s) {
if (!s.trim().isEmpty()) {
QFVOC7 = Byte.parseByte(s);
} else {
QFVOC7 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC8(String s) {
if (!s.trim().isEmpty()) {
QFVOC8 = Byte.parseByte(s);
} else {
QFVOC8 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC9(String s) {
if (!s.trim().isEmpty()) {
QFVOC9 = Byte.parseByte(s);
} else {
QFVOC9 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC96(String s) {
if (!s.trim().isEmpty()) {
QFVOC96 = Byte.parseByte(s);
} else {
QFVOC96 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW1(String s) {
if (!s.trim().isEmpty()) {
QUALNEW1 = Byte.parseByte(s);
} else {
QUALNEW1 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW10(String s) {
if (!s.trim().isEmpty()) {
QUALNEW10 = Byte.parseByte(s);
} else {
QUALNEW10 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW11(String s) {
if (!s.trim().isEmpty()) {
QUALNEW11 = Byte.parseByte(s);
} else {
QUALNEW11 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW13(String s) {
if (!s.trim().isEmpty()) {
QUALNEW13 = Byte.parseByte(s);
} else {
QUALNEW13 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW15(String s) {
if (!s.trim().isEmpty()) {
QUALNEW15 = Byte.parseByte(s);
} else {
QUALNEW15 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW16(String s) {
if (!s.trim().isEmpty()) {
QUALNEW16 = Byte.parseByte(s);
} else {
QUALNEW16 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW17(String s) {
if (!s.trim().isEmpty()) {
QUALNEW17 = Byte.parseByte(s);
} else {
QUALNEW17 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW18(String s) {
if (!s.trim().isEmpty()) {
QUALNEW18 = Byte.parseByte(s);
} else {
QUALNEW18 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW19(String s) {
if (!s.trim().isEmpty()) {
QUALNEW19 = Byte.parseByte(s);
} else {
QUALNEW19 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW2(String s) {
if (!s.trim().isEmpty()) {
QUALNEW2 = Byte.parseByte(s);
} else {
QUALNEW2 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW20(String s) {
if (!s.trim().isEmpty()) {
QUALNEW20 = Byte.parseByte(s);
} else {
QUALNEW20 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW21(String s) {
if (!s.trim().isEmpty()) {
QUALNEW21 = Byte.parseByte(s);
} else {
QUALNEW21 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW22(String s) {
if (!s.trim().isEmpty()) {
QUALNEW22 = Byte.parseByte(s);
} else {
QUALNEW22 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW23(String s) {
if (!s.trim().isEmpty()) {
QUALNEW23 = Byte.parseByte(s);
} else {
QUALNEW23 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW24(String s) {
if (!s.trim().isEmpty()) {
QUALNEW24 = Byte.parseByte(s);
} else {
QUALNEW24 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW25(String s) {
if (!s.trim().isEmpty()) {
QUALNEW25 = Byte.parseByte(s);
} else {
QUALNEW25 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW26(String s) {
if (!s.trim().isEmpty()) {
QUALNEW26 = Byte.parseByte(s);
} else {
QUALNEW26 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW27(String s) {
if (!s.trim().isEmpty()) {
QUALNEW27 = Byte.parseByte(s);
} else {
QUALNEW27 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW28(String s) {
if (!s.trim().isEmpty()) {
QUALNEW28 = Byte.parseByte(s);
} else {
QUALNEW28 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW29(String s) {
if (!s.trim().isEmpty()) {
QUALNEW29 = Byte.parseByte(s);
} else {
QUALNEW29 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW3(String s) {
if (!s.trim().isEmpty()) {
QUALNEW3 = Byte.parseByte(s);
} else {
QUALNEW3 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW30(String s) {
if (!s.trim().isEmpty()) {
QUALNEW30 = Byte.parseByte(s);
} else {
QUALNEW30 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW31(String s) {
if (!s.trim().isEmpty()) {
QUALNEW31 = Byte.parseByte(s);
} else {
QUALNEW31 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW4(String s) {
if (!s.trim().isEmpty()) {
QUALNEW4 = Byte.parseByte(s);
} else {
QUALNEW4 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW5(String s) {
if (!s.trim().isEmpty()) {
QUALNEW5 = Byte.parseByte(s);
} else {
QUALNEW5 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW6(String s) {
if (!s.trim().isEmpty()) {
QUALNEW6 = Byte.parseByte(s);
} else {
QUALNEW6 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW7(String s) {
if (!s.trim().isEmpty()) {
QUALNEW7 = Byte.parseByte(s);
} else {
QUALNEW7 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW8(String s) {
if (!s.trim().isEmpty()) {
QUALNEW8 = Byte.parseByte(s);
} else {
QUALNEW8 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW9(String s) {
if (!s.trim().isEmpty()) {
QUALNEW9 = Byte.parseByte(s);
} else {
QUALNEW9 = Byte.MIN_VALUE;
}
}

protected final void initQUALOC(String s) {
if (!s.trim().isEmpty()) {
QUALOC = Byte.parseByte(s);
} else {
QUALOC = Byte.MIN_VALUE;
}
}

protected final void initQUARREL(String s) {
if (!s.trim().isEmpty()) {
QUARREL = Byte.parseByte(s);
} else {
QUARREL = Byte.MIN_VALUE;
}
}

protected final void initRACEL(String s) {
if (!s.trim().isEmpty()) {
RACEL = Byte.parseByte(s);
} else {
RACEL = Byte.MIN_VALUE;
}
}

protected final void initRACELAT(String s) {
if (!s.trim().isEmpty()) {
RACELAT = Byte.parseByte(s);
} else {
RACELAT = Byte.MIN_VALUE;
}
}

protected final void initRACELBT(String s) {
if (!s.trim().isEmpty()) {
RACELBT = Byte.parseByte(s);
} else {
RACELBT = Byte.MIN_VALUE;
}
}

protected final void initRACELMT(String s) {
if (!s.trim().isEmpty()) {
RACELMT = Byte.parseByte(s);
} else {
RACELMT = Byte.MIN_VALUE;
}
}

protected final void initRACELOT_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELOT_CODE = Byte.parseByte(s);
} else {
RACELOT_CODE = Byte.MIN_VALUE;
}
}

protected final void initRACELO_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELO_CODE = Short.parseShort(s);
} else {
RACELO_CODE = Short.MIN_VALUE;
}
}

protected final void initRACELT(String s) {
if (!s.trim().isEmpty()) {
RACELT = Byte.parseByte(s);
} else {
RACELT = Byte.MIN_VALUE;
}
}

protected final void initRACELWT(String s) {
if (!s.trim().isEmpty()) {
RACELWT = Byte.parseByte(s);
} else {
RACELWT = Byte.MIN_VALUE;
}
}

protected final void initRACEL_DV(String s) {
if (!s.trim().isEmpty()) {
RACEL_DV = Byte.parseByte(s);
} else {
RACEL_DV = Byte.MIN_VALUE;
}
}

protected final void initREADTEST(String s) {
if (!s.trim().isEmpty()) {
READTEST = Byte.parseByte(s);
} else {
READTEST = Byte.MIN_VALUE;
}
}

protected final void initREASEND1(String s) {
if (!s.trim().isEmpty()) {
REASEND1 = Byte.parseByte(s);
} else {
REASEND1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2(String s) {
if (!s.trim().isEmpty()) {
REASEND2 = Byte.parseByte(s);
} else {
REASEND2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3(String s) {
if (!s.trim().isEmpty()) {
REASEND3 = Byte.parseByte(s);
} else {
REASEND3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4(String s) {
if (!s.trim().isEmpty()) {
REASEND4 = Byte.parseByte(s);
} else {
REASEND4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5(String s) {
if (!s.trim().isEmpty()) {
REASEND5 = Byte.parseByte(s);
} else {
REASEND5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6(String s) {
if (!s.trim().isEmpty()) {
REASEND6 = Byte.parseByte(s);
} else {
REASEND6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7(String s) {
if (!s.trim().isEmpty()) {
REASEND7 = Byte.parseByte(s);
} else {
REASEND7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
REASEND8 = false;
} else {
REASEND8 = true;
}
}
}

protected final void initREASEND9(String s) {
if (!s.trim().isEmpty()) {
REASEND9 = Byte.parseByte(s);
} else {
REASEND9 = Byte.MIN_VALUE;
}
}

protected final void initRELKID(String s) {
if (!s.trim().isEmpty()) {
RELKID = Byte.parseByte(s);
} else {
RELKID = Byte.MIN_VALUE;
}
}

protected final void initRELUP(String s) {
if (!s.trim().isEmpty()) {
RELUP = Byte.parseByte(s);
} else {
RELUP = Byte.MIN_VALUE;
}
}

protected final void initREMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
REMAIL_CODE = Byte.parseByte(s);
} else {
REMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_1 = Byte.parseByte(s);
} else {
RESATTACKED1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_10 = Byte.parseByte(s);
} else {
RESATTACKED1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_11 = Byte.parseByte(s);
} else {
RESATTACKED1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_12 = Byte.parseByte(s);
} else {
RESATTACKED1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_2 = Byte.parseByte(s);
} else {
RESATTACKED1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_3 = Byte.parseByte(s);
} else {
RESATTACKED1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_4 = Byte.parseByte(s);
} else {
RESATTACKED1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_5 = Byte.parseByte(s);
} else {
RESATTACKED1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_6 = Byte.parseByte(s);
} else {
RESATTACKED1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_7 = Byte.parseByte(s);
} else {
RESATTACKED1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_8 = Byte.parseByte(s);
} else {
RESATTACKED1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED1_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED1_9 = Byte.parseByte(s);
} else {
RESATTACKED1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_1 = Byte.parseByte(s);
} else {
RESATTACKED2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_10 = Byte.parseByte(s);
} else {
RESATTACKED2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_11 = Byte.parseByte(s);
} else {
RESATTACKED2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_12 = Byte.parseByte(s);
} else {
RESATTACKED2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_2 = Byte.parseByte(s);
} else {
RESATTACKED2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_3 = Byte.parseByte(s);
} else {
RESATTACKED2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_4 = Byte.parseByte(s);
} else {
RESATTACKED2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_5 = Byte.parseByte(s);
} else {
RESATTACKED2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_6 = Byte.parseByte(s);
} else {
RESATTACKED2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_7 = Byte.parseByte(s);
} else {
RESATTACKED2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_8 = Byte.parseByte(s);
} else {
RESATTACKED2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED2_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED2_9 = Byte.parseByte(s);
} else {
RESATTACKED2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_1 = Byte.parseByte(s);
} else {
RESATTACKED3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_10 = Byte.parseByte(s);
} else {
RESATTACKED3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_11 = Byte.parseByte(s);
} else {
RESATTACKED3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_12 = Byte.parseByte(s);
} else {
RESATTACKED3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_2 = Byte.parseByte(s);
} else {
RESATTACKED3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_3 = Byte.parseByte(s);
} else {
RESATTACKED3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_4 = Byte.parseByte(s);
} else {
RESATTACKED3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_5 = Byte.parseByte(s);
} else {
RESATTACKED3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_6 = Byte.parseByte(s);
} else {
RESATTACKED3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_7 = Byte.parseByte(s);
} else {
RESATTACKED3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_8 = Byte.parseByte(s);
} else {
RESATTACKED3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED3_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED3_9 = Byte.parseByte(s);
} else {
RESATTACKED3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_1 = Byte.parseByte(s);
} else {
RESATTACKED4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_10 = Byte.parseByte(s);
} else {
RESATTACKED4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_11 = Byte.parseByte(s);
} else {
RESATTACKED4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_12 = Byte.parseByte(s);
} else {
RESATTACKED4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_2 = Byte.parseByte(s);
} else {
RESATTACKED4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_3 = Byte.parseByte(s);
} else {
RESATTACKED4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_4 = Byte.parseByte(s);
} else {
RESATTACKED4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_5 = Byte.parseByte(s);
} else {
RESATTACKED4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_6 = Byte.parseByte(s);
} else {
RESATTACKED4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_7 = Byte.parseByte(s);
} else {
RESATTACKED4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_8 = Byte.parseByte(s);
} else {
RESATTACKED4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED4_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED4_9 = Byte.parseByte(s);
} else {
RESATTACKED4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_1 = Byte.parseByte(s);
} else {
RESATTACKED5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_10 = Byte.parseByte(s);
} else {
RESATTACKED5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_11 = Byte.parseByte(s);
} else {
RESATTACKED5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_12 = Byte.parseByte(s);
} else {
RESATTACKED5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_2 = Byte.parseByte(s);
} else {
RESATTACKED5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_3 = Byte.parseByte(s);
} else {
RESATTACKED5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_4 = Byte.parseByte(s);
} else {
RESATTACKED5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_5 = Byte.parseByte(s);
} else {
RESATTACKED5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_6 = Byte.parseByte(s);
} else {
RESATTACKED5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_7 = Byte.parseByte(s);
} else {
RESATTACKED5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_8 = Byte.parseByte(s);
} else {
RESATTACKED5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED5_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED5_9 = Byte.parseByte(s);
} else {
RESATTACKED5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_1 = Byte.parseByte(s);
} else {
RESATTACKED6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_10 = Byte.parseByte(s);
} else {
RESATTACKED6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_11 = Byte.parseByte(s);
} else {
RESATTACKED6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_12 = Byte.parseByte(s);
} else {
RESATTACKED6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_2 = Byte.parseByte(s);
} else {
RESATTACKED6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_3 = Byte.parseByte(s);
} else {
RESATTACKED6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_4 = Byte.parseByte(s);
} else {
RESATTACKED6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_5 = Byte.parseByte(s);
} else {
RESATTACKED6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_6 = Byte.parseByte(s);
} else {
RESATTACKED6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_7 = Byte.parseByte(s);
} else {
RESATTACKED6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_8 = Byte.parseByte(s);
} else {
RESATTACKED6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED6_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED6_9 = Byte.parseByte(s);
} else {
RESATTACKED6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_1 = Byte.parseByte(s);
} else {
RESATTACKED7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_10 = Byte.parseByte(s);
} else {
RESATTACKED7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_11 = Byte.parseByte(s);
} else {
RESATTACKED7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_12 = Byte.parseByte(s);
} else {
RESATTACKED7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_2 = Byte.parseByte(s);
} else {
RESATTACKED7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_3 = Byte.parseByte(s);
} else {
RESATTACKED7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_4 = Byte.parseByte(s);
} else {
RESATTACKED7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_5 = Byte.parseByte(s);
} else {
RESATTACKED7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_6 = Byte.parseByte(s);
} else {
RESATTACKED7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_7 = Byte.parseByte(s);
} else {
RESATTACKED7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_8 = Byte.parseByte(s);
} else {
RESATTACKED7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED7_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED7_9 = Byte.parseByte(s);
} else {
RESATTACKED7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_1 = Byte.parseByte(s);
} else {
RESATTACKED8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_10 = Byte.parseByte(s);
} else {
RESATTACKED8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_11 = Byte.parseByte(s);
} else {
RESATTACKED8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_12 = Byte.parseByte(s);
} else {
RESATTACKED8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_2 = Byte.parseByte(s);
} else {
RESATTACKED8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_3 = Byte.parseByte(s);
} else {
RESATTACKED8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_4 = Byte.parseByte(s);
} else {
RESATTACKED8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_5 = Byte.parseByte(s);
} else {
RESATTACKED8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_6 = Byte.parseByte(s);
} else {
RESATTACKED8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_7 = Byte.parseByte(s);
} else {
RESATTACKED8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_8 = Byte.parseByte(s);
} else {
RESATTACKED8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED8_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED8_9 = Byte.parseByte(s);
} else {
RESATTACKED8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_1 = Byte.parseByte(s);
} else {
RESATTACKED96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_10 = Byte.parseByte(s);
} else {
RESATTACKED96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_11 = Byte.parseByte(s);
} else {
RESATTACKED96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_12 = Byte.parseByte(s);
} else {
RESATTACKED96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_2 = Byte.parseByte(s);
} else {
RESATTACKED96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_3 = Byte.parseByte(s);
} else {
RESATTACKED96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_4 = Byte.parseByte(s);
} else {
RESATTACKED96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_5 = Byte.parseByte(s);
} else {
RESATTACKED96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_6 = Byte.parseByte(s);
} else {
RESATTACKED96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_7 = Byte.parseByte(s);
} else {
RESATTACKED96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_8 = Byte.parseByte(s);
} else {
RESATTACKED96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED96_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED96_9 = Byte.parseByte(s);
} else {
RESATTACKED96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_1 = Byte.parseByte(s);
} else {
RESATTACKED97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_10 = Byte.parseByte(s);
} else {
RESATTACKED97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_11 = Byte.parseByte(s);
} else {
RESATTACKED97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_12 = Byte.parseByte(s);
} else {
RESATTACKED97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_2 = Byte.parseByte(s);
} else {
RESATTACKED97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_3 = Byte.parseByte(s);
} else {
RESATTACKED97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_4 = Byte.parseByte(s);
} else {
RESATTACKED97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_5 = Byte.parseByte(s);
} else {
RESATTACKED97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_6 = Byte.parseByte(s);
} else {
RESATTACKED97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_7 = Byte.parseByte(s);
} else {
RESATTACKED97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_8 = Byte.parseByte(s);
} else {
RESATTACKED97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED97_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED97_9 = Byte.parseByte(s);
} else {
RESATTACKED97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_1(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_1 = Byte.parseByte(s);
} else {
RESATTACKED9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_10(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_10 = Byte.parseByte(s);
} else {
RESATTACKED9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_11(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_11 = Byte.parseByte(s);
} else {
RESATTACKED9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_12(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_12 = Byte.parseByte(s);
} else {
RESATTACKED9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_2(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_2 = Byte.parseByte(s);
} else {
RESATTACKED9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_3(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_3 = Byte.parseByte(s);
} else {
RESATTACKED9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_4(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_4 = Byte.parseByte(s);
} else {
RESATTACKED9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_5(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_5 = Byte.parseByte(s);
} else {
RESATTACKED9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_6(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_6 = Byte.parseByte(s);
} else {
RESATTACKED9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_7(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_7 = Byte.parseByte(s);
} else {
RESATTACKED9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_8(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_8 = Byte.parseByte(s);
} else {
RESATTACKED9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESATTACKED9_9(String s) {
if (!s.trim().isEmpty()) {
RESATTACKED9_9 = Byte.parseByte(s);
} else {
RESATTACKED9_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_1 = Byte.parseByte(s);
} else {
RESAVOID1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_10 = Byte.parseByte(s);
} else {
RESAVOID1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_11 = Byte.parseByte(s);
} else {
RESAVOID1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_12 = Byte.parseByte(s);
} else {
RESAVOID1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_2 = Byte.parseByte(s);
} else {
RESAVOID1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_3 = Byte.parseByte(s);
} else {
RESAVOID1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_4 = Byte.parseByte(s);
} else {
RESAVOID1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_5 = Byte.parseByte(s);
} else {
RESAVOID1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_6 = Byte.parseByte(s);
} else {
RESAVOID1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_7 = Byte.parseByte(s);
} else {
RESAVOID1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_8 = Byte.parseByte(s);
} else {
RESAVOID1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID1_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID1_9 = Byte.parseByte(s);
} else {
RESAVOID1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_1 = Byte.parseByte(s);
} else {
RESAVOID2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_10 = Byte.parseByte(s);
} else {
RESAVOID2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_11 = Byte.parseByte(s);
} else {
RESAVOID2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_12 = Byte.parseByte(s);
} else {
RESAVOID2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_2 = Byte.parseByte(s);
} else {
RESAVOID2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_3 = Byte.parseByte(s);
} else {
RESAVOID2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_4 = Byte.parseByte(s);
} else {
RESAVOID2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_5 = Byte.parseByte(s);
} else {
RESAVOID2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_6 = Byte.parseByte(s);
} else {
RESAVOID2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_7 = Byte.parseByte(s);
} else {
RESAVOID2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_8 = Byte.parseByte(s);
} else {
RESAVOID2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID2_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID2_9 = Byte.parseByte(s);
} else {
RESAVOID2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_1 = Byte.parseByte(s);
} else {
RESAVOID3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_10 = Byte.parseByte(s);
} else {
RESAVOID3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_11 = Byte.parseByte(s);
} else {
RESAVOID3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_12 = Byte.parseByte(s);
} else {
RESAVOID3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_2 = Byte.parseByte(s);
} else {
RESAVOID3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_3 = Byte.parseByte(s);
} else {
RESAVOID3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_4 = Byte.parseByte(s);
} else {
RESAVOID3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_5 = Byte.parseByte(s);
} else {
RESAVOID3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_6 = Byte.parseByte(s);
} else {
RESAVOID3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_7 = Byte.parseByte(s);
} else {
RESAVOID3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_8 = Byte.parseByte(s);
} else {
RESAVOID3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID3_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID3_9 = Byte.parseByte(s);
} else {
RESAVOID3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_1 = Byte.parseByte(s);
} else {
RESAVOID4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_10 = Byte.parseByte(s);
} else {
RESAVOID4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_11 = Byte.parseByte(s);
} else {
RESAVOID4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_12 = Byte.parseByte(s);
} else {
RESAVOID4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_2 = Byte.parseByte(s);
} else {
RESAVOID4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_3 = Byte.parseByte(s);
} else {
RESAVOID4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_4 = Byte.parseByte(s);
} else {
RESAVOID4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_5 = Byte.parseByte(s);
} else {
RESAVOID4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_6 = Byte.parseByte(s);
} else {
RESAVOID4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_7 = Byte.parseByte(s);
} else {
RESAVOID4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_8 = Byte.parseByte(s);
} else {
RESAVOID4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID4_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID4_9 = Byte.parseByte(s);
} else {
RESAVOID4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_1 = Byte.parseByte(s);
} else {
RESAVOID5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_10 = Byte.parseByte(s);
} else {
RESAVOID5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_11 = Byte.parseByte(s);
} else {
RESAVOID5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_12 = Byte.parseByte(s);
} else {
RESAVOID5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_2 = Byte.parseByte(s);
} else {
RESAVOID5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_3 = Byte.parseByte(s);
} else {
RESAVOID5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_4 = Byte.parseByte(s);
} else {
RESAVOID5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_5 = Byte.parseByte(s);
} else {
RESAVOID5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_6 = Byte.parseByte(s);
} else {
RESAVOID5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_7 = Byte.parseByte(s);
} else {
RESAVOID5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_8 = Byte.parseByte(s);
} else {
RESAVOID5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID5_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID5_9 = Byte.parseByte(s);
} else {
RESAVOID5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_1 = Byte.parseByte(s);
} else {
RESAVOID6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_10 = Byte.parseByte(s);
} else {
RESAVOID6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_11 = Byte.parseByte(s);
} else {
RESAVOID6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_12 = Byte.parseByte(s);
} else {
RESAVOID6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_2 = Byte.parseByte(s);
} else {
RESAVOID6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_3 = Byte.parseByte(s);
} else {
RESAVOID6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_4 = Byte.parseByte(s);
} else {
RESAVOID6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_5 = Byte.parseByte(s);
} else {
RESAVOID6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_6 = Byte.parseByte(s);
} else {
RESAVOID6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_7 = Byte.parseByte(s);
} else {
RESAVOID6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_8 = Byte.parseByte(s);
} else {
RESAVOID6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID6_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID6_9 = Byte.parseByte(s);
} else {
RESAVOID6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_1 = Byte.parseByte(s);
} else {
RESAVOID7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_10 = Byte.parseByte(s);
} else {
RESAVOID7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_11 = Byte.parseByte(s);
} else {
RESAVOID7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_12 = Byte.parseByte(s);
} else {
RESAVOID7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_2 = Byte.parseByte(s);
} else {
RESAVOID7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_3 = Byte.parseByte(s);
} else {
RESAVOID7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_4 = Byte.parseByte(s);
} else {
RESAVOID7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_5 = Byte.parseByte(s);
} else {
RESAVOID7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_6 = Byte.parseByte(s);
} else {
RESAVOID7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_7 = Byte.parseByte(s);
} else {
RESAVOID7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_8 = Byte.parseByte(s);
} else {
RESAVOID7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID7_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID7_9 = Byte.parseByte(s);
} else {
RESAVOID7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_1 = Byte.parseByte(s);
} else {
RESAVOID8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_10 = Byte.parseByte(s);
} else {
RESAVOID8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_11 = Byte.parseByte(s);
} else {
RESAVOID8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_12 = Byte.parseByte(s);
} else {
RESAVOID8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_2 = Byte.parseByte(s);
} else {
RESAVOID8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_3 = Byte.parseByte(s);
} else {
RESAVOID8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_4 = Byte.parseByte(s);
} else {
RESAVOID8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_5 = Byte.parseByte(s);
} else {
RESAVOID8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_6 = Byte.parseByte(s);
} else {
RESAVOID8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_7 = Byte.parseByte(s);
} else {
RESAVOID8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_8 = Byte.parseByte(s);
} else {
RESAVOID8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID8_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID8_9 = Byte.parseByte(s);
} else {
RESAVOID8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_1 = Byte.parseByte(s);
} else {
RESAVOID96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_10 = Byte.parseByte(s);
} else {
RESAVOID96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_11 = Byte.parseByte(s);
} else {
RESAVOID96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_12 = Byte.parseByte(s);
} else {
RESAVOID96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_2 = Byte.parseByte(s);
} else {
RESAVOID96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_3 = Byte.parseByte(s);
} else {
RESAVOID96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_4 = Byte.parseByte(s);
} else {
RESAVOID96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_5 = Byte.parseByte(s);
} else {
RESAVOID96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_6 = Byte.parseByte(s);
} else {
RESAVOID96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_7 = Byte.parseByte(s);
} else {
RESAVOID96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_8 = Byte.parseByte(s);
} else {
RESAVOID96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID96_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID96_9 = Byte.parseByte(s);
} else {
RESAVOID96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_1 = Byte.parseByte(s);
} else {
RESAVOID97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_10 = Byte.parseByte(s);
} else {
RESAVOID97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_11 = Byte.parseByte(s);
} else {
RESAVOID97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_12 = Byte.parseByte(s);
} else {
RESAVOID97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_2 = Byte.parseByte(s);
} else {
RESAVOID97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_3 = Byte.parseByte(s);
} else {
RESAVOID97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_4 = Byte.parseByte(s);
} else {
RESAVOID97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_5 = Byte.parseByte(s);
} else {
RESAVOID97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_6 = Byte.parseByte(s);
} else {
RESAVOID97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_7 = Byte.parseByte(s);
} else {
RESAVOID97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_8 = Byte.parseByte(s);
} else {
RESAVOID97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID97_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID97_9 = Byte.parseByte(s);
} else {
RESAVOID97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_1(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_1 = Byte.parseByte(s);
} else {
RESAVOID9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_10(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_10 = Byte.parseByte(s);
} else {
RESAVOID9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_11(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_11 = Byte.parseByte(s);
} else {
RESAVOID9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_12(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_12 = Byte.parseByte(s);
} else {
RESAVOID9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_2(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_2 = Byte.parseByte(s);
} else {
RESAVOID9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_3(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_3 = Byte.parseByte(s);
} else {
RESAVOID9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_4(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_4 = Byte.parseByte(s);
} else {
RESAVOID9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_5(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_5 = Byte.parseByte(s);
} else {
RESAVOID9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_6(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_6 = Byte.parseByte(s);
} else {
RESAVOID9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_7(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_7 = Byte.parseByte(s);
} else {
RESAVOID9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_8(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_8 = Byte.parseByte(s);
} else {
RESAVOID9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESAVOID9_9(String s) {
if (!s.trim().isEmpty()) {
RESAVOID9_9 = Byte.parseByte(s);
} else {
RESAVOID9_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_1 = Byte.parseByte(s);
} else {
RESINSULTED1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_10 = Byte.parseByte(s);
} else {
RESINSULTED1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_11 = Byte.parseByte(s);
} else {
RESINSULTED1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_12 = Byte.parseByte(s);
} else {
RESINSULTED1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_2 = Byte.parseByte(s);
} else {
RESINSULTED1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_3 = Byte.parseByte(s);
} else {
RESINSULTED1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_4 = Byte.parseByte(s);
} else {
RESINSULTED1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_5 = Byte.parseByte(s);
} else {
RESINSULTED1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_6 = Byte.parseByte(s);
} else {
RESINSULTED1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_7 = Byte.parseByte(s);
} else {
RESINSULTED1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_8 = Byte.parseByte(s);
} else {
RESINSULTED1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED1_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED1_9 = Byte.parseByte(s);
} else {
RESINSULTED1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_1 = Byte.parseByte(s);
} else {
RESINSULTED2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_10 = Byte.parseByte(s);
} else {
RESINSULTED2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_11 = Byte.parseByte(s);
} else {
RESINSULTED2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_12 = Byte.parseByte(s);
} else {
RESINSULTED2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_2 = Byte.parseByte(s);
} else {
RESINSULTED2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_3 = Byte.parseByte(s);
} else {
RESINSULTED2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_4 = Byte.parseByte(s);
} else {
RESINSULTED2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_5 = Byte.parseByte(s);
} else {
RESINSULTED2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_6 = Byte.parseByte(s);
} else {
RESINSULTED2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_7 = Byte.parseByte(s);
} else {
RESINSULTED2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_8 = Byte.parseByte(s);
} else {
RESINSULTED2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED2_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED2_9 = Byte.parseByte(s);
} else {
RESINSULTED2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_1 = Byte.parseByte(s);
} else {
RESINSULTED3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_10 = Byte.parseByte(s);
} else {
RESINSULTED3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_11 = Byte.parseByte(s);
} else {
RESINSULTED3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_12 = Byte.parseByte(s);
} else {
RESINSULTED3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_2 = Byte.parseByte(s);
} else {
RESINSULTED3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_3 = Byte.parseByte(s);
} else {
RESINSULTED3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_4 = Byte.parseByte(s);
} else {
RESINSULTED3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_5 = Byte.parseByte(s);
} else {
RESINSULTED3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_6 = Byte.parseByte(s);
} else {
RESINSULTED3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_7 = Byte.parseByte(s);
} else {
RESINSULTED3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_8 = Byte.parseByte(s);
} else {
RESINSULTED3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED3_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED3_9 = Byte.parseByte(s);
} else {
RESINSULTED3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_1 = Byte.parseByte(s);
} else {
RESINSULTED4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_10 = Byte.parseByte(s);
} else {
RESINSULTED4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_11 = Byte.parseByte(s);
} else {
RESINSULTED4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_12 = Byte.parseByte(s);
} else {
RESINSULTED4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_2 = Byte.parseByte(s);
} else {
RESINSULTED4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_3 = Byte.parseByte(s);
} else {
RESINSULTED4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_4 = Byte.parseByte(s);
} else {
RESINSULTED4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_5 = Byte.parseByte(s);
} else {
RESINSULTED4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_6 = Byte.parseByte(s);
} else {
RESINSULTED4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_7 = Byte.parseByte(s);
} else {
RESINSULTED4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_8 = Byte.parseByte(s);
} else {
RESINSULTED4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED4_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED4_9 = Byte.parseByte(s);
} else {
RESINSULTED4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_1 = Byte.parseByte(s);
} else {
RESINSULTED5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_10 = Byte.parseByte(s);
} else {
RESINSULTED5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_11 = Byte.parseByte(s);
} else {
RESINSULTED5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_12 = Byte.parseByte(s);
} else {
RESINSULTED5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_2 = Byte.parseByte(s);
} else {
RESINSULTED5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_3 = Byte.parseByte(s);
} else {
RESINSULTED5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_4 = Byte.parseByte(s);
} else {
RESINSULTED5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_5 = Byte.parseByte(s);
} else {
RESINSULTED5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_6 = Byte.parseByte(s);
} else {
RESINSULTED5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_7 = Byte.parseByte(s);
} else {
RESINSULTED5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_8 = Byte.parseByte(s);
} else {
RESINSULTED5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED5_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED5_9 = Byte.parseByte(s);
} else {
RESINSULTED5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_1 = Byte.parseByte(s);
} else {
RESINSULTED6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_10 = Byte.parseByte(s);
} else {
RESINSULTED6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_11 = Byte.parseByte(s);
} else {
RESINSULTED6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_12 = Byte.parseByte(s);
} else {
RESINSULTED6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_2 = Byte.parseByte(s);
} else {
RESINSULTED6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_3 = Byte.parseByte(s);
} else {
RESINSULTED6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_4 = Byte.parseByte(s);
} else {
RESINSULTED6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_5 = Byte.parseByte(s);
} else {
RESINSULTED6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_6 = Byte.parseByte(s);
} else {
RESINSULTED6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_7 = Byte.parseByte(s);
} else {
RESINSULTED6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_8 = Byte.parseByte(s);
} else {
RESINSULTED6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED6_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED6_9 = Byte.parseByte(s);
} else {
RESINSULTED6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_1 = Byte.parseByte(s);
} else {
RESINSULTED7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_10 = Byte.parseByte(s);
} else {
RESINSULTED7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_11 = Byte.parseByte(s);
} else {
RESINSULTED7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_12 = Byte.parseByte(s);
} else {
RESINSULTED7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_2 = Byte.parseByte(s);
} else {
RESINSULTED7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_3 = Byte.parseByte(s);
} else {
RESINSULTED7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_4 = Byte.parseByte(s);
} else {
RESINSULTED7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_5 = Byte.parseByte(s);
} else {
RESINSULTED7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_6 = Byte.parseByte(s);
} else {
RESINSULTED7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_7 = Byte.parseByte(s);
} else {
RESINSULTED7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_8 = Byte.parseByte(s);
} else {
RESINSULTED7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED7_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED7_9 = Byte.parseByte(s);
} else {
RESINSULTED7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_1 = Byte.parseByte(s);
} else {
RESINSULTED8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_10 = Byte.parseByte(s);
} else {
RESINSULTED8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_11 = Byte.parseByte(s);
} else {
RESINSULTED8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_12 = Byte.parseByte(s);
} else {
RESINSULTED8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_2 = Byte.parseByte(s);
} else {
RESINSULTED8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_3 = Byte.parseByte(s);
} else {
RESINSULTED8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_4 = Byte.parseByte(s);
} else {
RESINSULTED8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_5 = Byte.parseByte(s);
} else {
RESINSULTED8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_6 = Byte.parseByte(s);
} else {
RESINSULTED8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_7 = Byte.parseByte(s);
} else {
RESINSULTED8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_8 = Byte.parseByte(s);
} else {
RESINSULTED8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED8_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED8_9 = Byte.parseByte(s);
} else {
RESINSULTED8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_1 = Byte.parseByte(s);
} else {
RESINSULTED96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_10 = Byte.parseByte(s);
} else {
RESINSULTED96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_11 = Byte.parseByte(s);
} else {
RESINSULTED96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_12 = Byte.parseByte(s);
} else {
RESINSULTED96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_2 = Byte.parseByte(s);
} else {
RESINSULTED96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_3 = Byte.parseByte(s);
} else {
RESINSULTED96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_4 = Byte.parseByte(s);
} else {
RESINSULTED96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_5 = Byte.parseByte(s);
} else {
RESINSULTED96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_6 = Byte.parseByte(s);
} else {
RESINSULTED96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_7 = Byte.parseByte(s);
} else {
RESINSULTED96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_8 = Byte.parseByte(s);
} else {
RESINSULTED96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED96_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED96_9 = Byte.parseByte(s);
} else {
RESINSULTED96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_1 = Byte.parseByte(s);
} else {
RESINSULTED97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_10 = Byte.parseByte(s);
} else {
RESINSULTED97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_11 = Byte.parseByte(s);
} else {
RESINSULTED97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_12 = Byte.parseByte(s);
} else {
RESINSULTED97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_2 = Byte.parseByte(s);
} else {
RESINSULTED97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_3 = Byte.parseByte(s);
} else {
RESINSULTED97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_4 = Byte.parseByte(s);
} else {
RESINSULTED97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_5 = Byte.parseByte(s);
} else {
RESINSULTED97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_6 = Byte.parseByte(s);
} else {
RESINSULTED97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_7 = Byte.parseByte(s);
} else {
RESINSULTED97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_8 = Byte.parseByte(s);
} else {
RESINSULTED97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED97_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED97_9 = Byte.parseByte(s);
} else {
RESINSULTED97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_1(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_1 = Byte.parseByte(s);
} else {
RESINSULTED9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_10(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_10 = Byte.parseByte(s);
} else {
RESINSULTED9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_11(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_11 = Byte.parseByte(s);
} else {
RESINSULTED9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_12(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_12 = Byte.parseByte(s);
} else {
RESINSULTED9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_2(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_2 = Byte.parseByte(s);
} else {
RESINSULTED9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_3(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_3 = Byte.parseByte(s);
} else {
RESINSULTED9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_4(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_4 = Byte.parseByte(s);
} else {
RESINSULTED9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_5(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_5 = Byte.parseByte(s);
} else {
RESINSULTED9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_6(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_6 = Byte.parseByte(s);
} else {
RESINSULTED9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_7(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_7 = Byte.parseByte(s);
} else {
RESINSULTED9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_8(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_8 = Byte.parseByte(s);
} else {
RESINSULTED9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESINSULTED9_9(String s) {
if (!s.trim().isEmpty()) {
RESINSULTED9_9 = Byte.parseByte(s);
} else {
RESINSULTED9_9 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY1(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY1 = Byte.parseByte(s);
} else {
RESJOBDENY1 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY2(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY2 = Byte.parseByte(s);
} else {
RESJOBDENY2 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY3(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY3 = Byte.parseByte(s);
} else {
RESJOBDENY3 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY4(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY4 = Byte.parseByte(s);
} else {
RESJOBDENY4 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY5(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY5 = Byte.parseByte(s);
} else {
RESJOBDENY5 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY6(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY6 = Byte.parseByte(s);
} else {
RESJOBDENY6 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY7(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY7 = Byte.parseByte(s);
} else {
RESJOBDENY7 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY8(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY8 = Byte.parseByte(s);
} else {
RESJOBDENY8 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY9(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY9 = Byte.parseByte(s);
} else {
RESJOBDENY9 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY96(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY96 = Byte.parseByte(s);
} else {
RESJOBDENY96 = Byte.MIN_VALUE;
}
}

protected final void initRESJOBDENY97(String s) {
if (!s.trim().isEmpty()) {
RESJOBDENY97 = Byte.parseByte(s);
} else {
RESJOBDENY97 = Byte.MIN_VALUE;
}
}

protected final void initRESPF16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16 = false;
} else {
RESPF16 = true;
}
}
}

protected final void initRESPF16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16_DV = false;
} else {
RESPF16_DV = true;
}
}
}

protected final void initRESPM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16 = false;
} else {
RESPM16 = true;
}
}
}

protected final void initRESPM16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16_DV = false;
} else {
RESPM16_DV = true;
}
}
}

protected final void initRESPROMDENY1(String s) {
if (!s.trim().isEmpty()) {
RESPROMDENY1 = Byte.parseByte(s);
} else {
RESPROMDENY1 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMDENY2(String s) {
if (!s.trim().isEmpty()) {
RESPROMDENY2 = Byte.parseByte(s);
} else {
RESPROMDENY2 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMDENY3(String s) {
if (!s.trim().isEmpty()) {
RESPROMDENY3 = Byte.parseByte(s);
} else {
RESPROMDENY3 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMDENY4(String s) {
if (!s.trim().isEmpty()) {
RESPROMDENY4 = Byte.parseByte(s);
} else {
RESPROMDENY4 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMDENY5(String s) {
if (!s.trim().isEmpty()) {
RESPROMDENY5 = Byte.parseByte(s);
} else {
RESPROMDENY5 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMDENY6(String s) {
if (!s.trim().isEmpty()) {
RESPROMDENY6 = Byte.parseByte(s);
} else {
RESPROMDENY6 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMDENY7(String s) {
if (!s.trim().isEmpty()) {
RESPROMDENY7 = Byte.parseByte(s);
} else {
RESPROMDENY7 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMDENY8(String s) {
if (!s.trim().isEmpty()) {
RESPROMDENY8 = Byte.parseByte(s);
} else {
RESPROMDENY8 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMDENY9(String s) {
if (!s.trim().isEmpty()) {
RESPROMDENY9 = Byte.parseByte(s);
} else {
RESPROMDENY9 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMDENY96(String s) {
if (!s.trim().isEmpty()) {
RESPROMDENY96 = Byte.parseByte(s);
} else {
RESPROMDENY96 = Byte.MIN_VALUE;
}
}

protected final void initRESPROMDENY97(String s) {
if (!s.trim().isEmpty()) {
RESPROMDENY97 = Byte.parseByte(s);
} else {
RESPROMDENY97 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY1(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY1 = Byte.parseByte(s);
} else {
RESTRAINDENY1 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY2(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY2 = Byte.parseByte(s);
} else {
RESTRAINDENY2 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY3(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY3 = Byte.parseByte(s);
} else {
RESTRAINDENY3 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY4(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY4 = Byte.parseByte(s);
} else {
RESTRAINDENY4 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY5(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY5 = Byte.parseByte(s);
} else {
RESTRAINDENY5 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY6(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY6 = Byte.parseByte(s);
} else {
RESTRAINDENY6 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY7(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY7 = Byte.parseByte(s);
} else {
RESTRAINDENY7 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY8(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY8 = Byte.parseByte(s);
} else {
RESTRAINDENY8 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY9(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY9 = Byte.parseByte(s);
} else {
RESTRAINDENY9 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY96(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY96 = Byte.parseByte(s);
} else {
RESTRAINDENY96 = Byte.MIN_VALUE;
}
}

protected final void initRESTRAINDENY97(String s) {
if (!s.trim().isEmpty()) {
RESTRAINDENY97 = Byte.parseByte(s);
} else {
RESTRAINDENY97 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_1 = Byte.parseByte(s);
} else {
RESUNSAFE1_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_10 = Byte.parseByte(s);
} else {
RESUNSAFE1_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_11 = Byte.parseByte(s);
} else {
RESUNSAFE1_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_12 = Byte.parseByte(s);
} else {
RESUNSAFE1_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_2 = Byte.parseByte(s);
} else {
RESUNSAFE1_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_3 = Byte.parseByte(s);
} else {
RESUNSAFE1_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_4 = Byte.parseByte(s);
} else {
RESUNSAFE1_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_5 = Byte.parseByte(s);
} else {
RESUNSAFE1_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_6 = Byte.parseByte(s);
} else {
RESUNSAFE1_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_7 = Byte.parseByte(s);
} else {
RESUNSAFE1_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_8 = Byte.parseByte(s);
} else {
RESUNSAFE1_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE1_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE1_9 = Byte.parseByte(s);
} else {
RESUNSAFE1_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_1 = Byte.parseByte(s);
} else {
RESUNSAFE2_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_10 = Byte.parseByte(s);
} else {
RESUNSAFE2_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_11 = Byte.parseByte(s);
} else {
RESUNSAFE2_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_12 = Byte.parseByte(s);
} else {
RESUNSAFE2_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_2 = Byte.parseByte(s);
} else {
RESUNSAFE2_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_3 = Byte.parseByte(s);
} else {
RESUNSAFE2_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_4 = Byte.parseByte(s);
} else {
RESUNSAFE2_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_5 = Byte.parseByte(s);
} else {
RESUNSAFE2_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_6 = Byte.parseByte(s);
} else {
RESUNSAFE2_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_7 = Byte.parseByte(s);
} else {
RESUNSAFE2_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_8 = Byte.parseByte(s);
} else {
RESUNSAFE2_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE2_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE2_9 = Byte.parseByte(s);
} else {
RESUNSAFE2_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_1 = Byte.parseByte(s);
} else {
RESUNSAFE3_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_10 = Byte.parseByte(s);
} else {
RESUNSAFE3_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_11 = Byte.parseByte(s);
} else {
RESUNSAFE3_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_12 = Byte.parseByte(s);
} else {
RESUNSAFE3_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_2 = Byte.parseByte(s);
} else {
RESUNSAFE3_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_3 = Byte.parseByte(s);
} else {
RESUNSAFE3_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_4 = Byte.parseByte(s);
} else {
RESUNSAFE3_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_5 = Byte.parseByte(s);
} else {
RESUNSAFE3_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_6 = Byte.parseByte(s);
} else {
RESUNSAFE3_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_7 = Byte.parseByte(s);
} else {
RESUNSAFE3_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_8 = Byte.parseByte(s);
} else {
RESUNSAFE3_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE3_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE3_9 = Byte.parseByte(s);
} else {
RESUNSAFE3_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_1 = Byte.parseByte(s);
} else {
RESUNSAFE4_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_10 = Byte.parseByte(s);
} else {
RESUNSAFE4_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_11 = Byte.parseByte(s);
} else {
RESUNSAFE4_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_12 = Byte.parseByte(s);
} else {
RESUNSAFE4_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_2 = Byte.parseByte(s);
} else {
RESUNSAFE4_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_3 = Byte.parseByte(s);
} else {
RESUNSAFE4_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_4 = Byte.parseByte(s);
} else {
RESUNSAFE4_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_5 = Byte.parseByte(s);
} else {
RESUNSAFE4_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_6 = Byte.parseByte(s);
} else {
RESUNSAFE4_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_7 = Byte.parseByte(s);
} else {
RESUNSAFE4_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_8 = Byte.parseByte(s);
} else {
RESUNSAFE4_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE4_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE4_9 = Byte.parseByte(s);
} else {
RESUNSAFE4_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_1 = Byte.parseByte(s);
} else {
RESUNSAFE5_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_10 = Byte.parseByte(s);
} else {
RESUNSAFE5_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_11 = Byte.parseByte(s);
} else {
RESUNSAFE5_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_12 = Byte.parseByte(s);
} else {
RESUNSAFE5_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_2 = Byte.parseByte(s);
} else {
RESUNSAFE5_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_3 = Byte.parseByte(s);
} else {
RESUNSAFE5_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_4 = Byte.parseByte(s);
} else {
RESUNSAFE5_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_5 = Byte.parseByte(s);
} else {
RESUNSAFE5_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_6 = Byte.parseByte(s);
} else {
RESUNSAFE5_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_7 = Byte.parseByte(s);
} else {
RESUNSAFE5_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_8 = Byte.parseByte(s);
} else {
RESUNSAFE5_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE5_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE5_9 = Byte.parseByte(s);
} else {
RESUNSAFE5_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_1 = Byte.parseByte(s);
} else {
RESUNSAFE6_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_10 = Byte.parseByte(s);
} else {
RESUNSAFE6_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_11 = Byte.parseByte(s);
} else {
RESUNSAFE6_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_12 = Byte.parseByte(s);
} else {
RESUNSAFE6_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_2 = Byte.parseByte(s);
} else {
RESUNSAFE6_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_3 = Byte.parseByte(s);
} else {
RESUNSAFE6_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_4 = Byte.parseByte(s);
} else {
RESUNSAFE6_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_5 = Byte.parseByte(s);
} else {
RESUNSAFE6_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_6 = Byte.parseByte(s);
} else {
RESUNSAFE6_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_7 = Byte.parseByte(s);
} else {
RESUNSAFE6_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_8 = Byte.parseByte(s);
} else {
RESUNSAFE6_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE6_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE6_9 = Byte.parseByte(s);
} else {
RESUNSAFE6_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_1 = Byte.parseByte(s);
} else {
RESUNSAFE7_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_10 = Byte.parseByte(s);
} else {
RESUNSAFE7_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_11 = Byte.parseByte(s);
} else {
RESUNSAFE7_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_12 = Byte.parseByte(s);
} else {
RESUNSAFE7_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_2 = Byte.parseByte(s);
} else {
RESUNSAFE7_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_3 = Byte.parseByte(s);
} else {
RESUNSAFE7_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_4 = Byte.parseByte(s);
} else {
RESUNSAFE7_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_5 = Byte.parseByte(s);
} else {
RESUNSAFE7_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_6 = Byte.parseByte(s);
} else {
RESUNSAFE7_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_7 = Byte.parseByte(s);
} else {
RESUNSAFE7_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_8 = Byte.parseByte(s);
} else {
RESUNSAFE7_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE7_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE7_9 = Byte.parseByte(s);
} else {
RESUNSAFE7_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_1 = Byte.parseByte(s);
} else {
RESUNSAFE8_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_10 = Byte.parseByte(s);
} else {
RESUNSAFE8_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_11 = Byte.parseByte(s);
} else {
RESUNSAFE8_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_12 = Byte.parseByte(s);
} else {
RESUNSAFE8_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_2 = Byte.parseByte(s);
} else {
RESUNSAFE8_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_3 = Byte.parseByte(s);
} else {
RESUNSAFE8_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_4 = Byte.parseByte(s);
} else {
RESUNSAFE8_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_5 = Byte.parseByte(s);
} else {
RESUNSAFE8_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_6 = Byte.parseByte(s);
} else {
RESUNSAFE8_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_7 = Byte.parseByte(s);
} else {
RESUNSAFE8_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_8 = Byte.parseByte(s);
} else {
RESUNSAFE8_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE8_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE8_9 = Byte.parseByte(s);
} else {
RESUNSAFE8_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_1 = Byte.parseByte(s);
} else {
RESUNSAFE96_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_10 = Byte.parseByte(s);
} else {
RESUNSAFE96_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_11 = Byte.parseByte(s);
} else {
RESUNSAFE96_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_12 = Byte.parseByte(s);
} else {
RESUNSAFE96_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_2 = Byte.parseByte(s);
} else {
RESUNSAFE96_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_3 = Byte.parseByte(s);
} else {
RESUNSAFE96_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_4 = Byte.parseByte(s);
} else {
RESUNSAFE96_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_5 = Byte.parseByte(s);
} else {
RESUNSAFE96_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_6 = Byte.parseByte(s);
} else {
RESUNSAFE96_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_7 = Byte.parseByte(s);
} else {
RESUNSAFE96_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_8 = Byte.parseByte(s);
} else {
RESUNSAFE96_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE96_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE96_9 = Byte.parseByte(s);
} else {
RESUNSAFE96_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_1 = Byte.parseByte(s);
} else {
RESUNSAFE97_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_10 = Byte.parseByte(s);
} else {
RESUNSAFE97_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_11 = Byte.parseByte(s);
} else {
RESUNSAFE97_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_12 = Byte.parseByte(s);
} else {
RESUNSAFE97_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_2 = Byte.parseByte(s);
} else {
RESUNSAFE97_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_3 = Byte.parseByte(s);
} else {
RESUNSAFE97_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_4 = Byte.parseByte(s);
} else {
RESUNSAFE97_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_5 = Byte.parseByte(s);
} else {
RESUNSAFE97_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_6 = Byte.parseByte(s);
} else {
RESUNSAFE97_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_7 = Byte.parseByte(s);
} else {
RESUNSAFE97_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_8 = Byte.parseByte(s);
} else {
RESUNSAFE97_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE97_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE97_9 = Byte.parseByte(s);
} else {
RESUNSAFE97_9 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_1(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_1 = Byte.parseByte(s);
} else {
RESUNSAFE9_1 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_10(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_10 = Byte.parseByte(s);
} else {
RESUNSAFE9_10 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_11(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_11 = Byte.parseByte(s);
} else {
RESUNSAFE9_11 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_12(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_12 = Byte.parseByte(s);
} else {
RESUNSAFE9_12 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_2(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_2 = Byte.parseByte(s);
} else {
RESUNSAFE9_2 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_3(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_3 = Byte.parseByte(s);
} else {
RESUNSAFE9_3 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_4(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_4 = Byte.parseByte(s);
} else {
RESUNSAFE9_4 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_5(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_5 = Byte.parseByte(s);
} else {
RESUNSAFE9_5 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_6(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_6 = Byte.parseByte(s);
} else {
RESUNSAFE9_6 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_7(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_7 = Byte.parseByte(s);
} else {
RESUNSAFE9_7 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_8(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_8 = Byte.parseByte(s);
} else {
RESUNSAFE9_8 = Byte.MIN_VALUE;
}
}

protected final void initRESUNSAFE9_9(String s) {
if (!s.trim().isEmpty()) {
RESUNSAFE9_9 = Byte.parseByte(s);
} else {
RESUNSAFE9_9 = Byte.MIN_VALUE;
}
}

protected final void initRETAMT(String s) {
if (!s.trim().isEmpty()) {
RETAMT = Byte.parseByte(s);
} else {
RETAMT = Byte.MIN_VALUE;
}
}

protected final void initRETCHK(String s) {
if (!s.trim().isEmpty()) {
RETCHK = Byte.parseByte(s);
} else {
RETCHK = Byte.MIN_VALUE;
}
}

protected final void initRETSUF(String s) {
if (!s.trim().isEmpty()) {
RETSUF = Byte.parseByte(s);
} else {
RETSUF = Byte.MIN_VALUE;
}
}

protected final void initRHLAND_CODE(String s) {
if (!s.trim().isEmpty()) {
RHLAND_CODE = Byte.parseByte(s);
} else {
RHLAND_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHMOB_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHMOB_CODE = Byte.parseByte(s);
} else {
RPHMOB_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHWRK_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHWRK_CODE = Byte.parseByte(s);
} else {
RPHWRK_CODE = Byte.MIN_VALUE;
}
}

protected final void initRTCON1(String s) {
if (!s.trim().isEmpty()) {
RTCON1 = Byte.parseByte(s);
} else {
RTCON1 = Byte.MIN_VALUE;
}
}

protected final void initRTCON2(String s) {
if (!s.trim().isEmpty()) {
RTCON2 = Byte.parseByte(s);
} else {
RTCON2 = Byte.MIN_VALUE;
}
}

protected final void initRTCON3(String s) {
if (!s.trim().isEmpty()) {
RTCON3 = Byte.parseByte(s);
} else {
RTCON3 = Byte.MIN_VALUE;
}
}

protected final void initRTCON4(String s) {
if (!s.trim().isEmpty()) {
RTCON4 = Byte.parseByte(s);
} else {
RTCON4 = Byte.MIN_VALUE;
}
}

protected final void initRTEXPJB(String s) {
if (!s.trim().isEmpty()) {
RTEXPJB = Byte.parseByte(s);
} else {
RTEXPJB = Byte.MIN_VALUE;
}
}

protected final void initRTFND1(String s) {
if (!s.trim().isEmpty()) {
RTFND1 = Byte.parseByte(s);
} else {
RTFND1 = Byte.MIN_VALUE;
}
}

protected final void initRTFND10(String s) {
if (!s.trim().isEmpty()) {
RTFND10 = Byte.parseByte(s);
} else {
RTFND10 = Byte.MIN_VALUE;
}
}

protected final void initRTFND2(String s) {
if (!s.trim().isEmpty()) {
RTFND2 = Byte.parseByte(s);
} else {
RTFND2 = Byte.MIN_VALUE;
}
}

protected final void initRTFND3(String s) {
if (!s.trim().isEmpty()) {
RTFND3 = Byte.parseByte(s);
} else {
RTFND3 = Byte.MIN_VALUE;
}
}

protected final void initRTFND4(String s) {
if (!s.trim().isEmpty()) {
RTFND4 = Byte.parseByte(s);
} else {
RTFND4 = Byte.MIN_VALUE;
}
}

protected final void initRTFND5(String s) {
if (!s.trim().isEmpty()) {
RTFND5 = Byte.parseByte(s);
} else {
RTFND5 = Byte.MIN_VALUE;
}
}

protected final void initRTFND6(String s) {
if (!s.trim().isEmpty()) {
RTFND6 = Byte.parseByte(s);
} else {
RTFND6 = Byte.MIN_VALUE;
}
}

protected final void initRTFND7(String s) {
if (!s.trim().isEmpty()) {
RTFND7 = Byte.parseByte(s);
} else {
RTFND7 = Byte.MIN_VALUE;
}
}

protected final void initRTFND8(String s) {
if (!s.trim().isEmpty()) {
RTFND8 = Byte.parseByte(s);
} else {
RTFND8 = Byte.MIN_VALUE;
}
}

protected final void initRTFND9(String s) {
if (!s.trim().isEmpty()) {
RTFND9 = Byte.parseByte(s);
} else {
RTFND9 = Byte.MIN_VALUE;
}
}

protected final void initRTFND96(String s) {
if (!s.trim().isEmpty()) {
RTFND96 = Byte.parseByte(s);
} else {
RTFND96 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO1(String s) {
if (!s.trim().isEmpty()) {
RTPRO1 = Byte.parseByte(s);
} else {
RTPRO1 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO2(String s) {
if (!s.trim().isEmpty()) {
RTPRO2 = Byte.parseByte(s);
} else {
RTPRO2 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO3(String s) {
if (!s.trim().isEmpty()) {
RTPRO3 = Byte.parseByte(s);
} else {
RTPRO3 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO4(String s) {
if (!s.trim().isEmpty()) {
RTPRO4 = Byte.parseByte(s);
} else {
RTPRO4 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO5(String s) {
if (!s.trim().isEmpty()) {
RTPRO5 = Byte.parseByte(s);
} else {
RTPRO5 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO6(String s) {
if (!s.trim().isEmpty()) {
RTPRO6 = Byte.parseByte(s);
} else {
RTPRO6 = Byte.MIN_VALUE;
}
}

protected final void initRULESKID(String s) {
if (!s.trim().isEmpty()) {
RULESKID = Byte.parseByte(s);
} else {
RULESKID = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB = Byte.parseByte(s);
} else {
SAMEJOB = Byte.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSATTRANSY1(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY1 = Byte.parseByte(s);
} else {
SATTRANSY1 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY10(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY10 = Byte.parseByte(s);
} else {
SATTRANSY10 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY2(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY2 = Byte.parseByte(s);
} else {
SATTRANSY2 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY3(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY3 = Byte.parseByte(s);
} else {
SATTRANSY3 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY4(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY4 = Byte.parseByte(s);
} else {
SATTRANSY4 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY5(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY5 = Byte.parseByte(s);
} else {
SATTRANSY5 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY6(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY6 = Byte.parseByte(s);
} else {
SATTRANSY6 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY7(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY7 = Byte.parseByte(s);
} else {
SATTRANSY7 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY8(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY8 = Byte.parseByte(s);
} else {
SATTRANSY8 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY9(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY9 = Byte.parseByte(s);
} else {
SATTRANSY9 = Byte.MIN_VALUE;
}
}

protected final void initSATTRANSY97(String s) {
if (!s.trim().isEmpty()) {
SATTRANSY97 = Byte.parseByte(s);
} else {
SATTRANSY97 = Byte.MIN_VALUE;
}
}

protected final void initSCAC(String s) {
if (!s.trim().isEmpty()) {
SCAC = Byte.parseByte(s);
} else {
SCAC = Byte.MIN_VALUE;
}
}

protected final void initSCDASSAT_DV(String s) {
if (!s.trim().isEmpty()) {
SCDASSAT_DV = Byte.parseByte(s);
} else {
SCDASSAT_DV = Byte.MIN_VALUE;
}
}

protected final void initSCFLAG_DV(String s) {
if (!s.trim().isEmpty()) {
SCFLAG_DV = Byte.parseByte(s);
} else {
SCFLAG_DV = Byte.MIN_VALUE;
}
}

protected final void initSCHLLOC(String s) {
if (!s.trim().isEmpty()) {
SCHLLOC = Byte.parseByte(s);
} else {
SCHLLOC = Byte.MIN_VALUE;
}
}

protected final void initSCHOK(String s) {
if (!s.trim().isEmpty()) {
SCHOK = Byte.parseByte(s);
} else {
SCHOK = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT1(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT1 = Byte.parseByte(s);
} else {
SCLFSAT1 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT2(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT2 = Byte.parseByte(s);
} else {
SCLFSAT2 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT7(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT7 = Byte.parseByte(s);
} else {
SCLFSAT7 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSATO(String s) {
if (!s.trim().isEmpty()) {
SCLFSATO = Byte.parseByte(s);
} else {
SCLFSATO = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHA(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHA = Byte.parseByte(s);
} else {
SCOPNGBHA = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHB(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHB = Byte.parseByte(s);
} else {
SCOPNGBHB = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHC(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHC = Byte.parseByte(s);
} else {
SCOPNGBHC = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHD(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHD = Byte.parseByte(s);
} else {
SCOPNGBHD = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHE(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHE = Byte.parseByte(s);
} else {
SCOPNGBHE = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHF(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHF = Byte.parseByte(s);
} else {
SCOPNGBHF = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHG(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHG = Byte.parseByte(s);
} else {
SCOPNGBHG = Byte.MIN_VALUE;
}
}

protected final void initSCOPNGBHH(String s) {
if (!s.trim().isEmpty()) {
SCOPNGBHH = Byte.parseByte(s);
} else {
SCOPNGBHH = Byte.MIN_VALUE;
}
}

protected final void initSCPAROUTINTW3(String s) {
if (!s.trim().isEmpty()) {
SCPAROUTINTW3 = Byte.parseByte(s);
} else {
SCPAROUTINTW3 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5A1(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5A1 = Byte.parseByte(s);
} else {
SCPTRT5A1 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5A2(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5A2 = Byte.parseByte(s);
} else {
SCPTRT5A2 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5A3(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5A3 = Byte.parseByte(s);
} else {
SCPTRT5A3 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5C1(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5C1 = Byte.parseByte(s);
} else {
SCPTRT5C1 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5C2(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5C2 = Byte.parseByte(s);
} else {
SCPTRT5C2 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5C3(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5C3 = Byte.parseByte(s);
} else {
SCPTRT5C3 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5E1(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5E1 = Byte.parseByte(s);
} else {
SCPTRT5E1 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5E2(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5E2 = Byte.parseByte(s);
} else {
SCPTRT5E2 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5E3(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5E3 = Byte.parseByte(s);
} else {
SCPTRT5E3 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5N1(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5N1 = Byte.parseByte(s);
} else {
SCPTRT5N1 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5N2(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5N2 = Byte.parseByte(s);
} else {
SCPTRT5N2 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5N3(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5N3 = Byte.parseByte(s);
} else {
SCPTRT5N3 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5O1(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5O1 = Byte.parseByte(s);
} else {
SCPTRT5O1 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5O2(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5O2 = Byte.parseByte(s);
} else {
SCPTRT5O2 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRT5O3(String s) {
if (!s.trim().isEmpty()) {
SCPTRT5O3 = Byte.parseByte(s);
} else {
SCPTRT5O3 = Byte.MIN_VALUE;
}
}

protected final void initSCRELHAPPY(String s) {
if (!s.trim().isEmpty()) {
SCRELHAPPY = Byte.parseByte(s);
} else {
SCRELHAPPY = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARAR(String s) {
if (!s.trim().isEmpty()) {
SCRELPARAR = Byte.parseByte(s);
} else {
SCRELPARAR = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARCD(String s) {
if (!s.trim().isEmpty()) {
SCRELPARCD = Byte.parseByte(s);
} else {
SCRELPARCD = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARDS(String s) {
if (!s.trim().isEmpty()) {
SCRELPARDS = Byte.parseByte(s);
} else {
SCRELPARDS = Byte.MIN_VALUE;
}
}

protected final void initSCRELPAREI(String s) {
if (!s.trim().isEmpty()) {
SCRELPAREI = Byte.parseByte(s);
} else {
SCRELPAREI = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARIR(String s) {
if (!s.trim().isEmpty()) {
SCRELPARIR = Byte.parseByte(s);
} else {
SCRELPARIR = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARKS(String s) {
if (!s.trim().isEmpty()) {
SCRELPARKS = Byte.parseByte(s);
} else {
SCRELPARKS = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARRG(String s) {
if (!s.trim().isEmpty()) {
SCRELPARRG = Byte.parseByte(s);
} else {
SCRELPARRG = Byte.MIN_VALUE;
}
}

protected final void initSCRELPARWT(String s) {
if (!s.trim().isEmpty()) {
SCRELPARWT = Byte.parseByte(s);
} else {
SCRELPARWT = Byte.MIN_VALUE;
}
}

protected final void initSCRF1(String s) {
if (!s.trim().isEmpty()) {
SCRF1 = Byte.parseByte(s);
} else {
SCRF1 = Byte.MIN_VALUE;
}
}

protected final void initSCRF2(String s) {
if (!s.trim().isEmpty()) {
SCRF2 = Byte.parseByte(s);
} else {
SCRF2 = Byte.MIN_VALUE;
}
}

protected final void initSCRF3(String s) {
if (!s.trim().isEmpty()) {
SCRF3 = Byte.parseByte(s);
} else {
SCRF3 = Byte.MIN_VALUE;
}
}

protected final void initSCRF4(String s) {
if (!s.trim().isEmpty()) {
SCRF4 = Byte.parseByte(s);
} else {
SCRF4 = Byte.MIN_VALUE;
}
}

protected final void initSCRF5(String s) {
if (!s.trim().isEmpty()) {
SCRF5 = Byte.parseByte(s);
} else {
SCRF5 = Byte.MIN_VALUE;
}
}

protected final void initSCRF6(String s) {
if (!s.trim().isEmpty()) {
SCRF6 = Byte.parseByte(s);
} else {
SCRF6 = Byte.MIN_VALUE;
}
}

protected final void initSCRF97(String s) {
if (!s.trim().isEmpty()) {
SCRF97 = Byte.parseByte(s);
} else {
SCRF97 = Byte.MIN_VALUE;
}
}

protected final void initSCRX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCRX_CODE = Byte.parseByte(s);
} else {
SCRX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSCSF1(String s) {
if (!s.trim().isEmpty()) {
SCSF1 = Byte.parseByte(s);
} else {
SCSF1 = Byte.MIN_VALUE;
}
}

protected final void initSCSF2A(String s) {
if (!s.trim().isEmpty()) {
SCSF2A = Byte.parseByte(s);
} else {
SCSF2A = Byte.MIN_VALUE;
}
}

protected final void initSCSF2B(String s) {
if (!s.trim().isEmpty()) {
SCSF2B = Byte.parseByte(s);
} else {
SCSF2B = Byte.MIN_VALUE;
}
}

protected final void initSCSF3A(String s) {
if (!s.trim().isEmpty()) {
SCSF3A = Byte.parseByte(s);
} else {
SCSF3A = Byte.MIN_VALUE;
}
}

protected final void initSCSF3B(String s) {
if (!s.trim().isEmpty()) {
SCSF3B = Byte.parseByte(s);
} else {
SCSF3B = Byte.MIN_VALUE;
}
}

protected final void initSCSF4A(String s) {
if (!s.trim().isEmpty()) {
SCSF4A = Byte.parseByte(s);
} else {
SCSF4A = Byte.MIN_VALUE;
}
}

protected final void initSCSF4B(String s) {
if (!s.trim().isEmpty()) {
SCSF4B = Byte.parseByte(s);
} else {
SCSF4B = Byte.MIN_VALUE;
}
}

protected final void initSCSF5(String s) {
if (!s.trim().isEmpty()) {
SCSF5 = Byte.parseByte(s);
} else {
SCSF5 = Byte.MIN_VALUE;
}
}

protected final void initSCSF6A(String s) {
if (!s.trim().isEmpty()) {
SCSF6A = Byte.parseByte(s);
} else {
SCSF6A = Byte.MIN_VALUE;
}
}

protected final void initSCSF6B(String s) {
if (!s.trim().isEmpty()) {
SCSF6B = Byte.parseByte(s);
} else {
SCSF6B = Byte.MIN_VALUE;
}
}

protected final void initSCSF6C(String s) {
if (!s.trim().isEmpty()) {
SCSF6C = Byte.parseByte(s);
} else {
SCSF6C = Byte.MIN_VALUE;
}
}

protected final void initSCSF7(String s) {
if (!s.trim().isEmpty()) {
SCSF7 = Byte.parseByte(s);
} else {
SCSF7 = Byte.MIN_VALUE;
}
}

protected final void initSCUN1(String s) {
if (!s.trim().isEmpty()) {
SCUN1 = Byte.parseByte(s);
} else {
SCUN1 = Byte.MIN_VALUE;
}
}

protected final void initSCUN2(String s) {
if (!s.trim().isEmpty()) {
SCUN2 = Byte.parseByte(s);
} else {
SCUN2 = Byte.MIN_VALUE;
}
}

protected final void initSCUN3(String s) {
if (!s.trim().isEmpty()) {
SCUN3 = Byte.parseByte(s);
} else {
SCUN3 = Byte.MIN_VALUE;
}
}

protected final void initSCUN97(String s) {
if (!s.trim().isEmpty()) {
SCUN97 = Byte.parseByte(s);
} else {
SCUN97 = Byte.MIN_VALUE;
}
}

protected final void initSCUX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCUX_CODE = Byte.parseByte(s);
} else {
SCUX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSEEARNGRS_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_DV = Double.parseDouble(s);
} else {
SEEARNGRS_DV = Double.NaN;
}
}

protected final void initSEEARNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_IF = Byte.parseByte(s);
} else {
SEEARNGRS_IF = Byte.MIN_VALUE;
}
}

protected final void initSEEARNNET_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNNET_DV = Double.parseDouble(s);
} else {
SEEARNNET_DV = Double.NaN;
}
}

protected final void initSEEKID(String s) {
if (!s.trim().isEmpty()) {
SEEKID = Byte.parseByte(s);
} else {
SEEKID = Byte.MIN_VALUE;
}
}

protected final void initSERVACC(String s) {
if (!s.trim().isEmpty()) {
SERVACC = Byte.parseByte(s);
} else {
SERVACC = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY1(String s) {
if (!s.trim().isEmpty()) {
SERVACCY1 = Byte.parseByte(s);
} else {
SERVACCY1 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY10(String s) {
if (!s.trim().isEmpty()) {
SERVACCY10 = Byte.parseByte(s);
} else {
SERVACCY10 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY11(String s) {
if (!s.trim().isEmpty()) {
SERVACCY11 = Byte.parseByte(s);
} else {
SERVACCY11 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY12(String s) {
if (!s.trim().isEmpty()) {
SERVACCY12 = Byte.parseByte(s);
} else {
SERVACCY12 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY13(String s) {
if (!s.trim().isEmpty()) {
SERVACCY13 = Byte.parseByte(s);
} else {
SERVACCY13 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY14(String s) {
if (!s.trim().isEmpty()) {
SERVACCY14 = Byte.parseByte(s);
} else {
SERVACCY14 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY15(String s) {
if (!s.trim().isEmpty()) {
SERVACCY15 = Byte.parseByte(s);
} else {
SERVACCY15 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY2(String s) {
if (!s.trim().isEmpty()) {
SERVACCY2 = Byte.parseByte(s);
} else {
SERVACCY2 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY3(String s) {
if (!s.trim().isEmpty()) {
SERVACCY3 = Byte.parseByte(s);
} else {
SERVACCY3 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY4(String s) {
if (!s.trim().isEmpty()) {
SERVACCY4 = Byte.parseByte(s);
} else {
SERVACCY4 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY5(String s) {
if (!s.trim().isEmpty()) {
SERVACCY5 = Byte.parseByte(s);
} else {
SERVACCY5 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY6(String s) {
if (!s.trim().isEmpty()) {
SERVACCY6 = Byte.parseByte(s);
} else {
SERVACCY6 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY7(String s) {
if (!s.trim().isEmpty()) {
SERVACCY7 = Byte.parseByte(s);
} else {
SERVACCY7 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY8(String s) {
if (!s.trim().isEmpty()) {
SERVACCY8 = Byte.parseByte(s);
} else {
SERVACCY8 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY9(String s) {
if (!s.trim().isEmpty()) {
SERVACCY9 = Byte.parseByte(s);
} else {
SERVACCY9 = Byte.MIN_VALUE;
}
}

protected final void initSERVACCY97(String s) {
if (!s.trim().isEmpty()) {
SERVACCY97 = Byte.parseByte(s);
} else {
SERVACCY97 = Byte.MIN_VALUE;
}
}

protected final void initSEVENSPAP(String s) {
if (!s.trim().isEmpty()) {
SEVENSPAP = Byte.parseByte(s);
} else {
SEVENSPAP = Byte.MIN_VALUE;
}
}

protected final void initSEXUOR(String s) {
if (!s.trim().isEmpty()) {
SEXUOR = Byte.parseByte(s);
} else {
SEXUOR = Byte.MIN_VALUE;
}
}

protected final void initSEX_DV(String s) {
if (!s.trim().isEmpty()) {
SEX_DV = Byte.parseByte(s);
} else {
SEX_DV = Byte.MIN_VALUE;
}
}

protected final void initSF1(String s) {
if (!s.trim().isEmpty()) {
SF1 = Byte.parseByte(s);
} else {
SF1 = Byte.MIN_VALUE;
}
}

protected final void initSF12MCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12MCS_DV = Double.parseDouble(s);
} else {
SF12MCS_DV = Double.NaN;
}
}

protected final void initSF12PCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12PCS_DV = Double.parseDouble(s);
} else {
SF12PCS_DV = Double.NaN;
}
}

protected final void initSIBHIT(String s) {
if (!s.trim().isEmpty()) {
SIBHIT = Byte.parseByte(s);
} else {
SIBHIT = Byte.MIN_VALUE;
}
}

protected final void initSIBSTEAL(String s) {
if (!s.trim().isEmpty()) {
SIBSTEAL = Byte.parseByte(s);
} else {
SIBSTEAL = Byte.MIN_VALUE;
}
}

protected final void initSIBTEASE(String s) {
if (!s.trim().isEmpty()) {
SIBTEASE = Byte.parseByte(s);
} else {
SIBTEASE = Byte.MIN_VALUE;
}
}

protected final void initSIBVERAB(String s) {
if (!s.trim().isEmpty()) {
SIBVERAB = Byte.parseByte(s);
} else {
SIBVERAB = Byte.MIN_VALUE;
}
}

protected final void initSIMAGE(String s) {
if (!s.trim().isEmpty()) {
SIMAGE = Byte.parseByte(s);
} else {
SIMAGE = Byte.MIN_VALUE;
}
}

protected final void initSIMAREA(String s) {
if (!s.trim().isEmpty()) {
SIMAREA = Byte.parseByte(s);
} else {
SIMAREA = Byte.MIN_VALUE;
}
}

protected final void initSIMEDUC(String s) {
if (!s.trim().isEmpty()) {
SIMEDUC = Byte.parseByte(s);
} else {
SIMEDUC = Byte.MIN_VALUE;
}
}

protected final void initSIMFAM(String s) {
if (!s.trim().isEmpty()) {
SIMFAM = Byte.parseByte(s);
} else {
SIMFAM = Byte.MIN_VALUE;
}
}

protected final void initSIMINC(String s) {
if (!s.trim().isEmpty()) {
SIMINC = Byte.parseByte(s);
} else {
SIMINC = Byte.MIN_VALUE;
}
}

protected final void initSIMJOB(String s) {
if (!s.trim().isEmpty()) {
SIMJOB = Byte.parseByte(s);
} else {
SIMJOB = Byte.MIN_VALUE;
}
}

protected final void initSIMRACE(String s) {
if (!s.trim().isEmpty()) {
SIMRACE = Byte.parseByte(s);
} else {
SIMRACE = Byte.MIN_VALUE;
}
}

protected final void initSINGLE_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
SINGLE_DV = false;
} else {
SINGLE_DV = true;
}
}
}

protected final void initSLAPKID(String s) {
if (!s.trim().isEmpty()) {
SLAPKID = Byte.parseByte(s);
} else {
SLAPKID = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH11(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH11 = Byte.parseByte(s);
} else {
SMKMNTH11 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH12(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH12 = Byte.parseByte(s);
} else {
SMKMNTH12 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH13(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH13 = Byte.parseByte(s);
} else {
SMKMNTH13 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH21(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH21 = Byte.parseByte(s);
} else {
SMKMNTH21 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH22(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH22 = Byte.parseByte(s);
} else {
SMKMNTH22 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH23(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH23 = Byte.parseByte(s);
} else {
SMKMNTH23 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH31(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH31 = Byte.parseByte(s);
} else {
SMKMNTH31 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH32(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH32 = Byte.parseByte(s);
} else {
SMKMNTH32 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH33(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH33 = Byte.parseByte(s);
} else {
SMKMNTH33 = Byte.MIN_VALUE;
}
}

protected final void initSMOFRQ(String s) {
if (!s.trim().isEmpty()) {
SMOFRQ = Byte.parseByte(s);
} else {
SMOFRQ = Byte.MIN_VALUE;
}
}

protected final void initSOCIALKID(String s) {
if (!s.trim().isEmpty()) {
SOCIALKID = Byte.parseByte(s);
} else {
SOCIALKID = Byte.MIN_VALUE;
}
}

protected final void initSOCWEB(String s) {
if (!s.trim().isEmpty()) {
SOCWEB = Byte.parseByte(s);
} else {
SOCWEB = Byte.MIN_VALUE;
}
}

protected final void initSPPEN(String s) {
if (!s.trim().isEmpty()) {
SPPEN = Byte.parseByte(s);
} else {
SPPEN = Byte.MIN_VALUE;
}
}

protected final void initSPPID(String s) {
if (!s.trim().isEmpty()) {
SPPID = Integer.parseInt(s);
} else {
SPPID = Integer.MIN_VALUE;
}
}

protected final void initSPPNO(String s) {
if (!s.trim().isEmpty()) {
SPPNO = Byte.parseByte(s);
} else {
SPPNO = Byte.MIN_VALUE;
}
}

protected final void initSTATCM1(String s) {
if (!s.trim().isEmpty()) {
STATCM1 = Byte.parseByte(s);
} else {
STATCM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM2(String s) {
if (!s.trim().isEmpty()) {
STATCM2 = Byte.parseByte(s);
} else {
STATCM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATCY41(String s) {
if (!s.trim().isEmpty()) {
STATCY41 = Short.parseShort(s);
} else {
STATCY41 = Short.MIN_VALUE;
}
}

protected final void initSTATCY42(String s) {
if (!s.trim().isEmpty()) {
STATCY42 = Short.parseShort(s);
} else {
STATCY42 = Short.MIN_VALUE;
}
}

protected final void initSTATENDD1(String s) {
if (!s.trim().isEmpty()) {
STATENDD1 = Byte.parseByte(s);
} else {
STATENDD1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD2(String s) {
if (!s.trim().isEmpty()) {
STATENDD2 = Byte.parseByte(s);
} else {
STATENDD2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD3(String s) {
if (!s.trim().isEmpty()) {
STATENDD3 = Byte.parseByte(s);
} else {
STATENDD3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD4(String s) {
if (!s.trim().isEmpty()) {
STATENDD4 = Byte.parseByte(s);
} else {
STATENDD4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD5(String s) {
if (!s.trim().isEmpty()) {
STATENDD5 = Byte.parseByte(s);
} else {
STATENDD5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD6(String s) {
if (!s.trim().isEmpty()) {
STATENDD6 = Byte.parseByte(s);
} else {
STATENDD6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD7(String s) {
if (!s.trim().isEmpty()) {
STATENDD7 = Byte.parseByte(s);
} else {
STATENDD7 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD8(String s) {
if (!s.trim().isEmpty()) {
STATENDD8 = Byte.parseByte(s);
} else {
STATENDD8 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD9(String s) {
if (!s.trim().isEmpty()) {
STATENDD9 = Byte.parseByte(s);
} else {
STATENDD9 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM1(String s) {
if (!s.trim().isEmpty()) {
STATENDM1 = Byte.parseByte(s);
} else {
STATENDM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM2(String s) {
if (!s.trim().isEmpty()) {
STATENDM2 = Byte.parseByte(s);
} else {
STATENDM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM3(String s) {
if (!s.trim().isEmpty()) {
STATENDM3 = Byte.parseByte(s);
} else {
STATENDM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM4(String s) {
if (!s.trim().isEmpty()) {
STATENDM4 = Byte.parseByte(s);
} else {
STATENDM4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM5(String s) {
if (!s.trim().isEmpty()) {
STATENDM5 = Byte.parseByte(s);
} else {
STATENDM5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM6(String s) {
if (!s.trim().isEmpty()) {
STATENDM6 = Byte.parseByte(s);
} else {
STATENDM6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM7(String s) {
if (!s.trim().isEmpty()) {
STATENDM7 = Byte.parseByte(s);
} else {
STATENDM7 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM8(String s) {
if (!s.trim().isEmpty()) {
STATENDM8 = Byte.parseByte(s);
} else {
STATENDM8 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM9(String s) {
if (!s.trim().isEmpty()) {
STATENDM9 = Byte.parseByte(s);
} else {
STATENDM9 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDY41(String s) {
if (!s.trim().isEmpty()) {
STATENDY41 = Short.parseShort(s);
} else {
STATENDY41 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY42(String s) {
if (!s.trim().isEmpty()) {
STATENDY42 = Short.parseShort(s);
} else {
STATENDY42 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY43(String s) {
if (!s.trim().isEmpty()) {
STATENDY43 = Short.parseShort(s);
} else {
STATENDY43 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY44(String s) {
if (!s.trim().isEmpty()) {
STATENDY44 = Short.parseShort(s);
} else {
STATENDY44 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY45(String s) {
if (!s.trim().isEmpty()) {
STATENDY45 = Short.parseShort(s);
} else {
STATENDY45 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY46(String s) {
if (!s.trim().isEmpty()) {
STATENDY46 = Short.parseShort(s);
} else {
STATENDY46 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY47(String s) {
if (!s.trim().isEmpty()) {
STATENDY47 = Short.parseShort(s);
} else {
STATENDY47 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY48(String s) {
if (!s.trim().isEmpty()) {
STATENDY48 = Short.parseShort(s);
} else {
STATENDY48 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY49(String s) {
if (!s.trim().isEmpty()) {
STATENDY49 = Short.parseShort(s);
} else {
STATENDY49 = Short.MIN_VALUE;
}
}

protected final void initSTEALSIB(String s) {
if (!s.trim().isEmpty()) {
STEALSIB = Byte.parseByte(s);
} else {
STEALSIB = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS(String s) {
if (!s.trim().isEmpty()) {
STENDREAS = Byte.parseByte(s);
} else {
STENDREAS = Byte.MIN_VALUE;
}
}

protected final void initSTEPREL(String s) {
if (!s.trim().isEmpty()) {
STEPREL = Byte.parseByte(s);
} else {
STEPREL = Byte.MIN_VALUE;
}
}

protected final void initSTRATA(String s) {
if (!s.trim().isEmpty()) {
STRATA = Short.parseShort(s);
} else {
STRATA = Short.MIN_VALUE;
}
}

protected final void initSUB7STOP1(String s) {
if (!s.trim().isEmpty()) {
SUB7STOP1 = Byte.parseByte(s);
} else {
SUB7STOP1 = Byte.MIN_VALUE;
}
}

protected final void initSUB7STOP2(String s) {
if (!s.trim().isEmpty()) {
SUB7STOP2 = Byte.parseByte(s);
} else {
SUB7STOP2 = Byte.MIN_VALUE;
}
}

protected final void initSUB7STOP3(String s) {
if (!s.trim().isEmpty()) {
SUB7STOP3 = Byte.parseByte(s);
} else {
SUB7STOP3 = Byte.MIN_VALUE;
}
}

protected final void initSUB7STOP4(String s) {
if (!s.trim().isEmpty()) {
SUB7STOP4 = Byte.parseByte(s);
} else {
SUB7STOP4 = Byte.MIN_VALUE;
}
}

protected final void initSUB7STOP5(String s) {
if (!s.trim().isEmpty()) {
SUB7STOP5 = Byte.parseByte(s);
} else {
SUB7STOP5 = Byte.MIN_VALUE;
}
}

protected final void initSUB7STOP6(String s) {
if (!s.trim().isEmpty()) {
SUB7STOP6 = Byte.parseByte(s);
} else {
SUB7STOP6 = Byte.MIN_VALUE;
}
}

protected final void initSUB7STOP7(String s) {
if (!s.trim().isEmpty()) {
SUB7STOP7 = Byte.parseByte(s);
} else {
SUB7STOP7 = Byte.MIN_VALUE;
}
}

protected final void initSUB7STOP8(String s) {
if (!s.trim().isEmpty()) {
SUB7STOP8 = Byte.parseByte(s);
} else {
SUB7STOP8 = Byte.MIN_VALUE;
}
}

protected final void initSUB7STOP97(String s) {
if (!s.trim().isEmpty()) {
SUB7STOP97 = Byte.parseByte(s);
} else {
SUB7STOP97 = Byte.MIN_VALUE;
}
}

protected final void initSUB7_1(String s) {
if (!s.trim().isEmpty()) {
SUB7_1 = Byte.parseByte(s);
} else {
SUB7_1 = Byte.MIN_VALUE;
}
}

protected final void initSUB7_2(String s) {
if (!s.trim().isEmpty()) {
SUB7_2 = Byte.parseByte(s);
} else {
SUB7_2 = Byte.MIN_VALUE;
}
}

protected final void initSUB7_3(String s) {
if (!s.trim().isEmpty()) {
SUB7_3 = Byte.parseByte(s);
} else {
SUB7_3 = Byte.MIN_VALUE;
}
}

protected final void initSUB7_4(String s) {
if (!s.trim().isEmpty()) {
SUB7_4 = Byte.parseByte(s);
} else {
SUB7_4 = Byte.MIN_VALUE;
}
}

protected final void initSUB7_5(String s) {
if (!s.trim().isEmpty()) {
SUB7_5 = Byte.parseByte(s);
} else {
SUB7_5 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT11(String s) {
if (!s.trim().isEmpty()) {
SUBCONT11 = Byte.parseByte(s);
} else {
SUBCONT11 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT12(String s) {
if (!s.trim().isEmpty()) {
SUBCONT12 = Byte.parseByte(s);
} else {
SUBCONT12 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT13(String s) {
if (!s.trim().isEmpty()) {
SUBCONT13 = Byte.parseByte(s);
} else {
SUBCONT13 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT21(String s) {
if (!s.trim().isEmpty()) {
SUBCONT21 = Byte.parseByte(s);
} else {
SUBCONT21 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT210(String s) {
if (!s.trim().isEmpty()) {
SUBCONT210 = Byte.parseByte(s);
} else {
SUBCONT210 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT211(String s) {
if (!s.trim().isEmpty()) {
SUBCONT211 = Byte.parseByte(s);
} else {
SUBCONT211 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT212(String s) {
if (!s.trim().isEmpty()) {
SUBCONT212 = Byte.parseByte(s);
} else {
SUBCONT212 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT213(String s) {
if (!s.trim().isEmpty()) {
SUBCONT213 = Byte.parseByte(s);
} else {
SUBCONT213 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT214(String s) {
if (!s.trim().isEmpty()) {
SUBCONT214 = Byte.parseByte(s);
} else {
SUBCONT214 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT215(String s) {
if (!s.trim().isEmpty()) {
SUBCONT215 = Byte.parseByte(s);
} else {
SUBCONT215 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT216(String s) {
if (!s.trim().isEmpty()) {
SUBCONT216 = Byte.parseByte(s);
} else {
SUBCONT216 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT22(String s) {
if (!s.trim().isEmpty()) {
SUBCONT22 = Byte.parseByte(s);
} else {
SUBCONT22 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT23(String s) {
if (!s.trim().isEmpty()) {
SUBCONT23 = Byte.parseByte(s);
} else {
SUBCONT23 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT24(String s) {
if (!s.trim().isEmpty()) {
SUBCONT24 = Byte.parseByte(s);
} else {
SUBCONT24 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT25(String s) {
if (!s.trim().isEmpty()) {
SUBCONT25 = Byte.parseByte(s);
} else {
SUBCONT25 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT26(String s) {
if (!s.trim().isEmpty()) {
SUBCONT26 = Byte.parseByte(s);
} else {
SUBCONT26 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT27(String s) {
if (!s.trim().isEmpty()) {
SUBCONT27 = Byte.parseByte(s);
} else {
SUBCONT27 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT28(String s) {
if (!s.trim().isEmpty()) {
SUBCONT28 = Byte.parseByte(s);
} else {
SUBCONT28 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT29(String s) {
if (!s.trim().isEmpty()) {
SUBCONT29 = Byte.parseByte(s);
} else {
SUBCONT29 = Byte.MIN_VALUE;
}
}

protected final void initSUBCONT3(String s) {
if (!s.trim().isEmpty()) {
SUBCONT3 = Byte.parseByte(s);
} else {
SUBCONT3 = Byte.MIN_VALUE;
}
}

protected final void initSUSP(String s) {
if (!s.trim().isEmpty()) {
SUSP = Byte.parseByte(s);
} else {
SUSP = Byte.MIN_VALUE;
}
}

protected final void initTALKMATTER(String s) {
if (!s.trim().isEmpty()) {
TALKMATTER = Byte.parseByte(s);
} else {
TALKMATTER = Byte.MIN_VALUE;
}
}

protected final void initTEASESIB(String s) {
if (!s.trim().isEmpty()) {
TEASESIB = Byte.parseByte(s);
} else {
TEASESIB = Byte.MIN_VALUE;
}
}

protected final void initTLKF(String s) {
if (!s.trim().isEmpty()) {
TLKF = Byte.parseByte(s);
} else {
TLKF = Byte.MIN_VALUE;
}
}

protected final void initTLKM(String s) {
if (!s.trim().isEmpty()) {
TLKM = Byte.parseByte(s);
} else {
TLKM = Byte.MIN_VALUE;
}
}

protected final void initTRAINANY(String s) {
if (!s.trim().isEmpty()) {
TRAINANY = Byte.parseByte(s);
} else {
TRAINANY = Byte.MIN_VALUE;
}
}

protected final void initTRAINDAYS1(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS1 = Short.parseShort(s);
} else {
TRAINDAYS1 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS2(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS2 = Short.parseShort(s);
} else {
TRAINDAYS2 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS3(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS3 = Short.parseShort(s);
} else {
TRAINDAYS3 = Short.MIN_VALUE;
}
}

protected final void initTRAINDENY(String s) {
if (!s.trim().isEmpty()) {
TRAINDENY = Byte.parseByte(s);
} else {
TRAINDENY = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND1(String s) {
if (!s.trim().isEmpty()) {
TRAINEND1 = Byte.parseByte(s);
} else {
TRAINEND1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND2(String s) {
if (!s.trim().isEmpty()) {
TRAINEND2 = Byte.parseByte(s);
} else {
TRAINEND2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND3(String s) {
if (!s.trim().isEmpty()) {
TRAINEND3 = Byte.parseByte(s);
} else {
TRAINEND3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS1(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS1 = Byte.parseByte(s);
} else {
TRAINHRS1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS2(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS2 = Byte.parseByte(s);
} else {
TRAINHRS2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS3(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS3 = Byte.parseByte(s);
} else {
TRAINHRS3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINN(String s) {
if (!s.trim().isEmpty()) {
TRAINN = Byte.parseByte(s);
} else {
TRAINN = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP11(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP11 = Byte.parseByte(s);
} else {
TRAINPURP11 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP12(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP12 = Byte.parseByte(s);
} else {
TRAINPURP12 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP13(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP13 = Byte.parseByte(s);
} else {
TRAINPURP13 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP21(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP21 = Byte.parseByte(s);
} else {
TRAINPURP21 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP22(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP22 = Byte.parseByte(s);
} else {
TRAINPURP22 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP23(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP23 = Byte.parseByte(s);
} else {
TRAINPURP23 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP31(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP31 = Byte.parseByte(s);
} else {
TRAINPURP31 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP32(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP32 = Byte.parseByte(s);
} else {
TRAINPURP32 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP33(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP33 = Byte.parseByte(s);
} else {
TRAINPURP33 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP41(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP41 = Byte.parseByte(s);
} else {
TRAINPURP41 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP42(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP42 = Byte.parseByte(s);
} else {
TRAINPURP42 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP43(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP43 = Byte.parseByte(s);
} else {
TRAINPURP43 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP51(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP51 = Byte.parseByte(s);
} else {
TRAINPURP51 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP52(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP52 = Byte.parseByte(s);
} else {
TRAINPURP52 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP53(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP53 = Byte.parseByte(s);
} else {
TRAINPURP53 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP61(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP61 = Byte.parseByte(s);
} else {
TRAINPURP61 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP62(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP62 = Byte.parseByte(s);
} else {
TRAINPURP62 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP63(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP63 = Byte.parseByte(s);
} else {
TRAINPURP63 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP71(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP71 = Byte.parseByte(s);
} else {
TRAINPURP71 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP72(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP72 = Byte.parseByte(s);
} else {
TRAINPURP72 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP73(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP73 = Byte.parseByte(s);
} else {
TRAINPURP73 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL1 = Byte.parseByte(s);
} else {
TRAINQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL2 = Byte.parseByte(s);
} else {
TRAINQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL3 = Byte.parseByte(s);
} else {
TRAINQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRQUAL1 = Byte.parseByte(s);
} else {
TRQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL10(String s) {
if (!s.trim().isEmpty()) {
TRQUAL10 = Byte.parseByte(s);
} else {
TRQUAL10 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL11(String s) {
if (!s.trim().isEmpty()) {
TRQUAL11 = Byte.parseByte(s);
} else {
TRQUAL11 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL13(String s) {
if (!s.trim().isEmpty()) {
TRQUAL13 = Byte.parseByte(s);
} else {
TRQUAL13 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL15(String s) {
if (!s.trim().isEmpty()) {
TRQUAL15 = Byte.parseByte(s);
} else {
TRQUAL15 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL16(String s) {
if (!s.trim().isEmpty()) {
TRQUAL16 = Byte.parseByte(s);
} else {
TRQUAL16 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL17(String s) {
if (!s.trim().isEmpty()) {
TRQUAL17 = Byte.parseByte(s);
} else {
TRQUAL17 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL18(String s) {
if (!s.trim().isEmpty()) {
TRQUAL18 = Byte.parseByte(s);
} else {
TRQUAL18 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL19(String s) {
if (!s.trim().isEmpty()) {
TRQUAL19 = Byte.parseByte(s);
} else {
TRQUAL19 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRQUAL2 = Byte.parseByte(s);
} else {
TRQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL20(String s) {
if (!s.trim().isEmpty()) {
TRQUAL20 = Byte.parseByte(s);
} else {
TRQUAL20 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL21(String s) {
if (!s.trim().isEmpty()) {
TRQUAL21 = Byte.parseByte(s);
} else {
TRQUAL21 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL22(String s) {
if (!s.trim().isEmpty()) {
TRQUAL22 = Byte.parseByte(s);
} else {
TRQUAL22 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL23(String s) {
if (!s.trim().isEmpty()) {
TRQUAL23 = Byte.parseByte(s);
} else {
TRQUAL23 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL24(String s) {
if (!s.trim().isEmpty()) {
TRQUAL24 = Byte.parseByte(s);
} else {
TRQUAL24 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL25(String s) {
if (!s.trim().isEmpty()) {
TRQUAL25 = Byte.parseByte(s);
} else {
TRQUAL25 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL26(String s) {
if (!s.trim().isEmpty()) {
TRQUAL26 = Byte.parseByte(s);
} else {
TRQUAL26 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL27(String s) {
if (!s.trim().isEmpty()) {
TRQUAL27 = Byte.parseByte(s);
} else {
TRQUAL27 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL28(String s) {
if (!s.trim().isEmpty()) {
TRQUAL28 = Byte.parseByte(s);
} else {
TRQUAL28 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL29(String s) {
if (!s.trim().isEmpty()) {
TRQUAL29 = Byte.parseByte(s);
} else {
TRQUAL29 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRQUAL3 = Byte.parseByte(s);
} else {
TRQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL30(String s) {
if (!s.trim().isEmpty()) {
TRQUAL30 = Byte.parseByte(s);
} else {
TRQUAL30 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL31(String s) {
if (!s.trim().isEmpty()) {
TRQUAL31 = Byte.parseByte(s);
} else {
TRQUAL31 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL4(String s) {
if (!s.trim().isEmpty()) {
TRQUAL4 = Byte.parseByte(s);
} else {
TRQUAL4 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL5(String s) {
if (!s.trim().isEmpty()) {
TRQUAL5 = Byte.parseByte(s);
} else {
TRQUAL5 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL6(String s) {
if (!s.trim().isEmpty()) {
TRQUAL6 = Byte.parseByte(s);
} else {
TRQUAL6 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL7(String s) {
if (!s.trim().isEmpty()) {
TRQUAL7 = Byte.parseByte(s);
} else {
TRQUAL7 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL8(String s) {
if (!s.trim().isEmpty()) {
TRQUAL8 = Byte.parseByte(s);
} else {
TRQUAL8 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL9(String s) {
if (!s.trim().isEmpty()) {
TRQUAL9 = Byte.parseByte(s);
} else {
TRQUAL9 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO1(String s) {
if (!s.trim().isEmpty()) {
TRWHO1 = Byte.parseByte(s);
} else {
TRWHO1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO2(String s) {
if (!s.trim().isEmpty()) {
TRWHO2 = Byte.parseByte(s);
} else {
TRWHO2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO3(String s) {
if (!s.trim().isEmpty()) {
TRWHO3 = Byte.parseByte(s);
} else {
TRWHO3 = Byte.MIN_VALUE;
}
}

protected final void initTVHOURS(String s) {
if (!s.trim().isEmpty()) {
TVHOURS = Double.parseDouble(s);
} else {
TVHOURS = Double.NaN;
}
}

protected final void initTVM2(String s) {
if (!s.trim().isEmpty()) {
TVM2 = Byte.parseByte(s);
} else {
TVM2 = Byte.MIN_VALUE;
}
}

protected final void initUKBORN(String s) {
if (!s.trim().isEmpty()) {
UKBORN = Byte.parseByte(s);
} else {
UKBORN = Byte.MIN_VALUE;
}
}

protected final void initUNDQUS(String s) {
if (!s.trim().isEmpty()) {
UNDQUS = Byte.parseByte(s);
} else {
UNDQUS = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE1(String s) {
if (!s.trim().isEmpty()) {
UNSAFE1 = Byte.parseByte(s);
} else {
UNSAFE1 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE10(String s) {
if (!s.trim().isEmpty()) {
UNSAFE10 = Byte.parseByte(s);
} else {
UNSAFE10 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE11(String s) {
if (!s.trim().isEmpty()) {
UNSAFE11 = Byte.parseByte(s);
} else {
UNSAFE11 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE2(String s) {
if (!s.trim().isEmpty()) {
UNSAFE2 = Byte.parseByte(s);
} else {
UNSAFE2 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE3(String s) {
if (!s.trim().isEmpty()) {
UNSAFE3 = Byte.parseByte(s);
} else {
UNSAFE3 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE4(String s) {
if (!s.trim().isEmpty()) {
UNSAFE4 = Byte.parseByte(s);
} else {
UNSAFE4 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE5(String s) {
if (!s.trim().isEmpty()) {
UNSAFE5 = Byte.parseByte(s);
} else {
UNSAFE5 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE6(String s) {
if (!s.trim().isEmpty()) {
UNSAFE6 = Byte.parseByte(s);
} else {
UNSAFE6 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE7(String s) {
if (!s.trim().isEmpty()) {
UNSAFE7 = Byte.parseByte(s);
} else {
UNSAFE7 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE8(String s) {
if (!s.trim().isEmpty()) {
UNSAFE8 = Byte.parseByte(s);
} else {
UNSAFE8 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE9(String s) {
if (!s.trim().isEmpty()) {
UNSAFE9 = Byte.parseByte(s);
} else {
UNSAFE9 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE96(String s) {
if (!s.trim().isEmpty()) {
UNSAFE96 = Byte.parseByte(s);
} else {
UNSAFE96 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE97(String s) {
if (!s.trim().isEmpty()) {
UNSAFE97 = Byte.parseByte(s);
} else {
UNSAFE97 = Byte.MIN_VALUE;
}
}

protected final void initUNSAFEO_CODE(String s) {
if (!s.trim().isEmpty()) {
UNSAFEO_CODE = Byte.parseByte(s);
} else {
UNSAFEO_CODE = Byte.MIN_VALUE;
}
}

protected final void initUNSAFE_DV(String s) {
if (!s.trim().isEmpty()) {
UNSAFE_DV = Byte.parseByte(s);
} else {
UNSAFE_DV = Byte.MIN_VALUE;
}
}

protected final void initUPSET(String s) {
if (!s.trim().isEmpty()) {
UPSET = Byte.parseByte(s);
} else {
UPSET = Byte.MIN_VALUE;
}
}

protected final void initURBAN_DV(String s) {
if (!s.trim().isEmpty()) {
URBAN_DV = Byte.parseByte(s);
} else {
URBAN_DV = Byte.MIN_VALUE;
}
}

protected final void initVERABSIB(String s) {
if (!s.trim().isEmpty()) {
VERABSIB = Byte.parseByte(s);
} else {
VERABSIB = Byte.MIN_VALUE;
}
}

protected final void initVFCONT11(String s) {
if (!s.trim().isEmpty()) {
VFCONT11 = Byte.parseByte(s);
} else {
VFCONT11 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT12(String s) {
if (!s.trim().isEmpty()) {
VFCONT12 = Byte.parseByte(s);
} else {
VFCONT12 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT13(String s) {
if (!s.trim().isEmpty()) {
VFCONT13 = Byte.parseByte(s);
} else {
VFCONT13 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT21(String s) {
if (!s.trim().isEmpty()) {
VFCONT21 = Byte.parseByte(s);
} else {
VFCONT21 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT210(String s) {
if (!s.trim().isEmpty()) {
VFCONT210 = Byte.parseByte(s);
} else {
VFCONT210 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT211(String s) {
if (!s.trim().isEmpty()) {
VFCONT211 = Byte.parseByte(s);
} else {
VFCONT211 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT212(String s) {
if (!s.trim().isEmpty()) {
VFCONT212 = Byte.parseByte(s);
} else {
VFCONT212 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT213(String s) {
if (!s.trim().isEmpty()) {
VFCONT213 = Byte.parseByte(s);
} else {
VFCONT213 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT214(String s) {
if (!s.trim().isEmpty()) {
VFCONT214 = Byte.parseByte(s);
} else {
VFCONT214 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT215(String s) {
if (!s.trim().isEmpty()) {
VFCONT215 = Byte.parseByte(s);
} else {
VFCONT215 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT216(String s) {
if (!s.trim().isEmpty()) {
VFCONT216 = Byte.parseByte(s);
} else {
VFCONT216 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT22(String s) {
if (!s.trim().isEmpty()) {
VFCONT22 = Byte.parseByte(s);
} else {
VFCONT22 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT23(String s) {
if (!s.trim().isEmpty()) {
VFCONT23 = Byte.parseByte(s);
} else {
VFCONT23 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT24(String s) {
if (!s.trim().isEmpty()) {
VFCONT24 = Byte.parseByte(s);
} else {
VFCONT24 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT25(String s) {
if (!s.trim().isEmpty()) {
VFCONT25 = Byte.parseByte(s);
} else {
VFCONT25 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT26(String s) {
if (!s.trim().isEmpty()) {
VFCONT26 = Byte.parseByte(s);
} else {
VFCONT26 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT27(String s) {
if (!s.trim().isEmpty()) {
VFCONT27 = Byte.parseByte(s);
} else {
VFCONT27 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT28(String s) {
if (!s.trim().isEmpty()) {
VFCONT28 = Byte.parseByte(s);
} else {
VFCONT28 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT29(String s) {
if (!s.trim().isEmpty()) {
VFCONT29 = Byte.parseByte(s);
} else {
VFCONT29 = Byte.MIN_VALUE;
}
}

protected final void initVFCONT3(String s) {
if (!s.trim().isEmpty()) {
VFCONT3 = Byte.parseByte(s);
} else {
VFCONT3 = Byte.MIN_VALUE;
}
}

protected final void initVFCT(String s) {
if (!s.trim().isEmpty()) {
VFCT = Byte.parseByte(s);
} else {
VFCT = Byte.MIN_VALUE;
}
}

protected final void initVFPRE(String s) {
if (!s.trim().isEmpty()) {
VFPRE = Byte.parseByte(s);
} else {
VFPRE = Byte.MIN_VALUE;
}
}

protected final void initVFSTOP1(String s) {
if (!s.trim().isEmpty()) {
VFSTOP1 = Byte.parseByte(s);
} else {
VFSTOP1 = Byte.MIN_VALUE;
}
}

protected final void initVFSTOP2(String s) {
if (!s.trim().isEmpty()) {
VFSTOP2 = Byte.parseByte(s);
} else {
VFSTOP2 = Byte.MIN_VALUE;
}
}

protected final void initVFSTOP3(String s) {
if (!s.trim().isEmpty()) {
VFSTOP3 = Byte.parseByte(s);
} else {
VFSTOP3 = Byte.MIN_VALUE;
}
}

protected final void initVFSTOP4(String s) {
if (!s.trim().isEmpty()) {
VFSTOP4 = Byte.parseByte(s);
} else {
VFSTOP4 = Byte.MIN_VALUE;
}
}

protected final void initVFSTOP5(String s) {
if (!s.trim().isEmpty()) {
VFSTOP5 = Byte.parseByte(s);
} else {
VFSTOP5 = Byte.MIN_VALUE;
}
}

protected final void initVFSTOP6(String s) {
if (!s.trim().isEmpty()) {
VFSTOP6 = Byte.parseByte(s);
} else {
VFSTOP6 = Byte.MIN_VALUE;
}
}

protected final void initVFSTOP7(String s) {
if (!s.trim().isEmpty()) {
VFSTOP7 = Byte.parseByte(s);
} else {
VFSTOP7 = Byte.MIN_VALUE;
}
}

protected final void initVFSTOP8(String s) {
if (!s.trim().isEmpty()) {
VFSTOP8 = Byte.parseByte(s);
} else {
VFSTOP8 = Byte.MIN_VALUE;
}
}

protected final void initVFSTOP97(String s) {
if (!s.trim().isEmpty()) {
VFSTOP97 = Byte.parseByte(s);
} else {
VFSTOP97 = Byte.MIN_VALUE;
}
}

protected final void initVFTCTW(String s) {
if (!s.trim().isEmpty()) {
VFTCTW = Byte.parseByte(s);
} else {
VFTCTW = Byte.MIN_VALUE;
}
}

protected final void initVISFAM(String s) {
if (!s.trim().isEmpty()) {
VISFAM = Byte.parseByte(s);
} else {
VISFAM = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY1(String s) {
if (!s.trim().isEmpty()) {
VISFAMY1 = Byte.parseByte(s);
} else {
VISFAMY1 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY10(String s) {
if (!s.trim().isEmpty()) {
VISFAMY10 = Byte.parseByte(s);
} else {
VISFAMY10 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY11(String s) {
if (!s.trim().isEmpty()) {
VISFAMY11 = Byte.parseByte(s);
} else {
VISFAMY11 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY12(String s) {
if (!s.trim().isEmpty()) {
VISFAMY12 = Byte.parseByte(s);
} else {
VISFAMY12 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY13(String s) {
if (!s.trim().isEmpty()) {
VISFAMY13 = Byte.parseByte(s);
} else {
VISFAMY13 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY14(String s) {
if (!s.trim().isEmpty()) {
VISFAMY14 = Byte.parseByte(s);
} else {
VISFAMY14 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY15(String s) {
if (!s.trim().isEmpty()) {
VISFAMY15 = Byte.parseByte(s);
} else {
VISFAMY15 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY2(String s) {
if (!s.trim().isEmpty()) {
VISFAMY2 = Byte.parseByte(s);
} else {
VISFAMY2 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY3(String s) {
if (!s.trim().isEmpty()) {
VISFAMY3 = Byte.parseByte(s);
} else {
VISFAMY3 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY4(String s) {
if (!s.trim().isEmpty()) {
VISFAMY4 = Byte.parseByte(s);
} else {
VISFAMY4 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY5(String s) {
if (!s.trim().isEmpty()) {
VISFAMY5 = Byte.parseByte(s);
} else {
VISFAMY5 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY6(String s) {
if (!s.trim().isEmpty()) {
VISFAMY6 = Byte.parseByte(s);
} else {
VISFAMY6 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY7(String s) {
if (!s.trim().isEmpty()) {
VISFAMY7 = Byte.parseByte(s);
} else {
VISFAMY7 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY8(String s) {
if (!s.trim().isEmpty()) {
VISFAMY8 = Byte.parseByte(s);
} else {
VISFAMY8 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY9(String s) {
if (!s.trim().isEmpty()) {
VISFAMY9 = Byte.parseByte(s);
} else {
VISFAMY9 = Byte.MIN_VALUE;
}
}

protected final void initVISFAMY97(String s) {
if (!s.trim().isEmpty()) {
VISFAMY97 = Byte.parseByte(s);
} else {
VISFAMY97 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDS(String s) {
if (!s.trim().isEmpty()) {
VISFRNDS = Byte.parseByte(s);
} else {
VISFRNDS = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY1(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY1 = Byte.parseByte(s);
} else {
VISFRNDSY1 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY10(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY10 = Byte.parseByte(s);
} else {
VISFRNDSY10 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY11(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY11 = Byte.parseByte(s);
} else {
VISFRNDSY11 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY12(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY12 = Byte.parseByte(s);
} else {
VISFRNDSY12 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY13(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY13 = Byte.parseByte(s);
} else {
VISFRNDSY13 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY14(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY14 = Byte.parseByte(s);
} else {
VISFRNDSY14 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY2(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY2 = Byte.parseByte(s);
} else {
VISFRNDSY2 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY3(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY3 = Byte.parseByte(s);
} else {
VISFRNDSY3 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY4(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY4 = Byte.parseByte(s);
} else {
VISFRNDSY4 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY5(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY5 = Byte.parseByte(s);
} else {
VISFRNDSY5 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY6(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY6 = Byte.parseByte(s);
} else {
VISFRNDSY6 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY7(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY7 = Byte.parseByte(s);
} else {
VISFRNDSY7 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY8(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY8 = Byte.parseByte(s);
} else {
VISFRNDSY8 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY9(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY9 = Byte.parseByte(s);
} else {
VISFRNDSY9 = Byte.MIN_VALUE;
}
}

protected final void initVISFRNDSY97(String s) {
if (!s.trim().isEmpty()) {
VISFRNDSY97 = Byte.parseByte(s);
} else {
VISFRNDSY97 = Byte.MIN_VALUE;
}
}

protected final void initVOLRECPER(String s) {
if (!s.trim().isEmpty()) {
VOLRECPER = Byte.parseByte(s);
} else {
VOLRECPER = Byte.MIN_VALUE;
}
}

protected final void initVOTE1(String s) {
if (!s.trim().isEmpty()) {
VOTE1 = Short.parseShort(s);
} else {
VOTE1 = Short.MIN_VALUE;
}
}

protected final void initVOTE2(String s) {
if (!s.trim().isEmpty()) {
VOTE2 = Short.parseShort(s);
} else {
VOTE2 = Short.MIN_VALUE;
}
}

protected final void initVOTE3(String s) {
if (!s.trim().isEmpty()) {
VOTE3 = Short.parseShort(s);
} else {
VOTE3 = Short.MIN_VALUE;
}
}

protected final void initVOTE4(String s) {
if (!s.trim().isEmpty()) {
VOTE4 = Short.parseShort(s);
} else {
VOTE4 = Short.MIN_VALUE;
}
}

protected final void initVOTE5(String s) {
if (!s.trim().isEmpty()) {
VOTE5 = Short.parseShort(s);
} else {
VOTE5 = Short.MIN_VALUE;
}
}

protected final void initVOTE6(String s) {
if (!s.trim().isEmpty()) {
VOTE6 = Short.parseShort(s);
} else {
VOTE6 = Short.MIN_VALUE;
}
}

protected final void initVOTEINTENT(String s) {
if (!s.trim().isEmpty()) {
VOTEINTENT = Byte.parseByte(s);
} else {
VOTEINTENT = Byte.MIN_VALUE;
}
}

protected final void initVOTENORM(String s) {
if (!s.trim().isEmpty()) {
VOTENORM = Byte.parseByte(s);
} else {
VOTENORM = Byte.MIN_VALUE;
}
}

protected final void initWEKID(String s) {
if (!s.trim().isEmpty()) {
WEKID = Byte.parseByte(s);
} else {
WEKID = Byte.MIN_VALUE;
}
}

protected final void initWHORUAGE(String s) {
if (!s.trim().isEmpty()) {
WHORUAGE = Byte.parseByte(s);
} else {
WHORUAGE = Byte.MIN_VALUE;
}
}

protected final void initWHORUEDU(String s) {
if (!s.trim().isEmpty()) {
WHORUEDU = Byte.parseByte(s);
} else {
WHORUEDU = Byte.MIN_VALUE;
}
}

protected final void initWHORUFAM(String s) {
if (!s.trim().isEmpty()) {
WHORUFAM = Byte.parseByte(s);
} else {
WHORUFAM = Byte.MIN_VALUE;
}
}

protected final void initWHORUPOL(String s) {
if (!s.trim().isEmpty()) {
WHORUPOL = Byte.parseByte(s);
} else {
WHORUPOL = Byte.MIN_VALUE;
}
}

protected final void initWHORUPRO(String s) {
if (!s.trim().isEmpty()) {
WHORUPRO = Byte.parseByte(s);
} else {
WHORUPRO = Byte.MIN_VALUE;
}
}

protected final void initWHORURAC(String s) {
if (!s.trim().isEmpty()) {
WHORURAC = Byte.parseByte(s);
} else {
WHORURAC = Byte.MIN_VALUE;
}
}

protected final void initWHORUSEX(String s) {
if (!s.trim().isEmpty()) {
WHORUSEX = Byte.parseByte(s);
} else {
WHORUSEX = Byte.MIN_VALUE;
}
}

protected final void initWKPLSAM(String s) {
if (!s.trim().isEmpty()) {
WKPLSAM = Byte.parseByte(s);
} else {
WKPLSAM = Byte.MIN_VALUE;
}
}

protected final void initWORDS1(String s) {
if (!s.trim().isEmpty()) {
WORDS1 = Byte.parseByte(s);
} else {
WORDS1 = Byte.MIN_VALUE;
}
}

protected final void initWORDS2(String s) {
if (!s.trim().isEmpty()) {
WORDS2 = Byte.parseByte(s);
} else {
WORDS2 = Byte.MIN_VALUE;
}
}

protected final void initWORDS3(String s) {
if (!s.trim().isEmpty()) {
WORDS3 = Byte.parseByte(s);
} else {
WORDS3 = Byte.MIN_VALUE;
}
}

protected final void initWORDS4(String s) {
if (!s.trim().isEmpty()) {
WORDS4 = Byte.parseByte(s);
} else {
WORDS4 = Byte.MIN_VALUE;
}
}

protected final void initWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
WORKTRAV = Byte.parseByte(s);
} else {
WORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initWRCOMPPRE(String s) {
if (!s.trim().isEmpty()) {
WRCOMPPRE = Byte.parseByte(s);
} else {
WRCOMPPRE = Byte.MIN_VALUE;
}
}

protected final void initWRDRCL(String s) {
if (!s.trim().isEmpty()) {
WRDRCL = Byte.parseByte(s);
} else {
WRDRCL = Byte.MIN_VALUE;
}
}

protected final void initWRDRECPRE(String s) {
if (!s.trim().isEmpty()) {
WRDRECPRE = Byte.parseByte(s);
} else {
WRDRECPRE = Byte.MIN_VALUE;
}
}

protected final void initWRINTPRE(String s) {
if (!s.trim().isEmpty()) {
WRINTPRE = Byte.parseByte(s);
} else {
WRINTPRE = Byte.MIN_VALUE;
}
}

protected final void initXPMOVE(String s) {
if (!s.trim().isEmpty()) {
XPMOVE = Byte.parseByte(s);
} else {
XPMOVE = Byte.MIN_VALUE;
}
}

protected final void initXTRA5MINOSM_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MINOSM_DV = Byte.parseByte(s);
} else {
XTRA5MINOSM_DV = Byte.MIN_VALUE;
}
}

protected final void initXTRA5MIN_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MIN_DV = Byte.parseByte(s);
} else {
XTRA5MIN_DV = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV1(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV1 = Byte.parseByte(s);
} else {
YAJBSRV1 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV2(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV2 = Byte.parseByte(s);
} else {
YAJBSRV2 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV3(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV3 = Byte.parseByte(s);
} else {
YAJBSRV3 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV4(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV4 = Byte.parseByte(s);
} else {
YAJBSRV4 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV5(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV5 = Byte.parseByte(s);
} else {
YAJBSRV5 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV6(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV6 = Byte.parseByte(s);
} else {
YAJBSRV6 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV7(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV7 = Byte.parseByte(s);
} else {
YAJBSRV7 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV96(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV96 = Byte.parseByte(s);
} else {
YAJBSRV96 = Byte.MIN_VALUE;
}
}

protected final void initYANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
YANSSEC5_DV = Byte.parseByte(s);
} else {
YANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initYASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC00_CC = Short.parseShort(s);
} else {
YASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC10_CC = Short.parseShort(s);
} else {
YASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC90_CC = Byte.parseByte(s);
} else {
YASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initYELLKID(String s) {
if (!s.trim().isEmpty()) {
YELLKID = Byte.parseByte(s);
} else {
YELLKID = Byte.MIN_VALUE;
}
}

public byte getADCTS() {
return ADCTS;
}

public byte getADOPTCH01() {
return ADOPTCH01;
}

public byte getADOPTCH02() {
return ADOPTCH02;
}

public byte getADOPTCH03() {
return ADOPTCH03;
}

public byte getADOPTCH04() {
return ADOPTCH04;
}

public byte getADOPTCH05() {
return ADOPTCH05;
}

public byte getADOPTCH06() {
return ADOPTCH06;
}

public boolean getADOPTCH07() {
return ADOPTCH07;
}

public boolean getADOPTCH08() {
return ADOPTCH08;
}

public boolean getADOPTCH09() {
return ADOPTCH09;
}

public boolean getADOPTCH10() {
return ADOPTCH10;
}

public boolean getADOPTCH11() {
return ADOPTCH11;
}

public boolean getADOPTCH12() {
return ADOPTCH12;
}

public boolean getADOPTCH13() {
return ADOPTCH13;
}

public boolean getADOPTCH14() {
return ADOPTCH14;
}

public boolean getADOPTCH15() {
return ADOPTCH15;
}

public boolean getADOPTCH16() {
return ADOPTCH16;
}

public byte getADSTATUS() {
return ADSTATUS;
}

public byte getAEDROF1() {
return AEDROF1;
}

public byte getAEDROF2() {
return AEDROF2;
}

public byte getAEDROF3() {
return AEDROF3;
}

protected double AEPUDA1() {
return AEPUDA1;
}

public byte getAEPUDA2() {
return AEPUDA2;
}

public byte getAEPUDA3() {
return AEPUDA3;
}

public byte getAEPUWK1() {
return AEPUWK1;
}

public byte getAEPUWK2() {
return AEPUWK2;
}

public byte getAEPUWK3() {
return AEPUWK3;
}

public byte getAGEGR10_DV() {
return AGEGR10_DV;
}

public byte getAGEGR13_DV() {
return AGEGR13_DV;
}

public byte getAGEGR5_DV() {
return AGEGR5_DV;
}

public byte getAGERET() {
return AGERET;
}

public short getAGE_DV() {
return AGE_DV;
}

public byte getAHVWELL() {
return AHVWELL;
}

public byte getAIDEFT() {
return AIDEFT;
}

public short getAIDHU1() {
return AIDHU1;
}

public short getAIDHU2() {
return AIDHU2;
}

public byte getAIDHUA1() {
return AIDHUA1;
}

public byte getAIDHUA10() {
return AIDHUA10;
}

public byte getAIDHUA11() {
return AIDHUA11;
}

public byte getAIDHUA12() {
return AIDHUA12;
}

public byte getAIDHUA13() {
return AIDHUA13;
}

public byte getAIDHUA14() {
return AIDHUA14;
}

public byte getAIDHUA15() {
return AIDHUA15;
}

public byte getAIDHUA16() {
return AIDHUA16;
}

public byte getAIDHUA2() {
return AIDHUA2;
}

public byte getAIDHUA3() {
return AIDHUA3;
}

public byte getAIDHUA4() {
return AIDHUA4;
}

public byte getAIDHUA5() {
return AIDHUA5;
}

public byte getAIDHUA6() {
return AIDHUA6;
}

public byte getAIDHUA7() {
return AIDHUA7;
}

public byte getAIDHUA8() {
return AIDHUA8;
}

public byte getAIDHUA9() {
return AIDHUA9;
}

public byte getALLCH01() {
return ALLCH01;
}

public byte getALLCH02() {
return ALLCH02;
}

public byte getALLCH03() {
return ALLCH03;
}

public byte getALLCH04() {
return ALLCH04;
}

public byte getALLCH05() {
return ALLCH05;
}

public byte getALLCH06() {
return ALLCH06;
}

public byte getALLCH07() {
return ALLCH07;
}

public byte getALLCH08() {
return ALLCH08;
}

public byte getALLCH09() {
return ALLCH09;
}

public byte getALLCH10() {
return ALLCH10;
}

public boolean getALLCH11() {
return ALLCH11;
}

public boolean getALLCH12() {
return ALLCH12;
}

public boolean getALLCH13() {
return ALLCH13;
}

public boolean getALLCH14() {
return ALLCH14;
}

public boolean getALLCH15() {
return ALLCH15;
}

public boolean getALLCH16() {
return ALLCH16;
}

public byte getAPVOCIMP() {
return APVOCIMP;
}

public byte getAREA() {
return AREA;
}

public byte getARGF() {
return ARGF;
}

public byte getARGM() {
return ARGM;
}

public byte getATTACKED1() {
return ATTACKED1;
}

public byte getATTACKED10() {
return ATTACKED10;
}

public byte getATTACKED11() {
return ATTACKED11;
}

public byte getATTACKED2() {
return ATTACKED2;
}

public byte getATTACKED3() {
return ATTACKED3;
}

public byte getATTACKED4() {
return ATTACKED4;
}

public byte getATTACKED5() {
return ATTACKED5;
}

public byte getATTACKED6() {
return ATTACKED6;
}

public byte getATTACKED7() {
return ATTACKED7;
}

public byte getATTACKED8() {
return ATTACKED8;
}

public byte getATTACKED9() {
return ATTACKED9;
}

public byte getATTACKED96() {
return ATTACKED96;
}

public byte getATTACKED97() {
return ATTACKED97;
}

public byte getATTACKEDO_CODE() {
return ATTACKEDO_CODE;
}

public byte getATTACKED_DV() {
return ATTACKED_DV;
}

public byte getAVOIDANCE1() {
return AVOIDANCE1;
}

public byte getAVOIDANCE10() {
return AVOIDANCE10;
}

public byte getAVOIDANCE11() {
return AVOIDANCE11;
}

public byte getAVOIDANCE2() {
return AVOIDANCE2;
}

public byte getAVOIDANCE3() {
return AVOIDANCE3;
}

public byte getAVOIDANCE4() {
return AVOIDANCE4;
}

public byte getAVOIDANCE5() {
return AVOIDANCE5;
}

public byte getAVOIDANCE6() {
return AVOIDANCE6;
}

public byte getAVOIDANCE7() {
return AVOIDANCE7;
}

public byte getAVOIDANCE8() {
return AVOIDANCE8;
}

public byte getAVOIDANCE9() {
return AVOIDANCE9;
}

public byte getAVOIDANCE96() {
return AVOIDANCE96;
}

public byte getAVOIDANCE97() {
return AVOIDANCE97;
}

public byte getAVOIDANCEO_CODE() {
return AVOIDANCEO_CODE;
}

public byte getAVOIDED_DV() {
return AVOIDED_DV;
}

protected double BASNSA() {
return BASNSA;
}

protected double BASRATE() {
return BASRATE;
}

public byte getBASREST() {
return BASREST;
}

public byte getBENCB() {
return BENCB;
}

public byte getBENCTC() {
return BENCTC;
}

public byte getBENDIS1() {
return BENDIS1;
}

public byte getBENDIS10() {
return BENDIS10;
}

public byte getBENDIS12() {
return BENDIS12;
}

public byte getBENDIS13() {
return BENDIS13;
}

public byte getBENDIS14() {
return BENDIS14;
}

public byte getBENDIS15() {
return BENDIS15;
}

public byte getBENDIS16() {
return BENDIS16;
}

public byte getBENDIS2() {
return BENDIS2;
}

public byte getBENDIS3() {
return BENDIS3;
}

public byte getBENDIS4() {
return BENDIS4;
}

public byte getBENDIS5() {
return BENDIS5;
}

public byte getBENDIS6() {
return BENDIS6;
}

public byte getBENDIS7() {
return BENDIS7;
}

public byte getBENDIS8() {
return BENDIS8;
}

public byte getBENDIS9() {
return BENDIS9;
}

public byte getBENDIS96() {
return BENDIS96;
}

public byte getBENDIS97() {
return BENDIS97;
}

public byte getBENFAM1() {
return BENFAM1;
}

public byte getBENFAM10() {
return BENFAM10;
}

public byte getBENFAM2() {
return BENFAM2;
}

public byte getBENFAM3() {
return BENFAM3;
}

public byte getBENFAM4() {
return BENFAM4;
}

public byte getBENFAM5() {
return BENFAM5;
}

public byte getBENFAM6() {
return BENFAM6;
}

public byte getBENFAM7() {
return BENFAM7;
}

public byte getBENFAM8() {
return BENFAM8;
}

public byte getBENFAM9() {
return BENFAM9;
}

public byte getBENFAM96() {
return BENFAM96;
}

public byte getBENHOU1() {
return BENHOU1;
}

public byte getBENHOU2() {
return BENHOU2;
}

public byte getBENHOU3() {
return BENHOU3;
}

public byte getBENHOU4() {
return BENHOU4;
}

public byte getBENHOU5() {
return BENHOU5;
}

public byte getBENHOU6() {
return BENHOU6;
}

public byte getBENHOU7() {
return BENHOU7;
}

public byte getBENHOU8() {
return BENHOU8;
}

public byte getBENHOU9() {
return BENHOU9;
}

public byte getBENHOU96() {
return BENHOU96;
}

public byte getBENPEN1() {
return BENPEN1;
}

public byte getBENPEN10() {
return BENPEN10;
}

public byte getBENPEN11() {
return BENPEN11;
}

public byte getBENPEN12() {
return BENPEN12;
}

public byte getBENPEN13() {
return BENPEN13;
}

public byte getBENPEN2() {
return BENPEN2;
}

public byte getBENPEN3() {
return BENPEN3;
}

public byte getBENPEN4() {
return BENPEN4;
}

public byte getBENPEN5() {
return BENPEN5;
}

public byte getBENPEN6() {
return BENPEN6;
}

public byte getBENPEN7() {
return BENPEN7;
}

public byte getBENPEN8() {
return BENPEN8;
}

public byte getBENPEN9() {
return BENPEN9;
}

public byte getBENPEN96() {
return BENPEN96;
}

public byte getBENSTA1() {
return BENSTA1;
}

public byte getBENSTA10() {
return BENSTA10;
}

public byte getBENSTA11() {
return BENSTA11;
}

public byte getBENSTA12() {
return BENSTA12;
}

public byte getBENSTA13() {
return BENSTA13;
}

public byte getBENSTA2() {
return BENSTA2;
}

public byte getBENSTA3() {
return BENSTA3;
}

public byte getBENSTA4() {
return BENSTA4;
}

public byte getBENSTA5() {
return BENSTA5;
}

public byte getBENSTA6() {
return BENSTA6;
}

public byte getBENSTA7() {
return BENSTA7;
}

public byte getBENSTA9() {
return BENSTA9;
}

public byte getBENSTA96() {
return BENSTA96;
}

public byte getBENSTA97() {
return BENSTA97;
}

public byte getBENTAX1() {
return BENTAX1;
}

public byte getBENTAX10() {
return BENTAX10;
}

public byte getBENTAX2() {
return BENTAX2;
}

public byte getBENTAX3() {
return BENTAX3;
}

public byte getBENTAX4() {
return BENTAX4;
}

public byte getBENTAX5() {
return BENTAX5;
}

public byte getBENTAX6() {
return BENTAX6;
}

public byte getBENTAX7() {
return BENTAX7;
}

public byte getBENTAX8() {
return BENTAX8;
}

public byte getBENTAX9() {
return BENTAX9;
}

public byte getBENTAX96() {
return BENTAX96;
}

public byte getBENUNEMP1() {
return BENUNEMP1;
}

public byte getBENUNEMP2() {
return BENUNEMP2;
}

public byte getBENUNEMP3() {
return BENUNEMP3;
}

public byte getBENUNEMP4() {
return BENUNEMP4;
}

public byte getBENUNEMP5() {
return BENUNEMP5;
}

public byte getBENUNEMP6() {
return BENUNEMP6;
}

public byte getBENUNEMP7() {
return BENUNEMP7;
}

public byte getBENUNEMP96() {
return BENUNEMP96;
}

public byte getBIG5A_DV() {
return BIG5A_DV;
}

public byte getBIG5DV() {
return BIG5DV;
}

public byte getBIG5E_DV() {
return BIG5E_DV;
}

public byte getBIG5N_DV() {
return BIG5N_DV;
}

public byte getBIG5O_DV() {
return BIG5O_DV;
}

public short getBIRTHY() {
return BIRTHY;
}

public byte getBRITID() {
return BRITID;
}

public byte getBTYPE1() {
return BTYPE1;
}

public byte getBTYPE10() {
return BTYPE10;
}

public byte getBTYPE11() {
return BTYPE11;
}

public byte getBTYPE12() {
return BTYPE12;
}

public byte getBTYPE13() {
return BTYPE13;
}

public byte getBTYPE14() {
return BTYPE14;
}

public byte getBTYPE2() {
return BTYPE2;
}

public byte getBTYPE3() {
return BTYPE3;
}

public byte getBTYPE4() {
return BTYPE4;
}

public byte getBTYPE5() {
return BTYPE5;
}

public byte getBTYPE6() {
return BTYPE6;
}

public byte getBTYPE7() {
return BTYPE7;
}

public byte getBTYPE8() {
return BTYPE8;
}

public byte getBTYPE9() {
return BTYPE9;
}

public byte getBTYPE96() {
return BTYPE96;
}

public byte getBUNO_DV() {
return BUNO_DV;
}

public byte getCAIDU1() {
return CAIDU1;
}

public byte getCAIDU2() {
return CAIDU2;
}

public byte getCAIDU3() {
return CAIDU3;
}

public byte getCAIDU4() {
return CAIDU4;
}

public byte getCAIDU5() {
return CAIDU5;
}

public byte getCAIDU6() {
return CAIDU6;
}

public byte getCAIDU7() {
return CAIDU7;
}

public byte getCAIDU8() {
return CAIDU8;
}

public byte getCAIDU96() {
return CAIDU96;
}

public byte getCAIDU97() {
return CAIDU97;
}

public byte getCASIEND() {
return CASIEND;
}

public byte getCCARE() {
return CCARE;
}

public byte getCCWORK() {
return CCWORK;
}

public byte getCGIVNA1_DV() {
return CGIVNA1_DV;
}

public byte getCGIVNS1_DV() {
return CGIVNS1_DV;
}

public byte getCGIVS71_DV() {
return CGIVS71_DV;
}

public byte getCGIVVF1_DV() {
return CGIVVF1_DV;
}

public byte getCGIVWRD1_DV() {
return CGIVWRD1_DV;
}

public byte getCGIVWRI1_DV() {
return CGIVWRI1_DV;
}

public byte getCGNA_DV() {
return CGNA_DV;
}

public byte getCGNS1A_DV() {
return CGNS1A_DV;
}

public byte getCGNS1B_DV() {
return CGNS1B_DV;
}

public short getCGNS1SC10_DV() {
return CGNS1SC10_DV;
}

public byte getCGNS1SC6_DV() {
return CGNS1SC6_DV;
}

public byte getCGNS2A_DV() {
return CGNS2A_DV;
}

public byte getCGNS2B_DV() {
return CGNS2B_DV;
}

public short getCGNS2SC10_DV() {
return CGNS2SC10_DV;
}

public byte getCGNS2SC6_DV() {
return CGNS2SC6_DV;
}

public byte getCGS7CA_DV() {
return CGS7CA_DV;
}

public byte getCGS7CS_DV() {
return CGS7CS_DV;
}

public byte getCGS7N_DV() {
return CGS7N_DV;
}

public byte getCGSRMEM2_DV() {
return CGSRMEM2_DV;
}

public byte getCGSRMEM_DV() {
return CGSRMEM_DV;
}

public byte getCGVFDV() {
return CGVFDV;
}

public byte getCGVFW_DV() {
return CGVFW_DV;
}

public byte getCGWRD_DV() {
return CGWRD_DV;
}

public byte getCGWRI1_DV() {
return CGWRI1_DV;
}

public byte getCGWRI2_DV() {
return CGWRI2_DV;
}

public byte getCGWRI3_DV() {
return CGWRI3_DV;
}

public byte getCGWRI4_DV() {
return CGWRI4_DV;
}

public byte getCGWRI_DV() {
return CGWRI_DV;
}

public short getCH1BY4() {
return CH1BY4;
}

public byte getCHAID1() {
return CHAID1;
}

public byte getCHAID2() {
return CHAID2;
}

public byte getCHAID3() {
return CHAID3;
}

public byte getCHAID4() {
return CHAID4;
}

public byte getCHAID5() {
return CHAID5;
}

public byte getCHAID6() {
return CHAID6;
}

public byte getCHAID7() {
return CHAID7;
}

public byte getCHAID8() {
return CHAID8;
}

public byte getCHAID96() {
return CHAID96;
}

public byte getCHAID97() {
return CHAID97;
}

public byte getCHCON() {
return CHCON;
}

public byte getCHFAR() {
return CHFAR;
}

public byte getCHILDPNO() {
return CHILDPNO;
}

public byte getCHKRESP() {
return CHKRESP;
}

public byte getCHSEE() {
return CHSEE;
}

public int getCINDTIME() {
return CINDTIME;
}

public byte getCITZN1() {
return CITZN1;
}

public byte getCITZN2() {
return CITZN2;
}

public byte getCITZN3() {
return CITZN3;
}

public byte getCIVICDUTY() {
return CIVICDUTY;
}

public byte getCJBATT() {
return CJBATT;
}

public byte getCJOB() {
return CJOB;
}

public byte getCLANGAB() {
return CLANGAB;
}

public short getCLOSENUM() {
return CLOSENUM;
}

public byte getCMCORD() {
return CMCORD;
}

public byte getCMCORDALL() {
return CMCORDALL;
}

protected double CMCORDAM() {
return CMCORDAM;
}

public byte getCMCORDPER() {
return CMCORDPER;
}

public short getCMCORDRCAM() {
return CMCORDRCAM;
}

public byte getCMCORDRCPR() {
return CMCORDRCPR;
}

public byte getCMCORDREC() {
return CMCORDREC;
}

public byte getCMCORDTM() {
return CMCORDTM;
}

public byte getCMCSAACT() {
return CMCSAACT;
}

public byte getCMCSAALL() {
return CMCSAALL;
}

public short getCMCSAAM() {
return CMCSAAM;
}

public byte getCMCSANIL1() {
return CMCSANIL1;
}

public byte getCMCSANIL2() {
return CMCSANIL2;
}

public byte getCMCSANIL3() {
return CMCSANIL3;
}

public byte getCMCSANIL4() {
return CMCSANIL4;
}

public byte getCMCSANIL5() {
return CMCSANIL5;
}

public byte getCMCSANIL97() {
return CMCSANIL97;
}

public byte getCMCSAPER() {
return CMCSAPER;
}

public byte getCMCSAPR() {
return CMCSAPR;
}

public byte getCMKNDEVR1() {
return CMKNDEVR1;
}

public byte getCMKNDEVR2() {
return CMKNDEVR2;
}

public byte getCMKNDEVR3() {
return CMKNDEVR3;
}

public byte getCMKNDEVR4() {
return CMKNDEVR4;
}

public byte getCMKNDEVR96() {
return CMKNDEVR96;
}

public byte getCMKNDEVR97() {
return CMKNDEVR97;
}

public byte getCMLSTAT1() {
return CMLSTAT1;
}

public byte getCMLSTAT2() {
return CMLSTAT2;
}

public byte getCMNIL1() {
return CMNIL1;
}

public byte getCMNIL2() {
return CMNIL2;
}

public byte getCMNIL3() {
return CMNIL3;
}

public byte getCMNIL4() {
return CMNIL4;
}

public byte getCMNIL5() {
return CMNIL5;
}

public byte getCMNIL6() {
return CMNIL6;
}

public byte getCMNIL7() {
return CMNIL7;
}

public byte getCMNIL8() {
return CMNIL8;
}

public byte getCMNIL9() {
return CMNIL9;
}

public byte getCMNIL97() {
return CMNIL97;
}

public byte getCMOTHPAY1() {
return CMOTHPAY1;
}

public byte getCMOTHPAY10() {
return CMOTHPAY10;
}

public byte getCMOTHPAY11() {
return CMOTHPAY11;
}

public byte getCMOTHPAY2() {
return CMOTHPAY2;
}

public byte getCMOTHPAY3() {
return CMOTHPAY3;
}

public byte getCMOTHPAY4() {
return CMOTHPAY4;
}

public byte getCMOTHPAY5() {
return CMOTHPAY5;
}

public byte getCMOTHPAY6() {
return CMOTHPAY6;
}

public byte getCMOTHPAY7() {
return CMOTHPAY7;
}

public byte getCMOTHPAY8() {
return CMOTHPAY8;
}

public byte getCMOTHPAY9() {
return CMOTHPAY9;
}

public byte getCMOTHPAY96() {
return CMOTHPAY96;
}

public byte getCMOTHPAY97() {
return CMOTHPAY97;
}

public byte getCMROUTE() {
return CMROUTE;
}

public byte getCMSAMEA() {
return CMSAMEA;
}

public byte getCMSAMEB() {
return CMSAMEB;
}

public byte getCMSAMEC() {
return CMSAMEC;
}

public byte getCMVOL() {
return CMVOL;
}

public byte getCMVOLALL() {
return CMVOLALL;
}

protected double CMVOLAM() {
return CMVOLAM;
}

public byte getCMVOLPER() {
return CMVOLPER;
}

public short getCMVOLRCAM() {
return CMVOLRCAM;
}

public byte getCMVOLRCPR() {
return CMVOLRCPR;
}

public byte getCMVOLREC() {
return CMVOLREC;
}

public byte getCMVOLTM() {
return CMVOLTM;
}

public byte getCOGDIST() {
return COGDIST;
}

public byte getCOGEND() {
return COGEND;
}

public byte getCOH1BM() {
return COH1BM;
}

public short getCOH1BY() {
return COH1BY;
}

public byte getCOH1EM() {
return COH1EM;
}

public short getCOH1EY() {
return COH1EY;
}

public byte getCOH1MR() {
return COH1MR;
}

public byte getCOHAB() {
return COHAB;
}

public byte getCOHABN() {
return COHABN;
}

public boolean getCOHAB_DV() {
return COHAB_DV;
}

public byte getCOLBENS1() {
return COLBENS1;
}

public byte getCOLBENS2() {
return COLBENS2;
}

public byte getCOLBENS3() {
return COLBENS3;
}

public byte getCOLBENS4() {
return COLBENS4;
}

public byte getCOMIMMLS11() {
return COMIMMLS11;
}

public byte getCOMIMMLS110() {
return COMIMMLS110;
}

public byte getCOMIMMLS12() {
return COMIMMLS12;
}

public byte getCOMIMMLS13() {
return COMIMMLS13;
}

public byte getCOMIMMLS14() {
return COMIMMLS14;
}

public byte getCOMIMMLS15() {
return COMIMMLS15;
}

public byte getCOMIMMLS16() {
return COMIMMLS16;
}

public byte getCOMIMMLS17() {
return COMIMMLS17;
}

public byte getCOMIMMLS18() {
return COMIMMLS18;
}

public byte getCOMIMMLS19() {
return COMIMMLS19;
}

public byte getCOMIMMLS196() {
return COMIMMLS196;
}

public byte getCOMIMMLS21() {
return COMIMMLS21;
}

public byte getCOMIMMLS210() {
return COMIMMLS210;
}

public byte getCOMIMMLS22() {
return COMIMMLS22;
}

public byte getCOMIMMLS23() {
return COMIMMLS23;
}

public byte getCOMIMMLS24() {
return COMIMMLS24;
}

public byte getCOMIMMLS25() {
return COMIMMLS25;
}

public byte getCOMIMMLS26() {
return COMIMMLS26;
}

public byte getCOMIMMLS27() {
return COMIMMLS27;
}

public byte getCOMIMMLS28() {
return COMIMMLS28;
}

public byte getCOMIMMLS29() {
return COMIMMLS29;
}

public byte getCOMIMMLS296() {
return COMIMMLS296;
}

public byte getCOMIMMLS31() {
return COMIMMLS31;
}

public byte getCOMIMMLS310() {
return COMIMMLS310;
}

public byte getCOMIMMLS32() {
return COMIMMLS32;
}

public byte getCOMIMMLS33() {
return COMIMMLS33;
}

public byte getCOMIMMLS34() {
return COMIMMLS34;
}

public byte getCOMIMMLS35() {
return COMIMMLS35;
}

public byte getCOMIMMLS36() {
return COMIMMLS36;
}

public byte getCOMIMMLS37() {
return COMIMMLS37;
}

public byte getCOMIMMLS38() {
return COMIMMLS38;
}

public byte getCOMIMMLS39() {
return COMIMMLS39;
}

public byte getCOMIMMLS396() {
return COMIMMLS396;
}

public byte getCOMIMMLS41() {
return COMIMMLS41;
}

public byte getCOMIMMLS410() {
return COMIMMLS410;
}

public byte getCOMIMMLS42() {
return COMIMMLS42;
}

public byte getCOMIMMLS43() {
return COMIMMLS43;
}

public byte getCOMIMMLS44() {
return COMIMMLS44;
}

public byte getCOMIMMLS45() {
return COMIMMLS45;
}

public byte getCOMIMMLS46() {
return COMIMMLS46;
}

public byte getCOMIMMLS47() {
return COMIMMLS47;
}

public byte getCOMIMMLS48() {
return COMIMMLS48;
}

public byte getCOMIMMLS49() {
return COMIMMLS49;
}

public byte getCOMIMMLS496() {
return COMIMMLS496;
}

public byte getCONTFT() {
return CONTFT;
}

public byte getCORDRECPER() {
return CORDRECPER;
}

public byte getCOUNTRY() {
return COUNTRY;
}

public byte getCRDARK() {
return CRDARK;
}

public byte getCRWORA() {
return CRWORA;
}

public byte getCRWORB() {
return CRWORB;
}

public byte getCSACALC() {
return CSACALC;
}

protected double CSACALCAM() {
return CSACALCAM;
}

public byte getCSAPAYTO() {
return CSAPAYTO;
}

public byte getCSARECPER() {
return CSARECPER;
}

public byte getCSTAT() {
return CSTAT;
}

public byte getCTADD1_CODE() {
return CTADD1_CODE;
}

public byte getCTADD2_CODE() {
return CTADD2_CODE;
}

public byte getCTCNTY_CODE() {
return CTCNTY_CODE;
}

public byte getCTEMAIL_CODE() {
return CTEMAIL_CODE;
}

public byte getCTPCODE_CODE() {
return CTPCODE_CODE;
}

public byte getCTTEL1_CODE() {
return CTTEL1_CODE;
}

public byte getCTTEL2_CODE() {
return CTTEL2_CODE;
}

public byte getCTTOWN_CODE() {
return CTTOWN_CODE;
}

public byte getCUDDLEKID() {
return CUDDLEKID;
}

public byte getCURRJOB1() {
return CURRJOB1;
}

public byte getCURRJOB2() {
return CURRJOB2;
}

public byte getCURRJOB3() {
return CURRJOB3;
}

public byte getCURRJOB4() {
return CURRJOB4;
}

public byte getCURRJOB5() {
return CURRJOB5;
}

public byte getCURRJOB6() {
return CURRJOB6;
}

public byte getCURRJOB7() {
return CURRJOB7;
}

public byte getCURRJOB8() {
return CURRJOB8;
}

public byte getCURRJOB9() {
return CURRJOB9;
}

public byte getCURRPART1() {
return CURRPART1;
}

public byte getCURRPART2() {
return CURRPART2;
}

public byte getCURRPART3() {
return CURRPART3;
}

public byte getCURRSTAT1() {
return CURRSTAT1;
}

public byte getCURRSTAT2() {
return CURRSTAT2;
}

public byte getCURRSTAT3() {
return CURRSTAT3;
}

public byte getCURRSTAT4() {
return CURRSTAT4;
}

public byte getCURRSTAT5() {
return CURRSTAT5;
}

public byte getCURRSTAT6() {
return CURRSTAT6;
}

public byte getCURRSTAT7() {
return CURRSTAT7;
}

public byte getCURRSTAT8() {
return CURRSTAT8;
}

public boolean getCURRSTAT9() {
return CURRSTAT9;
}

public byte getDCSATM() {
return DCSATM;
}

public byte getDELAYLS11() {
return DELAYLS11;
}

public byte getDELAYLS110() {
return DELAYLS110;
}

public byte getDELAYLS12() {
return DELAYLS12;
}

public byte getDELAYLS13() {
return DELAYLS13;
}

public byte getDELAYLS14() {
return DELAYLS14;
}

public byte getDELAYLS15() {
return DELAYLS15;
}

public byte getDELAYLS16() {
return DELAYLS16;
}

public byte getDELAYLS17() {
return DELAYLS17;
}

public byte getDELAYLS18() {
return DELAYLS18;
}

public byte getDELAYLS19() {
return DELAYLS19;
}

public byte getDELAYLS196() {
return DELAYLS196;
}

public byte getDELAYLS21() {
return DELAYLS21;
}

public byte getDELAYLS210() {
return DELAYLS210;
}

public byte getDELAYLS22() {
return DELAYLS22;
}

public byte getDELAYLS23() {
return DELAYLS23;
}

public byte getDELAYLS24() {
return DELAYLS24;
}

public byte getDELAYLS25() {
return DELAYLS25;
}

public byte getDELAYLS26() {
return DELAYLS26;
}

public byte getDELAYLS27() {
return DELAYLS27;
}

public byte getDELAYLS28() {
return DELAYLS28;
}

public byte getDELAYLS29() {
return DELAYLS29;
}

public byte getDELAYLS296() {
return DELAYLS296;
}

public byte getDELAYLS31() {
return DELAYLS31;
}

public byte getDELAYLS310() {
return DELAYLS310;
}

public byte getDELAYLS32() {
return DELAYLS32;
}

public byte getDELAYLS33() {
return DELAYLS33;
}

public byte getDELAYLS34() {
return DELAYLS34;
}

public byte getDELAYLS35() {
return DELAYLS35;
}

public byte getDELAYLS36() {
return DELAYLS36;
}

public byte getDELAYLS37() {
return DELAYLS37;
}

public byte getDELAYLS38() {
return DELAYLS38;
}

public byte getDELAYLS39() {
return DELAYLS39;
}

public byte getDELAYLS396() {
return DELAYLS396;
}

public byte getDELAYLS41() {
return DELAYLS41;
}

public byte getDELAYLS410() {
return DELAYLS410;
}

public byte getDELAYLS42() {
return DELAYLS42;
}

public byte getDELAYLS43() {
return DELAYLS43;
}

public byte getDELAYLS44() {
return DELAYLS44;
}

public byte getDELAYLS45() {
return DELAYLS45;
}

public byte getDELAYLS46() {
return DELAYLS46;
}

public byte getDELAYLS47() {
return DELAYLS47;
}

public byte getDELAYLS48() {
return DELAYLS48;
}

public byte getDELAYLS49() {
return DELAYLS49;
}

public byte getDELAYLS496() {
return DELAYLS496;
}

public byte getDELAYSTOP1() {
return DELAYSTOP1;
}

public byte getDELAYSTOP2() {
return DELAYSTOP2;
}

public byte getDELAYSTOP3() {
return DELAYSTOP3;
}

public byte getDELAYSTOP4() {
return DELAYSTOP4;
}

public byte getDELAYSTOP5() {
return DELAYSTOP5;
}

public byte getDELAYSTOP6() {
return DELAYSTOP6;
}

public byte getDELAYSTOP7() {
return DELAYSTOP7;
}

public byte getDELAYSTOP8() {
return DELAYSTOP8;
}

public byte getDELAYSTOP97() {
return DELAYSTOP97;
}

public byte getDEMORIENT() {
return DEMORIENT;
}

public boolean getDEPCHL_DV() {
return DEPCHL_DV;
}

public byte getDINNER() {
return DINNER;
}

public byte getDISDIF1() {
return DISDIF1;
}

public byte getDISDIF10() {
return DISDIF10;
}

public byte getDISDIF11() {
return DISDIF11;
}

public byte getDISDIF12() {
return DISDIF12;
}

public byte getDISDIF2() {
return DISDIF2;
}

public byte getDISDIF3() {
return DISDIF3;
}

public byte getDISDIF4() {
return DISDIF4;
}

public byte getDISDIF5() {
return DISDIF5;
}

public byte getDISDIF6() {
return DISDIF6;
}

public byte getDISDIF7() {
return DISDIF7;
}

public byte getDISDIF8() {
return DISDIF8;
}

public byte getDISDIF9() {
return DISDIF9;
}

public byte getDISDIF96() {
return DISDIF96;
}

public byte getDISEFFECTS1() {
return DISEFFECTS1;
}

public byte getDISEFFECTS2() {
return DISEFFECTS2;
}

public byte getDISEFFECTS3() {
return DISEFFECTS3;
}

public byte getDISEFFECTS4() {
return DISEFFECTS4;
}

public byte getDISEFFECTS5() {
return DISEFFECTS5;
}

public byte getDIVCHK1() {
return DIVCHK1;
}

public byte getDIVCHK2() {
return DIVCHK2;
}

public byte getDIVFIN1() {
return DIVFIN1;
}

public byte getDIVFIN2() {
return DIVFIN2;
}

public byte getDKLM() {
return DKLM;
}

public byte getDMEMCONT11() {
return DMEMCONT11;
}

public byte getDMEMCONT12() {
return DMEMCONT12;
}

public byte getDMEMCONT13() {
return DMEMCONT13;
}

public byte getDMEMCONT21() {
return DMEMCONT21;
}

public byte getDMEMCONT210() {
return DMEMCONT210;
}

public byte getDMEMCONT211() {
return DMEMCONT211;
}

public byte getDMEMCONT212() {
return DMEMCONT212;
}

public byte getDMEMCONT213() {
return DMEMCONT213;
}

public byte getDMEMCONT214() {
return DMEMCONT214;
}

public byte getDMEMCONT215() {
return DMEMCONT215;
}

public byte getDMEMCONT216() {
return DMEMCONT216;
}

public byte getDMEMCONT22() {
return DMEMCONT22;
}

public byte getDMEMCONT23() {
return DMEMCONT23;
}

public byte getDMEMCONT24() {
return DMEMCONT24;
}

public byte getDMEMCONT25() {
return DMEMCONT25;
}

public byte getDMEMCONT26() {
return DMEMCONT26;
}

public byte getDMEMCONT27() {
return DMEMCONT27;
}

public byte getDMEMCONT28() {
return DMEMCONT28;
}

public byte getDMEMCONT29() {
return DMEMCONT29;
}

public byte getDMEMCONT3() {
return DMEMCONT3;
}

public short getDOBY_DV() {
return DOBY_DV;
}

public byte getDRGMJ() {
return DRGMJ;
}

public byte getDRGOTH() {
return DRGOTH;
}

public byte getDRGSOL() {
return DRGSOL;
}

public byte getDRIVE() {
return DRIVE;
}

public byte getDRNK4W() {
return DRNK4W;
}

public byte getDVAGE() {
return DVAGE;
}

public byte getDVM1() {
return DVM1;
}

public byte getDVM2() {
return DVM2;
}

public short getDVY41() {
return DVY41;
}

public short getDVY42() {
return DVY42;
}

public byte getEATLIVU() {
return EATLIVU;
}

public byte getEDASP() {
return EDASP;
}

public short getEDTYPE() {
return EDTYPE;
}

public byte getEDUCATION() {
return EDUCATION;
}

public byte getEED12() {
return EED12;
}

public byte getEMPCHK() {
return EMPCHK;
}

public byte getEMPLOY() {
return EMPLOY;
}

public byte getEMPSTENDD() {
return EMPSTENDD;
}

public byte getEMPSTENDM() {
return EMPSTENDM;
}

public short getEMPSTENDY4() {
return EMPSTENDY4;
}

public byte getENDMNTH1() {
return ENDMNTH1;
}

public byte getENDMNTH2() {
return ENDMNTH2;
}

public byte getENDMNTH3() {
return ENDMNTH3;
}

public short getEPROSH() {
return EPROSH;
}

public byte getETHN_DV() {
return ETHN_DV;
}

public byte getEVRALC() {
return EVRALC;
}

public byte getEVRSMO() {
return EVRSMO;
}

public byte getEXPREAM() {
return EXPREAM;
}

public byte getEXSAME() {
return EXSAME;
}

public byte getEXTNSA() {
return EXTNSA;
}

protected double EXTRATE() {
return EXTRATE;
}

public byte getEXTREST() {
return EXTREST;
}

public byte getFAMILY() {
return FAMILY;
}

public byte getFAMSUP() {
return FAMSUP;
}

public byte getFARKID() {
return FARKID;
}

public byte getFATHER() {
return FATHER;
}

public byte getFEDLIK() {
return FEDLIK;
}

public byte getFEDNT() {
return FEDNT;
}

public byte getFEDNTO_CODE() {
return FEDNTO_CODE;
}

public byte getFENOW() {
return FENOW;
}

public byte getFFBRFEDLW() {
return FFBRFEDLW;
}

public byte getFF_BENTYPE01() {
return FF_BENTYPE01;
}

public byte getFF_BENTYPE02() {
return FF_BENTYPE02;
}

public byte getFF_BENTYPE03() {
return FF_BENTYPE03;
}

public byte getFF_BENTYPE04() {
return FF_BENTYPE04;
}

public byte getFF_BENTYPE05() {
return FF_BENTYPE05;
}

public byte getFF_BENTYPE06() {
return FF_BENTYPE06;
}

public byte getFF_BENTYPE07() {
return FF_BENTYPE07;
}

public byte getFF_BENTYPE08() {
return FF_BENTYPE08;
}

public byte getFF_BENTYPE09() {
return FF_BENTYPE09;
}

public byte getFF_BENTYPE10() {
return FF_BENTYPE10;
}

public byte getFF_BENTYPE11() {
return FF_BENTYPE11;
}

public byte getFF_BENTYPE12() {
return FF_BENTYPE12;
}

public byte getFF_BENTYPE13() {
return FF_BENTYPE13;
}

public byte getFF_BENTYPE14() {
return FF_BENTYPE14;
}

public byte getFF_BENTYPE15() {
return FF_BENTYPE15;
}

public byte getFF_BENTYPE16() {
return FF_BENTYPE16;
}

public byte getFF_BENTYPE17() {
return FF_BENTYPE17;
}

public byte getFF_BENTYPE18() {
return FF_BENTYPE18;
}

public byte getFF_BENTYPE19() {
return FF_BENTYPE19;
}

public byte getFF_BENTYPE20() {
return FF_BENTYPE20;
}

public byte getFF_BENTYPE21() {
return FF_BENTYPE21;
}

public byte getFF_BENTYPE22() {
return FF_BENTYPE22;
}

public byte getFF_BENTYPE23() {
return FF_BENTYPE23;
}

public byte getFF_BENTYPE24() {
return FF_BENTYPE24;
}

public byte getFF_BENTYPE25() {
return FF_BENTYPE25;
}

public byte getFF_BENTYPE26() {
return FF_BENTYPE26;
}

public byte getFF_BENTYPE27() {
return FF_BENTYPE27;
}

public byte getFF_BENTYPE28() {
return FF_BENTYPE28;
}

public byte getFF_BENTYPE29() {
return FF_BENTYPE29;
}

public byte getFF_BENTYPE30() {
return FF_BENTYPE30;
}

public byte getFF_BENTYPE31() {
return FF_BENTYPE31;
}

public byte getFF_BENTYPE32() {
return FF_BENTYPE32;
}

public byte getFF_BENTYPE33() {
return FF_BENTYPE33;
}

public byte getFF_BENTYPE34() {
return FF_BENTYPE34;
}

public byte getFF_BENTYPE35() {
return FF_BENTYPE35;
}

public byte getFF_BENTYPE36() {
return FF_BENTYPE36;
}

public byte getFF_BENTYPE37() {
return FF_BENTYPE37;
}

public byte getFF_BENTYPE38() {
return FF_BENTYPE38;
}

public byte getFF_BENTYPE39() {
return FF_BENTYPE39;
}

public byte getFF_EMPLW() {
return FF_EMPLW;
}

public byte getFF_EVERINT() {
return FF_EVERINT;
}

public byte getFF_IVINTLANG() {
return FF_IVINTLANG;
}

public byte getFF_IVLOLW() {
return FF_IVLOLW;
}

public byte getFF_JBMNGR() {
return FF_JBMNGR;
}

public byte getFF_JBSEMP() {
return FF_JBSEMP;
}

public byte getFF_JBSIZE() {
return FF_JBSIZE;
}

public byte getFF_JBSTAT() {
return FF_JBSTAT;
}

public byte getFF_OPRLG() {
return FF_OPRLG;
}

public byte getFF_OPRLG0() {
return FF_OPRLG0;
}

public byte getFF_OPRLG0NI() {
return FF_OPRLG0NI;
}

public byte getFF_TEL() {
return FF_TEL;
}

public byte getFF_UKBORN() {
return FF_UKBORN;
}

public short getFF_YR2UK4() {
return FF_YR2UK4;
}

protected double FIBENOTHR_DV() {
return FIBENOTHR_DV;
}

protected double FIBENOTHR_IF() {
return FIBENOTHR_IF;
}

public byte getFIBENOTHR_TC() {
return FIBENOTHR_TC;
}

protected double FIMNGRS_IF() {
return FIMNGRS_IF;
}

public byte getFIMNGRS_TC() {
return FIMNGRS_TC;
}

protected double FIMNINVNET_DV() {
return FIMNINVNET_DV;
}

protected double FIMNLABGRS_IF() {
return FIMNLABGRS_IF;
}

public byte getFIMNLABGRS_TC() {
return FIMNLABGRS_TC;
}

protected double FIMNLABNET_DV() {
return FIMNLABNET_DV;
}

public byte getFIMNLABNET_TC() {
return FIMNLABNET_TC;
}

protected double FIMNMISDV() {
return FIMNMISDV;
}

protected double FIMNNET_DV() {
return FIMNNET_DV;
}

protected double FIMNPEN_DV() {
return FIMNPEN_DV;
}

protected double FIMNPRBEN_DV() {
return FIMNPRBEN_DV;
}

protected double FIMNSBEN_DV() {
return FIMNSBEN_DV;
}

public byte getFINFUT() {
return FINFUT;
}

public byte getFIVEALCDR() {
return FIVEALCDR;
}

public byte getFIYRDB1() {
return FIYRDB1;
}

public byte getFIYRDB2() {
return FIYRDB2;
}

public byte getFIYRDB3() {
return FIYRDB3;
}

public byte getFIYRDB4() {
return FIYRDB4;
}

public byte getFIYRDB5() {
return FIYRDB5;
}

public byte getFIYRDB6() {
return FIYRDB6;
}

public int getFIYRDIA() {
return FIYRDIA;
}

protected double FIYRINVINDV() {
return FIYRINVINDV;
}

public byte getFIYRINVINIF() {
return FIYRINVINIF;
}

public boolean getFIYRINVINTC() {
return FIYRINVINTC;
}

public int getFNPID() {
return FNPID;
}

public byte getFNPNO() {
return FNPNO;
}

public int getFNSPID() {
return FNSPID;
}

public byte getFNSPNO() {
return FNSPNO;
}

public byte getFRDRG() {
return FRDRG;
}

public byte getFROBULLI() {
return FROBULLI;
}

public byte getFROBULLY() {
return FROBULLY;
}

public byte getFRPBULLI() {
return FRPBULLI;
}

public byte getFRPBULLY() {
return FRPBULLY;
}

public byte getFT2ENDM1() {
return FT2ENDM1;
}

public byte getFT2ENDM2() {
return FT2ENDM2;
}

public byte getFT2ENDM3() {
return FT2ENDM3;
}

public byte getFT2ENDM4() {
return FT2ENDM4;
}

public short getFT2ENDY41() {
return FT2ENDY41;
}

public short getFT2ENDY42() {
return FT2ENDY42;
}

public short getFT2ENDY43() {
return FT2ENDY43;
}

public short getFT2ENDY44() {
return FT2ENDY44;
}

public byte getFTEDANY() {
return FTEDANY;
}

public byte getFTEDEND1() {
return FTEDEND1;
}

public byte getFTEDEND2() {
return FTEDEND2;
}

public byte getFTEDEND3() {
return FTEDEND3;
}

public byte getFTEDEND4() {
return FTEDEND4;
}

public byte getFTEDMOR1() {
return FTEDMOR1;
}

public byte getFTEDMOR2() {
return FTEDMOR2;
}

public byte getFTEDMOR3() {
return FTEDMOR3;
}

public byte getFTEDMOR4() {
return FTEDMOR4;
}

public byte getFTEDSTARTM1() {
return FTEDSTARTM1;
}

public byte getFTEDSTARTM2() {
return FTEDSTARTM2;
}

public byte getFTEDSTARTM3() {
return FTEDSTARTM3;
}

public byte getFTEDSTARTM4() {
return FTEDSTARTM4;
}

public short getFTEDSTARTY41() {
return FTEDSTARTY41;
}

public short getFTEDSTARTY42() {
return FTEDSTARTY42;
}

public short getFTEDSTARTY43() {
return FTEDSTARTY43;
}

public short getFTEDSTARTY44() {
return FTEDSTARTY44;
}

public byte getFTENDM() {
return FTENDM;
}

public short getFTENDY4() {
return FTENDY4;
}

public int getFTEXV() {
return FTEXV;
}

public byte getFTEXW() {
return FTEXW;
}

public byte getFTQUALS() {
return FTQUALS;
}

public short getFUTRA() {
return FUTRA;
}

public short getFUTRB() {
return FUTRB;
}

public short getFUTRC() {
return FUTRC;
}

public short getFUTRD() {
return FUTRD;
}

public short getFUTRE() {
return FUTRE;
}

public short getFUTRF() {
return FUTRF;
}

public short getFUTRG() {
return FUTRG;
}

public short getFUTRH() {
return FUTRH;
}

public short getFUTRI() {
return FUTRI;
}

public short getFUTRJ() {
return FUTRJ;
}

public short getFUTRK() {
return FUTRK;
}

public short getFUTRL() {
return FUTRL;
}

public byte getFUTUREINT() {
return FUTUREINT;
}

public int getGRFPID() {
return GRFPID;
}

public byte getGRFPNO() {
return GRFPNO;
}

public int getGRMPID() {
return GRMPID;
}

public byte getGRMPNO() {
return GRMPNO;
}

public byte getGRPBFTS() {
return GRPBFTS;
}

public byte getHASSTEP() {
return HASSTEP;
}

public byte getHCOND1() {
return HCOND1;
}

public byte getHCOND10() {
return HCOND10;
}

public byte getHCOND11() {
return HCOND11;
}

public byte getHCOND12() {
return HCOND12;
}

public byte getHCOND13() {
return HCOND13;
}

public byte getHCOND14() {
return HCOND14;
}

public byte getHCOND15() {
return HCOND15;
}

public byte getHCOND16() {
return HCOND16;
}

public byte getHCOND17() {
return HCOND17;
}

public byte getHCOND2() {
return HCOND2;
}

public byte getHCOND3() {
return HCOND3;
}

public byte getHCOND4() {
return HCOND4;
}

public byte getHCOND5() {
return HCOND5;
}

public byte getHCOND6() {
return HCOND6;
}

public byte getHCOND7() {
return HCOND7;
}

public byte getHCOND8() {
return HCOND8;
}

public byte getHCOND9() {
return HCOND9;
}

public byte getHCOND96() {
return HCOND96;
}

public byte getHCONDA01() {
return HCONDA01;
}

public byte getHCONDA02() {
return HCONDA02;
}

public byte getHCONDA03() {
return HCONDA03;
}

public byte getHCONDA04() {
return HCONDA04;
}

public byte getHCONDA05() {
return HCONDA05;
}

public byte getHCONDA06() {
return HCONDA06;
}

public byte getHCONDA07() {
return HCONDA07;
}

public byte getHCONDA08() {
return HCONDA08;
}

public byte getHCONDA09() {
return HCONDA09;
}

public byte getHCONDA10() {
return HCONDA10;
}

public byte getHCONDA11() {
return HCONDA11;
}

public byte getHCONDA12() {
return HCONDA12;
}

public byte getHCONDA13() {
return HCONDA13;
}

public byte getHCONDA14() {
return HCONDA14;
}

public byte getHCONDA15() {
return HCONDA15;
}

public byte getHCONDA16() {
return HCONDA16;
}

public byte getHCONDA17() {
return HCONDA17;
}

public byte getHCONDE6() {
return HCONDE6;
}

public byte getHCONDE7() {
return HCONDE7;
}

public byte getHCONDE96() {
return HCONDE96;
}

public byte getHCONDEA6() {
return HCONDEA6;
}

public byte getHCONDEA7() {
return HCONDEA7;
}

public byte getHCONDN1() {
return HCONDN1;
}

public byte getHCONDN10() {
return HCONDN10;
}

public byte getHCONDN11() {
return HCONDN11;
}

public byte getHCONDN12() {
return HCONDN12;
}

public byte getHCONDN13() {
return HCONDN13;
}

public byte getHCONDN14() {
return HCONDN14;
}

public byte getHCONDN15() {
return HCONDN15;
}

public byte getHCONDN16() {
return HCONDN16;
}

public byte getHCONDN17() {
return HCONDN17;
}

public byte getHCONDN2() {
return HCONDN2;
}

public byte getHCONDN3() {
return HCONDN3;
}

public byte getHCONDN4() {
return HCONDN4;
}

public byte getHCONDN5() {
return HCONDN5;
}

public byte getHCONDN6() {
return HCONDN6;
}

public byte getHCONDN7() {
return HCONDN7;
}

public byte getHCONDN8() {
return HCONDN8;
}

public byte getHCONDN9() {
return HCONDN9;
}

public byte getHCONDN96() {
return HCONDN96;
}

public byte getHCONDNO1() {
return HCONDNO1;
}

public byte getHCONDNO2() {
return HCONDNO2;
}

public byte getHCONDNO3() {
return HCONDNO3;
}

public byte getHCONDNO4() {
return HCONDNO4;
}

public byte getHCONDNO5() {
return HCONDNO5;
}

public byte getHCONDNO6() {
return HCONDNO6;
}

public byte getHCONDNO7() {
return HCONDNO7;
}

public byte getHCONDNO8() {
return HCONDNO8;
}

public byte getHCONDNS1() {
return HCONDNS1;
}

public byte getHCONDNS2() {
return HCONDNS2;
}

public byte getHCONDNS3() {
return HCONDNS3;
}

public byte getHCONDNS4() {
return HCONDNS4;
}

public byte getHCONDNS5() {
return HCONDNS5;
}

public byte getHCONDNS6() {
return HCONDNS6;
}

public byte getHCONDNS7() {
return HCONDNS7;
}

public byte getHCONDNS8() {
return HCONDNS8;
}

public byte getHCONDS01() {
return HCONDS01;
}

public byte getHCONDS02() {
return HCONDS02;
}

public byte getHCONDS03() {
return HCONDS03;
}

public byte getHCONDS04() {
return HCONDS04;
}

public byte getHCONDS05() {
return HCONDS05;
}

public byte getHCONDS08() {
return HCONDS08;
}

public byte getHCONDS09() {
return HCONDS09;
}

public byte getHCONDS10() {
return HCONDS10;
}

public byte getHCONDS11() {
return HCONDS11;
}

public byte getHCONDS12() {
return HCONDS12;
}

public byte getHCONDS13() {
return HCONDS13;
}

public byte getHCONDS14() {
return HCONDS14;
}

public byte getHCONDS15() {
return HCONDS15;
}

public byte getHCONDS16() {
return HCONDS16;
}

public byte getHCONDS17() {
return HCONDS17;
}

public byte getHEALTH() {
return HEALTH;
}

public byte getHEARCOMPUTER() {
return HEARCOMPUTER;
}

public byte getHGADOPTF() {
return HGADOPTF;
}

public byte getHGADOPTM() {
return HGADOPTM;
}

public byte getHGPART() {
return HGPART;
}

public byte getHHRESP_DV() {
return HHRESP_DV;
}

public byte getHHTYPE_DV() {
return HHTYPE_DV;
}

public byte getHITSIB() {
return HITSIB;
}

public byte getHLPHMWK() {
return HLPHMWK;
}

public byte getHOOD15() {
return HOOD15;
}

public byte getHOSPC1() {
return HOSPC1;
}

public byte getHOSPC2() {
return HOSPC2;
}

public byte getHOSPC3() {
return HOSPC3;
}

public byte getHOSPC4() {
return HOSPC4;
}

public byte getHOSPC5() {
return HOSPC5;
}

public byte getHOSPC6() {
return HOSPC6;
}

public byte getHOSPC7() {
return HOSPC7;
}

public byte getHOSPC8() {
return HOSPC8;
}

public short getHOSPDC1() {
return HOSPDC1;
}

public short getHOSPDC2() {
return HOSPDC2;
}

public short getHOSPDC3() {
return HOSPDC3;
}

public byte getHOSPDC4() {
return HOSPDC4;
}

public byte getHOSPDC5() {
return HOSPDC5;
}

public byte getHOSPDC6() {
return HOSPDC6;
}

public byte getHOSPDC7() {
return HOSPDC7;
}

public byte getHOSPDC8() {
return HOSPDC8;
}

public byte getHOUSING() {
return HOUSING;
}

public int getHRPID() {
return HRPID;
}

public byte getHRPNO() {
return HRPNO;
}

public byte getIENDDATMM() {
return IENDDATMM;
}

public byte getIENDDATSS() {
return IENDDATSS;
}

public byte getIMMSTOP1() {
return IMMSTOP1;
}

public byte getIMMSTOP2() {
return IMMSTOP2;
}

public byte getIMMSTOP3() {
return IMMSTOP3;
}

public byte getIMMSTOP4() {
return IMMSTOP4;
}

public byte getIMMSTOP5() {
return IMMSTOP5;
}

public byte getIMMSTOP6() {
return IMMSTOP6;
}

public byte getIMMSTOP7() {
return IMMSTOP7;
}

public byte getIMMSTOP8() {
return IMMSTOP8;
}

public byte getIMMSTOP97() {
return IMMSTOP97;
}

protected double IND5MUS_LW() {
return IND5MUS_LW;
}

protected double IND5MUS_XW() {
return IND5MUS_XW;
}

protected double INDBD91_LW() {
return INDBD91_LW;
}

protected double INDBDUB_LW() {
return INDBDUB_LW;
}

protected double INDIN01_LW() {
return INDIN01_LW;
}

protected double INDIN91_LW() {
return INDIN91_LW;
}

protected double INDINUB_LW() {
return INDINUB_LW;
}

protected double INDINUB_XW() {
return INDINUB_XW;
}

protected double INDINUS_LW() {
return INDINUS_LW;
}

public byte getINDMODE() {
return INDMODE;
}

protected double INDNS91_LW() {
return INDNS91_LW;
}

protected double INDNSUB_LW() {
return INDNSUB_LW;
}

protected double INDPXUB_LW() {
return INDPXUB_LW;
}

protected double INDPXUB_XW() {
return INDPXUB_XW;
}

protected double INDPXUS_LW() {
return INDPXUS_LW;
}

protected double INDSCUB_LW() {
return INDSCUB_LW;
}

protected double INDSCUB_XW() {
return INDSCUB_XW;
}

protected double INDSCUS_LW() {
return INDSCUS_LW;
}

public byte getINSULTED1() {
return INSULTED1;
}

public byte getINSULTED10() {
return INSULTED10;
}

public byte getINSULTED11() {
return INSULTED11;
}

public byte getINSULTED2() {
return INSULTED2;
}

public byte getINSULTED3() {
return INSULTED3;
}

public byte getINSULTED4() {
return INSULTED4;
}

public byte getINSULTED5() {
return INSULTED5;
}

public byte getINSULTED6() {
return INSULTED6;
}

public byte getINSULTED7() {
return INSULTED7;
}

public byte getINSULTED8() {
return INSULTED8;
}

public byte getINSULTED9() {
return INSULTED9;
}

public byte getINSULTED96() {
return INSULTED96;
}

public byte getINSULTED97() {
return INSULTED97;
}

public byte getINSULTEDO_CODE() {
return INSULTEDO_CODE;
}

public byte getINSULTED_DV() {
return INSULTED_DV;
}

public byte getINTDATD_DV() {
return INTDATD_DV;
}

public byte getINTDATM_DV() {
return INTDATM_DV;
}

public short getINTDATY_DV() {
return INTDATY_DV;
}

public byte getINTIMMLS11() {
return INTIMMLS11;
}

public byte getINTIMMLS110() {
return INTIMMLS110;
}

public byte getINTIMMLS12() {
return INTIMMLS12;
}

public byte getINTIMMLS13() {
return INTIMMLS13;
}

public byte getINTIMMLS14() {
return INTIMMLS14;
}

public byte getINTIMMLS15() {
return INTIMMLS15;
}

public byte getINTIMMLS16() {
return INTIMMLS16;
}

public byte getINTIMMLS17() {
return INTIMMLS17;
}

public byte getINTIMMLS18() {
return INTIMMLS18;
}

public byte getINTIMMLS19() {
return INTIMMLS19;
}

public byte getINTIMMLS196() {
return INTIMMLS196;
}

public byte getINTIMMLS21() {
return INTIMMLS21;
}

public byte getINTIMMLS210() {
return INTIMMLS210;
}

public byte getINTIMMLS22() {
return INTIMMLS22;
}

public byte getINTIMMLS23() {
return INTIMMLS23;
}

public byte getINTIMMLS24() {
return INTIMMLS24;
}

public byte getINTIMMLS25() {
return INTIMMLS25;
}

public byte getINTIMMLS26() {
return INTIMMLS26;
}

public byte getINTIMMLS27() {
return INTIMMLS27;
}

public byte getINTIMMLS28() {
return INTIMMLS28;
}

public byte getINTIMMLS29() {
return INTIMMLS29;
}

public byte getINTIMMLS296() {
return INTIMMLS296;
}

public byte getINTIMMLS31() {
return INTIMMLS31;
}

public byte getINTIMMLS310() {
return INTIMMLS310;
}

public byte getINTIMMLS32() {
return INTIMMLS32;
}

public byte getINTIMMLS33() {
return INTIMMLS33;
}

public byte getINTIMMLS34() {
return INTIMMLS34;
}

public byte getINTIMMLS35() {
return INTIMMLS35;
}

public byte getINTIMMLS36() {
return INTIMMLS36;
}

public byte getINTIMMLS37() {
return INTIMMLS37;
}

public byte getINTIMMLS38() {
return INTIMMLS38;
}

public byte getINTIMMLS39() {
return INTIMMLS39;
}

public byte getINTIMMLS396() {
return INTIMMLS396;
}

public byte getINTIMMLS41() {
return INTIMMLS41;
}

public byte getINTIMMLS410() {
return INTIMMLS410;
}

public byte getINTIMMLS42() {
return INTIMMLS42;
}

public byte getINTIMMLS43() {
return INTIMMLS43;
}

public byte getINTIMMLS44() {
return INTIMMLS44;
}

public byte getINTIMMLS45() {
return INTIMMLS45;
}

public byte getINTIMMLS46() {
return INTIMMLS46;
}

public byte getINTIMMLS47() {
return INTIMMLS47;
}

public byte getINTIMMLS48() {
return INTIMMLS48;
}

public byte getINTIMMLS49() {
return INTIMMLS49;
}

public byte getINTIMMLS496() {
return INTIMMLS496;
}

public byte getINVITRO1() {
return INVITRO1;
}

public byte getINVITRO2() {
return INVITRO2;
}

public byte getINVITRO3() {
return INVITRO3;
}

public byte getIOUTCOME() {
return IOUTCOME;
}

public byte getISTRTDATMM() {
return ISTRTDATMM;
}

public byte getISTRTDATSS() {
return ISTRTDATSS;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public short getISYEAR() {
return ISYEAR;
}

public byte getIVAFFCT11() {
return IVAFFCT11;
}

public byte getIVAFFCT12() {
return IVAFFCT12;
}

public byte getIVAFFCT13() {
return IVAFFCT13;
}

public byte getIVAFFCT14() {
return IVAFFCT14;
}

public byte getIVAFFCT15() {
return IVAFFCT15;
}

public byte getIVAFFCT17() {
return IVAFFCT17;
}

public byte getIVAFFCT21() {
return IVAFFCT21;
}

public byte getIVAFFCT22() {
return IVAFFCT22;
}

public byte getIVAFFCT23() {
return IVAFFCT23;
}

public byte getIVAFFCT27() {
return IVAFFCT27;
}

public byte getIVAFFCT30() {
return IVAFFCT30;
}

public byte getIVAFFCT97() {
return IVAFFCT97;
}

public byte getIVCOOP() {
return IVCOOP;
}

public byte getIVINFNCE() {
return IVINFNCE;
}

public byte getIVLIBAL() {
return IVLIBAL;
}

public byte getIVLIENG() {
return IVLIENG;
}

public byte getIVLITRANS() {
return IVLITRANS;
}

public byte getIVLIWHO() {
return IVLIWHO;
}

public byte getJ1BOSS() {
return J1BOSS;
}

public byte getJ1MNGR() {
return J1MNGR;
}

public byte getJ1NONE() {
return J1NONE;
}

public byte getJ1NSSEC5_DV() {
return J1NSSEC5_DV;
}

public byte getJ1SEMP() {
return J1SEMP;
}

public short getJ1SOC00_CC() {
return J1SOC00_CC;
}

public short getJ1SOC10_CC() {
return J1SOC10_CC;
}

public byte getJ1SOC90_CC() {
return J1SOC90_CC;
}

public byte getJ2NSSEC5_DV() {
return J2NSSEC5_DV;
}

public int getJ2PAY() {
return J2PAY;
}

protected double J2PAYNET_DV() {
return J2PAYNET_DV;
}

public short getJ2SOC00_CC() {
return J2SOC00_CC;
}

public short getJ2SOC10_CC() {
return J2SOC10_CC;
}

public short getJ2SOC90_CC() {
return J2SOC90_CC;
}

public byte getJBATT1() {
return JBATT1;
}

public byte getJBATT2() {
return JBATT2;
}

public byte getJBATT3() {
return JBATT3;
}

public byte getJBATT4() {
return JBATT4;
}

public byte getJBATT5() {
return JBATT5;
}

public byte getJBATT6() {
return JBATT6;
}

public byte getJBATT7() {
return JBATT7;
}

public byte getJBATT8() {
return JBATT8;
}

public byte getJBATT9() {
return JBATT9;
}

public byte getJBBGDATD() {
return JBBGDATD;
}

public byte getJBBGDATM() {
return JBBGDATM;
}

public short getJBBGDATY() {
return JBBGDATY;
}

public byte getJBENDD() {
return JBENDD;
}

public byte getJBENDM() {
return JBENDM;
}

public byte getJBENDREAS() {
return JBENDREAS;
}

public short getJBENDY4() {
return JBENDY4;
}

public byte getJBES2000() {
return JBES2000;
}

public byte getJBIINDB_DV() {
return JBIINDB_DV;
}

public byte getJBMNGRCHK() {
return JBMNGRCHK;
}

public byte getJBNSSEC3_DV() {
return JBNSSEC3_DV;
}

public byte getJBNSSEC5_DV() {
return JBNSSEC5_DV;
}

public byte getJBNSSEDV() {
return JBNSSEDV;
}

public byte getJBOFFY() {
return JBOFFY;
}

public byte getJBRGSDV() {
return JBRGSDV;
}

public byte getJBSAMR() {
return JBSAMR;
}

public byte getJBSAT() {
return JBSAT;
}

public byte getJBSECTPUB() {
return JBSECTPUB;
}

public short getJBSEG_DV() {
return JBSEG_DV;
}

public byte getJBSEMPCHK() {
return JBSEMPCHK;
}

public byte getJBSIC07CHK() {
return JBSIC07CHK;
}

public byte getJBSIC07_CC() {
return JBSIC07_CC;
}

public byte getJBSIZECHK() {
return JBSIZECHK;
}

public byte getJBSOC00CHK() {
return JBSOC00CHK;
}

public short getJBSOC00_CC() {
return JBSOC00_CC;
}

public short getJBSOC10_CC() {
return JBSOC10_CC;
}

public byte getJBSOCGR_DV() {
return JBSOCGR_DV;
}

public byte getJBTERM1() {
return JBTERM1;
}

public byte getJBTERM2() {
return JBTERM2;
}

public byte getJLENDM() {
return JLENDM;
}

public byte getJLES2000() {
return JLES2000;
}

public byte getJLIINDB_DV() {
return JLIINDB_DV;
}

public byte getJLNSSEC3_DV() {
return JLNSSEC3_DV;
}

public byte getJLNSSEC5_DV() {
return JLNSSEC5_DV;
}

public byte getJLNSSEDV() {
return JLNSSEDV;
}

public byte getJLRGSDV() {
return JLRGSDV;
}

public short getJLSEG_DV() {
return JLSEG_DV;
}

public byte getJLSIC07_CC() {
return JLSIC07_CC;
}

public short getJLSOC00_CC() {
return JLSOC00_CC;
}

public short getJLSOC10_CC() {
return JLSOC10_CC;
}

public byte getJOBDENY() {
return JOBDENY;
}

public byte getJOBHOURS1() {
return JOBHOURS1;
}

public byte getJOBHOURS2() {
return JOBHOURS2;
}

public byte getJOBHOURS3() {
return JOBHOURS3;
}

public byte getJOBHOURS4() {
return JOBHOURS4;
}

public byte getJOBHOURS5() {
return JOBHOURS5;
}

public byte getJOBHOURS6() {
return JOBHOURS6;
}

public byte getJOBHOURS7() {
return JOBHOURS7;
}

public byte getJOBHOURS8() {
return JOBHOURS8;
}

public byte getJOBHOURS9() {
return JOBHOURS9;
}

public byte getJOBLOOK() {
return JOBLOOK;
}

public byte getJSPART() {
return JSPART;
}

public int getJSPAYU() {
return JSPAYU;
}

public byte getJSPAYW() {
return JSPAYW;
}

public byte getJSPRLS() {
return JSPRLS;
}

public byte getJSPRNI() {
return JSPRNI;
}

public byte getJSPRTX() {
return JSPRTX;
}

public byte getJSPYNI() {
return JSPYNI;
}

public byte getJSPYTX() {
return JSPYTX;
}

public byte getJSTYPEB() {
return JSTYPEB;
}

public byte getJSWORKTRAV() {
return JSWORKTRAV;
}

public short getJUBGN() {
return JUBGN;
}

public short getJULK4X1() {
return JULK4X1;
}

public short getJULK4X2() {
return JULK4X2;
}

public byte getJULK4X3() {
return JULK4X3;
}

public short getJULK4X4() {
return JULK4X4;
}

public short getJULK4X5() {
return JULK4X5;
}

public short getJULK4X6() {
return JULK4X6;
}

public byte getJULK4X96() {
return JULK4X96;
}

public byte getKID2UNI01() {
return KID2UNI01;
}

public byte getKID2UNI02() {
return KID2UNI02;
}

public byte getKID2UNI03() {
return KID2UNI03;
}

public byte getKID2UNI04() {
return KID2UNI04;
}

public byte getKID2UNI05() {
return KID2UNI05;
}

public byte getKID2UNI06() {
return KID2UNI06;
}

public byte getKID2UNI07() {
return KID2UNI07;
}

public byte getKID2UNI08() {
return KID2UNI08;
}

public byte getKID2UNI09() {
return KID2UNI09;
}

public byte getKID2UNI10() {
return KID2UNI10;
}

public byte getKID2UNI11() {
return KID2UNI11;
}

public byte getKID2UNI12() {
return KID2UNI12;
}

public byte getKID2UNI13() {
return KID2UNI13;
}

public byte getKID2UNI14() {
return KID2UNI14;
}

public byte getKID2UNI15() {
return KID2UNI15;
}

public byte getKID2UNI16() {
return KID2UNI16;
}

public byte getKIDSPT() {
return KIDSPT;
}

public byte getLADOPT() {
return LADOPT;
}

public byte getLATE() {
return LATE;
}

public byte getLCHMULTI1() {
return LCHMULTI1;
}

public byte getLCHMULTI2() {
return LCHMULTI2;
}

public byte getLCHMULTI3() {
return LCHMULTI3;
}

public byte getLCOHNPI() {
return LCOHNPI;
}

protected double LENINDINTV() {
return LENINDINTV;
}

public byte getLEVELIMP() {
return LEVELIMP;
}

public byte getLICENG() {
return LICENG;
}

public byte getLICTRANS() {
return LICTRANS;
}

public byte getLICWHO() {
return LICWHO;
}

public byte getLIENG() {
return LIENG;
}

public byte getLIHOW() {
return LIHOW;
}

public byte getLINGUA() {
return LINGUA;
}

public byte getLITRANS() {
return LITRANS;
}

public byte getLIVESP() {
return LIVESP;
}

public boolean getLIVESP_DV() {
return LIVESP_DV;
}

public byte getLIVEWITH() {
return LIVEWITH;
}

public byte getLIWHO() {
return LIWHO;
}

public byte getLLKNBRD() {
return LLKNBRD;
}

public byte getLMAR1M() {
return LMAR1M;
}

public short getLMAR1Y() {
return LMAR1Y;
}

public byte getLMCBM1() {
return LMCBM1;
}

public byte getLMCBM2() {
return LMCBM2;
}

public byte getLMCBM3() {
return LMCBM3;
}

public short getLMCBY41() {
return LMCBY41;
}

public short getLMCBY42() {
return LMCBY42;
}

public short getLMCBY43() {
return LMCBY43;
}

public byte getLMSPM1() {
return LMSPM1;
}

public byte getLMSPM2() {
return LMSPM2;
}

public byte getLMSPM3() {
return LMSPM3;
}

public short getLMSPY41() {
return LMSPY41;
}

public short getLMSPY42() {
return LMSPY42;
}

public short getLMSPY43() {
return LMSPY43;
}

public byte getLNADOPT() {
return LNADOPT;
}

public byte getLNPRNT() {
return LNPRNT;
}

public byte getLOCSERAP() {
return LOCSERAP;
}

public byte getLOCSERAS() {
return LOCSERAS;
}

public byte getLOCSERB() {
return LOCSERB;
}

public byte getLOCSERC() {
return LOCSERC;
}

public byte getLOCSERD() {
return LOCSERD;
}

public byte getLOCSERE() {
return LOCSERE;
}

public byte getLPRNT() {
return LPRNT;
}

public byte getLVHM() {
return LVHM;
}

public byte getLVMTHP() {
return LVMTHP;
}

public byte getLVREL1() {
return LVREL1;
}

public byte getLVREL10() {
return LVREL10;
}

public byte getLVREL2() {
return LVREL2;
}

public byte getLVREL3() {
return LVREL3;
}

public byte getLVREL4() {
return LVREL4;
}

public byte getLVREL5() {
return LVREL5;
}

public byte getLVREL6() {
return LVREL6;
}

public byte getLVREL7() {
return LVREL7;
}

public byte getLVREL8() {
return LVREL8;
}

public byte getLVREL9() {
return LVREL9;
}

public byte getLVREL96() {
return LVREL96;
}

public byte getLVSCDO() {
return LVSCDO;
}

public byte getLVWHY() {
return LVWHY;
}

public short getLVYRP() {
return LVYRP;
}

public byte getLWWRONG() {
return LWWRONG;
}

public byte getMAAGE() {
return MAAGE;
}

public byte getMACOB() {
return MACOB;
}

public byte getMACON() {
return MACON;
}

public byte getMAFAR() {
return MAFAR;
}

public byte getMAJU() {
return MAJU;
}

public byte getMALONE() {
return MALONE;
}

public byte getMAMOSTCON() {
return MAMOSTCON;
}

public byte getMANSSEC5_DV() {
return MANSSEC5_DV;
}

public byte getMARSTAT() {
return MARSTAT;
}

public byte getMASEE() {
return MASEE;
}

public short getMASOC00_CC() {
return MASOC00_CC;
}

public short getMASOC10_CC() {
return MASOC10_CC;
}

public byte getMASOC90_CC() {
return MASOC90_CC;
}

public byte getMASTAT_DV() {
return MASTAT_DV;
}

public byte getMATLEAVE() {
return MATLEAVE;
}

public byte getMATLV() {
return MATLV;
}

public byte getMATLVENDD() {
return MATLVENDD;
}

public byte getMATLVENDM() {
return MATLVENDM;
}

public short getMATLVENDY4() {
return MATLVENDY4;
}

public byte getMATLVSTD() {
return MATLVSTD;
}

public byte getMATLVSTM() {
return MATLVSTM;
}

public short getMATLVSTY4() {
return MATLVSTY4;
}

public byte getMAYRUK() {
return MAYRUK;
}

public byte getMEMAID() {
return MEMAID;
}

public byte getMEMCONT11() {
return MEMCONT11;
}

public byte getMEMCONT12() {
return MEMCONT12;
}

public byte getMEMCONT13() {
return MEMCONT13;
}

public byte getMEMCONT21() {
return MEMCONT21;
}

public byte getMEMCONT210() {
return MEMCONT210;
}

public byte getMEMCONT211() {
return MEMCONT211;
}

public byte getMEMCONT212() {
return MEMCONT212;
}

public byte getMEMCONT213() {
return MEMCONT213;
}

public byte getMEMCONT214() {
return MEMCONT214;
}

public byte getMEMCONT215() {
return MEMCONT215;
}

public byte getMEMCONT216() {
return MEMCONT216;
}

public byte getMEMCONT22() {
return MEMCONT22;
}

public byte getMEMCONT23() {
return MEMCONT23;
}

public byte getMEMCONT24() {
return MEMCONT24;
}

public byte getMEMCONT25() {
return MEMCONT25;
}

public byte getMEMCONT26() {
return MEMCONT26;
}

public byte getMEMCONT27() {
return MEMCONT27;
}

public byte getMEMCONT28() {
return MEMCONT28;
}

public byte getMEMCONT29() {
return MEMCONT29;
}

public byte getMEMCONT3() {
return MEMCONT3;
}

public byte getMEMPER() {
return MEMPER;
}

public byte getMEMPLOY() {
return MEMPLOY;
}

public byte getMEMPROB1() {
return MEMPROB1;
}

public byte getMEMPROB2() {
return MEMPROB2;
}

public byte getMEMPROB3() {
return MEMPROB3;
}

public byte getMEMPROB4() {
return MEMPROB4;
}

public byte getMIGCNTRY() {
return MIGCNTRY;
}

public byte getMIGPLNS() {
return MIGPLNS;
}

public byte getMLAGST() {
return MLAGST;
}

public byte getMLAGSTU() {
return MLAGSTU;
}

public byte getMLFUTR() {
return MLFUTR;
}

public byte getMLRNOT1() {
return MLRNOT1;
}

public byte getMLRNOT10() {
return MLRNOT10;
}

public byte getMLRNOT11() {
return MLRNOT11;
}

public byte getMLRNOT12() {
return MLRNOT12;
}

public byte getMLRNOT13() {
return MLRNOT13;
}

public byte getMLRNOT2() {
return MLRNOT2;
}

public byte getMLRNOT3() {
return MLRNOT3;
}

public byte getMLRNOT4() {
return MLRNOT4;
}

public byte getMLRNOT5() {
return MLRNOT5;
}

public byte getMLRNOT6() {
return MLRNOT6;
}

public byte getMLRNOT7() {
return MLRNOT7;
}

public byte getMLRNOT8() {
return MLRNOT8;
}

public byte getMLRNOT9() {
return MLRNOT9;
}

public byte getMLRNOT97() {
return MLRNOT97;
}

public byte getMLSTATCHK() {
return MLSTATCHK;
}

public byte getMLWKFPT() {
return MLWKFPT;
}

public int getMNPID() {
return MNPID;
}

public byte getMNPNO() {
return MNPNO;
}

public int getMNSPID() {
return MNSPID;
}

public byte getMNSPNO() {
return MNSPNO;
}

public byte getMOBUSE() {
return MOBUSE;
}

public byte getMONTH() {
return MONTH;
}

public byte getMOVDIR() {
return MOVDIR;
}

public byte getMOVEOTH_CODE() {
return MOVEOTH_CODE;
}

public byte getMOVY11() {
return MOVY11;
}

public byte getMOVY12() {
return MOVY12;
}

public byte getMOVY13() {
return MOVY13;
}

public byte getMOVY14() {
return MOVY14;
}

public byte getMOVY15() {
return MOVY15;
}

public byte getMOVY16() {
return MOVY16;
}

public byte getMSTATCH1() {
return MSTATCH1;
}

public byte getMSTATCH2() {
return MSTATCH2;
}

public short getMSTATSAM() {
return MSTATSAM;
}

public byte getMSTATSAMN() {
return MSTATSAMN;
}

public byte getMVEVER() {
return MVEVER;
}

public byte getMVMNTH() {
return MVMNTH;
}

public short getMVYR() {
return MVYR;
}

public byte getNACAR() {
return NACAR;
}

public byte getNACONT11() {
return NACONT11;
}

public byte getNACONT12() {
return NACONT12;
}

public byte getNACONT13() {
return NACONT13;
}

public byte getNACONT21() {
return NACONT21;
}

public byte getNACONT210() {
return NACONT210;
}

public byte getNACONT211() {
return NACONT211;
}

public byte getNACONT212() {
return NACONT212;
}

public byte getNACONT213() {
return NACONT213;
}

public byte getNACONT214() {
return NACONT214;
}

public byte getNACONT215() {
return NACONT215;
}

public byte getNACONT216() {
return NACONT216;
}

public byte getNACONT22() {
return NACONT22;
}

public byte getNACONT23() {
return NACONT23;
}

public byte getNACONT24() {
return NACONT24;
}

public byte getNACONT25() {
return NACONT25;
}

public byte getNACONT26() {
return NACONT26;
}

public byte getNACONT27() {
return NACONT27;
}

public byte getNACONT28() {
return NACONT28;
}

public byte getNACONT29() {
return NACONT29;
}

public byte getNACONT3() {
return NACONT3;
}

public byte getNADISEASE() {
return NADISEASE;
}

public byte getNADOPTCH() {
return NADOPTCH;
}

public byte getNADRINK() {
return NADRINK;
}

public byte getNAIDXHH() {
return NAIDXHH;
}

public byte getNAINTEREST() {
return NAINTEREST;
}

public byte getNALOTTERY() {
return NALOTTERY;
}

public byte getNASOFA() {
return NASOFA;
}

public byte getNASTOP1() {
return NASTOP1;
}

public byte getNASTOP2() {
return NASTOP2;
}

public byte getNASTOP3() {
return NASTOP3;
}

public byte getNASTOP4() {
return NASTOP4;
}

public byte getNASTOP5() {
return NASTOP5;
}

public byte getNASTOP6() {
return NASTOP6;
}

public byte getNASTOP7() {
return NASTOP7;
}

public byte getNASTOP8() {
return NASTOP8;
}

public byte getNASTOP97() {
return NASTOP97;
}

public byte getNATCH01() {
return NATCH01;
}

public byte getNATCH02() {
return NATCH02;
}

public byte getNATCH03() {
return NATCH03;
}

public byte getNATCH04() {
return NATCH04;
}

public byte getNATCH05() {
return NATCH05;
}

public byte getNATCH06() {
return NATCH06;
}

public byte getNATCH07() {
return NATCH07;
}

public byte getNATCH08() {
return NATCH08;
}

public byte getNATCH09() {
return NATCH09;
}

public byte getNATCH10() {
return NATCH10;
}

public byte getNATCH11() {
return NATCH11;
}

public byte getNATCH12() {
return NATCH12;
}

public boolean getNATCH13() {
return NATCH13;
}

public boolean getNATCH14() {
return NATCH14;
}

public boolean getNATCH15() {
return NATCH15;
}

public boolean getNATCH16() {
return NATCH16;
}

public byte getNATID1() {
return NATID1;
}

public byte getNATID2() {
return NATID2;
}

public byte getNATID3() {
return NATID3;
}

public byte getNATID4() {
return NATID4;
}

public byte getNATID5() {
return NATID5;
}

public byte getNATID6() {
return NATID6;
}

public byte getNATID97() {
return NATID97;
}

public byte getNBRCOH1() {
return NBRCOH1;
}

public byte getNBRCOH2() {
return NBRCOH2;
}

public byte getNBRCOH3() {
return NBRCOH3;
}

public byte getNBRCOH4() {
return NBRCOH4;
}

public byte getNBRCOHDK_DV() {
return NBRCOHDK_DV;
}

public byte getNBRCOH_DV() {
return NBRCOH_DV;
}

protected double NBRSNCI_DV() {
return NBRSNCI_DV;
}

public byte getNCH10() {
return NCH10;
}

public byte getNCH10TO15() {
return NCH10TO15;
}

public byte getNCH14RESP() {
return NCH14RESP;
}

public byte getNCH3RESP() {
return NCH3RESP;
}

public byte getNCH415RESP() {
return NCH415RESP;
}

public byte getNCH5RESP() {
return NCH5RESP;
}

public byte getNCH5TO15() {
return NCH5TO15;
}

public byte getNCH8RESP() {
return NCH8RESP;
}

public byte getNCHILD() {
return NCHILD;
}

public short getNCHILD_DV() {
return NCHILD_DV;
}

public byte getNCHRESP() {
return NCHRESP;
}

public byte getNCHUND18RESP() {
return NCHUND18RESP;
}

public byte getNCHUNDER16() {
return NCHUNDER16;
}

public byte getNCRR1() {
return NCRR1;
}

public byte getNCRR11() {
return NCRR11;
}

public byte getNCRR12() {
return NCRR12;
}

public byte getNCRR3() {
return NCRR3;
}

public byte getNCRR4() {
return NCRR4;
}

public byte getNCRR5() {
return NCRR5;
}

public byte getNCRR6() {
return NCRR6;
}

public byte getNCRR8() {
return NCRR8;
}

public byte getNCRR9() {
return NCRR9;
}

public byte getNCRRM() {
return NCRRM;
}

public short getNCRRY4() {
return NCRRY4;
}

public byte getNDEPCHL_DV() {
return NDEPCHL_DV;
}

public short getNETAG_1() {
return NETAG_1;
}

public short getNETAG_2() {
return NETAG_2;
}

public short getNETAG_3() {
return NETAG_3;
}

public byte getNETCHT() {
return NETCHT;
}

public byte getNETDO10_1() {
return NETDO10_1;
}

public byte getNETDO10_2() {
return NETDO10_2;
}

public byte getNETDO10_3() {
return NETDO10_3;
}

public byte getNETDO1_1() {
return NETDO1_1;
}

public byte getNETDO1_2() {
return NETDO1_2;
}

public byte getNETDO1_3() {
return NETDO1_3;
}

public byte getNETDO2_1() {
return NETDO2_1;
}

public byte getNETDO2_2() {
return NETDO2_2;
}

public byte getNETDO2_3() {
return NETDO2_3;
}

public byte getNETDO3_1() {
return NETDO3_1;
}

public byte getNETDO3_2() {
return NETDO3_2;
}

public byte getNETDO3_3() {
return NETDO3_3;
}

public byte getNETDO4_1() {
return NETDO4_1;
}

public byte getNETDO4_2() {
return NETDO4_2;
}

public byte getNETDO4_3() {
return NETDO4_3;
}

public byte getNETDO5_1() {
return NETDO5_1;
}

public byte getNETDO5_2() {
return NETDO5_2;
}

public byte getNETDO5_3() {
return NETDO5_3;
}

public byte getNETDO6_1() {
return NETDO6_1;
}

public byte getNETDO6_2() {
return NETDO6_2;
}

public byte getNETDO6_3() {
return NETDO6_3;
}

public byte getNETDO7_1() {
return NETDO7_1;
}

public byte getNETDO7_2() {
return NETDO7_2;
}

public byte getNETDO7_3() {
return NETDO7_3;
}

public byte getNETDO8_1() {
return NETDO8_1;
}

public byte getNETDO8_2() {
return NETDO8_2;
}

public byte getNETDO8_3() {
return NETDO8_3;
}

public byte getNETDO96_1() {
return NETDO96_1;
}

public byte getNETDO96_2() {
return NETDO96_2;
}

public byte getNETDO96_3() {
return NETDO96_3;
}

public byte getNETDO97_1() {
return NETDO97_1;
}

public byte getNETDO97_2() {
return NETDO97_2;
}

public byte getNETDO97_3() {
return NETDO97_3;
}

public byte getNETDO9_1() {
return NETDO9_1;
}

public byte getNETDO9_2() {
return NETDO9_2;
}

public byte getNETDO9_3() {
return NETDO9_3;
}

public byte getNETET_1() {
return NETET_1;
}

public byte getNETET_2() {
return NETET_2;
}

public byte getNETET_3() {
return NETET_3;
}

public byte getNETJB_1() {
return NETJB_1;
}

public byte getNETJB_2() {
return NETJB_2;
}

public byte getNETJB_3() {
return NETJB_3;
}

public byte getNETKN_1() {
return NETKN_1;
}

public byte getNETKN_2() {
return NETKN_2;
}

public byte getNETKN_3() {
return NETKN_3;
}

public byte getNETLV_1() {
return NETLV_1;
}

public byte getNETLV_2() {
return NETLV_2;
}

public byte getNETLV_3() {
return NETLV_3;
}

public byte getNETM2() {
return NETM2;
}

public byte getNETM2O_CODE() {
return NETM2O_CODE;
}

public byte getNETMET_1() {
return NETMET_1;
}

public byte getNETMET_2() {
return NETMET_2;
}

public byte getNETMET_3() {
return NETMET_3;
}

public short getNETPH_1() {
return NETPH_1;
}

public short getNETPH_2() {
return NETPH_2;
}

public short getNETPH_3() {
return NETPH_3;
}

public byte getNETPUSE() {
return NETPUSE;
}

public byte getNETRL_1() {
return NETRL_1;
}

public byte getNETRL_2() {
return NETRL_2;
}

public byte getNETRL_3() {
return NETRL_3;
}

public short getNETSX_1() {
return NETSX_1;
}

public short getNETSX_2() {
return NETSX_2;
}

public short getNETSX_3() {
return NETSX_3;
}

public byte getNETTALK10_1() {
return NETTALK10_1;
}

public byte getNETTALK10_2() {
return NETTALK10_2;
}

public byte getNETTALK10_3() {
return NETTALK10_3;
}

public byte getNETTALK11_1() {
return NETTALK11_1;
}

public byte getNETTALK11_2() {
return NETTALK11_2;
}

public byte getNETTALK11_3() {
return NETTALK11_3;
}

public byte getNETTALK12_1() {
return NETTALK12_1;
}

public byte getNETTALK12_2() {
return NETTALK12_2;
}

public byte getNETTALK12_3() {
return NETTALK12_3;
}

public byte getNETTALK13_1() {
return NETTALK13_1;
}

public byte getNETTALK13_2() {
return NETTALK13_2;
}

public byte getNETTALK13_3() {
return NETTALK13_3;
}

public byte getNETTALK1_1() {
return NETTALK1_1;
}

public byte getNETTALK1_2() {
return NETTALK1_2;
}

public byte getNETTALK1_3() {
return NETTALK1_3;
}

public byte getNETTALK2_1() {
return NETTALK2_1;
}

public byte getNETTALK2_2() {
return NETTALK2_2;
}

public byte getNETTALK2_3() {
return NETTALK2_3;
}

public byte getNETTALK3_1() {
return NETTALK3_1;
}

public byte getNETTALK3_2() {
return NETTALK3_2;
}

public byte getNETTALK3_3() {
return NETTALK3_3;
}

public byte getNETTALK4_1() {
return NETTALK4_1;
}

public byte getNETTALK4_2() {
return NETTALK4_2;
}

public byte getNETTALK4_3() {
return NETTALK4_3;
}

public byte getNETTALK5_1() {
return NETTALK5_1;
}

public byte getNETTALK5_2() {
return NETTALK5_2;
}

public byte getNETTALK5_3() {
return NETTALK5_3;
}

public byte getNETTALK6_1() {
return NETTALK6_1;
}

public byte getNETTALK6_2() {
return NETTALK6_2;
}

public byte getNETTALK6_3() {
return NETTALK6_3;
}

public byte getNETTALK7_1() {
return NETTALK7_1;
}

public byte getNETTALK7_2() {
return NETTALK7_2;
}

public byte getNETTALK7_3() {
return NETTALK7_3;
}

public byte getNETTALK8_1() {
return NETTALK8_1;
}

public byte getNETTALK8_2() {
return NETTALK8_2;
}

public byte getNETTALK8_3() {
return NETTALK8_3;
}

public byte getNETTALK96_1() {
return NETTALK96_1;
}

public byte getNETTALK96_2() {
return NETTALK96_2;
}

public byte getNETTALK96_3() {
return NETTALK96_3;
}

public byte getNETTALK97_1() {
return NETTALK97_1;
}

public byte getNETTALK97_2() {
return NETTALK97_2;
}

public byte getNETTALK97_3() {
return NETTALK97_3;
}

public byte getNETTALK9_1() {
return NETTALK9_1;
}

public byte getNETTALK9_2() {
return NETTALK9_2;
}

public byte getNETTALK9_3() {
return NETTALK9_3;
}

public byte getNETUSE() {
return NETUSE;
}

public byte getNETWEB_1() {
return NETWEB_1;
}

public byte getNETWEB_2() {
return NETWEB_2;
}

public byte getNETWEB_3() {
return NETWEB_3;
}

public short getNETWR_1() {
return NETWR_1;
}

public short getNETWR_2() {
return NETWR_2;
}

public short getNETWR_3() {
return NETWR_3;
}

public byte getNEWSMAIN() {
return NEWSMAIN;
}

public byte getNEWSOURCE1() {
return NEWSOURCE1;
}

public byte getNEWSOURCE10() {
return NEWSOURCE10;
}

public byte getNEWSOURCE11() {
return NEWSOURCE11;
}

public byte getNEWSOURCE12() {
return NEWSOURCE12;
}

public byte getNEWSOURCE2() {
return NEWSOURCE2;
}

public byte getNEWSOURCE3() {
return NEWSOURCE3;
}

public byte getNEWSOURCE4() {
return NEWSOURCE4;
}

public byte getNEWSOURCE5() {
return NEWSOURCE5;
}

public byte getNEWSOURCE6() {
return NEWSOURCE6;
}

public byte getNEWSOURCE7() {
return NEWSOURCE7;
}

public byte getNEWSOURCE8() {
return NEWSOURCE8;
}

public byte getNEWSOURCE9() {
return NEWSOURCE9;
}

public byte getNEWSOURCE96() {
return NEWSOURCE96;
}

public byte getNEXT1() {
return NEXT1;
}

public byte getNEXT2() {
return NEXT2;
}

public byte getNEXT3() {
return NEXT3;
}

public byte getNEXT4() {
return NEXT4;
}

public byte getNEXT5() {
return NEXT5;
}

public byte getNEXT6() {
return NEXT6;
}

public byte getNEXT7() {
return NEXT7;
}

public byte getNEXT8() {
return NEXT8;
}

public byte getNEXT9() {
return NEXT9;
}

public byte getNEXTELSE1() {
return NEXTELSE1;
}

public byte getNEXTELSE2() {
return NEXTELSE2;
}

public byte getNEXTELSE3() {
return NEXTELSE3;
}

public byte getNEXTELSE4() {
return NEXTELSE4;
}

public byte getNEXTELSE5() {
return NEXTELSE5;
}

public byte getNEXTELSE6() {
return NEXTELSE6;
}

public byte getNEXTELSE7() {
return NEXTELSE7;
}

public byte getNEXTELSE8() {
return NEXTELSE8;
}

public boolean getNEXTELSE9() {
return NEXTELSE9;
}

public byte getNEXTJOB1() {
return NEXTJOB1;
}

public byte getNEXTJOB2() {
return NEXTJOB2;
}

public byte getNEXTJOB3() {
return NEXTJOB3;
}

public byte getNEXTJOB4() {
return NEXTJOB4;
}

public byte getNEXTJOB5() {
return NEXTJOB5;
}

public byte getNEXTJOB6() {
return NEXTJOB6;
}

public byte getNEXTJOB7() {
return NEXTJOB7;
}

public byte getNEXTJOB8() {
return NEXTJOB8;
}

public byte getNEXTJOB9() {
return NEXTJOB9;
}

public byte getNEXTSTAT1() {
return NEXTSTAT1;
}

public byte getNEXTSTAT2() {
return NEXTSTAT2;
}

public byte getNEXTSTAT3() {
return NEXTSTAT3;
}

public byte getNEXTSTAT4() {
return NEXTSTAT4;
}

public byte getNEXTSTAT5() {
return NEXTSTAT5;
}

public byte getNEXTSTAT6() {
return NEXTSTAT6;
}

public byte getNEXTSTAT7() {
return NEXTSTAT7;
}

public byte getNEXTSTAT8() {
return NEXTSTAT8;
}

public byte getNEXTSTAT9() {
return NEXTSTAT9;
}

public byte getNFH01() {
return NFH01;
}

public byte getNFH02() {
return NFH02;
}

public byte getNFH03() {
return NFH03;
}

public byte getNFH04() {
return NFH04;
}

public byte getNFH05() {
return NFH05;
}

public byte getNFH06() {
return NFH06;
}

public byte getNFH07() {
return NFH07;
}

public byte getNFH08() {
return NFH08;
}

public byte getNFH09() {
return NFH09;
}

public byte getNFH10() {
return NFH10;
}

public byte getNFH11() {
return NFH11;
}

public byte getNFH12() {
return NFH12;
}

public byte getNFH13() {
return NFH13;
}

public byte getNFH14() {
return NFH14;
}

public byte getNFH15() {
return NFH15;
}

public byte getNFH16() {
return NFH16;
}

public byte getNFH17() {
return NFH17;
}

public byte getNFH18() {
return NFH18;
}

public byte getNFH19() {
return NFH19;
}

public byte getNFH20() {
return NFH20;
}

public byte getNFH21() {
return NFH21;
}

public byte getNFH22() {
return NFH22;
}

public byte getNFH23() {
return NFH23;
}

public byte getNFH24() {
return NFH24;
}

public byte getNFH25() {
return NFH25;
}

public byte getNFH26() {
return NFH26;
}

public byte getNFH27() {
return NFH27;
}

public byte getNFH28() {
return NFH28;
}

public byte getNFH29() {
return NFH29;
}

public byte getNFH30() {
return NFH30;
}

public byte getNFH31() {
return NFH31;
}

public byte getNFH32() {
return NFH32;
}

public byte getNFH33() {
return NFH33;
}

public byte getNFH34() {
return NFH34;
}

public byte getNFH35() {
return NFH35;
}

public byte getNFH36() {
return NFH36;
}

public byte getNFH37() {
return NFH37;
}

public byte getNFH38() {
return NFH38;
}

public byte getNFH39() {
return NFH39;
}

public byte getNGRP_DV() {
return NGRP_DV;
}

public byte getNHIQUAL_DV() {
return NHIQUAL_DV;
}

public byte getNIACT() {
return NIACT;
}

public byte getNICLBNS1() {
return NICLBNS1;
}

public byte getNICLBNS2() {
return NICLBNS2;
}

public byte getNICLBNS3() {
return NICLBNS3;
}

public byte getNICLBNS4() {
return NICLBNS4;
}

public byte getNIREL() {
return NIREL;
}

public byte getNISERPS() {
return NISERPS;
}

public byte getNMAR() {
return NMAR;
}

public byte getNMPSP_DV() {
return NMPSP_DV;
}

public byte getNNATCH() {
return NNATCH;
}

public byte getNNEWBORN() {
return NNEWBORN;
}

public byte getNNMPSP_DV() {
return NNMPSP_DV;
}

public byte getNNSIB_DV() {
return NNSIB_DV;
}

public byte getNNSSIB_DV() {
return NNSSIB_DV;
}

public byte getNOTEMPCHK() {
return NOTEMPCHK;
}

public byte getNPENSIONER_DV() {
return NPENSIONER_DV;
}

public byte getNPNS_DV() {
return NPNS_DV;
}

public byte getNPN_DV() {
return NPN_DV;
}

public byte getNQFHIGH_DV() {
return NQFHIGH_DV;
}

public byte getNRELS1() {
return NRELS1;
}

public byte getNRELS2() {
return NRELS2;
}

public byte getNRELS3() {
return NRELS3;
}

public byte getNRELS4() {
return NRELS4;
}

public byte getNRELS5() {
return NRELS5;
}

public byte getNRELS6() {
return NRELS6;
}

public byte getNS200PRE() {
return NS200PRE;
}

public byte getNS201G1() {
return NS201G1;
}

public byte getNS202H1() {
return NS202H1;
}

public byte getNS203I1() {
return NS203I1;
}

public byte getNS204A1() {
return NS204A1;
}

public byte getNS205B1() {
return NS205B1;
}

public byte getNS206C1() {
return NS206C1;
}

public byte getNS207D1() {
return NS207D1;
}

public byte getNS208E1() {
return NS208E1;
}

public byte getNS209F1() {
return NS209F1;
}

public byte getNS210J1() {
return NS210J1;
}

public byte getNS211K1() {
return NS211K1;
}

public byte getNS212L1() {
return NS212L1;
}

public byte getNS213M1() {
return NS213M1;
}

public byte getNS214N1() {
return NS214N1;
}

public byte getNS215O1() {
return NS215O1;
}

public byte getNS216C() {
return NS216C;
}

public byte getNS221G2() {
return NS221G2;
}

public byte getNS222H2() {
return NS222H2;
}

public byte getNS223I2() {
return NS223I2;
}

public byte getNS224A2() {
return NS224A2;
}

public byte getNS225B2() {
return NS225B2;
}

public byte getNS226C() {
return NS226C;
}

public byte getNS226C2() {
return NS226C2;
}

public byte getNS227D2() {
return NS227D2;
}

public byte getNS228E2() {
return NS228E2;
}

public byte getNS229F2() {
return NS229F2;
}

public byte getNS230J2() {
return NS230J2;
}

public byte getNS231K2() {
return NS231K2;
}

public byte getNS232L2() {
return NS232L2;
}

public byte getNS233M2() {
return NS233M2;
}

public byte getNS234N2() {
return NS234N2;
}

public byte getNS235O2() {
return NS235O2;
}

public byte getNS240() {
return NS240;
}

public byte getNS241() {
return NS241;
}

public byte getNS242() {
return NS242;
}

public byte getNSCONT11() {
return NSCONT11;
}

public byte getNSCONT12() {
return NSCONT12;
}

public byte getNSCONT13() {
return NSCONT13;
}

public byte getNSCONT21() {
return NSCONT21;
}

public byte getNSCONT210() {
return NSCONT210;
}

public byte getNSCONT211() {
return NSCONT211;
}

public byte getNSCONT212() {
return NSCONT212;
}

public byte getNSCONT213() {
return NSCONT213;
}

public byte getNSCONT214() {
return NSCONT214;
}

public byte getNSCONT215() {
return NSCONT215;
}

public byte getNSCONT216() {
return NSCONT216;
}

public byte getNSCONT22() {
return NSCONT22;
}

public byte getNSCONT23() {
return NSCONT23;
}

public byte getNSCONT24() {
return NSCONT24;
}

public byte getNSCONT25() {
return NSCONT25;
}

public byte getNSCONT26() {
return NSCONT26;
}

public byte getNSCONT27() {
return NSCONT27;
}

public byte getNSCONT28() {
return NSCONT28;
}

public byte getNSCONT29() {
return NSCONT29;
}

public byte getNSCONT3() {
return NSCONT3;
}

public byte getNSRAN() {
return NSRAN;
}

public byte getNSSTOP1() {
return NSSTOP1;
}

public byte getNSSTOP2() {
return NSSTOP2;
}

public byte getNSSTOP3() {
return NSSTOP3;
}

public byte getNSSTOP4() {
return NSSTOP4;
}

public byte getNSSTOP5() {
return NSSTOP5;
}

public byte getNSSTOP6() {
return NSSTOP6;
}

public byte getNSSTOP7() {
return NSSTOP7;
}

public byte getNSSTOP8() {
return NSSTOP8;
}

public byte getNSSTOP97() {
return NSSTOP97;
}

public byte getNUABPRE() {
return NUABPRE;
}

public byte getNUNMPSP_DV() {
return NUNMPSP_DV;
}

public byte getNXTJBENDD() {
return NXTJBENDD;
}

public byte getNXTJBENDM() {
return NXTJBENDM;
}

public short getNXTJBENDY4() {
return NXTJBENDY4;
}

public byte getNXTJBES() {
return NXTJBES;
}

public byte getNXTJBHRS() {
return NXTJBHRS;
}

public byte getNXTST() {
return NXTST;
}

public byte getNXTSTELSE() {
return NXTSTELSE;
}

public byte getNXTSTENDD() {
return NXTSTENDD;
}

public byte getNXTSTENDM() {
return NXTSTENDM;
}

public short getNXTSTENDY4() {
return NXTSTENDY4;
}

public byte getOCIMPA() {
return OCIMPA;
}

public byte getOCIMPB() {
return OCIMPB;
}

public byte getOCIMPE() {
return OCIMPE;
}

public byte getOCIMPF() {
return OCIMPF;
}

public byte getOCIMPI() {
return OCIMPI;
}

public byte getOCIMPK() {
return OCIMPK;
}

public byte getOCIMPL() {
return OCIMPL;
}

public byte getOHCH16() {
return OHCH16;
}

public byte getOPRLG() {
return OPRLG;
}

public byte getOPRLG0() {
return OPRLG0;
}

public byte getOPRLG0NI() {
return OPRLG0NI;
}

public byte getOPRLG1() {
return OPRLG1;
}

public byte getORG() {
return ORG;
}

public byte getORGA1() {
return ORGA1;
}

public byte getORGA10() {
return ORGA10;
}

public byte getORGA11() {
return ORGA11;
}

public byte getORGA12() {
return ORGA12;
}

public byte getORGA13() {
return ORGA13;
}

public byte getORGA14() {
return ORGA14;
}

public byte getORGA15() {
return ORGA15;
}

public byte getORGA16() {
return ORGA16;
}

public byte getORGA2() {
return ORGA2;
}

public byte getORGA3() {
return ORGA3;
}

public byte getORGA4() {
return ORGA4;
}

public byte getORGA5() {
return ORGA5;
}

public byte getORGA6() {
return ORGA6;
}

public byte getORGA7() {
return ORGA7;
}

public byte getORGA8() {
return ORGA8;
}

public byte getORGA9() {
return ORGA9;
}

public byte getORGA96() {
return ORGA96;
}

public byte getORGAT1() {
return ORGAT1;
}

public byte getORGAT10() {
return ORGAT10;
}

public byte getORGAT11() {
return ORGAT11;
}

public byte getORGAT12() {
return ORGAT12;
}

public byte getORGAT13() {
return ORGAT13;
}

public byte getORGAT14() {
return ORGAT14;
}

public byte getORGAT15() {
return ORGAT15;
}

public byte getORGAT16() {
return ORGAT16;
}

public byte getORGAT2() {
return ORGAT2;
}

public byte getORGAT3() {
return ORGAT3;
}

public byte getORGAT4() {
return ORGAT4;
}

public byte getORGAT5() {
return ORGAT5;
}

public byte getORGAT6() {
return ORGAT6;
}

public byte getORGAT7() {
return ORGAT7;
}

public byte getORGAT8() {
return ORGAT8;
}

public byte getORGAT9() {
return ORGAT9;
}

public byte getORGAT96() {
return ORGAT96;
}

public byte getORGM1() {
return ORGM1;
}

public byte getORGM10() {
return ORGM10;
}

public byte getORGM11() {
return ORGM11;
}

public byte getORGM12() {
return ORGM12;
}

public byte getORGM13() {
return ORGM13;
}

public byte getORGM14() {
return ORGM14;
}

public byte getORGM15() {
return ORGM15;
}

public byte getORGM16() {
return ORGM16;
}

public byte getORGM2() {
return ORGM2;
}

public byte getORGM3() {
return ORGM3;
}

public byte getORGM4() {
return ORGM4;
}

public byte getORGM5() {
return ORGM5;
}

public byte getORGM6() {
return ORGM6;
}

public byte getORGM7() {
return ORGM7;
}

public byte getORGM8() {
return ORGM8;
}

public byte getORGM9() {
return ORGM9;
}

public byte getORGM96() {
return ORGM96;
}

public byte getORGMT1() {
return ORGMT1;
}

public byte getORGMT10() {
return ORGMT10;
}

public byte getORGMT11() {
return ORGMT11;
}

public byte getORGMT12() {
return ORGMT12;
}

public byte getORGMT13() {
return ORGMT13;
}

public byte getORGMT14() {
return ORGMT14;
}

public byte getORGMT15() {
return ORGMT15;
}

public byte getORGMT16() {
return ORGMT16;
}

public byte getORGMT2() {
return ORGMT2;
}

public byte getORGMT3() {
return ORGMT3;
}

public byte getORGMT4() {
return ORGMT4;
}

public byte getORGMT5() {
return ORGMT5;
}

public byte getORGMT6() {
return ORGMT6;
}

public byte getORGMT7() {
return ORGMT7;
}

public byte getORGMT8() {
return ORGMT8;
}

public byte getORGMT9() {
return ORGMT9;
}

public byte getORGMT96() {
return ORGMT96;
}

public byte getORIGADD() {
return ORIGADD;
}

public byte getOVTNSA() {
return OVTNSA;
}

public byte getOVTPAY() {
return OVTPAY;
}

protected double OVTRATE() {
return OVTRATE;
}

public byte getOVTREST() {
return OVTREST;
}

public byte getPAAGE() {
return PAAGE;
}

public byte getPAAID1() {
return PAAID1;
}

public byte getPAAID2() {
return PAAID2;
}

public byte getPAAID3() {
return PAAID3;
}

public byte getPAAID4() {
return PAAID4;
}

public byte getPAAID5() {
return PAAID5;
}

public byte getPAAID6() {
return PAAID6;
}

public byte getPAAID7() {
return PAAID7;
}

public byte getPAAID8() {
return PAAID8;
}

public byte getPAAID96() {
return PAAID96;
}

public byte getPAAID97() {
return PAAID97;
}

public byte getPACOB() {
return PACOB;
}

public byte getPACON() {
return PACON;
}

public byte getPAFAR() {
return PAFAR;
}

public byte getPAIDU1() {
return PAIDU1;
}

public byte getPAIDU2() {
return PAIDU2;
}

public byte getPAIDU3() {
return PAIDU3;
}

public byte getPAIDU4() {
return PAIDU4;
}

public byte getPAIDU5() {
return PAIDU5;
}

public byte getPAIDU6() {
return PAIDU6;
}

public byte getPAIDU7() {
return PAIDU7;
}

public byte getPAIDU8() {
return PAIDU8;
}

public byte getPAIDU96() {
return PAIDU96;
}

public byte getPAIDU97() {
return PAIDU97;
}

public byte getPAJU() {
return PAJU;
}

public byte getPALONE() {
return PALONE;
}

public byte getPAMOSTCON() {
return PAMOSTCON;
}

public byte getPANSSEC5_DV() {
return PANSSEC5_DV;
}

public short getPAPERM2() {
return PAPERM2;
}

public byte getPARCHILD() {
return PARCHILD;
}

public byte getPAREVE() {
return PAREVE;
}

public byte getPARMAR() {
return PARMAR;
}

public byte getPARSCH() {
return PARSCH;
}

public byte getPASEE() {
return PASEE;
}

public short getPASOC00_CC() {
return PASOC00_CC;
}

public short getPASOC10_CC() {
return PASOC10_CC;
}

public byte getPASOC90_CC() {
return PASOC90_CC;
}

public byte getPAYGWC() {
return PAYGWC;
}

protected double PAYG_DV() {
return PAYG_DV;
}

public byte getPAYNWC() {
return PAYNWC;
}

public byte getPAYRUK() {
return PAYRUK;
}

public byte getPAYTYP() {
return PAYTYP;
}

public byte getPAYUWC() {
return PAYUWC;
}

protected double PAYU_DV() {
return PAYU_DV;
}

public byte getPBNFT1() {
return PBNFT1;
}

public byte getPBNFT10() {
return PBNFT10;
}

public byte getPBNFT11() {
return PBNFT11;
}

public byte getPBNFT12() {
return PBNFT12;
}

public byte getPBNFT2() {
return PBNFT2;
}

public byte getPBNFT3() {
return PBNFT3;
}

public byte getPBNFT4() {
return PBNFT4;
}

public byte getPBNFT5() {
return PBNFT5;
}

public byte getPBNFT6() {
return PBNFT6;
}

public byte getPBNFT7() {
return PBNFT7;
}

public byte getPBNFT8() {
return PBNFT8;
}

public byte getPBNFT9() {
return PBNFT9;
}

public byte getPBNFT96() {
return PBNFT96;
}

public byte getPENMEX() {
return PENMEX;
}

public byte getPENSIONER_DV() {
return PENSIONER_DV;
}

public byte getPERBFTS() {
return PERBFTS;
}

public byte getPERPOLINF() {
return PERPOLINF;
}

public int getPID() {
return PID;
}

public byte getPJBPTFT() {
return PJBPTFT;
}

public byte getPJSPTFT() {
return PJSPTFT;
}

public byte getPLIVPAR() {
return PLIVPAR;
}

public short getPLNOWM() {
return PLNOWM;
}

public short getPLNOWY4() {
return PLNOWY4;
}

public int getPN1PID() {
return PN1PID;
}

public byte getPN1PNO() {
return PN1PNO;
}

public byte getPN1SEX() {
return PN1SEX;
}

public int getPN2PID() {
return PN2PID;
}

public byte getPN2PNO() {
return PN2PNO;
}

public byte getPN2SEX() {
return PN2SEX;
}

public int getPNS1PID() {
return PNS1PID;
}

public byte getPNS1PNO() {
return PNS1PNO;
}

public byte getPNS1SEX() {
return PNS1SEX;
}

public int getPNS2PID() {
return PNS2PID;
}

public byte getPNS2PNO() {
return PNS2PNO;
}

public byte getPNS2SEX() {
return PNS2SEX;
}

public byte getPOLCOST() {
return POLCOST;
}

public byte getPOLEFF1() {
return POLEFF1;
}

public byte getPOLEFF2() {
return POLEFF2;
}

public byte getPOLEFF3() {
return POLEFF3;
}

public byte getPOLEFF4() {
return POLEFF4;
}

public int getPPID() {
return PPID;
}

public byte getPPPEX() {
return PPPEX;
}

public byte getPPPEXM() {
return PPPEXM;
}

public byte getPPSEX() {
return PPSEX;
}

public byte getPRAISEKID() {
return PRAISEKID;
}

public byte getPREARN() {
return PREARN;
}

public byte getPREARNA() {
return PREARNA;
}

public byte getPREARNW() {
return PREARNW;
}

public byte getPREASON() {
return PREASON;
}

public byte getPRECOG() {
return PRECOG;
}

public byte getPREG() {
return PREG;
}

public byte getPREGEND1() {
return PREGEND1;
}

public byte getPREGEND2() {
return PREGEND2;
}

public byte getPREGEND3() {
return PREGEND3;
}

public byte getPREGFERT1() {
return PREGFERT1;
}

public byte getPREGFERT2() {
return PREGFERT2;
}

public byte getPREGFERT3() {
return PREGFERT3;
}

public byte getPREGM1() {
return PREGM1;
}

public byte getPREGM2() {
return PREGM2;
}

public byte getPREGM3() {
return PREGM3;
}

public byte getPREGOUT1() {
return PREGOUT1;
}

public byte getPREGOUT2() {
return PREGOUT2;
}

public byte getPREGOUT3() {
return PREGOUT3;
}

public byte getPREGSMK11() {
return PREGSMK11;
}

public byte getPREGSMK12() {
return PREGSMK12;
}

public byte getPREGSMK13() {
return PREGSMK13;
}

public byte getPREGSMK21() {
return PREGSMK21;
}

public byte getPREGSMK22() {
return PREGSMK22;
}

public byte getPREGSMK23() {
return PREGSMK23;
}

public byte getPREGSMK31() {
return PREGSMK31;
}

public byte getPREGSMK32() {
return PREGSMK32;
}

public byte getPREGSMK33() {
return PREGSMK33;
}

public byte getPREGSMOKE1() {
return PREGSMOKE1;
}

public byte getPREGSMOKE2() {
return PREGSMOKE2;
}

public byte getPREGSMOKE3() {
return PREGSMOKE3;
}

public short getPREGY41() {
return PREGY41;
}

public short getPREGY42() {
return PREGY42;
}

public short getPREGY43() {
return PREGY43;
}

public byte getPREL() {
return PREL;
}

public byte getPRFITB() {
return PRFITB;
}

public byte getPRFITBA() {
return PRFITBA;
}

public byte getPRFITBW() {
return PRFITBW;
}

public byte getPROMODENY() {
return PROMODENY;
}

public byte getPS1() {
return PS1;
}

public byte getPS10() {
return PS10;
}

public byte getPS11() {
return PS11;
}

public byte getPS12() {
return PS12;
}

public byte getPS13() {
return PS13;
}

public byte getPS14() {
return PS14;
}

public byte getPS15() {
return PS15;
}

public byte getPS16() {
return PS16;
}

public byte getPS17() {
return PS17;
}

public byte getPS18() {
return PS18;
}

public byte getPS19() {
return PS19;
}

public byte getPS2() {
return PS2;
}

public byte getPS20() {
return PS20;
}

public byte getPS21() {
return PS21;
}

public byte getPS22() {
return PS22;
}

public byte getPS23() {
return PS23;
}

public byte getPS24() {
return PS24;
}

public byte getPS25() {
return PS25;
}

public byte getPS26() {
return PS26;
}

public byte getPS27() {
return PS27;
}

public byte getPS28() {
return PS28;
}

public byte getPS29() {
return PS29;
}

public byte getPS3() {
return PS3;
}

public byte getPS30() {
return PS30;
}

public byte getPS31() {
return PS31;
}

public byte getPS32() {
return PS32;
}

public byte getPS4() {
return PS4;
}

public byte getPS5() {
return PS5;
}

public byte getPS6() {
return PS6;
}

public byte getPS7() {
return PS7;
}

public byte getPS8() {
return PS8;
}

public byte getPS9() {
return PS9;
}

public byte getPSDQA_DV() {
return PSDQA_DV;
}

public byte getPSDQB_DV() {
return PSDQB_DV;
}

public byte getPSDQDV() {
return PSDQDV;
}

public byte getPSIBLINGS() {
return PSIBLINGS;
}

public byte getPSNUMCH() {
return PSNUMCH;
}

public int getPSU() {
return PSU;
}

public byte getPYENRL() {
return PYENRL;
}

public byte getQFHIGH() {
return QFHIGH;
}

public boolean getQFHIGHFL_DV() {
return QFHIGHFL_DV;
}

public byte getQFHIGH_DV() {
return QFHIGH_DV;
}

public byte getQFVOC1() {
return QFVOC1;
}

public byte getQFVOC10() {
return QFVOC10;
}

public byte getQFVOC11() {
return QFVOC11;
}

public byte getQFVOC12() {
return QFVOC12;
}

public byte getQFVOC13() {
return QFVOC13;
}

public byte getQFVOC14() {
return QFVOC14;
}

public byte getQFVOC15() {
return QFVOC15;
}

public byte getQFVOC2() {
return QFVOC2;
}

public byte getQFVOC3() {
return QFVOC3;
}

public byte getQFVOC4() {
return QFVOC4;
}

public byte getQFVOC5() {
return QFVOC5;
}

public byte getQFVOC6() {
return QFVOC6;
}

public byte getQFVOC7() {
return QFVOC7;
}

public byte getQFVOC8() {
return QFVOC8;
}

public byte getQFVOC9() {
return QFVOC9;
}

public byte getQFVOC96() {
return QFVOC96;
}

public byte getQUALNEW1() {
return QUALNEW1;
}

public byte getQUALNEW10() {
return QUALNEW10;
}

public byte getQUALNEW11() {
return QUALNEW11;
}

public byte getQUALNEW13() {
return QUALNEW13;
}

public byte getQUALNEW15() {
return QUALNEW15;
}

public byte getQUALNEW16() {
return QUALNEW16;
}

public byte getQUALNEW17() {
return QUALNEW17;
}

public byte getQUALNEW18() {
return QUALNEW18;
}

public byte getQUALNEW19() {
return QUALNEW19;
}

public byte getQUALNEW2() {
return QUALNEW2;
}

public byte getQUALNEW20() {
return QUALNEW20;
}

public byte getQUALNEW21() {
return QUALNEW21;
}

public byte getQUALNEW22() {
return QUALNEW22;
}

public byte getQUALNEW23() {
return QUALNEW23;
}

public byte getQUALNEW24() {
return QUALNEW24;
}

public byte getQUALNEW25() {
return QUALNEW25;
}

public byte getQUALNEW26() {
return QUALNEW26;
}

public byte getQUALNEW27() {
return QUALNEW27;
}

public byte getQUALNEW28() {
return QUALNEW28;
}

public byte getQUALNEW29() {
return QUALNEW29;
}

public byte getQUALNEW3() {
return QUALNEW3;
}

public byte getQUALNEW30() {
return QUALNEW30;
}

public byte getQUALNEW31() {
return QUALNEW31;
}

public byte getQUALNEW4() {
return QUALNEW4;
}

public byte getQUALNEW5() {
return QUALNEW5;
}

public byte getQUALNEW6() {
return QUALNEW6;
}

public byte getQUALNEW7() {
return QUALNEW7;
}

public byte getQUALNEW8() {
return QUALNEW8;
}

public byte getQUALNEW9() {
return QUALNEW9;
}

public byte getQUALOC() {
return QUALOC;
}

public byte getQUARREL() {
return QUARREL;
}

public byte getRACEL() {
return RACEL;
}

public byte getRACELAT() {
return RACELAT;
}

public byte getRACELBT() {
return RACELBT;
}

public byte getRACELMT() {
return RACELMT;
}

public byte getRACELOT_CODE() {
return RACELOT_CODE;
}

public short getRACELO_CODE() {
return RACELO_CODE;
}

public byte getRACELT() {
return RACELT;
}

public byte getRACELWT() {
return RACELWT;
}

public byte getRACEL_DV() {
return RACEL_DV;
}

public byte getREADTEST() {
return READTEST;
}

public byte getREASEND1() {
return REASEND1;
}

public byte getREASEND2() {
return REASEND2;
}

public byte getREASEND3() {
return REASEND3;
}

public byte getREASEND4() {
return REASEND4;
}

public byte getREASEND5() {
return REASEND5;
}

public byte getREASEND6() {
return REASEND6;
}

public byte getREASEND7() {
return REASEND7;
}

public boolean getREASEND8() {
return REASEND8;
}

public byte getREASEND9() {
return REASEND9;
}

public byte getRELKID() {
return RELKID;
}

public byte getRELUP() {
return RELUP;
}

public byte getREMAIL_CODE() {
return REMAIL_CODE;
}

public byte getRESATTACKED1_1() {
return RESATTACKED1_1;
}

public byte getRESATTACKED1_10() {
return RESATTACKED1_10;
}

public byte getRESATTACKED1_11() {
return RESATTACKED1_11;
}

public byte getRESATTACKED1_12() {
return RESATTACKED1_12;
}

public byte getRESATTACKED1_2() {
return RESATTACKED1_2;
}

public byte getRESATTACKED1_3() {
return RESATTACKED1_3;
}

public byte getRESATTACKED1_4() {
return RESATTACKED1_4;
}

public byte getRESATTACKED1_5() {
return RESATTACKED1_5;
}

public byte getRESATTACKED1_6() {
return RESATTACKED1_6;
}

public byte getRESATTACKED1_7() {
return RESATTACKED1_7;
}

public byte getRESATTACKED1_8() {
return RESATTACKED1_8;
}

public byte getRESATTACKED1_9() {
return RESATTACKED1_9;
}

public byte getRESATTACKED2_1() {
return RESATTACKED2_1;
}

public byte getRESATTACKED2_10() {
return RESATTACKED2_10;
}

public byte getRESATTACKED2_11() {
return RESATTACKED2_11;
}

public byte getRESATTACKED2_12() {
return RESATTACKED2_12;
}

public byte getRESATTACKED2_2() {
return RESATTACKED2_2;
}

public byte getRESATTACKED2_3() {
return RESATTACKED2_3;
}

public byte getRESATTACKED2_4() {
return RESATTACKED2_4;
}

public byte getRESATTACKED2_5() {
return RESATTACKED2_5;
}

public byte getRESATTACKED2_6() {
return RESATTACKED2_6;
}

public byte getRESATTACKED2_7() {
return RESATTACKED2_7;
}

public byte getRESATTACKED2_8() {
return RESATTACKED2_8;
}

public byte getRESATTACKED2_9() {
return RESATTACKED2_9;
}

public byte getRESATTACKED3_1() {
return RESATTACKED3_1;
}

public byte getRESATTACKED3_10() {
return RESATTACKED3_10;
}

public byte getRESATTACKED3_11() {
return RESATTACKED3_11;
}

public byte getRESATTACKED3_12() {
return RESATTACKED3_12;
}

public byte getRESATTACKED3_2() {
return RESATTACKED3_2;
}

public byte getRESATTACKED3_3() {
return RESATTACKED3_3;
}

public byte getRESATTACKED3_4() {
return RESATTACKED3_4;
}

public byte getRESATTACKED3_5() {
return RESATTACKED3_5;
}

public byte getRESATTACKED3_6() {
return RESATTACKED3_6;
}

public byte getRESATTACKED3_7() {
return RESATTACKED3_7;
}

public byte getRESATTACKED3_8() {
return RESATTACKED3_8;
}

public byte getRESATTACKED3_9() {
return RESATTACKED3_9;
}

public byte getRESATTACKED4_1() {
return RESATTACKED4_1;
}

public byte getRESATTACKED4_10() {
return RESATTACKED4_10;
}

public byte getRESATTACKED4_11() {
return RESATTACKED4_11;
}

public byte getRESATTACKED4_12() {
return RESATTACKED4_12;
}

public byte getRESATTACKED4_2() {
return RESATTACKED4_2;
}

public byte getRESATTACKED4_3() {
return RESATTACKED4_3;
}

public byte getRESATTACKED4_4() {
return RESATTACKED4_4;
}

public byte getRESATTACKED4_5() {
return RESATTACKED4_5;
}

public byte getRESATTACKED4_6() {
return RESATTACKED4_6;
}

public byte getRESATTACKED4_7() {
return RESATTACKED4_7;
}

public byte getRESATTACKED4_8() {
return RESATTACKED4_8;
}

public byte getRESATTACKED4_9() {
return RESATTACKED4_9;
}

public byte getRESATTACKED5_1() {
return RESATTACKED5_1;
}

public byte getRESATTACKED5_10() {
return RESATTACKED5_10;
}

public byte getRESATTACKED5_11() {
return RESATTACKED5_11;
}

public byte getRESATTACKED5_12() {
return RESATTACKED5_12;
}

public byte getRESATTACKED5_2() {
return RESATTACKED5_2;
}

public byte getRESATTACKED5_3() {
return RESATTACKED5_3;
}

public byte getRESATTACKED5_4() {
return RESATTACKED5_4;
}

public byte getRESATTACKED5_5() {
return RESATTACKED5_5;
}

public byte getRESATTACKED5_6() {
return RESATTACKED5_6;
}

public byte getRESATTACKED5_7() {
return RESATTACKED5_7;
}

public byte getRESATTACKED5_8() {
return RESATTACKED5_8;
}

public byte getRESATTACKED5_9() {
return RESATTACKED5_9;
}

public byte getRESATTACKED6_1() {
return RESATTACKED6_1;
}

public byte getRESATTACKED6_10() {
return RESATTACKED6_10;
}

public byte getRESATTACKED6_11() {
return RESATTACKED6_11;
}

public byte getRESATTACKED6_12() {
return RESATTACKED6_12;
}

public byte getRESATTACKED6_2() {
return RESATTACKED6_2;
}

public byte getRESATTACKED6_3() {
return RESATTACKED6_3;
}

public byte getRESATTACKED6_4() {
return RESATTACKED6_4;
}

public byte getRESATTACKED6_5() {
return RESATTACKED6_5;
}

public byte getRESATTACKED6_6() {
return RESATTACKED6_6;
}

public byte getRESATTACKED6_7() {
return RESATTACKED6_7;
}

public byte getRESATTACKED6_8() {
return RESATTACKED6_8;
}

public byte getRESATTACKED6_9() {
return RESATTACKED6_9;
}

public byte getRESATTACKED7_1() {
return RESATTACKED7_1;
}

public byte getRESATTACKED7_10() {
return RESATTACKED7_10;
}

public byte getRESATTACKED7_11() {
return RESATTACKED7_11;
}

public byte getRESATTACKED7_12() {
return RESATTACKED7_12;
}

public byte getRESATTACKED7_2() {
return RESATTACKED7_2;
}

public byte getRESATTACKED7_3() {
return RESATTACKED7_3;
}

public byte getRESATTACKED7_4() {
return RESATTACKED7_4;
}

public byte getRESATTACKED7_5() {
return RESATTACKED7_5;
}

public byte getRESATTACKED7_6() {
return RESATTACKED7_6;
}

public byte getRESATTACKED7_7() {
return RESATTACKED7_7;
}

public byte getRESATTACKED7_8() {
return RESATTACKED7_8;
}

public byte getRESATTACKED7_9() {
return RESATTACKED7_9;
}

public byte getRESATTACKED8_1() {
return RESATTACKED8_1;
}

public byte getRESATTACKED8_10() {
return RESATTACKED8_10;
}

public byte getRESATTACKED8_11() {
return RESATTACKED8_11;
}

public byte getRESATTACKED8_12() {
return RESATTACKED8_12;
}

public byte getRESATTACKED8_2() {
return RESATTACKED8_2;
}

public byte getRESATTACKED8_3() {
return RESATTACKED8_3;
}

public byte getRESATTACKED8_4() {
return RESATTACKED8_4;
}

public byte getRESATTACKED8_5() {
return RESATTACKED8_5;
}

public byte getRESATTACKED8_6() {
return RESATTACKED8_6;
}

public byte getRESATTACKED8_7() {
return RESATTACKED8_7;
}

public byte getRESATTACKED8_8() {
return RESATTACKED8_8;
}

public byte getRESATTACKED8_9() {
return RESATTACKED8_9;
}

public byte getRESATTACKED96_1() {
return RESATTACKED96_1;
}

public byte getRESATTACKED96_10() {
return RESATTACKED96_10;
}

public byte getRESATTACKED96_11() {
return RESATTACKED96_11;
}

public byte getRESATTACKED96_12() {
return RESATTACKED96_12;
}

public byte getRESATTACKED96_2() {
return RESATTACKED96_2;
}

public byte getRESATTACKED96_3() {
return RESATTACKED96_3;
}

public byte getRESATTACKED96_4() {
return RESATTACKED96_4;
}

public byte getRESATTACKED96_5() {
return RESATTACKED96_5;
}

public byte getRESATTACKED96_6() {
return RESATTACKED96_6;
}

public byte getRESATTACKED96_7() {
return RESATTACKED96_7;
}

public byte getRESATTACKED96_8() {
return RESATTACKED96_8;
}

public byte getRESATTACKED96_9() {
return RESATTACKED96_9;
}

public byte getRESATTACKED97_1() {
return RESATTACKED97_1;
}

public byte getRESATTACKED97_10() {
return RESATTACKED97_10;
}

public byte getRESATTACKED97_11() {
return RESATTACKED97_11;
}

public byte getRESATTACKED97_12() {
return RESATTACKED97_12;
}

public byte getRESATTACKED97_2() {
return RESATTACKED97_2;
}

public byte getRESATTACKED97_3() {
return RESATTACKED97_3;
}

public byte getRESATTACKED97_4() {
return RESATTACKED97_4;
}

public byte getRESATTACKED97_5() {
return RESATTACKED97_5;
}

public byte getRESATTACKED97_6() {
return RESATTACKED97_6;
}

public byte getRESATTACKED97_7() {
return RESATTACKED97_7;
}

public byte getRESATTACKED97_8() {
return RESATTACKED97_8;
}

public byte getRESATTACKED97_9() {
return RESATTACKED97_9;
}

public byte getRESATTACKED9_1() {
return RESATTACKED9_1;
}

public byte getRESATTACKED9_10() {
return RESATTACKED9_10;
}

public byte getRESATTACKED9_11() {
return RESATTACKED9_11;
}

public byte getRESATTACKED9_12() {
return RESATTACKED9_12;
}

public byte getRESATTACKED9_2() {
return RESATTACKED9_2;
}

public byte getRESATTACKED9_3() {
return RESATTACKED9_3;
}

public byte getRESATTACKED9_4() {
return RESATTACKED9_4;
}

public byte getRESATTACKED9_5() {
return RESATTACKED9_5;
}

public byte getRESATTACKED9_6() {
return RESATTACKED9_6;
}

public byte getRESATTACKED9_7() {
return RESATTACKED9_7;
}

public byte getRESATTACKED9_8() {
return RESATTACKED9_8;
}

public byte getRESATTACKED9_9() {
return RESATTACKED9_9;
}

public byte getRESAVOID1_1() {
return RESAVOID1_1;
}

public byte getRESAVOID1_10() {
return RESAVOID1_10;
}

public byte getRESAVOID1_11() {
return RESAVOID1_11;
}

public byte getRESAVOID1_12() {
return RESAVOID1_12;
}

public byte getRESAVOID1_2() {
return RESAVOID1_2;
}

public byte getRESAVOID1_3() {
return RESAVOID1_3;
}

public byte getRESAVOID1_4() {
return RESAVOID1_4;
}

public byte getRESAVOID1_5() {
return RESAVOID1_5;
}

public byte getRESAVOID1_6() {
return RESAVOID1_6;
}

public byte getRESAVOID1_7() {
return RESAVOID1_7;
}

public byte getRESAVOID1_8() {
return RESAVOID1_8;
}

public byte getRESAVOID1_9() {
return RESAVOID1_9;
}

public byte getRESAVOID2_1() {
return RESAVOID2_1;
}

public byte getRESAVOID2_10() {
return RESAVOID2_10;
}

public byte getRESAVOID2_11() {
return RESAVOID2_11;
}

public byte getRESAVOID2_12() {
return RESAVOID2_12;
}

public byte getRESAVOID2_2() {
return RESAVOID2_2;
}

public byte getRESAVOID2_3() {
return RESAVOID2_3;
}

public byte getRESAVOID2_4() {
return RESAVOID2_4;
}

public byte getRESAVOID2_5() {
return RESAVOID2_5;
}

public byte getRESAVOID2_6() {
return RESAVOID2_6;
}

public byte getRESAVOID2_7() {
return RESAVOID2_7;
}

public byte getRESAVOID2_8() {
return RESAVOID2_8;
}

public byte getRESAVOID2_9() {
return RESAVOID2_9;
}

public byte getRESAVOID3_1() {
return RESAVOID3_1;
}

public byte getRESAVOID3_10() {
return RESAVOID3_10;
}

public byte getRESAVOID3_11() {
return RESAVOID3_11;
}

public byte getRESAVOID3_12() {
return RESAVOID3_12;
}

public byte getRESAVOID3_2() {
return RESAVOID3_2;
}

public byte getRESAVOID3_3() {
return RESAVOID3_3;
}

public byte getRESAVOID3_4() {
return RESAVOID3_4;
}

public byte getRESAVOID3_5() {
return RESAVOID3_5;
}

public byte getRESAVOID3_6() {
return RESAVOID3_6;
}

public byte getRESAVOID3_7() {
return RESAVOID3_7;
}

public byte getRESAVOID3_8() {
return RESAVOID3_8;
}

public byte getRESAVOID3_9() {
return RESAVOID3_9;
}

public byte getRESAVOID4_1() {
return RESAVOID4_1;
}

public byte getRESAVOID4_10() {
return RESAVOID4_10;
}

public byte getRESAVOID4_11() {
return RESAVOID4_11;
}

public byte getRESAVOID4_12() {
return RESAVOID4_12;
}

public byte getRESAVOID4_2() {
return RESAVOID4_2;
}

public byte getRESAVOID4_3() {
return RESAVOID4_3;
}

public byte getRESAVOID4_4() {
return RESAVOID4_4;
}

public byte getRESAVOID4_5() {
return RESAVOID4_5;
}

public byte getRESAVOID4_6() {
return RESAVOID4_6;
}

public byte getRESAVOID4_7() {
return RESAVOID4_7;
}

public byte getRESAVOID4_8() {
return RESAVOID4_8;
}

public byte getRESAVOID4_9() {
return RESAVOID4_9;
}

public byte getRESAVOID5_1() {
return RESAVOID5_1;
}

public byte getRESAVOID5_10() {
return RESAVOID5_10;
}

public byte getRESAVOID5_11() {
return RESAVOID5_11;
}

public byte getRESAVOID5_12() {
return RESAVOID5_12;
}

public byte getRESAVOID5_2() {
return RESAVOID5_2;
}

public byte getRESAVOID5_3() {
return RESAVOID5_3;
}

public byte getRESAVOID5_4() {
return RESAVOID5_4;
}

public byte getRESAVOID5_5() {
return RESAVOID5_5;
}

public byte getRESAVOID5_6() {
return RESAVOID5_6;
}

public byte getRESAVOID5_7() {
return RESAVOID5_7;
}

public byte getRESAVOID5_8() {
return RESAVOID5_8;
}

public byte getRESAVOID5_9() {
return RESAVOID5_9;
}

public byte getRESAVOID6_1() {
return RESAVOID6_1;
}

public byte getRESAVOID6_10() {
return RESAVOID6_10;
}

public byte getRESAVOID6_11() {
return RESAVOID6_11;
}

public byte getRESAVOID6_12() {
return RESAVOID6_12;
}

public byte getRESAVOID6_2() {
return RESAVOID6_2;
}

public byte getRESAVOID6_3() {
return RESAVOID6_3;
}

public byte getRESAVOID6_4() {
return RESAVOID6_4;
}

public byte getRESAVOID6_5() {
return RESAVOID6_5;
}

public byte getRESAVOID6_6() {
return RESAVOID6_6;
}

public byte getRESAVOID6_7() {
return RESAVOID6_7;
}

public byte getRESAVOID6_8() {
return RESAVOID6_8;
}

public byte getRESAVOID6_9() {
return RESAVOID6_9;
}

public byte getRESAVOID7_1() {
return RESAVOID7_1;
}

public byte getRESAVOID7_10() {
return RESAVOID7_10;
}

public byte getRESAVOID7_11() {
return RESAVOID7_11;
}

public byte getRESAVOID7_12() {
return RESAVOID7_12;
}

public byte getRESAVOID7_2() {
return RESAVOID7_2;
}

public byte getRESAVOID7_3() {
return RESAVOID7_3;
}

public byte getRESAVOID7_4() {
return RESAVOID7_4;
}

public byte getRESAVOID7_5() {
return RESAVOID7_5;
}

public byte getRESAVOID7_6() {
return RESAVOID7_6;
}

public byte getRESAVOID7_7() {
return RESAVOID7_7;
}

public byte getRESAVOID7_8() {
return RESAVOID7_8;
}

public byte getRESAVOID7_9() {
return RESAVOID7_9;
}

public byte getRESAVOID8_1() {
return RESAVOID8_1;
}

public byte getRESAVOID8_10() {
return RESAVOID8_10;
}

public byte getRESAVOID8_11() {
return RESAVOID8_11;
}

public byte getRESAVOID8_12() {
return RESAVOID8_12;
}

public byte getRESAVOID8_2() {
return RESAVOID8_2;
}

public byte getRESAVOID8_3() {
return RESAVOID8_3;
}

public byte getRESAVOID8_4() {
return RESAVOID8_4;
}

public byte getRESAVOID8_5() {
return RESAVOID8_5;
}

public byte getRESAVOID8_6() {
return RESAVOID8_6;
}

public byte getRESAVOID8_7() {
return RESAVOID8_7;
}

public byte getRESAVOID8_8() {
return RESAVOID8_8;
}

public byte getRESAVOID8_9() {
return RESAVOID8_9;
}

public byte getRESAVOID96_1() {
return RESAVOID96_1;
}

public byte getRESAVOID96_10() {
return RESAVOID96_10;
}

public byte getRESAVOID96_11() {
return RESAVOID96_11;
}

public byte getRESAVOID96_12() {
return RESAVOID96_12;
}

public byte getRESAVOID96_2() {
return RESAVOID96_2;
}

public byte getRESAVOID96_3() {
return RESAVOID96_3;
}

public byte getRESAVOID96_4() {
return RESAVOID96_4;
}

public byte getRESAVOID96_5() {
return RESAVOID96_5;
}

public byte getRESAVOID96_6() {
return RESAVOID96_6;
}

public byte getRESAVOID96_7() {
return RESAVOID96_7;
}

public byte getRESAVOID96_8() {
return RESAVOID96_8;
}

public byte getRESAVOID96_9() {
return RESAVOID96_9;
}

public byte getRESAVOID97_1() {
return RESAVOID97_1;
}

public byte getRESAVOID97_10() {
return RESAVOID97_10;
}

public byte getRESAVOID97_11() {
return RESAVOID97_11;
}

public byte getRESAVOID97_12() {
return RESAVOID97_12;
}

public byte getRESAVOID97_2() {
return RESAVOID97_2;
}

public byte getRESAVOID97_3() {
return RESAVOID97_3;
}

public byte getRESAVOID97_4() {
return RESAVOID97_4;
}

public byte getRESAVOID97_5() {
return RESAVOID97_5;
}

public byte getRESAVOID97_6() {
return RESAVOID97_6;
}

public byte getRESAVOID97_7() {
return RESAVOID97_7;
}

public byte getRESAVOID97_8() {
return RESAVOID97_8;
}

public byte getRESAVOID97_9() {
return RESAVOID97_9;
}

public byte getRESAVOID9_1() {
return RESAVOID9_1;
}

public byte getRESAVOID9_10() {
return RESAVOID9_10;
}

public byte getRESAVOID9_11() {
return RESAVOID9_11;
}

public byte getRESAVOID9_12() {
return RESAVOID9_12;
}

public byte getRESAVOID9_2() {
return RESAVOID9_2;
}

public byte getRESAVOID9_3() {
return RESAVOID9_3;
}

public byte getRESAVOID9_4() {
return RESAVOID9_4;
}

public byte getRESAVOID9_5() {
return RESAVOID9_5;
}

public byte getRESAVOID9_6() {
return RESAVOID9_6;
}

public byte getRESAVOID9_7() {
return RESAVOID9_7;
}

public byte getRESAVOID9_8() {
return RESAVOID9_8;
}

public byte getRESAVOID9_9() {
return RESAVOID9_9;
}

public byte getRESINSULTED1_1() {
return RESINSULTED1_1;
}

public byte getRESINSULTED1_10() {
return RESINSULTED1_10;
}

public byte getRESINSULTED1_11() {
return RESINSULTED1_11;
}

public byte getRESINSULTED1_12() {
return RESINSULTED1_12;
}

public byte getRESINSULTED1_2() {
return RESINSULTED1_2;
}

public byte getRESINSULTED1_3() {
return RESINSULTED1_3;
}

public byte getRESINSULTED1_4() {
return RESINSULTED1_4;
}

public byte getRESINSULTED1_5() {
return RESINSULTED1_5;
}

public byte getRESINSULTED1_6() {
return RESINSULTED1_6;
}

public byte getRESINSULTED1_7() {
return RESINSULTED1_7;
}

public byte getRESINSULTED1_8() {
return RESINSULTED1_8;
}

public byte getRESINSULTED1_9() {
return RESINSULTED1_9;
}

public byte getRESINSULTED2_1() {
return RESINSULTED2_1;
}

public byte getRESINSULTED2_10() {
return RESINSULTED2_10;
}

public byte getRESINSULTED2_11() {
return RESINSULTED2_11;
}

public byte getRESINSULTED2_12() {
return RESINSULTED2_12;
}

public byte getRESINSULTED2_2() {
return RESINSULTED2_2;
}

public byte getRESINSULTED2_3() {
return RESINSULTED2_3;
}

public byte getRESINSULTED2_4() {
return RESINSULTED2_4;
}

public byte getRESINSULTED2_5() {
return RESINSULTED2_5;
}

public byte getRESINSULTED2_6() {
return RESINSULTED2_6;
}

public byte getRESINSULTED2_7() {
return RESINSULTED2_7;
}

public byte getRESINSULTED2_8() {
return RESINSULTED2_8;
}

public byte getRESINSULTED2_9() {
return RESINSULTED2_9;
}

public byte getRESINSULTED3_1() {
return RESINSULTED3_1;
}

public byte getRESINSULTED3_10() {
return RESINSULTED3_10;
}

public byte getRESINSULTED3_11() {
return RESINSULTED3_11;
}

public byte getRESINSULTED3_12() {
return RESINSULTED3_12;
}

public byte getRESINSULTED3_2() {
return RESINSULTED3_2;
}

public byte getRESINSULTED3_3() {
return RESINSULTED3_3;
}

public byte getRESINSULTED3_4() {
return RESINSULTED3_4;
}

public byte getRESINSULTED3_5() {
return RESINSULTED3_5;
}

public byte getRESINSULTED3_6() {
return RESINSULTED3_6;
}

public byte getRESINSULTED3_7() {
return RESINSULTED3_7;
}

public byte getRESINSULTED3_8() {
return RESINSULTED3_8;
}

public byte getRESINSULTED3_9() {
return RESINSULTED3_9;
}

public byte getRESINSULTED4_1() {
return RESINSULTED4_1;
}

public byte getRESINSULTED4_10() {
return RESINSULTED4_10;
}

public byte getRESINSULTED4_11() {
return RESINSULTED4_11;
}

public byte getRESINSULTED4_12() {
return RESINSULTED4_12;
}

public byte getRESINSULTED4_2() {
return RESINSULTED4_2;
}

public byte getRESINSULTED4_3() {
return RESINSULTED4_3;
}

public byte getRESINSULTED4_4() {
return RESINSULTED4_4;
}

public byte getRESINSULTED4_5() {
return RESINSULTED4_5;
}

public byte getRESINSULTED4_6() {
return RESINSULTED4_6;
}

public byte getRESINSULTED4_7() {
return RESINSULTED4_7;
}

public byte getRESINSULTED4_8() {
return RESINSULTED4_8;
}

public byte getRESINSULTED4_9() {
return RESINSULTED4_9;
}

public byte getRESINSULTED5_1() {
return RESINSULTED5_1;
}

public byte getRESINSULTED5_10() {
return RESINSULTED5_10;
}

public byte getRESINSULTED5_11() {
return RESINSULTED5_11;
}

public byte getRESINSULTED5_12() {
return RESINSULTED5_12;
}

public byte getRESINSULTED5_2() {
return RESINSULTED5_2;
}

public byte getRESINSULTED5_3() {
return RESINSULTED5_3;
}

public byte getRESINSULTED5_4() {
return RESINSULTED5_4;
}

public byte getRESINSULTED5_5() {
return RESINSULTED5_5;
}

public byte getRESINSULTED5_6() {
return RESINSULTED5_6;
}

public byte getRESINSULTED5_7() {
return RESINSULTED5_7;
}

public byte getRESINSULTED5_8() {
return RESINSULTED5_8;
}

public byte getRESINSULTED5_9() {
return RESINSULTED5_9;
}

public byte getRESINSULTED6_1() {
return RESINSULTED6_1;
}

public byte getRESINSULTED6_10() {
return RESINSULTED6_10;
}

public byte getRESINSULTED6_11() {
return RESINSULTED6_11;
}

public byte getRESINSULTED6_12() {
return RESINSULTED6_12;
}

public byte getRESINSULTED6_2() {
return RESINSULTED6_2;
}

public byte getRESINSULTED6_3() {
return RESINSULTED6_3;
}

public byte getRESINSULTED6_4() {
return RESINSULTED6_4;
}

public byte getRESINSULTED6_5() {
return RESINSULTED6_5;
}

public byte getRESINSULTED6_6() {
return RESINSULTED6_6;
}

public byte getRESINSULTED6_7() {
return RESINSULTED6_7;
}

public byte getRESINSULTED6_8() {
return RESINSULTED6_8;
}

public byte getRESINSULTED6_9() {
return RESINSULTED6_9;
}

public byte getRESINSULTED7_1() {
return RESINSULTED7_1;
}

public byte getRESINSULTED7_10() {
return RESINSULTED7_10;
}

public byte getRESINSULTED7_11() {
return RESINSULTED7_11;
}

public byte getRESINSULTED7_12() {
return RESINSULTED7_12;
}

public byte getRESINSULTED7_2() {
return RESINSULTED7_2;
}

public byte getRESINSULTED7_3() {
return RESINSULTED7_3;
}

public byte getRESINSULTED7_4() {
return RESINSULTED7_4;
}

public byte getRESINSULTED7_5() {
return RESINSULTED7_5;
}

public byte getRESINSULTED7_6() {
return RESINSULTED7_6;
}

public byte getRESINSULTED7_7() {
return RESINSULTED7_7;
}

public byte getRESINSULTED7_8() {
return RESINSULTED7_8;
}

public byte getRESINSULTED7_9() {
return RESINSULTED7_9;
}

public byte getRESINSULTED8_1() {
return RESINSULTED8_1;
}

public byte getRESINSULTED8_10() {
return RESINSULTED8_10;
}

public byte getRESINSULTED8_11() {
return RESINSULTED8_11;
}

public byte getRESINSULTED8_12() {
return RESINSULTED8_12;
}

public byte getRESINSULTED8_2() {
return RESINSULTED8_2;
}

public byte getRESINSULTED8_3() {
return RESINSULTED8_3;
}

public byte getRESINSULTED8_4() {
return RESINSULTED8_4;
}

public byte getRESINSULTED8_5() {
return RESINSULTED8_5;
}

public byte getRESINSULTED8_6() {
return RESINSULTED8_6;
}

public byte getRESINSULTED8_7() {
return RESINSULTED8_7;
}

public byte getRESINSULTED8_8() {
return RESINSULTED8_8;
}

public byte getRESINSULTED8_9() {
return RESINSULTED8_9;
}

public byte getRESINSULTED96_1() {
return RESINSULTED96_1;
}

public byte getRESINSULTED96_10() {
return RESINSULTED96_10;
}

public byte getRESINSULTED96_11() {
return RESINSULTED96_11;
}

public byte getRESINSULTED96_12() {
return RESINSULTED96_12;
}

public byte getRESINSULTED96_2() {
return RESINSULTED96_2;
}

public byte getRESINSULTED96_3() {
return RESINSULTED96_3;
}

public byte getRESINSULTED96_4() {
return RESINSULTED96_4;
}

public byte getRESINSULTED96_5() {
return RESINSULTED96_5;
}

public byte getRESINSULTED96_6() {
return RESINSULTED96_6;
}

public byte getRESINSULTED96_7() {
return RESINSULTED96_7;
}

public byte getRESINSULTED96_8() {
return RESINSULTED96_8;
}

public byte getRESINSULTED96_9() {
return RESINSULTED96_9;
}

public byte getRESINSULTED97_1() {
return RESINSULTED97_1;
}

public byte getRESINSULTED97_10() {
return RESINSULTED97_10;
}

public byte getRESINSULTED97_11() {
return RESINSULTED97_11;
}

public byte getRESINSULTED97_12() {
return RESINSULTED97_12;
}

public byte getRESINSULTED97_2() {
return RESINSULTED97_2;
}

public byte getRESINSULTED97_3() {
return RESINSULTED97_3;
}

public byte getRESINSULTED97_4() {
return RESINSULTED97_4;
}

public byte getRESINSULTED97_5() {
return RESINSULTED97_5;
}

public byte getRESINSULTED97_6() {
return RESINSULTED97_6;
}

public byte getRESINSULTED97_7() {
return RESINSULTED97_7;
}

public byte getRESINSULTED97_8() {
return RESINSULTED97_8;
}

public byte getRESINSULTED97_9() {
return RESINSULTED97_9;
}

public byte getRESINSULTED9_1() {
return RESINSULTED9_1;
}

public byte getRESINSULTED9_10() {
return RESINSULTED9_10;
}

public byte getRESINSULTED9_11() {
return RESINSULTED9_11;
}

public byte getRESINSULTED9_12() {
return RESINSULTED9_12;
}

public byte getRESINSULTED9_2() {
return RESINSULTED9_2;
}

public byte getRESINSULTED9_3() {
return RESINSULTED9_3;
}

public byte getRESINSULTED9_4() {
return RESINSULTED9_4;
}

public byte getRESINSULTED9_5() {
return RESINSULTED9_5;
}

public byte getRESINSULTED9_6() {
return RESINSULTED9_6;
}

public byte getRESINSULTED9_7() {
return RESINSULTED9_7;
}

public byte getRESINSULTED9_8() {
return RESINSULTED9_8;
}

public byte getRESINSULTED9_9() {
return RESINSULTED9_9;
}

public byte getRESJOBDENY1() {
return RESJOBDENY1;
}

public byte getRESJOBDENY2() {
return RESJOBDENY2;
}

public byte getRESJOBDENY3() {
return RESJOBDENY3;
}

public byte getRESJOBDENY4() {
return RESJOBDENY4;
}

public byte getRESJOBDENY5() {
return RESJOBDENY5;
}

public byte getRESJOBDENY6() {
return RESJOBDENY6;
}

public byte getRESJOBDENY7() {
return RESJOBDENY7;
}

public byte getRESJOBDENY8() {
return RESJOBDENY8;
}

public byte getRESJOBDENY9() {
return RESJOBDENY9;
}

public byte getRESJOBDENY96() {
return RESJOBDENY96;
}

public byte getRESJOBDENY97() {
return RESJOBDENY97;
}

public boolean getRESPF16() {
return RESPF16;
}

public boolean getRESPF16_DV() {
return RESPF16_DV;
}

public boolean getRESPM16() {
return RESPM16;
}

public boolean getRESPM16_DV() {
return RESPM16_DV;
}

public byte getRESPROMDENY1() {
return RESPROMDENY1;
}

public byte getRESPROMDENY2() {
return RESPROMDENY2;
}

public byte getRESPROMDENY3() {
return RESPROMDENY3;
}

public byte getRESPROMDENY4() {
return RESPROMDENY4;
}

public byte getRESPROMDENY5() {
return RESPROMDENY5;
}

public byte getRESPROMDENY6() {
return RESPROMDENY6;
}

public byte getRESPROMDENY7() {
return RESPROMDENY7;
}

public byte getRESPROMDENY8() {
return RESPROMDENY8;
}

public byte getRESPROMDENY9() {
return RESPROMDENY9;
}

public byte getRESPROMDENY96() {
return RESPROMDENY96;
}

public byte getRESPROMDENY97() {
return RESPROMDENY97;
}

public byte getRESTRAINDENY1() {
return RESTRAINDENY1;
}

public byte getRESTRAINDENY2() {
return RESTRAINDENY2;
}

public byte getRESTRAINDENY3() {
return RESTRAINDENY3;
}

public byte getRESTRAINDENY4() {
return RESTRAINDENY4;
}

public byte getRESTRAINDENY5() {
return RESTRAINDENY5;
}

public byte getRESTRAINDENY6() {
return RESTRAINDENY6;
}

public byte getRESTRAINDENY7() {
return RESTRAINDENY7;
}

public byte getRESTRAINDENY8() {
return RESTRAINDENY8;
}

public byte getRESTRAINDENY9() {
return RESTRAINDENY9;
}

public byte getRESTRAINDENY96() {
return RESTRAINDENY96;
}

public byte getRESTRAINDENY97() {
return RESTRAINDENY97;
}

public byte getRESUNSAFE1_1() {
return RESUNSAFE1_1;
}

public byte getRESUNSAFE1_10() {
return RESUNSAFE1_10;
}

public byte getRESUNSAFE1_11() {
return RESUNSAFE1_11;
}

public byte getRESUNSAFE1_12() {
return RESUNSAFE1_12;
}

public byte getRESUNSAFE1_2() {
return RESUNSAFE1_2;
}

public byte getRESUNSAFE1_3() {
return RESUNSAFE1_3;
}

public byte getRESUNSAFE1_4() {
return RESUNSAFE1_4;
}

public byte getRESUNSAFE1_5() {
return RESUNSAFE1_5;
}

public byte getRESUNSAFE1_6() {
return RESUNSAFE1_6;
}

public byte getRESUNSAFE1_7() {
return RESUNSAFE1_7;
}

public byte getRESUNSAFE1_8() {
return RESUNSAFE1_8;
}

public byte getRESUNSAFE1_9() {
return RESUNSAFE1_9;
}

public byte getRESUNSAFE2_1() {
return RESUNSAFE2_1;
}

public byte getRESUNSAFE2_10() {
return RESUNSAFE2_10;
}

public byte getRESUNSAFE2_11() {
return RESUNSAFE2_11;
}

public byte getRESUNSAFE2_12() {
return RESUNSAFE2_12;
}

public byte getRESUNSAFE2_2() {
return RESUNSAFE2_2;
}

public byte getRESUNSAFE2_3() {
return RESUNSAFE2_3;
}

public byte getRESUNSAFE2_4() {
return RESUNSAFE2_4;
}

public byte getRESUNSAFE2_5() {
return RESUNSAFE2_5;
}

public byte getRESUNSAFE2_6() {
return RESUNSAFE2_6;
}

public byte getRESUNSAFE2_7() {
return RESUNSAFE2_7;
}

public byte getRESUNSAFE2_8() {
return RESUNSAFE2_8;
}

public byte getRESUNSAFE2_9() {
return RESUNSAFE2_9;
}

public byte getRESUNSAFE3_1() {
return RESUNSAFE3_1;
}

public byte getRESUNSAFE3_10() {
return RESUNSAFE3_10;
}

public byte getRESUNSAFE3_11() {
return RESUNSAFE3_11;
}

public byte getRESUNSAFE3_12() {
return RESUNSAFE3_12;
}

public byte getRESUNSAFE3_2() {
return RESUNSAFE3_2;
}

public byte getRESUNSAFE3_3() {
return RESUNSAFE3_3;
}

public byte getRESUNSAFE3_4() {
return RESUNSAFE3_4;
}

public byte getRESUNSAFE3_5() {
return RESUNSAFE3_5;
}

public byte getRESUNSAFE3_6() {
return RESUNSAFE3_6;
}

public byte getRESUNSAFE3_7() {
return RESUNSAFE3_7;
}

public byte getRESUNSAFE3_8() {
return RESUNSAFE3_8;
}

public byte getRESUNSAFE3_9() {
return RESUNSAFE3_9;
}

public byte getRESUNSAFE4_1() {
return RESUNSAFE4_1;
}

public byte getRESUNSAFE4_10() {
return RESUNSAFE4_10;
}

public byte getRESUNSAFE4_11() {
return RESUNSAFE4_11;
}

public byte getRESUNSAFE4_12() {
return RESUNSAFE4_12;
}

public byte getRESUNSAFE4_2() {
return RESUNSAFE4_2;
}

public byte getRESUNSAFE4_3() {
return RESUNSAFE4_3;
}

public byte getRESUNSAFE4_4() {
return RESUNSAFE4_4;
}

public byte getRESUNSAFE4_5() {
return RESUNSAFE4_5;
}

public byte getRESUNSAFE4_6() {
return RESUNSAFE4_6;
}

public byte getRESUNSAFE4_7() {
return RESUNSAFE4_7;
}

public byte getRESUNSAFE4_8() {
return RESUNSAFE4_8;
}

public byte getRESUNSAFE4_9() {
return RESUNSAFE4_9;
}

public byte getRESUNSAFE5_1() {
return RESUNSAFE5_1;
}

public byte getRESUNSAFE5_10() {
return RESUNSAFE5_10;
}

public byte getRESUNSAFE5_11() {
return RESUNSAFE5_11;
}

public byte getRESUNSAFE5_12() {
return RESUNSAFE5_12;
}

public byte getRESUNSAFE5_2() {
return RESUNSAFE5_2;
}

public byte getRESUNSAFE5_3() {
return RESUNSAFE5_3;
}

public byte getRESUNSAFE5_4() {
return RESUNSAFE5_4;
}

public byte getRESUNSAFE5_5() {
return RESUNSAFE5_5;
}

public byte getRESUNSAFE5_6() {
return RESUNSAFE5_6;
}

public byte getRESUNSAFE5_7() {
return RESUNSAFE5_7;
}

public byte getRESUNSAFE5_8() {
return RESUNSAFE5_8;
}

public byte getRESUNSAFE5_9() {
return RESUNSAFE5_9;
}

public byte getRESUNSAFE6_1() {
return RESUNSAFE6_1;
}

public byte getRESUNSAFE6_10() {
return RESUNSAFE6_10;
}

public byte getRESUNSAFE6_11() {
return RESUNSAFE6_11;
}

public byte getRESUNSAFE6_12() {
return RESUNSAFE6_12;
}

public byte getRESUNSAFE6_2() {
return RESUNSAFE6_2;
}

public byte getRESUNSAFE6_3() {
return RESUNSAFE6_3;
}

public byte getRESUNSAFE6_4() {
return RESUNSAFE6_4;
}

public byte getRESUNSAFE6_5() {
return RESUNSAFE6_5;
}

public byte getRESUNSAFE6_6() {
return RESUNSAFE6_6;
}

public byte getRESUNSAFE6_7() {
return RESUNSAFE6_7;
}

public byte getRESUNSAFE6_8() {
return RESUNSAFE6_8;
}

public byte getRESUNSAFE6_9() {
return RESUNSAFE6_9;
}

public byte getRESUNSAFE7_1() {
return RESUNSAFE7_1;
}

public byte getRESUNSAFE7_10() {
return RESUNSAFE7_10;
}

public byte getRESUNSAFE7_11() {
return RESUNSAFE7_11;
}

public byte getRESUNSAFE7_12() {
return RESUNSAFE7_12;
}

public byte getRESUNSAFE7_2() {
return RESUNSAFE7_2;
}

public byte getRESUNSAFE7_3() {
return RESUNSAFE7_3;
}

public byte getRESUNSAFE7_4() {
return RESUNSAFE7_4;
}

public byte getRESUNSAFE7_5() {
return RESUNSAFE7_5;
}

public byte getRESUNSAFE7_6() {
return RESUNSAFE7_6;
}

public byte getRESUNSAFE7_7() {
return RESUNSAFE7_7;
}

public byte getRESUNSAFE7_8() {
return RESUNSAFE7_8;
}

public byte getRESUNSAFE7_9() {
return RESUNSAFE7_9;
}

public byte getRESUNSAFE8_1() {
return RESUNSAFE8_1;
}

public byte getRESUNSAFE8_10() {
return RESUNSAFE8_10;
}

public byte getRESUNSAFE8_11() {
return RESUNSAFE8_11;
}

public byte getRESUNSAFE8_12() {
return RESUNSAFE8_12;
}

public byte getRESUNSAFE8_2() {
return RESUNSAFE8_2;
}

public byte getRESUNSAFE8_3() {
return RESUNSAFE8_3;
}

public byte getRESUNSAFE8_4() {
return RESUNSAFE8_4;
}

public byte getRESUNSAFE8_5() {
return RESUNSAFE8_5;
}

public byte getRESUNSAFE8_6() {
return RESUNSAFE8_6;
}

public byte getRESUNSAFE8_7() {
return RESUNSAFE8_7;
}

public byte getRESUNSAFE8_8() {
return RESUNSAFE8_8;
}

public byte getRESUNSAFE8_9() {
return RESUNSAFE8_9;
}

public byte getRESUNSAFE96_1() {
return RESUNSAFE96_1;
}

public byte getRESUNSAFE96_10() {
return RESUNSAFE96_10;
}

public byte getRESUNSAFE96_11() {
return RESUNSAFE96_11;
}

public byte getRESUNSAFE96_12() {
return RESUNSAFE96_12;
}

public byte getRESUNSAFE96_2() {
return RESUNSAFE96_2;
}

public byte getRESUNSAFE96_3() {
return RESUNSAFE96_3;
}

public byte getRESUNSAFE96_4() {
return RESUNSAFE96_4;
}

public byte getRESUNSAFE96_5() {
return RESUNSAFE96_5;
}

public byte getRESUNSAFE96_6() {
return RESUNSAFE96_6;
}

public byte getRESUNSAFE96_7() {
return RESUNSAFE96_7;
}

public byte getRESUNSAFE96_8() {
return RESUNSAFE96_8;
}

public byte getRESUNSAFE96_9() {
return RESUNSAFE96_9;
}

public byte getRESUNSAFE97_1() {
return RESUNSAFE97_1;
}

public byte getRESUNSAFE97_10() {
return RESUNSAFE97_10;
}

public byte getRESUNSAFE97_11() {
return RESUNSAFE97_11;
}

public byte getRESUNSAFE97_12() {
return RESUNSAFE97_12;
}

public byte getRESUNSAFE97_2() {
return RESUNSAFE97_2;
}

public byte getRESUNSAFE97_3() {
return RESUNSAFE97_3;
}

public byte getRESUNSAFE97_4() {
return RESUNSAFE97_4;
}

public byte getRESUNSAFE97_5() {
return RESUNSAFE97_5;
}

public byte getRESUNSAFE97_6() {
return RESUNSAFE97_6;
}

public byte getRESUNSAFE97_7() {
return RESUNSAFE97_7;
}

public byte getRESUNSAFE97_8() {
return RESUNSAFE97_8;
}

public byte getRESUNSAFE97_9() {
return RESUNSAFE97_9;
}

public byte getRESUNSAFE9_1() {
return RESUNSAFE9_1;
}

public byte getRESUNSAFE9_10() {
return RESUNSAFE9_10;
}

public byte getRESUNSAFE9_11() {
return RESUNSAFE9_11;
}

public byte getRESUNSAFE9_12() {
return RESUNSAFE9_12;
}

public byte getRESUNSAFE9_2() {
return RESUNSAFE9_2;
}

public byte getRESUNSAFE9_3() {
return RESUNSAFE9_3;
}

public byte getRESUNSAFE9_4() {
return RESUNSAFE9_4;
}

public byte getRESUNSAFE9_5() {
return RESUNSAFE9_5;
}

public byte getRESUNSAFE9_6() {
return RESUNSAFE9_6;
}

public byte getRESUNSAFE9_7() {
return RESUNSAFE9_7;
}

public byte getRESUNSAFE9_8() {
return RESUNSAFE9_8;
}

public byte getRESUNSAFE9_9() {
return RESUNSAFE9_9;
}

public byte getRETAMT() {
return RETAMT;
}

public byte getRETCHK() {
return RETCHK;
}

public byte getRETSUF() {
return RETSUF;
}

public byte getRHLAND_CODE() {
return RHLAND_CODE;
}

public byte getRPHMOB_CODE() {
return RPHMOB_CODE;
}

public byte getRPHWRK_CODE() {
return RPHWRK_CODE;
}

public byte getRTCON1() {
return RTCON1;
}

public byte getRTCON2() {
return RTCON2;
}

public byte getRTCON3() {
return RTCON3;
}

public byte getRTCON4() {
return RTCON4;
}

public byte getRTEXPJB() {
return RTEXPJB;
}

public byte getRTFND1() {
return RTFND1;
}

public byte getRTFND10() {
return RTFND10;
}

public byte getRTFND2() {
return RTFND2;
}

public byte getRTFND3() {
return RTFND3;
}

public byte getRTFND4() {
return RTFND4;
}

public byte getRTFND5() {
return RTFND5;
}

public byte getRTFND6() {
return RTFND6;
}

public byte getRTFND7() {
return RTFND7;
}

public byte getRTFND8() {
return RTFND8;
}

public byte getRTFND9() {
return RTFND9;
}

public byte getRTFND96() {
return RTFND96;
}

public byte getRTPRO1() {
return RTPRO1;
}

public byte getRTPRO2() {
return RTPRO2;
}

public byte getRTPRO3() {
return RTPRO3;
}

public byte getRTPRO4() {
return RTPRO4;
}

public byte getRTPRO5() {
return RTPRO5;
}

public byte getRTPRO6() {
return RTPRO6;
}

public byte getRULESKID() {
return RULESKID;
}

public byte getSAMEJOB() {
return SAMEJOB;
}

public short getSAMPST() {
return SAMPST;
}

public byte getSATTRANSY1() {
return SATTRANSY1;
}

public byte getSATTRANSY10() {
return SATTRANSY10;
}

public byte getSATTRANSY2() {
return SATTRANSY2;
}

public byte getSATTRANSY3() {
return SATTRANSY3;
}

public byte getSATTRANSY4() {
return SATTRANSY4;
}

public byte getSATTRANSY5() {
return SATTRANSY5;
}

public byte getSATTRANSY6() {
return SATTRANSY6;
}

public byte getSATTRANSY7() {
return SATTRANSY7;
}

public byte getSATTRANSY8() {
return SATTRANSY8;
}

public byte getSATTRANSY9() {
return SATTRANSY9;
}

public byte getSATTRANSY97() {
return SATTRANSY97;
}

public byte getSCAC() {
return SCAC;
}

public byte getSCDASSAT_DV() {
return SCDASSAT_DV;
}

public byte getSCFLAG_DV() {
return SCFLAG_DV;
}

public byte getSCHLLOC() {
return SCHLLOC;
}

public byte getSCHOK() {
return SCHOK;
}

public byte getSCLFSAT1() {
return SCLFSAT1;
}

public byte getSCLFSAT2() {
return SCLFSAT2;
}

public byte getSCLFSAT7() {
return SCLFSAT7;
}

public byte getSCLFSATO() {
return SCLFSATO;
}

public byte getSCOPNGBHA() {
return SCOPNGBHA;
}

public byte getSCOPNGBHB() {
return SCOPNGBHB;
}

public byte getSCOPNGBHC() {
return SCOPNGBHC;
}

public byte getSCOPNGBHD() {
return SCOPNGBHD;
}

public byte getSCOPNGBHE() {
return SCOPNGBHE;
}

public byte getSCOPNGBHF() {
return SCOPNGBHF;
}

public byte getSCOPNGBHG() {
return SCOPNGBHG;
}

public byte getSCOPNGBHH() {
return SCOPNGBHH;
}

public byte getSCPAROUTINTW3() {
return SCPAROUTINTW3;
}

public byte getSCPTRT5A1() {
return SCPTRT5A1;
}

public byte getSCPTRT5A2() {
return SCPTRT5A2;
}

public byte getSCPTRT5A3() {
return SCPTRT5A3;
}

public byte getSCPTRT5C1() {
return SCPTRT5C1;
}

public byte getSCPTRT5C2() {
return SCPTRT5C2;
}

public byte getSCPTRT5C3() {
return SCPTRT5C3;
}

public byte getSCPTRT5E1() {
return SCPTRT5E1;
}

public byte getSCPTRT5E2() {
return SCPTRT5E2;
}

public byte getSCPTRT5E3() {
return SCPTRT5E3;
}

public byte getSCPTRT5N1() {
return SCPTRT5N1;
}

public byte getSCPTRT5N2() {
return SCPTRT5N2;
}

public byte getSCPTRT5N3() {
return SCPTRT5N3;
}

public byte getSCPTRT5O1() {
return SCPTRT5O1;
}

public byte getSCPTRT5O2() {
return SCPTRT5O2;
}

public byte getSCPTRT5O3() {
return SCPTRT5O3;
}

public byte getSCRELHAPPY() {
return SCRELHAPPY;
}

public byte getSCRELPARAR() {
return SCRELPARAR;
}

public byte getSCRELPARCD() {
return SCRELPARCD;
}

public byte getSCRELPARDS() {
return SCRELPARDS;
}

public byte getSCRELPAREI() {
return SCRELPAREI;
}

public byte getSCRELPARIR() {
return SCRELPARIR;
}

public byte getSCRELPARKS() {
return SCRELPARKS;
}

public byte getSCRELPARRG() {
return SCRELPARRG;
}

public byte getSCRELPARWT() {
return SCRELPARWT;
}

public byte getSCRF1() {
return SCRF1;
}

public byte getSCRF2() {
return SCRF2;
}

public byte getSCRF3() {
return SCRF3;
}

public byte getSCRF4() {
return SCRF4;
}

public byte getSCRF5() {
return SCRF5;
}

public byte getSCRF6() {
return SCRF6;
}

public byte getSCRF97() {
return SCRF97;
}

public byte getSCRX_CODE() {
return SCRX_CODE;
}

public byte getSCSF1() {
return SCSF1;
}

public byte getSCSF2A() {
return SCSF2A;
}

public byte getSCSF2B() {
return SCSF2B;
}

public byte getSCSF3A() {
return SCSF3A;
}

public byte getSCSF3B() {
return SCSF3B;
}

public byte getSCSF4A() {
return SCSF4A;
}

public byte getSCSF4B() {
return SCSF4B;
}

public byte getSCSF5() {
return SCSF5;
}

public byte getSCSF6A() {
return SCSF6A;
}

public byte getSCSF6B() {
return SCSF6B;
}

public byte getSCSF6C() {
return SCSF6C;
}

public byte getSCSF7() {
return SCSF7;
}

public byte getSCUN1() {
return SCUN1;
}

public byte getSCUN2() {
return SCUN2;
}

public byte getSCUN3() {
return SCUN3;
}

public byte getSCUN97() {
return SCUN97;
}

public byte getSCUX_CODE() {
return SCUX_CODE;
}

protected double SEEARNGRS_DV() {
return SEEARNGRS_DV;
}

public byte getSEEARNGRS_IF() {
return SEEARNGRS_IF;
}

protected double SEEARNNET_DV() {
return SEEARNNET_DV;
}

public byte getSEEKID() {
return SEEKID;
}

public byte getSERVACC() {
return SERVACC;
}

public byte getSERVACCY1() {
return SERVACCY1;
}

public byte getSERVACCY10() {
return SERVACCY10;
}

public byte getSERVACCY11() {
return SERVACCY11;
}

public byte getSERVACCY12() {
return SERVACCY12;
}

public byte getSERVACCY13() {
return SERVACCY13;
}

public byte getSERVACCY14() {
return SERVACCY14;
}

public byte getSERVACCY15() {
return SERVACCY15;
}

public byte getSERVACCY2() {
return SERVACCY2;
}

public byte getSERVACCY3() {
return SERVACCY3;
}

public byte getSERVACCY4() {
return SERVACCY4;
}

public byte getSERVACCY5() {
return SERVACCY5;
}

public byte getSERVACCY6() {
return SERVACCY6;
}

public byte getSERVACCY7() {
return SERVACCY7;
}

public byte getSERVACCY8() {
return SERVACCY8;
}

public byte getSERVACCY9() {
return SERVACCY9;
}

public byte getSERVACCY97() {
return SERVACCY97;
}

public byte getSEVENSPAP() {
return SEVENSPAP;
}

public byte getSEXUOR() {
return SEXUOR;
}

public byte getSEX_DV() {
return SEX_DV;
}

public byte getSF1() {
return SF1;
}

protected double SF12MCS_DV() {
return SF12MCS_DV;
}

protected double SF12PCS_DV() {
return SF12PCS_DV;
}

public byte getSIBHIT() {
return SIBHIT;
}

public byte getSIBSTEAL() {
return SIBSTEAL;
}

public byte getSIBTEASE() {
return SIBTEASE;
}

public byte getSIBVERAB() {
return SIBVERAB;
}

public byte getSIMAGE() {
return SIMAGE;
}

public byte getSIMAREA() {
return SIMAREA;
}

public byte getSIMEDUC() {
return SIMEDUC;
}

public byte getSIMFAM() {
return SIMFAM;
}

public byte getSIMINC() {
return SIMINC;
}

public byte getSIMJOB() {
return SIMJOB;
}

public byte getSIMRACE() {
return SIMRACE;
}

public boolean getSINGLE_DV() {
return SINGLE_DV;
}

public byte getSLAPKID() {
return SLAPKID;
}

public byte getSMKMNTH11() {
return SMKMNTH11;
}

public byte getSMKMNTH12() {
return SMKMNTH12;
}

public byte getSMKMNTH13() {
return SMKMNTH13;
}

public byte getSMKMNTH21() {
return SMKMNTH21;
}

public byte getSMKMNTH22() {
return SMKMNTH22;
}

public byte getSMKMNTH23() {
return SMKMNTH23;
}

public byte getSMKMNTH31() {
return SMKMNTH31;
}

public byte getSMKMNTH32() {
return SMKMNTH32;
}

public byte getSMKMNTH33() {
return SMKMNTH33;
}

public byte getSMOFRQ() {
return SMOFRQ;
}

public byte getSOCIALKID() {
return SOCIALKID;
}

public byte getSOCWEB() {
return SOCWEB;
}

public byte getSPPEN() {
return SPPEN;
}

public int getSPPID() {
return SPPID;
}

public byte getSPPNO() {
return SPPNO;
}

public byte getSTATCM1() {
return STATCM1;
}

public byte getSTATCM2() {
return STATCM2;
}

public short getSTATCY41() {
return STATCY41;
}

public short getSTATCY42() {
return STATCY42;
}

public byte getSTATENDD1() {
return STATENDD1;
}

public byte getSTATENDD2() {
return STATENDD2;
}

public byte getSTATENDD3() {
return STATENDD3;
}

public byte getSTATENDD4() {
return STATENDD4;
}

public byte getSTATENDD5() {
return STATENDD5;
}

public byte getSTATENDD6() {
return STATENDD6;
}

public byte getSTATENDD7() {
return STATENDD7;
}

public byte getSTATENDD8() {
return STATENDD8;
}

public byte getSTATENDD9() {
return STATENDD9;
}

public byte getSTATENDM1() {
return STATENDM1;
}

public byte getSTATENDM2() {
return STATENDM2;
}

public byte getSTATENDM3() {
return STATENDM3;
}

public byte getSTATENDM4() {
return STATENDM4;
}

public byte getSTATENDM5() {
return STATENDM5;
}

public byte getSTATENDM6() {
return STATENDM6;
}

public byte getSTATENDM7() {
return STATENDM7;
}

public byte getSTATENDM8() {
return STATENDM8;
}

public byte getSTATENDM9() {
return STATENDM9;
}

public short getSTATENDY41() {
return STATENDY41;
}

public short getSTATENDY42() {
return STATENDY42;
}

public short getSTATENDY43() {
return STATENDY43;
}

public short getSTATENDY44() {
return STATENDY44;
}

public short getSTATENDY45() {
return STATENDY45;
}

public short getSTATENDY46() {
return STATENDY46;
}

public short getSTATENDY47() {
return STATENDY47;
}

public short getSTATENDY48() {
return STATENDY48;
}

public short getSTATENDY49() {
return STATENDY49;
}

public byte getSTEALSIB() {
return STEALSIB;
}

public byte getSTENDREAS() {
return STENDREAS;
}

public byte getSTEPREL() {
return STEPREL;
}

public short getSTRATA() {
return STRATA;
}

public byte getSUB7STOP1() {
return SUB7STOP1;
}

public byte getSUB7STOP2() {
return SUB7STOP2;
}

public byte getSUB7STOP3() {
return SUB7STOP3;
}

public byte getSUB7STOP4() {
return SUB7STOP4;
}

public byte getSUB7STOP5() {
return SUB7STOP5;
}

public byte getSUB7STOP6() {
return SUB7STOP6;
}

public byte getSUB7STOP7() {
return SUB7STOP7;
}

public byte getSUB7STOP8() {
return SUB7STOP8;
}

public byte getSUB7STOP97() {
return SUB7STOP97;
}

public byte getSUB7_1() {
return SUB7_1;
}

public byte getSUB7_2() {
return SUB7_2;
}

public byte getSUB7_3() {
return SUB7_3;
}

public byte getSUB7_4() {
return SUB7_4;
}

public byte getSUB7_5() {
return SUB7_5;
}

public byte getSUBCONT11() {
return SUBCONT11;
}

public byte getSUBCONT12() {
return SUBCONT12;
}

public byte getSUBCONT13() {
return SUBCONT13;
}

public byte getSUBCONT21() {
return SUBCONT21;
}

public byte getSUBCONT210() {
return SUBCONT210;
}

public byte getSUBCONT211() {
return SUBCONT211;
}

public byte getSUBCONT212() {
return SUBCONT212;
}

public byte getSUBCONT213() {
return SUBCONT213;
}

public byte getSUBCONT214() {
return SUBCONT214;
}

public byte getSUBCONT215() {
return SUBCONT215;
}

public byte getSUBCONT216() {
return SUBCONT216;
}

public byte getSUBCONT22() {
return SUBCONT22;
}

public byte getSUBCONT23() {
return SUBCONT23;
}

public byte getSUBCONT24() {
return SUBCONT24;
}

public byte getSUBCONT25() {
return SUBCONT25;
}

public byte getSUBCONT26() {
return SUBCONT26;
}

public byte getSUBCONT27() {
return SUBCONT27;
}

public byte getSUBCONT28() {
return SUBCONT28;
}

public byte getSUBCONT29() {
return SUBCONT29;
}

public byte getSUBCONT3() {
return SUBCONT3;
}

public byte getSUSP() {
return SUSP;
}

public byte getTALKMATTER() {
return TALKMATTER;
}

public byte getTEASESIB() {
return TEASESIB;
}

public byte getTLKF() {
return TLKF;
}

public byte getTLKM() {
return TLKM;
}

public byte getTRAINANY() {
return TRAINANY;
}

public short getTRAINDAYS1() {
return TRAINDAYS1;
}

public short getTRAINDAYS2() {
return TRAINDAYS2;
}

public short getTRAINDAYS3() {
return TRAINDAYS3;
}

public byte getTRAINDENY() {
return TRAINDENY;
}

public byte getTRAINEND1() {
return TRAINEND1;
}

public byte getTRAINEND2() {
return TRAINEND2;
}

public byte getTRAINEND3() {
return TRAINEND3;
}

public byte getTRAINHRS1() {
return TRAINHRS1;
}

public byte getTRAINHRS2() {
return TRAINHRS2;
}

public byte getTRAINHRS3() {
return TRAINHRS3;
}

public byte getTRAINN() {
return TRAINN;
}

public byte getTRAINPURP11() {
return TRAINPURP11;
}

public byte getTRAINPURP12() {
return TRAINPURP12;
}

public byte getTRAINPURP13() {
return TRAINPURP13;
}

public byte getTRAINPURP21() {
return TRAINPURP21;
}

public byte getTRAINPURP22() {
return TRAINPURP22;
}

public byte getTRAINPURP23() {
return TRAINPURP23;
}

public byte getTRAINPURP31() {
return TRAINPURP31;
}

public byte getTRAINPURP32() {
return TRAINPURP32;
}

public byte getTRAINPURP33() {
return TRAINPURP33;
}

public byte getTRAINPURP41() {
return TRAINPURP41;
}

public byte getTRAINPURP42() {
return TRAINPURP42;
}

public byte getTRAINPURP43() {
return TRAINPURP43;
}

public byte getTRAINPURP51() {
return TRAINPURP51;
}

public byte getTRAINPURP52() {
return TRAINPURP52;
}

public byte getTRAINPURP53() {
return TRAINPURP53;
}

public byte getTRAINPURP61() {
return TRAINPURP61;
}

public byte getTRAINPURP62() {
return TRAINPURP62;
}

public byte getTRAINPURP63() {
return TRAINPURP63;
}

public byte getTRAINPURP71() {
return TRAINPURP71;
}

public byte getTRAINPURP72() {
return TRAINPURP72;
}

public byte getTRAINPURP73() {
return TRAINPURP73;
}

public byte getTRAINQUAL1() {
return TRAINQUAL1;
}

public byte getTRAINQUAL2() {
return TRAINQUAL2;
}

public byte getTRAINQUAL3() {
return TRAINQUAL3;
}

public byte getTRQUAL1() {
return TRQUAL1;
}

public byte getTRQUAL10() {
return TRQUAL10;
}

public byte getTRQUAL11() {
return TRQUAL11;
}

public byte getTRQUAL13() {
return TRQUAL13;
}

public byte getTRQUAL15() {
return TRQUAL15;
}

public byte getTRQUAL16() {
return TRQUAL16;
}

public byte getTRQUAL17() {
return TRQUAL17;
}

public byte getTRQUAL18() {
return TRQUAL18;
}

public byte getTRQUAL19() {
return TRQUAL19;
}

public byte getTRQUAL2() {
return TRQUAL2;
}

public byte getTRQUAL20() {
return TRQUAL20;
}

public byte getTRQUAL21() {
return TRQUAL21;
}

public byte getTRQUAL22() {
return TRQUAL22;
}

public byte getTRQUAL23() {
return TRQUAL23;
}

public byte getTRQUAL24() {
return TRQUAL24;
}

public byte getTRQUAL25() {
return TRQUAL25;
}

public byte getTRQUAL26() {
return TRQUAL26;
}

public byte getTRQUAL27() {
return TRQUAL27;
}

public byte getTRQUAL28() {
return TRQUAL28;
}

public byte getTRQUAL29() {
return TRQUAL29;
}

public byte getTRQUAL3() {
return TRQUAL3;
}

public byte getTRQUAL30() {
return TRQUAL30;
}

public byte getTRQUAL31() {
return TRQUAL31;
}

public byte getTRQUAL4() {
return TRQUAL4;
}

public byte getTRQUAL5() {
return TRQUAL5;
}

public byte getTRQUAL6() {
return TRQUAL6;
}

public byte getTRQUAL7() {
return TRQUAL7;
}

public byte getTRQUAL8() {
return TRQUAL8;
}

public byte getTRQUAL9() {
return TRQUAL9;
}

public byte getTRWHO1() {
return TRWHO1;
}

public byte getTRWHO2() {
return TRWHO2;
}

public byte getTRWHO3() {
return TRWHO3;
}

protected double TVHOURS() {
return TVHOURS;
}

public byte getTVM2() {
return TVM2;
}

public byte getUKBORN() {
return UKBORN;
}

public byte getUNDQUS() {
return UNDQUS;
}

public byte getUNSAFE1() {
return UNSAFE1;
}

public byte getUNSAFE10() {
return UNSAFE10;
}

public byte getUNSAFE11() {
return UNSAFE11;
}

public byte getUNSAFE2() {
return UNSAFE2;
}

public byte getUNSAFE3() {
return UNSAFE3;
}

public byte getUNSAFE4() {
return UNSAFE4;
}

public byte getUNSAFE5() {
return UNSAFE5;
}

public byte getUNSAFE6() {
return UNSAFE6;
}

public byte getUNSAFE7() {
return UNSAFE7;
}

public byte getUNSAFE8() {
return UNSAFE8;
}

public byte getUNSAFE9() {
return UNSAFE9;
}

public byte getUNSAFE96() {
return UNSAFE96;
}

public byte getUNSAFE97() {
return UNSAFE97;
}

public byte getUNSAFEO_CODE() {
return UNSAFEO_CODE;
}

public byte getUNSAFE_DV() {
return UNSAFE_DV;
}

public byte getUPSET() {
return UPSET;
}

public byte getURBAN_DV() {
return URBAN_DV;
}

public byte getVERABSIB() {
return VERABSIB;
}

public byte getVFCONT11() {
return VFCONT11;
}

public byte getVFCONT12() {
return VFCONT12;
}

public byte getVFCONT13() {
return VFCONT13;
}

public byte getVFCONT21() {
return VFCONT21;
}

public byte getVFCONT210() {
return VFCONT210;
}

public byte getVFCONT211() {
return VFCONT211;
}

public byte getVFCONT212() {
return VFCONT212;
}

public byte getVFCONT213() {
return VFCONT213;
}

public byte getVFCONT214() {
return VFCONT214;
}

public byte getVFCONT215() {
return VFCONT215;
}

public byte getVFCONT216() {
return VFCONT216;
}

public byte getVFCONT22() {
return VFCONT22;
}

public byte getVFCONT23() {
return VFCONT23;
}

public byte getVFCONT24() {
return VFCONT24;
}

public byte getVFCONT25() {
return VFCONT25;
}

public byte getVFCONT26() {
return VFCONT26;
}

public byte getVFCONT27() {
return VFCONT27;
}

public byte getVFCONT28() {
return VFCONT28;
}

public byte getVFCONT29() {
return VFCONT29;
}

public byte getVFCONT3() {
return VFCONT3;
}

public byte getVFCT() {
return VFCT;
}

public byte getVFPRE() {
return VFPRE;
}

public byte getVFSTOP1() {
return VFSTOP1;
}

public byte getVFSTOP2() {
return VFSTOP2;
}

public byte getVFSTOP3() {
return VFSTOP3;
}

public byte getVFSTOP4() {
return VFSTOP4;
}

public byte getVFSTOP5() {
return VFSTOP5;
}

public byte getVFSTOP6() {
return VFSTOP6;
}

public byte getVFSTOP7() {
return VFSTOP7;
}

public byte getVFSTOP8() {
return VFSTOP8;
}

public byte getVFSTOP97() {
return VFSTOP97;
}

public byte getVFTCTW() {
return VFTCTW;
}

public byte getVISFAM() {
return VISFAM;
}

public byte getVISFAMY1() {
return VISFAMY1;
}

public byte getVISFAMY10() {
return VISFAMY10;
}

public byte getVISFAMY11() {
return VISFAMY11;
}

public byte getVISFAMY12() {
return VISFAMY12;
}

public byte getVISFAMY13() {
return VISFAMY13;
}

public byte getVISFAMY14() {
return VISFAMY14;
}

public byte getVISFAMY15() {
return VISFAMY15;
}

public byte getVISFAMY2() {
return VISFAMY2;
}

public byte getVISFAMY3() {
return VISFAMY3;
}

public byte getVISFAMY4() {
return VISFAMY4;
}

public byte getVISFAMY5() {
return VISFAMY5;
}

public byte getVISFAMY6() {
return VISFAMY6;
}

public byte getVISFAMY7() {
return VISFAMY7;
}

public byte getVISFAMY8() {
return VISFAMY8;
}

public byte getVISFAMY9() {
return VISFAMY9;
}

public byte getVISFAMY97() {
return VISFAMY97;
}

public byte getVISFRNDS() {
return VISFRNDS;
}

public byte getVISFRNDSY1() {
return VISFRNDSY1;
}

public byte getVISFRNDSY10() {
return VISFRNDSY10;
}

public byte getVISFRNDSY11() {
return VISFRNDSY11;
}

public byte getVISFRNDSY12() {
return VISFRNDSY12;
}

public byte getVISFRNDSY13() {
return VISFRNDSY13;
}

public byte getVISFRNDSY14() {
return VISFRNDSY14;
}

public byte getVISFRNDSY2() {
return VISFRNDSY2;
}

public byte getVISFRNDSY3() {
return VISFRNDSY3;
}

public byte getVISFRNDSY4() {
return VISFRNDSY4;
}

public byte getVISFRNDSY5() {
return VISFRNDSY5;
}

public byte getVISFRNDSY6() {
return VISFRNDSY6;
}

public byte getVISFRNDSY7() {
return VISFRNDSY7;
}

public byte getVISFRNDSY8() {
return VISFRNDSY8;
}

public byte getVISFRNDSY9() {
return VISFRNDSY9;
}

public byte getVISFRNDSY97() {
return VISFRNDSY97;
}

public byte getVOLRECPER() {
return VOLRECPER;
}

public short getVOTE1() {
return VOTE1;
}

public short getVOTE2() {
return VOTE2;
}

public short getVOTE3() {
return VOTE3;
}

public short getVOTE4() {
return VOTE4;
}

public short getVOTE5() {
return VOTE5;
}

public short getVOTE6() {
return VOTE6;
}

public byte getVOTEINTENT() {
return VOTEINTENT;
}

public byte getVOTENORM() {
return VOTENORM;
}

public byte getWEKID() {
return WEKID;
}

public byte getWHORUAGE() {
return WHORUAGE;
}

public byte getWHORUEDU() {
return WHORUEDU;
}

public byte getWHORUFAM() {
return WHORUFAM;
}

public byte getWHORUPOL() {
return WHORUPOL;
}

public byte getWHORUPRO() {
return WHORUPRO;
}

public byte getWHORURAC() {
return WHORURAC;
}

public byte getWHORUSEX() {
return WHORUSEX;
}

public byte getWKPLSAM() {
return WKPLSAM;
}

public byte getWORDS1() {
return WORDS1;
}

public byte getWORDS2() {
return WORDS2;
}

public byte getWORDS3() {
return WORDS3;
}

public byte getWORDS4() {
return WORDS4;
}

public byte getWORKTRAV() {
return WORKTRAV;
}

public byte getWRCOMPPRE() {
return WRCOMPPRE;
}

public byte getWRDRCL() {
return WRDRCL;
}

public byte getWRDRECPRE() {
return WRDRECPRE;
}

public byte getWRINTPRE() {
return WRINTPRE;
}

public byte getXPMOVE() {
return XPMOVE;
}

public byte getXTRA5MINOSM_DV() {
return XTRA5MINOSM_DV;
}

public byte getXTRA5MIN_DV() {
return XTRA5MIN_DV;
}

public byte getYAJBSRV1() {
return YAJBSRV1;
}

public byte getYAJBSRV2() {
return YAJBSRV2;
}

public byte getYAJBSRV3() {
return YAJBSRV3;
}

public byte getYAJBSRV4() {
return YAJBSRV4;
}

public byte getYAJBSRV5() {
return YAJBSRV5;
}

public byte getYAJBSRV6() {
return YAJBSRV6;
}

public byte getYAJBSRV7() {
return YAJBSRV7;
}

public byte getYAJBSRV96() {
return YAJBSRV96;
}

public byte getYANSSEC5_DV() {
return YANSSEC5_DV;
}

public short getYASOC00_CC() {
return YASOC00_CC;
}

public short getYASOC10_CC() {
return YASOC10_CC;
}

public byte getYASOC90_CC() {
return YASOC90_CC;
}

public byte getYELLKID() {
return YELLKID;
}

public US_Wave21_indresp_Record(String line) {
s = line.split("\t");
initPIDP(s[0]);
initPID(s[1]);
initHIDP(s[2]);
initPNO(s[3]);
initCHILDPNO(s[4]);
initHHORIG(s[5]);
initMEMORIG(s[6]);
initPSU(s[7]);
initSTRATA(s[8]);
initSAMPST(s[9]);
initMONTH(s[10]);
initIVFIO(s[11]);
initIOUTCOME(s[12]);
initSEX(s[13]);
initDVAGE(s[14]);
initBIRTHY(s[15]);
initCINDTIME(s[16]);
initWRDRCL(s[17]);
initNSRAN(s[18]);
initLVWHY(s[19]);
initLVMTHP(s[20]);
initLVYRP(s[21]);
initISYEAR(s[22]);
initADSTATUS(s[23]);
initPLIVPAR(s[24]);
initPSIBLINGS(s[25]);
initNCH14RESP(s[26]);
initNCH3RESP(s[27]);
initNCH5RESP(s[28]);
initNCH8RESP(s[29]);
initNCH415RESP(s[30]);
initNCHRESP(s[31]);
initNCHUND18RESP(s[32]);
initNATCH01(s[33]);
initNATCH02(s[34]);
initNATCH03(s[35]);
initNATCH04(s[36]);
initNATCH05(s[37]);
initNATCH06(s[38]);
initNATCH07(s[39]);
initNATCH08(s[40]);
initNATCH09(s[41]);
initNATCH10(s[42]);
initNATCH11(s[43]);
initNATCH12(s[44]);
initNATCH13(s[45]);
initNATCH14(s[46]);
initNATCH15(s[47]);
initNATCH16(s[48]);
initNNATCH(s[49]);
initNADOPTCH(s[50]);
initADOPTCH01(s[51]);
initADOPTCH02(s[52]);
initADOPTCH03(s[53]);
initADOPTCH04(s[54]);
initADOPTCH05(s[55]);
initADOPTCH06(s[56]);
initADOPTCH07(s[57]);
initADOPTCH08(s[58]);
initADOPTCH09(s[59]);
initADOPTCH10(s[60]);
initADOPTCH11(s[61]);
initADOPTCH12(s[62]);
initADOPTCH13(s[63]);
initADOPTCH14(s[64]);
initADOPTCH15(s[65]);
initADOPTCH16(s[66]);
initNCHUNDER16(s[67]);
initNCH5TO15(s[68]);
initNCH10TO15(s[69]);
initNCH10(s[70]);
initFFBRFEDLW(s[71]);
initALLCH01(s[72]);
initALLCH02(s[73]);
initALLCH03(s[74]);
initALLCH04(s[75]);
initALLCH05(s[76]);
initALLCH06(s[77]);
initALLCH07(s[78]);
initALLCH08(s[79]);
initALLCH09(s[80]);
initALLCH10(s[81]);
initALLCH11(s[82]);
initALLCH12(s[83]);
initALLCH13(s[84]);
initALLCH14(s[85]);
initALLCH15(s[86]);
initALLCH16(s[87]);
initISTRTDATY(s[88]);
initISTRTDATM(s[89]);
initISTRTDATD(s[90]);
initLIENG(s[91]);
initLITRANS(s[92]);
initLIWHO(s[93]);
initLIHOW(s[94]);
initCHKRESP(s[95]);
initMVEVER(s[96]);
initMVMNTH(s[97]);
initMVYR(s[98]);
initLKMOVE(s[99]);
initXPMOVE(s[100]);
initJBSTAT(s[101]);
initMLSTATCHK(s[102]);
initMLSTAT(s[103]);
initDRIVE(s[104]);
initCARUSE(s[105]);
initMOBUSE(s[106]);
initNETPUSE(s[107]);
initBRITID(s[108]);
initUKBORN(s[109]);
initPLBORNC(s[110]);
initYR2UK4(s[111]);
initCITZN1(s[112]);
initCITZN2(s[113]);
initCITZN3(s[114]);
initQFHIGH(s[115]);
initQUALOC(s[116]);
initQFVOC1(s[117]);
initQFVOC2(s[118]);
initQFVOC3(s[119]);
initQFVOC4(s[120]);
initQFVOC5(s[121]);
initQFVOC6(s[122]);
initQFVOC7(s[123]);
initQFVOC8(s[124]);
initQFVOC9(s[125]);
initQFVOC10(s[126]);
initQFVOC11(s[127]);
initQFVOC12(s[128]);
initQFVOC13(s[129]);
initQFVOC14(s[130]);
initQFVOC15(s[131]);
initQFVOC96(s[132]);
initSCHOOL(s[133]);
initSCEND(s[134]);
initSCHLLOC(s[135]);
initSCHOK(s[136]);
initFENOW(s[137]);
initFEEND(s[138]);
initJ1NONE(s[139]);
initJ1SEMP(s[140]);
initJ1BOSS(s[141]);
initJ1MNGR(s[142]);
initEDTYPE(s[143]);
initEDASP(s[144]);
initLVSCDO(s[145]);
initAHVWELL(s[146]);
initFEDLIK(s[147]);
initFEDNT(s[148]);
initFUTUREINT(s[149]);
initLVHM(s[150]);
initOCIMPA(s[151]);
initOCIMPB(s[152]);
initOCIMPE(s[153]);
initOCIMPF(s[154]);
initOCIMPI(s[155]);
initOCIMPK(s[156]);
initOCIMPL(s[157]);
initFUTRA(s[158]);
initFUTRB(s[159]);
initFUTRC(s[160]);
initFUTRD(s[161]);
initFUTRE(s[162]);
initFUTRF(s[163]);
initFUTRG(s[164]);
initFUTRH(s[165]);
initFUTRI(s[166]);
initFUTRJ(s[167]);
initFUTRK(s[168]);
initFUTRL(s[169]);
initPAJU(s[170]);
initMAJU(s[171]);
initPACOB(s[172]);
initPAYRUK(s[173]);
initMACOB(s[174]);
initMAYRUK(s[175]);
initNATID1(s[176]);
initNATID2(s[177]);
initNATID3(s[178]);
initNATID4(s[179]);
initNATID5(s[180]);
initNATID6(s[181]);
initNATID97(s[182]);
initRACEL(s[183]);
initRACELO_CODE(s[184]);
initRACELT(s[185]);
initRACELWT(s[186]);
initRACELMT(s[187]);
initRACELAT(s[188]);
initRACELBT(s[189]);
initRACELOT_CODE(s[190]);
initOPRLG(s[191]);
initOPRLG0NI(s[192]);
initNIREL(s[193]);
initNIACT(s[194]);
initOPRLG0(s[195]);
initOPRLG1(s[196]);
initUNSAFE1(s[197]);
initUNSAFE2(s[198]);
initUNSAFE3(s[199]);
initUNSAFE4(s[200]);
initUNSAFE5(s[201]);
initUNSAFE6(s[202]);
initUNSAFE7(s[203]);
initUNSAFE8(s[204]);
initUNSAFE9(s[205]);
initUNSAFE10(s[206]);
initUNSAFE11(s[207]);
initUNSAFE96(s[208]);
initUNSAFE97(s[209]);
initUNSAFEO_CODE(s[210]);
initRESUNSAFE1_1(s[211]);
initRESUNSAFE2_1(s[212]);
initRESUNSAFE3_1(s[213]);
initRESUNSAFE4_1(s[214]);
initRESUNSAFE5_1(s[215]);
initRESUNSAFE6_1(s[216]);
initRESUNSAFE7_1(s[217]);
initRESUNSAFE8_1(s[218]);
initRESUNSAFE9_1(s[219]);
initRESUNSAFE96_1(s[220]);
initRESUNSAFE97_1(s[221]);
initRESUNSAFE1_2(s[222]);
initRESUNSAFE2_2(s[223]);
initRESUNSAFE3_2(s[224]);
initRESUNSAFE4_2(s[225]);
initRESUNSAFE5_2(s[226]);
initRESUNSAFE6_2(s[227]);
initRESUNSAFE7_2(s[228]);
initRESUNSAFE8_2(s[229]);
initRESUNSAFE9_2(s[230]);
initRESUNSAFE96_2(s[231]);
initRESUNSAFE97_2(s[232]);
initRESUNSAFE1_3(s[233]);
initRESUNSAFE2_3(s[234]);
initRESUNSAFE3_3(s[235]);
initRESUNSAFE4_3(s[236]);
initRESUNSAFE5_3(s[237]);
initRESUNSAFE6_3(s[238]);
initRESUNSAFE7_3(s[239]);
initRESUNSAFE8_3(s[240]);
initRESUNSAFE9_3(s[241]);
initRESUNSAFE96_3(s[242]);
initRESUNSAFE97_3(s[243]);
initRESUNSAFE1_4(s[244]);
initRESUNSAFE2_4(s[245]);
initRESUNSAFE3_4(s[246]);
initRESUNSAFE4_4(s[247]);
initRESUNSAFE5_4(s[248]);
initRESUNSAFE6_4(s[249]);
initRESUNSAFE7_4(s[250]);
initRESUNSAFE8_4(s[251]);
initRESUNSAFE9_4(s[252]);
initRESUNSAFE96_4(s[253]);
initRESUNSAFE97_4(s[254]);
initRESUNSAFE1_5(s[255]);
initRESUNSAFE2_5(s[256]);
initRESUNSAFE3_5(s[257]);
initRESUNSAFE4_5(s[258]);
initRESUNSAFE5_5(s[259]);
initRESUNSAFE6_5(s[260]);
initRESUNSAFE7_5(s[261]);
initRESUNSAFE8_5(s[262]);
initRESUNSAFE9_5(s[263]);
initRESUNSAFE96_5(s[264]);
initRESUNSAFE97_5(s[265]);
initRESUNSAFE1_6(s[266]);
initRESUNSAFE2_6(s[267]);
initRESUNSAFE3_6(s[268]);
initRESUNSAFE4_6(s[269]);
initRESUNSAFE5_6(s[270]);
initRESUNSAFE6_6(s[271]);
initRESUNSAFE7_6(s[272]);
initRESUNSAFE8_6(s[273]);
initRESUNSAFE9_6(s[274]);
initRESUNSAFE96_6(s[275]);
initRESUNSAFE97_6(s[276]);
initRESUNSAFE1_7(s[277]);
initRESUNSAFE2_7(s[278]);
initRESUNSAFE3_7(s[279]);
initRESUNSAFE4_7(s[280]);
initRESUNSAFE5_7(s[281]);
initRESUNSAFE6_7(s[282]);
initRESUNSAFE7_7(s[283]);
initRESUNSAFE8_7(s[284]);
initRESUNSAFE9_7(s[285]);
initRESUNSAFE96_7(s[286]);
initRESUNSAFE97_7(s[287]);
initRESUNSAFE1_8(s[288]);
initRESUNSAFE2_8(s[289]);
initRESUNSAFE3_8(s[290]);
initRESUNSAFE4_8(s[291]);
initRESUNSAFE5_8(s[292]);
initRESUNSAFE6_8(s[293]);
initRESUNSAFE7_8(s[294]);
initRESUNSAFE8_8(s[295]);
initRESUNSAFE9_8(s[296]);
initRESUNSAFE96_8(s[297]);
initRESUNSAFE97_8(s[298]);
initRESUNSAFE1_9(s[299]);
initRESUNSAFE2_9(s[300]);
initRESUNSAFE3_9(s[301]);
initRESUNSAFE4_9(s[302]);
initRESUNSAFE5_9(s[303]);
initRESUNSAFE6_9(s[304]);
initRESUNSAFE7_9(s[305]);
initRESUNSAFE8_9(s[306]);
initRESUNSAFE9_9(s[307]);
initRESUNSAFE96_9(s[308]);
initRESUNSAFE97_9(s[309]);
initRESUNSAFE1_10(s[310]);
initRESUNSAFE2_10(s[311]);
initRESUNSAFE3_10(s[312]);
initRESUNSAFE4_10(s[313]);
initRESUNSAFE5_10(s[314]);
initRESUNSAFE6_10(s[315]);
initRESUNSAFE7_10(s[316]);
initRESUNSAFE8_10(s[317]);
initRESUNSAFE9_10(s[318]);
initRESUNSAFE96_10(s[319]);
initRESUNSAFE97_10(s[320]);
initRESUNSAFE1_11(s[321]);
initRESUNSAFE2_11(s[322]);
initRESUNSAFE3_11(s[323]);
initRESUNSAFE4_11(s[324]);
initRESUNSAFE5_11(s[325]);
initRESUNSAFE6_11(s[326]);
initRESUNSAFE7_11(s[327]);
initRESUNSAFE8_11(s[328]);
initRESUNSAFE9_11(s[329]);
initRESUNSAFE96_11(s[330]);
initRESUNSAFE97_11(s[331]);
initRESUNSAFE1_12(s[332]);
initRESUNSAFE2_12(s[333]);
initRESUNSAFE3_12(s[334]);
initRESUNSAFE4_12(s[335]);
initRESUNSAFE5_12(s[336]);
initRESUNSAFE6_12(s[337]);
initRESUNSAFE7_12(s[338]);
initRESUNSAFE8_12(s[339]);
initRESUNSAFE9_12(s[340]);
initRESUNSAFE96_12(s[341]);
initRESUNSAFE97_12(s[342]);
initAVOIDANCE1(s[343]);
initAVOIDANCE2(s[344]);
initAVOIDANCE3(s[345]);
initAVOIDANCE4(s[346]);
initAVOIDANCE5(s[347]);
initAVOIDANCE6(s[348]);
initAVOIDANCE7(s[349]);
initAVOIDANCE8(s[350]);
initAVOIDANCE9(s[351]);
initAVOIDANCE10(s[352]);
initAVOIDANCE11(s[353]);
initAVOIDANCE96(s[354]);
initAVOIDANCE97(s[355]);
initAVOIDANCEO_CODE(s[356]);
initRESAVOID1_1(s[357]);
initRESAVOID2_1(s[358]);
initRESAVOID3_1(s[359]);
initRESAVOID4_1(s[360]);
initRESAVOID5_1(s[361]);
initRESAVOID6_1(s[362]);
initRESAVOID7_1(s[363]);
initRESAVOID8_1(s[364]);
initRESAVOID9_1(s[365]);
initRESAVOID96_1(s[366]);
initRESAVOID97_1(s[367]);
initRESAVOID1_2(s[368]);
initRESAVOID2_2(s[369]);
initRESAVOID3_2(s[370]);
initRESAVOID4_2(s[371]);
initRESAVOID5_2(s[372]);
initRESAVOID6_2(s[373]);
initRESAVOID7_2(s[374]);
initRESAVOID8_2(s[375]);
initRESAVOID9_2(s[376]);
initRESAVOID96_2(s[377]);
initRESAVOID97_2(s[378]);
initRESAVOID1_3(s[379]);
initRESAVOID2_3(s[380]);
initRESAVOID3_3(s[381]);
initRESAVOID4_3(s[382]);
initRESAVOID5_3(s[383]);
initRESAVOID6_3(s[384]);
initRESAVOID7_3(s[385]);
initRESAVOID8_3(s[386]);
initRESAVOID9_3(s[387]);
initRESAVOID96_3(s[388]);
initRESAVOID97_3(s[389]);
initRESAVOID1_4(s[390]);
initRESAVOID2_4(s[391]);
initRESAVOID3_4(s[392]);
initRESAVOID4_4(s[393]);
initRESAVOID5_4(s[394]);
initRESAVOID6_4(s[395]);
initRESAVOID7_4(s[396]);
initRESAVOID8_4(s[397]);
initRESAVOID9_4(s[398]);
initRESAVOID96_4(s[399]);
initRESAVOID97_4(s[400]);
initRESAVOID1_5(s[401]);
initRESAVOID2_5(s[402]);
initRESAVOID3_5(s[403]);
initRESAVOID4_5(s[404]);
initRESAVOID5_5(s[405]);
initRESAVOID6_5(s[406]);
initRESAVOID7_5(s[407]);
initRESAVOID8_5(s[408]);
initRESAVOID9_5(s[409]);
initRESAVOID96_5(s[410]);
initRESAVOID97_5(s[411]);
initRESAVOID1_6(s[412]);
initRESAVOID2_6(s[413]);
initRESAVOID3_6(s[414]);
initRESAVOID4_6(s[415]);
initRESAVOID5_6(s[416]);
initRESAVOID6_6(s[417]);
initRESAVOID7_6(s[418]);
initRESAVOID8_6(s[419]);
initRESAVOID9_6(s[420]);
initRESAVOID96_6(s[421]);
initRESAVOID97_6(s[422]);
initRESAVOID1_7(s[423]);
initRESAVOID2_7(s[424]);
initRESAVOID3_7(s[425]);
initRESAVOID4_7(s[426]);
initRESAVOID5_7(s[427]);
initRESAVOID6_7(s[428]);
initRESAVOID7_7(s[429]);
initRESAVOID8_7(s[430]);
initRESAVOID9_7(s[431]);
initRESAVOID96_7(s[432]);
initRESAVOID97_7(s[433]);
initRESAVOID1_8(s[434]);
initRESAVOID2_8(s[435]);
initRESAVOID3_8(s[436]);
initRESAVOID4_8(s[437]);
initRESAVOID5_8(s[438]);
initRESAVOID6_8(s[439]);
initRESAVOID7_8(s[440]);
initRESAVOID8_8(s[441]);
initRESAVOID9_8(s[442]);
initRESAVOID96_8(s[443]);
initRESAVOID97_8(s[444]);
initRESAVOID1_9(s[445]);
initRESAVOID2_9(s[446]);
initRESAVOID3_9(s[447]);
initRESAVOID4_9(s[448]);
initRESAVOID5_9(s[449]);
initRESAVOID6_9(s[450]);
initRESAVOID7_9(s[451]);
initRESAVOID8_9(s[452]);
initRESAVOID9_9(s[453]);
initRESAVOID96_9(s[454]);
initRESAVOID97_9(s[455]);
initRESAVOID1_10(s[456]);
initRESAVOID2_10(s[457]);
initRESAVOID3_10(s[458]);
initRESAVOID4_10(s[459]);
initRESAVOID5_10(s[460]);
initRESAVOID6_10(s[461]);
initRESAVOID7_10(s[462]);
initRESAVOID8_10(s[463]);
initRESAVOID9_10(s[464]);
initRESAVOID96_10(s[465]);
initRESAVOID97_10(s[466]);
initRESAVOID1_11(s[467]);
initRESAVOID2_11(s[468]);
initRESAVOID3_11(s[469]);
initRESAVOID4_11(s[470]);
initRESAVOID5_11(s[471]);
initRESAVOID6_11(s[472]);
initRESAVOID7_11(s[473]);
initRESAVOID8_11(s[474]);
initRESAVOID9_11(s[475]);
initRESAVOID96_11(s[476]);
initRESAVOID97_11(s[477]);
initRESAVOID1_12(s[478]);
initRESAVOID2_12(s[479]);
initRESAVOID3_12(s[480]);
initRESAVOID4_12(s[481]);
initRESAVOID5_12(s[482]);
initRESAVOID6_12(s[483]);
initRESAVOID7_12(s[484]);
initRESAVOID8_12(s[485]);
initRESAVOID9_12(s[486]);
initRESAVOID96_12(s[487]);
initRESAVOID97_12(s[488]);
initINSULTED1(s[489]);
initINSULTED2(s[490]);
initINSULTED3(s[491]);
initINSULTED4(s[492]);
initINSULTED5(s[493]);
initINSULTED6(s[494]);
initINSULTED7(s[495]);
initINSULTED8(s[496]);
initINSULTED9(s[497]);
initINSULTED10(s[498]);
initINSULTED11(s[499]);
initINSULTED96(s[500]);
initINSULTED97(s[501]);
initINSULTEDO_CODE(s[502]);
initRESINSULTED1_1(s[503]);
initRESINSULTED2_1(s[504]);
initRESINSULTED3_1(s[505]);
initRESINSULTED4_1(s[506]);
initRESINSULTED5_1(s[507]);
initRESINSULTED6_1(s[508]);
initRESINSULTED7_1(s[509]);
initRESINSULTED8_1(s[510]);
initRESINSULTED9_1(s[511]);
initRESINSULTED96_1(s[512]);
initRESINSULTED97_1(s[513]);
initRESINSULTED1_2(s[514]);
initRESINSULTED2_2(s[515]);
initRESINSULTED3_2(s[516]);
initRESINSULTED4_2(s[517]);
initRESINSULTED5_2(s[518]);
initRESINSULTED6_2(s[519]);
initRESINSULTED7_2(s[520]);
initRESINSULTED8_2(s[521]);
initRESINSULTED9_2(s[522]);
initRESINSULTED96_2(s[523]);
initRESINSULTED97_2(s[524]);
initRESINSULTED1_3(s[525]);
initRESINSULTED2_3(s[526]);
initRESINSULTED3_3(s[527]);
initRESINSULTED4_3(s[528]);
initRESINSULTED5_3(s[529]);
initRESINSULTED6_3(s[530]);
initRESINSULTED7_3(s[531]);
initRESINSULTED8_3(s[532]);
initRESINSULTED9_3(s[533]);
initRESINSULTED96_3(s[534]);
initRESINSULTED97_3(s[535]);
initRESINSULTED1_4(s[536]);
initRESINSULTED2_4(s[537]);
initRESINSULTED3_4(s[538]);
initRESINSULTED4_4(s[539]);
initRESINSULTED5_4(s[540]);
initRESINSULTED6_4(s[541]);
initRESINSULTED7_4(s[542]);
initRESINSULTED8_4(s[543]);
initRESINSULTED9_4(s[544]);
initRESINSULTED96_4(s[545]);
initRESINSULTED97_4(s[546]);
initRESINSULTED1_5(s[547]);
initRESINSULTED2_5(s[548]);
initRESINSULTED3_5(s[549]);
initRESINSULTED4_5(s[550]);
initRESINSULTED5_5(s[551]);
initRESINSULTED6_5(s[552]);
initRESINSULTED7_5(s[553]);
initRESINSULTED8_5(s[554]);
initRESINSULTED9_5(s[555]);
initRESINSULTED96_5(s[556]);
initRESINSULTED97_5(s[557]);
initRESINSULTED1_6(s[558]);
initRESINSULTED2_6(s[559]);
initRESINSULTED3_6(s[560]);
initRESINSULTED4_6(s[561]);
initRESINSULTED5_6(s[562]);
initRESINSULTED6_6(s[563]);
initRESINSULTED7_6(s[564]);
initRESINSULTED8_6(s[565]);
initRESINSULTED9_6(s[566]);
initRESINSULTED96_6(s[567]);
initRESINSULTED97_6(s[568]);
initRESINSULTED1_7(s[569]);
initRESINSULTED2_7(s[570]);
initRESINSULTED3_7(s[571]);
initRESINSULTED4_7(s[572]);
initRESINSULTED5_7(s[573]);
initRESINSULTED6_7(s[574]);
initRESINSULTED7_7(s[575]);
initRESINSULTED8_7(s[576]);
initRESINSULTED9_7(s[577]);
initRESINSULTED96_7(s[578]);
initRESINSULTED97_7(s[579]);
initRESINSULTED1_8(s[580]);
initRESINSULTED2_8(s[581]);
initRESINSULTED3_8(s[582]);
initRESINSULTED4_8(s[583]);
initRESINSULTED5_8(s[584]);
initRESINSULTED6_8(s[585]);
initRESINSULTED7_8(s[586]);
initRESINSULTED8_8(s[587]);
initRESINSULTED9_8(s[588]);
initRESINSULTED96_8(s[589]);
initRESINSULTED97_8(s[590]);
initRESINSULTED1_9(s[591]);
initRESINSULTED2_9(s[592]);
initRESINSULTED3_9(s[593]);
initRESINSULTED4_9(s[594]);
initRESINSULTED5_9(s[595]);
initRESINSULTED6_9(s[596]);
initRESINSULTED7_9(s[597]);
initRESINSULTED8_9(s[598]);
initRESINSULTED9_9(s[599]);
initRESINSULTED96_9(s[600]);
initRESINSULTED97_9(s[601]);
initRESINSULTED1_10(s[602]);
initRESINSULTED2_10(s[603]);
initRESINSULTED3_10(s[604]);
initRESINSULTED4_10(s[605]);
initRESINSULTED5_10(s[606]);
initRESINSULTED6_10(s[607]);
initRESINSULTED7_10(s[608]);
initRESINSULTED8_10(s[609]);
initRESINSULTED9_10(s[610]);
initRESINSULTED96_10(s[611]);
initRESINSULTED97_10(s[612]);
initRESINSULTED1_11(s[613]);
initRESINSULTED2_11(s[614]);
initRESINSULTED3_11(s[615]);
initRESINSULTED4_11(s[616]);
initRESINSULTED5_11(s[617]);
initRESINSULTED6_11(s[618]);
initRESINSULTED7_11(s[619]);
initRESINSULTED8_11(s[620]);
initRESINSULTED9_11(s[621]);
initRESINSULTED96_11(s[622]);
initRESINSULTED97_11(s[623]);
initRESINSULTED1_12(s[624]);
initRESINSULTED2_12(s[625]);
initRESINSULTED3_12(s[626]);
initRESINSULTED4_12(s[627]);
initRESINSULTED5_12(s[628]);
initRESINSULTED6_12(s[629]);
initRESINSULTED7_12(s[630]);
initRESINSULTED8_12(s[631]);
initRESINSULTED9_12(s[632]);
initRESINSULTED96_12(s[633]);
initRESINSULTED97_12(s[634]);
initATTACKED1(s[635]);
initATTACKED2(s[636]);
initATTACKED3(s[637]);
initATTACKED4(s[638]);
initATTACKED5(s[639]);
initATTACKED6(s[640]);
initATTACKED7(s[641]);
initATTACKED8(s[642]);
initATTACKED9(s[643]);
initATTACKED10(s[644]);
initATTACKED11(s[645]);
initATTACKED96(s[646]);
initATTACKED97(s[647]);
initATTACKEDO_CODE(s[648]);
initRESATTACKED1_1(s[649]);
initRESATTACKED2_1(s[650]);
initRESATTACKED3_1(s[651]);
initRESATTACKED4_1(s[652]);
initRESATTACKED5_1(s[653]);
initRESATTACKED6_1(s[654]);
initRESATTACKED7_1(s[655]);
initRESATTACKED8_1(s[656]);
initRESATTACKED9_1(s[657]);
initRESATTACKED96_1(s[658]);
initRESATTACKED97_1(s[659]);
initRESATTACKED1_2(s[660]);
initRESATTACKED2_2(s[661]);
initRESATTACKED3_2(s[662]);
initRESATTACKED4_2(s[663]);
initRESATTACKED5_2(s[664]);
initRESATTACKED6_2(s[665]);
initRESATTACKED7_2(s[666]);
initRESATTACKED8_2(s[667]);
initRESATTACKED9_2(s[668]);
initRESATTACKED96_2(s[669]);
initRESATTACKED97_2(s[670]);
initRESATTACKED1_3(s[671]);
initRESATTACKED2_3(s[672]);
initRESATTACKED3_3(s[673]);
initRESATTACKED4_3(s[674]);
initRESATTACKED5_3(s[675]);
initRESATTACKED6_3(s[676]);
initRESATTACKED7_3(s[677]);
initRESATTACKED8_3(s[678]);
initRESATTACKED9_3(s[679]);
initRESATTACKED96_3(s[680]);
initRESATTACKED97_3(s[681]);
initRESATTACKED1_4(s[682]);
initRESATTACKED2_4(s[683]);
initRESATTACKED3_4(s[684]);
initRESATTACKED4_4(s[685]);
initRESATTACKED5_4(s[686]);
initRESATTACKED6_4(s[687]);
initRESATTACKED7_4(s[688]);
initRESATTACKED8_4(s[689]);
initRESATTACKED9_4(s[690]);
initRESATTACKED96_4(s[691]);
initRESATTACKED97_4(s[692]);
initRESATTACKED1_5(s[693]);
initRESATTACKED2_5(s[694]);
initRESATTACKED3_5(s[695]);
initRESATTACKED4_5(s[696]);
initRESATTACKED5_5(s[697]);
initRESATTACKED6_5(s[698]);
initRESATTACKED7_5(s[699]);
initRESATTACKED8_5(s[700]);
initRESATTACKED9_5(s[701]);
initRESATTACKED96_5(s[702]);
initRESATTACKED97_5(s[703]);
initRESATTACKED1_6(s[704]);
initRESATTACKED2_6(s[705]);
initRESATTACKED3_6(s[706]);
initRESATTACKED4_6(s[707]);
initRESATTACKED5_6(s[708]);
initRESATTACKED6_6(s[709]);
initRESATTACKED7_6(s[710]);
initRESATTACKED8_6(s[711]);
initRESATTACKED9_6(s[712]);
initRESATTACKED96_6(s[713]);
initRESATTACKED97_6(s[714]);
initRESATTACKED1_7(s[715]);
initRESATTACKED2_7(s[716]);
initRESATTACKED3_7(s[717]);
initRESATTACKED4_7(s[718]);
initRESATTACKED5_7(s[719]);
initRESATTACKED6_7(s[720]);
initRESATTACKED7_7(s[721]);
initRESATTACKED8_7(s[722]);
initRESATTACKED9_7(s[723]);
initRESATTACKED96_7(s[724]);
initRESATTACKED97_7(s[725]);
initRESATTACKED1_8(s[726]);
initRESATTACKED2_8(s[727]);
initRESATTACKED3_8(s[728]);
initRESATTACKED4_8(s[729]);
initRESATTACKED5_8(s[730]);
initRESATTACKED6_8(s[731]);
initRESATTACKED7_8(s[732]);
initRESATTACKED8_8(s[733]);
initRESATTACKED9_8(s[734]);
initRESATTACKED96_8(s[735]);
initRESATTACKED97_8(s[736]);
initRESATTACKED1_9(s[737]);
initRESATTACKED2_9(s[738]);
initRESATTACKED3_9(s[739]);
initRESATTACKED4_9(s[740]);
initRESATTACKED5_9(s[741]);
initRESATTACKED6_9(s[742]);
initRESATTACKED7_9(s[743]);
initRESATTACKED8_9(s[744]);
initRESATTACKED9_9(s[745]);
initRESATTACKED96_9(s[746]);
initRESATTACKED97_9(s[747]);
initRESATTACKED1_10(s[748]);
initRESATTACKED2_10(s[749]);
initRESATTACKED3_10(s[750]);
initRESATTACKED4_10(s[751]);
initRESATTACKED5_10(s[752]);
initRESATTACKED6_10(s[753]);
initRESATTACKED7_10(s[754]);
initRESATTACKED8_10(s[755]);
initRESATTACKED9_10(s[756]);
initRESATTACKED96_10(s[757]);
initRESATTACKED97_10(s[758]);
initRESATTACKED1_11(s[759]);
initRESATTACKED2_11(s[760]);
initRESATTACKED3_11(s[761]);
initRESATTACKED4_11(s[762]);
initRESATTACKED5_11(s[763]);
initRESATTACKED6_11(s[764]);
initRESATTACKED7_11(s[765]);
initRESATTACKED8_11(s[766]);
initRESATTACKED9_11(s[767]);
initRESATTACKED96_11(s[768]);
initRESATTACKED97_11(s[769]);
initRESATTACKED1_12(s[770]);
initRESATTACKED2_12(s[771]);
initRESATTACKED3_12(s[772]);
initRESATTACKED4_12(s[773]);
initRESATTACKED5_12(s[774]);
initRESATTACKED6_12(s[775]);
initRESATTACKED7_12(s[776]);
initRESATTACKED8_12(s[777]);
initRESATTACKED9_12(s[778]);
initRESATTACKED96_12(s[779]);
initRESATTACKED97_12(s[780]);
initLLKNBRD(s[781]);
initLOCSERAP(s[782]);
initLOCSERAS(s[783]);
initLOCSERB(s[784]);
initLOCSERD(s[785]);
initLOCSERE(s[786]);
initSERVACC(s[787]);
initSERVACCY1(s[788]);
initSERVACCY2(s[789]);
initSERVACCY3(s[790]);
initSERVACCY4(s[791]);
initSERVACCY5(s[792]);
initSERVACCY6(s[793]);
initSERVACCY7(s[794]);
initSERVACCY8(s[795]);
initSERVACCY9(s[796]);
initSERVACCY10(s[797]);
initSERVACCY11(s[798]);
initSERVACCY12(s[799]);
initSERVACCY13(s[800]);
initSERVACCY14(s[801]);
initSERVACCY15(s[802]);
initSERVACCY97(s[803]);
initLOCSERC(s[804]);
initSATTRANSY1(s[805]);
initSATTRANSY2(s[806]);
initSATTRANSY3(s[807]);
initSATTRANSY4(s[808]);
initSATTRANSY5(s[809]);
initSATTRANSY6(s[810]);
initSATTRANSY7(s[811]);
initSATTRANSY8(s[812]);
initSATTRANSY9(s[813]);
initSATTRANSY10(s[814]);
initSATTRANSY97(s[815]);
initNBRCOH1(s[816]);
initNBRCOH2(s[817]);
initNBRCOH3(s[818]);
initNBRCOH4(s[819]);
initCRWORA(s[820]);
initCRWORB(s[821]);
initCRDARK(s[822]);
initHOOD15(s[823]);
initSIMAGE(s[824]);
initSIMRACE(s[825]);
initSIMEDUC(s[826]);
initSIMJOB(s[827]);
initSIMINC(s[828]);
initSIMAREA(s[829]);
initSIMFAM(s[830]);
initCLOSENUM(s[831]);
initSOCWEB(s[832]);
initNETCHT(s[833]);
initVISFRNDS(s[834]);
initVISFRNDSY1(s[835]);
initVISFRNDSY2(s[836]);
initVISFRNDSY3(s[837]);
initVISFRNDSY4(s[838]);
initVISFRNDSY5(s[839]);
initVISFRNDSY6(s[840]);
initVISFRNDSY7(s[841]);
initVISFRNDSY8(s[842]);
initVISFRNDSY9(s[843]);
initVISFRNDSY10(s[844]);
initVISFRNDSY11(s[845]);
initVISFRNDSY12(s[846]);
initVISFRNDSY13(s[847]);
initVISFRNDSY14(s[848]);
initVISFRNDSY97(s[849]);
initNETSX_1(s[850]);
initNETWR_1(s[851]);
initNETRL_1(s[852]);
initNETAG_1(s[853]);
initNETKN_1(s[854]);
initNETPH_1(s[855]);
initNETLV_1(s[856]);
initNETJB_1(s[857]);
initNETET_1(s[858]);
initNETMET_1(s[859]);
initNETWEB_1(s[860]);
initNETTALK1_1(s[861]);
initNETTALK2_1(s[862]);
initNETTALK3_1(s[863]);
initNETTALK4_1(s[864]);
initNETTALK5_1(s[865]);
initNETTALK6_1(s[866]);
initNETTALK7_1(s[867]);
initNETTALK8_1(s[868]);
initNETTALK9_1(s[869]);
initNETTALK10_1(s[870]);
initNETTALK11_1(s[871]);
initNETTALK12_1(s[872]);
initNETTALK13_1(s[873]);
initNETTALK97_1(s[874]);
initNETTALK96_1(s[875]);
initNETDO1_1(s[876]);
initNETDO2_1(s[877]);
initNETDO3_1(s[878]);
initNETDO4_1(s[879]);
initNETDO5_1(s[880]);
initNETDO6_1(s[881]);
initNETDO7_1(s[882]);
initNETDO8_1(s[883]);
initNETDO9_1(s[884]);
initNETDO10_1(s[885]);
initNETDO97_1(s[886]);
initNETDO96_1(s[887]);
initNETSX_2(s[888]);
initNETWR_2(s[889]);
initNETRL_2(s[890]);
initNETAG_2(s[891]);
initNETKN_2(s[892]);
initNETPH_2(s[893]);
initNETLV_2(s[894]);
initNETJB_2(s[895]);
initNETET_2(s[896]);
initNETMET_2(s[897]);
initNETWEB_2(s[898]);
initNETTALK1_2(s[899]);
initNETTALK2_2(s[900]);
initNETTALK3_2(s[901]);
initNETTALK4_2(s[902]);
initNETTALK5_2(s[903]);
initNETTALK6_2(s[904]);
initNETTALK7_2(s[905]);
initNETTALK8_2(s[906]);
initNETTALK9_2(s[907]);
initNETTALK10_2(s[908]);
initNETTALK11_2(s[909]);
initNETTALK12_2(s[910]);
initNETTALK13_2(s[911]);
initNETTALK97_2(s[912]);
initNETTALK96_2(s[913]);
initNETDO1_2(s[914]);
initNETDO2_2(s[915]);
initNETDO3_2(s[916]);
initNETDO4_2(s[917]);
initNETDO5_2(s[918]);
initNETDO6_2(s[919]);
initNETDO7_2(s[920]);
initNETDO8_2(s[921]);
initNETDO9_2(s[922]);
initNETDO10_2(s[923]);
initNETDO97_2(s[924]);
initNETDO96_2(s[925]);
initNETSX_3(s[926]);
initNETWR_3(s[927]);
initNETRL_3(s[928]);
initNETAG_3(s[929]);
initNETKN_3(s[930]);
initNETPH_3(s[931]);
initNETLV_3(s[932]);
initNETJB_3(s[933]);
initNETET_3(s[934]);
initNETMET_3(s[935]);
initNETWEB_3(s[936]);
initNETTALK1_3(s[937]);
initNETTALK2_3(s[938]);
initNETTALK3_3(s[939]);
initNETTALK4_3(s[940]);
initNETTALK5_3(s[941]);
initNETTALK6_3(s[942]);
initNETTALK7_3(s[943]);
initNETTALK8_3(s[944]);
initNETTALK9_3(s[945]);
initNETTALK10_3(s[946]);
initNETTALK11_3(s[947]);
initNETTALK12_3(s[948]);
initNETTALK13_3(s[949]);
initNETTALK97_3(s[950]);
initNETTALK96_3(s[951]);
initNETDO1_3(s[952]);
initNETDO2_3(s[953]);
initNETDO3_3(s[954]);
initNETDO4_3(s[955]);
initNETDO5_3(s[956]);
initNETDO6_3(s[957]);
initNETDO7_3(s[958]);
initNETDO8_3(s[959]);
initNETDO9_3(s[960]);
initNETDO10_3(s[961]);
initNETDO97_3(s[962]);
initNETDO96_3(s[963]);
initORG(s[964]);
initORGM1(s[965]);
initORGM2(s[966]);
initORGM3(s[967]);
initORGM4(s[968]);
initORGM5(s[969]);
initORGM6(s[970]);
initORGM7(s[971]);
initORGM8(s[972]);
initORGM9(s[973]);
initORGM10(s[974]);
initORGM11(s[975]);
initORGM12(s[976]);
initORGM13(s[977]);
initORGM14(s[978]);
initORGM15(s[979]);
initORGM16(s[980]);
initORGM96(s[981]);
initORGA1(s[982]);
initORGA2(s[983]);
initORGA3(s[984]);
initORGA4(s[985]);
initORGA5(s[986]);
initORGA6(s[987]);
initORGA7(s[988]);
initORGA8(s[989]);
initORGA9(s[990]);
initORGA10(s[991]);
initORGA11(s[992]);
initORGA12(s[993]);
initORGA13(s[994]);
initORGA14(s[995]);
initORGA15(s[996]);
initORGA16(s[997]);
initORGA96(s[998]);
initORGMT1(s[999]);
initORGMT2(s[1000]);
initORGMT3(s[1001]);
initORGMT4(s[1002]);
initORGMT5(s[1003]);
initORGMT6(s[1004]);
initORGMT7(s[1005]);
initORGMT8(s[1006]);
initORGMT9(s[1007]);
initORGMT10(s[1008]);
initORGMT11(s[1009]);
initORGMT12(s[1010]);
initORGMT13(s[1011]);
initORGMT14(s[1012]);
initORGMT15(s[1013]);
initORGMT16(s[1014]);
initORGMT96(s[1015]);
initORGAT1(s[1016]);
initORGAT2(s[1017]);
initORGAT3(s[1018]);
initORGAT4(s[1019]);
initORGAT5(s[1020]);
initORGAT6(s[1021]);
initORGAT7(s[1022]);
initORGAT8(s[1023]);
initORGAT9(s[1024]);
initORGAT10(s[1025]);
initORGAT11(s[1026]);
initORGAT12(s[1027]);
initORGAT13(s[1028]);
initORGAT14(s[1029]);
initORGAT15(s[1030]);
initORGAT16(s[1031]);
initORGAT96(s[1032]);
initSF1(s[1033]);
initHEALTH(s[1034]);
initHOSPC1(s[1035]);
initHOSPDC1(s[1036]);
initHOSPC2(s[1037]);
initHOSPDC2(s[1038]);
initHOSPC3(s[1039]);
initHOSPDC3(s[1040]);
initHOSPC4(s[1041]);
initHOSPDC4(s[1042]);
initHOSPC5(s[1043]);
initHOSPDC5(s[1044]);
initHOSPC6(s[1045]);
initHOSPDC6(s[1046]);
initHOSPC7(s[1047]);
initHOSPDC7(s[1048]);
initHOSPC8(s[1049]);
initHOSPDC8(s[1050]);
initDISDIF1(s[1051]);
initDISDIF2(s[1052]);
initDISDIF3(s[1053]);
initDISDIF4(s[1054]);
initDISDIF5(s[1055]);
initDISDIF6(s[1056]);
initDISDIF7(s[1057]);
initDISDIF8(s[1058]);
initDISDIF9(s[1059]);
initDISDIF10(s[1060]);
initDISDIF11(s[1061]);
initDISDIF12(s[1062]);
initDISDIF96(s[1063]);
initHCOND1(s[1064]);
initHCOND2(s[1065]);
initHCOND3(s[1066]);
initHCOND4(s[1067]);
initHCOND5(s[1068]);
initHCOND6(s[1069]);
initHCOND7(s[1070]);
initHCOND8(s[1071]);
initHCOND9(s[1072]);
initHCOND10(s[1073]);
initHCOND11(s[1074]);
initHCOND12(s[1075]);
initHCOND13(s[1076]);
initHCOND14(s[1077]);
initHCOND15(s[1078]);
initHCOND16(s[1079]);
initHCOND17(s[1080]);
initHCOND96(s[1081]);
initHCONDS01(s[1082]);
initHCONDS02(s[1083]);
initHCONDS03(s[1084]);
initHCONDS04(s[1085]);
initHCONDS05(s[1086]);
initHCONDS08(s[1087]);
initHCONDS09(s[1088]);
initHCONDS10(s[1089]);
initHCONDS11(s[1090]);
initHCONDS12(s[1091]);
initHCONDS13(s[1092]);
initHCONDS14(s[1093]);
initHCONDS15(s[1094]);
initHCONDS16(s[1095]);
initHCONDS17(s[1096]);
initHCONDA01(s[1097]);
initHCONDA02(s[1098]);
initHCONDA03(s[1099]);
initHCONDA04(s[1100]);
initHCONDA05(s[1101]);
initHCONDA06(s[1102]);
initHCONDA07(s[1103]);
initHCONDA08(s[1104]);
initHCONDA09(s[1105]);
initHCONDA10(s[1106]);
initHCONDA11(s[1107]);
initHCONDA12(s[1108]);
initHCONDA13(s[1109]);
initHCONDA14(s[1110]);
initHCONDA15(s[1111]);
initHCONDA16(s[1112]);
initHCONDA17(s[1113]);
initAIDHH(s[1114]);
initAIDHUA1(s[1115]);
initAIDHUA2(s[1116]);
initAIDHUA3(s[1117]);
initAIDHUA4(s[1118]);
initAIDHUA5(s[1119]);
initAIDHUA6(s[1120]);
initAIDHUA7(s[1121]);
initAIDHUA8(s[1122]);
initAIDHUA9(s[1123]);
initAIDHUA10(s[1124]);
initAIDHUA11(s[1125]);
initAIDHUA12(s[1126]);
initAIDHUA13(s[1127]);
initAIDHUA14(s[1128]);
initAIDHUA15(s[1129]);
initAIDHUA16(s[1130]);
initAIDXHH(s[1131]);
initNAIDXHH(s[1132]);
initAIDHU1(s[1133]);
initAIDHU2(s[1134]);
initAIDHRS(s[1135]);
initAIDEFT(s[1136]);
initLCOHNPI(s[1137]);
initCOH1BM(s[1138]);
initCOH1BY(s[1139]);
initCOH1MR(s[1140]);
initCOH1EM(s[1141]);
initCOH1EY(s[1142]);
initNMAR(s[1143]);
initLMAR1M(s[1144]);
initLMAR1Y(s[1145]);
initLADOPT(s[1146]);
initLNADOPT(s[1147]);
initLPRNT(s[1148]);
initLNPRNT(s[1149]);
initCH1BY4(s[1150]);
initADCTS(s[1151]);
initMOVY11(s[1152]);
initMOVY12(s[1153]);
initMOVY13(s[1154]);
initMOVY14(s[1155]);
initMOVY15(s[1156]);
initMOVY16(s[1157]);
initFAMILY(s[1158]);
initEDUCATION(s[1159]);
initMEMPLOY(s[1160]);
initHOUSING(s[1161]);
initAREA(s[1162]);
initMOVEOTH_CODE(s[1163]);
initMOVDIR(s[1164]);
initPLNOWM(s[1165]);
initPLNOWY4(s[1166]);
initRELUP(s[1167]);
initMSTATSAM(s[1168]);
initLWWRONG(s[1169]);
initMSTATSAMN(s[1170]);
initMSTATCH1(s[1171]);
initSTATCM1(s[1172]);
initSTATCY41(s[1173]);
initDIVCHK1(s[1174]);
initDIVFIN1(s[1175]);
initDVM1(s[1176]);
initDVY41(s[1177]);
initCMLSTAT1(s[1178]);
initMSTATCH2(s[1179]);
initSTATCM2(s[1180]);
initSTATCY42(s[1181]);
initDIVCHK2(s[1182]);
initDIVFIN2(s[1183]);
initDVM2(s[1184]);
initDVY42(s[1185]);
initCMLSTAT2(s[1186]);
initCOHAB(s[1187]);
initCOHABN(s[1188]);
initLMCBM1(s[1189]);
initLMCBY41(s[1190]);
initCURRPART1(s[1191]);
initLMSPM1(s[1192]);
initLMSPY41(s[1193]);
initLMCBM2(s[1194]);
initLMCBY42(s[1195]);
initCURRPART2(s[1196]);
initLMSPM2(s[1197]);
initLMSPY42(s[1198]);
initLMCBM3(s[1199]);
initLMCBY43(s[1200]);
initCURRPART3(s[1201]);
initLMSPM3(s[1202]);
initLMSPY43(s[1203]);
initFATHER(s[1204]);
initNCHILD(s[1205]);
initPREG(s[1206]);
initPREGM1(s[1207]);
initPREGY41(s[1208]);
initPREGFERT1(s[1209]);
initINVITRO1(s[1210]);
initPREGOUT1(s[1211]);
initPREGEND1(s[1212]);
initENDMNTH1(s[1213]);
initPREGSMOKE1(s[1214]);
initSMKMNTH11(s[1215]);
initSMKMNTH21(s[1216]);
initSMKMNTH31(s[1217]);
initPREGSMK11(s[1218]);
initPREGSMK21(s[1219]);
initPREGSMK31(s[1220]);
initAEDROF1(s[1221]);
initAEPUWK1(s[1222]);
initAEPUDA1(s[1223]);
initLCHMULTI1(s[1224]);
initPREGM2(s[1225]);
initPREGY42(s[1226]);
initPREGFERT2(s[1227]);
initINVITRO2(s[1228]);
initPREGOUT2(s[1229]);
initPREGEND2(s[1230]);
initENDMNTH2(s[1231]);
initPREGSMOKE2(s[1232]);
initSMKMNTH12(s[1233]);
initSMKMNTH22(s[1234]);
initSMKMNTH32(s[1235]);
initPREGSMK12(s[1236]);
initPREGSMK22(s[1237]);
initPREGSMK32(s[1238]);
initAEDROF2(s[1239]);
initAEPUWK2(s[1240]);
initAEPUDA2(s[1241]);
initLCHMULTI2(s[1242]);
initPREGM3(s[1243]);
initPREGY43(s[1244]);
initPREGFERT3(s[1245]);
initINVITRO3(s[1246]);
initPREGOUT3(s[1247]);
initPREGEND3(s[1248]);
initENDMNTH3(s[1249]);
initPREGSMOKE3(s[1250]);
initSMKMNTH13(s[1251]);
initSMKMNTH23(s[1252]);
initSMKMNTH33(s[1253]);
initPREGSMK13(s[1254]);
initPREGSMK23(s[1255]);
initPREGSMK33(s[1256]);
initAEDROF3(s[1257]);
initAEPUWK3(s[1258]);
initAEPUDA3(s[1259]);
initLCHMULTI3(s[1260]);
initNNEWBORN(s[1261]);
initHCONDNO1(s[1262]);
initHCONDNS1(s[1263]);
initHCONDNO2(s[1264]);
initHCONDNS2(s[1265]);
initHCONDNO3(s[1266]);
initHCONDNS3(s[1267]);
initHCONDNO4(s[1268]);
initHCONDNS4(s[1269]);
initHCONDNO5(s[1270]);
initHCONDNS5(s[1271]);
initHCONDNO6(s[1272]);
initHCONDNS6(s[1273]);
initHCONDNO7(s[1274]);
initHCONDNS7(s[1275]);
initHCONDNO8(s[1276]);
initHCONDNS8(s[1277]);
initHCONDN1(s[1278]);
initHCONDN2(s[1279]);
initHCONDN3(s[1280]);
initHCONDN4(s[1281]);
initHCONDN5(s[1282]);
initHCONDN6(s[1283]);
initHCONDN7(s[1284]);
initHCONDN8(s[1285]);
initHCONDN9(s[1286]);
initHCONDN10(s[1287]);
initHCONDN11(s[1288]);
initHCONDN12(s[1289]);
initHCONDN13(s[1290]);
initHCONDN14(s[1291]);
initHCONDN15(s[1292]);
initHCONDN16(s[1293]);
initHCONDN17(s[1294]);
initHCONDN96(s[1295]);
initHCONDE6(s[1296]);
initHCONDE7(s[1297]);
initHCONDE96(s[1298]);
initHCONDEA6(s[1299]);
initHCONDEA7(s[1300]);
initCONTFT(s[1301]);
initFTENDM(s[1302]);
initFTENDY4(s[1303]);
initFTEDANY(s[1304]);
initFTQUALS(s[1305]);
initFTEDSTARTM1(s[1306]);
initFTEDSTARTY41(s[1307]);
initFTEDEND1(s[1308]);
initFT2ENDM1(s[1309]);
initFT2ENDY41(s[1310]);
initFTEDMOR1(s[1311]);
initFTEDSTARTM2(s[1312]);
initFTEDSTARTY42(s[1313]);
initFTEDEND2(s[1314]);
initFT2ENDM2(s[1315]);
initFT2ENDY42(s[1316]);
initFTEDMOR2(s[1317]);
initFTEDSTARTM3(s[1318]);
initFTEDSTARTY43(s[1319]);
initFTEDEND3(s[1320]);
initFT2ENDM3(s[1321]);
initFT2ENDY43(s[1322]);
initFTEDMOR3(s[1323]);
initFTEDSTARTM4(s[1324]);
initFTEDSTARTY44(s[1325]);
initFTEDEND4(s[1326]);
initFT2ENDM4(s[1327]);
initFT2ENDY44(s[1328]);
initFTEDMOR4(s[1329]);
initQUALNEW1(s[1330]);
initQUALNEW2(s[1331]);
initQUALNEW3(s[1332]);
initQUALNEW4(s[1333]);
initQUALNEW5(s[1334]);
initQUALNEW6(s[1335]);
initQUALNEW7(s[1336]);
initQUALNEW8(s[1337]);
initQUALNEW9(s[1338]);
initQUALNEW10(s[1339]);
initQUALNEW11(s[1340]);
initQUALNEW13(s[1341]);
initQUALNEW15(s[1342]);
initQUALNEW16(s[1343]);
initQUALNEW17(s[1344]);
initQUALNEW18(s[1345]);
initQUALNEW19(s[1346]);
initQUALNEW20(s[1347]);
initQUALNEW21(s[1348]);
initQUALNEW22(s[1349]);
initQUALNEW23(s[1350]);
initQUALNEW24(s[1351]);
initQUALNEW25(s[1352]);
initQUALNEW26(s[1353]);
initQUALNEW27(s[1354]);
initQUALNEW28(s[1355]);
initQUALNEW29(s[1356]);
initQUALNEW30(s[1357]);
initQUALNEW31(s[1358]);
initTRAINANY(s[1359]);
initTRWHO1(s[1360]);
initTRAINDAYS1(s[1361]);
initTRAINHRS1(s[1362]);
initTRAINEND1(s[1363]);
initTRAINPURP11(s[1364]);
initTRAINPURP21(s[1365]);
initTRAINPURP31(s[1366]);
initTRAINPURP41(s[1367]);
initTRAINPURP51(s[1368]);
initTRAINPURP61(s[1369]);
initTRAINPURP71(s[1370]);
initTRAINQUAL1(s[1371]);
initTRWHO2(s[1372]);
initTRAINDAYS2(s[1373]);
initTRAINHRS2(s[1374]);
initTRAINEND2(s[1375]);
initTRAINPURP12(s[1376]);
initTRAINPURP22(s[1377]);
initTRAINPURP32(s[1378]);
initTRAINPURP42(s[1379]);
initTRAINPURP52(s[1380]);
initTRAINPURP62(s[1381]);
initTRAINPURP72(s[1382]);
initTRAINQUAL2(s[1383]);
initTRWHO3(s[1384]);
initTRAINDAYS3(s[1385]);
initTRAINHRS3(s[1386]);
initTRAINEND3(s[1387]);
initTRAINPURP13(s[1388]);
initTRAINPURP23(s[1389]);
initTRAINPURP33(s[1390]);
initTRAINPURP43(s[1391]);
initTRAINPURP53(s[1392]);
initTRAINPURP63(s[1393]);
initTRAINPURP73(s[1394]);
initTRAINQUAL3(s[1395]);
initTRAINN(s[1396]);
initTRQUAL1(s[1397]);
initTRQUAL2(s[1398]);
initTRQUAL3(s[1399]);
initTRQUAL4(s[1400]);
initTRQUAL5(s[1401]);
initTRQUAL6(s[1402]);
initTRQUAL7(s[1403]);
initTRQUAL8(s[1404]);
initTRQUAL9(s[1405]);
initTRQUAL10(s[1406]);
initTRQUAL11(s[1407]);
initTRQUAL13(s[1408]);
initTRQUAL15(s[1409]);
initTRQUAL16(s[1410]);
initTRQUAL17(s[1411]);
initTRQUAL18(s[1412]);
initTRQUAL19(s[1413]);
initTRQUAL20(s[1414]);
initTRQUAL21(s[1415]);
initTRQUAL22(s[1416]);
initTRQUAL23(s[1417]);
initTRQUAL24(s[1418]);
initTRQUAL25(s[1419]);
initTRQUAL26(s[1420]);
initTRQUAL27(s[1421]);
initTRQUAL28(s[1422]);
initTRQUAL29(s[1423]);
initTRQUAL30(s[1424]);
initTRQUAL31(s[1425]);
initNOTEMPCHK(s[1426]);
initEMPCHK(s[1427]);
initEMPSTENDD(s[1428]);
initEMPSTENDM(s[1429]);
initEMPSTENDY4(s[1430]);
initSTENDREAS(s[1431]);
initNXTST(s[1432]);
initNEXT1(s[1433]);
initNEXTSTAT1(s[1434]);
initNEXTELSE1(s[1435]);
initCURRSTAT1(s[1436]);
initNEXTJOB1(s[1437]);
initCURRJOB1(s[1438]);
initJOBHOURS1(s[1439]);
initREASEND1(s[1440]);
initJBATT1(s[1441]);
initSTATENDD1(s[1442]);
initSTATENDM1(s[1443]);
initSTATENDY41(s[1444]);
initNEXT2(s[1445]);
initNEXTSTAT2(s[1446]);
initNEXTELSE2(s[1447]);
initCURRSTAT2(s[1448]);
initNEXTJOB2(s[1449]);
initCURRJOB2(s[1450]);
initJOBHOURS2(s[1451]);
initREASEND2(s[1452]);
initJBATT2(s[1453]);
initSTATENDD2(s[1454]);
initSTATENDM2(s[1455]);
initSTATENDY42(s[1456]);
initNEXT3(s[1457]);
initNEXTSTAT3(s[1458]);
initNEXTELSE3(s[1459]);
initCURRSTAT3(s[1460]);
initNEXTJOB3(s[1461]);
initCURRJOB3(s[1462]);
initJOBHOURS3(s[1463]);
initREASEND3(s[1464]);
initJBATT3(s[1465]);
initSTATENDD3(s[1466]);
initSTATENDM3(s[1467]);
initSTATENDY43(s[1468]);
initNEXT4(s[1469]);
initNEXTSTAT4(s[1470]);
initNEXTELSE4(s[1471]);
initCURRSTAT4(s[1472]);
initNEXTJOB4(s[1473]);
initCURRJOB4(s[1474]);
initJOBHOURS4(s[1475]);
initREASEND4(s[1476]);
initJBATT4(s[1477]);
initSTATENDD4(s[1478]);
initSTATENDM4(s[1479]);
initSTATENDY44(s[1480]);
initNEXT5(s[1481]);
initNEXTSTAT5(s[1482]);
initNEXTELSE5(s[1483]);
initCURRSTAT5(s[1484]);
initNEXTJOB5(s[1485]);
initCURRJOB5(s[1486]);
initJOBHOURS5(s[1487]);
initREASEND5(s[1488]);
initJBATT5(s[1489]);
initSTATENDD5(s[1490]);
initSTATENDM5(s[1491]);
initSTATENDY45(s[1492]);
initNEXT6(s[1493]);
initNEXTSTAT6(s[1494]);
initNEXTELSE6(s[1495]);
initCURRSTAT6(s[1496]);
initNEXTJOB6(s[1497]);
initCURRJOB6(s[1498]);
initJOBHOURS6(s[1499]);
initREASEND6(s[1500]);
initJBATT6(s[1501]);
initSTATENDD6(s[1502]);
initSTATENDM6(s[1503]);
initSTATENDY46(s[1504]);
initNEXT7(s[1505]);
initNEXTSTAT7(s[1506]);
initNEXTELSE7(s[1507]);
initCURRSTAT7(s[1508]);
initNEXTJOB7(s[1509]);
initCURRJOB7(s[1510]);
initJOBHOURS7(s[1511]);
initREASEND7(s[1512]);
initJBATT7(s[1513]);
initSTATENDD7(s[1514]);
initSTATENDM7(s[1515]);
initSTATENDY47(s[1516]);
initNEXT8(s[1517]);
initNEXTSTAT8(s[1518]);
initNEXTELSE8(s[1519]);
initCURRSTAT8(s[1520]);
initNEXTJOB8(s[1521]);
initCURRJOB8(s[1522]);
initJOBHOURS8(s[1523]);
initREASEND8(s[1524]);
initJBATT8(s[1525]);
initSTATENDD8(s[1526]);
initSTATENDM8(s[1527]);
initSTATENDY48(s[1528]);
initNEXT9(s[1529]);
initNEXTSTAT9(s[1530]);
initNEXTELSE9(s[1531]);
initCURRSTAT9(s[1532]);
initNEXTJOB9(s[1533]);
initCURRJOB9(s[1534]);
initJOBHOURS9(s[1535]);
initREASEND9(s[1536]);
initJBATT9(s[1537]);
initSTATENDD9(s[1538]);
initSTATENDM9(s[1539]);
initSTATENDY49(s[1540]);
initNXTSTELSE(s[1541]);
initCSTAT(s[1542]);
initNXTSTENDD(s[1543]);
initNXTSTENDM(s[1544]);
initNXTSTENDY4(s[1545]);
initJBSAMR(s[1546]);
initWKPLSAM(s[1547]);
initSAMEJOB(s[1548]);
initMATLV(s[1549]);
initMATLVSTD(s[1550]);
initMATLVSTM(s[1551]);
initMATLVSTY4(s[1552]);
initMATLVENDD(s[1553]);
initMATLVENDM(s[1554]);
initMATLVENDY4(s[1555]);
initJBENDD(s[1556]);
initJBENDM(s[1557]);
initJBENDY4(s[1558]);
initJBENDREAS(s[1559]);
initCJOB(s[1560]);
initNXTJBHRS(s[1561]);
initNXTJBES(s[1562]);
initNXTJBENDD(s[1563]);
initNXTJBENDM(s[1564]);
initNXTJBENDY4(s[1565]);
initCJBATT(s[1566]);
initJBHAS(s[1567]);
initJBOFF(s[1568]);
initJBOFFY(s[1569]);
initJBTERM1(s[1570]);
initJBTERM2(s[1571]);
initJBSIC07CHK(s[1572]);
initJBSOC00CHK(s[1573]);
initJBSEMPCHK(s[1574]);
initJBSEMP(s[1575]);
initJBBGDATY(s[1576]);
initJBBGDATM(s[1577]);
initJBBGDATD(s[1578]);
initJBBGD(s[1579]);
initJBBGM(s[1580]);
initJBBGY(s[1581]);
initJBMNGRCHK(s[1582]);
initJBMNGR(s[1583]);
initJBSIZECHK(s[1584]);
initJBSIZE(s[1585]);
initJBSECT(s[1586]);
initJBSECTPUB(s[1587]);
initJBHRS(s[1588]);
initJBOT(s[1589]);
initJBOTPD(s[1590]);
initPAYGWC(s[1591]);
initPAYNWC(s[1592]);
initPAYUSL(s[1593]);
initPAYU(s[1594]);
initPAYUWC(s[1595]);
initPAYUG(s[1596]);
initPAYTYP(s[1597]);
initOVTPAY(s[1598]);
initEXTNSA(s[1599]);
initEXTRATE(s[1600]);
initEXTREST(s[1601]);
initBASNSA(s[1602]);
initBASRATE(s[1603]);
initBASREST(s[1604]);
initOVTNSA(s[1605]);
initOVTRATE(s[1606]);
initOVTREST(s[1607]);
initJBPL(s[1608]);
initJBTTWT(s[1609]);
initWORKTRAV(s[1610]);
initJSBOSS(s[1611]);
initJSSIZE(s[1612]);
initJSHRS(s[1613]);
initJSTYPEB(s[1614]);
initJSACCS(s[1615]);
initJSPART(s[1616]);
initJSPRBM(s[1617]);
initJSPRBY4(s[1618]);
initJSPREM(s[1619]);
initJSPREY4(s[1620]);
initJSPRLS(s[1621]);
initJSPRTX(s[1622]);
initJSPRNI(s[1623]);
initJSPAYU(s[1624]);
initJSPAYW(s[1625]);
initJSPYTX(s[1626]);
initJSPYNI(s[1627]);
initJSPL(s[1628]);
initJSTTWT(s[1629]);
initJSTTWTB(s[1630]);
initJSWORKTRAV(s[1631]);
initJBSAT(s[1632]);
initJULK4WK(s[1633]);
initJULKJB(s[1634]);
initJUBGN(s[1635]);
initJULK4X1(s[1636]);
initJULK4X2(s[1637]);
initJULK4X3(s[1638]);
initJULK4X4(s[1639]);
initJULK4X5(s[1640]);
initJULK4X6(s[1641]);
initJULK4X96(s[1642]);
initJBHAD(s[1643]);
initJLENDM(s[1644]);
initJLENDY(s[1645]);
initJLSEMP(s[1646]);
initJLBOSS(s[1647]);
initJLMNGR(s[1648]);
initJLSIZE(s[1649]);
initEPROSH(s[1650]);
initMLFUTR(s[1651]);
initMLRNOT1(s[1652]);
initMLRNOT2(s[1653]);
initMLRNOT3(s[1654]);
initMLRNOT4(s[1655]);
initMLRNOT5(s[1656]);
initMLRNOT6(s[1657]);
initMLRNOT7(s[1658]);
initMLRNOT8(s[1659]);
initMLRNOT9(s[1660]);
initMLRNOT10(s[1661]);
initMLRNOT11(s[1662]);
initMLRNOT12(s[1663]);
initMLRNOT13(s[1664]);
initMLRNOT97(s[1665]);
initMLAGST(s[1666]);
initMLAGSTU(s[1667]);
initMLWKFPT(s[1668]);
initMATLEAVE(s[1669]);
initJ2HAS(s[1670]);
initJ2SEMP(s[1671]);
initJ2HRS(s[1672]);
initJ2PAY(s[1673]);
initJOBLOOK(s[1674]);
initJOBDENY(s[1675]);
initRESJOBDENY1(s[1676]);
initRESJOBDENY2(s[1677]);
initRESJOBDENY3(s[1678]);
initRESJOBDENY4(s[1679]);
initRESJOBDENY5(s[1680]);
initRESJOBDENY6(s[1681]);
initRESJOBDENY7(s[1682]);
initRESJOBDENY8(s[1683]);
initRESJOBDENY9(s[1684]);
initRESJOBDENY96(s[1685]);
initRESJOBDENY97(s[1686]);
initEED12(s[1687]);
initPROMODENY(s[1688]);
initRESPROMDENY1(s[1689]);
initRESPROMDENY2(s[1690]);
initRESPROMDENY3(s[1691]);
initRESPROMDENY4(s[1692]);
initRESPROMDENY5(s[1693]);
initRESPROMDENY6(s[1694]);
initRESPROMDENY7(s[1695]);
initRESPROMDENY8(s[1696]);
initRESPROMDENY9(s[1697]);
initRESPROMDENY96(s[1698]);
initRESPROMDENY97(s[1699]);
initTRAINDENY(s[1700]);
initRESTRAINDENY1(s[1701]);
initRESTRAINDENY2(s[1702]);
initRESTRAINDENY3(s[1703]);
initRESTRAINDENY4(s[1704]);
initRESTRAINDENY5(s[1705]);
initRESTRAINDENY6(s[1706]);
initRESTRAINDENY7(s[1707]);
initRESTRAINDENY8(s[1708]);
initRESTRAINDENY9(s[1709]);
initRESTRAINDENY96(s[1710]);
initRESTRAINDENY97(s[1711]);
initDISEFFECTS1(s[1712]);
initDISEFFECTS2(s[1713]);
initDISEFFECTS3(s[1714]);
initDISEFFECTS4(s[1715]);
initDISEFFECTS5(s[1716]);
initCCARE(s[1717]);
initCCWORK(s[1718]);
initLVREL1(s[1719]);
initLVREL9(s[1720]);
initLVREL2(s[1721]);
initLVREL10(s[1722]);
initLVREL3(s[1723]);
initLVREL4(s[1724]);
initLVREL5(s[1725]);
initLVREL6(s[1726]);
initLVREL7(s[1727]);
initLVREL8(s[1728]);
initLVREL96(s[1729]);
initMAMOSTCON(s[1730]);
initPAMOSTCON(s[1731]);
initMAAGE(s[1732]);
initPAAGE(s[1733]);
initNRELS1(s[1734]);
initNRELS2(s[1735]);
initNRELS3(s[1736]);
initNRELS4(s[1737]);
initNRELS5(s[1738]);
initNRELS6(s[1739]);
initPARMAR(s[1740]);
initMALONE(s[1741]);
initPALONE(s[1742]);
initOHCH16(s[1743]);
initSEEKID(s[1744]);
initWEKID(s[1745]);
initFARKID(s[1746]);
initRELKID(s[1747]);
initMASEE(s[1748]);
initMACON(s[1749]);
initMAFAR(s[1750]);
initPASEE(s[1751]);
initPACON(s[1752]);
initPAFAR(s[1753]);
initPAAID1(s[1754]);
initPAAID2(s[1755]);
initPAAID3(s[1756]);
initPAAID4(s[1757]);
initPAAID5(s[1758]);
initPAAID6(s[1759]);
initPAAID7(s[1760]);
initPAAID8(s[1761]);
initPAAID96(s[1762]);
initPAAID97(s[1763]);
initPAIDU1(s[1764]);
initPAIDU2(s[1765]);
initPAIDU3(s[1766]);
initPAIDU4(s[1767]);
initPAIDU5(s[1768]);
initPAIDU6(s[1769]);
initPAIDU7(s[1770]);
initPAIDU8(s[1771]);
initPAIDU96(s[1772]);
initPAIDU97(s[1773]);
initCHSEE(s[1774]);
initCHCON(s[1775]);
initCHFAR(s[1776]);
initCHAID1(s[1777]);
initCHAID2(s[1778]);
initCHAID3(s[1779]);
initCHAID4(s[1780]);
initCHAID5(s[1781]);
initCHAID6(s[1782]);
initCHAID7(s[1783]);
initCHAID8(s[1784]);
initCHAID96(s[1785]);
initCHAID97(s[1786]);
initCAIDU1(s[1787]);
initCAIDU2(s[1788]);
initCAIDU3(s[1789]);
initCAIDU4(s[1790]);
initCAIDU5(s[1791]);
initCAIDU6(s[1792]);
initCAIDU7(s[1793]);
initCAIDU8(s[1794]);
initCAIDU96(s[1795]);
initCAIDU97(s[1796]);
initKIDSPT(s[1797]);
initFTEXV(s[1798]);
initFTEXW(s[1799]);
initVISFAM(s[1800]);
initVISFAMY1(s[1801]);
initVISFAMY2(s[1802]);
initVISFAMY3(s[1803]);
initVISFAMY4(s[1804]);
initVISFAMY5(s[1805]);
initVISFAMY6(s[1806]);
initVISFAMY7(s[1807]);
initVISFAMY8(s[1808]);
initVISFAMY9(s[1809]);
initVISFAMY10(s[1810]);
initVISFAMY11(s[1811]);
initVISFAMY12(s[1812]);
initVISFAMY13(s[1813]);
initVISFAMY14(s[1814]);
initVISFAMY15(s[1815]);
initVISFAMY97(s[1816]);
initPARCHILD(s[1817]);
initHLPHMWK(s[1818]);
initLEVELIMP(s[1819]);
initAPVOCIMP(s[1820]);
initKID2UNI01(s[1821]);
initKID2UNI02(s[1822]);
initKID2UNI03(s[1823]);
initKID2UNI04(s[1824]);
initKID2UNI05(s[1825]);
initKID2UNI06(s[1826]);
initKID2UNI07(s[1827]);
initKID2UNI08(s[1828]);
initKID2UNI09(s[1829]);
initKID2UNI10(s[1830]);
initKID2UNI11(s[1831]);
initKID2UNI12(s[1832]);
initKID2UNI13(s[1833]);
initKID2UNI14(s[1834]);
initKID2UNI15(s[1835]);
initKID2UNI16(s[1836]);
initSOCIALKID(s[1837]);
initDINNER(s[1838]);
initQUARREL(s[1839]);
initTALKMATTER(s[1840]);
initRULESKID(s[1841]);
initPYENRL(s[1842]);
initPRAISEKID(s[1843]);
initSLAPKID(s[1844]);
initCUDDLEKID(s[1845]);
initYELLKID(s[1846]);
initBTYPE1(s[1847]);
initBTYPE2(s[1848]);
initBTYPE3(s[1849]);
initBTYPE4(s[1850]);
initBTYPE5(s[1851]);
initBTYPE6(s[1852]);
initBTYPE7(s[1853]);
initBTYPE8(s[1854]);
initBTYPE9(s[1855]);
initBTYPE10(s[1856]);
initBTYPE11(s[1857]);
initBTYPE12(s[1858]);
initBTYPE13(s[1859]);
initBTYPE14(s[1860]);
initBTYPE96(s[1861]);
initBENUNEMP1(s[1862]);
initBENUNEMP2(s[1863]);
initBENUNEMP3(s[1864]);
initBENUNEMP4(s[1865]);
initBENUNEMP5(s[1866]);
initBENUNEMP6(s[1867]);
initBENUNEMP7(s[1868]);
initBENUNEMP96(s[1869]);
initBENDIS1(s[1870]);
initBENDIS2(s[1871]);
initBENDIS3(s[1872]);
initBENDIS4(s[1873]);
initBENDIS5(s[1874]);
initBENDIS6(s[1875]);
initBENDIS7(s[1876]);
initBENDIS8(s[1877]);
initBENDIS9(s[1878]);
initBENDIS10(s[1879]);
initBENDIS12(s[1880]);
initBENDIS13(s[1881]);
initBENDIS14(s[1882]);
initBENDIS15(s[1883]);
initBENDIS16(s[1884]);
initBENDIS96(s[1885]);
initBENDIS97(s[1886]);
initBENPEN1(s[1887]);
initBENPEN2(s[1888]);
initBENPEN3(s[1889]);
initBENPEN4(s[1890]);
initBENPEN5(s[1891]);
initBENPEN6(s[1892]);
initBENPEN7(s[1893]);
initBENPEN8(s[1894]);
initBENPEN9(s[1895]);
initBENPEN10(s[1896]);
initBENPEN11(s[1897]);
initBENPEN12(s[1898]);
initBENPEN13(s[1899]);
initBENPEN96(s[1900]);
initNISERPS(s[1901]);
initBENCB(s[1902]);
initBENCTC(s[1903]);
initBENFAM1(s[1904]);
initBENFAM2(s[1905]);
initBENFAM3(s[1906]);
initBENFAM4(s[1907]);
initBENFAM5(s[1908]);
initBENFAM6(s[1909]);
initBENFAM7(s[1910]);
initBENFAM8(s[1911]);
initBENFAM9(s[1912]);
initBENFAM10(s[1913]);
initBENFAM96(s[1914]);
initBENTAX1(s[1915]);
initBENTAX2(s[1916]);
initBENTAX3(s[1917]);
initBENTAX4(s[1918]);
initBENTAX5(s[1919]);
initBENTAX6(s[1920]);
initBENTAX7(s[1921]);
initBENTAX8(s[1922]);
initBENTAX9(s[1923]);
initBENTAX10(s[1924]);
initBENTAX96(s[1925]);
initBENHOU1(s[1926]);
initBENHOU2(s[1927]);
initBENHOU3(s[1928]);
initBENHOU4(s[1929]);
initBENHOU5(s[1930]);
initBENHOU6(s[1931]);
initBENHOU7(s[1932]);
initBENHOU8(s[1933]);
initBENHOU9(s[1934]);
initBENHOU96(s[1935]);
initBENSTA1(s[1936]);
initBENSTA2(s[1937]);
initBENSTA3(s[1938]);
initBENSTA4(s[1939]);
initBENSTA5(s[1940]);
initBENSTA6(s[1941]);
initBENSTA7(s[1942]);
initBENSTA9(s[1943]);
initBENSTA10(s[1944]);
initBENSTA11(s[1945]);
initBENSTA12(s[1946]);
initBENSTA13(s[1947]);
initBENSTA96(s[1948]);
initBENSTA97(s[1949]);
initNFH01(s[1950]);
initNFH02(s[1951]);
initNFH03(s[1952]);
initNFH04(s[1953]);
initNFH05(s[1954]);
initNFH06(s[1955]);
initNFH07(s[1956]);
initNFH08(s[1957]);
initNFH09(s[1958]);
initNFH10(s[1959]);
initNFH11(s[1960]);
initNFH12(s[1961]);
initNFH13(s[1962]);
initNFH14(s[1963]);
initNFH15(s[1964]);
initNFH16(s[1965]);
initNFH17(s[1966]);
initNFH18(s[1967]);
initNFH19(s[1968]);
initNFH20(s[1969]);
initNFH21(s[1970]);
initNFH22(s[1971]);
initNFH23(s[1972]);
initNFH24(s[1973]);
initNFH25(s[1974]);
initNFH26(s[1975]);
initNFH27(s[1976]);
initNFH28(s[1977]);
initNFH29(s[1978]);
initNFH30(s[1979]);
initNFH31(s[1980]);
initNFH32(s[1981]);
initNFH33(s[1982]);
initNFH34(s[1983]);
initNFH35(s[1984]);
initNFH36(s[1985]);
initNFH37(s[1986]);
initNFH38(s[1987]);
initNFH39(s[1988]);
initFIYRDIA(s[1989]);
initFIYRDB1(s[1990]);
initFIYRDB2(s[1991]);
initFIYRDB3(s[1992]);
initFIYRDB4(s[1993]);
initFIYRDB5(s[1994]);
initFIYRDB6(s[1995]);
initFINNOW(s[1996]);
initFINFUT(s[1997]);
initCMROUTE(s[1998]);
initCSACALC(s[1999]);
initCSAPAYTO(s[2000]);
initCSACALCAM(s[2001]);
initCMCSAPER(s[2002]);
initCMCSAALL(s[2003]);
initCMCSAACT(s[2004]);
initCMCSAAM(s[2005]);
initCMCSAPR(s[2006]);
initCSARECPER(s[2007]);
initDCSATM(s[2008]);
initCMCSANIL1(s[2009]);
initCMCSANIL2(s[2010]);
initCMCSANIL3(s[2011]);
initCMCSANIL4(s[2012]);
initCMCSANIL5(s[2013]);
initCMCSANIL97(s[2014]);
initCMCORD(s[2015]);
initCMSAMEA(s[2016]);
initCMCORDAM(s[2017]);
initCMCORDPER(s[2018]);
initCMCORDALL(s[2019]);
initCMCORDREC(s[2020]);
initCMCORDRCAM(s[2021]);
initCMCORDRCPR(s[2022]);
initCORDRECPER(s[2023]);
initCMCORDTM(s[2024]);
initCMVOL(s[2025]);
initCMSAMEB(s[2026]);
initCMSAMEC(s[2027]);
initCMVOLAM(s[2028]);
initCMVOLPER(s[2029]);
initCMVOLALL(s[2030]);
initCMVOLREC(s[2031]);
initCMVOLRCAM(s[2032]);
initCMVOLRCPR(s[2033]);
initVOLRECPER(s[2034]);
initCMVOLTM(s[2035]);
initCMNIL1(s[2036]);
initCMNIL2(s[2037]);
initCMNIL3(s[2038]);
initCMNIL4(s[2039]);
initCMNIL5(s[2040]);
initCMNIL6(s[2041]);
initCMNIL7(s[2042]);
initCMNIL8(s[2043]);
initCMNIL9(s[2044]);
initCMNIL97(s[2045]);
initCMOTHPAY1(s[2046]);
initCMOTHPAY2(s[2047]);
initCMOTHPAY3(s[2048]);
initCMOTHPAY4(s[2049]);
initCMOTHPAY5(s[2050]);
initCMOTHPAY6(s[2051]);
initCMOTHPAY7(s[2052]);
initCMOTHPAY8(s[2053]);
initCMOTHPAY9(s[2054]);
initCMOTHPAY10(s[2055]);
initCMOTHPAY11(s[2056]);
initCMOTHPAY96(s[2057]);
initCMOTHPAY97(s[2058]);
initCMKNDEVR1(s[2059]);
initCMKNDEVR2(s[2060]);
initCMKNDEVR3(s[2061]);
initCMKNDEVR4(s[2062]);
initCMKNDEVR96(s[2063]);
initCMKNDEVR97(s[2064]);
initEXPREAM(s[2065]);
initEXSAME(s[2066]);
initRETCHK(s[2067]);
initAGERET(s[2068]);
initRTPRO1(s[2069]);
initRTPRO2(s[2070]);
initRTPRO3(s[2071]);
initRTPRO4(s[2072]);
initRTPRO5(s[2073]);
initRTPRO6(s[2074]);
initRTCON1(s[2075]);
initRTCON2(s[2076]);
initRTCON3(s[2077]);
initRTCON4(s[2078]);
initPENMEX(s[2079]);
initPPPEX(s[2080]);
initPPPEXM(s[2081]);
initSPPEN(s[2082]);
initRTEXPJB(s[2083]);
initRTFND1(s[2084]);
initRTFND2(s[2085]);
initRTFND3(s[2086]);
initRTFND4(s[2087]);
initRTFND5(s[2088]);
initRTFND6(s[2089]);
initRTFND7(s[2090]);
initRTFND8(s[2091]);
initRTFND9(s[2092]);
initRTFND10(s[2093]);
initRTFND96(s[2094]);
initRETAMT(s[2095]);
initRETSUF(s[2096]);
initMIGPLNS(s[2097]);
initMIGCNTRY(s[2098]);
initVOTE1(s[2099]);
initVOTE2(s[2100]);
initVOTE3(s[2101]);
initVOTE4(s[2102]);
initVOTE5(s[2103]);
initVOTE6(s[2104]);
initPERPOLINF(s[2105]);
initCOLBENS1(s[2106]);
initCOLBENS2(s[2107]);
initCOLBENS3(s[2108]);
initCOLBENS4(s[2109]);
initNICLBNS1(s[2110]);
initNICLBNS2(s[2111]);
initNICLBNS3(s[2112]);
initNICLBNS4(s[2113]);
initCIVICDUTY(s[2114]);
initPOLCOST(s[2115]);
initVOTENORM(s[2116]);
initPERBFTS(s[2117]);
initGRPBFTS(s[2118]);
initVOTEINTENT(s[2119]);
initDEMORIENT(s[2120]);
initPOLEFF1(s[2121]);
initPOLEFF2(s[2122]);
initPOLEFF3(s[2123]);
initPOLEFF4(s[2124]);
initNEWSOURCE1(s[2125]);
initNEWSOURCE2(s[2126]);
initNEWSOURCE3(s[2127]);
initNEWSOURCE4(s[2128]);
initNEWSOURCE5(s[2129]);
initNEWSOURCE6(s[2130]);
initNEWSOURCE7(s[2131]);
initNEWSOURCE8(s[2132]);
initNEWSOURCE9(s[2133]);
initNEWSOURCE10(s[2134]);
initNEWSOURCE11(s[2135]);
initNEWSOURCE12(s[2136]);
initNEWSOURCE96(s[2137]);
initNEWSMAIN(s[2138]);
initPAPERM2(s[2139]);
initTVM2(s[2140]);
initNETM2(s[2141]);
initTVHOURS(s[2142]);
initSCAC(s[2143]);
initSCRF1(s[2144]);
initSCRF2(s[2145]);
initSCRF3(s[2146]);
initSCRF4(s[2147]);
initSCRF5(s[2148]);
initSCRF6(s[2149]);
initSCRF97(s[2150]);
initSCUN1(s[2151]);
initSCUN2(s[2152]);
initSCUN3(s[2153]);
initSCUN97(s[2154]);
initSCSF1(s[2155]);
initSCSF2A(s[2156]);
initSCSF2B(s[2157]);
initSCSF3A(s[2158]);
initSCSF3B(s[2159]);
initSCSF4A(s[2160]);
initSCSF4B(s[2161]);
initSCSF5(s[2162]);
initSCSF6A(s[2163]);
initSCSF6B(s[2164]);
initSCSF6C(s[2165]);
initSCSF7(s[2166]);
initSCGHQA(s[2167]);
initSCGHQB(s[2168]);
initSCGHQC(s[2169]);
initSCGHQD(s[2170]);
initSCGHQE(s[2171]);
initSCGHQF(s[2172]);
initSCGHQG(s[2173]);
initSCGHQH(s[2174]);
initSCGHQI(s[2175]);
initSCGHQJ(s[2176]);
initSCGHQK(s[2177]);
initSCGHQL(s[2178]);
initSCOPNGBHA(s[2179]);
initSCOPNGBHB(s[2180]);
initSCOPNGBHC(s[2181]);
initSCOPNGBHD(s[2182]);
initSCOPNGBHE(s[2183]);
initSCOPNGBHF(s[2184]);
initSCOPNGBHG(s[2185]);
initSCOPNGBHH(s[2186]);
initSCLFSAT1(s[2187]);
initSCLFSAT2(s[2188]);
initSCLFSAT7(s[2189]);
initSCLFSATO(s[2190]);
initSCPTRT5A1(s[2191]);
initSCPTRT5C1(s[2192]);
initSCPTRT5E1(s[2193]);
initSCPTRT5N1(s[2194]);
initSCPTRT5O1(s[2195]);
initSCPTRT5A2(s[2196]);
initSCPTRT5C2(s[2197]);
initSCPTRT5E2(s[2198]);
initSCPTRT5N2(s[2199]);
initSCPTRT5O2(s[2200]);
initSCPTRT5A3(s[2201]);
initSCPTRT5C3(s[2202]);
initSCPTRT5E3(s[2203]);
initSCPTRT5N3(s[2204]);
initSCPTRT5O3(s[2205]);
initSEXUOR(s[2206]);
initSCRELPAREI(s[2207]);
initSCRELPARCD(s[2208]);
initSCRELPARWT(s[2209]);
initSCRELPARDS(s[2210]);
initSCRELPARRG(s[2211]);
initSCRELPARAR(s[2212]);
initSCRELPARIR(s[2213]);
initSCRELPARKS(s[2214]);
initSCPAROUTINTW3(s[2215]);
initSCRELHAPPY(s[2216]);
initWHORUPRO(s[2217]);
initWHORUEDU(s[2218]);
initWHORURAC(s[2219]);
initWHORUPOL(s[2220]);
initWHORUFAM(s[2221]);
initWHORUSEX(s[2222]);
initWHORUAGE(s[2223]);
initEATLIVU(s[2224]);
initFAMSUP(s[2225]);
initUPSET(s[2226]);
initLATE(s[2227]);
initSIBHIT(s[2228]);
initSIBSTEAL(s[2229]);
initSIBVERAB(s[2230]);
initSIBTEASE(s[2231]);
initHITSIB(s[2232]);
initSTEALSIB(s[2233]);
initVERABSIB(s[2234]);
initTEASESIB(s[2235]);
initARGM(s[2236]);
initARGF(s[2237]);
initTLKM(s[2238]);
initTLKF(s[2239]);
initPARSCH(s[2240]);
initPAREVE(s[2241]);
initHASSTEP(s[2242]);
initSTEPREL(s[2243]);
initYAJBSRV1(s[2244]);
initYAJBSRV2(s[2245]);
initYAJBSRV3(s[2246]);
initYAJBSRV4(s[2247]);
initYAJBSRV5(s[2248]);
initYAJBSRV6(s[2249]);
initYAJBSRV7(s[2250]);
initYAJBSRV96(s[2251]);
initFRPBULLI(s[2252]);
initFROBULLI(s[2253]);
initFRPBULLY(s[2254]);
initFROBULLY(s[2255]);
initEVRSMO(s[2256]);
initSMOFRQ(s[2257]);
initEVRALC(s[2258]);
initDKLM(s[2259]);
initFIVEALCDR(s[2260]);
initDRNK4W(s[2261]);
initDRGSOL(s[2262]);
initDRGMJ(s[2263]);
initDRGOTH(s[2264]);
initFRDRG(s[2265]);
initNCRR1(s[2266]);
initNCRRM(s[2267]);
initNCRRY4(s[2268]);
initNCRR3(s[2269]);
initNCRR4(s[2270]);
initNCRR5(s[2271]);
initNCRR6(s[2272]);
initNCRR8(s[2273]);
initNCRR9(s[2274]);
initNCRR11(s[2275]);
initNCRR12(s[2276]);
initCASIEND(s[2277]);
initLENINDINTV(s[2278]);
initFEDNTO_CODE(s[2279]);
initNETM2O_CODE(s[2280]);
initSCRX_CODE(s[2281]);
initSCUX_CODE(s[2282]);
initRHLAND_CODE(s[2283]);
initRPHMOB_CODE(s[2284]);
initRPHWRK_CODE(s[2285]);
initREMAIL_CODE(s[2286]);
initCTADD1_CODE(s[2287]);
initCTADD2_CODE(s[2288]);
initCTTOWN_CODE(s[2289]);
initCTCNTY_CODE(s[2290]);
initCTPCODE_CODE(s[2291]);
initCTTEL1_CODE(s[2292]);
initCTTEL2_CODE(s[2293]);
initCTEMAIL_CODE(s[2294]);
initMARSTAT(s[2295]);
initLIVESP(s[2296]);
initLIVEWITH(s[2297]);
initEMPLOY(s[2298]);
initLINGUA(s[2299]);
initPS1(s[2300]);
initPS2(s[2301]);
initPS3(s[2302]);
initPS4(s[2303]);
initPS5(s[2304]);
initPS6(s[2305]);
initPS7(s[2306]);
initPS8(s[2307]);
initPS9(s[2308]);
initPS10(s[2309]);
initPS11(s[2310]);
initPS12(s[2311]);
initPS13(s[2312]);
initPS14(s[2313]);
initPS15(s[2314]);
initPS16(s[2315]);
initPS17(s[2316]);
initPS18(s[2317]);
initPS19(s[2318]);
initPS20(s[2319]);
initPS21(s[2320]);
initPS22(s[2321]);
initPS23(s[2322]);
initPS24(s[2323]);
initPS25(s[2324]);
initPS26(s[2325]);
initPS27(s[2326]);
initPS28(s[2327]);
initPS29(s[2328]);
initPS30(s[2329]);
initPS31(s[2330]);
initPS32(s[2331]);
initPSNUMCH(s[2332]);
initPRECOG(s[2333]);
initMEMPER(s[2334]);
initWRDRECPRE(s[2335]);
initWRCOMPPRE(s[2336]);
initCOMIMMLS11(s[2337]);
initCOMIMMLS12(s[2338]);
initCOMIMMLS13(s[2339]);
initCOMIMMLS14(s[2340]);
initCOMIMMLS15(s[2341]);
initCOMIMMLS16(s[2342]);
initCOMIMMLS17(s[2343]);
initCOMIMMLS18(s[2344]);
initCOMIMMLS19(s[2345]);
initCOMIMMLS110(s[2346]);
initCOMIMMLS196(s[2347]);
initCOMIMMLS21(s[2348]);
initCOMIMMLS22(s[2349]);
initCOMIMMLS23(s[2350]);
initCOMIMMLS24(s[2351]);
initCOMIMMLS25(s[2352]);
initCOMIMMLS26(s[2353]);
initCOMIMMLS27(s[2354]);
initCOMIMMLS28(s[2355]);
initCOMIMMLS29(s[2356]);
initCOMIMMLS210(s[2357]);
initCOMIMMLS296(s[2358]);
initCOMIMMLS31(s[2359]);
initCOMIMMLS32(s[2360]);
initCOMIMMLS33(s[2361]);
initCOMIMMLS34(s[2362]);
initCOMIMMLS35(s[2363]);
initCOMIMMLS36(s[2364]);
initCOMIMMLS37(s[2365]);
initCOMIMMLS38(s[2366]);
initCOMIMMLS39(s[2367]);
initCOMIMMLS310(s[2368]);
initCOMIMMLS396(s[2369]);
initCOMIMMLS41(s[2370]);
initCOMIMMLS42(s[2371]);
initCOMIMMLS43(s[2372]);
initCOMIMMLS44(s[2373]);
initCOMIMMLS45(s[2374]);
initCOMIMMLS46(s[2375]);
initCOMIMMLS47(s[2376]);
initCOMIMMLS48(s[2377]);
initCOMIMMLS49(s[2378]);
initCOMIMMLS410(s[2379]);
initCOMIMMLS496(s[2380]);
initWRINTPRE(s[2381]);
initINTIMMLS11(s[2382]);
initINTIMMLS12(s[2383]);
initINTIMMLS13(s[2384]);
initINTIMMLS14(s[2385]);
initINTIMMLS15(s[2386]);
initINTIMMLS16(s[2387]);
initINTIMMLS17(s[2388]);
initINTIMMLS18(s[2389]);
initINTIMMLS19(s[2390]);
initINTIMMLS110(s[2391]);
initINTIMMLS196(s[2392]);
initINTIMMLS21(s[2393]);
initINTIMMLS22(s[2394]);
initINTIMMLS23(s[2395]);
initINTIMMLS24(s[2396]);
initINTIMMLS25(s[2397]);
initINTIMMLS26(s[2398]);
initINTIMMLS27(s[2399]);
initINTIMMLS28(s[2400]);
initINTIMMLS29(s[2401]);
initINTIMMLS210(s[2402]);
initINTIMMLS296(s[2403]);
initINTIMMLS31(s[2404]);
initINTIMMLS32(s[2405]);
initINTIMMLS33(s[2406]);
initINTIMMLS34(s[2407]);
initINTIMMLS35(s[2408]);
initINTIMMLS36(s[2409]);
initINTIMMLS37(s[2410]);
initINTIMMLS38(s[2411]);
initINTIMMLS39(s[2412]);
initINTIMMLS310(s[2413]);
initINTIMMLS396(s[2414]);
initINTIMMLS41(s[2415]);
initINTIMMLS42(s[2416]);
initINTIMMLS43(s[2417]);
initINTIMMLS44(s[2418]);
initINTIMMLS45(s[2419]);
initINTIMMLS46(s[2420]);
initINTIMMLS47(s[2421]);
initINTIMMLS48(s[2422]);
initINTIMMLS49(s[2423]);
initINTIMMLS410(s[2424]);
initINTIMMLS496(s[2425]);
initSUB7_1(s[2426]);
initSUB7_2(s[2427]);
initSUB7_3(s[2428]);
initSUB7_4(s[2429]);
initSUB7_5(s[2430]);
initNS200PRE(s[2431]);
initNS240(s[2432]);
initNS241(s[2433]);
initNS242(s[2434]);
initNS201G1(s[2435]);
initNS202H1(s[2436]);
initNS203I1(s[2437]);
initNS216C(s[2438]);
initNS204A1(s[2439]);
initNS205B1(s[2440]);
initNS206C1(s[2441]);
initNS207D1(s[2442]);
initNS208E1(s[2443]);
initNS209F1(s[2444]);
initNS210J1(s[2445]);
initNS211K1(s[2446]);
initNS212L1(s[2447]);
initNS213M1(s[2448]);
initNS214N1(s[2449]);
initNS215O1(s[2450]);
initNS221G2(s[2451]);
initNS222H2(s[2452]);
initNS223I2(s[2453]);
initNS226C(s[2454]);
initNS224A2(s[2455]);
initNS225B2(s[2456]);
initNS226C2(s[2457]);
initNS227D2(s[2458]);
initNS228E2(s[2459]);
initNS229F2(s[2460]);
initNS230J2(s[2461]);
initNS231K2(s[2462]);
initNS232L2(s[2463]);
initNS233M2(s[2464]);
initNS234N2(s[2465]);
initNS235O2(s[2466]);
initDELAYLS11(s[2467]);
initDELAYLS12(s[2468]);
initDELAYLS13(s[2469]);
initDELAYLS14(s[2470]);
initDELAYLS15(s[2471]);
initDELAYLS16(s[2472]);
initDELAYLS17(s[2473]);
initDELAYLS18(s[2474]);
initDELAYLS19(s[2475]);
initDELAYLS110(s[2476]);
initDELAYLS196(s[2477]);
initDELAYLS21(s[2478]);
initDELAYLS22(s[2479]);
initDELAYLS23(s[2480]);
initDELAYLS24(s[2481]);
initDELAYLS25(s[2482]);
initDELAYLS26(s[2483]);
initDELAYLS27(s[2484]);
initDELAYLS28(s[2485]);
initDELAYLS29(s[2486]);
initDELAYLS210(s[2487]);
initDELAYLS296(s[2488]);
initDELAYLS31(s[2489]);
initDELAYLS32(s[2490]);
initDELAYLS33(s[2491]);
initDELAYLS34(s[2492]);
initDELAYLS35(s[2493]);
initDELAYLS36(s[2494]);
initDELAYLS37(s[2495]);
initDELAYLS38(s[2496]);
initDELAYLS39(s[2497]);
initDELAYLS310(s[2498]);
initDELAYLS396(s[2499]);
initDELAYLS41(s[2500]);
initDELAYLS42(s[2501]);
initDELAYLS43(s[2502]);
initDELAYLS44(s[2503]);
initDELAYLS45(s[2504]);
initDELAYLS46(s[2505]);
initDELAYLS47(s[2506]);
initDELAYLS48(s[2507]);
initDELAYLS49(s[2508]);
initDELAYLS410(s[2509]);
initDELAYLS496(s[2510]);
initVFPRE(s[2511]);
initVFTCTW(s[2512]);
initNUABPRE(s[2513]);
initNASOFA(s[2514]);
initNADISEASE(s[2515]);
initNACAR(s[2516]);
initNADRINK(s[2517]);
initNALOTTERY(s[2518]);
initNAINTEREST(s[2519]);
initCOGDIST(s[2520]);
initCOGEND(s[2521]);
initHEARCOMPUTER(s[2522]);
initREADTEST(s[2523]);
initWORDS1(s[2524]);
initWORDS2(s[2525]);
initWORDS3(s[2526]);
initWORDS4(s[2527]);
initVFCT(s[2528]);
initMEMCONT11(s[2529]);
initMEMCONT12(s[2530]);
initMEMCONT13(s[2531]);
initMEMCONT21(s[2532]);
initMEMCONT22(s[2533]);
initMEMCONT23(s[2534]);
initMEMCONT24(s[2535]);
initMEMCONT25(s[2536]);
initMEMCONT26(s[2537]);
initMEMCONT27(s[2538]);
initMEMCONT28(s[2539]);
initMEMCONT29(s[2540]);
initMEMCONT210(s[2541]);
initMEMCONT211(s[2542]);
initMEMCONT212(s[2543]);
initMEMCONT213(s[2544]);
initMEMCONT214(s[2545]);
initMEMCONT215(s[2546]);
initMEMCONT216(s[2547]);
initMEMCONT3(s[2548]);
initMEMPROB1(s[2549]);
initMEMPROB2(s[2550]);
initMEMPROB3(s[2551]);
initMEMPROB4(s[2552]);
initMEMAID(s[2553]);
initIMMSTOP1(s[2554]);
initIMMSTOP2(s[2555]);
initIMMSTOP3(s[2556]);
initIMMSTOP4(s[2557]);
initIMMSTOP5(s[2558]);
initIMMSTOP6(s[2559]);
initIMMSTOP7(s[2560]);
initIMMSTOP8(s[2561]);
initIMMSTOP97(s[2562]);
initSEVENSPAP(s[2563]);
initSUBCONT11(s[2564]);
initSUBCONT12(s[2565]);
initSUBCONT13(s[2566]);
initSUBCONT21(s[2567]);
initSUBCONT22(s[2568]);
initSUBCONT23(s[2569]);
initSUBCONT24(s[2570]);
initSUBCONT25(s[2571]);
initSUBCONT26(s[2572]);
initSUBCONT27(s[2573]);
initSUBCONT28(s[2574]);
initSUBCONT29(s[2575]);
initSUBCONT210(s[2576]);
initSUBCONT211(s[2577]);
initSUBCONT212(s[2578]);
initSUBCONT213(s[2579]);
initSUBCONT214(s[2580]);
initSUBCONT215(s[2581]);
initSUBCONT216(s[2582]);
initSUBCONT3(s[2583]);
initSUB7STOP1(s[2584]);
initSUB7STOP2(s[2585]);
initSUB7STOP3(s[2586]);
initSUB7STOP4(s[2587]);
initSUB7STOP5(s[2588]);
initSUB7STOP6(s[2589]);
initSUB7STOP7(s[2590]);
initSUB7STOP8(s[2591]);
initSUB7STOP97(s[2592]);
initNSCONT11(s[2593]);
initNSCONT12(s[2594]);
initNSCONT13(s[2595]);
initNSCONT21(s[2596]);
initNSCONT22(s[2597]);
initNSCONT23(s[2598]);
initNSCONT24(s[2599]);
initNSCONT25(s[2600]);
initNSCONT26(s[2601]);
initNSCONT27(s[2602]);
initNSCONT28(s[2603]);
initNSCONT29(s[2604]);
initNSCONT210(s[2605]);
initNSCONT211(s[2606]);
initNSCONT212(s[2607]);
initNSCONT213(s[2608]);
initNSCONT214(s[2609]);
initNSCONT215(s[2610]);
initNSCONT216(s[2611]);
initNSCONT3(s[2612]);
initNSSTOP1(s[2613]);
initNSSTOP2(s[2614]);
initNSSTOP3(s[2615]);
initNSSTOP4(s[2616]);
initNSSTOP5(s[2617]);
initNSSTOP6(s[2618]);
initNSSTOP7(s[2619]);
initNSSTOP8(s[2620]);
initNSSTOP97(s[2621]);
initDMEMCONT11(s[2622]);
initDMEMCONT12(s[2623]);
initDMEMCONT13(s[2624]);
initDMEMCONT21(s[2625]);
initDMEMCONT22(s[2626]);
initDMEMCONT23(s[2627]);
initDMEMCONT24(s[2628]);
initDMEMCONT25(s[2629]);
initDMEMCONT26(s[2630]);
initDMEMCONT27(s[2631]);
initDMEMCONT28(s[2632]);
initDMEMCONT29(s[2633]);
initDMEMCONT210(s[2634]);
initDMEMCONT211(s[2635]);
initDMEMCONT212(s[2636]);
initDMEMCONT213(s[2637]);
initDMEMCONT214(s[2638]);
initDMEMCONT215(s[2639]);
initDMEMCONT216(s[2640]);
initDMEMCONT3(s[2641]);
initDELAYSTOP1(s[2642]);
initDELAYSTOP2(s[2643]);
initDELAYSTOP3(s[2644]);
initDELAYSTOP4(s[2645]);
initDELAYSTOP5(s[2646]);
initDELAYSTOP6(s[2647]);
initDELAYSTOP7(s[2648]);
initDELAYSTOP8(s[2649]);
initDELAYSTOP97(s[2650]);
initVFCONT11(s[2651]);
initVFCONT12(s[2652]);
initVFCONT13(s[2653]);
initVFCONT21(s[2654]);
initVFCONT22(s[2655]);
initVFCONT23(s[2656]);
initVFCONT24(s[2657]);
initVFCONT25(s[2658]);
initVFCONT26(s[2659]);
initVFCONT27(s[2660]);
initVFCONT28(s[2661]);
initVFCONT29(s[2662]);
initVFCONT210(s[2663]);
initVFCONT211(s[2664]);
initVFCONT212(s[2665]);
initVFCONT213(s[2666]);
initVFCONT214(s[2667]);
initVFCONT215(s[2668]);
initVFCONT216(s[2669]);
initVFCONT3(s[2670]);
initVFSTOP1(s[2671]);
initVFSTOP2(s[2672]);
initVFSTOP3(s[2673]);
initVFSTOP4(s[2674]);
initVFSTOP5(s[2675]);
initVFSTOP6(s[2676]);
initVFSTOP7(s[2677]);
initVFSTOP8(s[2678]);
initVFSTOP97(s[2679]);
initNACONT11(s[2680]);
initNACONT12(s[2681]);
initNACONT13(s[2682]);
initNACONT21(s[2683]);
initNACONT22(s[2684]);
initNACONT23(s[2685]);
initNACONT24(s[2686]);
initNACONT25(s[2687]);
initNACONT26(s[2688]);
initNACONT27(s[2689]);
initNACONT28(s[2690]);
initNACONT29(s[2691]);
initNACONT210(s[2692]);
initNACONT211(s[2693]);
initNACONT212(s[2694]);
initNACONT213(s[2695]);
initNACONT214(s[2696]);
initNACONT215(s[2697]);
initNACONT216(s[2698]);
initNACONT3(s[2699]);
initNASTOP1(s[2700]);
initNASTOP2(s[2701]);
initNASTOP3(s[2702]);
initNASTOP4(s[2703]);
initNASTOP5(s[2704]);
initNASTOP6(s[2705]);
initNASTOP7(s[2706]);
initNASTOP8(s[2707]);
initNASTOP97(s[2708]);
initLICENG(s[2709]);
initLICTRANS(s[2710]);
initLICWHO(s[2711]);
initCLANGAB(s[2712]);
initIVCOOP(s[2713]);
initSUSP(s[2714]);
initUNDQUS(s[2715]);
initIVPRSNT(s[2716]);
initIVINFNCE(s[2717]);
initIVAFFCT11(s[2718]);
initIVAFFCT12(s[2719]);
initIVAFFCT13(s[2720]);
initIVAFFCT14(s[2721]);
initIVAFFCT15(s[2722]);
initIVAFFCT17(s[2723]);
initIVAFFCT21(s[2724]);
initIVAFFCT22(s[2725]);
initIVAFFCT23(s[2726]);
initIVAFFCT27(s[2727]);
initIVAFFCT30(s[2728]);
initIVAFFCT97(s[2729]);
initIVLIENG(s[2730]);
initIVLITRANS(s[2731]);
initIVLIWHO(s[2732]);
initIVLIBAL(s[2733]);
initPREL(s[2734]);
initPREASON(s[2735]);
initPRIPN(s[2736]);
initPJULK4WK(s[2737]);
initPJBPTFT(s[2738]);
initPJSPTFT(s[2739]);
initPREARN(s[2740]);
initPREARNW(s[2741]);
initPREARNA(s[2742]);
initPBNFT1(s[2743]);
initPBNFT2(s[2744]);
initPBNFT3(s[2745]);
initPBNFT4(s[2746]);
initPBNFT5(s[2747]);
initPBNFT6(s[2748]);
initPBNFT7(s[2749]);
initPBNFT8(s[2750]);
initPBNFT9(s[2751]);
initPBNFT10(s[2752]);
initPBNFT11(s[2753]);
initPBNFT12(s[2754]);
initPBNFT96(s[2755]);
initNETUSE(s[2756]);
initPRFITB(s[2757]);
initPRFITBW(s[2758]);
initPRFITBA(s[2759]);
initHGBIOM(s[2760]);
initHGBIOF(s[2761]);
initRESPM16(s[2762]);
initRESPF16(s[2763]);
initHGADOPTM(s[2764]);
initHGADOPTF(s[2765]);
initHGPART(s[2766]);
initORIGADD(s[2767]);
initINDMODE(s[2768]);
initISTRTDATHH(s[2769]);
initISTRTDATMM(s[2770]);
initISTRTDATSS(s[2771]);
initIENDDATHH(s[2772]);
initIENDDATMM(s[2773]);
initIENDDATSS(s[2774]);
initJ2PAY_IF(s[2775]);
initFIMNGRS_TC(s[2776]);
initFIMNGRS_DV(s[2777]);
initFIMNLABGRS_TC(s[2778]);
initFIMNLABGRS_DV(s[2779]);
initFIMNLABNET_TC(s[2780]);
initFIMNLABNET_DV(s[2781]);
initFIYRINVINTC(s[2782]);
initFIYRINVINDV(s[2783]);
initFIBENOTHR_TC(s[2784]);
initFIBENOTHR_DV(s[2785]);
initPAYGL(s[2786]);
initPAYNL(s[2787]);
initJSPRF(s[2788]);
initPAYGU_DV(s[2789]);
initPAYG_DV(s[2790]);
initPAYNU_DV(s[2791]);
initPAYN_DV(s[2792]);
initSEEARNGRS_DV(s[2793]);
initSEEARNNET_DV(s[2794]);
initJ2PAY_DV(s[2795]);
initJ2PAYNET_DV(s[2796]);
initPPSEX(s[2797]);
initFNPID(s[2798]);
initMNPID(s[2799]);
initPN1PID(s[2800]);
initPN1PNO(s[2801]);
initPN1SEX(s[2802]);
initPN2PID(s[2803]);
initPN2PNO(s[2804]);
initPN2SEX(s[2805]);
initPNS1PID(s[2806]);
initPNS1PNO(s[2807]);
initPNS1SEX(s[2808]);
initPNS2PID(s[2809]);
initPNS2PNO(s[2810]);
initPNS2SEX(s[2811]);
initGRFPID(s[2812]);
initGRMPID(s[2813]);
initFF_IVLOLW(s[2814]);
initFF_EVERINT(s[2815]);
initFF_JBSTAT(s[2816]);
initFF_EMPLW(s[2817]);
initFF_TEL(s[2818]);
initFF_JBSEMP(s[2819]);
initFF_JBMNGR(s[2820]);
initFF_JBSIZE(s[2821]);
initFF_OPRLG(s[2822]);
initFF_OPRLG0(s[2823]);
initFF_OPRLG0NI(s[2824]);
initFF_UKBORN(s[2825]);
initFF_YR2UK4(s[2826]);
initFF_BENTYPE01(s[2827]);
initFF_BENTYPE02(s[2828]);
initFF_BENTYPE03(s[2829]);
initFF_BENTYPE04(s[2830]);
initFF_BENTYPE05(s[2831]);
initFF_BENTYPE06(s[2832]);
initFF_BENTYPE07(s[2833]);
initFF_BENTYPE08(s[2834]);
initFF_BENTYPE09(s[2835]);
initFF_BENTYPE10(s[2836]);
initFF_BENTYPE11(s[2837]);
initFF_BENTYPE12(s[2838]);
initFF_BENTYPE13(s[2839]);
initFF_BENTYPE14(s[2840]);
initFF_BENTYPE15(s[2841]);
initFF_BENTYPE16(s[2842]);
initFF_BENTYPE17(s[2843]);
initFF_BENTYPE18(s[2844]);
initFF_BENTYPE19(s[2845]);
initFF_BENTYPE20(s[2846]);
initFF_BENTYPE21(s[2847]);
initFF_BENTYPE22(s[2848]);
initFF_BENTYPE23(s[2849]);
initFF_BENTYPE24(s[2850]);
initFF_BENTYPE25(s[2851]);
initFF_BENTYPE26(s[2852]);
initFF_BENTYPE27(s[2853]);
initFF_BENTYPE28(s[2854]);
initFF_BENTYPE29(s[2855]);
initFF_BENTYPE30(s[2856]);
initFF_BENTYPE31(s[2857]);
initFF_BENTYPE32(s[2858]);
initFF_BENTYPE33(s[2859]);
initFF_BENTYPE34(s[2860]);
initFF_BENTYPE35(s[2861]);
initFF_BENTYPE36(s[2862]);
initFF_BENTYPE37(s[2863]);
initFF_BENTYPE38(s[2864]);
initFF_BENTYPE39(s[2865]);
initFF_IVINTLANG(s[2866]);
initSEX_DV(s[2867]);
initAGE_DV(s[2868]);
initETHN_DV(s[2869]);
initFIMNMISDV(s[2870]);
initFIMNPRBEN_DV(s[2871]);
initFIMNINVNET_DV(s[2872]);
initFIMNPEN_DV(s[2873]);
initFIMNSBEN_DV(s[2874]);
initFIMNNET_DV(s[2875]);
initINTDATD_DV(s[2876]);
initINTDATM_DV(s[2877]);
initINTDATY_DV(s[2878]);
initDOBY_DV(s[2879]);
initPENSIONER_DV(s[2880]);
initNPN_DV(s[2881]);
initNPNS_DV(s[2882]);
initNGRP_DV(s[2883]);
initNNSIB_DV(s[2884]);
initNNSSIB_DV(s[2885]);
initNPENSIONER_DV(s[2886]);
initJBSOCGR_DV(s[2887]);
initNBRSNCI_DV(s[2888]);
initNBRCOH_DV(s[2889]);
initNBRCOHDK_DV(s[2890]);
initSCDASSAT_DV(s[2891]);
initCOUNTRY(s[2892]);
initGOR_DV(s[2893]);
initURBAN_DV(s[2894]);
initHHRESP_DV(s[2895]);
initXTRA5MIN_DV(s[2896]);
initXTRA5MINOSM_DV(s[2897]);
initAGEGR5_DV(s[2898]);
initAGEGR10_DV(s[2899]);
initAGEGR13_DV(s[2900]);
initLIVESP_DV(s[2901]);
initCOHAB_DV(s[2902]);
initSINGLE_DV(s[2903]);
initMASTAT_DV(s[2904]);
initHHTYPE_DV(s[2905]);
initBUNO_DV(s[2906]);
initDEPCHL_DV(s[2907]);
initNCHILD_DV(s[2908]);
initNDEPCHL_DV(s[2909]);
initRESPM16_DV(s[2910]);
initRESPF16_DV(s[2911]);
initRACH16_DV(s[2912]);
initHRPID(s[2913]);
initHRPNO(s[2914]);
initPPID(s[2915]);
initPPNO(s[2916]);
initSPPID(s[2917]);
initSPPNO(s[2918]);
initFNPNO(s[2919]);
initFNSPID(s[2920]);
initFNSPNO(s[2921]);
initMNPNO(s[2922]);
initMNSPID(s[2923]);
initMNSPNO(s[2924]);
initGRFPNO(s[2925]);
initGRMPNO(s[2926]);
initQFHIGH_DV(s[2927]);
initNQFHIGH_DV(s[2928]);
initQFHIGHFL_DV(s[2929]);
initHIQUAL_DV(s[2930]);
initNHIQUAL_DV(s[2931]);
initNNMPSP_DV(s[2932]);
initNMPSP_DV(s[2933]);
initNUNMPSP_DV(s[2934]);
initJBFT_DV(s[2935]);
initJBSOC00_CC(s[2936]);
initJBSOC10_CC(s[2937]);
initJBSIC07_CC(s[2938]);
initJBIINDB_DV(s[2939]);
initJBES2000(s[2940]);
initJBSEG_DV(s[2941]);
initJBRGSDV(s[2942]);
initJBNSSEDV(s[2943]);
initJBNSSEC8_DV(s[2944]);
initJBNSSEC5_DV(s[2945]);
initJBNSSEC3_DV(s[2946]);
initJBISCO88_CC(s[2947]);
initJLSOC00_CC(s[2948]);
initJLSOC10_CC(s[2949]);
initJLSIC07_CC(s[2950]);
initJLIINDB_DV(s[2951]);
initJLES2000(s[2952]);
initJLSEG_DV(s[2953]);
initJLRGSDV(s[2954]);
initJLNSSEDV(s[2955]);
initJLNSSEC8_DV(s[2956]);
initJLNSSEC5_DV(s[2957]);
initJLNSSEC3_DV(s[2958]);
initJLISCO88_CC(s[2959]);
initPASOC90_CC(s[2960]);
initPASOC00_CC(s[2961]);
initPASOC10_CC(s[2962]);
initPANSSEC5_DV(s[2963]);
initMASOC90_CC(s[2964]);
initMASOC00_CC(s[2965]);
initMASOC10_CC(s[2966]);
initMANSSEC5_DV(s[2967]);
initJ1SOC90_CC(s[2968]);
initJ1SOC00_CC(s[2969]);
initJ1SOC10_CC(s[2970]);
initJ1NSSEC5_DV(s[2971]);
initJ2SOC90_CC(s[2972]);
initJ2SOC00_CC(s[2973]);
initJ2SOC10_CC(s[2974]);
initJ2NSSEC5_DV(s[2975]);
initYASOC90_CC(s[2976]);
initYASOC00_CC(s[2977]);
initYASOC10_CC(s[2978]);
initYANSSEC5_DV(s[2979]);
initSCGHQ1_DV(s[2980]);
initSCGHQ2_DV(s[2981]);
initSF12PCS_DV(s[2982]);
initSF12MCS_DV(s[2983]);
initBIG5A_DV(s[2984]);
initBIG5DV(s[2985]);
initBIG5E_DV(s[2986]);
initBIG5N_DV(s[2987]);
initBIG5O_DV(s[2988]);
initPSDQA_DV(s[2989]);
initPSDQB_DV(s[2990]);
initPSDQDV(s[2991]);
initSCFLAG_DV(s[2992]);
initATTACKED_DV(s[2993]);
initAVOIDED_DV(s[2994]);
initINSULTED_DV(s[2995]);
initUNSAFE_DV(s[2996]);
initCGSRMEM_DV(s[2997]);
initCGSRMEM2_DV(s[2998]);
initCGWRI1_DV(s[2999]);
initCGWRI2_DV(s[3000]);
initCGWRI3_DV(s[3001]);
initCGWRI4_DV(s[3002]);
initCGWRI_DV(s[3003]);
initCGIVWRI1_DV(s[3004]);
initCGWRD_DV(s[3005]);
initCGIVWRD1_DV(s[3006]);
initCGS7CS_DV(s[3007]);
initCGS7N_DV(s[3008]);
initCGS7CA_DV(s[3009]);
initCGIVS71_DV(s[3010]);
initCGNS1A_DV(s[3011]);
initCGNS1B_DV(s[3012]);
initCGNS2A_DV(s[3013]);
initCGNS2B_DV(s[3014]);
initCGNS1SC6_DV(s[3015]);
initCGNS1SC10_DV(s[3016]);
initCGNS2SC6_DV(s[3017]);
initCGNS2SC10_DV(s[3018]);
initCGIVNS1_DV(s[3019]);
initCGVFDV(s[3020]);
initCGVFW_DV(s[3021]);
initCGIVVF1_DV(s[3022]);
initCGNA_DV(s[3023]);
initCGIVNA1_DV(s[3024]);
initPAYU_DV(s[3025]);
initPAYGU_IF(s[3026]);
initPAYNU_IF(s[3027]);
initSEEARNGRS_IF(s[3028]);
initFIYRINVINIF(s[3029]);
initFIBENOTHR_IF(s[3030]);
initFIMNLABGRS_IF(s[3031]);
initFIMNGRS_IF(s[3032]);
initINDIN91_LW(s[3033]);
initINDIN01_LW(s[3034]);
initINDPXUS_LW(s[3035]);
initINDINUS_LW(s[3036]);
initINDSCUS_LW(s[3037]);
initIND5MUS_LW(s[3038]);
initINDPXUB_LW(s[3039]);
initINDINUB_LW(s[3040]);
initINDSCUB_LW(s[3041]);
initINDNS91_LW(s[3042]);
initINDBD91_LW(s[3043]);
initINDNSUB_LW(s[3044]);
initINDBDUB_LW(s[3045]);
initINDPXUB_XW(s[3046]);
initINDINUB_XW(s[3047]);
initINDSCUB_XW(s[3048]);
initIND5MUS_XW(s[3049]);
initRACEL_DV(s[3050]);
}
}
