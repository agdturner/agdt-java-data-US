/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.us.data.hhresp;
public class US_Wave24_hhresp_Record extends US_hhresp_Record {
protected byte ADDRCHCK;
protected int CARVAL;
protected byte CDELPLY;
protected byte CDEPDO2;
protected byte CDEPDO3;
protected byte CDEPDO4;
protected byte CDEPDO5;
protected byte CDEPDO6;
protected byte CDEPHAVE1;
protected byte CDEPHAVE2;
protected byte CDEPHAVE3;
protected byte CDEPHAVE4;
protected byte CDEPTRP;
protected short CDUSE10;
protected short CDUSE11;
protected short CDUSE12;
protected byte CDUSE13;
protected short CDUSE3;
protected short CDUSE4;
protected byte CDUSE5;
protected byte CDUSE7;
protected byte CORDET1;
protected byte CORDET10;
protected byte CORDET11;
protected byte CORDET12;
protected byte CORDET13;
protected byte CORDET14;
protected byte CORDET15;
protected byte CORDET16;
protected byte CORDET17;
protected byte CORDET18;
protected byte CORDET19;
protected byte CORDET2;
protected byte CORDET20;
protected byte CORDET21;
protected byte CORDET22;
protected byte CORDET23;
protected byte CORDET24;
protected byte CORDET25;
protected byte CORDET26;
protected byte CORDET27;
protected byte CORDET28;
protected byte CORDET29;
protected byte CORDET3;
protected byte CORDET30;
protected byte CORDET31;
protected byte CORDET32;
protected byte CORDET4;
protected byte CORDET5;
protected byte CORDET6;
protected byte CORDET7;
protected byte CORDET8;
protected byte CORDET9;
protected byte CORDET96;
protected byte CORESWHO1;
protected byte CORESWHO10;
protected byte CORESWHO11;
protected byte CORESWHO12;
protected byte CORESWHO13;
protected byte CORESWHO14;
protected byte CORESWHO15;
protected byte CORESWHO16;
protected byte CORESWHO2;
protected byte CORESWHO3;
protected byte CORESWHO4;
protected byte CORESWHO5;
protected byte CORESWHO6;
protected byte CORESWHO7;
protected byte CORESWHO8;
protected byte CORESWHO9;
protected byte CORESWHO96;
protected byte COUNTRY;
protected byte CPLAY;
protected byte CRBURG;
protected byte CRCAR;
protected byte CRDRNK;
protected byte CRGRAF;
protected byte CRMUGG;
protected byte CRRACE;
protected byte CRRUBSH;
protected byte CRTEEN;
protected byte CRVAND;
protected byte DUELPAY;
protected byte ELECPAY;
protected byte FHSBEDS;
protected byte FHSOWND;
protected byte FHSROOMS;
protected double FIHHMNGRS1_DV;
protected double FIHHMNGRS_IF;
protected byte FIHHMNGRS_TC;
protected double FIHHMNINV_DV;
protected double FIHHMNLABGRS_DV;
protected byte FIHHMNLABGRS_TC;
protected double FIHHMNLABNET_DV;
protected double FIHHMNMISC_DV;
protected double FIHHMNNET1_DV;
protected double FIHHMNPEN_DV;
protected double FIHHMNPRBEN_DV;
protected double FIHHMNSBEN_DV;
protected byte FIHHNEGSEI_IF;
protected byte FUELDUEL;
protected byte FUELHAVE1;
protected byte FUELHAVE2;
protected byte FUELHAVE3;
protected byte FUELHAVE4;
protected byte FUELHAVE96;
protected byte GASPAY;
protected byte GRIMYN;
protected double HBADJUST_DV;
protected byte HGENDDATD;
protected byte HGENDDATHH;
protected byte HGENDDATM;
protected byte HGENDDATMM;
protected byte HGENDDATSS;
protected short HGENDDATY;
protected byte HGLIENG;
protected byte HGLITRANS;
protected byte HGSTRTDATD;
protected byte HGSTRTDATHH;
protected byte HGSTRTDATM;
protected byte HGSTRTDATMM;
protected byte HGSTRTDATSS;
protected short HGSTRTDATY;
protected double HHDENUB_XW;
protected double HHDENUI_XW;
protected byte HHEAT;
protected byte HHINTLANG;
protected byte HHLANG;
protected byte HHOLDMODEDV;
protected byte HHORIG;
protected byte HHRESP_DV;
protected byte HHTYPE_DV;
protected byte HIENDDATD;
protected byte HIENDDATHH;
protected byte HIENDDATM;
protected byte HIENDDATMM;
protected byte HIENDDATSS;
protected short HIENDDATY;
protected byte HISTRTDATD;
protected byte HISTRTDATHH;
protected byte HISTRTDATM;
protected byte HISTRTDATMM;
protected byte HISTRTDATSS;
protected short HISTRTDATY;
protected byte HLIENG;
protected byte HLITRANS;
protected byte HLIWHO;
protected double HOUSCOST1_DV;
protected double HOUSCOST2_DV;
protected int HRPID;
protected byte HRPNO;
protected byte HSBEDS;
protected short HSCTAX;
protected byte HSOWND;
protected byte HSOWNDCHK;
protected short HSOWR111;
protected short HSOWR112;
protected byte HSOWR113;
protected byte HSOWR114;
protected byte HSOWR115;
protected byte HSOWR116;
protected byte HSROOMCHK;
protected byte HSROOMS;
protected int HSTOTMG;
protected double IEQMOECD_DV;
protected short INTDATEY;
protected int INTNUM;
protected short IVFHO;
protected short IVH0;
protected short IVH11;
protected short IVH12;
protected byte IVH13;
protected byte IVH14;
protected byte IVH15;
protected byte IVH16;
protected byte MATDEPA;
protected byte MATDEPD;
protected byte MATDEPE;
protected byte MATDEPF;
protected byte MATDEPG;
protected byte MATDEPH;
protected byte MATDEPI;
protected byte MATDEPJ;
protected short MGEXTRA;
protected int MGNEW;
protected int MGOLD;
protected byte MGTYPE;
protected short MGXTY1;
protected short MGXTY2;
protected short MGXTY3;
protected short MGXTY4;
protected byte MGXTY5;
protected byte MGXTY6;
protected byte MGXTY97;
protected byte MGYNOT;
protected boolean MODETYPE;
protected byte MONTH;
protected byte MORES;
protected byte N10TO15;
protected byte NADOECD_DV;
protected byte NCARS;
protected byte NCHOECD_DV;
protected short NCOUPLE_DV;
protected byte NKIDS015;
protected byte NKIDS05;
protected byte NKIDS615;
protected byte NOISYN;
protected byte NPENSIONER;
protected byte NPENSIONER_DV;
protected byte NUE_DV;
protected short NWAGE_DV;
protected byte ORIGADD;
protected short OUTCOME;
protected byte PCBROAD;
protected byte PCHAS;
protected short PCNET;
protected byte PDEPA1;
protected byte PDEPA2;
protected byte PDEPA3;
protected byte PDEPA4;
protected byte PDEPA5;
protected byte PDEPA6;
protected byte PDEPA7;
protected byte PDEPA8;
protected byte PDEPA97;
protected byte PDEPB1;
protected byte PDEPB2;
protected byte PDEPB3;
protected byte PDEPB4;
protected byte PDEPB5;
protected byte PDEPB6;
protected byte PDEPB7;
protected byte PDEPB8;
protected byte PDEPB97;
protected byte PDEPC1;
protected byte PDEPC2;
protected byte PDEPC3;
protected byte PDEPC4;
protected byte PDEPC5;
protected byte PDEPC6;
protected byte PDEPC7;
protected byte PDEPC8;
protected byte PDEPC97;
protected byte PDEPD1;
protected byte PDEPD2;
protected byte PDEPD3;
protected byte PDEPD4;
protected byte PDEPD5;
protected byte PDEPD6;
protected byte PDEPD7;
protected byte PDEPD8;
protected byte PDEPD97;
protected byte PDEPE1;
protected byte PDEPE2;
protected byte PDEPE3;
protected byte PDEPE4;
protected byte PDEPE5;
protected byte PDEPE6;
protected byte PDEPE7;
protected byte PDEPE8;
protected byte PDEPE97;
protected byte PDEPF1;
protected byte PDEPF2;
protected byte PDEPF3;
protected byte PDEPF4;
protected byte PDEPF5;
protected byte PDEPF6;
protected byte PDEPF7;
protected byte PDEPF8;
protected byte PDEPF97;
protected byte PDEPG1;
protected byte PDEPG2;
protected byte PDEPG3;
protected byte PDEPG4;
protected byte PDEPG5;
protected byte PDEPG6;
protected byte PDEPG7;
protected byte PDEPG8;
protected byte PDEPG97;
protected byte PDEPH1;
protected byte PDEPH2;
protected byte PDEPH3;
protected byte PDEPH4;
protected byte PDEPH5;
protected byte PDEPH6;
protected byte PDEPH7;
protected byte PDEPH8;
protected byte PDEPH97;
protected byte PDEPI1;
protected byte PDEPI2;
protected byte PDEPI3;
protected byte PDEPI4;
protected byte PDEPI5;
protected byte PDEPI6;
protected byte PDEPI7;
protected byte PDEPI8;
protected byte PDEPI97;
protected byte PDEPK1;
protected byte PDEPK2;
protected byte PDEPK3;
protected byte PDEPK4;
protected byte PDEPK5;
protected byte PDEPK6;
protected byte PDEPK7;
protected byte PDEPK8;
protected byte PDEPK97;
protected byte PDEPL1;
protected byte PDEPL2;
protected byte PDEPL3;
protected byte PDEPL4;
protected byte PDEPL5;
protected byte PDEPL6;
protected byte PDEPL7;
protected byte PDEPL8;
protected byte PDEPL97;
protected byte PDEPM1;
protected byte PDEPM2;
protected byte PDEPM3;
protected byte PDEPM4;
protected byte PDEPM5;
protected byte PDEPM6;
protected byte PDEPM7;
protected byte PDEPM8;
protected byte PDEPM97;
protected byte PDEPN1;
protected byte PDEPN2;
protected byte PDEPN3;
protected byte PDEPN4;
protected byte PDEPN5;
protected byte PDEPN6;
protected byte PDEPN7;
protected byte PDEPN8;
protected byte PDEPN97;
protected byte PDEPO1;
protected byte PDEPO2;
protected byte PDEPO3;
protected byte PDEPO4;
protected byte PDEPO5;
protected byte PDEPO6;
protected byte PDEPO7;
protected byte PDEPO8;
protected byte PDEPO97;
protected byte PDEPOH1;
protected byte PDEPOH2;
protected byte PDEPOH3;
protected byte PDEPOH4;
protected byte PDEPOH5;
protected byte PDEPOH97;
protected int PSU;
protected byte QUARTER;
protected short RENTG;
protected double RENTGRS_DV;
protected byte RENTGRS_IF;
protected byte RENTHB;
protected byte RENTINC1;
protected byte RENTINC2;
protected byte RENTINC3;
protected byte RENTINC96;
protected short RENTP11;
protected short RENTP12;
protected byte RENTP13;
protected byte RENTP14;
protected byte RENTP15;
protected byte RENTP16;
protected byte RENTWC;
protected double RENT_DV;
protected short STRATA;
protected short TENURE_DV;
protected byte URBAN_DV;
protected short XPALTOB_G3;
protected short XPDUELY;
protected short XPELECY;
protected short XPFDOUT_G3;
protected short XPFOOD1_G3;
protected short XPGASY;
protected byte XPHSDBA;
protected byte XPHSDCT;
protected double XPMGINT_DV;
protected double XPMG_DV;
protected byte XPMG_IF;
protected short XPOILY;
protected short XPSFLY;
protected final void initADDRCHCK(String s) {
if (!s.trim().isEmpty()) {
ADDRCHCK = Byte.parseByte(s);
} else {
ADDRCHCK = Byte.MIN_VALUE;
}
}

protected final void initCARVAL(String s) {
if (!s.trim().isEmpty()) {
CARVAL = Integer.parseInt(s);
} else {
CARVAL = Integer.MIN_VALUE;
}
}

protected final void initCDELPLY(String s) {
if (!s.trim().isEmpty()) {
CDELPLY = Byte.parseByte(s);
} else {
CDELPLY = Byte.MIN_VALUE;
}
}

protected final void initCDEPDO2(String s) {
if (!s.trim().isEmpty()) {
CDEPDO2 = Byte.parseByte(s);
} else {
CDEPDO2 = Byte.MIN_VALUE;
}
}

protected final void initCDEPDO3(String s) {
if (!s.trim().isEmpty()) {
CDEPDO3 = Byte.parseByte(s);
} else {
CDEPDO3 = Byte.MIN_VALUE;
}
}

protected final void initCDEPDO4(String s) {
if (!s.trim().isEmpty()) {
CDEPDO4 = Byte.parseByte(s);
} else {
CDEPDO4 = Byte.MIN_VALUE;
}
}

protected final void initCDEPDO5(String s) {
if (!s.trim().isEmpty()) {
CDEPDO5 = Byte.parseByte(s);
} else {
CDEPDO5 = Byte.MIN_VALUE;
}
}

protected final void initCDEPDO6(String s) {
if (!s.trim().isEmpty()) {
CDEPDO6 = Byte.parseByte(s);
} else {
CDEPDO6 = Byte.MIN_VALUE;
}
}

protected final void initCDEPHAVE1(String s) {
if (!s.trim().isEmpty()) {
CDEPHAVE1 = Byte.parseByte(s);
} else {
CDEPHAVE1 = Byte.MIN_VALUE;
}
}

protected final void initCDEPHAVE2(String s) {
if (!s.trim().isEmpty()) {
CDEPHAVE2 = Byte.parseByte(s);
} else {
CDEPHAVE2 = Byte.MIN_VALUE;
}
}

protected final void initCDEPHAVE3(String s) {
if (!s.trim().isEmpty()) {
CDEPHAVE3 = Byte.parseByte(s);
} else {
CDEPHAVE3 = Byte.MIN_VALUE;
}
}

protected final void initCDEPHAVE4(String s) {
if (!s.trim().isEmpty()) {
CDEPHAVE4 = Byte.parseByte(s);
} else {
CDEPHAVE4 = Byte.MIN_VALUE;
}
}

protected final void initCDEPTRP(String s) {
if (!s.trim().isEmpty()) {
CDEPTRP = Byte.parseByte(s);
} else {
CDEPTRP = Byte.MIN_VALUE;
}
}

protected final void initCDUSE10(String s) {
if (!s.trim().isEmpty()) {
CDUSE10 = Short.parseShort(s);
} else {
CDUSE10 = Short.MIN_VALUE;
}
}

protected final void initCDUSE11(String s) {
if (!s.trim().isEmpty()) {
CDUSE11 = Short.parseShort(s);
} else {
CDUSE11 = Short.MIN_VALUE;
}
}

protected final void initCDUSE12(String s) {
if (!s.trim().isEmpty()) {
CDUSE12 = Short.parseShort(s);
} else {
CDUSE12 = Short.MIN_VALUE;
}
}

protected final void initCDUSE13(String s) {
if (!s.trim().isEmpty()) {
CDUSE13 = Byte.parseByte(s);
} else {
CDUSE13 = Byte.MIN_VALUE;
}
}

protected final void initCDUSE3(String s) {
if (!s.trim().isEmpty()) {
CDUSE3 = Short.parseShort(s);
} else {
CDUSE3 = Short.MIN_VALUE;
}
}

protected final void initCDUSE4(String s) {
if (!s.trim().isEmpty()) {
CDUSE4 = Short.parseShort(s);
} else {
CDUSE4 = Short.MIN_VALUE;
}
}

protected final void initCDUSE5(String s) {
if (!s.trim().isEmpty()) {
CDUSE5 = Byte.parseByte(s);
} else {
CDUSE5 = Byte.MIN_VALUE;
}
}

protected final void initCDUSE7(String s) {
if (!s.trim().isEmpty()) {
CDUSE7 = Byte.parseByte(s);
} else {
CDUSE7 = Byte.MIN_VALUE;
}
}

protected final void initCORDET1(String s) {
if (!s.trim().isEmpty()) {
CORDET1 = Byte.parseByte(s);
} else {
CORDET1 = Byte.MIN_VALUE;
}
}

protected final void initCORDET10(String s) {
if (!s.trim().isEmpty()) {
CORDET10 = Byte.parseByte(s);
} else {
CORDET10 = Byte.MIN_VALUE;
}
}

protected final void initCORDET11(String s) {
if (!s.trim().isEmpty()) {
CORDET11 = Byte.parseByte(s);
} else {
CORDET11 = Byte.MIN_VALUE;
}
}

protected final void initCORDET12(String s) {
if (!s.trim().isEmpty()) {
CORDET12 = Byte.parseByte(s);
} else {
CORDET12 = Byte.MIN_VALUE;
}
}

protected final void initCORDET13(String s) {
if (!s.trim().isEmpty()) {
CORDET13 = Byte.parseByte(s);
} else {
CORDET13 = Byte.MIN_VALUE;
}
}

protected final void initCORDET14(String s) {
if (!s.trim().isEmpty()) {
CORDET14 = Byte.parseByte(s);
} else {
CORDET14 = Byte.MIN_VALUE;
}
}

protected final void initCORDET15(String s) {
if (!s.trim().isEmpty()) {
CORDET15 = Byte.parseByte(s);
} else {
CORDET15 = Byte.MIN_VALUE;
}
}

protected final void initCORDET16(String s) {
if (!s.trim().isEmpty()) {
CORDET16 = Byte.parseByte(s);
} else {
CORDET16 = Byte.MIN_VALUE;
}
}

protected final void initCORDET17(String s) {
if (!s.trim().isEmpty()) {
CORDET17 = Byte.parseByte(s);
} else {
CORDET17 = Byte.MIN_VALUE;
}
}

protected final void initCORDET18(String s) {
if (!s.trim().isEmpty()) {
CORDET18 = Byte.parseByte(s);
} else {
CORDET18 = Byte.MIN_VALUE;
}
}

protected final void initCORDET19(String s) {
if (!s.trim().isEmpty()) {
CORDET19 = Byte.parseByte(s);
} else {
CORDET19 = Byte.MIN_VALUE;
}
}

protected final void initCORDET2(String s) {
if (!s.trim().isEmpty()) {
CORDET2 = Byte.parseByte(s);
} else {
CORDET2 = Byte.MIN_VALUE;
}
}

protected final void initCORDET20(String s) {
if (!s.trim().isEmpty()) {
CORDET20 = Byte.parseByte(s);
} else {
CORDET20 = Byte.MIN_VALUE;
}
}

protected final void initCORDET21(String s) {
if (!s.trim().isEmpty()) {
CORDET21 = Byte.parseByte(s);
} else {
CORDET21 = Byte.MIN_VALUE;
}
}

protected final void initCORDET22(String s) {
if (!s.trim().isEmpty()) {
CORDET22 = Byte.parseByte(s);
} else {
CORDET22 = Byte.MIN_VALUE;
}
}

protected final void initCORDET23(String s) {
if (!s.trim().isEmpty()) {
CORDET23 = Byte.parseByte(s);
} else {
CORDET23 = Byte.MIN_VALUE;
}
}

protected final void initCORDET24(String s) {
if (!s.trim().isEmpty()) {
CORDET24 = Byte.parseByte(s);
} else {
CORDET24 = Byte.MIN_VALUE;
}
}

protected final void initCORDET25(String s) {
if (!s.trim().isEmpty()) {
CORDET25 = Byte.parseByte(s);
} else {
CORDET25 = Byte.MIN_VALUE;
}
}

protected final void initCORDET26(String s) {
if (!s.trim().isEmpty()) {
CORDET26 = Byte.parseByte(s);
} else {
CORDET26 = Byte.MIN_VALUE;
}
}

protected final void initCORDET27(String s) {
if (!s.trim().isEmpty()) {
CORDET27 = Byte.parseByte(s);
} else {
CORDET27 = Byte.MIN_VALUE;
}
}

protected final void initCORDET28(String s) {
if (!s.trim().isEmpty()) {
CORDET28 = Byte.parseByte(s);
} else {
CORDET28 = Byte.MIN_VALUE;
}
}

protected final void initCORDET29(String s) {
if (!s.trim().isEmpty()) {
CORDET29 = Byte.parseByte(s);
} else {
CORDET29 = Byte.MIN_VALUE;
}
}

protected final void initCORDET3(String s) {
if (!s.trim().isEmpty()) {
CORDET3 = Byte.parseByte(s);
} else {
CORDET3 = Byte.MIN_VALUE;
}
}

protected final void initCORDET30(String s) {
if (!s.trim().isEmpty()) {
CORDET30 = Byte.parseByte(s);
} else {
CORDET30 = Byte.MIN_VALUE;
}
}

protected final void initCORDET31(String s) {
if (!s.trim().isEmpty()) {
CORDET31 = Byte.parseByte(s);
} else {
CORDET31 = Byte.MIN_VALUE;
}
}

protected final void initCORDET32(String s) {
if (!s.trim().isEmpty()) {
CORDET32 = Byte.parseByte(s);
} else {
CORDET32 = Byte.MIN_VALUE;
}
}

protected final void initCORDET4(String s) {
if (!s.trim().isEmpty()) {
CORDET4 = Byte.parseByte(s);
} else {
CORDET4 = Byte.MIN_VALUE;
}
}

protected final void initCORDET5(String s) {
if (!s.trim().isEmpty()) {
CORDET5 = Byte.parseByte(s);
} else {
CORDET5 = Byte.MIN_VALUE;
}
}

protected final void initCORDET6(String s) {
if (!s.trim().isEmpty()) {
CORDET6 = Byte.parseByte(s);
} else {
CORDET6 = Byte.MIN_VALUE;
}
}

protected final void initCORDET7(String s) {
if (!s.trim().isEmpty()) {
CORDET7 = Byte.parseByte(s);
} else {
CORDET7 = Byte.MIN_VALUE;
}
}

protected final void initCORDET8(String s) {
if (!s.trim().isEmpty()) {
CORDET8 = Byte.parseByte(s);
} else {
CORDET8 = Byte.MIN_VALUE;
}
}

protected final void initCORDET9(String s) {
if (!s.trim().isEmpty()) {
CORDET9 = Byte.parseByte(s);
} else {
CORDET9 = Byte.MIN_VALUE;
}
}

protected final void initCORDET96(String s) {
if (!s.trim().isEmpty()) {
CORDET96 = Byte.parseByte(s);
} else {
CORDET96 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO1(String s) {
if (!s.trim().isEmpty()) {
CORESWHO1 = Byte.parseByte(s);
} else {
CORESWHO1 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO10(String s) {
if (!s.trim().isEmpty()) {
CORESWHO10 = Byte.parseByte(s);
} else {
CORESWHO10 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO11(String s) {
if (!s.trim().isEmpty()) {
CORESWHO11 = Byte.parseByte(s);
} else {
CORESWHO11 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO12(String s) {
if (!s.trim().isEmpty()) {
CORESWHO12 = Byte.parseByte(s);
} else {
CORESWHO12 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO13(String s) {
if (!s.trim().isEmpty()) {
CORESWHO13 = Byte.parseByte(s);
} else {
CORESWHO13 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO14(String s) {
if (!s.trim().isEmpty()) {
CORESWHO14 = Byte.parseByte(s);
} else {
CORESWHO14 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO15(String s) {
if (!s.trim().isEmpty()) {
CORESWHO15 = Byte.parseByte(s);
} else {
CORESWHO15 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO16(String s) {
if (!s.trim().isEmpty()) {
CORESWHO16 = Byte.parseByte(s);
} else {
CORESWHO16 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO2(String s) {
if (!s.trim().isEmpty()) {
CORESWHO2 = Byte.parseByte(s);
} else {
CORESWHO2 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO3(String s) {
if (!s.trim().isEmpty()) {
CORESWHO3 = Byte.parseByte(s);
} else {
CORESWHO3 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO4(String s) {
if (!s.trim().isEmpty()) {
CORESWHO4 = Byte.parseByte(s);
} else {
CORESWHO4 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO5(String s) {
if (!s.trim().isEmpty()) {
CORESWHO5 = Byte.parseByte(s);
} else {
CORESWHO5 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO6(String s) {
if (!s.trim().isEmpty()) {
CORESWHO6 = Byte.parseByte(s);
} else {
CORESWHO6 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO7(String s) {
if (!s.trim().isEmpty()) {
CORESWHO7 = Byte.parseByte(s);
} else {
CORESWHO7 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO8(String s) {
if (!s.trim().isEmpty()) {
CORESWHO8 = Byte.parseByte(s);
} else {
CORESWHO8 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO9(String s) {
if (!s.trim().isEmpty()) {
CORESWHO9 = Byte.parseByte(s);
} else {
CORESWHO9 = Byte.MIN_VALUE;
}
}

protected final void initCORESWHO96(String s) {
if (!s.trim().isEmpty()) {
CORESWHO96 = Byte.parseByte(s);
} else {
CORESWHO96 = Byte.MIN_VALUE;
}
}

protected final void initCOUNTRY(String s) {
if (!s.trim().isEmpty()) {
COUNTRY = Byte.parseByte(s);
} else {
COUNTRY = Byte.MIN_VALUE;
}
}

protected final void initCPLAY(String s) {
if (!s.trim().isEmpty()) {
CPLAY = Byte.parseByte(s);
} else {
CPLAY = Byte.MIN_VALUE;
}
}

protected final void initCRBURG(String s) {
if (!s.trim().isEmpty()) {
CRBURG = Byte.parseByte(s);
} else {
CRBURG = Byte.MIN_VALUE;
}
}

protected final void initCRCAR(String s) {
if (!s.trim().isEmpty()) {
CRCAR = Byte.parseByte(s);
} else {
CRCAR = Byte.MIN_VALUE;
}
}

protected final void initCRDRNK(String s) {
if (!s.trim().isEmpty()) {
CRDRNK = Byte.parseByte(s);
} else {
CRDRNK = Byte.MIN_VALUE;
}
}

protected final void initCRGRAF(String s) {
if (!s.trim().isEmpty()) {
CRGRAF = Byte.parseByte(s);
} else {
CRGRAF = Byte.MIN_VALUE;
}
}

protected final void initCRMUGG(String s) {
if (!s.trim().isEmpty()) {
CRMUGG = Byte.parseByte(s);
} else {
CRMUGG = Byte.MIN_VALUE;
}
}

protected final void initCRRACE(String s) {
if (!s.trim().isEmpty()) {
CRRACE = Byte.parseByte(s);
} else {
CRRACE = Byte.MIN_VALUE;
}
}

protected final void initCRRUBSH(String s) {
if (!s.trim().isEmpty()) {
CRRUBSH = Byte.parseByte(s);
} else {
CRRUBSH = Byte.MIN_VALUE;
}
}

protected final void initCRTEEN(String s) {
if (!s.trim().isEmpty()) {
CRTEEN = Byte.parseByte(s);
} else {
CRTEEN = Byte.MIN_VALUE;
}
}

protected final void initCRVAND(String s) {
if (!s.trim().isEmpty()) {
CRVAND = Byte.parseByte(s);
} else {
CRVAND = Byte.MIN_VALUE;
}
}

protected final void initDUELPAY(String s) {
if (!s.trim().isEmpty()) {
DUELPAY = Byte.parseByte(s);
} else {
DUELPAY = Byte.MIN_VALUE;
}
}

protected final void initELECPAY(String s) {
if (!s.trim().isEmpty()) {
ELECPAY = Byte.parseByte(s);
} else {
ELECPAY = Byte.MIN_VALUE;
}
}

protected final void initFHSBEDS(String s) {
if (!s.trim().isEmpty()) {
FHSBEDS = Byte.parseByte(s);
} else {
FHSBEDS = Byte.MIN_VALUE;
}
}

protected final void initFHSOWND(String s) {
if (!s.trim().isEmpty()) {
FHSOWND = Byte.parseByte(s);
} else {
FHSOWND = Byte.MIN_VALUE;
}
}

protected final void initFHSROOMS(String s) {
if (!s.trim().isEmpty()) {
FHSROOMS = Byte.parseByte(s);
} else {
FHSROOMS = Byte.MIN_VALUE;
}
}

protected final void initFIHHMNGRS1_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNGRS1_DV = Double.parseDouble(s);
} else {
FIHHMNGRS1_DV = Double.NaN;
}
}

protected final void initFIHHMNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIHHMNGRS_IF = Double.parseDouble(s);
} else {
FIHHMNGRS_IF = Double.NaN;
}
}

protected final void initFIHHMNGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIHHMNGRS_TC = Byte.parseByte(s);
} else {
FIHHMNGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIHHMNINV_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNINV_DV = Double.parseDouble(s);
} else {
FIHHMNINV_DV = Double.NaN;
}
}

protected final void initFIHHMNLABGRS_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNLABGRS_DV = Double.parseDouble(s);
} else {
FIHHMNLABGRS_DV = Double.NaN;
}
}

protected final void initFIHHMNLABGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIHHMNLABGRS_TC = Byte.parseByte(s);
} else {
FIHHMNLABGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIHHMNLABNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNLABNET_DV = Double.parseDouble(s);
} else {
FIHHMNLABNET_DV = Double.NaN;
}
}

protected final void initFIHHMNMISC_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNMISC_DV = Double.parseDouble(s);
} else {
FIHHMNMISC_DV = Double.NaN;
}
}

protected final void initFIHHMNNET1_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNNET1_DV = Double.parseDouble(s);
} else {
FIHHMNNET1_DV = Double.NaN;
}
}

protected final void initFIHHMNPEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNPEN_DV = Double.parseDouble(s);
} else {
FIHHMNPEN_DV = Double.NaN;
}
}

protected final void initFIHHMNPRBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNPRBEN_DV = Double.parseDouble(s);
} else {
FIHHMNPRBEN_DV = Double.NaN;
}
}

protected final void initFIHHMNSBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNSBEN_DV = Double.parseDouble(s);
} else {
FIHHMNSBEN_DV = Double.NaN;
}
}

protected final void initFIHHNEGSEI_IF(String s) {
if (!s.trim().isEmpty()) {
FIHHNEGSEI_IF = Byte.parseByte(s);
} else {
FIHHNEGSEI_IF = Byte.MIN_VALUE;
}
}

protected final void initFUELDUEL(String s) {
if (!s.trim().isEmpty()) {
FUELDUEL = Byte.parseByte(s);
} else {
FUELDUEL = Byte.MIN_VALUE;
}
}

protected final void initFUELHAVE1(String s) {
if (!s.trim().isEmpty()) {
FUELHAVE1 = Byte.parseByte(s);
} else {
FUELHAVE1 = Byte.MIN_VALUE;
}
}

protected final void initFUELHAVE2(String s) {
if (!s.trim().isEmpty()) {
FUELHAVE2 = Byte.parseByte(s);
} else {
FUELHAVE2 = Byte.MIN_VALUE;
}
}

protected final void initFUELHAVE3(String s) {
if (!s.trim().isEmpty()) {
FUELHAVE3 = Byte.parseByte(s);
} else {
FUELHAVE3 = Byte.MIN_VALUE;
}
}

protected final void initFUELHAVE4(String s) {
if (!s.trim().isEmpty()) {
FUELHAVE4 = Byte.parseByte(s);
} else {
FUELHAVE4 = Byte.MIN_VALUE;
}
}

protected final void initFUELHAVE96(String s) {
if (!s.trim().isEmpty()) {
FUELHAVE96 = Byte.parseByte(s);
} else {
FUELHAVE96 = Byte.MIN_VALUE;
}
}

protected final void initGASPAY(String s) {
if (!s.trim().isEmpty()) {
GASPAY = Byte.parseByte(s);
} else {
GASPAY = Byte.MIN_VALUE;
}
}

protected final void initGRIMYN(String s) {
if (!s.trim().isEmpty()) {
GRIMYN = Byte.parseByte(s);
} else {
GRIMYN = Byte.MIN_VALUE;
}
}

protected final void initHBADJUST_DV(String s) {
if (!s.trim().isEmpty()) {
HBADJUST_DV = Double.parseDouble(s);
} else {
HBADJUST_DV = Double.NaN;
}
}

protected final void initHGENDDATD(String s) {
if (!s.trim().isEmpty()) {
HGENDDATD = Byte.parseByte(s);
} else {
HGENDDATD = Byte.MIN_VALUE;
}
}

protected final void initHGENDDATHH(String s) {
if (!s.trim().isEmpty()) {
HGENDDATHH = Byte.parseByte(s);
} else {
HGENDDATHH = Byte.MIN_VALUE;
}
}

protected final void initHGENDDATM(String s) {
if (!s.trim().isEmpty()) {
HGENDDATM = Byte.parseByte(s);
} else {
HGENDDATM = Byte.MIN_VALUE;
}
}

protected final void initHGENDDATMM(String s) {
if (!s.trim().isEmpty()) {
HGENDDATMM = Byte.parseByte(s);
} else {
HGENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initHGENDDATSS(String s) {
if (!s.trim().isEmpty()) {
HGENDDATSS = Byte.parseByte(s);
} else {
HGENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initHGENDDATY(String s) {
if (!s.trim().isEmpty()) {
HGENDDATY = Short.parseShort(s);
} else {
HGENDDATY = Short.MIN_VALUE;
}
}

protected final void initHGLIENG(String s) {
if (!s.trim().isEmpty()) {
HGLIENG = Byte.parseByte(s);
} else {
HGLIENG = Byte.MIN_VALUE;
}
}

protected final void initHGLITRANS(String s) {
if (!s.trim().isEmpty()) {
HGLITRANS = Byte.parseByte(s);
} else {
HGLITRANS = Byte.MIN_VALUE;
}
}

protected final void initHGSTRTDATD(String s) {
if (!s.trim().isEmpty()) {
HGSTRTDATD = Byte.parseByte(s);
} else {
HGSTRTDATD = Byte.MIN_VALUE;
}
}

protected final void initHGSTRTDATHH(String s) {
if (!s.trim().isEmpty()) {
HGSTRTDATHH = Byte.parseByte(s);
} else {
HGSTRTDATHH = Byte.MIN_VALUE;
}
}

protected final void initHGSTRTDATM(String s) {
if (!s.trim().isEmpty()) {
HGSTRTDATM = Byte.parseByte(s);
} else {
HGSTRTDATM = Byte.MIN_VALUE;
}
}

protected final void initHGSTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
HGSTRTDATMM = Byte.parseByte(s);
} else {
HGSTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initHGSTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
HGSTRTDATSS = Byte.parseByte(s);
} else {
HGSTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initHGSTRTDATY(String s) {
if (!s.trim().isEmpty()) {
HGSTRTDATY = Short.parseShort(s);
} else {
HGSTRTDATY = Short.MIN_VALUE;
}
}

protected final void initHHDENUB_XW(String s) {
if (!s.trim().isEmpty()) {
HHDENUB_XW = Double.parseDouble(s);
} else {
HHDENUB_XW = Double.NaN;
}
}

protected final void initHHDENUI_XW(String s) {
if (!s.trim().isEmpty()) {
HHDENUI_XW = Double.parseDouble(s);
} else {
HHDENUI_XW = Double.NaN;
}
}

protected final void initHHEAT(String s) {
if (!s.trim().isEmpty()) {
HHEAT = Byte.parseByte(s);
} else {
HHEAT = Byte.MIN_VALUE;
}
}

protected final void initHHINTLANG(String s) {
if (!s.trim().isEmpty()) {
HHINTLANG = Byte.parseByte(s);
} else {
HHINTLANG = Byte.MIN_VALUE;
}
}

protected final void initHHLANG(String s) {
if (!s.trim().isEmpty()) {
HHLANG = Byte.parseByte(s);
} else {
HHLANG = Byte.MIN_VALUE;
}
}

protected final void initHHOLDMODEDV(String s) {
if (!s.trim().isEmpty()) {
HHOLDMODEDV = Byte.parseByte(s);
} else {
HHOLDMODEDV = Byte.MIN_VALUE;
}
}

protected final void initHHORIG(String s) {
if (!s.trim().isEmpty()) {
HHORIG = Byte.parseByte(s);
} else {
HHORIG = Byte.MIN_VALUE;
}
}

protected final void initHHRESP_DV(String s) {
if (!s.trim().isEmpty()) {
HHRESP_DV = Byte.parseByte(s);
} else {
HHRESP_DV = Byte.MIN_VALUE;
}
}

protected final void initHHTYPE_DV(String s) {
if (!s.trim().isEmpty()) {
HHTYPE_DV = Byte.parseByte(s);
} else {
HHTYPE_DV = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATD(String s) {
if (!s.trim().isEmpty()) {
HIENDDATD = Byte.parseByte(s);
} else {
HIENDDATD = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATHH(String s) {
if (!s.trim().isEmpty()) {
HIENDDATHH = Byte.parseByte(s);
} else {
HIENDDATHH = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATM(String s) {
if (!s.trim().isEmpty()) {
HIENDDATM = Byte.parseByte(s);
} else {
HIENDDATM = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATMM(String s) {
if (!s.trim().isEmpty()) {
HIENDDATMM = Byte.parseByte(s);
} else {
HIENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATSS(String s) {
if (!s.trim().isEmpty()) {
HIENDDATSS = Byte.parseByte(s);
} else {
HIENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initHIENDDATY(String s) {
if (!s.trim().isEmpty()) {
HIENDDATY = Short.parseShort(s);
} else {
HIENDDATY = Short.MIN_VALUE;
}
}

protected final void initHISTRTDATD(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATD = Byte.parseByte(s);
} else {
HISTRTDATD = Byte.MIN_VALUE;
}
}

protected final void initHISTRTDATHH(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATHH = Byte.parseByte(s);
} else {
HISTRTDATHH = Byte.MIN_VALUE;
}
}

protected final void initHISTRTDATM(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATM = Byte.parseByte(s);
} else {
HISTRTDATM = Byte.MIN_VALUE;
}
}

protected final void initHISTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATMM = Byte.parseByte(s);
} else {
HISTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initHISTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATSS = Byte.parseByte(s);
} else {
HISTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initHISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
HISTRTDATY = Short.parseShort(s);
} else {
HISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initHLIENG(String s) {
if (!s.trim().isEmpty()) {
HLIENG = Byte.parseByte(s);
} else {
HLIENG = Byte.MIN_VALUE;
}
}

protected final void initHLITRANS(String s) {
if (!s.trim().isEmpty()) {
HLITRANS = Byte.parseByte(s);
} else {
HLITRANS = Byte.MIN_VALUE;
}
}

protected final void initHLIWHO(String s) {
if (!s.trim().isEmpty()) {
HLIWHO = Byte.parseByte(s);
} else {
HLIWHO = Byte.MIN_VALUE;
}
}

protected final void initHOUSCOST1_DV(String s) {
if (!s.trim().isEmpty()) {
HOUSCOST1_DV = Double.parseDouble(s);
} else {
HOUSCOST1_DV = Double.NaN;
}
}

protected final void initHOUSCOST2_DV(String s) {
if (!s.trim().isEmpty()) {
HOUSCOST2_DV = Double.parseDouble(s);
} else {
HOUSCOST2_DV = Double.NaN;
}
}

protected final void initHRPID(String s) {
if (!s.trim().isEmpty()) {
HRPID = Integer.parseInt(s);
} else {
HRPID = Integer.MIN_VALUE;
}
}

protected final void initHRPNO(String s) {
if (!s.trim().isEmpty()) {
HRPNO = Byte.parseByte(s);
} else {
HRPNO = Byte.MIN_VALUE;
}
}

protected final void initHSBEDS(String s) {
if (!s.trim().isEmpty()) {
HSBEDS = Byte.parseByte(s);
} else {
HSBEDS = Byte.MIN_VALUE;
}
}

protected final void initHSCTAX(String s) {
if (!s.trim().isEmpty()) {
HSCTAX = Short.parseShort(s);
} else {
HSCTAX = Short.MIN_VALUE;
}
}

protected final void initHSOWND(String s) {
if (!s.trim().isEmpty()) {
HSOWND = Byte.parseByte(s);
} else {
HSOWND = Byte.MIN_VALUE;
}
}

protected final void initHSOWNDCHK(String s) {
if (!s.trim().isEmpty()) {
HSOWNDCHK = Byte.parseByte(s);
} else {
HSOWNDCHK = Byte.MIN_VALUE;
}
}

protected final void initHSOWR111(String s) {
if (!s.trim().isEmpty()) {
HSOWR111 = Short.parseShort(s);
} else {
HSOWR111 = Short.MIN_VALUE;
}
}

protected final void initHSOWR112(String s) {
if (!s.trim().isEmpty()) {
HSOWR112 = Short.parseShort(s);
} else {
HSOWR112 = Short.MIN_VALUE;
}
}

protected final void initHSOWR113(String s) {
if (!s.trim().isEmpty()) {
HSOWR113 = Byte.parseByte(s);
} else {
HSOWR113 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR114(String s) {
if (!s.trim().isEmpty()) {
HSOWR114 = Byte.parseByte(s);
} else {
HSOWR114 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR115(String s) {
if (!s.trim().isEmpty()) {
HSOWR115 = Byte.parseByte(s);
} else {
HSOWR115 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR116(String s) {
if (!s.trim().isEmpty()) {
HSOWR116 = Byte.parseByte(s);
} else {
HSOWR116 = Byte.MIN_VALUE;
}
}

protected final void initHSROOMCHK(String s) {
if (!s.trim().isEmpty()) {
HSROOMCHK = Byte.parseByte(s);
} else {
HSROOMCHK = Byte.MIN_VALUE;
}
}

protected final void initHSROOMS(String s) {
if (!s.trim().isEmpty()) {
HSROOMS = Byte.parseByte(s);
} else {
HSROOMS = Byte.MIN_VALUE;
}
}

protected final void initHSTOTMG(String s) {
if (!s.trim().isEmpty()) {
HSTOTMG = Integer.parseInt(s);
} else {
HSTOTMG = Integer.MIN_VALUE;
}
}

protected final void initIEQMOECD_DV(String s) {
if (!s.trim().isEmpty()) {
IEQMOECD_DV = Double.parseDouble(s);
} else {
IEQMOECD_DV = Double.NaN;
}
}

protected final void initINTDATEY(String s) {
if (!s.trim().isEmpty()) {
INTDATEY = Short.parseShort(s);
} else {
INTDATEY = Short.MIN_VALUE;
}
}

protected final void initINTNUM(String s) {
if (!s.trim().isEmpty()) {
INTNUM = Integer.parseInt(s);
} else {
INTNUM = Integer.MIN_VALUE;
}
}

protected final void initIVFHO(String s) {
if (!s.trim().isEmpty()) {
IVFHO = Short.parseShort(s);
} else {
IVFHO = Short.MIN_VALUE;
}
}

protected final void initIVH0(String s) {
if (!s.trim().isEmpty()) {
IVH0 = Short.parseShort(s);
} else {
IVH0 = Short.MIN_VALUE;
}
}

protected final void initIVH11(String s) {
if (!s.trim().isEmpty()) {
IVH11 = Short.parseShort(s);
} else {
IVH11 = Short.MIN_VALUE;
}
}

protected final void initIVH12(String s) {
if (!s.trim().isEmpty()) {
IVH12 = Short.parseShort(s);
} else {
IVH12 = Short.MIN_VALUE;
}
}

protected final void initIVH13(String s) {
if (!s.trim().isEmpty()) {
IVH13 = Byte.parseByte(s);
} else {
IVH13 = Byte.MIN_VALUE;
}
}

protected final void initIVH14(String s) {
if (!s.trim().isEmpty()) {
IVH14 = Byte.parseByte(s);
} else {
IVH14 = Byte.MIN_VALUE;
}
}

protected final void initIVH15(String s) {
if (!s.trim().isEmpty()) {
IVH15 = Byte.parseByte(s);
} else {
IVH15 = Byte.MIN_VALUE;
}
}

protected final void initIVH16(String s) {
if (!s.trim().isEmpty()) {
IVH16 = Byte.parseByte(s);
} else {
IVH16 = Byte.MIN_VALUE;
}
}

protected final void initMATDEPA(String s) {
if (!s.trim().isEmpty()) {
MATDEPA = Byte.parseByte(s);
} else {
MATDEPA = Byte.MIN_VALUE;
}
}

protected final void initMATDEPD(String s) {
if (!s.trim().isEmpty()) {
MATDEPD = Byte.parseByte(s);
} else {
MATDEPD = Byte.MIN_VALUE;
}
}

protected final void initMATDEPE(String s) {
if (!s.trim().isEmpty()) {
MATDEPE = Byte.parseByte(s);
} else {
MATDEPE = Byte.MIN_VALUE;
}
}

protected final void initMATDEPF(String s) {
if (!s.trim().isEmpty()) {
MATDEPF = Byte.parseByte(s);
} else {
MATDEPF = Byte.MIN_VALUE;
}
}

protected final void initMATDEPG(String s) {
if (!s.trim().isEmpty()) {
MATDEPG = Byte.parseByte(s);
} else {
MATDEPG = Byte.MIN_VALUE;
}
}

protected final void initMATDEPH(String s) {
if (!s.trim().isEmpty()) {
MATDEPH = Byte.parseByte(s);
} else {
MATDEPH = Byte.MIN_VALUE;
}
}

protected final void initMATDEPI(String s) {
if (!s.trim().isEmpty()) {
MATDEPI = Byte.parseByte(s);
} else {
MATDEPI = Byte.MIN_VALUE;
}
}

protected final void initMATDEPJ(String s) {
if (!s.trim().isEmpty()) {
MATDEPJ = Byte.parseByte(s);
} else {
MATDEPJ = Byte.MIN_VALUE;
}
}

protected final void initMGEXTRA(String s) {
if (!s.trim().isEmpty()) {
MGEXTRA = Short.parseShort(s);
} else {
MGEXTRA = Short.MIN_VALUE;
}
}

protected final void initMGNEW(String s) {
if (!s.trim().isEmpty()) {
MGNEW = Integer.parseInt(s);
} else {
MGNEW = Integer.MIN_VALUE;
}
}

protected final void initMGOLD(String s) {
if (!s.trim().isEmpty()) {
MGOLD = Integer.parseInt(s);
} else {
MGOLD = Integer.MIN_VALUE;
}
}

protected final void initMGTYPE(String s) {
if (!s.trim().isEmpty()) {
MGTYPE = Byte.parseByte(s);
} else {
MGTYPE = Byte.MIN_VALUE;
}
}

protected final void initMGXTY1(String s) {
if (!s.trim().isEmpty()) {
MGXTY1 = Short.parseShort(s);
} else {
MGXTY1 = Short.MIN_VALUE;
}
}

protected final void initMGXTY2(String s) {
if (!s.trim().isEmpty()) {
MGXTY2 = Short.parseShort(s);
} else {
MGXTY2 = Short.MIN_VALUE;
}
}

protected final void initMGXTY3(String s) {
if (!s.trim().isEmpty()) {
MGXTY3 = Short.parseShort(s);
} else {
MGXTY3 = Short.MIN_VALUE;
}
}

protected final void initMGXTY4(String s) {
if (!s.trim().isEmpty()) {
MGXTY4 = Short.parseShort(s);
} else {
MGXTY4 = Short.MIN_VALUE;
}
}

protected final void initMGXTY5(String s) {
if (!s.trim().isEmpty()) {
MGXTY5 = Byte.parseByte(s);
} else {
MGXTY5 = Byte.MIN_VALUE;
}
}

protected final void initMGXTY6(String s) {
if (!s.trim().isEmpty()) {
MGXTY6 = Byte.parseByte(s);
} else {
MGXTY6 = Byte.MIN_VALUE;
}
}

protected final void initMGXTY97(String s) {
if (!s.trim().isEmpty()) {
MGXTY97 = Byte.parseByte(s);
} else {
MGXTY97 = Byte.MIN_VALUE;
}
}

protected final void initMGYNOT(String s) {
if (!s.trim().isEmpty()) {
MGYNOT = Byte.parseByte(s);
} else {
MGYNOT = Byte.MIN_VALUE;
}
}

protected final void initMODETYPE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
MODETYPE = false;
} else {
MODETYPE = true;
}
}
}

protected final void initMONTH(String s) {
if (!s.trim().isEmpty()) {
MONTH = Byte.parseByte(s);
} else {
MONTH = Byte.MIN_VALUE;
}
}

protected final void initMORES(String s) {
if (!s.trim().isEmpty()) {
MORES = Byte.parseByte(s);
} else {
MORES = Byte.MIN_VALUE;
}
}

protected final void initN10TO15(String s) {
if (!s.trim().isEmpty()) {
N10TO15 = Byte.parseByte(s);
} else {
N10TO15 = Byte.MIN_VALUE;
}
}

protected final void initNADOECD_DV(String s) {
if (!s.trim().isEmpty()) {
NADOECD_DV = Byte.parseByte(s);
} else {
NADOECD_DV = Byte.MIN_VALUE;
}
}

protected final void initNCARS(String s) {
if (!s.trim().isEmpty()) {
NCARS = Byte.parseByte(s);
} else {
NCARS = Byte.MIN_VALUE;
}
}

protected final void initNCHOECD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHOECD_DV = Byte.parseByte(s);
} else {
NCHOECD_DV = Byte.MIN_VALUE;
}
}

protected final void initNCOUPLE_DV(String s) {
if (!s.trim().isEmpty()) {
NCOUPLE_DV = Short.parseShort(s);
} else {
NCOUPLE_DV = Short.MIN_VALUE;
}
}

protected final void initNKIDS015(String s) {
if (!s.trim().isEmpty()) {
NKIDS015 = Byte.parseByte(s);
} else {
NKIDS015 = Byte.MIN_VALUE;
}
}

protected final void initNKIDS05(String s) {
if (!s.trim().isEmpty()) {
NKIDS05 = Byte.parseByte(s);
} else {
NKIDS05 = Byte.MIN_VALUE;
}
}

protected final void initNKIDS615(String s) {
if (!s.trim().isEmpty()) {
NKIDS615 = Byte.parseByte(s);
} else {
NKIDS615 = Byte.MIN_VALUE;
}
}

protected final void initNOISYN(String s) {
if (!s.trim().isEmpty()) {
NOISYN = Byte.parseByte(s);
} else {
NOISYN = Byte.MIN_VALUE;
}
}

protected final void initNPENSIONER(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER = Byte.parseByte(s);
} else {
NPENSIONER = Byte.MIN_VALUE;
}
}

protected final void initNPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER_DV = Byte.parseByte(s);
} else {
NPENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initNUE_DV(String s) {
if (!s.trim().isEmpty()) {
NUE_DV = Byte.parseByte(s);
} else {
NUE_DV = Byte.MIN_VALUE;
}
}

protected final void initNWAGE_DV(String s) {
if (!s.trim().isEmpty()) {
NWAGE_DV = Short.parseShort(s);
} else {
NWAGE_DV = Short.MIN_VALUE;
}
}

protected final void initORIGADD(String s) {
if (!s.trim().isEmpty()) {
ORIGADD = Byte.parseByte(s);
} else {
ORIGADD = Byte.MIN_VALUE;
}
}

protected final void initOUTCOME(String s) {
if (!s.trim().isEmpty()) {
OUTCOME = Short.parseShort(s);
} else {
OUTCOME = Short.MIN_VALUE;
}
}

protected final void initPCBROAD(String s) {
if (!s.trim().isEmpty()) {
PCBROAD = Byte.parseByte(s);
} else {
PCBROAD = Byte.MIN_VALUE;
}
}

protected final void initPCHAS(String s) {
if (!s.trim().isEmpty()) {
PCHAS = Byte.parseByte(s);
} else {
PCHAS = Byte.MIN_VALUE;
}
}

protected final void initPCNET(String s) {
if (!s.trim().isEmpty()) {
PCNET = Short.parseShort(s);
} else {
PCNET = Short.MIN_VALUE;
}
}

protected final void initPDEPA1(String s) {
if (!s.trim().isEmpty()) {
PDEPA1 = Byte.parseByte(s);
} else {
PDEPA1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPA2(String s) {
if (!s.trim().isEmpty()) {
PDEPA2 = Byte.parseByte(s);
} else {
PDEPA2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPA3(String s) {
if (!s.trim().isEmpty()) {
PDEPA3 = Byte.parseByte(s);
} else {
PDEPA3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPA4(String s) {
if (!s.trim().isEmpty()) {
PDEPA4 = Byte.parseByte(s);
} else {
PDEPA4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPA5(String s) {
if (!s.trim().isEmpty()) {
PDEPA5 = Byte.parseByte(s);
} else {
PDEPA5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPA6(String s) {
if (!s.trim().isEmpty()) {
PDEPA6 = Byte.parseByte(s);
} else {
PDEPA6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPA7(String s) {
if (!s.trim().isEmpty()) {
PDEPA7 = Byte.parseByte(s);
} else {
PDEPA7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPA8(String s) {
if (!s.trim().isEmpty()) {
PDEPA8 = Byte.parseByte(s);
} else {
PDEPA8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPA97(String s) {
if (!s.trim().isEmpty()) {
PDEPA97 = Byte.parseByte(s);
} else {
PDEPA97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPB1(String s) {
if (!s.trim().isEmpty()) {
PDEPB1 = Byte.parseByte(s);
} else {
PDEPB1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPB2(String s) {
if (!s.trim().isEmpty()) {
PDEPB2 = Byte.parseByte(s);
} else {
PDEPB2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPB3(String s) {
if (!s.trim().isEmpty()) {
PDEPB3 = Byte.parseByte(s);
} else {
PDEPB3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPB4(String s) {
if (!s.trim().isEmpty()) {
PDEPB4 = Byte.parseByte(s);
} else {
PDEPB4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPB5(String s) {
if (!s.trim().isEmpty()) {
PDEPB5 = Byte.parseByte(s);
} else {
PDEPB5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPB6(String s) {
if (!s.trim().isEmpty()) {
PDEPB6 = Byte.parseByte(s);
} else {
PDEPB6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPB7(String s) {
if (!s.trim().isEmpty()) {
PDEPB7 = Byte.parseByte(s);
} else {
PDEPB7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPB8(String s) {
if (!s.trim().isEmpty()) {
PDEPB8 = Byte.parseByte(s);
} else {
PDEPB8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPB97(String s) {
if (!s.trim().isEmpty()) {
PDEPB97 = Byte.parseByte(s);
} else {
PDEPB97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPC1(String s) {
if (!s.trim().isEmpty()) {
PDEPC1 = Byte.parseByte(s);
} else {
PDEPC1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPC2(String s) {
if (!s.trim().isEmpty()) {
PDEPC2 = Byte.parseByte(s);
} else {
PDEPC2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPC3(String s) {
if (!s.trim().isEmpty()) {
PDEPC3 = Byte.parseByte(s);
} else {
PDEPC3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPC4(String s) {
if (!s.trim().isEmpty()) {
PDEPC4 = Byte.parseByte(s);
} else {
PDEPC4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPC5(String s) {
if (!s.trim().isEmpty()) {
PDEPC5 = Byte.parseByte(s);
} else {
PDEPC5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPC6(String s) {
if (!s.trim().isEmpty()) {
PDEPC6 = Byte.parseByte(s);
} else {
PDEPC6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPC7(String s) {
if (!s.trim().isEmpty()) {
PDEPC7 = Byte.parseByte(s);
} else {
PDEPC7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPC8(String s) {
if (!s.trim().isEmpty()) {
PDEPC8 = Byte.parseByte(s);
} else {
PDEPC8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPC97(String s) {
if (!s.trim().isEmpty()) {
PDEPC97 = Byte.parseByte(s);
} else {
PDEPC97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPD1(String s) {
if (!s.trim().isEmpty()) {
PDEPD1 = Byte.parseByte(s);
} else {
PDEPD1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPD2(String s) {
if (!s.trim().isEmpty()) {
PDEPD2 = Byte.parseByte(s);
} else {
PDEPD2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPD3(String s) {
if (!s.trim().isEmpty()) {
PDEPD3 = Byte.parseByte(s);
} else {
PDEPD3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPD4(String s) {
if (!s.trim().isEmpty()) {
PDEPD4 = Byte.parseByte(s);
} else {
PDEPD4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPD5(String s) {
if (!s.trim().isEmpty()) {
PDEPD5 = Byte.parseByte(s);
} else {
PDEPD5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPD6(String s) {
if (!s.trim().isEmpty()) {
PDEPD6 = Byte.parseByte(s);
} else {
PDEPD6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPD7(String s) {
if (!s.trim().isEmpty()) {
PDEPD7 = Byte.parseByte(s);
} else {
PDEPD7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPD8(String s) {
if (!s.trim().isEmpty()) {
PDEPD8 = Byte.parseByte(s);
} else {
PDEPD8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPD97(String s) {
if (!s.trim().isEmpty()) {
PDEPD97 = Byte.parseByte(s);
} else {
PDEPD97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPE1(String s) {
if (!s.trim().isEmpty()) {
PDEPE1 = Byte.parseByte(s);
} else {
PDEPE1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPE2(String s) {
if (!s.trim().isEmpty()) {
PDEPE2 = Byte.parseByte(s);
} else {
PDEPE2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPE3(String s) {
if (!s.trim().isEmpty()) {
PDEPE3 = Byte.parseByte(s);
} else {
PDEPE3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPE4(String s) {
if (!s.trim().isEmpty()) {
PDEPE4 = Byte.parseByte(s);
} else {
PDEPE4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPE5(String s) {
if (!s.trim().isEmpty()) {
PDEPE5 = Byte.parseByte(s);
} else {
PDEPE5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPE6(String s) {
if (!s.trim().isEmpty()) {
PDEPE6 = Byte.parseByte(s);
} else {
PDEPE6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPE7(String s) {
if (!s.trim().isEmpty()) {
PDEPE7 = Byte.parseByte(s);
} else {
PDEPE7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPE8(String s) {
if (!s.trim().isEmpty()) {
PDEPE8 = Byte.parseByte(s);
} else {
PDEPE8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPE97(String s) {
if (!s.trim().isEmpty()) {
PDEPE97 = Byte.parseByte(s);
} else {
PDEPE97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPF1(String s) {
if (!s.trim().isEmpty()) {
PDEPF1 = Byte.parseByte(s);
} else {
PDEPF1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPF2(String s) {
if (!s.trim().isEmpty()) {
PDEPF2 = Byte.parseByte(s);
} else {
PDEPF2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPF3(String s) {
if (!s.trim().isEmpty()) {
PDEPF3 = Byte.parseByte(s);
} else {
PDEPF3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPF4(String s) {
if (!s.trim().isEmpty()) {
PDEPF4 = Byte.parseByte(s);
} else {
PDEPF4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPF5(String s) {
if (!s.trim().isEmpty()) {
PDEPF5 = Byte.parseByte(s);
} else {
PDEPF5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPF6(String s) {
if (!s.trim().isEmpty()) {
PDEPF6 = Byte.parseByte(s);
} else {
PDEPF6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPF7(String s) {
if (!s.trim().isEmpty()) {
PDEPF7 = Byte.parseByte(s);
} else {
PDEPF7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPF8(String s) {
if (!s.trim().isEmpty()) {
PDEPF8 = Byte.parseByte(s);
} else {
PDEPF8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPF97(String s) {
if (!s.trim().isEmpty()) {
PDEPF97 = Byte.parseByte(s);
} else {
PDEPF97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPG1(String s) {
if (!s.trim().isEmpty()) {
PDEPG1 = Byte.parseByte(s);
} else {
PDEPG1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPG2(String s) {
if (!s.trim().isEmpty()) {
PDEPG2 = Byte.parseByte(s);
} else {
PDEPG2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPG3(String s) {
if (!s.trim().isEmpty()) {
PDEPG3 = Byte.parseByte(s);
} else {
PDEPG3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPG4(String s) {
if (!s.trim().isEmpty()) {
PDEPG4 = Byte.parseByte(s);
} else {
PDEPG4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPG5(String s) {
if (!s.trim().isEmpty()) {
PDEPG5 = Byte.parseByte(s);
} else {
PDEPG5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPG6(String s) {
if (!s.trim().isEmpty()) {
PDEPG6 = Byte.parseByte(s);
} else {
PDEPG6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPG7(String s) {
if (!s.trim().isEmpty()) {
PDEPG7 = Byte.parseByte(s);
} else {
PDEPG7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPG8(String s) {
if (!s.trim().isEmpty()) {
PDEPG8 = Byte.parseByte(s);
} else {
PDEPG8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPG97(String s) {
if (!s.trim().isEmpty()) {
PDEPG97 = Byte.parseByte(s);
} else {
PDEPG97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPH1(String s) {
if (!s.trim().isEmpty()) {
PDEPH1 = Byte.parseByte(s);
} else {
PDEPH1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPH2(String s) {
if (!s.trim().isEmpty()) {
PDEPH2 = Byte.parseByte(s);
} else {
PDEPH2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPH3(String s) {
if (!s.trim().isEmpty()) {
PDEPH3 = Byte.parseByte(s);
} else {
PDEPH3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPH4(String s) {
if (!s.trim().isEmpty()) {
PDEPH4 = Byte.parseByte(s);
} else {
PDEPH4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPH5(String s) {
if (!s.trim().isEmpty()) {
PDEPH5 = Byte.parseByte(s);
} else {
PDEPH5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPH6(String s) {
if (!s.trim().isEmpty()) {
PDEPH6 = Byte.parseByte(s);
} else {
PDEPH6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPH7(String s) {
if (!s.trim().isEmpty()) {
PDEPH7 = Byte.parseByte(s);
} else {
PDEPH7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPH8(String s) {
if (!s.trim().isEmpty()) {
PDEPH8 = Byte.parseByte(s);
} else {
PDEPH8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPH97(String s) {
if (!s.trim().isEmpty()) {
PDEPH97 = Byte.parseByte(s);
} else {
PDEPH97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPI1(String s) {
if (!s.trim().isEmpty()) {
PDEPI1 = Byte.parseByte(s);
} else {
PDEPI1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPI2(String s) {
if (!s.trim().isEmpty()) {
PDEPI2 = Byte.parseByte(s);
} else {
PDEPI2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPI3(String s) {
if (!s.trim().isEmpty()) {
PDEPI3 = Byte.parseByte(s);
} else {
PDEPI3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPI4(String s) {
if (!s.trim().isEmpty()) {
PDEPI4 = Byte.parseByte(s);
} else {
PDEPI4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPI5(String s) {
if (!s.trim().isEmpty()) {
PDEPI5 = Byte.parseByte(s);
} else {
PDEPI5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPI6(String s) {
if (!s.trim().isEmpty()) {
PDEPI6 = Byte.parseByte(s);
} else {
PDEPI6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPI7(String s) {
if (!s.trim().isEmpty()) {
PDEPI7 = Byte.parseByte(s);
} else {
PDEPI7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPI8(String s) {
if (!s.trim().isEmpty()) {
PDEPI8 = Byte.parseByte(s);
} else {
PDEPI8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPI97(String s) {
if (!s.trim().isEmpty()) {
PDEPI97 = Byte.parseByte(s);
} else {
PDEPI97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPK1(String s) {
if (!s.trim().isEmpty()) {
PDEPK1 = Byte.parseByte(s);
} else {
PDEPK1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPK2(String s) {
if (!s.trim().isEmpty()) {
PDEPK2 = Byte.parseByte(s);
} else {
PDEPK2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPK3(String s) {
if (!s.trim().isEmpty()) {
PDEPK3 = Byte.parseByte(s);
} else {
PDEPK3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPK4(String s) {
if (!s.trim().isEmpty()) {
PDEPK4 = Byte.parseByte(s);
} else {
PDEPK4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPK5(String s) {
if (!s.trim().isEmpty()) {
PDEPK5 = Byte.parseByte(s);
} else {
PDEPK5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPK6(String s) {
if (!s.trim().isEmpty()) {
PDEPK6 = Byte.parseByte(s);
} else {
PDEPK6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPK7(String s) {
if (!s.trim().isEmpty()) {
PDEPK7 = Byte.parseByte(s);
} else {
PDEPK7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPK8(String s) {
if (!s.trim().isEmpty()) {
PDEPK8 = Byte.parseByte(s);
} else {
PDEPK8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPK97(String s) {
if (!s.trim().isEmpty()) {
PDEPK97 = Byte.parseByte(s);
} else {
PDEPK97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPL1(String s) {
if (!s.trim().isEmpty()) {
PDEPL1 = Byte.parseByte(s);
} else {
PDEPL1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPL2(String s) {
if (!s.trim().isEmpty()) {
PDEPL2 = Byte.parseByte(s);
} else {
PDEPL2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPL3(String s) {
if (!s.trim().isEmpty()) {
PDEPL3 = Byte.parseByte(s);
} else {
PDEPL3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPL4(String s) {
if (!s.trim().isEmpty()) {
PDEPL4 = Byte.parseByte(s);
} else {
PDEPL4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPL5(String s) {
if (!s.trim().isEmpty()) {
PDEPL5 = Byte.parseByte(s);
} else {
PDEPL5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPL6(String s) {
if (!s.trim().isEmpty()) {
PDEPL6 = Byte.parseByte(s);
} else {
PDEPL6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPL7(String s) {
if (!s.trim().isEmpty()) {
PDEPL7 = Byte.parseByte(s);
} else {
PDEPL7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPL8(String s) {
if (!s.trim().isEmpty()) {
PDEPL8 = Byte.parseByte(s);
} else {
PDEPL8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPL97(String s) {
if (!s.trim().isEmpty()) {
PDEPL97 = Byte.parseByte(s);
} else {
PDEPL97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPM1(String s) {
if (!s.trim().isEmpty()) {
PDEPM1 = Byte.parseByte(s);
} else {
PDEPM1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPM2(String s) {
if (!s.trim().isEmpty()) {
PDEPM2 = Byte.parseByte(s);
} else {
PDEPM2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPM3(String s) {
if (!s.trim().isEmpty()) {
PDEPM3 = Byte.parseByte(s);
} else {
PDEPM3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPM4(String s) {
if (!s.trim().isEmpty()) {
PDEPM4 = Byte.parseByte(s);
} else {
PDEPM4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPM5(String s) {
if (!s.trim().isEmpty()) {
PDEPM5 = Byte.parseByte(s);
} else {
PDEPM5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPM6(String s) {
if (!s.trim().isEmpty()) {
PDEPM6 = Byte.parseByte(s);
} else {
PDEPM6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPM7(String s) {
if (!s.trim().isEmpty()) {
PDEPM7 = Byte.parseByte(s);
} else {
PDEPM7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPM8(String s) {
if (!s.trim().isEmpty()) {
PDEPM8 = Byte.parseByte(s);
} else {
PDEPM8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPM97(String s) {
if (!s.trim().isEmpty()) {
PDEPM97 = Byte.parseByte(s);
} else {
PDEPM97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPN1(String s) {
if (!s.trim().isEmpty()) {
PDEPN1 = Byte.parseByte(s);
} else {
PDEPN1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPN2(String s) {
if (!s.trim().isEmpty()) {
PDEPN2 = Byte.parseByte(s);
} else {
PDEPN2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPN3(String s) {
if (!s.trim().isEmpty()) {
PDEPN3 = Byte.parseByte(s);
} else {
PDEPN3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPN4(String s) {
if (!s.trim().isEmpty()) {
PDEPN4 = Byte.parseByte(s);
} else {
PDEPN4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPN5(String s) {
if (!s.trim().isEmpty()) {
PDEPN5 = Byte.parseByte(s);
} else {
PDEPN5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPN6(String s) {
if (!s.trim().isEmpty()) {
PDEPN6 = Byte.parseByte(s);
} else {
PDEPN6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPN7(String s) {
if (!s.trim().isEmpty()) {
PDEPN7 = Byte.parseByte(s);
} else {
PDEPN7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPN8(String s) {
if (!s.trim().isEmpty()) {
PDEPN8 = Byte.parseByte(s);
} else {
PDEPN8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPN97(String s) {
if (!s.trim().isEmpty()) {
PDEPN97 = Byte.parseByte(s);
} else {
PDEPN97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPO1(String s) {
if (!s.trim().isEmpty()) {
PDEPO1 = Byte.parseByte(s);
} else {
PDEPO1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPO2(String s) {
if (!s.trim().isEmpty()) {
PDEPO2 = Byte.parseByte(s);
} else {
PDEPO2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPO3(String s) {
if (!s.trim().isEmpty()) {
PDEPO3 = Byte.parseByte(s);
} else {
PDEPO3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPO4(String s) {
if (!s.trim().isEmpty()) {
PDEPO4 = Byte.parseByte(s);
} else {
PDEPO4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPO5(String s) {
if (!s.trim().isEmpty()) {
PDEPO5 = Byte.parseByte(s);
} else {
PDEPO5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPO6(String s) {
if (!s.trim().isEmpty()) {
PDEPO6 = Byte.parseByte(s);
} else {
PDEPO6 = Byte.MIN_VALUE;
}
}

protected final void initPDEPO7(String s) {
if (!s.trim().isEmpty()) {
PDEPO7 = Byte.parseByte(s);
} else {
PDEPO7 = Byte.MIN_VALUE;
}
}

protected final void initPDEPO8(String s) {
if (!s.trim().isEmpty()) {
PDEPO8 = Byte.parseByte(s);
} else {
PDEPO8 = Byte.MIN_VALUE;
}
}

protected final void initPDEPO97(String s) {
if (!s.trim().isEmpty()) {
PDEPO97 = Byte.parseByte(s);
} else {
PDEPO97 = Byte.MIN_VALUE;
}
}

protected final void initPDEPOH1(String s) {
if (!s.trim().isEmpty()) {
PDEPOH1 = Byte.parseByte(s);
} else {
PDEPOH1 = Byte.MIN_VALUE;
}
}

protected final void initPDEPOH2(String s) {
if (!s.trim().isEmpty()) {
PDEPOH2 = Byte.parseByte(s);
} else {
PDEPOH2 = Byte.MIN_VALUE;
}
}

protected final void initPDEPOH3(String s) {
if (!s.trim().isEmpty()) {
PDEPOH3 = Byte.parseByte(s);
} else {
PDEPOH3 = Byte.MIN_VALUE;
}
}

protected final void initPDEPOH4(String s) {
if (!s.trim().isEmpty()) {
PDEPOH4 = Byte.parseByte(s);
} else {
PDEPOH4 = Byte.MIN_VALUE;
}
}

protected final void initPDEPOH5(String s) {
if (!s.trim().isEmpty()) {
PDEPOH5 = Byte.parseByte(s);
} else {
PDEPOH5 = Byte.MIN_VALUE;
}
}

protected final void initPDEPOH97(String s) {
if (!s.trim().isEmpty()) {
PDEPOH97 = Byte.parseByte(s);
} else {
PDEPOH97 = Byte.MIN_VALUE;
}
}

protected final void initPSU(String s) {
if (!s.trim().isEmpty()) {
PSU = Integer.parseInt(s);
} else {
PSU = Integer.MIN_VALUE;
}
}

protected final void initQUARTER(String s) {
if (!s.trim().isEmpty()) {
QUARTER = Byte.parseByte(s);
} else {
QUARTER = Byte.MIN_VALUE;
}
}

protected final void initRENTG(String s) {
if (!s.trim().isEmpty()) {
RENTG = Short.parseShort(s);
} else {
RENTG = Short.MIN_VALUE;
}
}

protected final void initRENTGRS_DV(String s) {
if (!s.trim().isEmpty()) {
RENTGRS_DV = Double.parseDouble(s);
} else {
RENTGRS_DV = Double.NaN;
}
}

protected final void initRENTGRS_IF(String s) {
if (!s.trim().isEmpty()) {
RENTGRS_IF = Byte.parseByte(s);
} else {
RENTGRS_IF = Byte.MIN_VALUE;
}
}

protected final void initRENTHB(String s) {
if (!s.trim().isEmpty()) {
RENTHB = Byte.parseByte(s);
} else {
RENTHB = Byte.MIN_VALUE;
}
}

protected final void initRENTINC1(String s) {
if (!s.trim().isEmpty()) {
RENTINC1 = Byte.parseByte(s);
} else {
RENTINC1 = Byte.MIN_VALUE;
}
}

protected final void initRENTINC2(String s) {
if (!s.trim().isEmpty()) {
RENTINC2 = Byte.parseByte(s);
} else {
RENTINC2 = Byte.MIN_VALUE;
}
}

protected final void initRENTINC3(String s) {
if (!s.trim().isEmpty()) {
RENTINC3 = Byte.parseByte(s);
} else {
RENTINC3 = Byte.MIN_VALUE;
}
}

protected final void initRENTINC96(String s) {
if (!s.trim().isEmpty()) {
RENTINC96 = Byte.parseByte(s);
} else {
RENTINC96 = Byte.MIN_VALUE;
}
}

protected final void initRENTP11(String s) {
if (!s.trim().isEmpty()) {
RENTP11 = Short.parseShort(s);
} else {
RENTP11 = Short.MIN_VALUE;
}
}

protected final void initRENTP12(String s) {
if (!s.trim().isEmpty()) {
RENTP12 = Short.parseShort(s);
} else {
RENTP12 = Short.MIN_VALUE;
}
}

protected final void initRENTP13(String s) {
if (!s.trim().isEmpty()) {
RENTP13 = Byte.parseByte(s);
} else {
RENTP13 = Byte.MIN_VALUE;
}
}

protected final void initRENTP14(String s) {
if (!s.trim().isEmpty()) {
RENTP14 = Byte.parseByte(s);
} else {
RENTP14 = Byte.MIN_VALUE;
}
}

protected final void initRENTP15(String s) {
if (!s.trim().isEmpty()) {
RENTP15 = Byte.parseByte(s);
} else {
RENTP15 = Byte.MIN_VALUE;
}
}

protected final void initRENTP16(String s) {
if (!s.trim().isEmpty()) {
RENTP16 = Byte.parseByte(s);
} else {
RENTP16 = Byte.MIN_VALUE;
}
}

protected final void initRENTWC(String s) {
if (!s.trim().isEmpty()) {
RENTWC = Byte.parseByte(s);
} else {
RENTWC = Byte.MIN_VALUE;
}
}

protected final void initRENT_DV(String s) {
if (!s.trim().isEmpty()) {
RENT_DV = Double.parseDouble(s);
} else {
RENT_DV = Double.NaN;
}
}

protected final void initSTRATA(String s) {
if (!s.trim().isEmpty()) {
STRATA = Short.parseShort(s);
} else {
STRATA = Short.MIN_VALUE;
}
}

protected final void initTENURE_DV(String s) {
if (!s.trim().isEmpty()) {
TENURE_DV = Short.parseShort(s);
} else {
TENURE_DV = Short.MIN_VALUE;
}
}

protected final void initURBAN_DV(String s) {
if (!s.trim().isEmpty()) {
URBAN_DV = Byte.parseByte(s);
} else {
URBAN_DV = Byte.MIN_VALUE;
}
}

protected final void initXPALTOB_G3(String s) {
if (!s.trim().isEmpty()) {
XPALTOB_G3 = Short.parseShort(s);
} else {
XPALTOB_G3 = Short.MIN_VALUE;
}
}

protected final void initXPDUELY(String s) {
if (!s.trim().isEmpty()) {
XPDUELY = Short.parseShort(s);
} else {
XPDUELY = Short.MIN_VALUE;
}
}

protected final void initXPELECY(String s) {
if (!s.trim().isEmpty()) {
XPELECY = Short.parseShort(s);
} else {
XPELECY = Short.MIN_VALUE;
}
}

protected final void initXPFDOUT_G3(String s) {
if (!s.trim().isEmpty()) {
XPFDOUT_G3 = Short.parseShort(s);
} else {
XPFDOUT_G3 = Short.MIN_VALUE;
}
}

protected final void initXPFOOD1_G3(String s) {
if (!s.trim().isEmpty()) {
XPFOOD1_G3 = Short.parseShort(s);
} else {
XPFOOD1_G3 = Short.MIN_VALUE;
}
}

protected final void initXPGASY(String s) {
if (!s.trim().isEmpty()) {
XPGASY = Short.parseShort(s);
} else {
XPGASY = Short.MIN_VALUE;
}
}

protected final void initXPHSDBA(String s) {
if (!s.trim().isEmpty()) {
XPHSDBA = Byte.parseByte(s);
} else {
XPHSDBA = Byte.MIN_VALUE;
}
}

protected final void initXPHSDCT(String s) {
if (!s.trim().isEmpty()) {
XPHSDCT = Byte.parseByte(s);
} else {
XPHSDCT = Byte.MIN_VALUE;
}
}

protected final void initXPMGINT_DV(String s) {
if (!s.trim().isEmpty()) {
XPMGINT_DV = Double.parseDouble(s);
} else {
XPMGINT_DV = Double.NaN;
}
}

protected final void initXPMG_DV(String s) {
if (!s.trim().isEmpty()) {
XPMG_DV = Double.parseDouble(s);
} else {
XPMG_DV = Double.NaN;
}
}

protected final void initXPMG_IF(String s) {
if (!s.trim().isEmpty()) {
XPMG_IF = Byte.parseByte(s);
} else {
XPMG_IF = Byte.MIN_VALUE;
}
}

protected final void initXPOILY(String s) {
if (!s.trim().isEmpty()) {
XPOILY = Short.parseShort(s);
} else {
XPOILY = Short.MIN_VALUE;
}
}

protected final void initXPSFLY(String s) {
if (!s.trim().isEmpty()) {
XPSFLY = Short.parseShort(s);
} else {
XPSFLY = Short.MIN_VALUE;
}
}

public byte getADDRCHCK() {
return ADDRCHCK;
}

public int getCARVAL() {
return CARVAL;
}

public byte getCDELPLY() {
return CDELPLY;
}

public byte getCDEPDO2() {
return CDEPDO2;
}

public byte getCDEPDO3() {
return CDEPDO3;
}

public byte getCDEPDO4() {
return CDEPDO4;
}

public byte getCDEPDO5() {
return CDEPDO5;
}

public byte getCDEPDO6() {
return CDEPDO6;
}

public byte getCDEPHAVE1() {
return CDEPHAVE1;
}

public byte getCDEPHAVE2() {
return CDEPHAVE2;
}

public byte getCDEPHAVE3() {
return CDEPHAVE3;
}

public byte getCDEPHAVE4() {
return CDEPHAVE4;
}

public byte getCDEPTRP() {
return CDEPTRP;
}

public short getCDUSE10() {
return CDUSE10;
}

public short getCDUSE11() {
return CDUSE11;
}

public short getCDUSE12() {
return CDUSE12;
}

public byte getCDUSE13() {
return CDUSE13;
}

public short getCDUSE3() {
return CDUSE3;
}

public short getCDUSE4() {
return CDUSE4;
}

public byte getCDUSE5() {
return CDUSE5;
}

public byte getCDUSE7() {
return CDUSE7;
}

public byte getCORDET1() {
return CORDET1;
}

public byte getCORDET10() {
return CORDET10;
}

public byte getCORDET11() {
return CORDET11;
}

public byte getCORDET12() {
return CORDET12;
}

public byte getCORDET13() {
return CORDET13;
}

public byte getCORDET14() {
return CORDET14;
}

public byte getCORDET15() {
return CORDET15;
}

public byte getCORDET16() {
return CORDET16;
}

public byte getCORDET17() {
return CORDET17;
}

public byte getCORDET18() {
return CORDET18;
}

public byte getCORDET19() {
return CORDET19;
}

public byte getCORDET2() {
return CORDET2;
}

public byte getCORDET20() {
return CORDET20;
}

public byte getCORDET21() {
return CORDET21;
}

public byte getCORDET22() {
return CORDET22;
}

public byte getCORDET23() {
return CORDET23;
}

public byte getCORDET24() {
return CORDET24;
}

public byte getCORDET25() {
return CORDET25;
}

public byte getCORDET26() {
return CORDET26;
}

public byte getCORDET27() {
return CORDET27;
}

public byte getCORDET28() {
return CORDET28;
}

public byte getCORDET29() {
return CORDET29;
}

public byte getCORDET3() {
return CORDET3;
}

public byte getCORDET30() {
return CORDET30;
}

public byte getCORDET31() {
return CORDET31;
}

public byte getCORDET32() {
return CORDET32;
}

public byte getCORDET4() {
return CORDET4;
}

public byte getCORDET5() {
return CORDET5;
}

public byte getCORDET6() {
return CORDET6;
}

public byte getCORDET7() {
return CORDET7;
}

public byte getCORDET8() {
return CORDET8;
}

public byte getCORDET9() {
return CORDET9;
}

public byte getCORDET96() {
return CORDET96;
}

public byte getCORESWHO1() {
return CORESWHO1;
}

public byte getCORESWHO10() {
return CORESWHO10;
}

public byte getCORESWHO11() {
return CORESWHO11;
}

public byte getCORESWHO12() {
return CORESWHO12;
}

public byte getCORESWHO13() {
return CORESWHO13;
}

public byte getCORESWHO14() {
return CORESWHO14;
}

public byte getCORESWHO15() {
return CORESWHO15;
}

public byte getCORESWHO16() {
return CORESWHO16;
}

public byte getCORESWHO2() {
return CORESWHO2;
}

public byte getCORESWHO3() {
return CORESWHO3;
}

public byte getCORESWHO4() {
return CORESWHO4;
}

public byte getCORESWHO5() {
return CORESWHO5;
}

public byte getCORESWHO6() {
return CORESWHO6;
}

public byte getCORESWHO7() {
return CORESWHO7;
}

public byte getCORESWHO8() {
return CORESWHO8;
}

public byte getCORESWHO9() {
return CORESWHO9;
}

public byte getCORESWHO96() {
return CORESWHO96;
}

public byte getCOUNTRY() {
return COUNTRY;
}

public byte getCPLAY() {
return CPLAY;
}

public byte getCRBURG() {
return CRBURG;
}

public byte getCRCAR() {
return CRCAR;
}

public byte getCRDRNK() {
return CRDRNK;
}

public byte getCRGRAF() {
return CRGRAF;
}

public byte getCRMUGG() {
return CRMUGG;
}

public byte getCRRACE() {
return CRRACE;
}

public byte getCRRUBSH() {
return CRRUBSH;
}

public byte getCRTEEN() {
return CRTEEN;
}

public byte getCRVAND() {
return CRVAND;
}

public byte getDUELPAY() {
return DUELPAY;
}

public byte getELECPAY() {
return ELECPAY;
}

public byte getFHSBEDS() {
return FHSBEDS;
}

public byte getFHSOWND() {
return FHSOWND;
}

public byte getFHSROOMS() {
return FHSROOMS;
}

protected double FIHHMNGRS1_DV() {
return FIHHMNGRS1_DV;
}

protected double FIHHMNGRS_IF() {
return FIHHMNGRS_IF;
}

public byte getFIHHMNGRS_TC() {
return FIHHMNGRS_TC;
}

protected double FIHHMNINV_DV() {
return FIHHMNINV_DV;
}

protected double FIHHMNLABGRS_DV() {
return FIHHMNLABGRS_DV;
}

public byte getFIHHMNLABGRS_TC() {
return FIHHMNLABGRS_TC;
}

protected double FIHHMNLABNET_DV() {
return FIHHMNLABNET_DV;
}

protected double FIHHMNMISC_DV() {
return FIHHMNMISC_DV;
}

protected double FIHHMNNET1_DV() {
return FIHHMNNET1_DV;
}

protected double FIHHMNPEN_DV() {
return FIHHMNPEN_DV;
}

protected double FIHHMNPRBEN_DV() {
return FIHHMNPRBEN_DV;
}

protected double FIHHMNSBEN_DV() {
return FIHHMNSBEN_DV;
}

public byte getFIHHNEGSEI_IF() {
return FIHHNEGSEI_IF;
}

public byte getFUELDUEL() {
return FUELDUEL;
}

public byte getFUELHAVE1() {
return FUELHAVE1;
}

public byte getFUELHAVE2() {
return FUELHAVE2;
}

public byte getFUELHAVE3() {
return FUELHAVE3;
}

public byte getFUELHAVE4() {
return FUELHAVE4;
}

public byte getFUELHAVE96() {
return FUELHAVE96;
}

public byte getGASPAY() {
return GASPAY;
}

public byte getGRIMYN() {
return GRIMYN;
}

protected double HBADJUST_DV() {
return HBADJUST_DV;
}

public byte getHGENDDATD() {
return HGENDDATD;
}

public byte getHGENDDATHH() {
return HGENDDATHH;
}

public byte getHGENDDATM() {
return HGENDDATM;
}

public byte getHGENDDATMM() {
return HGENDDATMM;
}

public byte getHGENDDATSS() {
return HGENDDATSS;
}

public short getHGENDDATY() {
return HGENDDATY;
}

public byte getHGLIENG() {
return HGLIENG;
}

public byte getHGLITRANS() {
return HGLITRANS;
}

public byte getHGSTRTDATD() {
return HGSTRTDATD;
}

public byte getHGSTRTDATHH() {
return HGSTRTDATHH;
}

public byte getHGSTRTDATM() {
return HGSTRTDATM;
}

public byte getHGSTRTDATMM() {
return HGSTRTDATMM;
}

public byte getHGSTRTDATSS() {
return HGSTRTDATSS;
}

public short getHGSTRTDATY() {
return HGSTRTDATY;
}

protected double HHDENUB_XW() {
return HHDENUB_XW;
}

protected double HHDENUI_XW() {
return HHDENUI_XW;
}

public byte getHHEAT() {
return HHEAT;
}

public byte getHHINTLANG() {
return HHINTLANG;
}

public byte getHHLANG() {
return HHLANG;
}

public byte getHHOLDMODEDV() {
return HHOLDMODEDV;
}

public byte getHHORIG() {
return HHORIG;
}

public byte getHHRESP_DV() {
return HHRESP_DV;
}

public byte getHHTYPE_DV() {
return HHTYPE_DV;
}

public byte getHIENDDATD() {
return HIENDDATD;
}

public byte getHIENDDATHH() {
return HIENDDATHH;
}

public byte getHIENDDATM() {
return HIENDDATM;
}

public byte getHIENDDATMM() {
return HIENDDATMM;
}

public byte getHIENDDATSS() {
return HIENDDATSS;
}

public short getHIENDDATY() {
return HIENDDATY;
}

public byte getHISTRTDATD() {
return HISTRTDATD;
}

public byte getHISTRTDATHH() {
return HISTRTDATHH;
}

public byte getHISTRTDATM() {
return HISTRTDATM;
}

public byte getHISTRTDATMM() {
return HISTRTDATMM;
}

public byte getHISTRTDATSS() {
return HISTRTDATSS;
}

public short getHISTRTDATY() {
return HISTRTDATY;
}

public byte getHLIENG() {
return HLIENG;
}

public byte getHLITRANS() {
return HLITRANS;
}

public byte getHLIWHO() {
return HLIWHO;
}

protected double HOUSCOST1_DV() {
return HOUSCOST1_DV;
}

protected double HOUSCOST2_DV() {
return HOUSCOST2_DV;
}

public int getHRPID() {
return HRPID;
}

public byte getHRPNO() {
return HRPNO;
}

public byte getHSBEDS() {
return HSBEDS;
}

public short getHSCTAX() {
return HSCTAX;
}

public byte getHSOWND() {
return HSOWND;
}

public byte getHSOWNDCHK() {
return HSOWNDCHK;
}

public short getHSOWR111() {
return HSOWR111;
}

public short getHSOWR112() {
return HSOWR112;
}

public byte getHSOWR113() {
return HSOWR113;
}

public byte getHSOWR114() {
return HSOWR114;
}

public byte getHSOWR115() {
return HSOWR115;
}

public byte getHSOWR116() {
return HSOWR116;
}

public byte getHSROOMCHK() {
return HSROOMCHK;
}

public byte getHSROOMS() {
return HSROOMS;
}

public int getHSTOTMG() {
return HSTOTMG;
}

protected double IEQMOECD_DV() {
return IEQMOECD_DV;
}

public short getINTDATEY() {
return INTDATEY;
}

public int getINTNUM() {
return INTNUM;
}

public short getIVFHO() {
return IVFHO;
}

public short getIVH0() {
return IVH0;
}

public short getIVH11() {
return IVH11;
}

public short getIVH12() {
return IVH12;
}

public byte getIVH13() {
return IVH13;
}

public byte getIVH14() {
return IVH14;
}

public byte getIVH15() {
return IVH15;
}

public byte getIVH16() {
return IVH16;
}

public byte getMATDEPA() {
return MATDEPA;
}

public byte getMATDEPD() {
return MATDEPD;
}

public byte getMATDEPE() {
return MATDEPE;
}

public byte getMATDEPF() {
return MATDEPF;
}

public byte getMATDEPG() {
return MATDEPG;
}

public byte getMATDEPH() {
return MATDEPH;
}

public byte getMATDEPI() {
return MATDEPI;
}

public byte getMATDEPJ() {
return MATDEPJ;
}

public short getMGEXTRA() {
return MGEXTRA;
}

public int getMGNEW() {
return MGNEW;
}

public int getMGOLD() {
return MGOLD;
}

public byte getMGTYPE() {
return MGTYPE;
}

public short getMGXTY1() {
return MGXTY1;
}

public short getMGXTY2() {
return MGXTY2;
}

public short getMGXTY3() {
return MGXTY3;
}

public short getMGXTY4() {
return MGXTY4;
}

public byte getMGXTY5() {
return MGXTY5;
}

public byte getMGXTY6() {
return MGXTY6;
}

public byte getMGXTY97() {
return MGXTY97;
}

public byte getMGYNOT() {
return MGYNOT;
}

public boolean getMODETYPE() {
return MODETYPE;
}

public byte getMONTH() {
return MONTH;
}

public byte getMORES() {
return MORES;
}

public byte getN10TO15() {
return N10TO15;
}

public byte getNADOECD_DV() {
return NADOECD_DV;
}

public byte getNCARS() {
return NCARS;
}

public byte getNCHOECD_DV() {
return NCHOECD_DV;
}

public short getNCOUPLE_DV() {
return NCOUPLE_DV;
}

public byte getNKIDS015() {
return NKIDS015;
}

public byte getNKIDS05() {
return NKIDS05;
}

public byte getNKIDS615() {
return NKIDS615;
}

public byte getNOISYN() {
return NOISYN;
}

public byte getNPENSIONER() {
return NPENSIONER;
}

public byte getNPENSIONER_DV() {
return NPENSIONER_DV;
}

public byte getNUE_DV() {
return NUE_DV;
}

public short getNWAGE_DV() {
return NWAGE_DV;
}

public byte getORIGADD() {
return ORIGADD;
}

public short getOUTCOME() {
return OUTCOME;
}

public byte getPCBROAD() {
return PCBROAD;
}

public byte getPCHAS() {
return PCHAS;
}

public short getPCNET() {
return PCNET;
}

public byte getPDEPA1() {
return PDEPA1;
}

public byte getPDEPA2() {
return PDEPA2;
}

public byte getPDEPA3() {
return PDEPA3;
}

public byte getPDEPA4() {
return PDEPA4;
}

public byte getPDEPA5() {
return PDEPA5;
}

public byte getPDEPA6() {
return PDEPA6;
}

public byte getPDEPA7() {
return PDEPA7;
}

public byte getPDEPA8() {
return PDEPA8;
}

public byte getPDEPA97() {
return PDEPA97;
}

public byte getPDEPB1() {
return PDEPB1;
}

public byte getPDEPB2() {
return PDEPB2;
}

public byte getPDEPB3() {
return PDEPB3;
}

public byte getPDEPB4() {
return PDEPB4;
}

public byte getPDEPB5() {
return PDEPB5;
}

public byte getPDEPB6() {
return PDEPB6;
}

public byte getPDEPB7() {
return PDEPB7;
}

public byte getPDEPB8() {
return PDEPB8;
}

public byte getPDEPB97() {
return PDEPB97;
}

public byte getPDEPC1() {
return PDEPC1;
}

public byte getPDEPC2() {
return PDEPC2;
}

public byte getPDEPC3() {
return PDEPC3;
}

public byte getPDEPC4() {
return PDEPC4;
}

public byte getPDEPC5() {
return PDEPC5;
}

public byte getPDEPC6() {
return PDEPC6;
}

public byte getPDEPC7() {
return PDEPC7;
}

public byte getPDEPC8() {
return PDEPC8;
}

public byte getPDEPC97() {
return PDEPC97;
}

public byte getPDEPD1() {
return PDEPD1;
}

public byte getPDEPD2() {
return PDEPD2;
}

public byte getPDEPD3() {
return PDEPD3;
}

public byte getPDEPD4() {
return PDEPD4;
}

public byte getPDEPD5() {
return PDEPD5;
}

public byte getPDEPD6() {
return PDEPD6;
}

public byte getPDEPD7() {
return PDEPD7;
}

public byte getPDEPD8() {
return PDEPD8;
}

public byte getPDEPD97() {
return PDEPD97;
}

public byte getPDEPE1() {
return PDEPE1;
}

public byte getPDEPE2() {
return PDEPE2;
}

public byte getPDEPE3() {
return PDEPE3;
}

public byte getPDEPE4() {
return PDEPE4;
}

public byte getPDEPE5() {
return PDEPE5;
}

public byte getPDEPE6() {
return PDEPE6;
}

public byte getPDEPE7() {
return PDEPE7;
}

public byte getPDEPE8() {
return PDEPE8;
}

public byte getPDEPE97() {
return PDEPE97;
}

public byte getPDEPF1() {
return PDEPF1;
}

public byte getPDEPF2() {
return PDEPF2;
}

public byte getPDEPF3() {
return PDEPF3;
}

public byte getPDEPF4() {
return PDEPF4;
}

public byte getPDEPF5() {
return PDEPF5;
}

public byte getPDEPF6() {
return PDEPF6;
}

public byte getPDEPF7() {
return PDEPF7;
}

public byte getPDEPF8() {
return PDEPF8;
}

public byte getPDEPF97() {
return PDEPF97;
}

public byte getPDEPG1() {
return PDEPG1;
}

public byte getPDEPG2() {
return PDEPG2;
}

public byte getPDEPG3() {
return PDEPG3;
}

public byte getPDEPG4() {
return PDEPG4;
}

public byte getPDEPG5() {
return PDEPG5;
}

public byte getPDEPG6() {
return PDEPG6;
}

public byte getPDEPG7() {
return PDEPG7;
}

public byte getPDEPG8() {
return PDEPG8;
}

public byte getPDEPG97() {
return PDEPG97;
}

public byte getPDEPH1() {
return PDEPH1;
}

public byte getPDEPH2() {
return PDEPH2;
}

public byte getPDEPH3() {
return PDEPH3;
}

public byte getPDEPH4() {
return PDEPH4;
}

public byte getPDEPH5() {
return PDEPH5;
}

public byte getPDEPH6() {
return PDEPH6;
}

public byte getPDEPH7() {
return PDEPH7;
}

public byte getPDEPH8() {
return PDEPH8;
}

public byte getPDEPH97() {
return PDEPH97;
}

public byte getPDEPI1() {
return PDEPI1;
}

public byte getPDEPI2() {
return PDEPI2;
}

public byte getPDEPI3() {
return PDEPI3;
}

public byte getPDEPI4() {
return PDEPI4;
}

public byte getPDEPI5() {
return PDEPI5;
}

public byte getPDEPI6() {
return PDEPI6;
}

public byte getPDEPI7() {
return PDEPI7;
}

public byte getPDEPI8() {
return PDEPI8;
}

public byte getPDEPI97() {
return PDEPI97;
}

public byte getPDEPK1() {
return PDEPK1;
}

public byte getPDEPK2() {
return PDEPK2;
}

public byte getPDEPK3() {
return PDEPK3;
}

public byte getPDEPK4() {
return PDEPK4;
}

public byte getPDEPK5() {
return PDEPK5;
}

public byte getPDEPK6() {
return PDEPK6;
}

public byte getPDEPK7() {
return PDEPK7;
}

public byte getPDEPK8() {
return PDEPK8;
}

public byte getPDEPK97() {
return PDEPK97;
}

public byte getPDEPL1() {
return PDEPL1;
}

public byte getPDEPL2() {
return PDEPL2;
}

public byte getPDEPL3() {
return PDEPL3;
}

public byte getPDEPL4() {
return PDEPL4;
}

public byte getPDEPL5() {
return PDEPL5;
}

public byte getPDEPL6() {
return PDEPL6;
}

public byte getPDEPL7() {
return PDEPL7;
}

public byte getPDEPL8() {
return PDEPL8;
}

public byte getPDEPL97() {
return PDEPL97;
}

public byte getPDEPM1() {
return PDEPM1;
}

public byte getPDEPM2() {
return PDEPM2;
}

public byte getPDEPM3() {
return PDEPM3;
}

public byte getPDEPM4() {
return PDEPM4;
}

public byte getPDEPM5() {
return PDEPM5;
}

public byte getPDEPM6() {
return PDEPM6;
}

public byte getPDEPM7() {
return PDEPM7;
}

public byte getPDEPM8() {
return PDEPM8;
}

public byte getPDEPM97() {
return PDEPM97;
}

public byte getPDEPN1() {
return PDEPN1;
}

public byte getPDEPN2() {
return PDEPN2;
}

public byte getPDEPN3() {
return PDEPN3;
}

public byte getPDEPN4() {
return PDEPN4;
}

public byte getPDEPN5() {
return PDEPN5;
}

public byte getPDEPN6() {
return PDEPN6;
}

public byte getPDEPN7() {
return PDEPN7;
}

public byte getPDEPN8() {
return PDEPN8;
}

public byte getPDEPN97() {
return PDEPN97;
}

public byte getPDEPO1() {
return PDEPO1;
}

public byte getPDEPO2() {
return PDEPO2;
}

public byte getPDEPO3() {
return PDEPO3;
}

public byte getPDEPO4() {
return PDEPO4;
}

public byte getPDEPO5() {
return PDEPO5;
}

public byte getPDEPO6() {
return PDEPO6;
}

public byte getPDEPO7() {
return PDEPO7;
}

public byte getPDEPO8() {
return PDEPO8;
}

public byte getPDEPO97() {
return PDEPO97;
}

public byte getPDEPOH1() {
return PDEPOH1;
}

public byte getPDEPOH2() {
return PDEPOH2;
}

public byte getPDEPOH3() {
return PDEPOH3;
}

public byte getPDEPOH4() {
return PDEPOH4;
}

public byte getPDEPOH5() {
return PDEPOH5;
}

public byte getPDEPOH97() {
return PDEPOH97;
}

public int getPSU() {
return PSU;
}

public byte getQUARTER() {
return QUARTER;
}

public short getRENTG() {
return RENTG;
}

protected double RENTGRS_DV() {
return RENTGRS_DV;
}

public byte getRENTGRS_IF() {
return RENTGRS_IF;
}

public byte getRENTHB() {
return RENTHB;
}

public byte getRENTINC1() {
return RENTINC1;
}

public byte getRENTINC2() {
return RENTINC2;
}

public byte getRENTINC3() {
return RENTINC3;
}

public byte getRENTINC96() {
return RENTINC96;
}

public short getRENTP11() {
return RENTP11;
}

public short getRENTP12() {
return RENTP12;
}

public byte getRENTP13() {
return RENTP13;
}

public byte getRENTP14() {
return RENTP14;
}

public byte getRENTP15() {
return RENTP15;
}

public byte getRENTP16() {
return RENTP16;
}

public byte getRENTWC() {
return RENTWC;
}

protected double RENT_DV() {
return RENT_DV;
}

public short getSTRATA() {
return STRATA;
}

public short getTENURE_DV() {
return TENURE_DV;
}

public byte getURBAN_DV() {
return URBAN_DV;
}

public short getXPALTOB_G3() {
return XPALTOB_G3;
}

public short getXPDUELY() {
return XPDUELY;
}

public short getXPELECY() {
return XPELECY;
}

public short getXPFDOUT_G3() {
return XPFDOUT_G3;
}

public short getXPFOOD1_G3() {
return XPFOOD1_G3;
}

public short getXPGASY() {
return XPGASY;
}

public byte getXPHSDBA() {
return XPHSDBA;
}

public byte getXPHSDCT() {
return XPHSDCT;
}

protected double XPMGINT_DV() {
return XPMGINT_DV;
}

protected double XPMG_DV() {
return XPMG_DV;
}

public byte getXPMG_IF() {
return XPMG_IF;
}

public short getXPOILY() {
return XPOILY;
}

public short getXPSFLY() {
return XPSFLY;
}

public US_Wave24_hhresp_Record(String line) {
s = line.split("\t");
initHIDP(s[0]);
initINTNUM(s[1]);
initHHORIG(s[2]);
initPSU(s[3]);
initSTRATA(s[4]);
initMONTH(s[5]);
initQUARTER(s[6]);
initIVFHO(s[7]);
initHGLIENG(s[8]);
initHGLITRANS(s[9]);
initADDRCHCK(s[10]);
initORIGADD(s[11]);
initCORESWHO1(s[12]);
initCORESWHO2(s[13]);
initCORESWHO3(s[14]);
initCORESWHO4(s[15]);
initCORESWHO5(s[16]);
initCORESWHO6(s[17]);
initCORESWHO7(s[18]);
initCORESWHO8(s[19]);
initCORESWHO9(s[20]);
initCORESWHO10(s[21]);
initCORESWHO11(s[22]);
initCORESWHO12(s[23]);
initCORESWHO13(s[24]);
initCORESWHO14(s[25]);
initCORESWHO15(s[26]);
initCORESWHO16(s[27]);
initCORESWHO96(s[28]);
initMORES(s[29]);
initCORDET1(s[30]);
initCORDET2(s[31]);
initCORDET3(s[32]);
initCORDET4(s[33]);
initCORDET5(s[34]);
initCORDET6(s[35]);
initCORDET7(s[36]);
initCORDET8(s[37]);
initCORDET9(s[38]);
initCORDET10(s[39]);
initCORDET11(s[40]);
initCORDET12(s[41]);
initCORDET13(s[42]);
initCORDET14(s[43]);
initCORDET15(s[44]);
initCORDET16(s[45]);
initCORDET17(s[46]);
initCORDET18(s[47]);
initCORDET19(s[48]);
initCORDET20(s[49]);
initCORDET21(s[50]);
initCORDET22(s[51]);
initCORDET23(s[52]);
initCORDET24(s[53]);
initCORDET25(s[54]);
initCORDET26(s[55]);
initCORDET27(s[56]);
initCORDET28(s[57]);
initCORDET29(s[58]);
initCORDET30(s[59]);
initCORDET31(s[60]);
initCORDET32(s[61]);
initCORDET96(s[62]);
initHHLANG(s[63]);
initHHSIZE(s[64]);
initNKIDS05(s[65]);
initNKIDS015(s[66]);
initN10TO15(s[67]);
initNKIDS615(s[68]);
initNPENSIONER(s[69]);
initHGSTRTDATY(s[70]);
initHGSTRTDATM(s[71]);
initHGSTRTDATD(s[72]);
initHGSTRTDATHH(s[73]);
initHGSTRTDATMM(s[74]);
initHGSTRTDATSS(s[75]);
initHGENDDATY(s[76]);
initHGENDDATM(s[77]);
initHGENDDATD(s[78]);
initHGENDDATHH(s[79]);
initHGENDDATMM(s[80]);
initHGENDDATSS(s[81]);
initHLIENG(s[82]);
initHLITRANS(s[83]);
initHLIWHO(s[84]);
initIVH0(s[85]);
initIVH1(s[86]);
initIVH2(s[87]);
initIVH3(s[88]);
initIVH4(s[89]);
initIVH5(s[90]);
initIVH6(s[91]);
initIVH7(s[92]);
initIVH8(s[93]);
initIVH9(s[94]);
initIVH10(s[95]);
initIVH11(s[96]);
initIVH12(s[97]);
initIVH13(s[98]);
initIVH14(s[99]);
initIVH15(s[100]);
initIVH16(s[101]);
initHISTRTDATY(s[102]);
initHISTRTDATM(s[103]);
initHISTRTDATD(s[104]);
initHISTRTDATHH(s[105]);
initHISTRTDATMM(s[106]);
initHISTRTDATSS(s[107]);
initHSROOMCHK(s[108]);
initHSBEDS(s[109]);
initHSROOMS(s[110]);
initHSOWNDCHK(s[111]);
initHSOWND(s[112]);
initHSOWR10(s[113]);
initHSOWR11(s[114]);
initHSOWR12(s[115]);
initHSOWR13(s[116]);
initHSOWR14(s[117]);
initHSOWR15(s[118]);
initHSOWR16(s[119]);
initHSOWR17(s[120]);
initHSOWR18(s[121]);
initHSOWR19(s[122]);
initHSOWR110(s[123]);
initHSOWR111(s[124]);
initHSOWR112(s[125]);
initHSOWR113(s[126]);
initHSOWR114(s[127]);
initHSOWR115(s[128]);
initHSOWR116(s[129]);
initHSVAL(s[130]);
initMGYNOT(s[131]);
initHSYRBUY(s[132]);
initHSCOST(s[133]);
initHSYR04(s[134]);
initMGOLD(s[135]);
initMGLIFE(s[136]);
initMGTYPE(s[137]);
initMGEXTRA(s[138]);
initMGNEW(s[139]);
initMGXTY1(s[140]);
initMGXTY2(s[141]);
initMGXTY3(s[142]);
initMGXTY4(s[143]);
initMGXTY5(s[144]);
initMGXTY6(s[145]);
initMGXTY97(s[146]);
initHSTOTMG(s[147]);
initXPMG(s[148]);
initHSJB(s[149]);
initRENTP0(s[150]);
initRENTP1(s[151]);
initRENTP2(s[152]);
initRENTP3(s[153]);
initRENTP4(s[154]);
initRENTP5(s[155]);
initRENTP6(s[156]);
initRENTP7(s[157]);
initRENTP8(s[158]);
initRENTP9(s[159]);
initRENTP10(s[160]);
initRENTP11(s[161]);
initRENTP12(s[162]);
initRENTP13(s[163]);
initRENTP14(s[164]);
initRENTP15(s[165]);
initRENTP16(s[166]);
initRENTLL(s[167]);
initRENTF(s[168]);
initRENT(s[169]);
initRENTWC(s[170]);
initRENTINC1(s[171]);
initRENTINC2(s[172]);
initRENTINC3(s[173]);
initRENTINC96(s[174]);
initRENTHB(s[175]);
initRENTG(s[176]);
initFUELHAVE1(s[177]);
initFUELHAVE2(s[178]);
initFUELHAVE3(s[179]);
initFUELHAVE4(s[180]);
initFUELHAVE96(s[181]);
initFUELDUEL(s[182]);
initXPDUELY(s[183]);
initDUELPAY(s[184]);
initXPELECY(s[185]);
initELECPAY(s[186]);
initXPGASY(s[187]);
initGASPAY(s[188]);
initXPOILY(s[189]);
initXPSFLY(s[190]);
initHEATCH(s[191]);
initNOISYN(s[192]);
initGRIMYN(s[193]);
initCRGRAF(s[194]);
initCRRUBSH(s[195]);
initCRTEEN(s[196]);
initCRDRNK(s[197]);
initCRVAND(s[198]);
initCRRACE(s[199]);
initCRBURG(s[200]);
initCRCAR(s[201]);
initCRMUGG(s[202]);
initHSCTAX(s[203]);
initXPHSDB(s[204]);
initXPHSDCT(s[205]);
initXPHSDBA(s[206]);
initCDUSE1(s[207]);
initCDUSE2(s[208]);
initCDUSE3(s[209]);
initCDUSE4(s[210]);
initCDUSE5(s[211]);
initCDUSE6(s[212]);
initCDUSE7(s[213]);
initCDUSE8(s[214]);
initCDUSE9(s[215]);
initCDUSE10(s[216]);
initCDUSE11(s[217]);
initCDUSE12(s[218]);
initCDUSE13(s[219]);
initCDUSE96(s[220]);
initPCHAS(s[221]);
initPCNET(s[222]);
initPCBROAD(s[223]);
initXPFOOD1_G3(s[224]);
initXPFDOUT_G3(s[225]);
initXPALTOB_G3(s[226]);
initMATDEPA(s[227]);
initMATDEPI(s[228]);
initMATDEPJ(s[229]);
initMATDEPD(s[230]);
initMATDEPE(s[231]);
initMATDEPF(s[232]);
initMATDEPG(s[233]);
initMATDEPH(s[234]);
initHHEAT(s[235]);
initCDEPHAVE1(s[236]);
initCDEPHAVE2(s[237]);
initCDEPHAVE3(s[238]);
initCDEPHAVE4(s[239]);
initCDEPDO4(s[240]);
initCDEPDO2(s[241]);
initCDEPDO3(s[242]);
initCDEPDO5(s[243]);
initCDEPDO6(s[244]);
initCPLAY(s[245]);
initCDEPTRP(s[246]);
initCDELPLY(s[247]);
initPDEPA1(s[248]);
initPDEPA2(s[249]);
initPDEPA3(s[250]);
initPDEPA4(s[251]);
initPDEPA5(s[252]);
initPDEPA6(s[253]);
initPDEPA7(s[254]);
initPDEPA8(s[255]);
initPDEPA97(s[256]);
initPDEPB1(s[257]);
initPDEPB2(s[258]);
initPDEPB3(s[259]);
initPDEPB4(s[260]);
initPDEPB5(s[261]);
initPDEPB6(s[262]);
initPDEPB7(s[263]);
initPDEPB8(s[264]);
initPDEPB97(s[265]);
initPDEPC1(s[266]);
initPDEPC2(s[267]);
initPDEPC3(s[268]);
initPDEPC4(s[269]);
initPDEPC5(s[270]);
initPDEPC6(s[271]);
initPDEPC7(s[272]);
initPDEPC8(s[273]);
initPDEPC97(s[274]);
initPDEPD1(s[275]);
initPDEPD2(s[276]);
initPDEPD3(s[277]);
initPDEPD4(s[278]);
initPDEPD5(s[279]);
initPDEPD6(s[280]);
initPDEPD7(s[281]);
initPDEPD8(s[282]);
initPDEPD97(s[283]);
initPDEPE1(s[284]);
initPDEPE2(s[285]);
initPDEPE3(s[286]);
initPDEPE4(s[287]);
initPDEPE5(s[288]);
initPDEPE6(s[289]);
initPDEPE7(s[290]);
initPDEPE8(s[291]);
initPDEPE97(s[292]);
initPDEPF1(s[293]);
initPDEPF2(s[294]);
initPDEPF3(s[295]);
initPDEPF4(s[296]);
initPDEPF5(s[297]);
initPDEPF6(s[298]);
initPDEPF7(s[299]);
initPDEPF8(s[300]);
initPDEPF97(s[301]);
initPDEPG1(s[302]);
initPDEPG2(s[303]);
initPDEPG3(s[304]);
initPDEPG4(s[305]);
initPDEPG5(s[306]);
initPDEPG6(s[307]);
initPDEPG7(s[308]);
initPDEPG8(s[309]);
initPDEPG97(s[310]);
initPDEPH1(s[311]);
initPDEPH2(s[312]);
initPDEPH3(s[313]);
initPDEPH4(s[314]);
initPDEPH5(s[315]);
initPDEPH6(s[316]);
initPDEPH7(s[317]);
initPDEPH8(s[318]);
initPDEPH97(s[319]);
initPDEPI1(s[320]);
initPDEPI2(s[321]);
initPDEPI3(s[322]);
initPDEPI4(s[323]);
initPDEPI5(s[324]);
initPDEPI6(s[325]);
initPDEPI7(s[326]);
initPDEPI8(s[327]);
initPDEPI97(s[328]);
initPDEPK1(s[329]);
initPDEPK2(s[330]);
initPDEPK3(s[331]);
initPDEPK4(s[332]);
initPDEPK5(s[333]);
initPDEPK6(s[334]);
initPDEPK7(s[335]);
initPDEPK8(s[336]);
initPDEPK97(s[337]);
initPDEPL1(s[338]);
initPDEPL2(s[339]);
initPDEPL3(s[340]);
initPDEPL4(s[341]);
initPDEPL5(s[342]);
initPDEPL6(s[343]);
initPDEPL7(s[344]);
initPDEPL8(s[345]);
initPDEPL97(s[346]);
initPDEPM1(s[347]);
initPDEPM2(s[348]);
initPDEPM3(s[349]);
initPDEPM4(s[350]);
initPDEPM5(s[351]);
initPDEPM6(s[352]);
initPDEPM7(s[353]);
initPDEPM8(s[354]);
initPDEPM97(s[355]);
initPDEPN1(s[356]);
initPDEPN2(s[357]);
initPDEPN3(s[358]);
initPDEPN4(s[359]);
initPDEPN5(s[360]);
initPDEPN6(s[361]);
initPDEPN7(s[362]);
initPDEPN8(s[363]);
initPDEPN97(s[364]);
initPDEPO1(s[365]);
initPDEPO2(s[366]);
initPDEPO3(s[367]);
initPDEPO4(s[368]);
initPDEPO5(s[369]);
initPDEPO6(s[370]);
initPDEPO7(s[371]);
initPDEPO8(s[372]);
initPDEPO97(s[373]);
initPDEPOH1(s[374]);
initPDEPOH2(s[375]);
initPDEPOH3(s[376]);
initPDEPOH4(s[377]);
initPDEPOH5(s[378]);
initPDEPOH97(s[379]);
initNCARS(s[380]);
initCARVAL(s[381]);
initHIENDDATY(s[382]);
initHIENDDATM(s[383]);
initHIENDDATD(s[384]);
initHIENDDATHH(s[385]);
initHIENDDATMM(s[386]);
initHIENDDATSS(s[387]);
initINTDATEY(s[388]);
initINTDATEM(s[389]);
initINTDATED(s[390]);
initHHINTLANG(s[391]);
initOUTCOME(s[392]);
initHHOLDMODEDV(s[393]);
initMODETYPE(s[394]);
initFIHHMNGRS_DV(s[395]);
initFIHHMNGRS_TC(s[396]);
initFIHHMNLABGRS_DV(s[397]);
initFIHHMNLABGRS_TC(s[398]);
initRENTGRS_IF(s[399]);
initXPMG_IF(s[400]);
initFHSBEDS(s[401]);
initFHSROOMS(s[402]);
initFHSOWND(s[403]);
initNPENSIONER_DV(s[404]);
initFIHHMNNET1_DV(s[405]);
initFIHHMNLABNET_DV(s[406]);
initFIHHMNMISC_DV(s[407]);
initFIHHMNPRBEN_DV(s[408]);
initFIHHMNINV_DV(s[409]);
initFIHHMNPEN_DV(s[410]);
initFIHHMNSBEN_DV(s[411]);
initRENT_DV(s[412]);
initRENTGRS_DV(s[413]);
initHBADJUST_DV(s[414]);
initXPMG_DV(s[415]);
initXPMGINT_DV(s[416]);
initHOUSCOST1_DV(s[417]);
initHOUSCOST2_DV(s[418]);
initFIHHMNGRS1_DV(s[419]);
initCOUNTRY(s[420]);
initGOR_DV(s[421]);
initURBAN_DV(s[422]);
initHHRESP_DV(s[423]);
initHHTYPE_DV(s[424]);
initHRPID(s[425]);
initHRPNO(s[426]);
initNCOUPLE_DV(s[427]);
initNONEPAR_DV(s[428]);
initNKIDS_DV(s[429]);
initNCH02_DV(s[430]);
initNCH34_DV(s[431]);
initNCH511_DV(s[432]);
initNCH1215_DV(s[433]);
initAGECHY_DV(s[434]);
initNPENS_DV(s[435]);
initNEMP_DV(s[436]);
initNUE_DV(s[437]);
initNWAGE_DV(s[438]);
initNCHOECD_DV(s[439]);
initNADOECD_DV(s[440]);
initIEQMOECD_DV(s[441]);
initTENURE_DV(s[442]);
initFIHHNEGSEI_IF(s[443]);
initFIHHMNGRS_IF(s[444]);
initHHDENUB_XW(s[445]);
initHHDENUI_XW(s[446]);
}
}
