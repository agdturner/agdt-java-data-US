/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.us.data.indresp;
public class US_Wave26_indresp_Record extends US_indresp_Record {
protected byte ADCTS;
protected byte AEDROF1;
protected byte AEDROF2;
protected byte AEDROF3;
protected byte AEDROF4;
protected double AEPUDA1;
protected byte AEPUDA2;
protected byte AEPUDA3;
protected byte AEPUDA4;
protected byte AEPUWK1;
protected byte AEPUWK2;
protected byte AEPUWK3;
protected byte AEPUWK4;
protected byte AGEGR10_DV;
protected byte AGEGR13_DV;
protected byte AGEGR5_DV;
protected byte AGERET;
protected short AGE_DV;
protected byte AHVWELL;
protected byte AIDEFT;
protected short AIDHU1;
protected short AIDHU2;
protected byte AIDHUA1;
protected byte AIDHUA10;
protected byte AIDHUA11;
protected byte AIDHUA12;
protected byte AIDHUA13;
protected byte AIDHUA14;
protected byte AIDHUA15;
protected byte AIDHUA16;
protected byte AIDHUA2;
protected byte AIDHUA3;
protected byte AIDHUA4;
protected byte AIDHUA5;
protected byte AIDHUA6;
protected byte AIDHUA7;
protected byte AIDHUA8;
protected byte AIDHUA9;
protected byte AREA;
protected byte BASNSET;
protected double BASRATE;
protected byte BASREST;
protected byte BENBASE1;
protected byte BENBASE2;
protected byte BENBASE3;
protected byte BENBASE4;
protected byte BENBASE96;
protected byte BENCTC;
protected byte BENDIS1;
protected byte BENDIS10;
protected byte BENDIS12;
protected byte BENDIS2;
protected byte BENDIS3;
protected byte BENDIS4;
protected byte BENDIS5;
protected byte BENDIS7;
protected byte BENDIS8;
protected byte BENDIS96;
protected byte BENDIS97;
protected byte BENESA;
protected byte BENPEN1;
protected byte BENPEN2;
protected byte BENPEN3;
protected byte BENPEN4;
protected byte BENPEN5;
protected byte BENPEN6;
protected byte BENPEN7;
protected byte BENPEN8;
protected byte BENPEN96;
protected byte BENSTA2;
protected byte BENSTA3;
protected byte BENSTA4;
protected byte BENSTA5;
protected byte BENSTA6;
protected byte BENSTA7;
protected byte BENSTA96;
protected byte BENSTA97;
protected short BIRTHY;
protected byte BUNO_DV;
protected byte CARBUY1;
protected byte CARBUY10;
protected byte CARBUY11;
protected byte CARBUY12;
protected byte CARBUY2;
protected byte CARBUY3;
protected byte CARBUY4;
protected byte CARBUY5;
protected byte CARBUY6;
protected byte CARBUY7;
protected byte CARBUY8;
protected byte CARBUY9;
protected byte CARBUY97;
protected byte CARSRV1;
protected byte CARSRV2;
protected byte CARSRV3;
protected byte CASCH;
protected int CASIINTNO;
protected int CCAMTJT;
protected int CCAMTSOLE;
protected byte CCARE;
protected byte CCBILLJT;
protected byte CCBILLSOLE;
protected byte CCJT;
protected byte CCJTP0;
protected byte CCJTP1;
protected byte CCJTP10;
protected byte CCJTP11;
protected byte CCJTP12;
protected byte CCJTP13;
protected byte CCJTP14;
protected byte CCJTP15;
protected byte CCJTP16;
protected byte CCJTP2;
protected byte CCJTP3;
protected byte CCJTP4;
protected byte CCJTP5;
protected byte CCJTP6;
protected byte CCJTP7;
protected byte CCJTP8;
protected byte CCJTP9;
protected byte CCSOLE;
protected byte CCWORK;
protected short CH1BY4;
protected short CHARAM;
protected byte CHARFREQ;
protected byte CHARGV;
protected byte CHILDPNO;
protected byte CHKRESP1;
protected byte CHKRESP2;
protected byte CHKRESP3;
protected byte CHKRESP4;
protected byte CHKRESPWEB1;
protected byte CHKRESPWEB2;
protected byte CHKRESPWEB3;
protected byte CHKRESPWEB4;
protected byte CHKWEBDOBD;
protected byte CHKWEBDOBM;
protected short CHKWEBDOBY;
protected byte CHKWEBSEX;
protected byte CITZN1;
protected byte CITZN2;
protected byte CITZN3;
protected byte CJBATT;
protected byte CJOB;
protected byte CMLSTAT1;
protected byte CMLSTAT2;
protected byte CMLSTAT3;
protected byte CMLSTAT4;
protected byte CMLSTAT5;
protected byte COH1BM;
protected short COH1BY;
protected byte COH1EM;
protected short COH1EY;
protected byte COH1MR;
protected byte COHAB;
protected byte COHABN;
protected boolean COHAB_DV;
protected byte CONTFT;
protected byte COOPNXTYR;
protected byte COUNTRY;
protected int CREDJT;
protected int CREDSOLE;
protected byte CSTAT;
protected byte CTADD1_CODE;
protected byte CTADD2_CODE;
protected byte CTCNTY_CODE;
protected byte CTCONSCONF1;
protected byte CTCONSCONF2;
protected byte CTCONSCONF3;
protected byte CTCONSCONF4;
protected byte CTCONSCONF5;
protected byte CTCONSCONF6;
protected byte CTCONSCONF7;
protected byte CTCONSCONF8;
protected byte CTCONSCONF94;
protected byte CTCONSCONF95;
protected byte CTEMAIL_CODE;
protected byte CTPCODE_CODE;
protected byte CTREL;
protected byte CTTEL1_CODE;
protected byte CTTEL2_CODE;
protected byte CTTOWN_CODE;
protected byte CURRJOB1;
protected byte CURRJOB2;
protected byte CURRJOB3;
protected byte CURRJOB4;
protected byte CURRJOB5;
protected byte CURRJOB6;
protected byte CURRJOB7;
protected byte CURRJOB8;
protected byte CURRJOB9;
protected byte CURRMSTAT;
protected byte CURRPART1;
protected byte CURRPART2;
protected byte CURRPART3;
protected byte CURRPART4;
protected byte CURRPART5;
protected boolean CURRPART6;
protected boolean CURRPART7;
protected byte CURRSTAT1;
protected byte CURRSTAT2;
protected byte CURRSTAT3;
protected byte CURRSTAT4;
protected byte CURRSTAT5;
protected byte CURRSTAT6;
protected byte CURRSTAT7;
protected byte CURRSTAT8;
protected boolean CURRSTAT9;
protected short DCDOBY;
protected byte DCSEX;
protected byte DEBT1;
protected byte DEBT2;
protected byte DEBT4;
protected byte DEBT5;
protected byte DEBT6;
protected byte DEBT7;
protected byte DEBT8;
protected byte DEBT96;
protected byte DEBT97;
protected byte DEBTC1;
protected byte DEBTC2;
protected byte DEBTC3;
protected byte DEBTC4;
protected byte DEBTC5;
protected byte DEBTPN0;
protected byte DEBTPN1;
protected byte DEBTPN10;
protected byte DEBTPN11;
protected byte DEBTPN12;
protected byte DEBTPN13;
protected byte DEBTPN14;
protected byte DEBTPN15;
protected byte DEBTPN16;
protected byte DEBTPN2;
protected byte DEBTPN3;
protected byte DEBTPN4;
protected byte DEBTPN5;
protected byte DEBTPN6;
protected byte DEBTPN7;
protected byte DEBTPN8;
protected byte DEBTPN9;
protected byte DEBTSJ;
protected int DEBTSK;
protected int DEBTY;
protected boolean DEPCHL_DV;
protected byte DEPENTH1;
protected byte DEPENTH2;
protected byte DEPENTH3;
protected byte DEPENTH4;
protected byte DEPENTH5;
protected byte DEPENTH6;
protected byte DETINC1;
protected byte DETINC2;
protected byte DETINC3;
protected byte DETINC4;
protected byte DETINC5;
protected byte DETINC6;
protected byte DISDIF1;
protected byte DISDIF10;
protected byte DISDIF11;
protected byte DISDIF12;
protected byte DISDIF2;
protected byte DISDIF3;
protected byte DISDIF4;
protected byte DISDIF5;
protected byte DISDIF6;
protected byte DISDIF7;
protected byte DISDIF8;
protected byte DISDIF9;
protected byte DISDIF96;
protected byte DISSEV1;
protected byte DISSEV10;
protected byte DISSEV11;
protected byte DISSEV12;
protected byte DISSEV2;
protected byte DISSEV3;
protected byte DISSEV4;
protected byte DISSEV5;
protected byte DISSEV6;
protected byte DISSEV7;
protected byte DISSEV8;
protected byte DISSEV9;
protected byte DIVCHK1;
protected byte DIVCHK2;
protected byte DIVCHK3;
protected byte DIVCHK4;
protected boolean DIVCHK5;
protected byte DIVFIN1;
protected byte DIVFIN2;
protected byte DIVFIN3;
protected byte DIVFIN4;
protected boolean DIVFIN5;
protected byte DKLM;
protected short DOBY_DV;
protected byte DONEPROXY;
protected byte DRGMJ;
protected byte DRGOTH;
protected byte DRGSOL;
protected byte DRIVE;
protected byte DRNK4W;
protected byte DVAGE;
protected byte DVM1;
protected byte DVM2;
protected byte DVM3;
protected byte DVM4;
protected boolean DVM5;
protected short DVY41;
protected short DVY42;
protected byte DVY43;
protected byte DVY44;
protected boolean DVY45;
protected byte EATLIVU;
protected byte ECIGS;
protected byte EDASP;
protected short EDTYPE;
protected byte EDUCATION;
protected byte EMPCHK;
protected byte EMPLOY;
protected byte EMPSTENDD;
protected byte EMPSTENDM;
protected short EMPSTENDY4;
protected byte ENDMNTH1;
protected byte ENDMNTH2;
protected byte ENDMNTH3;
protected byte ENDMNTH4;
protected short EPROSH;
protected byte ETHCLOSE1;
protected byte ETHCLOSE10;
protected byte ETHCLOSE11;
protected byte ETHCLOSE2A;
protected byte ETHCLOSE2B;
protected byte ETHCLOSE3;
protected byte ETHCLOSE4A;
protected byte ETHCLOSE4B;
protected byte ETHCLOSE5;
protected byte ETHCLOSE6;
protected byte ETHCLOSE7;
protected byte ETHCLOSE8;
protected byte ETHCLOSE9;
protected byte ETHID10;
protected byte ETHID11;
protected byte ETHID12;
protected byte ETHID13;
protected byte ETHID14;
protected byte ETHID2;
protected byte ETHID3;
protected byte ETHID4A;
protected byte ETHID4B;
protected byte ETHID5;
protected byte ETHID6;
protected byte ETHID7;
protected byte ETHID8;
protected byte ETHID9;
protected byte ETHN_DV;
protected byte EUMEM;
protected byte EVRALC;
protected double EXTRATE;
protected byte EXTREST;
protected byte FAMILY;
protected byte FAMSUP;
protected byte FATHER;
protected byte FENOW;
protected byte FENOW_CAWI;
protected byte FF_BENTYPE01;
protected byte FF_BENTYPE02;
protected byte FF_BENTYPE03;
protected byte FF_BENTYPE04;
protected byte FF_BENTYPE05;
protected byte FF_BENTYPE06;
protected byte FF_BENTYPE07;
protected byte FF_BENTYPE08;
protected byte FF_BENTYPE09;
protected byte FF_BENTYPE10;
protected byte FF_BENTYPE11;
protected byte FF_BENTYPE12;
protected byte FF_BENTYPE13;
protected byte FF_BENTYPE14;
protected byte FF_BENTYPE15;
protected byte FF_BENTYPE16;
protected byte FF_BENTYPE17;
protected byte FF_BENTYPE18;
protected byte FF_BENTYPE19;
protected byte FF_BENTYPE20;
protected byte FF_BENTYPE21;
protected byte FF_BENTYPE22;
protected byte FF_BENTYPE23;
protected byte FF_BENTYPE24;
protected byte FF_BENTYPE25;
protected byte FF_BENTYPE26;
protected byte FF_BENTYPE27;
protected byte FF_BENTYPE28;
protected byte FF_BENTYPE29;
protected byte FF_BENTYPE30;
protected byte FF_BENTYPE31;
protected byte FF_BENTYPE32;
protected byte FF_BENTYPE33;
protected byte FF_BENTYPE34;
protected byte FF_BENTYPE35;
protected byte FF_BENTYPE36;
protected byte FF_BENTYPE37;
protected byte FF_BENTYPE38;
protected byte FF_BENTYPE39;
protected byte FF_BENTYPE40;
protected byte FF_BENTYPE41;
protected byte FF_EMPLW;
protected byte FF_IVINTLANG;
protected byte FF_IVLOLW;
protected byte FF_JBMNGR;
protected byte FF_JBSEMP;
protected byte FF_JBSIZE;
protected byte FF_JBSTAT;
protected byte FF_OPRLG;
protected byte FF_OPRLG0;
protected byte FF_OPRLG0NI;
protected byte FF_OPRLG1;
protected short FF_YR2UK4;
protected double FIBENOTHR_DV;
protected double FIBENOTHR_IF;
protected byte FIBENOTHR_TC;
protected double FIMNGRS_IF;
protected byte FIMNGRS_TC;
protected double FIMNINVNET_DV;
protected double FIMNLABGRS_IF;
protected byte FIMNLABGRS_TC;
protected double FIMNLABNET_DV;
protected byte FIMNLABNET_TC;
protected double FIMNMISC_DV;
protected double FIMNNET_DV;
protected double FIMNPEN_DV;
protected double FIMNPRBEN_DV;
protected double FIMNSBEN_DV;
protected byte FINFUT;
protected byte FIVEALCDR;
protected byte FIYRDB1;
protected byte FIYRDB2;
protected byte FIYRDB3;
protected byte FIYRDB4;
protected byte FIYRDB5;
protected byte FIYRDB6;
protected int FIYRDIA;
protected double FIYRINVINC_DV;
protected byte FIYRINVINC_IF;
protected byte FIYRINVINC_TC;
protected int FNPID;
protected byte FNPNO;
protected int FNSPID;
protected byte FNSPNO;
protected byte FOOD1;
protected byte FOOD2;
protected byte FOOD3;
protected byte FOOD4;
protected byte FOOD5;
protected byte FOOD6;
protected byte FOOD7;
protected byte FRDRG;
protected byte FT2ENDM1;
protected byte FT2ENDM2;
protected short FT2ENDY41;
protected short FT2ENDY42;
protected byte FTEDANY;
protected byte FTEDEND1;
protected byte FTEDEND2;
protected byte FTEDMOR1;
protected byte FTEDMOR2;
protected byte FTEDSTARTM1;
protected byte FTEDSTARTM2;
protected short FTEDSTARTY41;
protected short FTEDSTARTY42;
protected byte FTENDM;
protected short FTENDY4;
protected byte FTQUALS;
protected byte GCSE5;
protected byte GCSEENG;
protected byte GCSEENGALPHA;
protected byte GCSEENGE;
protected byte GCSEENGNUM;
protected byte GCSEENGW;
protected byte GCSEMAT;
protected byte GCSEMATALPHA;
protected byte GCSEMATE;
protected byte GCSEMATNUM;
protected byte GCSEMATW;
protected int GRFPID;
protected byte GRFPNO;
protected int GRMPID;
protected byte GRMPNO;
protected byte HASEMAIL;
protected byte HCOND1;
protected byte HCOND10;
protected byte HCOND11;
protected byte HCOND12;
protected byte HCOND13;
protected byte HCOND14;
protected byte HCOND15;
protected byte HCOND16;
protected byte HCOND17;
protected byte HCOND18;
protected byte HCOND19;
protected byte HCOND2;
protected byte HCOND20;
protected byte HCOND3;
protected byte HCOND4;
protected byte HCOND5;
protected byte HCOND6;
protected byte HCOND7;
protected byte HCOND8;
protected byte HCOND9;
protected byte HCOND96;
protected byte HCONDA01;
protected byte HCONDA02;
protected byte HCONDA03;
protected byte HCONDA04;
protected byte HCONDA05;
protected byte HCONDA06;
protected byte HCONDA07;
protected byte HCONDA08;
protected byte HCONDA09;
protected byte HCONDA10;
protected byte HCONDA11;
protected byte HCONDA12;
protected byte HCONDA13;
protected byte HCONDA14;
protected byte HCONDA15;
protected byte HCONDA16;
protected byte HCONDA17;
protected byte HCONDA19;
protected boolean HCONDA20;
protected byte HCONDN1;
protected byte HCONDN10;
protected byte HCONDN11;
protected byte HCONDN12;
protected byte HCONDN13;
protected byte HCONDN14;
protected byte HCONDN15;
protected byte HCONDN16;
protected byte HCONDN17;
protected byte HCONDN18;
protected byte HCONDN19;
protected byte HCONDN2;
protected byte HCONDN20;
protected byte HCONDN3;
protected byte HCONDN4;
protected byte HCONDN5;
protected byte HCONDN6;
protected byte HCONDN7;
protected byte HCONDN8;
protected byte HCONDN9;
protected byte HCONDN96;
protected byte HCONDNO1;
protected byte HCONDNO2;
protected byte HCONDNO3;
protected byte HCONDNO4;
protected byte HCONDNO5;
protected byte HCONDNO6;
protected byte HCONDNO7;
protected byte HCONDNO_CODE;
protected byte HCONDNS1;
protected byte HCONDNS2;
protected byte HCONDNS3;
protected byte HCONDNS4;
protected byte HCONDNS5;
protected byte HCONDNS6;
protected byte HCONDNS7;
protected byte HCONDO_CODE;
protected byte HCONDS01;
protected byte HCONDS02;
protected byte HCONDS03;
protected byte HCONDS04;
protected byte HCONDS05;
protected byte HCONDS08;
protected byte HCONDS09;
protected byte HCONDS10;
protected byte HCONDS11;
protected byte HCONDS12;
protected byte HCONDS13;
protected byte HCONDS14;
protected byte HCONDS15;
protected byte HCONDS16;
protected byte HCONDS17;
protected byte HEALTH;
protected byte HEAPPLIED;
protected byte HEDLIK;
protected byte HEDNT;
protected byte HEDNTO_CODE;
protected byte HGADOPTF;
protected byte HGADOPTM;
protected byte HGPART;
protected byte HHRESP_DV;
protected byte HHTYPE_DV;
protected short HL2GP;
protected byte HL2HOP;
protected boolean HMRCESENT;
protected byte HMRCLINK;
protected short HOSP;
protected byte HOSPC1;
protected byte HOSPC2;
protected byte HOSPC3;
protected byte HOSPC4;
protected byte HOSPC5;
protected byte HOSPC6;
protected byte HOSPC7;
protected short HOSPCH;
protected short HOSPD;
protected short HOSPDC1;
protected short HOSPDC2;
protected short HOSPDC3;
protected byte HOSPDC4;
protected byte HOSPDC5;
protected byte HOSPDC6;
protected byte HOSPDC7;
protected byte HOUSING;
protected short HOWLNG;
protected int HRPID;
protected byte HRPNO;
protected byte HUBOSS;
protected short HUBUYS;
protected byte HUCAR;
protected byte HUDIY;
protected short HUFRYS;
protected short HUIRON;
protected short HUMOPS;
protected byte HUPOTS;
protected byte HURUNS;
protected short HUSITS;
protected byte IENDDATD;
protected byte IENDDATM;
protected byte IENDDATMM;
protected byte IENDDATSS;
protected short IENDDATY;
protected double IND5MUS_LW;
protected double IND5MUS_XW;
protected double INDBD91_LW;
protected double INDBDUB_LW;
protected double INDIN01_LW;
protected double INDIN91_LW;
protected double INDINUB_LW;
protected double INDINUB_XW;
protected double INDINUI_LW;
protected double INDINUI_XW;
protected double INDINUS_LW;
protected byte INDMODE;
protected double INDNS91_LW;
protected double INDNSUB_LW;
protected double INDPXUB_LW;
protected double INDPXUB_XW;
protected double INDPXUI_LW;
protected double INDPXUI_XW;
protected double INDPXUS_LW;
protected double INDSCUB_LW;
protected double INDSCUB_XW;
protected double INDSCUI_LW;
protected double INDSCUI_XW;
protected double INDSCUS_LW;
protected byte INTDATD_DV;
protected byte INTDATM_DV;
protected short INTDATY_DV;
protected byte INTQUS;
protected byte IOUTCOME;
protected boolean IPROXY;
protected byte ISTRTDATMM;
protected byte ISTRTDATSS;
protected short ISTRTDATY;
protected byte IVAFFCT11;
protected byte IVAFFCT12;
protected byte IVAFFCT13;
protected byte IVAFFCT14;
protected byte IVAFFCT15;
protected byte IVAFFCT17;
protected byte IVAFFCT21;
protected byte IVAFFCT22;
protected byte IVAFFCT23;
protected byte IVAFFCT27;
protected byte IVAFFCT30;
protected byte IVAFFCT97;
protected byte IVCOOP;
protected byte IVINFNCE;
protected byte IVLIBAL;
protected byte IVLIENG;
protected byte IVLITRANS;
protected byte IVLIWHO;
protected byte J1BOSS;
protected byte J1MNGR;
protected byte J1NONE;
protected byte J1NSSEC5_DV;
protected byte J1SEMP;
protected short J1SOC00_CC;
protected short J1SOC10_CC;
protected byte J1SOC90_CC;
protected byte J2NSSEC5_DV;
protected int J2PAY;
protected double J2PAYNET_DV;
protected short J2SOC00_CC;
protected short J2SOC10_CC;
protected short J2SOC90_CC;
protected byte JBATT1;
protected byte JBATT2;
protected byte JBATT3;
protected byte JBATT4;
protected byte JBATT5;
protected byte JBATT6;
protected byte JBATT7;
protected byte JBATT8;
protected byte JBATT9;
protected byte JBENDD;
protected byte JBENDM;
protected byte JBENDOTCODE;
protected byte JBENDREAS1;
protected byte JBENDREAS10;
protected byte JBENDREAS11;
protected byte JBENDREAS2;
protected byte JBENDREAS3;
protected byte JBENDREAS4;
protected byte JBENDREAS5;
protected byte JBENDREAS6;
protected byte JBENDREAS7;
protected byte JBENDREAS8;
protected byte JBENDREAS9;
protected byte JBENDREAS97;
protected short JBENDY4;
protected byte JBES2000;
protected byte JBFLEX1;
protected byte JBFLEX10;
protected byte JBFLEX2;
protected byte JBFLEX3;
protected byte JBFLEX4;
protected byte JBFLEX5;
protected byte JBFLEX6;
protected byte JBFLEX7;
protected byte JBFLEX8;
protected byte JBFLEX9;
protected byte JBFLEX96;
protected byte JBFXINF;
protected byte JBFXUSE1;
protected byte JBFXUSE10;
protected byte JBFXUSE2;
protected byte JBFXUSE3;
protected byte JBFXUSE4;
protected byte JBFXUSE5;
protected byte JBFXUSE6;
protected byte JBFXUSE7;
protected byte JBFXUSE8;
protected byte JBFXUSE9;
protected byte JBFXUSE96;
protected byte JBIINDB_DV;
protected byte JBLKCHA;
protected byte JBLKCHB;
protected byte JBLKCHC;
protected byte JBLKCHD;
protected byte JBLKCHE;
protected byte JBMNGRCHK;
protected byte JBNSSEC3_DV;
protected byte JBNSSEC5_DV;
protected short JBNSSEC_DV;
protected byte JBOFFY;
protected short JBONUS;
protected short JBPEN;
protected short JBPENM;
protected short JBPENY4;
protected byte JBPERFP;
protected short JBRGSC_DV;
protected short JBRISE;
protected byte JBSAMR;
protected byte JBSAT;
protected byte JBSEC;
protected byte JBSECTPUB;
protected short JBSEG_DV;
protected byte JBSEMPCHK;
protected byte JBSIC07CHK;
protected byte JBSIC07_CC;
protected byte JBSIZECHK;
protected byte JBSOC00CHK;
protected short JBSOC00_CC;
protected short JBSOC10_CC;
protected byte JBSOCGR_DV;
protected byte JBTERM1;
protected byte JBTERM2;
protected byte JBXPCHA;
protected byte JBXPCHB;
protected byte JBXPCHC;
protected byte JBXPCHD;
protected byte JBXPCHE;
protected byte JLENDM;
protected byte JLES2000;
protected byte JLIINDB_DV;
protected byte JLNSSEC3_DV;
protected byte JLNSSEC5_DV;
protected short JLNSSEC_DV;
protected short JLRGSC_DV;
protected short JLSEG_DV;
protected byte JLSIC07_CC;
protected short JLSOC00_CC;
protected short JLSOC10_CC;
protected byte JOBHOURS1;
protected byte JOBHOURS2;
protected byte JOBHOURS3;
protected byte JOBHOURS4;
protected byte JOBHOURS5;
protected byte JOBHOURS6;
protected byte JOBHOURS7;
protected byte JOBHOURS8;
protected byte JOBHOURS9;
protected int JSOWNAMT;
protected byte JSOWNOTH;
protected byte JSOWNSUM;
protected short JSOWOTAM;
protected byte JSPART;
protected int JSPAYU;
protected byte JSPAYW;
protected byte JSPRLS;
protected byte JSPRNI;
protected byte JSPRTX;
protected byte JSPYNI;
protected byte JSPYTX;
protected byte JSTTWTB_CAWI;
protected byte JSTYPEB;
protected byte JSWORKAC;
protected byte JSWORKTRAV;
protected short JUBGN;
protected short JULK4X1;
protected short JULK4X2;
protected byte JULK4X3;
protected short JULK4X4;
protected short JULK4X5;
protected short JULK4X6;
protected byte JULK4X96;
protected byte JWBS1_DV;
protected byte JWBS2_DV;
protected byte KIDLANG;
protected byte LADOPT;
protected byte LATE;
protected byte LCHMULTI1;
protected byte LCHMULTI2;
protected byte LCHMULTI3;
protected byte LCHMULTI4;
protected byte LCOHNPI;
protected byte LIENG;
protected byte LIHOW;
protected byte LINGUA;
protected byte LITRANS;
protected byte LIVESP;
protected boolean LIVESP_DV;
protected byte LIVEWITH;
protected byte LIWHO;
protected byte LMAR1M;
protected short LMAR1Y;
protected byte LMCBM1;
protected byte LMCBM2;
protected byte LMCBM3;
protected byte LMCBM4;
protected byte LMCBM5;
protected byte LMCBM6;
protected byte LMCBM7;
protected short LMCBY41;
protected short LMCBY42;
protected short LMCBY43;
protected short LMCBY44;
protected short LMCBY45;
protected byte LMCBY46;
protected byte LMCBY47;
protected byte LMSPM1;
protected byte LMSPM2;
protected byte LMSPM3;
protected byte LMSPM4;
protected byte LMSPM5;
protected byte LMSPM6;
protected byte LMSPM7;
protected short LMSPY41;
protected short LMSPY42;
protected short LMSPY43;
protected short LMSPY44;
protected short LMSPY45;
protected byte LMSPY46;
protected byte LMSPY47;
protected byte LNADOPT;
protected byte LNPRNT;
protected byte LPRNT;
protected byte LVHM;
protected byte LVSCHDO;
protected byte LWWRONG;
protected byte MACOB;
protected byte MAJU;
protected byte MANSSEC5_DV;
protected byte MARSTAT;
protected short MASOC00_CC;
protected short MASOC10_CC;
protected byte MASOC90_CC;
protected byte MASTAT_DV;
protected byte MATLEAVE;
protected byte MATLV;
protected byte MATLVENDD;
protected byte MATLVENDM;
protected short MATLVENDY4;
protected byte MATLVSTD;
protected byte MATLVSTM;
protected short MATLVSTY4;
protected byte MAYRUK;
protected byte MEMPLOY;
protected byte MISSOURCE01;
protected byte MISSOURCE02;
protected byte MISSOURCE03;
protected byte MISSOURCE04;
protected byte MISSOURCE05;
protected byte MISSOURCE06;
protected byte MISSOURCE07;
protected byte MISSOURCE08;
protected byte MISSOURCE09;
protected byte MISSOURCE10;
protected byte MISSOURCE11;
protected byte MISSOURCE12;
protected byte MISSOURCE13;
protected byte MISSOURCE14;
protected byte MISSOURCE15;
protected byte MISSOURCE16;
protected byte MISSOURCE18;
protected byte MISSOURCE19;
protected byte MISSOURCE20;
protected byte MISSOURCE21;
protected byte MISSOURCE22;
protected byte MISSOURCE23;
protected byte MISSOURCE24;
protected byte MISSOURCE25;
protected byte MISSOURCE26;
protected byte MISSOURCE27;
protected byte MISSOURCE28;
protected byte MISSOURCE29;
protected byte MISSOURCE30;
protected byte MISSOURCE31;
protected byte MISSOURCE32;
protected byte MISSOURCE33;
protected byte MISSOURCE34;
protected byte MISSOURCE35;
protected byte MISSOURCE36;
protected byte MISSOURCE37;
protected byte MISSOURCE38;
protected byte MISSOURCE39;
protected byte MISSOURCE40;
protected byte MISSOURCE41;
protected byte MLAGST;
protected byte MLAGSTU;
protected byte MLFUTR;
protected byte MLRNOT1;
protected byte MLRNOT10;
protected byte MLRNOT11;
protected byte MLRNOT12;
protected byte MLRNOT13;
protected byte MLRNOT2;
protected byte MLRNOT3;
protected byte MLRNOT4;
protected byte MLRNOT5;
protected byte MLRNOT6;
protected byte MLRNOT7;
protected byte MLRNOT8;
protected byte MLRNOT9;
protected byte MLRNOT97;
protected byte MLSTATCHK;
protected byte MLWKFPT;
protected int MNPID;
protected byte MNPNO;
protected int MNSPID;
protected byte MNSPNO;
protected byte MOBCOMP;
protected byte MOBUSE;
protected byte MONTH;
protected byte MOVDIR;
protected byte MOVEOTCODE;
protected byte MOVY11;
protected byte MOVY12;
protected byte MOVY13;
protected byte MOVY14;
protected byte MOVY15;
protected byte MOVY16;
protected byte MSTATCH1;
protected byte MSTATCH2;
protected byte MSTATCH3;
protected byte MSTATCH4;
protected byte MSTATCH5;
protected short MSTATSAM;
protected byte MSTATSAMN;
protected byte MVEVER;
protected byte MVMNTH;
protected short MVYR;
protected byte N1619ABS;
protected byte NADOPTCH;
protected byte NAIDXHH;
protected byte NATID1;
protected byte NATID2;
protected byte NATID3;
protected byte NATID4;
protected byte NATID5;
protected byte NATID6;
protected byte NATID97;
protected byte NCCJT;
protected byte NCCSOLE;
protected byte NCH10;
protected byte NCH10TO15;
protected byte NCH14RESP;
protected byte NCH3RESP;
protected byte NCH415RESP;
protected byte NCH5RESP;
protected byte NCH5TO15;
protected byte NCH8RESP;
protected byte NCHILD;
protected short NCHILD_DV;
protected byte NCHRESP;
protected byte NCHUNDER16;
protected short NCIGS;
protected byte NCRR1;
protected byte NCRR11;
protected byte NCRR12;
protected byte NCRR3;
protected byte NCRR4;
protected byte NCRR5;
protected byte NCRR6;
protected byte NCRR8;
protected byte NCRR9;
protected byte NCRRM;
protected short NCRRY4;
protected byte NDEPCHL_DV;
protected byte NETPUSE;
protected byte NETUSE;
protected byte NEXTELSE1;
protected byte NEXTELSE2;
protected byte NEXTELSE3;
protected byte NEXTELSE4;
protected byte NEXTELSE5;
protected byte NEXTELSE6;
protected byte NEXTELSE7;
protected byte NEXTELSE8;
protected boolean NEXTELSE9;
protected byte NEXTJOB1;
protected byte NEXTJOB2;
protected byte NEXTJOB3;
protected byte NEXTJOB4;
protected byte NEXTJOB5;
protected byte NEXTJOB6;
protected byte NEXTJOB7;
protected byte NEXTJOB8;
protected byte NEXTJOB9;
protected byte NEXTSTAT1;
protected byte NEXTSTAT2;
protected byte NEXTSTAT3;
protected byte NEXTSTAT4;
protected byte NEXTSTAT5;
protected byte NEXTSTAT6;
protected byte NEXTSTAT7;
protected byte NEXTSTAT8;
protected byte NEXTSTAT9;
protected byte NFH01;
protected byte NFH02;
protected byte NFH03;
protected byte NFH04;
protected byte NFH05;
protected byte NFH06;
protected byte NFH07;
protected byte NFH08;
protected byte NFH09;
protected byte NFH10;
protected byte NFH11;
protected byte NFH12;
protected byte NFH13;
protected byte NFH14;
protected byte NFH15;
protected byte NFH16;
protected byte NFH18;
protected byte NFH19;
protected byte NFH20;
protected byte NFH21;
protected byte NFH22;
protected byte NFH23;
protected byte NFH24;
protected byte NFH25;
protected byte NFH26;
protected byte NFH27;
protected byte NFH28;
protected byte NFH29;
protected byte NFH30;
protected byte NFH31;
protected byte NFH32;
protected byte NFH33;
protected byte NFH34;
protected byte NFH35;
protected byte NFH36;
protected byte NFH37;
protected byte NFH38;
protected byte NFH39;
protected byte NFH40;
protected byte NFH41;
protected byte NGCSE5;
protected byte NGCSEENG;
protected byte NGCSEENGNIE;
protected byte NGCSEMAT;
protected byte NGCSEMATNIE;
protected byte NGRP_DV;
protected byte NHIQUAL_DV;
protected byte NIACT;
protected byte NIREL;
protected byte NISERPS;
protected byte NMAR;
protected byte NMPSP_DV;
protected byte NNATCH;
protected byte NNEWBORN;
protected byte NNMPSP_DV;
protected byte NNSIB_DV;
protected byte NNSSIB_DV;
protected byte NOTEMPCHK;
protected byte NPENSIONER_DV;
protected byte NPNS_DV;
protected byte NPN_DV;
protected byte NQFHIGDV;
protected byte NUNDER16ABS;
protected byte NUNMPSP_DV;
protected byte NXTENDOTCODE;
protected byte NXTENDREAS1;
protected byte NXTENDREAS10;
protected byte NXTENDREAS11;
protected byte NXTENDREAS2;
protected byte NXTENDREAS3;
protected byte NXTENDREAS4;
protected byte NXTENDREAS5;
protected byte NXTENDREAS6;
protected byte NXTENDREAS7;
protected byte NXTENDREAS8;
protected byte NXTENDREAS9;
protected byte NXTENDREAS97;
protected byte NXTJBENDD;
protected byte NXTJBENDM;
protected short NXTJBENDY4;
protected byte NXTJBES;
protected byte NXTJBHRS;
protected byte NXTST;
protected byte NXTSTELSE;
protected byte NXTSTENDD;
protected byte NXTSTENDM;
protected short NXTSTENDY4;
protected byte ODDSAPPLY;
protected byte ODDSEMP1;
protected byte ODDSEMP3;
protected byte ODDSQUAL;
protected byte ODDSSCHOL;
protected byte OPRLG;
protected byte OPRLG0;
protected byte OPRLG0NI;
protected byte OPRLG1;
protected byte OPRLG2;
protected byte OPRLG3;
protected byte ORIGADD;
protected byte OTHBEN1;
protected byte OTHBEN2;
protected byte OTHBEN3;
protected byte OTHBEN4;
protected byte OTHBEN5;
protected byte OTHBEN6;
protected byte OTHBEN7;
protected byte OTHBEN8;
protected byte OTHBEN9;
protected byte OTHBEN96;
protected byte OTHBEN97;
protected byte OTHCONT;
protected byte OVTNSET;
protected byte OVTPAY;
protected double OVTRATE;
protected byte OVTREST;
protected byte PACOB;
protected byte PAJU;
protected byte PANSSEC5_DV;
protected short PASOC00_CC;
protected short PASOC10_CC;
protected byte PASOC90_CC;
protected byte PAYGWC;
protected double PAYG_DV;
protected byte PAYNWC;
protected byte PAYRUK;
protected byte PAYTYP;
protected byte PAYUWC;
protected double PAYU_DV;
protected short PBIRTHY;
protected byte PBNFT1;
protected byte PBNFT10;
protected byte PBNFT11;
protected byte PBNFT12;
protected byte PBNFT13;
protected byte PBNFT2;
protected byte PBNFT3;
protected byte PBNFT4;
protected byte PBNFT5;
protected byte PBNFT6;
protected byte PBNFT7;
protected byte PBNFT8;
protected byte PBNFT9;
protected byte PBNFT96;
protected byte PDVAGE;
protected byte PEDCHPNO;
protected byte PENMCN;
protected byte PENMEX;
protected double PENMPY;
protected byte PENMTP;
protected byte PENSIONER_DV;
protected byte PENSPB;
protected byte PHEAPPLIED;
protected int PID;
protected byte PJBPTFT;
protected byte PJSPTFT;
protected byte PLIENG;
protected byte PLITRANS;
protected short PLNOWM;
protected short PLNOWY4;
protected int PN1PID;
protected byte PN1PNO;
protected byte PN1SEX;
protected int PN2PID;
protected byte PN2PNO;
protected byte PN2SEX;
protected byte PNCARS;
protected int PNS1PID;
protected byte PNS1PNO;
protected byte PNS1SEX;
protected int PNS2PID;
protected byte PNS2PNO;
protected byte PNS2SEX;
protected byte PODDSAPPLY;
protected byte PODDSEMP1;
protected byte PODDSEMP3;
protected byte PODDSQUAL;
protected byte PODDSSCHOL;
protected byte PPEN;
protected byte PPENT;
protected int PPID;
protected byte PPPEX;
protected byte PPPEXM;
protected int PPRAM;
protected byte PPRAMPC;
protected byte PPREG;
protected byte PPSEX;
protected short PPYRS;
protected byte PRAYFREQ;
protected byte PREARN;
protected byte PREARNA;
protected byte PREARNW;
protected byte PREASON;
protected byte PREG;
protected byte PREGEND1;
protected byte PREGEND2;
protected byte PREGEND3;
protected byte PREGEND4;
protected byte PREGFERT1;
protected byte PREGFERT2;
protected byte PREGFERT3;
protected byte PREGFERT4;
protected byte PREGFT11;
protected byte PREGFT12;
protected boolean PREGFT13;
protected boolean PREGFT14;
protected byte PREGFT21;
protected byte PREGFT22;
protected boolean PREGFT23;
protected boolean PREGFT24;
protected byte PREGFT31;
protected byte PREGFT32;
protected boolean PREGFT33;
protected boolean PREGFT34;
protected byte PREGFT41;
protected byte PREGFT42;
protected boolean PREGFT43;
protected boolean PREGFT44;
protected byte PREGFT51;
protected byte PREGFT52;
protected boolean PREGFT53;
protected boolean PREGFT54;
protected byte PREGFT61;
protected byte PREGFT62;
protected boolean PREGFT63;
protected boolean PREGFT64;
protected byte PREGFT961;
protected byte PREGFT962;
protected boolean PREGFT963;
protected boolean PREGFT964;
protected byte PREGM1;
protected byte PREGM2;
protected byte PREGM3;
protected byte PREGM4;
protected byte PREGOUT1;
protected byte PREGOUT2;
protected byte PREGOUT3;
protected byte PREGOUT4;
protected byte PREGSMK11;
protected byte PREGSMK12;
protected byte PREGSMK13;
protected byte PREGSMK14;
protected byte PREGSMK21;
protected byte PREGSMK22;
protected byte PREGSMK23;
protected byte PREGSMK24;
protected byte PREGSMK31;
protected byte PREGSMK32;
protected byte PREGSMK33;
protected byte PREGSMK34;
protected byte PREGSMOKE1;
protected byte PREGSMOKE2;
protected byte PREGSMOKE3;
protected byte PREGSMOKE4;
protected byte PREGSPD1;
protected boolean PREGSPD2;
protected boolean PREGSPD3;
protected boolean PREGSPD4;
protected short PREGY41;
protected short PREGY42;
protected short PREGY43;
protected short PREGY44;
protected byte PREL;
protected byte PRFITB;
protected byte PRFITBA;
protected byte PRFITBW;
protected byte PRIDE10;
protected byte PRIDE11;
protected byte PRIDE12;
protected byte PRIDE13;
protected byte PRIDE14;
protected byte PRIDE2;
protected byte PRIDE4A;
protected byte PRIDE4B;
protected byte PRIDE5;
protected byte PRIDE6;
protected byte PRIDE7;
protected byte PRIDE8;
protected byte PRIDE9;
protected byte PS1;
protected byte PS10;
protected byte PS11;
protected byte PS12;
protected byte PS13;
protected byte PS14;
protected byte PS15;
protected byte PS16;
protected byte PS17;
protected byte PS18;
protected byte PS19;
protected byte PS2;
protected byte PS20;
protected byte PS21;
protected byte PS22;
protected byte PS23;
protected byte PS24;
protected byte PS25;
protected byte PS26;
protected byte PS27;
protected byte PS28;
protected byte PS29;
protected byte PS3;
protected byte PS30;
protected byte PS31;
protected byte PS32;
protected byte PS4;
protected byte PS5;
protected byte PS6;
protected byte PS7;
protected byte PS8;
protected byte PS9;
protected byte PSDQA_DV;
protected byte PSDQB_DV;
protected byte PSDQC_DV;
protected byte PSNUMCH;
protected int PSU;
protected byte PUNIFIN1;
protected byte PUNISUB1;
protected byte PVTPYSET;
protected int PXPBORROW;
protected int PXPEARN1;
protected byte PXPEARN1DK;
protected int PXPEARN3;
protected byte PXPEARN3DK;
protected int PXPEARNG1;
protected byte PXPEARNG1DK;
protected int PXPEARNG3;
protected byte PXPEARNG3DK;
protected int PXPTUITION;
protected byte QFHIGDV;
protected byte QFHIGH;
protected boolean QFHIGHFL_DV;
protected byte QFVOC1;
protected byte QFVOC10;
protected byte QFVOC11;
protected byte QFVOC12;
protected byte QFVOC13;
protected byte QFVOC14;
protected byte QFVOC15;
protected byte QFVOC2;
protected byte QFVOC3;
protected byte QFVOC4;
protected byte QFVOC5;
protected byte QFVOC6;
protected byte QFVOC7;
protected byte QFVOC8;
protected byte QFVOC9;
protected byte QFVOC96;
protected byte QUALNEW1;
protected byte QUALNEW10;
protected byte QUALNEW11;
protected byte QUALNEW13;
protected byte QUALNEW15;
protected byte QUALNEW16;
protected byte QUALNEW17;
protected byte QUALNEW18;
protected byte QUALNEW19;
protected byte QUALNEW2;
protected byte QUALNEW20;
protected byte QUALNEW21;
protected byte QUALNEW22;
protected byte QUALNEW23;
protected byte QUALNEW24;
protected byte QUALNEW25;
protected byte QUALNEW26;
protected byte QUALNEW27;
protected byte QUALNEW28;
protected byte QUALNEW29;
protected byte QUALNEW3;
protected byte QUALNEW30;
protected byte QUALNEW31;
protected byte QUALNEW32;
protected byte QUALNEW33;
protected byte QUALNEW4;
protected byte QUALNEW5;
protected byte QUALNEW6;
protected byte QUALNEW7;
protected byte QUALNEW8;
protected byte QUALNEW9;
protected byte QUALOC;
protected byte QUARTER;
protected byte RACEL;
protected byte RACELAT;
protected byte RACELBT;
protected byte RACELMT;
protected byte RACELOT_CODE;
protected short RACELO_CODE;
protected byte RACELT;
protected byte RACELWT;
protected byte RACEL_DV;
protected byte REASEND10_1;
protected byte REASEND10_2;
protected byte REASEND10_3;
protected byte REASEND10_4;
protected byte REASEND10_5;
protected byte REASEND10_6;
protected byte REASEND10_7;
protected byte REASEND10_8;
protected byte REASEND10_9;
protected byte REASEND11_1;
protected byte REASEND11_2;
protected byte REASEND11_3;
protected byte REASEND11_4;
protected byte REASEND11_5;
protected byte REASEND11_6;
protected byte REASEND11_7;
protected byte REASEND11_8;
protected byte REASEND11_9;
protected byte REASEND1_1;
protected byte REASEND1_2;
protected byte REASEND1_3;
protected byte REASEND1_4;
protected byte REASEND1_5;
protected byte REASEND1_6;
protected byte REASEND1_7;
protected byte REASEND1_8;
protected byte REASEND1_9;
protected byte REASEND2_1;
protected byte REASEND2_2;
protected byte REASEND2_3;
protected byte REASEND2_4;
protected byte REASEND2_5;
protected byte REASEND2_6;
protected byte REASEND2_7;
protected byte REASEND2_8;
protected byte REASEND2_9;
protected byte REASEND3_1;
protected byte REASEND3_2;
protected byte REASEND3_3;
protected byte REASEND3_4;
protected byte REASEND3_5;
protected byte REASEND3_6;
protected byte REASEND3_7;
protected byte REASEND3_8;
protected byte REASEND3_9;
protected byte REASEND4_1;
protected byte REASEND4_2;
protected byte REASEND4_3;
protected byte REASEND4_4;
protected byte REASEND4_5;
protected byte REASEND4_6;
protected byte REASEND4_7;
protected byte REASEND4_8;
protected byte REASEND4_9;
protected byte REASEND5_1;
protected byte REASEND5_2;
protected byte REASEND5_3;
protected byte REASEND5_4;
protected byte REASEND5_5;
protected byte REASEND5_6;
protected byte REASEND5_7;
protected byte REASEND5_8;
protected byte REASEND5_9;
protected byte REASEND6_1;
protected byte REASEND6_2;
protected byte REASEND6_3;
protected byte REASEND6_4;
protected byte REASEND6_5;
protected byte REASEND6_6;
protected byte REASEND6_7;
protected byte REASEND6_8;
protected byte REASEND6_9;
protected byte REASEND7_1;
protected byte REASEND7_2;
protected byte REASEND7_3;
protected byte REASEND7_4;
protected byte REASEND7_5;
protected byte REASEND7_6;
protected byte REASEND7_7;
protected byte REASEND7_8;
protected byte REASEND7_9;
protected byte REASEND8_1;
protected byte REASEND8_2;
protected byte REASEND8_3;
protected byte REASEND8_4;
protected byte REASEND8_5;
protected byte REASEND8_6;
protected byte REASEND8_7;
protected byte REASEND8_8;
protected byte REASEND8_9;
protected byte REASEND97_1;
protected byte REASEND97_2;
protected byte REASEND97_3;
protected byte REASEND97_4;
protected byte REASEND97_5;
protected byte REASEND97_6;
protected byte REASEND97_7;
protected byte REASEND97_8;
protected byte REASEND97_9;
protected byte REASEND9_1;
protected byte REASEND9_2;
protected byte REASEND9_3;
protected byte REASEND9_4;
protected byte REASEND9_5;
protected byte REASEND9_6;
protected byte REASEND9_7;
protected byte REASEND9_8;
protected byte REASEND9_9;
protected byte REASENDOTCODE_1;
protected byte REASENDOTCODE_2;
protected byte REASENDOTCODE_3;
protected byte REASENDOTCODE_4;
protected byte REASENDOTCODE_5;
protected byte REASENDOTCODE_6;
protected byte REASENDOTCODE_7;
protected byte REASENDOTCODE_8;
protected byte REASENDOTCODE_9;
protected byte RELUP;
protected byte REMAIL_CODE;
protected byte RESPCHILD1;
protected byte RESPCHILD10;
protected byte RESPCHILD11;
protected byte RESPCHILD12;
protected byte RESPCHILD13;
protected byte RESPCHILD14;
protected byte RESPCHILD15;
protected byte RESPCHILD16;
protected byte RESPCHILD2;
protected byte RESPCHILD3;
protected byte RESPCHILD4;
protected byte RESPCHILD5;
protected byte RESPCHILD6;
protected byte RESPCHILD7;
protected byte RESPCHILD8;
protected byte RESPCHILD9;
protected boolean RESPF16;
protected boolean RESPF16_DV;
protected boolean RESPM16;
protected boolean RESPM16_DV;
protected byte RETAMT;
protected byte RETCHK;
protected byte RETSUF;
protected byte RHLAND_CODE;
protected boolean RINGFENCE;
protected byte RPHMOB_CODE;
protected byte RPHWRK_CODE;
protected byte RTCON1;
protected byte RTCON2;
protected byte RTCON3;
protected byte RTCON4;
protected byte RTEXPJB;
protected byte RTFND1;
protected byte RTFND10;
protected byte RTFND2;
protected byte RTFND3;
protected byte RTFND4;
protected byte RTFND5;
protected byte RTFND6;
protected byte RTFND7;
protected byte RTFND8;
protected byte RTFND9;
protected byte RTFND96;
protected byte RTPRO1;
protected byte RTPRO2;
protected byte RTPRO3;
protected byte RTPRO4;
protected byte RTPRO5;
protected byte RTPRO6;
protected byte SAMEJOB;
protected short SAMPST;
protected byte SAVDOCS;
protected short SAVE;
protected int SAVED;
protected byte SAVLT;
protected byte SAVREG;
protected byte SCAC;
protected boolean SCDATA_DV;
protected byte SCFINEMB;
protected byte SCFINSMALL;
protected byte SCFLAG_DV;
protected byte SCHLLOC;
protected byte SCHOK;
protected byte SCHOOL_CAWI;
protected byte SCLFSAT1;
protected byte SCLFSAT2;
protected byte SCLFSAT7;
protected byte SCLFSATO;
protected byte SCRF1;
protected byte SCRF2;
protected byte SCRF3;
protected byte SCRF4;
protected byte SCRF5;
protected byte SCRF6;
protected byte SCRF97;
protected byte SCRX_CODE;
protected byte SCSF1;
protected byte SCSF2A;
protected byte SCSF2B;
protected byte SCSF3A;
protected byte SCSF3B;
protected byte SCSF4A;
protected byte SCSF4B;
protected byte SCSF5;
protected byte SCSF6A;
protected byte SCSF6B;
protected byte SCSF6C;
protected byte SCSF7;
protected byte SCUN1;
protected byte SCUN2;
protected byte SCUN3;
protected byte SCUN97;
protected byte SCUX_CODE;
protected byte SCWHORUAGE;
protected byte SCWHORUEDU;
protected byte SCWHORUFAM;
protected byte SCWHORUPOL;
protected byte SCWHORUPRO;
protected byte SCWHORURAC;
protected byte SCWHORUSEX;
protected double SEEARNGRS_DV;
protected byte SEEARNGRS_IF;
protected double SEEARNNET_DV;
protected byte SEX_DV;
protected byte SF1;
protected double SF12MCS_DV;
protected double SF12PCS_DV;
protected boolean SINGLE_DV;
protected byte SMARTMOB;
protected byte SMKMNTH11;
protected byte SMKMNTH12;
protected byte SMKMNTH13;
protected byte SMKMNTH14;
protected byte SMKMNTH21;
protected byte SMKMNTH22;
protected byte SMKMNTH23;
protected byte SMKMNTH24;
protected byte SMKMNTH31;
protected byte SMKMNTH32;
protected byte SMKMNTH33;
protected byte SMKMNTH34;
protected short SMOKER;
protected byte SPPEN;
protected int SPPID;
protected byte SPPNO;
protected byte STATCM1;
protected byte STATCM2;
protected byte STATCM3;
protected byte STATCM4;
protected byte STATCM5;
protected short STATCY41;
protected short STATCY42;
protected short STATCY43;
protected short STATCY44;
protected short STATCY45;
protected byte STATENDD1;
protected byte STATENDD2;
protected byte STATENDD3;
protected byte STATENDD4;
protected byte STATENDD5;
protected byte STATENDD6;
protected byte STATENDD7;
protected byte STATENDD8;
protected byte STATENDD9;
protected byte STATENDM1;
protected byte STATENDM2;
protected byte STATENDM3;
protected byte STATENDM4;
protected byte STATENDM5;
protected byte STATENDM6;
protected byte STATENDM7;
protected byte STATENDM8;
protected byte STATENDM9;
protected short STATENDY41;
protected short STATENDY42;
protected short STATENDY43;
protected short STATENDY44;
protected short STATENDY45;
protected short STATENDY46;
protected short STATENDY47;
protected short STATENDY48;
protected short STATENDY49;
protected byte STENDOTCODE;
protected byte STENDREAS1;
protected byte STENDREAS10;
protected byte STENDREAS11;
protected byte STENDREAS2;
protected byte STENDREAS3;
protected byte STENDREAS4;
protected byte STENDREAS5;
protected byte STENDREAS6;
protected byte STENDREAS7;
protected byte STENDREAS8;
protected byte STENDREAS9;
protected byte STENDREAS97;
protected short STRATA;
protected byte SUSP;
protected byte SVACTS1;
protected byte SVACTS2;
protected byte SVACTS3;
protected byte SVACTS4;
protected byte SVACTS5;
protected byte SVACTS96;
protected byte SVACTS97;
protected int SVAMT1;
protected int SVAMT2;
protected int SVAMT3;
protected int SVAMT4;
protected int SVAMT5;
protected int SVAMT6;
protected byte SVB1_1;
protected byte SVB1_2;
protected byte SVB1_3;
protected byte SVB1_4;
protected byte SVB1_5;
protected byte SVB1_6;
protected byte SVB2_1;
protected byte SVB2_2;
protected byte SVB2_3;
protected byte SVB2_4;
protected byte SVB2_5;
protected byte SVB2_6;
protected byte SVB3_1;
protected byte SVB3_2;
protected byte SVB3_3;
protected byte SVB3_4;
protected byte SVB3_5;
protected byte SVB3_6;
protected byte SVB4_1;
protected byte SVB4_2;
protected byte SVB4_3;
protected byte SVB4_4;
protected byte SVB4_5;
protected byte SVB4_6;
protected byte SVB5_1;
protected byte SVB5_2;
protected byte SVB5_3;
protected byte SVB5_4;
protected byte SVB5_5;
protected byte SVB5_6;
protected byte SVPN0_1;
protected byte SVPN0_2;
protected boolean SVPN0_3;
protected boolean SVPN0_4;
protected boolean SVPN0_5;
protected boolean SVPN0_6;
protected byte SVPN10_1;
protected byte SVPN10_2;
protected boolean SVPN10_3;
protected boolean SVPN10_4;
protected boolean SVPN10_5;
protected boolean SVPN10_6;
protected byte SVPN11_1;
protected byte SVPN11_2;
protected boolean SVPN11_3;
protected boolean SVPN11_4;
protected boolean SVPN11_5;
protected boolean SVPN11_6;
protected byte SVPN12_1;
protected byte SVPN12_2;
protected boolean SVPN12_3;
protected boolean SVPN12_4;
protected boolean SVPN12_5;
protected boolean SVPN12_6;
protected byte SVPN13_1;
protected byte SVPN13_2;
protected boolean SVPN13_3;
protected boolean SVPN13_4;
protected boolean SVPN13_5;
protected boolean SVPN13_6;
protected byte SVPN14_1;
protected byte SVPN14_2;
protected boolean SVPN14_3;
protected boolean SVPN14_4;
protected boolean SVPN14_5;
protected boolean SVPN14_6;
protected byte SVPN15_1;
protected byte SVPN15_2;
protected boolean SVPN15_3;
protected boolean SVPN15_4;
protected boolean SVPN15_5;
protected boolean SVPN15_6;
protected byte SVPN16_1;
protected byte SVPN16_2;
protected boolean SVPN16_3;
protected boolean SVPN16_4;
protected boolean SVPN16_5;
protected boolean SVPN16_6;
protected byte SVPN1_1;
protected byte SVPN1_2;
protected boolean SVPN1_3;
protected boolean SVPN1_4;
protected boolean SVPN1_5;
protected boolean SVPN1_6;
protected byte SVPN2_1;
protected byte SVPN2_2;
protected boolean SVPN2_3;
protected boolean SVPN2_4;
protected boolean SVPN2_5;
protected boolean SVPN2_6;
protected byte SVPN3_1;
protected byte SVPN3_2;
protected boolean SVPN3_3;
protected boolean SVPN3_4;
protected boolean SVPN3_5;
protected boolean SVPN3_6;
protected byte SVPN4_1;
protected byte SVPN4_2;
protected boolean SVPN4_3;
protected boolean SVPN4_4;
protected boolean SVPN4_5;
protected boolean SVPN4_6;
protected byte SVPN5_1;
protected byte SVPN5_2;
protected boolean SVPN5_3;
protected boolean SVPN5_4;
protected boolean SVPN5_5;
protected boolean SVPN5_6;
protected byte SVPN6_1;
protected byte SVPN6_2;
protected boolean SVPN6_3;
protected boolean SVPN6_4;
protected boolean SVPN6_5;
protected boolean SVPN6_6;
protected byte SVPN7_1;
protected byte SVPN7_2;
protected boolean SVPN7_3;
protected boolean SVPN7_4;
protected boolean SVPN7_5;
protected boolean SVPN7_6;
protected byte SVPN8_1;
protected byte SVPN8_2;
protected boolean SVPN8_3;
protected boolean SVPN8_4;
protected boolean SVPN8_5;
protected boolean SVPN8_6;
protected byte SVPN9_1;
protected byte SVPN9_2;
protected boolean SVPN9_3;
protected boolean SVPN9_4;
protected boolean SVPN9_5;
protected boolean SVPN9_6;
protected byte SVSJ1;
protected byte SVSJ2;
protected boolean SVSJ3;
protected boolean SVSJ4;
protected boolean SVSJ5;
protected boolean SVSJ6;
protected int SVSK1;
protected int SVSK2;
protected boolean SVSK3;
protected boolean SVSK4;
protected boolean SVSK5;
protected boolean SVSK6;
protected byte TRAINANY;
protected short TRAINDAYS1;
protected short TRAINDAYS2;
protected short TRAINDAYS3;
protected byte TRAINEND1;
protected byte TRAINEND2;
protected byte TRAINEND3;
protected byte TRAINHRS1;
protected byte TRAINHRS2;
protected byte TRAINHRS3;
protected byte TRAINN;
protected byte TRAINPURP11;
protected byte TRAINPURP12;
protected byte TRAINPURP13;
protected byte TRAINPURP21;
protected byte TRAINPURP22;
protected byte TRAINPURP23;
protected byte TRAINPURP31;
protected byte TRAINPURP32;
protected byte TRAINPURP33;
protected byte TRAINPURP41;
protected byte TRAINPURP42;
protected byte TRAINPURP43;
protected byte TRAINPURP51;
protected byte TRAINPURP52;
protected byte TRAINPURP53;
protected byte TRAINPURP61;
protected byte TRAINPURP62;
protected byte TRAINPURP63;
protected byte TRAINPURP71;
protected byte TRAINPURP72;
protected byte TRAINPURP73;
protected byte TRAINQUAL1;
protected byte TRAINQUAL2;
protected byte TRAINQUAL3;
protected byte TRBIKEFQ;
protected byte TRBUSFQ;
protected byte TRCARFQ;
protected byte TRQUAL1;
protected byte TRQUAL10;
protected byte TRQUAL11;
protected byte TRQUAL13;
protected byte TRQUAL15;
protected byte TRQUAL16;
protected byte TRQUAL17;
protected byte TRQUAL18;
protected byte TRQUAL19;
protected byte TRQUAL2;
protected byte TRQUAL20;
protected byte TRQUAL21;
protected byte TRQUAL22;
protected byte TRQUAL23;
protected byte TRQUAL24;
protected byte TRQUAL25;
protected byte TRQUAL26;
protected byte TRQUAL27;
protected byte TRQUAL28;
protected byte TRQUAL29;
protected byte TRQUAL3;
protected byte TRQUAL30;
protected byte TRQUAL31;
protected byte TRQUAL32;
protected byte TRQUAL33;
protected byte TRQUAL34;
protected byte TRQUAL4;
protected byte TRQUAL5;
protected byte TRQUAL6;
protected byte TRQUAL7;
protected byte TRQUAL8;
protected byte TRQUAL9;
protected byte TRTRNFQ;
protected byte TRWHO1;
protected byte TRWHO2;
protected byte TRWHO3;
protected short TUIN1;
protected short TUJBPL;
protected byte TWKCAR;
protected byte TWKDIFF1;
protected byte TWKDIFF2;
protected byte TWKDIFF3;
protected byte TWKDIFF4;
protected byte TWKDIFF5;
protected byte TWKDIFF6;
protected byte TWKDIFF7;
protected byte TWKDIFF8;
protected byte TWKDIFF97;
protected byte TWKDIFFM;
protected byte UKBORN;
protected byte UNDQUS;
protected byte UNIFIN1;
protected byte UNISUB1;
protected byte UPSET;
protected byte URBAN_DV;
protected byte VOLFREQ;
protected short VOLHRS;
protected byte VOLUN;
protected byte VOTE7;
protected byte VOTE8;
protected byte VOUCHLETTER;
protected byte WKAUT1;
protected byte WKAUT2;
protected byte WKAUT3;
protected byte WKAUT4;
protected byte WKAUT5;
protected byte WKENDS;
protected byte WKPLSAM;
protected short WKTIME;
protected short WORKDIS;
protected byte WORKTRAV;
protected int XPBORROW;
protected int XPEARN1;
protected byte XPEARN1DK;
protected int XPEARN3;
protected byte XPEARN3DK;
protected int XPEARNG1;
protected byte XPEARNG1DK;
protected int XPEARNG3;
protected byte XPEARNG3DK;
protected byte XPMOVE;
protected byte XPMVMNTH;
protected byte XPMVWHN;
protected byte XPMVWHR;
protected short XPMVYR;
protected int XPTUITION;
protected byte XTRA5MINOSM_DV;
protected byte XTRA5MIN_DV;
protected byte YAFUTA;
protected byte YAFUTB;
protected byte YAJBSRV1;
protected byte YAJBSRV2;
protected byte YAJBSRV3;
protected byte YAJBSRV4;
protected byte YAJBSRV5;
protected byte YAJBSRV7;
protected byte YAJBSRV8;
protected byte YAJBSRV96;
protected byte YANSSEC5_DV;
protected short YASOC00_CC;
protected short YASOC10_CC;
protected byte YASOC90_CC;
protected byte YNOTBIKE1;
protected byte YNOTBIKE2;
protected byte YNOTBIKE3;
protected byte YNOTBIKE96;
protected byte YPAMAR;
protected byte YPAPAR;
protected byte YPESTA;
protected byte YPESTB;
protected byte YPESTC;
protected byte YPESTE;
protected byte YPESTF;
protected byte YPESTI;
protected byte YPESTJ;
protected byte YPESTK;
protected byte YPNETCHT;
protected byte YPNPAL;
protected byte YPSOCWEB;
protected final void initADCTS(String s) {
if (!s.trim().isEmpty()) {
ADCTS = Byte.parseByte(s);
} else {
ADCTS = Byte.MIN_VALUE;
}
}

protected final void initAEDROF1(String s) {
if (!s.trim().isEmpty()) {
AEDROF1 = Byte.parseByte(s);
} else {
AEDROF1 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF2(String s) {
if (!s.trim().isEmpty()) {
AEDROF2 = Byte.parseByte(s);
} else {
AEDROF2 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF3(String s) {
if (!s.trim().isEmpty()) {
AEDROF3 = Byte.parseByte(s);
} else {
AEDROF3 = Byte.MIN_VALUE;
}
}

protected final void initAEDROF4(String s) {
if (!s.trim().isEmpty()) {
AEDROF4 = Byte.parseByte(s);
} else {
AEDROF4 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA1(String s) {
if (!s.trim().isEmpty()) {
AEPUDA1 = Double.parseDouble(s);
} else {
AEPUDA1 = Double.NaN;
}
}

protected final void initAEPUDA2(String s) {
if (!s.trim().isEmpty()) {
AEPUDA2 = Byte.parseByte(s);
} else {
AEPUDA2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA3(String s) {
if (!s.trim().isEmpty()) {
AEPUDA3 = Byte.parseByte(s);
} else {
AEPUDA3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUDA4(String s) {
if (!s.trim().isEmpty()) {
AEPUDA4 = Byte.parseByte(s);
} else {
AEPUDA4 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK1(String s) {
if (!s.trim().isEmpty()) {
AEPUWK1 = Byte.parseByte(s);
} else {
AEPUWK1 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK2(String s) {
if (!s.trim().isEmpty()) {
AEPUWK2 = Byte.parseByte(s);
} else {
AEPUWK2 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK3(String s) {
if (!s.trim().isEmpty()) {
AEPUWK3 = Byte.parseByte(s);
} else {
AEPUWK3 = Byte.MIN_VALUE;
}
}

protected final void initAEPUWK4(String s) {
if (!s.trim().isEmpty()) {
AEPUWK4 = Byte.parseByte(s);
} else {
AEPUWK4 = Byte.MIN_VALUE;
}
}

protected final void initAGEGR10_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR10_DV = Byte.parseByte(s);
} else {
AGEGR10_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR13_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR13_DV = Byte.parseByte(s);
} else {
AGEGR13_DV = Byte.MIN_VALUE;
}
}

protected final void initAGEGR5_DV(String s) {
if (!s.trim().isEmpty()) {
AGEGR5_DV = Byte.parseByte(s);
} else {
AGEGR5_DV = Byte.MIN_VALUE;
}
}

protected final void initAGERET(String s) {
if (!s.trim().isEmpty()) {
AGERET = Byte.parseByte(s);
} else {
AGERET = Byte.MIN_VALUE;
}
}

protected final void initAGE_DV(String s) {
if (!s.trim().isEmpty()) {
AGE_DV = Short.parseShort(s);
} else {
AGE_DV = Short.MIN_VALUE;
}
}

protected final void initAHVWELL(String s) {
if (!s.trim().isEmpty()) {
AHVWELL = Byte.parseByte(s);
} else {
AHVWELL = Byte.MIN_VALUE;
}
}

protected final void initAIDEFT(String s) {
if (!s.trim().isEmpty()) {
AIDEFT = Byte.parseByte(s);
} else {
AIDEFT = Byte.MIN_VALUE;
}
}

protected final void initAIDHU1(String s) {
if (!s.trim().isEmpty()) {
AIDHU1 = Short.parseShort(s);
} else {
AIDHU1 = Short.MIN_VALUE;
}
}

protected final void initAIDHU2(String s) {
if (!s.trim().isEmpty()) {
AIDHU2 = Short.parseShort(s);
} else {
AIDHU2 = Short.MIN_VALUE;
}
}

protected final void initAIDHUA1(String s) {
if (!s.trim().isEmpty()) {
AIDHUA1 = Byte.parseByte(s);
} else {
AIDHUA1 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA10(String s) {
if (!s.trim().isEmpty()) {
AIDHUA10 = Byte.parseByte(s);
} else {
AIDHUA10 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA11(String s) {
if (!s.trim().isEmpty()) {
AIDHUA11 = Byte.parseByte(s);
} else {
AIDHUA11 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA12(String s) {
if (!s.trim().isEmpty()) {
AIDHUA12 = Byte.parseByte(s);
} else {
AIDHUA12 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA13(String s) {
if (!s.trim().isEmpty()) {
AIDHUA13 = Byte.parseByte(s);
} else {
AIDHUA13 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA14(String s) {
if (!s.trim().isEmpty()) {
AIDHUA14 = Byte.parseByte(s);
} else {
AIDHUA14 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA15(String s) {
if (!s.trim().isEmpty()) {
AIDHUA15 = Byte.parseByte(s);
} else {
AIDHUA15 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA16(String s) {
if (!s.trim().isEmpty()) {
AIDHUA16 = Byte.parseByte(s);
} else {
AIDHUA16 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA2(String s) {
if (!s.trim().isEmpty()) {
AIDHUA2 = Byte.parseByte(s);
} else {
AIDHUA2 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA3(String s) {
if (!s.trim().isEmpty()) {
AIDHUA3 = Byte.parseByte(s);
} else {
AIDHUA3 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA4(String s) {
if (!s.trim().isEmpty()) {
AIDHUA4 = Byte.parseByte(s);
} else {
AIDHUA4 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA5(String s) {
if (!s.trim().isEmpty()) {
AIDHUA5 = Byte.parseByte(s);
} else {
AIDHUA5 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA6(String s) {
if (!s.trim().isEmpty()) {
AIDHUA6 = Byte.parseByte(s);
} else {
AIDHUA6 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA7(String s) {
if (!s.trim().isEmpty()) {
AIDHUA7 = Byte.parseByte(s);
} else {
AIDHUA7 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA8(String s) {
if (!s.trim().isEmpty()) {
AIDHUA8 = Byte.parseByte(s);
} else {
AIDHUA8 = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA9(String s) {
if (!s.trim().isEmpty()) {
AIDHUA9 = Byte.parseByte(s);
} else {
AIDHUA9 = Byte.MIN_VALUE;
}
}

protected final void initAREA(String s) {
if (!s.trim().isEmpty()) {
AREA = Byte.parseByte(s);
} else {
AREA = Byte.MIN_VALUE;
}
}

protected final void initBASNSET(String s) {
if (!s.trim().isEmpty()) {
BASNSET = Byte.parseByte(s);
} else {
BASNSET = Byte.MIN_VALUE;
}
}

protected final void initBASRATE(String s) {
if (!s.trim().isEmpty()) {
BASRATE = Double.parseDouble(s);
} else {
BASRATE = Double.NaN;
}
}

protected final void initBASREST(String s) {
if (!s.trim().isEmpty()) {
BASREST = Byte.parseByte(s);
} else {
BASREST = Byte.MIN_VALUE;
}
}

protected final void initBENBASE1(String s) {
if (!s.trim().isEmpty()) {
BENBASE1 = Byte.parseByte(s);
} else {
BENBASE1 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE2(String s) {
if (!s.trim().isEmpty()) {
BENBASE2 = Byte.parseByte(s);
} else {
BENBASE2 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE3(String s) {
if (!s.trim().isEmpty()) {
BENBASE3 = Byte.parseByte(s);
} else {
BENBASE3 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE4(String s) {
if (!s.trim().isEmpty()) {
BENBASE4 = Byte.parseByte(s);
} else {
BENBASE4 = Byte.MIN_VALUE;
}
}

protected final void initBENBASE96(String s) {
if (!s.trim().isEmpty()) {
BENBASE96 = Byte.parseByte(s);
} else {
BENBASE96 = Byte.MIN_VALUE;
}
}

protected final void initBENCTC(String s) {
if (!s.trim().isEmpty()) {
BENCTC = Byte.parseByte(s);
} else {
BENCTC = Byte.MIN_VALUE;
}
}

protected final void initBENDIS1(String s) {
if (!s.trim().isEmpty()) {
BENDIS1 = Byte.parseByte(s);
} else {
BENDIS1 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS10(String s) {
if (!s.trim().isEmpty()) {
BENDIS10 = Byte.parseByte(s);
} else {
BENDIS10 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS12(String s) {
if (!s.trim().isEmpty()) {
BENDIS12 = Byte.parseByte(s);
} else {
BENDIS12 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS2(String s) {
if (!s.trim().isEmpty()) {
BENDIS2 = Byte.parseByte(s);
} else {
BENDIS2 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS3(String s) {
if (!s.trim().isEmpty()) {
BENDIS3 = Byte.parseByte(s);
} else {
BENDIS3 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS4(String s) {
if (!s.trim().isEmpty()) {
BENDIS4 = Byte.parseByte(s);
} else {
BENDIS4 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS5(String s) {
if (!s.trim().isEmpty()) {
BENDIS5 = Byte.parseByte(s);
} else {
BENDIS5 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS7(String s) {
if (!s.trim().isEmpty()) {
BENDIS7 = Byte.parseByte(s);
} else {
BENDIS7 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS8(String s) {
if (!s.trim().isEmpty()) {
BENDIS8 = Byte.parseByte(s);
} else {
BENDIS8 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS96(String s) {
if (!s.trim().isEmpty()) {
BENDIS96 = Byte.parseByte(s);
} else {
BENDIS96 = Byte.MIN_VALUE;
}
}

protected final void initBENDIS97(String s) {
if (!s.trim().isEmpty()) {
BENDIS97 = Byte.parseByte(s);
} else {
BENDIS97 = Byte.MIN_VALUE;
}
}

protected final void initBENESA(String s) {
if (!s.trim().isEmpty()) {
BENESA = Byte.parseByte(s);
} else {
BENESA = Byte.MIN_VALUE;
}
}

protected final void initBENPEN1(String s) {
if (!s.trim().isEmpty()) {
BENPEN1 = Byte.parseByte(s);
} else {
BENPEN1 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN2(String s) {
if (!s.trim().isEmpty()) {
BENPEN2 = Byte.parseByte(s);
} else {
BENPEN2 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN3(String s) {
if (!s.trim().isEmpty()) {
BENPEN3 = Byte.parseByte(s);
} else {
BENPEN3 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN4(String s) {
if (!s.trim().isEmpty()) {
BENPEN4 = Byte.parseByte(s);
} else {
BENPEN4 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN5(String s) {
if (!s.trim().isEmpty()) {
BENPEN5 = Byte.parseByte(s);
} else {
BENPEN5 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN6(String s) {
if (!s.trim().isEmpty()) {
BENPEN6 = Byte.parseByte(s);
} else {
BENPEN6 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN7(String s) {
if (!s.trim().isEmpty()) {
BENPEN7 = Byte.parseByte(s);
} else {
BENPEN7 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN8(String s) {
if (!s.trim().isEmpty()) {
BENPEN8 = Byte.parseByte(s);
} else {
BENPEN8 = Byte.MIN_VALUE;
}
}

protected final void initBENPEN96(String s) {
if (!s.trim().isEmpty()) {
BENPEN96 = Byte.parseByte(s);
} else {
BENPEN96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA2(String s) {
if (!s.trim().isEmpty()) {
BENSTA2 = Byte.parseByte(s);
} else {
BENSTA2 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA3(String s) {
if (!s.trim().isEmpty()) {
BENSTA3 = Byte.parseByte(s);
} else {
BENSTA3 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA4(String s) {
if (!s.trim().isEmpty()) {
BENSTA4 = Byte.parseByte(s);
} else {
BENSTA4 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA5(String s) {
if (!s.trim().isEmpty()) {
BENSTA5 = Byte.parseByte(s);
} else {
BENSTA5 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA6(String s) {
if (!s.trim().isEmpty()) {
BENSTA6 = Byte.parseByte(s);
} else {
BENSTA6 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA7(String s) {
if (!s.trim().isEmpty()) {
BENSTA7 = Byte.parseByte(s);
} else {
BENSTA7 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA96(String s) {
if (!s.trim().isEmpty()) {
BENSTA96 = Byte.parseByte(s);
} else {
BENSTA96 = Byte.MIN_VALUE;
}
}

protected final void initBENSTA97(String s) {
if (!s.trim().isEmpty()) {
BENSTA97 = Byte.parseByte(s);
} else {
BENSTA97 = Byte.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBUNO_DV(String s) {
if (!s.trim().isEmpty()) {
BUNO_DV = Byte.parseByte(s);
} else {
BUNO_DV = Byte.MIN_VALUE;
}
}

protected final void initCARBUY1(String s) {
if (!s.trim().isEmpty()) {
CARBUY1 = Byte.parseByte(s);
} else {
CARBUY1 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY10(String s) {
if (!s.trim().isEmpty()) {
CARBUY10 = Byte.parseByte(s);
} else {
CARBUY10 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY11(String s) {
if (!s.trim().isEmpty()) {
CARBUY11 = Byte.parseByte(s);
} else {
CARBUY11 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY12(String s) {
if (!s.trim().isEmpty()) {
CARBUY12 = Byte.parseByte(s);
} else {
CARBUY12 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY2(String s) {
if (!s.trim().isEmpty()) {
CARBUY2 = Byte.parseByte(s);
} else {
CARBUY2 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY3(String s) {
if (!s.trim().isEmpty()) {
CARBUY3 = Byte.parseByte(s);
} else {
CARBUY3 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY4(String s) {
if (!s.trim().isEmpty()) {
CARBUY4 = Byte.parseByte(s);
} else {
CARBUY4 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY5(String s) {
if (!s.trim().isEmpty()) {
CARBUY5 = Byte.parseByte(s);
} else {
CARBUY5 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY6(String s) {
if (!s.trim().isEmpty()) {
CARBUY6 = Byte.parseByte(s);
} else {
CARBUY6 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY7(String s) {
if (!s.trim().isEmpty()) {
CARBUY7 = Byte.parseByte(s);
} else {
CARBUY7 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY8(String s) {
if (!s.trim().isEmpty()) {
CARBUY8 = Byte.parseByte(s);
} else {
CARBUY8 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY9(String s) {
if (!s.trim().isEmpty()) {
CARBUY9 = Byte.parseByte(s);
} else {
CARBUY9 = Byte.MIN_VALUE;
}
}

protected final void initCARBUY97(String s) {
if (!s.trim().isEmpty()) {
CARBUY97 = Byte.parseByte(s);
} else {
CARBUY97 = Byte.MIN_VALUE;
}
}

protected final void initCARSRV1(String s) {
if (!s.trim().isEmpty()) {
CARSRV1 = Byte.parseByte(s);
} else {
CARSRV1 = Byte.MIN_VALUE;
}
}

protected final void initCARSRV2(String s) {
if (!s.trim().isEmpty()) {
CARSRV2 = Byte.parseByte(s);
} else {
CARSRV2 = Byte.MIN_VALUE;
}
}

protected final void initCARSRV3(String s) {
if (!s.trim().isEmpty()) {
CARSRV3 = Byte.parseByte(s);
} else {
CARSRV3 = Byte.MIN_VALUE;
}
}

protected final void initCASCH(String s) {
if (!s.trim().isEmpty()) {
CASCH = Byte.parseByte(s);
} else {
CASCH = Byte.MIN_VALUE;
}
}

protected final void initCASIINTNO(String s) {
if (!s.trim().isEmpty()) {
CASIINTNO = Integer.parseInt(s);
} else {
CASIINTNO = Integer.MIN_VALUE;
}
}

protected final void initCCAMTJT(String s) {
if (!s.trim().isEmpty()) {
CCAMTJT = Integer.parseInt(s);
} else {
CCAMTJT = Integer.MIN_VALUE;
}
}

protected final void initCCAMTSOLE(String s) {
if (!s.trim().isEmpty()) {
CCAMTSOLE = Integer.parseInt(s);
} else {
CCAMTSOLE = Integer.MIN_VALUE;
}
}

protected final void initCCARE(String s) {
if (!s.trim().isEmpty()) {
CCARE = Byte.parseByte(s);
} else {
CCARE = Byte.MIN_VALUE;
}
}

protected final void initCCBILLJT(String s) {
if (!s.trim().isEmpty()) {
CCBILLJT = Byte.parseByte(s);
} else {
CCBILLJT = Byte.MIN_VALUE;
}
}

protected final void initCCBILLSOLE(String s) {
if (!s.trim().isEmpty()) {
CCBILLSOLE = Byte.parseByte(s);
} else {
CCBILLSOLE = Byte.MIN_VALUE;
}
}

protected final void initCCJT(String s) {
if (!s.trim().isEmpty()) {
CCJT = Byte.parseByte(s);
} else {
CCJT = Byte.MIN_VALUE;
}
}

protected final void initCCJTP0(String s) {
if (!s.trim().isEmpty()) {
CCJTP0 = Byte.parseByte(s);
} else {
CCJTP0 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP1(String s) {
if (!s.trim().isEmpty()) {
CCJTP1 = Byte.parseByte(s);
} else {
CCJTP1 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP10(String s) {
if (!s.trim().isEmpty()) {
CCJTP10 = Byte.parseByte(s);
} else {
CCJTP10 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP11(String s) {
if (!s.trim().isEmpty()) {
CCJTP11 = Byte.parseByte(s);
} else {
CCJTP11 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP12(String s) {
if (!s.trim().isEmpty()) {
CCJTP12 = Byte.parseByte(s);
} else {
CCJTP12 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP13(String s) {
if (!s.trim().isEmpty()) {
CCJTP13 = Byte.parseByte(s);
} else {
CCJTP13 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP14(String s) {
if (!s.trim().isEmpty()) {
CCJTP14 = Byte.parseByte(s);
} else {
CCJTP14 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP15(String s) {
if (!s.trim().isEmpty()) {
CCJTP15 = Byte.parseByte(s);
} else {
CCJTP15 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP16(String s) {
if (!s.trim().isEmpty()) {
CCJTP16 = Byte.parseByte(s);
} else {
CCJTP16 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP2(String s) {
if (!s.trim().isEmpty()) {
CCJTP2 = Byte.parseByte(s);
} else {
CCJTP2 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP3(String s) {
if (!s.trim().isEmpty()) {
CCJTP3 = Byte.parseByte(s);
} else {
CCJTP3 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP4(String s) {
if (!s.trim().isEmpty()) {
CCJTP4 = Byte.parseByte(s);
} else {
CCJTP4 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP5(String s) {
if (!s.trim().isEmpty()) {
CCJTP5 = Byte.parseByte(s);
} else {
CCJTP5 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP6(String s) {
if (!s.trim().isEmpty()) {
CCJTP6 = Byte.parseByte(s);
} else {
CCJTP6 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP7(String s) {
if (!s.trim().isEmpty()) {
CCJTP7 = Byte.parseByte(s);
} else {
CCJTP7 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP8(String s) {
if (!s.trim().isEmpty()) {
CCJTP8 = Byte.parseByte(s);
} else {
CCJTP8 = Byte.MIN_VALUE;
}
}

protected final void initCCJTP9(String s) {
if (!s.trim().isEmpty()) {
CCJTP9 = Byte.parseByte(s);
} else {
CCJTP9 = Byte.MIN_VALUE;
}
}

protected final void initCCSOLE(String s) {
if (!s.trim().isEmpty()) {
CCSOLE = Byte.parseByte(s);
} else {
CCSOLE = Byte.MIN_VALUE;
}
}

protected final void initCCWORK(String s) {
if (!s.trim().isEmpty()) {
CCWORK = Byte.parseByte(s);
} else {
CCWORK = Byte.MIN_VALUE;
}
}

protected final void initCH1BY4(String s) {
if (!s.trim().isEmpty()) {
CH1BY4 = Short.parseShort(s);
} else {
CH1BY4 = Short.MIN_VALUE;
}
}

protected final void initCHARAM(String s) {
if (!s.trim().isEmpty()) {
CHARAM = Short.parseShort(s);
} else {
CHARAM = Short.MIN_VALUE;
}
}

protected final void initCHARFREQ(String s) {
if (!s.trim().isEmpty()) {
CHARFREQ = Byte.parseByte(s);
} else {
CHARFREQ = Byte.MIN_VALUE;
}
}

protected final void initCHARGV(String s) {
if (!s.trim().isEmpty()) {
CHARGV = Byte.parseByte(s);
} else {
CHARGV = Byte.MIN_VALUE;
}
}

protected final void initCHILDPNO(String s) {
if (!s.trim().isEmpty()) {
CHILDPNO = Byte.parseByte(s);
} else {
CHILDPNO = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP1(String s) {
if (!s.trim().isEmpty()) {
CHKRESP1 = Byte.parseByte(s);
} else {
CHKRESP1 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP2(String s) {
if (!s.trim().isEmpty()) {
CHKRESP2 = Byte.parseByte(s);
} else {
CHKRESP2 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP3(String s) {
if (!s.trim().isEmpty()) {
CHKRESP3 = Byte.parseByte(s);
} else {
CHKRESP3 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESP4(String s) {
if (!s.trim().isEmpty()) {
CHKRESP4 = Byte.parseByte(s);
} else {
CHKRESP4 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESPWEB1(String s) {
if (!s.trim().isEmpty()) {
CHKRESPWEB1 = Byte.parseByte(s);
} else {
CHKRESPWEB1 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESPWEB2(String s) {
if (!s.trim().isEmpty()) {
CHKRESPWEB2 = Byte.parseByte(s);
} else {
CHKRESPWEB2 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESPWEB3(String s) {
if (!s.trim().isEmpty()) {
CHKRESPWEB3 = Byte.parseByte(s);
} else {
CHKRESPWEB3 = Byte.MIN_VALUE;
}
}

protected final void initCHKRESPWEB4(String s) {
if (!s.trim().isEmpty()) {
CHKRESPWEB4 = Byte.parseByte(s);
} else {
CHKRESPWEB4 = Byte.MIN_VALUE;
}
}

protected final void initCHKWEBDOBD(String s) {
if (!s.trim().isEmpty()) {
CHKWEBDOBD = Byte.parseByte(s);
} else {
CHKWEBDOBD = Byte.MIN_VALUE;
}
}

protected final void initCHKWEBDOBM(String s) {
if (!s.trim().isEmpty()) {
CHKWEBDOBM = Byte.parseByte(s);
} else {
CHKWEBDOBM = Byte.MIN_VALUE;
}
}

protected final void initCHKWEBDOBY(String s) {
if (!s.trim().isEmpty()) {
CHKWEBDOBY = Short.parseShort(s);
} else {
CHKWEBDOBY = Short.MIN_VALUE;
}
}

protected final void initCHKWEBSEX(String s) {
if (!s.trim().isEmpty()) {
CHKWEBSEX = Byte.parseByte(s);
} else {
CHKWEBSEX = Byte.MIN_VALUE;
}
}

protected final void initCITZN1(String s) {
if (!s.trim().isEmpty()) {
CITZN1 = Byte.parseByte(s);
} else {
CITZN1 = Byte.MIN_VALUE;
}
}

protected final void initCITZN2(String s) {
if (!s.trim().isEmpty()) {
CITZN2 = Byte.parseByte(s);
} else {
CITZN2 = Byte.MIN_VALUE;
}
}

protected final void initCITZN3(String s) {
if (!s.trim().isEmpty()) {
CITZN3 = Byte.parseByte(s);
} else {
CITZN3 = Byte.MIN_VALUE;
}
}

protected final void initCJBATT(String s) {
if (!s.trim().isEmpty()) {
CJBATT = Byte.parseByte(s);
} else {
CJBATT = Byte.MIN_VALUE;
}
}

protected final void initCJOB(String s) {
if (!s.trim().isEmpty()) {
CJOB = Byte.parseByte(s);
} else {
CJOB = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT1(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT1 = Byte.parseByte(s);
} else {
CMLSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT2(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT2 = Byte.parseByte(s);
} else {
CMLSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT3(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT3 = Byte.parseByte(s);
} else {
CMLSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT4(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT4 = Byte.parseByte(s);
} else {
CMLSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initCMLSTAT5(String s) {
if (!s.trim().isEmpty()) {
CMLSTAT5 = Byte.parseByte(s);
} else {
CMLSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initCOH1BM(String s) {
if (!s.trim().isEmpty()) {
COH1BM = Byte.parseByte(s);
} else {
COH1BM = Byte.MIN_VALUE;
}
}

protected final void initCOH1BY(String s) {
if (!s.trim().isEmpty()) {
COH1BY = Short.parseShort(s);
} else {
COH1BY = Short.MIN_VALUE;
}
}

protected final void initCOH1EM(String s) {
if (!s.trim().isEmpty()) {
COH1EM = Byte.parseByte(s);
} else {
COH1EM = Byte.MIN_VALUE;
}
}

protected final void initCOH1EY(String s) {
if (!s.trim().isEmpty()) {
COH1EY = Short.parseShort(s);
} else {
COH1EY = Short.MIN_VALUE;
}
}

protected final void initCOH1MR(String s) {
if (!s.trim().isEmpty()) {
COH1MR = Byte.parseByte(s);
} else {
COH1MR = Byte.MIN_VALUE;
}
}

protected final void initCOHAB(String s) {
if (!s.trim().isEmpty()) {
COHAB = Byte.parseByte(s);
} else {
COHAB = Byte.MIN_VALUE;
}
}

protected final void initCOHABN(String s) {
if (!s.trim().isEmpty()) {
COHABN = Byte.parseByte(s);
} else {
COHABN = Byte.MIN_VALUE;
}
}

protected final void initCOHAB_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
COHAB_DV = false;
} else {
COHAB_DV = true;
}
}
}

protected final void initCONTFT(String s) {
if (!s.trim().isEmpty()) {
CONTFT = Byte.parseByte(s);
} else {
CONTFT = Byte.MIN_VALUE;
}
}

protected final void initCOOPNXTYR(String s) {
if (!s.trim().isEmpty()) {
COOPNXTYR = Byte.parseByte(s);
} else {
COOPNXTYR = Byte.MIN_VALUE;
}
}

protected final void initCOUNTRY(String s) {
if (!s.trim().isEmpty()) {
COUNTRY = Byte.parseByte(s);
} else {
COUNTRY = Byte.MIN_VALUE;
}
}

protected final void initCREDJT(String s) {
if (!s.trim().isEmpty()) {
CREDJT = Integer.parseInt(s);
} else {
CREDJT = Integer.MIN_VALUE;
}
}

protected final void initCREDSOLE(String s) {
if (!s.trim().isEmpty()) {
CREDSOLE = Integer.parseInt(s);
} else {
CREDSOLE = Integer.MIN_VALUE;
}
}

protected final void initCSTAT(String s) {
if (!s.trim().isEmpty()) {
CSTAT = Byte.parseByte(s);
} else {
CSTAT = Byte.MIN_VALUE;
}
}

protected final void initCTADD1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD1_CODE = Byte.parseByte(s);
} else {
CTADD1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTADD2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTADD2_CODE = Byte.parseByte(s);
} else {
CTADD2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCNTY_CODE(String s) {
if (!s.trim().isEmpty()) {
CTCNTY_CODE = Byte.parseByte(s);
} else {
CTCNTY_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF1(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF1 = Byte.parseByte(s);
} else {
CTCONSCONF1 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF2(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF2 = Byte.parseByte(s);
} else {
CTCONSCONF2 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF3(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF3 = Byte.parseByte(s);
} else {
CTCONSCONF3 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF4(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF4 = Byte.parseByte(s);
} else {
CTCONSCONF4 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF5(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF5 = Byte.parseByte(s);
} else {
CTCONSCONF5 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF6(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF6 = Byte.parseByte(s);
} else {
CTCONSCONF6 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF7(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF7 = Byte.parseByte(s);
} else {
CTCONSCONF7 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF8(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF8 = Byte.parseByte(s);
} else {
CTCONSCONF8 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF94(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF94 = Byte.parseByte(s);
} else {
CTCONSCONF94 = Byte.MIN_VALUE;
}
}

protected final void initCTCONSCONF95(String s) {
if (!s.trim().isEmpty()) {
CTCONSCONF95 = Byte.parseByte(s);
} else {
CTCONSCONF95 = Byte.MIN_VALUE;
}
}

protected final void initCTEMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
CTEMAIL_CODE = Byte.parseByte(s);
} else {
CTEMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTPCODE_CODE(String s) {
if (!s.trim().isEmpty()) {
CTPCODE_CODE = Byte.parseByte(s);
} else {
CTPCODE_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTREL(String s) {
if (!s.trim().isEmpty()) {
CTREL = Byte.parseByte(s);
} else {
CTREL = Byte.MIN_VALUE;
}
}

protected final void initCTTEL1_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL1_CODE = Byte.parseByte(s);
} else {
CTTEL1_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTEL2_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTEL2_CODE = Byte.parseByte(s);
} else {
CTTEL2_CODE = Byte.MIN_VALUE;
}
}

protected final void initCTTOWN_CODE(String s) {
if (!s.trim().isEmpty()) {
CTTOWN_CODE = Byte.parseByte(s);
} else {
CTTOWN_CODE = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB1(String s) {
if (!s.trim().isEmpty()) {
CURRJOB1 = Byte.parseByte(s);
} else {
CURRJOB1 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB2(String s) {
if (!s.trim().isEmpty()) {
CURRJOB2 = Byte.parseByte(s);
} else {
CURRJOB2 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB3(String s) {
if (!s.trim().isEmpty()) {
CURRJOB3 = Byte.parseByte(s);
} else {
CURRJOB3 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB4(String s) {
if (!s.trim().isEmpty()) {
CURRJOB4 = Byte.parseByte(s);
} else {
CURRJOB4 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB5(String s) {
if (!s.trim().isEmpty()) {
CURRJOB5 = Byte.parseByte(s);
} else {
CURRJOB5 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB6(String s) {
if (!s.trim().isEmpty()) {
CURRJOB6 = Byte.parseByte(s);
} else {
CURRJOB6 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB7(String s) {
if (!s.trim().isEmpty()) {
CURRJOB7 = Byte.parseByte(s);
} else {
CURRJOB7 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB8(String s) {
if (!s.trim().isEmpty()) {
CURRJOB8 = Byte.parseByte(s);
} else {
CURRJOB8 = Byte.MIN_VALUE;
}
}

protected final void initCURRJOB9(String s) {
if (!s.trim().isEmpty()) {
CURRJOB9 = Byte.parseByte(s);
} else {
CURRJOB9 = Byte.MIN_VALUE;
}
}

protected final void initCURRMSTAT(String s) {
if (!s.trim().isEmpty()) {
CURRMSTAT = Byte.parseByte(s);
} else {
CURRMSTAT = Byte.MIN_VALUE;
}
}

protected final void initCURRPART1(String s) {
if (!s.trim().isEmpty()) {
CURRPART1 = Byte.parseByte(s);
} else {
CURRPART1 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART2(String s) {
if (!s.trim().isEmpty()) {
CURRPART2 = Byte.parseByte(s);
} else {
CURRPART2 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART3(String s) {
if (!s.trim().isEmpty()) {
CURRPART3 = Byte.parseByte(s);
} else {
CURRPART3 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART4(String s) {
if (!s.trim().isEmpty()) {
CURRPART4 = Byte.parseByte(s);
} else {
CURRPART4 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART5(String s) {
if (!s.trim().isEmpty()) {
CURRPART5 = Byte.parseByte(s);
} else {
CURRPART5 = Byte.MIN_VALUE;
}
}

protected final void initCURRPART6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CURRPART6 = false;
} else {
CURRPART6 = true;
}
}
}

protected final void initCURRPART7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CURRPART7 = false;
} else {
CURRPART7 = true;
}
}
}

protected final void initCURRSTAT1(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT1 = Byte.parseByte(s);
} else {
CURRSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT2(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT2 = Byte.parseByte(s);
} else {
CURRSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT3(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT3 = Byte.parseByte(s);
} else {
CURRSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT4(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT4 = Byte.parseByte(s);
} else {
CURRSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT5(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT5 = Byte.parseByte(s);
} else {
CURRSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT6(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT6 = Byte.parseByte(s);
} else {
CURRSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT7(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT7 = Byte.parseByte(s);
} else {
CURRSTAT7 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT8(String s) {
if (!s.trim().isEmpty()) {
CURRSTAT8 = Byte.parseByte(s);
} else {
CURRSTAT8 = Byte.MIN_VALUE;
}
}

protected final void initCURRSTAT9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
CURRSTAT9 = false;
} else {
CURRSTAT9 = true;
}
}
}

protected final void initDCDOBY(String s) {
if (!s.trim().isEmpty()) {
DCDOBY = Short.parseShort(s);
} else {
DCDOBY = Short.MIN_VALUE;
}
}

protected final void initDCSEX(String s) {
if (!s.trim().isEmpty()) {
DCSEX = Byte.parseByte(s);
} else {
DCSEX = Byte.MIN_VALUE;
}
}

protected final void initDEBT1(String s) {
if (!s.trim().isEmpty()) {
DEBT1 = Byte.parseByte(s);
} else {
DEBT1 = Byte.MIN_VALUE;
}
}

protected final void initDEBT2(String s) {
if (!s.trim().isEmpty()) {
DEBT2 = Byte.parseByte(s);
} else {
DEBT2 = Byte.MIN_VALUE;
}
}

protected final void initDEBT4(String s) {
if (!s.trim().isEmpty()) {
DEBT4 = Byte.parseByte(s);
} else {
DEBT4 = Byte.MIN_VALUE;
}
}

protected final void initDEBT5(String s) {
if (!s.trim().isEmpty()) {
DEBT5 = Byte.parseByte(s);
} else {
DEBT5 = Byte.MIN_VALUE;
}
}

protected final void initDEBT6(String s) {
if (!s.trim().isEmpty()) {
DEBT6 = Byte.parseByte(s);
} else {
DEBT6 = Byte.MIN_VALUE;
}
}

protected final void initDEBT7(String s) {
if (!s.trim().isEmpty()) {
DEBT7 = Byte.parseByte(s);
} else {
DEBT7 = Byte.MIN_VALUE;
}
}

protected final void initDEBT8(String s) {
if (!s.trim().isEmpty()) {
DEBT8 = Byte.parseByte(s);
} else {
DEBT8 = Byte.MIN_VALUE;
}
}

protected final void initDEBT96(String s) {
if (!s.trim().isEmpty()) {
DEBT96 = Byte.parseByte(s);
} else {
DEBT96 = Byte.MIN_VALUE;
}
}

protected final void initDEBT97(String s) {
if (!s.trim().isEmpty()) {
DEBT97 = Byte.parseByte(s);
} else {
DEBT97 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC1(String s) {
if (!s.trim().isEmpty()) {
DEBTC1 = Byte.parseByte(s);
} else {
DEBTC1 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC2(String s) {
if (!s.trim().isEmpty()) {
DEBTC2 = Byte.parseByte(s);
} else {
DEBTC2 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC3(String s) {
if (!s.trim().isEmpty()) {
DEBTC3 = Byte.parseByte(s);
} else {
DEBTC3 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC4(String s) {
if (!s.trim().isEmpty()) {
DEBTC4 = Byte.parseByte(s);
} else {
DEBTC4 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC5(String s) {
if (!s.trim().isEmpty()) {
DEBTC5 = Byte.parseByte(s);
} else {
DEBTC5 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN0(String s) {
if (!s.trim().isEmpty()) {
DEBTPN0 = Byte.parseByte(s);
} else {
DEBTPN0 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN1(String s) {
if (!s.trim().isEmpty()) {
DEBTPN1 = Byte.parseByte(s);
} else {
DEBTPN1 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN10(String s) {
if (!s.trim().isEmpty()) {
DEBTPN10 = Byte.parseByte(s);
} else {
DEBTPN10 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN11(String s) {
if (!s.trim().isEmpty()) {
DEBTPN11 = Byte.parseByte(s);
} else {
DEBTPN11 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN12(String s) {
if (!s.trim().isEmpty()) {
DEBTPN12 = Byte.parseByte(s);
} else {
DEBTPN12 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN13(String s) {
if (!s.trim().isEmpty()) {
DEBTPN13 = Byte.parseByte(s);
} else {
DEBTPN13 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN14(String s) {
if (!s.trim().isEmpty()) {
DEBTPN14 = Byte.parseByte(s);
} else {
DEBTPN14 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN15(String s) {
if (!s.trim().isEmpty()) {
DEBTPN15 = Byte.parseByte(s);
} else {
DEBTPN15 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN16(String s) {
if (!s.trim().isEmpty()) {
DEBTPN16 = Byte.parseByte(s);
} else {
DEBTPN16 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN2(String s) {
if (!s.trim().isEmpty()) {
DEBTPN2 = Byte.parseByte(s);
} else {
DEBTPN2 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN3(String s) {
if (!s.trim().isEmpty()) {
DEBTPN3 = Byte.parseByte(s);
} else {
DEBTPN3 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN4(String s) {
if (!s.trim().isEmpty()) {
DEBTPN4 = Byte.parseByte(s);
} else {
DEBTPN4 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN5(String s) {
if (!s.trim().isEmpty()) {
DEBTPN5 = Byte.parseByte(s);
} else {
DEBTPN5 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN6(String s) {
if (!s.trim().isEmpty()) {
DEBTPN6 = Byte.parseByte(s);
} else {
DEBTPN6 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN7(String s) {
if (!s.trim().isEmpty()) {
DEBTPN7 = Byte.parseByte(s);
} else {
DEBTPN7 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN8(String s) {
if (!s.trim().isEmpty()) {
DEBTPN8 = Byte.parseByte(s);
} else {
DEBTPN8 = Byte.MIN_VALUE;
}
}

protected final void initDEBTPN9(String s) {
if (!s.trim().isEmpty()) {
DEBTPN9 = Byte.parseByte(s);
} else {
DEBTPN9 = Byte.MIN_VALUE;
}
}

protected final void initDEBTSJ(String s) {
if (!s.trim().isEmpty()) {
DEBTSJ = Byte.parseByte(s);
} else {
DEBTSJ = Byte.MIN_VALUE;
}
}

protected final void initDEBTSK(String s) {
if (!s.trim().isEmpty()) {
DEBTSK = Integer.parseInt(s);
} else {
DEBTSK = Integer.MIN_VALUE;
}
}

protected final void initDEBTY(String s) {
if (!s.trim().isEmpty()) {
DEBTY = Integer.parseInt(s);
} else {
DEBTY = Integer.MIN_VALUE;
}
}

protected final void initDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DEPCHL_DV = false;
} else {
DEPCHL_DV = true;
}
}
}

protected final void initDEPENTH1(String s) {
if (!s.trim().isEmpty()) {
DEPENTH1 = Byte.parseByte(s);
} else {
DEPENTH1 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH2(String s) {
if (!s.trim().isEmpty()) {
DEPENTH2 = Byte.parseByte(s);
} else {
DEPENTH2 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH3(String s) {
if (!s.trim().isEmpty()) {
DEPENTH3 = Byte.parseByte(s);
} else {
DEPENTH3 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH4(String s) {
if (!s.trim().isEmpty()) {
DEPENTH4 = Byte.parseByte(s);
} else {
DEPENTH4 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH5(String s) {
if (!s.trim().isEmpty()) {
DEPENTH5 = Byte.parseByte(s);
} else {
DEPENTH5 = Byte.MIN_VALUE;
}
}

protected final void initDEPENTH6(String s) {
if (!s.trim().isEmpty()) {
DEPENTH6 = Byte.parseByte(s);
} else {
DEPENTH6 = Byte.MIN_VALUE;
}
}

protected final void initDETINC1(String s) {
if (!s.trim().isEmpty()) {
DETINC1 = Byte.parseByte(s);
} else {
DETINC1 = Byte.MIN_VALUE;
}
}

protected final void initDETINC2(String s) {
if (!s.trim().isEmpty()) {
DETINC2 = Byte.parseByte(s);
} else {
DETINC2 = Byte.MIN_VALUE;
}
}

protected final void initDETINC3(String s) {
if (!s.trim().isEmpty()) {
DETINC3 = Byte.parseByte(s);
} else {
DETINC3 = Byte.MIN_VALUE;
}
}

protected final void initDETINC4(String s) {
if (!s.trim().isEmpty()) {
DETINC4 = Byte.parseByte(s);
} else {
DETINC4 = Byte.MIN_VALUE;
}
}

protected final void initDETINC5(String s) {
if (!s.trim().isEmpty()) {
DETINC5 = Byte.parseByte(s);
} else {
DETINC5 = Byte.MIN_VALUE;
}
}

protected final void initDETINC6(String s) {
if (!s.trim().isEmpty()) {
DETINC6 = Byte.parseByte(s);
} else {
DETINC6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF1(String s) {
if (!s.trim().isEmpty()) {
DISDIF1 = Byte.parseByte(s);
} else {
DISDIF1 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF10(String s) {
if (!s.trim().isEmpty()) {
DISDIF10 = Byte.parseByte(s);
} else {
DISDIF10 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF11(String s) {
if (!s.trim().isEmpty()) {
DISDIF11 = Byte.parseByte(s);
} else {
DISDIF11 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF12(String s) {
if (!s.trim().isEmpty()) {
DISDIF12 = Byte.parseByte(s);
} else {
DISDIF12 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF2(String s) {
if (!s.trim().isEmpty()) {
DISDIF2 = Byte.parseByte(s);
} else {
DISDIF2 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF3(String s) {
if (!s.trim().isEmpty()) {
DISDIF3 = Byte.parseByte(s);
} else {
DISDIF3 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF4(String s) {
if (!s.trim().isEmpty()) {
DISDIF4 = Byte.parseByte(s);
} else {
DISDIF4 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF5(String s) {
if (!s.trim().isEmpty()) {
DISDIF5 = Byte.parseByte(s);
} else {
DISDIF5 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF6(String s) {
if (!s.trim().isEmpty()) {
DISDIF6 = Byte.parseByte(s);
} else {
DISDIF6 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF7(String s) {
if (!s.trim().isEmpty()) {
DISDIF7 = Byte.parseByte(s);
} else {
DISDIF7 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF8(String s) {
if (!s.trim().isEmpty()) {
DISDIF8 = Byte.parseByte(s);
} else {
DISDIF8 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF9(String s) {
if (!s.trim().isEmpty()) {
DISDIF9 = Byte.parseByte(s);
} else {
DISDIF9 = Byte.MIN_VALUE;
}
}

protected final void initDISDIF96(String s) {
if (!s.trim().isEmpty()) {
DISDIF96 = Byte.parseByte(s);
} else {
DISDIF96 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV1(String s) {
if (!s.trim().isEmpty()) {
DISSEV1 = Byte.parseByte(s);
} else {
DISSEV1 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV10(String s) {
if (!s.trim().isEmpty()) {
DISSEV10 = Byte.parseByte(s);
} else {
DISSEV10 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV11(String s) {
if (!s.trim().isEmpty()) {
DISSEV11 = Byte.parseByte(s);
} else {
DISSEV11 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV12(String s) {
if (!s.trim().isEmpty()) {
DISSEV12 = Byte.parseByte(s);
} else {
DISSEV12 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV2(String s) {
if (!s.trim().isEmpty()) {
DISSEV2 = Byte.parseByte(s);
} else {
DISSEV2 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV3(String s) {
if (!s.trim().isEmpty()) {
DISSEV3 = Byte.parseByte(s);
} else {
DISSEV3 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV4(String s) {
if (!s.trim().isEmpty()) {
DISSEV4 = Byte.parseByte(s);
} else {
DISSEV4 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV5(String s) {
if (!s.trim().isEmpty()) {
DISSEV5 = Byte.parseByte(s);
} else {
DISSEV5 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV6(String s) {
if (!s.trim().isEmpty()) {
DISSEV6 = Byte.parseByte(s);
} else {
DISSEV6 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV7(String s) {
if (!s.trim().isEmpty()) {
DISSEV7 = Byte.parseByte(s);
} else {
DISSEV7 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV8(String s) {
if (!s.trim().isEmpty()) {
DISSEV8 = Byte.parseByte(s);
} else {
DISSEV8 = Byte.MIN_VALUE;
}
}

protected final void initDISSEV9(String s) {
if (!s.trim().isEmpty()) {
DISSEV9 = Byte.parseByte(s);
} else {
DISSEV9 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK1(String s) {
if (!s.trim().isEmpty()) {
DIVCHK1 = Byte.parseByte(s);
} else {
DIVCHK1 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK2(String s) {
if (!s.trim().isEmpty()) {
DIVCHK2 = Byte.parseByte(s);
} else {
DIVCHK2 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK3(String s) {
if (!s.trim().isEmpty()) {
DIVCHK3 = Byte.parseByte(s);
} else {
DIVCHK3 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK4(String s) {
if (!s.trim().isEmpty()) {
DIVCHK4 = Byte.parseByte(s);
} else {
DIVCHK4 = Byte.MIN_VALUE;
}
}

protected final void initDIVCHK5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
DIVCHK5 = false;
} else {
DIVCHK5 = true;
}
}
}

protected final void initDIVFIN1(String s) {
if (!s.trim().isEmpty()) {
DIVFIN1 = Byte.parseByte(s);
} else {
DIVFIN1 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN2(String s) {
if (!s.trim().isEmpty()) {
DIVFIN2 = Byte.parseByte(s);
} else {
DIVFIN2 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN3(String s) {
if (!s.trim().isEmpty()) {
DIVFIN3 = Byte.parseByte(s);
} else {
DIVFIN3 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN4(String s) {
if (!s.trim().isEmpty()) {
DIVFIN4 = Byte.parseByte(s);
} else {
DIVFIN4 = Byte.MIN_VALUE;
}
}

protected final void initDIVFIN5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
DIVFIN5 = false;
} else {
DIVFIN5 = true;
}
}
}

protected final void initDKLM(String s) {
if (!s.trim().isEmpty()) {
DKLM = Byte.parseByte(s);
} else {
DKLM = Byte.MIN_VALUE;
}
}

protected final void initDOBY_DV(String s) {
if (!s.trim().isEmpty()) {
DOBY_DV = Short.parseShort(s);
} else {
DOBY_DV = Short.MIN_VALUE;
}
}

protected final void initDONEPROXY(String s) {
if (!s.trim().isEmpty()) {
DONEPROXY = Byte.parseByte(s);
} else {
DONEPROXY = Byte.MIN_VALUE;
}
}

protected final void initDRGMJ(String s) {
if (!s.trim().isEmpty()) {
DRGMJ = Byte.parseByte(s);
} else {
DRGMJ = Byte.MIN_VALUE;
}
}

protected final void initDRGOTH(String s) {
if (!s.trim().isEmpty()) {
DRGOTH = Byte.parseByte(s);
} else {
DRGOTH = Byte.MIN_VALUE;
}
}

protected final void initDRGSOL(String s) {
if (!s.trim().isEmpty()) {
DRGSOL = Byte.parseByte(s);
} else {
DRGSOL = Byte.MIN_VALUE;
}
}

protected final void initDRIVE(String s) {
if (!s.trim().isEmpty()) {
DRIVE = Byte.parseByte(s);
} else {
DRIVE = Byte.MIN_VALUE;
}
}

protected final void initDRNK4W(String s) {
if (!s.trim().isEmpty()) {
DRNK4W = Byte.parseByte(s);
} else {
DRNK4W = Byte.MIN_VALUE;
}
}

protected final void initDVAGE(String s) {
if (!s.trim().isEmpty()) {
DVAGE = Byte.parseByte(s);
} else {
DVAGE = Byte.MIN_VALUE;
}
}

protected final void initDVM1(String s) {
if (!s.trim().isEmpty()) {
DVM1 = Byte.parseByte(s);
} else {
DVM1 = Byte.MIN_VALUE;
}
}

protected final void initDVM2(String s) {
if (!s.trim().isEmpty()) {
DVM2 = Byte.parseByte(s);
} else {
DVM2 = Byte.MIN_VALUE;
}
}

protected final void initDVM3(String s) {
if (!s.trim().isEmpty()) {
DVM3 = Byte.parseByte(s);
} else {
DVM3 = Byte.MIN_VALUE;
}
}

protected final void initDVM4(String s) {
if (!s.trim().isEmpty()) {
DVM4 = Byte.parseByte(s);
} else {
DVM4 = Byte.MIN_VALUE;
}
}

protected final void initDVM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
DVM5 = false;
} else {
DVM5 = true;
}
}
}

protected final void initDVY41(String s) {
if (!s.trim().isEmpty()) {
DVY41 = Short.parseShort(s);
} else {
DVY41 = Short.MIN_VALUE;
}
}

protected final void initDVY42(String s) {
if (!s.trim().isEmpty()) {
DVY42 = Short.parseShort(s);
} else {
DVY42 = Short.MIN_VALUE;
}
}

protected final void initDVY43(String s) {
if (!s.trim().isEmpty()) {
DVY43 = Byte.parseByte(s);
} else {
DVY43 = Byte.MIN_VALUE;
}
}

protected final void initDVY44(String s) {
if (!s.trim().isEmpty()) {
DVY44 = Byte.parseByte(s);
} else {
DVY44 = Byte.MIN_VALUE;
}
}

protected final void initDVY45(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
DVY45 = false;
} else {
DVY45 = true;
}
}
}

protected final void initEATLIVU(String s) {
if (!s.trim().isEmpty()) {
EATLIVU = Byte.parseByte(s);
} else {
EATLIVU = Byte.MIN_VALUE;
}
}

protected final void initECIGS(String s) {
if (!s.trim().isEmpty()) {
ECIGS = Byte.parseByte(s);
} else {
ECIGS = Byte.MIN_VALUE;
}
}

protected final void initEDASP(String s) {
if (!s.trim().isEmpty()) {
EDASP = Byte.parseByte(s);
} else {
EDASP = Byte.MIN_VALUE;
}
}

protected final void initEDTYPE(String s) {
if (!s.trim().isEmpty()) {
EDTYPE = Short.parseShort(s);
} else {
EDTYPE = Short.MIN_VALUE;
}
}

protected final void initEDUCATION(String s) {
if (!s.trim().isEmpty()) {
EDUCATION = Byte.parseByte(s);
} else {
EDUCATION = Byte.MIN_VALUE;
}
}

protected final void initEMPCHK(String s) {
if (!s.trim().isEmpty()) {
EMPCHK = Byte.parseByte(s);
} else {
EMPCHK = Byte.MIN_VALUE;
}
}

protected final void initEMPLOY(String s) {
if (!s.trim().isEmpty()) {
EMPLOY = Byte.parseByte(s);
} else {
EMPLOY = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDD(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDD = Byte.parseByte(s);
} else {
EMPSTENDD = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDM(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDM = Byte.parseByte(s);
} else {
EMPSTENDM = Byte.MIN_VALUE;
}
}

protected final void initEMPSTENDY4(String s) {
if (!s.trim().isEmpty()) {
EMPSTENDY4 = Short.parseShort(s);
} else {
EMPSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initENDMNTH1(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH1 = Byte.parseByte(s);
} else {
ENDMNTH1 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH2(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH2 = Byte.parseByte(s);
} else {
ENDMNTH2 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH3(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH3 = Byte.parseByte(s);
} else {
ENDMNTH3 = Byte.MIN_VALUE;
}
}

protected final void initENDMNTH4(String s) {
if (!s.trim().isEmpty()) {
ENDMNTH4 = Byte.parseByte(s);
} else {
ENDMNTH4 = Byte.MIN_VALUE;
}
}

protected final void initEPROSH(String s) {
if (!s.trim().isEmpty()) {
EPROSH = Short.parseShort(s);
} else {
EPROSH = Short.MIN_VALUE;
}
}

protected final void initETHCLOSE1(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE1 = Byte.parseByte(s);
} else {
ETHCLOSE1 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE10(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE10 = Byte.parseByte(s);
} else {
ETHCLOSE10 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE11(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE11 = Byte.parseByte(s);
} else {
ETHCLOSE11 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE2A(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE2A = Byte.parseByte(s);
} else {
ETHCLOSE2A = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE2B(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE2B = Byte.parseByte(s);
} else {
ETHCLOSE2B = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE3(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE3 = Byte.parseByte(s);
} else {
ETHCLOSE3 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE4A(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE4A = Byte.parseByte(s);
} else {
ETHCLOSE4A = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE4B(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE4B = Byte.parseByte(s);
} else {
ETHCLOSE4B = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE5(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE5 = Byte.parseByte(s);
} else {
ETHCLOSE5 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE6(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE6 = Byte.parseByte(s);
} else {
ETHCLOSE6 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE7(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE7 = Byte.parseByte(s);
} else {
ETHCLOSE7 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE8(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE8 = Byte.parseByte(s);
} else {
ETHCLOSE8 = Byte.MIN_VALUE;
}
}

protected final void initETHCLOSE9(String s) {
if (!s.trim().isEmpty()) {
ETHCLOSE9 = Byte.parseByte(s);
} else {
ETHCLOSE9 = Byte.MIN_VALUE;
}
}

protected final void initETHID10(String s) {
if (!s.trim().isEmpty()) {
ETHID10 = Byte.parseByte(s);
} else {
ETHID10 = Byte.MIN_VALUE;
}
}

protected final void initETHID11(String s) {
if (!s.trim().isEmpty()) {
ETHID11 = Byte.parseByte(s);
} else {
ETHID11 = Byte.MIN_VALUE;
}
}

protected final void initETHID12(String s) {
if (!s.trim().isEmpty()) {
ETHID12 = Byte.parseByte(s);
} else {
ETHID12 = Byte.MIN_VALUE;
}
}

protected final void initETHID13(String s) {
if (!s.trim().isEmpty()) {
ETHID13 = Byte.parseByte(s);
} else {
ETHID13 = Byte.MIN_VALUE;
}
}

protected final void initETHID14(String s) {
if (!s.trim().isEmpty()) {
ETHID14 = Byte.parseByte(s);
} else {
ETHID14 = Byte.MIN_VALUE;
}
}

protected final void initETHID2(String s) {
if (!s.trim().isEmpty()) {
ETHID2 = Byte.parseByte(s);
} else {
ETHID2 = Byte.MIN_VALUE;
}
}

protected final void initETHID3(String s) {
if (!s.trim().isEmpty()) {
ETHID3 = Byte.parseByte(s);
} else {
ETHID3 = Byte.MIN_VALUE;
}
}

protected final void initETHID4A(String s) {
if (!s.trim().isEmpty()) {
ETHID4A = Byte.parseByte(s);
} else {
ETHID4A = Byte.MIN_VALUE;
}
}

protected final void initETHID4B(String s) {
if (!s.trim().isEmpty()) {
ETHID4B = Byte.parseByte(s);
} else {
ETHID4B = Byte.MIN_VALUE;
}
}

protected final void initETHID5(String s) {
if (!s.trim().isEmpty()) {
ETHID5 = Byte.parseByte(s);
} else {
ETHID5 = Byte.MIN_VALUE;
}
}

protected final void initETHID6(String s) {
if (!s.trim().isEmpty()) {
ETHID6 = Byte.parseByte(s);
} else {
ETHID6 = Byte.MIN_VALUE;
}
}

protected final void initETHID7(String s) {
if (!s.trim().isEmpty()) {
ETHID7 = Byte.parseByte(s);
} else {
ETHID7 = Byte.MIN_VALUE;
}
}

protected final void initETHID8(String s) {
if (!s.trim().isEmpty()) {
ETHID8 = Byte.parseByte(s);
} else {
ETHID8 = Byte.MIN_VALUE;
}
}

protected final void initETHID9(String s) {
if (!s.trim().isEmpty()) {
ETHID9 = Byte.parseByte(s);
} else {
ETHID9 = Byte.MIN_VALUE;
}
}

protected final void initETHN_DV(String s) {
if (!s.trim().isEmpty()) {
ETHN_DV = Byte.parseByte(s);
} else {
ETHN_DV = Byte.MIN_VALUE;
}
}

protected final void initEUMEM(String s) {
if (!s.trim().isEmpty()) {
EUMEM = Byte.parseByte(s);
} else {
EUMEM = Byte.MIN_VALUE;
}
}

protected final void initEVRALC(String s) {
if (!s.trim().isEmpty()) {
EVRALC = Byte.parseByte(s);
} else {
EVRALC = Byte.MIN_VALUE;
}
}

protected final void initEXTRATE(String s) {
if (!s.trim().isEmpty()) {
EXTRATE = Double.parseDouble(s);
} else {
EXTRATE = Double.NaN;
}
}

protected final void initEXTREST(String s) {
if (!s.trim().isEmpty()) {
EXTREST = Byte.parseByte(s);
} else {
EXTREST = Byte.MIN_VALUE;
}
}

protected final void initFAMILY(String s) {
if (!s.trim().isEmpty()) {
FAMILY = Byte.parseByte(s);
} else {
FAMILY = Byte.MIN_VALUE;
}
}

protected final void initFAMSUP(String s) {
if (!s.trim().isEmpty()) {
FAMSUP = Byte.parseByte(s);
} else {
FAMSUP = Byte.MIN_VALUE;
}
}

protected final void initFATHER(String s) {
if (!s.trim().isEmpty()) {
FATHER = Byte.parseByte(s);
} else {
FATHER = Byte.MIN_VALUE;
}
}

protected final void initFENOW(String s) {
if (!s.trim().isEmpty()) {
FENOW = Byte.parseByte(s);
} else {
FENOW = Byte.MIN_VALUE;
}
}

protected final void initFENOW_CAWI(String s) {
if (!s.trim().isEmpty()) {
FENOW_CAWI = Byte.parseByte(s);
} else {
FENOW_CAWI = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE01(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE01 = Byte.parseByte(s);
} else {
FF_BENTYPE01 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE02(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE02 = Byte.parseByte(s);
} else {
FF_BENTYPE02 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE03(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE03 = Byte.parseByte(s);
} else {
FF_BENTYPE03 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE04(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE04 = Byte.parseByte(s);
} else {
FF_BENTYPE04 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE05(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE05 = Byte.parseByte(s);
} else {
FF_BENTYPE05 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE06(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE06 = Byte.parseByte(s);
} else {
FF_BENTYPE06 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE07(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE07 = Byte.parseByte(s);
} else {
FF_BENTYPE07 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE08(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE08 = Byte.parseByte(s);
} else {
FF_BENTYPE08 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE09(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE09 = Byte.parseByte(s);
} else {
FF_BENTYPE09 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE10(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE10 = Byte.parseByte(s);
} else {
FF_BENTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE11(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE11 = Byte.parseByte(s);
} else {
FF_BENTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE12(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE12 = Byte.parseByte(s);
} else {
FF_BENTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE13(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE13 = Byte.parseByte(s);
} else {
FF_BENTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE14(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE14 = Byte.parseByte(s);
} else {
FF_BENTYPE14 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE15(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE15 = Byte.parseByte(s);
} else {
FF_BENTYPE15 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE16(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE16 = Byte.parseByte(s);
} else {
FF_BENTYPE16 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE17(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE17 = Byte.parseByte(s);
} else {
FF_BENTYPE17 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE18(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE18 = Byte.parseByte(s);
} else {
FF_BENTYPE18 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE19(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE19 = Byte.parseByte(s);
} else {
FF_BENTYPE19 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE20(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE20 = Byte.parseByte(s);
} else {
FF_BENTYPE20 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE21(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE21 = Byte.parseByte(s);
} else {
FF_BENTYPE21 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE22(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE22 = Byte.parseByte(s);
} else {
FF_BENTYPE22 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE23(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE23 = Byte.parseByte(s);
} else {
FF_BENTYPE23 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE24(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE24 = Byte.parseByte(s);
} else {
FF_BENTYPE24 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE25(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE25 = Byte.parseByte(s);
} else {
FF_BENTYPE25 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE26(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE26 = Byte.parseByte(s);
} else {
FF_BENTYPE26 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE27(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE27 = Byte.parseByte(s);
} else {
FF_BENTYPE27 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE28(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE28 = Byte.parseByte(s);
} else {
FF_BENTYPE28 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE29(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE29 = Byte.parseByte(s);
} else {
FF_BENTYPE29 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE30(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE30 = Byte.parseByte(s);
} else {
FF_BENTYPE30 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE31(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE31 = Byte.parseByte(s);
} else {
FF_BENTYPE31 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE32(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE32 = Byte.parseByte(s);
} else {
FF_BENTYPE32 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE33(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE33 = Byte.parseByte(s);
} else {
FF_BENTYPE33 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE34(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE34 = Byte.parseByte(s);
} else {
FF_BENTYPE34 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE35(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE35 = Byte.parseByte(s);
} else {
FF_BENTYPE35 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE36(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE36 = Byte.parseByte(s);
} else {
FF_BENTYPE36 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE37(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE37 = Byte.parseByte(s);
} else {
FF_BENTYPE37 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE38(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE38 = Byte.parseByte(s);
} else {
FF_BENTYPE38 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE39(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE39 = Byte.parseByte(s);
} else {
FF_BENTYPE39 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE40(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE40 = Byte.parseByte(s);
} else {
FF_BENTYPE40 = Byte.MIN_VALUE;
}
}

protected final void initFF_BENTYPE41(String s) {
if (!s.trim().isEmpty()) {
FF_BENTYPE41 = Byte.parseByte(s);
} else {
FF_BENTYPE41 = Byte.MIN_VALUE;
}
}

protected final void initFF_EMPLW(String s) {
if (!s.trim().isEmpty()) {
FF_EMPLW = Byte.parseByte(s);
} else {
FF_EMPLW = Byte.MIN_VALUE;
}
}

protected final void initFF_IVINTLANG(String s) {
if (!s.trim().isEmpty()) {
FF_IVINTLANG = Byte.parseByte(s);
} else {
FF_IVINTLANG = Byte.MIN_VALUE;
}
}

protected final void initFF_IVLOLW(String s) {
if (!s.trim().isEmpty()) {
FF_IVLOLW = Byte.parseByte(s);
} else {
FF_IVLOLW = Byte.MIN_VALUE;
}
}

protected final void initFF_JBMNGR(String s) {
if (!s.trim().isEmpty()) {
FF_JBMNGR = Byte.parseByte(s);
} else {
FF_JBMNGR = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSEMP(String s) {
if (!s.trim().isEmpty()) {
FF_JBSEMP = Byte.parseByte(s);
} else {
FF_JBSEMP = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSIZE(String s) {
if (!s.trim().isEmpty()) {
FF_JBSIZE = Byte.parseByte(s);
} else {
FF_JBSIZE = Byte.MIN_VALUE;
}
}

protected final void initFF_JBSTAT(String s) {
if (!s.trim().isEmpty()) {
FF_JBSTAT = Byte.parseByte(s);
} else {
FF_JBSTAT = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG = Byte.parseByte(s);
} else {
FF_OPRLG = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0 = Byte.parseByte(s);
} else {
FF_OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG0NI = Byte.parseByte(s);
} else {
FF_OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initFF_OPRLG1(String s) {
if (!s.trim().isEmpty()) {
FF_OPRLG1 = Byte.parseByte(s);
} else {
FF_OPRLG1 = Byte.MIN_VALUE;
}
}

protected final void initFF_YR2UK4(String s) {
if (!s.trim().isEmpty()) {
FF_YR2UK4 = Short.parseShort(s);
} else {
FF_YR2UK4 = Short.MIN_VALUE;
}
}

protected final void initFIBENOTHR_DV(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_DV = Double.parseDouble(s);
} else {
FIBENOTHR_DV = Double.NaN;
}
}

protected final void initFIBENOTHR_IF(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_IF = Double.parseDouble(s);
} else {
FIBENOTHR_IF = Double.NaN;
}
}

protected final void initFIBENOTHR_TC(String s) {
if (!s.trim().isEmpty()) {
FIBENOTHR_TC = Byte.parseByte(s);
} else {
FIBENOTHR_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_IF = Double.parseDouble(s);
} else {
FIMNGRS_IF = Double.NaN;
}
}

protected final void initFIMNGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNGRS_TC = Byte.parseByte(s);
} else {
FIMNGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNINVNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNINVNET_DV = Double.parseDouble(s);
} else {
FIMNINVNET_DV = Double.NaN;
}
}

protected final void initFIMNLABGRS_IF(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_IF = Double.parseDouble(s);
} else {
FIMNLABGRS_IF = Double.NaN;
}
}

protected final void initFIMNLABGRS_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABGRS_TC = Byte.parseByte(s);
} else {
FIMNLABGRS_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNLABNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_DV = Double.parseDouble(s);
} else {
FIMNLABNET_DV = Double.NaN;
}
}

protected final void initFIMNLABNET_TC(String s) {
if (!s.trim().isEmpty()) {
FIMNLABNET_TC = Byte.parseByte(s);
} else {
FIMNLABNET_TC = Byte.MIN_VALUE;
}
}

protected final void initFIMNMISC_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNMISC_DV = Double.parseDouble(s);
} else {
FIMNMISC_DV = Double.NaN;
}
}

protected final void initFIMNNET_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNNET_DV = Double.parseDouble(s);
} else {
FIMNNET_DV = Double.NaN;
}
}

protected final void initFIMNPEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPEN_DV = Double.parseDouble(s);
} else {
FIMNPEN_DV = Double.NaN;
}
}

protected final void initFIMNPRBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNPRBEN_DV = Double.parseDouble(s);
} else {
FIMNPRBEN_DV = Double.NaN;
}
}

protected final void initFIMNSBEN_DV(String s) {
if (!s.trim().isEmpty()) {
FIMNSBEN_DV = Double.parseDouble(s);
} else {
FIMNSBEN_DV = Double.NaN;
}
}

protected final void initFINFUT(String s) {
if (!s.trim().isEmpty()) {
FINFUT = Byte.parseByte(s);
} else {
FINFUT = Byte.MIN_VALUE;
}
}

protected final void initFIVEALCDR(String s) {
if (!s.trim().isEmpty()) {
FIVEALCDR = Byte.parseByte(s);
} else {
FIVEALCDR = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB1(String s) {
if (!s.trim().isEmpty()) {
FIYRDB1 = Byte.parseByte(s);
} else {
FIYRDB1 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB2(String s) {
if (!s.trim().isEmpty()) {
FIYRDB2 = Byte.parseByte(s);
} else {
FIYRDB2 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB3(String s) {
if (!s.trim().isEmpty()) {
FIYRDB3 = Byte.parseByte(s);
} else {
FIYRDB3 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB4(String s) {
if (!s.trim().isEmpty()) {
FIYRDB4 = Byte.parseByte(s);
} else {
FIYRDB4 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB5(String s) {
if (!s.trim().isEmpty()) {
FIYRDB5 = Byte.parseByte(s);
} else {
FIYRDB5 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDB6(String s) {
if (!s.trim().isEmpty()) {
FIYRDB6 = Byte.parseByte(s);
} else {
FIYRDB6 = Byte.MIN_VALUE;
}
}

protected final void initFIYRDIA(String s) {
if (!s.trim().isEmpty()) {
FIYRDIA = Integer.parseInt(s);
} else {
FIYRDIA = Integer.MIN_VALUE;
}
}

protected final void initFIYRINVINC_DV(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_DV = Double.parseDouble(s);
} else {
FIYRINVINC_DV = Double.NaN;
}
}

protected final void initFIYRINVINC_IF(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_IF = Byte.parseByte(s);
} else {
FIYRINVINC_IF = Byte.MIN_VALUE;
}
}

protected final void initFIYRINVINC_TC(String s) {
if (!s.trim().isEmpty()) {
FIYRINVINC_TC = Byte.parseByte(s);
} else {
FIYRINVINC_TC = Byte.MIN_VALUE;
}
}

protected final void initFNPID(String s) {
if (!s.trim().isEmpty()) {
FNPID = Integer.parseInt(s);
} else {
FNPID = Integer.MIN_VALUE;
}
}

protected final void initFNPNO(String s) {
if (!s.trim().isEmpty()) {
FNPNO = Byte.parseByte(s);
} else {
FNPNO = Byte.MIN_VALUE;
}
}

protected final void initFNSPID(String s) {
if (!s.trim().isEmpty()) {
FNSPID = Integer.parseInt(s);
} else {
FNSPID = Integer.MIN_VALUE;
}
}

protected final void initFNSPNO(String s) {
if (!s.trim().isEmpty()) {
FNSPNO = Byte.parseByte(s);
} else {
FNSPNO = Byte.MIN_VALUE;
}
}

protected final void initFOOD1(String s) {
if (!s.trim().isEmpty()) {
FOOD1 = Byte.parseByte(s);
} else {
FOOD1 = Byte.MIN_VALUE;
}
}

protected final void initFOOD2(String s) {
if (!s.trim().isEmpty()) {
FOOD2 = Byte.parseByte(s);
} else {
FOOD2 = Byte.MIN_VALUE;
}
}

protected final void initFOOD3(String s) {
if (!s.trim().isEmpty()) {
FOOD3 = Byte.parseByte(s);
} else {
FOOD3 = Byte.MIN_VALUE;
}
}

protected final void initFOOD4(String s) {
if (!s.trim().isEmpty()) {
FOOD4 = Byte.parseByte(s);
} else {
FOOD4 = Byte.MIN_VALUE;
}
}

protected final void initFOOD5(String s) {
if (!s.trim().isEmpty()) {
FOOD5 = Byte.parseByte(s);
} else {
FOOD5 = Byte.MIN_VALUE;
}
}

protected final void initFOOD6(String s) {
if (!s.trim().isEmpty()) {
FOOD6 = Byte.parseByte(s);
} else {
FOOD6 = Byte.MIN_VALUE;
}
}

protected final void initFOOD7(String s) {
if (!s.trim().isEmpty()) {
FOOD7 = Byte.parseByte(s);
} else {
FOOD7 = Byte.MIN_VALUE;
}
}

protected final void initFRDRG(String s) {
if (!s.trim().isEmpty()) {
FRDRG = Byte.parseByte(s);
} else {
FRDRG = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM1(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM1 = Byte.parseByte(s);
} else {
FT2ENDM1 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDM2(String s) {
if (!s.trim().isEmpty()) {
FT2ENDM2 = Byte.parseByte(s);
} else {
FT2ENDM2 = Byte.MIN_VALUE;
}
}

protected final void initFT2ENDY41(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY41 = Short.parseShort(s);
} else {
FT2ENDY41 = Short.MIN_VALUE;
}
}

protected final void initFT2ENDY42(String s) {
if (!s.trim().isEmpty()) {
FT2ENDY42 = Short.parseShort(s);
} else {
FT2ENDY42 = Short.MIN_VALUE;
}
}

protected final void initFTEDANY(String s) {
if (!s.trim().isEmpty()) {
FTEDANY = Byte.parseByte(s);
} else {
FTEDANY = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND1(String s) {
if (!s.trim().isEmpty()) {
FTEDEND1 = Byte.parseByte(s);
} else {
FTEDEND1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDEND2(String s) {
if (!s.trim().isEmpty()) {
FTEDEND2 = Byte.parseByte(s);
} else {
FTEDEND2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR1(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR1 = Byte.parseByte(s);
} else {
FTEDMOR1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDMOR2(String s) {
if (!s.trim().isEmpty()) {
FTEDMOR2 = Byte.parseByte(s);
} else {
FTEDMOR2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM1(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM1 = Byte.parseByte(s);
} else {
FTEDSTARTM1 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTM2(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTM2 = Byte.parseByte(s);
} else {
FTEDSTARTM2 = Byte.MIN_VALUE;
}
}

protected final void initFTEDSTARTY41(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY41 = Short.parseShort(s);
} else {
FTEDSTARTY41 = Short.MIN_VALUE;
}
}

protected final void initFTEDSTARTY42(String s) {
if (!s.trim().isEmpty()) {
FTEDSTARTY42 = Short.parseShort(s);
} else {
FTEDSTARTY42 = Short.MIN_VALUE;
}
}

protected final void initFTENDM(String s) {
if (!s.trim().isEmpty()) {
FTENDM = Byte.parseByte(s);
} else {
FTENDM = Byte.MIN_VALUE;
}
}

protected final void initFTENDY4(String s) {
if (!s.trim().isEmpty()) {
FTENDY4 = Short.parseShort(s);
} else {
FTENDY4 = Short.MIN_VALUE;
}
}

protected final void initFTQUALS(String s) {
if (!s.trim().isEmpty()) {
FTQUALS = Byte.parseByte(s);
} else {
FTQUALS = Byte.MIN_VALUE;
}
}

protected final void initGCSE5(String s) {
if (!s.trim().isEmpty()) {
GCSE5 = Byte.parseByte(s);
} else {
GCSE5 = Byte.MIN_VALUE;
}
}

protected final void initGCSEENG(String s) {
if (!s.trim().isEmpty()) {
GCSEENG = Byte.parseByte(s);
} else {
GCSEENG = Byte.MIN_VALUE;
}
}

protected final void initGCSEENGALPHA(String s) {
if (!s.trim().isEmpty()) {
GCSEENGALPHA = Byte.parseByte(s);
} else {
GCSEENGALPHA = Byte.MIN_VALUE;
}
}

protected final void initGCSEENGE(String s) {
if (!s.trim().isEmpty()) {
GCSEENGE = Byte.parseByte(s);
} else {
GCSEENGE = Byte.MIN_VALUE;
}
}

protected final void initGCSEENGNUM(String s) {
if (!s.trim().isEmpty()) {
GCSEENGNUM = Byte.parseByte(s);
} else {
GCSEENGNUM = Byte.MIN_VALUE;
}
}

protected final void initGCSEENGW(String s) {
if (!s.trim().isEmpty()) {
GCSEENGW = Byte.parseByte(s);
} else {
GCSEENGW = Byte.MIN_VALUE;
}
}

protected final void initGCSEMAT(String s) {
if (!s.trim().isEmpty()) {
GCSEMAT = Byte.parseByte(s);
} else {
GCSEMAT = Byte.MIN_VALUE;
}
}

protected final void initGCSEMATALPHA(String s) {
if (!s.trim().isEmpty()) {
GCSEMATALPHA = Byte.parseByte(s);
} else {
GCSEMATALPHA = Byte.MIN_VALUE;
}
}

protected final void initGCSEMATE(String s) {
if (!s.trim().isEmpty()) {
GCSEMATE = Byte.parseByte(s);
} else {
GCSEMATE = Byte.MIN_VALUE;
}
}

protected final void initGCSEMATNUM(String s) {
if (!s.trim().isEmpty()) {
GCSEMATNUM = Byte.parseByte(s);
} else {
GCSEMATNUM = Byte.MIN_VALUE;
}
}

protected final void initGCSEMATW(String s) {
if (!s.trim().isEmpty()) {
GCSEMATW = Byte.parseByte(s);
} else {
GCSEMATW = Byte.MIN_VALUE;
}
}

protected final void initGRFPID(String s) {
if (!s.trim().isEmpty()) {
GRFPID = Integer.parseInt(s);
} else {
GRFPID = Integer.MIN_VALUE;
}
}

protected final void initGRFPNO(String s) {
if (!s.trim().isEmpty()) {
GRFPNO = Byte.parseByte(s);
} else {
GRFPNO = Byte.MIN_VALUE;
}
}

protected final void initGRMPID(String s) {
if (!s.trim().isEmpty()) {
GRMPID = Integer.parseInt(s);
} else {
GRMPID = Integer.MIN_VALUE;
}
}

protected final void initGRMPNO(String s) {
if (!s.trim().isEmpty()) {
GRMPNO = Byte.parseByte(s);
} else {
GRMPNO = Byte.MIN_VALUE;
}
}

protected final void initHASEMAIL(String s) {
if (!s.trim().isEmpty()) {
HASEMAIL = Byte.parseByte(s);
} else {
HASEMAIL = Byte.MIN_VALUE;
}
}

protected final void initHCOND1(String s) {
if (!s.trim().isEmpty()) {
HCOND1 = Byte.parseByte(s);
} else {
HCOND1 = Byte.MIN_VALUE;
}
}

protected final void initHCOND10(String s) {
if (!s.trim().isEmpty()) {
HCOND10 = Byte.parseByte(s);
} else {
HCOND10 = Byte.MIN_VALUE;
}
}

protected final void initHCOND11(String s) {
if (!s.trim().isEmpty()) {
HCOND11 = Byte.parseByte(s);
} else {
HCOND11 = Byte.MIN_VALUE;
}
}

protected final void initHCOND12(String s) {
if (!s.trim().isEmpty()) {
HCOND12 = Byte.parseByte(s);
} else {
HCOND12 = Byte.MIN_VALUE;
}
}

protected final void initHCOND13(String s) {
if (!s.trim().isEmpty()) {
HCOND13 = Byte.parseByte(s);
} else {
HCOND13 = Byte.MIN_VALUE;
}
}

protected final void initHCOND14(String s) {
if (!s.trim().isEmpty()) {
HCOND14 = Byte.parseByte(s);
} else {
HCOND14 = Byte.MIN_VALUE;
}
}

protected final void initHCOND15(String s) {
if (!s.trim().isEmpty()) {
HCOND15 = Byte.parseByte(s);
} else {
HCOND15 = Byte.MIN_VALUE;
}
}

protected final void initHCOND16(String s) {
if (!s.trim().isEmpty()) {
HCOND16 = Byte.parseByte(s);
} else {
HCOND16 = Byte.MIN_VALUE;
}
}

protected final void initHCOND17(String s) {
if (!s.trim().isEmpty()) {
HCOND17 = Byte.parseByte(s);
} else {
HCOND17 = Byte.MIN_VALUE;
}
}

protected final void initHCOND18(String s) {
if (!s.trim().isEmpty()) {
HCOND18 = Byte.parseByte(s);
} else {
HCOND18 = Byte.MIN_VALUE;
}
}

protected final void initHCOND19(String s) {
if (!s.trim().isEmpty()) {
HCOND19 = Byte.parseByte(s);
} else {
HCOND19 = Byte.MIN_VALUE;
}
}

protected final void initHCOND2(String s) {
if (!s.trim().isEmpty()) {
HCOND2 = Byte.parseByte(s);
} else {
HCOND2 = Byte.MIN_VALUE;
}
}

protected final void initHCOND20(String s) {
if (!s.trim().isEmpty()) {
HCOND20 = Byte.parseByte(s);
} else {
HCOND20 = Byte.MIN_VALUE;
}
}

protected final void initHCOND3(String s) {
if (!s.trim().isEmpty()) {
HCOND3 = Byte.parseByte(s);
} else {
HCOND3 = Byte.MIN_VALUE;
}
}

protected final void initHCOND4(String s) {
if (!s.trim().isEmpty()) {
HCOND4 = Byte.parseByte(s);
} else {
HCOND4 = Byte.MIN_VALUE;
}
}

protected final void initHCOND5(String s) {
if (!s.trim().isEmpty()) {
HCOND5 = Byte.parseByte(s);
} else {
HCOND5 = Byte.MIN_VALUE;
}
}

protected final void initHCOND6(String s) {
if (!s.trim().isEmpty()) {
HCOND6 = Byte.parseByte(s);
} else {
HCOND6 = Byte.MIN_VALUE;
}
}

protected final void initHCOND7(String s) {
if (!s.trim().isEmpty()) {
HCOND7 = Byte.parseByte(s);
} else {
HCOND7 = Byte.MIN_VALUE;
}
}

protected final void initHCOND8(String s) {
if (!s.trim().isEmpty()) {
HCOND8 = Byte.parseByte(s);
} else {
HCOND8 = Byte.MIN_VALUE;
}
}

protected final void initHCOND9(String s) {
if (!s.trim().isEmpty()) {
HCOND9 = Byte.parseByte(s);
} else {
HCOND9 = Byte.MIN_VALUE;
}
}

protected final void initHCOND96(String s) {
if (!s.trim().isEmpty()) {
HCOND96 = Byte.parseByte(s);
} else {
HCOND96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA01(String s) {
if (!s.trim().isEmpty()) {
HCONDA01 = Byte.parseByte(s);
} else {
HCONDA01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA02(String s) {
if (!s.trim().isEmpty()) {
HCONDA02 = Byte.parseByte(s);
} else {
HCONDA02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA03(String s) {
if (!s.trim().isEmpty()) {
HCONDA03 = Byte.parseByte(s);
} else {
HCONDA03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA04(String s) {
if (!s.trim().isEmpty()) {
HCONDA04 = Byte.parseByte(s);
} else {
HCONDA04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA05(String s) {
if (!s.trim().isEmpty()) {
HCONDA05 = Byte.parseByte(s);
} else {
HCONDA05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA06(String s) {
if (!s.trim().isEmpty()) {
HCONDA06 = Byte.parseByte(s);
} else {
HCONDA06 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA07(String s) {
if (!s.trim().isEmpty()) {
HCONDA07 = Byte.parseByte(s);
} else {
HCONDA07 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA08(String s) {
if (!s.trim().isEmpty()) {
HCONDA08 = Byte.parseByte(s);
} else {
HCONDA08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA09(String s) {
if (!s.trim().isEmpty()) {
HCONDA09 = Byte.parseByte(s);
} else {
HCONDA09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA10(String s) {
if (!s.trim().isEmpty()) {
HCONDA10 = Byte.parseByte(s);
} else {
HCONDA10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA11(String s) {
if (!s.trim().isEmpty()) {
HCONDA11 = Byte.parseByte(s);
} else {
HCONDA11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA12(String s) {
if (!s.trim().isEmpty()) {
HCONDA12 = Byte.parseByte(s);
} else {
HCONDA12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA13(String s) {
if (!s.trim().isEmpty()) {
HCONDA13 = Byte.parseByte(s);
} else {
HCONDA13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA14(String s) {
if (!s.trim().isEmpty()) {
HCONDA14 = Byte.parseByte(s);
} else {
HCONDA14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA15(String s) {
if (!s.trim().isEmpty()) {
HCONDA15 = Byte.parseByte(s);
} else {
HCONDA15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA16(String s) {
if (!s.trim().isEmpty()) {
HCONDA16 = Byte.parseByte(s);
} else {
HCONDA16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA17(String s) {
if (!s.trim().isEmpty()) {
HCONDA17 = Byte.parseByte(s);
} else {
HCONDA17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA19(String s) {
if (!s.trim().isEmpty()) {
HCONDA19 = Byte.parseByte(s);
} else {
HCONDA19 = Byte.MIN_VALUE;
}
}

protected final void initHCONDA20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HCONDA20 = false;
} else {
HCONDA20 = true;
}
}
}

protected final void initHCONDN1(String s) {
if (!s.trim().isEmpty()) {
HCONDN1 = Byte.parseByte(s);
} else {
HCONDN1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN10(String s) {
if (!s.trim().isEmpty()) {
HCONDN10 = Byte.parseByte(s);
} else {
HCONDN10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN11(String s) {
if (!s.trim().isEmpty()) {
HCONDN11 = Byte.parseByte(s);
} else {
HCONDN11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN12(String s) {
if (!s.trim().isEmpty()) {
HCONDN12 = Byte.parseByte(s);
} else {
HCONDN12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN13(String s) {
if (!s.trim().isEmpty()) {
HCONDN13 = Byte.parseByte(s);
} else {
HCONDN13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN14(String s) {
if (!s.trim().isEmpty()) {
HCONDN14 = Byte.parseByte(s);
} else {
HCONDN14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN15(String s) {
if (!s.trim().isEmpty()) {
HCONDN15 = Byte.parseByte(s);
} else {
HCONDN15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN16(String s) {
if (!s.trim().isEmpty()) {
HCONDN16 = Byte.parseByte(s);
} else {
HCONDN16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN17(String s) {
if (!s.trim().isEmpty()) {
HCONDN17 = Byte.parseByte(s);
} else {
HCONDN17 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN18(String s) {
if (!s.trim().isEmpty()) {
HCONDN18 = Byte.parseByte(s);
} else {
HCONDN18 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN19(String s) {
if (!s.trim().isEmpty()) {
HCONDN19 = Byte.parseByte(s);
} else {
HCONDN19 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN2(String s) {
if (!s.trim().isEmpty()) {
HCONDN2 = Byte.parseByte(s);
} else {
HCONDN2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN20(String s) {
if (!s.trim().isEmpty()) {
HCONDN20 = Byte.parseByte(s);
} else {
HCONDN20 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN3(String s) {
if (!s.trim().isEmpty()) {
HCONDN3 = Byte.parseByte(s);
} else {
HCONDN3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN4(String s) {
if (!s.trim().isEmpty()) {
HCONDN4 = Byte.parseByte(s);
} else {
HCONDN4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN5(String s) {
if (!s.trim().isEmpty()) {
HCONDN5 = Byte.parseByte(s);
} else {
HCONDN5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN6(String s) {
if (!s.trim().isEmpty()) {
HCONDN6 = Byte.parseByte(s);
} else {
HCONDN6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN7(String s) {
if (!s.trim().isEmpty()) {
HCONDN7 = Byte.parseByte(s);
} else {
HCONDN7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN8(String s) {
if (!s.trim().isEmpty()) {
HCONDN8 = Byte.parseByte(s);
} else {
HCONDN8 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN9(String s) {
if (!s.trim().isEmpty()) {
HCONDN9 = Byte.parseByte(s);
} else {
HCONDN9 = Byte.MIN_VALUE;
}
}

protected final void initHCONDN96(String s) {
if (!s.trim().isEmpty()) {
HCONDN96 = Byte.parseByte(s);
} else {
HCONDN96 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO1(String s) {
if (!s.trim().isEmpty()) {
HCONDNO1 = Byte.parseByte(s);
} else {
HCONDNO1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO2(String s) {
if (!s.trim().isEmpty()) {
HCONDNO2 = Byte.parseByte(s);
} else {
HCONDNO2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO3(String s) {
if (!s.trim().isEmpty()) {
HCONDNO3 = Byte.parseByte(s);
} else {
HCONDNO3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO4(String s) {
if (!s.trim().isEmpty()) {
HCONDNO4 = Byte.parseByte(s);
} else {
HCONDNO4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO5(String s) {
if (!s.trim().isEmpty()) {
HCONDNO5 = Byte.parseByte(s);
} else {
HCONDNO5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO6(String s) {
if (!s.trim().isEmpty()) {
HCONDNO6 = Byte.parseByte(s);
} else {
HCONDNO6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO7(String s) {
if (!s.trim().isEmpty()) {
HCONDNO7 = Byte.parseByte(s);
} else {
HCONDNO7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNO_CODE(String s) {
if (!s.trim().isEmpty()) {
HCONDNO_CODE = Byte.parseByte(s);
} else {
HCONDNO_CODE = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS1(String s) {
if (!s.trim().isEmpty()) {
HCONDNS1 = Byte.parseByte(s);
} else {
HCONDNS1 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS2(String s) {
if (!s.trim().isEmpty()) {
HCONDNS2 = Byte.parseByte(s);
} else {
HCONDNS2 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS3(String s) {
if (!s.trim().isEmpty()) {
HCONDNS3 = Byte.parseByte(s);
} else {
HCONDNS3 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS4(String s) {
if (!s.trim().isEmpty()) {
HCONDNS4 = Byte.parseByte(s);
} else {
HCONDNS4 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS5(String s) {
if (!s.trim().isEmpty()) {
HCONDNS5 = Byte.parseByte(s);
} else {
HCONDNS5 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS6(String s) {
if (!s.trim().isEmpty()) {
HCONDNS6 = Byte.parseByte(s);
} else {
HCONDNS6 = Byte.MIN_VALUE;
}
}

protected final void initHCONDNS7(String s) {
if (!s.trim().isEmpty()) {
HCONDNS7 = Byte.parseByte(s);
} else {
HCONDNS7 = Byte.MIN_VALUE;
}
}

protected final void initHCONDO_CODE(String s) {
if (!s.trim().isEmpty()) {
HCONDO_CODE = Byte.parseByte(s);
} else {
HCONDO_CODE = Byte.MIN_VALUE;
}
}

protected final void initHCONDS01(String s) {
if (!s.trim().isEmpty()) {
HCONDS01 = Byte.parseByte(s);
} else {
HCONDS01 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS02(String s) {
if (!s.trim().isEmpty()) {
HCONDS02 = Byte.parseByte(s);
} else {
HCONDS02 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS03(String s) {
if (!s.trim().isEmpty()) {
HCONDS03 = Byte.parseByte(s);
} else {
HCONDS03 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS04(String s) {
if (!s.trim().isEmpty()) {
HCONDS04 = Byte.parseByte(s);
} else {
HCONDS04 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS05(String s) {
if (!s.trim().isEmpty()) {
HCONDS05 = Byte.parseByte(s);
} else {
HCONDS05 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS08(String s) {
if (!s.trim().isEmpty()) {
HCONDS08 = Byte.parseByte(s);
} else {
HCONDS08 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS09(String s) {
if (!s.trim().isEmpty()) {
HCONDS09 = Byte.parseByte(s);
} else {
HCONDS09 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS10(String s) {
if (!s.trim().isEmpty()) {
HCONDS10 = Byte.parseByte(s);
} else {
HCONDS10 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS11(String s) {
if (!s.trim().isEmpty()) {
HCONDS11 = Byte.parseByte(s);
} else {
HCONDS11 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS12(String s) {
if (!s.trim().isEmpty()) {
HCONDS12 = Byte.parseByte(s);
} else {
HCONDS12 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS13(String s) {
if (!s.trim().isEmpty()) {
HCONDS13 = Byte.parseByte(s);
} else {
HCONDS13 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS14(String s) {
if (!s.trim().isEmpty()) {
HCONDS14 = Byte.parseByte(s);
} else {
HCONDS14 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS15(String s) {
if (!s.trim().isEmpty()) {
HCONDS15 = Byte.parseByte(s);
} else {
HCONDS15 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS16(String s) {
if (!s.trim().isEmpty()) {
HCONDS16 = Byte.parseByte(s);
} else {
HCONDS16 = Byte.MIN_VALUE;
}
}

protected final void initHCONDS17(String s) {
if (!s.trim().isEmpty()) {
HCONDS17 = Byte.parseByte(s);
} else {
HCONDS17 = Byte.MIN_VALUE;
}
}

protected final void initHEALTH(String s) {
if (!s.trim().isEmpty()) {
HEALTH = Byte.parseByte(s);
} else {
HEALTH = Byte.MIN_VALUE;
}
}

protected final void initHEAPPLIED(String s) {
if (!s.trim().isEmpty()) {
HEAPPLIED = Byte.parseByte(s);
} else {
HEAPPLIED = Byte.MIN_VALUE;
}
}

protected final void initHEDLIK(String s) {
if (!s.trim().isEmpty()) {
HEDLIK = Byte.parseByte(s);
} else {
HEDLIK = Byte.MIN_VALUE;
}
}

protected final void initHEDNT(String s) {
if (!s.trim().isEmpty()) {
HEDNT = Byte.parseByte(s);
} else {
HEDNT = Byte.MIN_VALUE;
}
}

protected final void initHEDNTO_CODE(String s) {
if (!s.trim().isEmpty()) {
HEDNTO_CODE = Byte.parseByte(s);
} else {
HEDNTO_CODE = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTF(String s) {
if (!s.trim().isEmpty()) {
HGADOPTF = Byte.parseByte(s);
} else {
HGADOPTF = Byte.MIN_VALUE;
}
}

protected final void initHGADOPTM(String s) {
if (!s.trim().isEmpty()) {
HGADOPTM = Byte.parseByte(s);
} else {
HGADOPTM = Byte.MIN_VALUE;
}
}

protected final void initHGPART(String s) {
if (!s.trim().isEmpty()) {
HGPART = Byte.parseByte(s);
} else {
HGPART = Byte.MIN_VALUE;
}
}

protected final void initHHRESP_DV(String s) {
if (!s.trim().isEmpty()) {
HHRESP_DV = Byte.parseByte(s);
} else {
HHRESP_DV = Byte.MIN_VALUE;
}
}

protected final void initHHTYPE_DV(String s) {
if (!s.trim().isEmpty()) {
HHTYPE_DV = Byte.parseByte(s);
} else {
HHTYPE_DV = Byte.MIN_VALUE;
}
}

protected final void initHL2GP(String s) {
if (!s.trim().isEmpty()) {
HL2GP = Short.parseShort(s);
} else {
HL2GP = Short.MIN_VALUE;
}
}

protected final void initHL2HOP(String s) {
if (!s.trim().isEmpty()) {
HL2HOP = Byte.parseByte(s);
} else {
HL2HOP = Byte.MIN_VALUE;
}
}

protected final void initHMRCESENT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HMRCESENT = false;
} else {
HMRCESENT = true;
}
}
}

protected final void initHMRCLINK(String s) {
if (!s.trim().isEmpty()) {
HMRCLINK = Byte.parseByte(s);
} else {
HMRCLINK = Byte.MIN_VALUE;
}
}

protected final void initHOSP(String s) {
if (!s.trim().isEmpty()) {
HOSP = Short.parseShort(s);
} else {
HOSP = Short.MIN_VALUE;
}
}

protected final void initHOSPC1(String s) {
if (!s.trim().isEmpty()) {
HOSPC1 = Byte.parseByte(s);
} else {
HOSPC1 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC2(String s) {
if (!s.trim().isEmpty()) {
HOSPC2 = Byte.parseByte(s);
} else {
HOSPC2 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC3(String s) {
if (!s.trim().isEmpty()) {
HOSPC3 = Byte.parseByte(s);
} else {
HOSPC3 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC4(String s) {
if (!s.trim().isEmpty()) {
HOSPC4 = Byte.parseByte(s);
} else {
HOSPC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC5(String s) {
if (!s.trim().isEmpty()) {
HOSPC5 = Byte.parseByte(s);
} else {
HOSPC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC6(String s) {
if (!s.trim().isEmpty()) {
HOSPC6 = Byte.parseByte(s);
} else {
HOSPC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPC7(String s) {
if (!s.trim().isEmpty()) {
HOSPC7 = Byte.parseByte(s);
} else {
HOSPC7 = Byte.MIN_VALUE;
}
}

protected final void initHOSPCH(String s) {
if (!s.trim().isEmpty()) {
HOSPCH = Short.parseShort(s);
} else {
HOSPCH = Short.MIN_VALUE;
}
}

protected final void initHOSPD(String s) {
if (!s.trim().isEmpty()) {
HOSPD = Short.parseShort(s);
} else {
HOSPD = Short.MIN_VALUE;
}
}

protected final void initHOSPDC1(String s) {
if (!s.trim().isEmpty()) {
HOSPDC1 = Short.parseShort(s);
} else {
HOSPDC1 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC2(String s) {
if (!s.trim().isEmpty()) {
HOSPDC2 = Short.parseShort(s);
} else {
HOSPDC2 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC3(String s) {
if (!s.trim().isEmpty()) {
HOSPDC3 = Short.parseShort(s);
} else {
HOSPDC3 = Short.MIN_VALUE;
}
}

protected final void initHOSPDC4(String s) {
if (!s.trim().isEmpty()) {
HOSPDC4 = Byte.parseByte(s);
} else {
HOSPDC4 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC5(String s) {
if (!s.trim().isEmpty()) {
HOSPDC5 = Byte.parseByte(s);
} else {
HOSPDC5 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC6(String s) {
if (!s.trim().isEmpty()) {
HOSPDC6 = Byte.parseByte(s);
} else {
HOSPDC6 = Byte.MIN_VALUE;
}
}

protected final void initHOSPDC7(String s) {
if (!s.trim().isEmpty()) {
HOSPDC7 = Byte.parseByte(s);
} else {
HOSPDC7 = Byte.MIN_VALUE;
}
}

protected final void initHOUSING(String s) {
if (!s.trim().isEmpty()) {
HOUSING = Byte.parseByte(s);
} else {
HOUSING = Byte.MIN_VALUE;
}
}

protected final void initHOWLNG(String s) {
if (!s.trim().isEmpty()) {
HOWLNG = Short.parseShort(s);
} else {
HOWLNG = Short.MIN_VALUE;
}
}

protected final void initHRPID(String s) {
if (!s.trim().isEmpty()) {
HRPID = Integer.parseInt(s);
} else {
HRPID = Integer.MIN_VALUE;
}
}

protected final void initHRPNO(String s) {
if (!s.trim().isEmpty()) {
HRPNO = Byte.parseByte(s);
} else {
HRPNO = Byte.MIN_VALUE;
}
}

protected final void initHUBOSS(String s) {
if (!s.trim().isEmpty()) {
HUBOSS = Byte.parseByte(s);
} else {
HUBOSS = Byte.MIN_VALUE;
}
}

protected final void initHUBUYS(String s) {
if (!s.trim().isEmpty()) {
HUBUYS = Short.parseShort(s);
} else {
HUBUYS = Short.MIN_VALUE;
}
}

protected final void initHUCAR(String s) {
if (!s.trim().isEmpty()) {
HUCAR = Byte.parseByte(s);
} else {
HUCAR = Byte.MIN_VALUE;
}
}

protected final void initHUDIY(String s) {
if (!s.trim().isEmpty()) {
HUDIY = Byte.parseByte(s);
} else {
HUDIY = Byte.MIN_VALUE;
}
}

protected final void initHUFRYS(String s) {
if (!s.trim().isEmpty()) {
HUFRYS = Short.parseShort(s);
} else {
HUFRYS = Short.MIN_VALUE;
}
}

protected final void initHUIRON(String s) {
if (!s.trim().isEmpty()) {
HUIRON = Short.parseShort(s);
} else {
HUIRON = Short.MIN_VALUE;
}
}

protected final void initHUMOPS(String s) {
if (!s.trim().isEmpty()) {
HUMOPS = Short.parseShort(s);
} else {
HUMOPS = Short.MIN_VALUE;
}
}

protected final void initHUPOTS(String s) {
if (!s.trim().isEmpty()) {
HUPOTS = Byte.parseByte(s);
} else {
HUPOTS = Byte.MIN_VALUE;
}
}

protected final void initHURUNS(String s) {
if (!s.trim().isEmpty()) {
HURUNS = Byte.parseByte(s);
} else {
HURUNS = Byte.MIN_VALUE;
}
}

protected final void initHUSITS(String s) {
if (!s.trim().isEmpty()) {
HUSITS = Short.parseShort(s);
} else {
HUSITS = Short.MIN_VALUE;
}
}

protected final void initIENDDATD(String s) {
if (!s.trim().isEmpty()) {
IENDDATD = Byte.parseByte(s);
} else {
IENDDATD = Byte.MIN_VALUE;
}
}

protected final void initIENDDATM(String s) {
if (!s.trim().isEmpty()) {
IENDDATM = Byte.parseByte(s);
} else {
IENDDATM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATMM(String s) {
if (!s.trim().isEmpty()) {
IENDDATMM = Byte.parseByte(s);
} else {
IENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initIENDDATSS(String s) {
if (!s.trim().isEmpty()) {
IENDDATSS = Byte.parseByte(s);
} else {
IENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initIENDDATY(String s) {
if (!s.trim().isEmpty()) {
IENDDATY = Short.parseShort(s);
} else {
IENDDATY = Short.MIN_VALUE;
}
}

protected final void initIND5MUS_LW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_LW = Double.parseDouble(s);
} else {
IND5MUS_LW = Double.NaN;
}
}

protected final void initIND5MUS_XW(String s) {
if (!s.trim().isEmpty()) {
IND5MUS_XW = Double.parseDouble(s);
} else {
IND5MUS_XW = Double.NaN;
}
}

protected final void initINDBD91_LW(String s) {
if (!s.trim().isEmpty()) {
INDBD91_LW = Double.parseDouble(s);
} else {
INDBD91_LW = Double.NaN;
}
}

protected final void initINDBDUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDBDUB_LW = Double.parseDouble(s);
} else {
INDBDUB_LW = Double.NaN;
}
}

protected final void initINDIN01_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN01_LW = Double.parseDouble(s);
} else {
INDIN01_LW = Double.NaN;
}
}

protected final void initINDIN91_LW(String s) {
if (!s.trim().isEmpty()) {
INDIN91_LW = Double.parseDouble(s);
} else {
INDIN91_LW = Double.NaN;
}
}

protected final void initINDINUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_LW = Double.parseDouble(s);
} else {
INDINUB_LW = Double.NaN;
}
}

protected final void initINDINUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDINUB_XW = Double.parseDouble(s);
} else {
INDINUB_XW = Double.NaN;
}
}

protected final void initINDINUI_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUI_LW = Double.parseDouble(s);
} else {
INDINUI_LW = Double.NaN;
}
}

protected final void initINDINUI_XW(String s) {
if (!s.trim().isEmpty()) {
INDINUI_XW = Double.parseDouble(s);
} else {
INDINUI_XW = Double.NaN;
}
}

protected final void initINDINUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDINUS_LW = Double.parseDouble(s);
} else {
INDINUS_LW = Double.NaN;
}
}

protected final void initINDMODE(String s) {
if (!s.trim().isEmpty()) {
INDMODE = Byte.parseByte(s);
} else {
INDMODE = Byte.MIN_VALUE;
}
}

protected final void initINDNS91_LW(String s) {
if (!s.trim().isEmpty()) {
INDNS91_LW = Double.parseDouble(s);
} else {
INDNS91_LW = Double.NaN;
}
}

protected final void initINDNSUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDNSUB_LW = Double.parseDouble(s);
} else {
INDNSUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_LW = Double.parseDouble(s);
} else {
INDPXUB_LW = Double.NaN;
}
}

protected final void initINDPXUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXUB_XW = Double.parseDouble(s);
} else {
INDPXUB_XW = Double.NaN;
}
}

protected final void initINDPXUI_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUI_LW = Double.parseDouble(s);
} else {
INDPXUI_LW = Double.NaN;
}
}

protected final void initINDPXUI_XW(String s) {
if (!s.trim().isEmpty()) {
INDPXUI_XW = Double.parseDouble(s);
} else {
INDPXUI_XW = Double.NaN;
}
}

protected final void initINDPXUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDPXUS_LW = Double.parseDouble(s);
} else {
INDPXUS_LW = Double.NaN;
}
}

protected final void initINDSCUB_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_LW = Double.parseDouble(s);
} else {
INDSCUB_LW = Double.NaN;
}
}

protected final void initINDSCUB_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCUB_XW = Double.parseDouble(s);
} else {
INDSCUB_XW = Double.NaN;
}
}

protected final void initINDSCUI_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUI_LW = Double.parseDouble(s);
} else {
INDSCUI_LW = Double.NaN;
}
}

protected final void initINDSCUI_XW(String s) {
if (!s.trim().isEmpty()) {
INDSCUI_XW = Double.parseDouble(s);
} else {
INDSCUI_XW = Double.NaN;
}
}

protected final void initINDSCUS_LW(String s) {
if (!s.trim().isEmpty()) {
INDSCUS_LW = Double.parseDouble(s);
} else {
INDSCUS_LW = Double.NaN;
}
}

protected final void initINTDATD_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATD_DV = Byte.parseByte(s);
} else {
INTDATD_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATM_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATM_DV = Byte.parseByte(s);
} else {
INTDATM_DV = Byte.MIN_VALUE;
}
}

protected final void initINTDATY_DV(String s) {
if (!s.trim().isEmpty()) {
INTDATY_DV = Short.parseShort(s);
} else {
INTDATY_DV = Short.MIN_VALUE;
}
}

protected final void initINTQUS(String s) {
if (!s.trim().isEmpty()) {
INTQUS = Byte.parseByte(s);
} else {
INTQUS = Byte.MIN_VALUE;
}
}

protected final void initIOUTCOME(String s) {
if (!s.trim().isEmpty()) {
IOUTCOME = Byte.parseByte(s);
} else {
IOUTCOME = Byte.MIN_VALUE;
}
}

protected final void initIPROXY(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IPROXY = false;
} else {
IPROXY = true;
}
}
}

protected final void initISTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATMM = Byte.parseByte(s);
} else {
ISTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATSS = Byte.parseByte(s);
} else {
ISTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initIVAFFCT11(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT11 = Byte.parseByte(s);
} else {
IVAFFCT11 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT12(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT12 = Byte.parseByte(s);
} else {
IVAFFCT12 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT13(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT13 = Byte.parseByte(s);
} else {
IVAFFCT13 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT14(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT14 = Byte.parseByte(s);
} else {
IVAFFCT14 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT15(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT15 = Byte.parseByte(s);
} else {
IVAFFCT15 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT17(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT17 = Byte.parseByte(s);
} else {
IVAFFCT17 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT21(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT21 = Byte.parseByte(s);
} else {
IVAFFCT21 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT22(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT22 = Byte.parseByte(s);
} else {
IVAFFCT22 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT23(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT23 = Byte.parseByte(s);
} else {
IVAFFCT23 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT27(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT27 = Byte.parseByte(s);
} else {
IVAFFCT27 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT30(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT30 = Byte.parseByte(s);
} else {
IVAFFCT30 = Byte.MIN_VALUE;
}
}

protected final void initIVAFFCT97(String s) {
if (!s.trim().isEmpty()) {
IVAFFCT97 = Byte.parseByte(s);
} else {
IVAFFCT97 = Byte.MIN_VALUE;
}
}

protected final void initIVCOOP(String s) {
if (!s.trim().isEmpty()) {
IVCOOP = Byte.parseByte(s);
} else {
IVCOOP = Byte.MIN_VALUE;
}
}

protected final void initIVINFNCE(String s) {
if (!s.trim().isEmpty()) {
IVINFNCE = Byte.parseByte(s);
} else {
IVINFNCE = Byte.MIN_VALUE;
}
}

protected final void initIVLIBAL(String s) {
if (!s.trim().isEmpty()) {
IVLIBAL = Byte.parseByte(s);
} else {
IVLIBAL = Byte.MIN_VALUE;
}
}

protected final void initIVLIENG(String s) {
if (!s.trim().isEmpty()) {
IVLIENG = Byte.parseByte(s);
} else {
IVLIENG = Byte.MIN_VALUE;
}
}

protected final void initIVLITRANS(String s) {
if (!s.trim().isEmpty()) {
IVLITRANS = Byte.parseByte(s);
} else {
IVLITRANS = Byte.MIN_VALUE;
}
}

protected final void initIVLIWHO(String s) {
if (!s.trim().isEmpty()) {
IVLIWHO = Byte.parseByte(s);
} else {
IVLIWHO = Byte.MIN_VALUE;
}
}

protected final void initJ1BOSS(String s) {
if (!s.trim().isEmpty()) {
J1BOSS = Byte.parseByte(s);
} else {
J1BOSS = Byte.MIN_VALUE;
}
}

protected final void initJ1MNGR(String s) {
if (!s.trim().isEmpty()) {
J1MNGR = Byte.parseByte(s);
} else {
J1MNGR = Byte.MIN_VALUE;
}
}

protected final void initJ1NONE(String s) {
if (!s.trim().isEmpty()) {
J1NONE = Byte.parseByte(s);
} else {
J1NONE = Byte.MIN_VALUE;
}
}

protected final void initJ1NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J1NSSEC5_DV = Byte.parseByte(s);
} else {
J1NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ1SEMP(String s) {
if (!s.trim().isEmpty()) {
J1SEMP = Byte.parseByte(s);
} else {
J1SEMP = Byte.MIN_VALUE;
}
}

protected final void initJ1SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC00_CC = Short.parseShort(s);
} else {
J1SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC10_CC = Short.parseShort(s);
} else {
J1SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ1SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J1SOC90_CC = Byte.parseByte(s);
} else {
J1SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initJ2NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
J2NSSEC5_DV = Byte.parseByte(s);
} else {
J2NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJ2PAY(String s) {
if (!s.trim().isEmpty()) {
J2PAY = Integer.parseInt(s);
} else {
J2PAY = Integer.MIN_VALUE;
}
}

protected final void initJ2PAYNET_DV(String s) {
if (!s.trim().isEmpty()) {
J2PAYNET_DV = Double.parseDouble(s);
} else {
J2PAYNET_DV = Double.NaN;
}
}

protected final void initJ2SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC00_CC = Short.parseShort(s);
} else {
J2SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC10_CC = Short.parseShort(s);
} else {
J2SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJ2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC90_CC = Short.parseShort(s);
} else {
J2SOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBATT1(String s) {
if (!s.trim().isEmpty()) {
JBATT1 = Byte.parseByte(s);
} else {
JBATT1 = Byte.MIN_VALUE;
}
}

protected final void initJBATT2(String s) {
if (!s.trim().isEmpty()) {
JBATT2 = Byte.parseByte(s);
} else {
JBATT2 = Byte.MIN_VALUE;
}
}

protected final void initJBATT3(String s) {
if (!s.trim().isEmpty()) {
JBATT3 = Byte.parseByte(s);
} else {
JBATT3 = Byte.MIN_VALUE;
}
}

protected final void initJBATT4(String s) {
if (!s.trim().isEmpty()) {
JBATT4 = Byte.parseByte(s);
} else {
JBATT4 = Byte.MIN_VALUE;
}
}

protected final void initJBATT5(String s) {
if (!s.trim().isEmpty()) {
JBATT5 = Byte.parseByte(s);
} else {
JBATT5 = Byte.MIN_VALUE;
}
}

protected final void initJBATT6(String s) {
if (!s.trim().isEmpty()) {
JBATT6 = Byte.parseByte(s);
} else {
JBATT6 = Byte.MIN_VALUE;
}
}

protected final void initJBATT7(String s) {
if (!s.trim().isEmpty()) {
JBATT7 = Byte.parseByte(s);
} else {
JBATT7 = Byte.MIN_VALUE;
}
}

protected final void initJBATT8(String s) {
if (!s.trim().isEmpty()) {
JBATT8 = Byte.parseByte(s);
} else {
JBATT8 = Byte.MIN_VALUE;
}
}

protected final void initJBATT9(String s) {
if (!s.trim().isEmpty()) {
JBATT9 = Byte.parseByte(s);
} else {
JBATT9 = Byte.MIN_VALUE;
}
}

protected final void initJBENDD(String s) {
if (!s.trim().isEmpty()) {
JBENDD = Byte.parseByte(s);
} else {
JBENDD = Byte.MIN_VALUE;
}
}

protected final void initJBENDM(String s) {
if (!s.trim().isEmpty()) {
JBENDM = Byte.parseByte(s);
} else {
JBENDM = Byte.MIN_VALUE;
}
}

protected final void initJBENDOTCODE(String s) {
if (!s.trim().isEmpty()) {
JBENDOTCODE = Byte.parseByte(s);
} else {
JBENDOTCODE = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS1(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS1 = Byte.parseByte(s);
} else {
JBENDREAS1 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS10(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS10 = Byte.parseByte(s);
} else {
JBENDREAS10 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS11(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS11 = Byte.parseByte(s);
} else {
JBENDREAS11 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS2(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS2 = Byte.parseByte(s);
} else {
JBENDREAS2 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS3(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS3 = Byte.parseByte(s);
} else {
JBENDREAS3 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS4(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS4 = Byte.parseByte(s);
} else {
JBENDREAS4 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS5(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS5 = Byte.parseByte(s);
} else {
JBENDREAS5 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS6(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS6 = Byte.parseByte(s);
} else {
JBENDREAS6 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS7(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS7 = Byte.parseByte(s);
} else {
JBENDREAS7 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS8(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS8 = Byte.parseByte(s);
} else {
JBENDREAS8 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS9(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS9 = Byte.parseByte(s);
} else {
JBENDREAS9 = Byte.MIN_VALUE;
}
}

protected final void initJBENDREAS97(String s) {
if (!s.trim().isEmpty()) {
JBENDREAS97 = Byte.parseByte(s);
} else {
JBENDREAS97 = Byte.MIN_VALUE;
}
}

protected final void initJBENDY4(String s) {
if (!s.trim().isEmpty()) {
JBENDY4 = Short.parseShort(s);
} else {
JBENDY4 = Short.MIN_VALUE;
}
}

protected final void initJBES2000(String s) {
if (!s.trim().isEmpty()) {
JBES2000 = Byte.parseByte(s);
} else {
JBES2000 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX1(String s) {
if (!s.trim().isEmpty()) {
JBFLEX1 = Byte.parseByte(s);
} else {
JBFLEX1 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX10(String s) {
if (!s.trim().isEmpty()) {
JBFLEX10 = Byte.parseByte(s);
} else {
JBFLEX10 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX2(String s) {
if (!s.trim().isEmpty()) {
JBFLEX2 = Byte.parseByte(s);
} else {
JBFLEX2 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX3(String s) {
if (!s.trim().isEmpty()) {
JBFLEX3 = Byte.parseByte(s);
} else {
JBFLEX3 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX4(String s) {
if (!s.trim().isEmpty()) {
JBFLEX4 = Byte.parseByte(s);
} else {
JBFLEX4 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX5(String s) {
if (!s.trim().isEmpty()) {
JBFLEX5 = Byte.parseByte(s);
} else {
JBFLEX5 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX6(String s) {
if (!s.trim().isEmpty()) {
JBFLEX6 = Byte.parseByte(s);
} else {
JBFLEX6 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX7(String s) {
if (!s.trim().isEmpty()) {
JBFLEX7 = Byte.parseByte(s);
} else {
JBFLEX7 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX8(String s) {
if (!s.trim().isEmpty()) {
JBFLEX8 = Byte.parseByte(s);
} else {
JBFLEX8 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX9(String s) {
if (!s.trim().isEmpty()) {
JBFLEX9 = Byte.parseByte(s);
} else {
JBFLEX9 = Byte.MIN_VALUE;
}
}

protected final void initJBFLEX96(String s) {
if (!s.trim().isEmpty()) {
JBFLEX96 = Byte.parseByte(s);
} else {
JBFLEX96 = Byte.MIN_VALUE;
}
}

protected final void initJBFXINF(String s) {
if (!s.trim().isEmpty()) {
JBFXINF = Byte.parseByte(s);
} else {
JBFXINF = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE1(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE1 = Byte.parseByte(s);
} else {
JBFXUSE1 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE10(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE10 = Byte.parseByte(s);
} else {
JBFXUSE10 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE2(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE2 = Byte.parseByte(s);
} else {
JBFXUSE2 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE3(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE3 = Byte.parseByte(s);
} else {
JBFXUSE3 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE4(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE4 = Byte.parseByte(s);
} else {
JBFXUSE4 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE5(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE5 = Byte.parseByte(s);
} else {
JBFXUSE5 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE6(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE6 = Byte.parseByte(s);
} else {
JBFXUSE6 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE7(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE7 = Byte.parseByte(s);
} else {
JBFXUSE7 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE8(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE8 = Byte.parseByte(s);
} else {
JBFXUSE8 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE9(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE9 = Byte.parseByte(s);
} else {
JBFXUSE9 = Byte.MIN_VALUE;
}
}

protected final void initJBFXUSE96(String s) {
if (!s.trim().isEmpty()) {
JBFXUSE96 = Byte.parseByte(s);
} else {
JBFXUSE96 = Byte.MIN_VALUE;
}
}

protected final void initJBIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JBIINDB_DV = Byte.parseByte(s);
} else {
JBIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHA(String s) {
if (!s.trim().isEmpty()) {
JBLKCHA = Byte.parseByte(s);
} else {
JBLKCHA = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHB(String s) {
if (!s.trim().isEmpty()) {
JBLKCHB = Byte.parseByte(s);
} else {
JBLKCHB = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHC(String s) {
if (!s.trim().isEmpty()) {
JBLKCHC = Byte.parseByte(s);
} else {
JBLKCHC = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHD(String s) {
if (!s.trim().isEmpty()) {
JBLKCHD = Byte.parseByte(s);
} else {
JBLKCHD = Byte.MIN_VALUE;
}
}

protected final void initJBLKCHE(String s) {
if (!s.trim().isEmpty()) {
JBLKCHE = Byte.parseByte(s);
} else {
JBLKCHE = Byte.MIN_VALUE;
}
}

protected final void initJBMNGRCHK(String s) {
if (!s.trim().isEmpty()) {
JBMNGRCHK = Byte.parseByte(s);
} else {
JBMNGRCHK = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC3_DV = Byte.parseByte(s);
} else {
JBNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC5_DV = Byte.parseByte(s);
} else {
JBNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC_DV = Short.parseShort(s);
} else {
JBNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJBOFFY(String s) {
if (!s.trim().isEmpty()) {
JBOFFY = Byte.parseByte(s);
} else {
JBOFFY = Byte.MIN_VALUE;
}
}

protected final void initJBONUS(String s) {
if (!s.trim().isEmpty()) {
JBONUS = Short.parseShort(s);
} else {
JBONUS = Short.MIN_VALUE;
}
}

protected final void initJBPEN(String s) {
if (!s.trim().isEmpty()) {
JBPEN = Short.parseShort(s);
} else {
JBPEN = Short.MIN_VALUE;
}
}

protected final void initJBPENM(String s) {
if (!s.trim().isEmpty()) {
JBPENM = Short.parseShort(s);
} else {
JBPENM = Short.MIN_VALUE;
}
}

protected final void initJBPENY4(String s) {
if (!s.trim().isEmpty()) {
JBPENY4 = Short.parseShort(s);
} else {
JBPENY4 = Short.MIN_VALUE;
}
}

protected final void initJBPERFP(String s) {
if (!s.trim().isEmpty()) {
JBPERFP = Byte.parseByte(s);
} else {
JBPERFP = Byte.MIN_VALUE;
}
}

protected final void initJBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JBRGSC_DV = Short.parseShort(s);
} else {
JBRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJBRISE(String s) {
if (!s.trim().isEmpty()) {
JBRISE = Short.parseShort(s);
} else {
JBRISE = Short.MIN_VALUE;
}
}

protected final void initJBSAMR(String s) {
if (!s.trim().isEmpty()) {
JBSAMR = Byte.parseByte(s);
} else {
JBSAMR = Byte.MIN_VALUE;
}
}

protected final void initJBSAT(String s) {
if (!s.trim().isEmpty()) {
JBSAT = Byte.parseByte(s);
} else {
JBSAT = Byte.MIN_VALUE;
}
}

protected final void initJBSEC(String s) {
if (!s.trim().isEmpty()) {
JBSEC = Byte.parseByte(s);
} else {
JBSEC = Byte.MIN_VALUE;
}
}

protected final void initJBSECTPUB(String s) {
if (!s.trim().isEmpty()) {
JBSECTPUB = Byte.parseByte(s);
} else {
JBSECTPUB = Byte.MIN_VALUE;
}
}

protected final void initJBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JBSEG_DV = Short.parseShort(s);
} else {
JBSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJBSEMPCHK(String s) {
if (!s.trim().isEmpty()) {
JBSEMPCHK = Byte.parseByte(s);
} else {
JBSEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07CHK(String s) {
if (!s.trim().isEmpty()) {
JBSIC07CHK = Byte.parseByte(s);
} else {
JBSIC07CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JBSIC07_CC = Byte.parseByte(s);
} else {
JBSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJBSIZECHK(String s) {
if (!s.trim().isEmpty()) {
JBSIZECHK = Byte.parseByte(s);
} else {
JBSIZECHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00CHK(String s) {
if (!s.trim().isEmpty()) {
JBSOC00CHK = Byte.parseByte(s);
} else {
JBSOC00CHK = Byte.MIN_VALUE;
}
}

protected final void initJBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC00_CC = Short.parseShort(s);
} else {
JBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC10_CC = Short.parseShort(s);
} else {
JBSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOCGR_DV(String s) {
if (!s.trim().isEmpty()) {
JBSOCGR_DV = Byte.parseByte(s);
} else {
JBSOCGR_DV = Byte.MIN_VALUE;
}
}

protected final void initJBTERM1(String s) {
if (!s.trim().isEmpty()) {
JBTERM1 = Byte.parseByte(s);
} else {
JBTERM1 = Byte.MIN_VALUE;
}
}

protected final void initJBTERM2(String s) {
if (!s.trim().isEmpty()) {
JBTERM2 = Byte.parseByte(s);
} else {
JBTERM2 = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHA(String s) {
if (!s.trim().isEmpty()) {
JBXPCHA = Byte.parseByte(s);
} else {
JBXPCHA = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHB(String s) {
if (!s.trim().isEmpty()) {
JBXPCHB = Byte.parseByte(s);
} else {
JBXPCHB = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHC(String s) {
if (!s.trim().isEmpty()) {
JBXPCHC = Byte.parseByte(s);
} else {
JBXPCHC = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHD(String s) {
if (!s.trim().isEmpty()) {
JBXPCHD = Byte.parseByte(s);
} else {
JBXPCHD = Byte.MIN_VALUE;
}
}

protected final void initJBXPCHE(String s) {
if (!s.trim().isEmpty()) {
JBXPCHE = Byte.parseByte(s);
} else {
JBXPCHE = Byte.MIN_VALUE;
}
}

protected final void initJLENDM(String s) {
if (!s.trim().isEmpty()) {
JLENDM = Byte.parseByte(s);
} else {
JLENDM = Byte.MIN_VALUE;
}
}

protected final void initJLES2000(String s) {
if (!s.trim().isEmpty()) {
JLES2000 = Byte.parseByte(s);
} else {
JLES2000 = Byte.MIN_VALUE;
}
}

protected final void initJLIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
JLIINDB_DV = Byte.parseByte(s);
} else {
JLIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC3_DV = Byte.parseByte(s);
} else {
JLNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC5_DV = Byte.parseByte(s);
} else {
JLNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initJLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC_DV = Short.parseShort(s);
} else {
JLNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JLRGSC_DV = Short.parseShort(s);
} else {
JLRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JLSEG_DV = Short.parseShort(s);
} else {
JLSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJLSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
JLSIC07_CC = Byte.parseByte(s);
} else {
JLSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initJLSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC00_CC = Short.parseShort(s);
} else {
JLSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initJLSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC10_CC = Short.parseShort(s);
} else {
JLSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initJOBHOURS1(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS1 = Byte.parseByte(s);
} else {
JOBHOURS1 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS2(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS2 = Byte.parseByte(s);
} else {
JOBHOURS2 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS3(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS3 = Byte.parseByte(s);
} else {
JOBHOURS3 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS4(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS4 = Byte.parseByte(s);
} else {
JOBHOURS4 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS5(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS5 = Byte.parseByte(s);
} else {
JOBHOURS5 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS6(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS6 = Byte.parseByte(s);
} else {
JOBHOURS6 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS7(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS7 = Byte.parseByte(s);
} else {
JOBHOURS7 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS8(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS8 = Byte.parseByte(s);
} else {
JOBHOURS8 = Byte.MIN_VALUE;
}
}

protected final void initJOBHOURS9(String s) {
if (!s.trim().isEmpty()) {
JOBHOURS9 = Byte.parseByte(s);
} else {
JOBHOURS9 = Byte.MIN_VALUE;
}
}

protected final void initJSOWNAMT(String s) {
if (!s.trim().isEmpty()) {
JSOWNAMT = Integer.parseInt(s);
} else {
JSOWNAMT = Integer.MIN_VALUE;
}
}

protected final void initJSOWNOTH(String s) {
if (!s.trim().isEmpty()) {
JSOWNOTH = Byte.parseByte(s);
} else {
JSOWNOTH = Byte.MIN_VALUE;
}
}

protected final void initJSOWNSUM(String s) {
if (!s.trim().isEmpty()) {
JSOWNSUM = Byte.parseByte(s);
} else {
JSOWNSUM = Byte.MIN_VALUE;
}
}

protected final void initJSOWOTAM(String s) {
if (!s.trim().isEmpty()) {
JSOWOTAM = Short.parseShort(s);
} else {
JSOWOTAM = Short.MIN_VALUE;
}
}

protected final void initJSPART(String s) {
if (!s.trim().isEmpty()) {
JSPART = Byte.parseByte(s);
} else {
JSPART = Byte.MIN_VALUE;
}
}

protected final void initJSPAYU(String s) {
if (!s.trim().isEmpty()) {
JSPAYU = Integer.parseInt(s);
} else {
JSPAYU = Integer.MIN_VALUE;
}
}

protected final void initJSPAYW(String s) {
if (!s.trim().isEmpty()) {
JSPAYW = Byte.parseByte(s);
} else {
JSPAYW = Byte.MIN_VALUE;
}
}

protected final void initJSPRLS(String s) {
if (!s.trim().isEmpty()) {
JSPRLS = Byte.parseByte(s);
} else {
JSPRLS = Byte.MIN_VALUE;
}
}

protected final void initJSPRNI(String s) {
if (!s.trim().isEmpty()) {
JSPRNI = Byte.parseByte(s);
} else {
JSPRNI = Byte.MIN_VALUE;
}
}

protected final void initJSPRTX(String s) {
if (!s.trim().isEmpty()) {
JSPRTX = Byte.parseByte(s);
} else {
JSPRTX = Byte.MIN_VALUE;
}
}

protected final void initJSPYNI(String s) {
if (!s.trim().isEmpty()) {
JSPYNI = Byte.parseByte(s);
} else {
JSPYNI = Byte.MIN_VALUE;
}
}

protected final void initJSPYTX(String s) {
if (!s.trim().isEmpty()) {
JSPYTX = Byte.parseByte(s);
} else {
JSPYTX = Byte.MIN_VALUE;
}
}

protected final void initJSTTWTB_CAWI(String s) {
if (!s.trim().isEmpty()) {
JSTTWTB_CAWI = Byte.parseByte(s);
} else {
JSTTWTB_CAWI = Byte.MIN_VALUE;
}
}

protected final void initJSTYPEB(String s) {
if (!s.trim().isEmpty()) {
JSTYPEB = Byte.parseByte(s);
} else {
JSTYPEB = Byte.MIN_VALUE;
}
}

protected final void initJSWORKAC(String s) {
if (!s.trim().isEmpty()) {
JSWORKAC = Byte.parseByte(s);
} else {
JSWORKAC = Byte.MIN_VALUE;
}
}

protected final void initJSWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
JSWORKTRAV = Byte.parseByte(s);
} else {
JSWORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initJUBGN(String s) {
if (!s.trim().isEmpty()) {
JUBGN = Short.parseShort(s);
} else {
JUBGN = Short.MIN_VALUE;
}
}

protected final void initJULK4X1(String s) {
if (!s.trim().isEmpty()) {
JULK4X1 = Short.parseShort(s);
} else {
JULK4X1 = Short.MIN_VALUE;
}
}

protected final void initJULK4X2(String s) {
if (!s.trim().isEmpty()) {
JULK4X2 = Short.parseShort(s);
} else {
JULK4X2 = Short.MIN_VALUE;
}
}

protected final void initJULK4X3(String s) {
if (!s.trim().isEmpty()) {
JULK4X3 = Byte.parseByte(s);
} else {
JULK4X3 = Byte.MIN_VALUE;
}
}

protected final void initJULK4X4(String s) {
if (!s.trim().isEmpty()) {
JULK4X4 = Short.parseShort(s);
} else {
JULK4X4 = Short.MIN_VALUE;
}
}

protected final void initJULK4X5(String s) {
if (!s.trim().isEmpty()) {
JULK4X5 = Short.parseShort(s);
} else {
JULK4X5 = Short.MIN_VALUE;
}
}

protected final void initJULK4X6(String s) {
if (!s.trim().isEmpty()) {
JULK4X6 = Short.parseShort(s);
} else {
JULK4X6 = Short.MIN_VALUE;
}
}

protected final void initJULK4X96(String s) {
if (!s.trim().isEmpty()) {
JULK4X96 = Byte.parseByte(s);
} else {
JULK4X96 = Byte.MIN_VALUE;
}
}

protected final void initJWBS1_DV(String s) {
if (!s.trim().isEmpty()) {
JWBS1_DV = Byte.parseByte(s);
} else {
JWBS1_DV = Byte.MIN_VALUE;
}
}

protected final void initJWBS2_DV(String s) {
if (!s.trim().isEmpty()) {
JWBS2_DV = Byte.parseByte(s);
} else {
JWBS2_DV = Byte.MIN_VALUE;
}
}

protected final void initKIDLANG(String s) {
if (!s.trim().isEmpty()) {
KIDLANG = Byte.parseByte(s);
} else {
KIDLANG = Byte.MIN_VALUE;
}
}

protected final void initLADOPT(String s) {
if (!s.trim().isEmpty()) {
LADOPT = Byte.parseByte(s);
} else {
LADOPT = Byte.MIN_VALUE;
}
}

protected final void initLATE(String s) {
if (!s.trim().isEmpty()) {
LATE = Byte.parseByte(s);
} else {
LATE = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI1(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI1 = Byte.parseByte(s);
} else {
LCHMULTI1 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI2(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI2 = Byte.parseByte(s);
} else {
LCHMULTI2 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI3(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI3 = Byte.parseByte(s);
} else {
LCHMULTI3 = Byte.MIN_VALUE;
}
}

protected final void initLCHMULTI4(String s) {
if (!s.trim().isEmpty()) {
LCHMULTI4 = Byte.parseByte(s);
} else {
LCHMULTI4 = Byte.MIN_VALUE;
}
}

protected final void initLCOHNPI(String s) {
if (!s.trim().isEmpty()) {
LCOHNPI = Byte.parseByte(s);
} else {
LCOHNPI = Byte.MIN_VALUE;
}
}

protected final void initLIENG(String s) {
if (!s.trim().isEmpty()) {
LIENG = Byte.parseByte(s);
} else {
LIENG = Byte.MIN_VALUE;
}
}

protected final void initLIHOW(String s) {
if (!s.trim().isEmpty()) {
LIHOW = Byte.parseByte(s);
} else {
LIHOW = Byte.MIN_VALUE;
}
}

protected final void initLINGUA(String s) {
if (!s.trim().isEmpty()) {
LINGUA = Byte.parseByte(s);
} else {
LINGUA = Byte.MIN_VALUE;
}
}

protected final void initLITRANS(String s) {
if (!s.trim().isEmpty()) {
LITRANS = Byte.parseByte(s);
} else {
LITRANS = Byte.MIN_VALUE;
}
}

protected final void initLIVESP(String s) {
if (!s.trim().isEmpty()) {
LIVESP = Byte.parseByte(s);
} else {
LIVESP = Byte.MIN_VALUE;
}
}

protected final void initLIVESP_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
LIVESP_DV = false;
} else {
LIVESP_DV = true;
}
}
}

protected final void initLIVEWITH(String s) {
if (!s.trim().isEmpty()) {
LIVEWITH = Byte.parseByte(s);
} else {
LIVEWITH = Byte.MIN_VALUE;
}
}

protected final void initLIWHO(String s) {
if (!s.trim().isEmpty()) {
LIWHO = Byte.parseByte(s);
} else {
LIWHO = Byte.MIN_VALUE;
}
}

protected final void initLMAR1M(String s) {
if (!s.trim().isEmpty()) {
LMAR1M = Byte.parseByte(s);
} else {
LMAR1M = Byte.MIN_VALUE;
}
}

protected final void initLMAR1Y(String s) {
if (!s.trim().isEmpty()) {
LMAR1Y = Short.parseShort(s);
} else {
LMAR1Y = Short.MIN_VALUE;
}
}

protected final void initLMCBM1(String s) {
if (!s.trim().isEmpty()) {
LMCBM1 = Byte.parseByte(s);
} else {
LMCBM1 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM2(String s) {
if (!s.trim().isEmpty()) {
LMCBM2 = Byte.parseByte(s);
} else {
LMCBM2 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM3(String s) {
if (!s.trim().isEmpty()) {
LMCBM3 = Byte.parseByte(s);
} else {
LMCBM3 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM4(String s) {
if (!s.trim().isEmpty()) {
LMCBM4 = Byte.parseByte(s);
} else {
LMCBM4 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM5(String s) {
if (!s.trim().isEmpty()) {
LMCBM5 = Byte.parseByte(s);
} else {
LMCBM5 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM6(String s) {
if (!s.trim().isEmpty()) {
LMCBM6 = Byte.parseByte(s);
} else {
LMCBM6 = Byte.MIN_VALUE;
}
}

protected final void initLMCBM7(String s) {
if (!s.trim().isEmpty()) {
LMCBM7 = Byte.parseByte(s);
} else {
LMCBM7 = Byte.MIN_VALUE;
}
}

protected final void initLMCBY41(String s) {
if (!s.trim().isEmpty()) {
LMCBY41 = Short.parseShort(s);
} else {
LMCBY41 = Short.MIN_VALUE;
}
}

protected final void initLMCBY42(String s) {
if (!s.trim().isEmpty()) {
LMCBY42 = Short.parseShort(s);
} else {
LMCBY42 = Short.MIN_VALUE;
}
}

protected final void initLMCBY43(String s) {
if (!s.trim().isEmpty()) {
LMCBY43 = Short.parseShort(s);
} else {
LMCBY43 = Short.MIN_VALUE;
}
}

protected final void initLMCBY44(String s) {
if (!s.trim().isEmpty()) {
LMCBY44 = Short.parseShort(s);
} else {
LMCBY44 = Short.MIN_VALUE;
}
}

protected final void initLMCBY45(String s) {
if (!s.trim().isEmpty()) {
LMCBY45 = Short.parseShort(s);
} else {
LMCBY45 = Short.MIN_VALUE;
}
}

protected final void initLMCBY46(String s) {
if (!s.trim().isEmpty()) {
LMCBY46 = Byte.parseByte(s);
} else {
LMCBY46 = Byte.MIN_VALUE;
}
}

protected final void initLMCBY47(String s) {
if (!s.trim().isEmpty()) {
LMCBY47 = Byte.parseByte(s);
} else {
LMCBY47 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM1(String s) {
if (!s.trim().isEmpty()) {
LMSPM1 = Byte.parseByte(s);
} else {
LMSPM1 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM2(String s) {
if (!s.trim().isEmpty()) {
LMSPM2 = Byte.parseByte(s);
} else {
LMSPM2 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM3(String s) {
if (!s.trim().isEmpty()) {
LMSPM3 = Byte.parseByte(s);
} else {
LMSPM3 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM4(String s) {
if (!s.trim().isEmpty()) {
LMSPM4 = Byte.parseByte(s);
} else {
LMSPM4 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM5(String s) {
if (!s.trim().isEmpty()) {
LMSPM5 = Byte.parseByte(s);
} else {
LMSPM5 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM6(String s) {
if (!s.trim().isEmpty()) {
LMSPM6 = Byte.parseByte(s);
} else {
LMSPM6 = Byte.MIN_VALUE;
}
}

protected final void initLMSPM7(String s) {
if (!s.trim().isEmpty()) {
LMSPM7 = Byte.parseByte(s);
} else {
LMSPM7 = Byte.MIN_VALUE;
}
}

protected final void initLMSPY41(String s) {
if (!s.trim().isEmpty()) {
LMSPY41 = Short.parseShort(s);
} else {
LMSPY41 = Short.MIN_VALUE;
}
}

protected final void initLMSPY42(String s) {
if (!s.trim().isEmpty()) {
LMSPY42 = Short.parseShort(s);
} else {
LMSPY42 = Short.MIN_VALUE;
}
}

protected final void initLMSPY43(String s) {
if (!s.trim().isEmpty()) {
LMSPY43 = Short.parseShort(s);
} else {
LMSPY43 = Short.MIN_VALUE;
}
}

protected final void initLMSPY44(String s) {
if (!s.trim().isEmpty()) {
LMSPY44 = Short.parseShort(s);
} else {
LMSPY44 = Short.MIN_VALUE;
}
}

protected final void initLMSPY45(String s) {
if (!s.trim().isEmpty()) {
LMSPY45 = Short.parseShort(s);
} else {
LMSPY45 = Short.MIN_VALUE;
}
}

protected final void initLMSPY46(String s) {
if (!s.trim().isEmpty()) {
LMSPY46 = Byte.parseByte(s);
} else {
LMSPY46 = Byte.MIN_VALUE;
}
}

protected final void initLMSPY47(String s) {
if (!s.trim().isEmpty()) {
LMSPY47 = Byte.parseByte(s);
} else {
LMSPY47 = Byte.MIN_VALUE;
}
}

protected final void initLNADOPT(String s) {
if (!s.trim().isEmpty()) {
LNADOPT = Byte.parseByte(s);
} else {
LNADOPT = Byte.MIN_VALUE;
}
}

protected final void initLNPRNT(String s) {
if (!s.trim().isEmpty()) {
LNPRNT = Byte.parseByte(s);
} else {
LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initLPRNT(String s) {
if (!s.trim().isEmpty()) {
LPRNT = Byte.parseByte(s);
} else {
LPRNT = Byte.MIN_VALUE;
}
}

protected final void initLVHM(String s) {
if (!s.trim().isEmpty()) {
LVHM = Byte.parseByte(s);
} else {
LVHM = Byte.MIN_VALUE;
}
}

protected final void initLVSCHDO(String s) {
if (!s.trim().isEmpty()) {
LVSCHDO = Byte.parseByte(s);
} else {
LVSCHDO = Byte.MIN_VALUE;
}
}

protected final void initLWWRONG(String s) {
if (!s.trim().isEmpty()) {
LWWRONG = Byte.parseByte(s);
} else {
LWWRONG = Byte.MIN_VALUE;
}
}

protected final void initMACOB(String s) {
if (!s.trim().isEmpty()) {
MACOB = Byte.parseByte(s);
} else {
MACOB = Byte.MIN_VALUE;
}
}

protected final void initMAJU(String s) {
if (!s.trim().isEmpty()) {
MAJU = Byte.parseByte(s);
} else {
MAJU = Byte.MIN_VALUE;
}
}

protected final void initMANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
MANSSEC5_DV = Byte.parseByte(s);
} else {
MANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initMARSTAT(String s) {
if (!s.trim().isEmpty()) {
MARSTAT = Byte.parseByte(s);
} else {
MARSTAT = Byte.MIN_VALUE;
}
}

protected final void initMASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC00_CC = Short.parseShort(s);
} else {
MASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC10_CC = Short.parseShort(s);
} else {
MASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initMASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
MASOC90_CC = Byte.parseByte(s);
} else {
MASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initMASTAT_DV(String s) {
if (!s.trim().isEmpty()) {
MASTAT_DV = Byte.parseByte(s);
} else {
MASTAT_DV = Byte.MIN_VALUE;
}
}

protected final void initMATLEAVE(String s) {
if (!s.trim().isEmpty()) {
MATLEAVE = Byte.parseByte(s);
} else {
MATLEAVE = Byte.MIN_VALUE;
}
}

protected final void initMATLV(String s) {
if (!s.trim().isEmpty()) {
MATLV = Byte.parseByte(s);
} else {
MATLV = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDD(String s) {
if (!s.trim().isEmpty()) {
MATLVENDD = Byte.parseByte(s);
} else {
MATLVENDD = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDM(String s) {
if (!s.trim().isEmpty()) {
MATLVENDM = Byte.parseByte(s);
} else {
MATLVENDM = Byte.MIN_VALUE;
}
}

protected final void initMATLVENDY4(String s) {
if (!s.trim().isEmpty()) {
MATLVENDY4 = Short.parseShort(s);
} else {
MATLVENDY4 = Short.MIN_VALUE;
}
}

protected final void initMATLVSTD(String s) {
if (!s.trim().isEmpty()) {
MATLVSTD = Byte.parseByte(s);
} else {
MATLVSTD = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTM(String s) {
if (!s.trim().isEmpty()) {
MATLVSTM = Byte.parseByte(s);
} else {
MATLVSTM = Byte.MIN_VALUE;
}
}

protected final void initMATLVSTY4(String s) {
if (!s.trim().isEmpty()) {
MATLVSTY4 = Short.parseShort(s);
} else {
MATLVSTY4 = Short.MIN_VALUE;
}
}

protected final void initMAYRUK(String s) {
if (!s.trim().isEmpty()) {
MAYRUK = Byte.parseByte(s);
} else {
MAYRUK = Byte.MIN_VALUE;
}
}

protected final void initMEMPLOY(String s) {
if (!s.trim().isEmpty()) {
MEMPLOY = Byte.parseByte(s);
} else {
MEMPLOY = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE01(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE01 = Byte.parseByte(s);
} else {
MISSOURCE01 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE02(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE02 = Byte.parseByte(s);
} else {
MISSOURCE02 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE03(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE03 = Byte.parseByte(s);
} else {
MISSOURCE03 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE04(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE04 = Byte.parseByte(s);
} else {
MISSOURCE04 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE05(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE05 = Byte.parseByte(s);
} else {
MISSOURCE05 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE06(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE06 = Byte.parseByte(s);
} else {
MISSOURCE06 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE07(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE07 = Byte.parseByte(s);
} else {
MISSOURCE07 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE08(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE08 = Byte.parseByte(s);
} else {
MISSOURCE08 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE09(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE09 = Byte.parseByte(s);
} else {
MISSOURCE09 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE10(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE10 = Byte.parseByte(s);
} else {
MISSOURCE10 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE11(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE11 = Byte.parseByte(s);
} else {
MISSOURCE11 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE12(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE12 = Byte.parseByte(s);
} else {
MISSOURCE12 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE13(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE13 = Byte.parseByte(s);
} else {
MISSOURCE13 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE14(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE14 = Byte.parseByte(s);
} else {
MISSOURCE14 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE15(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE15 = Byte.parseByte(s);
} else {
MISSOURCE15 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE16(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE16 = Byte.parseByte(s);
} else {
MISSOURCE16 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE18(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE18 = Byte.parseByte(s);
} else {
MISSOURCE18 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE19(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE19 = Byte.parseByte(s);
} else {
MISSOURCE19 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE20(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE20 = Byte.parseByte(s);
} else {
MISSOURCE20 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE21(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE21 = Byte.parseByte(s);
} else {
MISSOURCE21 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE22(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE22 = Byte.parseByte(s);
} else {
MISSOURCE22 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE23(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE23 = Byte.parseByte(s);
} else {
MISSOURCE23 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE24(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE24 = Byte.parseByte(s);
} else {
MISSOURCE24 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE25(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE25 = Byte.parseByte(s);
} else {
MISSOURCE25 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE26(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE26 = Byte.parseByte(s);
} else {
MISSOURCE26 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE27(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE27 = Byte.parseByte(s);
} else {
MISSOURCE27 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE28(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE28 = Byte.parseByte(s);
} else {
MISSOURCE28 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE29(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE29 = Byte.parseByte(s);
} else {
MISSOURCE29 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE30(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE30 = Byte.parseByte(s);
} else {
MISSOURCE30 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE31(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE31 = Byte.parseByte(s);
} else {
MISSOURCE31 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE32(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE32 = Byte.parseByte(s);
} else {
MISSOURCE32 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE33(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE33 = Byte.parseByte(s);
} else {
MISSOURCE33 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE34(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE34 = Byte.parseByte(s);
} else {
MISSOURCE34 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE35(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE35 = Byte.parseByte(s);
} else {
MISSOURCE35 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE36(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE36 = Byte.parseByte(s);
} else {
MISSOURCE36 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE37(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE37 = Byte.parseByte(s);
} else {
MISSOURCE37 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE38(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE38 = Byte.parseByte(s);
} else {
MISSOURCE38 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE39(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE39 = Byte.parseByte(s);
} else {
MISSOURCE39 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE40(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE40 = Byte.parseByte(s);
} else {
MISSOURCE40 = Byte.MIN_VALUE;
}
}

protected final void initMISSOURCE41(String s) {
if (!s.trim().isEmpty()) {
MISSOURCE41 = Byte.parseByte(s);
} else {
MISSOURCE41 = Byte.MIN_VALUE;
}
}

protected final void initMLAGST(String s) {
if (!s.trim().isEmpty()) {
MLAGST = Byte.parseByte(s);
} else {
MLAGST = Byte.MIN_VALUE;
}
}

protected final void initMLAGSTU(String s) {
if (!s.trim().isEmpty()) {
MLAGSTU = Byte.parseByte(s);
} else {
MLAGSTU = Byte.MIN_VALUE;
}
}

protected final void initMLFUTR(String s) {
if (!s.trim().isEmpty()) {
MLFUTR = Byte.parseByte(s);
} else {
MLFUTR = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT1(String s) {
if (!s.trim().isEmpty()) {
MLRNOT1 = Byte.parseByte(s);
} else {
MLRNOT1 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT10(String s) {
if (!s.trim().isEmpty()) {
MLRNOT10 = Byte.parseByte(s);
} else {
MLRNOT10 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT11(String s) {
if (!s.trim().isEmpty()) {
MLRNOT11 = Byte.parseByte(s);
} else {
MLRNOT11 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT12(String s) {
if (!s.trim().isEmpty()) {
MLRNOT12 = Byte.parseByte(s);
} else {
MLRNOT12 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT13(String s) {
if (!s.trim().isEmpty()) {
MLRNOT13 = Byte.parseByte(s);
} else {
MLRNOT13 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT2(String s) {
if (!s.trim().isEmpty()) {
MLRNOT2 = Byte.parseByte(s);
} else {
MLRNOT2 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT3(String s) {
if (!s.trim().isEmpty()) {
MLRNOT3 = Byte.parseByte(s);
} else {
MLRNOT3 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT4(String s) {
if (!s.trim().isEmpty()) {
MLRNOT4 = Byte.parseByte(s);
} else {
MLRNOT4 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT5(String s) {
if (!s.trim().isEmpty()) {
MLRNOT5 = Byte.parseByte(s);
} else {
MLRNOT5 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT6(String s) {
if (!s.trim().isEmpty()) {
MLRNOT6 = Byte.parseByte(s);
} else {
MLRNOT6 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT7(String s) {
if (!s.trim().isEmpty()) {
MLRNOT7 = Byte.parseByte(s);
} else {
MLRNOT7 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT8(String s) {
if (!s.trim().isEmpty()) {
MLRNOT8 = Byte.parseByte(s);
} else {
MLRNOT8 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT9(String s) {
if (!s.trim().isEmpty()) {
MLRNOT9 = Byte.parseByte(s);
} else {
MLRNOT9 = Byte.MIN_VALUE;
}
}

protected final void initMLRNOT97(String s) {
if (!s.trim().isEmpty()) {
MLRNOT97 = Byte.parseByte(s);
} else {
MLRNOT97 = Byte.MIN_VALUE;
}
}

protected final void initMLSTATCHK(String s) {
if (!s.trim().isEmpty()) {
MLSTATCHK = Byte.parseByte(s);
} else {
MLSTATCHK = Byte.MIN_VALUE;
}
}

protected final void initMLWKFPT(String s) {
if (!s.trim().isEmpty()) {
MLWKFPT = Byte.parseByte(s);
} else {
MLWKFPT = Byte.MIN_VALUE;
}
}

protected final void initMNPID(String s) {
if (!s.trim().isEmpty()) {
MNPID = Integer.parseInt(s);
} else {
MNPID = Integer.MIN_VALUE;
}
}

protected final void initMNPNO(String s) {
if (!s.trim().isEmpty()) {
MNPNO = Byte.parseByte(s);
} else {
MNPNO = Byte.MIN_VALUE;
}
}

protected final void initMNSPID(String s) {
if (!s.trim().isEmpty()) {
MNSPID = Integer.parseInt(s);
} else {
MNSPID = Integer.MIN_VALUE;
}
}

protected final void initMNSPNO(String s) {
if (!s.trim().isEmpty()) {
MNSPNO = Byte.parseByte(s);
} else {
MNSPNO = Byte.MIN_VALUE;
}
}

protected final void initMOBCOMP(String s) {
if (!s.trim().isEmpty()) {
MOBCOMP = Byte.parseByte(s);
} else {
MOBCOMP = Byte.MIN_VALUE;
}
}

protected final void initMOBUSE(String s) {
if (!s.trim().isEmpty()) {
MOBUSE = Byte.parseByte(s);
} else {
MOBUSE = Byte.MIN_VALUE;
}
}

protected final void initMONTH(String s) {
if (!s.trim().isEmpty()) {
MONTH = Byte.parseByte(s);
} else {
MONTH = Byte.MIN_VALUE;
}
}

protected final void initMOVDIR(String s) {
if (!s.trim().isEmpty()) {
MOVDIR = Byte.parseByte(s);
} else {
MOVDIR = Byte.MIN_VALUE;
}
}

protected final void initMOVEOTCODE(String s) {
if (!s.trim().isEmpty()) {
MOVEOTCODE = Byte.parseByte(s);
} else {
MOVEOTCODE = Byte.MIN_VALUE;
}
}

protected final void initMOVY11(String s) {
if (!s.trim().isEmpty()) {
MOVY11 = Byte.parseByte(s);
} else {
MOVY11 = Byte.MIN_VALUE;
}
}

protected final void initMOVY12(String s) {
if (!s.trim().isEmpty()) {
MOVY12 = Byte.parseByte(s);
} else {
MOVY12 = Byte.MIN_VALUE;
}
}

protected final void initMOVY13(String s) {
if (!s.trim().isEmpty()) {
MOVY13 = Byte.parseByte(s);
} else {
MOVY13 = Byte.MIN_VALUE;
}
}

protected final void initMOVY14(String s) {
if (!s.trim().isEmpty()) {
MOVY14 = Byte.parseByte(s);
} else {
MOVY14 = Byte.MIN_VALUE;
}
}

protected final void initMOVY15(String s) {
if (!s.trim().isEmpty()) {
MOVY15 = Byte.parseByte(s);
} else {
MOVY15 = Byte.MIN_VALUE;
}
}

protected final void initMOVY16(String s) {
if (!s.trim().isEmpty()) {
MOVY16 = Byte.parseByte(s);
} else {
MOVY16 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH1(String s) {
if (!s.trim().isEmpty()) {
MSTATCH1 = Byte.parseByte(s);
} else {
MSTATCH1 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH2(String s) {
if (!s.trim().isEmpty()) {
MSTATCH2 = Byte.parseByte(s);
} else {
MSTATCH2 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH3(String s) {
if (!s.trim().isEmpty()) {
MSTATCH3 = Byte.parseByte(s);
} else {
MSTATCH3 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH4(String s) {
if (!s.trim().isEmpty()) {
MSTATCH4 = Byte.parseByte(s);
} else {
MSTATCH4 = Byte.MIN_VALUE;
}
}

protected final void initMSTATCH5(String s) {
if (!s.trim().isEmpty()) {
MSTATCH5 = Byte.parseByte(s);
} else {
MSTATCH5 = Byte.MIN_VALUE;
}
}

protected final void initMSTATSAM(String s) {
if (!s.trim().isEmpty()) {
MSTATSAM = Short.parseShort(s);
} else {
MSTATSAM = Short.MIN_VALUE;
}
}

protected final void initMSTATSAMN(String s) {
if (!s.trim().isEmpty()) {
MSTATSAMN = Byte.parseByte(s);
} else {
MSTATSAMN = Byte.MIN_VALUE;
}
}

protected final void initMVEVER(String s) {
if (!s.trim().isEmpty()) {
MVEVER = Byte.parseByte(s);
} else {
MVEVER = Byte.MIN_VALUE;
}
}

protected final void initMVMNTH(String s) {
if (!s.trim().isEmpty()) {
MVMNTH = Byte.parseByte(s);
} else {
MVMNTH = Byte.MIN_VALUE;
}
}

protected final void initMVYR(String s) {
if (!s.trim().isEmpty()) {
MVYR = Short.parseShort(s);
} else {
MVYR = Short.MIN_VALUE;
}
}

protected final void initN1619ABS(String s) {
if (!s.trim().isEmpty()) {
N1619ABS = Byte.parseByte(s);
} else {
N1619ABS = Byte.MIN_VALUE;
}
}

protected final void initNADOPTCH(String s) {
if (!s.trim().isEmpty()) {
NADOPTCH = Byte.parseByte(s);
} else {
NADOPTCH = Byte.MIN_VALUE;
}
}

protected final void initNAIDXHH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH = Byte.parseByte(s);
} else {
NAIDXHH = Byte.MIN_VALUE;
}
}

protected final void initNATID1(String s) {
if (!s.trim().isEmpty()) {
NATID1 = Byte.parseByte(s);
} else {
NATID1 = Byte.MIN_VALUE;
}
}

protected final void initNATID2(String s) {
if (!s.trim().isEmpty()) {
NATID2 = Byte.parseByte(s);
} else {
NATID2 = Byte.MIN_VALUE;
}
}

protected final void initNATID3(String s) {
if (!s.trim().isEmpty()) {
NATID3 = Byte.parseByte(s);
} else {
NATID3 = Byte.MIN_VALUE;
}
}

protected final void initNATID4(String s) {
if (!s.trim().isEmpty()) {
NATID4 = Byte.parseByte(s);
} else {
NATID4 = Byte.MIN_VALUE;
}
}

protected final void initNATID5(String s) {
if (!s.trim().isEmpty()) {
NATID5 = Byte.parseByte(s);
} else {
NATID5 = Byte.MIN_VALUE;
}
}

protected final void initNATID6(String s) {
if (!s.trim().isEmpty()) {
NATID6 = Byte.parseByte(s);
} else {
NATID6 = Byte.MIN_VALUE;
}
}

protected final void initNATID97(String s) {
if (!s.trim().isEmpty()) {
NATID97 = Byte.parseByte(s);
} else {
NATID97 = Byte.MIN_VALUE;
}
}

protected final void initNCCJT(String s) {
if (!s.trim().isEmpty()) {
NCCJT = Byte.parseByte(s);
} else {
NCCJT = Byte.MIN_VALUE;
}
}

protected final void initNCCSOLE(String s) {
if (!s.trim().isEmpty()) {
NCCSOLE = Byte.parseByte(s);
} else {
NCCSOLE = Byte.MIN_VALUE;
}
}

protected final void initNCH10(String s) {
if (!s.trim().isEmpty()) {
NCH10 = Byte.parseByte(s);
} else {
NCH10 = Byte.MIN_VALUE;
}
}

protected final void initNCH10TO15(String s) {
if (!s.trim().isEmpty()) {
NCH10TO15 = Byte.parseByte(s);
} else {
NCH10TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH14RESP(String s) {
if (!s.trim().isEmpty()) {
NCH14RESP = Byte.parseByte(s);
} else {
NCH14RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH3RESP(String s) {
if (!s.trim().isEmpty()) {
NCH3RESP = Byte.parseByte(s);
} else {
NCH3RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH415RESP(String s) {
if (!s.trim().isEmpty()) {
NCH415RESP = Byte.parseByte(s);
} else {
NCH415RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5RESP(String s) {
if (!s.trim().isEmpty()) {
NCH5RESP = Byte.parseByte(s);
} else {
NCH5RESP = Byte.MIN_VALUE;
}
}

protected final void initNCH5TO15(String s) {
if (!s.trim().isEmpty()) {
NCH5TO15 = Byte.parseByte(s);
} else {
NCH5TO15 = Byte.MIN_VALUE;
}
}

protected final void initNCH8RESP(String s) {
if (!s.trim().isEmpty()) {
NCH8RESP = Byte.parseByte(s);
} else {
NCH8RESP = Byte.MIN_VALUE;
}
}

protected final void initNCHILD(String s) {
if (!s.trim().isEmpty()) {
NCHILD = Byte.parseByte(s);
} else {
NCHILD = Byte.MIN_VALUE;
}
}

protected final void initNCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHILD_DV = Short.parseShort(s);
} else {
NCHILD_DV = Short.MIN_VALUE;
}
}

protected final void initNCHRESP(String s) {
if (!s.trim().isEmpty()) {
NCHRESP = Byte.parseByte(s);
} else {
NCHRESP = Byte.MIN_VALUE;
}
}

protected final void initNCHUNDER16(String s) {
if (!s.trim().isEmpty()) {
NCHUNDER16 = Byte.parseByte(s);
} else {
NCHUNDER16 = Byte.MIN_VALUE;
}
}

protected final void initNCIGS(String s) {
if (!s.trim().isEmpty()) {
NCIGS = Short.parseShort(s);
} else {
NCIGS = Short.MIN_VALUE;
}
}

protected final void initNCRR1(String s) {
if (!s.trim().isEmpty()) {
NCRR1 = Byte.parseByte(s);
} else {
NCRR1 = Byte.MIN_VALUE;
}
}

protected final void initNCRR11(String s) {
if (!s.trim().isEmpty()) {
NCRR11 = Byte.parseByte(s);
} else {
NCRR11 = Byte.MIN_VALUE;
}
}

protected final void initNCRR12(String s) {
if (!s.trim().isEmpty()) {
NCRR12 = Byte.parseByte(s);
} else {
NCRR12 = Byte.MIN_VALUE;
}
}

protected final void initNCRR3(String s) {
if (!s.trim().isEmpty()) {
NCRR3 = Byte.parseByte(s);
} else {
NCRR3 = Byte.MIN_VALUE;
}
}

protected final void initNCRR4(String s) {
if (!s.trim().isEmpty()) {
NCRR4 = Byte.parseByte(s);
} else {
NCRR4 = Byte.MIN_VALUE;
}
}

protected final void initNCRR5(String s) {
if (!s.trim().isEmpty()) {
NCRR5 = Byte.parseByte(s);
} else {
NCRR5 = Byte.MIN_VALUE;
}
}

protected final void initNCRR6(String s) {
if (!s.trim().isEmpty()) {
NCRR6 = Byte.parseByte(s);
} else {
NCRR6 = Byte.MIN_VALUE;
}
}

protected final void initNCRR8(String s) {
if (!s.trim().isEmpty()) {
NCRR8 = Byte.parseByte(s);
} else {
NCRR8 = Byte.MIN_VALUE;
}
}

protected final void initNCRR9(String s) {
if (!s.trim().isEmpty()) {
NCRR9 = Byte.parseByte(s);
} else {
NCRR9 = Byte.MIN_VALUE;
}
}

protected final void initNCRRM(String s) {
if (!s.trim().isEmpty()) {
NCRRM = Byte.parseByte(s);
} else {
NCRRM = Byte.MIN_VALUE;
}
}

protected final void initNCRRY4(String s) {
if (!s.trim().isEmpty()) {
NCRRY4 = Short.parseShort(s);
} else {
NCRRY4 = Short.MIN_VALUE;
}
}

protected final void initNDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
NDEPCHL_DV = Byte.parseByte(s);
} else {
NDEPCHL_DV = Byte.MIN_VALUE;
}
}

protected final void initNETPUSE(String s) {
if (!s.trim().isEmpty()) {
NETPUSE = Byte.parseByte(s);
} else {
NETPUSE = Byte.MIN_VALUE;
}
}

protected final void initNETUSE(String s) {
if (!s.trim().isEmpty()) {
NETUSE = Byte.parseByte(s);
} else {
NETUSE = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE1(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE1 = Byte.parseByte(s);
} else {
NEXTELSE1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE2(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE2 = Byte.parseByte(s);
} else {
NEXTELSE2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE3(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE3 = Byte.parseByte(s);
} else {
NEXTELSE3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE4(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE4 = Byte.parseByte(s);
} else {
NEXTELSE4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE5(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE5 = Byte.parseByte(s);
} else {
NEXTELSE5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE6(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE6 = Byte.parseByte(s);
} else {
NEXTELSE6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE7(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE7 = Byte.parseByte(s);
} else {
NEXTELSE7 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE8(String s) {
if (!s.trim().isEmpty()) {
NEXTELSE8 = Byte.parseByte(s);
} else {
NEXTELSE8 = Byte.MIN_VALUE;
}
}

protected final void initNEXTELSE9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
NEXTELSE9 = false;
} else {
NEXTELSE9 = true;
}
}
}

protected final void initNEXTJOB1(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB1 = Byte.parseByte(s);
} else {
NEXTJOB1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB2(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB2 = Byte.parseByte(s);
} else {
NEXTJOB2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB3(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB3 = Byte.parseByte(s);
} else {
NEXTJOB3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB4(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB4 = Byte.parseByte(s);
} else {
NEXTJOB4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB5(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB5 = Byte.parseByte(s);
} else {
NEXTJOB5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB6(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB6 = Byte.parseByte(s);
} else {
NEXTJOB6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB7(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB7 = Byte.parseByte(s);
} else {
NEXTJOB7 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB8(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB8 = Byte.parseByte(s);
} else {
NEXTJOB8 = Byte.MIN_VALUE;
}
}

protected final void initNEXTJOB9(String s) {
if (!s.trim().isEmpty()) {
NEXTJOB9 = Byte.parseByte(s);
} else {
NEXTJOB9 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT1(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT1 = Byte.parseByte(s);
} else {
NEXTSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT2(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT2 = Byte.parseByte(s);
} else {
NEXTSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT3(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT3 = Byte.parseByte(s);
} else {
NEXTSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT4(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT4 = Byte.parseByte(s);
} else {
NEXTSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT5(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT5 = Byte.parseByte(s);
} else {
NEXTSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT6(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT6 = Byte.parseByte(s);
} else {
NEXTSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT7(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT7 = Byte.parseByte(s);
} else {
NEXTSTAT7 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT8(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT8 = Byte.parseByte(s);
} else {
NEXTSTAT8 = Byte.MIN_VALUE;
}
}

protected final void initNEXTSTAT9(String s) {
if (!s.trim().isEmpty()) {
NEXTSTAT9 = Byte.parseByte(s);
} else {
NEXTSTAT9 = Byte.MIN_VALUE;
}
}

protected final void initNFH01(String s) {
if (!s.trim().isEmpty()) {
NFH01 = Byte.parseByte(s);
} else {
NFH01 = Byte.MIN_VALUE;
}
}

protected final void initNFH02(String s) {
if (!s.trim().isEmpty()) {
NFH02 = Byte.parseByte(s);
} else {
NFH02 = Byte.MIN_VALUE;
}
}

protected final void initNFH03(String s) {
if (!s.trim().isEmpty()) {
NFH03 = Byte.parseByte(s);
} else {
NFH03 = Byte.MIN_VALUE;
}
}

protected final void initNFH04(String s) {
if (!s.trim().isEmpty()) {
NFH04 = Byte.parseByte(s);
} else {
NFH04 = Byte.MIN_VALUE;
}
}

protected final void initNFH05(String s) {
if (!s.trim().isEmpty()) {
NFH05 = Byte.parseByte(s);
} else {
NFH05 = Byte.MIN_VALUE;
}
}

protected final void initNFH06(String s) {
if (!s.trim().isEmpty()) {
NFH06 = Byte.parseByte(s);
} else {
NFH06 = Byte.MIN_VALUE;
}
}

protected final void initNFH07(String s) {
if (!s.trim().isEmpty()) {
NFH07 = Byte.parseByte(s);
} else {
NFH07 = Byte.MIN_VALUE;
}
}

protected final void initNFH08(String s) {
if (!s.trim().isEmpty()) {
NFH08 = Byte.parseByte(s);
} else {
NFH08 = Byte.MIN_VALUE;
}
}

protected final void initNFH09(String s) {
if (!s.trim().isEmpty()) {
NFH09 = Byte.parseByte(s);
} else {
NFH09 = Byte.MIN_VALUE;
}
}

protected final void initNFH10(String s) {
if (!s.trim().isEmpty()) {
NFH10 = Byte.parseByte(s);
} else {
NFH10 = Byte.MIN_VALUE;
}
}

protected final void initNFH11(String s) {
if (!s.trim().isEmpty()) {
NFH11 = Byte.parseByte(s);
} else {
NFH11 = Byte.MIN_VALUE;
}
}

protected final void initNFH12(String s) {
if (!s.trim().isEmpty()) {
NFH12 = Byte.parseByte(s);
} else {
NFH12 = Byte.MIN_VALUE;
}
}

protected final void initNFH13(String s) {
if (!s.trim().isEmpty()) {
NFH13 = Byte.parseByte(s);
} else {
NFH13 = Byte.MIN_VALUE;
}
}

protected final void initNFH14(String s) {
if (!s.trim().isEmpty()) {
NFH14 = Byte.parseByte(s);
} else {
NFH14 = Byte.MIN_VALUE;
}
}

protected final void initNFH15(String s) {
if (!s.trim().isEmpty()) {
NFH15 = Byte.parseByte(s);
} else {
NFH15 = Byte.MIN_VALUE;
}
}

protected final void initNFH16(String s) {
if (!s.trim().isEmpty()) {
NFH16 = Byte.parseByte(s);
} else {
NFH16 = Byte.MIN_VALUE;
}
}

protected final void initNFH18(String s) {
if (!s.trim().isEmpty()) {
NFH18 = Byte.parseByte(s);
} else {
NFH18 = Byte.MIN_VALUE;
}
}

protected final void initNFH19(String s) {
if (!s.trim().isEmpty()) {
NFH19 = Byte.parseByte(s);
} else {
NFH19 = Byte.MIN_VALUE;
}
}

protected final void initNFH20(String s) {
if (!s.trim().isEmpty()) {
NFH20 = Byte.parseByte(s);
} else {
NFH20 = Byte.MIN_VALUE;
}
}

protected final void initNFH21(String s) {
if (!s.trim().isEmpty()) {
NFH21 = Byte.parseByte(s);
} else {
NFH21 = Byte.MIN_VALUE;
}
}

protected final void initNFH22(String s) {
if (!s.trim().isEmpty()) {
NFH22 = Byte.parseByte(s);
} else {
NFH22 = Byte.MIN_VALUE;
}
}

protected final void initNFH23(String s) {
if (!s.trim().isEmpty()) {
NFH23 = Byte.parseByte(s);
} else {
NFH23 = Byte.MIN_VALUE;
}
}

protected final void initNFH24(String s) {
if (!s.trim().isEmpty()) {
NFH24 = Byte.parseByte(s);
} else {
NFH24 = Byte.MIN_VALUE;
}
}

protected final void initNFH25(String s) {
if (!s.trim().isEmpty()) {
NFH25 = Byte.parseByte(s);
} else {
NFH25 = Byte.MIN_VALUE;
}
}

protected final void initNFH26(String s) {
if (!s.trim().isEmpty()) {
NFH26 = Byte.parseByte(s);
} else {
NFH26 = Byte.MIN_VALUE;
}
}

protected final void initNFH27(String s) {
if (!s.trim().isEmpty()) {
NFH27 = Byte.parseByte(s);
} else {
NFH27 = Byte.MIN_VALUE;
}
}

protected final void initNFH28(String s) {
if (!s.trim().isEmpty()) {
NFH28 = Byte.parseByte(s);
} else {
NFH28 = Byte.MIN_VALUE;
}
}

protected final void initNFH29(String s) {
if (!s.trim().isEmpty()) {
NFH29 = Byte.parseByte(s);
} else {
NFH29 = Byte.MIN_VALUE;
}
}

protected final void initNFH30(String s) {
if (!s.trim().isEmpty()) {
NFH30 = Byte.parseByte(s);
} else {
NFH30 = Byte.MIN_VALUE;
}
}

protected final void initNFH31(String s) {
if (!s.trim().isEmpty()) {
NFH31 = Byte.parseByte(s);
} else {
NFH31 = Byte.MIN_VALUE;
}
}

protected final void initNFH32(String s) {
if (!s.trim().isEmpty()) {
NFH32 = Byte.parseByte(s);
} else {
NFH32 = Byte.MIN_VALUE;
}
}

protected final void initNFH33(String s) {
if (!s.trim().isEmpty()) {
NFH33 = Byte.parseByte(s);
} else {
NFH33 = Byte.MIN_VALUE;
}
}

protected final void initNFH34(String s) {
if (!s.trim().isEmpty()) {
NFH34 = Byte.parseByte(s);
} else {
NFH34 = Byte.MIN_VALUE;
}
}

protected final void initNFH35(String s) {
if (!s.trim().isEmpty()) {
NFH35 = Byte.parseByte(s);
} else {
NFH35 = Byte.MIN_VALUE;
}
}

protected final void initNFH36(String s) {
if (!s.trim().isEmpty()) {
NFH36 = Byte.parseByte(s);
} else {
NFH36 = Byte.MIN_VALUE;
}
}

protected final void initNFH37(String s) {
if (!s.trim().isEmpty()) {
NFH37 = Byte.parseByte(s);
} else {
NFH37 = Byte.MIN_VALUE;
}
}

protected final void initNFH38(String s) {
if (!s.trim().isEmpty()) {
NFH38 = Byte.parseByte(s);
} else {
NFH38 = Byte.MIN_VALUE;
}
}

protected final void initNFH39(String s) {
if (!s.trim().isEmpty()) {
NFH39 = Byte.parseByte(s);
} else {
NFH39 = Byte.MIN_VALUE;
}
}

protected final void initNFH40(String s) {
if (!s.trim().isEmpty()) {
NFH40 = Byte.parseByte(s);
} else {
NFH40 = Byte.MIN_VALUE;
}
}

protected final void initNFH41(String s) {
if (!s.trim().isEmpty()) {
NFH41 = Byte.parseByte(s);
} else {
NFH41 = Byte.MIN_VALUE;
}
}

protected final void initNGCSE5(String s) {
if (!s.trim().isEmpty()) {
NGCSE5 = Byte.parseByte(s);
} else {
NGCSE5 = Byte.MIN_VALUE;
}
}

protected final void initNGCSEENG(String s) {
if (!s.trim().isEmpty()) {
NGCSEENG = Byte.parseByte(s);
} else {
NGCSEENG = Byte.MIN_VALUE;
}
}

protected final void initNGCSEENGNIE(String s) {
if (!s.trim().isEmpty()) {
NGCSEENGNIE = Byte.parseByte(s);
} else {
NGCSEENGNIE = Byte.MIN_VALUE;
}
}

protected final void initNGCSEMAT(String s) {
if (!s.trim().isEmpty()) {
NGCSEMAT = Byte.parseByte(s);
} else {
NGCSEMAT = Byte.MIN_VALUE;
}
}

protected final void initNGCSEMATNIE(String s) {
if (!s.trim().isEmpty()) {
NGCSEMATNIE = Byte.parseByte(s);
} else {
NGCSEMATNIE = Byte.MIN_VALUE;
}
}

protected final void initNGRP_DV(String s) {
if (!s.trim().isEmpty()) {
NGRP_DV = Byte.parseByte(s);
} else {
NGRP_DV = Byte.MIN_VALUE;
}
}

protected final void initNHIQUAL_DV(String s) {
if (!s.trim().isEmpty()) {
NHIQUAL_DV = Byte.parseByte(s);
} else {
NHIQUAL_DV = Byte.MIN_VALUE;
}
}

protected final void initNIACT(String s) {
if (!s.trim().isEmpty()) {
NIACT = Byte.parseByte(s);
} else {
NIACT = Byte.MIN_VALUE;
}
}

protected final void initNIREL(String s) {
if (!s.trim().isEmpty()) {
NIREL = Byte.parseByte(s);
} else {
NIREL = Byte.MIN_VALUE;
}
}

protected final void initNISERPS(String s) {
if (!s.trim().isEmpty()) {
NISERPS = Byte.parseByte(s);
} else {
NISERPS = Byte.MIN_VALUE;
}
}

protected final void initNMAR(String s) {
if (!s.trim().isEmpty()) {
NMAR = Byte.parseByte(s);
} else {
NMAR = Byte.MIN_VALUE;
}
}

protected final void initNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NMPSP_DV = Byte.parseByte(s);
} else {
NMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNATCH(String s) {
if (!s.trim().isEmpty()) {
NNATCH = Byte.parseByte(s);
} else {
NNATCH = Byte.MIN_VALUE;
}
}

protected final void initNNEWBORN(String s) {
if (!s.trim().isEmpty()) {
NNEWBORN = Byte.parseByte(s);
} else {
NNEWBORN = Byte.MIN_VALUE;
}
}

protected final void initNNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NNMPSP_DV = Byte.parseByte(s);
} else {
NNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSIB_DV = Byte.parseByte(s);
} else {
NNSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNNSSIB_DV(String s) {
if (!s.trim().isEmpty()) {
NNSSIB_DV = Byte.parseByte(s);
} else {
NNSSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initNOTEMPCHK(String s) {
if (!s.trim().isEmpty()) {
NOTEMPCHK = Byte.parseByte(s);
} else {
NOTEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initNPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
NPENSIONER_DV = Byte.parseByte(s);
} else {
NPENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initNPNS_DV(String s) {
if (!s.trim().isEmpty()) {
NPNS_DV = Byte.parseByte(s);
} else {
NPNS_DV = Byte.MIN_VALUE;
}
}

protected final void initNPN_DV(String s) {
if (!s.trim().isEmpty()) {
NPN_DV = Byte.parseByte(s);
} else {
NPN_DV = Byte.MIN_VALUE;
}
}

protected final void initNQFHIGDV(String s) {
if (!s.trim().isEmpty()) {
NQFHIGDV = Byte.parseByte(s);
} else {
NQFHIGDV = Byte.MIN_VALUE;
}
}

protected final void initNUNDER16ABS(String s) {
if (!s.trim().isEmpty()) {
NUNDER16ABS = Byte.parseByte(s);
} else {
NUNDER16ABS = Byte.MIN_VALUE;
}
}

protected final void initNUNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
NUNMPSP_DV = Byte.parseByte(s);
} else {
NUNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initNXTENDOTCODE(String s) {
if (!s.trim().isEmpty()) {
NXTENDOTCODE = Byte.parseByte(s);
} else {
NXTENDOTCODE = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS1(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS1 = Byte.parseByte(s);
} else {
NXTENDREAS1 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS10(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS10 = Byte.parseByte(s);
} else {
NXTENDREAS10 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS11(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS11 = Byte.parseByte(s);
} else {
NXTENDREAS11 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS2(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS2 = Byte.parseByte(s);
} else {
NXTENDREAS2 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS3(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS3 = Byte.parseByte(s);
} else {
NXTENDREAS3 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS4(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS4 = Byte.parseByte(s);
} else {
NXTENDREAS4 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS5(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS5 = Byte.parseByte(s);
} else {
NXTENDREAS5 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS6(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS6 = Byte.parseByte(s);
} else {
NXTENDREAS6 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS7(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS7 = Byte.parseByte(s);
} else {
NXTENDREAS7 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS8(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS8 = Byte.parseByte(s);
} else {
NXTENDREAS8 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS9(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS9 = Byte.parseByte(s);
} else {
NXTENDREAS9 = Byte.MIN_VALUE;
}
}

protected final void initNXTENDREAS97(String s) {
if (!s.trim().isEmpty()) {
NXTENDREAS97 = Byte.parseByte(s);
} else {
NXTENDREAS97 = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDD(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDD = Byte.parseByte(s);
} else {
NXTJBENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDM(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDM = Byte.parseByte(s);
} else {
NXTJBENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTJBENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTJBENDY4 = Short.parseShort(s);
} else {
NXTJBENDY4 = Short.MIN_VALUE;
}
}

protected final void initNXTJBES(String s) {
if (!s.trim().isEmpty()) {
NXTJBES = Byte.parseByte(s);
} else {
NXTJBES = Byte.MIN_VALUE;
}
}

protected final void initNXTJBHRS(String s) {
if (!s.trim().isEmpty()) {
NXTJBHRS = Byte.parseByte(s);
} else {
NXTJBHRS = Byte.MIN_VALUE;
}
}

protected final void initNXTST(String s) {
if (!s.trim().isEmpty()) {
NXTST = Byte.parseByte(s);
} else {
NXTST = Byte.MIN_VALUE;
}
}

protected final void initNXTSTELSE(String s) {
if (!s.trim().isEmpty()) {
NXTSTELSE = Byte.parseByte(s);
} else {
NXTSTELSE = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDD(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDD = Byte.parseByte(s);
} else {
NXTSTENDD = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDM(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDM = Byte.parseByte(s);
} else {
NXTSTENDM = Byte.MIN_VALUE;
}
}

protected final void initNXTSTENDY4(String s) {
if (!s.trim().isEmpty()) {
NXTSTENDY4 = Short.parseShort(s);
} else {
NXTSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initODDSAPPLY(String s) {
if (!s.trim().isEmpty()) {
ODDSAPPLY = Byte.parseByte(s);
} else {
ODDSAPPLY = Byte.MIN_VALUE;
}
}

protected final void initODDSEMP1(String s) {
if (!s.trim().isEmpty()) {
ODDSEMP1 = Byte.parseByte(s);
} else {
ODDSEMP1 = Byte.MIN_VALUE;
}
}

protected final void initODDSEMP3(String s) {
if (!s.trim().isEmpty()) {
ODDSEMP3 = Byte.parseByte(s);
} else {
ODDSEMP3 = Byte.MIN_VALUE;
}
}

protected final void initODDSQUAL(String s) {
if (!s.trim().isEmpty()) {
ODDSQUAL = Byte.parseByte(s);
} else {
ODDSQUAL = Byte.MIN_VALUE;
}
}

protected final void initODDSSCHOL(String s) {
if (!s.trim().isEmpty()) {
ODDSSCHOL = Byte.parseByte(s);
} else {
ODDSSCHOL = Byte.MIN_VALUE;
}
}

protected final void initOPRLG(String s) {
if (!s.trim().isEmpty()) {
OPRLG = Byte.parseByte(s);
} else {
OPRLG = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0(String s) {
if (!s.trim().isEmpty()) {
OPRLG0 = Byte.parseByte(s);
} else {
OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
OPRLG0NI = Byte.parseByte(s);
} else {
OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initOPRLG1(String s) {
if (!s.trim().isEmpty()) {
OPRLG1 = Byte.parseByte(s);
} else {
OPRLG1 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG2(String s) {
if (!s.trim().isEmpty()) {
OPRLG2 = Byte.parseByte(s);
} else {
OPRLG2 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG3(String s) {
if (!s.trim().isEmpty()) {
OPRLG3 = Byte.parseByte(s);
} else {
OPRLG3 = Byte.MIN_VALUE;
}
}

protected final void initORIGADD(String s) {
if (!s.trim().isEmpty()) {
ORIGADD = Byte.parseByte(s);
} else {
ORIGADD = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN1(String s) {
if (!s.trim().isEmpty()) {
OTHBEN1 = Byte.parseByte(s);
} else {
OTHBEN1 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN2(String s) {
if (!s.trim().isEmpty()) {
OTHBEN2 = Byte.parseByte(s);
} else {
OTHBEN2 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN3(String s) {
if (!s.trim().isEmpty()) {
OTHBEN3 = Byte.parseByte(s);
} else {
OTHBEN3 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN4(String s) {
if (!s.trim().isEmpty()) {
OTHBEN4 = Byte.parseByte(s);
} else {
OTHBEN4 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN5(String s) {
if (!s.trim().isEmpty()) {
OTHBEN5 = Byte.parseByte(s);
} else {
OTHBEN5 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN6(String s) {
if (!s.trim().isEmpty()) {
OTHBEN6 = Byte.parseByte(s);
} else {
OTHBEN6 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN7(String s) {
if (!s.trim().isEmpty()) {
OTHBEN7 = Byte.parseByte(s);
} else {
OTHBEN7 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN8(String s) {
if (!s.trim().isEmpty()) {
OTHBEN8 = Byte.parseByte(s);
} else {
OTHBEN8 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN9(String s) {
if (!s.trim().isEmpty()) {
OTHBEN9 = Byte.parseByte(s);
} else {
OTHBEN9 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN96(String s) {
if (!s.trim().isEmpty()) {
OTHBEN96 = Byte.parseByte(s);
} else {
OTHBEN96 = Byte.MIN_VALUE;
}
}

protected final void initOTHBEN97(String s) {
if (!s.trim().isEmpty()) {
OTHBEN97 = Byte.parseByte(s);
} else {
OTHBEN97 = Byte.MIN_VALUE;
}
}

protected final void initOTHCONT(String s) {
if (!s.trim().isEmpty()) {
OTHCONT = Byte.parseByte(s);
} else {
OTHCONT = Byte.MIN_VALUE;
}
}

protected final void initOVTNSET(String s) {
if (!s.trim().isEmpty()) {
OVTNSET = Byte.parseByte(s);
} else {
OVTNSET = Byte.MIN_VALUE;
}
}

protected final void initOVTPAY(String s) {
if (!s.trim().isEmpty()) {
OVTPAY = Byte.parseByte(s);
} else {
OVTPAY = Byte.MIN_VALUE;
}
}

protected final void initOVTRATE(String s) {
if (!s.trim().isEmpty()) {
OVTRATE = Double.parseDouble(s);
} else {
OVTRATE = Double.NaN;
}
}

protected final void initOVTREST(String s) {
if (!s.trim().isEmpty()) {
OVTREST = Byte.parseByte(s);
} else {
OVTREST = Byte.MIN_VALUE;
}
}

protected final void initPACOB(String s) {
if (!s.trim().isEmpty()) {
PACOB = Byte.parseByte(s);
} else {
PACOB = Byte.MIN_VALUE;
}
}

protected final void initPAJU(String s) {
if (!s.trim().isEmpty()) {
PAJU = Byte.parseByte(s);
} else {
PAJU = Byte.MIN_VALUE;
}
}

protected final void initPANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
PANSSEC5_DV = Byte.parseByte(s);
} else {
PANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initPASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC00_CC = Short.parseShort(s);
} else {
PASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC10_CC = Short.parseShort(s);
} else {
PASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initPASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
PASOC90_CC = Byte.parseByte(s);
} else {
PASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initPAYGWC(String s) {
if (!s.trim().isEmpty()) {
PAYGWC = Byte.parseByte(s);
} else {
PAYGWC = Byte.MIN_VALUE;
}
}

protected final void initPAYG_DV(String s) {
if (!s.trim().isEmpty()) {
PAYG_DV = Double.parseDouble(s);
} else {
PAYG_DV = Double.NaN;
}
}

protected final void initPAYNWC(String s) {
if (!s.trim().isEmpty()) {
PAYNWC = Byte.parseByte(s);
} else {
PAYNWC = Byte.MIN_VALUE;
}
}

protected final void initPAYRUK(String s) {
if (!s.trim().isEmpty()) {
PAYRUK = Byte.parseByte(s);
} else {
PAYRUK = Byte.MIN_VALUE;
}
}

protected final void initPAYTYP(String s) {
if (!s.trim().isEmpty()) {
PAYTYP = Byte.parseByte(s);
} else {
PAYTYP = Byte.MIN_VALUE;
}
}

protected final void initPAYUWC(String s) {
if (!s.trim().isEmpty()) {
PAYUWC = Byte.parseByte(s);
} else {
PAYUWC = Byte.MIN_VALUE;
}
}

protected final void initPAYU_DV(String s) {
if (!s.trim().isEmpty()) {
PAYU_DV = Double.parseDouble(s);
} else {
PAYU_DV = Double.NaN;
}
}

protected final void initPBIRTHY(String s) {
if (!s.trim().isEmpty()) {
PBIRTHY = Short.parseShort(s);
} else {
PBIRTHY = Short.MIN_VALUE;
}
}

protected final void initPBNFT1(String s) {
if (!s.trim().isEmpty()) {
PBNFT1 = Byte.parseByte(s);
} else {
PBNFT1 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT10(String s) {
if (!s.trim().isEmpty()) {
PBNFT10 = Byte.parseByte(s);
} else {
PBNFT10 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT11(String s) {
if (!s.trim().isEmpty()) {
PBNFT11 = Byte.parseByte(s);
} else {
PBNFT11 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT12(String s) {
if (!s.trim().isEmpty()) {
PBNFT12 = Byte.parseByte(s);
} else {
PBNFT12 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT13(String s) {
if (!s.trim().isEmpty()) {
PBNFT13 = Byte.parseByte(s);
} else {
PBNFT13 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT2(String s) {
if (!s.trim().isEmpty()) {
PBNFT2 = Byte.parseByte(s);
} else {
PBNFT2 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT3(String s) {
if (!s.trim().isEmpty()) {
PBNFT3 = Byte.parseByte(s);
} else {
PBNFT3 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT4(String s) {
if (!s.trim().isEmpty()) {
PBNFT4 = Byte.parseByte(s);
} else {
PBNFT4 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT5(String s) {
if (!s.trim().isEmpty()) {
PBNFT5 = Byte.parseByte(s);
} else {
PBNFT5 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT6(String s) {
if (!s.trim().isEmpty()) {
PBNFT6 = Byte.parseByte(s);
} else {
PBNFT6 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT7(String s) {
if (!s.trim().isEmpty()) {
PBNFT7 = Byte.parseByte(s);
} else {
PBNFT7 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT8(String s) {
if (!s.trim().isEmpty()) {
PBNFT8 = Byte.parseByte(s);
} else {
PBNFT8 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT9(String s) {
if (!s.trim().isEmpty()) {
PBNFT9 = Byte.parseByte(s);
} else {
PBNFT9 = Byte.MIN_VALUE;
}
}

protected final void initPBNFT96(String s) {
if (!s.trim().isEmpty()) {
PBNFT96 = Byte.parseByte(s);
} else {
PBNFT96 = Byte.MIN_VALUE;
}
}

protected final void initPDVAGE(String s) {
if (!s.trim().isEmpty()) {
PDVAGE = Byte.parseByte(s);
} else {
PDVAGE = Byte.MIN_VALUE;
}
}

protected final void initPEDCHPNO(String s) {
if (!s.trim().isEmpty()) {
PEDCHPNO = Byte.parseByte(s);
} else {
PEDCHPNO = Byte.MIN_VALUE;
}
}

protected final void initPENMCN(String s) {
if (!s.trim().isEmpty()) {
PENMCN = Byte.parseByte(s);
} else {
PENMCN = Byte.MIN_VALUE;
}
}

protected final void initPENMEX(String s) {
if (!s.trim().isEmpty()) {
PENMEX = Byte.parseByte(s);
} else {
PENMEX = Byte.MIN_VALUE;
}
}

protected final void initPENMPY(String s) {
if (!s.trim().isEmpty()) {
PENMPY = Double.parseDouble(s);
} else {
PENMPY = Double.NaN;
}
}

protected final void initPENMTP(String s) {
if (!s.trim().isEmpty()) {
PENMTP = Byte.parseByte(s);
} else {
PENMTP = Byte.MIN_VALUE;
}
}

protected final void initPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
PENSIONER_DV = Byte.parseByte(s);
} else {
PENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initPENSPB(String s) {
if (!s.trim().isEmpty()) {
PENSPB = Byte.parseByte(s);
} else {
PENSPB = Byte.MIN_VALUE;
}
}

protected final void initPHEAPPLIED(String s) {
if (!s.trim().isEmpty()) {
PHEAPPLIED = Byte.parseByte(s);
} else {
PHEAPPLIED = Byte.MIN_VALUE;
}
}

protected final void initPID(String s) {
if (!s.trim().isEmpty()) {
PID = Integer.parseInt(s);
} else {
PID = Integer.MIN_VALUE;
}
}

protected final void initPJBPTFT(String s) {
if (!s.trim().isEmpty()) {
PJBPTFT = Byte.parseByte(s);
} else {
PJBPTFT = Byte.MIN_VALUE;
}
}

protected final void initPJSPTFT(String s) {
if (!s.trim().isEmpty()) {
PJSPTFT = Byte.parseByte(s);
} else {
PJSPTFT = Byte.MIN_VALUE;
}
}

protected final void initPLIENG(String s) {
if (!s.trim().isEmpty()) {
PLIENG = Byte.parseByte(s);
} else {
PLIENG = Byte.MIN_VALUE;
}
}

protected final void initPLITRANS(String s) {
if (!s.trim().isEmpty()) {
PLITRANS = Byte.parseByte(s);
} else {
PLITRANS = Byte.MIN_VALUE;
}
}

protected final void initPLNOWM(String s) {
if (!s.trim().isEmpty()) {
PLNOWM = Short.parseShort(s);
} else {
PLNOWM = Short.MIN_VALUE;
}
}

protected final void initPLNOWY4(String s) {
if (!s.trim().isEmpty()) {
PLNOWY4 = Short.parseShort(s);
} else {
PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initPN1PID(String s) {
if (!s.trim().isEmpty()) {
PN1PID = Integer.parseInt(s);
} else {
PN1PID = Integer.MIN_VALUE;
}
}

protected final void initPN1PNO(String s) {
if (!s.trim().isEmpty()) {
PN1PNO = Byte.parseByte(s);
} else {
PN1PNO = Byte.MIN_VALUE;
}
}

protected final void initPN1SEX(String s) {
if (!s.trim().isEmpty()) {
PN1SEX = Byte.parseByte(s);
} else {
PN1SEX = Byte.MIN_VALUE;
}
}

protected final void initPN2PID(String s) {
if (!s.trim().isEmpty()) {
PN2PID = Integer.parseInt(s);
} else {
PN2PID = Integer.MIN_VALUE;
}
}

protected final void initPN2PNO(String s) {
if (!s.trim().isEmpty()) {
PN2PNO = Byte.parseByte(s);
} else {
PN2PNO = Byte.MIN_VALUE;
}
}

protected final void initPN2SEX(String s) {
if (!s.trim().isEmpty()) {
PN2SEX = Byte.parseByte(s);
} else {
PN2SEX = Byte.MIN_VALUE;
}
}

protected final void initPNCARS(String s) {
if (!s.trim().isEmpty()) {
PNCARS = Byte.parseByte(s);
} else {
PNCARS = Byte.MIN_VALUE;
}
}

protected final void initPNS1PID(String s) {
if (!s.trim().isEmpty()) {
PNS1PID = Integer.parseInt(s);
} else {
PNS1PID = Integer.MIN_VALUE;
}
}

protected final void initPNS1PNO(String s) {
if (!s.trim().isEmpty()) {
PNS1PNO = Byte.parseByte(s);
} else {
PNS1PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS1SEX(String s) {
if (!s.trim().isEmpty()) {
PNS1SEX = Byte.parseByte(s);
} else {
PNS1SEX = Byte.MIN_VALUE;
}
}

protected final void initPNS2PID(String s) {
if (!s.trim().isEmpty()) {
PNS2PID = Integer.parseInt(s);
} else {
PNS2PID = Integer.MIN_VALUE;
}
}

protected final void initPNS2PNO(String s) {
if (!s.trim().isEmpty()) {
PNS2PNO = Byte.parseByte(s);
} else {
PNS2PNO = Byte.MIN_VALUE;
}
}

protected final void initPNS2SEX(String s) {
if (!s.trim().isEmpty()) {
PNS2SEX = Byte.parseByte(s);
} else {
PNS2SEX = Byte.MIN_VALUE;
}
}

protected final void initPODDSAPPLY(String s) {
if (!s.trim().isEmpty()) {
PODDSAPPLY = Byte.parseByte(s);
} else {
PODDSAPPLY = Byte.MIN_VALUE;
}
}

protected final void initPODDSEMP1(String s) {
if (!s.trim().isEmpty()) {
PODDSEMP1 = Byte.parseByte(s);
} else {
PODDSEMP1 = Byte.MIN_VALUE;
}
}

protected final void initPODDSEMP3(String s) {
if (!s.trim().isEmpty()) {
PODDSEMP3 = Byte.parseByte(s);
} else {
PODDSEMP3 = Byte.MIN_VALUE;
}
}

protected final void initPODDSQUAL(String s) {
if (!s.trim().isEmpty()) {
PODDSQUAL = Byte.parseByte(s);
} else {
PODDSQUAL = Byte.MIN_VALUE;
}
}

protected final void initPODDSSCHOL(String s) {
if (!s.trim().isEmpty()) {
PODDSSCHOL = Byte.parseByte(s);
} else {
PODDSSCHOL = Byte.MIN_VALUE;
}
}

protected final void initPPEN(String s) {
if (!s.trim().isEmpty()) {
PPEN = Byte.parseByte(s);
} else {
PPEN = Byte.MIN_VALUE;
}
}

protected final void initPPENT(String s) {
if (!s.trim().isEmpty()) {
PPENT = Byte.parseByte(s);
} else {
PPENT = Byte.MIN_VALUE;
}
}

protected final void initPPID(String s) {
if (!s.trim().isEmpty()) {
PPID = Integer.parseInt(s);
} else {
PPID = Integer.MIN_VALUE;
}
}

protected final void initPPPEX(String s) {
if (!s.trim().isEmpty()) {
PPPEX = Byte.parseByte(s);
} else {
PPPEX = Byte.MIN_VALUE;
}
}

protected final void initPPPEXM(String s) {
if (!s.trim().isEmpty()) {
PPPEXM = Byte.parseByte(s);
} else {
PPPEXM = Byte.MIN_VALUE;
}
}

protected final void initPPRAM(String s) {
if (!s.trim().isEmpty()) {
PPRAM = Integer.parseInt(s);
} else {
PPRAM = Integer.MIN_VALUE;
}
}

protected final void initPPRAMPC(String s) {
if (!s.trim().isEmpty()) {
PPRAMPC = Byte.parseByte(s);
} else {
PPRAMPC = Byte.MIN_VALUE;
}
}

protected final void initPPREG(String s) {
if (!s.trim().isEmpty()) {
PPREG = Byte.parseByte(s);
} else {
PPREG = Byte.MIN_VALUE;
}
}

protected final void initPPSEX(String s) {
if (!s.trim().isEmpty()) {
PPSEX = Byte.parseByte(s);
} else {
PPSEX = Byte.MIN_VALUE;
}
}

protected final void initPPYRS(String s) {
if (!s.trim().isEmpty()) {
PPYRS = Short.parseShort(s);
} else {
PPYRS = Short.MIN_VALUE;
}
}

protected final void initPRAYFREQ(String s) {
if (!s.trim().isEmpty()) {
PRAYFREQ = Byte.parseByte(s);
} else {
PRAYFREQ = Byte.MIN_VALUE;
}
}

protected final void initPREARN(String s) {
if (!s.trim().isEmpty()) {
PREARN = Byte.parseByte(s);
} else {
PREARN = Byte.MIN_VALUE;
}
}

protected final void initPREARNA(String s) {
if (!s.trim().isEmpty()) {
PREARNA = Byte.parseByte(s);
} else {
PREARNA = Byte.MIN_VALUE;
}
}

protected final void initPREARNW(String s) {
if (!s.trim().isEmpty()) {
PREARNW = Byte.parseByte(s);
} else {
PREARNW = Byte.MIN_VALUE;
}
}

protected final void initPREASON(String s) {
if (!s.trim().isEmpty()) {
PREASON = Byte.parseByte(s);
} else {
PREASON = Byte.MIN_VALUE;
}
}

protected final void initPREG(String s) {
if (!s.trim().isEmpty()) {
PREG = Byte.parseByte(s);
} else {
PREG = Byte.MIN_VALUE;
}
}

protected final void initPREGEND1(String s) {
if (!s.trim().isEmpty()) {
PREGEND1 = Byte.parseByte(s);
} else {
PREGEND1 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND2(String s) {
if (!s.trim().isEmpty()) {
PREGEND2 = Byte.parseByte(s);
} else {
PREGEND2 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND3(String s) {
if (!s.trim().isEmpty()) {
PREGEND3 = Byte.parseByte(s);
} else {
PREGEND3 = Byte.MIN_VALUE;
}
}

protected final void initPREGEND4(String s) {
if (!s.trim().isEmpty()) {
PREGEND4 = Byte.parseByte(s);
} else {
PREGEND4 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT1(String s) {
if (!s.trim().isEmpty()) {
PREGFERT1 = Byte.parseByte(s);
} else {
PREGFERT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT2(String s) {
if (!s.trim().isEmpty()) {
PREGFERT2 = Byte.parseByte(s);
} else {
PREGFERT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT3(String s) {
if (!s.trim().isEmpty()) {
PREGFERT3 = Byte.parseByte(s);
} else {
PREGFERT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGFERT4(String s) {
if (!s.trim().isEmpty()) {
PREGFERT4 = Byte.parseByte(s);
} else {
PREGFERT4 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT11(String s) {
if (!s.trim().isEmpty()) {
PREGFT11 = Byte.parseByte(s);
} else {
PREGFT11 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT12(String s) {
if (!s.trim().isEmpty()) {
PREGFT12 = Byte.parseByte(s);
} else {
PREGFT12 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT13 = false;
} else {
PREGFT13 = true;
}
}
}

protected final void initPREGFT14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT14 = false;
} else {
PREGFT14 = true;
}
}
}

protected final void initPREGFT21(String s) {
if (!s.trim().isEmpty()) {
PREGFT21 = Byte.parseByte(s);
} else {
PREGFT21 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT22(String s) {
if (!s.trim().isEmpty()) {
PREGFT22 = Byte.parseByte(s);
} else {
PREGFT22 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT23(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT23 = false;
} else {
PREGFT23 = true;
}
}
}

protected final void initPREGFT24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT24 = false;
} else {
PREGFT24 = true;
}
}
}

protected final void initPREGFT31(String s) {
if (!s.trim().isEmpty()) {
PREGFT31 = Byte.parseByte(s);
} else {
PREGFT31 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT32(String s) {
if (!s.trim().isEmpty()) {
PREGFT32 = Byte.parseByte(s);
} else {
PREGFT32 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT33 = false;
} else {
PREGFT33 = true;
}
}
}

protected final void initPREGFT34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT34 = false;
} else {
PREGFT34 = true;
}
}
}

protected final void initPREGFT41(String s) {
if (!s.trim().isEmpty()) {
PREGFT41 = Byte.parseByte(s);
} else {
PREGFT41 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT42(String s) {
if (!s.trim().isEmpty()) {
PREGFT42 = Byte.parseByte(s);
} else {
PREGFT42 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT43(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT43 = false;
} else {
PREGFT43 = true;
}
}
}

protected final void initPREGFT44(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT44 = false;
} else {
PREGFT44 = true;
}
}
}

protected final void initPREGFT51(String s) {
if (!s.trim().isEmpty()) {
PREGFT51 = Byte.parseByte(s);
} else {
PREGFT51 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT52(String s) {
if (!s.trim().isEmpty()) {
PREGFT52 = Byte.parseByte(s);
} else {
PREGFT52 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT53(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT53 = false;
} else {
PREGFT53 = true;
}
}
}

protected final void initPREGFT54(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT54 = false;
} else {
PREGFT54 = true;
}
}
}

protected final void initPREGFT61(String s) {
if (!s.trim().isEmpty()) {
PREGFT61 = Byte.parseByte(s);
} else {
PREGFT61 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT62(String s) {
if (!s.trim().isEmpty()) {
PREGFT62 = Byte.parseByte(s);
} else {
PREGFT62 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT63 = false;
} else {
PREGFT63 = true;
}
}
}

protected final void initPREGFT64(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT64 = false;
} else {
PREGFT64 = true;
}
}
}

protected final void initPREGFT961(String s) {
if (!s.trim().isEmpty()) {
PREGFT961 = Byte.parseByte(s);
} else {
PREGFT961 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT962(String s) {
if (!s.trim().isEmpty()) {
PREGFT962 = Byte.parseByte(s);
} else {
PREGFT962 = Byte.MIN_VALUE;
}
}

protected final void initPREGFT963(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT963 = false;
} else {
PREGFT963 = true;
}
}
}

protected final void initPREGFT964(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGFT964 = false;
} else {
PREGFT964 = true;
}
}
}

protected final void initPREGM1(String s) {
if (!s.trim().isEmpty()) {
PREGM1 = Byte.parseByte(s);
} else {
PREGM1 = Byte.MIN_VALUE;
}
}

protected final void initPREGM2(String s) {
if (!s.trim().isEmpty()) {
PREGM2 = Byte.parseByte(s);
} else {
PREGM2 = Byte.MIN_VALUE;
}
}

protected final void initPREGM3(String s) {
if (!s.trim().isEmpty()) {
PREGM3 = Byte.parseByte(s);
} else {
PREGM3 = Byte.MIN_VALUE;
}
}

protected final void initPREGM4(String s) {
if (!s.trim().isEmpty()) {
PREGM4 = Byte.parseByte(s);
} else {
PREGM4 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT1(String s) {
if (!s.trim().isEmpty()) {
PREGOUT1 = Byte.parseByte(s);
} else {
PREGOUT1 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT2(String s) {
if (!s.trim().isEmpty()) {
PREGOUT2 = Byte.parseByte(s);
} else {
PREGOUT2 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT3(String s) {
if (!s.trim().isEmpty()) {
PREGOUT3 = Byte.parseByte(s);
} else {
PREGOUT3 = Byte.MIN_VALUE;
}
}

protected final void initPREGOUT4(String s) {
if (!s.trim().isEmpty()) {
PREGOUT4 = Byte.parseByte(s);
} else {
PREGOUT4 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK11(String s) {
if (!s.trim().isEmpty()) {
PREGSMK11 = Byte.parseByte(s);
} else {
PREGSMK11 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK12(String s) {
if (!s.trim().isEmpty()) {
PREGSMK12 = Byte.parseByte(s);
} else {
PREGSMK12 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK13(String s) {
if (!s.trim().isEmpty()) {
PREGSMK13 = Byte.parseByte(s);
} else {
PREGSMK13 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK14(String s) {
if (!s.trim().isEmpty()) {
PREGSMK14 = Byte.parseByte(s);
} else {
PREGSMK14 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK21(String s) {
if (!s.trim().isEmpty()) {
PREGSMK21 = Byte.parseByte(s);
} else {
PREGSMK21 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK22(String s) {
if (!s.trim().isEmpty()) {
PREGSMK22 = Byte.parseByte(s);
} else {
PREGSMK22 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK23(String s) {
if (!s.trim().isEmpty()) {
PREGSMK23 = Byte.parseByte(s);
} else {
PREGSMK23 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK24(String s) {
if (!s.trim().isEmpty()) {
PREGSMK24 = Byte.parseByte(s);
} else {
PREGSMK24 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK31(String s) {
if (!s.trim().isEmpty()) {
PREGSMK31 = Byte.parseByte(s);
} else {
PREGSMK31 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK32(String s) {
if (!s.trim().isEmpty()) {
PREGSMK32 = Byte.parseByte(s);
} else {
PREGSMK32 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK33(String s) {
if (!s.trim().isEmpty()) {
PREGSMK33 = Byte.parseByte(s);
} else {
PREGSMK33 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMK34(String s) {
if (!s.trim().isEmpty()) {
PREGSMK34 = Byte.parseByte(s);
} else {
PREGSMK34 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE1(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE1 = Byte.parseByte(s);
} else {
PREGSMOKE1 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE2(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE2 = Byte.parseByte(s);
} else {
PREGSMOKE2 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE3(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE3 = Byte.parseByte(s);
} else {
PREGSMOKE3 = Byte.MIN_VALUE;
}
}

protected final void initPREGSMOKE4(String s) {
if (!s.trim().isEmpty()) {
PREGSMOKE4 = Byte.parseByte(s);
} else {
PREGSMOKE4 = Byte.MIN_VALUE;
}
}

protected final void initPREGSPD1(String s) {
if (!s.trim().isEmpty()) {
PREGSPD1 = Byte.parseByte(s);
} else {
PREGSPD1 = Byte.MIN_VALUE;
}
}

protected final void initPREGSPD2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGSPD2 = false;
} else {
PREGSPD2 = true;
}
}
}

protected final void initPREGSPD3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGSPD3 = false;
} else {
PREGSPD3 = true;
}
}
}

protected final void initPREGSPD4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
PREGSPD4 = false;
} else {
PREGSPD4 = true;
}
}
}

protected final void initPREGY41(String s) {
if (!s.trim().isEmpty()) {
PREGY41 = Short.parseShort(s);
} else {
PREGY41 = Short.MIN_VALUE;
}
}

protected final void initPREGY42(String s) {
if (!s.trim().isEmpty()) {
PREGY42 = Short.parseShort(s);
} else {
PREGY42 = Short.MIN_VALUE;
}
}

protected final void initPREGY43(String s) {
if (!s.trim().isEmpty()) {
PREGY43 = Short.parseShort(s);
} else {
PREGY43 = Short.MIN_VALUE;
}
}

protected final void initPREGY44(String s) {
if (!s.trim().isEmpty()) {
PREGY44 = Short.parseShort(s);
} else {
PREGY44 = Short.MIN_VALUE;
}
}

protected final void initPREL(String s) {
if (!s.trim().isEmpty()) {
PREL = Byte.parseByte(s);
} else {
PREL = Byte.MIN_VALUE;
}
}

protected final void initPRFITB(String s) {
if (!s.trim().isEmpty()) {
PRFITB = Byte.parseByte(s);
} else {
PRFITB = Byte.MIN_VALUE;
}
}

protected final void initPRFITBA(String s) {
if (!s.trim().isEmpty()) {
PRFITBA = Byte.parseByte(s);
} else {
PRFITBA = Byte.MIN_VALUE;
}
}

protected final void initPRFITBW(String s) {
if (!s.trim().isEmpty()) {
PRFITBW = Byte.parseByte(s);
} else {
PRFITBW = Byte.MIN_VALUE;
}
}

protected final void initPRIDE10(String s) {
if (!s.trim().isEmpty()) {
PRIDE10 = Byte.parseByte(s);
} else {
PRIDE10 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE11(String s) {
if (!s.trim().isEmpty()) {
PRIDE11 = Byte.parseByte(s);
} else {
PRIDE11 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE12(String s) {
if (!s.trim().isEmpty()) {
PRIDE12 = Byte.parseByte(s);
} else {
PRIDE12 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE13(String s) {
if (!s.trim().isEmpty()) {
PRIDE13 = Byte.parseByte(s);
} else {
PRIDE13 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE14(String s) {
if (!s.trim().isEmpty()) {
PRIDE14 = Byte.parseByte(s);
} else {
PRIDE14 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE2(String s) {
if (!s.trim().isEmpty()) {
PRIDE2 = Byte.parseByte(s);
} else {
PRIDE2 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE4A(String s) {
if (!s.trim().isEmpty()) {
PRIDE4A = Byte.parseByte(s);
} else {
PRIDE4A = Byte.MIN_VALUE;
}
}

protected final void initPRIDE4B(String s) {
if (!s.trim().isEmpty()) {
PRIDE4B = Byte.parseByte(s);
} else {
PRIDE4B = Byte.MIN_VALUE;
}
}

protected final void initPRIDE5(String s) {
if (!s.trim().isEmpty()) {
PRIDE5 = Byte.parseByte(s);
} else {
PRIDE5 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE6(String s) {
if (!s.trim().isEmpty()) {
PRIDE6 = Byte.parseByte(s);
} else {
PRIDE6 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE7(String s) {
if (!s.trim().isEmpty()) {
PRIDE7 = Byte.parseByte(s);
} else {
PRIDE7 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE8(String s) {
if (!s.trim().isEmpty()) {
PRIDE8 = Byte.parseByte(s);
} else {
PRIDE8 = Byte.MIN_VALUE;
}
}

protected final void initPRIDE9(String s) {
if (!s.trim().isEmpty()) {
PRIDE9 = Byte.parseByte(s);
} else {
PRIDE9 = Byte.MIN_VALUE;
}
}

protected final void initPS1(String s) {
if (!s.trim().isEmpty()) {
PS1 = Byte.parseByte(s);
} else {
PS1 = Byte.MIN_VALUE;
}
}

protected final void initPS10(String s) {
if (!s.trim().isEmpty()) {
PS10 = Byte.parseByte(s);
} else {
PS10 = Byte.MIN_VALUE;
}
}

protected final void initPS11(String s) {
if (!s.trim().isEmpty()) {
PS11 = Byte.parseByte(s);
} else {
PS11 = Byte.MIN_VALUE;
}
}

protected final void initPS12(String s) {
if (!s.trim().isEmpty()) {
PS12 = Byte.parseByte(s);
} else {
PS12 = Byte.MIN_VALUE;
}
}

protected final void initPS13(String s) {
if (!s.trim().isEmpty()) {
PS13 = Byte.parseByte(s);
} else {
PS13 = Byte.MIN_VALUE;
}
}

protected final void initPS14(String s) {
if (!s.trim().isEmpty()) {
PS14 = Byte.parseByte(s);
} else {
PS14 = Byte.MIN_VALUE;
}
}

protected final void initPS15(String s) {
if (!s.trim().isEmpty()) {
PS15 = Byte.parseByte(s);
} else {
PS15 = Byte.MIN_VALUE;
}
}

protected final void initPS16(String s) {
if (!s.trim().isEmpty()) {
PS16 = Byte.parseByte(s);
} else {
PS16 = Byte.MIN_VALUE;
}
}

protected final void initPS17(String s) {
if (!s.trim().isEmpty()) {
PS17 = Byte.parseByte(s);
} else {
PS17 = Byte.MIN_VALUE;
}
}

protected final void initPS18(String s) {
if (!s.trim().isEmpty()) {
PS18 = Byte.parseByte(s);
} else {
PS18 = Byte.MIN_VALUE;
}
}

protected final void initPS19(String s) {
if (!s.trim().isEmpty()) {
PS19 = Byte.parseByte(s);
} else {
PS19 = Byte.MIN_VALUE;
}
}

protected final void initPS2(String s) {
if (!s.trim().isEmpty()) {
PS2 = Byte.parseByte(s);
} else {
PS2 = Byte.MIN_VALUE;
}
}

protected final void initPS20(String s) {
if (!s.trim().isEmpty()) {
PS20 = Byte.parseByte(s);
} else {
PS20 = Byte.MIN_VALUE;
}
}

protected final void initPS21(String s) {
if (!s.trim().isEmpty()) {
PS21 = Byte.parseByte(s);
} else {
PS21 = Byte.MIN_VALUE;
}
}

protected final void initPS22(String s) {
if (!s.trim().isEmpty()) {
PS22 = Byte.parseByte(s);
} else {
PS22 = Byte.MIN_VALUE;
}
}

protected final void initPS23(String s) {
if (!s.trim().isEmpty()) {
PS23 = Byte.parseByte(s);
} else {
PS23 = Byte.MIN_VALUE;
}
}

protected final void initPS24(String s) {
if (!s.trim().isEmpty()) {
PS24 = Byte.parseByte(s);
} else {
PS24 = Byte.MIN_VALUE;
}
}

protected final void initPS25(String s) {
if (!s.trim().isEmpty()) {
PS25 = Byte.parseByte(s);
} else {
PS25 = Byte.MIN_VALUE;
}
}

protected final void initPS26(String s) {
if (!s.trim().isEmpty()) {
PS26 = Byte.parseByte(s);
} else {
PS26 = Byte.MIN_VALUE;
}
}

protected final void initPS27(String s) {
if (!s.trim().isEmpty()) {
PS27 = Byte.parseByte(s);
} else {
PS27 = Byte.MIN_VALUE;
}
}

protected final void initPS28(String s) {
if (!s.trim().isEmpty()) {
PS28 = Byte.parseByte(s);
} else {
PS28 = Byte.MIN_VALUE;
}
}

protected final void initPS29(String s) {
if (!s.trim().isEmpty()) {
PS29 = Byte.parseByte(s);
} else {
PS29 = Byte.MIN_VALUE;
}
}

protected final void initPS3(String s) {
if (!s.trim().isEmpty()) {
PS3 = Byte.parseByte(s);
} else {
PS3 = Byte.MIN_VALUE;
}
}

protected final void initPS30(String s) {
if (!s.trim().isEmpty()) {
PS30 = Byte.parseByte(s);
} else {
PS30 = Byte.MIN_VALUE;
}
}

protected final void initPS31(String s) {
if (!s.trim().isEmpty()) {
PS31 = Byte.parseByte(s);
} else {
PS31 = Byte.MIN_VALUE;
}
}

protected final void initPS32(String s) {
if (!s.trim().isEmpty()) {
PS32 = Byte.parseByte(s);
} else {
PS32 = Byte.MIN_VALUE;
}
}

protected final void initPS4(String s) {
if (!s.trim().isEmpty()) {
PS4 = Byte.parseByte(s);
} else {
PS4 = Byte.MIN_VALUE;
}
}

protected final void initPS5(String s) {
if (!s.trim().isEmpty()) {
PS5 = Byte.parseByte(s);
} else {
PS5 = Byte.MIN_VALUE;
}
}

protected final void initPS6(String s) {
if (!s.trim().isEmpty()) {
PS6 = Byte.parseByte(s);
} else {
PS6 = Byte.MIN_VALUE;
}
}

protected final void initPS7(String s) {
if (!s.trim().isEmpty()) {
PS7 = Byte.parseByte(s);
} else {
PS7 = Byte.MIN_VALUE;
}
}

protected final void initPS8(String s) {
if (!s.trim().isEmpty()) {
PS8 = Byte.parseByte(s);
} else {
PS8 = Byte.MIN_VALUE;
}
}

protected final void initPS9(String s) {
if (!s.trim().isEmpty()) {
PS9 = Byte.parseByte(s);
} else {
PS9 = Byte.MIN_VALUE;
}
}

protected final void initPSDQA_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQA_DV = Byte.parseByte(s);
} else {
PSDQA_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQB_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQB_DV = Byte.parseByte(s);
} else {
PSDQB_DV = Byte.MIN_VALUE;
}
}

protected final void initPSDQC_DV(String s) {
if (!s.trim().isEmpty()) {
PSDQC_DV = Byte.parseByte(s);
} else {
PSDQC_DV = Byte.MIN_VALUE;
}
}

protected final void initPSNUMCH(String s) {
if (!s.trim().isEmpty()) {
PSNUMCH = Byte.parseByte(s);
} else {
PSNUMCH = Byte.MIN_VALUE;
}
}

protected final void initPSU(String s) {
if (!s.trim().isEmpty()) {
PSU = Integer.parseInt(s);
} else {
PSU = Integer.MIN_VALUE;
}
}

protected final void initPUNIFIN1(String s) {
if (!s.trim().isEmpty()) {
PUNIFIN1 = Byte.parseByte(s);
} else {
PUNIFIN1 = Byte.MIN_VALUE;
}
}

protected final void initPUNISUB1(String s) {
if (!s.trim().isEmpty()) {
PUNISUB1 = Byte.parseByte(s);
} else {
PUNISUB1 = Byte.MIN_VALUE;
}
}

protected final void initPVTPYSET(String s) {
if (!s.trim().isEmpty()) {
PVTPYSET = Byte.parseByte(s);
} else {
PVTPYSET = Byte.MIN_VALUE;
}
}

protected final void initPXPBORROW(String s) {
if (!s.trim().isEmpty()) {
PXPBORROW = Integer.parseInt(s);
} else {
PXPBORROW = Integer.MIN_VALUE;
}
}

protected final void initPXPEARN1(String s) {
if (!s.trim().isEmpty()) {
PXPEARN1 = Integer.parseInt(s);
} else {
PXPEARN1 = Integer.MIN_VALUE;
}
}

protected final void initPXPEARN1DK(String s) {
if (!s.trim().isEmpty()) {
PXPEARN1DK = Byte.parseByte(s);
} else {
PXPEARN1DK = Byte.MIN_VALUE;
}
}

protected final void initPXPEARN3(String s) {
if (!s.trim().isEmpty()) {
PXPEARN3 = Integer.parseInt(s);
} else {
PXPEARN3 = Integer.MIN_VALUE;
}
}

protected final void initPXPEARN3DK(String s) {
if (!s.trim().isEmpty()) {
PXPEARN3DK = Byte.parseByte(s);
} else {
PXPEARN3DK = Byte.MIN_VALUE;
}
}

protected final void initPXPEARNG1(String s) {
if (!s.trim().isEmpty()) {
PXPEARNG1 = Integer.parseInt(s);
} else {
PXPEARNG1 = Integer.MIN_VALUE;
}
}

protected final void initPXPEARNG1DK(String s) {
if (!s.trim().isEmpty()) {
PXPEARNG1DK = Byte.parseByte(s);
} else {
PXPEARNG1DK = Byte.MIN_VALUE;
}
}

protected final void initPXPEARNG3(String s) {
if (!s.trim().isEmpty()) {
PXPEARNG3 = Integer.parseInt(s);
} else {
PXPEARNG3 = Integer.MIN_VALUE;
}
}

protected final void initPXPEARNG3DK(String s) {
if (!s.trim().isEmpty()) {
PXPEARNG3DK = Byte.parseByte(s);
} else {
PXPEARNG3DK = Byte.MIN_VALUE;
}
}

protected final void initPXPTUITION(String s) {
if (!s.trim().isEmpty()) {
PXPTUITION = Integer.parseInt(s);
} else {
PXPTUITION = Integer.MIN_VALUE;
}
}

protected final void initQFHIGDV(String s) {
if (!s.trim().isEmpty()) {
QFHIGDV = Byte.parseByte(s);
} else {
QFHIGDV = Byte.MIN_VALUE;
}
}

protected final void initQFHIGH(String s) {
if (!s.trim().isEmpty()) {
QFHIGH = Byte.parseByte(s);
} else {
QFHIGH = Byte.MIN_VALUE;
}
}

protected final void initQFHIGHFL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
QFHIGHFL_DV = false;
} else {
QFHIGHFL_DV = true;
}
}
}

protected final void initQFVOC1(String s) {
if (!s.trim().isEmpty()) {
QFVOC1 = Byte.parseByte(s);
} else {
QFVOC1 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC10(String s) {
if (!s.trim().isEmpty()) {
QFVOC10 = Byte.parseByte(s);
} else {
QFVOC10 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC11(String s) {
if (!s.trim().isEmpty()) {
QFVOC11 = Byte.parseByte(s);
} else {
QFVOC11 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC12(String s) {
if (!s.trim().isEmpty()) {
QFVOC12 = Byte.parseByte(s);
} else {
QFVOC12 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC13(String s) {
if (!s.trim().isEmpty()) {
QFVOC13 = Byte.parseByte(s);
} else {
QFVOC13 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC14(String s) {
if (!s.trim().isEmpty()) {
QFVOC14 = Byte.parseByte(s);
} else {
QFVOC14 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC15(String s) {
if (!s.trim().isEmpty()) {
QFVOC15 = Byte.parseByte(s);
} else {
QFVOC15 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC2(String s) {
if (!s.trim().isEmpty()) {
QFVOC2 = Byte.parseByte(s);
} else {
QFVOC2 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC3(String s) {
if (!s.trim().isEmpty()) {
QFVOC3 = Byte.parseByte(s);
} else {
QFVOC3 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC4(String s) {
if (!s.trim().isEmpty()) {
QFVOC4 = Byte.parseByte(s);
} else {
QFVOC4 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC5(String s) {
if (!s.trim().isEmpty()) {
QFVOC5 = Byte.parseByte(s);
} else {
QFVOC5 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC6(String s) {
if (!s.trim().isEmpty()) {
QFVOC6 = Byte.parseByte(s);
} else {
QFVOC6 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC7(String s) {
if (!s.trim().isEmpty()) {
QFVOC7 = Byte.parseByte(s);
} else {
QFVOC7 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC8(String s) {
if (!s.trim().isEmpty()) {
QFVOC8 = Byte.parseByte(s);
} else {
QFVOC8 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC9(String s) {
if (!s.trim().isEmpty()) {
QFVOC9 = Byte.parseByte(s);
} else {
QFVOC9 = Byte.MIN_VALUE;
}
}

protected final void initQFVOC96(String s) {
if (!s.trim().isEmpty()) {
QFVOC96 = Byte.parseByte(s);
} else {
QFVOC96 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW1(String s) {
if (!s.trim().isEmpty()) {
QUALNEW1 = Byte.parseByte(s);
} else {
QUALNEW1 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW10(String s) {
if (!s.trim().isEmpty()) {
QUALNEW10 = Byte.parseByte(s);
} else {
QUALNEW10 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW11(String s) {
if (!s.trim().isEmpty()) {
QUALNEW11 = Byte.parseByte(s);
} else {
QUALNEW11 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW13(String s) {
if (!s.trim().isEmpty()) {
QUALNEW13 = Byte.parseByte(s);
} else {
QUALNEW13 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW15(String s) {
if (!s.trim().isEmpty()) {
QUALNEW15 = Byte.parseByte(s);
} else {
QUALNEW15 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW16(String s) {
if (!s.trim().isEmpty()) {
QUALNEW16 = Byte.parseByte(s);
} else {
QUALNEW16 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW17(String s) {
if (!s.trim().isEmpty()) {
QUALNEW17 = Byte.parseByte(s);
} else {
QUALNEW17 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW18(String s) {
if (!s.trim().isEmpty()) {
QUALNEW18 = Byte.parseByte(s);
} else {
QUALNEW18 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW19(String s) {
if (!s.trim().isEmpty()) {
QUALNEW19 = Byte.parseByte(s);
} else {
QUALNEW19 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW2(String s) {
if (!s.trim().isEmpty()) {
QUALNEW2 = Byte.parseByte(s);
} else {
QUALNEW2 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW20(String s) {
if (!s.trim().isEmpty()) {
QUALNEW20 = Byte.parseByte(s);
} else {
QUALNEW20 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW21(String s) {
if (!s.trim().isEmpty()) {
QUALNEW21 = Byte.parseByte(s);
} else {
QUALNEW21 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW22(String s) {
if (!s.trim().isEmpty()) {
QUALNEW22 = Byte.parseByte(s);
} else {
QUALNEW22 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW23(String s) {
if (!s.trim().isEmpty()) {
QUALNEW23 = Byte.parseByte(s);
} else {
QUALNEW23 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW24(String s) {
if (!s.trim().isEmpty()) {
QUALNEW24 = Byte.parseByte(s);
} else {
QUALNEW24 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW25(String s) {
if (!s.trim().isEmpty()) {
QUALNEW25 = Byte.parseByte(s);
} else {
QUALNEW25 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW26(String s) {
if (!s.trim().isEmpty()) {
QUALNEW26 = Byte.parseByte(s);
} else {
QUALNEW26 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW27(String s) {
if (!s.trim().isEmpty()) {
QUALNEW27 = Byte.parseByte(s);
} else {
QUALNEW27 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW28(String s) {
if (!s.trim().isEmpty()) {
QUALNEW28 = Byte.parseByte(s);
} else {
QUALNEW28 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW29(String s) {
if (!s.trim().isEmpty()) {
QUALNEW29 = Byte.parseByte(s);
} else {
QUALNEW29 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW3(String s) {
if (!s.trim().isEmpty()) {
QUALNEW3 = Byte.parseByte(s);
} else {
QUALNEW3 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW30(String s) {
if (!s.trim().isEmpty()) {
QUALNEW30 = Byte.parseByte(s);
} else {
QUALNEW30 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW31(String s) {
if (!s.trim().isEmpty()) {
QUALNEW31 = Byte.parseByte(s);
} else {
QUALNEW31 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW32(String s) {
if (!s.trim().isEmpty()) {
QUALNEW32 = Byte.parseByte(s);
} else {
QUALNEW32 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW33(String s) {
if (!s.trim().isEmpty()) {
QUALNEW33 = Byte.parseByte(s);
} else {
QUALNEW33 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW4(String s) {
if (!s.trim().isEmpty()) {
QUALNEW4 = Byte.parseByte(s);
} else {
QUALNEW4 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW5(String s) {
if (!s.trim().isEmpty()) {
QUALNEW5 = Byte.parseByte(s);
} else {
QUALNEW5 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW6(String s) {
if (!s.trim().isEmpty()) {
QUALNEW6 = Byte.parseByte(s);
} else {
QUALNEW6 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW7(String s) {
if (!s.trim().isEmpty()) {
QUALNEW7 = Byte.parseByte(s);
} else {
QUALNEW7 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW8(String s) {
if (!s.trim().isEmpty()) {
QUALNEW8 = Byte.parseByte(s);
} else {
QUALNEW8 = Byte.MIN_VALUE;
}
}

protected final void initQUALNEW9(String s) {
if (!s.trim().isEmpty()) {
QUALNEW9 = Byte.parseByte(s);
} else {
QUALNEW9 = Byte.MIN_VALUE;
}
}

protected final void initQUALOC(String s) {
if (!s.trim().isEmpty()) {
QUALOC = Byte.parseByte(s);
} else {
QUALOC = Byte.MIN_VALUE;
}
}

protected final void initQUARTER(String s) {
if (!s.trim().isEmpty()) {
QUARTER = Byte.parseByte(s);
} else {
QUARTER = Byte.MIN_VALUE;
}
}

protected final void initRACEL(String s) {
if (!s.trim().isEmpty()) {
RACEL = Byte.parseByte(s);
} else {
RACEL = Byte.MIN_VALUE;
}
}

protected final void initRACELAT(String s) {
if (!s.trim().isEmpty()) {
RACELAT = Byte.parseByte(s);
} else {
RACELAT = Byte.MIN_VALUE;
}
}

protected final void initRACELBT(String s) {
if (!s.trim().isEmpty()) {
RACELBT = Byte.parseByte(s);
} else {
RACELBT = Byte.MIN_VALUE;
}
}

protected final void initRACELMT(String s) {
if (!s.trim().isEmpty()) {
RACELMT = Byte.parseByte(s);
} else {
RACELMT = Byte.MIN_VALUE;
}
}

protected final void initRACELOT_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELOT_CODE = Byte.parseByte(s);
} else {
RACELOT_CODE = Byte.MIN_VALUE;
}
}

protected final void initRACELO_CODE(String s) {
if (!s.trim().isEmpty()) {
RACELO_CODE = Short.parseShort(s);
} else {
RACELO_CODE = Short.MIN_VALUE;
}
}

protected final void initRACELT(String s) {
if (!s.trim().isEmpty()) {
RACELT = Byte.parseByte(s);
} else {
RACELT = Byte.MIN_VALUE;
}
}

protected final void initRACELWT(String s) {
if (!s.trim().isEmpty()) {
RACELWT = Byte.parseByte(s);
} else {
RACELWT = Byte.MIN_VALUE;
}
}

protected final void initRACEL_DV(String s) {
if (!s.trim().isEmpty()) {
RACEL_DV = Byte.parseByte(s);
} else {
RACEL_DV = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_1(String s) {
if (!s.trim().isEmpty()) {
REASEND10_1 = Byte.parseByte(s);
} else {
REASEND10_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_2(String s) {
if (!s.trim().isEmpty()) {
REASEND10_2 = Byte.parseByte(s);
} else {
REASEND10_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_3(String s) {
if (!s.trim().isEmpty()) {
REASEND10_3 = Byte.parseByte(s);
} else {
REASEND10_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_4(String s) {
if (!s.trim().isEmpty()) {
REASEND10_4 = Byte.parseByte(s);
} else {
REASEND10_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_5(String s) {
if (!s.trim().isEmpty()) {
REASEND10_5 = Byte.parseByte(s);
} else {
REASEND10_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_6(String s) {
if (!s.trim().isEmpty()) {
REASEND10_6 = Byte.parseByte(s);
} else {
REASEND10_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_7(String s) {
if (!s.trim().isEmpty()) {
REASEND10_7 = Byte.parseByte(s);
} else {
REASEND10_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_8(String s) {
if (!s.trim().isEmpty()) {
REASEND10_8 = Byte.parseByte(s);
} else {
REASEND10_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND10_9(String s) {
if (!s.trim().isEmpty()) {
REASEND10_9 = Byte.parseByte(s);
} else {
REASEND10_9 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_1(String s) {
if (!s.trim().isEmpty()) {
REASEND11_1 = Byte.parseByte(s);
} else {
REASEND11_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_2(String s) {
if (!s.trim().isEmpty()) {
REASEND11_2 = Byte.parseByte(s);
} else {
REASEND11_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_3(String s) {
if (!s.trim().isEmpty()) {
REASEND11_3 = Byte.parseByte(s);
} else {
REASEND11_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_4(String s) {
if (!s.trim().isEmpty()) {
REASEND11_4 = Byte.parseByte(s);
} else {
REASEND11_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_5(String s) {
if (!s.trim().isEmpty()) {
REASEND11_5 = Byte.parseByte(s);
} else {
REASEND11_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_6(String s) {
if (!s.trim().isEmpty()) {
REASEND11_6 = Byte.parseByte(s);
} else {
REASEND11_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_7(String s) {
if (!s.trim().isEmpty()) {
REASEND11_7 = Byte.parseByte(s);
} else {
REASEND11_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_8(String s) {
if (!s.trim().isEmpty()) {
REASEND11_8 = Byte.parseByte(s);
} else {
REASEND11_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND11_9(String s) {
if (!s.trim().isEmpty()) {
REASEND11_9 = Byte.parseByte(s);
} else {
REASEND11_9 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_1(String s) {
if (!s.trim().isEmpty()) {
REASEND1_1 = Byte.parseByte(s);
} else {
REASEND1_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_2(String s) {
if (!s.trim().isEmpty()) {
REASEND1_2 = Byte.parseByte(s);
} else {
REASEND1_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_3(String s) {
if (!s.trim().isEmpty()) {
REASEND1_3 = Byte.parseByte(s);
} else {
REASEND1_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_4(String s) {
if (!s.trim().isEmpty()) {
REASEND1_4 = Byte.parseByte(s);
} else {
REASEND1_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_5(String s) {
if (!s.trim().isEmpty()) {
REASEND1_5 = Byte.parseByte(s);
} else {
REASEND1_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_6(String s) {
if (!s.trim().isEmpty()) {
REASEND1_6 = Byte.parseByte(s);
} else {
REASEND1_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_7(String s) {
if (!s.trim().isEmpty()) {
REASEND1_7 = Byte.parseByte(s);
} else {
REASEND1_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_8(String s) {
if (!s.trim().isEmpty()) {
REASEND1_8 = Byte.parseByte(s);
} else {
REASEND1_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND1_9(String s) {
if (!s.trim().isEmpty()) {
REASEND1_9 = Byte.parseByte(s);
} else {
REASEND1_9 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_1(String s) {
if (!s.trim().isEmpty()) {
REASEND2_1 = Byte.parseByte(s);
} else {
REASEND2_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_2(String s) {
if (!s.trim().isEmpty()) {
REASEND2_2 = Byte.parseByte(s);
} else {
REASEND2_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_3(String s) {
if (!s.trim().isEmpty()) {
REASEND2_3 = Byte.parseByte(s);
} else {
REASEND2_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_4(String s) {
if (!s.trim().isEmpty()) {
REASEND2_4 = Byte.parseByte(s);
} else {
REASEND2_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_5(String s) {
if (!s.trim().isEmpty()) {
REASEND2_5 = Byte.parseByte(s);
} else {
REASEND2_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_6(String s) {
if (!s.trim().isEmpty()) {
REASEND2_6 = Byte.parseByte(s);
} else {
REASEND2_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_7(String s) {
if (!s.trim().isEmpty()) {
REASEND2_7 = Byte.parseByte(s);
} else {
REASEND2_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_8(String s) {
if (!s.trim().isEmpty()) {
REASEND2_8 = Byte.parseByte(s);
} else {
REASEND2_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND2_9(String s) {
if (!s.trim().isEmpty()) {
REASEND2_9 = Byte.parseByte(s);
} else {
REASEND2_9 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_1(String s) {
if (!s.trim().isEmpty()) {
REASEND3_1 = Byte.parseByte(s);
} else {
REASEND3_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_2(String s) {
if (!s.trim().isEmpty()) {
REASEND3_2 = Byte.parseByte(s);
} else {
REASEND3_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_3(String s) {
if (!s.trim().isEmpty()) {
REASEND3_3 = Byte.parseByte(s);
} else {
REASEND3_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_4(String s) {
if (!s.trim().isEmpty()) {
REASEND3_4 = Byte.parseByte(s);
} else {
REASEND3_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_5(String s) {
if (!s.trim().isEmpty()) {
REASEND3_5 = Byte.parseByte(s);
} else {
REASEND3_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_6(String s) {
if (!s.trim().isEmpty()) {
REASEND3_6 = Byte.parseByte(s);
} else {
REASEND3_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_7(String s) {
if (!s.trim().isEmpty()) {
REASEND3_7 = Byte.parseByte(s);
} else {
REASEND3_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_8(String s) {
if (!s.trim().isEmpty()) {
REASEND3_8 = Byte.parseByte(s);
} else {
REASEND3_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND3_9(String s) {
if (!s.trim().isEmpty()) {
REASEND3_9 = Byte.parseByte(s);
} else {
REASEND3_9 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_1(String s) {
if (!s.trim().isEmpty()) {
REASEND4_1 = Byte.parseByte(s);
} else {
REASEND4_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_2(String s) {
if (!s.trim().isEmpty()) {
REASEND4_2 = Byte.parseByte(s);
} else {
REASEND4_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_3(String s) {
if (!s.trim().isEmpty()) {
REASEND4_3 = Byte.parseByte(s);
} else {
REASEND4_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_4(String s) {
if (!s.trim().isEmpty()) {
REASEND4_4 = Byte.parseByte(s);
} else {
REASEND4_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_5(String s) {
if (!s.trim().isEmpty()) {
REASEND4_5 = Byte.parseByte(s);
} else {
REASEND4_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_6(String s) {
if (!s.trim().isEmpty()) {
REASEND4_6 = Byte.parseByte(s);
} else {
REASEND4_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_7(String s) {
if (!s.trim().isEmpty()) {
REASEND4_7 = Byte.parseByte(s);
} else {
REASEND4_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_8(String s) {
if (!s.trim().isEmpty()) {
REASEND4_8 = Byte.parseByte(s);
} else {
REASEND4_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND4_9(String s) {
if (!s.trim().isEmpty()) {
REASEND4_9 = Byte.parseByte(s);
} else {
REASEND4_9 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_1(String s) {
if (!s.trim().isEmpty()) {
REASEND5_1 = Byte.parseByte(s);
} else {
REASEND5_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_2(String s) {
if (!s.trim().isEmpty()) {
REASEND5_2 = Byte.parseByte(s);
} else {
REASEND5_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_3(String s) {
if (!s.trim().isEmpty()) {
REASEND5_3 = Byte.parseByte(s);
} else {
REASEND5_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_4(String s) {
if (!s.trim().isEmpty()) {
REASEND5_4 = Byte.parseByte(s);
} else {
REASEND5_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_5(String s) {
if (!s.trim().isEmpty()) {
REASEND5_5 = Byte.parseByte(s);
} else {
REASEND5_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_6(String s) {
if (!s.trim().isEmpty()) {
REASEND5_6 = Byte.parseByte(s);
} else {
REASEND5_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_7(String s) {
if (!s.trim().isEmpty()) {
REASEND5_7 = Byte.parseByte(s);
} else {
REASEND5_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_8(String s) {
if (!s.trim().isEmpty()) {
REASEND5_8 = Byte.parseByte(s);
} else {
REASEND5_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND5_9(String s) {
if (!s.trim().isEmpty()) {
REASEND5_9 = Byte.parseByte(s);
} else {
REASEND5_9 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_1(String s) {
if (!s.trim().isEmpty()) {
REASEND6_1 = Byte.parseByte(s);
} else {
REASEND6_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_2(String s) {
if (!s.trim().isEmpty()) {
REASEND6_2 = Byte.parseByte(s);
} else {
REASEND6_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_3(String s) {
if (!s.trim().isEmpty()) {
REASEND6_3 = Byte.parseByte(s);
} else {
REASEND6_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_4(String s) {
if (!s.trim().isEmpty()) {
REASEND6_4 = Byte.parseByte(s);
} else {
REASEND6_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_5(String s) {
if (!s.trim().isEmpty()) {
REASEND6_5 = Byte.parseByte(s);
} else {
REASEND6_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_6(String s) {
if (!s.trim().isEmpty()) {
REASEND6_6 = Byte.parseByte(s);
} else {
REASEND6_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_7(String s) {
if (!s.trim().isEmpty()) {
REASEND6_7 = Byte.parseByte(s);
} else {
REASEND6_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_8(String s) {
if (!s.trim().isEmpty()) {
REASEND6_8 = Byte.parseByte(s);
} else {
REASEND6_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND6_9(String s) {
if (!s.trim().isEmpty()) {
REASEND6_9 = Byte.parseByte(s);
} else {
REASEND6_9 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_1(String s) {
if (!s.trim().isEmpty()) {
REASEND7_1 = Byte.parseByte(s);
} else {
REASEND7_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_2(String s) {
if (!s.trim().isEmpty()) {
REASEND7_2 = Byte.parseByte(s);
} else {
REASEND7_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_3(String s) {
if (!s.trim().isEmpty()) {
REASEND7_3 = Byte.parseByte(s);
} else {
REASEND7_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_4(String s) {
if (!s.trim().isEmpty()) {
REASEND7_4 = Byte.parseByte(s);
} else {
REASEND7_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_5(String s) {
if (!s.trim().isEmpty()) {
REASEND7_5 = Byte.parseByte(s);
} else {
REASEND7_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_6(String s) {
if (!s.trim().isEmpty()) {
REASEND7_6 = Byte.parseByte(s);
} else {
REASEND7_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_7(String s) {
if (!s.trim().isEmpty()) {
REASEND7_7 = Byte.parseByte(s);
} else {
REASEND7_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_8(String s) {
if (!s.trim().isEmpty()) {
REASEND7_8 = Byte.parseByte(s);
} else {
REASEND7_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND7_9(String s) {
if (!s.trim().isEmpty()) {
REASEND7_9 = Byte.parseByte(s);
} else {
REASEND7_9 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_1(String s) {
if (!s.trim().isEmpty()) {
REASEND8_1 = Byte.parseByte(s);
} else {
REASEND8_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_2(String s) {
if (!s.trim().isEmpty()) {
REASEND8_2 = Byte.parseByte(s);
} else {
REASEND8_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_3(String s) {
if (!s.trim().isEmpty()) {
REASEND8_3 = Byte.parseByte(s);
} else {
REASEND8_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_4(String s) {
if (!s.trim().isEmpty()) {
REASEND8_4 = Byte.parseByte(s);
} else {
REASEND8_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_5(String s) {
if (!s.trim().isEmpty()) {
REASEND8_5 = Byte.parseByte(s);
} else {
REASEND8_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_6(String s) {
if (!s.trim().isEmpty()) {
REASEND8_6 = Byte.parseByte(s);
} else {
REASEND8_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_7(String s) {
if (!s.trim().isEmpty()) {
REASEND8_7 = Byte.parseByte(s);
} else {
REASEND8_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_8(String s) {
if (!s.trim().isEmpty()) {
REASEND8_8 = Byte.parseByte(s);
} else {
REASEND8_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND8_9(String s) {
if (!s.trim().isEmpty()) {
REASEND8_9 = Byte.parseByte(s);
} else {
REASEND8_9 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_1(String s) {
if (!s.trim().isEmpty()) {
REASEND97_1 = Byte.parseByte(s);
} else {
REASEND97_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_2(String s) {
if (!s.trim().isEmpty()) {
REASEND97_2 = Byte.parseByte(s);
} else {
REASEND97_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_3(String s) {
if (!s.trim().isEmpty()) {
REASEND97_3 = Byte.parseByte(s);
} else {
REASEND97_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_4(String s) {
if (!s.trim().isEmpty()) {
REASEND97_4 = Byte.parseByte(s);
} else {
REASEND97_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_5(String s) {
if (!s.trim().isEmpty()) {
REASEND97_5 = Byte.parseByte(s);
} else {
REASEND97_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_6(String s) {
if (!s.trim().isEmpty()) {
REASEND97_6 = Byte.parseByte(s);
} else {
REASEND97_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_7(String s) {
if (!s.trim().isEmpty()) {
REASEND97_7 = Byte.parseByte(s);
} else {
REASEND97_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_8(String s) {
if (!s.trim().isEmpty()) {
REASEND97_8 = Byte.parseByte(s);
} else {
REASEND97_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND97_9(String s) {
if (!s.trim().isEmpty()) {
REASEND97_9 = Byte.parseByte(s);
} else {
REASEND97_9 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_1(String s) {
if (!s.trim().isEmpty()) {
REASEND9_1 = Byte.parseByte(s);
} else {
REASEND9_1 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_2(String s) {
if (!s.trim().isEmpty()) {
REASEND9_2 = Byte.parseByte(s);
} else {
REASEND9_2 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_3(String s) {
if (!s.trim().isEmpty()) {
REASEND9_3 = Byte.parseByte(s);
} else {
REASEND9_3 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_4(String s) {
if (!s.trim().isEmpty()) {
REASEND9_4 = Byte.parseByte(s);
} else {
REASEND9_4 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_5(String s) {
if (!s.trim().isEmpty()) {
REASEND9_5 = Byte.parseByte(s);
} else {
REASEND9_5 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_6(String s) {
if (!s.trim().isEmpty()) {
REASEND9_6 = Byte.parseByte(s);
} else {
REASEND9_6 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_7(String s) {
if (!s.trim().isEmpty()) {
REASEND9_7 = Byte.parseByte(s);
} else {
REASEND9_7 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_8(String s) {
if (!s.trim().isEmpty()) {
REASEND9_8 = Byte.parseByte(s);
} else {
REASEND9_8 = Byte.MIN_VALUE;
}
}

protected final void initREASEND9_9(String s) {
if (!s.trim().isEmpty()) {
REASEND9_9 = Byte.parseByte(s);
} else {
REASEND9_9 = Byte.MIN_VALUE;
}
}

protected final void initREASENDOTCODE_1(String s) {
if (!s.trim().isEmpty()) {
REASENDOTCODE_1 = Byte.parseByte(s);
} else {
REASENDOTCODE_1 = Byte.MIN_VALUE;
}
}

protected final void initREASENDOTCODE_2(String s) {
if (!s.trim().isEmpty()) {
REASENDOTCODE_2 = Byte.parseByte(s);
} else {
REASENDOTCODE_2 = Byte.MIN_VALUE;
}
}

protected final void initREASENDOTCODE_3(String s) {
if (!s.trim().isEmpty()) {
REASENDOTCODE_3 = Byte.parseByte(s);
} else {
REASENDOTCODE_3 = Byte.MIN_VALUE;
}
}

protected final void initREASENDOTCODE_4(String s) {
if (!s.trim().isEmpty()) {
REASENDOTCODE_4 = Byte.parseByte(s);
} else {
REASENDOTCODE_4 = Byte.MIN_VALUE;
}
}

protected final void initREASENDOTCODE_5(String s) {
if (!s.trim().isEmpty()) {
REASENDOTCODE_5 = Byte.parseByte(s);
} else {
REASENDOTCODE_5 = Byte.MIN_VALUE;
}
}

protected final void initREASENDOTCODE_6(String s) {
if (!s.trim().isEmpty()) {
REASENDOTCODE_6 = Byte.parseByte(s);
} else {
REASENDOTCODE_6 = Byte.MIN_VALUE;
}
}

protected final void initREASENDOTCODE_7(String s) {
if (!s.trim().isEmpty()) {
REASENDOTCODE_7 = Byte.parseByte(s);
} else {
REASENDOTCODE_7 = Byte.MIN_VALUE;
}
}

protected final void initREASENDOTCODE_8(String s) {
if (!s.trim().isEmpty()) {
REASENDOTCODE_8 = Byte.parseByte(s);
} else {
REASENDOTCODE_8 = Byte.MIN_VALUE;
}
}

protected final void initREASENDOTCODE_9(String s) {
if (!s.trim().isEmpty()) {
REASENDOTCODE_9 = Byte.parseByte(s);
} else {
REASENDOTCODE_9 = Byte.MIN_VALUE;
}
}

protected final void initRELUP(String s) {
if (!s.trim().isEmpty()) {
RELUP = Byte.parseByte(s);
} else {
RELUP = Byte.MIN_VALUE;
}
}

protected final void initREMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
REMAIL_CODE = Byte.parseByte(s);
} else {
REMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD1(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD1 = Byte.parseByte(s);
} else {
RESPCHILD1 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD10(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD10 = Byte.parseByte(s);
} else {
RESPCHILD10 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD11(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD11 = Byte.parseByte(s);
} else {
RESPCHILD11 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD12(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD12 = Byte.parseByte(s);
} else {
RESPCHILD12 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD13(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD13 = Byte.parseByte(s);
} else {
RESPCHILD13 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD14(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD14 = Byte.parseByte(s);
} else {
RESPCHILD14 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD15(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD15 = Byte.parseByte(s);
} else {
RESPCHILD15 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD16(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD16 = Byte.parseByte(s);
} else {
RESPCHILD16 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD2(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD2 = Byte.parseByte(s);
} else {
RESPCHILD2 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD3(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD3 = Byte.parseByte(s);
} else {
RESPCHILD3 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD4(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD4 = Byte.parseByte(s);
} else {
RESPCHILD4 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD5(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD5 = Byte.parseByte(s);
} else {
RESPCHILD5 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD6(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD6 = Byte.parseByte(s);
} else {
RESPCHILD6 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD7(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD7 = Byte.parseByte(s);
} else {
RESPCHILD7 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD8(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD8 = Byte.parseByte(s);
} else {
RESPCHILD8 = Byte.MIN_VALUE;
}
}

protected final void initRESPCHILD9(String s) {
if (!s.trim().isEmpty()) {
RESPCHILD9 = Byte.parseByte(s);
} else {
RESPCHILD9 = Byte.MIN_VALUE;
}
}

protected final void initRESPF16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
RESPF16 = false;
} else {
RESPF16 = true;
}
}
}

protected final void initRESPF16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPF16_DV = false;
} else {
RESPF16_DV = true;
}
}
}

protected final void initRESPM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
RESPM16 = false;
} else {
RESPM16 = true;
}
}
}

protected final void initRESPM16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
RESPM16_DV = false;
} else {
RESPM16_DV = true;
}
}
}

protected final void initRETAMT(String s) {
if (!s.trim().isEmpty()) {
RETAMT = Byte.parseByte(s);
} else {
RETAMT = Byte.MIN_VALUE;
}
}

protected final void initRETCHK(String s) {
if (!s.trim().isEmpty()) {
RETCHK = Byte.parseByte(s);
} else {
RETCHK = Byte.MIN_VALUE;
}
}

protected final void initRETSUF(String s) {
if (!s.trim().isEmpty()) {
RETSUF = Byte.parseByte(s);
} else {
RETSUF = Byte.MIN_VALUE;
}
}

protected final void initRHLAND_CODE(String s) {
if (!s.trim().isEmpty()) {
RHLAND_CODE = Byte.parseByte(s);
} else {
RHLAND_CODE = Byte.MIN_VALUE;
}
}

protected final void initRINGFENCE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
RINGFENCE = false;
} else {
RINGFENCE = true;
}
}
}

protected final void initRPHMOB_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHMOB_CODE = Byte.parseByte(s);
} else {
RPHMOB_CODE = Byte.MIN_VALUE;
}
}

protected final void initRPHWRK_CODE(String s) {
if (!s.trim().isEmpty()) {
RPHWRK_CODE = Byte.parseByte(s);
} else {
RPHWRK_CODE = Byte.MIN_VALUE;
}
}

protected final void initRTCON1(String s) {
if (!s.trim().isEmpty()) {
RTCON1 = Byte.parseByte(s);
} else {
RTCON1 = Byte.MIN_VALUE;
}
}

protected final void initRTCON2(String s) {
if (!s.trim().isEmpty()) {
RTCON2 = Byte.parseByte(s);
} else {
RTCON2 = Byte.MIN_VALUE;
}
}

protected final void initRTCON3(String s) {
if (!s.trim().isEmpty()) {
RTCON3 = Byte.parseByte(s);
} else {
RTCON3 = Byte.MIN_VALUE;
}
}

protected final void initRTCON4(String s) {
if (!s.trim().isEmpty()) {
RTCON4 = Byte.parseByte(s);
} else {
RTCON4 = Byte.MIN_VALUE;
}
}

protected final void initRTEXPJB(String s) {
if (!s.trim().isEmpty()) {
RTEXPJB = Byte.parseByte(s);
} else {
RTEXPJB = Byte.MIN_VALUE;
}
}

protected final void initRTFND1(String s) {
if (!s.trim().isEmpty()) {
RTFND1 = Byte.parseByte(s);
} else {
RTFND1 = Byte.MIN_VALUE;
}
}

protected final void initRTFND10(String s) {
if (!s.trim().isEmpty()) {
RTFND10 = Byte.parseByte(s);
} else {
RTFND10 = Byte.MIN_VALUE;
}
}

protected final void initRTFND2(String s) {
if (!s.trim().isEmpty()) {
RTFND2 = Byte.parseByte(s);
} else {
RTFND2 = Byte.MIN_VALUE;
}
}

protected final void initRTFND3(String s) {
if (!s.trim().isEmpty()) {
RTFND3 = Byte.parseByte(s);
} else {
RTFND3 = Byte.MIN_VALUE;
}
}

protected final void initRTFND4(String s) {
if (!s.trim().isEmpty()) {
RTFND4 = Byte.parseByte(s);
} else {
RTFND4 = Byte.MIN_VALUE;
}
}

protected final void initRTFND5(String s) {
if (!s.trim().isEmpty()) {
RTFND5 = Byte.parseByte(s);
} else {
RTFND5 = Byte.MIN_VALUE;
}
}

protected final void initRTFND6(String s) {
if (!s.trim().isEmpty()) {
RTFND6 = Byte.parseByte(s);
} else {
RTFND6 = Byte.MIN_VALUE;
}
}

protected final void initRTFND7(String s) {
if (!s.trim().isEmpty()) {
RTFND7 = Byte.parseByte(s);
} else {
RTFND7 = Byte.MIN_VALUE;
}
}

protected final void initRTFND8(String s) {
if (!s.trim().isEmpty()) {
RTFND8 = Byte.parseByte(s);
} else {
RTFND8 = Byte.MIN_VALUE;
}
}

protected final void initRTFND9(String s) {
if (!s.trim().isEmpty()) {
RTFND9 = Byte.parseByte(s);
} else {
RTFND9 = Byte.MIN_VALUE;
}
}

protected final void initRTFND96(String s) {
if (!s.trim().isEmpty()) {
RTFND96 = Byte.parseByte(s);
} else {
RTFND96 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO1(String s) {
if (!s.trim().isEmpty()) {
RTPRO1 = Byte.parseByte(s);
} else {
RTPRO1 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO2(String s) {
if (!s.trim().isEmpty()) {
RTPRO2 = Byte.parseByte(s);
} else {
RTPRO2 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO3(String s) {
if (!s.trim().isEmpty()) {
RTPRO3 = Byte.parseByte(s);
} else {
RTPRO3 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO4(String s) {
if (!s.trim().isEmpty()) {
RTPRO4 = Byte.parseByte(s);
} else {
RTPRO4 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO5(String s) {
if (!s.trim().isEmpty()) {
RTPRO5 = Byte.parseByte(s);
} else {
RTPRO5 = Byte.MIN_VALUE;
}
}

protected final void initRTPRO6(String s) {
if (!s.trim().isEmpty()) {
RTPRO6 = Byte.parseByte(s);
} else {
RTPRO6 = Byte.MIN_VALUE;
}
}

protected final void initSAMEJOB(String s) {
if (!s.trim().isEmpty()) {
SAMEJOB = Byte.parseByte(s);
} else {
SAMEJOB = Byte.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSAVDOCS(String s) {
if (!s.trim().isEmpty()) {
SAVDOCS = Byte.parseByte(s);
} else {
SAVDOCS = Byte.MIN_VALUE;
}
}

protected final void initSAVE(String s) {
if (!s.trim().isEmpty()) {
SAVE = Short.parseShort(s);
} else {
SAVE = Short.MIN_VALUE;
}
}

protected final void initSAVED(String s) {
if (!s.trim().isEmpty()) {
SAVED = Integer.parseInt(s);
} else {
SAVED = Integer.MIN_VALUE;
}
}

protected final void initSAVLT(String s) {
if (!s.trim().isEmpty()) {
SAVLT = Byte.parseByte(s);
} else {
SAVLT = Byte.MIN_VALUE;
}
}

protected final void initSAVREG(String s) {
if (!s.trim().isEmpty()) {
SAVREG = Byte.parseByte(s);
} else {
SAVREG = Byte.MIN_VALUE;
}
}

protected final void initSCAC(String s) {
if (!s.trim().isEmpty()) {
SCAC = Byte.parseByte(s);
} else {
SCAC = Byte.MIN_VALUE;
}
}

protected final void initSCDATA_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
SCDATA_DV = false;
} else {
SCDATA_DV = true;
}
}
}

protected final void initSCFINEMB(String s) {
if (!s.trim().isEmpty()) {
SCFINEMB = Byte.parseByte(s);
} else {
SCFINEMB = Byte.MIN_VALUE;
}
}

protected final void initSCFINSMALL(String s) {
if (!s.trim().isEmpty()) {
SCFINSMALL = Byte.parseByte(s);
} else {
SCFINSMALL = Byte.MIN_VALUE;
}
}

protected final void initSCFLAG_DV(String s) {
if (!s.trim().isEmpty()) {
SCFLAG_DV = Byte.parseByte(s);
} else {
SCFLAG_DV = Byte.MIN_VALUE;
}
}

protected final void initSCHLLOC(String s) {
if (!s.trim().isEmpty()) {
SCHLLOC = Byte.parseByte(s);
} else {
SCHLLOC = Byte.MIN_VALUE;
}
}

protected final void initSCHOK(String s) {
if (!s.trim().isEmpty()) {
SCHOK = Byte.parseByte(s);
} else {
SCHOK = Byte.MIN_VALUE;
}
}

protected final void initSCHOOL_CAWI(String s) {
if (!s.trim().isEmpty()) {
SCHOOL_CAWI = Byte.parseByte(s);
} else {
SCHOOL_CAWI = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT1(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT1 = Byte.parseByte(s);
} else {
SCLFSAT1 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT2(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT2 = Byte.parseByte(s);
} else {
SCLFSAT2 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSAT7(String s) {
if (!s.trim().isEmpty()) {
SCLFSAT7 = Byte.parseByte(s);
} else {
SCLFSAT7 = Byte.MIN_VALUE;
}
}

protected final void initSCLFSATO(String s) {
if (!s.trim().isEmpty()) {
SCLFSATO = Byte.parseByte(s);
} else {
SCLFSATO = Byte.MIN_VALUE;
}
}

protected final void initSCRF1(String s) {
if (!s.trim().isEmpty()) {
SCRF1 = Byte.parseByte(s);
} else {
SCRF1 = Byte.MIN_VALUE;
}
}

protected final void initSCRF2(String s) {
if (!s.trim().isEmpty()) {
SCRF2 = Byte.parseByte(s);
} else {
SCRF2 = Byte.MIN_VALUE;
}
}

protected final void initSCRF3(String s) {
if (!s.trim().isEmpty()) {
SCRF3 = Byte.parseByte(s);
} else {
SCRF3 = Byte.MIN_VALUE;
}
}

protected final void initSCRF4(String s) {
if (!s.trim().isEmpty()) {
SCRF4 = Byte.parseByte(s);
} else {
SCRF4 = Byte.MIN_VALUE;
}
}

protected final void initSCRF5(String s) {
if (!s.trim().isEmpty()) {
SCRF5 = Byte.parseByte(s);
} else {
SCRF5 = Byte.MIN_VALUE;
}
}

protected final void initSCRF6(String s) {
if (!s.trim().isEmpty()) {
SCRF6 = Byte.parseByte(s);
} else {
SCRF6 = Byte.MIN_VALUE;
}
}

protected final void initSCRF97(String s) {
if (!s.trim().isEmpty()) {
SCRF97 = Byte.parseByte(s);
} else {
SCRF97 = Byte.MIN_VALUE;
}
}

protected final void initSCRX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCRX_CODE = Byte.parseByte(s);
} else {
SCRX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSCSF1(String s) {
if (!s.trim().isEmpty()) {
SCSF1 = Byte.parseByte(s);
} else {
SCSF1 = Byte.MIN_VALUE;
}
}

protected final void initSCSF2A(String s) {
if (!s.trim().isEmpty()) {
SCSF2A = Byte.parseByte(s);
} else {
SCSF2A = Byte.MIN_VALUE;
}
}

protected final void initSCSF2B(String s) {
if (!s.trim().isEmpty()) {
SCSF2B = Byte.parseByte(s);
} else {
SCSF2B = Byte.MIN_VALUE;
}
}

protected final void initSCSF3A(String s) {
if (!s.trim().isEmpty()) {
SCSF3A = Byte.parseByte(s);
} else {
SCSF3A = Byte.MIN_VALUE;
}
}

protected final void initSCSF3B(String s) {
if (!s.trim().isEmpty()) {
SCSF3B = Byte.parseByte(s);
} else {
SCSF3B = Byte.MIN_VALUE;
}
}

protected final void initSCSF4A(String s) {
if (!s.trim().isEmpty()) {
SCSF4A = Byte.parseByte(s);
} else {
SCSF4A = Byte.MIN_VALUE;
}
}

protected final void initSCSF4B(String s) {
if (!s.trim().isEmpty()) {
SCSF4B = Byte.parseByte(s);
} else {
SCSF4B = Byte.MIN_VALUE;
}
}

protected final void initSCSF5(String s) {
if (!s.trim().isEmpty()) {
SCSF5 = Byte.parseByte(s);
} else {
SCSF5 = Byte.MIN_VALUE;
}
}

protected final void initSCSF6A(String s) {
if (!s.trim().isEmpty()) {
SCSF6A = Byte.parseByte(s);
} else {
SCSF6A = Byte.MIN_VALUE;
}
}

protected final void initSCSF6B(String s) {
if (!s.trim().isEmpty()) {
SCSF6B = Byte.parseByte(s);
} else {
SCSF6B = Byte.MIN_VALUE;
}
}

protected final void initSCSF6C(String s) {
if (!s.trim().isEmpty()) {
SCSF6C = Byte.parseByte(s);
} else {
SCSF6C = Byte.MIN_VALUE;
}
}

protected final void initSCSF7(String s) {
if (!s.trim().isEmpty()) {
SCSF7 = Byte.parseByte(s);
} else {
SCSF7 = Byte.MIN_VALUE;
}
}

protected final void initSCUN1(String s) {
if (!s.trim().isEmpty()) {
SCUN1 = Byte.parseByte(s);
} else {
SCUN1 = Byte.MIN_VALUE;
}
}

protected final void initSCUN2(String s) {
if (!s.trim().isEmpty()) {
SCUN2 = Byte.parseByte(s);
} else {
SCUN2 = Byte.MIN_VALUE;
}
}

protected final void initSCUN3(String s) {
if (!s.trim().isEmpty()) {
SCUN3 = Byte.parseByte(s);
} else {
SCUN3 = Byte.MIN_VALUE;
}
}

protected final void initSCUN97(String s) {
if (!s.trim().isEmpty()) {
SCUN97 = Byte.parseByte(s);
} else {
SCUN97 = Byte.MIN_VALUE;
}
}

protected final void initSCUX_CODE(String s) {
if (!s.trim().isEmpty()) {
SCUX_CODE = Byte.parseByte(s);
} else {
SCUX_CODE = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUAGE(String s) {
if (!s.trim().isEmpty()) {
SCWHORUAGE = Byte.parseByte(s);
} else {
SCWHORUAGE = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUEDU(String s) {
if (!s.trim().isEmpty()) {
SCWHORUEDU = Byte.parseByte(s);
} else {
SCWHORUEDU = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUFAM(String s) {
if (!s.trim().isEmpty()) {
SCWHORUFAM = Byte.parseByte(s);
} else {
SCWHORUFAM = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUPOL(String s) {
if (!s.trim().isEmpty()) {
SCWHORUPOL = Byte.parseByte(s);
} else {
SCWHORUPOL = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUPRO(String s) {
if (!s.trim().isEmpty()) {
SCWHORUPRO = Byte.parseByte(s);
} else {
SCWHORUPRO = Byte.MIN_VALUE;
}
}

protected final void initSCWHORURAC(String s) {
if (!s.trim().isEmpty()) {
SCWHORURAC = Byte.parseByte(s);
} else {
SCWHORURAC = Byte.MIN_VALUE;
}
}

protected final void initSCWHORUSEX(String s) {
if (!s.trim().isEmpty()) {
SCWHORUSEX = Byte.parseByte(s);
} else {
SCWHORUSEX = Byte.MIN_VALUE;
}
}

protected final void initSEEARNGRS_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_DV = Double.parseDouble(s);
} else {
SEEARNGRS_DV = Double.NaN;
}
}

protected final void initSEEARNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
SEEARNGRS_IF = Byte.parseByte(s);
} else {
SEEARNGRS_IF = Byte.MIN_VALUE;
}
}

protected final void initSEEARNNET_DV(String s) {
if (!s.trim().isEmpty()) {
SEEARNNET_DV = Double.parseDouble(s);
} else {
SEEARNNET_DV = Double.NaN;
}
}

protected final void initSEX_DV(String s) {
if (!s.trim().isEmpty()) {
SEX_DV = Byte.parseByte(s);
} else {
SEX_DV = Byte.MIN_VALUE;
}
}

protected final void initSF1(String s) {
if (!s.trim().isEmpty()) {
SF1 = Byte.parseByte(s);
} else {
SF1 = Byte.MIN_VALUE;
}
}

protected final void initSF12MCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12MCS_DV = Double.parseDouble(s);
} else {
SF12MCS_DV = Double.NaN;
}
}

protected final void initSF12PCS_DV(String s) {
if (!s.trim().isEmpty()) {
SF12PCS_DV = Double.parseDouble(s);
} else {
SF12PCS_DV = Double.NaN;
}
}

protected final void initSINGLE_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
SINGLE_DV = false;
} else {
SINGLE_DV = true;
}
}
}

protected final void initSMARTMOB(String s) {
if (!s.trim().isEmpty()) {
SMARTMOB = Byte.parseByte(s);
} else {
SMARTMOB = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH11(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH11 = Byte.parseByte(s);
} else {
SMKMNTH11 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH12(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH12 = Byte.parseByte(s);
} else {
SMKMNTH12 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH13(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH13 = Byte.parseByte(s);
} else {
SMKMNTH13 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH14(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH14 = Byte.parseByte(s);
} else {
SMKMNTH14 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH21(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH21 = Byte.parseByte(s);
} else {
SMKMNTH21 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH22(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH22 = Byte.parseByte(s);
} else {
SMKMNTH22 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH23(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH23 = Byte.parseByte(s);
} else {
SMKMNTH23 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH24(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH24 = Byte.parseByte(s);
} else {
SMKMNTH24 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH31(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH31 = Byte.parseByte(s);
} else {
SMKMNTH31 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH32(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH32 = Byte.parseByte(s);
} else {
SMKMNTH32 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH33(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH33 = Byte.parseByte(s);
} else {
SMKMNTH33 = Byte.MIN_VALUE;
}
}

protected final void initSMKMNTH34(String s) {
if (!s.trim().isEmpty()) {
SMKMNTH34 = Byte.parseByte(s);
} else {
SMKMNTH34 = Byte.MIN_VALUE;
}
}

protected final void initSMOKER(String s) {
if (!s.trim().isEmpty()) {
SMOKER = Short.parseShort(s);
} else {
SMOKER = Short.MIN_VALUE;
}
}

protected final void initSPPEN(String s) {
if (!s.trim().isEmpty()) {
SPPEN = Byte.parseByte(s);
} else {
SPPEN = Byte.MIN_VALUE;
}
}

protected final void initSPPID(String s) {
if (!s.trim().isEmpty()) {
SPPID = Integer.parseInt(s);
} else {
SPPID = Integer.MIN_VALUE;
}
}

protected final void initSPPNO(String s) {
if (!s.trim().isEmpty()) {
SPPNO = Byte.parseByte(s);
} else {
SPPNO = Byte.MIN_VALUE;
}
}

protected final void initSTATCM1(String s) {
if (!s.trim().isEmpty()) {
STATCM1 = Byte.parseByte(s);
} else {
STATCM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM2(String s) {
if (!s.trim().isEmpty()) {
STATCM2 = Byte.parseByte(s);
} else {
STATCM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM3(String s) {
if (!s.trim().isEmpty()) {
STATCM3 = Byte.parseByte(s);
} else {
STATCM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM4(String s) {
if (!s.trim().isEmpty()) {
STATCM4 = Byte.parseByte(s);
} else {
STATCM4 = Byte.MIN_VALUE;
}
}

protected final void initSTATCM5(String s) {
if (!s.trim().isEmpty()) {
STATCM5 = Byte.parseByte(s);
} else {
STATCM5 = Byte.MIN_VALUE;
}
}

protected final void initSTATCY41(String s) {
if (!s.trim().isEmpty()) {
STATCY41 = Short.parseShort(s);
} else {
STATCY41 = Short.MIN_VALUE;
}
}

protected final void initSTATCY42(String s) {
if (!s.trim().isEmpty()) {
STATCY42 = Short.parseShort(s);
} else {
STATCY42 = Short.MIN_VALUE;
}
}

protected final void initSTATCY43(String s) {
if (!s.trim().isEmpty()) {
STATCY43 = Short.parseShort(s);
} else {
STATCY43 = Short.MIN_VALUE;
}
}

protected final void initSTATCY44(String s) {
if (!s.trim().isEmpty()) {
STATCY44 = Short.parseShort(s);
} else {
STATCY44 = Short.MIN_VALUE;
}
}

protected final void initSTATCY45(String s) {
if (!s.trim().isEmpty()) {
STATCY45 = Short.parseShort(s);
} else {
STATCY45 = Short.MIN_VALUE;
}
}

protected final void initSTATENDD1(String s) {
if (!s.trim().isEmpty()) {
STATENDD1 = Byte.parseByte(s);
} else {
STATENDD1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD2(String s) {
if (!s.trim().isEmpty()) {
STATENDD2 = Byte.parseByte(s);
} else {
STATENDD2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD3(String s) {
if (!s.trim().isEmpty()) {
STATENDD3 = Byte.parseByte(s);
} else {
STATENDD3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD4(String s) {
if (!s.trim().isEmpty()) {
STATENDD4 = Byte.parseByte(s);
} else {
STATENDD4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD5(String s) {
if (!s.trim().isEmpty()) {
STATENDD5 = Byte.parseByte(s);
} else {
STATENDD5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD6(String s) {
if (!s.trim().isEmpty()) {
STATENDD6 = Byte.parseByte(s);
} else {
STATENDD6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD7(String s) {
if (!s.trim().isEmpty()) {
STATENDD7 = Byte.parseByte(s);
} else {
STATENDD7 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD8(String s) {
if (!s.trim().isEmpty()) {
STATENDD8 = Byte.parseByte(s);
} else {
STATENDD8 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDD9(String s) {
if (!s.trim().isEmpty()) {
STATENDD9 = Byte.parseByte(s);
} else {
STATENDD9 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM1(String s) {
if (!s.trim().isEmpty()) {
STATENDM1 = Byte.parseByte(s);
} else {
STATENDM1 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM2(String s) {
if (!s.trim().isEmpty()) {
STATENDM2 = Byte.parseByte(s);
} else {
STATENDM2 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM3(String s) {
if (!s.trim().isEmpty()) {
STATENDM3 = Byte.parseByte(s);
} else {
STATENDM3 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM4(String s) {
if (!s.trim().isEmpty()) {
STATENDM4 = Byte.parseByte(s);
} else {
STATENDM4 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM5(String s) {
if (!s.trim().isEmpty()) {
STATENDM5 = Byte.parseByte(s);
} else {
STATENDM5 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM6(String s) {
if (!s.trim().isEmpty()) {
STATENDM6 = Byte.parseByte(s);
} else {
STATENDM6 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM7(String s) {
if (!s.trim().isEmpty()) {
STATENDM7 = Byte.parseByte(s);
} else {
STATENDM7 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM8(String s) {
if (!s.trim().isEmpty()) {
STATENDM8 = Byte.parseByte(s);
} else {
STATENDM8 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDM9(String s) {
if (!s.trim().isEmpty()) {
STATENDM9 = Byte.parseByte(s);
} else {
STATENDM9 = Byte.MIN_VALUE;
}
}

protected final void initSTATENDY41(String s) {
if (!s.trim().isEmpty()) {
STATENDY41 = Short.parseShort(s);
} else {
STATENDY41 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY42(String s) {
if (!s.trim().isEmpty()) {
STATENDY42 = Short.parseShort(s);
} else {
STATENDY42 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY43(String s) {
if (!s.trim().isEmpty()) {
STATENDY43 = Short.parseShort(s);
} else {
STATENDY43 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY44(String s) {
if (!s.trim().isEmpty()) {
STATENDY44 = Short.parseShort(s);
} else {
STATENDY44 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY45(String s) {
if (!s.trim().isEmpty()) {
STATENDY45 = Short.parseShort(s);
} else {
STATENDY45 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY46(String s) {
if (!s.trim().isEmpty()) {
STATENDY46 = Short.parseShort(s);
} else {
STATENDY46 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY47(String s) {
if (!s.trim().isEmpty()) {
STATENDY47 = Short.parseShort(s);
} else {
STATENDY47 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY48(String s) {
if (!s.trim().isEmpty()) {
STATENDY48 = Short.parseShort(s);
} else {
STATENDY48 = Short.MIN_VALUE;
}
}

protected final void initSTATENDY49(String s) {
if (!s.trim().isEmpty()) {
STATENDY49 = Short.parseShort(s);
} else {
STATENDY49 = Short.MIN_VALUE;
}
}

protected final void initSTENDOTCODE(String s) {
if (!s.trim().isEmpty()) {
STENDOTCODE = Byte.parseByte(s);
} else {
STENDOTCODE = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS1(String s) {
if (!s.trim().isEmpty()) {
STENDREAS1 = Byte.parseByte(s);
} else {
STENDREAS1 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS10(String s) {
if (!s.trim().isEmpty()) {
STENDREAS10 = Byte.parseByte(s);
} else {
STENDREAS10 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS11(String s) {
if (!s.trim().isEmpty()) {
STENDREAS11 = Byte.parseByte(s);
} else {
STENDREAS11 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS2(String s) {
if (!s.trim().isEmpty()) {
STENDREAS2 = Byte.parseByte(s);
} else {
STENDREAS2 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS3(String s) {
if (!s.trim().isEmpty()) {
STENDREAS3 = Byte.parseByte(s);
} else {
STENDREAS3 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS4(String s) {
if (!s.trim().isEmpty()) {
STENDREAS4 = Byte.parseByte(s);
} else {
STENDREAS4 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS5(String s) {
if (!s.trim().isEmpty()) {
STENDREAS5 = Byte.parseByte(s);
} else {
STENDREAS5 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS6(String s) {
if (!s.trim().isEmpty()) {
STENDREAS6 = Byte.parseByte(s);
} else {
STENDREAS6 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS7(String s) {
if (!s.trim().isEmpty()) {
STENDREAS7 = Byte.parseByte(s);
} else {
STENDREAS7 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS8(String s) {
if (!s.trim().isEmpty()) {
STENDREAS8 = Byte.parseByte(s);
} else {
STENDREAS8 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS9(String s) {
if (!s.trim().isEmpty()) {
STENDREAS9 = Byte.parseByte(s);
} else {
STENDREAS9 = Byte.MIN_VALUE;
}
}

protected final void initSTENDREAS97(String s) {
if (!s.trim().isEmpty()) {
STENDREAS97 = Byte.parseByte(s);
} else {
STENDREAS97 = Byte.MIN_VALUE;
}
}

protected final void initSTRATA(String s) {
if (!s.trim().isEmpty()) {
STRATA = Short.parseShort(s);
} else {
STRATA = Short.MIN_VALUE;
}
}

protected final void initSUSP(String s) {
if (!s.trim().isEmpty()) {
SUSP = Byte.parseByte(s);
} else {
SUSP = Byte.MIN_VALUE;
}
}

protected final void initSVACTS1(String s) {
if (!s.trim().isEmpty()) {
SVACTS1 = Byte.parseByte(s);
} else {
SVACTS1 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS2(String s) {
if (!s.trim().isEmpty()) {
SVACTS2 = Byte.parseByte(s);
} else {
SVACTS2 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS3(String s) {
if (!s.trim().isEmpty()) {
SVACTS3 = Byte.parseByte(s);
} else {
SVACTS3 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS4(String s) {
if (!s.trim().isEmpty()) {
SVACTS4 = Byte.parseByte(s);
} else {
SVACTS4 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS5(String s) {
if (!s.trim().isEmpty()) {
SVACTS5 = Byte.parseByte(s);
} else {
SVACTS5 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS96(String s) {
if (!s.trim().isEmpty()) {
SVACTS96 = Byte.parseByte(s);
} else {
SVACTS96 = Byte.MIN_VALUE;
}
}

protected final void initSVACTS97(String s) {
if (!s.trim().isEmpty()) {
SVACTS97 = Byte.parseByte(s);
} else {
SVACTS97 = Byte.MIN_VALUE;
}
}

protected final void initSVAMT1(String s) {
if (!s.trim().isEmpty()) {
SVAMT1 = Integer.parseInt(s);
} else {
SVAMT1 = Integer.MIN_VALUE;
}
}

protected final void initSVAMT2(String s) {
if (!s.trim().isEmpty()) {
SVAMT2 = Integer.parseInt(s);
} else {
SVAMT2 = Integer.MIN_VALUE;
}
}

protected final void initSVAMT3(String s) {
if (!s.trim().isEmpty()) {
SVAMT3 = Integer.parseInt(s);
} else {
SVAMT3 = Integer.MIN_VALUE;
}
}

protected final void initSVAMT4(String s) {
if (!s.trim().isEmpty()) {
SVAMT4 = Integer.parseInt(s);
} else {
SVAMT4 = Integer.MIN_VALUE;
}
}

protected final void initSVAMT5(String s) {
if (!s.trim().isEmpty()) {
SVAMT5 = Integer.parseInt(s);
} else {
SVAMT5 = Integer.MIN_VALUE;
}
}

protected final void initSVAMT6(String s) {
if (!s.trim().isEmpty()) {
SVAMT6 = Integer.parseInt(s);
} else {
SVAMT6 = Integer.MIN_VALUE;
}
}

protected final void initSVB1_1(String s) {
if (!s.trim().isEmpty()) {
SVB1_1 = Byte.parseByte(s);
} else {
SVB1_1 = Byte.MIN_VALUE;
}
}

protected final void initSVB1_2(String s) {
if (!s.trim().isEmpty()) {
SVB1_2 = Byte.parseByte(s);
} else {
SVB1_2 = Byte.MIN_VALUE;
}
}

protected final void initSVB1_3(String s) {
if (!s.trim().isEmpty()) {
SVB1_3 = Byte.parseByte(s);
} else {
SVB1_3 = Byte.MIN_VALUE;
}
}

protected final void initSVB1_4(String s) {
if (!s.trim().isEmpty()) {
SVB1_4 = Byte.parseByte(s);
} else {
SVB1_4 = Byte.MIN_VALUE;
}
}

protected final void initSVB1_5(String s) {
if (!s.trim().isEmpty()) {
SVB1_5 = Byte.parseByte(s);
} else {
SVB1_5 = Byte.MIN_VALUE;
}
}

protected final void initSVB1_6(String s) {
if (!s.trim().isEmpty()) {
SVB1_6 = Byte.parseByte(s);
} else {
SVB1_6 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_1(String s) {
if (!s.trim().isEmpty()) {
SVB2_1 = Byte.parseByte(s);
} else {
SVB2_1 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_2(String s) {
if (!s.trim().isEmpty()) {
SVB2_2 = Byte.parseByte(s);
} else {
SVB2_2 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_3(String s) {
if (!s.trim().isEmpty()) {
SVB2_3 = Byte.parseByte(s);
} else {
SVB2_3 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_4(String s) {
if (!s.trim().isEmpty()) {
SVB2_4 = Byte.parseByte(s);
} else {
SVB2_4 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_5(String s) {
if (!s.trim().isEmpty()) {
SVB2_5 = Byte.parseByte(s);
} else {
SVB2_5 = Byte.MIN_VALUE;
}
}

protected final void initSVB2_6(String s) {
if (!s.trim().isEmpty()) {
SVB2_6 = Byte.parseByte(s);
} else {
SVB2_6 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_1(String s) {
if (!s.trim().isEmpty()) {
SVB3_1 = Byte.parseByte(s);
} else {
SVB3_1 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_2(String s) {
if (!s.trim().isEmpty()) {
SVB3_2 = Byte.parseByte(s);
} else {
SVB3_2 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_3(String s) {
if (!s.trim().isEmpty()) {
SVB3_3 = Byte.parseByte(s);
} else {
SVB3_3 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_4(String s) {
if (!s.trim().isEmpty()) {
SVB3_4 = Byte.parseByte(s);
} else {
SVB3_4 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_5(String s) {
if (!s.trim().isEmpty()) {
SVB3_5 = Byte.parseByte(s);
} else {
SVB3_5 = Byte.MIN_VALUE;
}
}

protected final void initSVB3_6(String s) {
if (!s.trim().isEmpty()) {
SVB3_6 = Byte.parseByte(s);
} else {
SVB3_6 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_1(String s) {
if (!s.trim().isEmpty()) {
SVB4_1 = Byte.parseByte(s);
} else {
SVB4_1 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_2(String s) {
if (!s.trim().isEmpty()) {
SVB4_2 = Byte.parseByte(s);
} else {
SVB4_2 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_3(String s) {
if (!s.trim().isEmpty()) {
SVB4_3 = Byte.parseByte(s);
} else {
SVB4_3 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_4(String s) {
if (!s.trim().isEmpty()) {
SVB4_4 = Byte.parseByte(s);
} else {
SVB4_4 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_5(String s) {
if (!s.trim().isEmpty()) {
SVB4_5 = Byte.parseByte(s);
} else {
SVB4_5 = Byte.MIN_VALUE;
}
}

protected final void initSVB4_6(String s) {
if (!s.trim().isEmpty()) {
SVB4_6 = Byte.parseByte(s);
} else {
SVB4_6 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_1(String s) {
if (!s.trim().isEmpty()) {
SVB5_1 = Byte.parseByte(s);
} else {
SVB5_1 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_2(String s) {
if (!s.trim().isEmpty()) {
SVB5_2 = Byte.parseByte(s);
} else {
SVB5_2 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_3(String s) {
if (!s.trim().isEmpty()) {
SVB5_3 = Byte.parseByte(s);
} else {
SVB5_3 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_4(String s) {
if (!s.trim().isEmpty()) {
SVB5_4 = Byte.parseByte(s);
} else {
SVB5_4 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_5(String s) {
if (!s.trim().isEmpty()) {
SVB5_5 = Byte.parseByte(s);
} else {
SVB5_5 = Byte.MIN_VALUE;
}
}

protected final void initSVB5_6(String s) {
if (!s.trim().isEmpty()) {
SVB5_6 = Byte.parseByte(s);
} else {
SVB5_6 = Byte.MIN_VALUE;
}
}

protected final void initSVPN0_1(String s) {
if (!s.trim().isEmpty()) {
SVPN0_1 = Byte.parseByte(s);
} else {
SVPN0_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN0_2(String s) {
if (!s.trim().isEmpty()) {
SVPN0_2 = Byte.parseByte(s);
} else {
SVPN0_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN0_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN0_3 = false;
} else {
SVPN0_3 = true;
}
}
}

protected final void initSVPN0_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN0_4 = false;
} else {
SVPN0_4 = true;
}
}
}

protected final void initSVPN0_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN0_5 = false;
} else {
SVPN0_5 = true;
}
}
}

protected final void initSVPN0_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN0_6 = false;
} else {
SVPN0_6 = true;
}
}
}

protected final void initSVPN10_1(String s) {
if (!s.trim().isEmpty()) {
SVPN10_1 = Byte.parseByte(s);
} else {
SVPN10_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN10_2(String s) {
if (!s.trim().isEmpty()) {
SVPN10_2 = Byte.parseByte(s);
} else {
SVPN10_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN10_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN10_3 = false;
} else {
SVPN10_3 = true;
}
}
}

protected final void initSVPN10_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN10_4 = false;
} else {
SVPN10_4 = true;
}
}
}

protected final void initSVPN10_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN10_5 = false;
} else {
SVPN10_5 = true;
}
}
}

protected final void initSVPN10_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN10_6 = false;
} else {
SVPN10_6 = true;
}
}
}

protected final void initSVPN11_1(String s) {
if (!s.trim().isEmpty()) {
SVPN11_1 = Byte.parseByte(s);
} else {
SVPN11_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN11_2(String s) {
if (!s.trim().isEmpty()) {
SVPN11_2 = Byte.parseByte(s);
} else {
SVPN11_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN11_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN11_3 = false;
} else {
SVPN11_3 = true;
}
}
}

protected final void initSVPN11_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN11_4 = false;
} else {
SVPN11_4 = true;
}
}
}

protected final void initSVPN11_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN11_5 = false;
} else {
SVPN11_5 = true;
}
}
}

protected final void initSVPN11_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN11_6 = false;
} else {
SVPN11_6 = true;
}
}
}

protected final void initSVPN12_1(String s) {
if (!s.trim().isEmpty()) {
SVPN12_1 = Byte.parseByte(s);
} else {
SVPN12_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN12_2(String s) {
if (!s.trim().isEmpty()) {
SVPN12_2 = Byte.parseByte(s);
} else {
SVPN12_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN12_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN12_3 = false;
} else {
SVPN12_3 = true;
}
}
}

protected final void initSVPN12_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN12_4 = false;
} else {
SVPN12_4 = true;
}
}
}

protected final void initSVPN12_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN12_5 = false;
} else {
SVPN12_5 = true;
}
}
}

protected final void initSVPN12_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN12_6 = false;
} else {
SVPN12_6 = true;
}
}
}

protected final void initSVPN13_1(String s) {
if (!s.trim().isEmpty()) {
SVPN13_1 = Byte.parseByte(s);
} else {
SVPN13_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN13_2(String s) {
if (!s.trim().isEmpty()) {
SVPN13_2 = Byte.parseByte(s);
} else {
SVPN13_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN13_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN13_3 = false;
} else {
SVPN13_3 = true;
}
}
}

protected final void initSVPN13_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN13_4 = false;
} else {
SVPN13_4 = true;
}
}
}

protected final void initSVPN13_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN13_5 = false;
} else {
SVPN13_5 = true;
}
}
}

protected final void initSVPN13_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN13_6 = false;
} else {
SVPN13_6 = true;
}
}
}

protected final void initSVPN14_1(String s) {
if (!s.trim().isEmpty()) {
SVPN14_1 = Byte.parseByte(s);
} else {
SVPN14_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN14_2(String s) {
if (!s.trim().isEmpty()) {
SVPN14_2 = Byte.parseByte(s);
} else {
SVPN14_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN14_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN14_3 = false;
} else {
SVPN14_3 = true;
}
}
}

protected final void initSVPN14_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN14_4 = false;
} else {
SVPN14_4 = true;
}
}
}

protected final void initSVPN14_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN14_5 = false;
} else {
SVPN14_5 = true;
}
}
}

protected final void initSVPN14_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN14_6 = false;
} else {
SVPN14_6 = true;
}
}
}

protected final void initSVPN15_1(String s) {
if (!s.trim().isEmpty()) {
SVPN15_1 = Byte.parseByte(s);
} else {
SVPN15_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN15_2(String s) {
if (!s.trim().isEmpty()) {
SVPN15_2 = Byte.parseByte(s);
} else {
SVPN15_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN15_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN15_3 = false;
} else {
SVPN15_3 = true;
}
}
}

protected final void initSVPN15_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN15_4 = false;
} else {
SVPN15_4 = true;
}
}
}

protected final void initSVPN15_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN15_5 = false;
} else {
SVPN15_5 = true;
}
}
}

protected final void initSVPN15_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN15_6 = false;
} else {
SVPN15_6 = true;
}
}
}

protected final void initSVPN16_1(String s) {
if (!s.trim().isEmpty()) {
SVPN16_1 = Byte.parseByte(s);
} else {
SVPN16_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN16_2(String s) {
if (!s.trim().isEmpty()) {
SVPN16_2 = Byte.parseByte(s);
} else {
SVPN16_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN16_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN16_3 = false;
} else {
SVPN16_3 = true;
}
}
}

protected final void initSVPN16_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN16_4 = false;
} else {
SVPN16_4 = true;
}
}
}

protected final void initSVPN16_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN16_5 = false;
} else {
SVPN16_5 = true;
}
}
}

protected final void initSVPN16_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN16_6 = false;
} else {
SVPN16_6 = true;
}
}
}

protected final void initSVPN1_1(String s) {
if (!s.trim().isEmpty()) {
SVPN1_1 = Byte.parseByte(s);
} else {
SVPN1_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN1_2(String s) {
if (!s.trim().isEmpty()) {
SVPN1_2 = Byte.parseByte(s);
} else {
SVPN1_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN1_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN1_3 = false;
} else {
SVPN1_3 = true;
}
}
}

protected final void initSVPN1_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN1_4 = false;
} else {
SVPN1_4 = true;
}
}
}

protected final void initSVPN1_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN1_5 = false;
} else {
SVPN1_5 = true;
}
}
}

protected final void initSVPN1_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN1_6 = false;
} else {
SVPN1_6 = true;
}
}
}

protected final void initSVPN2_1(String s) {
if (!s.trim().isEmpty()) {
SVPN2_1 = Byte.parseByte(s);
} else {
SVPN2_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN2_2(String s) {
if (!s.trim().isEmpty()) {
SVPN2_2 = Byte.parseByte(s);
} else {
SVPN2_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN2_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN2_3 = false;
} else {
SVPN2_3 = true;
}
}
}

protected final void initSVPN2_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN2_4 = false;
} else {
SVPN2_4 = true;
}
}
}

protected final void initSVPN2_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN2_5 = false;
} else {
SVPN2_5 = true;
}
}
}

protected final void initSVPN2_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN2_6 = false;
} else {
SVPN2_6 = true;
}
}
}

protected final void initSVPN3_1(String s) {
if (!s.trim().isEmpty()) {
SVPN3_1 = Byte.parseByte(s);
} else {
SVPN3_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN3_2(String s) {
if (!s.trim().isEmpty()) {
SVPN3_2 = Byte.parseByte(s);
} else {
SVPN3_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN3_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN3_3 = false;
} else {
SVPN3_3 = true;
}
}
}

protected final void initSVPN3_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN3_4 = false;
} else {
SVPN3_4 = true;
}
}
}

protected final void initSVPN3_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN3_5 = false;
} else {
SVPN3_5 = true;
}
}
}

protected final void initSVPN3_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN3_6 = false;
} else {
SVPN3_6 = true;
}
}
}

protected final void initSVPN4_1(String s) {
if (!s.trim().isEmpty()) {
SVPN4_1 = Byte.parseByte(s);
} else {
SVPN4_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN4_2(String s) {
if (!s.trim().isEmpty()) {
SVPN4_2 = Byte.parseByte(s);
} else {
SVPN4_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN4_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN4_3 = false;
} else {
SVPN4_3 = true;
}
}
}

protected final void initSVPN4_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN4_4 = false;
} else {
SVPN4_4 = true;
}
}
}

protected final void initSVPN4_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN4_5 = false;
} else {
SVPN4_5 = true;
}
}
}

protected final void initSVPN4_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN4_6 = false;
} else {
SVPN4_6 = true;
}
}
}

protected final void initSVPN5_1(String s) {
if (!s.trim().isEmpty()) {
SVPN5_1 = Byte.parseByte(s);
} else {
SVPN5_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN5_2(String s) {
if (!s.trim().isEmpty()) {
SVPN5_2 = Byte.parseByte(s);
} else {
SVPN5_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN5_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN5_3 = false;
} else {
SVPN5_3 = true;
}
}
}

protected final void initSVPN5_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN5_4 = false;
} else {
SVPN5_4 = true;
}
}
}

protected final void initSVPN5_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN5_5 = false;
} else {
SVPN5_5 = true;
}
}
}

protected final void initSVPN5_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN5_6 = false;
} else {
SVPN5_6 = true;
}
}
}

protected final void initSVPN6_1(String s) {
if (!s.trim().isEmpty()) {
SVPN6_1 = Byte.parseByte(s);
} else {
SVPN6_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN6_2(String s) {
if (!s.trim().isEmpty()) {
SVPN6_2 = Byte.parseByte(s);
} else {
SVPN6_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN6_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN6_3 = false;
} else {
SVPN6_3 = true;
}
}
}

protected final void initSVPN6_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN6_4 = false;
} else {
SVPN6_4 = true;
}
}
}

protected final void initSVPN6_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN6_5 = false;
} else {
SVPN6_5 = true;
}
}
}

protected final void initSVPN6_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN6_6 = false;
} else {
SVPN6_6 = true;
}
}
}

protected final void initSVPN7_1(String s) {
if (!s.trim().isEmpty()) {
SVPN7_1 = Byte.parseByte(s);
} else {
SVPN7_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN7_2(String s) {
if (!s.trim().isEmpty()) {
SVPN7_2 = Byte.parseByte(s);
} else {
SVPN7_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN7_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN7_3 = false;
} else {
SVPN7_3 = true;
}
}
}

protected final void initSVPN7_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN7_4 = false;
} else {
SVPN7_4 = true;
}
}
}

protected final void initSVPN7_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN7_5 = false;
} else {
SVPN7_5 = true;
}
}
}

protected final void initSVPN7_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN7_6 = false;
} else {
SVPN7_6 = true;
}
}
}

protected final void initSVPN8_1(String s) {
if (!s.trim().isEmpty()) {
SVPN8_1 = Byte.parseByte(s);
} else {
SVPN8_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN8_2(String s) {
if (!s.trim().isEmpty()) {
SVPN8_2 = Byte.parseByte(s);
} else {
SVPN8_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN8_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN8_3 = false;
} else {
SVPN8_3 = true;
}
}
}

protected final void initSVPN8_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN8_4 = false;
} else {
SVPN8_4 = true;
}
}
}

protected final void initSVPN8_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN8_5 = false;
} else {
SVPN8_5 = true;
}
}
}

protected final void initSVPN8_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN8_6 = false;
} else {
SVPN8_6 = true;
}
}
}

protected final void initSVPN9_1(String s) {
if (!s.trim().isEmpty()) {
SVPN9_1 = Byte.parseByte(s);
} else {
SVPN9_1 = Byte.MIN_VALUE;
}
}

protected final void initSVPN9_2(String s) {
if (!s.trim().isEmpty()) {
SVPN9_2 = Byte.parseByte(s);
} else {
SVPN9_2 = Byte.MIN_VALUE;
}
}

protected final void initSVPN9_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN9_3 = false;
} else {
SVPN9_3 = true;
}
}
}

protected final void initSVPN9_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN9_4 = false;
} else {
SVPN9_4 = true;
}
}
}

protected final void initSVPN9_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN9_5 = false;
} else {
SVPN9_5 = true;
}
}
}

protected final void initSVPN9_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVPN9_6 = false;
} else {
SVPN9_6 = true;
}
}
}

protected final void initSVSJ1(String s) {
if (!s.trim().isEmpty()) {
SVSJ1 = Byte.parseByte(s);
} else {
SVSJ1 = Byte.MIN_VALUE;
}
}

protected final void initSVSJ2(String s) {
if (!s.trim().isEmpty()) {
SVSJ2 = Byte.parseByte(s);
} else {
SVSJ2 = Byte.MIN_VALUE;
}
}

protected final void initSVSJ3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSJ3 = false;
} else {
SVSJ3 = true;
}
}
}

protected final void initSVSJ4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSJ4 = false;
} else {
SVSJ4 = true;
}
}
}

protected final void initSVSJ5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSJ5 = false;
} else {
SVSJ5 = true;
}
}
}

protected final void initSVSJ6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSJ6 = false;
} else {
SVSJ6 = true;
}
}
}

protected final void initSVSK1(String s) {
if (!s.trim().isEmpty()) {
SVSK1 = Integer.parseInt(s);
} else {
SVSK1 = Integer.MIN_VALUE;
}
}

protected final void initSVSK2(String s) {
if (!s.trim().isEmpty()) {
SVSK2 = Integer.parseInt(s);
} else {
SVSK2 = Integer.MIN_VALUE;
}
}

protected final void initSVSK3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSK3 = false;
} else {
SVSK3 = true;
}
}
}

protected final void initSVSK4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSK4 = false;
} else {
SVSK4 = true;
}
}
}

protected final void initSVSK5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSK5 = false;
} else {
SVSK5 = true;
}
}
}

protected final void initSVSK6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
SVSK6 = false;
} else {
SVSK6 = true;
}
}
}

protected final void initTRAINANY(String s) {
if (!s.trim().isEmpty()) {
TRAINANY = Byte.parseByte(s);
} else {
TRAINANY = Byte.MIN_VALUE;
}
}

protected final void initTRAINDAYS1(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS1 = Short.parseShort(s);
} else {
TRAINDAYS1 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS2(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS2 = Short.parseShort(s);
} else {
TRAINDAYS2 = Short.MIN_VALUE;
}
}

protected final void initTRAINDAYS3(String s) {
if (!s.trim().isEmpty()) {
TRAINDAYS3 = Short.parseShort(s);
} else {
TRAINDAYS3 = Short.MIN_VALUE;
}
}

protected final void initTRAINEND1(String s) {
if (!s.trim().isEmpty()) {
TRAINEND1 = Byte.parseByte(s);
} else {
TRAINEND1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND2(String s) {
if (!s.trim().isEmpty()) {
TRAINEND2 = Byte.parseByte(s);
} else {
TRAINEND2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINEND3(String s) {
if (!s.trim().isEmpty()) {
TRAINEND3 = Byte.parseByte(s);
} else {
TRAINEND3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS1(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS1 = Byte.parseByte(s);
} else {
TRAINHRS1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS2(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS2 = Byte.parseByte(s);
} else {
TRAINHRS2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINHRS3(String s) {
if (!s.trim().isEmpty()) {
TRAINHRS3 = Byte.parseByte(s);
} else {
TRAINHRS3 = Byte.MIN_VALUE;
}
}

protected final void initTRAINN(String s) {
if (!s.trim().isEmpty()) {
TRAINN = Byte.parseByte(s);
} else {
TRAINN = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP11(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP11 = Byte.parseByte(s);
} else {
TRAINPURP11 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP12(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP12 = Byte.parseByte(s);
} else {
TRAINPURP12 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP13(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP13 = Byte.parseByte(s);
} else {
TRAINPURP13 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP21(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP21 = Byte.parseByte(s);
} else {
TRAINPURP21 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP22(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP22 = Byte.parseByte(s);
} else {
TRAINPURP22 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP23(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP23 = Byte.parseByte(s);
} else {
TRAINPURP23 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP31(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP31 = Byte.parseByte(s);
} else {
TRAINPURP31 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP32(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP32 = Byte.parseByte(s);
} else {
TRAINPURP32 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP33(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP33 = Byte.parseByte(s);
} else {
TRAINPURP33 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP41(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP41 = Byte.parseByte(s);
} else {
TRAINPURP41 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP42(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP42 = Byte.parseByte(s);
} else {
TRAINPURP42 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP43(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP43 = Byte.parseByte(s);
} else {
TRAINPURP43 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP51(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP51 = Byte.parseByte(s);
} else {
TRAINPURP51 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP52(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP52 = Byte.parseByte(s);
} else {
TRAINPURP52 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP53(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP53 = Byte.parseByte(s);
} else {
TRAINPURP53 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP61(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP61 = Byte.parseByte(s);
} else {
TRAINPURP61 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP62(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP62 = Byte.parseByte(s);
} else {
TRAINPURP62 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP63(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP63 = Byte.parseByte(s);
} else {
TRAINPURP63 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP71(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP71 = Byte.parseByte(s);
} else {
TRAINPURP71 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP72(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP72 = Byte.parseByte(s);
} else {
TRAINPURP72 = Byte.MIN_VALUE;
}
}

protected final void initTRAINPURP73(String s) {
if (!s.trim().isEmpty()) {
TRAINPURP73 = Byte.parseByte(s);
} else {
TRAINPURP73 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL1 = Byte.parseByte(s);
} else {
TRAINQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL2 = Byte.parseByte(s);
} else {
TRAINQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRAINQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRAINQUAL3 = Byte.parseByte(s);
} else {
TRAINQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRBIKEFQ(String s) {
if (!s.trim().isEmpty()) {
TRBIKEFQ = Byte.parseByte(s);
} else {
TRBIKEFQ = Byte.MIN_VALUE;
}
}

protected final void initTRBUSFQ(String s) {
if (!s.trim().isEmpty()) {
TRBUSFQ = Byte.parseByte(s);
} else {
TRBUSFQ = Byte.MIN_VALUE;
}
}

protected final void initTRCARFQ(String s) {
if (!s.trim().isEmpty()) {
TRCARFQ = Byte.parseByte(s);
} else {
TRCARFQ = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL1(String s) {
if (!s.trim().isEmpty()) {
TRQUAL1 = Byte.parseByte(s);
} else {
TRQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL10(String s) {
if (!s.trim().isEmpty()) {
TRQUAL10 = Byte.parseByte(s);
} else {
TRQUAL10 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL11(String s) {
if (!s.trim().isEmpty()) {
TRQUAL11 = Byte.parseByte(s);
} else {
TRQUAL11 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL13(String s) {
if (!s.trim().isEmpty()) {
TRQUAL13 = Byte.parseByte(s);
} else {
TRQUAL13 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL15(String s) {
if (!s.trim().isEmpty()) {
TRQUAL15 = Byte.parseByte(s);
} else {
TRQUAL15 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL16(String s) {
if (!s.trim().isEmpty()) {
TRQUAL16 = Byte.parseByte(s);
} else {
TRQUAL16 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL17(String s) {
if (!s.trim().isEmpty()) {
TRQUAL17 = Byte.parseByte(s);
} else {
TRQUAL17 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL18(String s) {
if (!s.trim().isEmpty()) {
TRQUAL18 = Byte.parseByte(s);
} else {
TRQUAL18 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL19(String s) {
if (!s.trim().isEmpty()) {
TRQUAL19 = Byte.parseByte(s);
} else {
TRQUAL19 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL2(String s) {
if (!s.trim().isEmpty()) {
TRQUAL2 = Byte.parseByte(s);
} else {
TRQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL20(String s) {
if (!s.trim().isEmpty()) {
TRQUAL20 = Byte.parseByte(s);
} else {
TRQUAL20 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL21(String s) {
if (!s.trim().isEmpty()) {
TRQUAL21 = Byte.parseByte(s);
} else {
TRQUAL21 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL22(String s) {
if (!s.trim().isEmpty()) {
TRQUAL22 = Byte.parseByte(s);
} else {
TRQUAL22 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL23(String s) {
if (!s.trim().isEmpty()) {
TRQUAL23 = Byte.parseByte(s);
} else {
TRQUAL23 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL24(String s) {
if (!s.trim().isEmpty()) {
TRQUAL24 = Byte.parseByte(s);
} else {
TRQUAL24 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL25(String s) {
if (!s.trim().isEmpty()) {
TRQUAL25 = Byte.parseByte(s);
} else {
TRQUAL25 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL26(String s) {
if (!s.trim().isEmpty()) {
TRQUAL26 = Byte.parseByte(s);
} else {
TRQUAL26 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL27(String s) {
if (!s.trim().isEmpty()) {
TRQUAL27 = Byte.parseByte(s);
} else {
TRQUAL27 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL28(String s) {
if (!s.trim().isEmpty()) {
TRQUAL28 = Byte.parseByte(s);
} else {
TRQUAL28 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL29(String s) {
if (!s.trim().isEmpty()) {
TRQUAL29 = Byte.parseByte(s);
} else {
TRQUAL29 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL3(String s) {
if (!s.trim().isEmpty()) {
TRQUAL3 = Byte.parseByte(s);
} else {
TRQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL30(String s) {
if (!s.trim().isEmpty()) {
TRQUAL30 = Byte.parseByte(s);
} else {
TRQUAL30 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL31(String s) {
if (!s.trim().isEmpty()) {
TRQUAL31 = Byte.parseByte(s);
} else {
TRQUAL31 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL32(String s) {
if (!s.trim().isEmpty()) {
TRQUAL32 = Byte.parseByte(s);
} else {
TRQUAL32 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL33(String s) {
if (!s.trim().isEmpty()) {
TRQUAL33 = Byte.parseByte(s);
} else {
TRQUAL33 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL34(String s) {
if (!s.trim().isEmpty()) {
TRQUAL34 = Byte.parseByte(s);
} else {
TRQUAL34 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL4(String s) {
if (!s.trim().isEmpty()) {
TRQUAL4 = Byte.parseByte(s);
} else {
TRQUAL4 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL5(String s) {
if (!s.trim().isEmpty()) {
TRQUAL5 = Byte.parseByte(s);
} else {
TRQUAL5 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL6(String s) {
if (!s.trim().isEmpty()) {
TRQUAL6 = Byte.parseByte(s);
} else {
TRQUAL6 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL7(String s) {
if (!s.trim().isEmpty()) {
TRQUAL7 = Byte.parseByte(s);
} else {
TRQUAL7 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL8(String s) {
if (!s.trim().isEmpty()) {
TRQUAL8 = Byte.parseByte(s);
} else {
TRQUAL8 = Byte.MIN_VALUE;
}
}

protected final void initTRQUAL9(String s) {
if (!s.trim().isEmpty()) {
TRQUAL9 = Byte.parseByte(s);
} else {
TRQUAL9 = Byte.MIN_VALUE;
}
}

protected final void initTRTRNFQ(String s) {
if (!s.trim().isEmpty()) {
TRTRNFQ = Byte.parseByte(s);
} else {
TRTRNFQ = Byte.MIN_VALUE;
}
}

protected final void initTRWHO1(String s) {
if (!s.trim().isEmpty()) {
TRWHO1 = Byte.parseByte(s);
} else {
TRWHO1 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO2(String s) {
if (!s.trim().isEmpty()) {
TRWHO2 = Byte.parseByte(s);
} else {
TRWHO2 = Byte.MIN_VALUE;
}
}

protected final void initTRWHO3(String s) {
if (!s.trim().isEmpty()) {
TRWHO3 = Byte.parseByte(s);
} else {
TRWHO3 = Byte.MIN_VALUE;
}
}

protected final void initTUIN1(String s) {
if (!s.trim().isEmpty()) {
TUIN1 = Short.parseShort(s);
} else {
TUIN1 = Short.MIN_VALUE;
}
}

protected final void initTUJBPL(String s) {
if (!s.trim().isEmpty()) {
TUJBPL = Short.parseShort(s);
} else {
TUJBPL = Short.MIN_VALUE;
}
}

protected final void initTWKCAR(String s) {
if (!s.trim().isEmpty()) {
TWKCAR = Byte.parseByte(s);
} else {
TWKCAR = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF1(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF1 = Byte.parseByte(s);
} else {
TWKDIFF1 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF2(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF2 = Byte.parseByte(s);
} else {
TWKDIFF2 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF3(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF3 = Byte.parseByte(s);
} else {
TWKDIFF3 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF4(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF4 = Byte.parseByte(s);
} else {
TWKDIFF4 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF5(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF5 = Byte.parseByte(s);
} else {
TWKDIFF5 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF6(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF6 = Byte.parseByte(s);
} else {
TWKDIFF6 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF7(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF7 = Byte.parseByte(s);
} else {
TWKDIFF7 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF8(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF8 = Byte.parseByte(s);
} else {
TWKDIFF8 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFF97(String s) {
if (!s.trim().isEmpty()) {
TWKDIFF97 = Byte.parseByte(s);
} else {
TWKDIFF97 = Byte.MIN_VALUE;
}
}

protected final void initTWKDIFFM(String s) {
if (!s.trim().isEmpty()) {
TWKDIFFM = Byte.parseByte(s);
} else {
TWKDIFFM = Byte.MIN_VALUE;
}
}

protected final void initUKBORN(String s) {
if (!s.trim().isEmpty()) {
UKBORN = Byte.parseByte(s);
} else {
UKBORN = Byte.MIN_VALUE;
}
}

protected final void initUNDQUS(String s) {
if (!s.trim().isEmpty()) {
UNDQUS = Byte.parseByte(s);
} else {
UNDQUS = Byte.MIN_VALUE;
}
}

protected final void initUNIFIN1(String s) {
if (!s.trim().isEmpty()) {
UNIFIN1 = Byte.parseByte(s);
} else {
UNIFIN1 = Byte.MIN_VALUE;
}
}

protected final void initUNISUB1(String s) {
if (!s.trim().isEmpty()) {
UNISUB1 = Byte.parseByte(s);
} else {
UNISUB1 = Byte.MIN_VALUE;
}
}

protected final void initUPSET(String s) {
if (!s.trim().isEmpty()) {
UPSET = Byte.parseByte(s);
} else {
UPSET = Byte.MIN_VALUE;
}
}

protected final void initURBAN_DV(String s) {
if (!s.trim().isEmpty()) {
URBAN_DV = Byte.parseByte(s);
} else {
URBAN_DV = Byte.MIN_VALUE;
}
}

protected final void initVOLFREQ(String s) {
if (!s.trim().isEmpty()) {
VOLFREQ = Byte.parseByte(s);
} else {
VOLFREQ = Byte.MIN_VALUE;
}
}

protected final void initVOLHRS(String s) {
if (!s.trim().isEmpty()) {
VOLHRS = Short.parseShort(s);
} else {
VOLHRS = Short.MIN_VALUE;
}
}

protected final void initVOLUN(String s) {
if (!s.trim().isEmpty()) {
VOLUN = Byte.parseByte(s);
} else {
VOLUN = Byte.MIN_VALUE;
}
}

protected final void initVOTE7(String s) {
if (!s.trim().isEmpty()) {
VOTE7 = Byte.parseByte(s);
} else {
VOTE7 = Byte.MIN_VALUE;
}
}

protected final void initVOTE8(String s) {
if (!s.trim().isEmpty()) {
VOTE8 = Byte.parseByte(s);
} else {
VOTE8 = Byte.MIN_VALUE;
}
}

protected final void initVOUCHLETTER(String s) {
if (!s.trim().isEmpty()) {
VOUCHLETTER = Byte.parseByte(s);
} else {
VOUCHLETTER = Byte.MIN_VALUE;
}
}

protected final void initWKAUT1(String s) {
if (!s.trim().isEmpty()) {
WKAUT1 = Byte.parseByte(s);
} else {
WKAUT1 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT2(String s) {
if (!s.trim().isEmpty()) {
WKAUT2 = Byte.parseByte(s);
} else {
WKAUT2 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT3(String s) {
if (!s.trim().isEmpty()) {
WKAUT3 = Byte.parseByte(s);
} else {
WKAUT3 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT4(String s) {
if (!s.trim().isEmpty()) {
WKAUT4 = Byte.parseByte(s);
} else {
WKAUT4 = Byte.MIN_VALUE;
}
}

protected final void initWKAUT5(String s) {
if (!s.trim().isEmpty()) {
WKAUT5 = Byte.parseByte(s);
} else {
WKAUT5 = Byte.MIN_VALUE;
}
}

protected final void initWKENDS(String s) {
if (!s.trim().isEmpty()) {
WKENDS = Byte.parseByte(s);
} else {
WKENDS = Byte.MIN_VALUE;
}
}

protected final void initWKPLSAM(String s) {
if (!s.trim().isEmpty()) {
WKPLSAM = Byte.parseByte(s);
} else {
WKPLSAM = Byte.MIN_VALUE;
}
}

protected final void initWKTIME(String s) {
if (!s.trim().isEmpty()) {
WKTIME = Short.parseShort(s);
} else {
WKTIME = Short.MIN_VALUE;
}
}

protected final void initWORKDIS(String s) {
if (!s.trim().isEmpty()) {
WORKDIS = Short.parseShort(s);
} else {
WORKDIS = Short.MIN_VALUE;
}
}

protected final void initWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
WORKTRAV = Byte.parseByte(s);
} else {
WORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initXPBORROW(String s) {
if (!s.trim().isEmpty()) {
XPBORROW = Integer.parseInt(s);
} else {
XPBORROW = Integer.MIN_VALUE;
}
}

protected final void initXPEARN1(String s) {
if (!s.trim().isEmpty()) {
XPEARN1 = Integer.parseInt(s);
} else {
XPEARN1 = Integer.MIN_VALUE;
}
}

protected final void initXPEARN1DK(String s) {
if (!s.trim().isEmpty()) {
XPEARN1DK = Byte.parseByte(s);
} else {
XPEARN1DK = Byte.MIN_VALUE;
}
}

protected final void initXPEARN3(String s) {
if (!s.trim().isEmpty()) {
XPEARN3 = Integer.parseInt(s);
} else {
XPEARN3 = Integer.MIN_VALUE;
}
}

protected final void initXPEARN3DK(String s) {
if (!s.trim().isEmpty()) {
XPEARN3DK = Byte.parseByte(s);
} else {
XPEARN3DK = Byte.MIN_VALUE;
}
}

protected final void initXPEARNG1(String s) {
if (!s.trim().isEmpty()) {
XPEARNG1 = Integer.parseInt(s);
} else {
XPEARNG1 = Integer.MIN_VALUE;
}
}

protected final void initXPEARNG1DK(String s) {
if (!s.trim().isEmpty()) {
XPEARNG1DK = Byte.parseByte(s);
} else {
XPEARNG1DK = Byte.MIN_VALUE;
}
}

protected final void initXPEARNG3(String s) {
if (!s.trim().isEmpty()) {
XPEARNG3 = Integer.parseInt(s);
} else {
XPEARNG3 = Integer.MIN_VALUE;
}
}

protected final void initXPEARNG3DK(String s) {
if (!s.trim().isEmpty()) {
XPEARNG3DK = Byte.parseByte(s);
} else {
XPEARNG3DK = Byte.MIN_VALUE;
}
}

protected final void initXPMOVE(String s) {
if (!s.trim().isEmpty()) {
XPMOVE = Byte.parseByte(s);
} else {
XPMOVE = Byte.MIN_VALUE;
}
}

protected final void initXPMVMNTH(String s) {
if (!s.trim().isEmpty()) {
XPMVMNTH = Byte.parseByte(s);
} else {
XPMVMNTH = Byte.MIN_VALUE;
}
}

protected final void initXPMVWHN(String s) {
if (!s.trim().isEmpty()) {
XPMVWHN = Byte.parseByte(s);
} else {
XPMVWHN = Byte.MIN_VALUE;
}
}

protected final void initXPMVWHR(String s) {
if (!s.trim().isEmpty()) {
XPMVWHR = Byte.parseByte(s);
} else {
XPMVWHR = Byte.MIN_VALUE;
}
}

protected final void initXPMVYR(String s) {
if (!s.trim().isEmpty()) {
XPMVYR = Short.parseShort(s);
} else {
XPMVYR = Short.MIN_VALUE;
}
}

protected final void initXPTUITION(String s) {
if (!s.trim().isEmpty()) {
XPTUITION = Integer.parseInt(s);
} else {
XPTUITION = Integer.MIN_VALUE;
}
}

protected final void initXTRA5MINOSM_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MINOSM_DV = Byte.parseByte(s);
} else {
XTRA5MINOSM_DV = Byte.MIN_VALUE;
}
}

protected final void initXTRA5MIN_DV(String s) {
if (!s.trim().isEmpty()) {
XTRA5MIN_DV = Byte.parseByte(s);
} else {
XTRA5MIN_DV = Byte.MIN_VALUE;
}
}

protected final void initYAFUTA(String s) {
if (!s.trim().isEmpty()) {
YAFUTA = Byte.parseByte(s);
} else {
YAFUTA = Byte.MIN_VALUE;
}
}

protected final void initYAFUTB(String s) {
if (!s.trim().isEmpty()) {
YAFUTB = Byte.parseByte(s);
} else {
YAFUTB = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV1(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV1 = Byte.parseByte(s);
} else {
YAJBSRV1 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV2(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV2 = Byte.parseByte(s);
} else {
YAJBSRV2 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV3(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV3 = Byte.parseByte(s);
} else {
YAJBSRV3 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV4(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV4 = Byte.parseByte(s);
} else {
YAJBSRV4 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV5(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV5 = Byte.parseByte(s);
} else {
YAJBSRV5 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV7(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV7 = Byte.parseByte(s);
} else {
YAJBSRV7 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV8(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV8 = Byte.parseByte(s);
} else {
YAJBSRV8 = Byte.MIN_VALUE;
}
}

protected final void initYAJBSRV96(String s) {
if (!s.trim().isEmpty()) {
YAJBSRV96 = Byte.parseByte(s);
} else {
YAJBSRV96 = Byte.MIN_VALUE;
}
}

protected final void initYANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
YANSSEC5_DV = Byte.parseByte(s);
} else {
YANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initYASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC00_CC = Short.parseShort(s);
} else {
YASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC10_CC = Short.parseShort(s);
} else {
YASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initYASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
YASOC90_CC = Byte.parseByte(s);
} else {
YASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE1(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE1 = Byte.parseByte(s);
} else {
YNOTBIKE1 = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE2(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE2 = Byte.parseByte(s);
} else {
YNOTBIKE2 = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE3(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE3 = Byte.parseByte(s);
} else {
YNOTBIKE3 = Byte.MIN_VALUE;
}
}

protected final void initYNOTBIKE96(String s) {
if (!s.trim().isEmpty()) {
YNOTBIKE96 = Byte.parseByte(s);
} else {
YNOTBIKE96 = Byte.MIN_VALUE;
}
}

protected final void initYPAMAR(String s) {
if (!s.trim().isEmpty()) {
YPAMAR = Byte.parseByte(s);
} else {
YPAMAR = Byte.MIN_VALUE;
}
}

protected final void initYPAPAR(String s) {
if (!s.trim().isEmpty()) {
YPAPAR = Byte.parseByte(s);
} else {
YPAPAR = Byte.MIN_VALUE;
}
}

protected final void initYPESTA(String s) {
if (!s.trim().isEmpty()) {
YPESTA = Byte.parseByte(s);
} else {
YPESTA = Byte.MIN_VALUE;
}
}

protected final void initYPESTB(String s) {
if (!s.trim().isEmpty()) {
YPESTB = Byte.parseByte(s);
} else {
YPESTB = Byte.MIN_VALUE;
}
}

protected final void initYPESTC(String s) {
if (!s.trim().isEmpty()) {
YPESTC = Byte.parseByte(s);
} else {
YPESTC = Byte.MIN_VALUE;
}
}

protected final void initYPESTE(String s) {
if (!s.trim().isEmpty()) {
YPESTE = Byte.parseByte(s);
} else {
YPESTE = Byte.MIN_VALUE;
}
}

protected final void initYPESTF(String s) {
if (!s.trim().isEmpty()) {
YPESTF = Byte.parseByte(s);
} else {
YPESTF = Byte.MIN_VALUE;
}
}

protected final void initYPESTI(String s) {
if (!s.trim().isEmpty()) {
YPESTI = Byte.parseByte(s);
} else {
YPESTI = Byte.MIN_VALUE;
}
}

protected final void initYPESTJ(String s) {
if (!s.trim().isEmpty()) {
YPESTJ = Byte.parseByte(s);
} else {
YPESTJ = Byte.MIN_VALUE;
}
}

protected final void initYPESTK(String s) {
if (!s.trim().isEmpty()) {
YPESTK = Byte.parseByte(s);
} else {
YPESTK = Byte.MIN_VALUE;
}
}

protected final void initYPNETCHT(String s) {
if (!s.trim().isEmpty()) {
YPNETCHT = Byte.parseByte(s);
} else {
YPNETCHT = Byte.MIN_VALUE;
}
}

protected final void initYPNPAL(String s) {
if (!s.trim().isEmpty()) {
YPNPAL = Byte.parseByte(s);
} else {
YPNPAL = Byte.MIN_VALUE;
}
}

protected final void initYPSOCWEB(String s) {
if (!s.trim().isEmpty()) {
YPSOCWEB = Byte.parseByte(s);
} else {
YPSOCWEB = Byte.MIN_VALUE;
}
}

public byte getADCTS() {
return ADCTS;
}

public byte getAEDROF1() {
return AEDROF1;
}

public byte getAEDROF2() {
return AEDROF2;
}

public byte getAEDROF3() {
return AEDROF3;
}

public byte getAEDROF4() {
return AEDROF4;
}

protected double AEPUDA1() {
return AEPUDA1;
}

public byte getAEPUDA2() {
return AEPUDA2;
}

public byte getAEPUDA3() {
return AEPUDA3;
}

public byte getAEPUDA4() {
return AEPUDA4;
}

public byte getAEPUWK1() {
return AEPUWK1;
}

public byte getAEPUWK2() {
return AEPUWK2;
}

public byte getAEPUWK3() {
return AEPUWK3;
}

public byte getAEPUWK4() {
return AEPUWK4;
}

public byte getAGEGR10_DV() {
return AGEGR10_DV;
}

public byte getAGEGR13_DV() {
return AGEGR13_DV;
}

public byte getAGEGR5_DV() {
return AGEGR5_DV;
}

public byte getAGERET() {
return AGERET;
}

public short getAGE_DV() {
return AGE_DV;
}

public byte getAHVWELL() {
return AHVWELL;
}

public byte getAIDEFT() {
return AIDEFT;
}

public short getAIDHU1() {
return AIDHU1;
}

public short getAIDHU2() {
return AIDHU2;
}

public byte getAIDHUA1() {
return AIDHUA1;
}

public byte getAIDHUA10() {
return AIDHUA10;
}

public byte getAIDHUA11() {
return AIDHUA11;
}

public byte getAIDHUA12() {
return AIDHUA12;
}

public byte getAIDHUA13() {
return AIDHUA13;
}

public byte getAIDHUA14() {
return AIDHUA14;
}

public byte getAIDHUA15() {
return AIDHUA15;
}

public byte getAIDHUA16() {
return AIDHUA16;
}

public byte getAIDHUA2() {
return AIDHUA2;
}

public byte getAIDHUA3() {
return AIDHUA3;
}

public byte getAIDHUA4() {
return AIDHUA4;
}

public byte getAIDHUA5() {
return AIDHUA5;
}

public byte getAIDHUA6() {
return AIDHUA6;
}

public byte getAIDHUA7() {
return AIDHUA7;
}

public byte getAIDHUA8() {
return AIDHUA8;
}

public byte getAIDHUA9() {
return AIDHUA9;
}

public byte getAREA() {
return AREA;
}

public byte getBASNSET() {
return BASNSET;
}

protected double BASRATE() {
return BASRATE;
}

public byte getBASREST() {
return BASREST;
}

public byte getBENBASE1() {
return BENBASE1;
}

public byte getBENBASE2() {
return BENBASE2;
}

public byte getBENBASE3() {
return BENBASE3;
}

public byte getBENBASE4() {
return BENBASE4;
}

public byte getBENBASE96() {
return BENBASE96;
}

public byte getBENCTC() {
return BENCTC;
}

public byte getBENDIS1() {
return BENDIS1;
}

public byte getBENDIS10() {
return BENDIS10;
}

public byte getBENDIS12() {
return BENDIS12;
}

public byte getBENDIS2() {
return BENDIS2;
}

public byte getBENDIS3() {
return BENDIS3;
}

public byte getBENDIS4() {
return BENDIS4;
}

public byte getBENDIS5() {
return BENDIS5;
}

public byte getBENDIS7() {
return BENDIS7;
}

public byte getBENDIS8() {
return BENDIS8;
}

public byte getBENDIS96() {
return BENDIS96;
}

public byte getBENDIS97() {
return BENDIS97;
}

public byte getBENESA() {
return BENESA;
}

public byte getBENPEN1() {
return BENPEN1;
}

public byte getBENPEN2() {
return BENPEN2;
}

public byte getBENPEN3() {
return BENPEN3;
}

public byte getBENPEN4() {
return BENPEN4;
}

public byte getBENPEN5() {
return BENPEN5;
}

public byte getBENPEN6() {
return BENPEN6;
}

public byte getBENPEN7() {
return BENPEN7;
}

public byte getBENPEN8() {
return BENPEN8;
}

public byte getBENPEN96() {
return BENPEN96;
}

public byte getBENSTA2() {
return BENSTA2;
}

public byte getBENSTA3() {
return BENSTA3;
}

public byte getBENSTA4() {
return BENSTA4;
}

public byte getBENSTA5() {
return BENSTA5;
}

public byte getBENSTA6() {
return BENSTA6;
}

public byte getBENSTA7() {
return BENSTA7;
}

public byte getBENSTA96() {
return BENSTA96;
}

public byte getBENSTA97() {
return BENSTA97;
}

public short getBIRTHY() {
return BIRTHY;
}

public byte getBUNO_DV() {
return BUNO_DV;
}

public byte getCARBUY1() {
return CARBUY1;
}

public byte getCARBUY10() {
return CARBUY10;
}

public byte getCARBUY11() {
return CARBUY11;
}

public byte getCARBUY12() {
return CARBUY12;
}

public byte getCARBUY2() {
return CARBUY2;
}

public byte getCARBUY3() {
return CARBUY3;
}

public byte getCARBUY4() {
return CARBUY4;
}

public byte getCARBUY5() {
return CARBUY5;
}

public byte getCARBUY6() {
return CARBUY6;
}

public byte getCARBUY7() {
return CARBUY7;
}

public byte getCARBUY8() {
return CARBUY8;
}

public byte getCARBUY9() {
return CARBUY9;
}

public byte getCARBUY97() {
return CARBUY97;
}

public byte getCARSRV1() {
return CARSRV1;
}

public byte getCARSRV2() {
return CARSRV2;
}

public byte getCARSRV3() {
return CARSRV3;
}

public byte getCASCH() {
return CASCH;
}

public int getCASIINTNO() {
return CASIINTNO;
}

public int getCCAMTJT() {
return CCAMTJT;
}

public int getCCAMTSOLE() {
return CCAMTSOLE;
}

public byte getCCARE() {
return CCARE;
}

public byte getCCBILLJT() {
return CCBILLJT;
}

public byte getCCBILLSOLE() {
return CCBILLSOLE;
}

public byte getCCJT() {
return CCJT;
}

public byte getCCJTP0() {
return CCJTP0;
}

public byte getCCJTP1() {
return CCJTP1;
}

public byte getCCJTP10() {
return CCJTP10;
}

public byte getCCJTP11() {
return CCJTP11;
}

public byte getCCJTP12() {
return CCJTP12;
}

public byte getCCJTP13() {
return CCJTP13;
}

public byte getCCJTP14() {
return CCJTP14;
}

public byte getCCJTP15() {
return CCJTP15;
}

public byte getCCJTP16() {
return CCJTP16;
}

public byte getCCJTP2() {
return CCJTP2;
}

public byte getCCJTP3() {
return CCJTP3;
}

public byte getCCJTP4() {
return CCJTP4;
}

public byte getCCJTP5() {
return CCJTP5;
}

public byte getCCJTP6() {
return CCJTP6;
}

public byte getCCJTP7() {
return CCJTP7;
}

public byte getCCJTP8() {
return CCJTP8;
}

public byte getCCJTP9() {
return CCJTP9;
}

public byte getCCSOLE() {
return CCSOLE;
}

public byte getCCWORK() {
return CCWORK;
}

public short getCH1BY4() {
return CH1BY4;
}

public short getCHARAM() {
return CHARAM;
}

public byte getCHARFREQ() {
return CHARFREQ;
}

public byte getCHARGV() {
return CHARGV;
}

public byte getCHILDPNO() {
return CHILDPNO;
}

public byte getCHKRESP1() {
return CHKRESP1;
}

public byte getCHKRESP2() {
return CHKRESP2;
}

public byte getCHKRESP3() {
return CHKRESP3;
}

public byte getCHKRESP4() {
return CHKRESP4;
}

public byte getCHKRESPWEB1() {
return CHKRESPWEB1;
}

public byte getCHKRESPWEB2() {
return CHKRESPWEB2;
}

public byte getCHKRESPWEB3() {
return CHKRESPWEB3;
}

public byte getCHKRESPWEB4() {
return CHKRESPWEB4;
}

public byte getCHKWEBDOBD() {
return CHKWEBDOBD;
}

public byte getCHKWEBDOBM() {
return CHKWEBDOBM;
}

public short getCHKWEBDOBY() {
return CHKWEBDOBY;
}

public byte getCHKWEBSEX() {
return CHKWEBSEX;
}

public byte getCITZN1() {
return CITZN1;
}

public byte getCITZN2() {
return CITZN2;
}

public byte getCITZN3() {
return CITZN3;
}

public byte getCJBATT() {
return CJBATT;
}

public byte getCJOB() {
return CJOB;
}

public byte getCMLSTAT1() {
return CMLSTAT1;
}

public byte getCMLSTAT2() {
return CMLSTAT2;
}

public byte getCMLSTAT3() {
return CMLSTAT3;
}

public byte getCMLSTAT4() {
return CMLSTAT4;
}

public byte getCMLSTAT5() {
return CMLSTAT5;
}

public byte getCOH1BM() {
return COH1BM;
}

public short getCOH1BY() {
return COH1BY;
}

public byte getCOH1EM() {
return COH1EM;
}

public short getCOH1EY() {
return COH1EY;
}

public byte getCOH1MR() {
return COH1MR;
}

public byte getCOHAB() {
return COHAB;
}

public byte getCOHABN() {
return COHABN;
}

public boolean getCOHAB_DV() {
return COHAB_DV;
}

public byte getCONTFT() {
return CONTFT;
}

public byte getCOOPNXTYR() {
return COOPNXTYR;
}

public byte getCOUNTRY() {
return COUNTRY;
}

public int getCREDJT() {
return CREDJT;
}

public int getCREDSOLE() {
return CREDSOLE;
}

public byte getCSTAT() {
return CSTAT;
}

public byte getCTADD1_CODE() {
return CTADD1_CODE;
}

public byte getCTADD2_CODE() {
return CTADD2_CODE;
}

public byte getCTCNTY_CODE() {
return CTCNTY_CODE;
}

public byte getCTCONSCONF1() {
return CTCONSCONF1;
}

public byte getCTCONSCONF2() {
return CTCONSCONF2;
}

public byte getCTCONSCONF3() {
return CTCONSCONF3;
}

public byte getCTCONSCONF4() {
return CTCONSCONF4;
}

public byte getCTCONSCONF5() {
return CTCONSCONF5;
}

public byte getCTCONSCONF6() {
return CTCONSCONF6;
}

public byte getCTCONSCONF7() {
return CTCONSCONF7;
}

public byte getCTCONSCONF8() {
return CTCONSCONF8;
}

public byte getCTCONSCONF94() {
return CTCONSCONF94;
}

public byte getCTCONSCONF95() {
return CTCONSCONF95;
}

public byte getCTEMAIL_CODE() {
return CTEMAIL_CODE;
}

public byte getCTPCODE_CODE() {
return CTPCODE_CODE;
}

public byte getCTREL() {
return CTREL;
}

public byte getCTTEL1_CODE() {
return CTTEL1_CODE;
}

public byte getCTTEL2_CODE() {
return CTTEL2_CODE;
}

public byte getCTTOWN_CODE() {
return CTTOWN_CODE;
}

public byte getCURRJOB1() {
return CURRJOB1;
}

public byte getCURRJOB2() {
return CURRJOB2;
}

public byte getCURRJOB3() {
return CURRJOB3;
}

public byte getCURRJOB4() {
return CURRJOB4;
}

public byte getCURRJOB5() {
return CURRJOB5;
}

public byte getCURRJOB6() {
return CURRJOB6;
}

public byte getCURRJOB7() {
return CURRJOB7;
}

public byte getCURRJOB8() {
return CURRJOB8;
}

public byte getCURRJOB9() {
return CURRJOB9;
}

public byte getCURRMSTAT() {
return CURRMSTAT;
}

public byte getCURRPART1() {
return CURRPART1;
}

public byte getCURRPART2() {
return CURRPART2;
}

public byte getCURRPART3() {
return CURRPART3;
}

public byte getCURRPART4() {
return CURRPART4;
}

public byte getCURRPART5() {
return CURRPART5;
}

public boolean getCURRPART6() {
return CURRPART6;
}

public boolean getCURRPART7() {
return CURRPART7;
}

public byte getCURRSTAT1() {
return CURRSTAT1;
}

public byte getCURRSTAT2() {
return CURRSTAT2;
}

public byte getCURRSTAT3() {
return CURRSTAT3;
}

public byte getCURRSTAT4() {
return CURRSTAT4;
}

public byte getCURRSTAT5() {
return CURRSTAT5;
}

public byte getCURRSTAT6() {
return CURRSTAT6;
}

public byte getCURRSTAT7() {
return CURRSTAT7;
}

public byte getCURRSTAT8() {
return CURRSTAT8;
}

public boolean getCURRSTAT9() {
return CURRSTAT9;
}

public short getDCDOBY() {
return DCDOBY;
}

public byte getDCSEX() {
return DCSEX;
}

public byte getDEBT1() {
return DEBT1;
}

public byte getDEBT2() {
return DEBT2;
}

public byte getDEBT4() {
return DEBT4;
}

public byte getDEBT5() {
return DEBT5;
}

public byte getDEBT6() {
return DEBT6;
}

public byte getDEBT7() {
return DEBT7;
}

public byte getDEBT8() {
return DEBT8;
}

public byte getDEBT96() {
return DEBT96;
}

public byte getDEBT97() {
return DEBT97;
}

public byte getDEBTC1() {
return DEBTC1;
}

public byte getDEBTC2() {
return DEBTC2;
}

public byte getDEBTC3() {
return DEBTC3;
}

public byte getDEBTC4() {
return DEBTC4;
}

public byte getDEBTC5() {
return DEBTC5;
}

public byte getDEBTPN0() {
return DEBTPN0;
}

public byte getDEBTPN1() {
return DEBTPN1;
}

public byte getDEBTPN10() {
return DEBTPN10;
}

public byte getDEBTPN11() {
return DEBTPN11;
}

public byte getDEBTPN12() {
return DEBTPN12;
}

public byte getDEBTPN13() {
return DEBTPN13;
}

public byte getDEBTPN14() {
return DEBTPN14;
}

public byte getDEBTPN15() {
return DEBTPN15;
}

public byte getDEBTPN16() {
return DEBTPN16;
}

public byte getDEBTPN2() {
return DEBTPN2;
}

public byte getDEBTPN3() {
return DEBTPN3;
}

public byte getDEBTPN4() {
return DEBTPN4;
}

public byte getDEBTPN5() {
return DEBTPN5;
}

public byte getDEBTPN6() {
return DEBTPN6;
}

public byte getDEBTPN7() {
return DEBTPN7;
}

public byte getDEBTPN8() {
return DEBTPN8;
}

public byte getDEBTPN9() {
return DEBTPN9;
}

public byte getDEBTSJ() {
return DEBTSJ;
}

public int getDEBTSK() {
return DEBTSK;
}

public int getDEBTY() {
return DEBTY;
}

public boolean getDEPCHL_DV() {
return DEPCHL_DV;
}

public byte getDEPENTH1() {
return DEPENTH1;
}

public byte getDEPENTH2() {
return DEPENTH2;
}

public byte getDEPENTH3() {
return DEPENTH3;
}

public byte getDEPENTH4() {
return DEPENTH4;
}

public byte getDEPENTH5() {
return DEPENTH5;
}

public byte getDEPENTH6() {
return DEPENTH6;
}

public byte getDETINC1() {
return DETINC1;
}

public byte getDETINC2() {
return DETINC2;
}

public byte getDETINC3() {
return DETINC3;
}

public byte getDETINC4() {
return DETINC4;
}

public byte getDETINC5() {
return DETINC5;
}

public byte getDETINC6() {
return DETINC6;
}

public byte getDISDIF1() {
return DISDIF1;
}

public byte getDISDIF10() {
return DISDIF10;
}

public byte getDISDIF11() {
return DISDIF11;
}

public byte getDISDIF12() {
return DISDIF12;
}

public byte getDISDIF2() {
return DISDIF2;
}

public byte getDISDIF3() {
return DISDIF3;
}

public byte getDISDIF4() {
return DISDIF4;
}

public byte getDISDIF5() {
return DISDIF5;
}

public byte getDISDIF6() {
return DISDIF6;
}

public byte getDISDIF7() {
return DISDIF7;
}

public byte getDISDIF8() {
return DISDIF8;
}

public byte getDISDIF9() {
return DISDIF9;
}

public byte getDISDIF96() {
return DISDIF96;
}

public byte getDISSEV1() {
return DISSEV1;
}

public byte getDISSEV10() {
return DISSEV10;
}

public byte getDISSEV11() {
return DISSEV11;
}

public byte getDISSEV12() {
return DISSEV12;
}

public byte getDISSEV2() {
return DISSEV2;
}

public byte getDISSEV3() {
return DISSEV3;
}

public byte getDISSEV4() {
return DISSEV4;
}

public byte getDISSEV5() {
return DISSEV5;
}

public byte getDISSEV6() {
return DISSEV6;
}

public byte getDISSEV7() {
return DISSEV7;
}

public byte getDISSEV8() {
return DISSEV8;
}

public byte getDISSEV9() {
return DISSEV9;
}

public byte getDIVCHK1() {
return DIVCHK1;
}

public byte getDIVCHK2() {
return DIVCHK2;
}

public byte getDIVCHK3() {
return DIVCHK3;
}

public byte getDIVCHK4() {
return DIVCHK4;
}

public boolean getDIVCHK5() {
return DIVCHK5;
}

public byte getDIVFIN1() {
return DIVFIN1;
}

public byte getDIVFIN2() {
return DIVFIN2;
}

public byte getDIVFIN3() {
return DIVFIN3;
}

public byte getDIVFIN4() {
return DIVFIN4;
}

public boolean getDIVFIN5() {
return DIVFIN5;
}

public byte getDKLM() {
return DKLM;
}

public short getDOBY_DV() {
return DOBY_DV;
}

public byte getDONEPROXY() {
return DONEPROXY;
}

public byte getDRGMJ() {
return DRGMJ;
}

public byte getDRGOTH() {
return DRGOTH;
}

public byte getDRGSOL() {
return DRGSOL;
}

public byte getDRIVE() {
return DRIVE;
}

public byte getDRNK4W() {
return DRNK4W;
}

public byte getDVAGE() {
return DVAGE;
}

public byte getDVM1() {
return DVM1;
}

public byte getDVM2() {
return DVM2;
}

public byte getDVM3() {
return DVM3;
}

public byte getDVM4() {
return DVM4;
}

public boolean getDVM5() {
return DVM5;
}

public short getDVY41() {
return DVY41;
}

public short getDVY42() {
return DVY42;
}

public byte getDVY43() {
return DVY43;
}

public byte getDVY44() {
return DVY44;
}

public boolean getDVY45() {
return DVY45;
}

public byte getEATLIVU() {
return EATLIVU;
}

public byte getECIGS() {
return ECIGS;
}

public byte getEDASP() {
return EDASP;
}

public short getEDTYPE() {
return EDTYPE;
}

public byte getEDUCATION() {
return EDUCATION;
}

public byte getEMPCHK() {
return EMPCHK;
}

public byte getEMPLOY() {
return EMPLOY;
}

public byte getEMPSTENDD() {
return EMPSTENDD;
}

public byte getEMPSTENDM() {
return EMPSTENDM;
}

public short getEMPSTENDY4() {
return EMPSTENDY4;
}

public byte getENDMNTH1() {
return ENDMNTH1;
}

public byte getENDMNTH2() {
return ENDMNTH2;
}

public byte getENDMNTH3() {
return ENDMNTH3;
}

public byte getENDMNTH4() {
return ENDMNTH4;
}

public short getEPROSH() {
return EPROSH;
}

public byte getETHCLOSE1() {
return ETHCLOSE1;
}

public byte getETHCLOSE10() {
return ETHCLOSE10;
}

public byte getETHCLOSE11() {
return ETHCLOSE11;
}

public byte getETHCLOSE2A() {
return ETHCLOSE2A;
}

public byte getETHCLOSE2B() {
return ETHCLOSE2B;
}

public byte getETHCLOSE3() {
return ETHCLOSE3;
}

public byte getETHCLOSE4A() {
return ETHCLOSE4A;
}

public byte getETHCLOSE4B() {
return ETHCLOSE4B;
}

public byte getETHCLOSE5() {
return ETHCLOSE5;
}

public byte getETHCLOSE6() {
return ETHCLOSE6;
}

public byte getETHCLOSE7() {
return ETHCLOSE7;
}

public byte getETHCLOSE8() {
return ETHCLOSE8;
}

public byte getETHCLOSE9() {
return ETHCLOSE9;
}

public byte getETHID10() {
return ETHID10;
}

public byte getETHID11() {
return ETHID11;
}

public byte getETHID12() {
return ETHID12;
}

public byte getETHID13() {
return ETHID13;
}

public byte getETHID14() {
return ETHID14;
}

public byte getETHID2() {
return ETHID2;
}

public byte getETHID3() {
return ETHID3;
}

public byte getETHID4A() {
return ETHID4A;
}

public byte getETHID4B() {
return ETHID4B;
}

public byte getETHID5() {
return ETHID5;
}

public byte getETHID6() {
return ETHID6;
}

public byte getETHID7() {
return ETHID7;
}

public byte getETHID8() {
return ETHID8;
}

public byte getETHID9() {
return ETHID9;
}

public byte getETHN_DV() {
return ETHN_DV;
}

public byte getEUMEM() {
return EUMEM;
}

public byte getEVRALC() {
return EVRALC;
}

protected double EXTRATE() {
return EXTRATE;
}

public byte getEXTREST() {
return EXTREST;
}

public byte getFAMILY() {
return FAMILY;
}

public byte getFAMSUP() {
return FAMSUP;
}

public byte getFATHER() {
return FATHER;
}

public byte getFENOW() {
return FENOW;
}

public byte getFENOW_CAWI() {
return FENOW_CAWI;
}

public byte getFF_BENTYPE01() {
return FF_BENTYPE01;
}

public byte getFF_BENTYPE02() {
return FF_BENTYPE02;
}

public byte getFF_BENTYPE03() {
return FF_BENTYPE03;
}

public byte getFF_BENTYPE04() {
return FF_BENTYPE04;
}

public byte getFF_BENTYPE05() {
return FF_BENTYPE05;
}

public byte getFF_BENTYPE06() {
return FF_BENTYPE06;
}

public byte getFF_BENTYPE07() {
return FF_BENTYPE07;
}

public byte getFF_BENTYPE08() {
return FF_BENTYPE08;
}

public byte getFF_BENTYPE09() {
return FF_BENTYPE09;
}

public byte getFF_BENTYPE10() {
return FF_BENTYPE10;
}

public byte getFF_BENTYPE11() {
return FF_BENTYPE11;
}

public byte getFF_BENTYPE12() {
return FF_BENTYPE12;
}

public byte getFF_BENTYPE13() {
return FF_BENTYPE13;
}

public byte getFF_BENTYPE14() {
return FF_BENTYPE14;
}

public byte getFF_BENTYPE15() {
return FF_BENTYPE15;
}

public byte getFF_BENTYPE16() {
return FF_BENTYPE16;
}

public byte getFF_BENTYPE17() {
return FF_BENTYPE17;
}

public byte getFF_BENTYPE18() {
return FF_BENTYPE18;
}

public byte getFF_BENTYPE19() {
return FF_BENTYPE19;
}

public byte getFF_BENTYPE20() {
return FF_BENTYPE20;
}

public byte getFF_BENTYPE21() {
return FF_BENTYPE21;
}

public byte getFF_BENTYPE22() {
return FF_BENTYPE22;
}

public byte getFF_BENTYPE23() {
return FF_BENTYPE23;
}

public byte getFF_BENTYPE24() {
return FF_BENTYPE24;
}

public byte getFF_BENTYPE25() {
return FF_BENTYPE25;
}

public byte getFF_BENTYPE26() {
return FF_BENTYPE26;
}

public byte getFF_BENTYPE27() {
return FF_BENTYPE27;
}

public byte getFF_BENTYPE28() {
return FF_BENTYPE28;
}

public byte getFF_BENTYPE29() {
return FF_BENTYPE29;
}

public byte getFF_BENTYPE30() {
return FF_BENTYPE30;
}

public byte getFF_BENTYPE31() {
return FF_BENTYPE31;
}

public byte getFF_BENTYPE32() {
return FF_BENTYPE32;
}

public byte getFF_BENTYPE33() {
return FF_BENTYPE33;
}

public byte getFF_BENTYPE34() {
return FF_BENTYPE34;
}

public byte getFF_BENTYPE35() {
return FF_BENTYPE35;
}

public byte getFF_BENTYPE36() {
return FF_BENTYPE36;
}

public byte getFF_BENTYPE37() {
return FF_BENTYPE37;
}

public byte getFF_BENTYPE38() {
return FF_BENTYPE38;
}

public byte getFF_BENTYPE39() {
return FF_BENTYPE39;
}

public byte getFF_BENTYPE40() {
return FF_BENTYPE40;
}

public byte getFF_BENTYPE41() {
return FF_BENTYPE41;
}

public byte getFF_EMPLW() {
return FF_EMPLW;
}

public byte getFF_IVINTLANG() {
return FF_IVINTLANG;
}

public byte getFF_IVLOLW() {
return FF_IVLOLW;
}

public byte getFF_JBMNGR() {
return FF_JBMNGR;
}

public byte getFF_JBSEMP() {
return FF_JBSEMP;
}

public byte getFF_JBSIZE() {
return FF_JBSIZE;
}

public byte getFF_JBSTAT() {
return FF_JBSTAT;
}

public byte getFF_OPRLG() {
return FF_OPRLG;
}

public byte getFF_OPRLG0() {
return FF_OPRLG0;
}

public byte getFF_OPRLG0NI() {
return FF_OPRLG0NI;
}

public byte getFF_OPRLG1() {
return FF_OPRLG1;
}

public short getFF_YR2UK4() {
return FF_YR2UK4;
}

protected double FIBENOTHR_DV() {
return FIBENOTHR_DV;
}

protected double FIBENOTHR_IF() {
return FIBENOTHR_IF;
}

public byte getFIBENOTHR_TC() {
return FIBENOTHR_TC;
}

protected double FIMNGRS_IF() {
return FIMNGRS_IF;
}

public byte getFIMNGRS_TC() {
return FIMNGRS_TC;
}

protected double FIMNINVNET_DV() {
return FIMNINVNET_DV;
}

protected double FIMNLABGRS_IF() {
return FIMNLABGRS_IF;
}

public byte getFIMNLABGRS_TC() {
return FIMNLABGRS_TC;
}

protected double FIMNLABNET_DV() {
return FIMNLABNET_DV;
}

public byte getFIMNLABNET_TC() {
return FIMNLABNET_TC;
}

protected double FIMNMISC_DV() {
return FIMNMISC_DV;
}

protected double FIMNNET_DV() {
return FIMNNET_DV;
}

protected double FIMNPEN_DV() {
return FIMNPEN_DV;
}

protected double FIMNPRBEN_DV() {
return FIMNPRBEN_DV;
}

protected double FIMNSBEN_DV() {
return FIMNSBEN_DV;
}

public byte getFINFUT() {
return FINFUT;
}

public byte getFIVEALCDR() {
return FIVEALCDR;
}

public byte getFIYRDB1() {
return FIYRDB1;
}

public byte getFIYRDB2() {
return FIYRDB2;
}

public byte getFIYRDB3() {
return FIYRDB3;
}

public byte getFIYRDB4() {
return FIYRDB4;
}

public byte getFIYRDB5() {
return FIYRDB5;
}

public byte getFIYRDB6() {
return FIYRDB6;
}

public int getFIYRDIA() {
return FIYRDIA;
}

protected double FIYRINVINC_DV() {
return FIYRINVINC_DV;
}

public byte getFIYRINVINC_IF() {
return FIYRINVINC_IF;
}

public byte getFIYRINVINC_TC() {
return FIYRINVINC_TC;
}

public int getFNPID() {
return FNPID;
}

public byte getFNPNO() {
return FNPNO;
}

public int getFNSPID() {
return FNSPID;
}

public byte getFNSPNO() {
return FNSPNO;
}

public byte getFOOD1() {
return FOOD1;
}

public byte getFOOD2() {
return FOOD2;
}

public byte getFOOD3() {
return FOOD3;
}

public byte getFOOD4() {
return FOOD4;
}

public byte getFOOD5() {
return FOOD5;
}

public byte getFOOD6() {
return FOOD6;
}

public byte getFOOD7() {
return FOOD7;
}

public byte getFRDRG() {
return FRDRG;
}

public byte getFT2ENDM1() {
return FT2ENDM1;
}

public byte getFT2ENDM2() {
return FT2ENDM2;
}

public short getFT2ENDY41() {
return FT2ENDY41;
}

public short getFT2ENDY42() {
return FT2ENDY42;
}

public byte getFTEDANY() {
return FTEDANY;
}

public byte getFTEDEND1() {
return FTEDEND1;
}

public byte getFTEDEND2() {
return FTEDEND2;
}

public byte getFTEDMOR1() {
return FTEDMOR1;
}

public byte getFTEDMOR2() {
return FTEDMOR2;
}

public byte getFTEDSTARTM1() {
return FTEDSTARTM1;
}

public byte getFTEDSTARTM2() {
return FTEDSTARTM2;
}

public short getFTEDSTARTY41() {
return FTEDSTARTY41;
}

public short getFTEDSTARTY42() {
return FTEDSTARTY42;
}

public byte getFTENDM() {
return FTENDM;
}

public short getFTENDY4() {
return FTENDY4;
}

public byte getFTQUALS() {
return FTQUALS;
}

public byte getGCSE5() {
return GCSE5;
}

public byte getGCSEENG() {
return GCSEENG;
}

public byte getGCSEENGALPHA() {
return GCSEENGALPHA;
}

public byte getGCSEENGE() {
return GCSEENGE;
}

public byte getGCSEENGNUM() {
return GCSEENGNUM;
}

public byte getGCSEENGW() {
return GCSEENGW;
}

public byte getGCSEMAT() {
return GCSEMAT;
}

public byte getGCSEMATALPHA() {
return GCSEMATALPHA;
}

public byte getGCSEMATE() {
return GCSEMATE;
}

public byte getGCSEMATNUM() {
return GCSEMATNUM;
}

public byte getGCSEMATW() {
return GCSEMATW;
}

public int getGRFPID() {
return GRFPID;
}

public byte getGRFPNO() {
return GRFPNO;
}

public int getGRMPID() {
return GRMPID;
}

public byte getGRMPNO() {
return GRMPNO;
}

public byte getHASEMAIL() {
return HASEMAIL;
}

public byte getHCOND1() {
return HCOND1;
}

public byte getHCOND10() {
return HCOND10;
}

public byte getHCOND11() {
return HCOND11;
}

public byte getHCOND12() {
return HCOND12;
}

public byte getHCOND13() {
return HCOND13;
}

public byte getHCOND14() {
return HCOND14;
}

public byte getHCOND15() {
return HCOND15;
}

public byte getHCOND16() {
return HCOND16;
}

public byte getHCOND17() {
return HCOND17;
}

public byte getHCOND18() {
return HCOND18;
}

public byte getHCOND19() {
return HCOND19;
}

public byte getHCOND2() {
return HCOND2;
}

public byte getHCOND20() {
return HCOND20;
}

public byte getHCOND3() {
return HCOND3;
}

public byte getHCOND4() {
return HCOND4;
}

public byte getHCOND5() {
return HCOND5;
}

public byte getHCOND6() {
return HCOND6;
}

public byte getHCOND7() {
return HCOND7;
}

public byte getHCOND8() {
return HCOND8;
}

public byte getHCOND9() {
return HCOND9;
}

public byte getHCOND96() {
return HCOND96;
}

public byte getHCONDA01() {
return HCONDA01;
}

public byte getHCONDA02() {
return HCONDA02;
}

public byte getHCONDA03() {
return HCONDA03;
}

public byte getHCONDA04() {
return HCONDA04;
}

public byte getHCONDA05() {
return HCONDA05;
}

public byte getHCONDA06() {
return HCONDA06;
}

public byte getHCONDA07() {
return HCONDA07;
}

public byte getHCONDA08() {
return HCONDA08;
}

public byte getHCONDA09() {
return HCONDA09;
}

public byte getHCONDA10() {
return HCONDA10;
}

public byte getHCONDA11() {
return HCONDA11;
}

public byte getHCONDA12() {
return HCONDA12;
}

public byte getHCONDA13() {
return HCONDA13;
}

public byte getHCONDA14() {
return HCONDA14;
}

public byte getHCONDA15() {
return HCONDA15;
}

public byte getHCONDA16() {
return HCONDA16;
}

public byte getHCONDA17() {
return HCONDA17;
}

public byte getHCONDA19() {
return HCONDA19;
}

public boolean getHCONDA20() {
return HCONDA20;
}

public byte getHCONDN1() {
return HCONDN1;
}

public byte getHCONDN10() {
return HCONDN10;
}

public byte getHCONDN11() {
return HCONDN11;
}

public byte getHCONDN12() {
return HCONDN12;
}

public byte getHCONDN13() {
return HCONDN13;
}

public byte getHCONDN14() {
return HCONDN14;
}

public byte getHCONDN15() {
return HCONDN15;
}

public byte getHCONDN16() {
return HCONDN16;
}

public byte getHCONDN17() {
return HCONDN17;
}

public byte getHCONDN18() {
return HCONDN18;
}

public byte getHCONDN19() {
return HCONDN19;
}

public byte getHCONDN2() {
return HCONDN2;
}

public byte getHCONDN20() {
return HCONDN20;
}

public byte getHCONDN3() {
return HCONDN3;
}

public byte getHCONDN4() {
return HCONDN4;
}

public byte getHCONDN5() {
return HCONDN5;
}

public byte getHCONDN6() {
return HCONDN6;
}

public byte getHCONDN7() {
return HCONDN7;
}

public byte getHCONDN8() {
return HCONDN8;
}

public byte getHCONDN9() {
return HCONDN9;
}

public byte getHCONDN96() {
return HCONDN96;
}

public byte getHCONDNO1() {
return HCONDNO1;
}

public byte getHCONDNO2() {
return HCONDNO2;
}

public byte getHCONDNO3() {
return HCONDNO3;
}

public byte getHCONDNO4() {
return HCONDNO4;
}

public byte getHCONDNO5() {
return HCONDNO5;
}

public byte getHCONDNO6() {
return HCONDNO6;
}

public byte getHCONDNO7() {
return HCONDNO7;
}

public byte getHCONDNO_CODE() {
return HCONDNO_CODE;
}

public byte getHCONDNS1() {
return HCONDNS1;
}

public byte getHCONDNS2() {
return HCONDNS2;
}

public byte getHCONDNS3() {
return HCONDNS3;
}

public byte getHCONDNS4() {
return HCONDNS4;
}

public byte getHCONDNS5() {
return HCONDNS5;
}

public byte getHCONDNS6() {
return HCONDNS6;
}

public byte getHCONDNS7() {
return HCONDNS7;
}

public byte getHCONDO_CODE() {
return HCONDO_CODE;
}

public byte getHCONDS01() {
return HCONDS01;
}

public byte getHCONDS02() {
return HCONDS02;
}

public byte getHCONDS03() {
return HCONDS03;
}

public byte getHCONDS04() {
return HCONDS04;
}

public byte getHCONDS05() {
return HCONDS05;
}

public byte getHCONDS08() {
return HCONDS08;
}

public byte getHCONDS09() {
return HCONDS09;
}

public byte getHCONDS10() {
return HCONDS10;
}

public byte getHCONDS11() {
return HCONDS11;
}

public byte getHCONDS12() {
return HCONDS12;
}

public byte getHCONDS13() {
return HCONDS13;
}

public byte getHCONDS14() {
return HCONDS14;
}

public byte getHCONDS15() {
return HCONDS15;
}

public byte getHCONDS16() {
return HCONDS16;
}

public byte getHCONDS17() {
return HCONDS17;
}

public byte getHEALTH() {
return HEALTH;
}

public byte getHEAPPLIED() {
return HEAPPLIED;
}

public byte getHEDLIK() {
return HEDLIK;
}

public byte getHEDNT() {
return HEDNT;
}

public byte getHEDNTO_CODE() {
return HEDNTO_CODE;
}

public byte getHGADOPTF() {
return HGADOPTF;
}

public byte getHGADOPTM() {
return HGADOPTM;
}

public byte getHGPART() {
return HGPART;
}

public byte getHHRESP_DV() {
return HHRESP_DV;
}

public byte getHHTYPE_DV() {
return HHTYPE_DV;
}

public short getHL2GP() {
return HL2GP;
}

public byte getHL2HOP() {
return HL2HOP;
}

public boolean getHMRCESENT() {
return HMRCESENT;
}

public byte getHMRCLINK() {
return HMRCLINK;
}

public short getHOSP() {
return HOSP;
}

public byte getHOSPC1() {
return HOSPC1;
}

public byte getHOSPC2() {
return HOSPC2;
}

public byte getHOSPC3() {
return HOSPC3;
}

public byte getHOSPC4() {
return HOSPC4;
}

public byte getHOSPC5() {
return HOSPC5;
}

public byte getHOSPC6() {
return HOSPC6;
}

public byte getHOSPC7() {
return HOSPC7;
}

public short getHOSPCH() {
return HOSPCH;
}

public short getHOSPD() {
return HOSPD;
}

public short getHOSPDC1() {
return HOSPDC1;
}

public short getHOSPDC2() {
return HOSPDC2;
}

public short getHOSPDC3() {
return HOSPDC3;
}

public byte getHOSPDC4() {
return HOSPDC4;
}

public byte getHOSPDC5() {
return HOSPDC5;
}

public byte getHOSPDC6() {
return HOSPDC6;
}

public byte getHOSPDC7() {
return HOSPDC7;
}

public byte getHOUSING() {
return HOUSING;
}

public short getHOWLNG() {
return HOWLNG;
}

public int getHRPID() {
return HRPID;
}

public byte getHRPNO() {
return HRPNO;
}

public byte getHUBOSS() {
return HUBOSS;
}

public short getHUBUYS() {
return HUBUYS;
}

public byte getHUCAR() {
return HUCAR;
}

public byte getHUDIY() {
return HUDIY;
}

public short getHUFRYS() {
return HUFRYS;
}

public short getHUIRON() {
return HUIRON;
}

public short getHUMOPS() {
return HUMOPS;
}

public byte getHUPOTS() {
return HUPOTS;
}

public byte getHURUNS() {
return HURUNS;
}

public short getHUSITS() {
return HUSITS;
}

public byte getIENDDATD() {
return IENDDATD;
}

public byte getIENDDATM() {
return IENDDATM;
}

public byte getIENDDATMM() {
return IENDDATMM;
}

public byte getIENDDATSS() {
return IENDDATSS;
}

public short getIENDDATY() {
return IENDDATY;
}

protected double IND5MUS_LW() {
return IND5MUS_LW;
}

protected double IND5MUS_XW() {
return IND5MUS_XW;
}

protected double INDBD91_LW() {
return INDBD91_LW;
}

protected double INDBDUB_LW() {
return INDBDUB_LW;
}

protected double INDIN01_LW() {
return INDIN01_LW;
}

protected double INDIN91_LW() {
return INDIN91_LW;
}

protected double INDINUB_LW() {
return INDINUB_LW;
}

protected double INDINUB_XW() {
return INDINUB_XW;
}

protected double INDINUI_LW() {
return INDINUI_LW;
}

protected double INDINUI_XW() {
return INDINUI_XW;
}

protected double INDINUS_LW() {
return INDINUS_LW;
}

public byte getINDMODE() {
return INDMODE;
}

protected double INDNS91_LW() {
return INDNS91_LW;
}

protected double INDNSUB_LW() {
return INDNSUB_LW;
}

protected double INDPXUB_LW() {
return INDPXUB_LW;
}

protected double INDPXUB_XW() {
return INDPXUB_XW;
}

protected double INDPXUI_LW() {
return INDPXUI_LW;
}

protected double INDPXUI_XW() {
return INDPXUI_XW;
}

protected double INDPXUS_LW() {
return INDPXUS_LW;
}

protected double INDSCUB_LW() {
return INDSCUB_LW;
}

protected double INDSCUB_XW() {
return INDSCUB_XW;
}

protected double INDSCUI_LW() {
return INDSCUI_LW;
}

protected double INDSCUI_XW() {
return INDSCUI_XW;
}

protected double INDSCUS_LW() {
return INDSCUS_LW;
}

public byte getINTDATD_DV() {
return INTDATD_DV;
}

public byte getINTDATM_DV() {
return INTDATM_DV;
}

public short getINTDATY_DV() {
return INTDATY_DV;
}

public byte getINTQUS() {
return INTQUS;
}

public byte getIOUTCOME() {
return IOUTCOME;
}

public boolean getIPROXY() {
return IPROXY;
}

public byte getISTRTDATMM() {
return ISTRTDATMM;
}

public byte getISTRTDATSS() {
return ISTRTDATSS;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public byte getIVAFFCT11() {
return IVAFFCT11;
}

public byte getIVAFFCT12() {
return IVAFFCT12;
}

public byte getIVAFFCT13() {
return IVAFFCT13;
}

public byte getIVAFFCT14() {
return IVAFFCT14;
}

public byte getIVAFFCT15() {
return IVAFFCT15;
}

public byte getIVAFFCT17() {
return IVAFFCT17;
}

public byte getIVAFFCT21() {
return IVAFFCT21;
}

public byte getIVAFFCT22() {
return IVAFFCT22;
}

public byte getIVAFFCT23() {
return IVAFFCT23;
}

public byte getIVAFFCT27() {
return IVAFFCT27;
}

public byte getIVAFFCT30() {
return IVAFFCT30;
}

public byte getIVAFFCT97() {
return IVAFFCT97;
}

public byte getIVCOOP() {
return IVCOOP;
}

public byte getIVINFNCE() {
return IVINFNCE;
}

public byte getIVLIBAL() {
return IVLIBAL;
}

public byte getIVLIENG() {
return IVLIENG;
}

public byte getIVLITRANS() {
return IVLITRANS;
}

public byte getIVLIWHO() {
return IVLIWHO;
}

public byte getJ1BOSS() {
return J1BOSS;
}

public byte getJ1MNGR() {
return J1MNGR;
}

public byte getJ1NONE() {
return J1NONE;
}

public byte getJ1NSSEC5_DV() {
return J1NSSEC5_DV;
}

public byte getJ1SEMP() {
return J1SEMP;
}

public short getJ1SOC00_CC() {
return J1SOC00_CC;
}

public short getJ1SOC10_CC() {
return J1SOC10_CC;
}

public byte getJ1SOC90_CC() {
return J1SOC90_CC;
}

public byte getJ2NSSEC5_DV() {
return J2NSSEC5_DV;
}

public int getJ2PAY() {
return J2PAY;
}

protected double J2PAYNET_DV() {
return J2PAYNET_DV;
}

public short getJ2SOC00_CC() {
return J2SOC00_CC;
}

public short getJ2SOC10_CC() {
return J2SOC10_CC;
}

public short getJ2SOC90_CC() {
return J2SOC90_CC;
}

public byte getJBATT1() {
return JBATT1;
}

public byte getJBATT2() {
return JBATT2;
}

public byte getJBATT3() {
return JBATT3;
}

public byte getJBATT4() {
return JBATT4;
}

public byte getJBATT5() {
return JBATT5;
}

public byte getJBATT6() {
return JBATT6;
}

public byte getJBATT7() {
return JBATT7;
}

public byte getJBATT8() {
return JBATT8;
}

public byte getJBATT9() {
return JBATT9;
}

public byte getJBENDD() {
return JBENDD;
}

public byte getJBENDM() {
return JBENDM;
}

public byte getJBENDOTCODE() {
return JBENDOTCODE;
}

public byte getJBENDREAS1() {
return JBENDREAS1;
}

public byte getJBENDREAS10() {
return JBENDREAS10;
}

public byte getJBENDREAS11() {
return JBENDREAS11;
}

public byte getJBENDREAS2() {
return JBENDREAS2;
}

public byte getJBENDREAS3() {
return JBENDREAS3;
}

public byte getJBENDREAS4() {
return JBENDREAS4;
}

public byte getJBENDREAS5() {
return JBENDREAS5;
}

public byte getJBENDREAS6() {
return JBENDREAS6;
}

public byte getJBENDREAS7() {
return JBENDREAS7;
}

public byte getJBENDREAS8() {
return JBENDREAS8;
}

public byte getJBENDREAS9() {
return JBENDREAS9;
}

public byte getJBENDREAS97() {
return JBENDREAS97;
}

public short getJBENDY4() {
return JBENDY4;
}

public byte getJBES2000() {
return JBES2000;
}

public byte getJBFLEX1() {
return JBFLEX1;
}

public byte getJBFLEX10() {
return JBFLEX10;
}

public byte getJBFLEX2() {
return JBFLEX2;
}

public byte getJBFLEX3() {
return JBFLEX3;
}

public byte getJBFLEX4() {
return JBFLEX4;
}

public byte getJBFLEX5() {
return JBFLEX5;
}

public byte getJBFLEX6() {
return JBFLEX6;
}

public byte getJBFLEX7() {
return JBFLEX7;
}

public byte getJBFLEX8() {
return JBFLEX8;
}

public byte getJBFLEX9() {
return JBFLEX9;
}

public byte getJBFLEX96() {
return JBFLEX96;
}

public byte getJBFXINF() {
return JBFXINF;
}

public byte getJBFXUSE1() {
return JBFXUSE1;
}

public byte getJBFXUSE10() {
return JBFXUSE10;
}

public byte getJBFXUSE2() {
return JBFXUSE2;
}

public byte getJBFXUSE3() {
return JBFXUSE3;
}

public byte getJBFXUSE4() {
return JBFXUSE4;
}

public byte getJBFXUSE5() {
return JBFXUSE5;
}

public byte getJBFXUSE6() {
return JBFXUSE6;
}

public byte getJBFXUSE7() {
return JBFXUSE7;
}

public byte getJBFXUSE8() {
return JBFXUSE8;
}

public byte getJBFXUSE9() {
return JBFXUSE9;
}

public byte getJBFXUSE96() {
return JBFXUSE96;
}

public byte getJBIINDB_DV() {
return JBIINDB_DV;
}

public byte getJBLKCHA() {
return JBLKCHA;
}

public byte getJBLKCHB() {
return JBLKCHB;
}

public byte getJBLKCHC() {
return JBLKCHC;
}

public byte getJBLKCHD() {
return JBLKCHD;
}

public byte getJBLKCHE() {
return JBLKCHE;
}

public byte getJBMNGRCHK() {
return JBMNGRCHK;
}

public byte getJBNSSEC3_DV() {
return JBNSSEC3_DV;
}

public byte getJBNSSEC5_DV() {
return JBNSSEC5_DV;
}

public short getJBNSSEC_DV() {
return JBNSSEC_DV;
}

public byte getJBOFFY() {
return JBOFFY;
}

public short getJBONUS() {
return JBONUS;
}

public short getJBPEN() {
return JBPEN;
}

public short getJBPENM() {
return JBPENM;
}

public short getJBPENY4() {
return JBPENY4;
}

public byte getJBPERFP() {
return JBPERFP;
}

public short getJBRGSC_DV() {
return JBRGSC_DV;
}

public short getJBRISE() {
return JBRISE;
}

public byte getJBSAMR() {
return JBSAMR;
}

public byte getJBSAT() {
return JBSAT;
}

public byte getJBSEC() {
return JBSEC;
}

public byte getJBSECTPUB() {
return JBSECTPUB;
}

public short getJBSEG_DV() {
return JBSEG_DV;
}

public byte getJBSEMPCHK() {
return JBSEMPCHK;
}

public byte getJBSIC07CHK() {
return JBSIC07CHK;
}

public byte getJBSIC07_CC() {
return JBSIC07_CC;
}

public byte getJBSIZECHK() {
return JBSIZECHK;
}

public byte getJBSOC00CHK() {
return JBSOC00CHK;
}

public short getJBSOC00_CC() {
return JBSOC00_CC;
}

public short getJBSOC10_CC() {
return JBSOC10_CC;
}

public byte getJBSOCGR_DV() {
return JBSOCGR_DV;
}

public byte getJBTERM1() {
return JBTERM1;
}

public byte getJBTERM2() {
return JBTERM2;
}

public byte getJBXPCHA() {
return JBXPCHA;
}

public byte getJBXPCHB() {
return JBXPCHB;
}

public byte getJBXPCHC() {
return JBXPCHC;
}

public byte getJBXPCHD() {
return JBXPCHD;
}

public byte getJBXPCHE() {
return JBXPCHE;
}

public byte getJLENDM() {
return JLENDM;
}

public byte getJLES2000() {
return JLES2000;
}

public byte getJLIINDB_DV() {
return JLIINDB_DV;
}

public byte getJLNSSEC3_DV() {
return JLNSSEC3_DV;
}

public byte getJLNSSEC5_DV() {
return JLNSSEC5_DV;
}

public short getJLNSSEC_DV() {
return JLNSSEC_DV;
}

public short getJLRGSC_DV() {
return JLRGSC_DV;
}

public short getJLSEG_DV() {
return JLSEG_DV;
}

public byte getJLSIC07_CC() {
return JLSIC07_CC;
}

public short getJLSOC00_CC() {
return JLSOC00_CC;
}

public short getJLSOC10_CC() {
return JLSOC10_CC;
}

public byte getJOBHOURS1() {
return JOBHOURS1;
}

public byte getJOBHOURS2() {
return JOBHOURS2;
}

public byte getJOBHOURS3() {
return JOBHOURS3;
}

public byte getJOBHOURS4() {
return JOBHOURS4;
}

public byte getJOBHOURS5() {
return JOBHOURS5;
}

public byte getJOBHOURS6() {
return JOBHOURS6;
}

public byte getJOBHOURS7() {
return JOBHOURS7;
}

public byte getJOBHOURS8() {
return JOBHOURS8;
}

public byte getJOBHOURS9() {
return JOBHOURS9;
}

public int getJSOWNAMT() {
return JSOWNAMT;
}

public byte getJSOWNOTH() {
return JSOWNOTH;
}

public byte getJSOWNSUM() {
return JSOWNSUM;
}

public short getJSOWOTAM() {
return JSOWOTAM;
}

public byte getJSPART() {
return JSPART;
}

public int getJSPAYU() {
return JSPAYU;
}

public byte getJSPAYW() {
return JSPAYW;
}

public byte getJSPRLS() {
return JSPRLS;
}

public byte getJSPRNI() {
return JSPRNI;
}

public byte getJSPRTX() {
return JSPRTX;
}

public byte getJSPYNI() {
return JSPYNI;
}

public byte getJSPYTX() {
return JSPYTX;
}

public byte getJSTTWTB_CAWI() {
return JSTTWTB_CAWI;
}

public byte getJSTYPEB() {
return JSTYPEB;
}

public byte getJSWORKAC() {
return JSWORKAC;
}

public byte getJSWORKTRAV() {
return JSWORKTRAV;
}

public short getJUBGN() {
return JUBGN;
}

public short getJULK4X1() {
return JULK4X1;
}

public short getJULK4X2() {
return JULK4X2;
}

public byte getJULK4X3() {
return JULK4X3;
}

public short getJULK4X4() {
return JULK4X4;
}

public short getJULK4X5() {
return JULK4X5;
}

public short getJULK4X6() {
return JULK4X6;
}

public byte getJULK4X96() {
return JULK4X96;
}

public byte getJWBS1_DV() {
return JWBS1_DV;
}

public byte getJWBS2_DV() {
return JWBS2_DV;
}

public byte getKIDLANG() {
return KIDLANG;
}

public byte getLADOPT() {
return LADOPT;
}

public byte getLATE() {
return LATE;
}

public byte getLCHMULTI1() {
return LCHMULTI1;
}

public byte getLCHMULTI2() {
return LCHMULTI2;
}

public byte getLCHMULTI3() {
return LCHMULTI3;
}

public byte getLCHMULTI4() {
return LCHMULTI4;
}

public byte getLCOHNPI() {
return LCOHNPI;
}

public byte getLIENG() {
return LIENG;
}

public byte getLIHOW() {
return LIHOW;
}

public byte getLINGUA() {
return LINGUA;
}

public byte getLITRANS() {
return LITRANS;
}

public byte getLIVESP() {
return LIVESP;
}

public boolean getLIVESP_DV() {
return LIVESP_DV;
}

public byte getLIVEWITH() {
return LIVEWITH;
}

public byte getLIWHO() {
return LIWHO;
}

public byte getLMAR1M() {
return LMAR1M;
}

public short getLMAR1Y() {
return LMAR1Y;
}

public byte getLMCBM1() {
return LMCBM1;
}

public byte getLMCBM2() {
return LMCBM2;
}

public byte getLMCBM3() {
return LMCBM3;
}

public byte getLMCBM4() {
return LMCBM4;
}

public byte getLMCBM5() {
return LMCBM5;
}

public byte getLMCBM6() {
return LMCBM6;
}

public byte getLMCBM7() {
return LMCBM7;
}

public short getLMCBY41() {
return LMCBY41;
}

public short getLMCBY42() {
return LMCBY42;
}

public short getLMCBY43() {
return LMCBY43;
}

public short getLMCBY44() {
return LMCBY44;
}

public short getLMCBY45() {
return LMCBY45;
}

public byte getLMCBY46() {
return LMCBY46;
}

public byte getLMCBY47() {
return LMCBY47;
}

public byte getLMSPM1() {
return LMSPM1;
}

public byte getLMSPM2() {
return LMSPM2;
}

public byte getLMSPM3() {
return LMSPM3;
}

public byte getLMSPM4() {
return LMSPM4;
}

public byte getLMSPM5() {
return LMSPM5;
}

public byte getLMSPM6() {
return LMSPM6;
}

public byte getLMSPM7() {
return LMSPM7;
}

public short getLMSPY41() {
return LMSPY41;
}

public short getLMSPY42() {
return LMSPY42;
}

public short getLMSPY43() {
return LMSPY43;
}

public short getLMSPY44() {
return LMSPY44;
}

public short getLMSPY45() {
return LMSPY45;
}

public byte getLMSPY46() {
return LMSPY46;
}

public byte getLMSPY47() {
return LMSPY47;
}

public byte getLNADOPT() {
return LNADOPT;
}

public byte getLNPRNT() {
return LNPRNT;
}

public byte getLPRNT() {
return LPRNT;
}

public byte getLVHM() {
return LVHM;
}

public byte getLVSCHDO() {
return LVSCHDO;
}

public byte getLWWRONG() {
return LWWRONG;
}

public byte getMACOB() {
return MACOB;
}

public byte getMAJU() {
return MAJU;
}

public byte getMANSSEC5_DV() {
return MANSSEC5_DV;
}

public byte getMARSTAT() {
return MARSTAT;
}

public short getMASOC00_CC() {
return MASOC00_CC;
}

public short getMASOC10_CC() {
return MASOC10_CC;
}

public byte getMASOC90_CC() {
return MASOC90_CC;
}

public byte getMASTAT_DV() {
return MASTAT_DV;
}

public byte getMATLEAVE() {
return MATLEAVE;
}

public byte getMATLV() {
return MATLV;
}

public byte getMATLVENDD() {
return MATLVENDD;
}

public byte getMATLVENDM() {
return MATLVENDM;
}

public short getMATLVENDY4() {
return MATLVENDY4;
}

public byte getMATLVSTD() {
return MATLVSTD;
}

public byte getMATLVSTM() {
return MATLVSTM;
}

public short getMATLVSTY4() {
return MATLVSTY4;
}

public byte getMAYRUK() {
return MAYRUK;
}

public byte getMEMPLOY() {
return MEMPLOY;
}

public byte getMISSOURCE01() {
return MISSOURCE01;
}

public byte getMISSOURCE02() {
return MISSOURCE02;
}

public byte getMISSOURCE03() {
return MISSOURCE03;
}

public byte getMISSOURCE04() {
return MISSOURCE04;
}

public byte getMISSOURCE05() {
return MISSOURCE05;
}

public byte getMISSOURCE06() {
return MISSOURCE06;
}

public byte getMISSOURCE07() {
return MISSOURCE07;
}

public byte getMISSOURCE08() {
return MISSOURCE08;
}

public byte getMISSOURCE09() {
return MISSOURCE09;
}

public byte getMISSOURCE10() {
return MISSOURCE10;
}

public byte getMISSOURCE11() {
return MISSOURCE11;
}

public byte getMISSOURCE12() {
return MISSOURCE12;
}

public byte getMISSOURCE13() {
return MISSOURCE13;
}

public byte getMISSOURCE14() {
return MISSOURCE14;
}

public byte getMISSOURCE15() {
return MISSOURCE15;
}

public byte getMISSOURCE16() {
return MISSOURCE16;
}

public byte getMISSOURCE18() {
return MISSOURCE18;
}

public byte getMISSOURCE19() {
return MISSOURCE19;
}

public byte getMISSOURCE20() {
return MISSOURCE20;
}

public byte getMISSOURCE21() {
return MISSOURCE21;
}

public byte getMISSOURCE22() {
return MISSOURCE22;
}

public byte getMISSOURCE23() {
return MISSOURCE23;
}

public byte getMISSOURCE24() {
return MISSOURCE24;
}

public byte getMISSOURCE25() {
return MISSOURCE25;
}

public byte getMISSOURCE26() {
return MISSOURCE26;
}

public byte getMISSOURCE27() {
return MISSOURCE27;
}

public byte getMISSOURCE28() {
return MISSOURCE28;
}

public byte getMISSOURCE29() {
return MISSOURCE29;
}

public byte getMISSOURCE30() {
return MISSOURCE30;
}

public byte getMISSOURCE31() {
return MISSOURCE31;
}

public byte getMISSOURCE32() {
return MISSOURCE32;
}

public byte getMISSOURCE33() {
return MISSOURCE33;
}

public byte getMISSOURCE34() {
return MISSOURCE34;
}

public byte getMISSOURCE35() {
return MISSOURCE35;
}

public byte getMISSOURCE36() {
return MISSOURCE36;
}

public byte getMISSOURCE37() {
return MISSOURCE37;
}

public byte getMISSOURCE38() {
return MISSOURCE38;
}

public byte getMISSOURCE39() {
return MISSOURCE39;
}

public byte getMISSOURCE40() {
return MISSOURCE40;
}

public byte getMISSOURCE41() {
return MISSOURCE41;
}

public byte getMLAGST() {
return MLAGST;
}

public byte getMLAGSTU() {
return MLAGSTU;
}

public byte getMLFUTR() {
return MLFUTR;
}

public byte getMLRNOT1() {
return MLRNOT1;
}

public byte getMLRNOT10() {
return MLRNOT10;
}

public byte getMLRNOT11() {
return MLRNOT11;
}

public byte getMLRNOT12() {
return MLRNOT12;
}

public byte getMLRNOT13() {
return MLRNOT13;
}

public byte getMLRNOT2() {
return MLRNOT2;
}

public byte getMLRNOT3() {
return MLRNOT3;
}

public byte getMLRNOT4() {
return MLRNOT4;
}

public byte getMLRNOT5() {
return MLRNOT5;
}

public byte getMLRNOT6() {
return MLRNOT6;
}

public byte getMLRNOT7() {
return MLRNOT7;
}

public byte getMLRNOT8() {
return MLRNOT8;
}

public byte getMLRNOT9() {
return MLRNOT9;
}

public byte getMLRNOT97() {
return MLRNOT97;
}

public byte getMLSTATCHK() {
return MLSTATCHK;
}

public byte getMLWKFPT() {
return MLWKFPT;
}

public int getMNPID() {
return MNPID;
}

public byte getMNPNO() {
return MNPNO;
}

public int getMNSPID() {
return MNSPID;
}

public byte getMNSPNO() {
return MNSPNO;
}

public byte getMOBCOMP() {
return MOBCOMP;
}

public byte getMOBUSE() {
return MOBUSE;
}

public byte getMONTH() {
return MONTH;
}

public byte getMOVDIR() {
return MOVDIR;
}

public byte getMOVEOTCODE() {
return MOVEOTCODE;
}

public byte getMOVY11() {
return MOVY11;
}

public byte getMOVY12() {
return MOVY12;
}

public byte getMOVY13() {
return MOVY13;
}

public byte getMOVY14() {
return MOVY14;
}

public byte getMOVY15() {
return MOVY15;
}

public byte getMOVY16() {
return MOVY16;
}

public byte getMSTATCH1() {
return MSTATCH1;
}

public byte getMSTATCH2() {
return MSTATCH2;
}

public byte getMSTATCH3() {
return MSTATCH3;
}

public byte getMSTATCH4() {
return MSTATCH4;
}

public byte getMSTATCH5() {
return MSTATCH5;
}

public short getMSTATSAM() {
return MSTATSAM;
}

public byte getMSTATSAMN() {
return MSTATSAMN;
}

public byte getMVEVER() {
return MVEVER;
}

public byte getMVMNTH() {
return MVMNTH;
}

public short getMVYR() {
return MVYR;
}

public byte getN1619ABS() {
return N1619ABS;
}

public byte getNADOPTCH() {
return NADOPTCH;
}

public byte getNAIDXHH() {
return NAIDXHH;
}

public byte getNATID1() {
return NATID1;
}

public byte getNATID2() {
return NATID2;
}

public byte getNATID3() {
return NATID3;
}

public byte getNATID4() {
return NATID4;
}

public byte getNATID5() {
return NATID5;
}

public byte getNATID6() {
return NATID6;
}

public byte getNATID97() {
return NATID97;
}

public byte getNCCJT() {
return NCCJT;
}

public byte getNCCSOLE() {
return NCCSOLE;
}

public byte getNCH10() {
return NCH10;
}

public byte getNCH10TO15() {
return NCH10TO15;
}

public byte getNCH14RESP() {
return NCH14RESP;
}

public byte getNCH3RESP() {
return NCH3RESP;
}

public byte getNCH415RESP() {
return NCH415RESP;
}

public byte getNCH5RESP() {
return NCH5RESP;
}

public byte getNCH5TO15() {
return NCH5TO15;
}

public byte getNCH8RESP() {
return NCH8RESP;
}

public byte getNCHILD() {
return NCHILD;
}

public short getNCHILD_DV() {
return NCHILD_DV;
}

public byte getNCHRESP() {
return NCHRESP;
}

public byte getNCHUNDER16() {
return NCHUNDER16;
}

public short getNCIGS() {
return NCIGS;
}

public byte getNCRR1() {
return NCRR1;
}

public byte getNCRR11() {
return NCRR11;
}

public byte getNCRR12() {
return NCRR12;
}

public byte getNCRR3() {
return NCRR3;
}

public byte getNCRR4() {
return NCRR4;
}

public byte getNCRR5() {
return NCRR5;
}

public byte getNCRR6() {
return NCRR6;
}

public byte getNCRR8() {
return NCRR8;
}

public byte getNCRR9() {
return NCRR9;
}

public byte getNCRRM() {
return NCRRM;
}

public short getNCRRY4() {
return NCRRY4;
}

public byte getNDEPCHL_DV() {
return NDEPCHL_DV;
}

public byte getNETPUSE() {
return NETPUSE;
}

public byte getNETUSE() {
return NETUSE;
}

public byte getNEXTELSE1() {
return NEXTELSE1;
}

public byte getNEXTELSE2() {
return NEXTELSE2;
}

public byte getNEXTELSE3() {
return NEXTELSE3;
}

public byte getNEXTELSE4() {
return NEXTELSE4;
}

public byte getNEXTELSE5() {
return NEXTELSE5;
}

public byte getNEXTELSE6() {
return NEXTELSE6;
}

public byte getNEXTELSE7() {
return NEXTELSE7;
}

public byte getNEXTELSE8() {
return NEXTELSE8;
}

public boolean getNEXTELSE9() {
return NEXTELSE9;
}

public byte getNEXTJOB1() {
return NEXTJOB1;
}

public byte getNEXTJOB2() {
return NEXTJOB2;
}

public byte getNEXTJOB3() {
return NEXTJOB3;
}

public byte getNEXTJOB4() {
return NEXTJOB4;
}

public byte getNEXTJOB5() {
return NEXTJOB5;
}

public byte getNEXTJOB6() {
return NEXTJOB6;
}

public byte getNEXTJOB7() {
return NEXTJOB7;
}

public byte getNEXTJOB8() {
return NEXTJOB8;
}

public byte getNEXTJOB9() {
return NEXTJOB9;
}

public byte getNEXTSTAT1() {
return NEXTSTAT1;
}

public byte getNEXTSTAT2() {
return NEXTSTAT2;
}

public byte getNEXTSTAT3() {
return NEXTSTAT3;
}

public byte getNEXTSTAT4() {
return NEXTSTAT4;
}

public byte getNEXTSTAT5() {
return NEXTSTAT5;
}

public byte getNEXTSTAT6() {
return NEXTSTAT6;
}

public byte getNEXTSTAT7() {
return NEXTSTAT7;
}

public byte getNEXTSTAT8() {
return NEXTSTAT8;
}

public byte getNEXTSTAT9() {
return NEXTSTAT9;
}

public byte getNFH01() {
return NFH01;
}

public byte getNFH02() {
return NFH02;
}

public byte getNFH03() {
return NFH03;
}

public byte getNFH04() {
return NFH04;
}

public byte getNFH05() {
return NFH05;
}

public byte getNFH06() {
return NFH06;
}

public byte getNFH07() {
return NFH07;
}

public byte getNFH08() {
return NFH08;
}

public byte getNFH09() {
return NFH09;
}

public byte getNFH10() {
return NFH10;
}

public byte getNFH11() {
return NFH11;
}

public byte getNFH12() {
return NFH12;
}

public byte getNFH13() {
return NFH13;
}

public byte getNFH14() {
return NFH14;
}

public byte getNFH15() {
return NFH15;
}

public byte getNFH16() {
return NFH16;
}

public byte getNFH18() {
return NFH18;
}

public byte getNFH19() {
return NFH19;
}

public byte getNFH20() {
return NFH20;
}

public byte getNFH21() {
return NFH21;
}

public byte getNFH22() {
return NFH22;
}

public byte getNFH23() {
return NFH23;
}

public byte getNFH24() {
return NFH24;
}

public byte getNFH25() {
return NFH25;
}

public byte getNFH26() {
return NFH26;
}

public byte getNFH27() {
return NFH27;
}

public byte getNFH28() {
return NFH28;
}

public byte getNFH29() {
return NFH29;
}

public byte getNFH30() {
return NFH30;
}

public byte getNFH31() {
return NFH31;
}

public byte getNFH32() {
return NFH32;
}

public byte getNFH33() {
return NFH33;
}

public byte getNFH34() {
return NFH34;
}

public byte getNFH35() {
return NFH35;
}

public byte getNFH36() {
return NFH36;
}

public byte getNFH37() {
return NFH37;
}

public byte getNFH38() {
return NFH38;
}

public byte getNFH39() {
return NFH39;
}

public byte getNFH40() {
return NFH40;
}

public byte getNFH41() {
return NFH41;
}

public byte getNGCSE5() {
return NGCSE5;
}

public byte getNGCSEENG() {
return NGCSEENG;
}

public byte getNGCSEENGNIE() {
return NGCSEENGNIE;
}

public byte getNGCSEMAT() {
return NGCSEMAT;
}

public byte getNGCSEMATNIE() {
return NGCSEMATNIE;
}

public byte getNGRP_DV() {
return NGRP_DV;
}

public byte getNHIQUAL_DV() {
return NHIQUAL_DV;
}

public byte getNIACT() {
return NIACT;
}

public byte getNIREL() {
return NIREL;
}

public byte getNISERPS() {
return NISERPS;
}

public byte getNMAR() {
return NMAR;
}

public byte getNMPSP_DV() {
return NMPSP_DV;
}

public byte getNNATCH() {
return NNATCH;
}

public byte getNNEWBORN() {
return NNEWBORN;
}

public byte getNNMPSP_DV() {
return NNMPSP_DV;
}

public byte getNNSIB_DV() {
return NNSIB_DV;
}

public byte getNNSSIB_DV() {
return NNSSIB_DV;
}

public byte getNOTEMPCHK() {
return NOTEMPCHK;
}

public byte getNPENSIONER_DV() {
return NPENSIONER_DV;
}

public byte getNPNS_DV() {
return NPNS_DV;
}

public byte getNPN_DV() {
return NPN_DV;
}

public byte getNQFHIGDV() {
return NQFHIGDV;
}

public byte getNUNDER16ABS() {
return NUNDER16ABS;
}

public byte getNUNMPSP_DV() {
return NUNMPSP_DV;
}

public byte getNXTENDOTCODE() {
return NXTENDOTCODE;
}

public byte getNXTENDREAS1() {
return NXTENDREAS1;
}

public byte getNXTENDREAS10() {
return NXTENDREAS10;
}

public byte getNXTENDREAS11() {
return NXTENDREAS11;
}

public byte getNXTENDREAS2() {
return NXTENDREAS2;
}

public byte getNXTENDREAS3() {
return NXTENDREAS3;
}

public byte getNXTENDREAS4() {
return NXTENDREAS4;
}

public byte getNXTENDREAS5() {
return NXTENDREAS5;
}

public byte getNXTENDREAS6() {
return NXTENDREAS6;
}

public byte getNXTENDREAS7() {
return NXTENDREAS7;
}

public byte getNXTENDREAS8() {
return NXTENDREAS8;
}

public byte getNXTENDREAS9() {
return NXTENDREAS9;
}

public byte getNXTENDREAS97() {
return NXTENDREAS97;
}

public byte getNXTJBENDD() {
return NXTJBENDD;
}

public byte getNXTJBENDM() {
return NXTJBENDM;
}

public short getNXTJBENDY4() {
return NXTJBENDY4;
}

public byte getNXTJBES() {
return NXTJBES;
}

public byte getNXTJBHRS() {
return NXTJBHRS;
}

public byte getNXTST() {
return NXTST;
}

public byte getNXTSTELSE() {
return NXTSTELSE;
}

public byte getNXTSTENDD() {
return NXTSTENDD;
}

public byte getNXTSTENDM() {
return NXTSTENDM;
}

public short getNXTSTENDY4() {
return NXTSTENDY4;
}

public byte getODDSAPPLY() {
return ODDSAPPLY;
}

public byte getODDSEMP1() {
return ODDSEMP1;
}

public byte getODDSEMP3() {
return ODDSEMP3;
}

public byte getODDSQUAL() {
return ODDSQUAL;
}

public byte getODDSSCHOL() {
return ODDSSCHOL;
}

public byte getOPRLG() {
return OPRLG;
}

public byte getOPRLG0() {
return OPRLG0;
}

public byte getOPRLG0NI() {
return OPRLG0NI;
}

public byte getOPRLG1() {
return OPRLG1;
}

public byte getOPRLG2() {
return OPRLG2;
}

public byte getOPRLG3() {
return OPRLG3;
}

public byte getORIGADD() {
return ORIGADD;
}

public byte getOTHBEN1() {
return OTHBEN1;
}

public byte getOTHBEN2() {
return OTHBEN2;
}

public byte getOTHBEN3() {
return OTHBEN3;
}

public byte getOTHBEN4() {
return OTHBEN4;
}

public byte getOTHBEN5() {
return OTHBEN5;
}

public byte getOTHBEN6() {
return OTHBEN6;
}

public byte getOTHBEN7() {
return OTHBEN7;
}

public byte getOTHBEN8() {
return OTHBEN8;
}

public byte getOTHBEN9() {
return OTHBEN9;
}

public byte getOTHBEN96() {
return OTHBEN96;
}

public byte getOTHBEN97() {
return OTHBEN97;
}

public byte getOTHCONT() {
return OTHCONT;
}

public byte getOVTNSET() {
return OVTNSET;
}

public byte getOVTPAY() {
return OVTPAY;
}

protected double OVTRATE() {
return OVTRATE;
}

public byte getOVTREST() {
return OVTREST;
}

public byte getPACOB() {
return PACOB;
}

public byte getPAJU() {
return PAJU;
}

public byte getPANSSEC5_DV() {
return PANSSEC5_DV;
}

public short getPASOC00_CC() {
return PASOC00_CC;
}

public short getPASOC10_CC() {
return PASOC10_CC;
}

public byte getPASOC90_CC() {
return PASOC90_CC;
}

public byte getPAYGWC() {
return PAYGWC;
}

protected double PAYG_DV() {
return PAYG_DV;
}

public byte getPAYNWC() {
return PAYNWC;
}

public byte getPAYRUK() {
return PAYRUK;
}

public byte getPAYTYP() {
return PAYTYP;
}

public byte getPAYUWC() {
return PAYUWC;
}

protected double PAYU_DV() {
return PAYU_DV;
}

public short getPBIRTHY() {
return PBIRTHY;
}

public byte getPBNFT1() {
return PBNFT1;
}

public byte getPBNFT10() {
return PBNFT10;
}

public byte getPBNFT11() {
return PBNFT11;
}

public byte getPBNFT12() {
return PBNFT12;
}

public byte getPBNFT13() {
return PBNFT13;
}

public byte getPBNFT2() {
return PBNFT2;
}

public byte getPBNFT3() {
return PBNFT3;
}

public byte getPBNFT4() {
return PBNFT4;
}

public byte getPBNFT5() {
return PBNFT5;
}

public byte getPBNFT6() {
return PBNFT6;
}

public byte getPBNFT7() {
return PBNFT7;
}

public byte getPBNFT8() {
return PBNFT8;
}

public byte getPBNFT9() {
return PBNFT9;
}

public byte getPBNFT96() {
return PBNFT96;
}

public byte getPDVAGE() {
return PDVAGE;
}

public byte getPEDCHPNO() {
return PEDCHPNO;
}

public byte getPENMCN() {
return PENMCN;
}

public byte getPENMEX() {
return PENMEX;
}

protected double PENMPY() {
return PENMPY;
}

public byte getPENMTP() {
return PENMTP;
}

public byte getPENSIONER_DV() {
return PENSIONER_DV;
}

public byte getPENSPB() {
return PENSPB;
}

public byte getPHEAPPLIED() {
return PHEAPPLIED;
}

public int getPID() {
return PID;
}

public byte getPJBPTFT() {
return PJBPTFT;
}

public byte getPJSPTFT() {
return PJSPTFT;
}

public byte getPLIENG() {
return PLIENG;
}

public byte getPLITRANS() {
return PLITRANS;
}

public short getPLNOWM() {
return PLNOWM;
}

public short getPLNOWY4() {
return PLNOWY4;
}

public int getPN1PID() {
return PN1PID;
}

public byte getPN1PNO() {
return PN1PNO;
}

public byte getPN1SEX() {
return PN1SEX;
}

public int getPN2PID() {
return PN2PID;
}

public byte getPN2PNO() {
return PN2PNO;
}

public byte getPN2SEX() {
return PN2SEX;
}

public byte getPNCARS() {
return PNCARS;
}

public int getPNS1PID() {
return PNS1PID;
}

public byte getPNS1PNO() {
return PNS1PNO;
}

public byte getPNS1SEX() {
return PNS1SEX;
}

public int getPNS2PID() {
return PNS2PID;
}

public byte getPNS2PNO() {
return PNS2PNO;
}

public byte getPNS2SEX() {
return PNS2SEX;
}

public byte getPODDSAPPLY() {
return PODDSAPPLY;
}

public byte getPODDSEMP1() {
return PODDSEMP1;
}

public byte getPODDSEMP3() {
return PODDSEMP3;
}

public byte getPODDSQUAL() {
return PODDSQUAL;
}

public byte getPODDSSCHOL() {
return PODDSSCHOL;
}

public byte getPPEN() {
return PPEN;
}

public byte getPPENT() {
return PPENT;
}

public int getPPID() {
return PPID;
}

public byte getPPPEX() {
return PPPEX;
}

public byte getPPPEXM() {
return PPPEXM;
}

public int getPPRAM() {
return PPRAM;
}

public byte getPPRAMPC() {
return PPRAMPC;
}

public byte getPPREG() {
return PPREG;
}

public byte getPPSEX() {
return PPSEX;
}

public short getPPYRS() {
return PPYRS;
}

public byte getPRAYFREQ() {
return PRAYFREQ;
}

public byte getPREARN() {
return PREARN;
}

public byte getPREARNA() {
return PREARNA;
}

public byte getPREARNW() {
return PREARNW;
}

public byte getPREASON() {
return PREASON;
}

public byte getPREG() {
return PREG;
}

public byte getPREGEND1() {
return PREGEND1;
}

public byte getPREGEND2() {
return PREGEND2;
}

public byte getPREGEND3() {
return PREGEND3;
}

public byte getPREGEND4() {
return PREGEND4;
}

public byte getPREGFERT1() {
return PREGFERT1;
}

public byte getPREGFERT2() {
return PREGFERT2;
}

public byte getPREGFERT3() {
return PREGFERT3;
}

public byte getPREGFERT4() {
return PREGFERT4;
}

public byte getPREGFT11() {
return PREGFT11;
}

public byte getPREGFT12() {
return PREGFT12;
}

public boolean getPREGFT13() {
return PREGFT13;
}

public boolean getPREGFT14() {
return PREGFT14;
}

public byte getPREGFT21() {
return PREGFT21;
}

public byte getPREGFT22() {
return PREGFT22;
}

public boolean getPREGFT23() {
return PREGFT23;
}

public boolean getPREGFT24() {
return PREGFT24;
}

public byte getPREGFT31() {
return PREGFT31;
}

public byte getPREGFT32() {
return PREGFT32;
}

public boolean getPREGFT33() {
return PREGFT33;
}

public boolean getPREGFT34() {
return PREGFT34;
}

public byte getPREGFT41() {
return PREGFT41;
}

public byte getPREGFT42() {
return PREGFT42;
}

public boolean getPREGFT43() {
return PREGFT43;
}

public boolean getPREGFT44() {
return PREGFT44;
}

public byte getPREGFT51() {
return PREGFT51;
}

public byte getPREGFT52() {
return PREGFT52;
}

public boolean getPREGFT53() {
return PREGFT53;
}

public boolean getPREGFT54() {
return PREGFT54;
}

public byte getPREGFT61() {
return PREGFT61;
}

public byte getPREGFT62() {
return PREGFT62;
}

public boolean getPREGFT63() {
return PREGFT63;
}

public boolean getPREGFT64() {
return PREGFT64;
}

public byte getPREGFT961() {
return PREGFT961;
}

public byte getPREGFT962() {
return PREGFT962;
}

public boolean getPREGFT963() {
return PREGFT963;
}

public boolean getPREGFT964() {
return PREGFT964;
}

public byte getPREGM1() {
return PREGM1;
}

public byte getPREGM2() {
return PREGM2;
}

public byte getPREGM3() {
return PREGM3;
}

public byte getPREGM4() {
return PREGM4;
}

public byte getPREGOUT1() {
return PREGOUT1;
}

public byte getPREGOUT2() {
return PREGOUT2;
}

public byte getPREGOUT3() {
return PREGOUT3;
}

public byte getPREGOUT4() {
return PREGOUT4;
}

public byte getPREGSMK11() {
return PREGSMK11;
}

public byte getPREGSMK12() {
return PREGSMK12;
}

public byte getPREGSMK13() {
return PREGSMK13;
}

public byte getPREGSMK14() {
return PREGSMK14;
}

public byte getPREGSMK21() {
return PREGSMK21;
}

public byte getPREGSMK22() {
return PREGSMK22;
}

public byte getPREGSMK23() {
return PREGSMK23;
}

public byte getPREGSMK24() {
return PREGSMK24;
}

public byte getPREGSMK31() {
return PREGSMK31;
}

public byte getPREGSMK32() {
return PREGSMK32;
}

public byte getPREGSMK33() {
return PREGSMK33;
}

public byte getPREGSMK34() {
return PREGSMK34;
}

public byte getPREGSMOKE1() {
return PREGSMOKE1;
}

public byte getPREGSMOKE2() {
return PREGSMOKE2;
}

public byte getPREGSMOKE3() {
return PREGSMOKE3;
}

public byte getPREGSMOKE4() {
return PREGSMOKE4;
}

public byte getPREGSPD1() {
return PREGSPD1;
}

public boolean getPREGSPD2() {
return PREGSPD2;
}

public boolean getPREGSPD3() {
return PREGSPD3;
}

public boolean getPREGSPD4() {
return PREGSPD4;
}

public short getPREGY41() {
return PREGY41;
}

public short getPREGY42() {
return PREGY42;
}

public short getPREGY43() {
return PREGY43;
}

public short getPREGY44() {
return PREGY44;
}

public byte getPREL() {
return PREL;
}

public byte getPRFITB() {
return PRFITB;
}

public byte getPRFITBA() {
return PRFITBA;
}

public byte getPRFITBW() {
return PRFITBW;
}

public byte getPRIDE10() {
return PRIDE10;
}

public byte getPRIDE11() {
return PRIDE11;
}

public byte getPRIDE12() {
return PRIDE12;
}

public byte getPRIDE13() {
return PRIDE13;
}

public byte getPRIDE14() {
return PRIDE14;
}

public byte getPRIDE2() {
return PRIDE2;
}

public byte getPRIDE4A() {
return PRIDE4A;
}

public byte getPRIDE4B() {
return PRIDE4B;
}

public byte getPRIDE5() {
return PRIDE5;
}

public byte getPRIDE6() {
return PRIDE6;
}

public byte getPRIDE7() {
return PRIDE7;
}

public byte getPRIDE8() {
return PRIDE8;
}

public byte getPRIDE9() {
return PRIDE9;
}

public byte getPS1() {
return PS1;
}

public byte getPS10() {
return PS10;
}

public byte getPS11() {
return PS11;
}

public byte getPS12() {
return PS12;
}

public byte getPS13() {
return PS13;
}

public byte getPS14() {
return PS14;
}

public byte getPS15() {
return PS15;
}

public byte getPS16() {
return PS16;
}

public byte getPS17() {
return PS17;
}

public byte getPS18() {
return PS18;
}

public byte getPS19() {
return PS19;
}

public byte getPS2() {
return PS2;
}

public byte getPS20() {
return PS20;
}

public byte getPS21() {
return PS21;
}

public byte getPS22() {
return PS22;
}

public byte getPS23() {
return PS23;
}

public byte getPS24() {
return PS24;
}

public byte getPS25() {
return PS25;
}

public byte getPS26() {
return PS26;
}

public byte getPS27() {
return PS27;
}

public byte getPS28() {
return PS28;
}

public byte getPS29() {
return PS29;
}

public byte getPS3() {
return PS3;
}

public byte getPS30() {
return PS30;
}

public byte getPS31() {
return PS31;
}

public byte getPS32() {
return PS32;
}

public byte getPS4() {
return PS4;
}

public byte getPS5() {
return PS5;
}

public byte getPS6() {
return PS6;
}

public byte getPS7() {
return PS7;
}

public byte getPS8() {
return PS8;
}

public byte getPS9() {
return PS9;
}

public byte getPSDQA_DV() {
return PSDQA_DV;
}

public byte getPSDQB_DV() {
return PSDQB_DV;
}

public byte getPSDQC_DV() {
return PSDQC_DV;
}

public byte getPSNUMCH() {
return PSNUMCH;
}

public int getPSU() {
return PSU;
}

public byte getPUNIFIN1() {
return PUNIFIN1;
}

public byte getPUNISUB1() {
return PUNISUB1;
}

public byte getPVTPYSET() {
return PVTPYSET;
}

public int getPXPBORROW() {
return PXPBORROW;
}

public int getPXPEARN1() {
return PXPEARN1;
}

public byte getPXPEARN1DK() {
return PXPEARN1DK;
}

public int getPXPEARN3() {
return PXPEARN3;
}

public byte getPXPEARN3DK() {
return PXPEARN3DK;
}

public int getPXPEARNG1() {
return PXPEARNG1;
}

public byte getPXPEARNG1DK() {
return PXPEARNG1DK;
}

public int getPXPEARNG3() {
return PXPEARNG3;
}

public byte getPXPEARNG3DK() {
return PXPEARNG3DK;
}

public int getPXPTUITION() {
return PXPTUITION;
}

public byte getQFHIGDV() {
return QFHIGDV;
}

public byte getQFHIGH() {
return QFHIGH;
}

public boolean getQFHIGHFL_DV() {
return QFHIGHFL_DV;
}

public byte getQFVOC1() {
return QFVOC1;
}

public byte getQFVOC10() {
return QFVOC10;
}

public byte getQFVOC11() {
return QFVOC11;
}

public byte getQFVOC12() {
return QFVOC12;
}

public byte getQFVOC13() {
return QFVOC13;
}

public byte getQFVOC14() {
return QFVOC14;
}

public byte getQFVOC15() {
return QFVOC15;
}

public byte getQFVOC2() {
return QFVOC2;
}

public byte getQFVOC3() {
return QFVOC3;
}

public byte getQFVOC4() {
return QFVOC4;
}

public byte getQFVOC5() {
return QFVOC5;
}

public byte getQFVOC6() {
return QFVOC6;
}

public byte getQFVOC7() {
return QFVOC7;
}

public byte getQFVOC8() {
return QFVOC8;
}

public byte getQFVOC9() {
return QFVOC9;
}

public byte getQFVOC96() {
return QFVOC96;
}

public byte getQUALNEW1() {
return QUALNEW1;
}

public byte getQUALNEW10() {
return QUALNEW10;
}

public byte getQUALNEW11() {
return QUALNEW11;
}

public byte getQUALNEW13() {
return QUALNEW13;
}

public byte getQUALNEW15() {
return QUALNEW15;
}

public byte getQUALNEW16() {
return QUALNEW16;
}

public byte getQUALNEW17() {
return QUALNEW17;
}

public byte getQUALNEW18() {
return QUALNEW18;
}

public byte getQUALNEW19() {
return QUALNEW19;
}

public byte getQUALNEW2() {
return QUALNEW2;
}

public byte getQUALNEW20() {
return QUALNEW20;
}

public byte getQUALNEW21() {
return QUALNEW21;
}

public byte getQUALNEW22() {
return QUALNEW22;
}

public byte getQUALNEW23() {
return QUALNEW23;
}

public byte getQUALNEW24() {
return QUALNEW24;
}

public byte getQUALNEW25() {
return QUALNEW25;
}

public byte getQUALNEW26() {
return QUALNEW26;
}

public byte getQUALNEW27() {
return QUALNEW27;
}

public byte getQUALNEW28() {
return QUALNEW28;
}

public byte getQUALNEW29() {
return QUALNEW29;
}

public byte getQUALNEW3() {
return QUALNEW3;
}

public byte getQUALNEW30() {
return QUALNEW30;
}

public byte getQUALNEW31() {
return QUALNEW31;
}

public byte getQUALNEW32() {
return QUALNEW32;
}

public byte getQUALNEW33() {
return QUALNEW33;
}

public byte getQUALNEW4() {
return QUALNEW4;
}

public byte getQUALNEW5() {
return QUALNEW5;
}

public byte getQUALNEW6() {
return QUALNEW6;
}

public byte getQUALNEW7() {
return QUALNEW7;
}

public byte getQUALNEW8() {
return QUALNEW8;
}

public byte getQUALNEW9() {
return QUALNEW9;
}

public byte getQUALOC() {
return QUALOC;
}

public byte getQUARTER() {
return QUARTER;
}

public byte getRACEL() {
return RACEL;
}

public byte getRACELAT() {
return RACELAT;
}

public byte getRACELBT() {
return RACELBT;
}

public byte getRACELMT() {
return RACELMT;
}

public byte getRACELOT_CODE() {
return RACELOT_CODE;
}

public short getRACELO_CODE() {
return RACELO_CODE;
}

public byte getRACELT() {
return RACELT;
}

public byte getRACELWT() {
return RACELWT;
}

public byte getRACEL_DV() {
return RACEL_DV;
}

public byte getREASEND10_1() {
return REASEND10_1;
}

public byte getREASEND10_2() {
return REASEND10_2;
}

public byte getREASEND10_3() {
return REASEND10_3;
}

public byte getREASEND10_4() {
return REASEND10_4;
}

public byte getREASEND10_5() {
return REASEND10_5;
}

public byte getREASEND10_6() {
return REASEND10_6;
}

public byte getREASEND10_7() {
return REASEND10_7;
}

public byte getREASEND10_8() {
return REASEND10_8;
}

public byte getREASEND10_9() {
return REASEND10_9;
}

public byte getREASEND11_1() {
return REASEND11_1;
}

public byte getREASEND11_2() {
return REASEND11_2;
}

public byte getREASEND11_3() {
return REASEND11_3;
}

public byte getREASEND11_4() {
return REASEND11_4;
}

public byte getREASEND11_5() {
return REASEND11_5;
}

public byte getREASEND11_6() {
return REASEND11_6;
}

public byte getREASEND11_7() {
return REASEND11_7;
}

public byte getREASEND11_8() {
return REASEND11_8;
}

public byte getREASEND11_9() {
return REASEND11_9;
}

public byte getREASEND1_1() {
return REASEND1_1;
}

public byte getREASEND1_2() {
return REASEND1_2;
}

public byte getREASEND1_3() {
return REASEND1_3;
}

public byte getREASEND1_4() {
return REASEND1_4;
}

public byte getREASEND1_5() {
return REASEND1_5;
}

public byte getREASEND1_6() {
return REASEND1_6;
}

public byte getREASEND1_7() {
return REASEND1_7;
}

public byte getREASEND1_8() {
return REASEND1_8;
}

public byte getREASEND1_9() {
return REASEND1_9;
}

public byte getREASEND2_1() {
return REASEND2_1;
}

public byte getREASEND2_2() {
return REASEND2_2;
}

public byte getREASEND2_3() {
return REASEND2_3;
}

public byte getREASEND2_4() {
return REASEND2_4;
}

public byte getREASEND2_5() {
return REASEND2_5;
}

public byte getREASEND2_6() {
return REASEND2_6;
}

public byte getREASEND2_7() {
return REASEND2_7;
}

public byte getREASEND2_8() {
return REASEND2_8;
}

public byte getREASEND2_9() {
return REASEND2_9;
}

public byte getREASEND3_1() {
return REASEND3_1;
}

public byte getREASEND3_2() {
return REASEND3_2;
}

public byte getREASEND3_3() {
return REASEND3_3;
}

public byte getREASEND3_4() {
return REASEND3_4;
}

public byte getREASEND3_5() {
return REASEND3_5;
}

public byte getREASEND3_6() {
return REASEND3_6;
}

public byte getREASEND3_7() {
return REASEND3_7;
}

public byte getREASEND3_8() {
return REASEND3_8;
}

public byte getREASEND3_9() {
return REASEND3_9;
}

public byte getREASEND4_1() {
return REASEND4_1;
}

public byte getREASEND4_2() {
return REASEND4_2;
}

public byte getREASEND4_3() {
return REASEND4_3;
}

public byte getREASEND4_4() {
return REASEND4_4;
}

public byte getREASEND4_5() {
return REASEND4_5;
}

public byte getREASEND4_6() {
return REASEND4_6;
}

public byte getREASEND4_7() {
return REASEND4_7;
}

public byte getREASEND4_8() {
return REASEND4_8;
}

public byte getREASEND4_9() {
return REASEND4_9;
}

public byte getREASEND5_1() {
return REASEND5_1;
}

public byte getREASEND5_2() {
return REASEND5_2;
}

public byte getREASEND5_3() {
return REASEND5_3;
}

public byte getREASEND5_4() {
return REASEND5_4;
}

public byte getREASEND5_5() {
return REASEND5_5;
}

public byte getREASEND5_6() {
return REASEND5_6;
}

public byte getREASEND5_7() {
return REASEND5_7;
}

public byte getREASEND5_8() {
return REASEND5_8;
}

public byte getREASEND5_9() {
return REASEND5_9;
}

public byte getREASEND6_1() {
return REASEND6_1;
}

public byte getREASEND6_2() {
return REASEND6_2;
}

public byte getREASEND6_3() {
return REASEND6_3;
}

public byte getREASEND6_4() {
return REASEND6_4;
}

public byte getREASEND6_5() {
return REASEND6_5;
}

public byte getREASEND6_6() {
return REASEND6_6;
}

public byte getREASEND6_7() {
return REASEND6_7;
}

public byte getREASEND6_8() {
return REASEND6_8;
}

public byte getREASEND6_9() {
return REASEND6_9;
}

public byte getREASEND7_1() {
return REASEND7_1;
}

public byte getREASEND7_2() {
return REASEND7_2;
}

public byte getREASEND7_3() {
return REASEND7_3;
}

public byte getREASEND7_4() {
return REASEND7_4;
}

public byte getREASEND7_5() {
return REASEND7_5;
}

public byte getREASEND7_6() {
return REASEND7_6;
}

public byte getREASEND7_7() {
return REASEND7_7;
}

public byte getREASEND7_8() {
return REASEND7_8;
}

public byte getREASEND7_9() {
return REASEND7_9;
}

public byte getREASEND8_1() {
return REASEND8_1;
}

public byte getREASEND8_2() {
return REASEND8_2;
}

public byte getREASEND8_3() {
return REASEND8_3;
}

public byte getREASEND8_4() {
return REASEND8_4;
}

public byte getREASEND8_5() {
return REASEND8_5;
}

public byte getREASEND8_6() {
return REASEND8_6;
}

public byte getREASEND8_7() {
return REASEND8_7;
}

public byte getREASEND8_8() {
return REASEND8_8;
}

public byte getREASEND8_9() {
return REASEND8_9;
}

public byte getREASEND97_1() {
return REASEND97_1;
}

public byte getREASEND97_2() {
return REASEND97_2;
}

public byte getREASEND97_3() {
return REASEND97_3;
}

public byte getREASEND97_4() {
return REASEND97_4;
}

public byte getREASEND97_5() {
return REASEND97_5;
}

public byte getREASEND97_6() {
return REASEND97_6;
}

public byte getREASEND97_7() {
return REASEND97_7;
}

public byte getREASEND97_8() {
return REASEND97_8;
}

public byte getREASEND97_9() {
return REASEND97_9;
}

public byte getREASEND9_1() {
return REASEND9_1;
}

public byte getREASEND9_2() {
return REASEND9_2;
}

public byte getREASEND9_3() {
return REASEND9_3;
}

public byte getREASEND9_4() {
return REASEND9_4;
}

public byte getREASEND9_5() {
return REASEND9_5;
}

public byte getREASEND9_6() {
return REASEND9_6;
}

public byte getREASEND9_7() {
return REASEND9_7;
}

public byte getREASEND9_8() {
return REASEND9_8;
}

public byte getREASEND9_9() {
return REASEND9_9;
}

public byte getREASENDOTCODE_1() {
return REASENDOTCODE_1;
}

public byte getREASENDOTCODE_2() {
return REASENDOTCODE_2;
}

public byte getREASENDOTCODE_3() {
return REASENDOTCODE_3;
}

public byte getREASENDOTCODE_4() {
return REASENDOTCODE_4;
}

public byte getREASENDOTCODE_5() {
return REASENDOTCODE_5;
}

public byte getREASENDOTCODE_6() {
return REASENDOTCODE_6;
}

public byte getREASENDOTCODE_7() {
return REASENDOTCODE_7;
}

public byte getREASENDOTCODE_8() {
return REASENDOTCODE_8;
}

public byte getREASENDOTCODE_9() {
return REASENDOTCODE_9;
}

public byte getRELUP() {
return RELUP;
}

public byte getREMAIL_CODE() {
return REMAIL_CODE;
}

public byte getRESPCHILD1() {
return RESPCHILD1;
}

public byte getRESPCHILD10() {
return RESPCHILD10;
}

public byte getRESPCHILD11() {
return RESPCHILD11;
}

public byte getRESPCHILD12() {
return RESPCHILD12;
}

public byte getRESPCHILD13() {
return RESPCHILD13;
}

public byte getRESPCHILD14() {
return RESPCHILD14;
}

public byte getRESPCHILD15() {
return RESPCHILD15;
}

public byte getRESPCHILD16() {
return RESPCHILD16;
}

public byte getRESPCHILD2() {
return RESPCHILD2;
}

public byte getRESPCHILD3() {
return RESPCHILD3;
}

public byte getRESPCHILD4() {
return RESPCHILD4;
}

public byte getRESPCHILD5() {
return RESPCHILD5;
}

public byte getRESPCHILD6() {
return RESPCHILD6;
}

public byte getRESPCHILD7() {
return RESPCHILD7;
}

public byte getRESPCHILD8() {
return RESPCHILD8;
}

public byte getRESPCHILD9() {
return RESPCHILD9;
}

public boolean getRESPF16() {
return RESPF16;
}

public boolean getRESPF16_DV() {
return RESPF16_DV;
}

public boolean getRESPM16() {
return RESPM16;
}

public boolean getRESPM16_DV() {
return RESPM16_DV;
}

public byte getRETAMT() {
return RETAMT;
}

public byte getRETCHK() {
return RETCHK;
}

public byte getRETSUF() {
return RETSUF;
}

public byte getRHLAND_CODE() {
return RHLAND_CODE;
}

public boolean getRINGFENCE() {
return RINGFENCE;
}

public byte getRPHMOB_CODE() {
return RPHMOB_CODE;
}

public byte getRPHWRK_CODE() {
return RPHWRK_CODE;
}

public byte getRTCON1() {
return RTCON1;
}

public byte getRTCON2() {
return RTCON2;
}

public byte getRTCON3() {
return RTCON3;
}

public byte getRTCON4() {
return RTCON4;
}

public byte getRTEXPJB() {
return RTEXPJB;
}

public byte getRTFND1() {
return RTFND1;
}

public byte getRTFND10() {
return RTFND10;
}

public byte getRTFND2() {
return RTFND2;
}

public byte getRTFND3() {
return RTFND3;
}

public byte getRTFND4() {
return RTFND4;
}

public byte getRTFND5() {
return RTFND5;
}

public byte getRTFND6() {
return RTFND6;
}

public byte getRTFND7() {
return RTFND7;
}

public byte getRTFND8() {
return RTFND8;
}

public byte getRTFND9() {
return RTFND9;
}

public byte getRTFND96() {
return RTFND96;
}

public byte getRTPRO1() {
return RTPRO1;
}

public byte getRTPRO2() {
return RTPRO2;
}

public byte getRTPRO3() {
return RTPRO3;
}

public byte getRTPRO4() {
return RTPRO4;
}

public byte getRTPRO5() {
return RTPRO5;
}

public byte getRTPRO6() {
return RTPRO6;
}

public byte getSAMEJOB() {
return SAMEJOB;
}

public short getSAMPST() {
return SAMPST;
}

public byte getSAVDOCS() {
return SAVDOCS;
}

public short getSAVE() {
return SAVE;
}

public int getSAVED() {
return SAVED;
}

public byte getSAVLT() {
return SAVLT;
}

public byte getSAVREG() {
return SAVREG;
}

public byte getSCAC() {
return SCAC;
}

public boolean getSCDATA_DV() {
return SCDATA_DV;
}

public byte getSCFINEMB() {
return SCFINEMB;
}

public byte getSCFINSMALL() {
return SCFINSMALL;
}

public byte getSCFLAG_DV() {
return SCFLAG_DV;
}

public byte getSCHLLOC() {
return SCHLLOC;
}

public byte getSCHOK() {
return SCHOK;
}

public byte getSCHOOL_CAWI() {
return SCHOOL_CAWI;
}

public byte getSCLFSAT1() {
return SCLFSAT1;
}

public byte getSCLFSAT2() {
return SCLFSAT2;
}

public byte getSCLFSAT7() {
return SCLFSAT7;
}

public byte getSCLFSATO() {
return SCLFSATO;
}

public byte getSCRF1() {
return SCRF1;
}

public byte getSCRF2() {
return SCRF2;
}

public byte getSCRF3() {
return SCRF3;
}

public byte getSCRF4() {
return SCRF4;
}

public byte getSCRF5() {
return SCRF5;
}

public byte getSCRF6() {
return SCRF6;
}

public byte getSCRF97() {
return SCRF97;
}

public byte getSCRX_CODE() {
return SCRX_CODE;
}

public byte getSCSF1() {
return SCSF1;
}

public byte getSCSF2A() {
return SCSF2A;
}

public byte getSCSF2B() {
return SCSF2B;
}

public byte getSCSF3A() {
return SCSF3A;
}

public byte getSCSF3B() {
return SCSF3B;
}

public byte getSCSF4A() {
return SCSF4A;
}

public byte getSCSF4B() {
return SCSF4B;
}

public byte getSCSF5() {
return SCSF5;
}

public byte getSCSF6A() {
return SCSF6A;
}

public byte getSCSF6B() {
return SCSF6B;
}

public byte getSCSF6C() {
return SCSF6C;
}

public byte getSCSF7() {
return SCSF7;
}

public byte getSCUN1() {
return SCUN1;
}

public byte getSCUN2() {
return SCUN2;
}

public byte getSCUN3() {
return SCUN3;
}

public byte getSCUN97() {
return SCUN97;
}

public byte getSCUX_CODE() {
return SCUX_CODE;
}

public byte getSCWHORUAGE() {
return SCWHORUAGE;
}

public byte getSCWHORUEDU() {
return SCWHORUEDU;
}

public byte getSCWHORUFAM() {
return SCWHORUFAM;
}

public byte getSCWHORUPOL() {
return SCWHORUPOL;
}

public byte getSCWHORUPRO() {
return SCWHORUPRO;
}

public byte getSCWHORURAC() {
return SCWHORURAC;
}

public byte getSCWHORUSEX() {
return SCWHORUSEX;
}

protected double SEEARNGRS_DV() {
return SEEARNGRS_DV;
}

public byte getSEEARNGRS_IF() {
return SEEARNGRS_IF;
}

protected double SEEARNNET_DV() {
return SEEARNNET_DV;
}

public byte getSEX_DV() {
return SEX_DV;
}

public byte getSF1() {
return SF1;
}

protected double SF12MCS_DV() {
return SF12MCS_DV;
}

protected double SF12PCS_DV() {
return SF12PCS_DV;
}

public boolean getSINGLE_DV() {
return SINGLE_DV;
}

public byte getSMARTMOB() {
return SMARTMOB;
}

public byte getSMKMNTH11() {
return SMKMNTH11;
}

public byte getSMKMNTH12() {
return SMKMNTH12;
}

public byte getSMKMNTH13() {
return SMKMNTH13;
}

public byte getSMKMNTH14() {
return SMKMNTH14;
}

public byte getSMKMNTH21() {
return SMKMNTH21;
}

public byte getSMKMNTH22() {
return SMKMNTH22;
}

public byte getSMKMNTH23() {
return SMKMNTH23;
}

public byte getSMKMNTH24() {
return SMKMNTH24;
}

public byte getSMKMNTH31() {
return SMKMNTH31;
}

public byte getSMKMNTH32() {
return SMKMNTH32;
}

public byte getSMKMNTH33() {
return SMKMNTH33;
}

public byte getSMKMNTH34() {
return SMKMNTH34;
}

public short getSMOKER() {
return SMOKER;
}

public byte getSPPEN() {
return SPPEN;
}

public int getSPPID() {
return SPPID;
}

public byte getSPPNO() {
return SPPNO;
}

public byte getSTATCM1() {
return STATCM1;
}

public byte getSTATCM2() {
return STATCM2;
}

public byte getSTATCM3() {
return STATCM3;
}

public byte getSTATCM4() {
return STATCM4;
}

public byte getSTATCM5() {
return STATCM5;
}

public short getSTATCY41() {
return STATCY41;
}

public short getSTATCY42() {
return STATCY42;
}

public short getSTATCY43() {
return STATCY43;
}

public short getSTATCY44() {
return STATCY44;
}

public short getSTATCY45() {
return STATCY45;
}

public byte getSTATENDD1() {
return STATENDD1;
}

public byte getSTATENDD2() {
return STATENDD2;
}

public byte getSTATENDD3() {
return STATENDD3;
}

public byte getSTATENDD4() {
return STATENDD4;
}

public byte getSTATENDD5() {
return STATENDD5;
}

public byte getSTATENDD6() {
return STATENDD6;
}

public byte getSTATENDD7() {
return STATENDD7;
}

public byte getSTATENDD8() {
return STATENDD8;
}

public byte getSTATENDD9() {
return STATENDD9;
}

public byte getSTATENDM1() {
return STATENDM1;
}

public byte getSTATENDM2() {
return STATENDM2;
}

public byte getSTATENDM3() {
return STATENDM3;
}

public byte getSTATENDM4() {
return STATENDM4;
}

public byte getSTATENDM5() {
return STATENDM5;
}

public byte getSTATENDM6() {
return STATENDM6;
}

public byte getSTATENDM7() {
return STATENDM7;
}

public byte getSTATENDM8() {
return STATENDM8;
}

public byte getSTATENDM9() {
return STATENDM9;
}

public short getSTATENDY41() {
return STATENDY41;
}

public short getSTATENDY42() {
return STATENDY42;
}

public short getSTATENDY43() {
return STATENDY43;
}

public short getSTATENDY44() {
return STATENDY44;
}

public short getSTATENDY45() {
return STATENDY45;
}

public short getSTATENDY46() {
return STATENDY46;
}

public short getSTATENDY47() {
return STATENDY47;
}

public short getSTATENDY48() {
return STATENDY48;
}

public short getSTATENDY49() {
return STATENDY49;
}

public byte getSTENDOTCODE() {
return STENDOTCODE;
}

public byte getSTENDREAS1() {
return STENDREAS1;
}

public byte getSTENDREAS10() {
return STENDREAS10;
}

public byte getSTENDREAS11() {
return STENDREAS11;
}

public byte getSTENDREAS2() {
return STENDREAS2;
}

public byte getSTENDREAS3() {
return STENDREAS3;
}

public byte getSTENDREAS4() {
return STENDREAS4;
}

public byte getSTENDREAS5() {
return STENDREAS5;
}

public byte getSTENDREAS6() {
return STENDREAS6;
}

public byte getSTENDREAS7() {
return STENDREAS7;
}

public byte getSTENDREAS8() {
return STENDREAS8;
}

public byte getSTENDREAS9() {
return STENDREAS9;
}

public byte getSTENDREAS97() {
return STENDREAS97;
}

public short getSTRATA() {
return STRATA;
}

public byte getSUSP() {
return SUSP;
}

public byte getSVACTS1() {
return SVACTS1;
}

public byte getSVACTS2() {
return SVACTS2;
}

public byte getSVACTS3() {
return SVACTS3;
}

public byte getSVACTS4() {
return SVACTS4;
}

public byte getSVACTS5() {
return SVACTS5;
}

public byte getSVACTS96() {
return SVACTS96;
}

public byte getSVACTS97() {
return SVACTS97;
}

public int getSVAMT1() {
return SVAMT1;
}

public int getSVAMT2() {
return SVAMT2;
}

public int getSVAMT3() {
return SVAMT3;
}

public int getSVAMT4() {
return SVAMT4;
}

public int getSVAMT5() {
return SVAMT5;
}

public int getSVAMT6() {
return SVAMT6;
}

public byte getSVB1_1() {
return SVB1_1;
}

public byte getSVB1_2() {
return SVB1_2;
}

public byte getSVB1_3() {
return SVB1_3;
}

public byte getSVB1_4() {
return SVB1_4;
}

public byte getSVB1_5() {
return SVB1_5;
}

public byte getSVB1_6() {
return SVB1_6;
}

public byte getSVB2_1() {
return SVB2_1;
}

public byte getSVB2_2() {
return SVB2_2;
}

public byte getSVB2_3() {
return SVB2_3;
}

public byte getSVB2_4() {
return SVB2_4;
}

public byte getSVB2_5() {
return SVB2_5;
}

public byte getSVB2_6() {
return SVB2_6;
}

public byte getSVB3_1() {
return SVB3_1;
}

public byte getSVB3_2() {
return SVB3_2;
}

public byte getSVB3_3() {
return SVB3_3;
}

public byte getSVB3_4() {
return SVB3_4;
}

public byte getSVB3_5() {
return SVB3_5;
}

public byte getSVB3_6() {
return SVB3_6;
}

public byte getSVB4_1() {
return SVB4_1;
}

public byte getSVB4_2() {
return SVB4_2;
}

public byte getSVB4_3() {
return SVB4_3;
}

public byte getSVB4_4() {
return SVB4_4;
}

public byte getSVB4_5() {
return SVB4_5;
}

public byte getSVB4_6() {
return SVB4_6;
}

public byte getSVB5_1() {
return SVB5_1;
}

public byte getSVB5_2() {
return SVB5_2;
}

public byte getSVB5_3() {
return SVB5_3;
}

public byte getSVB5_4() {
return SVB5_4;
}

public byte getSVB5_5() {
return SVB5_5;
}

public byte getSVB5_6() {
return SVB5_6;
}

public byte getSVPN0_1() {
return SVPN0_1;
}

public byte getSVPN0_2() {
return SVPN0_2;
}

public boolean getSVPN0_3() {
return SVPN0_3;
}

public boolean getSVPN0_4() {
return SVPN0_4;
}

public boolean getSVPN0_5() {
return SVPN0_5;
}

public boolean getSVPN0_6() {
return SVPN0_6;
}

public byte getSVPN10_1() {
return SVPN10_1;
}

public byte getSVPN10_2() {
return SVPN10_2;
}

public boolean getSVPN10_3() {
return SVPN10_3;
}

public boolean getSVPN10_4() {
return SVPN10_4;
}

public boolean getSVPN10_5() {
return SVPN10_5;
}

public boolean getSVPN10_6() {
return SVPN10_6;
}

public byte getSVPN11_1() {
return SVPN11_1;
}

public byte getSVPN11_2() {
return SVPN11_2;
}

public boolean getSVPN11_3() {
return SVPN11_3;
}

public boolean getSVPN11_4() {
return SVPN11_4;
}

public boolean getSVPN11_5() {
return SVPN11_5;
}

public boolean getSVPN11_6() {
return SVPN11_6;
}

public byte getSVPN12_1() {
return SVPN12_1;
}

public byte getSVPN12_2() {
return SVPN12_2;
}

public boolean getSVPN12_3() {
return SVPN12_3;
}

public boolean getSVPN12_4() {
return SVPN12_4;
}

public boolean getSVPN12_5() {
return SVPN12_5;
}

public boolean getSVPN12_6() {
return SVPN12_6;
}

public byte getSVPN13_1() {
return SVPN13_1;
}

public byte getSVPN13_2() {
return SVPN13_2;
}

public boolean getSVPN13_3() {
return SVPN13_3;
}

public boolean getSVPN13_4() {
return SVPN13_4;
}

public boolean getSVPN13_5() {
return SVPN13_5;
}

public boolean getSVPN13_6() {
return SVPN13_6;
}

public byte getSVPN14_1() {
return SVPN14_1;
}

public byte getSVPN14_2() {
return SVPN14_2;
}

public boolean getSVPN14_3() {
return SVPN14_3;
}

public boolean getSVPN14_4() {
return SVPN14_4;
}

public boolean getSVPN14_5() {
return SVPN14_5;
}

public boolean getSVPN14_6() {
return SVPN14_6;
}

public byte getSVPN15_1() {
return SVPN15_1;
}

public byte getSVPN15_2() {
return SVPN15_2;
}

public boolean getSVPN15_3() {
return SVPN15_3;
}

public boolean getSVPN15_4() {
return SVPN15_4;
}

public boolean getSVPN15_5() {
return SVPN15_5;
}

public boolean getSVPN15_6() {
return SVPN15_6;
}

public byte getSVPN16_1() {
return SVPN16_1;
}

public byte getSVPN16_2() {
return SVPN16_2;
}

public boolean getSVPN16_3() {
return SVPN16_3;
}

public boolean getSVPN16_4() {
return SVPN16_4;
}

public boolean getSVPN16_5() {
return SVPN16_5;
}

public boolean getSVPN16_6() {
return SVPN16_6;
}

public byte getSVPN1_1() {
return SVPN1_1;
}

public byte getSVPN1_2() {
return SVPN1_2;
}

public boolean getSVPN1_3() {
return SVPN1_3;
}

public boolean getSVPN1_4() {
return SVPN1_4;
}

public boolean getSVPN1_5() {
return SVPN1_5;
}

public boolean getSVPN1_6() {
return SVPN1_6;
}

public byte getSVPN2_1() {
return SVPN2_1;
}

public byte getSVPN2_2() {
return SVPN2_2;
}

public boolean getSVPN2_3() {
return SVPN2_3;
}

public boolean getSVPN2_4() {
return SVPN2_4;
}

public boolean getSVPN2_5() {
return SVPN2_5;
}

public boolean getSVPN2_6() {
return SVPN2_6;
}

public byte getSVPN3_1() {
return SVPN3_1;
}

public byte getSVPN3_2() {
return SVPN3_2;
}

public boolean getSVPN3_3() {
return SVPN3_3;
}

public boolean getSVPN3_4() {
return SVPN3_4;
}

public boolean getSVPN3_5() {
return SVPN3_5;
}

public boolean getSVPN3_6() {
return SVPN3_6;
}

public byte getSVPN4_1() {
return SVPN4_1;
}

public byte getSVPN4_2() {
return SVPN4_2;
}

public boolean getSVPN4_3() {
return SVPN4_3;
}

public boolean getSVPN4_4() {
return SVPN4_4;
}

public boolean getSVPN4_5() {
return SVPN4_5;
}

public boolean getSVPN4_6() {
return SVPN4_6;
}

public byte getSVPN5_1() {
return SVPN5_1;
}

public byte getSVPN5_2() {
return SVPN5_2;
}

public boolean getSVPN5_3() {
return SVPN5_3;
}

public boolean getSVPN5_4() {
return SVPN5_4;
}

public boolean getSVPN5_5() {
return SVPN5_5;
}

public boolean getSVPN5_6() {
return SVPN5_6;
}

public byte getSVPN6_1() {
return SVPN6_1;
}

public byte getSVPN6_2() {
return SVPN6_2;
}

public boolean getSVPN6_3() {
return SVPN6_3;
}

public boolean getSVPN6_4() {
return SVPN6_4;
}

public boolean getSVPN6_5() {
return SVPN6_5;
}

public boolean getSVPN6_6() {
return SVPN6_6;
}

public byte getSVPN7_1() {
return SVPN7_1;
}

public byte getSVPN7_2() {
return SVPN7_2;
}

public boolean getSVPN7_3() {
return SVPN7_3;
}

public boolean getSVPN7_4() {
return SVPN7_4;
}

public boolean getSVPN7_5() {
return SVPN7_5;
}

public boolean getSVPN7_6() {
return SVPN7_6;
}

public byte getSVPN8_1() {
return SVPN8_1;
}

public byte getSVPN8_2() {
return SVPN8_2;
}

public boolean getSVPN8_3() {
return SVPN8_3;
}

public boolean getSVPN8_4() {
return SVPN8_4;
}

public boolean getSVPN8_5() {
return SVPN8_5;
}

public boolean getSVPN8_6() {
return SVPN8_6;
}

public byte getSVPN9_1() {
return SVPN9_1;
}

public byte getSVPN9_2() {
return SVPN9_2;
}

public boolean getSVPN9_3() {
return SVPN9_3;
}

public boolean getSVPN9_4() {
return SVPN9_4;
}

public boolean getSVPN9_5() {
return SVPN9_5;
}

public boolean getSVPN9_6() {
return SVPN9_6;
}

public byte getSVSJ1() {
return SVSJ1;
}

public byte getSVSJ2() {
return SVSJ2;
}

public boolean getSVSJ3() {
return SVSJ3;
}

public boolean getSVSJ4() {
return SVSJ4;
}

public boolean getSVSJ5() {
return SVSJ5;
}

public boolean getSVSJ6() {
return SVSJ6;
}

public int getSVSK1() {
return SVSK1;
}

public int getSVSK2() {
return SVSK2;
}

public boolean getSVSK3() {
return SVSK3;
}

public boolean getSVSK4() {
return SVSK4;
}

public boolean getSVSK5() {
return SVSK5;
}

public boolean getSVSK6() {
return SVSK6;
}

public byte getTRAINANY() {
return TRAINANY;
}

public short getTRAINDAYS1() {
return TRAINDAYS1;
}

public short getTRAINDAYS2() {
return TRAINDAYS2;
}

public short getTRAINDAYS3() {
return TRAINDAYS3;
}

public byte getTRAINEND1() {
return TRAINEND1;
}

public byte getTRAINEND2() {
return TRAINEND2;
}

public byte getTRAINEND3() {
return TRAINEND3;
}

public byte getTRAINHRS1() {
return TRAINHRS1;
}

public byte getTRAINHRS2() {
return TRAINHRS2;
}

public byte getTRAINHRS3() {
return TRAINHRS3;
}

public byte getTRAINN() {
return TRAINN;
}

public byte getTRAINPURP11() {
return TRAINPURP11;
}

public byte getTRAINPURP12() {
return TRAINPURP12;
}

public byte getTRAINPURP13() {
return TRAINPURP13;
}

public byte getTRAINPURP21() {
return TRAINPURP21;
}

public byte getTRAINPURP22() {
return TRAINPURP22;
}

public byte getTRAINPURP23() {
return TRAINPURP23;
}

public byte getTRAINPURP31() {
return TRAINPURP31;
}

public byte getTRAINPURP32() {
return TRAINPURP32;
}

public byte getTRAINPURP33() {
return TRAINPURP33;
}

public byte getTRAINPURP41() {
return TRAINPURP41;
}

public byte getTRAINPURP42() {
return TRAINPURP42;
}

public byte getTRAINPURP43() {
return TRAINPURP43;
}

public byte getTRAINPURP51() {
return TRAINPURP51;
}

public byte getTRAINPURP52() {
return TRAINPURP52;
}

public byte getTRAINPURP53() {
return TRAINPURP53;
}

public byte getTRAINPURP61() {
return TRAINPURP61;
}

public byte getTRAINPURP62() {
return TRAINPURP62;
}

public byte getTRAINPURP63() {
return TRAINPURP63;
}

public byte getTRAINPURP71() {
return TRAINPURP71;
}

public byte getTRAINPURP72() {
return TRAINPURP72;
}

public byte getTRAINPURP73() {
return TRAINPURP73;
}

public byte getTRAINQUAL1() {
return TRAINQUAL1;
}

public byte getTRAINQUAL2() {
return TRAINQUAL2;
}

public byte getTRAINQUAL3() {
return TRAINQUAL3;
}

public byte getTRBIKEFQ() {
return TRBIKEFQ;
}

public byte getTRBUSFQ() {
return TRBUSFQ;
}

public byte getTRCARFQ() {
return TRCARFQ;
}

public byte getTRQUAL1() {
return TRQUAL1;
}

public byte getTRQUAL10() {
return TRQUAL10;
}

public byte getTRQUAL11() {
return TRQUAL11;
}

public byte getTRQUAL13() {
return TRQUAL13;
}

public byte getTRQUAL15() {
return TRQUAL15;
}

public byte getTRQUAL16() {
return TRQUAL16;
}

public byte getTRQUAL17() {
return TRQUAL17;
}

public byte getTRQUAL18() {
return TRQUAL18;
}

public byte getTRQUAL19() {
return TRQUAL19;
}

public byte getTRQUAL2() {
return TRQUAL2;
}

public byte getTRQUAL20() {
return TRQUAL20;
}

public byte getTRQUAL21() {
return TRQUAL21;
}

public byte getTRQUAL22() {
return TRQUAL22;
}

public byte getTRQUAL23() {
return TRQUAL23;
}

public byte getTRQUAL24() {
return TRQUAL24;
}

public byte getTRQUAL25() {
return TRQUAL25;
}

public byte getTRQUAL26() {
return TRQUAL26;
}

public byte getTRQUAL27() {
return TRQUAL27;
}

public byte getTRQUAL28() {
return TRQUAL28;
}

public byte getTRQUAL29() {
return TRQUAL29;
}

public byte getTRQUAL3() {
return TRQUAL3;
}

public byte getTRQUAL30() {
return TRQUAL30;
}

public byte getTRQUAL31() {
return TRQUAL31;
}

public byte getTRQUAL32() {
return TRQUAL32;
}

public byte getTRQUAL33() {
return TRQUAL33;
}

public byte getTRQUAL34() {
return TRQUAL34;
}

public byte getTRQUAL4() {
return TRQUAL4;
}

public byte getTRQUAL5() {
return TRQUAL5;
}

public byte getTRQUAL6() {
return TRQUAL6;
}

public byte getTRQUAL7() {
return TRQUAL7;
}

public byte getTRQUAL8() {
return TRQUAL8;
}

public byte getTRQUAL9() {
return TRQUAL9;
}

public byte getTRTRNFQ() {
return TRTRNFQ;
}

public byte getTRWHO1() {
return TRWHO1;
}

public byte getTRWHO2() {
return TRWHO2;
}

public byte getTRWHO3() {
return TRWHO3;
}

public short getTUIN1() {
return TUIN1;
}

public short getTUJBPL() {
return TUJBPL;
}

public byte getTWKCAR() {
return TWKCAR;
}

public byte getTWKDIFF1() {
return TWKDIFF1;
}

public byte getTWKDIFF2() {
return TWKDIFF2;
}

public byte getTWKDIFF3() {
return TWKDIFF3;
}

public byte getTWKDIFF4() {
return TWKDIFF4;
}

public byte getTWKDIFF5() {
return TWKDIFF5;
}

public byte getTWKDIFF6() {
return TWKDIFF6;
}

public byte getTWKDIFF7() {
return TWKDIFF7;
}

public byte getTWKDIFF8() {
return TWKDIFF8;
}

public byte getTWKDIFF97() {
return TWKDIFF97;
}

public byte getTWKDIFFM() {
return TWKDIFFM;
}

public byte getUKBORN() {
return UKBORN;
}

public byte getUNDQUS() {
return UNDQUS;
}

public byte getUNIFIN1() {
return UNIFIN1;
}

public byte getUNISUB1() {
return UNISUB1;
}

public byte getUPSET() {
return UPSET;
}

public byte getURBAN_DV() {
return URBAN_DV;
}

public byte getVOLFREQ() {
return VOLFREQ;
}

public short getVOLHRS() {
return VOLHRS;
}

public byte getVOLUN() {
return VOLUN;
}

public byte getVOTE7() {
return VOTE7;
}

public byte getVOTE8() {
return VOTE8;
}

public byte getVOUCHLETTER() {
return VOUCHLETTER;
}

public byte getWKAUT1() {
return WKAUT1;
}

public byte getWKAUT2() {
return WKAUT2;
}

public byte getWKAUT3() {
return WKAUT3;
}

public byte getWKAUT4() {
return WKAUT4;
}

public byte getWKAUT5() {
return WKAUT5;
}

public byte getWKENDS() {
return WKENDS;
}

public byte getWKPLSAM() {
return WKPLSAM;
}

public short getWKTIME() {
return WKTIME;
}

public short getWORKDIS() {
return WORKDIS;
}

public byte getWORKTRAV() {
return WORKTRAV;
}

public int getXPBORROW() {
return XPBORROW;
}

public int getXPEARN1() {
return XPEARN1;
}

public byte getXPEARN1DK() {
return XPEARN1DK;
}

public int getXPEARN3() {
return XPEARN3;
}

public byte getXPEARN3DK() {
return XPEARN3DK;
}

public int getXPEARNG1() {
return XPEARNG1;
}

public byte getXPEARNG1DK() {
return XPEARNG1DK;
}

public int getXPEARNG3() {
return XPEARNG3;
}

public byte getXPEARNG3DK() {
return XPEARNG3DK;
}

public byte getXPMOVE() {
return XPMOVE;
}

public byte getXPMVMNTH() {
return XPMVMNTH;
}

public byte getXPMVWHN() {
return XPMVWHN;
}

public byte getXPMVWHR() {
return XPMVWHR;
}

public short getXPMVYR() {
return XPMVYR;
}

public int getXPTUITION() {
return XPTUITION;
}

public byte getXTRA5MINOSM_DV() {
return XTRA5MINOSM_DV;
}

public byte getXTRA5MIN_DV() {
return XTRA5MIN_DV;
}

public byte getYAFUTA() {
return YAFUTA;
}

public byte getYAFUTB() {
return YAFUTB;
}

public byte getYAJBSRV1() {
return YAJBSRV1;
}

public byte getYAJBSRV2() {
return YAJBSRV2;
}

public byte getYAJBSRV3() {
return YAJBSRV3;
}

public byte getYAJBSRV4() {
return YAJBSRV4;
}

public byte getYAJBSRV5() {
return YAJBSRV5;
}

public byte getYAJBSRV7() {
return YAJBSRV7;
}

public byte getYAJBSRV8() {
return YAJBSRV8;
}

public byte getYAJBSRV96() {
return YAJBSRV96;
}

public byte getYANSSEC5_DV() {
return YANSSEC5_DV;
}

public short getYASOC00_CC() {
return YASOC00_CC;
}

public short getYASOC10_CC() {
return YASOC10_CC;
}

public byte getYASOC90_CC() {
return YASOC90_CC;
}

public byte getYNOTBIKE1() {
return YNOTBIKE1;
}

public byte getYNOTBIKE2() {
return YNOTBIKE2;
}

public byte getYNOTBIKE3() {
return YNOTBIKE3;
}

public byte getYNOTBIKE96() {
return YNOTBIKE96;
}

public byte getYPAMAR() {
return YPAMAR;
}

public byte getYPAPAR() {
return YPAPAR;
}

public byte getYPESTA() {
return YPESTA;
}

public byte getYPESTB() {
return YPESTB;
}

public byte getYPESTC() {
return YPESTC;
}

public byte getYPESTE() {
return YPESTE;
}

public byte getYPESTF() {
return YPESTF;
}

public byte getYPESTI() {
return YPESTI;
}

public byte getYPESTJ() {
return YPESTJ;
}

public byte getYPESTK() {
return YPESTK;
}

public byte getYPNETCHT() {
return YPNETCHT;
}

public byte getYPNPAL() {
return YPNPAL;
}

public byte getYPSOCWEB() {
return YPSOCWEB;
}

public US_Wave26_indresp_Record(String line) {
s = line.split("\t");
initPIDP(s[0]);
initPID(s[1]);
initHIDP(s[2]);
initPNO(s[3]);
initCHILDPNO(s[4]);
initHHORIG(s[5]);
initMEMORIG(s[6]);
initPSU(s[7]);
initSTRATA(s[8]);
initSAMPST(s[9]);
initMONTH(s[10]);
initQUARTER(s[11]);
initIVFIO(s[12]);
initIOUTCOME(s[13]);
initSEX(s[14]);
initDVAGE(s[15]);
initBIRTHY(s[16]);
initCHKRESPWEB1(s[17]);
initCHKRESPWEB2(s[18]);
initCHKRESPWEB3(s[19]);
initCHKRESPWEB4(s[20]);
initCHKWEBDOBD(s[21]);
initCHKWEBDOBM(s[22]);
initCHKWEBDOBY(s[23]);
initCHKWEBSEX(s[24]);
initNCHUNDER16(s[25]);
initNCH5TO15(s[26]);
initNCH10TO15(s[27]);
initNCH10(s[28]);
initNUNDER16ABS(s[29]);
initN1619ABS(s[30]);
initNCHRESP(s[31]);
initNCH14RESP(s[32]);
initNCH415RESP(s[33]);
initNCH3RESP(s[34]);
initNCH5RESP(s[35]);
initNCH8RESP(s[36]);
initRESPCHILD1(s[37]);
initRESPCHILD2(s[38]);
initRESPCHILD3(s[39]);
initRESPCHILD4(s[40]);
initRESPCHILD5(s[41]);
initRESPCHILD6(s[42]);
initRESPCHILD7(s[43]);
initRESPCHILD8(s[44]);
initRESPCHILD9(s[45]);
initRESPCHILD10(s[46]);
initRESPCHILD11(s[47]);
initRESPCHILD12(s[48]);
initRESPCHILD13(s[49]);
initRESPCHILD14(s[50]);
initRESPCHILD15(s[51]);
initRESPCHILD16(s[52]);
initNADOPTCH(s[53]);
initNNATCH(s[54]);
initISTRTDATHH(s[55]);
initISTRTDATMM(s[56]);
initISTRTDATSS(s[57]);
initISTRTDATY(s[58]);
initISTRTDATM(s[59]);
initISTRTDATD(s[60]);
initLIENG(s[61]);
initLITRANS(s[62]);
initLIWHO(s[63]);
initLIHOW(s[64]);
initCHKRESP1(s[65]);
initCHKRESP2(s[66]);
initCHKRESP3(s[67]);
initCHKRESP4(s[68]);
initDCDOBY(s[69]);
initDCSEX(s[70]);
initPBIRTHY(s[71]);
initPDVAGE(s[72]);
initMVEVER(s[73]);
initMVMNTH(s[74]);
initMVYR(s[75]);
initLKMOVE(s[76]);
initXPMOVE(s[77]);
initXPMVWHN(s[78]);
initXPMVMNTH(s[79]);
initXPMVYR(s[80]);
initXPMVWHR(s[81]);
initJBSTAT(s[82]);
initMLSTATCHK(s[83]);
initMLSTAT(s[84]);
initDRIVE(s[85]);
initCARUSE(s[86]);
initMOBUSE(s[87]);
initSMARTMOB(s[88]);
initMOBCOMP(s[89]);
initNETPUSE(s[90]);
initUKBORN(s[91]);
initPLBORNC(s[92]);
initYR2UK4(s[93]);
initCITZN1(s[94]);
initCITZN2(s[95]);
initCITZN3(s[96]);
initQFHIGH(s[97]);
initQUALOC(s[98]);
initGCSE5(s[99]);
initGCSEENG(s[100]);
initGCSEMAT(s[101]);
initGCSEENGE(s[102]);
initGCSEMATE(s[103]);
initGCSEENGW(s[104]);
initGCSEMATW(s[105]);
initQFVOC1(s[106]);
initQFVOC2(s[107]);
initQFVOC3(s[108]);
initQFVOC4(s[109]);
initQFVOC5(s[110]);
initQFVOC6(s[111]);
initQFVOC7(s[112]);
initQFVOC8(s[113]);
initQFVOC9(s[114]);
initQFVOC10(s[115]);
initQFVOC11(s[116]);
initQFVOC12(s[117]);
initQFVOC13(s[118]);
initQFVOC14(s[119]);
initQFVOC15(s[120]);
initQFVOC96(s[121]);
initSCHOOL_CAWI(s[122]);
initSCHOOL(s[123]);
initSCEND(s[124]);
initSCHLLOC(s[125]);
initSCHOK(s[126]);
initFENOW_CAWI(s[127]);
initFENOW(s[128]);
initFEEND(s[129]);
initJ1NONE(s[130]);
initJ1SEMP(s[131]);
initJ1BOSS(s[132]);
initJ1MNGR(s[133]);
initEDTYPE(s[134]);
initEDASP(s[135]);
initLVSCHDO(s[136]);
initAHVWELL(s[137]);
initHEDLIK(s[138]);
initHEDNT(s[139]);
initYPAMAR(s[140]);
initYPAPAR(s[141]);
initLVHM(s[142]);
initODDSQUAL(s[143]);
initHEAPPLIED(s[144]);
initODDSAPPLY(s[145]);
initODDSSCHOL(s[146]);
initXPTUITION(s[147]);
initXPBORROW(s[148]);
initUNIFIN1(s[149]);
initUNISUB1(s[150]);
initODDSEMP1(s[151]);
initODDSEMP3(s[152]);
initXPEARN1(s[153]);
initXPEARN1DK(s[154]);
initXPEARN3(s[155]);
initXPEARN3DK(s[156]);
initXPEARNG1(s[157]);
initXPEARNG1DK(s[158]);
initXPEARNG3(s[159]);
initXPEARNG3DK(s[160]);
initPEDCHPNO(s[161]);
initPODDSQUAL(s[162]);
initPHEAPPLIED(s[163]);
initPODDSAPPLY(s[164]);
initPODDSSCHOL(s[165]);
initPXPTUITION(s[166]);
initPXPBORROW(s[167]);
initPUNIFIN1(s[168]);
initPUNISUB1(s[169]);
initPODDSEMP1(s[170]);
initPODDSEMP3(s[171]);
initPXPEARN1(s[172]);
initPXPEARN1DK(s[173]);
initPXPEARN3(s[174]);
initPXPEARN3DK(s[175]);
initPXPEARNG1(s[176]);
initPXPEARNG1DK(s[177]);
initPXPEARNG3(s[178]);
initPXPEARNG3DK(s[179]);
initPAJU(s[180]);
initMAJU(s[181]);
initPACOB(s[182]);
initPAYRUK(s[183]);
initMACOB(s[184]);
initMAYRUK(s[185]);
initNATID1(s[186]);
initNATID2(s[187]);
initNATID3(s[188]);
initNATID4(s[189]);
initNATID5(s[190]);
initNATID6(s[191]);
initNATID97(s[192]);
initRACEL(s[193]);
initRACELO_CODE(s[194]);
initRACELT(s[195]);
initRACELWT(s[196]);
initRACELMT(s[197]);
initRACELAT(s[198]);
initRACELBT(s[199]);
initRACELOT_CODE(s[200]);
initKIDLANG(s[201]);
initETHID2(s[202]);
initETHID3(s[203]);
initETHID4A(s[204]);
initETHID4B(s[205]);
initETHID5(s[206]);
initETHID6(s[207]);
initETHID7(s[208]);
initETHID8(s[209]);
initETHID9(s[210]);
initETHID10(s[211]);
initETHID11(s[212]);
initETHID12(s[213]);
initETHID13(s[214]);
initETHID14(s[215]);
initETHCLOSE1(s[216]);
initETHCLOSE2A(s[217]);
initETHCLOSE2B(s[218]);
initETHCLOSE3(s[219]);
initETHCLOSE4A(s[220]);
initETHCLOSE4B(s[221]);
initETHCLOSE5(s[222]);
initETHCLOSE6(s[223]);
initETHCLOSE7(s[224]);
initETHCLOSE8(s[225]);
initETHCLOSE9(s[226]);
initETHCLOSE10(s[227]);
initETHCLOSE11(s[228]);
initPRIDE2(s[229]);
initPRIDE4A(s[230]);
initPRIDE4B(s[231]);
initPRIDE6(s[232]);
initPRIDE7(s[233]);
initPRIDE5(s[234]);
initPRIDE8(s[235]);
initPRIDE9(s[236]);
initPRIDE10(s[237]);
initPRIDE11(s[238]);
initPRIDE12(s[239]);
initPRIDE13(s[240]);
initPRIDE14(s[241]);
initFOOD1(s[242]);
initFOOD2(s[243]);
initFOOD3(s[244]);
initFOOD4(s[245]);
initFOOD5(s[246]);
initFOOD6(s[247]);
initFOOD7(s[248]);
initOPRLG(s[249]);
initOPRLG0(s[250]);
initOPRLG1(s[251]);
initOPRLG0NI(s[252]);
initNIREL(s[253]);
initNIACT(s[254]);
initOPRLG2(s[255]);
initPRAYFREQ(s[256]);
initOPRLG3(s[257]);
initHEALTH(s[258]);
initDISDIF1(s[259]);
initDISDIF2(s[260]);
initDISDIF3(s[261]);
initDISDIF4(s[262]);
initDISDIF5(s[263]);
initDISDIF6(s[264]);
initDISDIF7(s[265]);
initDISDIF8(s[266]);
initDISDIF9(s[267]);
initDISDIF10(s[268]);
initDISDIF11(s[269]);
initDISDIF12(s[270]);
initDISDIF96(s[271]);
initDISSEV1(s[272]);
initDISSEV2(s[273]);
initDISSEV3(s[274]);
initDISSEV4(s[275]);
initDISSEV5(s[276]);
initDISSEV6(s[277]);
initDISSEV7(s[278]);
initDISSEV8(s[279]);
initDISSEV9(s[280]);
initDISSEV10(s[281]);
initDISSEV11(s[282]);
initDISSEV12(s[283]);
initHCOND1(s[284]);
initHCOND2(s[285]);
initHCOND3(s[286]);
initHCOND4(s[287]);
initHCOND5(s[288]);
initHCOND6(s[289]);
initHCOND7(s[290]);
initHCOND8(s[291]);
initHCOND9(s[292]);
initHCOND10(s[293]);
initHCOND11(s[294]);
initHCOND12(s[295]);
initHCOND13(s[296]);
initHCOND14(s[297]);
initHCOND15(s[298]);
initHCOND16(s[299]);
initHCOND17(s[300]);
initHCOND19(s[301]);
initHCOND20(s[302]);
initHCOND18(s[303]);
initHCOND96(s[304]);
initHCONDS01(s[305]);
initHCONDS02(s[306]);
initHCONDS03(s[307]);
initHCONDS04(s[308]);
initHCONDS05(s[309]);
initHCONDS08(s[310]);
initHCONDS09(s[311]);
initHCONDS10(s[312]);
initHCONDS11(s[313]);
initHCONDS12(s[314]);
initHCONDS13(s[315]);
initHCONDS14(s[316]);
initHCONDS15(s[317]);
initHCONDS16(s[318]);
initHCONDS17(s[319]);
initHCONDA01(s[320]);
initHCONDA02(s[321]);
initHCONDA03(s[322]);
initHCONDA04(s[323]);
initHCONDA05(s[324]);
initHCONDA06(s[325]);
initHCONDA07(s[326]);
initHCONDA08(s[327]);
initHCONDA09(s[328]);
initHCONDA10(s[329]);
initHCONDA11(s[330]);
initHCONDA12(s[331]);
initHCONDA13(s[332]);
initHCONDA14(s[333]);
initHCONDA15(s[334]);
initHCONDA16(s[335]);
initHCONDA17(s[336]);
initHCONDA19(s[337]);
initHCONDA20(s[338]);
initHL2GP(s[339]);
initHL2HOP(s[340]);
initHOSP(s[341]);
initHOSPD(s[342]);
initHOSPCH(s[343]);
initSMOKER(s[344]);
initNCIGS(s[345]);
initECIGS(s[346]);
initAIDHH(s[347]);
initAIDHUA1(s[348]);
initAIDHUA2(s[349]);
initAIDHUA3(s[350]);
initAIDHUA4(s[351]);
initAIDHUA5(s[352]);
initAIDHUA6(s[353]);
initAIDHUA7(s[354]);
initAIDHUA8(s[355]);
initAIDHUA9(s[356]);
initAIDHUA10(s[357]);
initAIDHUA11(s[358]);
initAIDHUA12(s[359]);
initAIDHUA13(s[360]);
initAIDHUA14(s[361]);
initAIDHUA15(s[362]);
initAIDHUA16(s[363]);
initAIDXHH(s[364]);
initNAIDXHH(s[365]);
initAIDHU1(s[366]);
initAIDHU2(s[367]);
initAIDHRS(s[368]);
initAIDEFT(s[369]);
initCASCH(s[370]);
initLCOHNPI(s[371]);
initCOH1BM(s[372]);
initCOH1BY(s[373]);
initCOH1MR(s[374]);
initCOH1EM(s[375]);
initCOH1EY(s[376]);
initNMAR(s[377]);
initLMAR1M(s[378]);
initLMAR1Y(s[379]);
initLADOPT(s[380]);
initLNADOPT(s[381]);
initLPRNT(s[382]);
initLNPRNT(s[383]);
initCH1BY4(s[384]);
initADCTS(s[385]);
initMOVY11(s[386]);
initMOVY12(s[387]);
initMOVY13(s[388]);
initMOVY14(s[389]);
initMOVY15(s[390]);
initMOVY16(s[391]);
initFAMILY(s[392]);
initEDUCATION(s[393]);
initMEMPLOY(s[394]);
initHOUSING(s[395]);
initAREA(s[396]);
initMOVEOTCODE(s[397]);
initMOVDIR(s[398]);
initPLNOWM(s[399]);
initPLNOWY4(s[400]);
initRELUP(s[401]);
initMSTATSAM(s[402]);
initLWWRONG(s[403]);
initMSTATSAMN(s[404]);
initCURRMSTAT(s[405]);
initCOHAB(s[406]);
initCOHABN(s[407]);
initFATHER(s[408]);
initNCHILD(s[409]);
initPREG(s[410]);
initNNEWBORN(s[411]);
initHCONDN1(s[412]);
initHCONDN2(s[413]);
initHCONDN3(s[414]);
initHCONDN4(s[415]);
initHCONDN5(s[416]);
initHCONDN6(s[417]);
initHCONDN7(s[418]);
initHCONDN8(s[419]);
initHCONDN9(s[420]);
initHCONDN10(s[421]);
initHCONDN11(s[422]);
initHCONDN12(s[423]);
initHCONDN13(s[424]);
initHCONDN14(s[425]);
initHCONDN15(s[426]);
initHCONDN16(s[427]);
initHCONDN17(s[428]);
initHCONDN19(s[429]);
initHCONDN20(s[430]);
initHCONDN18(s[431]);
initHCONDN96(s[432]);
initHCONDO_CODE(s[433]);
initHCONDNO_CODE(s[434]);
initHCONDNO1(s[435]);
initHCONDNS1(s[436]);
initHCONDNO2(s[437]);
initHCONDNS2(s[438]);
initHCONDNO3(s[439]);
initHCONDNS3(s[440]);
initHCONDNO4(s[441]);
initHCONDNS4(s[442]);
initHCONDNO5(s[443]);
initHCONDNS5(s[444]);
initHCONDNO6(s[445]);
initHCONDNS6(s[446]);
initHCONDNO7(s[447]);
initHCONDNS7(s[448]);
initCONTFT(s[449]);
initFTENDM(s[450]);
initFTENDY4(s[451]);
initFTEDANY(s[452]);
initFTQUALS(s[453]);
initQUALNEW1(s[454]);
initQUALNEW2(s[455]);
initQUALNEW3(s[456]);
initQUALNEW4(s[457]);
initQUALNEW5(s[458]);
initQUALNEW6(s[459]);
initQUALNEW7(s[460]);
initQUALNEW8(s[461]);
initQUALNEW9(s[462]);
initQUALNEW10(s[463]);
initQUALNEW11(s[464]);
initQUALNEW13(s[465]);
initQUALNEW15(s[466]);
initQUALNEW32(s[467]);
initQUALNEW33(s[468]);
initQUALNEW16(s[469]);
initQUALNEW17(s[470]);
initQUALNEW18(s[471]);
initQUALNEW19(s[472]);
initQUALNEW20(s[473]);
initQUALNEW21(s[474]);
initQUALNEW22(s[475]);
initQUALNEW23(s[476]);
initQUALNEW24(s[477]);
initQUALNEW25(s[478]);
initQUALNEW26(s[479]);
initQUALNEW27(s[480]);
initQUALNEW28(s[481]);
initQUALNEW29(s[482]);
initQUALNEW30(s[483]);
initQUALNEW31(s[484]);
initNGCSE5(s[485]);
initNGCSEENG(s[486]);
initNGCSEMAT(s[487]);
initNGCSEENGNIE(s[488]);
initGCSEENGNUM(s[489]);
initGCSEENGALPHA(s[490]);
initNGCSEMATNIE(s[491]);
initGCSEMATNUM(s[492]);
initGCSEMATALPHA(s[493]);
initTRAINANY(s[494]);
initTRAINN(s[495]);
initTRQUAL1(s[496]);
initTRQUAL2(s[497]);
initTRQUAL3(s[498]);
initTRQUAL4(s[499]);
initTRQUAL5(s[500]);
initTRQUAL6(s[501]);
initTRQUAL7(s[502]);
initTRQUAL8(s[503]);
initTRQUAL9(s[504]);
initTRQUAL10(s[505]);
initTRQUAL11(s[506]);
initTRQUAL13(s[507]);
initTRQUAL15(s[508]);
initTRQUAL32(s[509]);
initTRQUAL33(s[510]);
initTRQUAL16(s[511]);
initTRQUAL17(s[512]);
initTRQUAL18(s[513]);
initTRQUAL19(s[514]);
initTRQUAL20(s[515]);
initTRQUAL21(s[516]);
initTRQUAL22(s[517]);
initTRQUAL23(s[518]);
initTRQUAL24(s[519]);
initTRQUAL25(s[520]);
initTRQUAL26(s[521]);
initTRQUAL27(s[522]);
initTRQUAL28(s[523]);
initTRQUAL29(s[524]);
initTRQUAL30(s[525]);
initTRQUAL34(s[526]);
initTRQUAL31(s[527]);
initNOTEMPCHK(s[528]);
initEMPCHK(s[529]);
initEMPSTENDD(s[530]);
initEMPSTENDM(s[531]);
initEMPSTENDY4(s[532]);
initSTENDREAS1(s[533]);
initSTENDREAS2(s[534]);
initSTENDREAS3(s[535]);
initSTENDREAS4(s[536]);
initSTENDREAS5(s[537]);
initSTENDREAS6(s[538]);
initSTENDREAS7(s[539]);
initSTENDREAS8(s[540]);
initSTENDREAS9(s[541]);
initSTENDREAS10(s[542]);
initSTENDREAS11(s[543]);
initSTENDREAS97(s[544]);
initNXTST(s[545]);
initNXTSTELSE(s[546]);
initCSTAT(s[547]);
initNXTSTENDD(s[548]);
initNXTSTENDM(s[549]);
initNXTSTENDY4(s[550]);
initJBSAMR(s[551]);
initWKPLSAM(s[552]);
initSAMEJOB(s[553]);
initMATLV(s[554]);
initMATLVSTD(s[555]);
initMATLVSTM(s[556]);
initMATLVSTY4(s[557]);
initMATLVENDD(s[558]);
initMATLVENDM(s[559]);
initMATLVENDY4(s[560]);
initJBENDD(s[561]);
initJBENDM(s[562]);
initJBENDY4(s[563]);
initJBENDREAS1(s[564]);
initJBENDREAS2(s[565]);
initJBENDREAS3(s[566]);
initJBENDREAS4(s[567]);
initJBENDREAS5(s[568]);
initJBENDREAS6(s[569]);
initJBENDREAS7(s[570]);
initJBENDREAS8(s[571]);
initJBENDREAS9(s[572]);
initJBENDREAS10(s[573]);
initJBENDREAS11(s[574]);
initJBENDREAS97(s[575]);
initCJOB(s[576]);
initNXTJBHRS(s[577]);
initNXTJBES(s[578]);
initNXTJBENDD(s[579]);
initNXTJBENDM(s[580]);
initNXTJBENDY4(s[581]);
initNXTENDREAS1(s[582]);
initNXTENDREAS2(s[583]);
initNXTENDREAS3(s[584]);
initNXTENDREAS4(s[585]);
initNXTENDREAS5(s[586]);
initNXTENDREAS6(s[587]);
initNXTENDREAS7(s[588]);
initNXTENDREAS8(s[589]);
initNXTENDREAS9(s[590]);
initNXTENDREAS10(s[591]);
initNXTENDREAS11(s[592]);
initNXTENDREAS97(s[593]);
initCJBATT(s[594]);
initJBHAS(s[595]);
initJBOFF(s[596]);
initJBOFFY(s[597]);
initJBTERM1(s[598]);
initJBTERM2(s[599]);
initJBSIC07CHK(s[600]);
initJBSOC00CHK(s[601]);
initJBSEMPCHK(s[602]);
initJBSEMP(s[603]);
initJBBGD(s[604]);
initJBBGM(s[605]);
initJBBGY(s[606]);
initJBMNGRCHK(s[607]);
initJBMNGR(s[608]);
initJBSIZECHK(s[609]);
initJBSIZE(s[610]);
initJBSECT(s[611]);
initJBSECTPUB(s[612]);
initJBHRS(s[613]);
initJBOT(s[614]);
initJBOTPD(s[615]);
initJBPL(s[616]);
initPAYGWC(s[617]);
initPAYNWC(s[618]);
initPAYUSL(s[619]);
initPAYU(s[620]);
initPAYUWC(s[621]);
initPAYUG(s[622]);
initPAYTYP(s[623]);
initOVTPAY(s[624]);
initPVTPYSET(s[625]);
initEXTRATE(s[626]);
initEXTREST(s[627]);
initBASNSET(s[628]);
initBASRATE(s[629]);
initBASREST(s[630]);
initOVTNSET(s[631]);
initOVTRATE(s[632]);
initOVTREST(s[633]);
initJBTTWT(s[634]);
initWORKTRAV(s[635]);
initJSBOSS(s[636]);
initJSSIZE(s[637]);
initJSHRS(s[638]);
initJSTYPEB(s[639]);
initJSACCS(s[640]);
initJSPART(s[641]);
initJSPRBM(s[642]);
initJSPRBY4(s[643]);
initJSPREM(s[644]);
initJSPREY4(s[645]);
initJSPRLS(s[646]);
initJSPRTX(s[647]);
initJSPRNI(s[648]);
initJSWORKAC(s[649]);
initJSOWNSUM(s[650]);
initJSOWNAMT(s[651]);
initJSOWNOTH(s[652]);
initJSOWOTAM(s[653]);
initJSPAYU(s[654]);
initJSPAYW(s[655]);
initJSPYTX(s[656]);
initJSPYNI(s[657]);
initJSPL(s[658]);
initJSTTWTB_CAWI(s[659]);
initJSTTWT(s[660]);
initJSTTWTB(s[661]);
initJSWORKTRAV(s[662]);
initWORKDIS(s[663]);
initTWKDIFF1(s[664]);
initTWKDIFF2(s[665]);
initTWKDIFF3(s[666]);
initTWKDIFF4(s[667]);
initTWKDIFF5(s[668]);
initTWKDIFF6(s[669]);
initTWKDIFF7(s[670]);
initTWKDIFF8(s[671]);
initTWKDIFF97(s[672]);
initTWKDIFFM(s[673]);
initTWKCAR(s[674]);
initJBSAT(s[675]);
initJBPERFP(s[676]);
initJBONUS(s[677]);
initJBRISE(s[678]);
initTUJBPL(s[679]);
initTUIN1(s[680]);
initJBPEN(s[681]);
initJBPENM(s[682]);
initJBPENY4(s[683]);
initPENMCN(s[684]);
initPENMPY(s[685]);
initPENMTP(s[686]);
initPENSPB(s[687]);
initWKTIME(s[688]);
initWKENDS(s[689]);
initJBFLEX1(s[690]);
initJBFLEX2(s[691]);
initJBFLEX3(s[692]);
initJBFLEX4(s[693]);
initJBFLEX5(s[694]);
initJBFLEX6(s[695]);
initJBFLEX7(s[696]);
initJBFLEX9(s[697]);
initJBFLEX10(s[698]);
initJBFLEX8(s[699]);
initJBFLEX96(s[700]);
initJBFXUSE1(s[701]);
initJBFXUSE2(s[702]);
initJBFXUSE3(s[703]);
initJBFXUSE4(s[704]);
initJBFXUSE5(s[705]);
initJBFXUSE6(s[706]);
initJBFXUSE7(s[707]);
initJBFXUSE9(s[708]);
initJBFXUSE10(s[709]);
initJBFXUSE8(s[710]);
initJBFXUSE96(s[711]);
initJBFXINF(s[712]);
initWKAUT1(s[713]);
initWKAUT2(s[714]);
initWKAUT3(s[715]);
initWKAUT4(s[716]);
initWKAUT5(s[717]);
initDEPENTH1(s[718]);
initDEPENTH2(s[719]);
initDEPENTH3(s[720]);
initDEPENTH4(s[721]);
initDEPENTH5(s[722]);
initDEPENTH6(s[723]);
initJBLKCHA(s[724]);
initJBXPCHA(s[725]);
initJBLKCHB(s[726]);
initJBXPCHB(s[727]);
initJBLKCHC(s[728]);
initJBXPCHC(s[729]);
initJBLKCHD(s[730]);
initJBXPCHD(s[731]);
initJBLKCHE(s[732]);
initJBXPCHE(s[733]);
initJBSEC(s[734]);
initJULK4WK(s[735]);
initJULKJB(s[736]);
initJUBGN(s[737]);
initJULK4X1(s[738]);
initJULK4X2(s[739]);
initJULK4X3(s[740]);
initJULK4X4(s[741]);
initJULK4X5(s[742]);
initJULK4X6(s[743]);
initJULK4X96(s[744]);
initJBHAD(s[745]);
initJLENDM(s[746]);
initJLENDY(s[747]);
initJLSEMP(s[748]);
initJLBOSS(s[749]);
initJLMNGR(s[750]);
initJLSIZE(s[751]);
initEPROSH(s[752]);
initMATLEAVE(s[753]);
initMLFUTR(s[754]);
initMLRNOT1(s[755]);
initMLRNOT2(s[756]);
initMLRNOT3(s[757]);
initMLRNOT4(s[758]);
initMLRNOT5(s[759]);
initMLRNOT6(s[760]);
initMLRNOT7(s[761]);
initMLRNOT8(s[762]);
initMLRNOT9(s[763]);
initMLRNOT10(s[764]);
initMLRNOT11(s[765]);
initMLRNOT12(s[766]);
initMLRNOT13(s[767]);
initMLRNOT97(s[768]);
initMLAGST(s[769]);
initMLAGSTU(s[770]);
initMLWKFPT(s[771]);
initJ2HAS(s[772]);
initJ2SEMP(s[773]);
initJ2HRS(s[774]);
initJ2PAY(s[775]);
initVOLUN(s[776]);
initVOLFREQ(s[777]);
initVOLHRS(s[778]);
initCHARGV(s[779]);
initCHARFREQ(s[780]);
initCHARAM(s[781]);
initTRCARFQ(s[782]);
initTRBUSFQ(s[783]);
initTRTRNFQ(s[784]);
initTRBIKEFQ(s[785]);
initYNOTBIKE1(s[786]);
initYNOTBIKE2(s[787]);
initYNOTBIKE3(s[788]);
initYNOTBIKE96(s[789]);
initCARSRV1(s[790]);
initCARSRV2(s[791]);
initCARSRV3(s[792]);
initPNCARS(s[793]);
initHUCAR(s[794]);
initCARBUY1(s[795]);
initCARBUY2(s[796]);
initCARBUY3(s[797]);
initCARBUY4(s[798]);
initCARBUY5(s[799]);
initCARBUY6(s[800]);
initCARBUY7(s[801]);
initCARBUY8(s[802]);
initCARBUY9(s[803]);
initCARBUY10(s[804]);
initCARBUY11(s[805]);
initCARBUY12(s[806]);
initCARBUY97(s[807]);
initCCARE(s[808]);
initCCWORK(s[809]);
initBENBASE1(s[810]);
initBENBASE2(s[811]);
initBENBASE3(s[812]);
initBENBASE4(s[813]);
initBENBASE96(s[814]);
initBENCTC(s[815]);
initBENPEN1(s[816]);
initBENPEN2(s[817]);
initBENPEN3(s[818]);
initBENPEN4(s[819]);
initBENPEN5(s[820]);
initBENPEN6(s[821]);
initBENPEN7(s[822]);
initBENPEN8(s[823]);
initBENPEN96(s[824]);
initNISERPS(s[825]);
initBENDIS1(s[826]);
initBENDIS2(s[827]);
initBENDIS3(s[828]);
initBENDIS4(s[829]);
initBENDIS5(s[830]);
initBENDIS12(s[831]);
initBENDIS7(s[832]);
initBENDIS8(s[833]);
initBENDIS10(s[834]);
initBENDIS97(s[835]);
initBENDIS96(s[836]);
initBENESA(s[837]);
initOTHBEN1(s[838]);
initOTHBEN2(s[839]);
initOTHBEN3(s[840]);
initOTHBEN4(s[841]);
initOTHBEN5(s[842]);
initOTHBEN6(s[843]);
initOTHBEN7(s[844]);
initOTHBEN8(s[845]);
initOTHBEN9(s[846]);
initOTHBEN97(s[847]);
initOTHBEN96(s[848]);
initBENSTA2(s[849]);
initBENSTA3(s[850]);
initBENSTA4(s[851]);
initBENSTA5(s[852]);
initBENSTA6(s[853]);
initBENSTA7(s[854]);
initBENSTA97(s[855]);
initBENSTA96(s[856]);
initMISSOURCE01(s[857]);
initMISSOURCE02(s[858]);
initMISSOURCE03(s[859]);
initMISSOURCE04(s[860]);
initMISSOURCE05(s[861]);
initMISSOURCE06(s[862]);
initMISSOURCE07(s[863]);
initMISSOURCE08(s[864]);
initMISSOURCE09(s[865]);
initMISSOURCE10(s[866]);
initMISSOURCE11(s[867]);
initMISSOURCE12(s[868]);
initMISSOURCE13(s[869]);
initMISSOURCE14(s[870]);
initMISSOURCE15(s[871]);
initMISSOURCE16(s[872]);
initMISSOURCE18(s[873]);
initMISSOURCE19(s[874]);
initMISSOURCE20(s[875]);
initMISSOURCE21(s[876]);
initMISSOURCE22(s[877]);
initMISSOURCE23(s[878]);
initMISSOURCE24(s[879]);
initMISSOURCE25(s[880]);
initMISSOURCE26(s[881]);
initMISSOURCE27(s[882]);
initMISSOURCE28(s[883]);
initMISSOURCE29(s[884]);
initMISSOURCE30(s[885]);
initMISSOURCE31(s[886]);
initMISSOURCE32(s[887]);
initMISSOURCE33(s[888]);
initMISSOURCE34(s[889]);
initMISSOURCE35(s[890]);
initMISSOURCE36(s[891]);
initMISSOURCE37(s[892]);
initMISSOURCE38(s[893]);
initMISSOURCE39(s[894]);
initMISSOURCE40(s[895]);
initMISSOURCE41(s[896]);
initNFH01(s[897]);
initNFH02(s[898]);
initNFH03(s[899]);
initNFH04(s[900]);
initNFH05(s[901]);
initNFH06(s[902]);
initNFH07(s[903]);
initNFH08(s[904]);
initNFH09(s[905]);
initNFH10(s[906]);
initNFH11(s[907]);
initNFH12(s[908]);
initNFH13(s[909]);
initNFH14(s[910]);
initNFH15(s[911]);
initNFH16(s[912]);
initNFH18(s[913]);
initNFH19(s[914]);
initNFH20(s[915]);
initNFH21(s[916]);
initNFH22(s[917]);
initNFH23(s[918]);
initNFH24(s[919]);
initNFH25(s[920]);
initNFH26(s[921]);
initNFH27(s[922]);
initNFH28(s[923]);
initNFH29(s[924]);
initNFH30(s[925]);
initNFH31(s[926]);
initNFH32(s[927]);
initNFH33(s[928]);
initNFH34(s[929]);
initNFH35(s[930]);
initNFH36(s[931]);
initNFH37(s[932]);
initNFH38(s[933]);
initNFH39(s[934]);
initNFH40(s[935]);
initNFH41(s[936]);
initSVACTS1(s[937]);
initSVACTS2(s[938]);
initSVACTS3(s[939]);
initSVACTS4(s[940]);
initSVACTS5(s[941]);
initSVACTS97(s[942]);
initSVACTS96(s[943]);
initSAVDOCS(s[944]);
initCCSOLE(s[945]);
initNCCSOLE(s[946]);
initCREDSOLE(s[947]);
initCCBILLSOLE(s[948]);
initCCAMTSOLE(s[949]);
initCCJT(s[950]);
initNCCJT(s[951]);
initCCJTP0(s[952]);
initCCJTP1(s[953]);
initCCJTP2(s[954]);
initCCJTP3(s[955]);
initCCJTP4(s[956]);
initCCJTP5(s[957]);
initCCJTP6(s[958]);
initCCJTP7(s[959]);
initCCJTP8(s[960]);
initCCJTP9(s[961]);
initCCJTP10(s[962]);
initCCJTP11(s[963]);
initCCJTP12(s[964]);
initCCJTP13(s[965]);
initCCJTP14(s[966]);
initCCJTP15(s[967]);
initCCJTP16(s[968]);
initCREDJT(s[969]);
initCCBILLJT(s[970]);
initCCAMTJT(s[971]);
initDEBT1(s[972]);
initDEBT2(s[973]);
initDEBT4(s[974]);
initDEBT5(s[975]);
initDEBT6(s[976]);
initDEBT7(s[977]);
initDEBT8(s[978]);
initDEBT97(s[979]);
initDEBT96(s[980]);
initDEBTY(s[981]);
initDEBTC1(s[982]);
initDEBTC2(s[983]);
initDEBTC3(s[984]);
initDEBTC5(s[985]);
initDEBTC4(s[986]);
initDEBTSJ(s[987]);
initDEBTPN0(s[988]);
initDEBTPN1(s[989]);
initDEBTPN2(s[990]);
initDEBTPN3(s[991]);
initDEBTPN4(s[992]);
initDEBTPN5(s[993]);
initDEBTPN6(s[994]);
initDEBTPN7(s[995]);
initDEBTPN8(s[996]);
initDEBTPN9(s[997]);
initDEBTPN10(s[998]);
initDEBTPN11(s[999]);
initDEBTPN12(s[1000]);
initDEBTPN13(s[1001]);
initDEBTPN14(s[1002]);
initDEBTPN15(s[1003]);
initDEBTPN16(s[1004]);
initDEBTSK(s[1005]);
initHURUNS(s[1006]);
initFIYRDIA(s[1007]);
initFIYRDB1(s[1008]);
initFIYRDB2(s[1009]);
initFIYRDB3(s[1010]);
initFIYRDB5(s[1011]);
initFIYRDB4(s[1012]);
initFIYRDB6(s[1013]);
initFINNOW(s[1014]);
initFINFUT(s[1015]);
initSAVE(s[1016]);
initSAVED(s[1017]);
initSAVREG(s[1018]);
initSAVLT(s[1019]);
initPPEN(s[1020]);
initPPENT(s[1021]);
initPPYRS(s[1022]);
initPPREG(s[1023]);
initPPRAM(s[1024]);
initPPRAMPC(s[1025]);
initRETCHK(s[1026]);
initAGERET(s[1027]);
initRTPRO1(s[1028]);
initRTPRO2(s[1029]);
initRTPRO3(s[1030]);
initRTPRO4(s[1031]);
initRTPRO5(s[1032]);
initRTPRO6(s[1033]);
initRTCON1(s[1034]);
initRTCON2(s[1035]);
initRTCON3(s[1036]);
initRTCON4(s[1037]);
initPENMEX(s[1038]);
initPPPEX(s[1039]);
initPPPEXM(s[1040]);
initSPPEN(s[1041]);
initRTEXPJB(s[1042]);
initRTFND1(s[1043]);
initRTFND2(s[1044]);
initRTFND3(s[1045]);
initRTFND4(s[1046]);
initRTFND5(s[1047]);
initRTFND6(s[1048]);
initRTFND7(s[1049]);
initRTFND8(s[1050]);
initRTFND9(s[1051]);
initRTFND10(s[1052]);
initRTFND96(s[1053]);
initRETAMT(s[1054]);
initRETSUF(s[1055]);
initHUBUYS(s[1056]);
initHUFRYS(s[1057]);
initHUMOPS(s[1058]);
initHUIRON(s[1059]);
initHUPOTS(s[1060]);
initHUDIY(s[1061]);
initHUSITS(s[1062]);
initHUBOSS(s[1063]);
initHOWLNG(s[1064]);
initSCAC(s[1065]);
initSCRF1(s[1066]);
initSCRF2(s[1067]);
initSCRF3(s[1068]);
initSCRF4(s[1069]);
initSCRF5(s[1070]);
initSCRF6(s[1071]);
initSCRF97(s[1072]);
initSCUN1(s[1073]);
initSCUN2(s[1074]);
initSCUN3(s[1075]);
initSCUN97(s[1076]);
initVOTE7(s[1077]);
initVOTE8(s[1078]);
initSCSF1(s[1079]);
initSCSF2A(s[1080]);
initSCSF2B(s[1081]);
initSCSF3A(s[1082]);
initSCSF3B(s[1083]);
initSCSF4A(s[1084]);
initSCSF4B(s[1085]);
initSCSF5(s[1086]);
initSCSF6A(s[1087]);
initSCSF6B(s[1088]);
initSCSF6C(s[1089]);
initSCSF7(s[1090]);
initSCGHQA(s[1091]);
initSCGHQB(s[1092]);
initSCGHQC(s[1093]);
initSCGHQD(s[1094]);
initSCGHQE(s[1095]);
initSCGHQF(s[1096]);
initSCGHQG(s[1097]);
initSCGHQH(s[1098]);
initSCGHQI(s[1099]);
initSCGHQJ(s[1100]);
initSCGHQK(s[1101]);
initSCGHQL(s[1102]);
initSCLFSAT1(s[1103]);
initSCLFSAT2(s[1104]);
initSCLFSAT7(s[1105]);
initSCLFSATO(s[1106]);
initEUMEM(s[1107]);
initSCWHORUPRO(s[1108]);
initSCWHORUEDU(s[1109]);
initSCWHORURAC(s[1110]);
initSCWHORUPOL(s[1111]);
initSCWHORUFAM(s[1112]);
initSCWHORUSEX(s[1113]);
initSCWHORUAGE(s[1114]);
initSCFINEMB(s[1115]);
initSCFINSMALL(s[1116]);
initYPNPAL(s[1117]);
initYPSOCWEB(s[1118]);
initYPNETCHT(s[1119]);
initEATLIVU(s[1120]);
initFAMSUP(s[1121]);
initUPSET(s[1122]);
initLATE(s[1123]);
initYPESTA(s[1124]);
initYPESTI(s[1125]);
initYPESTB(s[1126]);
initYPESTJ(s[1127]);
initYPESTC(s[1128]);
initYPESTK(s[1129]);
initYPESTE(s[1130]);
initYPESTF(s[1131]);
initYAJBSRV1(s[1132]);
initYAJBSRV2(s[1133]);
initYAJBSRV3(s[1134]);
initYAJBSRV4(s[1135]);
initYAJBSRV5(s[1136]);
initYAJBSRV8(s[1137]);
initYAJBSRV7(s[1138]);
initYAJBSRV96(s[1139]);
initEVRALC(s[1140]);
initDKLM(s[1141]);
initFIVEALCDR(s[1142]);
initDRNK4W(s[1143]);
initDRGSOL(s[1144]);
initDRGMJ(s[1145]);
initDRGOTH(s[1146]);
initFRDRG(s[1147]);
initNCRR1(s[1148]);
initNCRRM(s[1149]);
initNCRRY4(s[1150]);
initNCRR3(s[1151]);
initNCRR4(s[1152]);
initNCRR5(s[1153]);
initNCRR6(s[1154]);
initNCRR8(s[1155]);
initNCRR9(s[1156]);
initNCRR11(s[1157]);
initNCRR12(s[1158]);
initCASIINTNO(s[1159]);
initHMRCLINK(s[1160]);
initVOUCHLETTER(s[1161]);
initIENDDATHH(s[1162]);
initIENDDATMM(s[1163]);
initIENDDATSS(s[1164]);
initIENDDATY(s[1165]);
initIENDDATM(s[1166]);
initIENDDATD(s[1167]);
initHMRCESENT(s[1168]);
initHEDNTO_CODE(s[1169]);
initYAFUTA(s[1170]);
initYAFUTB(s[1171]);
initSTENDOTCODE(s[1172]);
initJBENDOTCODE(s[1173]);
initNXTENDOTCODE(s[1174]);
initSCRX_CODE(s[1175]);
initSCUX_CODE(s[1176]);
initMARSTAT(s[1177]);
initLIVESP(s[1178]);
initLIVEWITH(s[1179]);
initEMPLOY(s[1180]);
initLINGUA(s[1181]);
initNEXTSTAT1(s[1182]);
initNEXTELSE1(s[1183]);
initCURRSTAT1(s[1184]);
initNEXTJOB1(s[1185]);
initCURRJOB1(s[1186]);
initJOBHOURS1(s[1187]);
initREASEND1_1(s[1188]);
initREASEND2_1(s[1189]);
initREASEND3_1(s[1190]);
initREASEND4_1(s[1191]);
initREASEND5_1(s[1192]);
initREASEND6_1(s[1193]);
initREASEND7_1(s[1194]);
initREASEND8_1(s[1195]);
initREASEND9_1(s[1196]);
initREASEND10_1(s[1197]);
initREASEND11_1(s[1198]);
initREASEND97_1(s[1199]);
initJBATT1(s[1200]);
initSTATENDD1(s[1201]);
initSTATENDM1(s[1202]);
initSTATENDY41(s[1203]);
initREASENDOTCODE_1(s[1204]);
initNEXTSTAT2(s[1205]);
initNEXTELSE2(s[1206]);
initCURRSTAT2(s[1207]);
initNEXTJOB2(s[1208]);
initCURRJOB2(s[1209]);
initJOBHOURS2(s[1210]);
initREASEND1_2(s[1211]);
initREASEND2_2(s[1212]);
initREASEND3_2(s[1213]);
initREASEND4_2(s[1214]);
initREASEND5_2(s[1215]);
initREASEND6_2(s[1216]);
initREASEND7_2(s[1217]);
initREASEND8_2(s[1218]);
initREASEND9_2(s[1219]);
initREASEND10_2(s[1220]);
initREASEND11_2(s[1221]);
initREASEND97_2(s[1222]);
initJBATT2(s[1223]);
initSTATENDD2(s[1224]);
initSTATENDM2(s[1225]);
initSTATENDY42(s[1226]);
initREASENDOTCODE_2(s[1227]);
initNEXTSTAT3(s[1228]);
initNEXTELSE3(s[1229]);
initCURRSTAT3(s[1230]);
initNEXTJOB3(s[1231]);
initCURRJOB3(s[1232]);
initJOBHOURS3(s[1233]);
initREASEND1_3(s[1234]);
initREASEND2_3(s[1235]);
initREASEND3_3(s[1236]);
initREASEND4_3(s[1237]);
initREASEND5_3(s[1238]);
initREASEND6_3(s[1239]);
initREASEND7_3(s[1240]);
initREASEND8_3(s[1241]);
initREASEND9_3(s[1242]);
initREASEND10_3(s[1243]);
initREASEND11_3(s[1244]);
initREASEND97_3(s[1245]);
initJBATT3(s[1246]);
initSTATENDD3(s[1247]);
initSTATENDM3(s[1248]);
initSTATENDY43(s[1249]);
initREASENDOTCODE_3(s[1250]);
initNEXTSTAT4(s[1251]);
initNEXTELSE4(s[1252]);
initCURRSTAT4(s[1253]);
initNEXTJOB4(s[1254]);
initCURRJOB4(s[1255]);
initJOBHOURS4(s[1256]);
initREASEND1_4(s[1257]);
initREASEND2_4(s[1258]);
initREASEND3_4(s[1259]);
initREASEND4_4(s[1260]);
initREASEND5_4(s[1261]);
initREASEND6_4(s[1262]);
initREASEND7_4(s[1263]);
initREASEND8_4(s[1264]);
initREASEND9_4(s[1265]);
initREASEND10_4(s[1266]);
initREASEND11_4(s[1267]);
initREASEND97_4(s[1268]);
initJBATT4(s[1269]);
initSTATENDD4(s[1270]);
initSTATENDM4(s[1271]);
initSTATENDY44(s[1272]);
initREASENDOTCODE_4(s[1273]);
initNEXTSTAT5(s[1274]);
initNEXTELSE5(s[1275]);
initCURRSTAT5(s[1276]);
initNEXTJOB5(s[1277]);
initCURRJOB5(s[1278]);
initJOBHOURS5(s[1279]);
initREASEND1_5(s[1280]);
initREASEND2_5(s[1281]);
initREASEND3_5(s[1282]);
initREASEND4_5(s[1283]);
initREASEND5_5(s[1284]);
initREASEND6_5(s[1285]);
initREASEND7_5(s[1286]);
initREASEND8_5(s[1287]);
initREASEND9_5(s[1288]);
initREASEND10_5(s[1289]);
initREASEND11_5(s[1290]);
initREASEND97_5(s[1291]);
initJBATT5(s[1292]);
initSTATENDD5(s[1293]);
initSTATENDM5(s[1294]);
initSTATENDY45(s[1295]);
initREASENDOTCODE_5(s[1296]);
initNEXTSTAT6(s[1297]);
initNEXTELSE6(s[1298]);
initCURRSTAT6(s[1299]);
initNEXTJOB6(s[1300]);
initCURRJOB6(s[1301]);
initJOBHOURS6(s[1302]);
initREASEND1_6(s[1303]);
initREASEND2_6(s[1304]);
initREASEND3_6(s[1305]);
initREASEND4_6(s[1306]);
initREASEND5_6(s[1307]);
initREASEND6_6(s[1308]);
initREASEND7_6(s[1309]);
initREASEND8_6(s[1310]);
initREASEND9_6(s[1311]);
initREASEND10_6(s[1312]);
initREASEND11_6(s[1313]);
initREASEND97_6(s[1314]);
initJBATT6(s[1315]);
initSTATENDD6(s[1316]);
initSTATENDM6(s[1317]);
initSTATENDY46(s[1318]);
initREASENDOTCODE_6(s[1319]);
initNEXTSTAT7(s[1320]);
initNEXTELSE7(s[1321]);
initCURRSTAT7(s[1322]);
initNEXTJOB7(s[1323]);
initCURRJOB7(s[1324]);
initJOBHOURS7(s[1325]);
initREASEND1_7(s[1326]);
initREASEND2_7(s[1327]);
initREASEND3_7(s[1328]);
initREASEND4_7(s[1329]);
initREASEND5_7(s[1330]);
initREASEND6_7(s[1331]);
initREASEND7_7(s[1332]);
initREASEND8_7(s[1333]);
initREASEND9_7(s[1334]);
initREASEND10_7(s[1335]);
initREASEND11_7(s[1336]);
initREASEND97_7(s[1337]);
initJBATT7(s[1338]);
initSTATENDD7(s[1339]);
initSTATENDM7(s[1340]);
initSTATENDY47(s[1341]);
initREASENDOTCODE_7(s[1342]);
initNEXTSTAT8(s[1343]);
initNEXTELSE8(s[1344]);
initCURRSTAT8(s[1345]);
initNEXTJOB8(s[1346]);
initCURRJOB8(s[1347]);
initJOBHOURS8(s[1348]);
initREASEND1_8(s[1349]);
initREASEND2_8(s[1350]);
initREASEND3_8(s[1351]);
initREASEND4_8(s[1352]);
initREASEND5_8(s[1353]);
initREASEND6_8(s[1354]);
initREASEND7_8(s[1355]);
initREASEND8_8(s[1356]);
initREASEND9_8(s[1357]);
initREASEND10_8(s[1358]);
initREASEND11_8(s[1359]);
initREASEND97_8(s[1360]);
initJBATT8(s[1361]);
initSTATENDD8(s[1362]);
initSTATENDM8(s[1363]);
initSTATENDY48(s[1364]);
initREASENDOTCODE_8(s[1365]);
initNEXTSTAT9(s[1366]);
initNEXTELSE9(s[1367]);
initCURRSTAT9(s[1368]);
initNEXTJOB9(s[1369]);
initCURRJOB9(s[1370]);
initJOBHOURS9(s[1371]);
initREASEND1_9(s[1372]);
initREASEND2_9(s[1373]);
initREASEND3_9(s[1374]);
initREASEND4_9(s[1375]);
initREASEND5_9(s[1376]);
initREASEND6_9(s[1377]);
initREASEND7_9(s[1378]);
initREASEND8_9(s[1379]);
initREASEND9_9(s[1380]);
initREASEND10_9(s[1381]);
initREASEND11_9(s[1382]);
initREASEND97_9(s[1383]);
initJBATT9(s[1384]);
initSTATENDD9(s[1385]);
initSTATENDM9(s[1386]);
initSTATENDY49(s[1387]);
initREASENDOTCODE_9(s[1388]);
initMSTATCH1(s[1389]);
initSTATCM1(s[1390]);
initSTATCY41(s[1391]);
initDIVCHK1(s[1392]);
initDIVFIN1(s[1393]);
initDVM1(s[1394]);
initDVY41(s[1395]);
initCMLSTAT1(s[1396]);
initMSTATCH2(s[1397]);
initSTATCM2(s[1398]);
initSTATCY42(s[1399]);
initDIVCHK2(s[1400]);
initDIVFIN2(s[1401]);
initDVM2(s[1402]);
initDVY42(s[1403]);
initCMLSTAT2(s[1404]);
initMSTATCH3(s[1405]);
initSTATCM3(s[1406]);
initSTATCY43(s[1407]);
initDIVCHK3(s[1408]);
initDIVFIN3(s[1409]);
initDVM3(s[1410]);
initDVY43(s[1411]);
initCMLSTAT3(s[1412]);
initMSTATCH4(s[1413]);
initSTATCM4(s[1414]);
initSTATCY44(s[1415]);
initDIVCHK4(s[1416]);
initDIVFIN4(s[1417]);
initDVM4(s[1418]);
initDVY44(s[1419]);
initCMLSTAT4(s[1420]);
initMSTATCH5(s[1421]);
initSTATCM5(s[1422]);
initSTATCY45(s[1423]);
initDIVCHK5(s[1424]);
initDIVFIN5(s[1425]);
initDVM5(s[1426]);
initDVY45(s[1427]);
initCMLSTAT5(s[1428]);
initPREGM1(s[1429]);
initPREGY41(s[1430]);
initPREGFERT1(s[1431]);
initPREGFT11(s[1432]);
initPREGFT21(s[1433]);
initPREGFT31(s[1434]);
initPREGFT41(s[1435]);
initPREGFT51(s[1436]);
initPREGFT61(s[1437]);
initPREGFT961(s[1438]);
initPREGSPD1(s[1439]);
initPREGOUT1(s[1440]);
initPREGEND1(s[1441]);
initENDMNTH1(s[1442]);
initPREGSMOKE1(s[1443]);
initSMKMNTH11(s[1444]);
initSMKMNTH21(s[1445]);
initSMKMNTH31(s[1446]);
initPREGSMK11(s[1447]);
initPREGSMK21(s[1448]);
initPREGSMK31(s[1449]);
initAEDROF1(s[1450]);
initAEPUWK1(s[1451]);
initAEPUDA1(s[1452]);
initLCHMULTI1(s[1453]);
initPREGM2(s[1454]);
initPREGY42(s[1455]);
initPREGFERT2(s[1456]);
initPREGFT12(s[1457]);
initPREGFT22(s[1458]);
initPREGFT32(s[1459]);
initPREGFT42(s[1460]);
initPREGFT52(s[1461]);
initPREGFT62(s[1462]);
initPREGFT962(s[1463]);
initPREGSPD2(s[1464]);
initPREGOUT2(s[1465]);
initPREGEND2(s[1466]);
initENDMNTH2(s[1467]);
initPREGSMOKE2(s[1468]);
initSMKMNTH12(s[1469]);
initSMKMNTH22(s[1470]);
initSMKMNTH32(s[1471]);
initPREGSMK12(s[1472]);
initPREGSMK22(s[1473]);
initPREGSMK32(s[1474]);
initAEDROF2(s[1475]);
initAEPUWK2(s[1476]);
initAEPUDA2(s[1477]);
initLCHMULTI2(s[1478]);
initPREGM3(s[1479]);
initPREGY43(s[1480]);
initPREGFERT3(s[1481]);
initPREGFT13(s[1482]);
initPREGFT23(s[1483]);
initPREGFT33(s[1484]);
initPREGFT43(s[1485]);
initPREGFT53(s[1486]);
initPREGFT63(s[1487]);
initPREGFT963(s[1488]);
initPREGSPD3(s[1489]);
initPREGOUT3(s[1490]);
initPREGEND3(s[1491]);
initENDMNTH3(s[1492]);
initPREGSMOKE3(s[1493]);
initSMKMNTH13(s[1494]);
initSMKMNTH23(s[1495]);
initSMKMNTH33(s[1496]);
initPREGSMK13(s[1497]);
initPREGSMK23(s[1498]);
initPREGSMK33(s[1499]);
initAEDROF3(s[1500]);
initAEPUWK3(s[1501]);
initAEPUDA3(s[1502]);
initLCHMULTI3(s[1503]);
initPREGM4(s[1504]);
initPREGY44(s[1505]);
initPREGFERT4(s[1506]);
initPREGFT14(s[1507]);
initPREGFT24(s[1508]);
initPREGFT34(s[1509]);
initPREGFT44(s[1510]);
initPREGFT54(s[1511]);
initPREGFT64(s[1512]);
initPREGFT964(s[1513]);
initPREGSPD4(s[1514]);
initPREGOUT4(s[1515]);
initPREGEND4(s[1516]);
initENDMNTH4(s[1517]);
initPREGSMOKE4(s[1518]);
initSMKMNTH14(s[1519]);
initSMKMNTH24(s[1520]);
initSMKMNTH34(s[1521]);
initPREGSMK14(s[1522]);
initPREGSMK24(s[1523]);
initPREGSMK34(s[1524]);
initAEDROF4(s[1525]);
initAEPUWK4(s[1526]);
initAEPUDA4(s[1527]);
initLCHMULTI4(s[1528]);
initPS1(s[1529]);
initPS2(s[1530]);
initPS3(s[1531]);
initPS4(s[1532]);
initPS5(s[1533]);
initPS6(s[1534]);
initPS7(s[1535]);
initPS8(s[1536]);
initPS9(s[1537]);
initPS10(s[1538]);
initPS11(s[1539]);
initPS12(s[1540]);
initPS13(s[1541]);
initPS14(s[1542]);
initPS15(s[1543]);
initPS16(s[1544]);
initPS17(s[1545]);
initPS18(s[1546]);
initPS19(s[1547]);
initPS20(s[1548]);
initPS21(s[1549]);
initPS22(s[1550]);
initPS23(s[1551]);
initPS24(s[1552]);
initPS25(s[1553]);
initPS26(s[1554]);
initPS27(s[1555]);
initPS28(s[1556]);
initPS29(s[1557]);
initPS30(s[1558]);
initPS31(s[1559]);
initPS32(s[1560]);
initPSNUMCH(s[1561]);
initSVAMT1(s[1562]);
initSVB1_1(s[1563]);
initSVB2_1(s[1564]);
initSVB3_1(s[1565]);
initSVB5_1(s[1566]);
initSVB4_1(s[1567]);
initSVSJ1(s[1568]);
initSVPN0_1(s[1569]);
initSVPN1_1(s[1570]);
initSVPN2_1(s[1571]);
initSVPN3_1(s[1572]);
initSVPN4_1(s[1573]);
initSVPN5_1(s[1574]);
initSVPN6_1(s[1575]);
initSVPN7_1(s[1576]);
initSVPN8_1(s[1577]);
initSVPN9_1(s[1578]);
initSVPN10_1(s[1579]);
initSVPN11_1(s[1580]);
initSVPN12_1(s[1581]);
initSVPN13_1(s[1582]);
initSVPN14_1(s[1583]);
initSVPN15_1(s[1584]);
initSVPN16_1(s[1585]);
initSVSK1(s[1586]);
initSVAMT2(s[1587]);
initSVB1_2(s[1588]);
initSVB2_2(s[1589]);
initSVB3_2(s[1590]);
initSVB5_2(s[1591]);
initSVB4_2(s[1592]);
initSVSJ2(s[1593]);
initSVPN0_2(s[1594]);
initSVPN1_2(s[1595]);
initSVPN2_2(s[1596]);
initSVPN3_2(s[1597]);
initSVPN4_2(s[1598]);
initSVPN5_2(s[1599]);
initSVPN6_2(s[1600]);
initSVPN7_2(s[1601]);
initSVPN8_2(s[1602]);
initSVPN9_2(s[1603]);
initSVPN10_2(s[1604]);
initSVPN11_2(s[1605]);
initSVPN12_2(s[1606]);
initSVPN13_2(s[1607]);
initSVPN14_2(s[1608]);
initSVPN15_2(s[1609]);
initSVPN16_2(s[1610]);
initSVSK2(s[1611]);
initSVAMT3(s[1612]);
initSVB1_3(s[1613]);
initSVB2_3(s[1614]);
initSVB3_3(s[1615]);
initSVB5_3(s[1616]);
initSVB4_3(s[1617]);
initSVSJ3(s[1618]);
initSVPN0_3(s[1619]);
initSVPN1_3(s[1620]);
initSVPN2_3(s[1621]);
initSVPN3_3(s[1622]);
initSVPN4_3(s[1623]);
initSVPN5_3(s[1624]);
initSVPN6_3(s[1625]);
initSVPN7_3(s[1626]);
initSVPN8_3(s[1627]);
initSVPN9_3(s[1628]);
initSVPN10_3(s[1629]);
initSVPN11_3(s[1630]);
initSVPN12_3(s[1631]);
initSVPN13_3(s[1632]);
initSVPN14_3(s[1633]);
initSVPN15_3(s[1634]);
initSVPN16_3(s[1635]);
initSVSK3(s[1636]);
initSVAMT4(s[1637]);
initSVB1_4(s[1638]);
initSVB2_4(s[1639]);
initSVB3_4(s[1640]);
initSVB5_4(s[1641]);
initSVB4_4(s[1642]);
initSVSJ4(s[1643]);
initSVPN0_4(s[1644]);
initSVPN1_4(s[1645]);
initSVPN2_4(s[1646]);
initSVPN3_4(s[1647]);
initSVPN4_4(s[1648]);
initSVPN5_4(s[1649]);
initSVPN6_4(s[1650]);
initSVPN7_4(s[1651]);
initSVPN8_4(s[1652]);
initSVPN9_4(s[1653]);
initSVPN10_4(s[1654]);
initSVPN11_4(s[1655]);
initSVPN12_4(s[1656]);
initSVPN13_4(s[1657]);
initSVPN14_4(s[1658]);
initSVPN15_4(s[1659]);
initSVPN16_4(s[1660]);
initSVSK4(s[1661]);
initSVAMT5(s[1662]);
initSVB1_5(s[1663]);
initSVB2_5(s[1664]);
initSVB3_5(s[1665]);
initSVB5_5(s[1666]);
initSVB4_5(s[1667]);
initSVSJ5(s[1668]);
initSVPN0_5(s[1669]);
initSVPN1_5(s[1670]);
initSVPN2_5(s[1671]);
initSVPN3_5(s[1672]);
initSVPN4_5(s[1673]);
initSVPN5_5(s[1674]);
initSVPN6_5(s[1675]);
initSVPN7_5(s[1676]);
initSVPN8_5(s[1677]);
initSVPN9_5(s[1678]);
initSVPN10_5(s[1679]);
initSVPN11_5(s[1680]);
initSVPN12_5(s[1681]);
initSVPN13_5(s[1682]);
initSVPN14_5(s[1683]);
initSVPN15_5(s[1684]);
initSVPN16_5(s[1685]);
initSVSK5(s[1686]);
initSVAMT6(s[1687]);
initSVB1_6(s[1688]);
initSVB2_6(s[1689]);
initSVB3_6(s[1690]);
initSVB5_6(s[1691]);
initSVB4_6(s[1692]);
initSVSJ6(s[1693]);
initSVPN0_6(s[1694]);
initSVPN1_6(s[1695]);
initSVPN2_6(s[1696]);
initSVPN3_6(s[1697]);
initSVPN4_6(s[1698]);
initSVPN5_6(s[1699]);
initSVPN6_6(s[1700]);
initSVPN7_6(s[1701]);
initSVPN8_6(s[1702]);
initSVPN9_6(s[1703]);
initSVPN10_6(s[1704]);
initSVPN11_6(s[1705]);
initSVPN12_6(s[1706]);
initSVPN13_6(s[1707]);
initSVPN14_6(s[1708]);
initSVPN15_6(s[1709]);
initSVPN16_6(s[1710]);
initSVSK6(s[1711]);
initLMCBM1(s[1712]);
initLMCBY41(s[1713]);
initCURRPART1(s[1714]);
initLMSPM1(s[1715]);
initLMSPY41(s[1716]);
initLMCBM2(s[1717]);
initLMCBY42(s[1718]);
initCURRPART2(s[1719]);
initLMSPM2(s[1720]);
initLMSPY42(s[1721]);
initLMCBM3(s[1722]);
initLMCBY43(s[1723]);
initCURRPART3(s[1724]);
initLMSPM3(s[1725]);
initLMSPY43(s[1726]);
initLMCBM4(s[1727]);
initLMCBY44(s[1728]);
initCURRPART4(s[1729]);
initLMSPM4(s[1730]);
initLMSPY44(s[1731]);
initLMCBM5(s[1732]);
initLMCBY45(s[1733]);
initCURRPART5(s[1734]);
initLMSPM5(s[1735]);
initLMSPY45(s[1736]);
initLMCBM6(s[1737]);
initLMCBY46(s[1738]);
initCURRPART6(s[1739]);
initLMSPM6(s[1740]);
initLMSPY46(s[1741]);
initLMCBM7(s[1742]);
initLMCBY47(s[1743]);
initCURRPART7(s[1744]);
initLMSPM7(s[1745]);
initLMSPY47(s[1746]);
initTRWHO1(s[1747]);
initTRAINDAYS1(s[1748]);
initTRAINHRS1(s[1749]);
initTRAINEND1(s[1750]);
initTRAINPURP11(s[1751]);
initTRAINPURP21(s[1752]);
initTRAINPURP31(s[1753]);
initTRAINPURP41(s[1754]);
initTRAINPURP51(s[1755]);
initTRAINPURP61(s[1756]);
initTRAINPURP71(s[1757]);
initTRAINQUAL1(s[1758]);
initTRWHO2(s[1759]);
initTRAINDAYS2(s[1760]);
initTRAINHRS2(s[1761]);
initTRAINEND2(s[1762]);
initTRAINPURP12(s[1763]);
initTRAINPURP22(s[1764]);
initTRAINPURP32(s[1765]);
initTRAINPURP42(s[1766]);
initTRAINPURP52(s[1767]);
initTRAINPURP62(s[1768]);
initTRAINPURP72(s[1769]);
initTRAINQUAL2(s[1770]);
initTRWHO3(s[1771]);
initTRAINDAYS3(s[1772]);
initTRAINHRS3(s[1773]);
initTRAINEND3(s[1774]);
initTRAINPURP13(s[1775]);
initTRAINPURP23(s[1776]);
initTRAINPURP33(s[1777]);
initTRAINPURP43(s[1778]);
initTRAINPURP53(s[1779]);
initTRAINPURP63(s[1780]);
initTRAINPURP73(s[1781]);
initTRAINQUAL3(s[1782]);
initFTEDSTARTM1(s[1783]);
initFTEDSTARTY41(s[1784]);
initFTEDEND1(s[1785]);
initFT2ENDM1(s[1786]);
initFT2ENDY41(s[1787]);
initFTEDMOR1(s[1788]);
initFTEDSTARTM2(s[1789]);
initFTEDSTARTY42(s[1790]);
initFTEDEND2(s[1791]);
initFT2ENDM2(s[1792]);
initFT2ENDY42(s[1793]);
initFTEDMOR2(s[1794]);
initHOSPC1(s[1795]);
initHOSPDC1(s[1796]);
initHOSPC2(s[1797]);
initHOSPDC2(s[1798]);
initHOSPC3(s[1799]);
initHOSPDC3(s[1800]);
initHOSPC4(s[1801]);
initHOSPDC4(s[1802]);
initHOSPC5(s[1803]);
initHOSPDC5(s[1804]);
initHOSPC6(s[1805]);
initHOSPDC6(s[1806]);
initHOSPC7(s[1807]);
initHOSPDC7(s[1808]);
initDONEPROXY(s[1809]);
initIPROXY(s[1810]);
initPLIENG(s[1811]);
initPLITRANS(s[1812]);
initPREL(s[1813]);
initPREASON(s[1814]);
initPRIPN(s[1815]);
initSF1(s[1816]);
initPJULK4WK(s[1817]);
initPJBPTFT(s[1818]);
initPJSPTFT(s[1819]);
initPREARN(s[1820]);
initPREARNW(s[1821]);
initPREARNA(s[1822]);
initPBNFT1(s[1823]);
initPBNFT2(s[1824]);
initPBNFT13(s[1825]);
initPBNFT3(s[1826]);
initPBNFT4(s[1827]);
initPBNFT5(s[1828]);
initPBNFT6(s[1829]);
initPBNFT7(s[1830]);
initPBNFT8(s[1831]);
initPBNFT9(s[1832]);
initPBNFT10(s[1833]);
initPBNFT11(s[1834]);
initPBNFT12(s[1835]);
initPBNFT96(s[1836]);
initNETUSE(s[1837]);
initPRFITB(s[1838]);
initPRFITBW(s[1839]);
initPRFITBA(s[1840]);
initIVCOOP(s[1841]);
initSUSP(s[1842]);
initUNDQUS(s[1843]);
initINTQUS(s[1844]);
initCOOPNXTYR(s[1845]);
initIVPRSNT(s[1846]);
initIVINFNCE(s[1847]);
initIVAFFCT11(s[1848]);
initIVAFFCT12(s[1849]);
initIVAFFCT13(s[1850]);
initIVAFFCT14(s[1851]);
initIVAFFCT15(s[1852]);
initIVAFFCT17(s[1853]);
initIVAFFCT21(s[1854]);
initIVAFFCT22(s[1855]);
initIVAFFCT23(s[1856]);
initIVAFFCT27(s[1857]);
initIVAFFCT30(s[1858]);
initIVAFFCT97(s[1859]);
initIVLIENG(s[1860]);
initIVLITRANS(s[1861]);
initIVLIWHO(s[1862]);
initIVLIBAL(s[1863]);
initHGPART(s[1864]);
initHGBIOM(s[1865]);
initHGBIOF(s[1866]);
initHGADOPTM(s[1867]);
initHGADOPTF(s[1868]);
initRESPM16(s[1869]);
initRESPF16(s[1870]);
initDETINC1(s[1871]);
initDETINC2(s[1872]);
initDETINC3(s[1873]);
initDETINC4(s[1874]);
initDETINC5(s[1875]);
initDETINC6(s[1876]);
initHASEMAIL(s[1877]);
initOTHCONT(s[1878]);
initRHLAND_CODE(s[1879]);
initRPHMOB_CODE(s[1880]);
initRPHWRK_CODE(s[1881]);
initREMAIL_CODE(s[1882]);
initCTCONSCONF1(s[1883]);
initCTCONSCONF2(s[1884]);
initCTCONSCONF3(s[1885]);
initCTCONSCONF4(s[1886]);
initCTCONSCONF5(s[1887]);
initCTCONSCONF6(s[1888]);
initCTCONSCONF7(s[1889]);
initCTCONSCONF8(s[1890]);
initCTCONSCONF94(s[1891]);
initCTCONSCONF95(s[1892]);
initCTREL(s[1893]);
initCTADD1_CODE(s[1894]);
initCTADD2_CODE(s[1895]);
initCTTOWN_CODE(s[1896]);
initCTCNTY_CODE(s[1897]);
initCTPCODE_CODE(s[1898]);
initCTTEL1_CODE(s[1899]);
initCTTEL2_CODE(s[1900]);
initCTEMAIL_CODE(s[1901]);
initRINGFENCE(s[1902]);
initORIGADD(s[1903]);
initINDMODE(s[1904]);
initPPSEX(s[1905]);
initFNPID(s[1906]);
initMNPID(s[1907]);
initPN1PID(s[1908]);
initPN1PNO(s[1909]);
initPN1SEX(s[1910]);
initPN2PID(s[1911]);
initPN2PNO(s[1912]);
initPN2SEX(s[1913]);
initPNS1PID(s[1914]);
initPNS1PNO(s[1915]);
initPNS1SEX(s[1916]);
initPNS2PID(s[1917]);
initPNS2PNO(s[1918]);
initPNS2SEX(s[1919]);
initGRFPID(s[1920]);
initGRMPID(s[1921]);
initJ2PAY_IF(s[1922]);
initFIMNGRS_TC(s[1923]);
initFIMNGRS_DV(s[1924]);
initFIMNLABGRS_TC(s[1925]);
initFIMNLABGRS_DV(s[1926]);
initFIMNLABNET_TC(s[1927]);
initFIMNLABNET_DV(s[1928]);
initFIYRINVINC_TC(s[1929]);
initFIYRINVINC_DV(s[1930]);
initFIBENOTHR_TC(s[1931]);
initFIBENOTHR_DV(s[1932]);
initPAYGL(s[1933]);
initPAYNL(s[1934]);
initJSPRF(s[1935]);
initPAYGU_DV(s[1936]);
initPAYG_DV(s[1937]);
initPAYNU_DV(s[1938]);
initPAYN_DV(s[1939]);
initSEEARNGRS_DV(s[1940]);
initSEEARNNET_DV(s[1941]);
initJ2PAY_DV(s[1942]);
initJ2PAYNET_DV(s[1943]);
initFF_IVLOLW(s[1944]);
initFF_JBSEMP(s[1945]);
initFF_JBMNGR(s[1946]);
initFF_JBSIZE(s[1947]);
initFF_JBSTAT(s[1948]);
initFF_EMPLW(s[1949]);
initFF_BENTYPE01(s[1950]);
initFF_BENTYPE02(s[1951]);
initFF_BENTYPE03(s[1952]);
initFF_BENTYPE04(s[1953]);
initFF_BENTYPE05(s[1954]);
initFF_BENTYPE06(s[1955]);
initFF_BENTYPE07(s[1956]);
initFF_BENTYPE08(s[1957]);
initFF_BENTYPE09(s[1958]);
initFF_BENTYPE10(s[1959]);
initFF_BENTYPE11(s[1960]);
initFF_BENTYPE12(s[1961]);
initFF_BENTYPE13(s[1962]);
initFF_BENTYPE14(s[1963]);
initFF_BENTYPE15(s[1964]);
initFF_BENTYPE16(s[1965]);
initFF_BENTYPE17(s[1966]);
initFF_BENTYPE18(s[1967]);
initFF_BENTYPE19(s[1968]);
initFF_BENTYPE20(s[1969]);
initFF_BENTYPE21(s[1970]);
initFF_BENTYPE22(s[1971]);
initFF_BENTYPE23(s[1972]);
initFF_BENTYPE24(s[1973]);
initFF_BENTYPE25(s[1974]);
initFF_BENTYPE26(s[1975]);
initFF_BENTYPE27(s[1976]);
initFF_BENTYPE28(s[1977]);
initFF_BENTYPE29(s[1978]);
initFF_BENTYPE30(s[1979]);
initFF_BENTYPE31(s[1980]);
initFF_BENTYPE32(s[1981]);
initFF_BENTYPE33(s[1982]);
initFF_BENTYPE34(s[1983]);
initFF_BENTYPE35(s[1984]);
initFF_BENTYPE36(s[1985]);
initFF_BENTYPE37(s[1986]);
initFF_BENTYPE38(s[1987]);
initFF_BENTYPE39(s[1988]);
initFF_BENTYPE40(s[1989]);
initFF_BENTYPE41(s[1990]);
initFF_IVINTLANG(s[1991]);
initFF_YR2UK4(s[1992]);
initFF_OPRLG(s[1993]);
initFF_OPRLG0(s[1994]);
initFF_OPRLG1(s[1995]);
initFF_OPRLG0NI(s[1996]);
initSEX_DV(s[1997]);
initAGE_DV(s[1998]);
initINTDATD_DV(s[1999]);
initINTDATM_DV(s[2000]);
initINTDATY_DV(s[2001]);
initDOBY_DV(s[2002]);
initPENSIONER_DV(s[2003]);
initNPN_DV(s[2004]);
initNPNS_DV(s[2005]);
initNGRP_DV(s[2006]);
initNNSIB_DV(s[2007]);
initNNSSIB_DV(s[2008]);
initNPENSIONER_DV(s[2009]);
initJBSOCGR_DV(s[2010]);
initSCDATA_DV(s[2011]);
initETHN_DV(s[2012]);
initFIMNMISC_DV(s[2013]);
initFIMNPRBEN_DV(s[2014]);
initFIMNINVNET_DV(s[2015]);
initFIMNPEN_DV(s[2016]);
initFIMNSBEN_DV(s[2017]);
initFIMNNET_DV(s[2018]);
initRACEL_DV(s[2019]);
initCOUNTRY(s[2020]);
initGOR_DV(s[2021]);
initURBAN_DV(s[2022]);
initHHRESP_DV(s[2023]);
initXTRA5MIN_DV(s[2024]);
initXTRA5MINOSM_DV(s[2025]);
initAGEGR5_DV(s[2026]);
initAGEGR10_DV(s[2027]);
initAGEGR13_DV(s[2028]);
initLIVESP_DV(s[2029]);
initCOHAB_DV(s[2030]);
initSINGLE_DV(s[2031]);
initMASTAT_DV(s[2032]);
initHHTYPE_DV(s[2033]);
initBUNO_DV(s[2034]);
initDEPCHL_DV(s[2035]);
initNCHILD_DV(s[2036]);
initNDEPCHL_DV(s[2037]);
initRESPM16_DV(s[2038]);
initRESPF16_DV(s[2039]);
initRACH16_DV(s[2040]);
initHRPID(s[2041]);
initHRPNO(s[2042]);
initPPID(s[2043]);
initPPNO(s[2044]);
initSPPID(s[2045]);
initSPPNO(s[2046]);
initFNPNO(s[2047]);
initFNSPID(s[2048]);
initFNSPNO(s[2049]);
initMNPNO(s[2050]);
initMNSPID(s[2051]);
initMNSPNO(s[2052]);
initGRFPNO(s[2053]);
initGRMPNO(s[2054]);
initQFHIGDV(s[2055]);
initNQFHIGDV(s[2056]);
initQFHIGHFL_DV(s[2057]);
initHIQUAL_DV(s[2058]);
initNHIQUAL_DV(s[2059]);
initNNMPSP_DV(s[2060]);
initNMPSP_DV(s[2061]);
initNUNMPSP_DV(s[2062]);
initJBFT_DV(s[2063]);
initJBSOC00_CC(s[2064]);
initJBSOC10_CC(s[2065]);
initJBSIC07_CC(s[2066]);
initJBIINDB_DV(s[2067]);
initJBES2000(s[2068]);
initJBSEG_DV(s[2069]);
initJBRGSC_DV(s[2070]);
initJBNSSEC_DV(s[2071]);
initJBNSSEC8_DV(s[2072]);
initJBNSSEC5_DV(s[2073]);
initJBNSSEC3_DV(s[2074]);
initJBISCO88_CC(s[2075]);
initJLSOC00_CC(s[2076]);
initJLSOC10_CC(s[2077]);
initJLSIC07_CC(s[2078]);
initJLIINDB_DV(s[2079]);
initJLES2000(s[2080]);
initJLSEG_DV(s[2081]);
initJLRGSC_DV(s[2082]);
initJLNSSEC_DV(s[2083]);
initJLNSSEC8_DV(s[2084]);
initJLNSSEC5_DV(s[2085]);
initJLNSSEC3_DV(s[2086]);
initJLISCO88_CC(s[2087]);
initPASOC90_CC(s[2088]);
initPASOC00_CC(s[2089]);
initPASOC10_CC(s[2090]);
initPANSSEC5_DV(s[2091]);
initMASOC90_CC(s[2092]);
initMASOC00_CC(s[2093]);
initMASOC10_CC(s[2094]);
initMANSSEC5_DV(s[2095]);
initJ1SOC90_CC(s[2096]);
initJ1SOC00_CC(s[2097]);
initJ1SOC10_CC(s[2098]);
initJ1NSSEC5_DV(s[2099]);
initJ2SOC90_CC(s[2100]);
initJ2SOC00_CC(s[2101]);
initJ2SOC10_CC(s[2102]);
initJ2NSSEC5_DV(s[2103]);
initYASOC90_CC(s[2104]);
initYASOC00_CC(s[2105]);
initYASOC10_CC(s[2106]);
initYANSSEC5_DV(s[2107]);
initSCGHQ1_DV(s[2108]);
initSCGHQ2_DV(s[2109]);
initSF12PCS_DV(s[2110]);
initSF12MCS_DV(s[2111]);
initJWBS1_DV(s[2112]);
initJWBS2_DV(s[2113]);
initPSDQA_DV(s[2114]);
initPSDQB_DV(s[2115]);
initPSDQC_DV(s[2116]);
initSCFLAG_DV(s[2117]);
initPAYU_DV(s[2118]);
initPAYGU_IF(s[2119]);
initPAYNU_IF(s[2120]);
initSEEARNGRS_IF(s[2121]);
initFIYRINVINC_IF(s[2122]);
initFIBENOTHR_IF(s[2123]);
initFIMNLABGRS_IF(s[2124]);
initFIMNGRS_IF(s[2125]);
initINDIN91_LW(s[2126]);
initINDIN01_LW(s[2127]);
initINDPXUS_LW(s[2128]);
initINDINUS_LW(s[2129]);
initINDSCUS_LW(s[2130]);
initIND5MUS_LW(s[2131]);
initINDPXUB_LW(s[2132]);
initINDINUB_LW(s[2133]);
initINDSCUB_LW(s[2134]);
initINDPXUI_LW(s[2135]);
initINDINUI_LW(s[2136]);
initINDSCUI_LW(s[2137]);
initINDNS91_LW(s[2138]);
initINDBD91_LW(s[2139]);
initINDNSUB_LW(s[2140]);
initINDBDUB_LW(s[2141]);
initINDPXUB_XW(s[2142]);
initINDINUB_XW(s[2143]);
initINDSCUB_XW(s[2144]);
initINDPXUI_XW(s[2145]);
initINDINUI_XW(s[2146]);
initINDSCUI_XW(s[2147]);
initIND5MUS_XW(s[2148]);
}
}
