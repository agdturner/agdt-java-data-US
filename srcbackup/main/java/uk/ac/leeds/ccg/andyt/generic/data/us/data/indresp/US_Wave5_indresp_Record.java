/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.us.data.indresp;
public class US_Wave5_indresp_Record extends US_indresp_Record {
protected short AGE12;
protected short AGE_DV;
protected short AIDHRS_BH;
protected byte AIDHU1A;
protected byte AIDHU2A;
protected short AIDHUA;
protected short AIDHUB;
protected short AIDHUC;
protected byte BANK;
protected byte BANKJ;
protected int BANKK;
protected byte BANKKB1;
protected byte BANKKB2;
protected byte BANKKB3;
protected byte BANKKB4;
protected short BIRTHY;
protected short BUNO;
protected short BUTYPE;
protected short CASMIN;
protected short CJSBGD;
protected short CJSBGM;
protected short CJSBGY;
protected short CJSBGY4;
protected short CJSBLY;
protected int CJSTEN;
protected double CJSWK9;
protected byte DEBT;
protected byte DEBTA;
protected byte DEBTB;
protected byte DEBTC;
protected byte DEBTC1;
protected byte DEBTC2;
protected byte DEBTC3;
protected byte DEBTC4;
protected byte DEBTD;
protected byte DEBTE;
protected byte DEBTF;
protected byte DEBTG;
protected byte DEBTJ;
protected int DEBTY;
protected double DISTMOV;
protected short DOBY;
protected short EAAGE;
protected short EDENDM;
protected short EDENDY;
protected short EDENDY4;
protected short EDLYR;
protected short EDNEW;
protected short EDNEW1;
protected short EDNEW2;
protected short EDNEW3;
protected short EDNEW4;
protected short EDNEWP1;
protected short EDNEWQ;
protected short EDTYPE;
protected short EDTYPE_BH;
protected short F101;
protected short F102;
protected short F103;
protected short F104;
protected short F105;
protected byte F106;
protected byte F116;
protected byte F117;
protected short F118;
protected short F119;
protected short F120;
protected short F121;
protected short F122;
protected short F123;
protected byte F124;
protected short F125;
protected short F131;
protected short F132;
protected short F133;
protected byte F134;
protected short F135;
protected short F136;
protected short F137;
protected short F138;
protected short F139;
protected short F140;
protected short F141;
protected short F151;
protected byte F152;
protected short F153;
protected short F154;
protected short F155;
protected short F156;
protected short F157;
protected byte F158;
protected byte F159;
protected byte FCCARD;
protected short FENOW_BH;
protected short FETYPE;
protected double FIHHMN;
protected short FIHHMNI;
protected double FIMNB;
protected boolean FIMNBI;
protected double FIMNI;
protected boolean FIMNII;
protected boolean FIMNLI;
protected double FIMNNL;
protected boolean FIMNNLI;
protected double FIMNP;
protected boolean FIMNPI;
protected double FIMNT;
protected boolean FIMNTHI;
protected boolean FIMNTI;
protected short FISITC;
protected short FISITX;
protected short FISITY;
protected boolean FIYEARI;
protected double FIYR;
protected double FIYRB;
protected boolean FIYRBI;
protected short FIYRDI;
protected short FIYRDII;
protected byte FIYRDIU;
protected double FIYRI;
protected boolean FIYRII;
protected double FIYRL;
protected boolean FIYRLI;
protected double FIYRNL;
protected boolean FIYRNLI;
protected double FIYRP;
protected boolean FIYRPI;
protected double FIYRT;
protected boolean FIYRTI;
protected int FNPID_BH;
protected short FTEXA;
protected short FTEXA1;
protected short FTEXA2;
protected short FTEXA3;
protected short FTEXA4;
protected short FTEXA5;
protected short FTEXA6;
protected short FTEXAV;
protected double FTEXAW;
protected short FTEXB;
protected short FTEXB1;
protected short FTEXB2;
protected short FTEXB3;
protected short FTEXB4;
protected short FTEXB5;
protected short FTEXB6;
protected short FTEXBV;
protected double FTEXBW;
protected short FTEXC;
protected short FTEXC1;
protected short FTEXC2;
protected short FTEXC3;
protected short FTEXC4;
protected short FTEXC5;
protected short FTEXC6;
protected short FTEXCV;
protected double FTEXCW;
protected short FTEXHH;
protected byte FTHH;
protected byte FTHH1;
protected byte FTHH11;
protected byte FTHH12;
protected byte FTHH13;
protected byte FTHH14;
protected byte FTHH15;
protected byte FTHH16;
protected short FTHH1V;
protected double FTHH1W;
protected byte FTHH2;
protected byte FTHH21;
protected byte FTHH22;
protected byte FTHH23;
protected byte FTHH24;
protected byte FTHH25;
protected byte FTHH26;
protected short FTHH2V;
protected double FTHH2W;
protected byte FTHH3;
protected byte FTHH31;
protected byte FTHH32;
protected byte FTHH33;
protected byte FTHH34;
protected byte FTHH35;
protected byte FTHH36;
protected short FTHH3V;
protected double FTHH3W;
protected byte HGEMP;
protected short HGR2R;
protected short HGRA;
protected boolean HGSEX;
protected short HHCH12;
protected short HHMEM;
protected short HHSIZE;
protected short HHTYPE;
protected int HID;
protected short HIQUALB_DV;
protected short HL2GP;
protected short HLCK;
protected short HLCKA;
protected short HLCKAN;
protected short HLCKB;
protected short HLCKBN;
protected short HLCKC;
protected short HLCKCN;
protected short HLCKD;
protected short HLCKDN;
protected short HLCKE;
protected short HLCKEN;
protected short HLCKF;
protected short HLCKFN;
protected short HLCKG;
protected short HLCKGN;
protected short HLCKH;
protected short HLCKHN;
protected short HLCKI;
protected short HLCKIN;
protected short HLDSBL;
protected short HLENDW;
protected byte HLLT;
protected short HLLTA;
protected short HLLTB;
protected short HLLTC;
protected short HLLTD;
protected short HLLTE;
protected byte HLLTW;
protected short HLLTWA;
protected short HLPRB;
protected short HLPRBA;
protected short HLPRBB;
protected short HLPRBC;
protected short HLPRBD;
protected short HLPRBE;
protected short HLPRBF;
protected short HLPRBG;
protected short HLPRBH;
protected short HLPRBI;
protected short HLPRBJ;
protected short HLPRBK;
protected short HLPRBL;
protected short HLPRBM;
protected short HLSTAT;
protected short HLSV;
protected short HLSVA;
protected short HLSVAF;
protected short HLSVAN;
protected short HLSVB;
protected short HLSVBF;
protected short HLSVBN;
protected short HLSVC;
protected short HLSVCF;
protected short HLSVCN;
protected short HLSVD;
protected short HLSVDF;
protected short HLSVDN;
protected short HLSVE;
protected short HLSVEF;
protected short HLSVEN;
protected short HLSVF;
protected short HLSVFF;
protected short HLSVFN;
protected short HLSVG;
protected short HLSVGF;
protected short HLSVGN;
protected short HLSVH;
protected byte HLSVHF;
protected byte HLSVHN;
protected short HLSVI;
protected short HLSVIF;
protected short HLSVIN;
protected short HLSVJ;
protected short HLSVJF;
protected short HLSVJN;
protected short HLSVK;
protected short HLSVKF;
protected short HLSVKN;
protected short HLSVL;
protected short HLSVLF;
protected short HLSVLN;
protected short HLSVM;
protected short HLSVMF;
protected short HLSVMN;
protected byte HLZEST;
protected boolean HOH;
protected short HOSP;
protected short HOSPCH;
protected short HOSPD;
protected short HOSPNHS;
protected short HOWLNG;
protected byte HUBOSS;
protected short HUBUYS;
protected short HUBUYS_BH;
protected short HUFRYS;
protected short HUFRYS_BH;
protected short HUIRON;
protected short HUIRON_BH;
protected short HUMOPS;
protected short HUMOPS_BH;
protected short HUNURS;
protected byte HURUNS;
protected short HUSITS;
protected short HUXPCH;
protected short IENDDATHM;
protected byte IMPEVENT1;
protected byte IMPEVENT1S;
protected byte IMPEVENT2;
protected byte IMPEVENT2S;
protected byte IMPEVENT3;
protected byte IMPEVENT3S;
protected byte IMPEVENT4;
protected byte IMPEVENT4S;
protected short IODC;
protected short ISCED;
protected short ISTRTDATHM;
protected short ISTRTDATY;
protected short IV2;
protected short IV4;
protected short IV5;
protected short IV6A;
protected short IV6B;
protected short IV6C;
protected short IV6D;
protected short IV6E;
protected short IV6F;
protected short IV7;
protected short IVEA;
protected short IVEB;
protected short IVEC;
protected short IVED;
protected short IVEE;
protected short IVFA;
protected short IVFB;
protected short IVFC;
protected short IVFD;
protected short IVFE;
protected short IVIEVR;
protected byte IVIOW4;
protected short IVJA;
protected short IVJB;
protected short IVJC;
protected short IVJD;
protected short IVJE;
protected short IVLYR;
protected short IVMA;
protected short IVMB;
protected short IVMC;
protected short IVMD;
protected short IVME;
protected short IVPA;
protected short IVPB;
protected short IVPC;
protected short IVPD;
protected short IVPE;
protected short IVSC;
protected short J2PAY_BH;
protected short J2SOC90_CC;
protected short JBBGLY;
protected short JBCHC1;
protected short JBCHC2;
protected short JBCHC3;
protected double JBCSSF;
protected double JBCSSM;
protected short JBED;
protected short JBED1;
protected short JBED2;
protected short JBED3;
protected short JBED4;
protected short JBED5;
protected short JBEDP1;
protected short JBEDQ;
protected short JBGOLD;
protected double JBHGS;
protected short JBHHA;
protected short JBHHB;
protected short JBHHC;
protected short JBHHD;
protected short JBHHE;
protected short JBHHF;
protected short JBHRLK;
protected String JBISCO_CC;
protected short JBNSSEC_DV;
protected short JBOFFY_BH;
protected short JBONUS;
protected short JBOPPS;
protected short JBPEN;
protected short JBPENM;
protected short JBPL_BH;
protected short JBRGSC_DV;
protected short JBRISE;
protected short JBSAT1;
protected short JBSAT2;
protected short JBSAT3;
protected short JBSAT4;
protected short JBSAT5;
protected short JBSAT6;
protected short JBSAT7;
protected short JBSAT_BH;
protected short JBSECT_BH;
protected short JBSEC_BH;
protected short JBSEG_DV;
protected short JBSIC;
protected short JBSOC90LY_CC;
protected short JBSOC90_CC;
protected short JBSTATL;
protected short JBSTATT;
protected short JBTERM;
protected short JBTIME;
protected short JBTTWM;
protected short JBUB;
protected short JBUBY;
protected double JLCSSF;
protected double JLCSSM;
protected short JLGOLD;
protected double JLHGS;
protected short JLID;
protected String JLISCO_CC;
protected short JLNSSEC_DV;
protected short JLRGSC_DV;
protected short JLSEC;
protected short JLSEG_DV;
protected short JLSIC;
protected short JLSOC90_CC;
protected short JLYID;
protected short JNMNTH;
protected short JNYEAR;
protected short JSHRLK;
protected double JSPAYG;
protected short JSPAYGI;
protected int JSPAYL;
protected short JSPL_BH;
protected short JSPRBY;
protected short JSPREY;
protected double JSPROF;
protected short JSPROFI;
protected short JSPYBM;
protected short JSPYBY;
protected short JSPYBY4;
protected short JSPYEM;
protected short JSPYEY;
protected short JSPYEY4;
protected short JSSAT;
protected short JSSAT1;
protected short JSSAT2;
protected short JSSAT3;
protected short JSSAT4;
protected short JSSAT5;
protected short JSTIME;
protected short JSTTWM;
protected short JSTYPE;
protected short JTYID;
protected short JUHRSL;
protected short JUHRSX;
protected short JULK1;
protected short JULK4;
protected short JUPAYL;
protected short JUPAYX;
protected short JUSOC90_CC;
protected short JUSPEC;
protected double LEWGHT;
protected short LKMOVY;
protected short LKNBRD;
protected double LRWGHT;
protected short MASTAT;
protected short MEMORIG_BH;
protected short MLCHM;
protected short MLCHY;
protected short MLCHY4;
protected short MLSTAT_BH;
protected int MNPID_BH;
protected short MOVEST;
protected short MOVJB;
protected short MOVJBA;
protected short MOVJBB;
protected short MOVJBC;
protected short MOVJBD;
protected short MOVJBE;
protected short MOVJBF;
protected short MOVJBG;
protected short MOVJBH;
protected short MOVJBI;
protected short MOVY1;
protected short MOVY2;
protected short MRJBOSS;
protected double MRJCSSF;
protected double MRJCSSM;
protected short MRJEND;
protected short MRJGOLD;
protected double MRJHGS;
protected short MRJISCO88_CC;
protected String MRJISCO_CC;
protected short MRJMNGR;
protected short MRJNSSEC8_DV;
protected short MRJNSSEC_DV;
protected short MRJRGSC;
protected short MRJSEC;
protected short MRJSEG;
protected short MRJSEMP;
protected short MRJSIC;
protected short MRJSIZE;
protected short MRJSOC;
protected byte MRSSCH;
protected byte MRSSCI;
protected short MSTATSAM;
protected short NAIDXHH_BH;
protected short NCHILD_DV;
protected short NCIGS;
protected short NEMST;
protected short NEWHY;
protected short NEYRJN;
protected short NF1;
protected short NJBNEW;
protected short NJBS;
protected short NJBSP;
protected double NJBWKS;
protected short NJISP;
protected double NJIWKS;
protected short NJUSP;
protected double NJUWKS;
protected byte NORGA;
protected byte NORGM;
protected byte NQFEDA;
protected byte NQFEDB;
protected byte NQFEDC;
protected short NQFEDD;
protected short NQFEDE;
protected byte NQFEDF;
protected byte NQFEDG;
protected byte NQFEDH;
protected byte NQFEDI;
protected byte NQFEDJ;
protected byte NQFEDK;
protected short NQFEDL;
protected byte NQFEDM;
protected short NQFEDN;
protected byte NQFEDO;
protected byte NQFEDP;
protected byte NQFEDQ;
protected byte NQFEDR;
protected short NQFEDS;
protected short NQFEXA;
protected short NQFEXB;
protected short NQFEXC;
protected byte NQFEXE;
protected byte NQFEXF;
protected byte NQFEXG;
protected byte NQFEXH;
protected byte NQFEXI;
protected byte NQFEXJ;
protected byte NQFEXK;
protected byte NVEST;
protected byte NVESTA;
protected byte NVESTB;
protected byte NVESTC;
protected byte NVESTC1;
protected byte NVESTC2;
protected byte NVESTC3;
protected byte NVESTC4;
protected byte NVESTD;
protected byte NVESTE;
protected byte NVESTF;
protected byte NVESTG;
protected byte NVESTJ;
protected int NVESTK;
protected byte NVESTL;
protected byte NVESTN;
protected short NXDTS;
protected byte OPCHD1;
protected byte OPCHD2;
protected byte OPCHD3;
protected byte OPCHD4;
protected byte OPFAMA;
protected byte OPFAMB;
protected byte OPFAMC;
protected byte OPFAMD;
protected byte OPFAME;
protected byte OPFAMF;
protected byte OPFAMG;
protected byte OPFAMH;
protected byte OPFAMI;
protected byte OPHLA;
protected byte OPHLB;
protected byte OPHLC;
protected byte OPPOL1;
protected byte OPPOL2;
protected byte OPPOL3;
protected byte OPPOL4;
protected byte OPRLG2;
protected byte OPSOCA;
protected byte OPSOCB;
protected byte OPSOCC;
protected byte OPSOCD;
protected byte OPSOCE;
protected byte OPSOCF;
protected byte OPXPCR;
protected byte OPXPSV;
protected byte ORG;
protected byte ORGA;
protected byte ORGA1;
protected byte ORGA10;
protected byte ORGA11;
protected byte ORGA12;
protected byte ORGA13;
protected byte ORGA14;
protected byte ORGA15;
protected byte ORGA16;
protected byte ORGA2;
protected byte ORGA3;
protected byte ORGA4;
protected byte ORGA5;
protected byte ORGA6;
protected byte ORGA7;
protected byte ORGA8;
protected byte ORGA9;
protected byte ORGM1;
protected byte ORGM10;
protected byte ORGM11;
protected byte ORGM12;
protected byte ORGM13;
protected byte ORGM14;
protected byte ORGM15;
protected byte ORGM16;
protected byte ORGM2;
protected byte ORGM3;
protected byte ORGM4;
protected byte ORGM5;
protected byte ORGM6;
protected byte ORGM7;
protected byte ORGM8;
protected byte ORGM9;
protected short PAYDF1;
protected short PAYDF2;
protected short PAYDF3;
protected short PAYDF4;
protected short PAYDF5;
protected short PAYDF6;
protected short PAYDF7;
protected short PAYDF8;
protected short PAYGLI;
protected double PAYGLY;
protected short PAYGTI;
protected double PAYGTY;
protected double PAYGW;
protected double PAYG_DV;
protected int PAYLY;
protected short PAYLYG;
protected double PAYLYW;
protected short PAYNLI;
protected double PAYNLY;
protected short PAYNTI;
protected double PAYNTY;
protected double PAYNW;
protected int PAYS;
protected short PAYSG;
protected short PAYSLP;
protected double PAYSW;
protected double PAYUW;
protected short PENADD;
protected short PENADV;
protected double PENADW;
protected short PENB4;
protected short PENB4V;
protected double PENB4W;
protected short PENB4Y4;
protected short PENB4YR;
protected short PENYR;
protected short PENYR4;
protected int PID;
protected short PLBORNC_CC;
protected short PLNEW;
protected short PLNOWM;
protected short PLNOWY4;
protected short PPLEVR;
protected short PPPEN;
protected short PREARNI;
protected short PREARN_BH;
protected short PRESBGM;
protected short PRESBGY;
protected short PRESBY4;
protected short PRESLY;
protected short PRF101;
protected short PRF102;
protected short PRF116;
protected short PRF125;
protected short PRF131;
protected byte PRF134;
protected short PRF135;
protected byte PRF137;
protected short PRF139;
protected short PRF141;
protected short PRFEHQ;
protected byte PRFIRN;
protected short PRFITBI;
protected short PRFITB_BH;
protected short PRJBBY4;
protected byte PRJBFT;
protected short PRJBLY;
protected short PRRS2I;
protected short PRSEHQ;
protected short PRWHY;
protected byte PYAGE1;
protected byte PYAGE2;
protected byte PYAGE3;
protected short PYARG1;
protected short PYARG2;
protected short PYARG3;
protected short PYHAP1;
protected short PYHAP2;
protected short PYHAP3;
protected short PYHFM1;
protected short PYHFM2;
protected short PYHFM3;
protected short PYHFR1;
protected short PYHFR2;
protected short PYHFR3;
protected short PYHLF1;
protected short PYHLF2;
protected short PYHLF3;
protected byte PYHLT1;
protected byte PYHLT2;
protected byte PYHLT3;
protected byte PYHLTH;
protected short PYHSW1;
protected short PYHSW2;
protected short PYHSW3;
protected byte PYHWRK;
protected byte PYMAN1;
protected byte PYMAN2;
protected byte PYMAN3;
protected short PYNYP;
protected short PYPNO1;
protected short PYPNO2;
protected short PYPNO3;
protected byte PYRA;
protected short PYSAD1;
protected short PYSAD2;
protected short PYSAD3;
protected byte PYSAT1;
protected byte PYSAT2;
protected byte PYSAT3;
protected byte PYSMK1;
protected byte PYSMK2;
protected byte PYSMK3;
protected byte PYSPN1;
protected byte PYSPN2;
protected byte PYSPN3;
protected byte PYSTE1;
protected byte PYSTE2;
protected byte PYSTE3;
protected byte PYSTM1;
protected short PYSTM2;
protected byte PYSTM3;
protected byte PYSTS1;
protected short PYSTS2;
protected byte PYSTS3;
protected byte PYSTY1;
protected byte PYSTY2;
protected byte PYSTY3;
protected byte PYSXAG;
protected byte PYSXED;
protected byte PYTAE1;
protected byte PYTAE2;
protected byte PYTAE3;
protected byte PYTAM1;
protected short PYTAM2;
protected byte PYTAM3;
protected byte PYTAS1;
protected short PYTAS2;
protected byte PYTAS3;
protected short PYTLK1;
protected short PYTLK2;
protected short PYTLK3;
protected short PYWHR1;
protected short PYWHR2;
protected short PYWHR3;
protected short PYWOR1;
protected short PYWOR2;
protected short PYWOR3;
protected short QFA;
protected short QFACHI;
protected short QFB;
protected short QFC;
protected short QFD;
protected short QFE;
protected short QFED;
protected short QFEDA;
protected short QFEDB;
protected short QFEDC;
protected short QFEDD;
protected short QFEDE;
protected short QFEDF;
protected short QFEDG;
protected short QFEDH;
protected short QFEDHI;
protected short QFEDI;
protected short QFEDJ;
protected short QFEDK;
protected short QFEDL;
protected short QFEDM;
protected short QFEDN;
protected short QFEDO;
protected short QFEDP;
protected short QFEDQ;
protected short QFEDR;
protected short QFEDS;
protected short QFEDX;
protected short QFEDXA;
protected short QFEDXB;
protected short QFEDXC;
protected short QFEDXD;
protected short QFEDXE;
protected short QFEDXF;
protected short QFEDXG;
protected short QFEDXH;
protected short QFEDXI;
protected short QFEDXJ;
protected short QFEDXK;
protected short QFF;
protected short QFG;
protected short QFH;
protected short QFHAS;
protected short QFI;
protected short QFJ;
protected short QFK;
protected short QFL;
protected short QFM;
protected short QFN;
protected short QFVOC;
protected short QFX;
protected short QFXA;
protected short QFXB;
protected short QFXC;
protected short QFXD;
protected short QFXE;
protected short QFXF;
protected short QFXG;
protected short QFXH;
protected short QFXI;
protected short QFXJ;
protected short QFXK;
protected short QFXL;
protected short QFXM;
protected short QFXN;
protected short RACE;
protected short RACH12;
protected short REGION;
protected short SAMPST;
protected short SAMPST_BH;
protected short SAVE;
protected int SAVED;
protected byte SAVEJ;
protected int SAVEK;
protected byte SAVEKB1;
protected byte SAVEKB2;
protected byte SAVEKB3;
protected byte SAVEKB4;
protected short SAVEY1;
protected short SAVEY2;
protected short SCNOW;
protected byte SCOPFAMA;
protected byte SCOPFAMB;
protected byte SCOPFAMD;
protected byte SCOPFAMF;
protected byte SCOPFAMH;
protected byte SCSSUPR2R;
protected byte SCSUP1;
protected short SCTYPE;
protected short SMOKER;
protected short SPINHH;
protected short SPJB;
protected short SPJBHR;
protected short SPJBOT;
protected short SPJBYR;
protected double SPPAYG;
protected short SPPAYGI;
protected int SPPID_BH;
protected short SPSOC90_CC;
protected byte SSUPA;
protected byte SSUPB;
protected byte SSUPC;
protected byte SSUPD;
protected byte SSUPE;
protected byte SSUPR2R_BH;
protected byte SVACTS5;
protected short TELWHY;
protected short TENURE_DV;
protected int TLFIYR;
protected int TLFIYRL;
protected short TUIN1;
protected short TUIN2;
protected short TUJBPL;
protected short VOTE;
protected short VOTE1;
protected short VOTE2;
protected short VOTE3;
protected short VOTE3_BH;
protected short VOTE4;
protected short VOTE4_BH;
protected short VOTE5;
protected short VOTE6;
protected byte VOTE7;
protected byte VOTE8;
protected byte VOTE8_BH;
protected byte WINDF;
protected byte WINDFA;
protected byte WINDFB;
protected byte WINDFC;
protected byte WINDFD;
protected byte WINDFE;
protected byte WINDFF;
protected byte WINDFG;
protected byte WINDFH;
protected int WINDFY;
protected short WKTIME;
protected byte XDT1M;
protected byte XDT1PL;
protected byte XDT1Y;
protected byte XDT2M;
protected byte XDT2PL;
protected byte XDT2Y;
protected byte XDT3M;
protected byte XDT3PL;
protected byte XDT3Y;
protected short XDTS;
protected double XEWGHT;
protected short XPCHC;
protected short XPCHCF;
protected double XRWGHT;
protected short YPPAR;
protected short YR2UK;
protected final void initAGE12(String s) {
if (!s.trim().isEmpty()) {
AGE12 = Short.parseShort(s);
} else {
AGE12 = Short.MIN_VALUE;
}
}

protected final void initAGE_DV(String s) {
if (!s.trim().isEmpty()) {
AGE_DV = Short.parseShort(s);
} else {
AGE_DV = Short.MIN_VALUE;
}
}

protected final void initAIDHRS_BH(String s) {
if (!s.trim().isEmpty()) {
AIDHRS_BH = Short.parseShort(s);
} else {
AIDHRS_BH = Short.MIN_VALUE;
}
}

protected final void initAIDHU1A(String s) {
if (!s.trim().isEmpty()) {
AIDHU1A = Byte.parseByte(s);
} else {
AIDHU1A = Byte.MIN_VALUE;
}
}

protected final void initAIDHU2A(String s) {
if (!s.trim().isEmpty()) {
AIDHU2A = Byte.parseByte(s);
} else {
AIDHU2A = Byte.MIN_VALUE;
}
}

protected final void initAIDHUA(String s) {
if (!s.trim().isEmpty()) {
AIDHUA = Short.parseShort(s);
} else {
AIDHUA = Short.MIN_VALUE;
}
}

protected final void initAIDHUB(String s) {
if (!s.trim().isEmpty()) {
AIDHUB = Short.parseShort(s);
} else {
AIDHUB = Short.MIN_VALUE;
}
}

protected final void initAIDHUC(String s) {
if (!s.trim().isEmpty()) {
AIDHUC = Short.parseShort(s);
} else {
AIDHUC = Short.MIN_VALUE;
}
}

protected final void initBANK(String s) {
if (!s.trim().isEmpty()) {
BANK = Byte.parseByte(s);
} else {
BANK = Byte.MIN_VALUE;
}
}

protected final void initBANKJ(String s) {
if (!s.trim().isEmpty()) {
BANKJ = Byte.parseByte(s);
} else {
BANKJ = Byte.MIN_VALUE;
}
}

protected final void initBANKK(String s) {
if (!s.trim().isEmpty()) {
BANKK = Integer.parseInt(s);
} else {
BANKK = Integer.MIN_VALUE;
}
}

protected final void initBANKKB1(String s) {
if (!s.trim().isEmpty()) {
BANKKB1 = Byte.parseByte(s);
} else {
BANKKB1 = Byte.MIN_VALUE;
}
}

protected final void initBANKKB2(String s) {
if (!s.trim().isEmpty()) {
BANKKB2 = Byte.parseByte(s);
} else {
BANKKB2 = Byte.MIN_VALUE;
}
}

protected final void initBANKKB3(String s) {
if (!s.trim().isEmpty()) {
BANKKB3 = Byte.parseByte(s);
} else {
BANKKB3 = Byte.MIN_VALUE;
}
}

protected final void initBANKKB4(String s) {
if (!s.trim().isEmpty()) {
BANKKB4 = Byte.parseByte(s);
} else {
BANKKB4 = Byte.MIN_VALUE;
}
}

protected final void initBIRTHY(String s) {
if (!s.trim().isEmpty()) {
BIRTHY = Short.parseShort(s);
} else {
BIRTHY = Short.MIN_VALUE;
}
}

protected final void initBUNO(String s) {
if (!s.trim().isEmpty()) {
BUNO = Short.parseShort(s);
} else {
BUNO = Short.MIN_VALUE;
}
}

protected final void initBUTYPE(String s) {
if (!s.trim().isEmpty()) {
BUTYPE = Short.parseShort(s);
} else {
BUTYPE = Short.MIN_VALUE;
}
}

protected final void initCASMIN(String s) {
if (!s.trim().isEmpty()) {
CASMIN = Short.parseShort(s);
} else {
CASMIN = Short.MIN_VALUE;
}
}

protected final void initCJSBGD(String s) {
if (!s.trim().isEmpty()) {
CJSBGD = Short.parseShort(s);
} else {
CJSBGD = Short.MIN_VALUE;
}
}

protected final void initCJSBGM(String s) {
if (!s.trim().isEmpty()) {
CJSBGM = Short.parseShort(s);
} else {
CJSBGM = Short.MIN_VALUE;
}
}

protected final void initCJSBGY(String s) {
if (!s.trim().isEmpty()) {
CJSBGY = Short.parseShort(s);
} else {
CJSBGY = Short.MIN_VALUE;
}
}

protected final void initCJSBGY4(String s) {
if (!s.trim().isEmpty()) {
CJSBGY4 = Short.parseShort(s);
} else {
CJSBGY4 = Short.MIN_VALUE;
}
}

protected final void initCJSBLY(String s) {
if (!s.trim().isEmpty()) {
CJSBLY = Short.parseShort(s);
} else {
CJSBLY = Short.MIN_VALUE;
}
}

protected final void initCJSTEN(String s) {
if (!s.trim().isEmpty()) {
CJSTEN = Integer.parseInt(s);
} else {
CJSTEN = Integer.MIN_VALUE;
}
}

protected final void initCJSWK9(String s) {
if (!s.trim().isEmpty()) {
CJSWK9 = Double.parseDouble(s);
} else {
CJSWK9 = Double.NaN;
}
}

protected final void initDEBT(String s) {
if (!s.trim().isEmpty()) {
DEBT = Byte.parseByte(s);
} else {
DEBT = Byte.MIN_VALUE;
}
}

protected final void initDEBTA(String s) {
if (!s.trim().isEmpty()) {
DEBTA = Byte.parseByte(s);
} else {
DEBTA = Byte.MIN_VALUE;
}
}

protected final void initDEBTB(String s) {
if (!s.trim().isEmpty()) {
DEBTB = Byte.parseByte(s);
} else {
DEBTB = Byte.MIN_VALUE;
}
}

protected final void initDEBTC(String s) {
if (!s.trim().isEmpty()) {
DEBTC = Byte.parseByte(s);
} else {
DEBTC = Byte.MIN_VALUE;
}
}

protected final void initDEBTC1(String s) {
if (!s.trim().isEmpty()) {
DEBTC1 = Byte.parseByte(s);
} else {
DEBTC1 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC2(String s) {
if (!s.trim().isEmpty()) {
DEBTC2 = Byte.parseByte(s);
} else {
DEBTC2 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC3(String s) {
if (!s.trim().isEmpty()) {
DEBTC3 = Byte.parseByte(s);
} else {
DEBTC3 = Byte.MIN_VALUE;
}
}

protected final void initDEBTC4(String s) {
if (!s.trim().isEmpty()) {
DEBTC4 = Byte.parseByte(s);
} else {
DEBTC4 = Byte.MIN_VALUE;
}
}

protected final void initDEBTD(String s) {
if (!s.trim().isEmpty()) {
DEBTD = Byte.parseByte(s);
} else {
DEBTD = Byte.MIN_VALUE;
}
}

protected final void initDEBTE(String s) {
if (!s.trim().isEmpty()) {
DEBTE = Byte.parseByte(s);
} else {
DEBTE = Byte.MIN_VALUE;
}
}

protected final void initDEBTF(String s) {
if (!s.trim().isEmpty()) {
DEBTF = Byte.parseByte(s);
} else {
DEBTF = Byte.MIN_VALUE;
}
}

protected final void initDEBTG(String s) {
if (!s.trim().isEmpty()) {
DEBTG = Byte.parseByte(s);
} else {
DEBTG = Byte.MIN_VALUE;
}
}

protected final void initDEBTJ(String s) {
if (!s.trim().isEmpty()) {
DEBTJ = Byte.parseByte(s);
} else {
DEBTJ = Byte.MIN_VALUE;
}
}

protected final void initDEBTY(String s) {
if (!s.trim().isEmpty()) {
DEBTY = Integer.parseInt(s);
} else {
DEBTY = Integer.MIN_VALUE;
}
}

protected final void initDISTMOV(String s) {
if (!s.trim().isEmpty()) {
DISTMOV = Double.parseDouble(s);
} else {
DISTMOV = Double.NaN;
}
}

protected final void initDOBY(String s) {
if (!s.trim().isEmpty()) {
DOBY = Short.parseShort(s);
} else {
DOBY = Short.MIN_VALUE;
}
}

protected final void initEAAGE(String s) {
if (!s.trim().isEmpty()) {
EAAGE = Short.parseShort(s);
} else {
EAAGE = Short.MIN_VALUE;
}
}

protected final void initEDENDM(String s) {
if (!s.trim().isEmpty()) {
EDENDM = Short.parseShort(s);
} else {
EDENDM = Short.MIN_VALUE;
}
}

protected final void initEDENDY(String s) {
if (!s.trim().isEmpty()) {
EDENDY = Short.parseShort(s);
} else {
EDENDY = Short.MIN_VALUE;
}
}

protected final void initEDENDY4(String s) {
if (!s.trim().isEmpty()) {
EDENDY4 = Short.parseShort(s);
} else {
EDENDY4 = Short.MIN_VALUE;
}
}

protected final void initEDLYR(String s) {
if (!s.trim().isEmpty()) {
EDLYR = Short.parseShort(s);
} else {
EDLYR = Short.MIN_VALUE;
}
}

protected final void initEDNEW(String s) {
if (!s.trim().isEmpty()) {
EDNEW = Short.parseShort(s);
} else {
EDNEW = Short.MIN_VALUE;
}
}

protected final void initEDNEW1(String s) {
if (!s.trim().isEmpty()) {
EDNEW1 = Short.parseShort(s);
} else {
EDNEW1 = Short.MIN_VALUE;
}
}

protected final void initEDNEW2(String s) {
if (!s.trim().isEmpty()) {
EDNEW2 = Short.parseShort(s);
} else {
EDNEW2 = Short.MIN_VALUE;
}
}

protected final void initEDNEW3(String s) {
if (!s.trim().isEmpty()) {
EDNEW3 = Short.parseShort(s);
} else {
EDNEW3 = Short.MIN_VALUE;
}
}

protected final void initEDNEW4(String s) {
if (!s.trim().isEmpty()) {
EDNEW4 = Short.parseShort(s);
} else {
EDNEW4 = Short.MIN_VALUE;
}
}

protected final void initEDNEWP1(String s) {
if (!s.trim().isEmpty()) {
EDNEWP1 = Short.parseShort(s);
} else {
EDNEWP1 = Short.MIN_VALUE;
}
}

protected final void initEDNEWQ(String s) {
if (!s.trim().isEmpty()) {
EDNEWQ = Short.parseShort(s);
} else {
EDNEWQ = Short.MIN_VALUE;
}
}

protected final void initEDTYPE(String s) {
if (!s.trim().isEmpty()) {
EDTYPE = Short.parseShort(s);
} else {
EDTYPE = Short.MIN_VALUE;
}
}

protected final void initEDTYPE_BH(String s) {
if (!s.trim().isEmpty()) {
EDTYPE_BH = Short.parseShort(s);
} else {
EDTYPE_BH = Short.MIN_VALUE;
}
}

protected final void initF101(String s) {
if (!s.trim().isEmpty()) {
F101 = Short.parseShort(s);
} else {
F101 = Short.MIN_VALUE;
}
}

protected final void initF102(String s) {
if (!s.trim().isEmpty()) {
F102 = Short.parseShort(s);
} else {
F102 = Short.MIN_VALUE;
}
}

protected final void initF103(String s) {
if (!s.trim().isEmpty()) {
F103 = Short.parseShort(s);
} else {
F103 = Short.MIN_VALUE;
}
}

protected final void initF104(String s) {
if (!s.trim().isEmpty()) {
F104 = Short.parseShort(s);
} else {
F104 = Short.MIN_VALUE;
}
}

protected final void initF105(String s) {
if (!s.trim().isEmpty()) {
F105 = Short.parseShort(s);
} else {
F105 = Short.MIN_VALUE;
}
}

protected final void initF106(String s) {
if (!s.trim().isEmpty()) {
F106 = Byte.parseByte(s);
} else {
F106 = Byte.MIN_VALUE;
}
}

protected final void initF116(String s) {
if (!s.trim().isEmpty()) {
F116 = Byte.parseByte(s);
} else {
F116 = Byte.MIN_VALUE;
}
}

protected final void initF117(String s) {
if (!s.trim().isEmpty()) {
F117 = Byte.parseByte(s);
} else {
F117 = Byte.MIN_VALUE;
}
}

protected final void initF118(String s) {
if (!s.trim().isEmpty()) {
F118 = Short.parseShort(s);
} else {
F118 = Short.MIN_VALUE;
}
}

protected final void initF119(String s) {
if (!s.trim().isEmpty()) {
F119 = Short.parseShort(s);
} else {
F119 = Short.MIN_VALUE;
}
}

protected final void initF120(String s) {
if (!s.trim().isEmpty()) {
F120 = Short.parseShort(s);
} else {
F120 = Short.MIN_VALUE;
}
}

protected final void initF121(String s) {
if (!s.trim().isEmpty()) {
F121 = Short.parseShort(s);
} else {
F121 = Short.MIN_VALUE;
}
}

protected final void initF122(String s) {
if (!s.trim().isEmpty()) {
F122 = Short.parseShort(s);
} else {
F122 = Short.MIN_VALUE;
}
}

protected final void initF123(String s) {
if (!s.trim().isEmpty()) {
F123 = Short.parseShort(s);
} else {
F123 = Short.MIN_VALUE;
}
}

protected final void initF124(String s) {
if (!s.trim().isEmpty()) {
F124 = Byte.parseByte(s);
} else {
F124 = Byte.MIN_VALUE;
}
}

protected final void initF125(String s) {
if (!s.trim().isEmpty()) {
F125 = Short.parseShort(s);
} else {
F125 = Short.MIN_VALUE;
}
}

protected final void initF131(String s) {
if (!s.trim().isEmpty()) {
F131 = Short.parseShort(s);
} else {
F131 = Short.MIN_VALUE;
}
}

protected final void initF132(String s) {
if (!s.trim().isEmpty()) {
F132 = Short.parseShort(s);
} else {
F132 = Short.MIN_VALUE;
}
}

protected final void initF133(String s) {
if (!s.trim().isEmpty()) {
F133 = Short.parseShort(s);
} else {
F133 = Short.MIN_VALUE;
}
}

protected final void initF134(String s) {
if (!s.trim().isEmpty()) {
F134 = Byte.parseByte(s);
} else {
F134 = Byte.MIN_VALUE;
}
}

protected final void initF135(String s) {
if (!s.trim().isEmpty()) {
F135 = Short.parseShort(s);
} else {
F135 = Short.MIN_VALUE;
}
}

protected final void initF136(String s) {
if (!s.trim().isEmpty()) {
F136 = Short.parseShort(s);
} else {
F136 = Short.MIN_VALUE;
}
}

protected final void initF137(String s) {
if (!s.trim().isEmpty()) {
F137 = Short.parseShort(s);
} else {
F137 = Short.MIN_VALUE;
}
}

protected final void initF138(String s) {
if (!s.trim().isEmpty()) {
F138 = Short.parseShort(s);
} else {
F138 = Short.MIN_VALUE;
}
}

protected final void initF139(String s) {
if (!s.trim().isEmpty()) {
F139 = Short.parseShort(s);
} else {
F139 = Short.MIN_VALUE;
}
}

protected final void initF140(String s) {
if (!s.trim().isEmpty()) {
F140 = Short.parseShort(s);
} else {
F140 = Short.MIN_VALUE;
}
}

protected final void initF141(String s) {
if (!s.trim().isEmpty()) {
F141 = Short.parseShort(s);
} else {
F141 = Short.MIN_VALUE;
}
}

protected final void initF151(String s) {
if (!s.trim().isEmpty()) {
F151 = Short.parseShort(s);
} else {
F151 = Short.MIN_VALUE;
}
}

protected final void initF152(String s) {
if (!s.trim().isEmpty()) {
F152 = Byte.parseByte(s);
} else {
F152 = Byte.MIN_VALUE;
}
}

protected final void initF153(String s) {
if (!s.trim().isEmpty()) {
F153 = Short.parseShort(s);
} else {
F153 = Short.MIN_VALUE;
}
}

protected final void initF154(String s) {
if (!s.trim().isEmpty()) {
F154 = Short.parseShort(s);
} else {
F154 = Short.MIN_VALUE;
}
}

protected final void initF155(String s) {
if (!s.trim().isEmpty()) {
F155 = Short.parseShort(s);
} else {
F155 = Short.MIN_VALUE;
}
}

protected final void initF156(String s) {
if (!s.trim().isEmpty()) {
F156 = Short.parseShort(s);
} else {
F156 = Short.MIN_VALUE;
}
}

protected final void initF157(String s) {
if (!s.trim().isEmpty()) {
F157 = Short.parseShort(s);
} else {
F157 = Short.MIN_VALUE;
}
}

protected final void initF158(String s) {
if (!s.trim().isEmpty()) {
F158 = Byte.parseByte(s);
} else {
F158 = Byte.MIN_VALUE;
}
}

protected final void initF159(String s) {
if (!s.trim().isEmpty()) {
F159 = Byte.parseByte(s);
} else {
F159 = Byte.MIN_VALUE;
}
}

protected final void initFCCARD(String s) {
if (!s.trim().isEmpty()) {
FCCARD = Byte.parseByte(s);
} else {
FCCARD = Byte.MIN_VALUE;
}
}

protected final void initFENOW_BH(String s) {
if (!s.trim().isEmpty()) {
FENOW_BH = Short.parseShort(s);
} else {
FENOW_BH = Short.MIN_VALUE;
}
}

protected final void initFETYPE(String s) {
if (!s.trim().isEmpty()) {
FETYPE = Short.parseShort(s);
} else {
FETYPE = Short.MIN_VALUE;
}
}

protected final void initFIHHMN(String s) {
if (!s.trim().isEmpty()) {
FIHHMN = Double.parseDouble(s);
} else {
FIHHMN = Double.NaN;
}
}

protected final void initFIHHMNI(String s) {
if (!s.trim().isEmpty()) {
FIHHMNI = Short.parseShort(s);
} else {
FIHHMNI = Short.MIN_VALUE;
}
}

protected final void initFIMNB(String s) {
if (!s.trim().isEmpty()) {
FIMNB = Double.parseDouble(s);
} else {
FIMNB = Double.NaN;
}
}

protected final void initFIMNBI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNBI = false;
} else {
FIMNBI = true;
}
}
}

protected final void initFIMNI(String s) {
if (!s.trim().isEmpty()) {
FIMNI = Double.parseDouble(s);
} else {
FIMNI = Double.NaN;
}
}

protected final void initFIMNII(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNII = false;
} else {
FIMNII = true;
}
}
}

protected final void initFIMNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNLI = false;
} else {
FIMNLI = true;
}
}
}

protected final void initFIMNNL(String s) {
if (!s.trim().isEmpty()) {
FIMNNL = Double.parseDouble(s);
} else {
FIMNNL = Double.NaN;
}
}

protected final void initFIMNNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNNLI = false;
} else {
FIMNNLI = true;
}
}
}

protected final void initFIMNP(String s) {
if (!s.trim().isEmpty()) {
FIMNP = Double.parseDouble(s);
} else {
FIMNP = Double.NaN;
}
}

protected final void initFIMNPI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNPI = false;
} else {
FIMNPI = true;
}
}
}

protected final void initFIMNT(String s) {
if (!s.trim().isEmpty()) {
FIMNT = Double.parseDouble(s);
} else {
FIMNT = Double.NaN;
}
}

protected final void initFIMNTHI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNTHI = false;
} else {
FIMNTHI = true;
}
}
}

protected final void initFIMNTI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIMNTI = false;
} else {
FIMNTI = true;
}
}
}

protected final void initFISITC(String s) {
if (!s.trim().isEmpty()) {
FISITC = Short.parseShort(s);
} else {
FISITC = Short.MIN_VALUE;
}
}

protected final void initFISITX(String s) {
if (!s.trim().isEmpty()) {
FISITX = Short.parseShort(s);
} else {
FISITX = Short.MIN_VALUE;
}
}

protected final void initFISITY(String s) {
if (!s.trim().isEmpty()) {
FISITY = Short.parseShort(s);
} else {
FISITY = Short.MIN_VALUE;
}
}

protected final void initFIYEARI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYEARI = false;
} else {
FIYEARI = true;
}
}
}

protected final void initFIYR(String s) {
if (!s.trim().isEmpty()) {
FIYR = Double.parseDouble(s);
} else {
FIYR = Double.NaN;
}
}

protected final void initFIYRB(String s) {
if (!s.trim().isEmpty()) {
FIYRB = Double.parseDouble(s);
} else {
FIYRB = Double.NaN;
}
}

protected final void initFIYRBI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRBI = false;
} else {
FIYRBI = true;
}
}
}

protected final void initFIYRDI(String s) {
if (!s.trim().isEmpty()) {
FIYRDI = Short.parseShort(s);
} else {
FIYRDI = Short.MIN_VALUE;
}
}

protected final void initFIYRDII(String s) {
if (!s.trim().isEmpty()) {
FIYRDII = Short.parseShort(s);
} else {
FIYRDII = Short.MIN_VALUE;
}
}

protected final void initFIYRDIU(String s) {
if (!s.trim().isEmpty()) {
FIYRDIU = Byte.parseByte(s);
} else {
FIYRDIU = Byte.MIN_VALUE;
}
}

protected final void initFIYRI(String s) {
if (!s.trim().isEmpty()) {
FIYRI = Double.parseDouble(s);
} else {
FIYRI = Double.NaN;
}
}

protected final void initFIYRII(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRII = false;
} else {
FIYRII = true;
}
}
}

protected final void initFIYRL(String s) {
if (!s.trim().isEmpty()) {
FIYRL = Double.parseDouble(s);
} else {
FIYRL = Double.NaN;
}
}

protected final void initFIYRLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRLI = false;
} else {
FIYRLI = true;
}
}
}

protected final void initFIYRNL(String s) {
if (!s.trim().isEmpty()) {
FIYRNL = Double.parseDouble(s);
} else {
FIYRNL = Double.NaN;
}
}

protected final void initFIYRNLI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRNLI = false;
} else {
FIYRNLI = true;
}
}
}

protected final void initFIYRP(String s) {
if (!s.trim().isEmpty()) {
FIYRP = Double.parseDouble(s);
} else {
FIYRP = Double.NaN;
}
}

protected final void initFIYRPI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRPI = false;
} else {
FIYRPI = true;
}
}
}

protected final void initFIYRT(String s) {
if (!s.trim().isEmpty()) {
FIYRT = Double.parseDouble(s);
} else {
FIYRT = Double.NaN;
}
}

protected final void initFIYRTI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FIYRTI = false;
} else {
FIYRTI = true;
}
}
}

protected final void initFNPID_BH(String s) {
if (!s.trim().isEmpty()) {
FNPID_BH = Integer.parseInt(s);
} else {
FNPID_BH = Integer.MIN_VALUE;
}
}

protected final void initFTEXA(String s) {
if (!s.trim().isEmpty()) {
FTEXA = Short.parseShort(s);
} else {
FTEXA = Short.MIN_VALUE;
}
}

protected final void initFTEXA1(String s) {
if (!s.trim().isEmpty()) {
FTEXA1 = Short.parseShort(s);
} else {
FTEXA1 = Short.MIN_VALUE;
}
}

protected final void initFTEXA2(String s) {
if (!s.trim().isEmpty()) {
FTEXA2 = Short.parseShort(s);
} else {
FTEXA2 = Short.MIN_VALUE;
}
}

protected final void initFTEXA3(String s) {
if (!s.trim().isEmpty()) {
FTEXA3 = Short.parseShort(s);
} else {
FTEXA3 = Short.MIN_VALUE;
}
}

protected final void initFTEXA4(String s) {
if (!s.trim().isEmpty()) {
FTEXA4 = Short.parseShort(s);
} else {
FTEXA4 = Short.MIN_VALUE;
}
}

protected final void initFTEXA5(String s) {
if (!s.trim().isEmpty()) {
FTEXA5 = Short.parseShort(s);
} else {
FTEXA5 = Short.MIN_VALUE;
}
}

protected final void initFTEXA6(String s) {
if (!s.trim().isEmpty()) {
FTEXA6 = Short.parseShort(s);
} else {
FTEXA6 = Short.MIN_VALUE;
}
}

protected final void initFTEXAV(String s) {
if (!s.trim().isEmpty()) {
FTEXAV = Short.parseShort(s);
} else {
FTEXAV = Short.MIN_VALUE;
}
}

protected final void initFTEXAW(String s) {
if (!s.trim().isEmpty()) {
FTEXAW = Double.parseDouble(s);
} else {
FTEXAW = Double.NaN;
}
}

protected final void initFTEXB(String s) {
if (!s.trim().isEmpty()) {
FTEXB = Short.parseShort(s);
} else {
FTEXB = Short.MIN_VALUE;
}
}

protected final void initFTEXB1(String s) {
if (!s.trim().isEmpty()) {
FTEXB1 = Short.parseShort(s);
} else {
FTEXB1 = Short.MIN_VALUE;
}
}

protected final void initFTEXB2(String s) {
if (!s.trim().isEmpty()) {
FTEXB2 = Short.parseShort(s);
} else {
FTEXB2 = Short.MIN_VALUE;
}
}

protected final void initFTEXB3(String s) {
if (!s.trim().isEmpty()) {
FTEXB3 = Short.parseShort(s);
} else {
FTEXB3 = Short.MIN_VALUE;
}
}

protected final void initFTEXB4(String s) {
if (!s.trim().isEmpty()) {
FTEXB4 = Short.parseShort(s);
} else {
FTEXB4 = Short.MIN_VALUE;
}
}

protected final void initFTEXB5(String s) {
if (!s.trim().isEmpty()) {
FTEXB5 = Short.parseShort(s);
} else {
FTEXB5 = Short.MIN_VALUE;
}
}

protected final void initFTEXB6(String s) {
if (!s.trim().isEmpty()) {
FTEXB6 = Short.parseShort(s);
} else {
FTEXB6 = Short.MIN_VALUE;
}
}

protected final void initFTEXBV(String s) {
if (!s.trim().isEmpty()) {
FTEXBV = Short.parseShort(s);
} else {
FTEXBV = Short.MIN_VALUE;
}
}

protected final void initFTEXBW(String s) {
if (!s.trim().isEmpty()) {
FTEXBW = Double.parseDouble(s);
} else {
FTEXBW = Double.NaN;
}
}

protected final void initFTEXC(String s) {
if (!s.trim().isEmpty()) {
FTEXC = Short.parseShort(s);
} else {
FTEXC = Short.MIN_VALUE;
}
}

protected final void initFTEXC1(String s) {
if (!s.trim().isEmpty()) {
FTEXC1 = Short.parseShort(s);
} else {
FTEXC1 = Short.MIN_VALUE;
}
}

protected final void initFTEXC2(String s) {
if (!s.trim().isEmpty()) {
FTEXC2 = Short.parseShort(s);
} else {
FTEXC2 = Short.MIN_VALUE;
}
}

protected final void initFTEXC3(String s) {
if (!s.trim().isEmpty()) {
FTEXC3 = Short.parseShort(s);
} else {
FTEXC3 = Short.MIN_VALUE;
}
}

protected final void initFTEXC4(String s) {
if (!s.trim().isEmpty()) {
FTEXC4 = Short.parseShort(s);
} else {
FTEXC4 = Short.MIN_VALUE;
}
}

protected final void initFTEXC5(String s) {
if (!s.trim().isEmpty()) {
FTEXC5 = Short.parseShort(s);
} else {
FTEXC5 = Short.MIN_VALUE;
}
}

protected final void initFTEXC6(String s) {
if (!s.trim().isEmpty()) {
FTEXC6 = Short.parseShort(s);
} else {
FTEXC6 = Short.MIN_VALUE;
}
}

protected final void initFTEXCV(String s) {
if (!s.trim().isEmpty()) {
FTEXCV = Short.parseShort(s);
} else {
FTEXCV = Short.MIN_VALUE;
}
}

protected final void initFTEXCW(String s) {
if (!s.trim().isEmpty()) {
FTEXCW = Double.parseDouble(s);
} else {
FTEXCW = Double.NaN;
}
}

protected final void initFTEXHH(String s) {
if (!s.trim().isEmpty()) {
FTEXHH = Short.parseShort(s);
} else {
FTEXHH = Short.MIN_VALUE;
}
}

protected final void initFTHH(String s) {
if (!s.trim().isEmpty()) {
FTHH = Byte.parseByte(s);
} else {
FTHH = Byte.MIN_VALUE;
}
}

protected final void initFTHH1(String s) {
if (!s.trim().isEmpty()) {
FTHH1 = Byte.parseByte(s);
} else {
FTHH1 = Byte.MIN_VALUE;
}
}

protected final void initFTHH11(String s) {
if (!s.trim().isEmpty()) {
FTHH11 = Byte.parseByte(s);
} else {
FTHH11 = Byte.MIN_VALUE;
}
}

protected final void initFTHH12(String s) {
if (!s.trim().isEmpty()) {
FTHH12 = Byte.parseByte(s);
} else {
FTHH12 = Byte.MIN_VALUE;
}
}

protected final void initFTHH13(String s) {
if (!s.trim().isEmpty()) {
FTHH13 = Byte.parseByte(s);
} else {
FTHH13 = Byte.MIN_VALUE;
}
}

protected final void initFTHH14(String s) {
if (!s.trim().isEmpty()) {
FTHH14 = Byte.parseByte(s);
} else {
FTHH14 = Byte.MIN_VALUE;
}
}

protected final void initFTHH15(String s) {
if (!s.trim().isEmpty()) {
FTHH15 = Byte.parseByte(s);
} else {
FTHH15 = Byte.MIN_VALUE;
}
}

protected final void initFTHH16(String s) {
if (!s.trim().isEmpty()) {
FTHH16 = Byte.parseByte(s);
} else {
FTHH16 = Byte.MIN_VALUE;
}
}

protected final void initFTHH1V(String s) {
if (!s.trim().isEmpty()) {
FTHH1V = Short.parseShort(s);
} else {
FTHH1V = Short.MIN_VALUE;
}
}

protected final void initFTHH1W(String s) {
if (!s.trim().isEmpty()) {
FTHH1W = Double.parseDouble(s);
} else {
FTHH1W = Double.NaN;
}
}

protected final void initFTHH2(String s) {
if (!s.trim().isEmpty()) {
FTHH2 = Byte.parseByte(s);
} else {
FTHH2 = Byte.MIN_VALUE;
}
}

protected final void initFTHH21(String s) {
if (!s.trim().isEmpty()) {
FTHH21 = Byte.parseByte(s);
} else {
FTHH21 = Byte.MIN_VALUE;
}
}

protected final void initFTHH22(String s) {
if (!s.trim().isEmpty()) {
FTHH22 = Byte.parseByte(s);
} else {
FTHH22 = Byte.MIN_VALUE;
}
}

protected final void initFTHH23(String s) {
if (!s.trim().isEmpty()) {
FTHH23 = Byte.parseByte(s);
} else {
FTHH23 = Byte.MIN_VALUE;
}
}

protected final void initFTHH24(String s) {
if (!s.trim().isEmpty()) {
FTHH24 = Byte.parseByte(s);
} else {
FTHH24 = Byte.MIN_VALUE;
}
}

protected final void initFTHH25(String s) {
if (!s.trim().isEmpty()) {
FTHH25 = Byte.parseByte(s);
} else {
FTHH25 = Byte.MIN_VALUE;
}
}

protected final void initFTHH26(String s) {
if (!s.trim().isEmpty()) {
FTHH26 = Byte.parseByte(s);
} else {
FTHH26 = Byte.MIN_VALUE;
}
}

protected final void initFTHH2V(String s) {
if (!s.trim().isEmpty()) {
FTHH2V = Short.parseShort(s);
} else {
FTHH2V = Short.MIN_VALUE;
}
}

protected final void initFTHH2W(String s) {
if (!s.trim().isEmpty()) {
FTHH2W = Double.parseDouble(s);
} else {
FTHH2W = Double.NaN;
}
}

protected final void initFTHH3(String s) {
if (!s.trim().isEmpty()) {
FTHH3 = Byte.parseByte(s);
} else {
FTHH3 = Byte.MIN_VALUE;
}
}

protected final void initFTHH31(String s) {
if (!s.trim().isEmpty()) {
FTHH31 = Byte.parseByte(s);
} else {
FTHH31 = Byte.MIN_VALUE;
}
}

protected final void initFTHH32(String s) {
if (!s.trim().isEmpty()) {
FTHH32 = Byte.parseByte(s);
} else {
FTHH32 = Byte.MIN_VALUE;
}
}

protected final void initFTHH33(String s) {
if (!s.trim().isEmpty()) {
FTHH33 = Byte.parseByte(s);
} else {
FTHH33 = Byte.MIN_VALUE;
}
}

protected final void initFTHH34(String s) {
if (!s.trim().isEmpty()) {
FTHH34 = Byte.parseByte(s);
} else {
FTHH34 = Byte.MIN_VALUE;
}
}

protected final void initFTHH35(String s) {
if (!s.trim().isEmpty()) {
FTHH35 = Byte.parseByte(s);
} else {
FTHH35 = Byte.MIN_VALUE;
}
}

protected final void initFTHH36(String s) {
if (!s.trim().isEmpty()) {
FTHH36 = Byte.parseByte(s);
} else {
FTHH36 = Byte.MIN_VALUE;
}
}

protected final void initFTHH3V(String s) {
if (!s.trim().isEmpty()) {
FTHH3V = Short.parseShort(s);
} else {
FTHH3V = Short.MIN_VALUE;
}
}

protected final void initFTHH3W(String s) {
if (!s.trim().isEmpty()) {
FTHH3W = Double.parseDouble(s);
} else {
FTHH3W = Double.NaN;
}
}

protected final void initHGEMP(String s) {
if (!s.trim().isEmpty()) {
HGEMP = Byte.parseByte(s);
} else {
HGEMP = Byte.MIN_VALUE;
}
}

protected final void initHGR2R(String s) {
if (!s.trim().isEmpty()) {
HGR2R = Short.parseShort(s);
} else {
HGR2R = Short.MIN_VALUE;
}
}

protected final void initHGRA(String s) {
if (!s.trim().isEmpty()) {
HGRA = Short.parseShort(s);
} else {
HGRA = Short.MIN_VALUE;
}
}

protected final void initHGSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
HGSEX = false;
} else {
HGSEX = true;
}
}
}

protected final void initHHCH12(String s) {
if (!s.trim().isEmpty()) {
HHCH12 = Short.parseShort(s);
} else {
HHCH12 = Short.MIN_VALUE;
}
}

protected final void initHHMEM(String s) {
if (!s.trim().isEmpty()) {
HHMEM = Short.parseShort(s);
} else {
HHMEM = Short.MIN_VALUE;
}
}

protected final void initHHSIZE(String s) {
if (!s.trim().isEmpty()) {
HHSIZE = Short.parseShort(s);
} else {
HHSIZE = Short.MIN_VALUE;
}
}

protected final void initHHTYPE(String s) {
if (!s.trim().isEmpty()) {
HHTYPE = Short.parseShort(s);
} else {
HHTYPE = Short.MIN_VALUE;
}
}

protected final void initHID(String s) {
if (!s.trim().isEmpty()) {
HID = Integer.parseInt(s);
} else {
HID = Integer.MIN_VALUE;
}
}

protected final void initHIQUALB_DV(String s) {
if (!s.trim().isEmpty()) {
HIQUALB_DV = Short.parseShort(s);
} else {
HIQUALB_DV = Short.MIN_VALUE;
}
}

protected final void initHL2GP(String s) {
if (!s.trim().isEmpty()) {
HL2GP = Short.parseShort(s);
} else {
HL2GP = Short.MIN_VALUE;
}
}

protected final void initHLCK(String s) {
if (!s.trim().isEmpty()) {
HLCK = Short.parseShort(s);
} else {
HLCK = Short.MIN_VALUE;
}
}

protected final void initHLCKA(String s) {
if (!s.trim().isEmpty()) {
HLCKA = Short.parseShort(s);
} else {
HLCKA = Short.MIN_VALUE;
}
}

protected final void initHLCKAN(String s) {
if (!s.trim().isEmpty()) {
HLCKAN = Short.parseShort(s);
} else {
HLCKAN = Short.MIN_VALUE;
}
}

protected final void initHLCKB(String s) {
if (!s.trim().isEmpty()) {
HLCKB = Short.parseShort(s);
} else {
HLCKB = Short.MIN_VALUE;
}
}

protected final void initHLCKBN(String s) {
if (!s.trim().isEmpty()) {
HLCKBN = Short.parseShort(s);
} else {
HLCKBN = Short.MIN_VALUE;
}
}

protected final void initHLCKC(String s) {
if (!s.trim().isEmpty()) {
HLCKC = Short.parseShort(s);
} else {
HLCKC = Short.MIN_VALUE;
}
}

protected final void initHLCKCN(String s) {
if (!s.trim().isEmpty()) {
HLCKCN = Short.parseShort(s);
} else {
HLCKCN = Short.MIN_VALUE;
}
}

protected final void initHLCKD(String s) {
if (!s.trim().isEmpty()) {
HLCKD = Short.parseShort(s);
} else {
HLCKD = Short.MIN_VALUE;
}
}

protected final void initHLCKDN(String s) {
if (!s.trim().isEmpty()) {
HLCKDN = Short.parseShort(s);
} else {
HLCKDN = Short.MIN_VALUE;
}
}

protected final void initHLCKE(String s) {
if (!s.trim().isEmpty()) {
HLCKE = Short.parseShort(s);
} else {
HLCKE = Short.MIN_VALUE;
}
}

protected final void initHLCKEN(String s) {
if (!s.trim().isEmpty()) {
HLCKEN = Short.parseShort(s);
} else {
HLCKEN = Short.MIN_VALUE;
}
}

protected final void initHLCKF(String s) {
if (!s.trim().isEmpty()) {
HLCKF = Short.parseShort(s);
} else {
HLCKF = Short.MIN_VALUE;
}
}

protected final void initHLCKFN(String s) {
if (!s.trim().isEmpty()) {
HLCKFN = Short.parseShort(s);
} else {
HLCKFN = Short.MIN_VALUE;
}
}

protected final void initHLCKG(String s) {
if (!s.trim().isEmpty()) {
HLCKG = Short.parseShort(s);
} else {
HLCKG = Short.MIN_VALUE;
}
}

protected final void initHLCKGN(String s) {
if (!s.trim().isEmpty()) {
HLCKGN = Short.parseShort(s);
} else {
HLCKGN = Short.MIN_VALUE;
}
}

protected final void initHLCKH(String s) {
if (!s.trim().isEmpty()) {
HLCKH = Short.parseShort(s);
} else {
HLCKH = Short.MIN_VALUE;
}
}

protected final void initHLCKHN(String s) {
if (!s.trim().isEmpty()) {
HLCKHN = Short.parseShort(s);
} else {
HLCKHN = Short.MIN_VALUE;
}
}

protected final void initHLCKI(String s) {
if (!s.trim().isEmpty()) {
HLCKI = Short.parseShort(s);
} else {
HLCKI = Short.MIN_VALUE;
}
}

protected final void initHLCKIN(String s) {
if (!s.trim().isEmpty()) {
HLCKIN = Short.parseShort(s);
} else {
HLCKIN = Short.MIN_VALUE;
}
}

protected final void initHLDSBL(String s) {
if (!s.trim().isEmpty()) {
HLDSBL = Short.parseShort(s);
} else {
HLDSBL = Short.MIN_VALUE;
}
}

protected final void initHLENDW(String s) {
if (!s.trim().isEmpty()) {
HLENDW = Short.parseShort(s);
} else {
HLENDW = Short.MIN_VALUE;
}
}

protected final void initHLLT(String s) {
if (!s.trim().isEmpty()) {
HLLT = Byte.parseByte(s);
} else {
HLLT = Byte.MIN_VALUE;
}
}

protected final void initHLLTA(String s) {
if (!s.trim().isEmpty()) {
HLLTA = Short.parseShort(s);
} else {
HLLTA = Short.MIN_VALUE;
}
}

protected final void initHLLTB(String s) {
if (!s.trim().isEmpty()) {
HLLTB = Short.parseShort(s);
} else {
HLLTB = Short.MIN_VALUE;
}
}

protected final void initHLLTC(String s) {
if (!s.trim().isEmpty()) {
HLLTC = Short.parseShort(s);
} else {
HLLTC = Short.MIN_VALUE;
}
}

protected final void initHLLTD(String s) {
if (!s.trim().isEmpty()) {
HLLTD = Short.parseShort(s);
} else {
HLLTD = Short.MIN_VALUE;
}
}

protected final void initHLLTE(String s) {
if (!s.trim().isEmpty()) {
HLLTE = Short.parseShort(s);
} else {
HLLTE = Short.MIN_VALUE;
}
}

protected final void initHLLTW(String s) {
if (!s.trim().isEmpty()) {
HLLTW = Byte.parseByte(s);
} else {
HLLTW = Byte.MIN_VALUE;
}
}

protected final void initHLLTWA(String s) {
if (!s.trim().isEmpty()) {
HLLTWA = Short.parseShort(s);
} else {
HLLTWA = Short.MIN_VALUE;
}
}

protected final void initHLPRB(String s) {
if (!s.trim().isEmpty()) {
HLPRB = Short.parseShort(s);
} else {
HLPRB = Short.MIN_VALUE;
}
}

protected final void initHLPRBA(String s) {
if (!s.trim().isEmpty()) {
HLPRBA = Short.parseShort(s);
} else {
HLPRBA = Short.MIN_VALUE;
}
}

protected final void initHLPRBB(String s) {
if (!s.trim().isEmpty()) {
HLPRBB = Short.parseShort(s);
} else {
HLPRBB = Short.MIN_VALUE;
}
}

protected final void initHLPRBC(String s) {
if (!s.trim().isEmpty()) {
HLPRBC = Short.parseShort(s);
} else {
HLPRBC = Short.MIN_VALUE;
}
}

protected final void initHLPRBD(String s) {
if (!s.trim().isEmpty()) {
HLPRBD = Short.parseShort(s);
} else {
HLPRBD = Short.MIN_VALUE;
}
}

protected final void initHLPRBE(String s) {
if (!s.trim().isEmpty()) {
HLPRBE = Short.parseShort(s);
} else {
HLPRBE = Short.MIN_VALUE;
}
}

protected final void initHLPRBF(String s) {
if (!s.trim().isEmpty()) {
HLPRBF = Short.parseShort(s);
} else {
HLPRBF = Short.MIN_VALUE;
}
}

protected final void initHLPRBG(String s) {
if (!s.trim().isEmpty()) {
HLPRBG = Short.parseShort(s);
} else {
HLPRBG = Short.MIN_VALUE;
}
}

protected final void initHLPRBH(String s) {
if (!s.trim().isEmpty()) {
HLPRBH = Short.parseShort(s);
} else {
HLPRBH = Short.MIN_VALUE;
}
}

protected final void initHLPRBI(String s) {
if (!s.trim().isEmpty()) {
HLPRBI = Short.parseShort(s);
} else {
HLPRBI = Short.MIN_VALUE;
}
}

protected final void initHLPRBJ(String s) {
if (!s.trim().isEmpty()) {
HLPRBJ = Short.parseShort(s);
} else {
HLPRBJ = Short.MIN_VALUE;
}
}

protected final void initHLPRBK(String s) {
if (!s.trim().isEmpty()) {
HLPRBK = Short.parseShort(s);
} else {
HLPRBK = Short.MIN_VALUE;
}
}

protected final void initHLPRBL(String s) {
if (!s.trim().isEmpty()) {
HLPRBL = Short.parseShort(s);
} else {
HLPRBL = Short.MIN_VALUE;
}
}

protected final void initHLPRBM(String s) {
if (!s.trim().isEmpty()) {
HLPRBM = Short.parseShort(s);
} else {
HLPRBM = Short.MIN_VALUE;
}
}

protected final void initHLSTAT(String s) {
if (!s.trim().isEmpty()) {
HLSTAT = Short.parseShort(s);
} else {
HLSTAT = Short.MIN_VALUE;
}
}

protected final void initHLSV(String s) {
if (!s.trim().isEmpty()) {
HLSV = Short.parseShort(s);
} else {
HLSV = Short.MIN_VALUE;
}
}

protected final void initHLSVA(String s) {
if (!s.trim().isEmpty()) {
HLSVA = Short.parseShort(s);
} else {
HLSVA = Short.MIN_VALUE;
}
}

protected final void initHLSVAF(String s) {
if (!s.trim().isEmpty()) {
HLSVAF = Short.parseShort(s);
} else {
HLSVAF = Short.MIN_VALUE;
}
}

protected final void initHLSVAN(String s) {
if (!s.trim().isEmpty()) {
HLSVAN = Short.parseShort(s);
} else {
HLSVAN = Short.MIN_VALUE;
}
}

protected final void initHLSVB(String s) {
if (!s.trim().isEmpty()) {
HLSVB = Short.parseShort(s);
} else {
HLSVB = Short.MIN_VALUE;
}
}

protected final void initHLSVBF(String s) {
if (!s.trim().isEmpty()) {
HLSVBF = Short.parseShort(s);
} else {
HLSVBF = Short.MIN_VALUE;
}
}

protected final void initHLSVBN(String s) {
if (!s.trim().isEmpty()) {
HLSVBN = Short.parseShort(s);
} else {
HLSVBN = Short.MIN_VALUE;
}
}

protected final void initHLSVC(String s) {
if (!s.trim().isEmpty()) {
HLSVC = Short.parseShort(s);
} else {
HLSVC = Short.MIN_VALUE;
}
}

protected final void initHLSVCF(String s) {
if (!s.trim().isEmpty()) {
HLSVCF = Short.parseShort(s);
} else {
HLSVCF = Short.MIN_VALUE;
}
}

protected final void initHLSVCN(String s) {
if (!s.trim().isEmpty()) {
HLSVCN = Short.parseShort(s);
} else {
HLSVCN = Short.MIN_VALUE;
}
}

protected final void initHLSVD(String s) {
if (!s.trim().isEmpty()) {
HLSVD = Short.parseShort(s);
} else {
HLSVD = Short.MIN_VALUE;
}
}

protected final void initHLSVDF(String s) {
if (!s.trim().isEmpty()) {
HLSVDF = Short.parseShort(s);
} else {
HLSVDF = Short.MIN_VALUE;
}
}

protected final void initHLSVDN(String s) {
if (!s.trim().isEmpty()) {
HLSVDN = Short.parseShort(s);
} else {
HLSVDN = Short.MIN_VALUE;
}
}

protected final void initHLSVE(String s) {
if (!s.trim().isEmpty()) {
HLSVE = Short.parseShort(s);
} else {
HLSVE = Short.MIN_VALUE;
}
}

protected final void initHLSVEF(String s) {
if (!s.trim().isEmpty()) {
HLSVEF = Short.parseShort(s);
} else {
HLSVEF = Short.MIN_VALUE;
}
}

protected final void initHLSVEN(String s) {
if (!s.trim().isEmpty()) {
HLSVEN = Short.parseShort(s);
} else {
HLSVEN = Short.MIN_VALUE;
}
}

protected final void initHLSVF(String s) {
if (!s.trim().isEmpty()) {
HLSVF = Short.parseShort(s);
} else {
HLSVF = Short.MIN_VALUE;
}
}

protected final void initHLSVFF(String s) {
if (!s.trim().isEmpty()) {
HLSVFF = Short.parseShort(s);
} else {
HLSVFF = Short.MIN_VALUE;
}
}

protected final void initHLSVFN(String s) {
if (!s.trim().isEmpty()) {
HLSVFN = Short.parseShort(s);
} else {
HLSVFN = Short.MIN_VALUE;
}
}

protected final void initHLSVG(String s) {
if (!s.trim().isEmpty()) {
HLSVG = Short.parseShort(s);
} else {
HLSVG = Short.MIN_VALUE;
}
}

protected final void initHLSVGF(String s) {
if (!s.trim().isEmpty()) {
HLSVGF = Short.parseShort(s);
} else {
HLSVGF = Short.MIN_VALUE;
}
}

protected final void initHLSVGN(String s) {
if (!s.trim().isEmpty()) {
HLSVGN = Short.parseShort(s);
} else {
HLSVGN = Short.MIN_VALUE;
}
}

protected final void initHLSVH(String s) {
if (!s.trim().isEmpty()) {
HLSVH = Short.parseShort(s);
} else {
HLSVH = Short.MIN_VALUE;
}
}

protected final void initHLSVHF(String s) {
if (!s.trim().isEmpty()) {
HLSVHF = Byte.parseByte(s);
} else {
HLSVHF = Byte.MIN_VALUE;
}
}

protected final void initHLSVHN(String s) {
if (!s.trim().isEmpty()) {
HLSVHN = Byte.parseByte(s);
} else {
HLSVHN = Byte.MIN_VALUE;
}
}

protected final void initHLSVI(String s) {
if (!s.trim().isEmpty()) {
HLSVI = Short.parseShort(s);
} else {
HLSVI = Short.MIN_VALUE;
}
}

protected final void initHLSVIF(String s) {
if (!s.trim().isEmpty()) {
HLSVIF = Short.parseShort(s);
} else {
HLSVIF = Short.MIN_VALUE;
}
}

protected final void initHLSVIN(String s) {
if (!s.trim().isEmpty()) {
HLSVIN = Short.parseShort(s);
} else {
HLSVIN = Short.MIN_VALUE;
}
}

protected final void initHLSVJ(String s) {
if (!s.trim().isEmpty()) {
HLSVJ = Short.parseShort(s);
} else {
HLSVJ = Short.MIN_VALUE;
}
}

protected final void initHLSVJF(String s) {
if (!s.trim().isEmpty()) {
HLSVJF = Short.parseShort(s);
} else {
HLSVJF = Short.MIN_VALUE;
}
}

protected final void initHLSVJN(String s) {
if (!s.trim().isEmpty()) {
HLSVJN = Short.parseShort(s);
} else {
HLSVJN = Short.MIN_VALUE;
}
}

protected final void initHLSVK(String s) {
if (!s.trim().isEmpty()) {
HLSVK = Short.parseShort(s);
} else {
HLSVK = Short.MIN_VALUE;
}
}

protected final void initHLSVKF(String s) {
if (!s.trim().isEmpty()) {
HLSVKF = Short.parseShort(s);
} else {
HLSVKF = Short.MIN_VALUE;
}
}

protected final void initHLSVKN(String s) {
if (!s.trim().isEmpty()) {
HLSVKN = Short.parseShort(s);
} else {
HLSVKN = Short.MIN_VALUE;
}
}

protected final void initHLSVL(String s) {
if (!s.trim().isEmpty()) {
HLSVL = Short.parseShort(s);
} else {
HLSVL = Short.MIN_VALUE;
}
}

protected final void initHLSVLF(String s) {
if (!s.trim().isEmpty()) {
HLSVLF = Short.parseShort(s);
} else {
HLSVLF = Short.MIN_VALUE;
}
}

protected final void initHLSVLN(String s) {
if (!s.trim().isEmpty()) {
HLSVLN = Short.parseShort(s);
} else {
HLSVLN = Short.MIN_VALUE;
}
}

protected final void initHLSVM(String s) {
if (!s.trim().isEmpty()) {
HLSVM = Short.parseShort(s);
} else {
HLSVM = Short.MIN_VALUE;
}
}

protected final void initHLSVMF(String s) {
if (!s.trim().isEmpty()) {
HLSVMF = Short.parseShort(s);
} else {
HLSVMF = Short.MIN_VALUE;
}
}

protected final void initHLSVMN(String s) {
if (!s.trim().isEmpty()) {
HLSVMN = Short.parseShort(s);
} else {
HLSVMN = Short.MIN_VALUE;
}
}

protected final void initHLZEST(String s) {
if (!s.trim().isEmpty()) {
HLZEST = Byte.parseByte(s);
} else {
HLZEST = Byte.MIN_VALUE;
}
}

protected final void initHOH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
HOH = false;
} else {
HOH = true;
}
}
}

protected final void initHOSP(String s) {
if (!s.trim().isEmpty()) {
HOSP = Short.parseShort(s);
} else {
HOSP = Short.MIN_VALUE;
}
}

protected final void initHOSPCH(String s) {
if (!s.trim().isEmpty()) {
HOSPCH = Short.parseShort(s);
} else {
HOSPCH = Short.MIN_VALUE;
}
}

protected final void initHOSPD(String s) {
if (!s.trim().isEmpty()) {
HOSPD = Short.parseShort(s);
} else {
HOSPD = Short.MIN_VALUE;
}
}

protected final void initHOSPNHS(String s) {
if (!s.trim().isEmpty()) {
HOSPNHS = Short.parseShort(s);
} else {
HOSPNHS = Short.MIN_VALUE;
}
}

protected final void initHOWLNG(String s) {
if (!s.trim().isEmpty()) {
HOWLNG = Short.parseShort(s);
} else {
HOWLNG = Short.MIN_VALUE;
}
}

protected final void initHUBOSS(String s) {
if (!s.trim().isEmpty()) {
HUBOSS = Byte.parseByte(s);
} else {
HUBOSS = Byte.MIN_VALUE;
}
}

protected final void initHUBUYS(String s) {
if (!s.trim().isEmpty()) {
HUBUYS = Short.parseShort(s);
} else {
HUBUYS = Short.MIN_VALUE;
}
}

protected final void initHUBUYS_BH(String s) {
if (!s.trim().isEmpty()) {
HUBUYS_BH = Short.parseShort(s);
} else {
HUBUYS_BH = Short.MIN_VALUE;
}
}

protected final void initHUFRYS(String s) {
if (!s.trim().isEmpty()) {
HUFRYS = Short.parseShort(s);
} else {
HUFRYS = Short.MIN_VALUE;
}
}

protected final void initHUFRYS_BH(String s) {
if (!s.trim().isEmpty()) {
HUFRYS_BH = Short.parseShort(s);
} else {
HUFRYS_BH = Short.MIN_VALUE;
}
}

protected final void initHUIRON(String s) {
if (!s.trim().isEmpty()) {
HUIRON = Short.parseShort(s);
} else {
HUIRON = Short.MIN_VALUE;
}
}

protected final void initHUIRON_BH(String s) {
if (!s.trim().isEmpty()) {
HUIRON_BH = Short.parseShort(s);
} else {
HUIRON_BH = Short.MIN_VALUE;
}
}

protected final void initHUMOPS(String s) {
if (!s.trim().isEmpty()) {
HUMOPS = Short.parseShort(s);
} else {
HUMOPS = Short.MIN_VALUE;
}
}

protected final void initHUMOPS_BH(String s) {
if (!s.trim().isEmpty()) {
HUMOPS_BH = Short.parseShort(s);
} else {
HUMOPS_BH = Short.MIN_VALUE;
}
}

protected final void initHUNURS(String s) {
if (!s.trim().isEmpty()) {
HUNURS = Short.parseShort(s);
} else {
HUNURS = Short.MIN_VALUE;
}
}

protected final void initHURUNS(String s) {
if (!s.trim().isEmpty()) {
HURUNS = Byte.parseByte(s);
} else {
HURUNS = Byte.MIN_VALUE;
}
}

protected final void initHUSITS(String s) {
if (!s.trim().isEmpty()) {
HUSITS = Short.parseShort(s);
} else {
HUSITS = Short.MIN_VALUE;
}
}

protected final void initHUXPCH(String s) {
if (!s.trim().isEmpty()) {
HUXPCH = Short.parseShort(s);
} else {
HUXPCH = Short.MIN_VALUE;
}
}

protected final void initIENDDATHM(String s) {
if (!s.trim().isEmpty()) {
IENDDATHM = Short.parseShort(s);
} else {
IENDDATHM = Short.MIN_VALUE;
}
}

protected final void initIMPEVENT1(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT1 = Byte.parseByte(s);
} else {
IMPEVENT1 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT1S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT1S = Byte.parseByte(s);
} else {
IMPEVENT1S = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT2(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT2 = Byte.parseByte(s);
} else {
IMPEVENT2 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT2S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT2S = Byte.parseByte(s);
} else {
IMPEVENT2S = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT3(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT3 = Byte.parseByte(s);
} else {
IMPEVENT3 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT3S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT3S = Byte.parseByte(s);
} else {
IMPEVENT3S = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT4(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT4 = Byte.parseByte(s);
} else {
IMPEVENT4 = Byte.MIN_VALUE;
}
}

protected final void initIMPEVENT4S(String s) {
if (!s.trim().isEmpty()) {
IMPEVENT4S = Byte.parseByte(s);
} else {
IMPEVENT4S = Byte.MIN_VALUE;
}
}

protected final void initIODC(String s) {
if (!s.trim().isEmpty()) {
IODC = Short.parseShort(s);
} else {
IODC = Short.MIN_VALUE;
}
}

protected final void initISCED(String s) {
if (!s.trim().isEmpty()) {
ISCED = Short.parseShort(s);
} else {
ISCED = Short.MIN_VALUE;
}
}

protected final void initISTRTDATHM(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATHM = Short.parseShort(s);
} else {
ISTRTDATHM = Short.MIN_VALUE;
}
}

protected final void initISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
ISTRTDATY = Short.parseShort(s);
} else {
ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initIV2(String s) {
if (!s.trim().isEmpty()) {
IV2 = Short.parseShort(s);
} else {
IV2 = Short.MIN_VALUE;
}
}

protected final void initIV4(String s) {
if (!s.trim().isEmpty()) {
IV4 = Short.parseShort(s);
} else {
IV4 = Short.MIN_VALUE;
}
}

protected final void initIV5(String s) {
if (!s.trim().isEmpty()) {
IV5 = Short.parseShort(s);
} else {
IV5 = Short.MIN_VALUE;
}
}

protected final void initIV6A(String s) {
if (!s.trim().isEmpty()) {
IV6A = Short.parseShort(s);
} else {
IV6A = Short.MIN_VALUE;
}
}

protected final void initIV6B(String s) {
if (!s.trim().isEmpty()) {
IV6B = Short.parseShort(s);
} else {
IV6B = Short.MIN_VALUE;
}
}

protected final void initIV6C(String s) {
if (!s.trim().isEmpty()) {
IV6C = Short.parseShort(s);
} else {
IV6C = Short.MIN_VALUE;
}
}

protected final void initIV6D(String s) {
if (!s.trim().isEmpty()) {
IV6D = Short.parseShort(s);
} else {
IV6D = Short.MIN_VALUE;
}
}

protected final void initIV6E(String s) {
if (!s.trim().isEmpty()) {
IV6E = Short.parseShort(s);
} else {
IV6E = Short.MIN_VALUE;
}
}

protected final void initIV6F(String s) {
if (!s.trim().isEmpty()) {
IV6F = Short.parseShort(s);
} else {
IV6F = Short.MIN_VALUE;
}
}

protected final void initIV7(String s) {
if (!s.trim().isEmpty()) {
IV7 = Short.parseShort(s);
} else {
IV7 = Short.MIN_VALUE;
}
}

protected final void initIVEA(String s) {
if (!s.trim().isEmpty()) {
IVEA = Short.parseShort(s);
} else {
IVEA = Short.MIN_VALUE;
}
}

protected final void initIVEB(String s) {
if (!s.trim().isEmpty()) {
IVEB = Short.parseShort(s);
} else {
IVEB = Short.MIN_VALUE;
}
}

protected final void initIVEC(String s) {
if (!s.trim().isEmpty()) {
IVEC = Short.parseShort(s);
} else {
IVEC = Short.MIN_VALUE;
}
}

protected final void initIVED(String s) {
if (!s.trim().isEmpty()) {
IVED = Short.parseShort(s);
} else {
IVED = Short.MIN_VALUE;
}
}

protected final void initIVEE(String s) {
if (!s.trim().isEmpty()) {
IVEE = Short.parseShort(s);
} else {
IVEE = Short.MIN_VALUE;
}
}

protected final void initIVFA(String s) {
if (!s.trim().isEmpty()) {
IVFA = Short.parseShort(s);
} else {
IVFA = Short.MIN_VALUE;
}
}

protected final void initIVFB(String s) {
if (!s.trim().isEmpty()) {
IVFB = Short.parseShort(s);
} else {
IVFB = Short.MIN_VALUE;
}
}

protected final void initIVFC(String s) {
if (!s.trim().isEmpty()) {
IVFC = Short.parseShort(s);
} else {
IVFC = Short.MIN_VALUE;
}
}

protected final void initIVFD(String s) {
if (!s.trim().isEmpty()) {
IVFD = Short.parseShort(s);
} else {
IVFD = Short.MIN_VALUE;
}
}

protected final void initIVFE(String s) {
if (!s.trim().isEmpty()) {
IVFE = Short.parseShort(s);
} else {
IVFE = Short.MIN_VALUE;
}
}

protected final void initIVIEVR(String s) {
if (!s.trim().isEmpty()) {
IVIEVR = Short.parseShort(s);
} else {
IVIEVR = Short.MIN_VALUE;
}
}

protected final void initIVIOW4(String s) {
if (!s.trim().isEmpty()) {
IVIOW4 = Byte.parseByte(s);
} else {
IVIOW4 = Byte.MIN_VALUE;
}
}

protected final void initIVJA(String s) {
if (!s.trim().isEmpty()) {
IVJA = Short.parseShort(s);
} else {
IVJA = Short.MIN_VALUE;
}
}

protected final void initIVJB(String s) {
if (!s.trim().isEmpty()) {
IVJB = Short.parseShort(s);
} else {
IVJB = Short.MIN_VALUE;
}
}

protected final void initIVJC(String s) {
if (!s.trim().isEmpty()) {
IVJC = Short.parseShort(s);
} else {
IVJC = Short.MIN_VALUE;
}
}

protected final void initIVJD(String s) {
if (!s.trim().isEmpty()) {
IVJD = Short.parseShort(s);
} else {
IVJD = Short.MIN_VALUE;
}
}

protected final void initIVJE(String s) {
if (!s.trim().isEmpty()) {
IVJE = Short.parseShort(s);
} else {
IVJE = Short.MIN_VALUE;
}
}

protected final void initIVLYR(String s) {
if (!s.trim().isEmpty()) {
IVLYR = Short.parseShort(s);
} else {
IVLYR = Short.MIN_VALUE;
}
}

protected final void initIVMA(String s) {
if (!s.trim().isEmpty()) {
IVMA = Short.parseShort(s);
} else {
IVMA = Short.MIN_VALUE;
}
}

protected final void initIVMB(String s) {
if (!s.trim().isEmpty()) {
IVMB = Short.parseShort(s);
} else {
IVMB = Short.MIN_VALUE;
}
}

protected final void initIVMC(String s) {
if (!s.trim().isEmpty()) {
IVMC = Short.parseShort(s);
} else {
IVMC = Short.MIN_VALUE;
}
}

protected final void initIVMD(String s) {
if (!s.trim().isEmpty()) {
IVMD = Short.parseShort(s);
} else {
IVMD = Short.MIN_VALUE;
}
}

protected final void initIVME(String s) {
if (!s.trim().isEmpty()) {
IVME = Short.parseShort(s);
} else {
IVME = Short.MIN_VALUE;
}
}

protected final void initIVPA(String s) {
if (!s.trim().isEmpty()) {
IVPA = Short.parseShort(s);
} else {
IVPA = Short.MIN_VALUE;
}
}

protected final void initIVPB(String s) {
if (!s.trim().isEmpty()) {
IVPB = Short.parseShort(s);
} else {
IVPB = Short.MIN_VALUE;
}
}

protected final void initIVPC(String s) {
if (!s.trim().isEmpty()) {
IVPC = Short.parseShort(s);
} else {
IVPC = Short.MIN_VALUE;
}
}

protected final void initIVPD(String s) {
if (!s.trim().isEmpty()) {
IVPD = Short.parseShort(s);
} else {
IVPD = Short.MIN_VALUE;
}
}

protected final void initIVPE(String s) {
if (!s.trim().isEmpty()) {
IVPE = Short.parseShort(s);
} else {
IVPE = Short.MIN_VALUE;
}
}

protected final void initIVSC(String s) {
if (!s.trim().isEmpty()) {
IVSC = Short.parseShort(s);
} else {
IVSC = Short.MIN_VALUE;
}
}

protected final void initJ2PAY_BH(String s) {
if (!s.trim().isEmpty()) {
J2PAY_BH = Short.parseShort(s);
} else {
J2PAY_BH = Short.MIN_VALUE;
}
}

protected final void initJ2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
J2SOC90_CC = Short.parseShort(s);
} else {
J2SOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBBGLY(String s) {
if (!s.trim().isEmpty()) {
JBBGLY = Short.parseShort(s);
} else {
JBBGLY = Short.MIN_VALUE;
}
}

protected final void initJBCHC1(String s) {
if (!s.trim().isEmpty()) {
JBCHC1 = Short.parseShort(s);
} else {
JBCHC1 = Short.MIN_VALUE;
}
}

protected final void initJBCHC2(String s) {
if (!s.trim().isEmpty()) {
JBCHC2 = Short.parseShort(s);
} else {
JBCHC2 = Short.MIN_VALUE;
}
}

protected final void initJBCHC3(String s) {
if (!s.trim().isEmpty()) {
JBCHC3 = Short.parseShort(s);
} else {
JBCHC3 = Short.MIN_VALUE;
}
}

protected final void initJBCSSF(String s) {
if (!s.trim().isEmpty()) {
JBCSSF = Double.parseDouble(s);
} else {
JBCSSF = Double.NaN;
}
}

protected final void initJBCSSM(String s) {
if (!s.trim().isEmpty()) {
JBCSSM = Double.parseDouble(s);
} else {
JBCSSM = Double.NaN;
}
}

protected final void initJBED(String s) {
if (!s.trim().isEmpty()) {
JBED = Short.parseShort(s);
} else {
JBED = Short.MIN_VALUE;
}
}

protected final void initJBED1(String s) {
if (!s.trim().isEmpty()) {
JBED1 = Short.parseShort(s);
} else {
JBED1 = Short.MIN_VALUE;
}
}

protected final void initJBED2(String s) {
if (!s.trim().isEmpty()) {
JBED2 = Short.parseShort(s);
} else {
JBED2 = Short.MIN_VALUE;
}
}

protected final void initJBED3(String s) {
if (!s.trim().isEmpty()) {
JBED3 = Short.parseShort(s);
} else {
JBED3 = Short.MIN_VALUE;
}
}

protected final void initJBED4(String s) {
if (!s.trim().isEmpty()) {
JBED4 = Short.parseShort(s);
} else {
JBED4 = Short.MIN_VALUE;
}
}

protected final void initJBED5(String s) {
if (!s.trim().isEmpty()) {
JBED5 = Short.parseShort(s);
} else {
JBED5 = Short.MIN_VALUE;
}
}

protected final void initJBEDP1(String s) {
if (!s.trim().isEmpty()) {
JBEDP1 = Short.parseShort(s);
} else {
JBEDP1 = Short.MIN_VALUE;
}
}

protected final void initJBEDQ(String s) {
if (!s.trim().isEmpty()) {
JBEDQ = Short.parseShort(s);
} else {
JBEDQ = Short.MIN_VALUE;
}
}

protected final void initJBGOLD(String s) {
if (!s.trim().isEmpty()) {
JBGOLD = Short.parseShort(s);
} else {
JBGOLD = Short.MIN_VALUE;
}
}

protected final void initJBHGS(String s) {
if (!s.trim().isEmpty()) {
JBHGS = Double.parseDouble(s);
} else {
JBHGS = Double.NaN;
}
}

protected final void initJBHHA(String s) {
if (!s.trim().isEmpty()) {
JBHHA = Short.parseShort(s);
} else {
JBHHA = Short.MIN_VALUE;
}
}

protected final void initJBHHB(String s) {
if (!s.trim().isEmpty()) {
JBHHB = Short.parseShort(s);
} else {
JBHHB = Short.MIN_VALUE;
}
}

protected final void initJBHHC(String s) {
if (!s.trim().isEmpty()) {
JBHHC = Short.parseShort(s);
} else {
JBHHC = Short.MIN_VALUE;
}
}

protected final void initJBHHD(String s) {
if (!s.trim().isEmpty()) {
JBHHD = Short.parseShort(s);
} else {
JBHHD = Short.MIN_VALUE;
}
}

protected final void initJBHHE(String s) {
if (!s.trim().isEmpty()) {
JBHHE = Short.parseShort(s);
} else {
JBHHE = Short.MIN_VALUE;
}
}

protected final void initJBHHF(String s) {
if (!s.trim().isEmpty()) {
JBHHF = Short.parseShort(s);
} else {
JBHHF = Short.MIN_VALUE;
}
}

protected final void initJBHRLK(String s) {
if (!s.trim().isEmpty()) {
JBHRLK = Short.parseShort(s);
} else {
JBHRLK = Short.MIN_VALUE;
}
}

protected final void initJBISCO_CC(String s) {
if (!s.trim().isEmpty()) {
JBISCO_CC = s;
}
}

protected final void initJBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JBNSSEC_DV = Short.parseShort(s);
} else {
JBNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJBOFFY_BH(String s) {
if (!s.trim().isEmpty()) {
JBOFFY_BH = Short.parseShort(s);
} else {
JBOFFY_BH = Short.MIN_VALUE;
}
}

protected final void initJBONUS(String s) {
if (!s.trim().isEmpty()) {
JBONUS = Short.parseShort(s);
} else {
JBONUS = Short.MIN_VALUE;
}
}

protected final void initJBOPPS(String s) {
if (!s.trim().isEmpty()) {
JBOPPS = Short.parseShort(s);
} else {
JBOPPS = Short.MIN_VALUE;
}
}

protected final void initJBPEN(String s) {
if (!s.trim().isEmpty()) {
JBPEN = Short.parseShort(s);
} else {
JBPEN = Short.MIN_VALUE;
}
}

protected final void initJBPENM(String s) {
if (!s.trim().isEmpty()) {
JBPENM = Short.parseShort(s);
} else {
JBPENM = Short.MIN_VALUE;
}
}

protected final void initJBPL_BH(String s) {
if (!s.trim().isEmpty()) {
JBPL_BH = Short.parseShort(s);
} else {
JBPL_BH = Short.MIN_VALUE;
}
}

protected final void initJBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JBRGSC_DV = Short.parseShort(s);
} else {
JBRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJBRISE(String s) {
if (!s.trim().isEmpty()) {
JBRISE = Short.parseShort(s);
} else {
JBRISE = Short.MIN_VALUE;
}
}

protected final void initJBSAT1(String s) {
if (!s.trim().isEmpty()) {
JBSAT1 = Short.parseShort(s);
} else {
JBSAT1 = Short.MIN_VALUE;
}
}

protected final void initJBSAT2(String s) {
if (!s.trim().isEmpty()) {
JBSAT2 = Short.parseShort(s);
} else {
JBSAT2 = Short.MIN_VALUE;
}
}

protected final void initJBSAT3(String s) {
if (!s.trim().isEmpty()) {
JBSAT3 = Short.parseShort(s);
} else {
JBSAT3 = Short.MIN_VALUE;
}
}

protected final void initJBSAT4(String s) {
if (!s.trim().isEmpty()) {
JBSAT4 = Short.parseShort(s);
} else {
JBSAT4 = Short.MIN_VALUE;
}
}

protected final void initJBSAT5(String s) {
if (!s.trim().isEmpty()) {
JBSAT5 = Short.parseShort(s);
} else {
JBSAT5 = Short.MIN_VALUE;
}
}

protected final void initJBSAT6(String s) {
if (!s.trim().isEmpty()) {
JBSAT6 = Short.parseShort(s);
} else {
JBSAT6 = Short.MIN_VALUE;
}
}

protected final void initJBSAT7(String s) {
if (!s.trim().isEmpty()) {
JBSAT7 = Short.parseShort(s);
} else {
JBSAT7 = Short.MIN_VALUE;
}
}

protected final void initJBSAT_BH(String s) {
if (!s.trim().isEmpty()) {
JBSAT_BH = Short.parseShort(s);
} else {
JBSAT_BH = Short.MIN_VALUE;
}
}

protected final void initJBSECT_BH(String s) {
if (!s.trim().isEmpty()) {
JBSECT_BH = Short.parseShort(s);
} else {
JBSECT_BH = Short.MIN_VALUE;
}
}

protected final void initJBSEC_BH(String s) {
if (!s.trim().isEmpty()) {
JBSEC_BH = Short.parseShort(s);
} else {
JBSEC_BH = Short.MIN_VALUE;
}
}

protected final void initJBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JBSEG_DV = Short.parseShort(s);
} else {
JBSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJBSIC(String s) {
if (!s.trim().isEmpty()) {
JBSIC = Short.parseShort(s);
} else {
JBSIC = Short.MIN_VALUE;
}
}

protected final void initJBSOC90LY_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC90LY_CC = Short.parseShort(s);
} else {
JBSOC90LY_CC = Short.MIN_VALUE;
}
}

protected final void initJBSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JBSOC90_CC = Short.parseShort(s);
} else {
JBSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJBSTATL(String s) {
if (!s.trim().isEmpty()) {
JBSTATL = Short.parseShort(s);
} else {
JBSTATL = Short.MIN_VALUE;
}
}

protected final void initJBSTATT(String s) {
if (!s.trim().isEmpty()) {
JBSTATT = Short.parseShort(s);
} else {
JBSTATT = Short.MIN_VALUE;
}
}

protected final void initJBTERM(String s) {
if (!s.trim().isEmpty()) {
JBTERM = Short.parseShort(s);
} else {
JBTERM = Short.MIN_VALUE;
}
}

protected final void initJBTIME(String s) {
if (!s.trim().isEmpty()) {
JBTIME = Short.parseShort(s);
} else {
JBTIME = Short.MIN_VALUE;
}
}

protected final void initJBTTWM(String s) {
if (!s.trim().isEmpty()) {
JBTTWM = Short.parseShort(s);
} else {
JBTTWM = Short.MIN_VALUE;
}
}

protected final void initJBUB(String s) {
if (!s.trim().isEmpty()) {
JBUB = Short.parseShort(s);
} else {
JBUB = Short.MIN_VALUE;
}
}

protected final void initJBUBY(String s) {
if (!s.trim().isEmpty()) {
JBUBY = Short.parseShort(s);
} else {
JBUBY = Short.MIN_VALUE;
}
}

protected final void initJLCSSF(String s) {
if (!s.trim().isEmpty()) {
JLCSSF = Double.parseDouble(s);
} else {
JLCSSF = Double.NaN;
}
}

protected final void initJLCSSM(String s) {
if (!s.trim().isEmpty()) {
JLCSSM = Double.parseDouble(s);
} else {
JLCSSM = Double.NaN;
}
}

protected final void initJLGOLD(String s) {
if (!s.trim().isEmpty()) {
JLGOLD = Short.parseShort(s);
} else {
JLGOLD = Short.MIN_VALUE;
}
}

protected final void initJLHGS(String s) {
if (!s.trim().isEmpty()) {
JLHGS = Double.parseDouble(s);
} else {
JLHGS = Double.NaN;
}
}

protected final void initJLID(String s) {
if (!s.trim().isEmpty()) {
JLID = Short.parseShort(s);
} else {
JLID = Short.MIN_VALUE;
}
}

protected final void initJLISCO_CC(String s) {
if (!s.trim().isEmpty()) {
JLISCO_CC = s;
}
}

protected final void initJLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
JLNSSEC_DV = Short.parseShort(s);
} else {
JLNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initJLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
JLRGSC_DV = Short.parseShort(s);
} else {
JLRGSC_DV = Short.MIN_VALUE;
}
}

protected final void initJLSEC(String s) {
if (!s.trim().isEmpty()) {
JLSEC = Short.parseShort(s);
} else {
JLSEC = Short.MIN_VALUE;
}
}

protected final void initJLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
JLSEG_DV = Short.parseShort(s);
} else {
JLSEG_DV = Short.MIN_VALUE;
}
}

protected final void initJLSIC(String s) {
if (!s.trim().isEmpty()) {
JLSIC = Short.parseShort(s);
} else {
JLSIC = Short.MIN_VALUE;
}
}

protected final void initJLSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JLSOC90_CC = Short.parseShort(s);
} else {
JLSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJLYID(String s) {
if (!s.trim().isEmpty()) {
JLYID = Short.parseShort(s);
} else {
JLYID = Short.MIN_VALUE;
}
}

protected final void initJNMNTH(String s) {
if (!s.trim().isEmpty()) {
JNMNTH = Short.parseShort(s);
} else {
JNMNTH = Short.MIN_VALUE;
}
}

protected final void initJNYEAR(String s) {
if (!s.trim().isEmpty()) {
JNYEAR = Short.parseShort(s);
} else {
JNYEAR = Short.MIN_VALUE;
}
}

protected final void initJSHRLK(String s) {
if (!s.trim().isEmpty()) {
JSHRLK = Short.parseShort(s);
} else {
JSHRLK = Short.MIN_VALUE;
}
}

protected final void initJSPAYG(String s) {
if (!s.trim().isEmpty()) {
JSPAYG = Double.parseDouble(s);
} else {
JSPAYG = Double.NaN;
}
}

protected final void initJSPAYGI(String s) {
if (!s.trim().isEmpty()) {
JSPAYGI = Short.parseShort(s);
} else {
JSPAYGI = Short.MIN_VALUE;
}
}

protected final void initJSPAYL(String s) {
if (!s.trim().isEmpty()) {
JSPAYL = Integer.parseInt(s);
} else {
JSPAYL = Integer.MIN_VALUE;
}
}

protected final void initJSPL_BH(String s) {
if (!s.trim().isEmpty()) {
JSPL_BH = Short.parseShort(s);
} else {
JSPL_BH = Short.MIN_VALUE;
}
}

protected final void initJSPRBY(String s) {
if (!s.trim().isEmpty()) {
JSPRBY = Short.parseShort(s);
} else {
JSPRBY = Short.MIN_VALUE;
}
}

protected final void initJSPREY(String s) {
if (!s.trim().isEmpty()) {
JSPREY = Short.parseShort(s);
} else {
JSPREY = Short.MIN_VALUE;
}
}

protected final void initJSPROF(String s) {
if (!s.trim().isEmpty()) {
JSPROF = Double.parseDouble(s);
} else {
JSPROF = Double.NaN;
}
}

protected final void initJSPROFI(String s) {
if (!s.trim().isEmpty()) {
JSPROFI = Short.parseShort(s);
} else {
JSPROFI = Short.MIN_VALUE;
}
}

protected final void initJSPYBM(String s) {
if (!s.trim().isEmpty()) {
JSPYBM = Short.parseShort(s);
} else {
JSPYBM = Short.MIN_VALUE;
}
}

protected final void initJSPYBY(String s) {
if (!s.trim().isEmpty()) {
JSPYBY = Short.parseShort(s);
} else {
JSPYBY = Short.MIN_VALUE;
}
}

protected final void initJSPYBY4(String s) {
if (!s.trim().isEmpty()) {
JSPYBY4 = Short.parseShort(s);
} else {
JSPYBY4 = Short.MIN_VALUE;
}
}

protected final void initJSPYEM(String s) {
if (!s.trim().isEmpty()) {
JSPYEM = Short.parseShort(s);
} else {
JSPYEM = Short.MIN_VALUE;
}
}

protected final void initJSPYEY(String s) {
if (!s.trim().isEmpty()) {
JSPYEY = Short.parseShort(s);
} else {
JSPYEY = Short.MIN_VALUE;
}
}

protected final void initJSPYEY4(String s) {
if (!s.trim().isEmpty()) {
JSPYEY4 = Short.parseShort(s);
} else {
JSPYEY4 = Short.MIN_VALUE;
}
}

protected final void initJSSAT(String s) {
if (!s.trim().isEmpty()) {
JSSAT = Short.parseShort(s);
} else {
JSSAT = Short.MIN_VALUE;
}
}

protected final void initJSSAT1(String s) {
if (!s.trim().isEmpty()) {
JSSAT1 = Short.parseShort(s);
} else {
JSSAT1 = Short.MIN_VALUE;
}
}

protected final void initJSSAT2(String s) {
if (!s.trim().isEmpty()) {
JSSAT2 = Short.parseShort(s);
} else {
JSSAT2 = Short.MIN_VALUE;
}
}

protected final void initJSSAT3(String s) {
if (!s.trim().isEmpty()) {
JSSAT3 = Short.parseShort(s);
} else {
JSSAT3 = Short.MIN_VALUE;
}
}

protected final void initJSSAT4(String s) {
if (!s.trim().isEmpty()) {
JSSAT4 = Short.parseShort(s);
} else {
JSSAT4 = Short.MIN_VALUE;
}
}

protected final void initJSSAT5(String s) {
if (!s.trim().isEmpty()) {
JSSAT5 = Short.parseShort(s);
} else {
JSSAT5 = Short.MIN_VALUE;
}
}

protected final void initJSTIME(String s) {
if (!s.trim().isEmpty()) {
JSTIME = Short.parseShort(s);
} else {
JSTIME = Short.MIN_VALUE;
}
}

protected final void initJSTTWM(String s) {
if (!s.trim().isEmpty()) {
JSTTWM = Short.parseShort(s);
} else {
JSTTWM = Short.MIN_VALUE;
}
}

protected final void initJSTYPE(String s) {
if (!s.trim().isEmpty()) {
JSTYPE = Short.parseShort(s);
} else {
JSTYPE = Short.MIN_VALUE;
}
}

protected final void initJTYID(String s) {
if (!s.trim().isEmpty()) {
JTYID = Short.parseShort(s);
} else {
JTYID = Short.MIN_VALUE;
}
}

protected final void initJUHRSL(String s) {
if (!s.trim().isEmpty()) {
JUHRSL = Short.parseShort(s);
} else {
JUHRSL = Short.MIN_VALUE;
}
}

protected final void initJUHRSX(String s) {
if (!s.trim().isEmpty()) {
JUHRSX = Short.parseShort(s);
} else {
JUHRSX = Short.MIN_VALUE;
}
}

protected final void initJULK1(String s) {
if (!s.trim().isEmpty()) {
JULK1 = Short.parseShort(s);
} else {
JULK1 = Short.MIN_VALUE;
}
}

protected final void initJULK4(String s) {
if (!s.trim().isEmpty()) {
JULK4 = Short.parseShort(s);
} else {
JULK4 = Short.MIN_VALUE;
}
}

protected final void initJUPAYL(String s) {
if (!s.trim().isEmpty()) {
JUPAYL = Short.parseShort(s);
} else {
JUPAYL = Short.MIN_VALUE;
}
}

protected final void initJUPAYX(String s) {
if (!s.trim().isEmpty()) {
JUPAYX = Short.parseShort(s);
} else {
JUPAYX = Short.MIN_VALUE;
}
}

protected final void initJUSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
JUSOC90_CC = Short.parseShort(s);
} else {
JUSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initJUSPEC(String s) {
if (!s.trim().isEmpty()) {
JUSPEC = Short.parseShort(s);
} else {
JUSPEC = Short.MIN_VALUE;
}
}

protected final void initLEWGHT(String s) {
if (!s.trim().isEmpty()) {
LEWGHT = Double.parseDouble(s);
} else {
LEWGHT = Double.NaN;
}
}

protected final void initLKMOVY(String s) {
if (!s.trim().isEmpty()) {
LKMOVY = Short.parseShort(s);
} else {
LKMOVY = Short.MIN_VALUE;
}
}

protected final void initLKNBRD(String s) {
if (!s.trim().isEmpty()) {
LKNBRD = Short.parseShort(s);
} else {
LKNBRD = Short.MIN_VALUE;
}
}

protected final void initLRWGHT(String s) {
if (!s.trim().isEmpty()) {
LRWGHT = Double.parseDouble(s);
} else {
LRWGHT = Double.NaN;
}
}

protected final void initMASTAT(String s) {
if (!s.trim().isEmpty()) {
MASTAT = Short.parseShort(s);
} else {
MASTAT = Short.MIN_VALUE;
}
}

protected final void initMEMORIG_BH(String s) {
if (!s.trim().isEmpty()) {
MEMORIG_BH = Short.parseShort(s);
} else {
MEMORIG_BH = Short.MIN_VALUE;
}
}

protected final void initMLCHM(String s) {
if (!s.trim().isEmpty()) {
MLCHM = Short.parseShort(s);
} else {
MLCHM = Short.MIN_VALUE;
}
}

protected final void initMLCHY(String s) {
if (!s.trim().isEmpty()) {
MLCHY = Short.parseShort(s);
} else {
MLCHY = Short.MIN_VALUE;
}
}

protected final void initMLCHY4(String s) {
if (!s.trim().isEmpty()) {
MLCHY4 = Short.parseShort(s);
} else {
MLCHY4 = Short.MIN_VALUE;
}
}

protected final void initMLSTAT_BH(String s) {
if (!s.trim().isEmpty()) {
MLSTAT_BH = Short.parseShort(s);
} else {
MLSTAT_BH = Short.MIN_VALUE;
}
}

protected final void initMNPID_BH(String s) {
if (!s.trim().isEmpty()) {
MNPID_BH = Integer.parseInt(s);
} else {
MNPID_BH = Integer.MIN_VALUE;
}
}

protected final void initMOVEST(String s) {
if (!s.trim().isEmpty()) {
MOVEST = Short.parseShort(s);
} else {
MOVEST = Short.MIN_VALUE;
}
}

protected final void initMOVJB(String s) {
if (!s.trim().isEmpty()) {
MOVJB = Short.parseShort(s);
} else {
MOVJB = Short.MIN_VALUE;
}
}

protected final void initMOVJBA(String s) {
if (!s.trim().isEmpty()) {
MOVJBA = Short.parseShort(s);
} else {
MOVJBA = Short.MIN_VALUE;
}
}

protected final void initMOVJBB(String s) {
if (!s.trim().isEmpty()) {
MOVJBB = Short.parseShort(s);
} else {
MOVJBB = Short.MIN_VALUE;
}
}

protected final void initMOVJBC(String s) {
if (!s.trim().isEmpty()) {
MOVJBC = Short.parseShort(s);
} else {
MOVJBC = Short.MIN_VALUE;
}
}

protected final void initMOVJBD(String s) {
if (!s.trim().isEmpty()) {
MOVJBD = Short.parseShort(s);
} else {
MOVJBD = Short.MIN_VALUE;
}
}

protected final void initMOVJBE(String s) {
if (!s.trim().isEmpty()) {
MOVJBE = Short.parseShort(s);
} else {
MOVJBE = Short.MIN_VALUE;
}
}

protected final void initMOVJBF(String s) {
if (!s.trim().isEmpty()) {
MOVJBF = Short.parseShort(s);
} else {
MOVJBF = Short.MIN_VALUE;
}
}

protected final void initMOVJBG(String s) {
if (!s.trim().isEmpty()) {
MOVJBG = Short.parseShort(s);
} else {
MOVJBG = Short.MIN_VALUE;
}
}

protected final void initMOVJBH(String s) {
if (!s.trim().isEmpty()) {
MOVJBH = Short.parseShort(s);
} else {
MOVJBH = Short.MIN_VALUE;
}
}

protected final void initMOVJBI(String s) {
if (!s.trim().isEmpty()) {
MOVJBI = Short.parseShort(s);
} else {
MOVJBI = Short.MIN_VALUE;
}
}

protected final void initMOVY1(String s) {
if (!s.trim().isEmpty()) {
MOVY1 = Short.parseShort(s);
} else {
MOVY1 = Short.MIN_VALUE;
}
}

protected final void initMOVY2(String s) {
if (!s.trim().isEmpty()) {
MOVY2 = Short.parseShort(s);
} else {
MOVY2 = Short.MIN_VALUE;
}
}

protected final void initMRJBOSS(String s) {
if (!s.trim().isEmpty()) {
MRJBOSS = Short.parseShort(s);
} else {
MRJBOSS = Short.MIN_VALUE;
}
}

protected final void initMRJCSSF(String s) {
if (!s.trim().isEmpty()) {
MRJCSSF = Double.parseDouble(s);
} else {
MRJCSSF = Double.NaN;
}
}

protected final void initMRJCSSM(String s) {
if (!s.trim().isEmpty()) {
MRJCSSM = Double.parseDouble(s);
} else {
MRJCSSM = Double.NaN;
}
}

protected final void initMRJEND(String s) {
if (!s.trim().isEmpty()) {
MRJEND = Short.parseShort(s);
} else {
MRJEND = Short.MIN_VALUE;
}
}

protected final void initMRJGOLD(String s) {
if (!s.trim().isEmpty()) {
MRJGOLD = Short.parseShort(s);
} else {
MRJGOLD = Short.MIN_VALUE;
}
}

protected final void initMRJHGS(String s) {
if (!s.trim().isEmpty()) {
MRJHGS = Double.parseDouble(s);
} else {
MRJHGS = Double.NaN;
}
}

protected final void initMRJISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
MRJISCO88_CC = Short.parseShort(s);
} else {
MRJISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initMRJISCO_CC(String s) {
if (!s.trim().isEmpty()) {
MRJISCO_CC = s;
}
}

protected final void initMRJMNGR(String s) {
if (!s.trim().isEmpty()) {
MRJMNGR = Short.parseShort(s);
} else {
MRJMNGR = Short.MIN_VALUE;
}
}

protected final void initMRJNSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
MRJNSSEC8_DV = Short.parseShort(s);
} else {
MRJNSSEC8_DV = Short.MIN_VALUE;
}
}

protected final void initMRJNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
MRJNSSEC_DV = Short.parseShort(s);
} else {
MRJNSSEC_DV = Short.MIN_VALUE;
}
}

protected final void initMRJRGSC(String s) {
if (!s.trim().isEmpty()) {
MRJRGSC = Short.parseShort(s);
} else {
MRJRGSC = Short.MIN_VALUE;
}
}

protected final void initMRJSEC(String s) {
if (!s.trim().isEmpty()) {
MRJSEC = Short.parseShort(s);
} else {
MRJSEC = Short.MIN_VALUE;
}
}

protected final void initMRJSEG(String s) {
if (!s.trim().isEmpty()) {
MRJSEG = Short.parseShort(s);
} else {
MRJSEG = Short.MIN_VALUE;
}
}

protected final void initMRJSEMP(String s) {
if (!s.trim().isEmpty()) {
MRJSEMP = Short.parseShort(s);
} else {
MRJSEMP = Short.MIN_VALUE;
}
}

protected final void initMRJSIC(String s) {
if (!s.trim().isEmpty()) {
MRJSIC = Short.parseShort(s);
} else {
MRJSIC = Short.MIN_VALUE;
}
}

protected final void initMRJSIZE(String s) {
if (!s.trim().isEmpty()) {
MRJSIZE = Short.parseShort(s);
} else {
MRJSIZE = Short.MIN_VALUE;
}
}

protected final void initMRJSOC(String s) {
if (!s.trim().isEmpty()) {
MRJSOC = Short.parseShort(s);
} else {
MRJSOC = Short.MIN_VALUE;
}
}

protected final void initMRSSCH(String s) {
if (!s.trim().isEmpty()) {
MRSSCH = Byte.parseByte(s);
} else {
MRSSCH = Byte.MIN_VALUE;
}
}

protected final void initMRSSCI(String s) {
if (!s.trim().isEmpty()) {
MRSSCI = Byte.parseByte(s);
} else {
MRSSCI = Byte.MIN_VALUE;
}
}

protected final void initMSTATSAM(String s) {
if (!s.trim().isEmpty()) {
MSTATSAM = Short.parseShort(s);
} else {
MSTATSAM = Short.MIN_VALUE;
}
}

protected final void initNAIDXHH_BH(String s) {
if (!s.trim().isEmpty()) {
NAIDXHH_BH = Short.parseShort(s);
} else {
NAIDXHH_BH = Short.MIN_VALUE;
}
}

protected final void initNCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
NCHILD_DV = Short.parseShort(s);
} else {
NCHILD_DV = Short.MIN_VALUE;
}
}

protected final void initNCIGS(String s) {
if (!s.trim().isEmpty()) {
NCIGS = Short.parseShort(s);
} else {
NCIGS = Short.MIN_VALUE;
}
}

protected final void initNEMST(String s) {
if (!s.trim().isEmpty()) {
NEMST = Short.parseShort(s);
} else {
NEMST = Short.MIN_VALUE;
}
}

protected final void initNEWHY(String s) {
if (!s.trim().isEmpty()) {
NEWHY = Short.parseShort(s);
} else {
NEWHY = Short.MIN_VALUE;
}
}

protected final void initNEYRJN(String s) {
if (!s.trim().isEmpty()) {
NEYRJN = Short.parseShort(s);
} else {
NEYRJN = Short.MIN_VALUE;
}
}

protected final void initNF1(String s) {
if (!s.trim().isEmpty()) {
NF1 = Short.parseShort(s);
} else {
NF1 = Short.MIN_VALUE;
}
}

protected final void initNJBNEW(String s) {
if (!s.trim().isEmpty()) {
NJBNEW = Short.parseShort(s);
} else {
NJBNEW = Short.MIN_VALUE;
}
}

protected final void initNJBS(String s) {
if (!s.trim().isEmpty()) {
NJBS = Short.parseShort(s);
} else {
NJBS = Short.MIN_VALUE;
}
}

protected final void initNJBSP(String s) {
if (!s.trim().isEmpty()) {
NJBSP = Short.parseShort(s);
} else {
NJBSP = Short.MIN_VALUE;
}
}

protected final void initNJBWKS(String s) {
if (!s.trim().isEmpty()) {
NJBWKS = Double.parseDouble(s);
} else {
NJBWKS = Double.NaN;
}
}

protected final void initNJISP(String s) {
if (!s.trim().isEmpty()) {
NJISP = Short.parseShort(s);
} else {
NJISP = Short.MIN_VALUE;
}
}

protected final void initNJIWKS(String s) {
if (!s.trim().isEmpty()) {
NJIWKS = Double.parseDouble(s);
} else {
NJIWKS = Double.NaN;
}
}

protected final void initNJUSP(String s) {
if (!s.trim().isEmpty()) {
NJUSP = Short.parseShort(s);
} else {
NJUSP = Short.MIN_VALUE;
}
}

protected final void initNJUWKS(String s) {
if (!s.trim().isEmpty()) {
NJUWKS = Double.parseDouble(s);
} else {
NJUWKS = Double.NaN;
}
}

protected final void initNORGA(String s) {
if (!s.trim().isEmpty()) {
NORGA = Byte.parseByte(s);
} else {
NORGA = Byte.MIN_VALUE;
}
}

protected final void initNORGM(String s) {
if (!s.trim().isEmpty()) {
NORGM = Byte.parseByte(s);
} else {
NORGM = Byte.MIN_VALUE;
}
}

protected final void initNQFEDA(String s) {
if (!s.trim().isEmpty()) {
NQFEDA = Byte.parseByte(s);
} else {
NQFEDA = Byte.MIN_VALUE;
}
}

protected final void initNQFEDB(String s) {
if (!s.trim().isEmpty()) {
NQFEDB = Byte.parseByte(s);
} else {
NQFEDB = Byte.MIN_VALUE;
}
}

protected final void initNQFEDC(String s) {
if (!s.trim().isEmpty()) {
NQFEDC = Byte.parseByte(s);
} else {
NQFEDC = Byte.MIN_VALUE;
}
}

protected final void initNQFEDD(String s) {
if (!s.trim().isEmpty()) {
NQFEDD = Short.parseShort(s);
} else {
NQFEDD = Short.MIN_VALUE;
}
}

protected final void initNQFEDE(String s) {
if (!s.trim().isEmpty()) {
NQFEDE = Short.parseShort(s);
} else {
NQFEDE = Short.MIN_VALUE;
}
}

protected final void initNQFEDF(String s) {
if (!s.trim().isEmpty()) {
NQFEDF = Byte.parseByte(s);
} else {
NQFEDF = Byte.MIN_VALUE;
}
}

protected final void initNQFEDG(String s) {
if (!s.trim().isEmpty()) {
NQFEDG = Byte.parseByte(s);
} else {
NQFEDG = Byte.MIN_VALUE;
}
}

protected final void initNQFEDH(String s) {
if (!s.trim().isEmpty()) {
NQFEDH = Byte.parseByte(s);
} else {
NQFEDH = Byte.MIN_VALUE;
}
}

protected final void initNQFEDI(String s) {
if (!s.trim().isEmpty()) {
NQFEDI = Byte.parseByte(s);
} else {
NQFEDI = Byte.MIN_VALUE;
}
}

protected final void initNQFEDJ(String s) {
if (!s.trim().isEmpty()) {
NQFEDJ = Byte.parseByte(s);
} else {
NQFEDJ = Byte.MIN_VALUE;
}
}

protected final void initNQFEDK(String s) {
if (!s.trim().isEmpty()) {
NQFEDK = Byte.parseByte(s);
} else {
NQFEDK = Byte.MIN_VALUE;
}
}

protected final void initNQFEDL(String s) {
if (!s.trim().isEmpty()) {
NQFEDL = Short.parseShort(s);
} else {
NQFEDL = Short.MIN_VALUE;
}
}

protected final void initNQFEDM(String s) {
if (!s.trim().isEmpty()) {
NQFEDM = Byte.parseByte(s);
} else {
NQFEDM = Byte.MIN_VALUE;
}
}

protected final void initNQFEDN(String s) {
if (!s.trim().isEmpty()) {
NQFEDN = Short.parseShort(s);
} else {
NQFEDN = Short.MIN_VALUE;
}
}

protected final void initNQFEDO(String s) {
if (!s.trim().isEmpty()) {
NQFEDO = Byte.parseByte(s);
} else {
NQFEDO = Byte.MIN_VALUE;
}
}

protected final void initNQFEDP(String s) {
if (!s.trim().isEmpty()) {
NQFEDP = Byte.parseByte(s);
} else {
NQFEDP = Byte.MIN_VALUE;
}
}

protected final void initNQFEDQ(String s) {
if (!s.trim().isEmpty()) {
NQFEDQ = Byte.parseByte(s);
} else {
NQFEDQ = Byte.MIN_VALUE;
}
}

protected final void initNQFEDR(String s) {
if (!s.trim().isEmpty()) {
NQFEDR = Byte.parseByte(s);
} else {
NQFEDR = Byte.MIN_VALUE;
}
}

protected final void initNQFEDS(String s) {
if (!s.trim().isEmpty()) {
NQFEDS = Short.parseShort(s);
} else {
NQFEDS = Short.MIN_VALUE;
}
}

protected final void initNQFEXA(String s) {
if (!s.trim().isEmpty()) {
NQFEXA = Short.parseShort(s);
} else {
NQFEXA = Short.MIN_VALUE;
}
}

protected final void initNQFEXB(String s) {
if (!s.trim().isEmpty()) {
NQFEXB = Short.parseShort(s);
} else {
NQFEXB = Short.MIN_VALUE;
}
}

protected final void initNQFEXC(String s) {
if (!s.trim().isEmpty()) {
NQFEXC = Short.parseShort(s);
} else {
NQFEXC = Short.MIN_VALUE;
}
}

protected final void initNQFEXE(String s) {
if (!s.trim().isEmpty()) {
NQFEXE = Byte.parseByte(s);
} else {
NQFEXE = Byte.MIN_VALUE;
}
}

protected final void initNQFEXF(String s) {
if (!s.trim().isEmpty()) {
NQFEXF = Byte.parseByte(s);
} else {
NQFEXF = Byte.MIN_VALUE;
}
}

protected final void initNQFEXG(String s) {
if (!s.trim().isEmpty()) {
NQFEXG = Byte.parseByte(s);
} else {
NQFEXG = Byte.MIN_VALUE;
}
}

protected final void initNQFEXH(String s) {
if (!s.trim().isEmpty()) {
NQFEXH = Byte.parseByte(s);
} else {
NQFEXH = Byte.MIN_VALUE;
}
}

protected final void initNQFEXI(String s) {
if (!s.trim().isEmpty()) {
NQFEXI = Byte.parseByte(s);
} else {
NQFEXI = Byte.MIN_VALUE;
}
}

protected final void initNQFEXJ(String s) {
if (!s.trim().isEmpty()) {
NQFEXJ = Byte.parseByte(s);
} else {
NQFEXJ = Byte.MIN_VALUE;
}
}

protected final void initNQFEXK(String s) {
if (!s.trim().isEmpty()) {
NQFEXK = Byte.parseByte(s);
} else {
NQFEXK = Byte.MIN_VALUE;
}
}

protected final void initNVEST(String s) {
if (!s.trim().isEmpty()) {
NVEST = Byte.parseByte(s);
} else {
NVEST = Byte.MIN_VALUE;
}
}

protected final void initNVESTA(String s) {
if (!s.trim().isEmpty()) {
NVESTA = Byte.parseByte(s);
} else {
NVESTA = Byte.MIN_VALUE;
}
}

protected final void initNVESTB(String s) {
if (!s.trim().isEmpty()) {
NVESTB = Byte.parseByte(s);
} else {
NVESTB = Byte.MIN_VALUE;
}
}

protected final void initNVESTC(String s) {
if (!s.trim().isEmpty()) {
NVESTC = Byte.parseByte(s);
} else {
NVESTC = Byte.MIN_VALUE;
}
}

protected final void initNVESTC1(String s) {
if (!s.trim().isEmpty()) {
NVESTC1 = Byte.parseByte(s);
} else {
NVESTC1 = Byte.MIN_VALUE;
}
}

protected final void initNVESTC2(String s) {
if (!s.trim().isEmpty()) {
NVESTC2 = Byte.parseByte(s);
} else {
NVESTC2 = Byte.MIN_VALUE;
}
}

protected final void initNVESTC3(String s) {
if (!s.trim().isEmpty()) {
NVESTC3 = Byte.parseByte(s);
} else {
NVESTC3 = Byte.MIN_VALUE;
}
}

protected final void initNVESTC4(String s) {
if (!s.trim().isEmpty()) {
NVESTC4 = Byte.parseByte(s);
} else {
NVESTC4 = Byte.MIN_VALUE;
}
}

protected final void initNVESTD(String s) {
if (!s.trim().isEmpty()) {
NVESTD = Byte.parseByte(s);
} else {
NVESTD = Byte.MIN_VALUE;
}
}

protected final void initNVESTE(String s) {
if (!s.trim().isEmpty()) {
NVESTE = Byte.parseByte(s);
} else {
NVESTE = Byte.MIN_VALUE;
}
}

protected final void initNVESTF(String s) {
if (!s.trim().isEmpty()) {
NVESTF = Byte.parseByte(s);
} else {
NVESTF = Byte.MIN_VALUE;
}
}

protected final void initNVESTG(String s) {
if (!s.trim().isEmpty()) {
NVESTG = Byte.parseByte(s);
} else {
NVESTG = Byte.MIN_VALUE;
}
}

protected final void initNVESTJ(String s) {
if (!s.trim().isEmpty()) {
NVESTJ = Byte.parseByte(s);
} else {
NVESTJ = Byte.MIN_VALUE;
}
}

protected final void initNVESTK(String s) {
if (!s.trim().isEmpty()) {
NVESTK = Integer.parseInt(s);
} else {
NVESTK = Integer.MIN_VALUE;
}
}

protected final void initNVESTL(String s) {
if (!s.trim().isEmpty()) {
NVESTL = Byte.parseByte(s);
} else {
NVESTL = Byte.MIN_VALUE;
}
}

protected final void initNVESTN(String s) {
if (!s.trim().isEmpty()) {
NVESTN = Byte.parseByte(s);
} else {
NVESTN = Byte.MIN_VALUE;
}
}

protected final void initNXDTS(String s) {
if (!s.trim().isEmpty()) {
NXDTS = Short.parseShort(s);
} else {
NXDTS = Short.MIN_VALUE;
}
}

protected final void initOPCHD1(String s) {
if (!s.trim().isEmpty()) {
OPCHD1 = Byte.parseByte(s);
} else {
OPCHD1 = Byte.MIN_VALUE;
}
}

protected final void initOPCHD2(String s) {
if (!s.trim().isEmpty()) {
OPCHD2 = Byte.parseByte(s);
} else {
OPCHD2 = Byte.MIN_VALUE;
}
}

protected final void initOPCHD3(String s) {
if (!s.trim().isEmpty()) {
OPCHD3 = Byte.parseByte(s);
} else {
OPCHD3 = Byte.MIN_VALUE;
}
}

protected final void initOPCHD4(String s) {
if (!s.trim().isEmpty()) {
OPCHD4 = Byte.parseByte(s);
} else {
OPCHD4 = Byte.MIN_VALUE;
}
}

protected final void initOPFAMA(String s) {
if (!s.trim().isEmpty()) {
OPFAMA = Byte.parseByte(s);
} else {
OPFAMA = Byte.MIN_VALUE;
}
}

protected final void initOPFAMB(String s) {
if (!s.trim().isEmpty()) {
OPFAMB = Byte.parseByte(s);
} else {
OPFAMB = Byte.MIN_VALUE;
}
}

protected final void initOPFAMC(String s) {
if (!s.trim().isEmpty()) {
OPFAMC = Byte.parseByte(s);
} else {
OPFAMC = Byte.MIN_VALUE;
}
}

protected final void initOPFAMD(String s) {
if (!s.trim().isEmpty()) {
OPFAMD = Byte.parseByte(s);
} else {
OPFAMD = Byte.MIN_VALUE;
}
}

protected final void initOPFAME(String s) {
if (!s.trim().isEmpty()) {
OPFAME = Byte.parseByte(s);
} else {
OPFAME = Byte.MIN_VALUE;
}
}

protected final void initOPFAMF(String s) {
if (!s.trim().isEmpty()) {
OPFAMF = Byte.parseByte(s);
} else {
OPFAMF = Byte.MIN_VALUE;
}
}

protected final void initOPFAMG(String s) {
if (!s.trim().isEmpty()) {
OPFAMG = Byte.parseByte(s);
} else {
OPFAMG = Byte.MIN_VALUE;
}
}

protected final void initOPFAMH(String s) {
if (!s.trim().isEmpty()) {
OPFAMH = Byte.parseByte(s);
} else {
OPFAMH = Byte.MIN_VALUE;
}
}

protected final void initOPFAMI(String s) {
if (!s.trim().isEmpty()) {
OPFAMI = Byte.parseByte(s);
} else {
OPFAMI = Byte.MIN_VALUE;
}
}

protected final void initOPHLA(String s) {
if (!s.trim().isEmpty()) {
OPHLA = Byte.parseByte(s);
} else {
OPHLA = Byte.MIN_VALUE;
}
}

protected final void initOPHLB(String s) {
if (!s.trim().isEmpty()) {
OPHLB = Byte.parseByte(s);
} else {
OPHLB = Byte.MIN_VALUE;
}
}

protected final void initOPHLC(String s) {
if (!s.trim().isEmpty()) {
OPHLC = Byte.parseByte(s);
} else {
OPHLC = Byte.MIN_VALUE;
}
}

protected final void initOPPOL1(String s) {
if (!s.trim().isEmpty()) {
OPPOL1 = Byte.parseByte(s);
} else {
OPPOL1 = Byte.MIN_VALUE;
}
}

protected final void initOPPOL2(String s) {
if (!s.trim().isEmpty()) {
OPPOL2 = Byte.parseByte(s);
} else {
OPPOL2 = Byte.MIN_VALUE;
}
}

protected final void initOPPOL3(String s) {
if (!s.trim().isEmpty()) {
OPPOL3 = Byte.parseByte(s);
} else {
OPPOL3 = Byte.MIN_VALUE;
}
}

protected final void initOPPOL4(String s) {
if (!s.trim().isEmpty()) {
OPPOL4 = Byte.parseByte(s);
} else {
OPPOL4 = Byte.MIN_VALUE;
}
}

protected final void initOPRLG2(String s) {
if (!s.trim().isEmpty()) {
OPRLG2 = Byte.parseByte(s);
} else {
OPRLG2 = Byte.MIN_VALUE;
}
}

protected final void initOPSOCA(String s) {
if (!s.trim().isEmpty()) {
OPSOCA = Byte.parseByte(s);
} else {
OPSOCA = Byte.MIN_VALUE;
}
}

protected final void initOPSOCB(String s) {
if (!s.trim().isEmpty()) {
OPSOCB = Byte.parseByte(s);
} else {
OPSOCB = Byte.MIN_VALUE;
}
}

protected final void initOPSOCC(String s) {
if (!s.trim().isEmpty()) {
OPSOCC = Byte.parseByte(s);
} else {
OPSOCC = Byte.MIN_VALUE;
}
}

protected final void initOPSOCD(String s) {
if (!s.trim().isEmpty()) {
OPSOCD = Byte.parseByte(s);
} else {
OPSOCD = Byte.MIN_VALUE;
}
}

protected final void initOPSOCE(String s) {
if (!s.trim().isEmpty()) {
OPSOCE = Byte.parseByte(s);
} else {
OPSOCE = Byte.MIN_VALUE;
}
}

protected final void initOPSOCF(String s) {
if (!s.trim().isEmpty()) {
OPSOCF = Byte.parseByte(s);
} else {
OPSOCF = Byte.MIN_VALUE;
}
}

protected final void initOPXPCR(String s) {
if (!s.trim().isEmpty()) {
OPXPCR = Byte.parseByte(s);
} else {
OPXPCR = Byte.MIN_VALUE;
}
}

protected final void initOPXPSV(String s) {
if (!s.trim().isEmpty()) {
OPXPSV = Byte.parseByte(s);
} else {
OPXPSV = Byte.MIN_VALUE;
}
}

protected final void initORG(String s) {
if (!s.trim().isEmpty()) {
ORG = Byte.parseByte(s);
} else {
ORG = Byte.MIN_VALUE;
}
}

protected final void initORGA(String s) {
if (!s.trim().isEmpty()) {
ORGA = Byte.parseByte(s);
} else {
ORGA = Byte.MIN_VALUE;
}
}

protected final void initORGA1(String s) {
if (!s.trim().isEmpty()) {
ORGA1 = Byte.parseByte(s);
} else {
ORGA1 = Byte.MIN_VALUE;
}
}

protected final void initORGA10(String s) {
if (!s.trim().isEmpty()) {
ORGA10 = Byte.parseByte(s);
} else {
ORGA10 = Byte.MIN_VALUE;
}
}

protected final void initORGA11(String s) {
if (!s.trim().isEmpty()) {
ORGA11 = Byte.parseByte(s);
} else {
ORGA11 = Byte.MIN_VALUE;
}
}

protected final void initORGA12(String s) {
if (!s.trim().isEmpty()) {
ORGA12 = Byte.parseByte(s);
} else {
ORGA12 = Byte.MIN_VALUE;
}
}

protected final void initORGA13(String s) {
if (!s.trim().isEmpty()) {
ORGA13 = Byte.parseByte(s);
} else {
ORGA13 = Byte.MIN_VALUE;
}
}

protected final void initORGA14(String s) {
if (!s.trim().isEmpty()) {
ORGA14 = Byte.parseByte(s);
} else {
ORGA14 = Byte.MIN_VALUE;
}
}

protected final void initORGA15(String s) {
if (!s.trim().isEmpty()) {
ORGA15 = Byte.parseByte(s);
} else {
ORGA15 = Byte.MIN_VALUE;
}
}

protected final void initORGA16(String s) {
if (!s.trim().isEmpty()) {
ORGA16 = Byte.parseByte(s);
} else {
ORGA16 = Byte.MIN_VALUE;
}
}

protected final void initORGA2(String s) {
if (!s.trim().isEmpty()) {
ORGA2 = Byte.parseByte(s);
} else {
ORGA2 = Byte.MIN_VALUE;
}
}

protected final void initORGA3(String s) {
if (!s.trim().isEmpty()) {
ORGA3 = Byte.parseByte(s);
} else {
ORGA3 = Byte.MIN_VALUE;
}
}

protected final void initORGA4(String s) {
if (!s.trim().isEmpty()) {
ORGA4 = Byte.parseByte(s);
} else {
ORGA4 = Byte.MIN_VALUE;
}
}

protected final void initORGA5(String s) {
if (!s.trim().isEmpty()) {
ORGA5 = Byte.parseByte(s);
} else {
ORGA5 = Byte.MIN_VALUE;
}
}

protected final void initORGA6(String s) {
if (!s.trim().isEmpty()) {
ORGA6 = Byte.parseByte(s);
} else {
ORGA6 = Byte.MIN_VALUE;
}
}

protected final void initORGA7(String s) {
if (!s.trim().isEmpty()) {
ORGA7 = Byte.parseByte(s);
} else {
ORGA7 = Byte.MIN_VALUE;
}
}

protected final void initORGA8(String s) {
if (!s.trim().isEmpty()) {
ORGA8 = Byte.parseByte(s);
} else {
ORGA8 = Byte.MIN_VALUE;
}
}

protected final void initORGA9(String s) {
if (!s.trim().isEmpty()) {
ORGA9 = Byte.parseByte(s);
} else {
ORGA9 = Byte.MIN_VALUE;
}
}

protected final void initORGM1(String s) {
if (!s.trim().isEmpty()) {
ORGM1 = Byte.parseByte(s);
} else {
ORGM1 = Byte.MIN_VALUE;
}
}

protected final void initORGM10(String s) {
if (!s.trim().isEmpty()) {
ORGM10 = Byte.parseByte(s);
} else {
ORGM10 = Byte.MIN_VALUE;
}
}

protected final void initORGM11(String s) {
if (!s.trim().isEmpty()) {
ORGM11 = Byte.parseByte(s);
} else {
ORGM11 = Byte.MIN_VALUE;
}
}

protected final void initORGM12(String s) {
if (!s.trim().isEmpty()) {
ORGM12 = Byte.parseByte(s);
} else {
ORGM12 = Byte.MIN_VALUE;
}
}

protected final void initORGM13(String s) {
if (!s.trim().isEmpty()) {
ORGM13 = Byte.parseByte(s);
} else {
ORGM13 = Byte.MIN_VALUE;
}
}

protected final void initORGM14(String s) {
if (!s.trim().isEmpty()) {
ORGM14 = Byte.parseByte(s);
} else {
ORGM14 = Byte.MIN_VALUE;
}
}

protected final void initORGM15(String s) {
if (!s.trim().isEmpty()) {
ORGM15 = Byte.parseByte(s);
} else {
ORGM15 = Byte.MIN_VALUE;
}
}

protected final void initORGM16(String s) {
if (!s.trim().isEmpty()) {
ORGM16 = Byte.parseByte(s);
} else {
ORGM16 = Byte.MIN_VALUE;
}
}

protected final void initORGM2(String s) {
if (!s.trim().isEmpty()) {
ORGM2 = Byte.parseByte(s);
} else {
ORGM2 = Byte.MIN_VALUE;
}
}

protected final void initORGM3(String s) {
if (!s.trim().isEmpty()) {
ORGM3 = Byte.parseByte(s);
} else {
ORGM3 = Byte.MIN_VALUE;
}
}

protected final void initORGM4(String s) {
if (!s.trim().isEmpty()) {
ORGM4 = Byte.parseByte(s);
} else {
ORGM4 = Byte.MIN_VALUE;
}
}

protected final void initORGM5(String s) {
if (!s.trim().isEmpty()) {
ORGM5 = Byte.parseByte(s);
} else {
ORGM5 = Byte.MIN_VALUE;
}
}

protected final void initORGM6(String s) {
if (!s.trim().isEmpty()) {
ORGM6 = Byte.parseByte(s);
} else {
ORGM6 = Byte.MIN_VALUE;
}
}

protected final void initORGM7(String s) {
if (!s.trim().isEmpty()) {
ORGM7 = Byte.parseByte(s);
} else {
ORGM7 = Byte.MIN_VALUE;
}
}

protected final void initORGM8(String s) {
if (!s.trim().isEmpty()) {
ORGM8 = Byte.parseByte(s);
} else {
ORGM8 = Byte.MIN_VALUE;
}
}

protected final void initORGM9(String s) {
if (!s.trim().isEmpty()) {
ORGM9 = Byte.parseByte(s);
} else {
ORGM9 = Byte.MIN_VALUE;
}
}

protected final void initPAYDF1(String s) {
if (!s.trim().isEmpty()) {
PAYDF1 = Short.parseShort(s);
} else {
PAYDF1 = Short.MIN_VALUE;
}
}

protected final void initPAYDF2(String s) {
if (!s.trim().isEmpty()) {
PAYDF2 = Short.parseShort(s);
} else {
PAYDF2 = Short.MIN_VALUE;
}
}

protected final void initPAYDF3(String s) {
if (!s.trim().isEmpty()) {
PAYDF3 = Short.parseShort(s);
} else {
PAYDF3 = Short.MIN_VALUE;
}
}

protected final void initPAYDF4(String s) {
if (!s.trim().isEmpty()) {
PAYDF4 = Short.parseShort(s);
} else {
PAYDF4 = Short.MIN_VALUE;
}
}

protected final void initPAYDF5(String s) {
if (!s.trim().isEmpty()) {
PAYDF5 = Short.parseShort(s);
} else {
PAYDF5 = Short.MIN_VALUE;
}
}

protected final void initPAYDF6(String s) {
if (!s.trim().isEmpty()) {
PAYDF6 = Short.parseShort(s);
} else {
PAYDF6 = Short.MIN_VALUE;
}
}

protected final void initPAYDF7(String s) {
if (!s.trim().isEmpty()) {
PAYDF7 = Short.parseShort(s);
} else {
PAYDF7 = Short.MIN_VALUE;
}
}

protected final void initPAYDF8(String s) {
if (!s.trim().isEmpty()) {
PAYDF8 = Short.parseShort(s);
} else {
PAYDF8 = Short.MIN_VALUE;
}
}

protected final void initPAYGLI(String s) {
if (!s.trim().isEmpty()) {
PAYGLI = Short.parseShort(s);
} else {
PAYGLI = Short.MIN_VALUE;
}
}

protected final void initPAYGLY(String s) {
if (!s.trim().isEmpty()) {
PAYGLY = Double.parseDouble(s);
} else {
PAYGLY = Double.NaN;
}
}

protected final void initPAYGTI(String s) {
if (!s.trim().isEmpty()) {
PAYGTI = Short.parseShort(s);
} else {
PAYGTI = Short.MIN_VALUE;
}
}

protected final void initPAYGTY(String s) {
if (!s.trim().isEmpty()) {
PAYGTY = Double.parseDouble(s);
} else {
PAYGTY = Double.NaN;
}
}

protected final void initPAYGW(String s) {
if (!s.trim().isEmpty()) {
PAYGW = Double.parseDouble(s);
} else {
PAYGW = Double.NaN;
}
}

protected final void initPAYG_DV(String s) {
if (!s.trim().isEmpty()) {
PAYG_DV = Double.parseDouble(s);
} else {
PAYG_DV = Double.NaN;
}
}

protected final void initPAYLY(String s) {
if (!s.trim().isEmpty()) {
PAYLY = Integer.parseInt(s);
} else {
PAYLY = Integer.MIN_VALUE;
}
}

protected final void initPAYLYG(String s) {
if (!s.trim().isEmpty()) {
PAYLYG = Short.parseShort(s);
} else {
PAYLYG = Short.MIN_VALUE;
}
}

protected final void initPAYLYW(String s) {
if (!s.trim().isEmpty()) {
PAYLYW = Double.parseDouble(s);
} else {
PAYLYW = Double.NaN;
}
}

protected final void initPAYNLI(String s) {
if (!s.trim().isEmpty()) {
PAYNLI = Short.parseShort(s);
} else {
PAYNLI = Short.MIN_VALUE;
}
}

protected final void initPAYNLY(String s) {
if (!s.trim().isEmpty()) {
PAYNLY = Double.parseDouble(s);
} else {
PAYNLY = Double.NaN;
}
}

protected final void initPAYNTI(String s) {
if (!s.trim().isEmpty()) {
PAYNTI = Short.parseShort(s);
} else {
PAYNTI = Short.MIN_VALUE;
}
}

protected final void initPAYNTY(String s) {
if (!s.trim().isEmpty()) {
PAYNTY = Double.parseDouble(s);
} else {
PAYNTY = Double.NaN;
}
}

protected final void initPAYNW(String s) {
if (!s.trim().isEmpty()) {
PAYNW = Double.parseDouble(s);
} else {
PAYNW = Double.NaN;
}
}

protected final void initPAYS(String s) {
if (!s.trim().isEmpty()) {
PAYS = Integer.parseInt(s);
} else {
PAYS = Integer.MIN_VALUE;
}
}

protected final void initPAYSG(String s) {
if (!s.trim().isEmpty()) {
PAYSG = Short.parseShort(s);
} else {
PAYSG = Short.MIN_VALUE;
}
}

protected final void initPAYSLP(String s) {
if (!s.trim().isEmpty()) {
PAYSLP = Short.parseShort(s);
} else {
PAYSLP = Short.MIN_VALUE;
}
}

protected final void initPAYSW(String s) {
if (!s.trim().isEmpty()) {
PAYSW = Double.parseDouble(s);
} else {
PAYSW = Double.NaN;
}
}

protected final void initPAYUW(String s) {
if (!s.trim().isEmpty()) {
PAYUW = Double.parseDouble(s);
} else {
PAYUW = Double.NaN;
}
}

protected final void initPENADD(String s) {
if (!s.trim().isEmpty()) {
PENADD = Short.parseShort(s);
} else {
PENADD = Short.MIN_VALUE;
}
}

protected final void initPENADV(String s) {
if (!s.trim().isEmpty()) {
PENADV = Short.parseShort(s);
} else {
PENADV = Short.MIN_VALUE;
}
}

protected final void initPENADW(String s) {
if (!s.trim().isEmpty()) {
PENADW = Double.parseDouble(s);
} else {
PENADW = Double.NaN;
}
}

protected final void initPENB4(String s) {
if (!s.trim().isEmpty()) {
PENB4 = Short.parseShort(s);
} else {
PENB4 = Short.MIN_VALUE;
}
}

protected final void initPENB4V(String s) {
if (!s.trim().isEmpty()) {
PENB4V = Short.parseShort(s);
} else {
PENB4V = Short.MIN_VALUE;
}
}

protected final void initPENB4W(String s) {
if (!s.trim().isEmpty()) {
PENB4W = Double.parseDouble(s);
} else {
PENB4W = Double.NaN;
}
}

protected final void initPENB4Y4(String s) {
if (!s.trim().isEmpty()) {
PENB4Y4 = Short.parseShort(s);
} else {
PENB4Y4 = Short.MIN_VALUE;
}
}

protected final void initPENB4YR(String s) {
if (!s.trim().isEmpty()) {
PENB4YR = Short.parseShort(s);
} else {
PENB4YR = Short.MIN_VALUE;
}
}

protected final void initPENYR(String s) {
if (!s.trim().isEmpty()) {
PENYR = Short.parseShort(s);
} else {
PENYR = Short.MIN_VALUE;
}
}

protected final void initPENYR4(String s) {
if (!s.trim().isEmpty()) {
PENYR4 = Short.parseShort(s);
} else {
PENYR4 = Short.MIN_VALUE;
}
}

protected final void initPID(String s) {
if (!s.trim().isEmpty()) {
PID = Integer.parseInt(s);
} else {
PID = Integer.MIN_VALUE;
}
}

protected final void initPLBORNC_CC(String s) {
if (!s.trim().isEmpty()) {
PLBORNC_CC = Short.parseShort(s);
} else {
PLBORNC_CC = Short.MIN_VALUE;
}
}

protected final void initPLNEW(String s) {
if (!s.trim().isEmpty()) {
PLNEW = Short.parseShort(s);
} else {
PLNEW = Short.MIN_VALUE;
}
}

protected final void initPLNOWM(String s) {
if (!s.trim().isEmpty()) {
PLNOWM = Short.parseShort(s);
} else {
PLNOWM = Short.MIN_VALUE;
}
}

protected final void initPLNOWY4(String s) {
if (!s.trim().isEmpty()) {
PLNOWY4 = Short.parseShort(s);
} else {
PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initPPLEVR(String s) {
if (!s.trim().isEmpty()) {
PPLEVR = Short.parseShort(s);
} else {
PPLEVR = Short.MIN_VALUE;
}
}

protected final void initPPPEN(String s) {
if (!s.trim().isEmpty()) {
PPPEN = Short.parseShort(s);
} else {
PPPEN = Short.MIN_VALUE;
}
}

protected final void initPREARNI(String s) {
if (!s.trim().isEmpty()) {
PREARNI = Short.parseShort(s);
} else {
PREARNI = Short.MIN_VALUE;
}
}

protected final void initPREARN_BH(String s) {
if (!s.trim().isEmpty()) {
PREARN_BH = Short.parseShort(s);
} else {
PREARN_BH = Short.MIN_VALUE;
}
}

protected final void initPRESBGM(String s) {
if (!s.trim().isEmpty()) {
PRESBGM = Short.parseShort(s);
} else {
PRESBGM = Short.MIN_VALUE;
}
}

protected final void initPRESBGY(String s) {
if (!s.trim().isEmpty()) {
PRESBGY = Short.parseShort(s);
} else {
PRESBGY = Short.MIN_VALUE;
}
}

protected final void initPRESBY4(String s) {
if (!s.trim().isEmpty()) {
PRESBY4 = Short.parseShort(s);
} else {
PRESBY4 = Short.MIN_VALUE;
}
}

protected final void initPRESLY(String s) {
if (!s.trim().isEmpty()) {
PRESLY = Short.parseShort(s);
} else {
PRESLY = Short.MIN_VALUE;
}
}

protected final void initPRF101(String s) {
if (!s.trim().isEmpty()) {
PRF101 = Short.parseShort(s);
} else {
PRF101 = Short.MIN_VALUE;
}
}

protected final void initPRF102(String s) {
if (!s.trim().isEmpty()) {
PRF102 = Short.parseShort(s);
} else {
PRF102 = Short.MIN_VALUE;
}
}

protected final void initPRF116(String s) {
if (!s.trim().isEmpty()) {
PRF116 = Short.parseShort(s);
} else {
PRF116 = Short.MIN_VALUE;
}
}

protected final void initPRF125(String s) {
if (!s.trim().isEmpty()) {
PRF125 = Short.parseShort(s);
} else {
PRF125 = Short.MIN_VALUE;
}
}

protected final void initPRF131(String s) {
if (!s.trim().isEmpty()) {
PRF131 = Short.parseShort(s);
} else {
PRF131 = Short.MIN_VALUE;
}
}

protected final void initPRF134(String s) {
if (!s.trim().isEmpty()) {
PRF134 = Byte.parseByte(s);
} else {
PRF134 = Byte.MIN_VALUE;
}
}

protected final void initPRF135(String s) {
if (!s.trim().isEmpty()) {
PRF135 = Short.parseShort(s);
} else {
PRF135 = Short.MIN_VALUE;
}
}

protected final void initPRF137(String s) {
if (!s.trim().isEmpty()) {
PRF137 = Byte.parseByte(s);
} else {
PRF137 = Byte.MIN_VALUE;
}
}

protected final void initPRF139(String s) {
if (!s.trim().isEmpty()) {
PRF139 = Short.parseShort(s);
} else {
PRF139 = Short.MIN_VALUE;
}
}

protected final void initPRF141(String s) {
if (!s.trim().isEmpty()) {
PRF141 = Short.parseShort(s);
} else {
PRF141 = Short.MIN_VALUE;
}
}

protected final void initPRFEHQ(String s) {
if (!s.trim().isEmpty()) {
PRFEHQ = Short.parseShort(s);
} else {
PRFEHQ = Short.MIN_VALUE;
}
}

protected final void initPRFIRN(String s) {
if (!s.trim().isEmpty()) {
PRFIRN = Byte.parseByte(s);
} else {
PRFIRN = Byte.MIN_VALUE;
}
}

protected final void initPRFITBI(String s) {
if (!s.trim().isEmpty()) {
PRFITBI = Short.parseShort(s);
} else {
PRFITBI = Short.MIN_VALUE;
}
}

protected final void initPRFITB_BH(String s) {
if (!s.trim().isEmpty()) {
PRFITB_BH = Short.parseShort(s);
} else {
PRFITB_BH = Short.MIN_VALUE;
}
}

protected final void initPRJBBY4(String s) {
if (!s.trim().isEmpty()) {
PRJBBY4 = Short.parseShort(s);
} else {
PRJBBY4 = Short.MIN_VALUE;
}
}

protected final void initPRJBFT(String s) {
if (!s.trim().isEmpty()) {
PRJBFT = Byte.parseByte(s);
} else {
PRJBFT = Byte.MIN_VALUE;
}
}

protected final void initPRJBLY(String s) {
if (!s.trim().isEmpty()) {
PRJBLY = Short.parseShort(s);
} else {
PRJBLY = Short.MIN_VALUE;
}
}

protected final void initPRRS2I(String s) {
if (!s.trim().isEmpty()) {
PRRS2I = Short.parseShort(s);
} else {
PRRS2I = Short.MIN_VALUE;
}
}

protected final void initPRSEHQ(String s) {
if (!s.trim().isEmpty()) {
PRSEHQ = Short.parseShort(s);
} else {
PRSEHQ = Short.MIN_VALUE;
}
}

protected final void initPRWHY(String s) {
if (!s.trim().isEmpty()) {
PRWHY = Short.parseShort(s);
} else {
PRWHY = Short.MIN_VALUE;
}
}

protected final void initPYAGE1(String s) {
if (!s.trim().isEmpty()) {
PYAGE1 = Byte.parseByte(s);
} else {
PYAGE1 = Byte.MIN_VALUE;
}
}

protected final void initPYAGE2(String s) {
if (!s.trim().isEmpty()) {
PYAGE2 = Byte.parseByte(s);
} else {
PYAGE2 = Byte.MIN_VALUE;
}
}

protected final void initPYAGE3(String s) {
if (!s.trim().isEmpty()) {
PYAGE3 = Byte.parseByte(s);
} else {
PYAGE3 = Byte.MIN_VALUE;
}
}

protected final void initPYARG1(String s) {
if (!s.trim().isEmpty()) {
PYARG1 = Short.parseShort(s);
} else {
PYARG1 = Short.MIN_VALUE;
}
}

protected final void initPYARG2(String s) {
if (!s.trim().isEmpty()) {
PYARG2 = Short.parseShort(s);
} else {
PYARG2 = Short.MIN_VALUE;
}
}

protected final void initPYARG3(String s) {
if (!s.trim().isEmpty()) {
PYARG3 = Short.parseShort(s);
} else {
PYARG3 = Short.MIN_VALUE;
}
}

protected final void initPYHAP1(String s) {
if (!s.trim().isEmpty()) {
PYHAP1 = Short.parseShort(s);
} else {
PYHAP1 = Short.MIN_VALUE;
}
}

protected final void initPYHAP2(String s) {
if (!s.trim().isEmpty()) {
PYHAP2 = Short.parseShort(s);
} else {
PYHAP2 = Short.MIN_VALUE;
}
}

protected final void initPYHAP3(String s) {
if (!s.trim().isEmpty()) {
PYHAP3 = Short.parseShort(s);
} else {
PYHAP3 = Short.MIN_VALUE;
}
}

protected final void initPYHFM1(String s) {
if (!s.trim().isEmpty()) {
PYHFM1 = Short.parseShort(s);
} else {
PYHFM1 = Short.MIN_VALUE;
}
}

protected final void initPYHFM2(String s) {
if (!s.trim().isEmpty()) {
PYHFM2 = Short.parseShort(s);
} else {
PYHFM2 = Short.MIN_VALUE;
}
}

protected final void initPYHFM3(String s) {
if (!s.trim().isEmpty()) {
PYHFM3 = Short.parseShort(s);
} else {
PYHFM3 = Short.MIN_VALUE;
}
}

protected final void initPYHFR1(String s) {
if (!s.trim().isEmpty()) {
PYHFR1 = Short.parseShort(s);
} else {
PYHFR1 = Short.MIN_VALUE;
}
}

protected final void initPYHFR2(String s) {
if (!s.trim().isEmpty()) {
PYHFR2 = Short.parseShort(s);
} else {
PYHFR2 = Short.MIN_VALUE;
}
}

protected final void initPYHFR3(String s) {
if (!s.trim().isEmpty()) {
PYHFR3 = Short.parseShort(s);
} else {
PYHFR3 = Short.MIN_VALUE;
}
}

protected final void initPYHLF1(String s) {
if (!s.trim().isEmpty()) {
PYHLF1 = Short.parseShort(s);
} else {
PYHLF1 = Short.MIN_VALUE;
}
}

protected final void initPYHLF2(String s) {
if (!s.trim().isEmpty()) {
PYHLF2 = Short.parseShort(s);
} else {
PYHLF2 = Short.MIN_VALUE;
}
}

protected final void initPYHLF3(String s) {
if (!s.trim().isEmpty()) {
PYHLF3 = Short.parseShort(s);
} else {
PYHLF3 = Short.MIN_VALUE;
}
}

protected final void initPYHLT1(String s) {
if (!s.trim().isEmpty()) {
PYHLT1 = Byte.parseByte(s);
} else {
PYHLT1 = Byte.MIN_VALUE;
}
}

protected final void initPYHLT2(String s) {
if (!s.trim().isEmpty()) {
PYHLT2 = Byte.parseByte(s);
} else {
PYHLT2 = Byte.MIN_VALUE;
}
}

protected final void initPYHLT3(String s) {
if (!s.trim().isEmpty()) {
PYHLT3 = Byte.parseByte(s);
} else {
PYHLT3 = Byte.MIN_VALUE;
}
}

protected final void initPYHLTH(String s) {
if (!s.trim().isEmpty()) {
PYHLTH = Byte.parseByte(s);
} else {
PYHLTH = Byte.MIN_VALUE;
}
}

protected final void initPYHSW1(String s) {
if (!s.trim().isEmpty()) {
PYHSW1 = Short.parseShort(s);
} else {
PYHSW1 = Short.MIN_VALUE;
}
}

protected final void initPYHSW2(String s) {
if (!s.trim().isEmpty()) {
PYHSW2 = Short.parseShort(s);
} else {
PYHSW2 = Short.MIN_VALUE;
}
}

protected final void initPYHSW3(String s) {
if (!s.trim().isEmpty()) {
PYHSW3 = Short.parseShort(s);
} else {
PYHSW3 = Short.MIN_VALUE;
}
}

protected final void initPYHWRK(String s) {
if (!s.trim().isEmpty()) {
PYHWRK = Byte.parseByte(s);
} else {
PYHWRK = Byte.MIN_VALUE;
}
}

protected final void initPYMAN1(String s) {
if (!s.trim().isEmpty()) {
PYMAN1 = Byte.parseByte(s);
} else {
PYMAN1 = Byte.MIN_VALUE;
}
}

protected final void initPYMAN2(String s) {
if (!s.trim().isEmpty()) {
PYMAN2 = Byte.parseByte(s);
} else {
PYMAN2 = Byte.MIN_VALUE;
}
}

protected final void initPYMAN3(String s) {
if (!s.trim().isEmpty()) {
PYMAN3 = Byte.parseByte(s);
} else {
PYMAN3 = Byte.MIN_VALUE;
}
}

protected final void initPYNYP(String s) {
if (!s.trim().isEmpty()) {
PYNYP = Short.parseShort(s);
} else {
PYNYP = Short.MIN_VALUE;
}
}

protected final void initPYPNO1(String s) {
if (!s.trim().isEmpty()) {
PYPNO1 = Short.parseShort(s);
} else {
PYPNO1 = Short.MIN_VALUE;
}
}

protected final void initPYPNO2(String s) {
if (!s.trim().isEmpty()) {
PYPNO2 = Short.parseShort(s);
} else {
PYPNO2 = Short.MIN_VALUE;
}
}

protected final void initPYPNO3(String s) {
if (!s.trim().isEmpty()) {
PYPNO3 = Short.parseShort(s);
} else {
PYPNO3 = Short.MIN_VALUE;
}
}

protected final void initPYRA(String s) {
if (!s.trim().isEmpty()) {
PYRA = Byte.parseByte(s);
} else {
PYRA = Byte.MIN_VALUE;
}
}

protected final void initPYSAD1(String s) {
if (!s.trim().isEmpty()) {
PYSAD1 = Short.parseShort(s);
} else {
PYSAD1 = Short.MIN_VALUE;
}
}

protected final void initPYSAD2(String s) {
if (!s.trim().isEmpty()) {
PYSAD2 = Short.parseShort(s);
} else {
PYSAD2 = Short.MIN_VALUE;
}
}

protected final void initPYSAD3(String s) {
if (!s.trim().isEmpty()) {
PYSAD3 = Short.parseShort(s);
} else {
PYSAD3 = Short.MIN_VALUE;
}
}

protected final void initPYSAT1(String s) {
if (!s.trim().isEmpty()) {
PYSAT1 = Byte.parseByte(s);
} else {
PYSAT1 = Byte.MIN_VALUE;
}
}

protected final void initPYSAT2(String s) {
if (!s.trim().isEmpty()) {
PYSAT2 = Byte.parseByte(s);
} else {
PYSAT2 = Byte.MIN_VALUE;
}
}

protected final void initPYSAT3(String s) {
if (!s.trim().isEmpty()) {
PYSAT3 = Byte.parseByte(s);
} else {
PYSAT3 = Byte.MIN_VALUE;
}
}

protected final void initPYSMK1(String s) {
if (!s.trim().isEmpty()) {
PYSMK1 = Byte.parseByte(s);
} else {
PYSMK1 = Byte.MIN_VALUE;
}
}

protected final void initPYSMK2(String s) {
if (!s.trim().isEmpty()) {
PYSMK2 = Byte.parseByte(s);
} else {
PYSMK2 = Byte.MIN_VALUE;
}
}

protected final void initPYSMK3(String s) {
if (!s.trim().isEmpty()) {
PYSMK3 = Byte.parseByte(s);
} else {
PYSMK3 = Byte.MIN_VALUE;
}
}

protected final void initPYSPN1(String s) {
if (!s.trim().isEmpty()) {
PYSPN1 = Byte.parseByte(s);
} else {
PYSPN1 = Byte.MIN_VALUE;
}
}

protected final void initPYSPN2(String s) {
if (!s.trim().isEmpty()) {
PYSPN2 = Byte.parseByte(s);
} else {
PYSPN2 = Byte.MIN_VALUE;
}
}

protected final void initPYSPN3(String s) {
if (!s.trim().isEmpty()) {
PYSPN3 = Byte.parseByte(s);
} else {
PYSPN3 = Byte.MIN_VALUE;
}
}

protected final void initPYSTE1(String s) {
if (!s.trim().isEmpty()) {
PYSTE1 = Byte.parseByte(s);
} else {
PYSTE1 = Byte.MIN_VALUE;
}
}

protected final void initPYSTE2(String s) {
if (!s.trim().isEmpty()) {
PYSTE2 = Byte.parseByte(s);
} else {
PYSTE2 = Byte.MIN_VALUE;
}
}

protected final void initPYSTE3(String s) {
if (!s.trim().isEmpty()) {
PYSTE3 = Byte.parseByte(s);
} else {
PYSTE3 = Byte.MIN_VALUE;
}
}

protected final void initPYSTM1(String s) {
if (!s.trim().isEmpty()) {
PYSTM1 = Byte.parseByte(s);
} else {
PYSTM1 = Byte.MIN_VALUE;
}
}

protected final void initPYSTM2(String s) {
if (!s.trim().isEmpty()) {
PYSTM2 = Short.parseShort(s);
} else {
PYSTM2 = Short.MIN_VALUE;
}
}

protected final void initPYSTM3(String s) {
if (!s.trim().isEmpty()) {
PYSTM3 = Byte.parseByte(s);
} else {
PYSTM3 = Byte.MIN_VALUE;
}
}

protected final void initPYSTS1(String s) {
if (!s.trim().isEmpty()) {
PYSTS1 = Byte.parseByte(s);
} else {
PYSTS1 = Byte.MIN_VALUE;
}
}

protected final void initPYSTS2(String s) {
if (!s.trim().isEmpty()) {
PYSTS2 = Short.parseShort(s);
} else {
PYSTS2 = Short.MIN_VALUE;
}
}

protected final void initPYSTS3(String s) {
if (!s.trim().isEmpty()) {
PYSTS3 = Byte.parseByte(s);
} else {
PYSTS3 = Byte.MIN_VALUE;
}
}

protected final void initPYSTY1(String s) {
if (!s.trim().isEmpty()) {
PYSTY1 = Byte.parseByte(s);
} else {
PYSTY1 = Byte.MIN_VALUE;
}
}

protected final void initPYSTY2(String s) {
if (!s.trim().isEmpty()) {
PYSTY2 = Byte.parseByte(s);
} else {
PYSTY2 = Byte.MIN_VALUE;
}
}

protected final void initPYSTY3(String s) {
if (!s.trim().isEmpty()) {
PYSTY3 = Byte.parseByte(s);
} else {
PYSTY3 = Byte.MIN_VALUE;
}
}

protected final void initPYSXAG(String s) {
if (!s.trim().isEmpty()) {
PYSXAG = Byte.parseByte(s);
} else {
PYSXAG = Byte.MIN_VALUE;
}
}

protected final void initPYSXED(String s) {
if (!s.trim().isEmpty()) {
PYSXED = Byte.parseByte(s);
} else {
PYSXED = Byte.MIN_VALUE;
}
}

protected final void initPYTAE1(String s) {
if (!s.trim().isEmpty()) {
PYTAE1 = Byte.parseByte(s);
} else {
PYTAE1 = Byte.MIN_VALUE;
}
}

protected final void initPYTAE2(String s) {
if (!s.trim().isEmpty()) {
PYTAE2 = Byte.parseByte(s);
} else {
PYTAE2 = Byte.MIN_VALUE;
}
}

protected final void initPYTAE3(String s) {
if (!s.trim().isEmpty()) {
PYTAE3 = Byte.parseByte(s);
} else {
PYTAE3 = Byte.MIN_VALUE;
}
}

protected final void initPYTAM1(String s) {
if (!s.trim().isEmpty()) {
PYTAM1 = Byte.parseByte(s);
} else {
PYTAM1 = Byte.MIN_VALUE;
}
}

protected final void initPYTAM2(String s) {
if (!s.trim().isEmpty()) {
PYTAM2 = Short.parseShort(s);
} else {
PYTAM2 = Short.MIN_VALUE;
}
}

protected final void initPYTAM3(String s) {
if (!s.trim().isEmpty()) {
PYTAM3 = Byte.parseByte(s);
} else {
PYTAM3 = Byte.MIN_VALUE;
}
}

protected final void initPYTAS1(String s) {
if (!s.trim().isEmpty()) {
PYTAS1 = Byte.parseByte(s);
} else {
PYTAS1 = Byte.MIN_VALUE;
}
}

protected final void initPYTAS2(String s) {
if (!s.trim().isEmpty()) {
PYTAS2 = Short.parseShort(s);
} else {
PYTAS2 = Short.MIN_VALUE;
}
}

protected final void initPYTAS3(String s) {
if (!s.trim().isEmpty()) {
PYTAS3 = Byte.parseByte(s);
} else {
PYTAS3 = Byte.MIN_VALUE;
}
}

protected final void initPYTLK1(String s) {
if (!s.trim().isEmpty()) {
PYTLK1 = Short.parseShort(s);
} else {
PYTLK1 = Short.MIN_VALUE;
}
}

protected final void initPYTLK2(String s) {
if (!s.trim().isEmpty()) {
PYTLK2 = Short.parseShort(s);
} else {
PYTLK2 = Short.MIN_VALUE;
}
}

protected final void initPYTLK3(String s) {
if (!s.trim().isEmpty()) {
PYTLK3 = Short.parseShort(s);
} else {
PYTLK3 = Short.MIN_VALUE;
}
}

protected final void initPYWHR1(String s) {
if (!s.trim().isEmpty()) {
PYWHR1 = Short.parseShort(s);
} else {
PYWHR1 = Short.MIN_VALUE;
}
}

protected final void initPYWHR2(String s) {
if (!s.trim().isEmpty()) {
PYWHR2 = Short.parseShort(s);
} else {
PYWHR2 = Short.MIN_VALUE;
}
}

protected final void initPYWHR3(String s) {
if (!s.trim().isEmpty()) {
PYWHR3 = Short.parseShort(s);
} else {
PYWHR3 = Short.MIN_VALUE;
}
}

protected final void initPYWOR1(String s) {
if (!s.trim().isEmpty()) {
PYWOR1 = Short.parseShort(s);
} else {
PYWOR1 = Short.MIN_VALUE;
}
}

protected final void initPYWOR2(String s) {
if (!s.trim().isEmpty()) {
PYWOR2 = Short.parseShort(s);
} else {
PYWOR2 = Short.MIN_VALUE;
}
}

protected final void initPYWOR3(String s) {
if (!s.trim().isEmpty()) {
PYWOR3 = Short.parseShort(s);
} else {
PYWOR3 = Short.MIN_VALUE;
}
}

protected final void initQFA(String s) {
if (!s.trim().isEmpty()) {
QFA = Short.parseShort(s);
} else {
QFA = Short.MIN_VALUE;
}
}

protected final void initQFACHI(String s) {
if (!s.trim().isEmpty()) {
QFACHI = Short.parseShort(s);
} else {
QFACHI = Short.MIN_VALUE;
}
}

protected final void initQFB(String s) {
if (!s.trim().isEmpty()) {
QFB = Short.parseShort(s);
} else {
QFB = Short.MIN_VALUE;
}
}

protected final void initQFC(String s) {
if (!s.trim().isEmpty()) {
QFC = Short.parseShort(s);
} else {
QFC = Short.MIN_VALUE;
}
}

protected final void initQFD(String s) {
if (!s.trim().isEmpty()) {
QFD = Short.parseShort(s);
} else {
QFD = Short.MIN_VALUE;
}
}

protected final void initQFE(String s) {
if (!s.trim().isEmpty()) {
QFE = Short.parseShort(s);
} else {
QFE = Short.MIN_VALUE;
}
}

protected final void initQFED(String s) {
if (!s.trim().isEmpty()) {
QFED = Short.parseShort(s);
} else {
QFED = Short.MIN_VALUE;
}
}

protected final void initQFEDA(String s) {
if (!s.trim().isEmpty()) {
QFEDA = Short.parseShort(s);
} else {
QFEDA = Short.MIN_VALUE;
}
}

protected final void initQFEDB(String s) {
if (!s.trim().isEmpty()) {
QFEDB = Short.parseShort(s);
} else {
QFEDB = Short.MIN_VALUE;
}
}

protected final void initQFEDC(String s) {
if (!s.trim().isEmpty()) {
QFEDC = Short.parseShort(s);
} else {
QFEDC = Short.MIN_VALUE;
}
}

protected final void initQFEDD(String s) {
if (!s.trim().isEmpty()) {
QFEDD = Short.parseShort(s);
} else {
QFEDD = Short.MIN_VALUE;
}
}

protected final void initQFEDE(String s) {
if (!s.trim().isEmpty()) {
QFEDE = Short.parseShort(s);
} else {
QFEDE = Short.MIN_VALUE;
}
}

protected final void initQFEDF(String s) {
if (!s.trim().isEmpty()) {
QFEDF = Short.parseShort(s);
} else {
QFEDF = Short.MIN_VALUE;
}
}

protected final void initQFEDG(String s) {
if (!s.trim().isEmpty()) {
QFEDG = Short.parseShort(s);
} else {
QFEDG = Short.MIN_VALUE;
}
}

protected final void initQFEDH(String s) {
if (!s.trim().isEmpty()) {
QFEDH = Short.parseShort(s);
} else {
QFEDH = Short.MIN_VALUE;
}
}

protected final void initQFEDHI(String s) {
if (!s.trim().isEmpty()) {
QFEDHI = Short.parseShort(s);
} else {
QFEDHI = Short.MIN_VALUE;
}
}

protected final void initQFEDI(String s) {
if (!s.trim().isEmpty()) {
QFEDI = Short.parseShort(s);
} else {
QFEDI = Short.MIN_VALUE;
}
}

protected final void initQFEDJ(String s) {
if (!s.trim().isEmpty()) {
QFEDJ = Short.parseShort(s);
} else {
QFEDJ = Short.MIN_VALUE;
}
}

protected final void initQFEDK(String s) {
if (!s.trim().isEmpty()) {
QFEDK = Short.parseShort(s);
} else {
QFEDK = Short.MIN_VALUE;
}
}

protected final void initQFEDL(String s) {
if (!s.trim().isEmpty()) {
QFEDL = Short.parseShort(s);
} else {
QFEDL = Short.MIN_VALUE;
}
}

protected final void initQFEDM(String s) {
if (!s.trim().isEmpty()) {
QFEDM = Short.parseShort(s);
} else {
QFEDM = Short.MIN_VALUE;
}
}

protected final void initQFEDN(String s) {
if (!s.trim().isEmpty()) {
QFEDN = Short.parseShort(s);
} else {
QFEDN = Short.MIN_VALUE;
}
}

protected final void initQFEDO(String s) {
if (!s.trim().isEmpty()) {
QFEDO = Short.parseShort(s);
} else {
QFEDO = Short.MIN_VALUE;
}
}

protected final void initQFEDP(String s) {
if (!s.trim().isEmpty()) {
QFEDP = Short.parseShort(s);
} else {
QFEDP = Short.MIN_VALUE;
}
}

protected final void initQFEDQ(String s) {
if (!s.trim().isEmpty()) {
QFEDQ = Short.parseShort(s);
} else {
QFEDQ = Short.MIN_VALUE;
}
}

protected final void initQFEDR(String s) {
if (!s.trim().isEmpty()) {
QFEDR = Short.parseShort(s);
} else {
QFEDR = Short.MIN_VALUE;
}
}

protected final void initQFEDS(String s) {
if (!s.trim().isEmpty()) {
QFEDS = Short.parseShort(s);
} else {
QFEDS = Short.MIN_VALUE;
}
}

protected final void initQFEDX(String s) {
if (!s.trim().isEmpty()) {
QFEDX = Short.parseShort(s);
} else {
QFEDX = Short.MIN_VALUE;
}
}

protected final void initQFEDXA(String s) {
if (!s.trim().isEmpty()) {
QFEDXA = Short.parseShort(s);
} else {
QFEDXA = Short.MIN_VALUE;
}
}

protected final void initQFEDXB(String s) {
if (!s.trim().isEmpty()) {
QFEDXB = Short.parseShort(s);
} else {
QFEDXB = Short.MIN_VALUE;
}
}

protected final void initQFEDXC(String s) {
if (!s.trim().isEmpty()) {
QFEDXC = Short.parseShort(s);
} else {
QFEDXC = Short.MIN_VALUE;
}
}

protected final void initQFEDXD(String s) {
if (!s.trim().isEmpty()) {
QFEDXD = Short.parseShort(s);
} else {
QFEDXD = Short.MIN_VALUE;
}
}

protected final void initQFEDXE(String s) {
if (!s.trim().isEmpty()) {
QFEDXE = Short.parseShort(s);
} else {
QFEDXE = Short.MIN_VALUE;
}
}

protected final void initQFEDXF(String s) {
if (!s.trim().isEmpty()) {
QFEDXF = Short.parseShort(s);
} else {
QFEDXF = Short.MIN_VALUE;
}
}

protected final void initQFEDXG(String s) {
if (!s.trim().isEmpty()) {
QFEDXG = Short.parseShort(s);
} else {
QFEDXG = Short.MIN_VALUE;
}
}

protected final void initQFEDXH(String s) {
if (!s.trim().isEmpty()) {
QFEDXH = Short.parseShort(s);
} else {
QFEDXH = Short.MIN_VALUE;
}
}

protected final void initQFEDXI(String s) {
if (!s.trim().isEmpty()) {
QFEDXI = Short.parseShort(s);
} else {
QFEDXI = Short.MIN_VALUE;
}
}

protected final void initQFEDXJ(String s) {
if (!s.trim().isEmpty()) {
QFEDXJ = Short.parseShort(s);
} else {
QFEDXJ = Short.MIN_VALUE;
}
}

protected final void initQFEDXK(String s) {
if (!s.trim().isEmpty()) {
QFEDXK = Short.parseShort(s);
} else {
QFEDXK = Short.MIN_VALUE;
}
}

protected final void initQFF(String s) {
if (!s.trim().isEmpty()) {
QFF = Short.parseShort(s);
} else {
QFF = Short.MIN_VALUE;
}
}

protected final void initQFG(String s) {
if (!s.trim().isEmpty()) {
QFG = Short.parseShort(s);
} else {
QFG = Short.MIN_VALUE;
}
}

protected final void initQFH(String s) {
if (!s.trim().isEmpty()) {
QFH = Short.parseShort(s);
} else {
QFH = Short.MIN_VALUE;
}
}

protected final void initQFHAS(String s) {
if (!s.trim().isEmpty()) {
QFHAS = Short.parseShort(s);
} else {
QFHAS = Short.MIN_VALUE;
}
}

protected final void initQFI(String s) {
if (!s.trim().isEmpty()) {
QFI = Short.parseShort(s);
} else {
QFI = Short.MIN_VALUE;
}
}

protected final void initQFJ(String s) {
if (!s.trim().isEmpty()) {
QFJ = Short.parseShort(s);
} else {
QFJ = Short.MIN_VALUE;
}
}

protected final void initQFK(String s) {
if (!s.trim().isEmpty()) {
QFK = Short.parseShort(s);
} else {
QFK = Short.MIN_VALUE;
}
}

protected final void initQFL(String s) {
if (!s.trim().isEmpty()) {
QFL = Short.parseShort(s);
} else {
QFL = Short.MIN_VALUE;
}
}

protected final void initQFM(String s) {
if (!s.trim().isEmpty()) {
QFM = Short.parseShort(s);
} else {
QFM = Short.MIN_VALUE;
}
}

protected final void initQFN(String s) {
if (!s.trim().isEmpty()) {
QFN = Short.parseShort(s);
} else {
QFN = Short.MIN_VALUE;
}
}

protected final void initQFVOC(String s) {
if (!s.trim().isEmpty()) {
QFVOC = Short.parseShort(s);
} else {
QFVOC = Short.MIN_VALUE;
}
}

protected final void initQFX(String s) {
if (!s.trim().isEmpty()) {
QFX = Short.parseShort(s);
} else {
QFX = Short.MIN_VALUE;
}
}

protected final void initQFXA(String s) {
if (!s.trim().isEmpty()) {
QFXA = Short.parseShort(s);
} else {
QFXA = Short.MIN_VALUE;
}
}

protected final void initQFXB(String s) {
if (!s.trim().isEmpty()) {
QFXB = Short.parseShort(s);
} else {
QFXB = Short.MIN_VALUE;
}
}

protected final void initQFXC(String s) {
if (!s.trim().isEmpty()) {
QFXC = Short.parseShort(s);
} else {
QFXC = Short.MIN_VALUE;
}
}

protected final void initQFXD(String s) {
if (!s.trim().isEmpty()) {
QFXD = Short.parseShort(s);
} else {
QFXD = Short.MIN_VALUE;
}
}

protected final void initQFXE(String s) {
if (!s.trim().isEmpty()) {
QFXE = Short.parseShort(s);
} else {
QFXE = Short.MIN_VALUE;
}
}

protected final void initQFXF(String s) {
if (!s.trim().isEmpty()) {
QFXF = Short.parseShort(s);
} else {
QFXF = Short.MIN_VALUE;
}
}

protected final void initQFXG(String s) {
if (!s.trim().isEmpty()) {
QFXG = Short.parseShort(s);
} else {
QFXG = Short.MIN_VALUE;
}
}

protected final void initQFXH(String s) {
if (!s.trim().isEmpty()) {
QFXH = Short.parseShort(s);
} else {
QFXH = Short.MIN_VALUE;
}
}

protected final void initQFXI(String s) {
if (!s.trim().isEmpty()) {
QFXI = Short.parseShort(s);
} else {
QFXI = Short.MIN_VALUE;
}
}

protected final void initQFXJ(String s) {
if (!s.trim().isEmpty()) {
QFXJ = Short.parseShort(s);
} else {
QFXJ = Short.MIN_VALUE;
}
}

protected final void initQFXK(String s) {
if (!s.trim().isEmpty()) {
QFXK = Short.parseShort(s);
} else {
QFXK = Short.MIN_VALUE;
}
}

protected final void initQFXL(String s) {
if (!s.trim().isEmpty()) {
QFXL = Short.parseShort(s);
} else {
QFXL = Short.MIN_VALUE;
}
}

protected final void initQFXM(String s) {
if (!s.trim().isEmpty()) {
QFXM = Short.parseShort(s);
} else {
QFXM = Short.MIN_VALUE;
}
}

protected final void initQFXN(String s) {
if (!s.trim().isEmpty()) {
QFXN = Short.parseShort(s);
} else {
QFXN = Short.MIN_VALUE;
}
}

protected final void initRACE(String s) {
if (!s.trim().isEmpty()) {
RACE = Short.parseShort(s);
} else {
RACE = Short.MIN_VALUE;
}
}

protected final void initRACH12(String s) {
if (!s.trim().isEmpty()) {
RACH12 = Short.parseShort(s);
} else {
RACH12 = Short.MIN_VALUE;
}
}

protected final void initREGION(String s) {
if (!s.trim().isEmpty()) {
REGION = Short.parseShort(s);
} else {
REGION = Short.MIN_VALUE;
}
}

protected final void initSAMPST(String s) {
if (!s.trim().isEmpty()) {
SAMPST = Short.parseShort(s);
} else {
SAMPST = Short.MIN_VALUE;
}
}

protected final void initSAMPST_BH(String s) {
if (!s.trim().isEmpty()) {
SAMPST_BH = Short.parseShort(s);
} else {
SAMPST_BH = Short.MIN_VALUE;
}
}

protected final void initSAVE(String s) {
if (!s.trim().isEmpty()) {
SAVE = Short.parseShort(s);
} else {
SAVE = Short.MIN_VALUE;
}
}

protected final void initSAVED(String s) {
if (!s.trim().isEmpty()) {
SAVED = Integer.parseInt(s);
} else {
SAVED = Integer.MIN_VALUE;
}
}

protected final void initSAVEJ(String s) {
if (!s.trim().isEmpty()) {
SAVEJ = Byte.parseByte(s);
} else {
SAVEJ = Byte.MIN_VALUE;
}
}

protected final void initSAVEK(String s) {
if (!s.trim().isEmpty()) {
SAVEK = Integer.parseInt(s);
} else {
SAVEK = Integer.MIN_VALUE;
}
}

protected final void initSAVEKB1(String s) {
if (!s.trim().isEmpty()) {
SAVEKB1 = Byte.parseByte(s);
} else {
SAVEKB1 = Byte.MIN_VALUE;
}
}

protected final void initSAVEKB2(String s) {
if (!s.trim().isEmpty()) {
SAVEKB2 = Byte.parseByte(s);
} else {
SAVEKB2 = Byte.MIN_VALUE;
}
}

protected final void initSAVEKB3(String s) {
if (!s.trim().isEmpty()) {
SAVEKB3 = Byte.parseByte(s);
} else {
SAVEKB3 = Byte.MIN_VALUE;
}
}

protected final void initSAVEKB4(String s) {
if (!s.trim().isEmpty()) {
SAVEKB4 = Byte.parseByte(s);
} else {
SAVEKB4 = Byte.MIN_VALUE;
}
}

protected final void initSAVEY1(String s) {
if (!s.trim().isEmpty()) {
SAVEY1 = Short.parseShort(s);
} else {
SAVEY1 = Short.MIN_VALUE;
}
}

protected final void initSAVEY2(String s) {
if (!s.trim().isEmpty()) {
SAVEY2 = Short.parseShort(s);
} else {
SAVEY2 = Short.MIN_VALUE;
}
}

protected final void initSCNOW(String s) {
if (!s.trim().isEmpty()) {
SCNOW = Short.parseShort(s);
} else {
SCNOW = Short.MIN_VALUE;
}
}

protected final void initSCOPFAMA(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMA = Byte.parseByte(s);
} else {
SCOPFAMA = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMB(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMB = Byte.parseByte(s);
} else {
SCOPFAMB = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMD(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMD = Byte.parseByte(s);
} else {
SCOPFAMD = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMF(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMF = Byte.parseByte(s);
} else {
SCOPFAMF = Byte.MIN_VALUE;
}
}

protected final void initSCOPFAMH(String s) {
if (!s.trim().isEmpty()) {
SCOPFAMH = Byte.parseByte(s);
} else {
SCOPFAMH = Byte.MIN_VALUE;
}
}

protected final void initSCSSUPR2R(String s) {
if (!s.trim().isEmpty()) {
SCSSUPR2R = Byte.parseByte(s);
} else {
SCSSUPR2R = Byte.MIN_VALUE;
}
}

protected final void initSCSUP1(String s) {
if (!s.trim().isEmpty()) {
SCSUP1 = Byte.parseByte(s);
} else {
SCSUP1 = Byte.MIN_VALUE;
}
}

protected final void initSCTYPE(String s) {
if (!s.trim().isEmpty()) {
SCTYPE = Short.parseShort(s);
} else {
SCTYPE = Short.MIN_VALUE;
}
}

protected final void initSMOKER(String s) {
if (!s.trim().isEmpty()) {
SMOKER = Short.parseShort(s);
} else {
SMOKER = Short.MIN_VALUE;
}
}

protected final void initSPINHH(String s) {
if (!s.trim().isEmpty()) {
SPINHH = Short.parseShort(s);
} else {
SPINHH = Short.MIN_VALUE;
}
}

protected final void initSPJB(String s) {
if (!s.trim().isEmpty()) {
SPJB = Short.parseShort(s);
} else {
SPJB = Short.MIN_VALUE;
}
}

protected final void initSPJBHR(String s) {
if (!s.trim().isEmpty()) {
SPJBHR = Short.parseShort(s);
} else {
SPJBHR = Short.MIN_VALUE;
}
}

protected final void initSPJBOT(String s) {
if (!s.trim().isEmpty()) {
SPJBOT = Short.parseShort(s);
} else {
SPJBOT = Short.MIN_VALUE;
}
}

protected final void initSPJBYR(String s) {
if (!s.trim().isEmpty()) {
SPJBYR = Short.parseShort(s);
} else {
SPJBYR = Short.MIN_VALUE;
}
}

protected final void initSPPAYG(String s) {
if (!s.trim().isEmpty()) {
SPPAYG = Double.parseDouble(s);
} else {
SPPAYG = Double.NaN;
}
}

protected final void initSPPAYGI(String s) {
if (!s.trim().isEmpty()) {
SPPAYGI = Short.parseShort(s);
} else {
SPPAYGI = Short.MIN_VALUE;
}
}

protected final void initSPPID_BH(String s) {
if (!s.trim().isEmpty()) {
SPPID_BH = Integer.parseInt(s);
} else {
SPPID_BH = Integer.MIN_VALUE;
}
}

protected final void initSPSOC90_CC(String s) {
if (!s.trim().isEmpty()) {
SPSOC90_CC = Short.parseShort(s);
} else {
SPSOC90_CC = Short.MIN_VALUE;
}
}

protected final void initSSUPA(String s) {
if (!s.trim().isEmpty()) {
SSUPA = Byte.parseByte(s);
} else {
SSUPA = Byte.MIN_VALUE;
}
}

protected final void initSSUPB(String s) {
if (!s.trim().isEmpty()) {
SSUPB = Byte.parseByte(s);
} else {
SSUPB = Byte.MIN_VALUE;
}
}

protected final void initSSUPC(String s) {
if (!s.trim().isEmpty()) {
SSUPC = Byte.parseByte(s);
} else {
SSUPC = Byte.MIN_VALUE;
}
}

protected final void initSSUPD(String s) {
if (!s.trim().isEmpty()) {
SSUPD = Byte.parseByte(s);
} else {
SSUPD = Byte.MIN_VALUE;
}
}

protected final void initSSUPE(String s) {
if (!s.trim().isEmpty()) {
SSUPE = Byte.parseByte(s);
} else {
SSUPE = Byte.MIN_VALUE;
}
}

protected final void initSSUPR2R_BH(String s) {
if (!s.trim().isEmpty()) {
SSUPR2R_BH = Byte.parseByte(s);
} else {
SSUPR2R_BH = Byte.MIN_VALUE;
}
}

protected final void initSVACTS5(String s) {
if (!s.trim().isEmpty()) {
SVACTS5 = Byte.parseByte(s);
} else {
SVACTS5 = Byte.MIN_VALUE;
}
}

protected final void initTELWHY(String s) {
if (!s.trim().isEmpty()) {
TELWHY = Short.parseShort(s);
} else {
TELWHY = Short.MIN_VALUE;
}
}

protected final void initTENURE_DV(String s) {
if (!s.trim().isEmpty()) {
TENURE_DV = Short.parseShort(s);
} else {
TENURE_DV = Short.MIN_VALUE;
}
}

protected final void initTLFIYR(String s) {
if (!s.trim().isEmpty()) {
TLFIYR = Integer.parseInt(s);
} else {
TLFIYR = Integer.MIN_VALUE;
}
}

protected final void initTLFIYRL(String s) {
if (!s.trim().isEmpty()) {
TLFIYRL = Integer.parseInt(s);
} else {
TLFIYRL = Integer.MIN_VALUE;
}
}

protected final void initTUIN1(String s) {
if (!s.trim().isEmpty()) {
TUIN1 = Short.parseShort(s);
} else {
TUIN1 = Short.MIN_VALUE;
}
}

protected final void initTUIN2(String s) {
if (!s.trim().isEmpty()) {
TUIN2 = Short.parseShort(s);
} else {
TUIN2 = Short.MIN_VALUE;
}
}

protected final void initTUJBPL(String s) {
if (!s.trim().isEmpty()) {
TUJBPL = Short.parseShort(s);
} else {
TUJBPL = Short.MIN_VALUE;
}
}

protected final void initVOTE(String s) {
if (!s.trim().isEmpty()) {
VOTE = Short.parseShort(s);
} else {
VOTE = Short.MIN_VALUE;
}
}

protected final void initVOTE1(String s) {
if (!s.trim().isEmpty()) {
VOTE1 = Short.parseShort(s);
} else {
VOTE1 = Short.MIN_VALUE;
}
}

protected final void initVOTE2(String s) {
if (!s.trim().isEmpty()) {
VOTE2 = Short.parseShort(s);
} else {
VOTE2 = Short.MIN_VALUE;
}
}

protected final void initVOTE3(String s) {
if (!s.trim().isEmpty()) {
VOTE3 = Short.parseShort(s);
} else {
VOTE3 = Short.MIN_VALUE;
}
}

protected final void initVOTE3_BH(String s) {
if (!s.trim().isEmpty()) {
VOTE3_BH = Short.parseShort(s);
} else {
VOTE3_BH = Short.MIN_VALUE;
}
}

protected final void initVOTE4(String s) {
if (!s.trim().isEmpty()) {
VOTE4 = Short.parseShort(s);
} else {
VOTE4 = Short.MIN_VALUE;
}
}

protected final void initVOTE4_BH(String s) {
if (!s.trim().isEmpty()) {
VOTE4_BH = Short.parseShort(s);
} else {
VOTE4_BH = Short.MIN_VALUE;
}
}

protected final void initVOTE5(String s) {
if (!s.trim().isEmpty()) {
VOTE5 = Short.parseShort(s);
} else {
VOTE5 = Short.MIN_VALUE;
}
}

protected final void initVOTE6(String s) {
if (!s.trim().isEmpty()) {
VOTE6 = Short.parseShort(s);
} else {
VOTE6 = Short.MIN_VALUE;
}
}

protected final void initVOTE7(String s) {
if (!s.trim().isEmpty()) {
VOTE7 = Byte.parseByte(s);
} else {
VOTE7 = Byte.MIN_VALUE;
}
}

protected final void initVOTE8(String s) {
if (!s.trim().isEmpty()) {
VOTE8 = Byte.parseByte(s);
} else {
VOTE8 = Byte.MIN_VALUE;
}
}

protected final void initVOTE8_BH(String s) {
if (!s.trim().isEmpty()) {
VOTE8_BH = Byte.parseByte(s);
} else {
VOTE8_BH = Byte.MIN_VALUE;
}
}

protected final void initWINDF(String s) {
if (!s.trim().isEmpty()) {
WINDF = Byte.parseByte(s);
} else {
WINDF = Byte.MIN_VALUE;
}
}

protected final void initWINDFA(String s) {
if (!s.trim().isEmpty()) {
WINDFA = Byte.parseByte(s);
} else {
WINDFA = Byte.MIN_VALUE;
}
}

protected final void initWINDFB(String s) {
if (!s.trim().isEmpty()) {
WINDFB = Byte.parseByte(s);
} else {
WINDFB = Byte.MIN_VALUE;
}
}

protected final void initWINDFC(String s) {
if (!s.trim().isEmpty()) {
WINDFC = Byte.parseByte(s);
} else {
WINDFC = Byte.MIN_VALUE;
}
}

protected final void initWINDFD(String s) {
if (!s.trim().isEmpty()) {
WINDFD = Byte.parseByte(s);
} else {
WINDFD = Byte.MIN_VALUE;
}
}

protected final void initWINDFE(String s) {
if (!s.trim().isEmpty()) {
WINDFE = Byte.parseByte(s);
} else {
WINDFE = Byte.MIN_VALUE;
}
}

protected final void initWINDFF(String s) {
if (!s.trim().isEmpty()) {
WINDFF = Byte.parseByte(s);
} else {
WINDFF = Byte.MIN_VALUE;
}
}

protected final void initWINDFG(String s) {
if (!s.trim().isEmpty()) {
WINDFG = Byte.parseByte(s);
} else {
WINDFG = Byte.MIN_VALUE;
}
}

protected final void initWINDFH(String s) {
if (!s.trim().isEmpty()) {
WINDFH = Byte.parseByte(s);
} else {
WINDFH = Byte.MIN_VALUE;
}
}

protected final void initWINDFY(String s) {
if (!s.trim().isEmpty()) {
WINDFY = Integer.parseInt(s);
} else {
WINDFY = Integer.MIN_VALUE;
}
}

protected final void initWKTIME(String s) {
if (!s.trim().isEmpty()) {
WKTIME = Short.parseShort(s);
} else {
WKTIME = Short.MIN_VALUE;
}
}

protected final void initXDT1M(String s) {
if (!s.trim().isEmpty()) {
XDT1M = Byte.parseByte(s);
} else {
XDT1M = Byte.MIN_VALUE;
}
}

protected final void initXDT1PL(String s) {
if (!s.trim().isEmpty()) {
XDT1PL = Byte.parseByte(s);
} else {
XDT1PL = Byte.MIN_VALUE;
}
}

protected final void initXDT1Y(String s) {
if (!s.trim().isEmpty()) {
XDT1Y = Byte.parseByte(s);
} else {
XDT1Y = Byte.MIN_VALUE;
}
}

protected final void initXDT2M(String s) {
if (!s.trim().isEmpty()) {
XDT2M = Byte.parseByte(s);
} else {
XDT2M = Byte.MIN_VALUE;
}
}

protected final void initXDT2PL(String s) {
if (!s.trim().isEmpty()) {
XDT2PL = Byte.parseByte(s);
} else {
XDT2PL = Byte.MIN_VALUE;
}
}

protected final void initXDT2Y(String s) {
if (!s.trim().isEmpty()) {
XDT2Y = Byte.parseByte(s);
} else {
XDT2Y = Byte.MIN_VALUE;
}
}

protected final void initXDT3M(String s) {
if (!s.trim().isEmpty()) {
XDT3M = Byte.parseByte(s);
} else {
XDT3M = Byte.MIN_VALUE;
}
}

protected final void initXDT3PL(String s) {
if (!s.trim().isEmpty()) {
XDT3PL = Byte.parseByte(s);
} else {
XDT3PL = Byte.MIN_VALUE;
}
}

protected final void initXDT3Y(String s) {
if (!s.trim().isEmpty()) {
XDT3Y = Byte.parseByte(s);
} else {
XDT3Y = Byte.MIN_VALUE;
}
}

protected final void initXDTS(String s) {
if (!s.trim().isEmpty()) {
XDTS = Short.parseShort(s);
} else {
XDTS = Short.MIN_VALUE;
}
}

protected final void initXEWGHT(String s) {
if (!s.trim().isEmpty()) {
XEWGHT = Double.parseDouble(s);
} else {
XEWGHT = Double.NaN;
}
}

protected final void initXPCHC(String s) {
if (!s.trim().isEmpty()) {
XPCHC = Short.parseShort(s);
} else {
XPCHC = Short.MIN_VALUE;
}
}

protected final void initXPCHCF(String s) {
if (!s.trim().isEmpty()) {
XPCHCF = Short.parseShort(s);
} else {
XPCHCF = Short.MIN_VALUE;
}
}

protected final void initXRWGHT(String s) {
if (!s.trim().isEmpty()) {
XRWGHT = Double.parseDouble(s);
} else {
XRWGHT = Double.NaN;
}
}

protected final void initYPPAR(String s) {
if (!s.trim().isEmpty()) {
YPPAR = Short.parseShort(s);
} else {
YPPAR = Short.MIN_VALUE;
}
}

protected final void initYR2UK(String s) {
if (!s.trim().isEmpty()) {
YR2UK = Short.parseShort(s);
} else {
YR2UK = Short.MIN_VALUE;
}
}

public short getAGE12() {
return AGE12;
}

public short getAGE_DV() {
return AGE_DV;
}

public short getAIDHRS_BH() {
return AIDHRS_BH;
}

public byte getAIDHU1A() {
return AIDHU1A;
}

public byte getAIDHU2A() {
return AIDHU2A;
}

public short getAIDHUA() {
return AIDHUA;
}

public short getAIDHUB() {
return AIDHUB;
}

public short getAIDHUC() {
return AIDHUC;
}

public byte getBANK() {
return BANK;
}

public byte getBANKJ() {
return BANKJ;
}

public int getBANKK() {
return BANKK;
}

public byte getBANKKB1() {
return BANKKB1;
}

public byte getBANKKB2() {
return BANKKB2;
}

public byte getBANKKB3() {
return BANKKB3;
}

public byte getBANKKB4() {
return BANKKB4;
}

public short getBIRTHY() {
return BIRTHY;
}

public short getBUNO() {
return BUNO;
}

public short getBUTYPE() {
return BUTYPE;
}

public short getCASMIN() {
return CASMIN;
}

public short getCJSBGD() {
return CJSBGD;
}

public short getCJSBGM() {
return CJSBGM;
}

public short getCJSBGY() {
return CJSBGY;
}

public short getCJSBGY4() {
return CJSBGY4;
}

public short getCJSBLY() {
return CJSBLY;
}

public int getCJSTEN() {
return CJSTEN;
}

protected double CJSWK9() {
return CJSWK9;
}

public byte getDEBT() {
return DEBT;
}

public byte getDEBTA() {
return DEBTA;
}

public byte getDEBTB() {
return DEBTB;
}

public byte getDEBTC() {
return DEBTC;
}

public byte getDEBTC1() {
return DEBTC1;
}

public byte getDEBTC2() {
return DEBTC2;
}

public byte getDEBTC3() {
return DEBTC3;
}

public byte getDEBTC4() {
return DEBTC4;
}

public byte getDEBTD() {
return DEBTD;
}

public byte getDEBTE() {
return DEBTE;
}

public byte getDEBTF() {
return DEBTF;
}

public byte getDEBTG() {
return DEBTG;
}

public byte getDEBTJ() {
return DEBTJ;
}

public int getDEBTY() {
return DEBTY;
}

protected double DISTMOV() {
return DISTMOV;
}

public short getDOBY() {
return DOBY;
}

public short getEAAGE() {
return EAAGE;
}

public short getEDENDM() {
return EDENDM;
}

public short getEDENDY() {
return EDENDY;
}

public short getEDENDY4() {
return EDENDY4;
}

public short getEDLYR() {
return EDLYR;
}

public short getEDNEW() {
return EDNEW;
}

public short getEDNEW1() {
return EDNEW1;
}

public short getEDNEW2() {
return EDNEW2;
}

public short getEDNEW3() {
return EDNEW3;
}

public short getEDNEW4() {
return EDNEW4;
}

public short getEDNEWP1() {
return EDNEWP1;
}

public short getEDNEWQ() {
return EDNEWQ;
}

public short getEDTYPE() {
return EDTYPE;
}

public short getEDTYPE_BH() {
return EDTYPE_BH;
}

public short getF101() {
return F101;
}

public short getF102() {
return F102;
}

public short getF103() {
return F103;
}

public short getF104() {
return F104;
}

public short getF105() {
return F105;
}

public byte getF106() {
return F106;
}

public byte getF116() {
return F116;
}

public byte getF117() {
return F117;
}

public short getF118() {
return F118;
}

public short getF119() {
return F119;
}

public short getF120() {
return F120;
}

public short getF121() {
return F121;
}

public short getF122() {
return F122;
}

public short getF123() {
return F123;
}

public byte getF124() {
return F124;
}

public short getF125() {
return F125;
}

public short getF131() {
return F131;
}

public short getF132() {
return F132;
}

public short getF133() {
return F133;
}

public byte getF134() {
return F134;
}

public short getF135() {
return F135;
}

public short getF136() {
return F136;
}

public short getF137() {
return F137;
}

public short getF138() {
return F138;
}

public short getF139() {
return F139;
}

public short getF140() {
return F140;
}

public short getF141() {
return F141;
}

public short getF151() {
return F151;
}

public byte getF152() {
return F152;
}

public short getF153() {
return F153;
}

public short getF154() {
return F154;
}

public short getF155() {
return F155;
}

public short getF156() {
return F156;
}

public short getF157() {
return F157;
}

public byte getF158() {
return F158;
}

public byte getF159() {
return F159;
}

public byte getFCCARD() {
return FCCARD;
}

public short getFENOW_BH() {
return FENOW_BH;
}

public short getFETYPE() {
return FETYPE;
}

protected double FIHHMN() {
return FIHHMN;
}

public short getFIHHMNI() {
return FIHHMNI;
}

protected double FIMNB() {
return FIMNB;
}

public boolean getFIMNBI() {
return FIMNBI;
}

protected double FIMNI() {
return FIMNI;
}

public boolean getFIMNII() {
return FIMNII;
}

public boolean getFIMNLI() {
return FIMNLI;
}

protected double FIMNNL() {
return FIMNNL;
}

public boolean getFIMNNLI() {
return FIMNNLI;
}

protected double FIMNP() {
return FIMNP;
}

public boolean getFIMNPI() {
return FIMNPI;
}

protected double FIMNT() {
return FIMNT;
}

public boolean getFIMNTHI() {
return FIMNTHI;
}

public boolean getFIMNTI() {
return FIMNTI;
}

public short getFISITC() {
return FISITC;
}

public short getFISITX() {
return FISITX;
}

public short getFISITY() {
return FISITY;
}

public boolean getFIYEARI() {
return FIYEARI;
}

protected double FIYR() {
return FIYR;
}

protected double FIYRB() {
return FIYRB;
}

public boolean getFIYRBI() {
return FIYRBI;
}

public short getFIYRDI() {
return FIYRDI;
}

public short getFIYRDII() {
return FIYRDII;
}

public byte getFIYRDIU() {
return FIYRDIU;
}

protected double FIYRI() {
return FIYRI;
}

public boolean getFIYRII() {
return FIYRII;
}

protected double FIYRL() {
return FIYRL;
}

public boolean getFIYRLI() {
return FIYRLI;
}

protected double FIYRNL() {
return FIYRNL;
}

public boolean getFIYRNLI() {
return FIYRNLI;
}

protected double FIYRP() {
return FIYRP;
}

public boolean getFIYRPI() {
return FIYRPI;
}

protected double FIYRT() {
return FIYRT;
}

public boolean getFIYRTI() {
return FIYRTI;
}

public int getFNPID_BH() {
return FNPID_BH;
}

public short getFTEXA() {
return FTEXA;
}

public short getFTEXA1() {
return FTEXA1;
}

public short getFTEXA2() {
return FTEXA2;
}

public short getFTEXA3() {
return FTEXA3;
}

public short getFTEXA4() {
return FTEXA4;
}

public short getFTEXA5() {
return FTEXA5;
}

public short getFTEXA6() {
return FTEXA6;
}

public short getFTEXAV() {
return FTEXAV;
}

protected double FTEXAW() {
return FTEXAW;
}

public short getFTEXB() {
return FTEXB;
}

public short getFTEXB1() {
return FTEXB1;
}

public short getFTEXB2() {
return FTEXB2;
}

public short getFTEXB3() {
return FTEXB3;
}

public short getFTEXB4() {
return FTEXB4;
}

public short getFTEXB5() {
return FTEXB5;
}

public short getFTEXB6() {
return FTEXB6;
}

public short getFTEXBV() {
return FTEXBV;
}

protected double FTEXBW() {
return FTEXBW;
}

public short getFTEXC() {
return FTEXC;
}

public short getFTEXC1() {
return FTEXC1;
}

public short getFTEXC2() {
return FTEXC2;
}

public short getFTEXC3() {
return FTEXC3;
}

public short getFTEXC4() {
return FTEXC4;
}

public short getFTEXC5() {
return FTEXC5;
}

public short getFTEXC6() {
return FTEXC6;
}

public short getFTEXCV() {
return FTEXCV;
}

protected double FTEXCW() {
return FTEXCW;
}

public short getFTEXHH() {
return FTEXHH;
}

public byte getFTHH() {
return FTHH;
}

public byte getFTHH1() {
return FTHH1;
}

public byte getFTHH11() {
return FTHH11;
}

public byte getFTHH12() {
return FTHH12;
}

public byte getFTHH13() {
return FTHH13;
}

public byte getFTHH14() {
return FTHH14;
}

public byte getFTHH15() {
return FTHH15;
}

public byte getFTHH16() {
return FTHH16;
}

public short getFTHH1V() {
return FTHH1V;
}

protected double FTHH1W() {
return FTHH1W;
}

public byte getFTHH2() {
return FTHH2;
}

public byte getFTHH21() {
return FTHH21;
}

public byte getFTHH22() {
return FTHH22;
}

public byte getFTHH23() {
return FTHH23;
}

public byte getFTHH24() {
return FTHH24;
}

public byte getFTHH25() {
return FTHH25;
}

public byte getFTHH26() {
return FTHH26;
}

public short getFTHH2V() {
return FTHH2V;
}

protected double FTHH2W() {
return FTHH2W;
}

public byte getFTHH3() {
return FTHH3;
}

public byte getFTHH31() {
return FTHH31;
}

public byte getFTHH32() {
return FTHH32;
}

public byte getFTHH33() {
return FTHH33;
}

public byte getFTHH34() {
return FTHH34;
}

public byte getFTHH35() {
return FTHH35;
}

public byte getFTHH36() {
return FTHH36;
}

public short getFTHH3V() {
return FTHH3V;
}

protected double FTHH3W() {
return FTHH3W;
}

public byte getHGEMP() {
return HGEMP;
}

public short getHGR2R() {
return HGR2R;
}

public short getHGRA() {
return HGRA;
}

public boolean getHGSEX() {
return HGSEX;
}

public short getHHCH12() {
return HHCH12;
}

public short getHHMEM() {
return HHMEM;
}

public short getHHSIZE() {
return HHSIZE;
}

public short getHHTYPE() {
return HHTYPE;
}

public int getHID() {
return HID;
}

public short getHIQUALB_DV() {
return HIQUALB_DV;
}

public short getHL2GP() {
return HL2GP;
}

public short getHLCK() {
return HLCK;
}

public short getHLCKA() {
return HLCKA;
}

public short getHLCKAN() {
return HLCKAN;
}

public short getHLCKB() {
return HLCKB;
}

public short getHLCKBN() {
return HLCKBN;
}

public short getHLCKC() {
return HLCKC;
}

public short getHLCKCN() {
return HLCKCN;
}

public short getHLCKD() {
return HLCKD;
}

public short getHLCKDN() {
return HLCKDN;
}

public short getHLCKE() {
return HLCKE;
}

public short getHLCKEN() {
return HLCKEN;
}

public short getHLCKF() {
return HLCKF;
}

public short getHLCKFN() {
return HLCKFN;
}

public short getHLCKG() {
return HLCKG;
}

public short getHLCKGN() {
return HLCKGN;
}

public short getHLCKH() {
return HLCKH;
}

public short getHLCKHN() {
return HLCKHN;
}

public short getHLCKI() {
return HLCKI;
}

public short getHLCKIN() {
return HLCKIN;
}

public short getHLDSBL() {
return HLDSBL;
}

public short getHLENDW() {
return HLENDW;
}

public byte getHLLT() {
return HLLT;
}

public short getHLLTA() {
return HLLTA;
}

public short getHLLTB() {
return HLLTB;
}

public short getHLLTC() {
return HLLTC;
}

public short getHLLTD() {
return HLLTD;
}

public short getHLLTE() {
return HLLTE;
}

public byte getHLLTW() {
return HLLTW;
}

public short getHLLTWA() {
return HLLTWA;
}

public short getHLPRB() {
return HLPRB;
}

public short getHLPRBA() {
return HLPRBA;
}

public short getHLPRBB() {
return HLPRBB;
}

public short getHLPRBC() {
return HLPRBC;
}

public short getHLPRBD() {
return HLPRBD;
}

public short getHLPRBE() {
return HLPRBE;
}

public short getHLPRBF() {
return HLPRBF;
}

public short getHLPRBG() {
return HLPRBG;
}

public short getHLPRBH() {
return HLPRBH;
}

public short getHLPRBI() {
return HLPRBI;
}

public short getHLPRBJ() {
return HLPRBJ;
}

public short getHLPRBK() {
return HLPRBK;
}

public short getHLPRBL() {
return HLPRBL;
}

public short getHLPRBM() {
return HLPRBM;
}

public short getHLSTAT() {
return HLSTAT;
}

public short getHLSV() {
return HLSV;
}

public short getHLSVA() {
return HLSVA;
}

public short getHLSVAF() {
return HLSVAF;
}

public short getHLSVAN() {
return HLSVAN;
}

public short getHLSVB() {
return HLSVB;
}

public short getHLSVBF() {
return HLSVBF;
}

public short getHLSVBN() {
return HLSVBN;
}

public short getHLSVC() {
return HLSVC;
}

public short getHLSVCF() {
return HLSVCF;
}

public short getHLSVCN() {
return HLSVCN;
}

public short getHLSVD() {
return HLSVD;
}

public short getHLSVDF() {
return HLSVDF;
}

public short getHLSVDN() {
return HLSVDN;
}

public short getHLSVE() {
return HLSVE;
}

public short getHLSVEF() {
return HLSVEF;
}

public short getHLSVEN() {
return HLSVEN;
}

public short getHLSVF() {
return HLSVF;
}

public short getHLSVFF() {
return HLSVFF;
}

public short getHLSVFN() {
return HLSVFN;
}

public short getHLSVG() {
return HLSVG;
}

public short getHLSVGF() {
return HLSVGF;
}

public short getHLSVGN() {
return HLSVGN;
}

public short getHLSVH() {
return HLSVH;
}

public byte getHLSVHF() {
return HLSVHF;
}

public byte getHLSVHN() {
return HLSVHN;
}

public short getHLSVI() {
return HLSVI;
}

public short getHLSVIF() {
return HLSVIF;
}

public short getHLSVIN() {
return HLSVIN;
}

public short getHLSVJ() {
return HLSVJ;
}

public short getHLSVJF() {
return HLSVJF;
}

public short getHLSVJN() {
return HLSVJN;
}

public short getHLSVK() {
return HLSVK;
}

public short getHLSVKF() {
return HLSVKF;
}

public short getHLSVKN() {
return HLSVKN;
}

public short getHLSVL() {
return HLSVL;
}

public short getHLSVLF() {
return HLSVLF;
}

public short getHLSVLN() {
return HLSVLN;
}

public short getHLSVM() {
return HLSVM;
}

public short getHLSVMF() {
return HLSVMF;
}

public short getHLSVMN() {
return HLSVMN;
}

public byte getHLZEST() {
return HLZEST;
}

public boolean getHOH() {
return HOH;
}

public short getHOSP() {
return HOSP;
}

public short getHOSPCH() {
return HOSPCH;
}

public short getHOSPD() {
return HOSPD;
}

public short getHOSPNHS() {
return HOSPNHS;
}

public short getHOWLNG() {
return HOWLNG;
}

public byte getHUBOSS() {
return HUBOSS;
}

public short getHUBUYS() {
return HUBUYS;
}

public short getHUBUYS_BH() {
return HUBUYS_BH;
}

public short getHUFRYS() {
return HUFRYS;
}

public short getHUFRYS_BH() {
return HUFRYS_BH;
}

public short getHUIRON() {
return HUIRON;
}

public short getHUIRON_BH() {
return HUIRON_BH;
}

public short getHUMOPS() {
return HUMOPS;
}

public short getHUMOPS_BH() {
return HUMOPS_BH;
}

public short getHUNURS() {
return HUNURS;
}

public byte getHURUNS() {
return HURUNS;
}

public short getHUSITS() {
return HUSITS;
}

public short getHUXPCH() {
return HUXPCH;
}

public short getIENDDATHM() {
return IENDDATHM;
}

public byte getIMPEVENT1() {
return IMPEVENT1;
}

public byte getIMPEVENT1S() {
return IMPEVENT1S;
}

public byte getIMPEVENT2() {
return IMPEVENT2;
}

public byte getIMPEVENT2S() {
return IMPEVENT2S;
}

public byte getIMPEVENT3() {
return IMPEVENT3;
}

public byte getIMPEVENT3S() {
return IMPEVENT3S;
}

public byte getIMPEVENT4() {
return IMPEVENT4;
}

public byte getIMPEVENT4S() {
return IMPEVENT4S;
}

public short getIODC() {
return IODC;
}

public short getISCED() {
return ISCED;
}

public short getISTRTDATHM() {
return ISTRTDATHM;
}

public short getISTRTDATY() {
return ISTRTDATY;
}

public short getIV2() {
return IV2;
}

public short getIV4() {
return IV4;
}

public short getIV5() {
return IV5;
}

public short getIV6A() {
return IV6A;
}

public short getIV6B() {
return IV6B;
}

public short getIV6C() {
return IV6C;
}

public short getIV6D() {
return IV6D;
}

public short getIV6E() {
return IV6E;
}

public short getIV6F() {
return IV6F;
}

public short getIV7() {
return IV7;
}

public short getIVEA() {
return IVEA;
}

public short getIVEB() {
return IVEB;
}

public short getIVEC() {
return IVEC;
}

public short getIVED() {
return IVED;
}

public short getIVEE() {
return IVEE;
}

public short getIVFA() {
return IVFA;
}

public short getIVFB() {
return IVFB;
}

public short getIVFC() {
return IVFC;
}

public short getIVFD() {
return IVFD;
}

public short getIVFE() {
return IVFE;
}

public short getIVIEVR() {
return IVIEVR;
}

public byte getIVIOW4() {
return IVIOW4;
}

public short getIVJA() {
return IVJA;
}

public short getIVJB() {
return IVJB;
}

public short getIVJC() {
return IVJC;
}

public short getIVJD() {
return IVJD;
}

public short getIVJE() {
return IVJE;
}

public short getIVLYR() {
return IVLYR;
}

public short getIVMA() {
return IVMA;
}

public short getIVMB() {
return IVMB;
}

public short getIVMC() {
return IVMC;
}

public short getIVMD() {
return IVMD;
}

public short getIVME() {
return IVME;
}

public short getIVPA() {
return IVPA;
}

public short getIVPB() {
return IVPB;
}

public short getIVPC() {
return IVPC;
}

public short getIVPD() {
return IVPD;
}

public short getIVPE() {
return IVPE;
}

public short getIVSC() {
return IVSC;
}

public short getJ2PAY_BH() {
return J2PAY_BH;
}

public short getJ2SOC90_CC() {
return J2SOC90_CC;
}

public short getJBBGLY() {
return JBBGLY;
}

public short getJBCHC1() {
return JBCHC1;
}

public short getJBCHC2() {
return JBCHC2;
}

public short getJBCHC3() {
return JBCHC3;
}

protected double JBCSSF() {
return JBCSSF;
}

protected double JBCSSM() {
return JBCSSM;
}

public short getJBED() {
return JBED;
}

public short getJBED1() {
return JBED1;
}

public short getJBED2() {
return JBED2;
}

public short getJBED3() {
return JBED3;
}

public short getJBED4() {
return JBED4;
}

public short getJBED5() {
return JBED5;
}

public short getJBEDP1() {
return JBEDP1;
}

public short getJBEDQ() {
return JBEDQ;
}

public short getJBGOLD() {
return JBGOLD;
}

protected double JBHGS() {
return JBHGS;
}

public short getJBHHA() {
return JBHHA;
}

public short getJBHHB() {
return JBHHB;
}

public short getJBHHC() {
return JBHHC;
}

public short getJBHHD() {
return JBHHD;
}

public short getJBHHE() {
return JBHHE;
}

public short getJBHHF() {
return JBHHF;
}

public short getJBHRLK() {
return JBHRLK;
}

public String getJBISCO_CC() {
return JBISCO_CC;
}

public short getJBNSSEC_DV() {
return JBNSSEC_DV;
}

public short getJBOFFY_BH() {
return JBOFFY_BH;
}

public short getJBONUS() {
return JBONUS;
}

public short getJBOPPS() {
return JBOPPS;
}

public short getJBPEN() {
return JBPEN;
}

public short getJBPENM() {
return JBPENM;
}

public short getJBPL_BH() {
return JBPL_BH;
}

public short getJBRGSC_DV() {
return JBRGSC_DV;
}

public short getJBRISE() {
return JBRISE;
}

public short getJBSAT1() {
return JBSAT1;
}

public short getJBSAT2() {
return JBSAT2;
}

public short getJBSAT3() {
return JBSAT3;
}

public short getJBSAT4() {
return JBSAT4;
}

public short getJBSAT5() {
return JBSAT5;
}

public short getJBSAT6() {
return JBSAT6;
}

public short getJBSAT7() {
return JBSAT7;
}

public short getJBSAT_BH() {
return JBSAT_BH;
}

public short getJBSECT_BH() {
return JBSECT_BH;
}

public short getJBSEC_BH() {
return JBSEC_BH;
}

public short getJBSEG_DV() {
return JBSEG_DV;
}

public short getJBSIC() {
return JBSIC;
}

public short getJBSOC90LY_CC() {
return JBSOC90LY_CC;
}

public short getJBSOC90_CC() {
return JBSOC90_CC;
}

public short getJBSTATL() {
return JBSTATL;
}

public short getJBSTATT() {
return JBSTATT;
}

public short getJBTERM() {
return JBTERM;
}

public short getJBTIME() {
return JBTIME;
}

public short getJBTTWM() {
return JBTTWM;
}

public short getJBUB() {
return JBUB;
}

public short getJBUBY() {
return JBUBY;
}

protected double JLCSSF() {
return JLCSSF;
}

protected double JLCSSM() {
return JLCSSM;
}

public short getJLGOLD() {
return JLGOLD;
}

protected double JLHGS() {
return JLHGS;
}

public short getJLID() {
return JLID;
}

public String getJLISCO_CC() {
return JLISCO_CC;
}

public short getJLNSSEC_DV() {
return JLNSSEC_DV;
}

public short getJLRGSC_DV() {
return JLRGSC_DV;
}

public short getJLSEC() {
return JLSEC;
}

public short getJLSEG_DV() {
return JLSEG_DV;
}

public short getJLSIC() {
return JLSIC;
}

public short getJLSOC90_CC() {
return JLSOC90_CC;
}

public short getJLYID() {
return JLYID;
}

public short getJNMNTH() {
return JNMNTH;
}

public short getJNYEAR() {
return JNYEAR;
}

public short getJSHRLK() {
return JSHRLK;
}

protected double JSPAYG() {
return JSPAYG;
}

public short getJSPAYGI() {
return JSPAYGI;
}

public int getJSPAYL() {
return JSPAYL;
}

public short getJSPL_BH() {
return JSPL_BH;
}

public short getJSPRBY() {
return JSPRBY;
}

public short getJSPREY() {
return JSPREY;
}

protected double JSPROF() {
return JSPROF;
}

public short getJSPROFI() {
return JSPROFI;
}

public short getJSPYBM() {
return JSPYBM;
}

public short getJSPYBY() {
return JSPYBY;
}

public short getJSPYBY4() {
return JSPYBY4;
}

public short getJSPYEM() {
return JSPYEM;
}

public short getJSPYEY() {
return JSPYEY;
}

public short getJSPYEY4() {
return JSPYEY4;
}

public short getJSSAT() {
return JSSAT;
}

public short getJSSAT1() {
return JSSAT1;
}

public short getJSSAT2() {
return JSSAT2;
}

public short getJSSAT3() {
return JSSAT3;
}

public short getJSSAT4() {
return JSSAT4;
}

public short getJSSAT5() {
return JSSAT5;
}

public short getJSTIME() {
return JSTIME;
}

public short getJSTTWM() {
return JSTTWM;
}

public short getJSTYPE() {
return JSTYPE;
}

public short getJTYID() {
return JTYID;
}

public short getJUHRSL() {
return JUHRSL;
}

public short getJUHRSX() {
return JUHRSX;
}

public short getJULK1() {
return JULK1;
}

public short getJULK4() {
return JULK4;
}

public short getJUPAYL() {
return JUPAYL;
}

public short getJUPAYX() {
return JUPAYX;
}

public short getJUSOC90_CC() {
return JUSOC90_CC;
}

public short getJUSPEC() {
return JUSPEC;
}

protected double LEWGHT() {
return LEWGHT;
}

public short getLKMOVY() {
return LKMOVY;
}

public short getLKNBRD() {
return LKNBRD;
}

protected double LRWGHT() {
return LRWGHT;
}

public short getMASTAT() {
return MASTAT;
}

public short getMEMORIG_BH() {
return MEMORIG_BH;
}

public short getMLCHM() {
return MLCHM;
}

public short getMLCHY() {
return MLCHY;
}

public short getMLCHY4() {
return MLCHY4;
}

public short getMLSTAT_BH() {
return MLSTAT_BH;
}

public int getMNPID_BH() {
return MNPID_BH;
}

public short getMOVEST() {
return MOVEST;
}

public short getMOVJB() {
return MOVJB;
}

public short getMOVJBA() {
return MOVJBA;
}

public short getMOVJBB() {
return MOVJBB;
}

public short getMOVJBC() {
return MOVJBC;
}

public short getMOVJBD() {
return MOVJBD;
}

public short getMOVJBE() {
return MOVJBE;
}

public short getMOVJBF() {
return MOVJBF;
}

public short getMOVJBG() {
return MOVJBG;
}

public short getMOVJBH() {
return MOVJBH;
}

public short getMOVJBI() {
return MOVJBI;
}

public short getMOVY1() {
return MOVY1;
}

public short getMOVY2() {
return MOVY2;
}

public short getMRJBOSS() {
return MRJBOSS;
}

protected double MRJCSSF() {
return MRJCSSF;
}

protected double MRJCSSM() {
return MRJCSSM;
}

public short getMRJEND() {
return MRJEND;
}

public short getMRJGOLD() {
return MRJGOLD;
}

protected double MRJHGS() {
return MRJHGS;
}

public short getMRJISCO88_CC() {
return MRJISCO88_CC;
}

public String getMRJISCO_CC() {
return MRJISCO_CC;
}

public short getMRJMNGR() {
return MRJMNGR;
}

public short getMRJNSSEC8_DV() {
return MRJNSSEC8_DV;
}

public short getMRJNSSEC_DV() {
return MRJNSSEC_DV;
}

public short getMRJRGSC() {
return MRJRGSC;
}

public short getMRJSEC() {
return MRJSEC;
}

public short getMRJSEG() {
return MRJSEG;
}

public short getMRJSEMP() {
return MRJSEMP;
}

public short getMRJSIC() {
return MRJSIC;
}

public short getMRJSIZE() {
return MRJSIZE;
}

public short getMRJSOC() {
return MRJSOC;
}

public byte getMRSSCH() {
return MRSSCH;
}

public byte getMRSSCI() {
return MRSSCI;
}

public short getMSTATSAM() {
return MSTATSAM;
}

public short getNAIDXHH_BH() {
return NAIDXHH_BH;
}

public short getNCHILD_DV() {
return NCHILD_DV;
}

public short getNCIGS() {
return NCIGS;
}

public short getNEMST() {
return NEMST;
}

public short getNEWHY() {
return NEWHY;
}

public short getNEYRJN() {
return NEYRJN;
}

public short getNF1() {
return NF1;
}

public short getNJBNEW() {
return NJBNEW;
}

public short getNJBS() {
return NJBS;
}

public short getNJBSP() {
return NJBSP;
}

protected double NJBWKS() {
return NJBWKS;
}

public short getNJISP() {
return NJISP;
}

protected double NJIWKS() {
return NJIWKS;
}

public short getNJUSP() {
return NJUSP;
}

protected double NJUWKS() {
return NJUWKS;
}

public byte getNORGA() {
return NORGA;
}

public byte getNORGM() {
return NORGM;
}

public byte getNQFEDA() {
return NQFEDA;
}

public byte getNQFEDB() {
return NQFEDB;
}

public byte getNQFEDC() {
return NQFEDC;
}

public short getNQFEDD() {
return NQFEDD;
}

public short getNQFEDE() {
return NQFEDE;
}

public byte getNQFEDF() {
return NQFEDF;
}

public byte getNQFEDG() {
return NQFEDG;
}

public byte getNQFEDH() {
return NQFEDH;
}

public byte getNQFEDI() {
return NQFEDI;
}

public byte getNQFEDJ() {
return NQFEDJ;
}

public byte getNQFEDK() {
return NQFEDK;
}

public short getNQFEDL() {
return NQFEDL;
}

public byte getNQFEDM() {
return NQFEDM;
}

public short getNQFEDN() {
return NQFEDN;
}

public byte getNQFEDO() {
return NQFEDO;
}

public byte getNQFEDP() {
return NQFEDP;
}

public byte getNQFEDQ() {
return NQFEDQ;
}

public byte getNQFEDR() {
return NQFEDR;
}

public short getNQFEDS() {
return NQFEDS;
}

public short getNQFEXA() {
return NQFEXA;
}

public short getNQFEXB() {
return NQFEXB;
}

public short getNQFEXC() {
return NQFEXC;
}

public byte getNQFEXE() {
return NQFEXE;
}

public byte getNQFEXF() {
return NQFEXF;
}

public byte getNQFEXG() {
return NQFEXG;
}

public byte getNQFEXH() {
return NQFEXH;
}

public byte getNQFEXI() {
return NQFEXI;
}

public byte getNQFEXJ() {
return NQFEXJ;
}

public byte getNQFEXK() {
return NQFEXK;
}

public byte getNVEST() {
return NVEST;
}

public byte getNVESTA() {
return NVESTA;
}

public byte getNVESTB() {
return NVESTB;
}

public byte getNVESTC() {
return NVESTC;
}

public byte getNVESTC1() {
return NVESTC1;
}

public byte getNVESTC2() {
return NVESTC2;
}

public byte getNVESTC3() {
return NVESTC3;
}

public byte getNVESTC4() {
return NVESTC4;
}

public byte getNVESTD() {
return NVESTD;
}

public byte getNVESTE() {
return NVESTE;
}

public byte getNVESTF() {
return NVESTF;
}

public byte getNVESTG() {
return NVESTG;
}

public byte getNVESTJ() {
return NVESTJ;
}

public int getNVESTK() {
return NVESTK;
}

public byte getNVESTL() {
return NVESTL;
}

public byte getNVESTN() {
return NVESTN;
}

public short getNXDTS() {
return NXDTS;
}

public byte getOPCHD1() {
return OPCHD1;
}

public byte getOPCHD2() {
return OPCHD2;
}

public byte getOPCHD3() {
return OPCHD3;
}

public byte getOPCHD4() {
return OPCHD4;
}

public byte getOPFAMA() {
return OPFAMA;
}

public byte getOPFAMB() {
return OPFAMB;
}

public byte getOPFAMC() {
return OPFAMC;
}

public byte getOPFAMD() {
return OPFAMD;
}

public byte getOPFAME() {
return OPFAME;
}

public byte getOPFAMF() {
return OPFAMF;
}

public byte getOPFAMG() {
return OPFAMG;
}

public byte getOPFAMH() {
return OPFAMH;
}

public byte getOPFAMI() {
return OPFAMI;
}

public byte getOPHLA() {
return OPHLA;
}

public byte getOPHLB() {
return OPHLB;
}

public byte getOPHLC() {
return OPHLC;
}

public byte getOPPOL1() {
return OPPOL1;
}

public byte getOPPOL2() {
return OPPOL2;
}

public byte getOPPOL3() {
return OPPOL3;
}

public byte getOPPOL4() {
return OPPOL4;
}

public byte getOPRLG2() {
return OPRLG2;
}

public byte getOPSOCA() {
return OPSOCA;
}

public byte getOPSOCB() {
return OPSOCB;
}

public byte getOPSOCC() {
return OPSOCC;
}

public byte getOPSOCD() {
return OPSOCD;
}

public byte getOPSOCE() {
return OPSOCE;
}

public byte getOPSOCF() {
return OPSOCF;
}

public byte getOPXPCR() {
return OPXPCR;
}

public byte getOPXPSV() {
return OPXPSV;
}

public byte getORG() {
return ORG;
}

public byte getORGA() {
return ORGA;
}

public byte getORGA1() {
return ORGA1;
}

public byte getORGA10() {
return ORGA10;
}

public byte getORGA11() {
return ORGA11;
}

public byte getORGA12() {
return ORGA12;
}

public byte getORGA13() {
return ORGA13;
}

public byte getORGA14() {
return ORGA14;
}

public byte getORGA15() {
return ORGA15;
}

public byte getORGA16() {
return ORGA16;
}

public byte getORGA2() {
return ORGA2;
}

public byte getORGA3() {
return ORGA3;
}

public byte getORGA4() {
return ORGA4;
}

public byte getORGA5() {
return ORGA5;
}

public byte getORGA6() {
return ORGA6;
}

public byte getORGA7() {
return ORGA7;
}

public byte getORGA8() {
return ORGA8;
}

public byte getORGA9() {
return ORGA9;
}

public byte getORGM1() {
return ORGM1;
}

public byte getORGM10() {
return ORGM10;
}

public byte getORGM11() {
return ORGM11;
}

public byte getORGM12() {
return ORGM12;
}

public byte getORGM13() {
return ORGM13;
}

public byte getORGM14() {
return ORGM14;
}

public byte getORGM15() {
return ORGM15;
}

public byte getORGM16() {
return ORGM16;
}

public byte getORGM2() {
return ORGM2;
}

public byte getORGM3() {
return ORGM3;
}

public byte getORGM4() {
return ORGM4;
}

public byte getORGM5() {
return ORGM5;
}

public byte getORGM6() {
return ORGM6;
}

public byte getORGM7() {
return ORGM7;
}

public byte getORGM8() {
return ORGM8;
}

public byte getORGM9() {
return ORGM9;
}

public short getPAYDF1() {
return PAYDF1;
}

public short getPAYDF2() {
return PAYDF2;
}

public short getPAYDF3() {
return PAYDF3;
}

public short getPAYDF4() {
return PAYDF4;
}

public short getPAYDF5() {
return PAYDF5;
}

public short getPAYDF6() {
return PAYDF6;
}

public short getPAYDF7() {
return PAYDF7;
}

public short getPAYDF8() {
return PAYDF8;
}

public short getPAYGLI() {
return PAYGLI;
}

protected double PAYGLY() {
return PAYGLY;
}

public short getPAYGTI() {
return PAYGTI;
}

protected double PAYGTY() {
return PAYGTY;
}

protected double PAYGW() {
return PAYGW;
}

protected double PAYG_DV() {
return PAYG_DV;
}

public int getPAYLY() {
return PAYLY;
}

public short getPAYLYG() {
return PAYLYG;
}

protected double PAYLYW() {
return PAYLYW;
}

public short getPAYNLI() {
return PAYNLI;
}

protected double PAYNLY() {
return PAYNLY;
}

public short getPAYNTI() {
return PAYNTI;
}

protected double PAYNTY() {
return PAYNTY;
}

protected double PAYNW() {
return PAYNW;
}

public int getPAYS() {
return PAYS;
}

public short getPAYSG() {
return PAYSG;
}

public short getPAYSLP() {
return PAYSLP;
}

protected double PAYSW() {
return PAYSW;
}

protected double PAYUW() {
return PAYUW;
}

public short getPENADD() {
return PENADD;
}

public short getPENADV() {
return PENADV;
}

protected double PENADW() {
return PENADW;
}

public short getPENB4() {
return PENB4;
}

public short getPENB4V() {
return PENB4V;
}

protected double PENB4W() {
return PENB4W;
}

public short getPENB4Y4() {
return PENB4Y4;
}

public short getPENB4YR() {
return PENB4YR;
}

public short getPENYR() {
return PENYR;
}

public short getPENYR4() {
return PENYR4;
}

public int getPID() {
return PID;
}

public short getPLBORNC_CC() {
return PLBORNC_CC;
}

public short getPLNEW() {
return PLNEW;
}

public short getPLNOWM() {
return PLNOWM;
}

public short getPLNOWY4() {
return PLNOWY4;
}

public short getPPLEVR() {
return PPLEVR;
}

public short getPPPEN() {
return PPPEN;
}

public short getPREARNI() {
return PREARNI;
}

public short getPREARN_BH() {
return PREARN_BH;
}

public short getPRESBGM() {
return PRESBGM;
}

public short getPRESBGY() {
return PRESBGY;
}

public short getPRESBY4() {
return PRESBY4;
}

public short getPRESLY() {
return PRESLY;
}

public short getPRF101() {
return PRF101;
}

public short getPRF102() {
return PRF102;
}

public short getPRF116() {
return PRF116;
}

public short getPRF125() {
return PRF125;
}

public short getPRF131() {
return PRF131;
}

public byte getPRF134() {
return PRF134;
}

public short getPRF135() {
return PRF135;
}

public byte getPRF137() {
return PRF137;
}

public short getPRF139() {
return PRF139;
}

public short getPRF141() {
return PRF141;
}

public short getPRFEHQ() {
return PRFEHQ;
}

public byte getPRFIRN() {
return PRFIRN;
}

public short getPRFITBI() {
return PRFITBI;
}

public short getPRFITB_BH() {
return PRFITB_BH;
}

public short getPRJBBY4() {
return PRJBBY4;
}

public byte getPRJBFT() {
return PRJBFT;
}

public short getPRJBLY() {
return PRJBLY;
}

public short getPRRS2I() {
return PRRS2I;
}

public short getPRSEHQ() {
return PRSEHQ;
}

public short getPRWHY() {
return PRWHY;
}

public byte getPYAGE1() {
return PYAGE1;
}

public byte getPYAGE2() {
return PYAGE2;
}

public byte getPYAGE3() {
return PYAGE3;
}

public short getPYARG1() {
return PYARG1;
}

public short getPYARG2() {
return PYARG2;
}

public short getPYARG3() {
return PYARG3;
}

public short getPYHAP1() {
return PYHAP1;
}

public short getPYHAP2() {
return PYHAP2;
}

public short getPYHAP3() {
return PYHAP3;
}

public short getPYHFM1() {
return PYHFM1;
}

public short getPYHFM2() {
return PYHFM2;
}

public short getPYHFM3() {
return PYHFM3;
}

public short getPYHFR1() {
return PYHFR1;
}

public short getPYHFR2() {
return PYHFR2;
}

public short getPYHFR3() {
return PYHFR3;
}

public short getPYHLF1() {
return PYHLF1;
}

public short getPYHLF2() {
return PYHLF2;
}

public short getPYHLF3() {
return PYHLF3;
}

public byte getPYHLT1() {
return PYHLT1;
}

public byte getPYHLT2() {
return PYHLT2;
}

public byte getPYHLT3() {
return PYHLT3;
}

public byte getPYHLTH() {
return PYHLTH;
}

public short getPYHSW1() {
return PYHSW1;
}

public short getPYHSW2() {
return PYHSW2;
}

public short getPYHSW3() {
return PYHSW3;
}

public byte getPYHWRK() {
return PYHWRK;
}

public byte getPYMAN1() {
return PYMAN1;
}

public byte getPYMAN2() {
return PYMAN2;
}

public byte getPYMAN3() {
return PYMAN3;
}

public short getPYNYP() {
return PYNYP;
}

public short getPYPNO1() {
return PYPNO1;
}

public short getPYPNO2() {
return PYPNO2;
}

public short getPYPNO3() {
return PYPNO3;
}

public byte getPYRA() {
return PYRA;
}

public short getPYSAD1() {
return PYSAD1;
}

public short getPYSAD2() {
return PYSAD2;
}

public short getPYSAD3() {
return PYSAD3;
}

public byte getPYSAT1() {
return PYSAT1;
}

public byte getPYSAT2() {
return PYSAT2;
}

public byte getPYSAT3() {
return PYSAT3;
}

public byte getPYSMK1() {
return PYSMK1;
}

public byte getPYSMK2() {
return PYSMK2;
}

public byte getPYSMK3() {
return PYSMK3;
}

public byte getPYSPN1() {
return PYSPN1;
}

public byte getPYSPN2() {
return PYSPN2;
}

public byte getPYSPN3() {
return PYSPN3;
}

public byte getPYSTE1() {
return PYSTE1;
}

public byte getPYSTE2() {
return PYSTE2;
}

public byte getPYSTE3() {
return PYSTE3;
}

public byte getPYSTM1() {
return PYSTM1;
}

public short getPYSTM2() {
return PYSTM2;
}

public byte getPYSTM3() {
return PYSTM3;
}

public byte getPYSTS1() {
return PYSTS1;
}

public short getPYSTS2() {
return PYSTS2;
}

public byte getPYSTS3() {
return PYSTS3;
}

public byte getPYSTY1() {
return PYSTY1;
}

public byte getPYSTY2() {
return PYSTY2;
}

public byte getPYSTY3() {
return PYSTY3;
}

public byte getPYSXAG() {
return PYSXAG;
}

public byte getPYSXED() {
return PYSXED;
}

public byte getPYTAE1() {
return PYTAE1;
}

public byte getPYTAE2() {
return PYTAE2;
}

public byte getPYTAE3() {
return PYTAE3;
}

public byte getPYTAM1() {
return PYTAM1;
}

public short getPYTAM2() {
return PYTAM2;
}

public byte getPYTAM3() {
return PYTAM3;
}

public byte getPYTAS1() {
return PYTAS1;
}

public short getPYTAS2() {
return PYTAS2;
}

public byte getPYTAS3() {
return PYTAS3;
}

public short getPYTLK1() {
return PYTLK1;
}

public short getPYTLK2() {
return PYTLK2;
}

public short getPYTLK3() {
return PYTLK3;
}

public short getPYWHR1() {
return PYWHR1;
}

public short getPYWHR2() {
return PYWHR2;
}

public short getPYWHR3() {
return PYWHR3;
}

public short getPYWOR1() {
return PYWOR1;
}

public short getPYWOR2() {
return PYWOR2;
}

public short getPYWOR3() {
return PYWOR3;
}

public short getQFA() {
return QFA;
}

public short getQFACHI() {
return QFACHI;
}

public short getQFB() {
return QFB;
}

public short getQFC() {
return QFC;
}

public short getQFD() {
return QFD;
}

public short getQFE() {
return QFE;
}

public short getQFED() {
return QFED;
}

public short getQFEDA() {
return QFEDA;
}

public short getQFEDB() {
return QFEDB;
}

public short getQFEDC() {
return QFEDC;
}

public short getQFEDD() {
return QFEDD;
}

public short getQFEDE() {
return QFEDE;
}

public short getQFEDF() {
return QFEDF;
}

public short getQFEDG() {
return QFEDG;
}

public short getQFEDH() {
return QFEDH;
}

public short getQFEDHI() {
return QFEDHI;
}

public short getQFEDI() {
return QFEDI;
}

public short getQFEDJ() {
return QFEDJ;
}

public short getQFEDK() {
return QFEDK;
}

public short getQFEDL() {
return QFEDL;
}

public short getQFEDM() {
return QFEDM;
}

public short getQFEDN() {
return QFEDN;
}

public short getQFEDO() {
return QFEDO;
}

public short getQFEDP() {
return QFEDP;
}

public short getQFEDQ() {
return QFEDQ;
}

public short getQFEDR() {
return QFEDR;
}

public short getQFEDS() {
return QFEDS;
}

public short getQFEDX() {
return QFEDX;
}

public short getQFEDXA() {
return QFEDXA;
}

public short getQFEDXB() {
return QFEDXB;
}

public short getQFEDXC() {
return QFEDXC;
}

public short getQFEDXD() {
return QFEDXD;
}

public short getQFEDXE() {
return QFEDXE;
}

public short getQFEDXF() {
return QFEDXF;
}

public short getQFEDXG() {
return QFEDXG;
}

public short getQFEDXH() {
return QFEDXH;
}

public short getQFEDXI() {
return QFEDXI;
}

public short getQFEDXJ() {
return QFEDXJ;
}

public short getQFEDXK() {
return QFEDXK;
}

public short getQFF() {
return QFF;
}

public short getQFG() {
return QFG;
}

public short getQFH() {
return QFH;
}

public short getQFHAS() {
return QFHAS;
}

public short getQFI() {
return QFI;
}

public short getQFJ() {
return QFJ;
}

public short getQFK() {
return QFK;
}

public short getQFL() {
return QFL;
}

public short getQFM() {
return QFM;
}

public short getQFN() {
return QFN;
}

public short getQFVOC() {
return QFVOC;
}

public short getQFX() {
return QFX;
}

public short getQFXA() {
return QFXA;
}

public short getQFXB() {
return QFXB;
}

public short getQFXC() {
return QFXC;
}

public short getQFXD() {
return QFXD;
}

public short getQFXE() {
return QFXE;
}

public short getQFXF() {
return QFXF;
}

public short getQFXG() {
return QFXG;
}

public short getQFXH() {
return QFXH;
}

public short getQFXI() {
return QFXI;
}

public short getQFXJ() {
return QFXJ;
}

public short getQFXK() {
return QFXK;
}

public short getQFXL() {
return QFXL;
}

public short getQFXM() {
return QFXM;
}

public short getQFXN() {
return QFXN;
}

public short getRACE() {
return RACE;
}

public short getRACH12() {
return RACH12;
}

public short getREGION() {
return REGION;
}

public short getSAMPST() {
return SAMPST;
}

public short getSAMPST_BH() {
return SAMPST_BH;
}

public short getSAVE() {
return SAVE;
}

public int getSAVED() {
return SAVED;
}

public byte getSAVEJ() {
return SAVEJ;
}

public int getSAVEK() {
return SAVEK;
}

public byte getSAVEKB1() {
return SAVEKB1;
}

public byte getSAVEKB2() {
return SAVEKB2;
}

public byte getSAVEKB3() {
return SAVEKB3;
}

public byte getSAVEKB4() {
return SAVEKB4;
}

public short getSAVEY1() {
return SAVEY1;
}

public short getSAVEY2() {
return SAVEY2;
}

public short getSCNOW() {
return SCNOW;
}

public byte getSCOPFAMA() {
return SCOPFAMA;
}

public byte getSCOPFAMB() {
return SCOPFAMB;
}

public byte getSCOPFAMD() {
return SCOPFAMD;
}

public byte getSCOPFAMF() {
return SCOPFAMF;
}

public byte getSCOPFAMH() {
return SCOPFAMH;
}

public byte getSCSSUPR2R() {
return SCSSUPR2R;
}

public byte getSCSUP1() {
return SCSUP1;
}

public short getSCTYPE() {
return SCTYPE;
}

public short getSMOKER() {
return SMOKER;
}

public short getSPINHH() {
return SPINHH;
}

public short getSPJB() {
return SPJB;
}

public short getSPJBHR() {
return SPJBHR;
}

public short getSPJBOT() {
return SPJBOT;
}

public short getSPJBYR() {
return SPJBYR;
}

protected double SPPAYG() {
return SPPAYG;
}

public short getSPPAYGI() {
return SPPAYGI;
}

public int getSPPID_BH() {
return SPPID_BH;
}

public short getSPSOC90_CC() {
return SPSOC90_CC;
}

public byte getSSUPA() {
return SSUPA;
}

public byte getSSUPB() {
return SSUPB;
}

public byte getSSUPC() {
return SSUPC;
}

public byte getSSUPD() {
return SSUPD;
}

public byte getSSUPE() {
return SSUPE;
}

public byte getSSUPR2R_BH() {
return SSUPR2R_BH;
}

public byte getSVACTS5() {
return SVACTS5;
}

public short getTELWHY() {
return TELWHY;
}

public short getTENURE_DV() {
return TENURE_DV;
}

public int getTLFIYR() {
return TLFIYR;
}

public int getTLFIYRL() {
return TLFIYRL;
}

public short getTUIN1() {
return TUIN1;
}

public short getTUIN2() {
return TUIN2;
}

public short getTUJBPL() {
return TUJBPL;
}

public short getVOTE() {
return VOTE;
}

public short getVOTE1() {
return VOTE1;
}

public short getVOTE2() {
return VOTE2;
}

public short getVOTE3() {
return VOTE3;
}

public short getVOTE3_BH() {
return VOTE3_BH;
}

public short getVOTE4() {
return VOTE4;
}

public short getVOTE4_BH() {
return VOTE4_BH;
}

public short getVOTE5() {
return VOTE5;
}

public short getVOTE6() {
return VOTE6;
}

public byte getVOTE7() {
return VOTE7;
}

public byte getVOTE8() {
return VOTE8;
}

public byte getVOTE8_BH() {
return VOTE8_BH;
}

public byte getWINDF() {
return WINDF;
}

public byte getWINDFA() {
return WINDFA;
}

public byte getWINDFB() {
return WINDFB;
}

public byte getWINDFC() {
return WINDFC;
}

public byte getWINDFD() {
return WINDFD;
}

public byte getWINDFE() {
return WINDFE;
}

public byte getWINDFF() {
return WINDFF;
}

public byte getWINDFG() {
return WINDFG;
}

public byte getWINDFH() {
return WINDFH;
}

public int getWINDFY() {
return WINDFY;
}

public short getWKTIME() {
return WKTIME;
}

public byte getXDT1M() {
return XDT1M;
}

public byte getXDT1PL() {
return XDT1PL;
}

public byte getXDT1Y() {
return XDT1Y;
}

public byte getXDT2M() {
return XDT2M;
}

public byte getXDT2PL() {
return XDT2PL;
}

public byte getXDT2Y() {
return XDT2Y;
}

public byte getXDT3M() {
return XDT3M;
}

public byte getXDT3PL() {
return XDT3PL;
}

public byte getXDT3Y() {
return XDT3Y;
}

public short getXDTS() {
return XDTS;
}

protected double XEWGHT() {
return XEWGHT;
}

public short getXPCHC() {
return XPCHC;
}

public short getXPCHCF() {
return XPCHCF;
}

protected double XRWGHT() {
return XRWGHT;
}

public short getYPPAR() {
return YPPAR;
}

public short getYR2UK() {
return YR2UK;
}

public US_Wave5_indresp_Record(String line) {
s = line.split("\t");
initPID(s[0]);
initHIQUALB_DV(s[1]);
initHID(s[2]);
initHIDP(s[3]);
initPNO(s[4]);
initISTRTDATD(s[5]);
initISTRTDATM(s[6]);
initISTRTDATHH(s[7]);
initISTRTDATHM(s[8]);
initIVLYR(s[9]);
initIVIEVR(s[10]);
initLKNBRD(s[11]);
initLKMOVE(s[12]);
initLKMOVY(s[13]);
initPLNEW(s[14]);
initPLNOWM(s[15]);
initMOVJB(s[16]);
initMOVJBA(s[17]);
initMOVJBB(s[18]);
initMOVJBC(s[19]);
initMOVJBD(s[20]);
initMOVJBE(s[21]);
initMOVJBF(s[22]);
initMOVJBG(s[23]);
initMOVJBH(s[24]);
initMOVJBI(s[25]);
initMOVY1(s[26]);
initMOVY2(s[27]);
initDOBY(s[28]);
initSEX(s[29]);
initJBSTAT(s[30]);
initEDLYR(s[31]);
initEDENDM(s[32]);
initEDENDY(s[33]);
initEDTYPE_BH(s[34]);
initQFX(s[35]);
initQFXA(s[36]);
initQFXB(s[37]);
initQFXC(s[38]);
initQFXD(s[39]);
initQFXE(s[40]);
initQFXF(s[41]);
initQFXG(s[42]);
initQFXH(s[43]);
initQFXI(s[44]);
initQFXJ(s[45]);
initQFXK(s[46]);
initQFXL(s[47]);
initQFXM(s[48]);
initQFXN(s[49]);
initQFEDX(s[50]);
initQFEDXA(s[51]);
initNQFEXA(s[52]);
initQFEDXB(s[53]);
initNQFEXB(s[54]);
initQFEDXC(s[55]);
initNQFEXC(s[56]);
initQFEDXD(s[57]);
initQFEDXE(s[58]);
initNQFEXE(s[59]);
initQFEDXF(s[60]);
initNQFEXF(s[61]);
initQFEDXG(s[62]);
initNQFEXG(s[63]);
initQFEDXH(s[64]);
initNQFEXH(s[65]);
initQFEDXI(s[66]);
initNQFEXI(s[67]);
initQFEDXJ(s[68]);
initNQFEXJ(s[69]);
initQFEDXK(s[70]);
initNQFEXK(s[71]);
initMLSTAT_BH(s[72]);
initMSTATSAM(s[73]);
initMLCHM(s[74]);
initMLCHY(s[75]);
initYR2UK(s[76]);
initRACE(s[77]);
initSCHOOL(s[78]);
initSCEND(s[79]);
initSCTYPE(s[80]);
initSCNOW(s[81]);
initFETYPE(s[82]);
initFENOW_BH(s[83]);
initFEEND(s[84]);
initQFHAS(s[85]);
initQFA(s[86]);
initQFB(s[87]);
initQFC(s[88]);
initQFD(s[89]);
initQFE(s[90]);
initQFF(s[91]);
initQFG(s[92]);
initQFH(s[93]);
initQFI(s[94]);
initQFJ(s[95]);
initQFK(s[96]);
initQFL(s[97]);
initQFM(s[98]);
initQFN(s[99]);
initQFED(s[100]);
initQFEDA(s[101]);
initNQFEDA(s[102]);
initQFEDB(s[103]);
initNQFEDB(s[104]);
initQFEDC(s[105]);
initNQFEDC(s[106]);
initQFEDD(s[107]);
initNQFEDD(s[108]);
initQFEDE(s[109]);
initNQFEDE(s[110]);
initQFEDF(s[111]);
initNQFEDF(s[112]);
initQFEDG(s[113]);
initNQFEDG(s[114]);
initQFEDH(s[115]);
initNQFEDH(s[116]);
initQFEDI(s[117]);
initNQFEDI(s[118]);
initQFEDJ(s[119]);
initNQFEDJ(s[120]);
initQFEDK(s[121]);
initNQFEDK(s[122]);
initQFEDL(s[123]);
initNQFEDL(s[124]);
initQFEDM(s[125]);
initNQFEDM(s[126]);
initQFEDN(s[127]);
initNQFEDN(s[128]);
initQFEDO(s[129]);
initNQFEDO(s[130]);
initQFEDP(s[131]);
initNQFEDP(s[132]);
initQFEDQ(s[133]);
initNQFEDQ(s[134]);
initQFEDR(s[135]);
initNQFEDR(s[136]);
initQFEDS(s[137]);
initNQFEDS(s[138]);
initHLSTAT(s[139]);
initHLZEST(s[140]);
initHLDSBL(s[141]);
initHLPRB(s[142]);
initHLPRBA(s[143]);
initHLPRBB(s[144]);
initHLPRBC(s[145]);
initHLPRBD(s[146]);
initHLPRBE(s[147]);
initHLPRBF(s[148]);
initHLPRBG(s[149]);
initHLPRBH(s[150]);
initHLPRBI(s[151]);
initHLPRBJ(s[152]);
initHLPRBK(s[153]);
initHLPRBL(s[154]);
initHLPRBM(s[155]);
initHLLT(s[156]);
initHLLTA(s[157]);
initHLLTB(s[158]);
initHLLTC(s[159]);
initHLLTD(s[160]);
initHLLTE(s[161]);
initHLLTW(s[162]);
initHLENDW(s[163]);
initHLLTWA(s[164]);
initHL2GP(s[165]);
initXDTS(s[166]);
initNXDTS(s[167]);
initXDT1M(s[168]);
initXDT2M(s[169]);
initXDT3M(s[170]);
initXDT1Y(s[171]);
initXDT2Y(s[172]);
initXDT3Y(s[173]);
initXDT1PL(s[174]);
initXDT2PL(s[175]);
initXDT3PL(s[176]);
initHOSP(s[177]);
initHOSPD(s[178]);
initHOSPCH(s[179]);
initHOSPNHS(s[180]);
initHLSV(s[181]);
initHLSVA(s[182]);
initHLSVAN(s[183]);
initHLSVAF(s[184]);
initHLSVB(s[185]);
initHLSVBN(s[186]);
initHLSVBF(s[187]);
initHLSVC(s[188]);
initHLSVCN(s[189]);
initHLSVCF(s[190]);
initHLSVD(s[191]);
initHLSVDN(s[192]);
initHLSVDF(s[193]);
initHLSVE(s[194]);
initHLSVEN(s[195]);
initHLSVEF(s[196]);
initHLSVF(s[197]);
initHLSVFN(s[198]);
initHLSVFF(s[199]);
initHLSVG(s[200]);
initHLSVGN(s[201]);
initHLSVGF(s[202]);
initHLSVH(s[203]);
initHLSVHN(s[204]);
initHLSVHF(s[205]);
initHLSVI(s[206]);
initHLSVIN(s[207]);
initHLSVIF(s[208]);
initHLSVJ(s[209]);
initHLSVJN(s[210]);
initHLSVJF(s[211]);
initHLSVK(s[212]);
initHLSVKN(s[213]);
initHLSVKF(s[214]);
initHLSVL(s[215]);
initHLSVLN(s[216]);
initHLSVLF(s[217]);
initHLSVM(s[218]);
initHLSVMN(s[219]);
initHLSVMF(s[220]);
initHLCK(s[221]);
initHLCKA(s[222]);
initHLCKAN(s[223]);
initHLCKB(s[224]);
initHLCKBN(s[225]);
initHLCKC(s[226]);
initHLCKCN(s[227]);
initHLCKD(s[228]);
initHLCKDN(s[229]);
initHLCKE(s[230]);
initHLCKEN(s[231]);
initHLCKF(s[232]);
initHLCKFN(s[233]);
initHLCKG(s[234]);
initHLCKGN(s[235]);
initHLCKH(s[236]);
initHLCKHN(s[237]);
initHLCKI(s[238]);
initHLCKIN(s[239]);
initSMOKER(s[240]);
initNCIGS(s[241]);
initOPHLA(s[242]);
initOPHLB(s[243]);
initOPHLC(s[244]);
initAIDHH(s[245]);
initAIDHUA(s[246]);
initAIDHUB(s[247]);
initAIDHUC(s[248]);
initAIDXHH(s[249]);
initNAIDXHH_BH(s[250]);
initAIDHU1A(s[251]);
initAIDHU2A(s[252]);
initAIDHRS_BH(s[253]);
initIVMA(s[254]);
initIVMB(s[255]);
initIVMC(s[256]);
initIVMD(s[257]);
initIVME(s[258]);
initJBHAS(s[259]);
initJBOFF(s[260]);
initJBOFFY_BH(s[261]);
initJBTERM(s[262]);
initJBSIC(s[263]);
initJBSEMP(s[264]);
initJBMNGR(s[265]);
initJBSIZE(s[266]);
initJBHRS(s[267]);
initJBOT(s[268]);
initJBOTPD(s[269]);
initJBHRLK(s[270]);
initJBPL_BH(s[271]);
initJBTTWT(s[272]);
initJBTTWM(s[273]);
initJBSAT1(s[274]);
initJBSAT2(s[275]);
initJBSAT3(s[276]);
initJBSAT4(s[277]);
initJBSAT5(s[278]);
initJBSAT6(s[279]);
initJBSAT7(s[280]);
initJBSAT_BH(s[281]);
initPAYGL(s[282]);
initPAYGW(s[283]);
initPAYNL(s[284]);
initPAYNW(s[285]);
initPAYSLP(s[286]);
initPAYUSL(s[287]);
initPAYU(s[288]);
initPAYUW(s[289]);
initPAYUG(s[290]);
initPAYDF1(s[291]);
initPAYDF2(s[292]);
initPAYDF3(s[293]);
initPAYDF4(s[294]);
initPAYDF5(s[295]);
initPAYDF6(s[296]);
initPAYDF7(s[297]);
initPAYDF8(s[298]);
initJBBGD(s[299]);
initJBBGM(s[300]);
initJBBGLY(s[301]);
initJBSECT_BH(s[302]);
initJBONUS(s[303]);
initJBRISE(s[304]);
initTUJBPL(s[305]);
initTUIN1(s[306]);
initTUIN2(s[307]);
initJBOPPS(s[308]);
initJBTIME(s[309]);
initPAYS(s[310]);
initPAYSW(s[311]);
initPAYSG(s[312]);
initJBPEN(s[313]);
initJBPENM(s[314]);
initPAYLY(s[315]);
initPAYLYW(s[316]);
initPAYLYG(s[317]);
initJSBOSS(s[318]);
initJSSIZE(s[319]);
initJSHRS(s[320]);
initJSHRLK(s[321]);
initJSTIME(s[322]);
initJSTYPE(s[323]);
initJSACCS(s[324]);
initJSPRF(s[325]);
initJSPRBM(s[326]);
initJSPRBY(s[327]);
initJSPREM(s[328]);
initJSPREY(s[329]);
initJSPAYL(s[330]);
initJSPYBM(s[331]);
initJSPYBY(s[332]);
initJSPYEM(s[333]);
initJSPYEY(s[334]);
initJSPL_BH(s[335]);
initJSTTWTB(s[336]);
initJSTTWM(s[337]);
initJSSAT1(s[338]);
initJSSAT2(s[339]);
initJSSAT3(s[340]);
initJSSAT4(s[341]);
initJSSAT5(s[342]);
initJSSAT(s[343]);
initJBED(s[344]);
initJBED1(s[345]);
initJBED2(s[346]);
initJBED3(s[347]);
initJBED4(s[348]);
initJBED5(s[349]);
initJBEDQ(s[350]);
initJBEDP1(s[351]);
initRACH12(s[352]);
initJBCHC1(s[353]);
initJBCHC2(s[354]);
initJBCHC3(s[355]);
initXPCHCF(s[356]);
initXPCHC(s[357]);
initHUXPCH(s[358]);
initHUNURS(s[359]);
initJULK1(s[360]);
initJULK4(s[361]);
initJULKJB(s[362]);
initJUSPEC(s[363]);
initJUHRSX(s[364]);
initJUPAYX(s[365]);
initJUPAYL(s[366]);
initJUHRSL(s[367]);
initEAAGE(s[368]);
initJBUB(s[369]);
initJBUBY(s[370]);
initJ2HAS(s[371]);
initJ2SEMP(s[372]);
initJ2HRS(s[373]);
initJ2PAY_DV(s[374]);
initJBHHA(s[375]);
initJBHHB(s[376]);
initJBHHC(s[377]);
initJBHHD(s[378]);
initJBHHE(s[379]);
initJBHHF(s[380]);
initIVEA(s[381]);
initIVEB(s[382]);
initIVEC(s[383]);
initIVED(s[384]);
initIVEE(s[385]);
initEDNEW(s[386]);
initEDNEW1(s[387]);
initEDNEW2(s[388]);
initEDNEW3(s[389]);
initEDNEW4(s[390]);
initEDNEWQ(s[391]);
initEDNEWP1(s[392]);
initNEMST(s[393]);
initCJSBGD(s[394]);
initCJSBGM(s[395]);
initCJSBGY(s[396]);
initCJSBLY(s[397]);
initNJBS(s[398]);
initJBHAD(s[399]);
initJLSIC(s[400]);
initJLSEMP(s[401]);
initJLBOSS(s[402]);
initJLMNGR(s[403]);
initJLSIZE(s[404]);
initIVJA(s[405]);
initIVJB(s[406]);
initIVJC(s[407]);
initIVJD(s[408]);
initIVJE(s[409]);
initOPSOCA(s[410]);
initOPSOCB(s[411]);
initOPSOCC(s[412]);
initOPSOCD(s[413]);
initOPSOCE(s[414]);
initOPSOCF(s[415]);
initVOTE1(s[416]);
initVOTE2(s[417]);
initVOTE3_BH(s[418]);
initVOTE4_BH(s[419]);
initVOTE5(s[420]);
initVOTE7(s[421]);
initVOTE8_BH(s[422]);
initVOTE6(s[423]);
initOPPOL1(s[424]);
initOPPOL2(s[425]);
initOPPOL3(s[426]);
initOPPOL4(s[427]);
initOPCHD1(s[428]);
initOPCHD2(s[429]);
initOPCHD3(s[430]);
initOPCHD4(s[431]);
initORG(s[432]);
initORGM1(s[433]);
initORGA1(s[434]);
initORGM2(s[435]);
initORGA2(s[436]);
initORGM3(s[437]);
initORGA3(s[438]);
initORGM4(s[439]);
initORGA4(s[440]);
initORGM5(s[441]);
initORGA5(s[442]);
initORGM6(s[443]);
initORGA6(s[444]);
initORGM7(s[445]);
initORGA7(s[446]);
initORGM11(s[447]);
initORGA11(s[448]);
initORGM12(s[449]);
initORGA12(s[450]);
initORGM13(s[451]);
initORGA13(s[452]);
initORGM14(s[453]);
initORGA14(s[454]);
initORGM15(s[455]);
initORGA15(s[456]);
initORGM16(s[457]);
initORGA16(s[458]);
initORGM10(s[459]);
initORGA10(s[460]);
initORGM8(s[461]);
initORGA8(s[462]);
initORGM9(s[463]);
initORGA9(s[464]);
initORGA(s[465]);
initOPRLG2(s[466]);
initCARUSE(s[467]);
initYPPAR(s[468]);
initPYHLTH(s[469]);
initPYHWRK(s[470]);
initPYSXED(s[471]);
initPYSXAG(s[472]);
initPYNYP(s[473]);
initPYPNO1(s[474]);
initPYAGE1(s[475]);
initPYPNO2(s[476]);
initPYAGE2(s[477]);
initPYPNO3(s[478]);
initPYAGE3(s[479]);
initPYWHR1(s[480]);
initPYMAN1(s[481]);
initPYARG1(s[482]);
initPYTLK1(s[483]);
initPYSMK1(s[484]);
initPYSAD1(s[485]);
initPYWOR1(s[486]);
initPYHSW1(s[487]);
initPYHAP1(s[488]);
initPYHFM1(s[489]);
initPYHFR1(s[490]);
initPYHLF1(s[491]);
initPYHLT1(s[492]);
initPYWHR2(s[493]);
initPYMAN2(s[494]);
initPYARG2(s[495]);
initPYTLK2(s[496]);
initPYSMK2(s[497]);
initPYSAD2(s[498]);
initPYWOR2(s[499]);
initPYHSW2(s[500]);
initPYHAP2(s[501]);
initPYHFM2(s[502]);
initPYHFR2(s[503]);
initPYHLF2(s[504]);
initPYHLT2(s[505]);
initPYWHR3(s[506]);
initPYMAN3(s[507]);
initPYARG3(s[508]);
initPYTLK3(s[509]);
initPYSMK3(s[510]);
initPYSAD3(s[511]);
initPYWOR3(s[512]);
initPYHSW3(s[513]);
initPYHAP3(s[514]);
initPYHFM3(s[515]);
initPYHFR3(s[516]);
initPYHLF3(s[517]);
initPYHLT3(s[518]);
initPYRA(s[519]);
initPYSAT1(s[520]);
initPYSAT2(s[521]);
initPYSAT3(s[522]);
initPYSPN1(s[523]);
initPYSTY1(s[524]);
initPYTAE1(s[525]);
initPYTAM1(s[526]);
initPYTAS1(s[527]);
initPYSTE1(s[528]);
initPYSTM1(s[529]);
initPYSTS1(s[530]);
initPYSPN2(s[531]);
initPYSTY2(s[532]);
initPYTAE2(s[533]);
initPYTAM2(s[534]);
initPYTAS2(s[535]);
initPYSTE2(s[536]);
initPYSTM2(s[537]);
initPYSTS2(s[538]);
initPYSPN3(s[539]);
initPYSTY3(s[540]);
initPYTAE3(s[541]);
initPYTAM3(s[542]);
initPYTAS3(s[543]);
initPYSTE3(s[544]);
initPYSTM3(s[545]);
initPYSTS3(s[546]);
initF101(s[547]);
initF102(s[548]);
initF103(s[549]);
initF104(s[550]);
initF105(s[551]);
initF106(s[552]);
initF116(s[553]);
initF117(s[554]);
initF118(s[555]);
initF119(s[556]);
initF120(s[557]);
initF121(s[558]);
initF122(s[559]);
initF123(s[560]);
initF124(s[561]);
initF125(s[562]);
initF131(s[563]);
initF132(s[564]);
initF133(s[565]);
initF134(s[566]);
initF135(s[567]);
initF136(s[568]);
initF137(s[569]);
initF138(s[570]);
initF139(s[571]);
initF140(s[572]);
initF141(s[573]);
initF151(s[574]);
initF152(s[575]);
initF153(s[576]);
initF154(s[577]);
initF155(s[578]);
initF156(s[579]);
initF157(s[580]);
initF158(s[581]);
initF159(s[582]);
initNF1(s[583]);
initFINNOW(s[584]);
initFISITC(s[585]);
initFISITY(s[586]);
initFISITX(s[587]);
initOPXPSV(s[588]);
initOPXPCR(s[589]);
initFCCARD(s[590]);
initFIYRDI(s[591]);
initFIYRDIU(s[592]);
initSAVE(s[593]);
initSAVED(s[594]);
initSAVEY1(s[595]);
initSAVEY2(s[596]);
initSAVEK(s[597]);
initSAVEKB1(s[598]);
initSAVEKB2(s[599]);
initSAVEKB3(s[600]);
initSAVEKB4(s[601]);
initSAVEJ(s[602]);
initBANK(s[603]);
initBANKK(s[604]);
initBANKKB1(s[605]);
initBANKKB2(s[606]);
initBANKKB3(s[607]);
initBANKKB4(s[608]);
initBANKJ(s[609]);
initNVEST(s[610]);
initNVESTA(s[611]);
initNVESTB(s[612]);
initNVESTC(s[613]);
initNVESTD(s[614]);
initNVESTE(s[615]);
initNVESTF(s[616]);
initNVESTG(s[617]);
initNVESTN(s[618]);
initNVESTL(s[619]);
initNVESTK(s[620]);
initNVESTC1(s[621]);
initNVESTC2(s[622]);
initNVESTC3(s[623]);
initNVESTC4(s[624]);
initNVESTJ(s[625]);
initPPPEN(s[626]);
initPENB4(s[627]);
initPENB4YR(s[628]);
initPENB4V(s[629]);
initPENB4W(s[630]);
initPENYR(s[631]);
initPENADD(s[632]);
initPENADV(s[633]);
initPENADW(s[634]);
initWINDF(s[635]);
initWINDFA(s[636]);
initWINDFB(s[637]);
initWINDFC(s[638]);
initWINDFD(s[639]);
initWINDFE(s[640]);
initWINDFF(s[641]);
initWINDFG(s[642]);
initWINDFH(s[643]);
initWINDFY(s[644]);
initFTHH(s[645]);
initFTHH1(s[646]);
initFTHH11(s[647]);
initFTHH12(s[648]);
initFTHH13(s[649]);
initFTHH14(s[650]);
initFTHH15(s[651]);
initFTHH16(s[652]);
initFTHH1V(s[653]);
initFTHH1W(s[654]);
initFTHH2(s[655]);
initFTHH21(s[656]);
initFTHH22(s[657]);
initFTHH23(s[658]);
initFTHH24(s[659]);
initFTHH25(s[660]);
initFTHH26(s[661]);
initFTHH2V(s[662]);
initFTHH2W(s[663]);
initFTHH3(s[664]);
initFTHH31(s[665]);
initFTHH32(s[666]);
initFTHH33(s[667]);
initFTHH34(s[668]);
initFTHH35(s[669]);
initFTHH36(s[670]);
initFTHH3V(s[671]);
initFTHH3W(s[672]);
initFTEXHH(s[673]);
initFTEXA(s[674]);
initFTEXA1(s[675]);
initFTEXA2(s[676]);
initFTEXA3(s[677]);
initFTEXA4(s[678]);
initFTEXA5(s[679]);
initFTEXA6(s[680]);
initFTEXAV(s[681]);
initFTEXAW(s[682]);
initFTEXB(s[683]);
initFTEXB1(s[684]);
initFTEXB2(s[685]);
initFTEXB3(s[686]);
initFTEXB4(s[687]);
initFTEXB5(s[688]);
initFTEXB6(s[689]);
initFTEXBV(s[690]);
initFTEXBW(s[691]);
initFTEXC(s[692]);
initFTEXC1(s[693]);
initFTEXC2(s[694]);
initFTEXC3(s[695]);
initFTEXC4(s[696]);
initFTEXC5(s[697]);
initFTEXC6(s[698]);
initFTEXCV(s[699]);
initFTEXCW(s[700]);
initDEBT(s[701]);
initDEBTA(s[702]);
initDEBTB(s[703]);
initDEBTC(s[704]);
initDEBTD(s[705]);
initDEBTE(s[706]);
initDEBTF(s[707]);
initDEBTG(s[708]);
initDEBTY(s[709]);
initDEBTC1(s[710]);
initDEBTC2(s[711]);
initDEBTC3(s[712]);
initDEBTC4(s[713]);
initDEBTJ(s[714]);
initSPINHH(s[715]);
initHURUNS(s[716]);
initHUBOSS(s[717]);
initHUBUYS_BH(s[718]);
initHUFRYS_BH(s[719]);
initHUMOPS_BH(s[720]);
initHUIRON_BH(s[721]);
initHHCH12(s[722]);
initHUSITS(s[723]);
initHOWLNG(s[724]);
initIVFA(s[725]);
initIVFB(s[726]);
initIVFC(s[727]);
initIVFD(s[728]);
initIVFE(s[729]);
initIENDDATHH(s[730]);
initIENDDATHM(s[731]);
initIVSC(s[732]);
initMRSSCI(s[733]);
initMRSSCH(s[734]);
initIVPRSNT(s[735]);
initIV2(s[736]);
initIV4(s[737]);
initIV5(s[738]);
initIV6A(s[739]);
initIV6B(s[740]);
initIV6C(s[741]);
initIV6D(s[742]);
initIV6E(s[743]);
initIV6F(s[744]);
initIV7(s[745]);
initSCGHQA(s[746]);
initSCGHQB(s[747]);
initSCGHQC(s[748]);
initSCGHQD(s[749]);
initSCGHQE(s[750]);
initSCGHQF(s[751]);
initSCGHQG(s[752]);
initSCGHQH(s[753]);
initSCGHQI(s[754]);
initSCGHQJ(s[755]);
initSCGHQK(s[756]);
initSCGHQL(s[757]);
initOPFAMA(s[758]);
initOPFAMB(s[759]);
initOPFAMC(s[760]);
initOPFAMD(s[761]);
initOPFAME(s[762]);
initOPFAMF(s[763]);
initOPFAMG(s[764]);
initOPFAMH(s[765]);
initOPFAMI(s[766]);
initSSUPA(s[767]);
initSSUPB(s[768]);
initSSUPC(s[769]);
initSSUPD(s[770]);
initSSUPE(s[771]);
initSCSUP1(s[772]);
initSSUPR2R_BH(s[773]);
initPRRS2I(s[774]);
initPRIPN(s[775]);
initPRWHY(s[776]);
initPPLEVR(s[777]);
initPRFEHQ(s[778]);
initPRSEHQ(s[779]);
initPRESBGM(s[780]);
initPRESBGY(s[781]);
initPRESLY(s[782]);
initPRF101(s[783]);
initPRF102(s[784]);
initPRF116(s[785]);
initPRF125(s[786]);
initPRF131(s[787]);
initPRF134(s[788]);
initPRF135(s[789]);
initPRF137(s[790]);
initPRF139(s[791]);
initPRF141(s[792]);
initPRFIRN(s[793]);
initPREARN_BH(s[794]);
initPRJBLY(s[795]);
initPRFITB_BH(s[796]);
initIVPA(s[797]);
initIVPB(s[798]);
initIVPC(s[799]);
initIVPD(s[800]);
initIVPE(s[801]);
initTELWHY(s[802]);
initPRJBFT(s[803]);
initTLFIYRL(s[804]);
initTLFIYR(s[805]);
initPIDP(s[806]);
initIVIOW4(s[807]);
initHHMEM(s[808]);
initNEWHY(s[809]);
initJNMNTH(s[810]);
initNEYRJN(s[811]);
initIVFIO(s[812]);
initIODC(s[813]);
initHGR2R(s[814]);
initHGSEX(s[815]);
initBIRTHY(s[816]);
initMASTAT(s[817]);
initPPNO(s[818]);
initHGEMP(s[819]);
initHGBIOF(s[820]);
initHGBIOM(s[821]);
initHGRA(s[822]);
initAGE_DV(s[823]);
initAGE12(s[824]);
initBUTYPE(s[825]);
initBUNO(s[826]);
initNCHILD_DV(s[827]);
initHOH(s[828]);
initRACH16_DV(s[829]);
initSAMPST_BH(s[830]);
initMOVEST(s[831]);
initREGION(s[832]);
initHHSIZE(s[833]);
initHHTYPE(s[834]);
initTENURE_DV(s[835]);
initQFEDHI(s[836]);
initQFVOC(s[837]);
initQFACHI(s[838]);
initJBFT_DV(s[839]);
initPAYG_DV(s[840]);
initPAYN_DV(s[841]);
initPAYGU_DV(s[842]);
initPAYNU_DV(s[843]);
initPAYGTY(s[844]);
initPAYGLY(s[845]);
initPAYNTY(s[846]);
initPAYNLY(s[847]);
initJSPROF(s[848]);
initJSPAYG(s[849]);
initCJSTEN(s[850]);
initCJSWK9(s[851]);
initJLID(s[852]);
initJLYID(s[853]);
initJTYID(s[854]);
initJBSEG_DV(s[855]);
initJBGOLD(s[856]);
initJBRGSC_DV(s[857]);
initJBCSSM(s[858]);
initJBCSSF(s[859]);
initJBHGS(s[860]);
initJBSEC_BH(s[861]);
initNJBWKS(s[862]);
initNJUWKS(s[863]);
initNJIWKS(s[864]);
initNJBNEW(s[865]);
initNJBSP(s[866]);
initNJUSP(s[867]);
initNJISP(s[868]);
initJBSTATL(s[869]);
initJBSTATT(s[870]);
initJLSEG_DV(s[871]);
initJLGOLD(s[872]);
initJLRGSC_DV(s[873]);
initJLCSSM(s[874]);
initJLCSSF(s[875]);
initJLHGS(s[876]);
initJLSEC(s[877]);
initNORGM(s[878]);
initNORGA(s[879]);
initVOTE(s[880]);
initFIMNP(s[881]);
initFIMNB(s[882]);
initFIMNI(s[883]);
initFIMNT(s[884]);
initFIMNLABGRS_DV(s[885]);
initFIMNNL(s[886]);
initFIMNGRS_DV(s[887]);
initFIYRL(s[888]);
initFIYRNL(s[889]);
initFIYRP(s[890]);
initFIYRB(s[891]);
initFIYRT(s[892]);
initFIYRI(s[893]);
initFIYR(s[894]);
initFIHHMN(s[895]);
initSCGHQ1_DV(s[896]);
initSCGHQ2_DV(s[897]);
initSPJB(s[898]);
initSPJBHR(s[899]);
initSPJBOT(s[900]);
initSPPAYG(s[901]);
initSPJBYR(s[902]);
initLRWGHT(s[903]);
initLEWGHT(s[904]);
initXRWGHT(s[905]);
initXEWGHT(s[906]);
initJ2PAY_IF(s[907]);
initFIYRDII(s[908]);
initPREARNI(s[909]);
initPRFITBI(s[910]);
initPAYGU_IF(s[911]);
initPAYNU_IF(s[912]);
initPAYGTI(s[913]);
initPAYGLI(s[914]);
initPAYNTI(s[915]);
initPAYNLI(s[916]);
initJSPROFI(s[917]);
initJSPAYGI(s[918]);
initFIMNPI(s[919]);
initFIMNBI(s[920]);
initFIMNII(s[921]);
initFIMNTI(s[922]);
initFIMNNLI(s[923]);
initFIMNLI(s[924]);
initFIMNTHI(s[925]);
initFIYRLI(s[926]);
initFIYRNLI(s[927]);
initFIYRPI(s[928]);
initFIYRBI(s[929]);
initFIYRTI(s[930]);
initFIYRII(s[931]);
initFIYEARI(s[932]);
initSPPAYGI(s[933]);
initFIHHMNI(s[934]);
initIMPEVENT1(s[935]);
initIMPEVENT1S(s[936]);
initIMPEVENT2(s[937]);
initIMPEVENT2S(s[938]);
initIMPEVENT3(s[939]);
initIMPEVENT3S(s[940]);
initIMPEVENT4(s[941]);
initIMPEVENT4S(s[942]);
initMRJEND(s[943]);
initMRJSOC(s[944]);
initMRJSIC(s[945]);
initMRJSEMP(s[946]);
initMRJBOSS(s[947]);
initMRJMNGR(s[948]);
initMRJSIZE(s[949]);
initMRJSEG(s[950]);
initMRJGOLD(s[951]);
initMRJRGSC(s[952]);
initMRJCSSM(s[953]);
initMRJCSSF(s[954]);
initMRJHGS(s[955]);
initMRJSEC(s[956]);
initISTRTDATY(s[957]);
initPLNOWY4(s[958]);
initEDENDY4(s[959]);
initMLCHY4(s[960]);
initYR2UK4(s[961]);
initJBBGY(s[962]);
initJSPRBY4(s[963]);
initJSPREY4(s[964]);
initJSPYBY4(s[965]);
initJSPYEY4(s[966]);
initCJSBGY4(s[967]);
initJLENDY(s[968]);
initPENB4Y4(s[969]);
initPENYR4(s[970]);
initPRESBY4(s[971]);
initPRJBBY4(s[972]);
initJNYEAR(s[973]);
initSPPID_BH(s[974]);
initFNPID_BH(s[975]);
initMNPID_BH(s[976]);
initDISTMOV(s[977]);
initGOR_DV(s[978]);
initISCED(s[979]);
initCASMIN(s[980]);
initMRJISCO88_CC(s[981]);
initJBISCO_CC(s[982]);
initJLISCO_CC(s[983]);
initMRJISCO_CC(s[984]);
initPLBORNC_CC(s[985]);
initSCSSUPR2R(s[986]);
initJ2PAY_BH(s[987]);
initJLNSSEC_DV(s[988]);
initMRJNSSEC_DV(s[989]);
initJBNSSEC_DV(s[990]);
initJBNSSEC8_DV(s[991]);
initJLNSSEC8_DV(s[992]);
initMRJNSSEC8_DV(s[993]);
initSVACTS5(s[994]);
initSCOPFAMA(s[995]);
initSCOPFAMB(s[996]);
initSCOPFAMD(s[997]);
initSCOPFAMF(s[998]);
initSCOPFAMH(s[999]);
initSAMPST(s[1000]);
initJULK4WK(s[1001]);
initPJULK4WK(s[1002]);
initJSTTWT(s[1003]);
initMLSTAT(s[1004]);
initEDTYPE(s[1005]);
initJBSECT(s[1006]);
initPLBORNC(s[1007]);
initVOTE3(s[1008]);
initVOTE4(s[1009]);
initVOTE8(s[1010]);
initHUBUYS(s[1011]);
initHUFRYS(s[1012]);
initHUIRON(s[1013]);
initHUMOPS(s[1014]);
initJBPL(s[1015]);
initJSPL(s[1016]);
initAIDHRS(s[1017]);
initJBSOC90_CC(s[1018]);
initJLSOC90_CC(s[1019]);
initJ2SOC90_CC(s[1020]);
initJUSOC90_CC(s[1021]);
initJBSOC90LY_CC(s[1022]);
initSPSOC90_CC(s[1023]);
initJBISCO88_CC(s[1024]);
initJLISCO88_CC(s[1025]);
initMEMORIG_BH(s[1026]);
initMEMORIG(s[1027]);
initHHORIG(s[1028]);
initWKTIME(s[1029]);
initHIQUAL_DV(s[1030]);
}
}
