/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.us.data.hhresp;
import java.io.Serializable;
public class US_hhresp_Record implements Serializable {
protected String[] s;
protected byte AGECHY_DV;
protected byte CDUSE1;
protected byte CDUSE2;
protected byte CDUSE6;
protected byte CDUSE8;
protected byte CDUSE9;
protected byte CDUSE96;
protected double FIHHMNGRS_DV;
protected byte GOR_DV;
protected byte HEATCH;
protected byte HHSIZE;
protected int HIDP;
protected int HSCOST;
protected byte HSJB;
protected byte HSOWR10;
protected byte HSOWR11;
protected byte HSOWR110;
protected byte HSOWR12;
protected byte HSOWR13;
protected byte HSOWR14;
protected byte HSOWR15;
protected byte HSOWR16;
protected byte HSOWR17;
protected byte HSOWR18;
protected byte HSOWR19;
protected int HSVAL;
protected short HSYR04;
protected short HSYRBUY;
protected byte INTDATED;
protected byte INTDATEM;
protected byte IVH1;
protected byte IVH10;
protected byte IVH2;
protected byte IVH3;
protected byte IVH4;
protected byte IVH5;
protected byte IVH6;
protected byte IVH7;
protected byte IVH8;
protected byte IVH9;
protected byte MGLIFE;
protected byte NCH02_DV;
protected byte NCH1215_DV;
protected byte NCH34_DV;
protected byte NCH511_DV;
protected byte NEMP_DV;
protected byte NKIDS_DV;
protected byte NONEPAR_DV;
protected byte NPENS_DV;
protected int RENT;
protected byte RENTF;
protected byte RENTLL;
protected byte RENTP0;
protected byte RENTP1;
protected byte RENTP10;
protected byte RENTP2;
protected byte RENTP3;
protected byte RENTP4;
protected byte RENTP5;
protected byte RENTP6;
protected byte RENTP7;
protected byte RENTP8;
protected byte RENTP9;
protected byte XPHSDB;
protected int XPMG;
protected final void initAGECHY_DV(String s) {
if (!s.trim().isEmpty()) {
AGECHY_DV = Byte.parseByte(s);
} else {
AGECHY_DV = Byte.MIN_VALUE;
}
}

protected final void initCDUSE1(String s) {
if (!s.trim().isEmpty()) {
CDUSE1 = Byte.parseByte(s);
} else {
CDUSE1 = Byte.MIN_VALUE;
}
}

protected final void initCDUSE2(String s) {
if (!s.trim().isEmpty()) {
CDUSE2 = Byte.parseByte(s);
} else {
CDUSE2 = Byte.MIN_VALUE;
}
}

protected final void initCDUSE6(String s) {
if (!s.trim().isEmpty()) {
CDUSE6 = Byte.parseByte(s);
} else {
CDUSE6 = Byte.MIN_VALUE;
}
}

protected final void initCDUSE8(String s) {
if (!s.trim().isEmpty()) {
CDUSE8 = Byte.parseByte(s);
} else {
CDUSE8 = Byte.MIN_VALUE;
}
}

protected final void initCDUSE9(String s) {
if (!s.trim().isEmpty()) {
CDUSE9 = Byte.parseByte(s);
} else {
CDUSE9 = Byte.MIN_VALUE;
}
}

protected final void initCDUSE96(String s) {
if (!s.trim().isEmpty()) {
CDUSE96 = Byte.parseByte(s);
} else {
CDUSE96 = Byte.MIN_VALUE;
}
}

protected final void initFIHHMNGRS_DV(String s) {
if (!s.trim().isEmpty()) {
FIHHMNGRS_DV = Double.parseDouble(s);
} else {
FIHHMNGRS_DV = Double.NaN;
}
}

protected final void initGOR_DV(String s) {
if (!s.trim().isEmpty()) {
GOR_DV = Byte.parseByte(s);
} else {
GOR_DV = Byte.MIN_VALUE;
}
}

protected final void initHEATCH(String s) {
if (!s.trim().isEmpty()) {
HEATCH = Byte.parseByte(s);
} else {
HEATCH = Byte.MIN_VALUE;
}
}

protected final void initHHSIZE(String s) {
if (!s.trim().isEmpty()) {
HHSIZE = Byte.parseByte(s);
} else {
HHSIZE = Byte.MIN_VALUE;
}
}

protected final void initHIDP(String s) {
if (!s.trim().isEmpty()) {
HIDP = Integer.parseInt(s);
} else {
HIDP = Integer.MIN_VALUE;
}
}

protected final void initHSCOST(String s) {
if (!s.trim().isEmpty()) {
HSCOST = Integer.parseInt(s);
} else {
HSCOST = Integer.MIN_VALUE;
}
}

protected final void initHSJB(String s) {
if (!s.trim().isEmpty()) {
HSJB = Byte.parseByte(s);
} else {
HSJB = Byte.MIN_VALUE;
}
}

protected final void initHSOWR10(String s) {
if (!s.trim().isEmpty()) {
HSOWR10 = Byte.parseByte(s);
} else {
HSOWR10 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR11(String s) {
if (!s.trim().isEmpty()) {
HSOWR11 = Byte.parseByte(s);
} else {
HSOWR11 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR110(String s) {
if (!s.trim().isEmpty()) {
HSOWR110 = Byte.parseByte(s);
} else {
HSOWR110 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR12(String s) {
if (!s.trim().isEmpty()) {
HSOWR12 = Byte.parseByte(s);
} else {
HSOWR12 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR13(String s) {
if (!s.trim().isEmpty()) {
HSOWR13 = Byte.parseByte(s);
} else {
HSOWR13 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR14(String s) {
if (!s.trim().isEmpty()) {
HSOWR14 = Byte.parseByte(s);
} else {
HSOWR14 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR15(String s) {
if (!s.trim().isEmpty()) {
HSOWR15 = Byte.parseByte(s);
} else {
HSOWR15 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR16(String s) {
if (!s.trim().isEmpty()) {
HSOWR16 = Byte.parseByte(s);
} else {
HSOWR16 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR17(String s) {
if (!s.trim().isEmpty()) {
HSOWR17 = Byte.parseByte(s);
} else {
HSOWR17 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR18(String s) {
if (!s.trim().isEmpty()) {
HSOWR18 = Byte.parseByte(s);
} else {
HSOWR18 = Byte.MIN_VALUE;
}
}

protected final void initHSOWR19(String s) {
if (!s.trim().isEmpty()) {
HSOWR19 = Byte.parseByte(s);
} else {
HSOWR19 = Byte.MIN_VALUE;
}
}

protected final void initHSVAL(String s) {
if (!s.trim().isEmpty()) {
HSVAL = Integer.parseInt(s);
} else {
HSVAL = Integer.MIN_VALUE;
}
}

protected final void initHSYR04(String s) {
if (!s.trim().isEmpty()) {
HSYR04 = Short.parseShort(s);
} else {
HSYR04 = Short.MIN_VALUE;
}
}

protected final void initHSYRBUY(String s) {
if (!s.trim().isEmpty()) {
HSYRBUY = Short.parseShort(s);
} else {
HSYRBUY = Short.MIN_VALUE;
}
}

protected final void initINTDATED(String s) {
if (!s.trim().isEmpty()) {
INTDATED = Byte.parseByte(s);
} else {
INTDATED = Byte.MIN_VALUE;
}
}

protected final void initINTDATEM(String s) {
if (!s.trim().isEmpty()) {
INTDATEM = Byte.parseByte(s);
} else {
INTDATEM = Byte.MIN_VALUE;
}
}

protected final void initIVH1(String s) {
if (!s.trim().isEmpty()) {
IVH1 = Byte.parseByte(s);
} else {
IVH1 = Byte.MIN_VALUE;
}
}

protected final void initIVH10(String s) {
if (!s.trim().isEmpty()) {
IVH10 = Byte.parseByte(s);
} else {
IVH10 = Byte.MIN_VALUE;
}
}

protected final void initIVH2(String s) {
if (!s.trim().isEmpty()) {
IVH2 = Byte.parseByte(s);
} else {
IVH2 = Byte.MIN_VALUE;
}
}

protected final void initIVH3(String s) {
if (!s.trim().isEmpty()) {
IVH3 = Byte.parseByte(s);
} else {
IVH3 = Byte.MIN_VALUE;
}
}

protected final void initIVH4(String s) {
if (!s.trim().isEmpty()) {
IVH4 = Byte.parseByte(s);
} else {
IVH4 = Byte.MIN_VALUE;
}
}

protected final void initIVH5(String s) {
if (!s.trim().isEmpty()) {
IVH5 = Byte.parseByte(s);
} else {
IVH5 = Byte.MIN_VALUE;
}
}

protected final void initIVH6(String s) {
if (!s.trim().isEmpty()) {
IVH6 = Byte.parseByte(s);
} else {
IVH6 = Byte.MIN_VALUE;
}
}

protected final void initIVH7(String s) {
if (!s.trim().isEmpty()) {
IVH7 = Byte.parseByte(s);
} else {
IVH7 = Byte.MIN_VALUE;
}
}

protected final void initIVH8(String s) {
if (!s.trim().isEmpty()) {
IVH8 = Byte.parseByte(s);
} else {
IVH8 = Byte.MIN_VALUE;
}
}

protected final void initIVH9(String s) {
if (!s.trim().isEmpty()) {
IVH9 = Byte.parseByte(s);
} else {
IVH9 = Byte.MIN_VALUE;
}
}

protected final void initMGLIFE(String s) {
if (!s.trim().isEmpty()) {
MGLIFE = Byte.parseByte(s);
} else {
MGLIFE = Byte.MIN_VALUE;
}
}

protected final void initNCH02_DV(String s) {
if (!s.trim().isEmpty()) {
NCH02_DV = Byte.parseByte(s);
} else {
NCH02_DV = Byte.MIN_VALUE;
}
}

protected final void initNCH1215_DV(String s) {
if (!s.trim().isEmpty()) {
NCH1215_DV = Byte.parseByte(s);
} else {
NCH1215_DV = Byte.MIN_VALUE;
}
}

protected final void initNCH34_DV(String s) {
if (!s.trim().isEmpty()) {
NCH34_DV = Byte.parseByte(s);
} else {
NCH34_DV = Byte.MIN_VALUE;
}
}

protected final void initNCH511_DV(String s) {
if (!s.trim().isEmpty()) {
NCH511_DV = Byte.parseByte(s);
} else {
NCH511_DV = Byte.MIN_VALUE;
}
}

protected final void initNEMP_DV(String s) {
if (!s.trim().isEmpty()) {
NEMP_DV = Byte.parseByte(s);
} else {
NEMP_DV = Byte.MIN_VALUE;
}
}

protected final void initNKIDS_DV(String s) {
if (!s.trim().isEmpty()) {
NKIDS_DV = Byte.parseByte(s);
} else {
NKIDS_DV = Byte.MIN_VALUE;
}
}

protected final void initNONEPAR_DV(String s) {
if (!s.trim().isEmpty()) {
NONEPAR_DV = Byte.parseByte(s);
} else {
NONEPAR_DV = Byte.MIN_VALUE;
}
}

protected final void initNPENS_DV(String s) {
if (!s.trim().isEmpty()) {
NPENS_DV = Byte.parseByte(s);
} else {
NPENS_DV = Byte.MIN_VALUE;
}
}

protected final void initRENT(String s) {
if (!s.trim().isEmpty()) {
RENT = Integer.parseInt(s);
} else {
RENT = Integer.MIN_VALUE;
}
}

protected final void initRENTF(String s) {
if (!s.trim().isEmpty()) {
RENTF = Byte.parseByte(s);
} else {
RENTF = Byte.MIN_VALUE;
}
}

protected final void initRENTLL(String s) {
if (!s.trim().isEmpty()) {
RENTLL = Byte.parseByte(s);
} else {
RENTLL = Byte.MIN_VALUE;
}
}

protected final void initRENTP0(String s) {
if (!s.trim().isEmpty()) {
RENTP0 = Byte.parseByte(s);
} else {
RENTP0 = Byte.MIN_VALUE;
}
}

protected final void initRENTP1(String s) {
if (!s.trim().isEmpty()) {
RENTP1 = Byte.parseByte(s);
} else {
RENTP1 = Byte.MIN_VALUE;
}
}

protected final void initRENTP10(String s) {
if (!s.trim().isEmpty()) {
RENTP10 = Byte.parseByte(s);
} else {
RENTP10 = Byte.MIN_VALUE;
}
}

protected final void initRENTP2(String s) {
if (!s.trim().isEmpty()) {
RENTP2 = Byte.parseByte(s);
} else {
RENTP2 = Byte.MIN_VALUE;
}
}

protected final void initRENTP3(String s) {
if (!s.trim().isEmpty()) {
RENTP3 = Byte.parseByte(s);
} else {
RENTP3 = Byte.MIN_VALUE;
}
}

protected final void initRENTP4(String s) {
if (!s.trim().isEmpty()) {
RENTP4 = Byte.parseByte(s);
} else {
RENTP4 = Byte.MIN_VALUE;
}
}

protected final void initRENTP5(String s) {
if (!s.trim().isEmpty()) {
RENTP5 = Byte.parseByte(s);
} else {
RENTP5 = Byte.MIN_VALUE;
}
}

protected final void initRENTP6(String s) {
if (!s.trim().isEmpty()) {
RENTP6 = Byte.parseByte(s);
} else {
RENTP6 = Byte.MIN_VALUE;
}
}

protected final void initRENTP7(String s) {
if (!s.trim().isEmpty()) {
RENTP7 = Byte.parseByte(s);
} else {
RENTP7 = Byte.MIN_VALUE;
}
}

protected final void initRENTP8(String s) {
if (!s.trim().isEmpty()) {
RENTP8 = Byte.parseByte(s);
} else {
RENTP8 = Byte.MIN_VALUE;
}
}

protected final void initRENTP9(String s) {
if (!s.trim().isEmpty()) {
RENTP9 = Byte.parseByte(s);
} else {
RENTP9 = Byte.MIN_VALUE;
}
}

protected final void initXPHSDB(String s) {
if (!s.trim().isEmpty()) {
XPHSDB = Byte.parseByte(s);
} else {
XPHSDB = Byte.MIN_VALUE;
}
}

protected final void initXPMG(String s) {
if (!s.trim().isEmpty()) {
XPMG = Integer.parseInt(s);
} else {
XPMG = Integer.MIN_VALUE;
}
}

public byte getAGECHY_DV() {
return AGECHY_DV;
}

public byte getCDUSE1() {
return CDUSE1;
}

public byte getCDUSE2() {
return CDUSE2;
}

public byte getCDUSE6() {
return CDUSE6;
}

public byte getCDUSE8() {
return CDUSE8;
}

public byte getCDUSE9() {
return CDUSE9;
}

public byte getCDUSE96() {
return CDUSE96;
}

protected double FIHHMNGRS_DV() {
return FIHHMNGRS_DV;
}

public byte getGOR_DV() {
return GOR_DV;
}

public byte getHEATCH() {
return HEATCH;
}

public byte getHHSIZE() {
return HHSIZE;
}

public int getHIDP() {
return HIDP;
}

public int getHSCOST() {
return HSCOST;
}

public byte getHSJB() {
return HSJB;
}

public byte getHSOWR10() {
return HSOWR10;
}

public byte getHSOWR11() {
return HSOWR11;
}

public byte getHSOWR110() {
return HSOWR110;
}

public byte getHSOWR12() {
return HSOWR12;
}

public byte getHSOWR13() {
return HSOWR13;
}

public byte getHSOWR14() {
return HSOWR14;
}

public byte getHSOWR15() {
return HSOWR15;
}

public byte getHSOWR16() {
return HSOWR16;
}

public byte getHSOWR17() {
return HSOWR17;
}

public byte getHSOWR18() {
return HSOWR18;
}

public byte getHSOWR19() {
return HSOWR19;
}

public int getHSVAL() {
return HSVAL;
}

public short getHSYR04() {
return HSYR04;
}

public short getHSYRBUY() {
return HSYRBUY;
}

public byte getINTDATED() {
return INTDATED;
}

public byte getINTDATEM() {
return INTDATEM;
}

public byte getIVH1() {
return IVH1;
}

public byte getIVH10() {
return IVH10;
}

public byte getIVH2() {
return IVH2;
}

public byte getIVH3() {
return IVH3;
}

public byte getIVH4() {
return IVH4;
}

public byte getIVH5() {
return IVH5;
}

public byte getIVH6() {
return IVH6;
}

public byte getIVH7() {
return IVH7;
}

public byte getIVH8() {
return IVH8;
}

public byte getIVH9() {
return IVH9;
}

public byte getMGLIFE() {
return MGLIFE;
}

public byte getNCH02_DV() {
return NCH02_DV;
}

public byte getNCH1215_DV() {
return NCH1215_DV;
}

public byte getNCH34_DV() {
return NCH34_DV;
}

public byte getNCH511_DV() {
return NCH511_DV;
}

public byte getNEMP_DV() {
return NEMP_DV;
}

public byte getNKIDS_DV() {
return NKIDS_DV;
}

public byte getNONEPAR_DV() {
return NONEPAR_DV;
}

public byte getNPENS_DV() {
return NPENS_DV;
}

public int getRENT() {
return RENT;
}

public byte getRENTF() {
return RENTF;
}

public byte getRENTLL() {
return RENTLL;
}

public byte getRENTP0() {
return RENTP0;
}

public byte getRENTP1() {
return RENTP1;
}

public byte getRENTP10() {
return RENTP10;
}

public byte getRENTP2() {
return RENTP2;
}

public byte getRENTP3() {
return RENTP3;
}

public byte getRENTP4() {
return RENTP4;
}

public byte getRENTP5() {
return RENTP5;
}

public byte getRENTP6() {
return RENTP6;
}

public byte getRENTP7() {
return RENTP7;
}

public byte getRENTP8() {
return RENTP8;
}

public byte getRENTP9() {
return RENTP9;
}

public byte getXPHSDB() {
return XPHSDB;
}

public int getXPMG() {
return XPMG;
}

}
